##com.oracle.truffle.r.test.rffi.TestUserRNG.testUserRNG
#{ dyn.load("com.oracle.truffle.r.test.native/urand/lib/liburand.so"); RNGkind("user"); print(RNGkind()); set.seed(4567); runif(10) }
[1] "user-supplied" "Inversion"
 [1] 0.45336386 0.38848030 0.94576608 0.11726267 0.21542351 0.08672997
 [7] 0.35201276 0.16919220 0.93579263 0.26084486

##com.oracle.truffle.r.test.rpackages.TestRPackages.testLoadTestRFFI
#{ library("testrffi", lib.loc = "com.oracle.truffle.r.test/rpackages/testrlibs_user"); add_double(2, 3) }
[1] 5

##com.oracle.truffle.r.test.rpackages.TestRPackages.testLoadTestRFFI
#{ library("testrffi", lib.loc = "com.oracle.truffle.r.test/rpackages/testrlibs_user"); add_int(2L, 3L) }
[1] 5

##com.oracle.truffle.r.test.rpackages.TestRPackages.testLoadTestRFFI
#{ library("testrffi", lib.loc = "com.oracle.truffle.r.test/rpackages/testrlibs_user"); v <- createIntVector(2); v[1] <- 1; v[2] <- 2; v }
[1] 1 2

##com.oracle.truffle.r.test.rpackages.TestRPackages.testLoadVanilla
#{ library("vanilla", lib.loc = "com.oracle.truffle.r.test/rpackages/testrlibs_user"); vanilla() }
[1] "A vanilla R package"

##com.oracle.truffle.r.test.ser.TestUnserializeFromGnuR.testVectors
#{ print(.Internal(unserializeFromConn(gzfile("com.oracle.truffle.r.test/bin/com/oracle/truffle/r/test/ser/data/list2.rds"), NULL))) }
$one
[1] "1"

$two
[1] "2"


##com.oracle.truffle.r.test.ser.TestUnserializeFromGnuR.testVectors
#{ print(.Internal(unserializeFromConn(gzfile("com.oracle.truffle.r.test/bin/com/oracle/truffle/r/test/ser/data/vector1.rds"), NULL))) }
[1] "1" "2" "3"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack("G", con); clearPushBack(con); pushBackLength(con) }
[1] 0

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack("G", con); pushBackLength(con) }
[1] 1

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack("G", con); readLines(con, 1) }
[1] "G"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack("G", con); readLines(con, 2) }
[1] "G" "a"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack("G", con, newLine=FALSE); readLines(con, 1) }
[1] "Ga"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack("G", con, newLine=FALSE); readLines(con, 2) }
[1] "Ga" "b"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G", "H"), con); pushBackLength(con) }
[1] 2

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G", "H"), con); readLines(con, 1) }
[1] "G"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G", "H"), con); readLines(con, 2) }
[1] "G" "H"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G", "H"), con, newLine=FALSE); pushBackLength(con) }
[1] 2

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G", "H"), con, newLine=FALSE); readLines(con, 1) }
[1] "GHa"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G", "H"), con, newLine=FALSE); readLines(con, 2) }
[1] "GHa" "b"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G\nH"), con); pushBackLength(con) }
[1] 1

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G\nH"), con); readLines(con, 1) }
[1] "G"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G\nH"), con); readLines(con, 2) }
[1] "G" "H"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G\nH"), con, newLine=FALSE); pushBackLength(con) }
[1] 1

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G\nH"), con, newLine=FALSE); readLines(con, 1) }
[1] "G"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBack(c("G\nH"), con, newLine=FALSE); readLines(con, 2) }
[1] "G"  "Ha"

##com.oracle.truffle.r.test.simple.TestConnections.testPushBack
#{ con<-textConnection(c("a","b","c","d")); pushBackLength(con) }
[1] 0

##com.oracle.truffle.r.test.simple.TestConnections.testTextReadConnection
#{ con <- textConnection(c("1", "2", "3","4")); readLines(con) }
[1] "1" "2" "3" "4"

##com.oracle.truffle.r.test.simple.TestConnections.testTextReadConnection
#{ con <- textConnection(c("1", "2", "3","4")); readLines(con, 2) }
[1] "1" "2"

##com.oracle.truffle.r.test.simple.TestConnections.testTextReadConnection
#{ con <- textConnection(c("1", "2", "3","4")); readLines(con, 2); readLines(con, 2) }
[1] "3" "4"

##com.oracle.truffle.r.test.simple.TestConnections.testTextReadConnection
#{ con <- textConnection(c("1", "2", "3","4")); readLines(con, 2); readLines(con, 2); readLines(con, 2) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testArithmeticUpdate
#{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- 1L + x ; x } ; f(FALSE) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testArithmeticUpdate
#{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- x + 1L ; x } ; f(FALSE) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testArithmeticUpdate
#{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- x - 1L ; x } ; f(FALSE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0+1i)/0) * ((0+1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0-1i)/0) * ((-1-1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0-1i)/0) * ((0+1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0-1i)/0) * ((0-1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0-1i)/0) * ((1-1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (-1+0i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (-1-1i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (0+0i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (0+1i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (1+0i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (1+1i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (1+2i) / ((0-0i)/(0+0i)) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ 0/0 - 4i }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ 0^(-1+1i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ 4i + 0/0  }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ a <- 1 + 2i; b <- 0/0 - 4i; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-1)^(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-1/0)^(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-1/0)^3 }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-2)^(-1/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-2)^(1/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (0/0)^(1/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (1)^(-1/0) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (1/0)^(-4) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (1/0)^(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 0^(-1/0) }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 0^(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 0^(1/0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 1^(0/0) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 1^(1/0) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{(-1/0)^(-4) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3 %/% -2 }
[1] -2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3 %/% 0 }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3 %/% 2 }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3L %/% -2L }
[1] -2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3L %/% 2L }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerOverflowNoWarning
#{ 3L %% 0L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerOverflowNoWarning
#{ 3L %/% 0L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerOverflowNoWarning
#{ c(3L,3L) %% 0L }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerOverflowNoWarning
#{ c(3L,3L) %/% 0L }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatrices
#{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m+1L }
     [,1] [,2] [,3]
[1,]    2    3    4
[2,]    5    6    7

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatrices
#{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m+m }
     [,1] [,2] [,3]
[1,]    2    4    6
[2,]    8   10   12

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatrices
#{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m-1 }
     [,1] [,2] [,3]
[1,]    0    1    2
[2,]    3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatrices
#{ z<-matrix(12)+1 ; z }
     [,1]
[1,]   13

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesOuterProduct
#{ 1:3 %*% as.raw(c(1,2,3)) }
Error in 1:3 %*% as.raw(c(1, 2, 3)) :
  requires numeric/complex matrix/vector arguments

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesOuterProduct
#{ 1:3 %*% c(TRUE,FALSE,TRUE) }
     [,1]
[1,]    4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesOuterProduct
#{ 1:3 %o% 1:2 }
     [,1] [,2]
[1,]    1    2
[2,]    2    4
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesOuterProduct
#{ 1:4 %*% 1:3 }
Error in 1:4 %*% 1:3 : non-conformable arguments

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesOuterProduct
#{ as.raw(1:3) %o% 1:3 }
Error in as.vector(X) %*% t(as.vector(Y)) :
  requires numeric/complex matrix/vector arguments

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesPrecedence
#{ 10 / 1:3 %*% 3:1 }
     [,1]
[1,]    1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesPrecedence
#{ x <- 1:2 ; dim(x) <- c(1,1,2) ; y <- 2:3 ; dim(y) <- c(1,1,2) ; x + y }
, , 1

     [,1]
[1,]    3

, , 2

     [,1]
[1,]    5


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ 1:3 %*% matrix(4,nrow=2,ncol=5) }
Error in 1:3 %*% matrix(4, nrow = 2, ncol = 5) :
  non-conformable arguments

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ a <- array(1:9, dim=c(3,1,3)) ;  a %*% 1:9 }
     [,1]
[1,]  285

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ a<-matrix(1:6, ncol=2) ; b<-matrix(11:16, nrow=2) ; a %*% b }
     [,1] [,2] [,3]
[1,]   59   69   79
[2,]   82   96  110
[3,]  105  123  141

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ as.raw(1:3) %*% 1:3 }
Error in as.raw(1:3) %*% 1:3 :
  requires numeric/complex matrix/vector arguments

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ double() %*% double() }
     [,1]
[1,]    0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(0,0) ; m %*% m }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(0,4) ; m %*% t(m) }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(0,4) ; n <- matrix(1:4,4) ; m %*% n }
     [,1]

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(0,4) ; t(m) %*% m }
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(4,0) ; n <- matrix(1:4,ncol=4) ; n %*% m }

[1,]

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- matrix(c(1,2,3,0/0), nrow=4) ; m %*% 1:4 }
     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    2    4    6    8
[3,]    3    6    9   12
[4,]  NaN  NaN  NaN  NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- matrix(c(NA,1,0/0,2), nrow=2) ; 1:2 %*% m }
     [,1] [,2]
[1,]   NA  NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- matrix(c(NA,1,4,2), nrow=2) ; t(m) %*% m }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   20

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m<-matrix(1:3, ncol=1) ; m %*% 1:2 }
     [,1] [,2]
[1,]    1    2
[2,]    2    4
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m<-matrix(1:3, nrow=1) ; 1:2 %*% m }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m<-matrix(1:6, nrow=2) ; 1:2 %*% m }
     [,1] [,2] [,3]
[1,]    5   11   17

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m<-matrix(1:6, nrow=2) ; m %*% 1:3 }
     [,1]
[1,]   22
[2,]   28

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ matrix(2,nrow=2,ncol=3) %*% matrix(4,nrow=1,ncol=5) }
Error in matrix(2, nrow = 2, ncol = 3) %*% matrix(4, nrow = 1, ncol = 5) :
  non-conformable arguments

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ matrix(4,nrow=2,ncol=5) %*% 1:4 }
Error in matrix(4, nrow = 2, ncol = 5) %*% 1:4 :
  non-conformable arguments

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ matrix(c(3,1,0/0,2), nrow=2) %*% matrix(1:6,nrow=2) }
     [,1] [,2] [,3]
[1,]  NaN  NaN  NaN
[2,]    5   11   17

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ x <- 1:3 %*% 9:11 ; x[1] }
[1] 62

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3 %% -2 }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3 %% 0 }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3 %% 2 }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3L %% -2L }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3L %% 2L }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ "1" && c(1, 0) }
Error in "1" && c(1, 0) : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ 1.0 && c(1+1i, 0+0i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ FALSE && FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ FALSE && NA }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ FALSE && TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ NA && FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ NA && NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ NA && TRUE }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ TRUE && FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ TRUE && NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ TRUE && TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ TRUE && c(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ as.raw(c(1, 0)) && TRUE }
Error in as.raw(c(1, 0)) && TRUE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c("1", "0") && TRUE }
Error in c("1", "0") && TRUE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1+1i, 0+0i) && 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1+1i, 0+0i) && c(1+1i, 0+0i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1, 0) && "1" }
Error in c(1, 0) && "1" : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1, 0) && 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1, 0) && 1+1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1.0, 0.0) && 1.0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1.1, 0.0) && c(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(TRUE, FALSE) && c(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(TRUE, FALSE) && c(TRUE, FALSE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; FALSE && f(FALSE) ; x } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA && f(NA) ; x } 
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; c(FALSE, TRUE) && f(FALSE) ; x } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(1,2) ; f(logical(),4) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(1,2) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(2+3i,1/0) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(2+3i,logical()) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(double(),2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(integer(),2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(TRUE, c(TRUE,TRUE,FALSE)) ; f(1,2) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ as.raw(c(1,4)) | as.raw(c(1,5,4)) }
[1] 01 05 05
Warning message:
In as.raw(c(1, 4)) | as.raw(c(1, 5, 4)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ as.raw(c(1,5,4)) | as.raw(c(1,4)) }
[1] 01 05 05
Warning message:
In as.raw(c(1, 5, 4)) | as.raw(c(1, 4)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ c(TRUE, FALSE, FALSE) & c(TRUE,TRUE) }
[1]  TRUE FALSE FALSE
Warning message:
In c(TRUE, FALSE, FALSE) & c(TRUE, TRUE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ c(TRUE, TRUE) & c(TRUE, FALSE, FALSE) }
[1]  TRUE FALSE FALSE
Warning message:
In c(TRUE, TRUE) & c(TRUE, FALSE, FALSE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ c(a=TRUE, TRUE) | c(TRUE, b=FALSE, FALSE) }
        b
TRUE TRUE TRUE
Warning message:
In c(a = TRUE, TRUE) | c(TRUE, b = FALSE, FALSE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ 0 || 0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ 0 || NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ 1 || 0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ 1.1 || 3.15 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ NA || 0 }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ NA || 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA || f(NA) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; TRUE || f(FALSE) ; x } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" && 1 }
Error in "hello" && 1 : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" && 1L }
Error in "hello" && 1L : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" && TRUE }
Error in "hello" && TRUE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" || 1 }
Error in "hello" || 1 : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" || 1L }
Error in "hello" || 1L : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" || FALSE }
Error in "hello" || FALSE : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" || TRUE }
Error in "hello" || TRUE : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0 && "hello" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0 || "hello" }
Error in 0 || "hello" : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0 || NULL }
Error in 0 || NULL : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0 || as.raw(1) }
Error in 0 || as.raw(1) : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0+0i || FALSE}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0.0 && "hello" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0.1 && "hello" }
Error in 0.1 && "hello" : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0.1 && NULL }
Error in 0.1 && NULL : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0.1 && as.raw(1) }
Error in 0.1 && as.raw(1) : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0L || "hello" }
Error in 0L || "hello" : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1 && "hello" }
Error in 1 && "hello" : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1 || "hello" }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1+2i && 0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1+2i && TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1+2i || 0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1+2i || 1.0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1.0 && 0+0i}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1.1 || "hello" }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ FALSE && "hello" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ FALSE || "hello" }
Error in FALSE || "hello" : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ FALSE || 1+2i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ NULL && 1 }
Error in NULL && 1 : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ NULL || 1 }
Error in NULL || 1 : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ TRUE && "hello" }
Error in TRUE && "hello" : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ TRUE && 0+0i}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ TRUE || "hello" }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ as.raw(1) && 1 }
Error in as.raw(1) && 1 : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ as.raw(1) || 1 }
Error in as.raw(1) || 1 : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ as.raw(10) && "hi" }
Error in as.raw(10) && "hi" : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ as.raw(c(1,4)) | raw() }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ c(TRUE,FALSE) | logical() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ character(0) && FALSE }
Error in character(0) && FALSE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ character(0) && TRUE }
Error in character(0) && TRUE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ character(0) || FALSE }
Error in character(0) || FALSE : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ character(0) || TRUE }
Error in character(0) || TRUE : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical() | c(TRUE,FALSE) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) && FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) && TRUE }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) && logical(0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) || FALSE }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) || TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) || logical(0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ raw() | as.raw(c(1,4))}
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ (1:2)[3] + 2L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ (1:2)[3] / 2L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ 1L / 2L }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ 2L + (1:2)[3] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ 2L / (1:2)[3] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- (1:2)[3] ; b <- 2 ; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- (1:2)[3] ; b <- 2L ; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- (1:2)[3] ; b <- 2L ; a / b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- 2 ; b <- (1:2)[3] ; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- 2L ; b <- (1:2)[3] ; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- 2L ; b <- (1:2)[3] ; a / b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f((1:2)[3], 2L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,(1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,4) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,4L) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f((1:2)[3], 2L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f((1:2)[3],2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2,(1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,(1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,4) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,4L) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1L, 2L) ; f(1, 2) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { (1:2)[3] + b } ; f(1) ; f(2L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { (1:2)[3] + b } ; f(1L) ; f(2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 + b } ; f(1L) ; f(TRUE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 / b } ; f(1) ; f(1L) ; f(4) }
[1] 0.25

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 / b } ; f(1) ; f(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 / b } ; f(1L) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 / b } ; f(TRUE) ; f(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L + b } ; f(1L) ; f(2) ; f((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L + b } ; f(1L) ; f(2) ; f(TRUE) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L + b } ; f(1L) ; f(2) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L / b } ; f(1L) ; f(2) ; f((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L / b } ; f(1L) ; f(2) ; f(TRUE) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L / b } ; f(1L) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { FALSE + b } ; f(1L) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b + 1 } ; f(1L) ; f(TRUE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b + 4L } ; f(1L) ; f(2) ; f((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b + 4L } ; f(1L) ; f(2) ; f(TRUE) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b + FALSE } ; f(1L) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 1 } ; f(1) ; f(1L) ; f(4) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 2 } ; f(1) ; f(1L) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 2L } ; f(1L) ; f(2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 4 } ; f(1L) ; f(1) }
[1] 0.25

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 4L } ; f(1L) ; f(2) ; f((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 4L } ; f(1L) ; f(2) ; f(TRUE) }
[1] 0.25

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ ((1+0i)/(0+0i)) ^ (-3) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ ((1+1i)/(0+0i)) ^ (-3) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (0+2i)^0 }
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i) / ((0-1i)/(0+0i)) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i)*(3+4i) }
[1] -5+10i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i)^(-2) }
[1] -0.12-0.16i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i)^0 }
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i)^2 }
[1] -3+4i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (3+2i)^2 }
[1] 5+12i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ 1/((1+0i)/(0+0i)) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(-1+2i,1.1+2.1i) }
[1] -1.0+2.0i  1.1+2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1+12i,1.1+2.1i) }
[1] 1.0+12.0i 1.1+ 2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1+2i,1.1+12.1i) }
[1] 1.0+ 2.0i 1.1+12.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1+2i,1.1+2.1i) }
[1] 1.0+2.0i 1.1+2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1+2i,11.1+2.1i) }
[1]  1.0+2.0i 11.1+2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1-2i,1+22i) }
[1] 1- 2i 1+22i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(11+2i,1.1+2.1i) }
[1] 11.0+2.0i  1.1+2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a + b } ; f(1+2i, 3) ; f(1, 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a + b } ; f(1+2i, 3+4i) ; f(1, 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1+2i) ; f(TRUE, 2)  }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a + b } ; f(2, 3+4i) ; f(1, 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2+1i,(1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1 / b } ; f(1+1i) ; f(1L)  }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1i / b } ; f(1) ; f(1L) ; f(4) }
[1] 0+0.25i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1i / b } ; f(1) ; f(1L) }
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1i / b } ; f(1+1i) ; f(1L) }
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1i / b } ; f(TRUE) ; f(1L) }
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { b / 2 } ; f(1+1i) ; f(1L)  }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { b / 4i } ; f(1) ; f(1L) }
[1] 0-0.25i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ round( ((1+1i)/(0+1i)) ^ (-3.54), digits=5) }
[1] -0.27428+0.10364i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ round( (1+2i)^(3+4i), digits=5 ) }
[1] 0.12901+0.03392i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- 1+2i; y <- 3+4i; round(x*x*y/(x+y), digits=5) }
[1] -1.92308+2.88462i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- 1+2i; y <- 3+4i; x*y }
[1] -5+10i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- 1+2i; y <- 3+4i; x-y }
[1] -2-2i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- 1+2i; y <- 3+4i; x/y }
[1] 0.44+0.08i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; round(y/x, digits=5) }
[1] -1.00000+1.00000i  0.34862+0.50459i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; y*x }
[1]  -1- 7i -62-25i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; y+x }
[1]  2- 1i -1+15i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; y-x }
[1]  4+3i -7-5i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1.5-1i,-1.3-1i) ; y <- c(0+0i, 0+0i) ; y*y+x }
[1] -1.5-1i -1.3-1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1.5-1i,-1.3-1i) ; y <- c(0+0i, 0+0i) ; y-x }
[1] 1.5+1i 1.3+1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsRange
#{ f <- function(a, b) { a + b } ; f(1:2, 3:4) ; f(c(1,2), 3:4) }
[1] 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsRange
#{ f <- function(a, b) { a + b } ; f(1:2, c(3,4)) ; f(c(1,2), 3:4) }
[1] 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsRange
#{ f <- function(a, b) { a + b } ; f(c(1,2), c(3,4)) ; f(c(1,2), 3:4) }
[1] 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ ( 1+1)*(3+2) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 0x10 + 0x10L + 1.28 }
[1] 33.28

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1+FALSE<=0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1+NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1+TRUE }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L*NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L+1 }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L+1L }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L+FALSE<=0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L+TRUE }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 2L^10L }
[1] 1024

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ TRUE+TRUE+TRUE*TRUE+FALSE+4 }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ -(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ -(1/0) }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ ----3 }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ ---3 }
[1] -3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ --3 }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ -3 }
[1] -3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(1) ; f(1L) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(1:3) ; f(1L) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(1:3) ; f(TRUE) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(1L) ; f(1) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(1L) ; f(TRUE) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(TRUE) ; f(1L) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ z <- double() ; -z }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ z <- integer() ; -z }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ z <- logical() ; -z }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunctionComplex
#{ f <- function(z) { -z } ; f(1+1i) ; f(1L) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunctionComplex
#{ f <- function(z) { -z } ; f(1:3) ; f(c((0+0i)/0,1+1i)) }
[1] NaN+NaNi  -1-  1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunctionComplex
#{ f <- function(z) { -z } ; f(1L) ; f(1+1i) }
[1] -1-1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunctionComplex
#{ z <- (1+1i)[0] ; -z }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusComplex
#{ -((0+1i)/0)  }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusComplex
#{ -((1+0i)/0)  }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusComplex
#{ -(2+1i)  }
[1] -2-1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusComplex
#{ -c((1+0i)/0,2) }
[1] NaN+NaNi  -2+  0i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusDimensions
#{ xx <- double(0); dim(xx) <- c(0,0); dim(-xx) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusDimensions
#{ xx <- double(1); dim(xx) <- c(1,1); dim(-xx) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusErrors
#{ f <- function(z) { -z } ; f(1:3) ; f("hello") }
Error in -z : invalid argument to unary operator

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusErrors
#{ z <- "hello" ; -z }
Error in -z : invalid argument to unary operator

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusErrors
#{ z <- c("hello","hi") ; -z }
Error in -z : invalid argument to unary operator

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusVector
#{ -(1[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNot
#{ !FALSE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNot
#{ !NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNot
#{ !TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotDimensions
#{ xx <- double(0); dim(xx) <- c(0,0); dim(!xx) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotDimensions
#{ xx <- double(1); dim(xx) <- c(1,1); dim(!xx) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotError
#{ l <- c("hello", "hi") ; !l }
Error in !l : invalid argument type

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotError
#{ l <- function(){1} ; !l }
Error in !l : invalid argument type

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotError
#{ l <- list(1); !l }
Error in !l : invalid argument type

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotError
#{ x<-1:4; dim(x)<-c(2, 2); names(x)<-101:104; attr(x, "dimnames")<-list(c("201", "202"), c("203", "204")); attr(x, "foo")<-"foo"; y<-!x; attributes(y) }
$names
[1] "101" "102" "103" "104"

$dim
[1] 2 2

$dimnames
$dimnames[[1]]
[1] "201" "202"

$dimnames[[2]]
[1] "203" "204"



##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotPropagate
#{ x<-1:4; dim(x)<-c(2, 2); names(x)<-101:104; attr(x, "dimnames")<-list(201:202, 203:204); attr(x, "foo")<-"foo"; y<-!x; attributes(y) }
$names
[1] "101" "102" "103" "104"

$dim
[1] 2 2

$dimnames
$dimnames[[1]]
[1] "201" "202"

$dimnames[[2]]
[1] "203" "204"



##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ a <- as.raw(12) ; !a }
[1] f3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ a <- as.raw(201) ; !a }
[1] 36

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ f <- function(arg) { !arg } ; f(as.raw(10)) ; f(as.raw(1:3)) }
[1] fe fd fc

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ f <- function(arg) { !arg } ; f(as.raw(10)) ; f(as.raw(c(a=1,b=2))) }
[1] fe fd

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ f <- function(arg) { !arg } ; f(as.raw(10)) ; f(matrix(as.raw(1:4),nrow=2 )) }
     [,1] [,2]
[1,]   fe   fc
[2,]   fd   fb

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ f <- function(arg) { !arg } ; f(as.raw(10)) ; x <- as.raw(10:11) ; attr(x, "my") <- 1 ; f(x) }
[1] f5 f4
attr(,"my")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ l <- list(); !l }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotVector
#{ !((0-3):3) }
[1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotVector
#{ !c(1,2,3,4,0,0,NA) }
[1] FALSE FALSE FALSE FALSE  TRUE  TRUE    NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotVector
#{ !c(TRUE,TRUE,FALSE,NA) }
[1] FALSE FALSE  TRUE    NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ 1:4 & c(FALSE,TRUE) }
[1] FALSE  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ FALSE & FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ FALSE & NA }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ FALSE & TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ NA & FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ NA & NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ NA & TRUE }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ TRUE & FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ TRUE & NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ TRUE & TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ a <- as.raw(201) ; b <- as.raw(1) ; a & b }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; FALSE & f(FALSE) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA & f(NA) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 0) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 0L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 3+4i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(FALSE, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(as.raw(10), as.raw(11)) }
[1] 0a

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, FALSE) ; f(1L, 3+4i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, FALSE) ; f(TRUE, 3+4i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; dim(x)<-c(2,2); y<-21:28; x | y }
Error: dims [product 4] do not match the length of object [8]

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; attr(x, "foo")<-"foo"; attributes(x | TRUE) }
$names
[1] "101" "102" "103" "104"


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; attr(x, "foo")<-"foo"; y<-21:24; names(y)<-121:124; attributes(x | y) }
$names
[1] "101" "102" "103" "104"


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; x | TRUE }
 101  102  103  104
TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:24; names(y)<-121:124; x | y }
 101  102  103  104
TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; attributes(x | y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128;  attributes(y | x) }
$names
[1] "121" "122" "123" "124" "125" "126" "127" "128"


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128; x | y }
 121  122  123  124  125  126  127  128
TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; y<-21:24; names(y)<-121:124; attributes(x | y) }
$names
[1] "121" "122" "123" "124"


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-as.raw(1:4); names(x)<-101:104; y<-as.raw(21:24); names(y)<-121:124; x | y }
101 102 103 104
15 16 17 1c

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalComplex
#{ 1+2i & 0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalComplex
#{ 1+2i | 0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ 0 | 0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ 0 | NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ 1 | 0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ 1.1 | 3.15 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ NA | 0 }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ NA | 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ a <- as.raw(200) ; b <- as.raw(1) ; a | b }
[1] c9

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ a <- as.raw(200) ; b <- as.raw(255) ; a | b }
[1] ff

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA | f(NA) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; TRUE | f(FALSE) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOrAsFunction
#{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(4, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOrAsFunction
#{ f <- function(a,b) { a | b } ; f(c(TRUE, FALSE), FALSE) ; f(1L, 3+4i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOrAsFunction
#{ f <- function(a,b) { a | b } ; f(c(TRUE, FALSE), FALSE) ; f(c(FALSE,FALSE), 3+4i) }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ TRUE | "hello" }
Error in TRUE | "hello" :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(FALSE, as.raw(10)) }
Error in a & b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(as.raw(10), 12) }
Error in a & b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a | b } ; f(3, as.raw(c(1,4))) }
Error in a | b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), 3) }
Error in a | b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(FALSE, as.raw(4)) }
Error in a | b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(as.raw(4), FALSE) }
Error in a | b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ c(1L,2L,3L)*c(10,11,12) }
[1] 10 22 36

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ c(1L,2L,3L)*c(10L) }
[1] 10 20 30

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ c(1L,2L,3L)+TRUE }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ c(1L,2L,3L,4L)-c(TRUE,FALSE) }
[1] 0 2 2 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ ia<-c(1L,2L);ib<-c(3L,4L);d<-c(5,6);ia+ib+d }
[1]  9 12

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-1+NA; c(1,2,3,4)+c(x,10) }
[1] NA 12 NA 14

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2);y<-c(3,4,5,6);x*y }
[1]  3  8  5 12

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2);y<-c(3,4,5,6);x+y }
[1] 4 6 6 8

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2);z<-c();x==z }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x*2 }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x*x+x }
[1]  2  6 12

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x+2 }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x+FALSE }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x+TRUE }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsComplex
#{ 1:4+c(1,2+2i) }
[1] 2+0i 4+2i 4+0i 6+2i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsComplex
#{ c(1,2+2i)+1:4 }
[1] 2+0i 4+2i 4+0i 6+2i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsEmptyResult
#{ 1+integer() }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsEmptyResult
#{ integer()+1 }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsIntegerDivision
#{ c(3,4) %/% 2 }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsLengthWarning
#{ 1:2+1:3 }
[1] 2 4 4
Warning message:
In 1:2 + 1:3 :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsLengthWarning
#{ 1:3*1:2 }
[1] 1 4 3
Warning message:
In 1:3 * 1:2 :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsLengthWarning
#{ 1:3+c(1,2+2i) }
[1] 2+0i 4+2i 4+0i
Warning message:
In 1:3 + c(1, 2 + (0+2i)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsLengthWarning
#{ c(1,2+2i)+1:3 }
[1] 2+0i 4+2i 4+0i
Warning message:
In c(1, 2 + (0+2i)) + 1:3 :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsMatrixDimsDontMatch
#{ m <- matrix(nrow=2, ncol=2, 1:4) ; m + 1:16 }
Error: dims [product 4] do not match the length of object [16]

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsModulo
#{ c(3,4) %% 2 }
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsModulo
#{ c(3,4) %% c(2,5) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1 + c(1L, NA, 3L) }
[1]  2 NA  4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1:2+c(NA,NA,NA,NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1:3+NA }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1:3+c(NA, NA, NA) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1:4+c(NA, NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ NA + c(1, 2, 3) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ NA+1:3 }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ NA+c(1L, 2L, 3L) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1, 2, 3) + NA }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L, 2L, 3L)+NA }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,2L)+c(NA,NA,NA,NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,2L,3L)+c(NA, NA, NA) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,2L,3L,4L)+c(NA, NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,NA) + c(2,3) }
[1]  3 NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,NA)+1 }
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(2,3) + c(1L,NA)}
[1]  3 NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA)+1:4 }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA)+c(1L,2L,3L,4L) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA,NA)+1:3 }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA,NA)+c(1L,2L,3L) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA,NA,NA)+1:2 }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA,NA,NA)+c(1L,2L) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNonConformable
#{ x <- 1:2 ; dim(x) <- 1:2 ; y <- 2:3 ; dim(y) <- 2:1 ; x + y }
Error in x + y : non-conformable arrays

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNonConformable
#{ x <- 1:2 ; dim(x) <- 1:2 ; y <- 2:3 ; dim(y) <- c(1,1,2) ; x + y }
Error in x + y : non-conformable arrays

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ a <- c(1,3) ; a ^ 3 }
[1]  1 27

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ a <- c(1,3) ; b <- c(2,4) ; a ^ b }
[1]  1 81

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ c(1,3) %/% c(2,4) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ c(1,3) - 4 }
[1] -3 -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ c(1,3) / c(2,4) }
[1] 0.50 0.75

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ a <- c(1+1i,3+2i) ; a - (4+3i) }
[1] -3-2i -1-1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ c(1+1i,3+2i) * c(1,2) }
[1] 1+1i 6+4i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ c(1+1i,3+2i) / 2 }
[1] 0.5+0.5i 1.5+1.0i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ c(1,2,3+1i)^3 }
[1]  1+ 0i  8+ 0i 18+26i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ round( 3^c(1,2,3+1i), digits=5 ) }
[1]  3.00000+ 0.00000i  9.00000+ 0.00000i 12.28048+24.04558i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ round(c(1+1i,2+3i)^c(1+1i,3+4i), digits = 5) }
[1]  0.27396+0.58370i -0.20455+0.89662i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ z <- c(-1.5-1i,10) ; (z * z)[1] }
[1] 1.25+3i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ z <- c(1+1i,3+2i) ; z * c(1,2) }
[1] 1+1i 6+4i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1 + 1:2 }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + 1 }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + 2L }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + 3:4 }
[1] 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + c(1,2) }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + c(1,2,3,4) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + c(1L, 2L) }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:4 + c(1L, 2L) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:4+c(1,2) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1L + 1:2 }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1L + c(1,2) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 2L + 1:2 }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 2L + c(1L, 2L) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 4:3 + 2L }
[1] 6 5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1,2) + 1:2 }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1,2)+1:4 }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1,2,3,4) + 1:2 }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1,2,3,4) + c(1L,2L) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1L, 2L) + 1:4 }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1L, 2L) + 2L }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1L,2L) + c(1,2,3,4) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
# xor(FALSE, FALSE) 
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
# xor(FALSE, TRUE) 
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
# xor(TRUE, FALSE) 
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
# xor(TRUE, TRUE) 
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
#{ xor(0:2, 2:4) }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
#{ xor(0:2, 2:7) }
[1]  TRUE FALSE FALSE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
#{ xor(7, 42) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dim(x[0,0,0]) }
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")) ;x[,0,] }
, , e


a
b

, , f


a
b


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")) ;x[1,1,NA] }
<NA> <NA>
  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")) ;x[1,1,] }
e f
1 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")); x[1,1,c(1,NA,1)] }
   e <NA>    e
   1   NA    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")); x[NA,1,c(1,NA,1)] }
      e <NA>  e
<NA> NA   NA NA
<NA> NA   NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); x[0,0,1] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); x[1,1,NA] }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); x[1,1,c(1,NA,1)] }
[1]  1 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); x[NA,1,c(1,NA,1)] }
     [,1] [,2] [,3]
[1,]   NA   NA   NA
[2,]   NA   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(2,2,4); dim(x[0,-1,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(2,2,4); x[,1,1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c("a", "b", "c", "d"), "z", c("e", "f", "g", "h")); dimnames(x[-1,1,-1]) }
[[1]]
[1] "b" "c" "d"

[[2]]
[1] "f" "g" "h"


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c("a", "b", "c", "d"), NULL, c("e", "f", "g", "h")); x[-1,1,-1] }
  f  g  h
b 6 10 14
c 7 11 15
d 8 12 16

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c("a", "b", "c", "d"), NULL, c("e", "f", "g", "h")); x[-1,1,1] }
b c d
2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:256; dim(x)<-c(4,4,4,4); dim(x[1,0, 1,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:256; dim(x)<-c(4,4,4,4); dim(x[1,1, 0,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dim(x[-1,1,1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(NULL, c("x", "y"), c("e", "f", "g", "h")); x[-1,1,1] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c("a", "b", "c", "d"), NULL, c("e", "f", "g", "h")); x[-1,,-1] }
, , f

  [,1] [,2]
b   10   14
c   11   15
d   12   16

, , g

  [,1] [,2]
b   18   22
c   19   23
d   20   24

, , h

  [,1] [,2]
b   26   30
c   27   31
d   28   32


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c("a", "b", "c", "d"), c("x", "y"), c("e", "f", "g", "h")); x[-1,,-1] }
, , f

   x  y
b 10 14
c 11 15
d 12 16

, , g

   x  y
b 18 22
c 19 23
d 20 24

, , h

   x  y
b 26 30
c 27 31
d 28 32


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c("a", "b", "c", "d"), c("x", "y"), c("e", "f", "g", "h")); x[1,1,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,0, 1,-1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, 0,-1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); dim(x[0,-1,-1]) }
[1] 0 3 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); dim(x[0,1,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); dim(x[1,0,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); x[-1,-1,1] }
     [,1] [,2] [,3]
[1,]    6   10   14
[2,]    7   11   15
[3,]    8   12   16

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); x[-1,1,3] }
[1] 34 35 36

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); x[1,1,3] }
[1] 33

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(1,2,4); dim(x[0,,-1]) }
[1] 0 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(1,2,4); dim(x[0,1,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(1,2,4); dim(x[1,0,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(1,2,4); dim(x[1,0,3]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[1,0,1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1, 1] }
Error in x[1, 1, 1, 1] : incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(2,2,2); x[42,1,1] }
Error in x[42, 1, 1] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(2,2,2); x[[, 1, 1]] }
Error in x[[, 1, 1]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a <- array(); dim(a) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a = array(); is.na(a[1]) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a = array(); is.null(dimnames(a)); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a = array(); length(a) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a = array(1:10, dim = c(2,6)); length(a) }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ array(NA, dim=c(-2,-2)); }
Error in array(NA, dim = c(-2, -2)) : the dims contain negative values

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ array(NA, dim=c(-2,2)); }
Error in array(NA, dim = c(-2, 2)) :
  negative length vectors are not allowed

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ c <- array(c(3+2i, 5+0i, 1+3i, 5-3i), c(2,2,2)); length(c); dim(c) <- c(2,2,2); }

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ dim(array(NA, dim=c(2.1,2.9,3.1,4.7))) }
[1] 2 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ length(array(NA, dim=c(1,0,2,3))) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); a = dim(a[,1,]); c(length(a),a[1],a[2]) }
[1] 2 3 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); a = dim(a[1,1,1, drop = FALSE]); c(length(a),a[1],a[2],a[3]) }
[1] 3 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); a[2,2]; }
Error in a[2, 2] : incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); is.null(dim(a[1,1,1])) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); is.null(dim(a[1,1,])) } 
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1:27, c(3,3,3)); b = a[,,]; d = dim(b); c(d[1],d[2],d[3]) }
[1] 3 3 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1:27, c(3,3,3)); c(a[1],a[27],a[22],a[6]) }
[1]  1 27 22  6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1:27,c(3,3,3)); c(a[1,1,1],a[3,3,3],a[1,2,3],a[3,2,1]) }
[1]  1 27 22  6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(1:4, dim=c(4,1,1)) ; x <- m[[2,1,1,drop=FALSE]] ; is.null(dim(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- dim(m[1:2,1,1,drop=FALSE]) ; c(x[1],x[2],x[3]) }
[1] 2 1 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- dim(m[1:2,1,1]) ; is.null(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,1] ; c(x[1],x[2]) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,integer()] ; d <- dim(x) ; c(d[1],d[2]) }
[1] 2 0

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,integer()] ; d <- dim(x) ; length(x) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=0, 0, -1]) }
[1] 1 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=FALSE, 0, -1]) }
[1] 1 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=FALSE, 0, drop=TRUE, -1]) }
Error in x[1, 1, drop = FALSE, 0, drop = TRUE, -1] :
  incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=c(0,2), 0, -1]) }
[1] 1 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=integer(), 0, -1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,drop=FALSE, 1, drop=TRUE, -1]) }
[1] 1 1 2 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ array(1,c(3,3,3))[1,1,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ array(1,c(3,3,3))[[,,]]; }
Error in array(1, c(3, 3, 3))[[, , ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ array(1,c(3,3,3))[[1,1,1]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ array(1,c(3,3,3))[[c(1,2),1,1]]; }
Error in array(1, c(3, 3, 3))[[c(1, 2), 1, 1]] :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ m <- array(1:24, dim=c(2,3,4)) ; f <- function(i) { m[,,i] } ; f(1) ; f(2) ; dim(f(1:2)) }
[1] 2 3 2

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ m <- array(1:24, dim=c(2,3,4)) ; f <- function(i) { m[,,i] } ; f(1[2]) ; f(3) }
     [,1] [,2] [,3]
[1,]   13   15   17
[2,]   14   16   18

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ m <- array(1:24, dim=c(2,3,4)) ; m[,,2,drop=FALSE] }
, , 1

     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ m <- array(1:24, dim=c(2,3,4)) ; m[,,2] }
     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdate
#{ a = array(1,c(3,3,3)); a[1,2,3] = 3; a }
, , 1

     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    1    1    1

, , 2

     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    1    1    1

, , 3

     [,1] [,2] [,3]
[1,]    1    3    1
[2,]    1    1    1
[3,]    1    1    1


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdate
#{ a = array(1,c(3,3,3)); b = a; b[1,2,3] = 3; c(a[1,2,3],b[1,2,3]) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdate
#{ a = array(1,c(3,3,3)); c(a[1,2,3],a[1,2,3]) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdate
#{ a = matrix(1,2,2); a[1,2] = 3; a[1,2] == 3; }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdate
#{ ansmat <- array(dim=c(2,2),dimnames=list(c("1","2"),c("A","B"))) ; ansmat }
   A  B
1 NA NA
2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdate
#{ ansmat <- array(dim=c(2,2),dimnames=list(c("1","2"),c("A","B"))) ; ansmat[c(1,2,4)] <- c(1,2,3) ; ansmat }
  A  B
1 1 NA
2 2  3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdate
#{ x <- array(c(1,2,3), dim=c(3,1,1)) ; x[1:2,1,1] <- sqrt(x[2:1]) ; c(x[1] == sqrt(2), x[2], x[3]) }
[1] 1 1 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testBugIfiniteLoopInGeneralizedRewriting
#{ m <- array(1:3, dim=c(3,1,1)) ; f <- function(x,v) { x[1:2,1,1] <- v ; x } ; f(m,10L) ; f(m,10) ; f(m,c(11L,12L)); c(m[1,1,1],m[2,1,1],m[3,1,1]) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitions
#{ m <- matrix() ; m }
     [,1]
[1,]   NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitions
#{ m <- matrix(1:6, ncol=3, byrow=TRUE) ; m }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitions
#{ m <- matrix(1:6, nrow=2, byrow=TRUE) ; m }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitions
#{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitions
#{ matrix( (1:6) * (1+3i), nrow=2 ) }
     [,1]  [,2]  [,3]
[1,] 1+3i 3+ 9i 5+15i
[2,] 2+6i 4+12i 6+18i

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitions
#{ matrix( as.raw(101:106), nrow=2 ) }
     [,1] [,2] [,3]
[1,]   65   67   69
[2,]   66   68   6a

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1.3,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1.5,c(3,3,3)); a[1,2,3] = "2+3i"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1L,c(3,3,3)); a[1,2,3] = "2+3i"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1L,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1L,c(3,3,3)); a[1,2,3] = 8.1; typeof(a[1,2,3]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(TRUE,c(3,3,3)); a[1,2,3] = "2+3i"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 8.1; typeof(a[1,2,3]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 8L; typeof(a[1,2,3]) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixBuiltin
#{ length(matrix()) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSimpleRead
#{ a = matrix(1,3,3); is.null(dim(a[1,])); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelection
#{  m <- matrix(1:6, nrow=2) ;  m[1,NULL] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelection
#{ matrix(1,3,3)[1,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelection
#{ matrix(1,3,3)[[,]]; }
Error in matrix(1, 3, 3)[[, ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelection
#{ matrix(1,3,3)[[1,1]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelection
#{ matrix(1,3,3)[[c(1,2),1]]; }
Error in matrix(1, 3, 3)[[c(1, 2), 1]] :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdate
#{ a = array(1,c(3,3,3)); a[,1,1] = c(3,4,5); c(a[1,1,1],a[2,1,1],a[3,1,1]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdate
#{ a = array(1,c(3,3,3)); a[1,,1] = c(3,4,5); c(a[1,1,1],a[1,2,1],a[1,3,1]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdate
#{ a = array(1,c(3,3,3)); a[1,,] = matrix(1:9,3,3); c(a[1,1,1],a[1,3,1],a[1,3,3]) }
[1] 1 3 9

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdate
#{ a = array(1,c(3,3,3)); a[1,1,] = c(3,4,5); c(a[1,1,1],a[1,1,2],a[1,1,3]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdate
#{ a = matrix(1,3,3); a[,1] = c(3,4,5); c(a[1,1],a[2,1],a[3,1]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdate
#{ a = matrix(1,3,3); a[1,] = c(3,4,5); c(a[1,1],a[1,2],a[1,3]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array("3+2i",c(3,3,3)); b = 2+3i; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array("3+2i",c(3,3,3)); b = 7L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array("3+2i",c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(1.7,c(3,3,3)); b = 3L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "double" "double"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(1.7,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "double" "double"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(3+2i,c(3,3,3)); b = 4.2; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "complex" "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(3+2i,c(3,3,3)); b = 4L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "complex" "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(3+2i,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "complex" "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(7L,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "integer" "integer"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ m <- array(c(1+1i,2+2i,3+3i), dim=c(3,1,1)) ; m[1:2,1,1] <- c(100L,101L) ; m ; c(typeof(m[1,1,1]),typeof(m[2,1,1])) }
[1] "complex" "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testSelection
#{ m <- matrix(1:6, nrow=2) ; m[upper.tri(m)] }
[1] 3 5 6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testSelection
#{ m <- matrix(c(1,2,3,4,5,6), nrow=3) ; m[0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testSelection
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[0] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-as.character(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to character) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-as.complex(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to complex) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-as.double(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-as.logical(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to logical) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{  m <- array(1:3, dim=c(3,1,1)) ; f <- function(x,v) { x[[2,1,1]] <- v ; x } ; f(m,10L) ; f(m,10) ; x <- f(m,11L) ; c(x[1],x[2],x[3]) }
[1]  1 11  3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ a <- 1:9 ; a[, , 1] <- 10L }
Error in a[, , 1] <- 10L : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ a <- 1:9 ; a[, 1] <- 10L }
Error in a[, 1] <- 10L : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ a <- 1:9 ; a[1, 1, 1] <- 10L }
Error in a[1, 1, 1] <- 10L : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ a <- 1:9 ; a[1, 1] <- 10L }
Error in a[1, 1] <- 10L : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- array(1:24, dim=c(2,3,4)) ; m[,,4] <- 10:15 ; m[,,4] }
     [,1] [,2] [,3]
[1,]   10   12   14
[2,]   11   13   15

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2) ; m[, 1] = c(1, 2, 3, 4) ; m }
Error in m[, 1] = c(1, 2, 3, 4) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2) ; m[,1] = 7 ; m }
     [,1] [,2]
[1,]    7    1
[2,]    7    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2) ; m[,1] = c(10,11) ; m }
     [,1] [,2]
[1,]   10    1
[2,]   11    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2) ; m[1,] = 7 ; m }
     [,1] [,2]
[1,]    7    7
[2,]    1    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2); m[1,1] = 6; m }
     [,1] [,2]
[1,]    6    1
[2,]    1    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:100, nrow=10) ; z <- 1; s <- 0 ; for(i in 1:3) { m[z <- z + 1,z <- z + 1] <- z * z * 1000 } ; sum(m) }
[1] 39918

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1, c(-1,-10)) ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,-1) ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,c(-1,-10)) ; m <- f(-1,2) ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2   10    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,c(-1,-10)) ; m <- f(1,-1) ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(2,1:3) ; m <- f(1,-2) ; m }
     [,1] [,2] [,3]
[1,]   10    3   10
[2,]   10   10   10

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[, 2] <- integer() }
Error in m[, 2] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[,2:3] <- 10:11 ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2   11   11

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[,2] <- 10:11 ; m }
     [,1] [,2] [,3]
[1,]    1   10    5
[2,]    2   11    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[,integer()] <- integer() ; m }
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[1, 2] <- 1:3 }
Error in m[1, 2] <- 1:3 :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[1, 2] <- integer() }
Error in m[1, 2] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[[1, 1]] <- integer() }
Error in m[[1, 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[[1:2, 1]] <- integer() }
Error in m[[1:2, 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[[1:2,1]] <- 1 }
Error in `[[<-`(`*tmp*`, 1:2, 1, value = 1) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[[integer(),1]] <- 1 }
Error in `[[<-`(`*tmp*`, integer(), 1, value = 1) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=3) ; m[2] <- list(100) ; m }
[[1]]
[1] 1

[[2]]
[1] 100

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
[1] 5

[[6]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(as.double(1:6), nrow=2) ; mi <- matrix(1:6, nrow=2) ; f <- function(v,i,j) { v[i,j] <- 100 ; v[i,j] * i * j } ; f(m, 1L, 2L) ; f(m,1L,-1)  }
[1] -100 -100

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(as.double(1:6), nrow=2) ; mi <- matrix(1:6, nrow=2) ; f <- function(v,i,j) { v[i,j] <- 100 ; v[i,j] * i * j } ; f(m, 1L, 2L) ; f(m,1L,TRUE)  }
[1] 100 100 100

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[2] <- list(100) ; m }
     [,1] [,2]
[1,] 1    4
[2,] 100  5
[3,] 3    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[[2]] <- list(100) ; m }
     [,1]   [,2]
[1,] 1      4
[2,] List,1 5
[3,] 3      6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,4,6)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x <- array(c(1,2,3), dim=c(3,1)) ; x[1:2,1] <- 2:1 ; x }
     [,1]
[1,]    2
[2,]    1
[3,]    3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1.1:8.8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x }
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:16; dim(x)<-c(2,2,2,2); y<-c(101:108); dim(y)<-c(2,4); x[1:2, 1:2, 1] <- y; x }
Error in x[1:2, 1:2, 1] <- y : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x }
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); x[] = 42; x }
, , 1

     [,1] [,2]
[1,]   42   42
[2,]   42   42

, , 2

     [,1] [,2]
[1,]   42   42
[2,]   42   42


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); x[] = c(42,7); x }
, , 1

     [,1] [,2]
[1,]   42   42
[2,]    7    7

, , 2

     [,1] [,2]
[1,]   42   42
[2,]    7    7


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:102); z<-(x[1:2,c(1,2,0),1]<-y); x }
, , 1

     [,1] [,2]
[1,]  101  101
[2,]  102  102

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); x[1, 1] <- y; x }
Error in x[1, 1] <- y : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); x[1:2,1:2,1]<-y; x }
, , 1

     [,1] [,2]
[1,]  101  103
[2,]  102  104

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[0,5,1] <- y); x }
Error in `[<-`(`*tmp*`, 0, 5, 1, value = 101:104) :
  subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2, c(1, 2, 1), 1] <- y); x }
Error in x[1:2, c(1, 2, 1), 1] <- y :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2, c(1, NA), 1] <- y); x }
Error in x[1:2, c(1, NA), 1] <- y :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,1:2,0]<-y); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,1:2,c(0,0)]<-y); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,1),1]<-y); x }
, , 1

     [,1] [,2]
[1,]  103    3
[2,]  104    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,2,0),1]<-y); x }
, , 1

     [,1] [,2]
[1,]  101  103
[2,]  102  104

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,2,NA),1]<-y); x }
Error in x[1:2, c(1, 2, NA), 1] <- y :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:120); z<-(x[1:2, c(1, 2, 0), 1] <- y); x }
Error in x[1:2, c(1, 2, 0), 1] <- y :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); z<-(x[1,1,1]<-42); z }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-as.double(1:8); dim(x)<-c(2,2,2); x[1,1,1]<-42L; x }
, , 1

     [,1] [,2]
[1,]   42    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ z<-1:4; y<-((names(z)<-101:104) >  1) }

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ z<-1:4; y<-((z[1]<-42) >  1) }

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testAssign1
#{ a<-1; a }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testAssign1
#{ a<-1; a<-a+1; a }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testAssign2
#a <- 42; f <- function() { a <- 13; a <<- 37; }; f(); a;
[1] 37

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testAssignBuiltin
#{ x <- 3 ; f <- function() { assign("x", 4) ; h <- function() { assign("z", 5) ; g <- function() { x <<- 10 ; x } ; g() } ; h() } ; f() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function() { if (FALSE) { c <- 1 } ; g <- function() { c } ; g() } ; typeof(f()) }
[1] "builtin"

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() }
Error in g() : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function(i) { if (i==1) { c <- 1 ; x <- 1 } ; if (i!=2) { x } else { c }} ; f(1) ; f(1) ; typeof(f(2)) }
[1] "builtin"

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function(i) { if (i==1) { c <- 1 } ; c } ; f(1) ; typeof(f(2)) }
[1] "builtin"

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function(i) { if (i==1) { x <- 1 } ; x } ; f(1) ; f(1) ; f(2) }
Error in f(2) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function(i) { if (i==1) { x <- 1 } ; x } ; f(1) ; f(2) }
Error in f(2) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ nonexistent }
Error: object 'nonexistent' not found

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ x <- 3 ; f <- function() { assign("x", 4) ; g <- function() { assign("y", 3) ; hh <- function() { assign("z", 6) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; hh() } ; g()  } ; f() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ a <- c(0,0,0) ; f <- function() { g <- function() { a[2] <<- 9 } ; g() } ; u <- function() { a <- c(1,1,1) ; f() ; a } ; r <- a ; s <- u() ; t <- a ; list(r,s,t) }
[[1]]
[1] 0 0 0

[[2]]
[1] 1 1 1

[[3]]
[1] 0 9 0


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ a <- c(0,0,0) ; u <- function() { a <- c(1,1,1) ; f <- function() { g <- function() { a[2] <<- 9 } ; g() } ; f() ; a } ; list(a,u()) }
[[1]]
[1] 0 0 0

[[2]]
[1] 1 9 1


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ a <- c(1,2,3) ; f <- function() { a[2] <- 4 } ; list(f(),a) }
[[1]]
[1] 4

[[2]]
[1] 1 2 3


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ a <- c(1,2,3) ; f <- function() { a[2] <<- 4 } ; f() ; a }
[1] 1 4 3

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ answer <<- 42 }

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- 2 ; f <- function() { b <- 4 } ; f() ; b }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- 2 ; f <- function() { b <<- 4 } ; f() ; b }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- 2 ; f <- function() { b[2] <- 4 } ; f() ; b }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- 2 ; f <- function() { b[2] <<- 4 } ; f() ; b }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- c(1,1) ; f <- function(v,x) { g <- function(y) { v[y] <<- 2 } ; g(x) ; v } ; k <- f(b,1) ; l <- f(b,2) ; list(k,l,b) }
[[1]]
[1] 2 1

[[2]]
[1] 1 2

[[3]]
[1] 1 1


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ f <- function() { x <<- 2 } ; f() ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ f <- function(a) { g <- function(x,y) { a[x] <<- y } ; g(2,4) ; a } ; u <- c(1,2,3) ; k <- f(u) ; u <- c(3,2,1) ; l <- f(u) ; list(k,l) }
[[1]]
[1] 1 4 3

[[2]]
[1] 3 4 1


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ h <- function() { x <- 10 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { x <<- 3 ; x } ; f() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; f <- function() { x <<- 2 ; x } ; c(f(), f()) }
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; f <- function() { x <<- 2 } ; f() ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; g <- function() { f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; g <- function() { x ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; g <- function() { x <- 100 ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }
[1] 100   2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <<- 1 ; x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <<- 1 }

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1 ; attr(x, "my") <- 2; 2+x }
[1] 3
attr(,"my")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1+1i;  attr(x, "hi") <- 1+2 ; y <- 2:3 ;  x+y }
[1] 3+1i 4+1i

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1+1i;  attr(x, "hi") <- 1+2 ; y <- 2:3 ; attr(y,"zz") <- 2; x+y }
[1] 3+1i 4+1i
attr(,"zz")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2 ;  attr(x, "hi") <- 2 ;  !x  }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2 ;  attr(x, "hi") <- 3 ; attr(x, "hihi") <- 10 ; y <- 2:3 ; attr(y,"zz") <- 2; attr(y,"hi") <-3; attr(y,"bye") <- 4 ; x+y }
[1] 3 5
attr(,"zz")
[1] 2
attr(,"hi")
[1] 3
attr(,"bye")
[1] 4
attr(,"hihi")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2;  attr(x, "hi") <- 2 ;  x & x }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2;  attr(x, "hi") <- 2 ;  x+1 }
[1] 2 3
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2;  attr(x, "hi") <- 2 ;  x+1:4 }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2;  attr(x, "hi") <- 2 ; y <- 2:3 ; attr(y,"hello") <- 3; x+y }
[1] 3 5
attr(,"hello")
[1] 3
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1;  attr(x, "hi") <- 1+2 ; y <- 2:3 ; attr(y, "zz") <- 2; x+y }
[1] 3 4
attr(,"zz")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- as.raw(1:2);  attr(x, "hi") <- 2 ;  x & x }
[1] 01 02

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(1+1i, 2+2i) ;  attr(x, "hi") <- 3 ; attr(x, "hihi") <- 10 ; y <- c(2+2i, 3+3i) ; attr(y,"zz") <- 2; attr(y,"hi") <-3; attr(y,"bye") <- 4 ; x+y }
[1] 3+3i 5+5i
attr(,"zz")
[1] 2
attr(,"hi")
[1] 3
attr(,"bye")
[1] 4
attr(,"hihi")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(1+1i,2+2i);  attr(x, "hi") <- 3 ; y <- 2:3 ; attr(y,"zz") <- 2; x+y }
[1] 3+1i 5+2i
attr(,"zz")
[1] 2
attr(,"hi")
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(1+1i,2+2i);  names(x)<-c("a", "b"); attr(x, "hi") <- 3 ; y <- 2:3 ; attr(y,"zz") <- 2; attributes(x+y) }
$zz
[1] 2

$hi
[1] 3

$names
[1] "a" "b"


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(1+1i,2+2i,3+3i,4+4i);  dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); attr(x, "hi") <- 3 ; y <- 2:5 ; attr(y,"zz") <- 2; attributes(x+y) }
$zz
[1] 2

$hi
[1] 3

$dim
[1] 2 2

$dimnames
$dimnames[[1]]
[1] "a" "b"

$dimnames[[2]]
[1] "c" "d"



##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(1+1i,2+2i,3+3i,4+4i);  dim(x)<-c(2,2); names(x)<-c("a", "b"); attr(x, "hi") <- 3 ; y <- 2:5 ; attr(y,"zz") <- 2; attributes(x+y) }
$zz
[1] 2

$hi
[1] 3

$dim
[1] 2 2


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(a=1) ; y <- c(b=2,c=3) ; x + y }
b c
3 4

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(a=1) ; y <- c(b=2,c=3) ; y + x }
b c
3 4

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(a=1,b=2) ;  attr(x, "hi") <- 2 ;  -x  }
 a  b
-1 -2
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(a=FALSE,b=TRUE) ;  attr(x, "hi") <- 2 ;  !x  }
    a     b
 TRUE FALSE
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ a <- array(c(1,1), dim=c(1,2)) ; attr(a, "a") <- 1 ;  a[1,1] <- 1+1i ; a }
     [,1] [,2]
[1,] 1+1i 1+0i
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ m <- matrix(rep(1,4), nrow=2) ; attr(m, "a") <- 1 ;  m[2,2] <- 1+1i ; m }
     [,1] [,2]
[1,] 1+0i 1+0i
[2,] 1+0i 1+1i
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- TRUE ; attr(x, "myatt") <- 1; x[1] <- 2 ; x }
[1] 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- TRUE ; attr(x, "myatt") <- 1; x[2] <- 2 ; x }
[1] 1 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; x["a"] <- 2 ; x }
a b
2 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; x[c(1,1)] }
a a
1 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- c(a=TRUE, b=FALSE) ; attr(x, "myatt") <- 1; x[2] <- 2 ; x }
a b
1 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ a <- c(1,2,3,4); attr(a, "x") <- "attrib"; dim(a) <- NULL; a }
[1] 1 2 3 4
attr(,"x")
[1] "attrib"

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ a <- c(1,2,3,4); attr(a, "x") <- "attrib"; dim(a) <- c(2,2); a }
     [,1] [,2]
[1,]    1    3
[2,]    2    4
attr(,"x")
[1] "attrib"

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- 1:3 ; attr(m,"a") <- 1 ;  t(m) }
     [,1] [,2] [,3]
[1,]    1    2    3
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- matrix(1:6, nrow=2) ; attr(m,"a") <- 1 ;  aperm(m) }
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- matrix(1:6, nrow=2) ; attr(m,"a") <- 1 ;  diag(m) <- c(1,1) ; m }
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    1    6
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- matrix(1:6, nrow=2) ; attr(m,"a") <- 1 ;  t(m) }
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- matrix(1:6, nrow=2) ; attr(m,"a") <- 1 ; mm <- aperm(m) ; dim(mm) }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- matrix(rep(1,4), nrow=2) ; attr(m,"a") <- 1 ;  upper.tri(m) }
      [,1]  [,2]
[1,] FALSE  TRUE
[2,] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- "a" ; attr(x, "myatt") <- 1; toupper(x) }
[1] "A"
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; c(x, x, x) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; cumsum(c(x, x, x)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; min(x) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; rep(x,2) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; round(exp(x), digits=5) }
[1] 2.71828
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; x%o%x }
     [,1]
[1,]    1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; x:x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(1,2) ; dim(x)<-c(1,2); attr(x, "myatt") <- 1; round(exp(x), digits=5) }
        [,1]    [,2]
[1,] 2.71828 7.38906
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1) ; attr(x, "myatt") <- 1 ; lapply(1:2, function(z) {x}) }
[[1]]
a
1
attr(,"myatt")
[1] 1

[[2]]
a
1
attr(,"myatt")
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1) ; attr(x, "myatt") <- 1; log10(x) }
a
0
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1) ; attr(x, "myatt") <- 1; nchar(x) }
a
1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; abs(x) }
a b
1 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; sapply(1:2, function(z) {x}) }
  [,1] [,2]
a    1    1
b    2    2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; array(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; matrix(x) }
     [,1]
[1,]    1
[2,]    2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; order(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; rev(x) }
b a
2 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; seq(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; sum(x) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; unlist(list(x,x)) }
a b a b
1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; unlist(x) }
a b
1 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1,b=2) ; attr(x, "myatt") <- 1; round(exp(x), digits=5) }
      a       b
2.71828 7.38906
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=TRUE) ; attr(x, "myatt") <- 1; rep(x,2) }
   a    a
TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(hello=1, hi=9) ; attr(x, "hi") <- 2 ;  sqrt(x) }
hello    hi
    1     3
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x<-1:8; dim(x)<-c(2, 2, 2); names(x)<-101:108; attr(x, "dimnames")<-list(201:202, 203:204, 205:206); attr(x, "foo")<-"foo"; y<-x; attributes(x>y) }
$dim
[1] 2 2 2

$dimnames
$dimnames[[1]]
[1] "201" "202"

$dimnames[[2]]
[1] "203" "204"

$dimnames[[3]]
[1] "205" "206"



##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x<-1:8; dim(x)<-c(2, 2, 2); names(x)<-101:108; attr(x, "dimnames")<-list(c("201", "202"), c("203", "204"), c("205", "206")); attr(x, "foo")<-"foo"; y<-x; attributes(x>y) }
$dim
[1] 2 2 2

$dimnames
$dimnames[[1]]
[1] "201" "202"

$dimnames[[2]]
[1] "203" "204"

$dimnames[[3]]
[1] "205" "206"



##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testCasts
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; as.character(x) }
[1] "1" "2"

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testCasts
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; as.double(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testCasts
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; as.integer(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- "s" ; attr(x, "hi") <- 2 ;  x }
[1] "s"
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- 1 ; attr(x, "hi") <- 2 ;  x }
[1] 1
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- 1+1i ; attr(x, "hi") <- 2 ;  x }
[1] 1+1i
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- 1L ; attr(x, "hi") <- 2 ;  x }
[1] 1
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- TRUE ; attr(x, "hi") <- 2 ;  x }
[1] TRUE
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- as.raw(10) ; attr(x, "hi") <- 2 ;  x }
[1] 0a
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(1, 2) ; attr(x, "hi") <- 2; x }
[1] 1 2
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(1L, 2L) ; attr(x, "hi") <- 2; attr(x, "hello") <- 1:2 ;  x }
[1] 1 2
attr(,"hi")
[1] 2
attr(,"hello")
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(1L, 2L) ; attr(x, "hi") <- 2; x }
[1] 1 2
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(hello=1) ; attr(x, "hi") <- 2 ;  attr(x,"names") <- "HELLO" ; x }
HELLO
    1
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(hello=9) ; attr(x, "hi") <- 2 ;  y <- x ; y }
hello
    9
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x<-1; dim(x)<-1; y<-(attr(x, "dimnames")<-list(1)); y }
[[1]]
[1] "1"


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x<-1; dim(x)<-1; y<-list(a="1"); attr(y, "foo")<-"foo"; z<-(attr(x, "dimnames")<-y); z }
$a
[1] "1"

attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x<-1; dim(x)<-1; y<-list(a="1"); z<-(attr(x, "dimnames")<-y); z }
$a
[1] "1"


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testOtherPropagation
#{ x <- 1:2;  attr(x, "hi") <- 2 ;  x == x }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((-0-1i)/(0+0i)) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((-1-0i)/(0+0i)) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((0+0i)/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((1/0)*(1-0i)) }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(-1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(-100) }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(-1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(100) }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(NA+0.1) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1, -2, 3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1, -2, NA)) }
[1]  1  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1, 2, 3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1L, -2L, 3L)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1L, -2L, NA)) }
[1]  1  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1L, 2L, 3L)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, FALSE, NA,  na.rm=FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, FALSE, NA,  na.rm=TRUE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, TRUE, NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, TRUE, NA,  na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, TRUE, TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(logical(0)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ v <- c("abc", "def") ; w <- c("abc", "def") ; all(v == w) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(FALSE, NA,  na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(NA, NA, NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, FALSE, NA,  na.rm=TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, TRUE, NA) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, TRUE, NA,  na.rm=TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, TRUE, TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(logical(0)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c("TRUE", "TRUE", "FALSE", "FALSE"), 1) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c("TRUE", "TRUE", "FALSE", "FALSE"), FALSE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c("TRUE", "TRUE", "FALSE", "FALSE"), TRUE) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c("abc", "good", "hello", "hello", "abc")) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1+0i, 6+7i, 1+0i), TRUE)}
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1+1i, 4-6i, 4-6i, 6+7i)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1, 1, 4, 5, 4), TRUE, TRUE) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1, 4+6i, 7+7i, 1), incomparables = c(1, 2)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1,2,1)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1,2,3,4)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1L, 2L, 1L, 1L, 3L, 2L), incomparables = TRUE) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L)) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), FALSE )}
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), FALSE, TRUE)}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), TRUE )}
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), fromLast = TRUE) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), incomparables=FALSE,fromLast = TRUE)}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(27.2, 68.4, 94.3, 22.2)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(TRUE, FALSE, TRUE), TRUE) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(c(TRUE, FALSE, TRUE), TRUE, fromLast = 1) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{ anyDuplicated(list(76.5, 5L, 5L, 76.5, 5, 5), incomparables = c(5L, 76.5)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c("abc"))}
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c("abc", "def", "abc"))}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c("abc", "def", "ghi", "jkl"))}
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c(2+2i)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c(2+2i, 3+3i, 2+2i)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c(2+2i, 3+3i, 4+4i, 5+5i)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c(FALSE))}
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c(FALSE, TRUE))}
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAnyDuplicated
#{anyDuplicated(c(FALSE, TRUE, FALSE))}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ a = array(1:24,c(2,3,4)); b = aperm(a); c(dim(b)[1],dim(b)[2],dim(b)[3]) }
[1] 4 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ a = array(1:24,c(2,3,4)); b = aperm(a, c(2,3,1)); a[1,2,3] == b[2,3,1] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ a = array(1:24,c(2,3,4)); b = aperm(a, c(2,3,1), resize = FALSE); a[1,2,3] == b[2,1,2] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ a = array(1:24,c(2,3,4)); b = aperm(a, c(3,2,1), resize=FALSE); c(dim(b)[1],dim(b)[2],dim(b)[3]) }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ a = array(1:24,c(2,3,4)); b = aperm(a,, resize=FALSE); c(dim(b)[1],dim(b)[2],dim(b)[3]) }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ a = array(1:24,c(3,3,3)); b = aperm(a, c(2,3,1)); c(a[1,2,3] == b[2,3,1], a[2,3,1] == b[3,1,2], a[3,1,2] == b[1,2,3]) }
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ a = array(1:24,c(3,3,3)); b = aperm(a, c(2,3,1), resize = FALSE); c(a[1,2,3] == b[2,3,1], a[2,3,1] == b[3,1,2], a[3,1,2] == b[1,2,3]) }
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ a = array(1:4,c(2,2)); b = aperm(a); c(a[1,1] == b[1,1], a[1,2] == b[2,1], a[2,1] == b[1,2], a[2,2] == b[2,2]) }
[1] TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(array(1,c( 3,3,3)), c(1,2,1)); }
Error in aperm.default(array(1, c(3, 3, 3)), c(1, 2, 1)) :
  invalid 'perm' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(array(1,c(3,3,3)), c(1,2)); }
Error in aperm.default(array(1, c(3, 3, 3)), c(1, 2)) :
  'perm' is of wrong length 2 (!= 3)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(array(1,c(3,3,3)), c(1,2,0)); }
Error in aperm.default(array(1, c(3, 3, 3)), c(1, 2, 0)) :
  value out of range in 'perm'

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(array(1:27,c(3,3,3)), c(1+1i,3+3i,2+2i))[1,2,3] == array(1:27,c(3,3,3))[1,3,2]; }
[1] TRUE
Warning message:
In aperm.default(array(1:27, c(3, 3, 3)), c(1 + (0+1i), 3 + (0+3i),  :
  imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(array(c('FASTR', 'IS', 'SO', 'FAST'), c(3,1,2))) }
, , 1

     [,1]
[1,] "FASTR"
[2,] "FAST"

, , 2

     [,1]
[1,] "IS"
[2,] "FASTR"

, , 3

     [,1]
[1,] "SO"
[2,] "IS"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(array(c(3+2i, 5+0i, 1+3i, 5-3i), c(2,2,2))) }
, , 1

     [,1] [,2]
[1,] 3+2i 1+3i
[2,] 3+2i 1+3i

, , 2

     [,1] [,2]
[1,] 5+0i 5-3i
[2,] 5+0i 5-3i


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(array(c(TRUE, FALSE, TRUE, TRUE, FALSE), c(2, 5, 2))) }
, , 1

     [,1] [,2]  [,3]  [,4] [,5]
[1,] TRUE TRUE FALSE FALSE TRUE
[2,] TRUE TRUE FALSE FALSE TRUE

, , 2

      [,1] [,2] [,3] [,4]  [,5]
[1,] FALSE TRUE TRUE TRUE FALSE
[2,] FALSE TRUE TRUE TRUE FALSE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(c(1,2,3)); }
Error in aperm.default(c(1, 2, 3)) :
  invalid first argument, must be an array

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAperm
#{ aperm(c(c(2,3), c(4,5), c(6,7)), c(3,4)) }
Error in aperm.default(c(c(2, 3), c(4, 5), c(6, 7)), c(3, 4)) :
  invalid first argument, must be an array

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testApply
#{ m <- matrix(c(1,2,3,4,5,6),2) ; apply(m,1,sum) }
[1]  9 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testApply
#{ m <- matrix(c(1,2,3,4,5,6),2) ; apply(m,2,sum) }
[1]  3  7 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ character(1L) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ double() }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ double(3) }
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ integer() }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ logical() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ logical(3L) }
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ raw() }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#is.array(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayTypeCheck
#{ is.array(as.array(1)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ f <- function() 23 ; l <- list(f) ; cl <- as.call(l) ; eval(cl) }
[1] 23

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ f <- function(a,b) a+b ; l <- list(f,2,3) ; cl <- as.call(l) ; eval(cl) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ f <- function(x) x ; l <- list(f, 42) ; cl <- as.call(l); typeof(cl[[1]]) }
[1] "closure"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ f <- function(x) x ; l <- list(f, 42) ; cl <- as.call(l); typeof(cl[[2]]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ f <- function(x) x+19 ; g <- function() 23 ; l <- list(f, g()) ; cl <- as.call(l) ; eval(cl) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ f <- round ; g <- as.call(list(f, quote(A))) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ g <- function() 23 ; l <- list(f, g()) ; as.call(l) }
Error: object 'f' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ l <- list(f) ; as.call(l) }
Error: object 'f' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCall
#{ l <- list(f, 2, 3) ; as.call(l) }
Error: object 'f' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(1) }
[1] "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(1:3) }
[1] "1" "2" "3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(1L) }
[1] "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(NULL) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(TRUE) }
[1] "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("-1+5i") }
[1] -1+5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("-1-5i") }
[1] -1-5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("0x42") }
[1] 66+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("1+5i") }
[1] 1+5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("Inf") }
[1] Inf+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("NaN") }
[1] NaN+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("TRUE") }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(0) }
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(0/0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(TRUE) }
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(c("1","hello")) }
[1] 1+0i   NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(c(0/0, 0/0)) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.complex(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.complex(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double("1.27") }
[1] 1.27

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double("TRUE") }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(10+2i) }
[1] 10
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(as.raw(1)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(c("1","hello")) }
[1]  1 NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(c(3+3i, 4+4i)) }
[1] 3 4
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.double(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.double(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer("1") }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer("TRUE") }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(-0/0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(-10000000000) }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(0/0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(1.1:5.1) }
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(10+2i) }
[1] 10
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(10000000000) }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(10000000000000) }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(as.raw(1)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(as.raw(c(1,2,3,4))) }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c("1","2")) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c("1","hello")) }
[1]  1 NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c(1,2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c(1.0,2.5,3.9)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c(3+3i, 4+4i)) }
[1] 3 4
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(list(1,2,3,list())) }
[1]  1  2  3 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(list(c(1),2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(list(integer(),2,3)) }
[1] NA  2  3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(list(list(1),2,3)) }
[1] NA  2  3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.integer(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.integer(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical("TRUE") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical("dummy") }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical("false") }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical(1) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical(10+2i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical(c("1","hello")) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical(c(3+3i, 4+4i)) }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.logical(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.logical(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(1) }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(1.1) }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(1L) }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(NULL) }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(c(1, 2, 3)) }
[1] 01 02 03

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(c(1L, 2L, 3L)) }
[1] 01 02 03

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(list("1", 2L, 3.4)) }
[1] 01 02 03

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(list(1,2,3)) }
[1] 01 02 03

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw("test") }
[1] 00
Warning messages:
1: NAs introduced by coercion
2: out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(-1) }
[1] 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(-1L) }
[1] 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(1+1i) }
[1] 01
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(NA) }
[1] 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1+3i, -2-1i, NA)) }
[1] 01 00 00
Warning messages:
1: imaginary parts discarded in coercion
2: out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1, -2, 3)) }
[1] 01 00 03
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1,1000,NA)) }
[1] 01 00 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1L, -2L, 3L)) }
[1] 01 00 03
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1L, -2L, NA)) }
[1] 01 00 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsSymbol
#{ as.symbol("name") }
name

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsSymbol
#{ as.symbol(123) }
`123`

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsSymbol
#{ as.symbol(as.symbol(123)) }
`123`

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#x<-c(a=1.1, b=2.2); as.vector(x, "raw")
[1] 01 02

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#x<-c(a=1L, b=2L); as.vector(x, "complex")
[1] 1+0i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo") }
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "bar") }
Error in as.vector(x, mode) : invalid 'mode' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "character") }
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "double") }
[1] NA
Warning message:
In as.vector("foo", "double") : NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "integer") }
[1] NA
Warning message:
In as.vector("foo", "integer") : NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "list") }
[[1]]
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "logical") }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "numeric") }
[1] NA
Warning message:
In as.vector("foo", "numeric") : NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "raw") }
[1] 00
Warning messages:
1: In as.vector("foo", "raw") : NAs introduced by coercion
2: In as.vector("foo", "raw") :
  out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector(NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector(NULL, "list") }
list()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector(c("foo", "bar"), "raw") }
[1] 00 00
Warning messages:
1: In as.vector(c("foo", "bar"), "raw") : NAs introduced by coercion
2: In as.vector(c("foo", "bar"), "raw") :
  out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ x<-1:4; dim(x)<-c(2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d")); y<-as.vector(x, "list"); y }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ x<-c(a=1, b=2); as.vector(x, "list") }
$a
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ x<-c(a=FALSE, b=TRUE); attr(x, "foo")<-"foo"; y<-as.vector(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ x<-c(a=FALSE, b=TRUE); attr(x, "foo")<-"foo"; y<-as.vector(x, "list"); attributes(y) }
$names
[1] "a" "b"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic("1")
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(1)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(1L)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(1i)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(NULL)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(TRUE)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(pairlist())
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#is.atomic(raw())
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAtomicTypeCheck
#{ is.atomic(integer()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ attach(.Platform, 2); file.sep }
[1] "/"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ detach("missing"); x }
Error in detach("missing") : invalid 'name' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", "abc", e); attach(e, 2); x }
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", 1, e); attach(e, 2); x; detach(2) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", 1, e); attach(e, 2); x; detach(2); x }
Error: object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", 1, e); attach(e, name = "mine"); x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", 1, e); attach(e, name = "mine"); x; detach("mine") }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1 ; attributes(x) <- list(hi=3, hello=2) ; x }
[1] 1
attr(,"hi")
[1] 3
attr(,"hello")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1 ; attributes(x) <- list(hi=3, names="name") ; x }
name
   1
attr(,"hi")
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1:2; attr(x, "aa") <- 1 ; attr(x, "ab") <- 2; attr(x, "bb") <- 3; attr(x, "b") }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1:3 ; attr(x, "myatt") <- 2:4 ; attr(x, "myatt1") <- "hello" ; attributes(x) }
$myatt
[1] 2 3 4

$myatt1
[1] "hello"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1:3 ; attr(x, "myatt") <- 2:4 ; attributes(x) }
$myatt
[1] 2 3 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1:3 ; attr(x, "myatt") <- 2:4 ; y <- x; attr(x, "myatt1") <- "hello" ; attributes(y) }
$myatt
[1] 2 3 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1; attributes(x) <- list(my = 1) ; y <- x; attributes(y) <- list(his = 2) ; x }
[1] 1
attr(,"my")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1; names(x) <- "hello" ; attributes(x) }
$names
[1] "hello"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(a=1, b=2) ; attr(x, "mya") <- 1; attr(x, "b") <- 2; attr(x, "m") }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 2:4 ; y <- x; attr(x, "myatt1") <- "hello" ; attributes(y) }
$names
[1] "a" "b"

$myatt
[1] 2 3 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(a=1, b=2) ; attr(x, "na") }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(a=1, b=2) ; attr(x, "names") }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(1, hi = 2) ; x }
Error in attributes(x) <- list(1, hi = 2) :
  attempt to use zero-length variable name

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(1, hi = 2, 3) ; x }
Error in attributes(x) <- list(1, hi = 2, 3) :
  all attributes must have names [3 does not]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(hi = 1, 2) ; x }
Error in attributes(x) <- list(hi = 1, 2) :
  all attributes must have names [2 does not]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(hi=1) ;  attributes(x) <- NULL ; x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(hi=1, names=NULL, hello=3, hi=2, hello=NULL) ; x }
[1] 1
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(ho = 1, 2, 3) ; x }
Error in attributes(x) <- list(ho = 1, 2, 3) :
  all attributes must have names [2 does not]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(names=NULL) ; x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; y<-list(1,2); names(y)<-c("hi", ""); attributes(x)<-y; x }
Error in attributes(x) <- y : all attributes must have names [2 does not]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x<-1; attributes(x)<-list(names="c", dim=NULL); attributes(x) }
$names
[1] "c"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ z <- 1; attr(z,"a") <- 1; attr(z,"b") <- 2; attr(z,"c") <- 3 ; attr(z,"b") <- NULL ; z }
[1] 1
attr(,"a")
[1] 1
attr(,"c")
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(call("foo"))
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.call(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character("1")
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.character(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(1i)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.complex(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(1)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.double(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(expression(x + 1))
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.expression(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(function() { })
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.function(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(1L)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.integer(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(list())
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.list(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(TRUE)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.logical(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(quote(x))
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.name(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(NULL)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(pairlist())
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.null(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(NULL)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(pairlist())
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.pairlist(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.raw(raw())
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(quote(x))
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testBasicTypes
#is.symbol(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ call("f") }
f()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ call("f", 2, 3) }
f(2, 3)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ call("f", quote(A)) }
f(A)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ cl <- call("f") ; class(cl) }
[1] "call"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ cl <- call("f") ; typeof(cl) }
[1] "language"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ f <- "f" ; call(f, quote(A)) }
f(A)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ f <- function() 23 ; cl <- call("f") ; eval(cl) }
[1] 23

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ f <- function(a, b) { a + b } ; l <- call("f", 2, 3) ; eval(l) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ f <- function(a, b) { a + b } ; x <- 1 ; y <- 2 ; l <- call("f", x, y) ; x <- 10 ; eval(l) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCall
#{ f <- round ; call(f, quote(A)) }
Error in call(f, quote(A)) : first argument must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.character(as.complex(1:2)) }
[1] "1+0i" "2+0i"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.character(as.double(1:5)) }
[1] "1" "2" "3" "4" "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.complex(as.character(c(1+1i,1+1i))) }
[1] 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.complex(as.double(c(1+1i,1+1i))) }
[1] 1+0i 1+0i
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.complex(as.integer(c(1+1i,1+1i))) }
[1] 1+0i 1+0i
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.complex(as.logical(c(1+1i,1+1i))) }
[1] 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.complex(as.raw(c(1+1i,1+1i))) }
[1] 1+0i 1+0i
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.double(as.logical(c(10,10))) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.integer(as.logical(-1:1)) }
[1] 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.list(3:6) }
[[1]]
[1] 3

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.list(c(1,2,3,2,1)) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 2

[[5]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.list(list(1,2,"eep")) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] "eep"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.matrix(1) }
     [,1]
[1,]    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.matrix(1:3) }
     [,1]
[1,]    1
[2,]    2
[3,]    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.raw(as.logical(as.raw(c(1,2)))) }
[1] 01 01

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.vector(list(1,2,3), mode="integer") }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ k <- as.list(3:6) ; l <- as.list(1) ; list(k,l) }
[[1]]
[[1]][[1]]
[1] 3

[[1]][[2]]
[1] 4

[[1]][[3]]
[1] 5

[[1]][[4]]
[1] 6


[[2]]
[[2]][[1]]
[1] 1



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ l <- 1 ; attr(l, "my") <- 1; as.list(l) }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ l <- c(x=1) ; as.list(l) }
$x
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ l <- list(1) ; attr(l, "my") <- 1; as.list(l) }
[[1]]
[1] 1

attr(,"my")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m <- matrix(1:6, nrow=2) ; as.double(m) }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; as.integer(m) }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; as.logical(m) }
[1] TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(1:6, nrow=3) ; as.integer(m) }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(1:6, nrow=3) ; as.vector(m, "any") }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(1:6, nrow=3) ; as.vector(mode = "integer", x=m) }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(as.raw(c(1,2,3,4)), nrow=2) ; as.vector(m) }
[1] 01 02 03 04

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c("a","b","c","d"), nrow=2) ; as.vector(m) }
[1] "a" "b" "c" "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1+1i,2+2i,3-3i,4-4i), nrow=2) ; as.vector(m) }
[1] 1+1i 2+2i 3-3i 4-4i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,0,1,0), nrow=2) ; as.vector(m, mode = "logical") }
[1]  TRUE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m) }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "character") }
[1] "1" "2" "3" "4"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "complex") }
[1] 1+0i 2+0i 3+0i 4+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "double") }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "numeric") }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "raw") }
[1] 01 02 03 04

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(TRUE,FALSE,FALSE,TRUE), nrow=2) ; as.vector(m) }
[1]  TRUE FALSE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- 1:2; names(x) <- c("hello","hi") ; as.double(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- 1:3 ; attr(x,"my") <- 10 ; attributes(as.matrix(x)) }
$dim
[1] 3 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- 1:3; z <- as.matrix(x); x }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- c(0,2); names(x) <- c("hello","hi") ; as.logical(x) }
[1] FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- c(1,2); names(x) <- c("hello","hi") ; as.integer(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x<-7; .y<-42; as.list(environment()) }
$x
[1] 7


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x<-7; .y<-42; as.list(environment(), all.names=TRUE) }
$x
[1] 7

$.y
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x<-7; as.list(environment()) }
$x
[1] 7


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x<-7; f<-function() x<<-42; f_copy<-as.list(environment())[["f"]]; f_copy(); x }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("a") }
a
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("a", "b") }
a b
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("hi",1:3,"hello") }
hi 1 2 3 hello
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("hi",1[2],"hello",sep="-") }
hi-NA-hello
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("hi",1[2],"hello",sep="-\n") }
hi-
NA-
hello

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat() }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1) }
1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1, "a") }
1 a
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1, sep="\n") }
1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1,2,3) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1,2,sep=".") }
1.2
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1.2,3.4) }
1.2 3.4
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1:3) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1L) }
1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1L, 2L, 3L) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(2.3) }
2.3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(NULL) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(TRUE) }
TRUE
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(TRUE, c(1,2,3), FALSE, 7, c("a","b"), "x") }
TRUE 1 2 3 FALSE 7 a b x
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c("a","b")) }
a b
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(1,2,3)) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(1,2,3),c("a","b")) }
1 2 3 a b
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(1.2,3.4),5.6) }
1.2 3.4 5.6
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(1L, 2L, 3L)) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(TRUE,FALSE), TRUE) }
TRUE FALSE TRUE
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(rep(NA, 8), "Hey","Hey","Goodbye","\n") }
NA NA NA NA NA NA NA NA Hey Hey Goodbye

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(sep=" ", "hello") }
hello
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ m <- matrix(as.character(1:6), nrow=2) ; cat(m) }
1 2 3 4 5 6
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCatVarargs
#{ f <- function(...) {cat(...,sep="-")}; f("a") }
a
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCatVarargs
#{ f <- function(...) {cat(...,sep="-")}; f("a", "b") }
a-b
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCatVarargs
#{ f <- function(...) {cat(...,sep="-\n")}; f("a") }
a

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCatVarargs
#{ f <- function(...) {cat(...,sep="-\n")}; f("a", "b") }
a-
b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCbind
#{ cbind() }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCbind
#{ cbind(1:3,1:3) }
     [,1] [,2]
[1,]    1    1
[2,]    2    2
[3,]    3    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCbind
#{ cbind(1:3,2) }
     [,1] [,2]
[1,]    1    2
[2,]    2    2
[3,]    3    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCbind
#{ m <- matrix(1:6, nrow=2) ; cbind(11:12, m) }
     [,1] [,2] [,3] [,4]
[1,]   11    1    3    5
[2,]   12    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCeiling
#{ ceiling(c(0.2,-3.4,NA,0/0,1/0)) }
[1]   1  -3  NA NaN Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch("", "")}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch("abc", "deeee")}
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch("abc", "deeee",c("3","4"))}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch("abc", "deeeec",c("3","4"))}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch("m",   c("mean", "median", "mode"))}
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch("med", c("mean", "median", "mode"))}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch(c("ole","ab"),c("ole","ab"))}
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch(c("ole","ab"),c("ole","ole"))}
[1]  0 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch(matrix(c('h','l','e',6),2,2,byrow=T), "hello")}
[1]  1 NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch(matrix(c('h',3,'e',6),2,2,byrow=T), "hello")}
[1]  1 NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharMatch
#{charmatch(matrix(c(9,3,1,6),2,2,byrow=T), "hello")}
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharUtils
#{ tolower(c("Hello","ByE")) }
[1] "hello" "bye"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharUtils
#{ tolower(c()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharUtils
#{ toupper(c("hello","bye")) }
[1] "HELLO" "BYE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharUtils
#{ toupper(c()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCol
#{ ma <- cbind(x = 1:10, y = (-4:5)^2) ; col(ma) }
      [,1] [,2]
 [1,]    1    2
 [2,]    1    2
 [3,]    1    2
 [4,]    1    2
 [5,]    1    2
 [6,]    1    2
 [7,]    1    2
 [8,]    1    2
 [9,]    1    2
[10,]    1    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCol
#{ ma <- matrix(1:12, 3, 4) ; col(ma) }
     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    1    2    3    4
[3,]    1    2    3    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{ a = colSums(array(1:24,c(2,3,4))); colMeans(a)}
[1]  7 19 31 43

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3+2i,4+5i,2+0i,5+10i)))}
[1] 3.5+4.25i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3,4,2,5)))}
[1] 3.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3,4,NaN,5),ncol=2,nrow=2), na.rm = FALSE)}
[1] 3.5 NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3,4,NaN,5),ncol=2,nrow=2), na.rm = TRUE)}
[1] 3.5 5.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3L,4L,2L,5L)))}
[1] 3.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3L,NA,2L,5L),ncol=2,nrow=2), na.rm = FALSE)}
[1]  NA 3.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3L,NA,2L,5L),ncol=2,nrow=2), na.rm = TRUE)}
[1] 3.0 3.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3L,NaN,2L,5L),ncol=2,nrow=2), na.rm = FALSE)}
[1] NaN 3.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(3L,NaN,2L,5L),ncol=2,nrow=2), na.rm = TRUE)}
[1] 3.0 3.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(NA,NaN,NaN,NA),ncol=2,nrow=2))}
[1]  NA NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = FALSE)}
[1] 0.5  NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = TRUE)}
[1] 0.5 0.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = FALSE)}
[1] 0.5 NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = TRUE)}
[1] 0.5 0.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColMeans
#{colMeans(matrix(c(TRUE,FALSE,FALSE,TRUE)))}
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColSums
#{ a = colSums(array(1:24,c(2,3,4))); c(a[1,1],a[2,2],a[3,3],a[3,4]) }
[1]  3 19 35 47

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColSums
#{ a = colSums(array(1:24,c(2,3,4))); d = dim(a); c(d[1],d[2]) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColSums
#{ a = colSums(array(1:24,c(2,3,4))); length(a) }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColSums
#{ a = colSums(matrix(1:12,3,4)); dim(a) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColSums
#{ a = colSums(matrix(1:12,3,4)); length(a) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColSums
#{ colSums(matrix(1:12,3,4)) }
[1]  6 15 24 33

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColumnsRowsStat
#{ m <- matrix(1:6, nrow=2) ; colSums(na.rm = FALSE, x = m) }
[1]  3  7 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 100, 1:3, 200 ) }
[1] 100   1   2   3 200

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 1:3 ) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 1:3, 5, 7:9 ) }
[1] 1 2 3 5 7 8 9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 1:3, 7:9 ) }
[1] 1 2 3 7 8 9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 1L:3L ) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("1","b") }
[1] "1" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("1.00","2.00") }
[1] "1.00" "2.00"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("1.00","b") }
[1] "1.00" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("1.2","3.4") }
[1] "1.2" "3.4"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a", "b") }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a", NULL) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a", c("b","c")) }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a","b","c") }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("d") }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("d", 2L) }
[1] "d" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("d", NULL) }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("d", c(2L,"f")) }
[1] "d" "2" "f"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("g") }
[1] "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("g", 2) }
[1] "g" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("g", NULL) }
[1] "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("g", c(2,2)) }
[1] "g" "2" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("hello", "hi") }
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("j") }
[1] "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("j", NULL) }
[1] "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("j", TRUE) }
[1] "j"    "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("j", c(TRUE,TRUE)) }
[1] "j"    "TRUE" "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c() }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1+1i, as.raw(10)) }
[1]  1+1i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1+1i,2-3i,4+5i) }
[1] 1+1i 2-3i 4+5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1, 2) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1, NULL) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1, b=2) }
  b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1, c(2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1,z=list(1,b=22,3)) }
[[1]]
[1] 1

$z1
[1] 1

$z.b
[1] 22

$z3
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1.0,1L) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L, 2L) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L, NULL) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L, c(2L,3L)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L,1.0) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "a") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "a", NULL) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "d") }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "d", NULL) }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "g") }
[1] "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "g", NULL) }
[1] "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "j") }
[1] "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "j", NULL) }
[1] "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, 1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, 1, NULL) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, 1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, 1L, NULL) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, TRUE, NULL) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c("a","b")) }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c("d",2L)) }
[1] "d" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c("g",2)) }
[1] "g" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c("j",TRUE)) }
[1] "j"    "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c(1,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c(1L,2L)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c(TRUE,FALSE)) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL,1,2,3) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL,NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE, FALSE) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE, NULL) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE, c(FALSE,FALSE)) }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE,1L,1.0,list(3,4)) }
[[1]]
[1] TRUE

[[2]]
[1] 1

[[3]]
[1] 1

[[4]]
[1] 3

[[5]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE,1L,1.0,list(3,list(4,5))) }
[[1]]
[1] TRUE

[[2]]
[1] 1

[[3]]
[1] 1

[[4]]
[1] 3

[[5]]
[[5]][[1]]
[1] 4

[[5]][[2]]
[1] 5



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a="bar", b="baz") }
    a     b
"bar" "baz"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a="foo") }
    a
"foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1, 2) }
a
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1, b=2) }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1,b=2:3,list(x=FALSE))  }
$a
[1] 1

$b1
[1] 2

$b2
[1] 3

$x
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1:2, 42) }
a1 a2
 1  2 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1:2, b=c(42)) }
a1 a2  b
 1  2 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1:2, b=double()) }
a1 a2
 1  2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1i, b=2i) }
   a    b
0+1i 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=42) }
 a
42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=7i) }
   a
0+7i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=7i, a=1:2) }
   a   a1   a2
0+7i 1+0i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=FALSE) }
    a
FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=FALSE, b=TRUE) }
    a     b
FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=as.raw(1), b=as.raw(2)) }
 a  b
01 02

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=as.raw(7)) }
 a
07

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=c(z=1), 42) }
a.z
  1  42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(as.raw(10),  "test") }
[1] "0a"   "test"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(as.raw(10), as.raw(20)) }
[1] 0a 14

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), "c") }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), "c", c("a","b")) }
[1] "a" "b" "c" "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), NULL) }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), c("c","a")) }
[1] "a" "b" "c" "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), c("c","a"), c("b","c")) }
[1] "a" "b" "c" "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), "f") }
[1] "d" "2" "f"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), "f", c("d",2L)) }
[1] "d" "2" "f" "d" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), NULL) }
[1] "d" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), c("f","d")) }
[1] "d" "2" "f" "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), c("f","d"), c(2L,"f")) }
[1] "d" "2" "f" "d" "2" "f"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), 2) }
[1] "g" "2" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), 2, c("g",2)) }
[1] "g" "2" "2" "g" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), NULL) }
[1] "g" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), c(2,"g")) }
[1] "g" "2" "2" "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), c(2,"g"), c(2,2)) }
[1] "g" "2" "2" "g" "2" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), NULL) }
[1] "j"    "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), TRUE) }
[1] "j"    "TRUE" "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), TRUE, c("j",TRUE)) }
[1] "j"    "TRUE" "TRUE" "j"    "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), c(TRUE,"j")) }
[1] "j"    "TRUE" "TRUE" "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), c(TRUE,"j"), c(TRUE,TRUE)) }
[1] "j"    "TRUE" "TRUE" "j"    "TRUE" "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), 3) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), 3, c(1,2)) }
[1] 1 2 3 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), NULL) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), c(3,1)) }
[1] 1 2 3 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), c(3,1), c(2,3)) }
[1] 1 2 3 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), 3L) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), 3L, c(1L,2L)) }
[1] 1 2 3 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), NULL) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), c(3L,1L)) }
[1] 1 2 3 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), c(3L,1L), c(2L,3L)) }
[1] 1 2 3 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), FALSE) }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), FALSE, c(TRUE,FALSE)) }
[1]  TRUE FALSE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), NULL) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), c(FALSE,TRUE)) }
[1]  TRUE FALSE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), c(FALSE,TRUE), c(FALSE,FALSE)) }
[1]  TRUE FALSE FALSE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(x=1,2) }
x
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(x=1,y=2) }
x y
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ f <- function(x,y) { c(x,y) } ; f(1,1) ; f(1, TRUE) ; f(NULL, NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ f <- function(x,y) { c(x,y) } ; f(1,1) ; f(1, TRUE) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ is.matrix(c(matrix(1:4,2))) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x <- 1:2 ; names(x) <- c("A",NA) ; c(x,test=x) }
      A    <NA>  test.A test.NA
      1       2       1       2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8;  z<-c(x, integer()); z }
7 8
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; y<-3:4; names(y)<-9:10; z<-c(x, y); z }
 7  8  9 10
 1  2  3  4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; y<-3:4; z<-c(x, y); z }
7 8
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; y<-double(0);  z<-c(x, y); z }
7 8
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; z<-c(3L, x); z }
  7 8
3 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; z<-c(x, 3); attributes(z) }
$names
[1] "7" "8" ""


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; z<-c(x, 3); z }
7 8
1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; z<-c(x, 3L); z }
7 8
1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(1);  c(z=x, 42) }
 z
 1 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(y=1);  c(x, 42) }
 y
 1 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(y=1, 2);  c(a=x, 42) }
a.y  a2
  1   2  42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(y=1, z=2);  c(a=x, 42) }
a.y a.z
  1   2  42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(y=1, z=2); names(x)=c("", ""); c(a=x, 42) }
a1 a2
 1  2 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(z=1); names(x)=c(""); c(a=x, 42) }
 a
 1 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-expression(1); c(x) }
expression(1)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-expression(1); c(x,2) }
expression(1, 2)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testComplex
#{ complex(3) }
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testComplex
#{ complex(real=1,imag=2) }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testComplex
#{ complex(real=1,imaginary=2) }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testComplexGroupDispatch
#{x<--7+2i;class(x)<-"foo";Complex.foo<-function(z){1;};Im(x);}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ as.integer(cor(c(1,2,3),c(1,2,5))*10000000) }
[1] 9607689

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ cor(c(1,2,3),c(1,2,3)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ cor(cbind(c(1, 1, 1), c(1, 1, 1))) }
     [,1] [,2]
[1,]    1   NA
[2,]   NA    1
Warning message:
In cor(cbind(c(1, 1, 1), c(1, 1, 1))) : the standard deviation is zero

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ cor(cbind(c(1:9,0/0), 101:110)) }
     [,1] [,2]
[1,]    1   NA
[2,]   NA    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ cor(cbind(c(3,2,1), c(1,2,3))) }
     [,1] [,2]
[1,]    1   -1
[2,]   -1    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCov
#{ cov(c(1,2,3),c(1,2,3)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCov
#{ cov(c(1,2,3),c(1,2,4)) }
[1] 1.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCov
#{ cov(c(1,2,3),c(1,2,5)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMax
#{ cummax(1:10) }
 [1]  1  2  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMax
#{ cummax(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMax
#{ cummax(as.logical(-2:2)) }
[1] 1 1 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMax
#{ cummax(c(1,2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMax
#{ cummax(c(2000000000L, NA, 2000000000L)) }
[1] 2000000000         NA         NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMax
#{ cummax(c(TRUE,FALSE,NA,TRUE)) }
[1]  1  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMax
#{ cummax(c(TRUE,FALSE,TRUE)) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMin
#{ cummin(1:10) }
 [1] 1 1 1 1 1 1 1 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMin
#{ cummin(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMin
#{ cummin(as.logical(-2:2)) }
[1] 1 1 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMin
#{ cummin(c(1,2,3)) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMin
#{ cummin(c(2000000000L, NA, 2000000000L)) }
[1] 2000000000         NA         NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMin
#{ cummin(c(TRUE,FALSE,NA,TRUE)) }
[1]  1  0 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeMin
#{ cummin(c(TRUE,FALSE,TRUE)) }
[1] 1 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(1:10) }
 [1]  1  3  6 10 15 21 28 36 45 55

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(as.logical(-2:2)) }
[1] 1 2 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(1+1i, NA, 2+3i)) }
[1] 1+1i   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(1+1i,2-3i,4+5i)) }
[1] 1+1i 3-2i 7+3i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(1,2,3)) }
[1] 1 3 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(2000000000L, NA, 2000000000L)) }
[1] 2000000000         NA         NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(TRUE,FALSE,NA,TRUE)) }
[1]  1  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(TRUE,FALSE,TRUE)) }
[1] 1 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#is.data.frame(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDataFrameTypeCheck
#{ is.data.frame(as.data.frame(1)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDefaultArgs
#{ array(dim=c(-2,-2)); }
Error in array(dim = c(-2, -2)) : the dims contain negative values

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDefaultArgs
#{ array(dim=c(-2,2)); }
Error in array(dim = c(-2, 2)) : negative length vectors are not allowed

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDefaultArgs
#{ dim(array(dim=c(2.1,2.9,3.1,4.7))) }
[1] 2 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDefaultArgs
#{ length(array(dim=c(1,0,2,3))) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ delayedAssign("x", a+b); a <- 1 ; b <- 3 ; x }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ delayedAssign("x", y); delayedAssign("y", x) ; x }
Error: promise already under evaluation: recursive default argument reference or earlier problems?

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ delayedAssign("x", y); y <- 10; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() print ("outer");  g <- function() { delayedAssign("f", 1); f() }; g()}
[1] "outer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() { delayedAssign("x", 3); delayedAssign("x", 2); x } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() { delayedAssign("x", y); delayedAssign("y", x) ; x } ; f() }
Error in f() :
  promise already under evaluation: recursive default argument reference or earlier problems?

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() { delayedAssign("x", y); y <- 10; x  } ; f() }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() { delayedAssign("x",y); delayedAssign("y",x); g(x, y)}; g <- function(x, y) { x + y }; f() }
Error in g(x, y) :
  promise already under evaluation: recursive default argument reference or earlier problems?

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() { delayedAssign("x",y); delayedAssign("y",x); list(x, y)}; f() }
Error in f() :
  promise already under evaluation: recursive default argument reference or earlier problems?

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() { delayedAssign("x",y); delayedAssign("y",x); paste(x, y)}; f() }
Error in paste(x, y) :
  promise already under evaluation: recursive default argument reference or earlier problems?

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() { delayedAssign("x",y); delayedAssign("y",x); print(x, y)}; f() }
Error in print(x, y) :
  promise already under evaluation: recursive default argument reference or earlier problems?

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function() { p <- 0; for (i in 1:10) { if (i %% 2 == 0) { delayedAssign("a", p + 1); } else { a <- p + 1; }; p <- a; }; p }; f() }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ f <- function(...) { delayedAssign("x", ..1) ; y <<- x } ; f(10) ; y }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ h <- new.env(parent=emptyenv()) ; assign("x", 1, h) ; delayedAssign("x", y, h, h) ; assign("y", 2, h) ; get("x", h) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDelayedAssign
#{ h <- new.env(parent=emptyenv()) ; delayedAssign("x", y, h, h) ; assign("y", 2, h) ; get("x", h) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ deparse(TRUE) }
[1] "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ deparse(c(T, F)) }
[1] "c(TRUE, FALSE)"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ deparse(expression(a+b, c+d)) }
[1] "expression(a + b, c + d)"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ deparse(round) }
[1] ".Primitive(\"round\")"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ f <- function(x) { deparse(substitute(x)) } ; f(a + b * (c - d)) }
[1] "a + b * (c - d)"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ f<-function(...) { substitute(list(...)) }; deparse(f(c(1,2))) }
[1] "list(c(1, 2))"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ f<-function(...) { substitute(list(...)) }; deparse(f(c(x=1,2))) }
[1] "list(c(x = 1, 2))"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ f<-function(x) { deparse(x) }; l<-list(7); f(l) }
[1] "list(7)"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ f<-function(x) { deparse(x) }; l<-list(7, 42); f(l) }
[1] "list(7, 42)"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ f<-function(x) { deparse(x) }; l<-list(7, list(42)); f(l) }
[1] "list(7, list(42))"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ k <- 2 ; deparse(k) }
[1] "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDeparse
#{ x<-expression(1); deparse(x) }
[1] "expression(1)"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiGamma
#{ digamma(1) }
[1] -0.5772157

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiGamma
#{ digamma(1+1i) }
Error in digamma(1 + (0+1i)) : unimplemented complex function

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiGamma
#{ digamma(100) }
[1] 4.600162

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiGamma
#{ digamma(7.42) }
[1] 1.935283

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiGamma
#{ digamma(FALSE) }
[1] NaN
Warning message:
In digamma(FALSE) : NaNs produced

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiGamma
#{ digamma(as.double(NA)) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiGamma
#{ digamma(as.raw(1)) }
Error in digamma(as.raw(1)) :
  non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiGamma
#{ digamma(c(100, 2.2)) }
[1] 4.6001619 0.5442934

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ diag(1, 2, 7) }
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]    1    0    0    0    0    0    0
[2,]    0    1    0    0    0    0    0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ diag(1, 7) }
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]    1    0    0    0    0    0    0
[2,]    0    1    0    0    0    0    0
[3,]    0    0    1    0    0    0    0
[4,]    0    0    0    1    0    0    0
[5,]    0    0    0    0    1    0    0
[6,]    0    0    0    0    0    1    0
[7,]    0    0    0    0    0    0    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ diag(1, 7, 2) }
     [,1] [,2]
[1,]    1    0
[2,]    0    1
[3,]    0    0
[4,]    0    0
[5,]    0    0
[6,]    0    0
[7,]    0    0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ m <- matrix(1:6, nrow=2) ; diag(m) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) }
[1] 1 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ m <- matrix(1:9, nrow=3) ; diag(m) }
[1] 1 5 9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiff
#{ diff(1:10, 2) }
[1] 2 2 2 2 2 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiff
#{ diff(1:10, 2, 2) }
[1] 0 0 0 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiff
#{ x <- cumsum(cumsum(1:10)) ; diff(x, differences = 2) }
[1]  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiff
#{ x <- cumsum(cumsum(1:10)) ; diff(x, lag = 2) }
[1]   9  16  25  36  49  64  81 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ NCOL(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ NCOL(1:3) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ NROW(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ NROW(1:3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ b <- c(a=1+2i,b=3+4i) ; attr(b,"my") <- 211 ; dim(b) <- c(2,1) ; names(b) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ dim(1) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ dim(1:3) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ dimnames(1) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ dimnames(NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ m <- matrix(1:6, nrow=3) ; dim(m) }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ m <- matrix(1:6, nrow=3) ; ncol(m) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ m <- matrix(1:6, nrow=3) ; nrow(m) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ n <- 17 ; fac <- factor(rep(1:3, length = n), levels = 1:5) ; y<-tapply(1:n, fac, sum); attributes(y) }
$dim
[1] 5

$dimnames
$dimnames[[1]]
[1] "1" "2" "3" "4" "5"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ ncol(1) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ ncol(1:3) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ nrow(1) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ nrow(1:3) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; attr(x, "dim") <- c(2,1) ; x }
     [,1]
[1,]    1
[2,]    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- c(1, -1) ; x }
Error in dim(x) <- c(1, -1) : the dims contain negative values

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- c(1, 3) ; x }
Error in dim(x) <- c(1, 3) :
  dims [product 3] do not match the length of object [2]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- c(1, NA) ; x }
Error in dim(x) <- c(1, NA) : the dims contain missing values

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- c(1,2) ; x }
     [,1] [,2]
[1,]    1    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- integer() ; x }
Error in dim(x) <- integer() : length-0 dimension vector is invalid

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:4 ; f <- function() { x <- 1:4 ; dim(x) <<- c(2,2) } ; f() ; dim(x) }
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; attr(x, "dim")<-c(3, 4); dim(x) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c("12"); x }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c(12); x }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c(12+10i); x }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12
Warning message:
In dim(x) <- c(12 + (0+10i)) : imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c(3, 4); attr(x, "dim") }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c(as.raw(12)); x }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:1; dim(x)<-c(TRUE); x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:2; dim(x)=c(1,2); names(x)<-c("a", "b"); attr(x, "foo")<-"foo"; dim(x)<-NULL; attributes(x) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; attr(x, "dimnames") <- list(101, 102, 103, 104) }
Error in attr(x, "dimnames") <- list(101, 102, 103, 104) :
  'dimnames' applied to non-array

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c("a")); x }
Error in dimnames(x) <- list(c("a")) :
  length of 'dimnames' [1] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c("a", "b"), "c", c("d", "e"), 7); attributes(x) }
Error in dimnames(x) <- list(c("a", "b"), "c", c("d", "e"), 7) :
  length of 'dimnames' [4] must match that of 'dims' [3]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c("a", "b"), 42, c("d", "e", "f")); attributes(x) }
Error in dimnames(x) <- list(c("a", "b"), 42, c("d", "e", "f")) :
  length of 'dimnames' [3] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c("a", "b"), NULL, c("d")); x }
Error in dimnames(x) <- list(c("a", "b"), NULL, c("d")) :
  length of 'dimnames' [3] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(NULL); attributes(x) }
$dim
[1] 2 1 2

$dimnames
$dimnames[[1]]
NULL

$dimnames[[2]]
NULL

$dimnames[[3]]
NULL



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c("a", "b"), "c", c("d", "e")); attributes(x) }
$dim
[1] 2 1 2

$dimnames
$dimnames[[1]]
[1] "a" "b"

$dimnames[[2]]
[1] "c"

$dimnames[[3]]
[1] "d" "e"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c("a", "b"), 42, c("d", "e")); attributes(x) }
$dim
[1] 2 1 2

$dimnames
$dimnames[[1]]
[1] "a" "b"

$dimnames[[2]]
[1] "42"

$dimnames[[3]]
[1] "d" "e"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(4); y<-101:104; dim(y)<-c(2,2); x > y }
Error in x > y : non-conformable arrays

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(4); y<-101:104; dim(y)<-c(4); x > y }
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(4); y<-101:104; x > y }
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(4); y<-101:108; dim(y)<-c(8); x > y }
Error in x > y : non-conformable arrays

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; names(x)<-c(21:24); attr(x, "dim")<-c(4); attr(x, "foo")<-"foo"; x }
[1] 1 2 3 4
attr(,"names")
[1] "21" "22" "23" "24"
attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; names(x)<-c(21:24); attr(x, "foo")<-"foo"; x }
21 22 23 24
 1  2  3  4
attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; y<-101:104; dim(y)<-c(4); x > y }
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; y<-c(2, 2); dim(x)<-y; y[1]=4; dim(x) }
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; attr(x, "dimnames") <- 1 }
Error in attr(x, "dimnames") <- 1 : 'dimnames' must be a list

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; dimnames(x) <- 1; dimnames(x) }
Error in dimnames(x) <- 1 : 'dimnames' must be a list

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; dimnames(x)<-list("a"); dimnames(x); dimnames(x)<-list(); dimnames(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; dimnames(x)<-list() }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; dimnames(x)<-list(0) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)=1; attr(x, "foo")<-"foo"; dim(x)<-NULL; attributes(x) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)=1; attr(x, "names")<-"a"; dim(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)=1; names(x)<-"a"; dim(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dimnames(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-42; y<-(dim(x)<-1); y }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-42; y<-(dim(x)<-1); }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(1); dim(x)<-1; attr(x, "dimnames")<-list("b"); attributes(x) }
$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "b"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(1); dim(x)<-1; attr(x, "dimnames")<-list(a="b"); attributes(x) }
$dim
[1] 1

$dimnames
$dimnames$a
[1] "b"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(1); dim(x)<-1; names(x)<-c("b"); attributes(x) }
$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "b"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(1); y<-c(1); dim(x)<-1; dim(y)<-1; attr(x, "dimnames")<-(attr(y, "dimnames")<-list("b")); attributes(x) }
$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "b"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; attr(x, "foo")<-"foo"; attr(x, "dim")<-NULL; attributes(x) }
$names
[1] "a"

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; attributes(x) }
$names
[1] "a"

$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "z"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; dim(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; names(x)<-NULL; attr(x, "dimnames")<-NULL; attributes(x) }
$dim
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; names(x)<-NULL; attributes(x) }
$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "z"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-list(1,2,3); names(x)<-c(21:23); attr(x, "dim")<-c(3); attr(x, "foo")<-"foo"; x }
$`21`
[1] 1

$`22`
[1] 2

$`23`
[1] 3

attr(,"names")
[1] "21" "22" "23"
attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-list(1,2,3); names(x)<-c(21:23); attr(x, "foo")<-"foo"; x }
$`21`
[1] 1

$`22`
[1] 2

$`23`
[1] 3

attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ z <- 1 ; dim(z) <- c(1,1) ; dim(z) <- NULL ; z }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDoCall
#{ x<-list(c(1,2)); do.call("as.matrix", x) }
     [,1]
[1,]    1
[2,]    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDrop
#{ x <- array(1:12, dim = c(1,3,1,1,2,1,2)); drop(x) }
, , 1

     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

, , 2

     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 0, quote = "", justify = "centre");}
[1] "a"     "ab"    "abcde" "<NA>"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 0, quote = "'", justify = "right");}
[1] "'a'"     "'ab'"    "'abcde'" "NA"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 0, quote = "'", na.encode=FALSE, justify = "right");}
[1] "'a'"     "'ab'"    "'abcde'" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 2, quote = "'", na.encode=FALSE, justify = "centre");}
[1] "'a'"     "'ab'"    "'abcde'" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 3, quote = "", na.encode=TRUE, justify = "centre");}
[1] " a "   "ab "   "abcde" "<NA>"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 3, quote = "'", justify = "centre");}
[1] "'a'"     "'ab'"    "'abcde'" "NA "

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 3, quote = "'", na.encode=FALSE, justify = "centre");}
[1] "'a'"     "'ab'"    "'abcde'" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 7, quote = "", na.encode=FALSE, justify = "centre");}
[1] "   a   " "  ab   " " abcde " NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = 7, quote = "", na.encode=TRUE, justify = "centre");}
[1] "   a   " "  ab   " " abcde " " <NA>  "

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = NA);}
[1] "a    " "ab   " "abcde" "<NA> "

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = NA, justify = "centre");}
[1] "  a  " " ab  " "abcde" "<NA> "

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = NA, justify = "right");}
[1] "    a" "   ab" "abcde" " <NA>"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = NA, quote = "'", justify = "right");}
[1] "    'a'" "   'ab'" "'abcde'" "     NA"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEncodeString
#{x <- c("a", "ab", "abcde", NA); encodeString(x, width = NA, quote = "'", na.encode=FALSE, justify = "right");}
[1] "    'a'" "   'ab'" "'abcde'" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(".GlobalEnv") }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment("package:base") }
<environment: base>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(-1) }
Error in as.environment(-1) : no enclosing environment

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(0) }
Error in as.environment(0) : invalid 'pos' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(1) }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(length(search()) + 1) }
<environment: R_EmptyEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(length(search()) + 2) }
Error in as.environment(length(search()) + 2) : invalid 'pos' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(length(search())) }
<environment: base>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ baseenv() }
<environment: base>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e <- new.env(); `parent.env<-`(e, emptyenv()); identical(parent.env(e), emptyenv()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env() ; assign("x",1,e) ; get("x",e) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env() ; assign("x",1,e) ; ls(e) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env() ; ls(e) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockBinding("a", e); rm("a",envir = e); ls() }
[1] "e"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockEnvironment(e); assign("a", 2, e) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockEnvironment(e); rm("a",envir = e); }
Error in rm("a", envir = e) :
  cannot remove bindings from a locked environment

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockEnvironment(e, TRUE); assign("a", 2, e) }
Error in assign("a", 2, e) :
  cannot change value of locked binding for 'a'

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockEnvironment(e, TRUE); unlockBinding("a", e); assign("a", 2, e) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; rm("a",envir = e); ls() }
[1] "e"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e); bindingIsLocked("a", e) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e); lockBinding("a", e); assign("a", 2, e) }
Error in assign("a", 2, e) :
  cannot change value of locked binding for 'a'

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e); lockBinding("a", e); bindingIsLocked("a", e) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("x", 1, e); get("x", e) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); environmentIsLocked(e) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); get("x", e) }
Error in get("x", e) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); lockEnvironment(e); assign("a", 1, e) }
Error in assign("a", 1, e) : cannot add bindings to a locked environment

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); lockEnvironment(e); environmentIsLocked(e) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); x<-1; get("x", e) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); x<-1; get("x", e, inherits=FALSE) }
Error in get("x", e, inherits = FALSE) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(parent=emptyenv()); x<-1; get("x", e) }
Error in get("x", e) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ emptyenv() }
<environment: R_EmptyEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environment() }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environment(environment) }
<environment: namespace:base>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environmentName(1) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environmentName(baseenv()) }
[1] "base"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environmentName(emptyenv()) }
[1] "R_EmptyEnv"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environmentName(globalenv()) }
[1] "R_GlobalEnv"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ f <- function()  { as.environment(-1) } ; f() }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ f <- function(x, y) { ls() }; f(1, 2) }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ globalenv() }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign("abc", "yes", h) ; exists(c("abc", "def"), h) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign("abc", "yes", h) ; exists(c("def", "abc"), h) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign("x", 1, h) ; assign("x", 1, h) ; get("x", h) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign("x", 1, h) ; assign("x", 2, h) ; get("x", h) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign(c("a"), 1, h) ; ls(h) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign(c("a"), 1L, h) ; ls(h) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; u <- 1 ; assign("x", u, h) ; assign("x", u, h) ; get("x", h) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("x", 1, h) ; assign("y", 2, h) ; ls(h) }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("x", 1, h) ; exists("x", h) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("x", 1, h) ; exists("xx", h) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("y", 1, h) ; assign("x", 2, h) ; ls(h) }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("y", 2, h) ; get("z", h) }
Error in get("z", h) : object 'z' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=globalenv()) ; assign("x", 10, h, inherits=TRUE) ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ hh <- new.env() ; assign("z", 3, hh) ; h <- new.env(parent=hh) ; assign("y", 2, h) ; exists("z", h) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ hh <- new.env() ; assign("z", 3, hh) ; h <- new.env(parent=hh) ; assign("y", 2, h) ; get("z", h) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ identical(parent.env(baseenv()), emptyenv()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ is.environment(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ is.environment(globalenv()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ls() }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ls(.GlobalEnv) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ph <- new.env() ; h <- new.env(parent=ph) ; assign("x", 10, h, inherits=TRUE) ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ph <- new.env() ; h <- new.env(parent=ph) ; assign("x", 2, h) ; assign("x", 10, h, inherits=TRUE) ; get("x", ph)}
Error in get("x", ph) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ph <- new.env() ; h <- new.env(parent=ph) ; assign("x", 2, ph) ; assign("x", 10, h, inherits=TRUE) ; get("x", ph)}
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ph <- new.env(parent=emptyenv()) ; h <- new.env(parent=ph) ; assign("x", 10, h, inherits=TRUE) ; get("x", ph)}
Error in get("x", ph) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ plus <- function(x) { function(y) x + y } ; plus_one <- plus(1) ; ls(environment(plus_one)) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ rm("foo", envir = baseenv()) }
Error in rm("foo", envir = baseenv()) :
  cannot remove variables from the base environment

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ x <- 1 ; ls(.GlobalEnv) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ x <- 1; .y <- 2; ls(globalenv()) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ x <- 1; ls(globalenv()) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ a <- 1; eval(a + 1) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ a <- 1; eval(a) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ a <- 1; eval(expression(a + 1)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ e1 <- new.env(); assign("x", 100, e1); e2 <- new.env(parent = e1); evalq(x, e2) }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ eval(2 ^ 2 ^ 3)}
[1] 256

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ eval(x <- 1); ls() }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ f <- function(x) { eval(x) }; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ f <- function(z) {z}; e<-as.call(c(expression(f), 7)); eval(e) }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ f<-function(...) { substitute(list(...)) }; eval(f(c(1,2))) }
[[1]]
[1] 1 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ f<-function(...) { substitute(list(...)) }; eval(f(c(x=1,2))) }
[[1]]
x
1 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ f<-function(...) { substitute(list(...)) }; x<-1; eval(f(c(x,2))) }
[[1]]
[1] 1 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ g<-function() { f<-function() { 42 }; substitute(f()) } ; eval(g()) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ g<-function(y) { f<-function(x) { x }; substitute(f(y)) } ; eval(g(42)) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ ne <- new.env(); eval(x <- 1, ne); ls() }
[1] "ne" "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ ne <- new.env(); evalq(envir=ne, expr=x <- 1); ls(ne) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEval
#{ ne <- new.env(); evalq(x <- 1, ne); ls(ne) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExp
#{ round( exp(1+2i), digits=5 ) }
[1] -1.1312+2.47173i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExp
#{ round( exp(c(1+1i,-2-3i)), digits=5 ) }
[1]  1.46869+2.28736i -0.13398-0.01910i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExpression
#{ class(expression(1)) }
[1] "expression"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExpression
#{ f <- function(z) {z}; e<-c(expression(f), 7); eval(e) }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExpression
#{ f <- function(z) {z}; e<-expression(f); e2<-c(e, 7); eval(e2) }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExpression
#{ x<-expression(1); typeof(x[[1]]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExpression
#{ x<-expression(1); y<-c(x,2); typeof(y[[1]]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExpression
#{ x<-expression(1); y<-c(x,2); typeof(y[[2]]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testExpression
#{ x<-expression(a); typeof(x[[1]]) }
[1] "symbol"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFFT
#{ fft(10) }
[1] 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFFT
#{ fft(1:4) }
[1] 10+0i -2+2i -2+0i -2-2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFFT
#{ fft(1:4, inverse=TRUE) }
[1] 10+0i -2-2i -2+0i -2+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFFT
#{ fft(cbind(1:2,3:4)) }
      [,1]  [,2]
[1,] 10+0i -4+0i
[2,] -2+0i  0+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ as.logical(factor(c("a", "b", "a"))) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ as.logical(factor(integer())) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x <- factor(c("a", "b", "a")); attr(x, "levels")<-c(7+7i, 42+42i); is.complex(levels(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x <- factor(c("a", "b", "a")); attr(x, "levels")<-c(7, 42); is.double(levels(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x <- factor(c("a", "b", "a")); attr(x, "levels")<-c(7L, 42L); is.integer(levels(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x <- factor(c("a", "b", "a")); attr(x, "levels")<-c(FALSE, TRUE); is.logical(levels(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x <- factor(c("a", "b", "a")); attr(x, "levels")<-c(as.raw(7), as.raw(42)); is.raw(levels(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x <- factor(c("a", "b", "a")); levels(x)<-c(7, 42); is.character(levels(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-c("1","2","3"); class(x)<-"factor"; x }
Error in class(x) <- "factor" :
  adding class "factor" to an invalid object

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-c(1,2,3); class(x)<-"factor"; x }
Error in class(x) <- "factor" :
  adding class "factor" to an invalid object

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-c(1L, 2L, 1L); class(x)<-c("factor", "ordered"); levels(x)<-c("a", "b"); x + "a" }
[1] NA NA NA
Warning message:
In Ops.factor(x, "a") : + not meaningful for factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-c(1L, 2L, 1L); class(x)<-c("factor", "ordered"); levels(x)<-c("a", "b"); x > "a" }
[1] NA NA NA
Warning message:
In Ops.factor(x, "a") : > not meaningful for factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-c(1L, 2L, 1L); class(x)<-c("ordered", "factor"); levels(x)<-c("a", "b"); x + "a" }
[1] NA NA NA
Warning message:
In Ops.ordered(x, "a") : '+' is not meaningful for ordered factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-c(1L, 2L, 1L); class(x)<-c("ordered", "factor"); levels(x)<-c("a", "b"); x > "a" }
[1] FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-c(1L,2L,3L); class(x)<-"factor"; x }
Error in print.factor(1:3) : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-NULL; as.character(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(+7+7i, +42+42i); x == 7+7i }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(+7, +42); x == 7 }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(+7L, +42L); x == 7 }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(7+7i, 42+42i); x }
[1]  7+ 7i 42+42i  7+ 7i
Levels: 7+7i 42+42i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(7, 42); x }
[1]  7 42  7
Levels: 7 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(7L, 42L); x  }
[1]  7 42  7
Levels: 7 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(FALSE, TRUE); x }
[1] 0 1 0
Levels: FALSE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(as.raw(7), as.raw(42)); x == as.raw(7) }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-c(as.raw(7), as.raw(42)); x }
Error in print.factor(c(1L, 2L, 1L)) :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); attr(x, "levels")<-character(); as.character(x) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); is.atomic(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); levels(x)<-c(7,42); is.character(levels(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); levels(x)<-c(7,42); x }
[1] 7  42 7
Levels: 7 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x + "a" }
[1] NA NA NA
Warning message:
In Ops.factor(x, "a") : + not meaningful for factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x + c("a", "b") }
[1] NA NA NA
Warning message:
In Ops.factor(x, c("a", "b")) : + not meaningful for factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x == "a" }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x == c("a", "b") }
[1] TRUE TRUE TRUE
Warning messages:
1: In is.na(e1) | is.na(e2) :
  longer object length is not a multiple of shorter object length
2: In `==.default`(x, c("a", "b")) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x > "a" }
[1] NA NA NA
Warning message:
In Ops.factor(x, "a") : > not meaningful for factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x > c("a", "b") }
[1] NA NA NA
Warning message:
In Ops.factor(x, c("a", "b")) : > not meaningful for factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x[1] }
[1] a
Levels: a b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x[2] }
[1] b
Levels: a b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x[[1]] }
[1] a
Levels: a b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x[[2]] }
[1] b
Levels: a b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x[c(1,2)] }
[1] a b
Levels: a b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a")); x[c(1,2,3,4)] }
[1] a    b    a    <NA>
Levels: a b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a"), ordered=TRUE); is.atomic(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a"), ordered=TRUE); x + "a" }
[1] NA NA NA
Warning message:
In Ops.ordered(x, "a") : '+' is not meaningful for ordered factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a"), ordered=TRUE); x > "a" }
[1] FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("a", "b", "a", "c")); x == c("a", "b") }
[1]  TRUE  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("c", "b", "a", "c")); y<-c(1); y[1]<-x; y }
[1] 3
Warning message:
In y[1] <- x :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("c", "b", "a", "c")); y<-c(1); y[[1]]<-x; y }
Error in y[[1]] <- x : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("c", "b", "a", "c")); y<-list(1); y[1]<-x; y }
[[1]]
[1] 3

Warning message:
In y[1] <- x :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-factor(c("c", "b", "a", "c")); y<-list(1); y[[1]]<-x; y }
[[1]]
[1] c b a c
Levels: a b c


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-structure(c(1,2,1), .Label=c("a", "b"), class = c('factor'), .Names=c("111","112","113")); y<-structure(c(1,2,1), .Label=c("a", "b"), class = c('factor'), .Names=c("111","112","113")); x+y }
[1] NA NA NA
Warning message:
In Ops.factor(x, y) : + not meaningful for factors

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-structure(c(1,2,1), .Label=c("a", "b"), class = c('factor'), .Names=c("111","112","113")); y<-structure(c(1,2,1), .Label=c("a", "b"), class = c('factor'), .Names=c("111","112","113")); x==y }
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-structure(c(1.1,2.2,1.1), .Label=c("a", "b"), class = c('factor')); attributes(x) }
$levels
[1] "a" "b"

$class
[1] "factor"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-structure(c(1.1,2.2,1.1), .Label=c("a", "b"), class = c('factor')); x }
[1] a b a
Levels: a b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-structure(c(1.2,2.2,1.1), .Label=c("a", "b"), class = c('factor')); x }
[1] a b a
Levels: a b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-structure(c(2.2,3.2,2.1), .Label=c("a", "b"), class = c('factor')); as.integer(x) }
[1] 2 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ x<-structure(factor(c("a","b","c")), class=NULL); x }
[1] 1 2 3
attr(,"levels")
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{data = c(1,2,2,3,1,2,3,3,1,2,3,3,1);fdata<-factor(data);fdata}
 [1] 1 2 2 3 1 2 3 3 1 2 3 3 1
Levels: 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{data = c(1,2,2,3,1,2,3,3,1,2,3,3,1);fdata<-factor(data);levels(fdata) = c('I','II','III');fdata;}
 [1] I   II  II  III I   II  III III I   II  III III I
Levels: I II III

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{data = c(1,2,2,3,1,2,3,3,1,2,3,3,1);rdata = factor(data,labels=c("I","II","III"));rdata;}
 [1] I   II  II  III I   II  III III I   II  III III I
Levels: I II III

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{ses <- c("low", "middle", "low", "low", "low", "low", "middle", "low", "middle", "middle", "middle", "middle", "middle", "high", "high", "low", "middle", "middle", "low", "high"); ses.f.bad.order <- factor(ses); is.factor(ses.f.bad.order);levels(ses.f.bad.order);ses.f <- factor(ses, levels = c("low", "middle", "high"));ses.order <- ordered(ses, levels = c("low", "middle", "high"));ses.order; } 
 [1] low    middle low    low    low    low    middle low    middle middle
[11] middle middle middle high   high   low    middle middle low    high
Levels: low < middle < high

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{set.seed(124); schtyp <- sample(0:1, 20, replace = TRUE);schtyp.f <- factor(schtyp, labels = c("private", "public")); schtyp.f;}
 [1] private private public  private private private public  private public
[10] private public  public  public  public  private private public  public
[19] public  private
Levels: private public

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFactor
#{set.seed(124);l1 = factor(sample(letters,size=10,replace=TRUE));set.seed(124);l2 = factor(sample(letters,size=10,replace=TRUE));l12 = factor(c(levels(l1)[l1],levels(l2)[l2]));l12;}
 [1] c k n k f h p m x h c k n k f h p m x h
Levels: c f h k m n p x

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFloor
#{ floor(c(0.2,-3.4,NA,0/0,1/0)) }
[1]   0  -4  NA NaN Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFormals
#{ f <- function(a) {}; formals(f) }
$a



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFormals
#{ f <- function(a, b = c(1, 2)) {}; formals(f) }
$a


$b
c(1, 2)


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFormals
#{ f <- function(a, b) {}; formals(f) }
$a


$b



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGL
#{ a <- gl(2, 4, 8) ; print(a) }
[1] 1 1 1 1 2 2 2 2
Levels: 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGL
#{ b <- gl(2, 2, 8, labels = c("ctrl", "treat")) ; print(b) }
[1] ctrl  ctrl  treat treat ctrl  ctrl  treat treat
Levels: ctrl treat

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGL
#{x<-gl(2, 1, 20); print(x)}
 [1] 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2
Levels: 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGL
#{x<-gl(2, 2, 20); print(x)}
 [1] 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1 1 2 2
Levels: 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGL
#{x<-gl(2, 8, labels = c("Control", "Treat")); print(x)}
 [1] Control Control Control Control Control Control Control Control Treat
[10] Treat   Treat   Treat   Treat   Treat   Treat   Treat
Levels: Control Treat

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ get(".Platform")$endian }
[1] "little"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ get(".Platform", globalenv())$endian }
[1] "little"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ get("dummy") }
Error in get("dummy") : object 'dummy' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ x <- 33 ; f <- function() { get("x", inherits = FALSE) } ; f() }
Error in get("x", inherits = FALSE) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ x <- 33 ; f <- function() { if (FALSE) { x <- 22  } ; get("x", inherits = FALSE) } ; f() }
Error in get("x", inherits = FALSE) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="closure")};y();}
function(){y<-2;get("y",mode="closure")}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="double")};y();}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="double",inherits=FALSE)};y();}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="integer")};y();}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="integer",inherits=FALSE);get("y",mode="integer",inherits=FALSE)};y();}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{ x<-1; oldClass(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-1;class(x)}
[1] "numeric"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-1L;class(x)}
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-c(1,2,3);class(x)}
[1] "numeric"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-c(1L,2L,3L);class(x)}
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-seq(1.1,10.1);class(x)}
[1] "numeric"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-seq(1L,10L);class(x)}
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("1+1i", "7", "42.1", "7+42i"); grep("[0-9].*[-+][0-9].*i$", txt) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("arm","foot","lefroo", "bafoobar"); grep("foo", txt) }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("arm","foot","lefroo", "bafoobar"); grepl("foo", txt) }
[1] FALSE  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("is", "intended", "to", "guarantee", "your", "freedom"); grep("[gu]", txt) }
[1] 4 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("rai", "ira", "iri"); grep("i$", txt) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testHeadNTail
#{head(letters)}
[1] "a" "b" "c" "d" "e" "f"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testHeadNTail
#{head(letters, n = -6L)}
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testHeadNTail
#{head(letters, n = 10L)}
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testHeadNTail
#{tail(letters)}
[1] "u" "v" "w" "x" "y" "z"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testHeadNTail
#{tail(letters, n = -6L)}
 [1] "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y"
[20] "z"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testHeadNTail
#{tail(letters, n = 10L)}
 [1] "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testHeadNTail
#{x<-matrix(c(1,2,3,4),2,2); head(x,1);}
     [,1] [,2]
[1,]    1    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testHeadNTail
#{x<-matrix(c(1,2,3,4),2,2); tail(x,1);}
     [,1] [,2]
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIfelse
#{ ifelse(FALSE,1,0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIfelse
#{ ifelse(NA,1,0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIfelse
#{ ifelse(TRUE,1,0) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ "hello" %in% c("I", "say", "hello", "world") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ 2 %in% c(1,2,3) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ `%in%`(2,c(1,2,3)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ c("hello", "say") %in% c("I", "say", "hello", "world") }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ c(1,2,3,4,5) %in% c(1,2,1,2) }
[1]  TRUE  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{ inherits(NULL, "try-error") }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{ inherits(new.env(), "try-error") }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{ inherits(textConnection("abc"), "connection") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{ x<-data.frame(c(1,2)); inherits(x, "data.frame") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{ x<-factor("a", "b", "a"); inherits(x, "factor") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10; inherits(x, "a") ;}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a");inherits(x, c("a", "b", "a"), TRUE) ;}
[1] 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b"); inherits(x,"a") ;}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, "a", TRUE) ;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, "a", c(TRUE)) ;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, c("a", "b", "c"), TRUE) ;}
[1] 1 2 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, c("c", "q", "b")) ;}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, c("c", "q", "b"), TRUE) ;}
[1] 0 0 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInteraction
#{ a <- gl(2, 4, 8) ; b <- gl(2, 2, 8, labels = c("ctrl", "treat")) ; interaction(a, b) }
[1] 1.ctrl  1.ctrl  1.treat 1.treat 2.ctrl  2.ctrl  2.treat 2.treat
Levels: 1.ctrl 2.ctrl 1.treat 2.treat

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInteraction
#{ a <- gl(2, 4, 8) ; b <- gl(2, 2, 8, labels = c("ctrl", "treat")) ; s <- gl(2, 1, 8, labels = c("M", "F")) ; interaction(a, b, s, sep = ":") }
[1] 1:ctrl:M  1:ctrl:F  1:treat:M 1:treat:F 2:ctrl:M  2:ctrl:F  2:treat:M
[8] 2:treat:F
8 Levels: 1:ctrl:M 2:ctrl:M 1:treat:M 2:treat:M 1:ctrl:F ... 2:treat:F

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvisible
#{ f <- function() { invisible(23) } ; f() }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvisible
#{ f <- function() { invisible(23) } ; toString(f()) }
[1] "23"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvisible
#{ f <- function(x, r) { if (x) invisible(r) else r }; f(FALSE, 1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ f <- function(a, ...) { list(...) } ; f(1) }
list()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ g <- function(...) { max(...) } ; g(1,2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ matrix(1:4, n = 2) }
Error in matrix(1:4, n = 2) :
  argument 2 matches multiple formal arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ matrix(da=1:3,1) }
     [,1] [,2] [,3]
[1,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ rnorm(n = 1, n = 2) }
Error in rnorm(n = 1, n = 2) :
  formal argument "n" matched by multiple actual arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ rnorm(s = 1, s = 1) }
Error in rnorm(s = 1, s = 1) :
  formal argument "sd" matched by multiple actual arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ !is.atomic(function() {}) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ !is.atomic(list()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(1) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(1:3) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(1L) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(NA) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(NULL) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(c(1,2,3)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsCall
#{ cl <- call("f") ; is.call(cl) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsCall
#{ cl <- call("f", 2, 3) ; is.call(cl) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsCall
#{ cl <- list(f, 2, 3) ; is.call(cl) }
Error: object 'f' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsCall
#{ is.call(call) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsFactor
#{x<-1;class(x)<-"foo";is.factor(x)}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(1[10]) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(NA) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(c(1,2,3,4)) }
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(c(1,2,NA,4)) }
[1] FALSE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(c(1[10],2[10],3)) }
[1]  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(c(NA)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNABroken
#{ is.na(list(1[10],1L[10],list(),integer())) }
[1]  TRUE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(1:3) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(1L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(NA) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(c(1,2,3)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ !is.recursive(function() {}) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ !is.recursive(list()) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ is.recursive(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ is.recursive(1:3) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ is.recursive(1L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ is.recursive(NA) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ is.recursive(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ is.recursive(TRUE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsRecursive
#{ is.recursive(c(1,2,3)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(NA) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(as.vector(1)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(as.vector(FALSE)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(as.vector(TRUE)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsUnsorted
#{ is.unsorted(c(1,2,3,4)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsUnsorted
#{ is.unsorted(c(1,2,6,4)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ is.vector(1) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ is.vector(1:3) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ is.vector(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1); attr(x, "foo")<-"foo"; is.vector(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1,3); is.vector(x, "d"); }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1,3); is.vector(x, "double"); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1,3); is.vector(x, "integer"); }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1:3); is.vector(x, "double"); }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1:3); is.vector(x, "integer"); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-list(1); attr(x, "foo")<-"foo"; is.vector(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-list(1,3); }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{is.vector(c(TRUE,FALSE),"logical");}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{is.vector(c(TRUE,FALSE),"numeric");}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{x<-1;class(x)<-"a";is.vector(x);}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{x<-1;names(x)<-"a";is.vector(x);}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(call("foo"))
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(expression(x + 1))
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(quote(x))
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLanguageTypeCheck
#is.language(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ f <- function() { lapply(c(X="a",Y="b"), function(x) { c(a=x) })  } ; f() }
$X
  a
"a"

$Y
  a
"b"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ f <- function(x) 2 * x ; lapply(1:3, f) }
[[1]]
[1] 2

[[2]]
[1] 4

[[3]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ f <- function(x, y) x * y ; lapply(1:3, f, 2) }
[[1]]
[1] 2

[[2]]
[1] 4

[[3]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ lapply(1:3, function(x) { 2*x }) }
[[1]]
[1] 2

[[2]]
[1] 4

[[3]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ lapply(1:3, function(x,y) { x*y }, 2) }
[[1]]
[1] 2

[[2]]
[1] 4

[[3]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ lapply(1:3, function(x,y,z) { as.character(x*y+z) }, 2,7) }
[[1]]
[1] "9"

[[2]]
[1] "11"

[[3]]
[1] "13"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ lapply(1:3, sum) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ lapply(1:3, sum, 2) }
[[1]]
[1] 3

[[2]]
[1] 4

[[3]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ x <- list(a=1:10, b=1:20) ; lapply(x, sum) }
$a
[1] 55

$b
[1] 210


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ x<-c(1,3,4);attr(x,"names")<-c("a","b","c");lapply(x, function(x,y) { as.character(x*y) }, 2) }
$a
[1] "2"

$b
[1] "6"

$c
[1] "8"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(1+1i) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(1:3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(NA) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(NULL) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(TRUE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(c(z=1:4)) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(d<-dim(1:3)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x <- 1 ; f <- function() { length(x) <<- 2 } ; f() ; x }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x <- 1:2 ; length(x) <- 4 ; x }
[1]  1  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x <- 1:2 ; z <- (length(x) <- 4) ; z }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x <- 1:4 ; length(x) <- 2 ; x }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x<-c(a=7, b=42); length(x)<-1; x }
a
7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x<-c(a=7, b=42); length(x)<-4; x }
 a  b
 7 42 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 1 ; levels(x)<-"a"; levels(x);}
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 1 ; levels(x)<-1; levels(x);}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 1 ; levels(x)<-4.5; levels(x);}
[1] 4.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 1 ; levels(x)<-NULL; levels(x)}
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 1 ; levels(x)<-c("cat", "dog"); levels(x)}
[1] "cat" "dog"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 1 ; levels(x)<-c(1); levels(x);}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 1 ; levels(x)<-c(1, "cat", 4.5, "3"); levels(x);}
[1] "1"   "cat" "4.5" "3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 1 ; levels(x)<-c(3, "cat"); levels(x);}
[1] "3"   "cat"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 5 ; levels(x)<-"catdog"; levels(x);}
[1] "catdog"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLevels
#{ x <- 5 ; levels(x)<-c(1,2,3); levels(x);}
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLgamma
#{ lgamma(1) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLgamma
#{ lgamma(1+1i) }
Error in lgamma(1 + (0+1i)) : unimplemented complex function

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLgamma
#{ lgamma(100) }
[1] 359.1342

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLgamma
#{ lgamma(7.42) }
[1] 7.379082

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLgamma
#{ lgamma(FALSE) }
[1] Inf
Warning message:
value out of range in 'lgamma'

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLgamma
#{ lgamma(as.double(NA)) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLgamma
#{ lgamma(as.raw(1)) }
Error in lgamma(as.raw(1)) :
  non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLgamma
#{ lgamma(c(100, 2.2)) }
[1] 359.13420537   0.09694747

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ list(1, b=2) }
[[1]]
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ list(a=1, 2) }
$a
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ list(a=1, b=2) }
$a
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-c(y=1, 2);  list(a=x, 42) }
$a
y
1 2

[[2]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-list(y=1, 2);  c(42, a=x) }
[[1]]
[1] 42

$a.y
[1] 1

$a2
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-list(y=1, 2);  c(a=x, 42) }
$a.y
[1] 1

$a2
[1] 2

[[3]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-list(y=1, 2);  c(a=x, c(y=7,z=42)) }
$a.y
[1] 1

$a2
[1] 2

$y
[1] 7

$z
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-list(y=1, 2);  c(a=x, c(z=7,42)) }
$a.y
[1] 1

$a2
[1] 2

$z
[1] 7

[[4]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLocal
#{ kk <- local({k <- function(x) {x*2}}); kk(8)}
[1] 16

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLocal
#{ ne <- new.env(); local(a <- 1, ne); ls(ne) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ log(0) }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ log(1) } 
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ log(c(0,1)) }
[1] -Inf    0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ round( log(10,), digits = 5 ) }
[1] 2.30259

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ round( log(10,10), digits = 5 ) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ round( log(10,2), digits = 5 ) }
[1] 3.32193

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ as.integer(log10(200)*100000) } 
[1] 230102

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(0) }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(1) } 
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(10) } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(100) } 
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(c(0,1)) }
[1] -Inf    0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ as.integer(log2(6)*1000000) } 
[1] 2584962

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(0) }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(1) } 
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(2) } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(4) } 
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(c(0,1)) }
[1] -Inf    0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ assign("z", 10, inherits=TRUE) ; z }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ exists("sum", inherits = FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() {  g <- function() { assign("x", 1, inherits=TRUE) } ; g() } ; f() ; x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { 4 } ; h <- function() { assign("f", 5) ; f() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { 4 } ; h <- function() { assign("z", 5) ; f() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 1) ; g <- function() { assign("z", 2) ; x } ; g() } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 1) ; x } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 1) ; y <- 2 ; if (FALSE) { z <- 3 } ; ls() } ; f() }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 1) ; y <- 2 ; ls() } ; f() }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 2) ; exists("x", inherits=FALSE) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 2, inherits=TRUE) ; assign("x", 1) ; h <- function() { x } ; h() } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 3) ; g <- function() { x } ; g() } ; x <- 10 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 3) ; h <- function() { assign("z", 4) ; g <- function() { x } ; g() } ; h() } ; x <- 10 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 3) ; h <- function() { g <- function() { x } ; g() } ; h() } ; x <- 10 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", function(){2}, inherits=TRUE) ; assign("x", function(){1}) ; h <- function() { x() } ; h() } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("z", 2) ; g <- function() { get("x", inherits=TRUE) } ; g() } ; x <- 3 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { for (i in rev(1:10)) { assign(as.character(i), i) } ; ls() } ; length(f()) }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { g <- function() { get("x", inherits=TRUE) } ; g() } ; x <- 3 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { if (FALSE) { x <- 1 } ; y <- 2 ; ls() } ; f() }
[1] "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { if (FALSE) { x <- 3 } ; exists("x", inherits=FALSE) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 1 ; g <- function() { h <- function() { x <<- 2 } ; h() } ; g() ; x } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 1 ; y <- 2 ; ls() } ; f() }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; g <- function() { assign("x", 1, inherits=FALSE) } ; g() ; x } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; g <- function() { assign("x", 1, inherits=TRUE) } ; g() ; x } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; g <- function() { if (FALSE) { x <- 2 } ; assign("x", 1, inherits=TRUE) } ; g() ; x } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; g <- function() { x <- 3 ; assign("x", 1, inherits=FALSE) ; x } ; g() } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; get("x") } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 22 ; get("x", inherits=FALSE) } ; f() }
[1] 22

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 3 ; exists("x", inherits=FALSE) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { z <- 3 ; exists("x", inherits=FALSE) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function(x) { assign(x, 23) ; exists(x) } ; c(f("a"),f("b")) }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function(z) { exists("z") } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ fu <- function() { uu <<- 23 } ; fu() ; ls(globalenv()) }
[1] "fu" "uu"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { f <- function() { assign("x", 3) ; if (FALSE) { x } ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { f <- function() { assign("z", 3) ; if (FALSE) { x } ; exists("x") }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { f <- function() { if (FALSE) { x } ; assign("x", 1) ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 ; y <- 3} ; f <- function() { if (FALSE) { x } ; assign("y", 2) ; exists("x") }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { assign("z", 10) ; f <- function() { x <<- 3 } ; f() } ; h() } ; g() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { if (FALSE) { x <- 1 } ; assign("z", 10) ; f <- function() { assign("x", 4) ; x <<- 3 } ; f() } ; h() } ; g() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { assign("x", 4) ; x <<- 3 } ; f() } ; g() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; assign("x", 2) ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("x", 2) ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("x", 2) ; gg <- function() { h <- function() { exists("x") } ; h() } ; gg() } ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("x", 2) ; gg <- function() { h <- function() { get("x") } ; h() } ; gg() } ; f() } ; g() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("x", 2) ; h <- function() { exists("x") } ; h() }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("y", 2) ; h <- function() { exists("x") } ; h() }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; f <- function() { if (FALSE) { x <- 3 } ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; f <- function() { x ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; f <- function() { x <- 5 ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; z <- 3 ; hh <- function() { assign("z", 2) ; h <- function() { assign("x", 1); f <- function() { x <<- 3 } ; f() } ; h() } ; hh() ; x } ; x <- 10 ; g() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; z <- 3 ; hh <- function() { assign("z", 2) ; h <- function() { f <- function() { x <<- 3 } ; f() } ; h() } ; hh() } ; x <- 10 ; g() ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ get("x") }
Error in get("x") : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ gg <- function() {  assign("x", function(){11}) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ gg <- function() { assign("x", 100) ; g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { if (FALSE) { x <- 1 } ; assign("z", 10) ; f <- function() { assign("x", 4) ; x <<- 3 } ; f() } ; h() } ; g() } ; x <- 10 ; gg() ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ gg <- function() { if (FALSE) { x <- 100 } ; g <- function() { if (FALSE) { x <- 100 } ; h <- function() { f <- function() { x <<- 3 } ; f() } ; h() } ; g() } ; x <- 10 ; gg() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { assign("f", function() {4}) ; f() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { assign("x", 1) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { assign("z", 1) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { g <- function() {4} ; f <- function() { if (FALSE) { g <- 4 } ; g() } ; f() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; g <- function() { assign("z", 3) ; if (FALSE) { x <- 4 } ;  f <- function() { exists("x") } ; f() } ; g() } ; h() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { myfunc <- function(i) { sum(i) } ; g <- function() { myfunc <- 2 ; f <- function() { myfunc(2) } ; f() } ; g() } ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 2 ; f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() } ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3  ; f <- function() { assign("x", 2) ; g <- function() { x } ; g() } ; f() }  ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { assign("x", 5) ; x } ; f <- function() { assign("x", 2) ; g() } ; f() }  ; h() }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { assign("z", 2) ; x } ; f <- function() { assign("x", 2) ; g() } ; f() }  ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { x } ; f <- function() { assign("x", 2) ; g() } ; f() }  ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function() {3} ; g <- function() { assign("x", function() {4}) ; x() } ; g() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function() {3} ; g <- function() { assign("x", function() {5} ) ; x() } ; g() } ; h() }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function() {3} ; g <- function() { assign("z", 2) ; x } ; f <- function() { assign("x", 2) ; g() } ; f() }  ; z <- h() ; z() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function() {3} ; gg <- function() { assign("x", 5) ; g <- function() { x() } ; g() } ; gg() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function(){2} ; f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() } ; z <- h() ; z() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { z <- 2 ; x <- function() {3} ; g <- function() { assign("z", 1) ; x() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { z <- 2 ; x <- function() {3} ; gg <- function() { assign("z", 5) ; g <- function() { x() } ; g() } ; gg() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { z <- 3 ; x <- function() {3} ; g <- function() { x <- 1 ; assign("z", 5) ; x() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 10 ; g <- function() { x <- 100 ; z <- 2 ; f <- function() { assign("z", 1); x <- x ; x } ; f() } ; g() }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 1; exists("x", inherits = FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 2 ; rm("x") ; get("x") }
Error in get("x") : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 2 ; y <- 3 ; rm("y") ; ls() }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 2) ; g <- function() { x } ; g() } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 4) ; g <- function() { assign("y", 3) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; g()  } ; f() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 4) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x <<- 6 } ; h() ; get("x") } ; f() }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 4) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; f() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 4) ; hh <- function() { if (FALSE) { x <- 100 } ; h <- function() { x <<- 6 } ; h() } ; hh() ; get("x") } ; f() }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { exists("x") } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { exists("x", inherits=FALSE) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { get("x") } ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { x <- 2 ; get("x") } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { x <- 2; h <- function() {  get("x") }  ; h() } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function(i) { if (i == 1) { assign("x", 4) } ; function() { x } } ; f1 <- f(1) ; f2 <- f(2) ; f1() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function(i) { if (i == 1) { assign("x", 4) } ; function() { x } } ; f1 <- f(1) ; f2 <- f(2) ; f2() ; f1() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function(i) { if (i == 1) { assign("x", 4) } ; function(v) { x <<- v} } ; f1 <- f(1) ; f2 <- f(2) ; f1(10) ; f2(11) ; x }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function(i) { if (i == 1) { assign("x", 4) } ; function(v) { x <<- v} } ; f1 <- f(1) ; f2 <- f(2) ; f2(10) ; f1(11) ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x ; hh <- function() { x <<- 4 } ; hh() } ; h() } ; f() } ; g() ; x }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x } ; h() } ; f() } ; g() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; g <- function() { x } ; f <- function() { assign("x", 2) ; g() } ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; gg <- function() {  g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x } ; h() } ; f() } ; g() } ; gg() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; h <- function() { g <- function() { x } ; f <- function() { assign("x", 2, inherits=TRUE) } ; f() ; g() }  ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; h <- function(s) { if (s == 2) { assign("x", 2) } ; x }  ; h(1) ; h(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; h <- function(s) { y <- x ; if (s == 2) { assign("x", 2) } ; c(y,x) }  ; c(h(1),h(2)) }
[1] 3 3 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 33 ; f <- function() { assign("x", 44) ; get("x", inherits=FALSE) } ; f() }
[1] 44

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() { 3 } ; h <- function() { g <- function() { f <- function() { x <- 1 ; x() } ; f() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() { 3 } ; h <- function() { if (FALSE) { x <- 2 } ;  z <- 2  ; g <- function() { assign("z", 1) ; x() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() {11} ; g <- function() { f <- function() { assign("x", 2) ; x() } ; f() } ; g() }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign("x", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f1() ; f2() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign("x", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f1() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign("x", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f2() ; f1() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function(){3} ; f <- function() { assign("x", function(){4}) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x() } ; h() } ; f() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function(){3} ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function(){3} ; gg <- function() {  g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function(){3} ; gg <- function() { assign("x", 4) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLsRegExp
#{ .abc <- 1; ls(all.names=TRUE, pattern="\\.a.*")}
[1] ".abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLsRegExp
#{ .abc <- 1; ls(pattern="\\.a.*")}
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLsRegExp
#{ abc <- 1; ls(pattern="[[:alpha:]]*")}
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLsRegExp
#{ abc <- 1; ls(pattern="a.*")}
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLsRegExp
#{ f <- function(abc) { ls(pattern="[a-z]*") }; f(1) }
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("$") }
[1] "X."

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("$_", allow_=FALSE) }
[1] "X.."

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("...7") }
[1] "...7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("..7") }
[1] "..7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names(".7") }
[1] "X.7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("7") }
[1] "X7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("NA_integer_", allow_=FALSE) }
[1] "NA.integer."

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("a a") }
[1] "a.a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("a_a") }
[1] "a_a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("a_a", allow_="a") }
Error in make.names("a_a", allow_ = "a") : invalid 'allow_' value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("a_a", allow_=7) }
[1] "a_a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("a_a", allow_=FALSE) }
[1] "a.a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("a_a", allow_=NULL) }
Error in make.names("a_a", allow_ = NULL) : invalid 'allow_' value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("a_a", allow_=c(7,42)) }
[1] "a_a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("a_a", allow_=logical()) }
Error in make.names("a_a", allow_ = logical()) : invalid 'allow_' value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names("else")}
[1] "else."

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeNames
#{ make.names(7) }
[1] "X7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeUnique
#{ make.unique("a") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeUnique
#{ make.unique("a", 1) }
Error in make.unique("a", 1) : 'sep' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeUnique
#{ make.unique("a", character()) }
Error in make.unique("a", character()) : 'sep' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeUnique
#{ make.unique(1) }
Error in make.unique(1) : 'names' must be a character vector

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeUnique
#{ make.unique(c("a", "a")) }
[1] "a"   "a.1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeUnique
#{ make.unique(c("a", "a"), "_") }
[1] "a"   "a_1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeUnique
#{ make.unique(c("a", "a", "a")) }
[1] "a"   "a.1" "a.2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMakeUnique
#{ make.unique(character()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ as.vector(c(1,2,3)) %*% t(as.vector(c(1,2))) }
     [,1] [,2]
[1,]    1    2
[2,]    2    4
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ c(1,0,4) %*% matrix(c(3,1,2,0,1,2),3) }
     [,1] [,2]
[1,]   11    8

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ c(1,2,3) %*% c(4,5,6) }
     [,1]
[1,]   32

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ matrix(c(1,2,3,4), 2) %*% matrix(c(5,6,7,8), 2) }
     [,1] [,2]
[1,]   23   31
[2,]   34   46

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ matrix(c(3,1,2,0,1,2), 2) %*% matrix(c(1,0,4,2,1,0), 3) }
     [,1] [,2]
[1,]    7    8
[2,]    9    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ matrix(c(3,1,2,0,1,2),2) %*% c(1,0,4) }
     [,1]
[1,]    7
[2,]    9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match("abc", c("xyz")) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match("abc", c("xyz"), nomatch=-1) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match("hello",c("I", "say", "hello", "world")) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match(2,c(1,2,3)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match(c("hello", "say"),c("I", "say", "hello", "world")) }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match(c(1,2,3,4,5),c(1,2,1,2)) }
[1]  1  2 NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchCall
#{ f <- function() match.call() ; f() }
f()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchCall
#{ f <- function(x) match.call() ; f(2) }
f(x = 2)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchFun
#{ f <- function(x) { y <- match.fun(x) ; y(3,4) } ; c(f("+"),f("*")) }
[1]  7 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchFun
#{ f <- function(x) { y <- match.fun(x) ; y(c(1,2,3)) } ; c(f("sum"),f("cumsum")) }
[1] 6 1 3 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchFun
#{ f <- match.fun("length") ; f(c(1,2,3)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchFun
#{ f <- match.fun(length) ; f(c(1,2,3)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMathGroupDispatch
#{x<--7;class(x)<-"foo";Math.foo<-function(z){-z;};log(x);}
[1] 7
attr(,"class")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMathGroupDispatch
#{x<--7;class(x)<-"foo";Math.foo<-function(z){x};abs(x);}
[1] -7
attr(,"class")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix("a",10,10) }
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [2,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [3,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [4,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [5,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [6,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [7,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [8,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [9,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
[10,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:4, nrow=2) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:4,2,2) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6)}
     [,1]
[1,]    1
[2,]    2
[3,]    3
[4,]    4
[5,]    5
[6,]    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6, ncol=3:5,byrow=TRUE)}
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6, nrow=3,byrow=1)}
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6, nrow=3,byrow=TRUE)}
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6, nrow=c(3,4,5),byrow=TRUE)}
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1i,10,10) }
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [2,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [3,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [4,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [5,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [6,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [7,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [8,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [9,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
[10,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(as.double(NA),2,2) }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c("a",NA),10,10) }
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [2,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [3,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [4,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [5,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [6,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [7,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [8,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [9,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
[10,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1+1i,2+2i,3+3i,4+4i),2) }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,] 2+2i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1,2,3,4), nrow=2) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1,2,3,4),2,2) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(10+10i,5+5i,6+6i,20-20i),2) }
       [,1]   [,2]
[1,] 10+10i  6+ 6i
[2,]  5+ 5i 20-20i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1i,100i),10,10) }
        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]
 [1,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
 [2,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i
 [3,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
 [4,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i
 [5,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
 [6,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i
 [7,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
 [8,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i
 [9,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
[10,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1i,NA),10,10) }
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
 [3,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
 [5,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
 [7,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
 [9,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(nrow=2,ncol=2) }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#is.matrix(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrixTypeCheck
#{ is.matrix(as.matrix(1)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ is.logical(max(TRUE)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ is.logical(max(TRUE, FALSE)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max("42", "7") }
[1] "7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max("42", as.character(NA), "7", na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max("42", as.character(NA), "7", na.rm=TRUE) }
[1] "7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max("42", as.character(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max("42", as.character(NA), na.rm=TRUE) }
[1] "42"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max("hi","abbey","hello") }
[1] "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max((-1):100) }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max() }
[1] -Inf
Warning message:
In max() : no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(0/0, 1.1) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(0/0, 1.1, NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(123, NA, TRUE, 12, FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(123, NA, TRUE, 12, FALSE, na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(123, NA, TRUE, 12, FALSE, na.rm=TRUE) }
[1] 123

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(1:10, 100:200, c(4.0, 5.0)) }
[1] 200

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(1:10, 100:200, c(4.0, 5.0), c(TRUE,FALSE,NA)) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(2L, 4L) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42+42i, 7+7i) }
Error in max(42 + (0+42i), 7 + (0+7i)) :
  invalid 'type' (complex) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42, as.double(NA), 7, na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42, as.double(NA), 7, na.rm=TRUE) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42, as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42, as.double(NA), na.rm=TRUE) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42L, as.integer(NA), 7L, na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42L, as.integer(NA), 7L, na.rm=TRUE) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42L, as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(42L, as.integer(NA), na.rm=TRUE) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(NA, 1.1) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(NULL) }
[1] -Inf
Warning message:
In max(NULL) : no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.character(NA), as.character(NA), "42", "7", na.rm=TRUE) }
[1] "7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.character(NA), as.character(NA), "42", na.rm=TRUE) }
[1] "42"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.character(NA), as.character(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.character(NA), as.character(NA), na.rm=TRUE) }
[1] NA
Warning message:
In max(as.character(NA), as.character(NA), na.rm = TRUE) :
  no non-missing arguments, returning NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.character(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.character(NA), na.rm=TRUE) }
[1] NA
Warning message:
In max(as.character(NA), na.rm = TRUE) :
  no non-missing arguments, returning NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.double(NA), as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.double(NA), as.double(NA), na.rm=TRUE) }
[1] -Inf
Warning message:
In max(as.double(NA), as.double(NA), na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.double(NA), na.rm=TRUE) }
[1] -Inf
Warning message:
In max(as.double(NA), na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.integer(NA), as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.integer(NA), as.integer(NA), na.rm=TRUE) }
[1] -Inf
Warning message:
In max(as.integer(NA), as.integer(NA), na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.integer(NA), na.rm=TRUE) }
[1] -Inf
Warning message:
In max(as.integer(NA), na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(as.raw(42), as.raw(7)) }
Error in max(as.raw(42), as.raw(7)) : invalid 'type' (raw) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(c("hi","abbey","hello")) }
[1] "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(c(as.character(NA), "foo")) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(character()) }
[1] NA
Warning message:
In max(character()) : no non-missing arguments, returning NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(character(0)) }
[1] NA
Warning message:
In max(character(0)) : no non-missing arguments, returning NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(double()) }
[1] -Inf
Warning message:
In max(double()) : no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(double(0)) }
[1] -Inf
Warning message:
In max(double(0)) : no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(integer()) }
[1] -Inf
Warning message:
In max(integer()) : no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(integer(0)) }
[1] -Inf
Warning message:
In max(integer(0)) : no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(1+2i))}
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(1+2i, 2+3i))}
[1] 1.5+2.5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(1+2i,1+3i,1+45i))}
[1] 1+16.66667i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(1,2,3,4,5)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(1,2,3,4,5))}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(2,4))}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(2L,4L,3L))}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(5,5,5,5,5)) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(TRUE, FALSE))}
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(TRUE, TRUE))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ is.logical(min(TRUE)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ is.logical(min(TRUE, FALSE)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ max(c(1,2,0/0)) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min("42", "7") }
[1] "42"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min("42", as.character(NA), "7", na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min("42", as.character(NA), "7", na.rm=TRUE) }
[1] "42"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min("42", as.character(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min("42", as.character(NA), na.rm=TRUE) }
[1] "42"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min("hi","abbey","hello") }
[1] "abbey"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min("hi",100) }
[1] "100"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min((-1):100) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min() }
[1] Inf
Warning message:
In min() : no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(0/0, 1.1) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(0/0, 1.1, NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(1:10, 100:200, c(4.0, -5.0)) }
[1] -5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(1:10, 100:200, c(4.0, 5.0), c(TRUE,FALSE,NA)) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(2L, 4L) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42+42i, 7+7i) }
Error in min(42 + (0+42i), 7 + (0+7i)) :
  invalid 'type' (complex) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42, as.double(NA), 7, na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42, as.double(NA), 7, na.rm=TRUE) }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42, as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42, as.double(NA), na.rm=TRUE) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42L, as.integer(NA), 7L, na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42L, as.integer(NA), 7L, na.rm=TRUE) }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42L, as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(42L, as.integer(NA), na.rm=TRUE) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(NA, 1.1) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(NULL) }
[1] Inf
Warning message:
In min(NULL) : no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.character(NA), as.character(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.character(NA), as.character(NA), na.rm=TRUE) }
[1] NA
Warning message:
In min(as.character(NA), as.character(NA), na.rm = TRUE) :
  no non-missing arguments, returning NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.character(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.character(NA), na.rm=TRUE) }
[1] NA
Warning message:
In min(as.character(NA), na.rm = TRUE) :
  no non-missing arguments, returning NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.double(NA), as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.double(NA), as.double(NA), na.rm=TRUE) }
[1] Inf
Warning message:
In min(as.double(NA), as.double(NA), na.rm = TRUE) :
  no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.double(NA), na.rm=TRUE) }
[1] Inf
Warning message:
In min(as.double(NA), na.rm = TRUE) :
  no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.integer(NA), as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.integer(NA), as.integer(NA), na.rm=TRUE) }
[1] Inf
Warning message:
In min(as.integer(NA), as.integer(NA), na.rm = TRUE) :
  no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.integer(NA), na.rm=TRUE) }
[1] Inf
Warning message:
In min(as.integer(NA), na.rm = TRUE) :
  no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(as.raw(42), as.raw(7)) }
Error in min(as.raw(42), as.raw(7)) : invalid 'type' (raw) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(c("hi","abbey","hello")) }
[1] "abbey"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(c(1,2,0/0)) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(c(as.character(NA), "foo")) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(character()) }
[1] NA
Warning message:
In min(character()) : no non-missing arguments, returning NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(character(0)) }
[1] NA
Warning message:
In min(character(0)) : no non-missing arguments, returning NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(double()) }
[1] Inf
Warning message:
In min(double()) : no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(double(0)) }
[1] Inf
Warning message:
In min(double(0)) : no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(integer()) }
[1] Inf
Warning message:
In min(integer()) : no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(integer(0)) }
[1] Inf
Warning message:
In min(integer(0)) : no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(...) { g(...) } ;  g <- function(b=2) { missing(b) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(...) { missing(..2) } ; f(x + z, a * b) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a = 2 + 3) { a;  missing(a) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a = 2 + 3) { missing(a) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a = 2) { g(a) } ; g <- function(b) { missing(b) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a = z) {  g(a) } ; g <- function(b) { missing(b) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a = z) { missing(a) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a = z, z) {  g(a) } ; g <- function(b) { missing(b) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a) { g <- function(b) { before <- missing(b) ; a <<- 2 ; after <- missing(b) ; c(before, after) } ; g(a) } ; f() }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a) { g(a) } ;  g <- function(b) { missing(b) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a) { g(a) } ; g <- function(b=2) { missing(b) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a,b,c) { missing(b) } ; f(1,,2) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(x = y, y = x) { g(x, y) } ; g <- function(x, y) { missing(x) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(x) { missing(x) } ; f(a) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(x) { print(missing(x)) ; g(x) } ; g <- function(y=1) { print(missing(y)) ; h(y) } ; h <- function(z) { print(missing(z)) ; z } ; f() }
[1] TRUE
[1] TRUE
[1] TRUE
Error in h(y) : argument "x" is missing, with no default

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(x) { print(missing(x)); g(x) }; g <- function(y=3) { print(missing(y)); k(y) }; k <- function(l=4) { print(missing(l)); l }; f() }
[1] TRUE
[1] TRUE
[1] TRUE
Error in k(y) : argument "x" is missing, with no default

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(x) { print(missing(x)); g(x) }; g <- function(y=3) { print(missing(y)); k(y) }; k <- function(l=4) { print(missing(l)); l }; f(1) }
[1] FALSE
[1] FALSE
[1] FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(x) {print(missing(x)); g(x)}; g <- function(y=2) {print(missing(y)); y}; f() }
[1] TRUE
[1] TRUE
Error in g(x) : argument "x" is missing, with no default

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(x) {print(missing(x)); g(x)}; g <- function(y=2) {print(missing(y)); y}; f(1) }
[1] FALSE
[1] FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ g <- function(a, b, c) { b } ; f <- function(a,b,c) { g(a,b=2,c) } ; f(1,,2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ k <- function(x=2,y) { xx <- x; yy <- y; print(missing(x)); print(missing(xx)); print(missing(yy)); print(missing(yy))}; k() }
Error in k() : argument "y" is missing, with no default

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ k <- function(x=2,y) { xx <- x; yy <- y; print(missing(x)); print(missing(xx)); print(missing(yy)); print(missing(yy))}; k(y=1) }
[1] TRUE
[1] FALSE
[1] FALSE
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMod
#{ round(Mod(1+1i)*10000) }
[1] 14142

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNChar
#{ nchar(c("hello", "hi")) }
[1] 5 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNChar
#{ nchar(c("hello", "hi", 10, 130)) }
[1] 5 2 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNChar
#{ nchar(c(10,130)) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNames
#{ x<-c(1,2,3); dim(x)<-3; dimnames(x)<-list(c(11,12,13)); names(x) }
[1] "11" "12" "13"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNargs
#{  f <- function (a, b, c) { nargs() }; f() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNargs
#{  f <- function (a, b, c) { nargs() }; f(1, 2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNargs
#{  f <- function (a, b=TRUE, c=FALSE) { nargs() }; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNargs
#{  f <- function (a, b=TRUE, c=FALSE) { nargs() }; f(1, FALSE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNextMethod
#{g<-function(){ x<-1; class(x)<-c("a","b","c"); f<-function(x){UseMethod("f")}; f.a<-function(x){cat("a");NextMethod("f",x)}; f.b<-function(x){cat("b")}; f(x); }; g();}
ab
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(-1, "a", "b") }
Error in ngettext(-1, "a", "b") : invalid 'n' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(0, "a", "b") }
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1+1i, "a", "b") }
[1] "a"
Warning message:
In ngettext(1 + (0+1i), "a", "b") : imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", "b") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", NULL) }
Error in ngettext(1, "a", NULL) : 'msg2' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", c("b")) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", c("b", "c")) }
Error in ngettext(1, "a", c("b", "c")) :
  'msg2' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", c(1)) }
Error in ngettext(1, "a", c(1)) : 'msg2' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, NULL, "b") }
Error in ngettext(1, NULL, "b") : 'msg1' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, NULL, NULL) }
Error in ngettext(1, NULL, NULL) : 'msg1' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, c("a"), "b") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, c("a", "c"), "b") }
Error in ngettext(1, c("a", "c"), "b") :
  'msg1' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, c(1), "b") }
Error in ngettext(1, c(1), "b") : 'msg1' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(42, "a", "b") }
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(c(1), "a", "b") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(c(1,2), "a", "b") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(1)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(1L)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#is.numeric(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNumericTypeCheck
#{ is.numeric(1:6) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object("1")
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(1)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(1L)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(1i)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(NULL)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(TRUE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(call("foo"))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(expression(x + 1))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(function() { })
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(list())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(pairlist())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(quote(x))
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#is.object(raw())
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testObjectTypeCheck
#{ e <- expression(x + 1); class(e) <- "foo"; is.object(e) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOnExit
#n = function() { on.exit() }; n()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOnExit
#n = function() { on.exit(print("test")); on.exit(); print("some") }; n()
[1] "some"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOnExit
#n = function() { on.exit(print("test")); on.exit(print("test2")); print("some") }; n()
[1] "some"
[1] "test2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOnExit
#n = function() { on.exit(print("test")); on.exit(print("test2")); print("some"); on.exit() }; n()
[1] "some"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOnExit
#n = function() { on.exit(print("test")); on.exit(print("test2", TRUE)); print("some") }; n()
[1] "some"
[1] "test2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOnExit
#n = function() { on.exit(print("test")); print("some") }; n()
[1] "some"
[1] "test"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOnExit
#n = function() { on.exit(print("test", TRUE)); on.exit(print("test2")); print("some") }; n()
[1] "some"
[1] "test2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOnExit
#n = function() { on.exit(print("test", TRUE)); print("some") }; n()
[1] "some"
[1] "test"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `!`(TRUE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `%%`(1,2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `%/%`(1,2) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `%o%`(3,5) }
     [,1]
[1,]   15

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `&&`(TRUE, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `&`(TRUE, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `*`(1,2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `+`(1,2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `-`(1,2) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `/`(1,2) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `^`(1,2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `|`(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `||`(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ x <- `+` ; f <- function() { x <- 1 ; x(2,3) } ; f() }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ x <- `+` ; x(2,3) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;class(x)<-"foo";"!.foo"<-function(e1,e2){x};!x}
[1] 1
attr(,"class")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"foo";class(y)<-"foo";"*.foo"<-function(e1,e2){min(e1,e2)};x*y}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"foo";class(y)<-"foo";"^.foo"<-function(e1,e2){e1+e2};x^y}
[1] 8
attr(,"class")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"foo";class(y)<-"fooX";"*.foo"<-function(e1,e2){min(e1,e2)};x*y}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"fooX";class(y)<-"foo";"*.foo"<-function(e1,e2){min(e1,e2)};x*y}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"fooX";class(y)<-"fooX";"*.foo"<-function(e1,e2){min(e1,e2)};x*y}
[1] 7
attr(,"class")
[1] "fooX"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatchLs
#{x<-1;y<-7;class(x)<-"foo";class(y)<-"foo";"*.foo"<-function(e1,e2){min(e1,e2)}; ls()}
[1] "*.foo" "x"     "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(7) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(FALSE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c("a","c","b","d","e","f")) }
[1] 1 3 2 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(1,1,1,1),c("d","c","b","a")) }
[1] 4 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(1,1,1,1),c(4,3,2,1)) }
[1] 4 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(1i,2i,3i)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(3+1i,2+2i,1+3i)) }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(3+1i,2+3i,2+2i,1+3i)) }
[1] 4 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(3i,1i,2i)) }
[1] 2 3 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(5,2,2,1,7,4)) }
[1] 4 2 3 6 1 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(5,2,2,1,7,4),c("a","c","b","d","e","f")) }
[1] 4 3 2 6 1 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(character()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOther
#{ rev.mine <- function(x) { if (length(x)) x[length(x):1L] else x } ; rev.mine(1:3) }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOuter
#{ outer(1, 3, "-") }
     [,1]
[1,]   -2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOuter
#{ outer(c(1,2,3),c(1,2),"*") }
     [,1] [,2]
[1,]    1    2
[2,]    2    4
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOuter
#{ outer(c(1,2,3),c(1,2),"-") }
     [,1] [,2]
[1,]    0   -1
[2,]    1    0
[3,]    2    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOverride
#{ sub <- function(x,y) { x - y }; sub(10,5) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(7+42i) }
Error in pmax(7 + (0+42i)) : invalid input type

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(as.raw(42)) }
Error in pmax(as.raw(42)) : invalid input type

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c("1", "7"), c("42", "1")) }
[1] "42" "7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c("1", "7"), c("42", as.character(NA))) }
[1] "42" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c("1", "7"), c("42", as.character(NA)), na.rm=TRUE) }
[1] "42" "7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c("1", "7"), character()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c("1", "7", "8"), c("1"), c("42", "1")) }
[1] "42" "7"  "8"
Warning message:
In pmax(c("1", "7", "8"), c("1"), c("42", "1")) :
  an argument will be fractionally recycled

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c("1", as.character(NA)), c("42", "1"), na.rm=TRUE) }
[1] "42" "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c("1", as.character(NA)), c(as.character(NA), as.character(NA)), c("42", "1"), na.rm=TRUE) }
[1] "42" "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1, 7), c(42, 1)) }
[1] 42  7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1, 7), c(42, as.double(NA))) }
[1] 42 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1, 7), c(42, as.double(NA)), na.rm=TRUE) }
[1] 42  7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1, 7), double()) }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1, 7, 8), c(1), c(42, 1)) }
[1] 42  7 42
Warning message:
In pmax(c(1, 7, 8), c(1), c(42, 1)) :
  an argument will be fractionally recycled

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1L, 7L), c(42L, 1L)) }
[1] 42  7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1L, 7L), c(42L, as.integer(NA))) }
[1] 42 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1L, 7L), c(42L, as.integer(NA)), na.rm=TRUE) }
[1] 42  7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1L, 7L), integer()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(1L, 7L, 8L), c(1L), c(42L, 1L)) }
[1] 42  7 42
Warning message:
In pmax(c(1L, 7L, 8L), c(1L), c(42L, 1L)) :
  an argument will be fractionally recycled

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(FALSE, TRUE), c(FALSE, NA)) }
[1]  0 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(FALSE, TRUE), c(TRUE, FALSE)) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMax
#{ pmax(c(FALSE, TRUE), logical()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(7+42i) }
Error in pmin(7 + (0+42i)) : invalid input type

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(as.raw(42)) }
Error in pmin(as.raw(42)) : invalid input type

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c("1", "7"), c("42", "1")) }
[1] "1" "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c("1", "7"), c("42", as.character(NA))) }
[1] "1" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c("1", "7"), c("42", as.character(NA)), na.rm=TRUE) }
[1] "1" "7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c("1", "7"), character()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c("1", "7", "8"), c("1"), c("42", "1")) }
[1] "1" "1" "1"
Warning message:
In pmin(c("1", "7", "8"), c("1"), c("42", "1")) :
  an argument will be fractionally recycled

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c("1", as.character(NA)), c("42", "1"), na.rm=TRUE) }
[1] "1" "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c("1", as.character(NA)), c(as.character(NA), as.character(NA)), c("42", "1"), na.rm=TRUE) }
[1] "1" "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1, 7), c(42, 1)) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1, 7), c(42, as.double(NA))) }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1, 7), c(42, as.double(NA)), na.rm=TRUE) }
[1] 1 7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1, 7), double()) }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1, 7, 8), c(1), c(42, 1)) }
[1] 1 1 1
Warning message:
In pmin(c(1, 7, 8), c(1), c(42, 1)) :
  an argument will be fractionally recycled

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1L, 7L), c(42L, 1L)) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1L, 7L), c(42L, as.integer(NA))) }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1L, 7L), c(42L, as.integer(NA)), na.rm=TRUE) }
[1] 1 7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1L, 7L), integer()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(1L, 7L, 8L), c(1L), c(42L, 1L)) }
[1] 1 1 1
Warning message:
In pmin(c(1L, 7L, 8L), c(1L), c(42L, 1L)) :
  an argument will be fractionally recycled

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(FALSE, TRUE), c(FALSE, NA)) }
[1]  0 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(FALSE, TRUE), c(TRUE, FALSE)) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPMin
#{ pmin(c(FALSE, TRUE), logical()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ a <- as.raw(200) ; b <- as.raw(255) ; paste(a, b) }
[1] "c8 ff"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste() }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste(1:2, 1:3, FALSE, collapse="-", sep="+") }
[1] "1+1+FALSE-2+2+FALSE-1+3+FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste(1:2, 1:3, FALSE, collapse=NULL) }
[1] "1 1 FALSE" "2 2 FALSE" "1 3 FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste(character(0),31415) }
[1] " 31415"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste(sep="") }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{  x<-c(11, 7, 2222, 7, 33); print(x,quote=TRUE) }
[1]   11    7 2222    7   33

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ n <- 17 ; fac <- factor(rep(1:3, length = n), levels = 1:5) ; y<-tapply(1:n, fac, sum); y }
 1  2  3  4  5
51 57 45 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ nql <- noquote(letters); nql[1:4] <- "oh"; print(nql)}
 [1] oh oh oh oh e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y
[26] z

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ nql <- noquote(letters); print(nql)}
 [1] a b c d e f g h i j k l m n o p q r s t u v w x y z

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(1:3,quote=TRUE) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(23) }
[1] 23

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(c("foo"),quote=FALSE)}
[1] foo

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(c(1,2.34567),quote=TRUE) }
[1] 1.00000 2.34567

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(c(1.1,2.34567),quote=TRUE) }
[1] 1.10000 2.34567

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(c(11.1,2.34567),quote=TRUE) }
[1] 11.10000  2.34567

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(list(1,2,3),quote=TRUE) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(list(list(list(1,2),list(3)),list(list(4),list(5,6))),quote=TRUE) }
[[1]]
[[1]][[1]]
[[1]][[1]][[1]]
[1] 1

[[1]][[1]][[2]]
[1] 2


[[1]][[2]]
[[1]][[2]][[1]]
[1] 3



[[2]]
[[2]][[1]]
[[2]][[1]][[1]]
[1] 4


[[2]][[2]]
[[2]][[2]][[1]]
[1] 5

[[2]][[2]][[2]]
[1] 6




##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c("11", "7", "2222", "7", "33"); names(x)<-1:5; print(x,quote=TRUE) }
     1      2      3      4      5
  "11"    "7" "2222"    "7"   "33"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c("11", "7", "2222", "7", "33"); print(x,quote=TRUE) }
[1] "11"   "7"    "2222" "7"    "33"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c(1, 2:20, 21); n<-"a"; n[21]="b"; names(x)<-n; print(x,quote=TRUE) }
   a <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>
   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16
<NA> <NA> <NA> <NA>    b
  17   18   19   20   21

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c(1,2); names(x)=c("a", "b"); print(x,quote=TRUE) }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c(10000000, 10000:10007, 21000000); n<-"a"; n[10]="b"; names(x)<-n; print(x,quote=TRUE) }
       a     <NA>     <NA>     <NA>     <NA>     <NA>     <NA>     <NA>
10000000    10000    10001    10002    10003    10004    10005    10006
    <NA>        b
   10007 21000000

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c(11, 7, 2222, 7, 33); names(x)<-1:5; print(x,quote=TRUE) }
   1    2    3    4    5
  11    7 2222    7   33

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-matrix(c("a","b","c","d"),nrow=2);print(x,quote=FALSE)}
     [,1] [,2]
[1,] a    c
[2,] b    d

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ y<-c("a","b","c","d");dim(y)<-c(1,2,2);print(y,quote=FALSE)}
, , 1

     [,1] [,2]
[1,] a    b

, , 2

     [,1] [,2]
[1,] c    d


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testProd
#{prod(c(1+2i))}
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testProd
#{prod(c(1+2i, 2+3i))}
[1] -4+7i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testProd
#{prod(c(1+2i,1+3i,1+45i))}
[1] -230-220i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testProd
#{prod(c(1,2,3,4,5))}
[1] 120

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testProd
#{prod(c(2,4))}
[1] 8

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testProd
#{prod(c(2,4,3))}
[1] 24

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testProd
#{prod(c(TRUE, FALSE))}
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testProd
#{prod(c(TRUE, TRUE))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQgamma
#{ p <- (1:9)/10 ; qgamma(p, shape=1) }
[1] 0.1053605 0.2231436 0.3566749 0.5108256 0.6931472 0.9162907 1.2039728
[8] 1.6094379 2.3025851

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQgamma
#{ qgamma(0.5, shape=1) }
[1] 0.6931472

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ class(quote(x + y)) }
[1] "call"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ is.call(quote(x + y)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ l <- quote(a[3] <- 4) ; eval(l) ; f() }
Error in a[3] <- 4 : object 'a' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ l <- quote(a[3] <- 4) ; f <- function() { eval(l) } ; f() }
Error in a[3] <- 4 : object 'a' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ mode(quote(x + y)) }
[1] "call"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ quote(1:3) }
1:3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ quote(list(1, 2)) }
list(1, 2)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ quote(x <- x + 1) }
x <- x + 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ typeof(quote(1)) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ typeof(quote(x + y)) }
[1] "language"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testQuote
#{ typeof(quote(x)) }
[1] "symbol"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(4336, "default"); sum(runif(10000)) }
[1] 4997.493

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(4357, "default"); round( rnorm(3), digits = 5 ) }
[1] -0.13102  0.98938 -0.30562

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(4357, "default"); sum(runif(10)) }
[1] 6.631059

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); matrix(rnorm(10), ncol=5) }
          [,1]       [,2]       [,3]       [,4]      [,5]
[1,]  2.287247 -0.6942925 -0.9706733  0.7481393 0.1526576
[2,] -1.196772 -0.4122930 -0.9472799 -0.1169552 2.1899781

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); matrix(rnorm(100), ncol=10) }
            [,1]         [,2]       [,3]        [,4]       [,5]         [,6]
 [1,]  2.2872472  0.356986230  0.8397504 -0.87085102  1.2185505 -0.262742349
 [2,] -1.1967717  2.716751783  0.7053418  0.71871055 -0.6993171 -0.007668105
 [3,] -0.6942925  2.281451926  1.3059647  0.11065288 -0.2854328  0.367153007
 [4,] -0.4122930  0.324020540 -1.3879962 -0.07846677 -1.3115527  1.707162545
 [5,] -0.9706733  1.896067067  1.2729169 -0.42049046 -0.3910124  0.723740263
 [6,] -0.9472799  0.467680511  0.1841928 -0.56212588 -0.4015266  0.481036049
 [7,]  0.7481393 -0.893800723  0.7522799  0.99751344  1.3505176 -1.567868244
 [8,] -0.1169552 -0.307328300  0.5917451 -1.10513006  0.5911900  0.318250283
 [9,]  0.1526576 -0.004822422 -0.9830526 -0.14228783  0.1005255  0.165991451
[10,]  2.1899781  0.988164149 -0.2760640  0.31499490  0.9310720 -0.899907630
            [,7]        [,8]         [,9]      [,10]
 [1,] 0.07637147  0.43262716  0.342585350  1.6357944
 [2,] 0.15915528 -0.92260172  0.004248236 -0.6454235
 [3,] 0.54367418 -0.61558421  0.029219842  0.6189922
 [4,] 0.70480735 -0.86665969 -0.393423429  0.2363936
 [5,] 0.31896914 -1.63951709 -0.792704563  0.8465009
 [6,] 1.10924979 -1.32583924 -0.311701865 -0.5736457
 [7,] 0.76915419 -0.88903673 -0.346068592  1.1179932
 [8,] 1.15347367 -0.55760233 -0.304607588 -1.5400011
 [9,] 1.26068350 -0.06240231 -1.785893487 -0.4381239
[10,] 0.70062351  2.42269298  0.587274672 -0.1506730

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); matrix(rnorm(25*25), ncol=25) }
              [,1]        [,2]         [,3]         [,4]        [,5]
 [1,]  2.287247161  0.18419277 -0.262742349 -1.325839244  0.51905837
 [2,] -1.196771682  0.75227990 -0.007668105 -0.889036728  0.58753970
 [3,] -0.694292510  0.59174505  0.367153007 -0.557602330 -0.07933306
 [4,] -0.412292951 -0.98305260  1.707162545 -0.062402309 -1.17436101
 [5,] -0.970673341 -0.27606396  0.723740263  2.422692977  0.30872212
 [6,] -0.947279945 -0.87085102  0.481036049  0.342585350 -1.60387854
 [7,]  0.748139340  0.71871055 -1.567868244  0.004248236  0.99128963
 [8,] -0.116955226  0.11065288  0.318250283  0.029219842  1.02322044
 [9,]  0.152657626 -0.07846677  0.165991451 -0.393423429  0.84014544
[10,]  2.189978107 -0.42049046 -0.899907630 -0.792704563  0.12007861
[11,]  0.356986230 -0.56212588  0.076371474 -0.311701865 -0.42625506
[12,]  2.716751783  0.99751344  0.159155278 -0.346068592  0.45892624
[13,]  2.281451926 -1.10513006  0.543674185 -0.304607588  0.64504795
[14,]  0.324020540 -0.14228783  0.704807353 -1.785893487  0.61153055
[15,]  1.896067067  0.31499490  0.318969143  0.587274672 -0.88921129
[16,]  0.467680511  1.21855053  1.109249789  1.635794434  1.54389235
[17,] -0.893800723 -0.69931708  0.769154195 -0.645423474 -1.24176360
[18,] -0.307328300 -0.28543275  1.153473675  0.618992169  1.10344734
[19,] -0.004822422 -1.31155267  1.260683503  0.236393598  0.98277236
[20,]  0.988164149 -0.39101243  0.700623507  0.846500899  0.30432717
[21,]  0.839750360 -0.40152661  0.432627161 -0.573645739 -1.55471822
[22,]  0.705341831  1.35051758 -0.922601718  1.117993204  1.56989078
[23,]  1.305964721  0.59119003 -0.615584207 -1.540001132  0.68844969
[24,] -1.387996217  0.10052546 -0.866659688 -0.438123899 -0.17760366
[25,]  1.272916864  0.93107200 -1.639517087 -0.150672971  0.72920127
             [,6]         [,7]        [,8]        [,9]        [,10]       [,11]
 [1,]  1.53325093 -0.355694443  0.25604208  2.02334405  1.242064560 -1.47759178
 [2,]  0.50657845  1.097300411  0.72783900  0.86249250 -0.015258466 -2.97325571
 [3,]  0.03332768 -0.906691970  1.32411092 -0.02490949 -0.791788389 -1.33976214
 [4,] -1.46755072 -0.207456624  0.14715849  0.60063495 -0.401618743 -0.26584203
 [5,]  1.01915772  0.678861434 -0.59853939  1.21648074 -1.896701290 -0.38399341
 [6,] -0.59333933 -0.797787741  2.19252993 -1.17653155  0.971974934 -0.60294233
 [7,]  0.81240989 -1.591538938  2.32711280 -0.60934003 -0.513954856 -0.65152404
 [8,]  0.86616783  1.180348125  1.13486960  0.38726257  0.014561673  1.75767151
 [9,]  0.36830830  1.222569290 -0.19088456 -1.39914014 -0.260935570 -0.01903487
[10,]  1.13481910 -0.010909187  0.47484456  1.23249185  1.522358392  0.15528461
[11,] -0.75709928  0.345522466 -0.54547494  0.01550750 -1.473369746 -0.76084644
[12,]  0.44522057  0.094189158  1.05564854 -1.62095905 -0.016558014 -1.54972691
[13,]  0.91593294  0.006793368  0.42902183 -0.66546466  0.024540609  2.75016501
[14,]  0.26975874  0.742622878 -1.81995641 -0.57484051 -0.001256989  1.04742325
[15,]  1.00754045  1.042186536 -0.69197609 -0.90189298 -0.433932707  0.91799247
[16,] -1.46143326 -0.319337138 -1.93182825  1.49159937 -0.405559057  0.47010951
[17,] -0.87478561  0.322643396  1.20967201 -0.13727932  0.155233319 -0.61737209
[18,]  0.16522894  0.685052979 -0.27900005  0.10828170 -0.972381818  0.04210627
[19,]  0.20720703  0.320242774 -1.09578323 -1.03521510  1.548174930 -0.90189890
[20,]  0.48236189 -1.914938024 -0.10218604 -0.44474392 -0.370123333  1.33958321
[21,] -0.07165837 -2.339962899  0.35702296 -0.19604927  1.961525257  0.80385435
[22,] -0.88892843  0.482864294 -0.88230257 -1.26936449 -0.609995576  0.31847865
[23,]  0.48594357  1.178530047 -0.05664779  0.95352118 -0.077428757 -0.19045331
[24,]  0.34049676 -1.292777034 -0.58101895  0.47254665 -1.828859263 -1.08726669
[25,] -1.09792419  0.615773085  0.64408819 -0.55877810  0.805924242  0.14539973
            [,12]       [,13]       [,14]       [,15]      [,16]       [,17]
 [1,]  2.46280025  0.52526155 -0.61315746  0.49138316 -0.9997716 -0.31970564
 [2,]  0.92361969 -0.27572731  0.15250297 -0.06901262  0.5492103  1.16506594
 [3,]  0.74187669  0.05470977 -0.59170745 -1.35079631  0.2797712 -0.62171055
 [4,]  1.41602179 -0.38824961 -0.96070497  0.79935757  0.9166359  1.24821319
 [5,]  1.25166337 -0.41702305 -0.58495799 -0.32009408 -1.7312573  1.44040154
 [6,]  2.10890569 -1.16417517  0.65667289 -0.35695119 -1.4795811  0.76199344
 [7,]  0.71031260  1.73786414 -0.29024959 -0.51072794  2.2298110  0.55937124
 [8,] -1.47518201 -0.25407735  0.90409773 -1.87888008  0.3864989  1.59926381
 [9,] -0.58972648 -0.97371862  0.19902022 -0.95184509  0.6602657 -0.09845773
[10,]  0.13970325  1.11119895 -0.05157481  2.27315661 -0.2762352 -1.44955378
[11,] -0.51172423  0.97349906 -0.90820518  0.20268763  0.2759330 -0.25766131
[12,]  0.15093735  1.25712868 -1.14247834 -2.30855470 -2.2742312 -2.03307133
[13,]  0.44203940  1.77628758  0.99032494 -0.05663566  0.9080857  0.58696417
[14,] -0.16239912 -2.68316852  0.11227328  0.06284384 -1.0862531  0.16058653
[15,]  0.97183854  0.65986308  1.14963167  0.71022814 -0.2155267  0.11315287
[16,] -0.67126548  1.17944967 -0.91049532 -0.59230740 -0.7334274  0.57169061
[17,]  1.63839716  0.39351378 -1.10381972  0.29852463  0.2121178 -0.96552965
[18,] -1.06827268 -1.18985867 -1.63486731  0.64253563 -0.9391419  0.31800115
[19,] -0.01141212 -0.35652737 -1.61638249  2.11279510 -0.6191936 -0.17350759
[20,] -1.86528134 -1.46550804 -0.83673701  0.91777963  0.2440112 -0.91261118
[21,]  0.01825086 -1.09073015  1.09299912 -1.57285475  0.3717434 -1.84689477
[22,] -0.24702055 -0.65725422  1.23509818  0.99264173  0.6272082  0.66951802
[23,] -0.91942511  2.26294100  0.17206660  0.47952087 -1.0731139 -0.10878652
[24,] -2.17316443  0.08769003  0.12049317 -0.29658056 -0.7086927  1.56657535
[25,] -0.64937705  0.76752300  0.55753267  0.81584023  0.9071317 -0.84484523
            [,18]       [,19]       [,20]       [,21]       [,22]        [,23]
 [1,]  1.09764928 -1.30582273  0.11689002 -0.20601575  0.28303792 -0.027191653
 [2,]  0.30088034  2.02341262  0.42113270 -0.58784361 -2.25259008  1.561392979
 [3,] -0.77696625 -0.75564882  1.57740438 -0.68545295  0.73435019 -0.991078158
 [4,] -0.03843418 -0.24159462 -0.25138852  1.00482418  0.14580574  0.004193986
 [5,]  1.10948957  1.09715890 -0.05562434 -0.77264909 -0.64942858 -0.044804842
 [6,]  0.53632527 -0.94661275 -0.02253187 -1.99373370 -0.56122436 -0.688653669
 [7,] -0.36334846 -1.13395992  2.33096097 -0.90925448  0.33479205 -0.130254649
 [8,] -0.10550071 -0.88338352 -0.09883035 -0.56315608  0.03201843  0.155092788
 [9,]  0.33387464  0.51641340  0.16643158 -1.21785562  1.23691719  1.277341552
[10,]  0.81023105 -0.33795540 -0.26963540 -1.82031785  0.05641342  1.053548212
[11,] -1.68369538 -0.02245186  0.84447361 -0.39962935 -0.14543271 -0.371716546
[12,]  0.66572784 -0.10205096  1.40876775  2.11836835 -0.59234963 -0.103132501
[13,] -0.79238753  0.30040860 -1.56623622  1.41515755 -1.26071298  2.498073606
[14,]  1.52772330  0.80662041  0.16903819  0.56476512 -0.68360578 -0.777260866
[15,] -1.48669240 -0.03720589 -1.50567917 -1.08129716 -0.16343720  0.757384577
[16,] -0.67114858 -1.45647599  0.99493295 -0.94197609 -0.43847351  0.022545035
[17,]  1.67517745 -0.62389065  1.24390841 -0.24418344 -0.57870301 -1.650031528
[18,]  0.61193206 -0.16959827 -0.03625683  1.08548855  1.58109043 -0.889116216
[19,] -0.23220565  1.27612317 -0.41125588  0.55834383  1.54066131 -0.608369722
[20,]  0.60529332 -0.25591448  1.28414896 -2.17622835  0.70298100 -0.213062904
[21,] -1.15910612 -0.16536827 -1.11780766  0.87730123 -0.06374862  1.471211256
[22,] -1.16442927 -0.42732111 -0.83506970  0.84253534 -0.74062398  0.466388474
[23,] -0.86992495 -0.05687275  1.50081170 -0.05158399 -1.03394717  1.818358361
[24,] -0.26110572 -1.44538360  0.89915086 -0.69012140 -0.29606366  1.923396212
[25,] -0.49419566  1.88280702 -0.45641208 -1.83898285 -1.44294972 -0.539003564
            [,24]       [,25]
 [1,] -0.38627880 -1.22783170
 [2,] -0.86180767  0.13415845
 [3,] -0.40200658 -0.37323349
 [4,]  0.59896282  0.03906038
 [5,]  0.08183728  0.14312432
 [6,]  0.33102576  0.10494725
 [7,] -0.46124694  0.60219574
 [8,]  0.35903924 -0.11839549
 [9,] -0.51579118  0.55916954
[10,]  0.58727622  0.04186138
[11,]  1.61961103  0.06362112
[12,]  0.44523123  1.46620369
[13,]  1.25526120 -0.47263087
[14,] -0.57490665  0.16347454
[15,]  0.31608949  0.30635016
[16,] -2.18787056  0.79257622
[17,]  2.37210132 -0.94907675
[18,]  0.97657987  0.90478698
[19,]  0.61445181 -0.34011041
[20,] -0.31526265  1.53100750
[21,]  0.23103795  0.38940339
[22,]  2.07548009  0.49598198
[23,]  0.65268490  0.64485868
[24,] -0.03739630 -0.04376477
[25,] -0.70639151 -1.35686873

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); rnorm(10) }
 [1]  2.2872472 -1.1967717 -0.6942925 -0.4122930 -0.9706733 -0.9472799
 [7]  0.7481393 -0.1169552  0.1526576  2.1899781

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); rnorm(100) }
  [1]  2.287247161 -1.196771682 -0.694292510 -0.412292951 -0.970673341
  [6] -0.947279945  0.748139340 -0.116955226  0.152657626  2.189978107
 [11]  0.356986230  2.716751783  2.281451926  0.324020540  1.896067067
 [16]  0.467680511 -0.893800723 -0.307328300 -0.004822422  0.988164149
 [21]  0.839750360  0.705341831  1.305964721 -1.387996217  1.272916864
 [26]  0.184192771  0.752279896  0.591745052 -0.983052596 -0.276063955
 [31] -0.870851023  0.718710553  0.110652878 -0.078466768 -0.420490459
 [36] -0.562125876  0.997513445 -1.105130059 -0.142287831  0.314994905
 [41]  1.218550535 -0.699317079 -0.285432752 -1.311552673 -0.391012431
 [46] -0.401526613  1.350517581  0.591190027  0.100525456  0.931071996
 [51] -0.262742349 -0.007668105  0.367153007  1.707162545  0.723740263
 [56]  0.481036049 -1.567868244  0.318250283  0.165991451 -0.899907630
 [61]  0.076371474  0.159155278  0.543674185  0.704807353  0.318969143
 [66]  1.109249789  0.769154195  1.153473675  1.260683503  0.700623507
 [71]  0.432627161 -0.922601718 -0.615584207 -0.866659688 -1.639517087
 [76] -1.325839244 -0.889036728 -0.557602330 -0.062402309  2.422692977
 [81]  0.342585350  0.004248236  0.029219842 -0.393423429 -0.792704563
 [86] -0.311701865 -0.346068592 -0.304607588 -1.785893487  0.587274672
 [91]  1.635794434 -0.645423474  0.618992169  0.236393598  0.846500899
 [96] -0.573645739  1.117993204 -1.540001132 -0.438123899 -0.150672971

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); rnorm(25*25) }
  [1]  2.287247161 -1.196771682 -0.694292510 -0.412292951 -0.970673341
  [6] -0.947279945  0.748139340 -0.116955226  0.152657626  2.189978107
 [11]  0.356986230  2.716751783  2.281451926  0.324020540  1.896067067
 [16]  0.467680511 -0.893800723 -0.307328300 -0.004822422  0.988164149
 [21]  0.839750360  0.705341831  1.305964721 -1.387996217  1.272916864
 [26]  0.184192771  0.752279896  0.591745052 -0.983052596 -0.276063955
 [31] -0.870851023  0.718710553  0.110652878 -0.078466768 -0.420490459
 [36] -0.562125876  0.997513445 -1.105130059 -0.142287831  0.314994905
 [41]  1.218550535 -0.699317079 -0.285432752 -1.311552673 -0.391012431
 [46] -0.401526613  1.350517581  0.591190027  0.100525456  0.931071996
 [51] -0.262742349 -0.007668105  0.367153007  1.707162545  0.723740263
 [56]  0.481036049 -1.567868244  0.318250283  0.165991451 -0.899907630
 [61]  0.076371474  0.159155278  0.543674185  0.704807353  0.318969143
 [66]  1.109249789  0.769154195  1.153473675  1.260683503  0.700623507
 [71]  0.432627161 -0.922601718 -0.615584207 -0.866659688 -1.639517087
 [76] -1.325839244 -0.889036728 -0.557602330 -0.062402309  2.422692977
 [81]  0.342585350  0.004248236  0.029219842 -0.393423429 -0.792704563
 [86] -0.311701865 -0.346068592 -0.304607588 -1.785893487  0.587274672
 [91]  1.635794434 -0.645423474  0.618992169  0.236393598  0.846500899
 [96] -0.573645739  1.117993204 -1.540001132 -0.438123899 -0.150672971
[101]  0.519058365  0.587539705 -0.079333061 -1.174361015  0.308722118
[106] -1.603878543  0.991289625  1.023220445  0.840145439  0.120078608
[111] -0.426255055  0.458926244  0.645047948  0.611530549 -0.889211294
[116]  1.543892349 -1.241763605  1.103447340  0.982772357  0.304327174
[121] -1.554718216  1.569890776  0.688449693 -0.177603659  0.729201266
[126]  1.533250931  0.506578448  0.033327676 -1.467550715  1.019157716
[131] -0.593339333  0.812409890  0.866167830  0.368308303  1.134819099
[136] -0.757099280  0.445220569  0.915932944  0.269758742  1.007540449
[141] -1.461433265 -0.874785611  0.165228938  0.207207027  0.482361891
[146] -0.071658375 -0.888928425  0.485943570  0.340496757 -1.097924194
[151] -0.355694443  1.097300411 -0.906691970 -0.207456624  0.678861434
[156] -0.797787741 -1.591538938  1.180348125  1.222569290 -0.010909187
[161]  0.345522466  0.094189158  0.006793368  0.742622878  1.042186536
[166] -0.319337138  0.322643396  0.685052979  0.320242774 -1.914938024
[171] -2.339962899  0.482864294  1.178530047 -1.292777034  0.615773085
[176]  0.256042081  0.727839002  1.324110919  0.147158490 -0.598539393
[181]  2.192529927  2.327112796  1.134869600 -0.190884556  0.474844564
[186] -0.545474935  1.055648545  0.429021832 -1.819956414 -0.691976089
[191] -1.931828248  1.209672013 -0.279000048 -1.095783227 -0.102186042
[196]  0.357022958 -0.882302566 -0.056647794 -0.581018951  0.644088189
[201]  2.023344053  0.862492498 -0.024909491  0.600634949  1.216480735
[206] -1.176531550 -0.609340034  0.387262573 -1.399140144  1.232491851
[211]  0.015507501 -1.620959052 -0.665464664 -0.574840510 -0.901892975
[216]  1.491599370 -0.137279317  0.108281698 -1.035215103 -0.444743919
[221] -0.196049266 -1.269364492  0.953521185  0.472546654 -0.558778101
[226]  1.242064560 -0.015258466 -0.791788389 -0.401618743 -1.896701290
[231]  0.971974934 -0.513954856  0.014561673 -0.260935570  1.522358392
[236] -1.473369746 -0.016558014  0.024540609 -0.001256989 -0.433932707
[241] -0.405559057  0.155233319 -0.972381818  1.548174930 -0.370123333
[246]  1.961525257 -0.609995576 -0.077428757 -1.828859263  0.805924242
[251] -1.477591780 -2.973255713 -1.339762142 -0.265842026 -0.383993408
[256] -0.602942330 -0.651524037  1.757671509 -0.019034865  0.155284612
[261] -0.760846441 -1.549726907  2.750165012  1.047423248  0.917992474
[266]  0.470109508 -0.617372088  0.042106273 -0.901898901  1.339583210
[271]  0.803854350  0.318478653 -0.190453307 -1.087266691  0.145399729
[276]  2.462800251  0.923619692  0.741876688  1.416021792  1.251663370
[281]  2.108905691  0.710312603 -1.475182009 -0.589726484  0.139703246
[286] -0.511724233  0.150937351  0.442039395 -0.162399123  0.971838541
[291] -0.671265482  1.638397161 -1.068272681 -0.011412125 -1.865281340
[296]  0.018250863 -0.247020546 -0.919425112 -2.173164432 -0.649377054
[301]  0.525261550 -0.275727311  0.054709765 -0.388249606 -0.417023046
[306] -1.164175165  1.737864135 -0.254077350 -0.973718623  1.111198947
[311]  0.973499056  1.257128676  1.776287583 -2.683168522  0.659863075
[316]  1.179449667  0.393513776 -1.189858667 -0.356527365 -1.465508044
[321] -1.090730152 -0.657254216  2.262941004  0.087690029  0.767523002
[326] -0.613157464  0.152502970 -0.591707447 -0.960704967 -0.584957995
[331]  0.656672889 -0.290249588  0.904097729  0.199020224 -0.051574807
[336] -0.908205179 -1.142478339  0.990324936  0.112273278  1.149631674
[341] -0.910495324 -1.103819717 -1.634867306 -1.616382494 -0.836737007
[346]  1.092999116  1.235098180  0.172066602  0.120493170  0.557532670
[351]  0.491383162 -0.069012624 -1.350796315  0.799357571 -0.320094077
[356] -0.356951189 -0.510727938 -1.878880082 -0.951845090  2.273156615
[361]  0.202687630 -2.308554698 -0.056635663  0.062843842  0.710228137
[366] -0.592307397  0.298524630  0.642535627  2.112795096  0.917779633
[371] -1.572854753  0.992641731  0.479520871 -0.296580555  0.815840235
[376] -0.999771613  0.549210294  0.279771204  0.916635890 -1.731257258
[381] -1.479581067  2.229811027  0.386498946  0.660265688 -0.276235210
[386]  0.275932999 -2.274231202  0.908085740 -1.086253108 -0.215526715
[391] -0.733427376  0.212117835 -0.939141903 -0.619193637  0.244011158
[396]  0.371743383  0.627208219 -1.073113926 -0.708692714  0.907131672
[401] -0.319705638  1.165065941 -0.621710549  1.248213190  1.440401542
[406]  0.761993438  0.559371235  1.599263806 -0.098457735 -1.449553784
[411] -0.257661306 -2.033071331  0.586964172  0.160586532  0.113152868
[416]  0.571690607 -0.965529654  0.318001153 -0.173507590 -0.912611181
[421] -1.846894773  0.669518018 -0.108786519  1.566575351 -0.844845232
[426]  1.097649284  0.300880343 -0.776966252 -0.038434179  1.109489569
[431]  0.536325266 -0.363348458 -0.105500712  0.333874643  0.810231052
[436] -1.683695383  0.665727843 -0.792387535  1.527723303 -1.486692398
[441] -0.671148581  1.675177447  0.611932061 -0.232205646  0.605293318
[446] -1.159106124 -1.164429272 -0.869924947 -0.261105718 -0.494195664
[451] -1.305822731  2.023412621 -0.755648821 -0.241594619  1.097158899
[456] -0.946612751 -1.133959921 -0.883383523  0.516413399 -0.337955399
[461] -0.022451856 -0.102050958  0.300408597  0.806620413 -0.037205895
[466] -1.456475992 -0.623890647 -0.169598272  1.276123168 -0.255914477
[471] -0.165368271 -0.427321111 -0.056872747 -1.445383596  1.882807020
[476]  0.116890018  0.421132703  1.577404382 -0.251388524 -0.055624336
[481] -0.022531871  2.330960973 -0.098830347  0.166431579 -0.269635400
[486]  0.844473608  1.408767749 -1.566236221  0.169038186 -1.505679169
[491]  0.994932947  1.243908408 -0.036256826 -0.411255878  1.284148964
[496] -1.117807659 -0.835069705  1.500811698  0.899150860 -0.456412078
[501] -0.206015750 -0.587843606 -0.685452946  1.004824182 -0.772649093
[506] -1.993733701 -0.909254485 -0.563156081 -1.217855617 -1.820317853
[511] -0.399629346  2.118368348  1.415157546  0.564765116 -1.081297164
[516] -0.941976094 -0.244183443  1.085488554  0.558343827 -2.176228351
[521]  0.877301231  0.842535336 -0.051583988 -0.690121403 -1.838982845
[526]  0.283037917 -2.252590083  0.734350187  0.145805741 -0.649428581
[531] -0.561224360  0.334792049  0.032018427  1.236917189  0.056413424
[536] -0.145432708 -0.592349626 -1.260712980 -0.683605784 -0.163437195
[541] -0.438473508 -0.578703015  1.581090432  1.540661310  0.702981004
[546] -0.063748618 -0.740623984 -1.033947166 -0.296063663 -1.442949725
[551] -0.027191653  1.561392979 -0.991078158  0.004193986 -0.044804842
[556] -0.688653669 -0.130254649  0.155092788  1.277341552  1.053548212
[561] -0.371716546 -0.103132501  2.498073606 -0.777260866  0.757384577
[566]  0.022545035 -1.650031528 -0.889116216 -0.608369722 -0.213062904
[571]  1.471211256  0.466388474  1.818358361  1.923396212 -0.539003564
[576] -0.386278801 -0.861807666 -0.402006583  0.598962820  0.081837282
[581]  0.331025756 -0.461246936  0.359039240 -0.515791179  0.587276223
[586]  1.619611026  0.445231229  1.255261202 -0.574906649  0.316089488
[591] -2.187870565  2.372101320  0.976579870  0.614451811 -0.315262654
[596]  0.231037949  2.075480091  0.652684898 -0.037396298 -0.706391507
[601] -1.227831705  0.134158451 -0.373233489  0.039060375  0.143124323
[606]  0.104947251  0.602195742 -0.118395494  0.559169543  0.041861378
[611]  0.063621116  1.466203694 -0.472630868  0.163474538  0.306350163
[616]  0.792576218 -0.949076754  0.904786982 -0.340110408  1.531007499
[621]  0.389403389  0.495981980  0.644858676 -0.043764773 -1.356868729

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); runif(10) }
 [1] 0.98890930 0.39774545 0.11569778 0.06974868 0.24374939 0.79201043
 [7] 0.34006235 0.97206250 0.16585548 0.45910367

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); runif(100) }
  [1] 0.988909298 0.397745453 0.115697779 0.069748679 0.243749391 0.792010426
  [7] 0.340062353 0.972062501 0.165855485 0.459103666 0.171748077 0.231477102
 [13] 0.772811946 0.096301542 0.453447770 0.084700713 0.560665867 0.008704600
 [19] 0.985737091 0.316584804 0.639448942 0.295223235 0.996703694 0.906021320
 [25] 0.988739144 0.065645739 0.627038758 0.490475041 0.971024413 0.362220848
 [31] 0.679993461 0.263719930 0.185714261 0.185143222 0.379296747 0.847024392
 [37] 0.498076133 0.790585574 0.838463872 0.456903865 0.799475815 0.381943061
 [43] 0.759701231 0.436775602 0.904217721 0.319534914 0.082569093 0.816289079
 [49] 0.898476221 0.966496398 0.573068883 0.720079497 0.774058624 0.627760801
 [55] 0.722989341 0.386831279 0.162790778 0.187228283 0.391249474 0.273901210
 [61] 0.191917748 0.504391806 0.763840357 0.693668871 0.544054188 0.659087226
 [67] 0.468728380 0.481805539 0.337063598 0.424526302 0.287015131 0.601191532
 [73] 0.840742326 0.620837048 0.134551619 0.567722430 0.443426331 0.437975423
 [79] 0.623617233 0.932653342 0.888492583 0.878540561 0.242176948 0.741453797
 [85] 0.387656313 0.078951739 0.094835550 0.762142731 0.347894026 0.416766709
 [91] 0.344016231 0.008410923 0.911574991 0.182205419 0.722803449 0.571963331
 [97] 0.540036414 0.354947415 0.824091838 0.186136761

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); runif(25*25) }
  [1] 0.988909298 0.397745453 0.115697779 0.069748679 0.243749391 0.792010426
  [7] 0.340062353 0.972062501 0.165855485 0.459103666 0.171748077 0.231477102
 [13] 0.772811946 0.096301542 0.453447770 0.084700713 0.560665867 0.008704600
 [19] 0.985737091 0.316584804 0.639448942 0.295223235 0.996703694 0.906021320
 [25] 0.988739144 0.065645739 0.627038758 0.490475041 0.971024413 0.362220848
 [31] 0.679993461 0.263719930 0.185714261 0.185143222 0.379296747 0.847024392
 [37] 0.498076133 0.790585574 0.838463872 0.456903865 0.799475815 0.381943061
 [43] 0.759701231 0.436775602 0.904217721 0.319534914 0.082569093 0.816289079
 [49] 0.898476221 0.966496398 0.573068883 0.720079497 0.774058624 0.627760801
 [55] 0.722989341 0.386831279 0.162790778 0.187228283 0.391249474 0.273901210
 [61] 0.191917748 0.504391806 0.763840357 0.693668871 0.544054188 0.659087226
 [67] 0.468728380 0.481805539 0.337063598 0.424526302 0.287015131 0.601191532
 [73] 0.840742326 0.620837048 0.134551619 0.567722430 0.443426331 0.437975423
 [79] 0.623617233 0.932653342 0.888492583 0.878540561 0.242176948 0.741453797
 [85] 0.387656313 0.078951739 0.094835550 0.762142731 0.347894026 0.416766709
 [91] 0.344016231 0.008410923 0.911574991 0.182205419 0.722803449 0.571963331
 [97] 0.540036414 0.354947415 0.824091838 0.186136761 0.396374585 0.486214877
[103] 0.496940902 0.387040419 0.643247554 0.343830247 0.956104083 0.042711742
[109] 0.765387396 0.203770043 0.684754565 0.396167753 0.058455937 0.736253970
[115] 0.624852455 0.629168641 0.565918159 0.789320506 0.184084703 0.832688440
[121] 0.530438221 0.473129903 0.563226733 0.221216818 0.706667149 0.321192662
[127] 0.759534939 0.160266412 0.625125045 0.108314490 0.866338781 0.778653253
[133] 0.779099110 0.505085685 0.875641987 0.657582362 0.896288547 0.809519769
[139] 0.758230993 0.805500210 0.667357171 0.513291479 0.178107399 0.562763405
[145] 0.269084484 0.719015143 0.193064248 0.924299747 0.050552808 0.967109258
[151] 0.092446474 0.903669725 0.186991671 0.202658952 0.288557984 0.798631273
[157] 0.475121226 0.770771818 0.992297024 0.811099534 0.634044782 0.846010283
[163] 0.501694796 0.663214930 0.511655369 0.524638179 0.347003380 0.809235938
[169] 0.213974988 0.423013881 0.377633552 0.784650579 0.364645584 0.731619959
[175] 0.380332519 0.714831269 0.037058254 0.498559137 0.721490374 0.978518000
[181] 0.949058695 0.296092094 0.259326394 0.923973980 0.732039236 0.739723322
[187] 0.593436368 0.080261439 0.801363316 0.261158882 0.283103776 0.714157090
[193] 0.868215054 0.701323045 0.061780042 0.437410935 0.330648232 0.904205126
[199] 0.440116849 0.384970255 0.698139974 0.873962532 0.721579354 0.442052124
[205] 0.468383849 0.866327895 0.120125231 0.016276919 0.621233539 0.450468939
[211] 0.054370416 0.397014734 0.839227910 0.517077034 0.846898185 0.338453275
[217] 0.799586573 0.722995738 0.547789566 0.290069000 0.334961002 0.652502363
[223] 0.676856431 0.734399399 0.740551948 0.242195845 0.729575800 0.258018252
[229] 0.186944764 0.904899304 0.938692790 0.967275376 0.107161898 0.386746766
[235] 0.865083527 0.394467736 0.837140262 0.051914743 0.619560680 0.528164664
[241] 0.060006598 0.130914320 0.941779737 0.725135227 0.754415178 0.454452775
[247] 0.429517122 0.708526997 0.767060720 0.280059143 0.937392981 0.047742886
[253] 0.693774679 0.727987585 0.513293359 0.338572729 0.071113148 0.676048664
[259] 0.845935948 0.425374720 0.276477046 0.186031271 0.791721761 0.292779080
[265] 0.806800934 0.303845516 0.643678320 0.543556314 0.871774436 0.506891669
[271] 0.224495193 0.708128533 0.671919822 0.395381115 0.820148962 0.931951389
[277] 0.606327066 0.410366985 0.843162433 0.358348509 0.071948284 0.836629100
[283] 0.190845285 0.417061561 0.565618111 0.050722353 0.582075913 0.174117556
[289] 0.685225555 0.278545690 0.471436888 0.475961835 0.187020776 0.346010851
[295] 0.686496411 0.723981390 0.633258768 0.049270478 0.136118793 0.559847002
[301] 0.361034700 0.649323652 0.863744956 0.336403099 0.182284860 0.153892108
[307] 0.417826634 0.288717891 0.751387168 0.556558449 0.212496839 0.828355182
[313] 0.055744168 0.824246763 0.881069107 0.813416916 0.889253792 0.427185679
[319] 0.495647947 0.811994791 0.635149184 0.966256866 0.537520557 0.168309421
[325] 0.502710135 0.944187227 0.771144985 0.614569535 0.851337402 0.319993825
[331] 0.374735431 0.921936606 0.626517335 0.629350343 0.753344758 0.388883051
[337] 0.625607855 0.250782848 0.027750204 0.323975102 0.009642830 0.438463602
[343] 0.685403952 0.187244218 0.880707320 0.472374433 0.098044091 0.394348188
[349] 0.730977848 0.687304613 0.601040831 0.357461814 0.766643930 0.052174472
[355] 0.907266900 0.342795660 0.558496540 0.435603583 0.274740044 0.117309494
[361] 0.985829362 0.926973709 0.990020368 0.556270809 0.871785018 0.752441008
[367] 0.424308022 0.421402510 0.682551119 0.122051680 0.292713461 0.198493198
[373] 0.854435593 0.049085436 0.666046329 0.397446506 0.034382821 0.163344789
[379] 0.244476175 0.428066254 0.026690355 0.694405509 0.886797613 0.861526547
[385] 0.390122391 0.343954109 0.136586823 0.355828221 0.459304503 0.870256480
[391] 0.639462688 0.477497697 0.188806608 0.509698991 0.477412879 0.176907800
[397] 0.280613845 0.114403635 0.740240878 0.496620325 0.978481153 0.651185201
[403] 0.805791720 0.911352574 0.490063579 0.046876546 0.725958425 0.098552066
[409] 0.888099081 0.393106178 0.119691266 0.827733963 0.271149533 0.951310817
[415] 0.650719090 0.139196557 0.080885481 0.451400035 0.891117295 0.787731541
[421] 0.506186348 0.803989580 0.052513209 0.795292841 0.252876663 0.923684047
[427] 0.282699579 0.797022308 0.183556859 0.925229186 0.932097897 0.185298056
[433] 0.445405010 0.356907755 0.543113886 0.014449528 0.150284231 0.368167803
[439] 0.328252418 0.129830291 0.422285806 0.023890862 0.102155550 0.449767343
[445] 0.829836969 0.201506994 0.681731676 0.558151370 0.288156588 0.110282171
[451] 0.892893629 0.149954897 0.493912989 0.200156888 0.214242040 0.416463380
[457] 0.343982318 0.068086939 0.028933688 0.693376990 0.834468489 0.913377619
[463] 0.303641777 0.404263421 0.505809065 0.051665923 0.397071097 0.475474120
[469] 0.936040343 0.800159157 0.070325686 0.225021683 0.493394610 0.554503728
[475] 0.509789303 0.124445061 0.499498537 0.390260760 0.332168660 0.071715833
[481] 0.342533308 0.462215300 0.561681310 0.154426905 0.165430319 0.279062960
[487] 0.939209907 0.866816371 0.355645297 0.971240275 0.975091108 0.264834033
[493] 0.270932370 0.026024646 0.469141233 0.293257812 0.033710347 0.204622180
[499] 0.789856732 0.254799355 0.069758541 0.467920935 0.001473298 0.210184196
[505] 0.090161342 0.698558903 0.395180434 0.475053075 0.350491667 0.168137522
[511] 0.273273522 0.965892061 0.257354132 0.998879220 0.960598297 0.122483281
[517] 0.492406644 0.281286263 0.561701527 0.771911790 0.223374396 0.924947239
[523] 0.060603541 0.250506086 0.997021737 0.302592350 0.852547788 0.794759759
[529] 0.820688596 0.877223568 0.680861612 0.275680595 0.268494662 0.798162794
[535] 0.516793009 0.668437805 0.183555288 0.655466895 0.909809557 0.688679830
[541] 0.789259453 0.399949068 0.624939055 0.456209752 0.424476959 0.785816751
[547] 0.138459486 0.154755993 0.557802361 0.531342120 0.993107169 0.388125351
[553] 0.822157821 0.830869126 0.770918974 0.209627276 0.921615443 0.162160798
[559] 0.894653726 0.131491530 0.982523636 0.473127613 0.761244842 0.803365579
[565] 0.070081810 0.115550329 0.277687014 0.707308517 0.555552766 0.489766358
[571] 0.304422007 0.771430857 0.559987429 0.828644309 0.670769653 0.536579325
[577] 0.435495781 0.261434323 0.834434558 0.888513507 0.251025711 0.480356591
[583] 0.949330568 0.492853978 0.142698761 0.873871213 0.495447319 0.605360667
[589] 0.031070987 0.641177472 0.507280635 0.544740617 0.402446161 0.482019869
[595] 0.178936627 0.885093973 0.014883971 0.884073181 0.258047348 0.459595995
[601] 0.700299312 0.123179266 0.391378759 0.787041728 0.521815158 0.578327551
[607] 0.348915665 0.591439999 0.338330774 0.995909323 0.122176517 0.425663092
[613] 0.958882616 0.907734567 0.399717898 0.462696604 0.165098135 0.432789549
[619] 0.866758644 0.078569611 0.834847336 0.601319070 0.895646481 0.305230110
[625] 0.962157237

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(9567, "Marsaglia-Multicarry"); sum(runif(100)) }
[1] 52.92218

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ m <- matrix(1:6, ncol=2) ; rbind(11:12, m) }
     [,1] [,2]
[1,]   11   12
[2,]    1    4
[3,]    2    5
[4,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ m <- matrix(1:6, ncol=2) ; rbind(m, 11:12) }
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
[4,]   11   12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ m <- matrix(1:6, nrow=2) ; rbind(11:12, m) }
     [,1] [,2] [,3]
[1,]   11   12   11
[2,]    1    3    5
[3,]    2    4    6
Warning message:
In rbind(11:12, m) :
  number of columns of result is not a multiple of vector length (arg 1)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ rbind() }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ rbind(1.1:3.3,1.1:3.3) }
     [,1] [,2] [,3]
[1,]  1.1  2.1  3.1
[2,]  1.1  2.1  3.1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ rbind(1:3,1:3) }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ rbind(1:3,2) }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    2    2    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(1) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(1+1i) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(NA+2i) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(as.double(NA)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(c(1+1i,2-2i)) }
[1]  1 -2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(c(1,2)) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(c(1,NA,2)) }
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(1+1i) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(NA+2i) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(as.double(NA)) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(c(1+1i,2-2i)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(c(1,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(c(1,NA,2)) }
[1]  1 NA  2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ Recall(10) }
Error in Recall(10) : 'Recall' called from outside a closure

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ f <- function(tarDepth,curDepth) { if (tarDepth == curDepth) {curDepth} else {Recall(tarDepth,curDepth+1)}}; f(3,0) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ f<-function(i) { if (i==1) { 1 } else if (i==2) { 1 } else { Recall(i-1) + Recall(i-2) } } ; f(10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ f<-function(i) { if(i<=1) 1 else i*Recall(i-1) } ; f(10) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ f<-function(i) { if(i<=1) 1 else i*Recall(i-1) } ; g <- f ; f <- sum ; g(10) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep("hello", 3) }
[1] "hello" "hello" "hello"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(1,3) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(1:3, length.out=4) }
[1] 1 2 3 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(1:3, length.out=NA) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(1:3,2) }
[1] 1 2 3 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(NA,8) }
[1] NA NA NA NA NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(TRUE,8) }
[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(as.raw(14), 4) }
[1] 0e 0e 0e 0e

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1, 2), each = 2) }
[1] 1 1 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1, 2), each = 2, length.out = 3) }
[1] 1 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1, 2), each = 2, length.out = 5) }
[1] 1 1 2 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1, 2), times = 3) }
[1] 1 2 1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1, 2), times = c(1, 2, 3)) }
Error in rep(c(1, 2), times = c(1, 2, 3)) : invalid 'times' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1, 2), times = c(2, 3)) }
[1] 1 1 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1, 2), times = c(2, 3), each = 2) }
Error in rep(c(1, 2), times = c(2, 3), each = 2) :
  invalid 'times' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1,2),0) }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1,2),c(3,3)) }
[1] 1 1 1 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x <- 1 ; names(x) <- c("X") ; rep(x, times=0) }
named numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x <- 1+1i ; names(x) <- c("X") ; rep(x, times=2) }
   X    X
1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x <- 1L ; names(x) <- c("X") ; rep(x, times=2) } 
X X
1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x <- as.raw(11) ; names(x) <- c("X") ; rep(x, 3) }
 X  X  X
0b 0b 0b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x <- as.raw(c(11,12)) ; names(x) <- c("X","Y") ; rep(x, 2) }
 X  Y  X  Y
0b 0c 0b 0c

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x <- c("A","B") ; names(x) <- c("X") ; rep(x, length.out=3) }
   X <NA>    X
 "A"  "B"  "A"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x <- c(1+1i,1+2i) ; names(x) <- c("X") ; rep(x, times=2) }
   X <NA>    X <NA>
1+1i 1+2i 1+1i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x <- c(TRUE,NA) ; names(x) <- c("X",NA) ; rep(x, length.out=3) }
   X <NA>    X
TRUE   NA TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ x<-c(1,2); names(x)<-c("X", "Y"); rep(x, c(3,2)) }
X X X Y Y
1 1 1 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int("a",3) }
[1] "a" "a" "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(1,3) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(1:3,2) }
[1] 1 2 3 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(1L,3L) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(as.raw(14), 4) }
[1] 0e 0e 0e 0e

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(c(1,2),0) }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(c(1,2),2) }
[1] 1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(c(1,2,3),c(2,8,3)) }
 [1] 1 1 2 2 2 2 2 2 2 2 3 3 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(seq_len(2), rep.int(8, 2)) }
 [1] 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len("RepeatTest", 5) }
[1] "RepeatTest" "RepeatTest" "RepeatTest" "RepeatTest" "RepeatTest"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(1, 2) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(1:4, 10) }
 [1] 1 2 3 4 1 2 3 4 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(1:4, 3) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(1:4, 4) }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(2+6i, 4) }
[1] 2+6i 2+6i 2+6i 2+6i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(3.14159, 3) }
[1] 3.14159 3.14159 3.14159

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(TRUE, 2) }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(c(2i+3, 4+2i), 4) }
[1] 3+2i 4+2i 3+2i 4+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ rep_len(c(3.1415, 0.8), 1) }
[1] 3.1415

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ x<-as.raw(16); rep_len(x, 2) }
[1] 10 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{ x<-as.raw(16); y<-as.raw(5); rep_len(c(x, y), 5) }
[1] 10 05 10 05 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(4, x="text")}
[1] "text" "text" "text" "text"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(c("abcd", "efg"), 0)}
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(c("abcd", "efg"), 1)}
[1] "abcd"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(c("abcd", "efg"), 14)}
 [1] "abcd" "efg"  "abcd" "efg"  "abcd" "efg"  "abcd" "efg"  "abcd" "efg"
[11] "abcd" "efg"  "abcd" "efg"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(c("abcd", "efg"), 2)}
[1] "abcd" "efg"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(c("abcd", "efg"), 7)}
[1] "abcd" "efg"  "abcd" "efg"  "abcd" "efg"  "abcd"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(c("abcd", "efg"), 8)}
[1] "abcd" "efg"  "abcd" "efg"  "abcd" "efg"  "abcd" "efg"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(length.out=4, "text")}
[1] "text" "text" "text" "text"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(length.out=4, x=1:2)}
[1] 1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{rep_len(x=1:2, length.out=4)}
[1] 1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{x<-"text"; length.out<-4; rep_len(length.out=length.out, x=x)}
[1] "text" "text" "text" "text"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepLen
#{x<-"text"; length.out<-4; rep_len(x=x, length.out=length.out)}
[1] "text" "text" "text" "text"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRev
#{ rev(1:3) }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRev
#{ rev(c(1+1i, 2+2i)) }
[1] 2+2i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(-1.5) }
[1] -2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(0.4) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(0.5) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(0.6) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(1.5) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(1/0) }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(c(0,0.2,0.4,0.6,0.8,1)) }
[1] 0 0 0 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3+2i,4+5i,2+0i,5+10i)))}
[1] 3+ 2i 4+ 5i 2+ 0i 5+10i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3,4,2,5)))}
[1] 3 4 2 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3,4,NaN,5),ncol=2,nrow=2), na.rm = FALSE)}
[1] NaN 4.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3,4,NaN,5),ncol=2,nrow=2), na.rm = TRUE)}
[1] 3.0 4.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3L,4L,2L,5L)))}
[1] 3 4 2 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3L,NA,2L,5L),ncol=2,nrow=2), na.rm = FALSE)}
[1] 2.5  NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3L,NA,2L,5L),ncol=2,nrow=2), na.rm = TRUE)}
[1] 2.5 5.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3L,NaN,2L,5L),ncol=2,nrow=2), na.rm = FALSE)}
[1] 2.5 NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(3L,NaN,2L,5L),ncol=2,nrow=2), na.rm = TRUE)}
[1] 2.5 5.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(NA,NaN,NaN,NA),ncol=2,nrow=2))}
[1]  NA NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(NaN,4+5i,2+0i,5+10i),nrow=2,ncol=2), na.rm = TRUE)}
[1] 2.0+0.0i 4.5+7.5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = FALSE)}
[1] 0.5  NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = TRUE)}
[1] 0.5 0.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = FALSE)}
[1] 0.5 NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = TRUE)}
[1] 0.5 0.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowMeans
#{rowMeans(matrix(c(TRUE,FALSE,FALSE,TRUE)))}
[1] 1 0 0 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{ a = rowSums(array(1:24,c(2,3,4))); c(a[1],a[2]) }
[1] 144 156

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{ a = rowSums(array(1:24,c(2,3,4))); is.null(dim(a)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{ a = rowSums(array(1:24,c(2,3,4))); length(a) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{ a = rowSums(matrix(1:12,3,4)); c(a[1],a[2],a[3]) }
[1] 22 26 30

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{ a = rowSums(matrix(1:12,3,4)); is.null(dim(a)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{ a = rowSums(matrix(1:12,3,4)); length(a) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{rowSums(matrix(c(3+2i,4+5i,2+0i,5+10i)))}
[1] 3+ 2i 4+ 5i 2+ 0i 5+10i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{rowSums(matrix(c(NA,NaN,NaN,NA),ncol=2,nrow=2))}
[1]  NA NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{rowSums(matrix(c(NaN,4+5i,2+0i,5+10i),nrow=2,ncol=2), na.rm = TRUE)}
[1] 2+ 0i 9+15i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{rowSums(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = FALSE)}
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{rowSums(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = TRUE)}
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{rowSums(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = FALSE)}
[1]   1 NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{rowSums(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = TRUE)}
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{x<-cbind(1:3, 4:6, 7:9); rowSums(x)}
[1] 12 15 18

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{x<-cbind(1:3, NA, 7:9); rowSums(x)}
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{x<-cbind(1:3, NaN, 7:9); rowSums(x)}
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{x<-cbind(1:3, NaN, 7:9, 10:12); rowSums(x, na.rm=TRUE)}
[1] 18 21 24

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{x<-cbind(1:4, NA, NaN, 9:12); rowSums(x, na.rm=TRUE)}
[1] 10 12 14 16

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRowSums
#{x<-cbind(2L:10L,3L); rowSums(x)}
[1]  5  6  7  8  9 10 11 12 13

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{  set.seed(4357, "default"); x <- 5 ; sample(x, 5, FALSE, NULL) ;}
[1] 3 4 5 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{  set.seed(4357, "default"); x <- 5 ; sample(x, 5, TRUE, NULL) ;}
[1] 3 5 5 4 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(4357, "default");  x <- c(5, "cat"); sample(x, 2, TRUE, NULL) ;}
[1] "5"   "cat"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(4357, "default"); x <- 5 ; prob <- c(.1, .2, .3, .2, .1); sample(x, 10, TRUE, prob) ; }
 [1] 2 5 5 4 2 5 1 2 2 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(4357, "default"); x <- 5 ; prob <- c(.2, .2, .2, .2, .2 ); sample(x, 5, FALSE, prob) ; }
[1] 4 1 5 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(4357, "default"); x <- 5 ; prob <- c(.5, .5, .5, .5, .5); sample(x, 5, FALSE, prob) ; }
[1] 4 1 5 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(4357, "default"); x <- c("Heads", "Tails"); prob <- c(.3, .7) ; sample(x, 10, TRUE, prob) ; }
 [1] "Tails" "Heads" "Heads" "Tails" "Tails" "Heads" "Heads" "Tails" "Tails"
[10] "Tails"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(4357, "default"); x <- c(5, "cat"); sample(x, 2, FALSE, NULL) ;}
[1] "5"   "cat"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(4357, "default"); x <- c(5, "cat"); sample(x, 3, TRUE, NULL) ;}
[1] "5"   "cat" "cat"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(9567, "Marsaglia-Multicarry"); x <- 5 ; prob <- c(.1, .2, .3, .2, .1) ; sample(x, 10, TRUE, prob) ; }
 [1] 4 3 4 1 3 2 1 5 1 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(9567, "Marsaglia-Multicarry"); x <- 5 ; prob <- c(.2, .2, .2, .2, .2 ) ; sample(x, 5, FALSE, prob) ; }
[1] 5 2 1 4 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(9567, "Marsaglia-Multicarry"); x <- 5 ; prob <- c(.5, .5, .5, .5, .5) ; sample(x, 5, FALSE, prob) ; }
[1] 5 2 1 4 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(9567, "Marsaglia-Multicarry"); x <- 5; sample(x, 5, FALSE, NULL) ;}
[1] 4 1 3 2 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(9567, "Marsaglia-Multicarry"); x <- 5; sample(x, 5, TRUE, NULL) ;}
[1] 4 1 4 5 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(9567, "Marsaglia-Multicarry"); x <- c(5, "cat") ; sample(x, 2, FALSE, NULL) ;}
[1] "cat" "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(9567, "Marsaglia-Multicarry"); x <- c(5, "cat") ; sample(x, 2, TRUE, NULL) ;}
[1] "cat" "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSample
#{ set.seed(9567, "Marsaglia-Multicarry"); x <- c(5, "cat") ; sample(x, 3, TRUE, NULL) ;}
[1] "cat" "5"   "cat"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ (sapply(1:3, function(i) { if (i < 3) { c(xxx=1) } else {c(2)} })) }
xxx xxx
  1   1   2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ (sapply(1:3, function(i) { if (i < 3) { list(xxx=1) } else {list(zzz=2)} })) }
$xxx
[1] 1

$xxx
[1] 1

$zzz
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ (sapply(1:3, function(i) { list(xxx=1:i) } )) }
$xxx
[1] 1

$xxx
[1] 1 2

$xxx
[1] 1 2 3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function() { sapply(1:3,function(x){x*2L}) }; f() + f() }
[1]  4  8 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function() { sapply(c("a","b"), function(x) { c(a=x) })  } ; f() }
a.a b.a
"a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function() { sapply(c(1,2), function(x) { c(a=x) })  } ; f() }
a a
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function() { sapply(c(1,2,3),function(x){x*2}) }; f() + f() }
[1]  4  8 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function() { sapply(c(X="a",Y="b"), function(x) { c(a=x) })  } ; f() }
X.a Y.a
"a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function() { sapply(c(X=1,Y=2), function(x) { c(a=x) })  } ; f() }
X.a Y.a
  1   2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function(v) { sapply(1:3, function(k) v)}; f(1); f(2) }
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f<-function() { x<-2 ; sapply(1, function(i) { x }) } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f<-function(g) { sapply(1:3, g) } ; f(function(x) { x*2 }) ; f(function(x) { TRUE }) }
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f<-function(g) { sapply(1:3, g) } ; f(function(x) { x*2 }) }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f<-length; sapply(1:3, f) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ h <- new.env() ; assign("a",1,h) ; assign("b",2,h) ; sa <- sapply(ls(h), function(k) get(k,h,inherits=FALSE)) ; names(sa) }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:2, function(i) { if (i==1) { as.raw(0) } else { "hello" }} ) } 
[1] "00"    "hello"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:2, function(i) { if (i==1) { as.raw(0) } else { 5+10i } }) }
[1] 0+ 0i 5+10i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:2, function(i) { if (i==1) { as.raw(0) } else { as.raw(10) } }) }
[1] 00 0a

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, "-", 2) }
[1] -1  0  1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, `-`, 2) }
[1] -1  0  1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(i) { if (i < 3) { c(1+1i,2) } else { c(11,12) } }) }
     [,1] [,2]  [,3]
[1,] 1+1i 1+1i 11+0i
[2,] 2+0i 2+0i 12+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(i) { if (i < 3) { list(1,2) } else { c(11,12) } }) }
     [,1] [,2] [,3]
[1,] 1    1    11
[2,] 2    2    12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(i) { if (i < 3) { list(xxx=1) } else {list(2)} }) }
$xxx
[1] 1

$xxx
[1] 1

[[3]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(i) { list(1,2) }) }
     [,1] [,2] [,3]
[1,] 1    1    1
[2,] 2    2    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(x) { if (x==1) { 1 } else if (x==2) { integer() } else { TRUE } }) }
[[1]]
[1] 1

[[2]]
integer(0)

[[3]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(x) { if (x==1) { list(1) } else if (x==2) { list(NULL) } else { list() } }) }
[[1]]
[[1]][[1]]
[1] 1


[[2]]
[[2]][[1]]
NULL


[[3]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(x) { if (x==1) { list(1) } else if (x==2) { list(NULL) } else { list(2) } }) }
[[1]]
[1] 1

[[2]]
NULL

[[3]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, length) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3,function(x){x*2L}) }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(c("a","b","c"), function(x) { x }) }
  a   b   c
"a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(c(1,2,3),function(x){x*2}) }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(list(1,2,3),function(x){x*2}) }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("2 3 5", "", "11 13 17")); scan(con, what=list("")) }
Read 6 records
[[1]]
[1] "2"  "3"  "5"  "11" "13" "17"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("2 3 5", "", "11 13 17")); scan(con, what=list(""), blank.lines.skip=FALSE) }
Read 7 records
[[1]]
[1] "2"  "3"  "5"  ""   "11" "13" "17"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("2 3 5", "", "11 13 17")); scan(con, what=list(integer()), blank.lines.skip=FALSE) }
Read 7 records
[[1]]
[1]  2  3  5 NA 11 13 17


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("HEADER", "7 2 3", "4 5 42")); scan(con, skip = 1) }
Read 6 items
[1]  7  2  3  4  5 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("HEADER", "7 2 3", "4 5 42")); scan(con, skip = 1, nlines = 1) }
Read 3 items
[1] 7 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("HEADER", "7 2 3", "4 5 42")); scan(con, skip = 1, quiet=TRUE) }
[1]  7  2  3  4  5 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("HEADER", "7 2 3", "4 5 42")); scan(con, what = list("","","")) }
Read 3 records
[[1]]
[1] "HEADER" "3"      "42"

[[2]]
[1] "7" "4" ""

[[3]]
[1] "2" "5" ""

Warning message:
In scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings,  :
  number of items read is not a multiple of the number of columns

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("HEADER", "7 2 3", "4 5 42")); scan(con, what = list("","",""), fill=TRUE) }
Read 3 records
[[1]]
[1] "HEADER" "7"      "4"

[[2]]
[1] ""  "2" "5"

[[3]]
[1] ""   "3"  "42"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("HEADER", "7 2 3", "4 5 42")); scan(con, what = list("","",""), fill=TRUE, multi.line=FALSE) }
Read 3 records
[[1]]
[1] "HEADER" "7"      "4"

[[2]]
[1] ""  "2" "5"

[[3]]
[1] ""   "3"  "42"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("HEADER", "7 2 3", "4 5 42")); scan(con, what = list("","",""), multi.line=FALSE) }
Error in scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings,  :
  line 1 did not have 3 elements

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("TITLE extra line", "2 3 5 7", "11 13 17")); scan(con, skip = 1) }
Read 7 items
[1]  2  3  5  7 11 13 17

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("TITLE extra line", "2 3 5 7", "11 13 17")); scan(con, skip = 1, nlines = 1) }
Read 4 items
[1] 2 3 5 7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("TITLE extra line", "2 3 5 7", "11 13 17")); scan(con, skip = 1, quiet = TRUE) }
[1]  2  3  5  7 11 13 17

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("TITLE extra line", "2 3 5 7", "11 13 17")); scan(con, what = list("","","")) }
Read 4 records
[[1]]
[1] "TITLE" "2"     "7"     "17"

[[2]]
[1] "extra" "3"     "11"    ""

[[3]]
[1] "line" "5"    "13"   ""

Warning message:
In scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings,  :
  number of items read is not a multiple of the number of columns

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("TITLE extra line", "2 3 5 7", "11 13 17")); scan(con, what = list("","",""), flush=TRUE) }
Read 3 records
[[1]]
[1] "TITLE" "2"     "11"

[[2]]
[1] "extra" "3"     "13"

[[3]]
[1] "line" "5"    "17"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("\"2\"", "\"11\"")); scan(con, what=list("")) }
Read 2 records
[[1]]
[1] "2"  "11"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("foo faz", "\"bar\" \"baz\"")); scan(con, what=list("", "")) }
Read 2 records
[[1]]
[1] "foo" "bar"

[[2]]
[1] "faz" "baz"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("foo faz", "bar \"baz\"")); scan(con, what=list("", "")) }
Read 2 records
[[1]]
[1] "foo" "bar"

[[2]]
[1] "faz" "baz"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testScan
#{ con<-textConnection(c("foo, faz", "bar, baz")); scan(con, what=list("", ""), sep=",") }
Read 2 records
[[1]]
[1] "foo" "bar"

[[2]]
[1] " faz" " baz"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSd
#{ round(100*sd(c(1,2))^2) }
[1] 50

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSeqLen
#{ seq_len(10) }
 [1]  1  2  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSeqLen
#{ seq_len(1:2) }
[1] 1
Warning message:
In seq_len(1:2) : first element used of 'length.out' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSeqLen
#{ seq_len(5L) }
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSeqLen
#{ seq_len(integer()) }
Error in seq_len(integer()) :
  argument must be coercible to non-negative integer
In addition: Warning message:
In seq_len(integer()) : first element used of 'length.out' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ (0-1.5):(0-12) }
 [1]  -1.5  -2.5  -3.5  -4.5  -5.5  -6.5  -7.5  -8.5  -9.5 -10.5 -11.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ (0-12):1.5 }
 [1] -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ (0-5):(0-9) }
[1] -5 -6 -7 -8 -9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1.1:5.1 }
[1] 1.1 2.1 3.1 4.1 5.1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1.5:(0-12) }
 [1]   1.5   0.5  -0.5  -1.5  -2.5  -3.5  -4.5  -5.5  -6.5  -7.5  -8.5  -9.5
[13] -10.5 -11.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 10:1 }
 [1] 10  9  8  7  6  5  4  3  2  1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1:(0-10) }
 [1]   1   0  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1:(0L-10L) }
 [1]   1   0  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1:10 }
 [1]  1  2  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1L:(0-10) }
 [1]   1   0  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 5L:(0L-5L) }
 [1]  5  4  3  2  1  0 -1 -2 -3 -4 -5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 5L:10L }
[1]  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0,0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0,0,0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0,0,1i) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0L,0L) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0L,0L,0L) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(1,-4,-2) }
[1]  1 -1 -3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(10L,1L) }
 [1] 10  9  8  7  6  5  4  3  2  1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(1L,10L) }
 [1]  1  2  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(1L,4L,2L) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(7, c(41,42)) }
Error in seq.default(7, c(41, 42)) : 'to' must be of length 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(7, integer()) }
Error in seq.default(7, integer()) : 'to' must be of length 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(c(1,2), 7) }
Error in seq.default(c(1, 2), 7) : 'from' must be of length 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(double()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(integer()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(integer(), 7) }
Error in seq.default(integer(), 7) : 'from' must be of length 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementIgnore
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(1:8, seq(1L,7L,3L), c(10,100,1000)) }
[1]   10    2    3  100    5    6 1000    8

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementIgnore
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; z <- f(1:8, seq(1L,7L,3L), list(10,100,1000)) ; sum(as.double(z)) }
[1] 1134

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementIgnore
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.character(-3:3),seq(1L,7L,3L),c("A","a","XX")) }
[1] "A"  "-2" "-1" "a"  "1"  "2"  "XX"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementIgnore
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.double(1:5), seq(7L,1L,-3L),c(TRUE,FALSE,NA)) }
[1] NA  2  3  0  5 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementIgnore
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.logical(-3:3),seq(1L,7L,3L),c(TRUE,NA,FALSE)) }
[1]  TRUE  TRUE  TRUE    NA  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementIgnore
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10), seq(2L,4L,2L),c(TRUE,FALSE)) }
[1]  1  1 10  0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=-10,to=-5,by=2) }
[1] -10  -8  -6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=1,to=3) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=1,to=3,by=1) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=1.4) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=1.7) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(length.out=0) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(length.out=1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ round(seq(from=10.5, to=15.4, length.out=4), digits=5) }
[1] 10.50000 12.13333 13.76667 15.40000

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ round(seq(from=3L,to=-2L,by=-4.2), digits=5) }
[1]  3.0 -1.2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(along.with=-3:-5) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(along.with=10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(along.with=1:10) }
 [1]  1  2  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(along.with=NA) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(along=c(10,11,12)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(from=-10.4,to=-5.8,by=2.1) }
[1] -10.4  -8.3  -6.2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(from=10:12) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(from=11, to=12, length.out=2) }
[1] 11 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(from=TRUE, to=TRUE, length.out=0) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(from=c(TRUE, FALSE)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(length.out=13.4) }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParamsIgnore
#{ seq(to=-1,from=-10) }
 [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSimpleRm
#{ rm("ieps") }
Warning message:
In rm("ieps") : object 'ieps' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSimpleRm
#{ x <- 200 ; rm("x") ; x }
Error: object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSimpleRm
#{ x <- 200 ; rm("x") }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSimpleRm
#{ x<-200; y<-100; rm("x", "y"); x }
Error: object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSimpleRm
#{ x<-200; y<-100; rm("x", "y"); y }
Error: object 'y' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSort
#{ sort(c(1L,10L,2L)) }
[1]  1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSort
#{ sort(c(3,10,2)) }
[1]  2  3 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSplit
#{ fu <- c("a","b") ; split(1:8,fu) }
$a
[1] 1 3 5 7

$b
[1] 2 4 6 8


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSplit
#{ fu <- c(1,2,2,1,2,2,1,2,2,1,2,2,1,2,2,1,2,2,1,1) ; split(1:20,fu) }
$`1`
[1]  1  4  7 10 13 16 19 20

$`2`
 [1]  2  3  5  6  8  9 11 12 14 15 17 18


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSplit
#{ g <- factor(round(c(0.4,1.3,0.6,1.8,2.5,4.1,2.2,1.0))) ; x <- c(0.1,3.2,1,0.6,1.9,3.3,1.6,1.7) + sqrt(as.numeric(g)) ; xg <- split(x, g) ; xg }
$`0`
[1] 1.1

$`1`
[1] 4.614214 2.414214 3.114214

$`2`
[1] 2.332051 3.632051 3.332051

$`4`
[1] 5.3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSplit
#{ ma <- cbind(x = 1:10, y = (-4:5)^2) ; split(ma, col(ma)) }
$`1`
 [1]  1  2  3  4  5  6  7  8  9 10

$`2`
 [1] 16  9  4  1  0  1  4  9 16 25


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSplit
#{ split(1:10, 1:2) }
$`1`
[1] 1 3 5 7 9

$`2`
[1]  2  4  6  8 10


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSplit
#{ x <- factor(c("a", "b", "a")); attr(x, "levels")<-c(7L, 42L) ; split(1:3, x) }
$`7`
[1] 1 3

$`42`
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%03d", 1:3) }
[1] "001" "002" "003"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%04X", 26) }
[1] "001A"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%3d", 1:3) }
[1] "  1" "  2" "  3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%4X", 26) }
[1] "  1A"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%7.3f", 10.1) }
[1] " 10.100"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%d", 10) }
[1] "10"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%d%d",1L,2L) }
[1] "12"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("0x%x",1) }
[1] "0x1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("0x%x",10) }
[1] "0xa"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("0x%x",10L) }
[1] "0xa"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("0x%x",1L) }
[1] "0x1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("Hello %*2$d", 3, 2) }
[1] "Hello  3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("Hello %*d", 3, 2) }
[1] "Hello   2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("Hello %2$*2$d", 3, 2) }
[1] "Hello  2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(9) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(9L) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(c(1,4,9,16)) }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(c(1,4,NA,16)) }
[1]  1  2 NA  4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{storage.mode(1)}
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{storage.mode(c(1,2,3))}
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{storage.mode(c)}
[1] "function"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{storage.mode(f<-function(){1})}
[1] "function"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{x<-1;storage.mode(x)<-"character"}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{x<-1;storage.mode(x)<-"logical";x}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit( c("helloh", "hi"), c("h","")) }
[[1]]
[1] ""     "ello"

[[2]]
[1] "h" "i"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit( c("helloh", "hi"), c("h",""), fixed=TRUE) }
[[1]]
[1] ""     "ello"

[[2]]
[1] "h" "i"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit("ahoj", split="") [[c(1,2)]] }
[1] "h"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit("helloh", "", fixed=TRUE) }
[[1]]
[1] "h" "e" "l" "l" "o" "h"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit("helloh", "h") }
[[1]]
[1] ""     "ello"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit("helloh", "h", fixed=TRUE) }
[[1]]
[1] ""     "ello"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSub
#{ gsub("a","aa", "prAgue alley") }
[1] "prAgue aalley"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSub
#{ gsub("a","aa", "prague alley") }
[1] "praague aalley"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSub
#{ sub("a","aa", "prague alley") }
[1] "praague alley"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ delayedAssign("expr", a * b) ; substitute(expr) }
expr

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ env <- new.env() ; z <- 0 ; delayedAssign("var", z+2, assign.env=env) ; substitute(var, env=env) }
z + 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ env <- new.env() ; z <- 0 ; delayedAssign("var", z+2, assign.env=env) ; z <- 10 ; substitute(var, env=env) }
z + 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function() { delayedAssign("expr", a * b) ; substitute(dummy) } ; f() }
dummy

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function() { delayedAssign("expr", a * b) ; substitute(expr) } ; f() }
a * b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function() { substitute(list(a=1,b=2,...,3,...)) } ; f() }
list(a = 1, b = 2, ..., 3, ...)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function() { substitute(x(1:10), list(x=quote(sum))) } ; f() }
sum(1:10)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(...) { substitute(list(...)) } ; f(x + z, a * b) }
list(x + z, a * b)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(...) { substitute(list(a=1,b=2,...,3,...)) } ; f() }
list(a = 1, b = 2, 3)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(...) { substitute(list(a=1,b=2,...,3,...)) } ; f(x + z, a * b) }
list(a = 1, b = 2, x + z, a * b, 3, x + z, a * b)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(a, b=a, c=b, d=c) { substitute(d) } ; f(x + y) }
c

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(expr) { expr ; substitute(expr) } ; a <- 10; b <- 2; f(a * b) }
a * b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(expr) { substitute(expr) } ; f(a * b) }
a * b

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(expra, exprb) { substitute(expra + exprb) } ; f(a * b, a + b) }
a * b + (a + b)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(x = y, y = x) { substitute(x) } ; f() }
y

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(x) { g <- function() { substitute(x) } ; g() } ;  f(a * b) }
x

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(x) { substitute(x, list(a=1,b=2)) } ; f(a + b) }
x

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(y) { as.character(substitute(y)) } ; f("a") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f <- function(y) { substitute(y) } ; typeof(f()) }
[1] "symbol"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; f(c(1,2)) }
list(c(1, 2))

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; f(c(x=1, 2)) }
list(c(x = 1, 2))

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; is.double(f(c(x=1,2))[[2]][[2]]) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; is.language(f(c(1,2))) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; is.language(f(c(x=1,2))[[2]]) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; is.symbol(f(c(x=1,2))[[1]]) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; is.symbol(f(c(x=1,2))[[2]][[1]]) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; length(f(c(1,2))) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ f<-function(...) { substitute(list(...)) }; typeof(f(c(1,2))) }
[1] "language"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ g<-function() { f<-function() { 42 }; substitute(f()) } ; typeof(g()[[1]]) }
[1] "closure"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ substitute(a, list(a = quote(x + y), x = 1)) }
x + y

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ substitute(if(a) { x } else { x * a }, list(a = quote(x + y), x = 1)) }
if (x + y) {
    1
} else {
    1 * (x + y)
}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstitute
#{ substitute(x + y, list(x=1)) }
1 + y

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", -1, 3) }
[1] "123"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", -20, -100) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", -5, -1) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 2, 4) }
[1] "234"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 2.8, 4) }
[1] "234"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 2L, 4L) }
[1] "234"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 4, 2) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 4, 8) }
[1] "456"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 7, 8) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("abcdef",c(1,2),c(3L,5L)) }
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("fastr", 1, NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("fastr", NA, 2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(1234,2,3) }
[1] "23"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(1234L,2,3) }
[1] "23"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(NA,1,2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), 2, integer()) }
Error in substr(c("abcdef", "aa"), 2, integer()) :
  invalid substring arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), 3, NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), NA, 4) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), c(1,NA), 4) }
[1] "abcd" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), c(NA,8), 4) }
[1] NA ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), integer(), 2) }
Error in substr(c("abcdef", "aa"), integer(), 2) :
  invalid substring arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("hello", "bye"), 1, 2) }
[1] "he" "by"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("hello", "bye"), 1, c(1,2,3)) }
[1] "h"  "by"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("hello", "bye"), c(1,2), c(2,3)) }
[1] "he" "ye"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("hello", "bye"), c(1,2,3), 4) }
[1] "hell" "ye"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(character(), integer(), integer()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,3)<-"0"; x }
[1] "0bcdef"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,3)<-"0000"; x }
[1] "000def"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,3)<-NULL; x }
Error in `substr<-`(`*tmp*`, 1, 3, value = NULL) : invalid value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,3)<-character(); x }
Error in `substr<-`(`*tmp*`, 1, 3, value = character(0)) : invalid value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,4)<-"0000"; x }
[1] "0000ef"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,NA)<-"0"; x }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,3,1)<-0; x }
Error in `substr<-`(`*tmp*`, 3, 1, value = 0) : invalid value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,NA,3)<-"0"; x }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,integer(),3)<-NULL; x }
Error in `substr<-`(`*tmp*`, integer(), 3, value = NULL) :
  invalid substring arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-c("abcdef"); substr(x[1], 2, 3)<-"0"; x }
[1] "a0cdef"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-c("abcdef", "ghijklm"); substr(x, c(1,NA), 4)<-"0"; x }
[1] "0bcdef" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-character(); substr(x,1,3)<-"0"; x }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-character(); substr(x,1,3)<-0; x }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-character(); substr(x,1,3)<-NULL; x }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-character(); substr(x,integer(),3)<-NULL; x }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstringIgnore
#{ substring("123456", first=2, last=4) }
[1] "234"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstringIgnore
#{ substring("123456", first=2.8, last=4) }
[1] "234"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstringIgnore
#{ substring("fastr", first=NA, last=2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstringIgnore
#{ substring(c("hello", "bye"), first=c(1,2,3), last=4) }
[1] "hell" "ye"   "ll"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ `sum`(1:10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ is.logical(sum(TRUE)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ is.logical(sum(TRUE, FALSE)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum("42", "7") }
Error in sum("42", "7") : invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum("42", as.character(NA), "7", na.rm=FALSE) }
Error in sum("42", as.character(NA), "7", na.rm = FALSE) :
  invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum("42", as.character(NA), "7", na.rm=TRUE) }
Error in sum("42", as.character(NA), "7", na.rm = TRUE) :
  invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum("42", as.character(NA), na.rm=FALSE) }
Error in sum("42", as.character(NA), na.rm = FALSE) :
  invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum("42", as.character(NA), na.rm=TRUE) }
Error in sum("42", as.character(NA), na.rm = TRUE) :
  invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(0, 1, 2, 3) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(0, 1[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(0, 1[3], na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(0, 1[3], na.rm=TRUE) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(0, na.rm=FALSE, 1[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(1+1i,2,NA, na.rm=TRUE) }
[1] 3+1i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(1:6, 3, 4) }
[1] 28

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(1:6, 3L, TRUE) }
[1] 25

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42+42i, 7+7i) }
[1] 49+49i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42, as.double(NA), 7, na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42, as.double(NA), 7, na.rm=TRUE) }
[1] 49

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42, as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42, as.double(NA), na.rm=TRUE) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42L, as.integer(NA), 7L, na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42L, as.integer(NA), 7L, na.rm=TRUE) }
[1] 49

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42L, as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(42L, as.integer(NA), na.rm=TRUE) }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.character(NA), as.character(NA), na.rm=FALSE) }
Error in sum(as.character(NA), as.character(NA), na.rm = FALSE) :
  invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.character(NA), as.character(NA), na.rm=TRUE) }
Error in sum(as.character(NA), as.character(NA), na.rm = TRUE) :
  invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.character(NA), na.rm=FALSE) }
Error in sum(as.character(NA), na.rm = FALSE) :
  invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.character(NA), na.rm=TRUE) }
Error in sum(as.character(NA), na.rm = TRUE) :
  invalid 'type' (character) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.double(NA), as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.double(NA), as.double(NA), na.rm=TRUE) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.double(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.double(NA), na.rm=TRUE) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.integer(NA), as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.integer(NA), as.integer(NA), na.rm=TRUE) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.integer(NA), na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.integer(NA), na.rm=TRUE) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(as.raw(42), as.raw(7)) }
Error in sum(as.raw(42), as.raw(7)) : invalid 'type' (raw) of argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(c(0, 1, 2, 3)) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(c(0, 1, 2, 3), 4) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(na.rm=FALSE, 0, 1[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ x<-c(FALSE, FALSE); is.double(sum(x)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ x<-c(FALSE, FALSE); is.integer(sum(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSummaryGroupDispatch
#{x<-c(1,2,3);class(x)<-"foo";Summary.foo<-function(x,...){"summary"};max(x)}
[1] "summary"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSummaryGroupDispatch
#{x<-c(1,2,3);class(x)<-"foo";Summary.foo<-function(x,...){"summary"};min(x)}
[1] "summary"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSummaryGroupDispatch
#{x<-c(1,2,3);class(x)<-"foo";min.foo<-function(x,...){"summary"};min(x)}
[1] "summary"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSweep
#{ sweep(array(1:24, dim = 4:2), 1, 1:4) }
, , 1

     [,1] [,2] [,3]
[1,]    0    4    8
[2,]    0    4    8
[3,]    0    4    8
[4,]    0    4    8

, , 2

     [,1] [,2] [,3]
[1,]   12   16   20
[2,]   12   16   20
[3,]   12   16   20
[4,]   12   16   20


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSweep
#{ sweep(array(1:24, dim = 4:2), 1, 5) }
, , 1

     [,1] [,2] [,3]
[1,]   -4    0    4
[2,]   -3    1    5
[3,]   -2    2    6
[4,]   -1    3    7

, , 2

     [,1] [,2] [,3]
[1,]    8   12   16
[2,]    9   13   17
[3,]   10   14   18
[4,]   11   15   19


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ answer<-"no";switch(as.character(answer), yes=, YES=1, no=, NO=2,3) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ test1 <- function(type) { switch(type, mean = 1, median = 2, trimmed = 3) };test1("median")}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ test1 <- function(type) { switch(type, mean = mean(c(1,2,3,4)), median = 2, trimmed = 3) };test1("mean")}
[1] 2.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ u <- "uiui" ; switch(u, "iuiu" = "ieps", "uiui" = "miep") }
[1] "miep"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ x <- "<"; switch(x, "<=" =, "<" =, ">" = TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ x <- "<"; switch(x, "<=" =, "<" =, ">" =, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ x <- "<"; v <- switch(x, "<=" =, "<" =, ">" = TRUE, FALSE); v }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{switch(3,1,2,3)}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{switch(4,1,2,3)}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysCall
#{ f <- function() sys.call() ; f() }
f()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysCall
#{ f <- function() sys.call() ; g <- function() f() ; h <- function() g() ; h() }
f()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysCall
#{ f <- function() sys.call(-1) ; g <- function() f() ; h <- function() g() ; h() }
g()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysCall
#{ f <- function() sys.call(-2) ; g <- function() f() ; h <- function() g() ; h() }
h()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysCall
#{ f <- function() sys.call(1) ; g <- function() f() ; g() }
g()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysCall
#{ f <- function() sys.call(1) ; g <- function() f() ; h <- function() g() ; h() }
h()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysCall
#{ f <- function() sys.call(2) ; g <- function() f() ; h <- function() g() ; h() }
g()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysCall
#{ f <- function(x) sys.call() ; f(x = 2) }
f(x = 2)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysNFrame
#{ f <- function() sys.nframe() ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysNFrame
#{ f <- function() sys.nframe() ; g <- function() f() ; g() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysNFrame
#{ f <- function() sys.nframe() ; g <- function() f() ; h <- function() g() ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysNFrame
#{ f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=sys.nframe()) g(z) ; h() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysNFrame
#{ f <- function(x=sys.nframe()) x ; g <- function() f() ; h <- function() g() ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysNFrame
#{ sys.nframe() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParent
#{ f <- function() sys.parent() ; f() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParent
#{ f <- function() sys.parent() ; g <- function() f() ; g() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParent
#{ f <- function() sys.parent() ; g <- function() f() ; h <- function() g() ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParent
#{ f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=sys.parent()) g(z) ; h() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParent
#{ f <- function(x=sys.parent()) x ; g <- function() f() ; h <- function() g() ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParent
#{ sys.parent() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParent
#{ u <- function() sys.parent() ; f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=u()) g(z) ; h() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParents
#{ f <- function() sys.parents() ; f() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParents
#{ f <- function() sys.parents() ; g <- function() f() ; g() }
[1] 0 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParents
#{ f <- function() sys.parents() ; g <- function() f() ; h <- function() g() ; h() }
[1] 0 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParents
#{ f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=sys.parents()) g(z) ; h() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParents
#{ f <- function(x=sys.parents()) x ; g <- function() f() ; h <- function() g() ; h() }
[1] 0 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSysParents
#{ sys.parents() }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTable
#{ a<-c("a", "b", "c");  t<-table(a, sample(a)); dimnames(t) }
$a
[1] "a" "b" "c"

[[2]]
[1] "a" "b" "c"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTabulate
#{tabulate(c(-2,0,2,3,3,5))}
[1] 0 1 2 0 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTabulate
#{tabulate(c(-2,0,2,3,3,5), nbins = 3)}
[1] 0 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTabulate
#{tabulate(c(2,3,3,5), nbins = 10)}
 [1] 0 1 2 0 1 0 0 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTabulate
#{tabulate(c(2,3,5))}
[1] 0 1 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTabulate
#{tabulate(factor(letters[1:10]))}
 [1] 1 1 1 1 1 1 1 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTapply
#{ ind <- list(c(1, 2, 2), c("A", "A", "B")) ; tapply(1:3, ind) }
[1] 1 2 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTapply
#{ ind <- list(c(1, 2, 2), c("A", "A", "B")) ; tapply(1:3, ind, sum) }
  A  B
1 1 NA
2 2  3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTapply
#{ n <- 17 ; fac <- factor(rep(1:3, length = n), levels = 1:5) ; tapply(1:n, fac, sum) }
 1  2  3  4  5
51 57 45 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- double() ; dim(m) <- c(0,4) ; t(m) }

[1,]
[2,]
[3,]
[4,]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- matrix(-5000:4999, nrow=100) ; sum(m * t(m)) }
[1] 1666502500

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- matrix(1:49, nrow=7) ; sum(m * t(m)) }
[1] 33369

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- matrix(1:81, nrow=9) ; sum(m * t(m)) }
[1] 145881

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- matrix(c(rep(1:10,100200),100L), nrow=1001) ; sum(m * t(m)) }
[1] 38587000

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(1:3) }
     [,1] [,2] [,3]
[1,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(matrix(1:4, nrow=2)) }
     [,1] [,2]
[1,]    1    2
[2,]    3    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(matrix(1:6, nrow=2)) }
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(t(matrix(1:4, nrow=2))) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(t(matrix(1:6, nrow=2))) }
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(t(t(1:3))) }
     [,1] [,2] [,3]
[1,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ acos() }
Error in acos() : 0 arguments passed to 'acos' which requires 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ acos(0.4) }
[1] 1.159279

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ acos(c(0.3,0.6,0.9)) }
[1] 1.2661037 0.9272952 0.4510268

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ asin() }
Error in asin() : 0 arguments passed to 'asin' which requires 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ asin(0.4) }
[1] 0.4115168

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ asin(c(0.3,0.6,0.9)) }
[1] 0.3046927 0.6435011 1.1197695

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan() }
Error in atan() : 0 arguments passed to 'atan' which requires 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan(0.4) }
[1] 0.3805064

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan(c(0.3,0.6,0.9)) }
[1] 0.2914568 0.5404195 0.7328151

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan2() }
Error in atan2() : argument "y" is missing, with no default

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan2(0.4, 0.8) }
[1] 0.4636476

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan2(0.4, c(0.3,0.6,0.9)) }
[1] 0.9272952 0.5880026 0.4182243

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan2(0.7) }
Error in atan2(0.7) : argument "x" is missing, with no default

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan2(c(0.3,0.6,0.9), 0.4) }
[1] 0.6435011 0.9827937 1.1525720

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ atan2(c(0.3,0.6,0.9), c(0.4, 0.3)) }
[1] 0.6435011 1.1071487 1.1525720

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ cos() }
Error in cos() : 0 arguments passed to 'cos' which requires 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ cos(1.2) }
[1] 0.3623578

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ cos(c(0.3,0.6,0.9)) }
[1] 0.9553365 0.8253356 0.6216100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ exp() }
Error in exp() : 0 arguments passed to 'exp' which requires 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ exp(1) }
[1] 2.718282

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ exp(c(1,2,3)) }
[1]  2.718282  7.389056 20.085537

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ expm1() }
Error in expm1() : 0 arguments passed to 'expm1' which requires 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ expm1(2) }
[1] 6.389056

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ expm1(c(1,2,3)) }
[1]  1.718282  6.389056 19.085537

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ sin() }
Error in sin() : 0 arguments passed to 'sin' which requires 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ sin(1.2) }
[1] 0.9320391

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ sin(c(0.3,0.6,0.9)) }
[1] 0.2955202 0.5646425 0.7833269

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ tan() }
Error in tan() : 0 arguments passed to 'tan' which requires 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ tan(1.2) }
[1] 2.572152

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTrigExp
#{ tan(c(0.3,0.6,0.9)) }
[1] 0.3093362 0.6841368 1.2601582

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ f <- function(...) typeof(...); f(1)}
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ f <- function(...) typeof(...); f(1, 2)}
Error in typeof(...) : unused argument (2)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ f <- function(...) typeof(...); f(1, 2, 3)}
Error in typeof(...) : unused arguments (2, 3)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ f <- function(...) typeof(...); f(1, 2, 3, 4)}
Error in typeof(...) : unused arguments (2, 3, 4)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ length(typeof(NULL)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof("hi") }
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof("test") }
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(1) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(1:3) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(1L) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(NULL) }
[1] "NULL"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(TRUE) }
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(c(1, 2, 3)) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(c(1L, 2L, 3L)) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(c(TRUE, TRUE, FALSE)) }
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(function(){}) }
[1] "closure"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(length(typeof(NULL))) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(sum) }
[1] "builtin"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(typeof(NULL)) }
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ x<-data.frame(c("a", "b", "a")); typeof(x) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ x<-factor(c("a", "b", "a")); typeof(x) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(a=list(b=list("1"))))) }
[1] "a.b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(a=list(b=list("1", "2"))))) }
[1] "a.b1" "a.b2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(a=list(list("1"))))) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(a=list(list("1","2"))))) }
[1] "a1" "a2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(a=list(list(c="1"))))) }
[1] "a.c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(a=list(list(c="1", d="2"))))) }
[1] "a.c" "a.d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(list(b=list("1"))))) }
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(list(list("1"))))) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ names(unlist(list(list(list(c="1"))))) }
[1] "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list("hello", "hi")) }
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list()) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(1+1i, c(7+7i,42+42i))) }
[1]  1+ 1i  7+ 7i 42+42i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(1+1i, c(7,42))) }
[1]  1+1i  7+0i 42+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(1+1i, list(7+7i,42+42i)), recursive=FALSE) }
[[1]]
[1] 1+1i

[[2]]
[1] 7+7i

[[3]]
[1] 42+42i


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(1+1i, list(7,42)), recursive=FALSE) }
[[1]]
[1] 1+1i

[[2]]
[1] 7

[[3]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a="hello", b="hi")) }
      a       b
"hello"    "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=1, c(2,3))) }
a
1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=1, c(2,3), 4)) }
a
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=1, c(2,3), d=4)) }
a     d
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=1, c(b=2,c=3))) }
a b c
1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=1,b=2, c=list(d=3,e=list(f=7))), recursive=TRUE) }
    a     b   c.d c.e.f
    1     2     3     7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=1,b=2, c=list(d=3,list(f=7)))) }
  a   b c.d c.f
  1   2   3   7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=list("-1", "0", b=list("1")))) }
  a1   a2  a.b
"-1"  "0"  "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=list("0", b=list("1")))) }
  a a.b
"0" "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=list("0", b=list("1"), "2"))) }
 a1 a.b  a3
"0" "1" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=list("0", list("1")))) }
 a1  a2
"0" "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=list("0", list(b=list("1"))))) }
  a a.b
"0" "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=list(b=list("1")))) }
a.b
"1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=list(b=list("1"), "2"))) }
a.b   a
"1" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list(a=list(b=list("1"), "2", "3"))) }
a.b  a2  a3
"1" "2" "3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(1,z=list(1,b=22,3)) ; unlist(x, recursive=FALSE) }
[[1]]
[1] 1

$z1
[1] 1

$z.b
[1] 22

$z3
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(1,z=list(1,b=22,3)) ; unlist(x, recursive=FALSE, use.names=FALSE) }
[[1]]
[1] 1

[[2]]
[1] 1

[[3]]
[1] 22

[[4]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=1,b=2:3,list(x=FALSE)) ; unlist(x, recursive=FALSE) }
$a
[1] 1

$b1
[1] 2

$b2
[1] 3

$x
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=1,b=c(x=2, 3),list(x=FALSE)) ; unlist(x, recursive=FALSE) }
$a
[1] 1

$b.x
[1] 2

$b2
[1] 3

$x
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=1,b=c(x=2, z=3),list(x=FALSE)) ; unlist(x, recursive=FALSE) }
$a
[1] 1

$b.x
[1] 2

$b.z
[1] 3

$x
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=list("1","2",b=c("3", "4"),"5")) ; unlist(x) }
  a1   a2 a.b1 a.b2   a5
 "1"  "2"  "3"  "4"  "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=list("1","2",b=list("3"))) ; unlist(x) }
 a1  a2 a.b
"1" "2" "3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=list("1","2",b=list("3", "4"))) ; unlist(x) }
  a1   a2 a.b1 a.b2
 "1"  "2"  "3"  "4"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=list("1","2",b=list("3", "4"),"5")) ; unlist(x) }
  a1   a2 a.b1 a.b2   a5
 "1"  "2"  "3"  "4"  "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=list("1","2",b=list("3", list("10"), "4"),"5")) ; unlist(x) }
  a1   a2 a.b1 a.b2 a.b3   a6
 "1"  "2"  "3" "10"  "4"  "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=list("1","2",b=list("3", list("10", "11"), "4"),"5")) ; unlist(x) }
  a1   a2 a.b1 a.b2 a.b3 a.b4   a7
 "1"  "2"  "3" "10" "11"  "4"  "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(a=list("1","2",list("3", "4"),"5")) ; unlist(x) }
 a1  a2  a3  a4  a5
"1" "2" "3" "4" "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ x <- list(list("1","2",b="3","4")) ; unlist(x) }
          b
"1" "2" "3" "4"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ y<-c(2, 3); names(y)<-c("z", NA); x <- list(a=1,b=y,list(x=FALSE)) ; unlist(x, recursive=FALSE) }
$a
[1] 1

$b.z
[1] 2

$b.NA
[1] 3

$x
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlistIgnore
#{ x <- list("a", c("b", "c"), list("d", list("e"))) ; unlist(x) }
[1] "a" "b" "c" "d" "e"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlistIgnore
#{ x <- list(1,list(2,3),4) ; z <- list(x,x) ; u <- list(z,z) ; u[[c(2,2,3)]] <- 6 ; unlist(u) }
 [1] 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlistIgnore
#{ x <- list(NULL, list("d", list(), character())) ; unlist(x) }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlistIgnore
#{ x <- list(a=list("1","2",b="3","4")) ; unlist(x) }
 a1  a2 a.b  a4
"1" "2" "3" "4"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlistIgnore
#{ x <- list(a=list("1",FALSE,b=list(2:4))) ; unlist(x) }
     a1      a2    a.b1    a.b2    a.b3
    "1" "FALSE"     "2"     "3"     "4"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlistIgnore
#{ x <- list(a=list(1,FALSE,b=list(2:4))) ; unlist(x) }
  a1   a2 a.b1 a.b2 a.b3
   1    0    2    3    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x <- function() { }; class(x); class(x)<-"abc"; class(x); class(x)<-NULL; class(x) }
[1] "function"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x <- function() { }; class(x); class(x)<-c("abc", "xyz"); class(x); class(x)<-NULL; class(x) }
[1] "function"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x <- new.env(); class(x); class(x)<-"abc"; class(x); class(x)<-NULL; class(x) }
[1] "environment"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x <- new.env(); class(x); class(x)<-c("abc", "xyz"); class(x); class(x)<-NULL; class(x) }
[1] "environment"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"foo"; class(x) }
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"foo"; oldClass(x) }
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"integer"; class(x) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"integer"; class(x)<-"integer"; class(x) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"integer"; class(x)<-"integer"; oldClass(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"integer"; oldClass(x) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x=1;class(x)<-"character"; x}
[1] "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-"abc";class(x)<-"a";class(x)<-"character";x;}
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1; class(x)<-"logical"; x;  class(x)<-c(1,2,3); x; class(x)<-NULL; x;}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;attr(x,"class")<-"b";x;}
[1] 1
attr(,"class")
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;attr(x,"class")<-c("a","b");attr(x,"class")<-"numeric";x}
[1] 1
attr(,"class")
[1] "numeric"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;attr(x,"class")<-c("a","b");x;}
[1] 1
attr(,"class")
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-"a";class(x)<-"numeric";x;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-"a";x}
[1] 1
attr(,"class")
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(1,2,3); x;}
[1] 1
attr(,"class")
[1] "1" "2" "3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(1,2,3);class(x)<-NULL; x;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(1,2,3);class(x)<-c(); x;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(1,2,3);y<-unclass(x);x;y}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(2+3i,4+5i); x;}
[1] 1
attr(,"class")
[1] "2+3i" "4+5i"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(TRUE,FALSE); x;}
[1] 1
attr(,"class")
[1] "TRUE"  "FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;y<-"b";attr(x,"class")<-y;x;}
[1] 1
attr(,"class")
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-2+3i;class(x)<-"a";class(x)<-"complex";x;}
[1] 2+3i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-TRUE;class(x)<-"a";class(x)<-"logical";x;}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2);class(x)<-"a";class(x)<-"list";x;}
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x);dim(x)<-c(2,2,1);class(x)}
[1] "array"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x)<-"array"; x; class(x)<-"matrix"; x;}
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x)}
[1] "matrix"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2,3,4); dim(x)<-c(2,2,1); class(x)}
[1] "array"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(2+3i,4+5i);class(x)<-"a";class(x)<-"complex";x;}
[1] 2+3i 4+5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x=1; class(x)<-"first"; x;}
[1] 1
attr(,"class")
[1] "first"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ;  attr(m, "foo")<-"foo"; diag(m) <- c(1,2); attributes(m) }
$dim
[1] 3 2

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ;  attr(m, "foo")<-"foo"; diag(m) <- c(1.1,2.2); attributes(m) }
$dim
[1] 3 2

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1,2) ; m }
     [,1] [,2]
[1,]    1    4
[2,]    2    2
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1,2.2); m }
     [,1] [,2]
[1,]    1  4.0
[2,]    2  2.2
[3,]    3  6.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1.1,2); m }
     [,1] [,2]
[1,]  1.1    4
[2,]  2.0    2
[3,]  3.0    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1.1,2.2); m }
     [,1] [,2]
[1,]  1.1  4.0
[2,]  2.0  2.2
[3,]  3.0  6.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; f <- function() { diag(m) <- c(100,200) } ; f() ; m }
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3); y<-m+42; diag(y) <- c(1,2); y }
     [,1] [,2]
[1,]    1   46
[2,]   44    2
[3,]   45   48

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ x <- (m <- matrix(1:6, nrow=3)) ; diag(m) <- c(1,2) ; x }
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- 1:2 ; names(x) <- c("hello"); names(x) }
[1] "hello" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- 1:2 ; names(x) <- c("hello", "hi"); names(x) } 
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- 1:2; names(x) <- c("A", "B") ; abs(x) }
A B
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- 1:2; names(x) <- c("hello", "hi") ; x }
hello    hi
    1     2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,2) ; names(x) <- c("hello"); names(x) }
[1] "hello" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,2) ; names(x) <- c("hello", "hi"); names(x) } 
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,2); names(x) <- c("hello", "hi") ; x }
hello    hi
    1     2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,9); names(x) <- c("hello","hi") ; is.na(x) }
hello    hi
FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,9); names(x) <- c("hello","hi") ; sqrt(x) }
hello    hi
    1     3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,NA); names(x) <- c("hello","hi") ; cumsum(x) }
hello    hi
    1    NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,NA); names(x) <- c(NA,"hi") ; cumsum(x) }
<NA>   hi
   1   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-7; attr(x, "foo")<-"a"; attr(x, "bar")<-42; attributes(x) }
$foo
[1] "a"

$bar
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c("a", "", "bbb", "", "c"); names(x)<-1:4; x }
    1     2     3     4  <NA>
  "a"    "" "bbb"    ""   "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); attr(x, "names")<-c("a", "b"); names(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); attr(x, "names")<-c("a", "b"); x }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); names(x)<-42; x }
  42 <NA>
   1    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); names(x)<-c("a", "b"); attr(x, "names")<-NULL; x }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); names(x)<-c(TRUE, FALSE); x }
 TRUE FALSE
    1     2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1,2); attr(x, "names") <- 42:45; x }
Error in attr(x, "names") <- 42:45 :
  'names' attribute [4] must be the same length as the vector [2]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1,2); names(x) <- 42:44; x }
Error in names(x) <- 42:44 :
  'names' attribute [3] must be the same length as the vector [2]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-list(1,2); names(x)<-42:43; x }
$`42`
[1] 1

$`43`
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-list(1,2); names(x)<-c("a","$"); x }
$a
[1] 1

$`$`
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-list(1,2); names(x)<-c("a","b"); x }
$a
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-list(1,2); names(x)<-c("a",NA); x }
$a
[1] 1

$<NA>
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ z <- c(a=1, b=2) ; names(z) <- NULL ; z }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateStorageMode
#{ x <- c(1L, 2L); dim(x)<-c(1,2); storage.mode(x) <- "double"; x}
     [,1] [,2]
[1,]    1    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateStorageMode
#{ x <- c(1L, 2L); storage.mode(x) <- "double"}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateStorageMode
#{ x <- c(1L, 2L); storage.mode(x) <- "not.double"}
Error in storage.mode(x) <- "not.double" : invalid value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpperTriangular
#{ m <- matrix(1:6, nrow=2) ;  upper.tri(m, diag=FALSE) }
      [,1]  [,2] [,3]
[1,] FALSE  TRUE TRUE
[2,] FALSE FALSE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpperTriangular
#{ m <- matrix(1:6, nrow=2) ;  upper.tri(m, diag=TRUE) }
      [,1] [,2] [,3]
[1,]  TRUE TRUE TRUE
[2,] FALSE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpperTriangular
#{ upper.tri(1:3, diag=FALSE) }
      [,1]
[1,] FALSE
[2,] FALSE
[3,] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpperTriangular
#{ upper.tri(1:3, diag=TRUE) }
      [,1]
[1,]  TRUE
[2,] FALSE
[3,] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodEnclFuncArgs
#{f <- function(x,y,z){ UseMethod("f"); }; f.second <- function(x,y,z){cat("f second",x,y,z)}; obj <-1; attr(obj,"class") <- "second"; arg2=2; arg3=3; f(obj,arg2,arg3);}
f second 1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodNested
#{f <- function(x){g<- function(x){ h<- function(x){ UseMethod("f");}; h(x)}; g(x) }; f.second <- function(x){cat("f second",x);}; obj <-1; attr(obj,"class")  <- "second"; f(obj);}
f second 1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodOneArg
#{f <- function(x){ UseMethod("f"); };f.first <- function(x){cat("f first",x)}; f.second <- function(x){cat("f second",x)}; obj <-1; attr(obj,"class")  <- "first"; f(obj); attr(obj,"class")  <- "second";}
f first 1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodReturn
#{f <- function(x){ UseMethod("f");cat("This should not be executed"); }; f.second <- function(x){cat("f second",x);}; obj <-1; attr(obj,"class")  <- "second"; f(obj);}
f second 1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector("integer") }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector("numeric") }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector("numeric", length=4) }
[1] 0 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector(length=3) }
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhich
#{ which(NA) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhich
#{ which(TRUE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhich
#{ which(c(TRUE, FALSE, NA, TRUE)) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhich
#{ which(logical()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(1,2,3,4,5)) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(1,2,3,4,5))}
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(1:10000))}
[1] 10000

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(1:5))}
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(2,4))}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(2L,4L,3L))}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(5,5,5,5,5)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(5:1))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(TRUE, FALSE))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMax
#{ which.max(c(TRUE, TRUE))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(1,2,3,4,5)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(1,2,3,4,5))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(1:10000))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(1:5))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(2,4))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(2L,4L,3L))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(5,5,5,5,5)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(5:1))}
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(TRUE, FALSE))}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhichMin
#{ which.min(c(TRUE, TRUE))}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; dim(x)<-c(2,2); y<-21:28; x > y }
Error: dims [product 4] do not match the length of object [8]

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; attr(x, "foo")<-"foo"; attributes(x < 7) }
$names
[1] "101" "102" "103" "104"


##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; attr(x, "foo")<-"foo"; y<-21:24; names(y)<-121:124; attributes(x < y) }
$names
[1] "101" "102" "103" "104"


##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; x < 7 }
 101  102  103  104
TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:24; names(y)<-121:124; x < y }
 101  102  103  104
TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; attributes(x > y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128;  attributes(y > x) }
$names
[1] "121" "122" "123" "124" "125" "126" "127" "128"


##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128; x < y }
 121  122  123  124  125  126  127  128
TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; y<-21:24; names(y)<-121:124; attributes(x > y) }
$names
[1] "121" "122" "123" "124"


##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "+1+1i" > 1+1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "-1+1i" > "1+1i" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "-1+1i" > 1+1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "1+1.100i" == 1+1.100i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "1+1.1i" == 1+1.1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "1+2i" > 1+1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 0/0 <= 2 }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1+0i == 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1+1i == 1 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1+1i == TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1<=0L }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1==1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1==NULL }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1L<=1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1L==1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 2==1 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 2L==NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 2L==TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 2L==as.double(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ FALSE<=TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ FALSE<TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ NA==2L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE!=FALSE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE==1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE==1L }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE==FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE>=FALSE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE>FALSE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ as.double(NA)==2L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ x<-1+1i; x > FALSE }
Error in x > FALSE : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ x<-2; f<-function(z=x) { if (z<=x) {z} else {x} } ; f(1.4)}
[1] 1.4

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(0L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(2L,TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(FALSE,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2L) ; f(1,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2L) ; f(1L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1L,2) ; f(1,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1L,2) ; f(1L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1L,2L) ; f(1,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1L,2L) ; f(1L,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(TRUE,2L) ; f(0L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(TRUE,2L) ; f(FALSE,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(TRUE,FALSE) ; f(1L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(TRUE,FALSE) ; f(TRUE,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i != 1+1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i != 1-1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i != 2+1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i == 1+1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i == 1-1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i == 2+1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1 ; b <- 1L[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1 ; b <- a[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1 ; b <- a[2] ; b > a }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L ; b <- 1[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L ; b <- TRUE[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L ; b <- a[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L ; b <- a[2] ; b > a }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L[2] ; b <- 1 ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L[2] ; b <- 1 ; b > a }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L[2] ; b <- TRUE ; a != b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1[2] ; b <- 1L ; b > a }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- TRUE ; b <- 1L[2] ; a > b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- TRUE[2] ; b <- 1L ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2, 1L[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2, 1[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L, 1L[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L, 1[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L[2], 1) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L[2], 1L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2[2], 1) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2[2], 1L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(1) ; b <- as.raw(2) ; a < b }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(1) ; b <- as.raw(2) ; a == b }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(1) ; b <- as.raw(2) ; a > b }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(1) ; b <- as.raw(200) ; a < b }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(200) ; b <- as.raw(255) ; a < b }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(10) <= as.raw(15) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(10) >= as.raw(15) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) != as.raw(10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) != as.raw(15) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) < as.raw(10) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) <= as.raw(10) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) == as.raw(10) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) == as.raw(15) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) > as.raw(10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) >= as.raw(10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" != "hello"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" < "hi"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" <= "hi"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" == "hello"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" > "hi"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" >= "hi"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" != "hello"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" < "hello"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" <= "hello"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" == "hello"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" > "hello"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" >= "hello"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#{ "2.0" == 2 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#{ "a" <= "b" }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#{ "a" > "b" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ "hi" > c("hello", "hi")  }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ "hi" > c("hello", NA)  }
[1] TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ (1+2i)[0] == c(2+3i, 4+1i) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 0/0 == c(1,2,3,4) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 1:3 < NA }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 1:3 < integer() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 1:3 == TRUE }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 2 != c(1,2,NA,4) }
[1]  TRUE FALSE    NA  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 2 == c(1,2,NA,4) }
[1] FALSE  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 2L > c(1L,NA,2L) }
[1]  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 3 != 1:2 }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ NA > 1:3 }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ NA > c("hello", "hi") }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ TRUE == 1:3 }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ as.raw(c(1,2)) < as.raw(c(2,1,4)) }
[1]  TRUE FALSE  TRUE
Warning message:
In as.raw(c(1, 2)) < as.raw(c(2, 1, 4)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ as.raw(c(2,1,4)) < as.raw(c(1,2)) }
[1] FALSE  TRUE FALSE
Warning message:
In as.raw(c(2, 1, 4)) < as.raw(c(1, 2)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ as.raw(c(2,1,4)) < raw() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ b <- 1:3 ; z <- FALSE ; b[2==2] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("cau", "ahoj") != c("hi","hello","bye") }
[1] TRUE TRUE TRUE
Warning message:
In c("cau", "ahoj") != c("hi", "hello", "bye") :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", "hi") < NA }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", "hi") == character() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", NA) < c("hi", NA) }
[1] TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", NA) > c(NA, "hi") }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", NA) >= "hi" }
[1] FALSE    NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hi","hello","bye") > c("cau", "ahoj") }
[1]  TRUE  TRUE FALSE
Warning message:
In c("hi", "hello", "bye") > c("cau", "ahoj") :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(0/0+1i,2+1i) == c(1+1i,2+1i) }
[1]   NA TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1+1i,2+1i) == c(0/0+1i,2+1i) }
[1]   NA TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1+1i,2+2i) == c(2+1i,1+2i,1+1i) }
[1] FALSE FALSE  TRUE
Warning message:
In c(1 + (0+1i), 2 + (0+2i)) == c(2 + (0+1i), 1 + (0+2i), 1 + (0+1i)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1+2i, 3+4i) == (1+2i)[0] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2) < c(2,1,4) }
[1]  TRUE FALSE  TRUE
Warning message:
In c(1, 2) < c(2, 1, 4) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2,3) < double() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2,3,4) != c(1,NA) }
[1] FALSE    NA  TRUE    NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2,NA,4) != 2 }
[1]  TRUE FALSE    NA  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2,NA,4) == 2 }
[1] FALSE  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1:3,4,5)==1:5 }
[1] TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1L, NA) > c(NA, 2L) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1L,2L) < c(2L,1L,4L) }
[1]  TRUE FALSE  TRUE
Warning message:
In c(1L, 2L) < c(2L, 1L, 4L) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1L,NA,2L) < 2L }
[1]  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(2+1i,1+2i,1+1i) == c(1+1i, 2+2i) }
[1] FALSE FALSE  TRUE
Warning message:
In c(2 + (0+1i), 1 + (0+2i), 1 + (0+1i)) == c(1 + (0+1i), 2 + (0+2i)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(2,1,4) < c(1,2) }
[1] FALSE  TRUE FALSE
Warning message:
In c(2, 1, 4) < c(1, 2) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(2L,1L,4L) < c(1L,2L) }
[1] FALSE  TRUE FALSE
Warning message:
In c(2L, 1L, 4L) < c(1L, 2L) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(TRUE, NA) > c(NA, FALSE) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(TRUE,FALSE) < logical() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(TRUE,FALSE,FALSE) < c(TRUE,TRUE) }
[1] FALSE  TRUE  TRUE
Warning message:
In c(TRUE, FALSE, FALSE) < c(TRUE, TRUE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(TRUE,TRUE) == c(TRUE,FALSE,FALSE) }
[1]  TRUE FALSE FALSE
Warning message:
In c(TRUE, TRUE) == c(TRUE, FALSE, FALSE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ character() > c("hello", "hi") }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ double() == c(1,2,3) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ integer() < 1:3 }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ integer() == 2L }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ logical() == c(FALSE, FALSE) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ m <- matrix(nrow=2, ncol=2, 1:4) ; m == 1:16 }
Error: dims [product 4] do not match the length of object [16]

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ raw() < as.raw(c(2,1,4)) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-1+1i; y<-2+2i; x < y }
Error in x < y : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-1+1i; y<-2+2i; x <= y }
Error in x <= y : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-1+1i; y<-2+2i; x > y }
Error in x > y : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-1+1i; y<-2+2i; x >= y }
Error in x >= y : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-5;y<-4:6; x<=y }
[1] FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c("0","1");y<-c("a","-1"); x<y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c("0","1","-1", "2");y<-c("a","-1", "0", "2"); x<y }
[1]  TRUE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1,2,3,4);y<-2.5; x<=y }
[1]  TRUE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1,2,3,4);y<-c(10,2); x<=y }
[1]  TRUE  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1,2,3,4);y<-c(2.5+NA,2.5); x<=y }
[1]    NA  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10,1,3);y<-4:6; x<=y }
[1] FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10,3);y<-c(10,2); x<=y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10,3);y<-c(10L,2L); x<=y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10L,3L);y<-c(10,2); x<=y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10L,3L);y<-c(10L,2L); x<=y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1L,2L,3L,4L);y<-1.5; x<=y }
[1]  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1L,2L,3L,4L);y<-c(2.5+NA,2.5); x<=y }
[1]    NA  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1L,2L,3L,4L);y<-c(TRUE,FALSE); x<=y }
[1]  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(FALSE,TRUE);y<-c(TRUE,FALSE); x<y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(FALSE,TRUE, FALSE, FALSE);y<-c(TRUE,FALSE); x<y }
[1]  TRUE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-c(7,42); y<-as.data.frame(x, row.names=NULL, nm="x"); y[[1]] }
[1]  7 42

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=c(1,2), b=c(11,12)); x[1,2] }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=c(1,2), b=c(11,12)); x[[1,2]] }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=c(1,2), b=c(11,12)); x[[c(1,2),2]] }
Error in col[[i, exact = exact]] :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=c(1,2), b=c(11,12)); x[c(1,2),2] }
[1] 11 12

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=c(1,2), b=c(3,4)); attr(x, "foo")<-"foo"; attributes(x[1, c(1,2)]) }
$names
[1] "a" "b"

$row.names
[1] 1

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=c(1,2), b=c(3,4)); attr(x, "foo")<-"foo"; x[1, c(1,2)] }
  a b
1 1 3

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=c(1,2), b=c(3,4)); x[,"b"] }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=list(1,2), b=list(11,12)); x[1,2] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-data.frame(a=list(1,2), b=list(11,12)); x[[1,2]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-list(7,42); class(x)<-"data.frame"; row.names(x)<-"r1"; x[[1]] }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.character(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.character(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.complex(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.complex(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.double(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.double(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.logical(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.logical(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.raw(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.raw(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names="r1", nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] "r1"

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names=c("r1", "r2"), nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] "r1" "r2"

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names=c("r1", "r2", "r3"), nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] "r1" "r2" "r3"

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-list(1,2); class(x)<-"data.frame"; row.names(x)<-"r1"; y<-as.data.frame(x, "r2"); attributes(x) }
$class
[1] "data.frame"

$row.names
[1] "r1"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-list(1,2); class(x)<-"data.frame"; row.names(x)<-"r1"; y<-as.data.frame(x, "r2"); attributes(y) }
$class
[1] "data.frame"

$row.names
[1] "r2"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-list(1,2); class(x)<-"data.frame"; row.names(x)<-"r1"; y<-as.data.frame(x, c("r1", "r2")); attributes(y) }
Error in as.data.frame.data.frame(x, c("r1", "r2")) :
  invalid 'row.names', length 2 for a data frame with 1 row

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-matrix(c(1,2,3,4), nrow=2); y<-as.data.frame(x, row.names="r1", optional=FALSE); attributes(y); }
$names
[1] "V1" "V2"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-matrix(c(1,2,3,4), nrow=2); y<-as.data.frame(x, row.names=NULL, optional=FALSE); attributes(y); }
$names
[1] "V1" "V2"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testDataFrame
#{ data.frame(c(1,2)) }
  c.1..2.
1       1
2       2

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testDataFrame
#{ data.frame(c(1,2), c(11,12)) }
  c.1..2. c.11..12.
1       1        11
2       2        12

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testDataFrame
#{ x<-c(7,42); y<-data.frame(x); is.data.frame(y) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ is.data.frame(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ is.data.frame(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(1,2); is.data.frame(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; attr(x, "foo")<-"foo"; class(x)<-NULL;  attributes(x) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; class(x)<-NULL; is.vector(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; is.data.frame(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; is.list(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; is.vector(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-c("foo", "data.frame", "bar"); is.data.frame(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(1,2); is.data.frame(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-"data.frame"; is.data.frame(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-"data.frame"; is.list(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-"data.frame"; is.vector(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-c("foo", "data.frame", "bar"); is.data.frame(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testLapply
#{ x <- c(1, 2, 3); xa <- as.data.frame(x); lapply(xa, function(x) x > 1) }
$x
[1] FALSE  TRUE  TRUE


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testMisc
#{ n = c(2, 3, 5); s = c("aa", "bb", "cc"); df = data.frame(n, s); df[[1]] <- c(22,33,55); df }
   n  s
1 22 aa
2 33 bb
3 55 cc

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testMisc
#{ y<-data.frame(7); as.logical(y) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testMisc
#{ y<-data.frame(c(1,2,3)); as.logical(y) }
Error: (list) object cannot be coerced to type 'logical'

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testMisc
#{ y<-data.frame(c(1,2,3)); length(y) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testMisc
#{ y<-data.frame(integer()); as.logical(y) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{ n = c(2, 3, 5); s = c(TRUE, FALSE, TRUE); df = data.frame(n, s); df }
  n     s
1 2  TRUE
2 3 FALSE
3 5  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{ x<-c(1,2); class(x)<-"data.frame"; row.names(x)<-integer(); x }
NULL
<0 rows> (or 0-length row.names)

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{ x<-c(1,2); y<-data.frame(x); y }
  x
1 1
2 2

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{ x<-c(7,42); y<-data.frame(x); y }
   x
1  7
2 42

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{ x<-data.frame(n=c("2", "3", "5"), s=c("TRUE", "FALSE", "TRUE"), check.names=FALSE, row.names=c("1", "2", "3")); x }
  n     s
1 2  TRUE
2 3 FALSE
3 5  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{ x<-integer(); class(x)<-"data.frame"; x }
data frame with 0 columns and 0 rows

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{x<-c(1,2); class(x)<-"data.frame"; x}
NULL
<0 rows> (or 0-length row.names)

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-NULL; attributes(x) }
$dim
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-NULL; row.names(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-c(7, 42); attributes(x) }
$dim
[1] 2

$dimnames
$dimnames[[1]]
[1] "7"  "42"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-c(7, 42); row.names(x) }
[1] "7"  "42"

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-logical(); attributes(x) }
$dim
[1] 2

$dimnames
$dimnames[[1]]
NULL



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-logical(); row.names(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); class(x)<-"data.frame"; row.names(x) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); class(x)<-"data.frame"; row.names(x)<-"r1"; row.names(x) }
[1] "r1"

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-7; attributes(x) }
$dim
[1] 1 2

$dimnames
$dimnames[[1]]
[1] "7"

$dimnames[[2]]
[1] "2.2" "3.3"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-7; row.names(x) }
[1] "7"

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-NULL; attributes(x) }
$dim
[1] 1 2

$dimnames
$dimnames[[1]]
NULL

$dimnames[[2]]
[1] "2.2" "3.3"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-NULL; row.names(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-logical(); attributes(x) }
$dim
[1] 1 2

$dimnames
$dimnames[[1]]
NULL

$dimnames[[2]]
[1] "2.2" "3.3"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-logical(); row.names(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-7; attributess(x) }
Error in `rownames<-`(x, value) :
  length of 'dimnames' [1] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-7; row.names(x) }
Error in `rownames<-`(x, value) :
  length of 'dimnames' [1] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-c(7, 42); attributes(x) }
$dim
[1] 2 1

$dimnames
$dimnames[[1]]
[1] "7"  "42"

$dimnames[[2]]
[1] "1.1"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-c(7, 42); row.names(x) }
[1] "7"  "42"

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); row.names(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); row.names(x)<-c(7, 42); attributes(x) }
Error in `rownames<-`(x, value) :
  attempt to set 'rownames' on an object with no dimensions

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); row.names(x)<-logical(); attributes(x) }
Error in `rownames<-`(x, value) :
  attempt to set 'rownames' on an object with no dimensions

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-"data.frame"; row.names(z)<-NULL; attributes(z) }
$class
[1] "data.frame"

$row.names
integer(0)


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-"data.frame"; row.names(z)<-c("a", "b"); row.names(z)<-NULL; attributes(z) }
$class
[1] "data.frame"

$row.names
[1] 1 2


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-"data.frame"; row.names(z)<-c("a", "b", "c"); row.names(z)<-NULL; attributes(z) }
$class
[1] "data.frame"

$row.names
[1] 1 2 3


##com.oracle.truffle.r.test.simple.TestSimpleErrorHandling.testError
#{ nonExistentVariable }
Error: object 'nonExistentVariable' not found

##com.oracle.truffle.r.test.simple.TestSimpleErrorHandling.testError
#{ options(error=quote(cat(23,'\n'))) ; v }
Error: object 'v' not found
23

##com.oracle.truffle.r.test.simple.TestSimpleErrorHandling.testError
#{ x <- 2 ; options(error=quote(cat(x,'\n'))) ; v }
Error: object 'v' not found
2

##com.oracle.truffle.r.test.simple.TestSimpleFormulae.testCreation
#{ class(a~b) }
[1] "formula"

##com.oracle.truffle.r.test.simple.TestSimpleFormulae.testCreation
#{ typeof(a~b) }
[1] "language"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testArgs
#{ f<-function(x, row.names = NULL, optional = FALSE, ...) {print(optional); for (i in list(...)) {print(i)} }; f(c(7,42), row.names=NULL, nm="x") }
[1] FALSE
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testArgs
#{ f<-function(x, row.names = NULL, optional = FALSE, ...) {print(optional)}; f(c(7,42), row.names=NULL, nm="x") }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4)  }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(function(x) { x + x }, 10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 10) ; f(is.na,5) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(is.na, 10) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(length, 10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; f(function(x) {TRUE}, 5) ; f(is.na, 4) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(c, 10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(function(x) { 3+4i }, 10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(is.na, 10) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(is.na, 10) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; h <- function(x) { x == x } ; f(h, 3) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) ; f(function(i) {3}, 1) ; f(length,1:3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) ; f(length,1:3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(i) { c(1,2) } ; f(1) ; c <- sum ; f(2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(i) { if (i==2) { assign("c", sum) }; c(1,2) } ; f(1) ; f(2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(i) { if (i==2) { c <- sum }; c(1,2) } ; f(1) ; f(2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; g <- function(x,y) { x + y } ; myapp(f = g, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = g, y = 10, x = 3) ;  myapp(f = g, y = 11, x = 2) }
[1] 13

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = c, y = 10, x = 3) }
[1]  3 10

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = function(x,y) { x - y }, y = 10, x = 3) }
[1] -7

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; myapp(function(x,y) { x + y }, 1, 2) ; myapp(sum, 1, 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitions
#x<-function(){1};x
function(){1}

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitions
#{ "%plus%" <- function(a,b) a+b ; 3 %plus% 4 }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitions
#{ "-"(1) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitions
#{ 'my<-' <- function(x, value) { attr(x, "myattr") <- value ; x } ; z <- 1; my(z) <- "hello" ; z }
[1] 1
attr(,"myattr")
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f <- sum ; f(1:10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(1,2,c=4,d=4) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(1,2,d=8,c=1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(1,d=8,2,c=1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(d=8,1,2,c=1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(d=8,c=1,2,3) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a=1,b=2,c=3) {TRUE} ; f(,,) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a=10,b,c=20,d=20) {c} ; f(4,3,5,1) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(x=2) {x} ; f() } 
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(z, x=if (z) 2 else 3) {x} ; f(FALSE) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ x <- function(y) { sum(y) } ; f <- function() { x <- 1 ; x(1:10) } ; f() }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ x<-1 ; f<-function(x=x) { x } ; f(x=x) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ x<-1 ; z<-TRUE ; f<-function(y=x,a=z,b) { if (z) {y} else {z}} ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ x<-1 ; z<-TRUE ; f<-function(y=x,a=z,b) { if (z) {y} else {z}} ; f(b=2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{f<-function(a,b,c=2,d) {c} ; g <- function() f(d=8,c=1,2,3) ; g() ; g() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ f<-function() {z} ; z<-2 ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ f<-function(x){g<-function(x) {x} ; g(x) } ; f(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(){x} ; x<-2 ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(x){a<-1; b<-2; g<-function(x) {b<-3;x} ; g(b) } ; f(TRUE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(x){a<-1;b<-2;x} ; f(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(x){x} ; f(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(z) { if (z) { x<-2 } ; x } ; x<-3 ; f(FALSE) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; g<-function() { x<-12 ; f<-function(z) { if (z) { x<-2 } ; x } ; x<-3 ; f(FALSE) } ; g() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-function() { z<-211 ; function(a) { if (a) { z } else { 200 } } } ; f<-x() ; z<-1000 ; f(TRUE) }
[1] 211

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-function(z){z} ; x(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ asdf <- function(x,...) UseMethod("asdf",x); asdf.numeric <- function(x, ...) print(paste("num:", x, ...)); asdf(1) }
[1] "num: 1"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ dummy <- 2 ; dummy() }
Error: could not find function "dummy"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function() { dummy <- 2 ; g <- function() { dummy() } ; g() } ; f() }
Error in g() : could not find function "dummy"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function() { dummy() } ; dummy <- 2 ; f() }
Error in f() : could not find function "dummy"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function() { dummy() } ; f() }
Error in f() : could not find function "dummy"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function() { if (FALSE) { dummy <- 2 } ; dummy() } ; f() }
Error in f() : could not find function "dummy"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function() { if (FALSE) { dummy <- 2 } ; g <- function() { dummy() } ; g() } ; f() }
Error in g() : could not find function "dummy"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) cat(..., "\n") ; f("Hello", "world") }
Hello world

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) g(...); g <- function(a,b) { print(a); print(b) }; f(1,2); f(a=3,b=4); f(a=5,b=6) }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { ..1 ; x <<- 10 ; ..1 } ; x <- 1 ; f(x) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { ..1 ; x <<- 10 ; ..2 } ; x <- 1 ; f(100,x) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { ..1 <- 2 ; ..1 } ; f(z = 1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { ..1 <- 2 ; get("..1") } ; f(1,2,3,4) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { ..1 } ;  f() }
Error in f() : 'nthcdr' needs a list to CDR down

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { ..1 } ;  f(10) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { ..2 ; x <<- 10 ; ..1 } ; x <- 1 ; f(x,100) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { ..3 } ; f(1,2) }
Error in f(1, 2) : the ... list does not contain 3 elements

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { g <- function() { ..1 } ; g() } ; f(a=2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { g(...) } ;  g <- function(b=2) { b } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { get("..1") } ; f(1,2,3,4) }
Error in get("..1") : object '..1' not found

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { x <<- 10 ; ..1 } ; x <- 1 ; f(x) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...,d) { ..1 + ..2 } ; f(1,2,d=4) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...,d) { ..1 + ..2 } ; f(1,d=4,2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, b) { a * b } ; g <- function(...) { f(...,...) } ; g(3) }
[1] 9

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, b) { a + b } ; g <- function(...) { f(a=1, ...) } ; g(a=2) }
Error in f(a = 1, ...) :
  formal argument "a" matched by multiple actual arguments

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, b) { a - b } ; g <- function(...) { f(1, ...) } ; g(a = 2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, b) { a - b } ; g <- function(...) { f(1, ...) } ; g(b = 2) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, barg) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(b=2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, barg, ...) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(b=2,3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, barg, bextra) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(b=2,3) }
Error in f(a = 1, ...) : argument 2 matches multiple formal arguments

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(1,2,3) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(be=2,bex=3, 3) }
Error in f(a = 1, ...) :
  formal argument "bextra" matched by multiple actual arguments

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(be=2,du=3, 3) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a=1,...) a ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(x) { ..1 } ;  f(10) }
Error in f(10) : ..1 used in an incorrect context, no ... to look in

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f.numeric<-function(x, row.names = NULL, optional = FALSE, ..., nm = NULL) { print(optional); print(nm) }; f<-function(x, row.names = NULL, optional = FALSE, ...) { UseMethod("f") }; f(c(1,2), row.names = "r1", nm="bar") }
[1] FALSE
[1] "bar"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f<-function(...) print(attributes(list(...))); f(a=7) }
$names
[1] "a"


##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f<-function(...) print(attributes(list(...))); f(a=7, b=42) }
$names
[1] "a" "b"


##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f<-function(x, ...) { sum(x, ...) }; f(7) }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f<-function(x, y) { print(missing(y)); } ; f(42) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ fn1 <- function (a, b) a + b; fn2 <- function (a, b, ...) fn1(a, b, ...); fn2(1, 1) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(...) { 0 } ; f <- function(...) { g(...) ; x <<- 10 ; ..1 } ; x <- 1 ; f(x) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(...) { c(...,...) } ; g(3) }
[1] 3 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(a,b) { a + b } ; f <- function(...) { g(...) }  ; f(1,2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(a,b,aa,bb) { a ; x <<- 10 ; aa ; c(a, aa) } ; f <- function(...) {  g(..., ...) } ; x <- 1; y <- 2; f(x, y) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(a,b,x) { a + b * x } ; f <- function(...) { g(...,x=4) }  ; f(b=1,a=2) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(a,b,x) { a + b * x } ; f <- function(...) { g(x=4, ...) }  ; f(b=1,a=2) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(a,b,x) { a + b * x } ; f <- function(...) { g(x=4, ..., 10) }  ; f(b=1) }
[1] 14

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(x, ...) c(x, ...); g(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(x, ...) f(x,...); f <-function(x,...) c(x, ...); g(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g<-function(nm, x) { print(c(nm, x)); } ; f<-function(x, ...) { g(x, ...) }; f(x=1, nm=42) }
[1] 42  1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ h<-function(x,...) f(x,...); f<-function(x, ...) { sum(x, ...) }; h(7) }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ x<-7; y<-42; f<-function(...) { as.list(substitute(g(...))) }; f(x,y) }
[[1]]
g

[[2]]
x

[[3]]
y


##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ x<-7; y<-42; f<-function(...) { substitute(g(...)) }; is.language(f(x,y)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ x<-7; y<-42; f<-function(...) { substitute(g(...)) }; typeof(f(x,y)) }
[1] "language"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testFunctionPrinting
#{ foo <- function(x) x; foo }
function(x) x

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testFunctionPrinting
#{ sum }
function (..., na.rm = FALSE)  .Primitive("sum")

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testInvokeIndirectly
#{ f <- function(x) x+1 ; g <- function(x) x+2 ; funs <- list(f,g) ; funs[[1]](1) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testInvokeIndirectly
#{ f <- function(x) x+1 ; g <- function(x) x+2 ; funs <- list(f,g) ; funs[[2]](1) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testInvokeIndirectly
#{ f <- function(x) x+1 ; g <- function(x) x+2 ; h <- function(v) if (v==1) f else g ; h(1)(1) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testInvokeIndirectly
#{ f <- function(x) x+1 ; g <- function(x) x+2 ; h <- function(v) if (v==1) f else g ; h(2)(1) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testInvokeIndirectly
#{ f <- function(x) x+1 ; g <- function(x) x+2 ; v <- 1 ; (if (v==1) f else g)(1) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testInvokeIndirectly
#{ f <- function(x) x+1 ; g <- function(x) x+2 ; v <- 2 ; (if (v==1) f else g)(1) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testIsPrimitive
#{ is.primitive(is.function) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testIsPrimitive
#{ is.primitive(is.primitive) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ f <- function(a) { a } ; f(1,2) }
Error in f(1, 2) : unused argument (2)

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ f <- function(hello, hi) { hello + hi } ; f(h = 1) }
Error in f(h = 1) : argument 1 matches multiple formal arguments

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ f <- function(hello, hi) { hello + hi } ; f(hello = 1, bye = 3) }
Error in f(hello = 1, bye = 3) : unused argument (bye = 3)

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ f<-function(..., val=1) { c(list(...), val) }; f(v=7, 2) }
$v
[1] 7

[[2]]
[1] 2

[[3]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ f<-function(er=1, ..., val=1) { c(list(...), val, er) }; f(v=7, 2, e=8) }
$v
[1] 7

[[2]]
[1] 2

[[3]]
[1] 1

[[4]]
[1] 8


##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ x<-function(foo,bar){foo*bar} ; x(f=10,2) }
[1] 20

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ x<-function(foo,bar){foo*bar} ; x(fo=10, bar=2) }
[1] 20

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ f <- function(a) { g <- function(b) { a <<- 3; b } ; g(a) } ; x <- 1 ; f(x) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ f <- function(a) { g <- function(b) { x <<- 2; b } ; g(a) } ; x <- 1 ; f(x) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ f <- function(x = y, y = x) { y } ; f() }
Error in f() :
  promise already under evaluation: recursive default argument reference or earlier problems?

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ f <- function(x = z) { z = 1 ; x } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ f <- function(x) { for (i in 1:10) { x <- g(x,i) }; x }; g <- function(x,i) { x + i }; f(2) }
[1] 57

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ f <- function(x) { function() {x} } ; a <- 1 ; b <- f(a) ; a <- 10 ; b() }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ z <- 1 ; f <- function(c = z) {  z <- z + 1 ; c  } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ z <- 1 ; f <- function(c = z) { c(1,2) ; z <- z + 1 ; c  } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if (i==1) { 1 } else if (i==2) { 1 } else { f(i-1) + f(i-2) } } ; f(10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if (i==1L) { 1L } else if (i==2L) { 1L } else { f(i-1L) + f(i-2L) } } ; f(10L) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i<=1) 1 else i*f(i-1) } ; f(10) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i<=1) 1 else i*f(i-1) } ; g<-function(n, f, a) { if (n==1) { f(a) } else { f(a) ; g(n-1, f, a) } } ; g(100,f,120) }
[1] 6.689503e+198

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i<=1L) 1L else i*f(i-1L) } ; f(10L) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i==1) { 1 } else { f(i-1) } } ; f(10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i==1) { 1 } else { j<-i-1 ; f(j) } } ; f(10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testReturn
#{ f<-function() { return() } ; f() }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testReturn
#{ f<-function() { return(2) ; 3 } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testUnusedArgumentErrors
#{ foo <- function(x) x; foo() }
Error in foo() : argument "x" is missing, with no default

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testUnusedArgumentErrors
#{ foo <- function(x) x; foo(1, 2, 3) }
Error in foo(1, 2, 3) : unused arguments (2, 3)

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ f <- function(a) { if (is.na(a)) { 1 } else { 2 } } ; f(5) ; f(1:3)}
[1] 2
Warning message:
In if (is.na(a)) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ f <- function(cond) { if (cond) { TRUE } else { 2 }  } ; f(c(TRUE,FALSE)) ; f(1) }
[1] TRUE
Warning message:
In if (cond) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ f <- function(cond) { if (cond) { TRUE } else { 2 }  } ; f(c(TRUE,FALSE)) ; f(FALSE) }
[1] 2
Warning message:
In if (cond) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ f <- function(cond) { if (cond) { TRUE } else { 2 }  } ; f(logical()) }
Error in if (cond) { : argument is of length zero

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ f <- function(cond) { if (cond) { TRUE } else { 2 } } ; f(1:3) ; f(2) }
[1] TRUE
Warning message:
In if (cond) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ if (1:3) { TRUE } }
[1] TRUE
Warning message:
In if (1:3) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ if (1[2:1]) { TRUE } }
Error in if (1[2:1]) { : argument is not interpretable as logical
In addition: Warning message:
In if (1[2:1]) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ if (c(0,0,0)) { TRUE } else { 2 } }
[1] 2
Warning message:
In if (c(0, 0, 0)) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ if (c(0L,0L,0L)) { TRUE } else { 2 } }
[1] 2
Warning message:
In if (c(0L, 0L, 0L)) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ if (c(1L,0L,0L)) { TRUE } else { 2 } }
[1] TRUE
Warning message:
In if (c(1L, 0L, 0L)) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ if (c(1L[2],0L,0L)) { TRUE } else { 2 } }
Error in if (c(1L[2], 0L, 0L)) { :
  argument is not interpretable as logical
In addition: Warning message:
In if (c(1L[2], 0L, 0L)) { :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testCast
#{ if (integer()) { TRUE } }
Error in if (integer()) { : argument is of length zero

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(v) { if (FALSE==v) TRUE else FALSE } ; f(TRUE) ; f(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x == 2) 1 else 2 } ; f(1) ; f(NA) }
Error in if (x == 2) 1 else 2 : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f("hello") }
Error in if (x) 1 else 2 : argument is not interpretable as logical

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(FALSE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(NA) }
Error in if (x) 1 else 2 : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(TRUE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(logical()) }
Error in if (x) 1 else 2 : argument is of length zero

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(NA)  }
Error in if (x) 1 else 2 : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (FALSE==1) TRUE else FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (FALSE==TRUE) TRUE else FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (NA == TRUE) TRUE else FALSE }
Error in if (NA == TRUE) TRUE else FALSE :
  missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (TRUE == NA) TRUE else FALSE }
Error in if (TRUE == NA) TRUE else FALSE :
  missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (TRUE==FALSE) TRUE else FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ x <- 2 ; if (1==x) TRUE else 2 }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ x <- 2 ; if (NA) x <- 3 ; x }
Error in if (NA) x <- 3 : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf2
#if(FALSE) 1 else 2
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf2
#if(TRUE) 1 else 2
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfDanglingElse
#if(TRUE) if (FALSE) 1 else 2
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfIgnore
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(1:3) }
[1] 1
Warning message:
In if (x) 1 else 2 :
  the condition has length > 1 and only the first element will be used

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfNot1
#if(!FALSE) 1 else 2
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfNot1
#if(!TRUE) 1 else 2
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfVisibility
#{ if (FALSE) 23 else NULL }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfVisibility
#{ if (FALSE) 23 else invisible(23) }

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfVisibility
#{ if (FALSE) 23 }

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfVisibility
#{ if (TRUE) invisible(23) else 23 }

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfVisibility
#{ if (TRUE) invisible(23) }

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfWithoutElse
#if(TRUE) 1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,2,3) ; x <- integer() ; a[[x]] }
Error in a[[x]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,2,3) ; x <- integer() ; a[x] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,NULL,list()) ; a[3] }
[[1]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,NULL,list()) ; a[[3]] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,NULL,list()) ; typeof(a[3]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,NULL,list()) ; typeof(a[[3]]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[-2] }
[[1]]
[1] 1

[[2]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[-5] }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[0] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[5] }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[NA] }
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[-2]] }
Error in l[[-2]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[-5]] }
Error in l[[-5]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[0]] }
Error in l[[0]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[5]] }
Error in l[[5]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[NA]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; typeof(l[-2]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; typeof(l[5]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; typeof(l[NA]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; typeof(l[[NA]]) }
[1] "NULL"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(c(1,2,3),"eep") ; l[[1]] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(c(1,2,3),"eep") ; l[[2]] }
[1] "eep"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; a }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; a[3] }
[[1]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; a[[3]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; typeof(a) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; typeof(a[3]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; typeof(a[[3]]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(list(1)) ; typeof(a) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(list(1)) ; typeof(a[1]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(list(1)) ; typeof(a[[1]]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCreation
#{ list() }
list()

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCreation
#{ list(1,NULL,list()) }
[[1]]
[1] 1

[[2]]
NULL

[[3]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCreation
#{ list(list(),list()) }
[[1]]
list()

[[2]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListUpdate
#{ l <- list(c(1,2,3),c(4,5,6)) ; l[[1]] <- c(7,8,9) ; l[[1]] }
[1] 7 8 9

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testFactorial
#{ f<-function(i) { if (i<=1) {1} else {r<-i; for(j in 2:(i-1)) {r=r*j}; r} }; f(10) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testFibonacci
#{ f<-function(i) { x<-integer(i); x[1]<-1; x[2]<-1; if (i>2) { for(j in 3:i) { x[j]<-x[j-1]+x[j-2] } }; x[i] } ; f(32) }
[1] 2178309

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testForSequenceDescending
#{ sum <- 0; for (i in 3:1) { sum <- sum + i; }; sum; }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ f<-function(r) { x<-0 ; for(i in r) { x<-x+i } ; x } ; f(1:10) ; f(c(1,2,3,4,5)) }
[1] 15

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ f<-function(r) { x<-0 ; for(i in r) { x<-x+i } ; x } ; f(c(1,2,3,4,5)) ; f(1:10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ for(i in c(1,2)) { x <- i } ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ r <- "" ; for (s in c("Hello", "world")) r <- paste(r, s) ; r }
[1] " Hello world"

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; for(i in 1:10) { x<-x+1 } ; x }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; repeat { x <- x + 1 ; if (x <= 11) { next } else { break } ; x <- 1024 } ; x }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; repeat { x <- x + 1 ; if (x > 11) { break } } ; x }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; while(TRUE) { x <- x + 1 ; if (x > 11) { break } } ; x }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; while(x <= 10) { x<-x+1 } ; x }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-210 ; repeat { x <- x + 1 ; break } ; x }
[1] 211

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ f <- function() { for(i in 1:4) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ f <- function() { for(i in c(1,2,3,4)) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f()  }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ f <- function(s) { for(i in s) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f(2:1) ; f(c(1,2,3,4)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ for(i in 1:4) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ for(i in c(1,2,3,4)) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ i <- 0L ; while(i < 3L) { i <- i + 1 ; if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsErrors
#{ break; }
Error: no loop for break/next, jumping to top level

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsErrors
#{ next; }
Error: no loop for break/next, jumping to top level

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsErrors
#{ while (1 < NA) { 1 } }
Error in while (1 < NA) { : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-1:10; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-1; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-1L; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-FALSE; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-TRUE; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-c(1, 2, 3); dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-c(1L, 2L, 3L); dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3, -4)]
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3, -4)]
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3, -4)]
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
a b c d
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
a c
1 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
a d
1 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2, 2); x[, -1] }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2, 2); x[-1, ] }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, NA] }
<NA> <NA>
  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
   1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[NA, 1] }
<NA> <NA>
  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
  c <NA>
a 1   NA
a 1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
      c <NA>
a     1   NA
<NA> NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
   1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[-1, -1] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[1,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[1,2] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,]    1    3
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,]    1    3
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1)] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3)] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(0)] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(1)] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(1, 2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[-1,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[-2,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,-1] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,-2] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,] }
     [,1] [,2] [,3] [,4]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[1, c(1, NA)] }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[1, c(NA, NA)] }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[1,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[-1, 1] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[0,1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[0,2] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[1, -1] }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[1,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[2,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:16; dim(x)<-c(4,4); x[-1,-2] }
     [,1] [,2] [,3]
[1,]    2   10   14
[2,]    3   11   15
[3,]    4   12   16

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:16; dim(x)<-c(4,4); x[-1,c(1,1,2,3)] }
     [,1] [,2] [,3] [,4]
[1,]    2    2    6   10
[2,]    3    3    7   11
[3,]    4    4    8   12

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:2; dim(x)<-c(1:2); dimnames(x)<-list("z", c("a", "b")); x["z", 1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:2; dim(x)<-c(1:2); dimnames(x)<-list("z", c("a", "b")); x[c("z", "z"), 1] }
z z
1 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x["b", 1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x["d", 1] }
Error in x["d", 1] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[1, 1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[as.character(NA), 1] }
Error in x[as.character(NA), 1] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c("a", "a"), 1] }
a a
1 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c("a", "b"), 1] }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c("b"), 1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c(1,1), 1] }
a a
1 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c(1,2), 1] }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c(1,2,1), 1] }
a b a
1 2 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); x[1,3] }
Error in x[1, 3] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(4,1); dimnames(x)<-list(c("a", "b", "c", "d"), "z"); x[, 1] }
a b c d
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(4,1); dimnames(x)<-list(c("a", "b", "c", "d"), "z"); x[c(2,4), 1] }
b d
2 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2, 4); x[c(-1, -2),c(5)] }
Error in x[c(-1, -2), c(5)] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); x[1, 2] }
Error in x[1, 2] : incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, FALSE] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, TRUE] }
[1] 1 3 5 7

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE)] }
[1] 1 5 7

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE, FALSE)] }
[1] 1 5

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE, TRUE, TRUE)] }
Error in x[1, c(TRUE, FALSE, TRUE, TRUE, TRUE)] :
  (subscript) logical subscript too long

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; x[1, 2] }
Error in x[1, 2] : incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
  a   b   c   d
"a" "b" "c" "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
  a   c
"a" "c"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
  a   d
"a" "c"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[, -1] }
[1] "c" "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,] "a"  "c"
[2,] "b"  "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[-1, ] }
[1] "b" "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,] "a"  "c"
[2,] "b"  "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[1, 1] }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
 "a"   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
  c   <NA>
a "a" NA
a "a" NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
     c   <NA>
a    "a" NA
<NA> NA  NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
 "a"   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[-1, -1] }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[1,1] }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[1,2] }
[1] "c"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,] "a"  "c"
[2,] NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,] "a"  "c"
[2,] NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
      b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
      a  b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
      a  a  a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
   a    b    c    d
1+1i 2+2i 3+3i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
   a    c
1+1i 3+3i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
   a    d
1+1i 3+3i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[, -1] }
[1] 3+3i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,] 2+2i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[-1, ] }
[1] 2+2i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,] 2+2i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[1, 1] }
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
1+1i   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
     c <NA>
a 1+1i   NA
a 1+1i   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
        c <NA>
a    1+1i   NA
<NA>   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
1+1i   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[-1, -1] }
[1] 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[1,1] }
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[1,2] }
[1] 3+3i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(-1)] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3)] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(0)] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(1)] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(1, 2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[-1,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[-2,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,-1] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,-2] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,1] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,] }
     [,1] [,2] [,3] [,4]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[1,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[-1, 1] }
[1] 2+2i 3+3i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[0,1] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[0,2] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[1, -1] }
[1] 5+5i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[1,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[2,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1, 2, 3, 4); dim(x)<-c(2, 2); x[1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
  a   b   c   d
1.1 2.2 3.3 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
  a   c
1.1 3.3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
  a   d
1.1 3.3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2, 2); x[, -1] }
[1] 3.3 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]  2.2  4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2, 2); x[-1, ] }
[1] 2.2 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]  2.2  4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
 1.1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
    c <NA>
a 1.1   NA
a 1.1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
       c <NA>
a    1.1   NA
<NA>  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
 1.1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[-1, -1] }
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[1,1] }
[1] 1.1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[1,2] }
[1] 3.3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1)] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3)] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(0)] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(1)] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(1, 2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[-1,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[-2,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,-1] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,-2] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,] }
     [,1] [,2] [,3] [,4]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[1,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[-1, 1] }
[1] 2.2 3.3 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[0,1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[0,2] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[1, -1] }
[1] 5.5

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[1,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[2,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2,3); x[1,2] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L); dim(x) <- c(2,5); x[2,4] }
[1] 8

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(FALSE, TRUE, TRUE, FALSE); dim(x)<-c(2, 2); x[1, 1] }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
    a     b     c     d
 TRUE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
   a    c
TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
   a    d
TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2, 2); x[, -1] }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2, 2); x[, -3] }
      [,1]  [,2]
[1,]  TRUE  TRUE
[2,] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2, 2); x[-1, ] }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2, 2); x[-3, ] }
      [,1]  [,2]
[1,]  TRUE  TRUE
[2,] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
     c <NA>
a TRUE   NA
a TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
        c <NA>
a    TRUE   NA
<NA>   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[-1, -1] }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[1,1] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[1,2] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,] TRUE TRUE
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,] TRUE TRUE
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
      b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
      a  b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
      a  a  a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
 a  b  c  d
01 02 03 04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
 a  c
01 03

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
 a  d
01 03

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2, 2); x[, -1] }
[1] 03 04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,]   01   03
[2,]   02   04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2, 2); x[-1, ] }
[1] 02 04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,]   01   03
[2,]   02   04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
01 00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
   c <NA>
a 01   00
a 01   00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
      c <NA>
a    01   00
<NA> 00   00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
01 00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[-1, -1] }
[1] 04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[1,1] }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[1,2] }
[1] 03

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,]   01   03
[2,]   00   00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,]   01   03
[2,]   00   00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
$a
[1] TRUE

$b
[1] "a"

$c
[1] 42

$d
[1] 1.1


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
$a
[1] TRUE

$c
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
$a
[1] TRUE

$d
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2, 2); x[, -1] }
[[1]]
[1] 42

[[2]]
[1] 1.1


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,] TRUE 42
[2,] "a"  1.1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2, 2); x[-1, ] }
[[1]]
[1] "a"

[[2]]
[1] 1.1


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,] TRUE 42
[2,] "a"  1.1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
$c
[1] TRUE

$<NA>
NULL


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
  c    <NA>
a TRUE NULL
a TRUE NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
     c    <NA>
a    TRUE NULL
<NA> NULL NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
$a
[1] TRUE

$<NA>
NULL


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[-1, -1] }
[[1]]
[1] 1.1


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[1,1] }
[[1]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[1,2] }
[[1]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,] TRUE 42
[2,] NULL NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,] TRUE 42
[2,] NULL NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testMatrixAccessWithScalarAndVector
#{ i <- c(1L,3L,5L) ; m <- 1:10 ; dim(m) <- c(2,5) ; m[2,i] }
[1]  2  6 10

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testMatrixAccessWithScalarAndVector
#{ i <- c(1L,3L,5L) ; m <- c("a","b","c","d","e","f","g","h","i","j") ; dim(m) <- c(2,5) ; m[2,i] }
[1] "b" "f" "j"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1,2,3,4,5,6); dim(x) <- c(2L,3L); dim(x) <- NULL; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1,2,3,4,5,6); dim(x) <- c(2L,3L); dim(x) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2.1,3.9); dim(x) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2L,3L); dim(x) <- NULL; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2L,3L); dim(x) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{  x<-c(1,2,3,4); dim(x)<-c(2,2); x[3][1]<-42; x }
     [,1] [,2]
[1,]    1   42
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{  x<-c(1,2,3,4); dim(x)<-c(2,2); x[3][1][1]<-42; x }
     [,1] [,2]
[1,]    1   42
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[,][1]<-42; x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[, c(1)] }
[1] 1.1 2.2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[, c(1,2)] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]  2.2  4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(1), ] }
[1] 1.1 3.3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(1,2), ] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]  2.2  4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1L,2L,3L,4L); dim(x)<-c(2,2); f<-function() { x[3][1]<-42; x }; f() }
     [,1] [,2]
[1,]    1   42
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1L,2L,3L,4L); dim(x)<-c(2,2); f<-function() { x[3][1]<-42; }; f(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2,3); x[1,2] <- 100L; x[1,2] }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L); dim(x) <- c(2,5); x[2,4] <- 100L; x[2,4] }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleParsing.testIncorrectInput
#/
Error: unexpected '/' in "/"

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ (1:3):(1:3) }
[1] 1
Warning messages:
1: In (1:3):(1:3) :
  numerical expression has 3 elements: only the first used
2: In (1:3):(1:3) :
  numerical expression has 3 elements: only the first used

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ (1:3):3 }
[1] 1 2 3
Warning message:
In (1:3):3 : numerical expression has 3 elements: only the first used

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 1.1:3.1 }
[1] 1.1 2.1 3.1

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 1:(1:3) }
[1] 1
Warning message:
In 1:(1:3) : numerical expression has 3 elements: only the first used

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 1:3 }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 1:NA }
Error in 1:NA : NA/NaN argument

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 3.1:1 }
[1] 3.1 2.1 1.1

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 3:1 }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ NA:1 }
Error in NA:1 : NA/NaN argument

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ NA:NA }
Error in NA:NA : NA/NaN argument

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { 1:5 } ; f(); f() }
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { if (1) TRUE } ; f(); f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { if (if (1) {TRUE} else {FALSE} ) 1 } ; f(); f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { length(c(1,2)) } ; f(); f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { logical(0) } ; f(); f() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { i ; if (FALSE) { 1 } else { i } } ; f(2) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { i ; if (TRUE) { 1 } else { i } } ; f(2) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { if (TRUE) { i } } ; f(2) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { if(i==1) { 1 } else { i } } ; f(2) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { if(i==1) { 1 } else { i } } ; f(2) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) {i} ; f(1) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; for(i in 1:10) { x<-x+1 } ; x } ; f(); f() }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; repeat { x <- x + 1 ; if (x <= 11) { next } else { break } ; x <- 1024 } ; x } ; f() ; f() }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; repeat { x <- x + 1 ; if (x > 11) { break } } ; x } ; f(); f() }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; while(TRUE) { x <- x + 1 ; if (x > 11) { break } } ; x } ; f(); f() }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; while(x <= 10) { x<-x+1 } ; x } ; f(); f() }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-210 ; repeat { x <- x + 1 ; break } ; x } ; f() ; f() }
[1] 211

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testWarningsAndErrors
#{ (c(1, 2) < c(1, 2, 3)) ==  (c(1, 2) < c(1, 3, 4)) }
[1]  TRUE FALSE  TRUE
Warning messages:
1: In c(1, 2) < c(1, 2, 3) :
  longer object length is not a multiple of shorter object length
2: In c(1, 2) < c(1, 3, 4) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testWarningsAndErrors
#{ 1i > ((c(1, 2) < c(1, 2, 3)) ==  (c(1, 2) < c(1, 3, 4))) }
Error in 0+1i > ((c(1, 2) < c(1, 2, 3)) == (c(1, 2) < c(1, 3, 4))) :
  invalid comparison with complex values
In addition: Warning messages:
1: In c(1, 2) < c(1, 2, 3) :
  longer object length is not a multiple of shorter object length
2: In c(1, 2) < c(1, 3, 4) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testWarningsAndErrors
#{ 1i > (c(1, 2) < c(1, 2, 3)) }
Error in 0+1i > (c(1, 2) < c(1, 2, 3)) :
  invalid comparison with complex values
In addition: Warning message:
In c(1, 2) < c(1, 2, 3) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAmbiguousExpression
#exp(-abs((0+1i)/(0+0i)))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- "hello"; attr(x, "a");
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- "hello"; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- ((0/0)+1i); attr(x, "a");
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- ((0/0)+1i); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-(0/0)); attr(x, "a");
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-(0/0)); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-(1/0)); attr(x, "a");
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-(1/0)); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-0.0); attr(x, "a");
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-0.0); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (0/0); attr(x, "a");
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (0/0); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1+NA); attr(x, "a");
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1+NA); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1/0); attr(x, "a");
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1/0); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1i+NA); attr(x, "a");
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1i+NA); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (3.4+NA); attr(x, "a");
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (3.4+NA); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1; attr(x, "a");
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1L; attr(x, "a");
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1L; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1i; attr(x, "a");
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1i; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 3.4; attr(x, "a");
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 3.4; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- FALSE; attr(x, "a");
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- FALSE; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- NULL; attr(x, "a");
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- NULL; names(attributes(x));
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- TRUE; attr(x, "a");
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- TRUE; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- as.raw(10); attr(x, "a");
[1] 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- as.raw(10); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c("hello","hello","hello"); attr(x, "a");
[1] "hello" "hello" "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c("hello","hello","hello"); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1,1,1); attr(x, "a");
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1,1,1); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1L,1L,1L); attr(x, "a");
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1L,1L,1L); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1i,1i,1i); attr(x, "a");
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1i,1i,1i); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(3.4,3.4,3.4); attr(x, "a");
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(3.4,3.4,3.4); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(FALSE,FALSE,FALSE); attr(x, "a");
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(FALSE,FALSE,FALSE); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(NULL,NULL,NULL); attr(x, "a");
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(NULL,NULL,NULL); names(attributes(x));
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(TRUE,TRUE,TRUE); attr(x, "a");
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(TRUE,TRUE,TRUE); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(as.raw(10),as.raw(10),as.raw(10)); attr(x, "a");
[1] 0a 0a 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(as.raw(10),as.raw(10),as.raw(10)); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- list(1, 2, 3); attr(x, "a");
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- list(1, 2, 3); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%"hello"
Error in "hello"%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%((0/0)+1i)
Error in "hello"%%((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(-(0/0))
Error in "hello"%%(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(-(1/0))
Error in "hello"%%(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(-0.0)
Error in "hello"%%(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(0/0)
Error in "hello"%%(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(1+NA)
Error in "hello"%%(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(1/0)
Error in "hello"%%(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(1i+NA)
Error in "hello"%%(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(3.4+NA)
Error in "hello"%%(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%1
Error in "hello"%%1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%1L
Error in "hello"%%1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%1i
Error in "hello"%%(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%3.4
Error in "hello"%%3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%FALSE
Error in "hello"%%FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%NULL
Error in "hello"%%NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%TRUE
Error in "hello"%%TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%as.raw(10)
Error in "hello"%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c("hello","hello","hello")
Error in "hello"%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(1,1,1)
Error in "hello"%%c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(1L,1L,1L)
Error in "hello"%%c(1L, 1L, 1L) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(1i,1i,1i)
Error in "hello"%%c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(3.4,3.4,3.4)
Error in "hello"%%c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(FALSE,FALSE,FALSE)
Error in "hello"%%c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(NULL,NULL,NULL)
Error in "hello"%%c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(TRUE,TRUE,TRUE)
Error in "hello"%%c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello"%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*"hello"
Error in "hello" * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*((0/0)+1i)
Error in "hello" * ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(-(0/0))
Error in "hello" * (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(-(1/0))
Error in "hello" * (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(-0.0)
Error in "hello" * (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(0/0)
Error in "hello" * (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(1+NA)
Error in "hello" * (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(1/0)
Error in "hello" * (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(1i+NA)
Error in "hello" * (0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(3.4+NA)
Error in "hello" * (3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*1
Error in "hello" * 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*1L
Error in "hello" * 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*1i
Error in "hello" * (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*3.4
Error in "hello" * 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*FALSE
Error in "hello" * FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*NULL
Error in "hello" * NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*TRUE
Error in "hello" * TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*as.raw(10)
Error in "hello" * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c("hello","hello","hello")
Error in "hello" * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(1,1,1)
Error in "hello" * c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(1L,1L,1L)
Error in "hello" * c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(1i,1i,1i)
Error in "hello" * c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(3.4,3.4,3.4)
Error in "hello" * c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(FALSE,FALSE,FALSE)
Error in "hello" * c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(NULL,NULL,NULL)
Error in "hello" * c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(TRUE,TRUE,TRUE)
Error in "hello" * c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello" * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+"hello"
Error in "hello" + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+((0/0)+1i)
Error in "hello" + ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(-(0/0))
Error in "hello" + (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(-(1/0))
Error in "hello" + (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(-0.0)
Error in "hello" + (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(0/0)
Error in "hello" + (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(1+NA)
Error in "hello" + (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(1/0)
Error in "hello" + (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(1i+NA)
Error in "hello" + (0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(3.4+NA)
Error in "hello" + (3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+1
Error in "hello" + 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+1L
Error in "hello" + 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+1i
Error in "hello" + (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+3.4
Error in "hello" + 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+FALSE
Error in "hello" + FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+NULL
Error in "hello" + NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+TRUE
Error in "hello" + TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+as.raw(10)
Error in "hello" + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c("hello","hello","hello")
Error in "hello" + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(1,1,1)
Error in "hello" + c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(1L,1L,1L)
Error in "hello" + c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(1i,1i,1i)
Error in "hello" + c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(3.4,3.4,3.4)
Error in "hello" + c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(FALSE,FALSE,FALSE)
Error in "hello" + c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(NULL,NULL,NULL)
Error in "hello" + c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(TRUE,TRUE,TRUE)
Error in "hello" + c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello" + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-"hello"
Error in "hello" - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-((0/0)+1i)
Error in "hello" - ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(-(0/0))
Error in "hello" - (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(-(1/0))
Error in "hello" - (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(-0.0)
Error in "hello" - (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(0/0)
Error in "hello" - (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(1+NA)
Error in "hello" - (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(1/0)
Error in "hello" - (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(1i+NA)
Error in "hello" - (0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(3.4+NA)
Error in "hello" - (3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-1
Error in "hello" - 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-1L
Error in "hello" - 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-1i
Error in "hello" - (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-3.4
Error in "hello" - 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-FALSE
Error in "hello" - FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-NULL
Error in "hello" - NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-TRUE
Error in "hello" - TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-as.raw(10)
Error in "hello" - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c("hello","hello","hello")
Error in "hello" - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(1,1,1)
Error in "hello" - c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(1L,1L,1L)
Error in "hello" - c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(1i,1i,1i)
Error in "hello" - c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(3.4,3.4,3.4)
Error in "hello" - c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(FALSE,FALSE,FALSE)
Error in "hello" - c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(NULL,NULL,NULL)
Error in "hello" - c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(TRUE,TRUE,TRUE)
Error in "hello" - c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello" - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/"hello"
Error in "hello"/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/((0/0)+1i)
Error in "hello"/((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(-(0/0))
Error in "hello"/(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(-(1/0))
Error in "hello"/(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(-0.0)
Error in "hello"/(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(0/0)
Error in "hello"/(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(1+NA)
Error in "hello"/(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(1/0)
Error in "hello"/(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(1i+NA)
Error in "hello"/(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(3.4+NA)
Error in "hello"/(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/1
Error in "hello"/1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/1L
Error in "hello"/1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/1i
Error in "hello"/(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/3.4
Error in "hello"/3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/FALSE
Error in "hello"/FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/NULL
Error in "hello"/NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/TRUE
Error in "hello"/TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/as.raw(10)
Error in "hello"/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c("hello","hello","hello")
Error in "hello"/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(1,1,1)
Error in "hello"/c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(1L,1L,1L)
Error in "hello"/c(1L, 1L, 1L) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(1i,1i,1i)
Error in "hello"/c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(3.4,3.4,3.4)
Error in "hello"/c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(FALSE,FALSE,FALSE)
Error in "hello"/c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(NULL,NULL,NULL)
Error in "hello"/c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(TRUE,TRUE,TRUE)
Error in "hello"/c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello"/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^"hello"
Error in "hello"^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^((0/0)+1i)
Error in "hello"^((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(-(0/0))
Error in "hello"^(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(-(1/0))
Error in "hello"^(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(-0.0)
Error in "hello"^(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(0/0)
Error in "hello"^(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(1+NA)
Error in "hello"^(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(1/0)
Error in "hello"^(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(1i+NA)
Error in "hello"^(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(3.4+NA)
Error in "hello"^(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^1
Error in "hello"^1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^1L
Error in "hello"^1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^1i
Error in "hello"^(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^3.4
Error in "hello"^3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^FALSE
Error in "hello"^FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^NULL
Error in "hello"^NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^TRUE
Error in "hello"^TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^as.raw(10)
Error in "hello"^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c("hello","hello","hello")
Error in "hello"^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(1,1,1)
Error in "hello"^c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(1L,1L,1L)
Error in "hello"^c(1L, 1L, 1L) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(1i,1i,1i)
Error in "hello"^c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(3.4,3.4,3.4)
Error in "hello"^c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(FALSE,FALSE,FALSE)
Error in "hello"^c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(NULL,NULL,NULL)
Error in "hello"^c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(TRUE,TRUE,TRUE)
Error in "hello"^c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello"^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%"hello"
Error in ((0/0) + (0+1i))%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(-(0/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(-(1/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(-0.0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(0/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(1+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(1/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(3.4+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%1
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%1L
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%3.4
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%FALSE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%TRUE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%as.raw(10)
Error in ((0/0) + (0+1i))%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c("hello","hello","hello")
Error in ((0/0) + (0+1i))%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(1,1,1)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(1L,1L,1L)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(3.4,3.4,3.4)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(FALSE,FALSE,FALSE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(TRUE,TRUE,TRUE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i))%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*"hello"
Error in ((0/0) + (0+1i)) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*as.raw(10)
Error in ((0/0) + (0+1i)) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c("hello","hello","hello")
Error in ((0/0) + (0+1i)) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i)) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+"hello"
Error in ((0/0) + (0+1i)) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+as.raw(10)
Error in ((0/0) + (0+1i)) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c("hello","hello","hello")
Error in ((0/0) + (0+1i)) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i)) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-"hello"
Error in ((0/0) + (0+1i)) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-as.raw(10)
Error in ((0/0) + (0+1i)) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c("hello","hello","hello")
Error in ((0/0) + (0+1i)) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i)) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/"hello"
Error in ((0/0) + (0+1i))/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/as.raw(10)
Error in ((0/0) + (0+1i))/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c("hello","hello","hello")
Error in ((0/0) + (0+1i))/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i))/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^"hello"
Error in ((0/0) + (0+1i))^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(-0.0)
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^FALSE
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^as.raw(10)
Error in ((0/0) + (0+1i))^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c("hello","hello","hello")
Error in ((0/0) + (0+1i))^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(FALSE,FALSE,FALSE)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i))^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%"hello"
Error in (-(0/0))%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%as.raw(10)
Error in (-(0/0))%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c("hello","hello","hello")
Error in (-(0/0))%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0))%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*"hello"
Error in (-(0/0)) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*as.raw(10)
Error in (-(0/0)) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c("hello","hello","hello")
Error in (-(0/0)) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0)) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+"hello"
Error in (-(0/0)) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+as.raw(10)
Error in (-(0/0)) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c("hello","hello","hello")
Error in (-(0/0)) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0)) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-"hello"
Error in (-(0/0)) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-as.raw(10)
Error in (-(0/0)) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c("hello","hello","hello")
Error in (-(0/0)) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0)) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/"hello"
Error in (-(0/0))/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/as.raw(10)
Error in (-(0/0))/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c("hello","hello","hello")
Error in (-(0/0))/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0))/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^"hello"
Error in (-(0/0))^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^as.raw(10)
Error in (-(0/0))^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c("hello","hello","hello")
Error in (-(0/0))^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0))^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%"hello"
Error in (-(1/0))%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%as.raw(10)
Error in (-(1/0))%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c("hello","hello","hello")
Error in (-(1/0))%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0))%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*"hello"
Error in (-(1/0)) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*1i
[1] NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*3.4
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*as.raw(10)
Error in (-(1/0)) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c("hello","hello","hello")
Error in (-(1/0)) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(1i,1i,1i)
[1] NaN-Infi NaN-Infi NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(3.4,3.4,3.4)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0)) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+"hello"
Error in (-(1/0)) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+1i
[1] -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+3.4
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+FALSE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+as.raw(10)
Error in (-(1/0)) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c("hello","hello","hello")
Error in (-(1/0)) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(1i,1i,1i)
[1] -Inf+1i -Inf+1i -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(3.4,3.4,3.4)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(FALSE,FALSE,FALSE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0)) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-"hello"
Error in (-(1/0)) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-1i
[1] -Inf-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-3.4
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-FALSE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-as.raw(10)
Error in (-(1/0)) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c("hello","hello","hello")
Error in (-(1/0)) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(1i,1i,1i)
[1] -Inf-1i -Inf-1i -Inf-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(3.4,3.4,3.4)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(FALSE,FALSE,FALSE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0)) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/"hello"
Error in (-(1/0))/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(-0.0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/1i
[1] NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/3.4
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/FALSE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/as.raw(10)
Error in (-(1/0))/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c("hello","hello","hello")
Error in (-(1/0))/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(1i,1i,1i)
[1] NaN+Infi NaN+Infi NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(3.4,3.4,3.4)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(FALSE,FALSE,FALSE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0))/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^"hello"
Error in (-(1/0))^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^1i
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^as.raw(10)
Error in (-(1/0))^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c("hello","hello","hello")
Error in (-(1/0))^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0))^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%"hello"
Error in (-0)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%as.raw(10)
Error in (-0)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c("hello","hello","hello")
Error in (-0)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*"hello"
Error in (-0) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*as.raw(10)
Error in (-0) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c("hello","hello","hello")
Error in (-0) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+"hello"
Error in (-0) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+as.raw(10)
Error in (-0) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c("hello","hello","hello")
Error in (-0) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-"hello"
Error in (-0) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-1
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-1L
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-3.4
[1] -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-TRUE
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-as.raw(10)
Error in (-0) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c("hello","hello","hello")
Error in (-0) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(1,1,1)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(1L,1L,1L)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(3.4,3.4,3.4)
[1] -3.4 -3.4 -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(TRUE,TRUE,TRUE)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/"hello"
Error in (-0)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/as.raw(10)
Error in (-0)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c("hello","hello","hello")
Error in (-0)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^"hello"
Error in (-0)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^((0/0)+1i)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(1i+NA)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^1i
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^as.raw(10)
Error in (-0)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c("hello","hello","hello")
Error in (-0)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%"hello"
Error in (0/0)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%as.raw(10)
Error in (0/0)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c("hello","hello","hello")
Error in (0/0)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*"hello"
Error in (0/0) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*as.raw(10)
Error in (0/0) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c("hello","hello","hello")
Error in (0/0) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+"hello"
Error in (0/0) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+as.raw(10)
Error in (0/0) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c("hello","hello","hello")
Error in (0/0) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-"hello"
Error in (0/0) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-as.raw(10)
Error in (0/0) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c("hello","hello","hello")
Error in (0/0) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/"hello"
Error in (0/0)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/as.raw(10)
Error in (0/0)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c("hello","hello","hello")
Error in (0/0)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^"hello"
Error in (0/0)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^as.raw(10)
Error in (0/0)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c("hello","hello","hello")
Error in (0/0)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%"hello"
Error in (1 + NA)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%as.raw(10)
Error in (1 + NA)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c("hello","hello","hello")
Error in (1 + NA)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*"hello"
Error in (1 + NA) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*as.raw(10)
Error in (1 + NA) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c("hello","hello","hello")
Error in (1 + NA) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+"hello"
Error in (1 + NA) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+as.raw(10)
Error in (1 + NA) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c("hello","hello","hello")
Error in (1 + NA) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-"hello"
Error in (1 + NA) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-as.raw(10)
Error in (1 + NA) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c("hello","hello","hello")
Error in (1 + NA) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/"hello"
Error in (1 + NA)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/as.raw(10)
Error in (1 + NA)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c("hello","hello","hello")
Error in (1 + NA)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^"hello"
Error in (1 + NA)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^as.raw(10)
Error in (1 + NA)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c("hello","hello","hello")
Error in (1 + NA)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%"hello"
Error in (1/0)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%as.raw(10)
Error in (1/0)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c("hello","hello","hello")
Error in (1/0)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*"hello"
Error in (1/0) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*1i
[1] NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*as.raw(10)
Error in (1/0) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c("hello","hello","hello")
Error in (1/0) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(1i,1i,1i)
[1] NaN+Infi NaN+Infi NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+"hello"
Error in (1/0) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(-0.0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+1i
[1] Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+as.raw(10)
Error in (1/0) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c("hello","hello","hello")
Error in (1/0) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(1i,1i,1i)
[1] Inf+1i Inf+1i Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-"hello"
Error in (1/0) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(-0.0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-1i
[1] Inf-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-as.raw(10)
Error in (1/0) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c("hello","hello","hello")
Error in (1/0) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(1i,1i,1i)
[1] Inf-1i Inf-1i Inf-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/"hello"
Error in (1/0)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/1i
[1] NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/as.raw(10)
Error in (1/0)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c("hello","hello","hello")
Error in (1/0)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(1i,1i,1i)
[1] NaN-Infi NaN-Infi NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^"hello"
Error in (1/0)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^1i
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^as.raw(10)
Error in (1/0)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c("hello","hello","hello")
Error in (1/0)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%"hello"
Error in (0+1i + NA)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(-(0/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(-(1/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(-0.0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(0/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(1+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(1/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(3.4+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%1
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%1L
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%3.4
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%FALSE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%TRUE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%as.raw(10)
Error in (0+1i + NA)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c("hello","hello","hello")
Error in (0+1i + NA)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(1,1,1)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(1L,1L,1L)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(3.4,3.4,3.4)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(FALSE,FALSE,FALSE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(TRUE,TRUE,TRUE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*"hello"
Error in (0+1i + NA) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*as.raw(10)
Error in (0+1i + NA) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c("hello","hello","hello")
Error in (0+1i + NA) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+"hello"
Error in (0+1i + NA) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+as.raw(10)
Error in (0+1i + NA) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c("hello","hello","hello")
Error in (0+1i + NA) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-"hello"
Error in (0+1i + NA) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-as.raw(10)
Error in (0+1i + NA) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c("hello","hello","hello")
Error in (0+1i + NA) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/"hello"
Error in (0+1i + NA)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/as.raw(10)
Error in (0+1i + NA)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c("hello","hello","hello")
Error in (0+1i + NA)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^"hello"
Error in (0+1i + NA)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(-0.0)
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^FALSE
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^as.raw(10)
Error in (0+1i + NA)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c("hello","hello","hello")
Error in (0+1i + NA)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(FALSE,FALSE,FALSE)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%"hello"
Error in (3.4 + NA)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%as.raw(10)
Error in (3.4 + NA)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c("hello","hello","hello")
Error in (3.4 + NA)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*"hello"
Error in (3.4 + NA) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*as.raw(10)
Error in (3.4 + NA) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c("hello","hello","hello")
Error in (3.4 + NA) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+"hello"
Error in (3.4 + NA) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+as.raw(10)
Error in (3.4 + NA) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c("hello","hello","hello")
Error in (3.4 + NA) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-"hello"
Error in (3.4 + NA) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-as.raw(10)
Error in (3.4 + NA) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c("hello","hello","hello")
Error in (3.4 + NA) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/"hello"
Error in (3.4 + NA)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/as.raw(10)
Error in (3.4 + NA)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c("hello","hello","hello")
Error in (3.4 + NA)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^"hello"
Error in (3.4 + NA)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^as.raw(10)
Error in (3.4 + NA)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c("hello","hello","hello")
Error in (3.4 + NA)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%"hello"
Error in 1%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%as.raw(10)
Error in 1%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c("hello","hello","hello")
Error in 1%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(as.raw(10),as.raw(10),as.raw(10))
Error in 1%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*"hello"
Error in 1 * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*as.raw(10)
Error in 1 * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c("hello","hello","hello")
Error in 1 * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(as.raw(10),as.raw(10),as.raw(10))
Error in 1 * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+"hello"
Error in 1 + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+1
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+1L
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+1i
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+3.4
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+TRUE
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+as.raw(10)
Error in 1 + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c("hello","hello","hello")
Error in 1 + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(as.raw(10),as.raw(10),as.raw(10))
Error in 1 + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-"hello"
Error in 1 - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-1i
[1] 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-3.4
[1] -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-as.raw(10)
Error in 1 - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c("hello","hello","hello")
Error in 1 - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(as.raw(10),as.raw(10),as.raw(10))
Error in 1 - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/"hello"
Error in 1/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/3.4
[1] 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/as.raw(10)
Error in 1/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c("hello","hello","hello")
Error in 1/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(as.raw(10),as.raw(10),as.raw(10))
Error in 1/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%"hello"
Error in 1L%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%as.raw(10)
Error in 1L%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c("hello","hello","hello")
Error in 1L%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*"hello"
Error in 1L * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*as.raw(10)
Error in 1L * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c("hello","hello","hello")
Error in 1L * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+"hello"
Error in 1L + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+1
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+1L
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+1i
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+3.4
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+TRUE
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+as.raw(10)
Error in 1L + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c("hello","hello","hello")
Error in 1L + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-"hello"
Error in 1L - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-1i
[1] 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-3.4
[1] -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-as.raw(10)
Error in 1L - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c("hello","hello","hello")
Error in 1L - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/"hello"
Error in 1L/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/3.4
[1] 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/as.raw(10)
Error in 1L/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c("hello","hello","hello")
Error in 1L/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^"hello"
Error in 1L^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(-(0/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(-(1/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(0/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(1+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(1/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(3.4+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^1i
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^as.raw(10)
Error in 1L^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c("hello","hello","hello")
Error in 1L^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^"hello"
Error in 1^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(-(0/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(-(1/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(0/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(1+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(1/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(3.4+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^1i
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^as.raw(10)
Error in 1^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c("hello","hello","hello")
Error in 1^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(as.raw(10),as.raw(10),as.raw(10))
Error in 1^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%"hello"
Error in (0+1i)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(-(0/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(-(1/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(-0.0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(0/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(1+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(1/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(3.4+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%1
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%1L
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%3.4
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%FALSE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%TRUE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%as.raw(10)
Error in (0+1i)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c("hello","hello","hello")
Error in (0+1i)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(1,1,1)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(1L,1L,1L)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(3.4,3.4,3.4)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(FALSE,FALSE,FALSE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(TRUE,TRUE,TRUE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*"hello"
Error in (0+1i) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(-(1/0))
[1] NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(-0.0)
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(1/0)
[1] NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*1
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*1L
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*1i
[1] -1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*3.4
[1] 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*FALSE
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*TRUE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*as.raw(10)
Error in (0+1i) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c("hello","hello","hello")
Error in (0+1i) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(1i,1i,1i)
[1] -1+0i -1+0i -1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(3.4,3.4,3.4)
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(FALSE,FALSE,FALSE)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+"hello"
Error in 0+1i + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(-(1/0))
[1] -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(-0.0)
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(1/0)
[1] Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+1
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+1L
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+1i
[1] 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+3.4
[1] 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+FALSE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+TRUE
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+as.raw(10)
Error in 0+1i + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c("hello","hello","hello")
Error in 0+1i + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(1,1,1)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(1L,1L,1L)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(1i,1i,1i)
[1] 0+2i 0+2i 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(3.4,3.4,3.4)
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(FALSE,FALSE,FALSE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(TRUE,TRUE,TRUE)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(as.raw(10),as.raw(10),as.raw(10))
Error in 0+1i + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-"hello"
Error in 0+1i - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(-(1/0))
[1] Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(-0.0)
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(1/0)
[1] -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-1
[1] -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-1L
[1] -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-3.4
[1] -3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-FALSE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-TRUE
[1] -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-as.raw(10)
Error in 0+1i - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c("hello","hello","hello")
Error in 0+1i - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(1,1,1)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(1L,1L,1L)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(3.4,3.4,3.4)
[1] -3.4+1i -3.4+1i -3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(FALSE,FALSE,FALSE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(TRUE,TRUE,TRUE)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(as.raw(10),as.raw(10),as.raw(10))
Error in 0+1i - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/"hello"
Error in (0+1i)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(-(1/0))
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(-0.0)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(1/0)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/1
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/1L
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/1i
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/3.4
[1] 0+0.2941176i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/FALSE
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/TRUE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/as.raw(10)
Error in (0+1i)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c("hello","hello","hello")
Error in (0+1i)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(3.4,3.4,3.4)
[1] 0+0.2941176i 0+0.2941176i 0+0.2941176i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(FALSE,FALSE,FALSE)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^"hello"
Error in (0+1i)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(-(1/0))
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(-0.0)
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(1/0)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^1
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^1L
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^1i
[1] 0.2078796+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^3.4
[1] 0.5877853-0.809017i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^FALSE
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^TRUE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^as.raw(10)
Error in (0+1i)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c("hello","hello","hello")
Error in (0+1i)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(1i,1i,1i)
[1] 0.2078796+0i 0.2078796+0i 0.2078796+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(3.4,3.4,3.4)
[1] 0.5877853-0.809017i 0.5877853-0.809017i 0.5877853-0.809017i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(FALSE,FALSE,FALSE)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%"hello"
Error in 3.4%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%1
[1] 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%1L
[1] 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%TRUE
[1] 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%as.raw(10)
Error in 3.4%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c("hello","hello","hello")
Error in 3.4%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(1,1,1)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(1L,1L,1L)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(TRUE,TRUE,TRUE)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*"hello"
Error in 3.4 * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*1
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*1L
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*1i
[1] 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*3.4
[1] 11.56

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*TRUE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*as.raw(10)
Error in 3.4 * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c("hello","hello","hello")
Error in 3.4 * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(1i,1i,1i)
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(3.4,3.4,3.4)
[1] 11.56 11.56 11.56

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4 * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+"hello"
Error in 3.4 + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(-0.0)
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+1
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+1L
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+1i
[1] 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+3.4
[1] 6.8

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+FALSE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+TRUE
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+as.raw(10)
Error in 3.4 + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c("hello","hello","hello")
Error in 3.4 + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(1,1,1)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(1L,1L,1L)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(1i,1i,1i)
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(3.4,3.4,3.4)
[1] 6.8 6.8 6.8

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(FALSE,FALSE,FALSE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(TRUE,TRUE,TRUE)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4 + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-"hello"
Error in 3.4 - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(-0.0)
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-1
[1] 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-1L
[1] 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-1i
[1] 3.4-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-FALSE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-TRUE
[1] 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-as.raw(10)
Error in 3.4 - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c("hello","hello","hello")
Error in 3.4 - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(1,1,1)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(1L,1L,1L)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(1i,1i,1i)
[1] 3.4-1i 3.4-1i 3.4-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(FALSE,FALSE,FALSE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(TRUE,TRUE,TRUE)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4 - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/"hello"
Error in 3.4/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/1
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/1L
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/1i
[1] 0-3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/TRUE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/as.raw(10)
Error in 3.4/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c("hello","hello","hello")
Error in 3.4/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(1i,1i,1i)
[1] 0-3.4i 0-3.4i 0-3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^"hello"
Error in 3.4^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^1
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^1L
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^1i
[1] 0.3400978+0.9403901i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^3.4
[1] 64.12514

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^TRUE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^as.raw(10)
Error in 3.4^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c("hello","hello","hello")
Error in 3.4^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(1i,1i,1i)
[1] 0.3400978+0.9403901i 0.3400978+0.9403901i 0.3400978+0.9403901i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(3.4,3.4,3.4)
[1] 64.12514 64.12514 64.12514

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%"hello"
Error in FALSE%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%as.raw(10)
Error in FALSE%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c("hello","hello","hello")
Error in FALSE%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*"hello"
Error in FALSE * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*as.raw(10)
Error in FALSE * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c("hello","hello","hello")
Error in FALSE * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+"hello"
Error in FALSE + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+as.raw(10)
Error in FALSE + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c("hello","hello","hello")
Error in FALSE + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-"hello"
Error in FALSE - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-1
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-1L
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-3.4
[1] -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-TRUE
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-as.raw(10)
Error in FALSE - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c("hello","hello","hello")
Error in FALSE - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(1,1,1)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(1L,1L,1L)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(3.4,3.4,3.4)
[1] -3.4 -3.4 -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(TRUE,TRUE,TRUE)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/"hello"
Error in FALSE/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/as.raw(10)
Error in FALSE/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c("hello","hello","hello")
Error in FALSE/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^"hello"
Error in FALSE^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^((0/0)+1i)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(-3)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(1i+NA)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^1i
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^as.raw(10)
Error in FALSE^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c("hello","hello","hello")
Error in FALSE^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%"hello"
Error in NULL%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%as.raw(10)
Error in NULL%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c("hello","hello","hello")
Error in NULL%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*"hello"
Error in NULL * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*as.raw(10)
Error in NULL * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c("hello","hello","hello")
Error in NULL * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+"hello"
Error in NULL + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+as.raw(10)
Error in NULL + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c("hello","hello","hello")
Error in NULL + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-"hello"
Error in NULL - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-as.raw(10)
Error in NULL - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c("hello","hello","hello")
Error in NULL - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/"hello"
Error in NULL/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/as.raw(10)
Error in NULL/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c("hello","hello","hello")
Error in NULL/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^"hello"
Error in NULL^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^as.raw(10)
Error in NULL^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c("hello","hello","hello")
Error in NULL^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%"hello"
Error in TRUE%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%as.raw(10)
Error in TRUE%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c("hello","hello","hello")
Error in TRUE%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*"hello"
Error in TRUE * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*as.raw(10)
Error in TRUE * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c("hello","hello","hello")
Error in TRUE * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+"hello"
Error in TRUE + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+1
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+1L
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+1i
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+3.4
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+TRUE
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+as.raw(10)
Error in TRUE + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c("hello","hello","hello")
Error in TRUE + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-"hello"
Error in TRUE - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-1i
[1] 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-3.4
[1] -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-as.raw(10)
Error in TRUE - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c("hello","hello","hello")
Error in TRUE - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/"hello"
Error in TRUE/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/3.4
[1] 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/as.raw(10)
Error in TRUE/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c("hello","hello","hello")
Error in TRUE/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^"hello"
Error in TRUE^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(-(0/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(-(1/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(0/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(1+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(1/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(3.4+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^1i
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^as.raw(10)
Error in TRUE^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c("hello","hello","hello")
Error in TRUE^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%"hello"
Error in as.raw(10)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%((0/0)+1i)
Error in as.raw(10)%%((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(-(0/0))
Error in as.raw(10)%%(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(-(1/0))
Error in as.raw(10)%%(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(-0.0)
Error in as.raw(10)%%(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(0/0)
Error in as.raw(10)%%(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(1+NA)
Error in as.raw(10)%%(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(1/0)
Error in as.raw(10)%%(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(1i+NA)
Error in as.raw(10)%%(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(3.4+NA)
Error in as.raw(10)%%(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%1
Error in as.raw(10)%%1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%1L
Error in as.raw(10)%%1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%1i
Error in as.raw(10)%%(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%3.4
Error in as.raw(10)%%3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%FALSE
Error in as.raw(10)%%FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%NULL
Error in as.raw(10)%%NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%TRUE
Error in as.raw(10)%%TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%as.raw(10)
Error in as.raw(10)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c("hello","hello","hello")
Error in as.raw(10)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(1,1,1)
Error in as.raw(10)%%c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(1L,1L,1L)
Error in as.raw(10)%%c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(1i,1i,1i)
Error in as.raw(10)%%c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(3.4,3.4,3.4)
Error in as.raw(10)%%c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(FALSE,FALSE,FALSE)
Error in as.raw(10)%%c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(NULL,NULL,NULL)
Error in as.raw(10)%%c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(TRUE,TRUE,TRUE)
Error in as.raw(10)%%c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*"hello"
Error in as.raw(10) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*((0/0)+1i)
Error in as.raw(10) * ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(-(0/0))
Error in as.raw(10) * (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(-(1/0))
Error in as.raw(10) * (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(-0.0)
Error in as.raw(10) * (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(0/0)
Error in as.raw(10) * (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(1+NA)
Error in as.raw(10) * (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(1/0)
Error in as.raw(10) * (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(1i+NA)
Error in as.raw(10) * (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(3.4+NA)
Error in as.raw(10) * (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*1
Error in as.raw(10) * 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*1L
Error in as.raw(10) * 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*1i
Error in as.raw(10) * (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*3.4
Error in as.raw(10) * 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*FALSE
Error in as.raw(10) * FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*NULL
Error in as.raw(10) * NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*TRUE
Error in as.raw(10) * TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*as.raw(10)
Error in as.raw(10) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c("hello","hello","hello")
Error in as.raw(10) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(1,1,1)
Error in as.raw(10) * c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(1L,1L,1L)
Error in as.raw(10) * c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(1i,1i,1i)
Error in as.raw(10) * c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(3.4,3.4,3.4)
Error in as.raw(10) * c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(FALSE,FALSE,FALSE)
Error in as.raw(10) * c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(NULL,NULL,NULL)
Error in as.raw(10) * c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(TRUE,TRUE,TRUE)
Error in as.raw(10) * c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+"hello"
Error in as.raw(10) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+((0/0)+1i)
Error in as.raw(10) + ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(-(0/0))
Error in as.raw(10) + (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(-(1/0))
Error in as.raw(10) + (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(-0.0)
Error in as.raw(10) + (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(0/0)
Error in as.raw(10) + (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(1+NA)
Error in as.raw(10) + (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(1/0)
Error in as.raw(10) + (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(1i+NA)
Error in as.raw(10) + (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(3.4+NA)
Error in as.raw(10) + (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+1
Error in as.raw(10) + 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+1L
Error in as.raw(10) + 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+1i
Error in as.raw(10) + (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+3.4
Error in as.raw(10) + 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+FALSE
Error in as.raw(10) + FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+NULL
Error in as.raw(10) + NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+TRUE
Error in as.raw(10) + TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+as.raw(10)
Error in as.raw(10) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c("hello","hello","hello")
Error in as.raw(10) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(1,1,1)
Error in as.raw(10) + c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(1L,1L,1L)
Error in as.raw(10) + c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(1i,1i,1i)
Error in as.raw(10) + c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(3.4,3.4,3.4)
Error in as.raw(10) + c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(FALSE,FALSE,FALSE)
Error in as.raw(10) + c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(NULL,NULL,NULL)
Error in as.raw(10) + c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(TRUE,TRUE,TRUE)
Error in as.raw(10) + c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-"hello"
Error in as.raw(10) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-((0/0)+1i)
Error in as.raw(10) - ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(-(0/0))
Error in as.raw(10) - (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(-(1/0))
Error in as.raw(10) - (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(-0.0)
Error in as.raw(10) - (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(0/0)
Error in as.raw(10) - (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(1+NA)
Error in as.raw(10) - (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(1/0)
Error in as.raw(10) - (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(1i+NA)
Error in as.raw(10) - (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(3.4+NA)
Error in as.raw(10) - (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-1
Error in as.raw(10) - 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-1L
Error in as.raw(10) - 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-1i
Error in as.raw(10) - (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-3.4
Error in as.raw(10) - 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-FALSE
Error in as.raw(10) - FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-NULL
Error in as.raw(10) - NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-TRUE
Error in as.raw(10) - TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-as.raw(10)
Error in as.raw(10) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c("hello","hello","hello")
Error in as.raw(10) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(1,1,1)
Error in as.raw(10) - c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(1L,1L,1L)
Error in as.raw(10) - c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(1i,1i,1i)
Error in as.raw(10) - c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(3.4,3.4,3.4)
Error in as.raw(10) - c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(FALSE,FALSE,FALSE)
Error in as.raw(10) - c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(NULL,NULL,NULL)
Error in as.raw(10) - c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(TRUE,TRUE,TRUE)
Error in as.raw(10) - c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/"hello"
Error in as.raw(10)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/((0/0)+1i)
Error in as.raw(10)/((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(-(0/0))
Error in as.raw(10)/(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(-(1/0))
Error in as.raw(10)/(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(-0.0)
Error in as.raw(10)/(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(0/0)
Error in as.raw(10)/(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(1+NA)
Error in as.raw(10)/(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(1/0)
Error in as.raw(10)/(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(1i+NA)
Error in as.raw(10)/(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(3.4+NA)
Error in as.raw(10)/(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/1
Error in as.raw(10)/1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/1L
Error in as.raw(10)/1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/1i
Error in as.raw(10)/(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/3.4
Error in as.raw(10)/3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/FALSE
Error in as.raw(10)/FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/NULL
Error in as.raw(10)/NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/TRUE
Error in as.raw(10)/TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/as.raw(10)
Error in as.raw(10)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c("hello","hello","hello")
Error in as.raw(10)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(1,1,1)
Error in as.raw(10)/c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(1L,1L,1L)
Error in as.raw(10)/c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(1i,1i,1i)
Error in as.raw(10)/c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(3.4,3.4,3.4)
Error in as.raw(10)/c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(FALSE,FALSE,FALSE)
Error in as.raw(10)/c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(NULL,NULL,NULL)
Error in as.raw(10)/c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(TRUE,TRUE,TRUE)
Error in as.raw(10)/c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^"hello"
Error in as.raw(10)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^((0/0)+1i)
Error in as.raw(10)^((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(-(0/0))
Error in as.raw(10)^(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(-(1/0))
Error in as.raw(10)^(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(-0.0)
Error in as.raw(10)^(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(0/0)
Error in as.raw(10)^(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(1+NA)
Error in as.raw(10)^(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(1/0)
Error in as.raw(10)^(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(1i+NA)
Error in as.raw(10)^(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(3.4+NA)
Error in as.raw(10)^(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^1
Error in as.raw(10)^1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^1L
Error in as.raw(10)^1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^1i
Error in as.raw(10)^(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^3.4
Error in as.raw(10)^3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^FALSE
Error in as.raw(10)^FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^NULL
Error in as.raw(10)^NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^TRUE
Error in as.raw(10)^TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^as.raw(10)
Error in as.raw(10)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c("hello","hello","hello")
Error in as.raw(10)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(1,1,1)
Error in as.raw(10)^c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(1L,1L,1L)
Error in as.raw(10)^c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(1i,1i,1i)
Error in as.raw(10)^c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(3.4,3.4,3.4)
Error in as.raw(10)^c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(FALSE,FALSE,FALSE)
Error in as.raw(10)^c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(NULL,NULL,NULL)
Error in as.raw(10)^c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(TRUE,TRUE,TRUE)
Error in as.raw(10)^c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%"hello"
Error in c("hello", "hello", "hello")%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%((0/0)+1i)
Error in c("hello", "hello", "hello")%%((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(-(0/0))
Error in c("hello", "hello", "hello")%%(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(-(1/0))
Error in c("hello", "hello", "hello")%%(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(-0.0)
Error in c("hello", "hello", "hello")%%(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(0/0)
Error in c("hello", "hello", "hello")%%(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(1+NA)
Error in c("hello", "hello", "hello")%%(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(1/0)
Error in c("hello", "hello", "hello")%%(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(1i+NA)
Error in c("hello", "hello", "hello")%%(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(3.4+NA)
Error in c("hello", "hello", "hello")%%(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%1
Error in c("hello", "hello", "hello")%%1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%1L
Error in c("hello", "hello", "hello")%%1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%1i
Error in c("hello", "hello", "hello")%%(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%3.4
Error in c("hello", "hello", "hello")%%3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%FALSE
Error in c("hello", "hello", "hello")%%FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%NULL
Error in c("hello", "hello", "hello")%%NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%TRUE
Error in c("hello", "hello", "hello")%%TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%as.raw(10)
Error in c("hello", "hello", "hello")%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c("hello","hello","hello")
Error in c("hello", "hello", "hello")%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(1,1,1)
Error in c("hello", "hello", "hello")%%c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(1L,1L,1L)
Error in c("hello", "hello", "hello")%%c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(1i,1i,1i)
Error in c("hello", "hello", "hello")%%c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello")%%c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello")%%c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello")%%c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello")%%c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello")%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*"hello"
Error in c("hello", "hello", "hello") * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*((0/0)+1i)
Error in c("hello", "hello", "hello") * ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(-(0/0))
Error in c("hello", "hello", "hello") * (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(-(1/0))
Error in c("hello", "hello", "hello") * (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(-0.0)
Error in c("hello", "hello", "hello") * (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(0/0)
Error in c("hello", "hello", "hello") * (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(1+NA)
Error in c("hello", "hello", "hello") * (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(1/0)
Error in c("hello", "hello", "hello") * (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(1i+NA)
Error in c("hello", "hello", "hello") * (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(3.4+NA)
Error in c("hello", "hello", "hello") * (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*1
Error in c("hello", "hello", "hello") * 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*1L
Error in c("hello", "hello", "hello") * 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*1i
Error in c("hello", "hello", "hello") * (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*3.4
Error in c("hello", "hello", "hello") * 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*FALSE
Error in c("hello", "hello", "hello") * FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*NULL
Error in c("hello", "hello", "hello") * NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*TRUE
Error in c("hello", "hello", "hello") * TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*as.raw(10)
Error in c("hello", "hello", "hello") * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c("hello","hello","hello")
Error in c("hello", "hello", "hello") * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(1,1,1)
Error in c("hello", "hello", "hello") * c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(1L,1L,1L)
Error in c("hello", "hello", "hello") * c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(1i,1i,1i)
Error in c("hello", "hello", "hello") * c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello") * c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello") * c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello") * c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello") * c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello") * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+"hello"
Error in c("hello", "hello", "hello") + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+((0/0)+1i)
Error in c("hello", "hello", "hello") + ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(-(0/0))
Error in c("hello", "hello", "hello") + (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(-(1/0))
Error in c("hello", "hello", "hello") + (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(-0.0)
Error in c("hello", "hello", "hello") + (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(0/0)
Error in c("hello", "hello", "hello") + (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(1+NA)
Error in c("hello", "hello", "hello") + (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(1/0)
Error in c("hello", "hello", "hello") + (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(1i+NA)
Error in c("hello", "hello", "hello") + (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(3.4+NA)
Error in c("hello", "hello", "hello") + (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+1
Error in c("hello", "hello", "hello") + 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+1L
Error in c("hello", "hello", "hello") + 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+1i
Error in c("hello", "hello", "hello") + (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+3.4
Error in c("hello", "hello", "hello") + 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+FALSE
Error in c("hello", "hello", "hello") + FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+NULL
Error in c("hello", "hello", "hello") + NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+TRUE
Error in c("hello", "hello", "hello") + TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+as.raw(10)
Error in c("hello", "hello", "hello") + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c("hello","hello","hello")
Error in c("hello", "hello", "hello") + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(1,1,1)
Error in c("hello", "hello", "hello") + c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(1L,1L,1L)
Error in c("hello", "hello", "hello") + c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(1i,1i,1i)
Error in c("hello", "hello", "hello") + c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello") + c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello") + c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello") + c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello") + c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello") + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-"hello"
Error in c("hello", "hello", "hello") - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-((0/0)+1i)
Error in c("hello", "hello", "hello") - ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(-(0/0))
Error in c("hello", "hello", "hello") - (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(-(1/0))
Error in c("hello", "hello", "hello") - (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(-0.0)
Error in c("hello", "hello", "hello") - (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(0/0)
Error in c("hello", "hello", "hello") - (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(1+NA)
Error in c("hello", "hello", "hello") - (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(1/0)
Error in c("hello", "hello", "hello") - (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(1i+NA)
Error in c("hello", "hello", "hello") - (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(3.4+NA)
Error in c("hello", "hello", "hello") - (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-1
Error in c("hello", "hello", "hello") - 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-1L
Error in c("hello", "hello", "hello") - 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-1i
Error in c("hello", "hello", "hello") - (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-3.4
Error in c("hello", "hello", "hello") - 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-FALSE
Error in c("hello", "hello", "hello") - FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-NULL
Error in c("hello", "hello", "hello") - NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-TRUE
Error in c("hello", "hello", "hello") - TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-as.raw(10)
Error in c("hello", "hello", "hello") - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c("hello","hello","hello")
Error in c("hello", "hello", "hello") - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(1,1,1)
Error in c("hello", "hello", "hello") - c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(1L,1L,1L)
Error in c("hello", "hello", "hello") - c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(1i,1i,1i)
Error in c("hello", "hello", "hello") - c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello") - c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello") - c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello") - c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello") - c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello") - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/"hello"
Error in c("hello", "hello", "hello")/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/((0/0)+1i)
Error in c("hello", "hello", "hello")/((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(-(0/0))
Error in c("hello", "hello", "hello")/(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(-(1/0))
Error in c("hello", "hello", "hello")/(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(-0.0)
Error in c("hello", "hello", "hello")/(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(0/0)
Error in c("hello", "hello", "hello")/(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(1+NA)
Error in c("hello", "hello", "hello")/(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(1/0)
Error in c("hello", "hello", "hello")/(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(1i+NA)
Error in c("hello", "hello", "hello")/(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(3.4+NA)
Error in c("hello", "hello", "hello")/(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/1
Error in c("hello", "hello", "hello")/1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/1L
Error in c("hello", "hello", "hello")/1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/1i
Error in c("hello", "hello", "hello")/(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/3.4
Error in c("hello", "hello", "hello")/3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/FALSE
Error in c("hello", "hello", "hello")/FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/NULL
Error in c("hello", "hello", "hello")/NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/TRUE
Error in c("hello", "hello", "hello")/TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/as.raw(10)
Error in c("hello", "hello", "hello")/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c("hello","hello","hello")
Error in c("hello", "hello", "hello")/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(1,1,1)
Error in c("hello", "hello", "hello")/c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(1L,1L,1L)
Error in c("hello", "hello", "hello")/c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(1i,1i,1i)
Error in c("hello", "hello", "hello")/c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello")/c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello")/c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello")/c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello")/c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello")/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^"hello"
Error in c("hello", "hello", "hello")^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^((0/0)+1i)
Error in c("hello", "hello", "hello")^((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(-(0/0))
Error in c("hello", "hello", "hello")^(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(-(1/0))
Error in c("hello", "hello", "hello")^(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(-0.0)
Error in c("hello", "hello", "hello")^(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(0/0)
Error in c("hello", "hello", "hello")^(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(1+NA)
Error in c("hello", "hello", "hello")^(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(1/0)
Error in c("hello", "hello", "hello")^(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(1i+NA)
Error in c("hello", "hello", "hello")^(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(3.4+NA)
Error in c("hello", "hello", "hello")^(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^1
Error in c("hello", "hello", "hello")^1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^1L
Error in c("hello", "hello", "hello")^1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^1i
Error in c("hello", "hello", "hello")^(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^3.4
Error in c("hello", "hello", "hello")^3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^FALSE
Error in c("hello", "hello", "hello")^FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^NULL
Error in c("hello", "hello", "hello")^NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^TRUE
Error in c("hello", "hello", "hello")^TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^as.raw(10)
Error in c("hello", "hello", "hello")^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c("hello","hello","hello")
Error in c("hello", "hello", "hello")^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(1,1,1)
Error in c("hello", "hello", "hello")^c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(1L,1L,1L)
Error in c("hello", "hello", "hello")^c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(1i,1i,1i)
Error in c("hello", "hello", "hello")^c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello")^c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello")^c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello")^c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello")^c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello")^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%"hello"
Error in c(1, 1, 1)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%FALSE
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%as.raw(10)
Error in c(1, 1, 1)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c("hello","hello","hello")
Error in c(1, 1, 1)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*"hello"
Error in c(1, 1, 1) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*1i
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*3.4
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*as.raw(10)
Error in c(1, 1, 1) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c("hello","hello","hello")
Error in c(1, 1, 1) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+"hello"
Error in c(1, 1, 1) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+1
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+1L
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+1i
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+3.4
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+TRUE
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+as.raw(10)
Error in c(1, 1, 1) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c("hello","hello","hello")
Error in c(1, 1, 1) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-"hello"
Error in c(1, 1, 1) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-1i
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-3.4
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-as.raw(10)
Error in c(1, 1, 1) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c("hello","hello","hello")
Error in c(1, 1, 1) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/"hello"
Error in c(1, 1, 1)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(-0.0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/1i
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/3.4
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/FALSE
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/as.raw(10)
Error in c(1, 1, 1)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c("hello","hello","hello")
Error in c(1, 1, 1)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^"hello"
Error in c(1, 1, 1)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(-(0/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(-(1/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(0/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(1+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(1/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(3.4+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^1i
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^as.raw(10)
Error in c(1, 1, 1)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c("hello","hello","hello")
Error in c(1, 1, 1)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%"hello"
Error in c(1L, 1L, 1L)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%FALSE
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%as.raw(10)
Error in c(1L, 1L, 1L)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c("hello","hello","hello")
Error in c(1L, 1L, 1L)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*"hello"
Error in c(1L, 1L, 1L) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*1i
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*3.4
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*as.raw(10)
Error in c(1L, 1L, 1L) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c("hello","hello","hello")
Error in c(1L, 1L, 1L) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+"hello"
Error in c(1L, 1L, 1L) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+1
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+1L
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+1i
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+3.4
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+TRUE
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+as.raw(10)
Error in c(1L, 1L, 1L) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c("hello","hello","hello")
Error in c(1L, 1L, 1L) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-"hello"
Error in c(1L, 1L, 1L) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-1i
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-3.4
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-as.raw(10)
Error in c(1L, 1L, 1L) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c("hello","hello","hello")
Error in c(1L, 1L, 1L) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/"hello"
Error in c(1L, 1L, 1L)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(-0.0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/1i
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/3.4
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/FALSE
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/as.raw(10)
Error in c(1L, 1L, 1L)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c("hello","hello","hello")
Error in c(1L, 1L, 1L)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^"hello"
Error in c(1L, 1L, 1L)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(-(0/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(-(1/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(0/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(1+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(1/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(3.4+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^1i
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^as.raw(10)
Error in c(1L, 1L, 1L)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c("hello","hello","hello")
Error in c(1L, 1L, 1L)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%"hello"
Error in c(0+1i, 0+1i, 0+1i)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(-(0/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(-(1/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(-0.0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(0/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(1+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(1/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(3.4+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%1
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%1L
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%3.4
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%FALSE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%TRUE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%as.raw(10)
Error in c(0+1i, 0+1i, 0+1i)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(1,1,1)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(1L,1L,1L)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(3.4,3.4,3.4)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(FALSE,FALSE,FALSE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(TRUE,TRUE,TRUE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*"hello"
Error in c(0+1i, 0+1i, 0+1i) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(-(1/0))
[1] NaN-Infi NaN-Infi NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(-0.0)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(1/0)
[1] NaN+Infi NaN+Infi NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*1
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*1L
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*1i
[1] -1+0i -1+0i -1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*3.4
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*FALSE
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*TRUE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*as.raw(10)
Error in c(0+1i, 0+1i, 0+1i) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(1i,1i,1i)
[1] -1+0i -1+0i -1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(3.4,3.4,3.4)
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(FALSE,FALSE,FALSE)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+"hello"
Error in c(0+1i, 0+1i, 0+1i) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(-(1/0))
[1] -Inf+1i -Inf+1i -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(-0.0)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(1/0)
[1] Inf+1i Inf+1i Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+1
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+1L
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+1i
[1] 0+2i 0+2i 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+3.4
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+FALSE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+TRUE
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+as.raw(10)
Error in c(0+1i, 0+1i, 0+1i) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(1,1,1)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(1L,1L,1L)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(1i,1i,1i)
[1] 0+2i 0+2i 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(3.4,3.4,3.4)
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(FALSE,FALSE,FALSE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(TRUE,TRUE,TRUE)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-"hello"
Error in c(0+1i, 0+1i, 0+1i) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(-(1/0))
[1] Inf+1i Inf+1i Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(-0.0)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(1/0)
[1] -Inf+1i -Inf+1i -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-1
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-1L
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-1i
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-3.4
[1] -3.4+1i -3.4+1i -3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-FALSE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-TRUE
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-as.raw(10)
Error in c(0+1i, 0+1i, 0+1i) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(1,1,1)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(1L,1L,1L)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(3.4,3.4,3.4)
[1] -3.4+1i -3.4+1i -3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(FALSE,FALSE,FALSE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(TRUE,TRUE,TRUE)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/"hello"
Error in c(0+1i, 0+1i, 0+1i)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(-(1/0))
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(-0.0)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(1/0)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/1
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/1L
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/1i
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/3.4
[1] 0+0.2941176i 0+0.2941176i 0+0.2941176i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/FALSE
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/TRUE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/as.raw(10)
Error in c(0+1i, 0+1i, 0+1i)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(3.4,3.4,3.4)
[1] 0+0.2941176i 0+0.2941176i 0+0.2941176i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(FALSE,FALSE,FALSE)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^"hello"
Error in c(0+1i, 0+1i, 0+1i)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(-(1/0))
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(-0.0)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(1/0)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^1
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^1L
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^1i
[1] 0.2078796+0i 0.2078796+0i 0.2078796+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^3.4
[1] 0.5877853-0.809017i 0.5877853-0.809017i 0.5877853-0.809017i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^FALSE
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^TRUE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^as.raw(10)
Error in c(0+1i, 0+1i, 0+1i)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(1i,1i,1i)
[1] 0.2078796+0i 0.2078796+0i 0.2078796+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(3.4,3.4,3.4)
[1] 0.5877853-0.809017i 0.5877853-0.809017i 0.5877853-0.809017i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(FALSE,FALSE,FALSE)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%"hello"
Error in c(3.4, 3.4, 3.4)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%1
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%1L
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%FALSE
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%TRUE
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%as.raw(10)
Error in c(3.4, 3.4, 3.4)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(1,1,1)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(1L,1L,1L)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(TRUE,TRUE,TRUE)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*"hello"
Error in c(3.4, 3.4, 3.4) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*1
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*1L
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*1i
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*3.4
[1] 11.56 11.56 11.56

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*TRUE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*as.raw(10)
Error in c(3.4, 3.4, 3.4) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(1i,1i,1i)
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(3.4,3.4,3.4)
[1] 11.56 11.56 11.56

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+"hello"
Error in c(3.4, 3.4, 3.4) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(-0.0)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+1
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+1L
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+1i
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+3.4
[1] 6.8 6.8 6.8

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+FALSE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+TRUE
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+as.raw(10)
Error in c(3.4, 3.4, 3.4) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(1,1,1)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(1L,1L,1L)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(1i,1i,1i)
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(3.4,3.4,3.4)
[1] 6.8 6.8 6.8

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(FALSE,FALSE,FALSE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(TRUE,TRUE,TRUE)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-"hello"
Error in c(3.4, 3.4, 3.4) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(-0.0)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-1
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-1L
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-1i
[1] 3.4-1i 3.4-1i 3.4-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-FALSE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-TRUE
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-as.raw(10)
Error in c(3.4, 3.4, 3.4) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(1,1,1)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(1L,1L,1L)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(1i,1i,1i)
[1] 3.4-1i 3.4-1i 3.4-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(FALSE,FALSE,FALSE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(TRUE,TRUE,TRUE)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/"hello"
Error in c(3.4, 3.4, 3.4)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(-0.0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/1
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/1L
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/1i
[1] 0-3.4i 0-3.4i 0-3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/FALSE
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/TRUE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/as.raw(10)
Error in c(3.4, 3.4, 3.4)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(1i,1i,1i)
[1] 0-3.4i 0-3.4i 0-3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^"hello"
Error in c(3.4, 3.4, 3.4)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^1
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^1L
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^1i
[1] 0.3400978+0.9403901i 0.3400978+0.9403901i 0.3400978+0.9403901i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^3.4
[1] 64.12514 64.12514 64.12514

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^TRUE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^as.raw(10)
Error in c(3.4, 3.4, 3.4)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(1i,1i,1i)
[1] 0.3400978+0.9403901i 0.3400978+0.9403901i 0.3400978+0.9403901i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(3.4,3.4,3.4)
[1] 64.12514 64.12514 64.12514

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%"hello"
Error in c(FALSE, FALSE, FALSE)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%FALSE
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%as.raw(10)
Error in c(FALSE, FALSE, FALSE)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*"hello"
Error in c(FALSE, FALSE, FALSE) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*1i
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*as.raw(10)
Error in c(FALSE, FALSE, FALSE) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+"hello"
Error in c(FALSE, FALSE, FALSE) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+1i
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+3.4
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+as.raw(10)
Error in c(FALSE, FALSE, FALSE) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-"hello"
Error in c(FALSE, FALSE, FALSE) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-1
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-1L
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-1i
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-3.4
[1] -3.4 -3.4 -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-TRUE
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-as.raw(10)
Error in c(FALSE, FALSE, FALSE) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(1,1,1)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(1L,1L,1L)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(3.4,3.4,3.4)
[1] -3.4 -3.4 -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(TRUE,TRUE,TRUE)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/"hello"
Error in c(FALSE, FALSE, FALSE)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/1i
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/FALSE
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/as.raw(10)
Error in c(FALSE, FALSE, FALSE)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^"hello"
Error in c(FALSE, FALSE, FALSE)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^((0/0)+1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(1i+NA)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^1i
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^as.raw(10)
Error in c(FALSE, FALSE, FALSE)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%"hello"
Error in c(NULL, NULL, NULL)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%as.raw(10)
Error in c(NULL, NULL, NULL)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c("hello","hello","hello")
Error in c(NULL, NULL, NULL)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*"hello"
Error in c(NULL, NULL, NULL) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*as.raw(10)
Error in c(NULL, NULL, NULL) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c("hello","hello","hello")
Error in c(NULL, NULL, NULL) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+"hello"
Error in c(NULL, NULL, NULL) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+as.raw(10)
Error in c(NULL, NULL, NULL) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c("hello","hello","hello")
Error in c(NULL, NULL, NULL) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-"hello"
Error in c(NULL, NULL, NULL) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-as.raw(10)
Error in c(NULL, NULL, NULL) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c("hello","hello","hello")
Error in c(NULL, NULL, NULL) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/"hello"
Error in c(NULL, NULL, NULL)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/as.raw(10)
Error in c(NULL, NULL, NULL)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c("hello","hello","hello")
Error in c(NULL, NULL, NULL)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^"hello"
Error in c(NULL, NULL, NULL)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^as.raw(10)
Error in c(NULL, NULL, NULL)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c("hello","hello","hello")
Error in c(NULL, NULL, NULL)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%"hello"
Error in c(TRUE, TRUE, TRUE)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%FALSE
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%as.raw(10)
Error in c(TRUE, TRUE, TRUE)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*"hello"
Error in c(TRUE, TRUE, TRUE) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*1i
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*3.4
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*as.raw(10)
Error in c(TRUE, TRUE, TRUE) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+"hello"
Error in c(TRUE, TRUE, TRUE) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+1
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+1L
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+1i
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+3.4
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+TRUE
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+as.raw(10)
Error in c(TRUE, TRUE, TRUE) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-"hello"
Error in c(TRUE, TRUE, TRUE) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-1i
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-3.4
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-as.raw(10)
Error in c(TRUE, TRUE, TRUE) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/"hello"
Error in c(TRUE, TRUE, TRUE)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(-0.0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/1i
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/3.4
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/FALSE
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/as.raw(10)
Error in c(TRUE, TRUE, TRUE)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^"hello"
Error in c(TRUE, TRUE, TRUE)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(-(0/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(-(1/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(0/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(1+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(1/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(3.4+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^1i
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^as.raw(10)
Error in c(TRUE, TRUE, TRUE)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10))%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%1
Error in c(as.raw(10), as.raw(10), as.raw(10))%%1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%1L
Error in c(as.raw(10), as.raw(10), as.raw(10))%%1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%1i
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%3.4
Error in c(as.raw(10), as.raw(10), as.raw(10))%%3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10))%%FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%NULL
Error in c(as.raw(10), as.raw(10), as.raw(10))%%NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10))%%TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10)) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*1
Error in c(as.raw(10), as.raw(10), as.raw(10)) * 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*1L
Error in c(as.raw(10), as.raw(10), as.raw(10)) * 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*1i
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*3.4
Error in c(as.raw(10), as.raw(10), as.raw(10)) * 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10)) * FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*NULL
Error in c(as.raw(10), as.raw(10), as.raw(10)) * NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10)) * TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10)) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+1
Error in c(as.raw(10), as.raw(10), as.raw(10)) + 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+1L
Error in c(as.raw(10), as.raw(10), as.raw(10)) + 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+1i
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+3.4
Error in c(as.raw(10), as.raw(10), as.raw(10)) + 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10)) + FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+NULL
Error in c(as.raw(10), as.raw(10), as.raw(10)) + NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10)) + TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10)) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-1
Error in c(as.raw(10), as.raw(10), as.raw(10)) - 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-1L
Error in c(as.raw(10), as.raw(10), as.raw(10)) - 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-1i
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-3.4
Error in c(as.raw(10), as.raw(10), as.raw(10)) - 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10)) - FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-NULL
Error in c(as.raw(10), as.raw(10), as.raw(10)) - NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10)) - TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10))/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))/((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))/(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))/(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/1
Error in c(as.raw(10), as.raw(10), as.raw(10))/1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/1L
Error in c(as.raw(10), as.raw(10), as.raw(10))/1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/1i
Error in c(as.raw(10), as.raw(10), as.raw(10))/(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/3.4
Error in c(as.raw(10), as.raw(10), as.raw(10))/3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10))/FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/NULL
Error in c(as.raw(10), as.raw(10), as.raw(10))/NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10))/TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10))/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10))/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10))^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))^((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))^(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))^(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^1
Error in c(as.raw(10), as.raw(10), as.raw(10))^1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^1L
Error in c(as.raw(10), as.raw(10), as.raw(10))^1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^1i
Error in c(as.raw(10), as.raw(10), as.raw(10))^(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^3.4
Error in c(as.raw(10), as.raw(10), as.raw(10))^3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10))^FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^NULL
Error in c(as.raw(10), as.raw(10), as.raw(10))^NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10))^TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10))^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10))^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testComplex
#{ 1i }
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testDefaultVariables
#{ .Platform$endian }
[1] "little"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- (1:3)+0.1; f(x); x[1]
[1] 1.1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- 1:3; f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- 1; f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- 1L; f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- c(1, 2, 3); f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- c(1L, 2L, 3L); f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionLookup
#{ abs }
function (x)  .Primitive("abs")

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionLookup
#{ f<-1; f() }
Error: could not find function "f"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testMatrixAccess
#x <- matrix(c(1,2,3,4),2) ; x[,2]
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testMatrixAccess
#x <- matrix(c(1,2,3,4),2) ; x[,]
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testMatrixAccess
#x <- matrix(c(1,2,3,4),2) ; x[2,]
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#"hello"
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#FALSE
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#NULL
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#TRUE
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#as.raw(10)
[1] 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c("hello","hello","hello")
[1] "hello" "hello" "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(FALSE,FALSE,FALSE)
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(NULL,NULL,NULL)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(TRUE,TRUE,TRUE)
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(as.raw(10),as.raw(10),as.raw(10))
[1] 0a 0a 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#list(1, 2, 3)
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleValues.testSpecial
#{ Inf }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testSpecial
#{ NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testSpecial
#{ NULL }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testSpecial
#{ NaN }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testStrings
#{ "hello" }
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTranspose
#x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); dim(x) <- c(2L,5L); x <- t(x); dim(x) <- NULL; x
 [1]  1  3  5  7  9  2  4  6  8 10

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTranspose
#x <- c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L); dim(x) <- c(2L,5L); x <- t(x); dim(x) <- NULL; x
 [1]  1  3  5  7  9  2  4  6  8 10

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof("hello")
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(((0/0)+1i))
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((-(0/0)))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((-(1/0)))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((-0.0))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((0/0))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((1+NA))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((1/0))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((1i+NA))
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((3.4+NA))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(1)
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(1L)
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(1i)
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(3.4)
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(FALSE)
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(NULL)
[1] "NULL"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(TRUE)
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(as.raw(10))
[1] "raw"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c("hello","hello","hello"))
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(1,1,1))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(1L,1L,1L))
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(1i,1i,1i))
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(3.4,3.4,3.4))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(FALSE,FALSE,FALSE))
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(NULL,NULL,NULL))
[1] "NULL"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(TRUE,TRUE,TRUE))
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(as.raw(10),as.raw(10),as.raw(10)))
[1] "raw"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(list(1, 2, 3))
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs("hello")
Error in abs("hello") : non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(((0/0)+1i))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((-(0/0)))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((-(1/0)))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((-0.0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((1+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((1i+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((3.4+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(1)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(1L)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(1i)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(3.4)
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(FALSE)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(NULL)
Error in abs(NULL) : non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(TRUE)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(as.raw(10))
Error in abs(as.raw(10)) : non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c("hello","hello","hello"))
Error in abs(c("hello", "hello", "hello")) :
  non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(1,1,1))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(1L,1L,1L))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(1i,1i,1i))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(3.4,3.4,3.4))
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(FALSE,FALSE,FALSE))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(NULL,NULL,NULL))
Error in abs(c(NULL, NULL, NULL)) :
  non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(TRUE,TRUE,TRUE))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(as.raw(10),as.raw(10),as.raw(10)))
Error in abs(c(as.raw(10), as.raw(10), as.raw(10))) :
  non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length("hello")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(((0/0)+1i))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((-(0/0)))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((-(1/0)))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((-0.0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((0/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((1+NA))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((1/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((1i+NA))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((3.4+NA))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(1)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(1L)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(1i)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(3.4)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(FALSE)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(NULL)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(TRUE)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(as.raw(10))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c("hello","hello","hello"))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(1,1,1))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(1L,1L,1L))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(1i,1i,1i))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(3.4,3.4,3.4))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(FALSE,FALSE,FALSE))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(NULL,NULL,NULL))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(TRUE,TRUE,TRUE))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(as.raw(10),as.raw(10),as.raw(10)))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names("hello")
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(((0/0)+1i))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((-(0/0)))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((-(1/0)))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((-0.0))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((0/0))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((1+NA))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((1/0))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((1i+NA))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((3.4+NA))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(1)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(1L)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(1i)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(3.4)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(FALSE)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(NULL)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(TRUE)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(as.raw(10))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c("hello","hello","hello"))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(1,1,1))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(1L,1L,1L))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(1i,1i,1i))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(3.4,3.4,3.4))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(FALSE,FALSE,FALSE))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(NULL,NULL,NULL))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(TRUE,TRUE,TRUE))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(as.raw(10),as.raw(10),as.raw(10)))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev("hello")
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(((0/0)+1i))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((-(0/0)))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((-(1/0)))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((-0.0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((1+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((1i+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((3.4+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(1)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(1L)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(1i)
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(3.4)
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(FALSE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(NULL)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(TRUE)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(as.raw(10))
[1] 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c("hello","hello","hello"))
[1] "hello" "hello" "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(1,1,1))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(1L,1L,1L))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(1i,1i,1i))
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(3.4,3.4,3.4))
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(FALSE,FALSE,FALSE))
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(NULL,NULL,NULL))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(TRUE,TRUE,TRUE))
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(as.raw(10),as.raw(10),as.raw(10)))
[1] 0a 0a 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnlist
#x <- list(1, 2, 3); unlist(x);
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnlist
#x <- list(1, 2, NA); unlist(x);
[1]  1  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnlist
#x <- list(1, TRUE, 3); unlist(x);
[1] 1 1 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnlist
#x <- list(1L, 2L, 3L); unlist(x);
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[(1+NA)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[-10]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[-2]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[0]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[10]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[1:1]
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[2:4]
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[2]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[4:2]
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),-10)]
Error in x[c((1 + NA), (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),-2)]
Error in x[c((1 + NA), (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),2)]
[1] NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10)]
Error in x[c((1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,(1+NA))]
Error in x[c((1 + NA), -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,-10)]
Error in x[c((1 + NA), -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,-2)]
Error in x[c((1 + NA), -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,0)]
Error in x[c((1 + NA), -10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,10)]
Error in x[c((1 + NA), -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,2)]
Error in x[c((1 + NA), -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2)]
Error in x[c((1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,(1+NA))]
Error in x[c((1 + NA), -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,-10)]
Error in x[c((1 + NA), -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,-2)]
Error in x[c((1 + NA), -2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,0)]
Error in x[c((1 + NA), -2, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,10)]
Error in x[c((1 + NA), -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,2)]
Error in x[c((1 + NA), -2, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,-10)]
Error in x[c((1 + NA), 0, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,-2)]
Error in x[c((1 + NA), 0, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,-10)]
Error in x[c((1 + NA), 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,-2)]
Error in x[c((1 + NA), 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,2)]
[1] NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,(1+NA))]
[1] NA  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,-10)]
Error in x[c((1 + NA), 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,-2)]
Error in x[c((1 + NA), 2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,0)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,10)]
[1] NA  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,2)]
[1] NA  1  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA))]
Error in x[c(-10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),(1+NA))]
Error in x[c(-10, (1 + NA), (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),-10)]
Error in x[c(-10, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),-2)]
Error in x[c(-10, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),0)]
Error in x[c(-10, (1 + NA), 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),10)]
Error in x[c(-10, (1 + NA), 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),2)]
Error in x[c(-10, (1 + NA), 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,(1+NA))]
Error in x[c(-10, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,0)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,10)]
Error in x[c(-10, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,2)]
Error in x[c(-10, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,(1+NA))]
Error in x[c(-10, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,10)]
Error in x[c(-10, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,2)]
Error in x[c(-10, -2, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,(1+NA))]
Error in x[c(-10, 0, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,0)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,10)]
Error in x[c(-10, 0, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,2)]
Error in x[c(-10, 0, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10)]
Error in x[c(-10, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,(1+NA))]
Error in x[c(-10, 10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,-10)]
Error in x[c(-10, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,-2)]
Error in x[c(-10, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,0)]
Error in x[c(-10, 10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,10)]
Error in x[c(-10, 10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,2)]
Error in x[c(-10, 10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2)]
Error in x[c(-10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,(1+NA))]
Error in x[c(-10, 2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,-10)]
Error in x[c(-10, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,-2)]
Error in x[c(-10, 2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,0)]
Error in x[c(-10, 2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,10)]
Error in x[c(-10, 2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,2)]
Error in x[c(-10, 2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA))]
Error in x[c(-2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),(1+NA))]
Error in x[c(-2, (1 + NA), (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),-10)]
Error in x[c(-2, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),-2)]
Error in x[c(-2, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),0)]
Error in x[c(-2, (1 + NA), 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),10)]
Error in x[c(-2, (1 + NA), 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),2)]
Error in x[c(-2, (1 + NA), 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,(1+NA))]
Error in x[c(-2, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,10)]
Error in x[c(-2, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,2)]
Error in x[c(-2, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,(1+NA))]
Error in x[c(-2, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,10)]
Error in x[c(-2, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,2)]
Error in x[c(-2, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,(1+NA))]
Error in x[c(-2, 0, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,10)]
Error in x[c(-2, 0, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,2)]
Error in x[c(-2, 0, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10)]
Error in x[c(-2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,(1+NA))]
Error in x[c(-2, 10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,-10)]
Error in x[c(-2, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,-2)]
Error in x[c(-2, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,0)]
Error in x[c(-2, 10, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,10)]
Error in x[c(-2, 10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,2)]
Error in x[c(-2, 10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2)]
Error in x[c(-2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,(1+NA))]
Error in x[c(-2, 2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,-10)]
Error in x[c(-2, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,-2)]
Error in x[c(-2, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,0)]
Error in x[c(-2, 2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,10)]
Error in x[c(-2, 2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,2)]
Error in x[c(-2, 2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA))]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),-10)]
Error in x[c(0, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),-2)]
Error in x[c(0, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,(1+NA))]
Error in x[c(0, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,0)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,10)]
Error in x[c(0, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,2)]
Error in x[c(0, -10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,(1+NA))]
Error in x[c(0, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,10)]
Error in x[c(0, -2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,2)]
Error in x[c(0, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0)]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,(1+NA))]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,0)]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,10)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,2)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,-10)]
Error in x[c(0, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,-2)]
Error in x[c(0, 10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,(1+NA))]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,-10)]
Error in x[c(0, 2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,-2)]
Error in x[c(0, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,0)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,10)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,2)]
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),-10)]
Error in x[c(10, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),-2)]
Error in x[c(10, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),2)]
[1] NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10)]
Error in x[c(10, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,(1+NA))]
Error in x[c(10, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,-10)]
Error in x[c(10, -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,-2)]
Error in x[c(10, -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,0)]
Error in x[c(10, -10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,10)]
Error in x[c(10, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,2)]
Error in x[c(10, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2)]
Error in x[c(10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,(1+NA))]
Error in x[c(10, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,-10)]
Error in x[c(10, -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,-2)]
Error in x[c(10, -2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,0)]
Error in x[c(10, -2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,10)]
Error in x[c(10, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,2)]
Error in x[c(10, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,-10)]
Error in x[c(10, 0, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,-2)]
Error in x[c(10, 0, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,-10)]
Error in x[c(10, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,-2)]
Error in x[c(10, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,2)]
[1] NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,(1+NA))]
[1] NA  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,-10)]
Error in x[c(10, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,-2)]
Error in x[c(10, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,0)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,10)]
[1] NA  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,2)]
[1] NA  1  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA))]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),(1+NA))]
[1]  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),-10)]
Error in x[c(2, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),-2)]
Error in x[c(2, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),0)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),10)]
[1]  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),2)]
[1]  1 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10)]
Error in x[c(2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,(1+NA))]
Error in x[c(2, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,-10)]
Error in x[c(2, -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,-2)]
Error in x[c(2, -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,0)]
Error in x[c(2, -10, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,10)]
Error in x[c(2, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,2)]
Error in x[c(2, -10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2)]
Error in x[c(2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,(1+NA))]
Error in x[c(2, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,-10)]
Error in x[c(2, -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,-2)]
Error in x[c(2, -2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,0)]
Error in x[c(2, -2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,10)]
Error in x[c(2, -2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,2)]
Error in x[c(2, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,(1+NA))]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,-10)]
Error in x[c(2, 0, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,-2)]
Error in x[c(2, 0, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,0)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,10)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,2)]
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,(1+NA))]
[1]  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,-10)]
Error in x[c(2, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,-2)]
Error in x[c(2, 10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,0)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,10)]
[1]  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,2)]
[1]  1 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2)]
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,(1+NA))]
[1]  1  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,-10)]
Error in x[c(2, 2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,-2)]
Error in x[c(2, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,0)]
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,10)]
[1]  1  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,2)]
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[(1+NA)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[-10]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[-2]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[0]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[10]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[1:1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[2:4]
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[2]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[4:2]
[1] 4 3 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-10)]
Error in x[c((1 + NA), (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-2)]
Error in x[c((1 + NA), (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),2)]
[1] NA NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10)]
Error in x[c((1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,(1+NA))]
Error in x[c((1 + NA), -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-10)]
Error in x[c((1 + NA), -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-2)]
Error in x[c((1 + NA), -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,0)]
Error in x[c((1 + NA), -10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,10)]
Error in x[c((1 + NA), -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,2)]
Error in x[c((1 + NA), -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2)]
Error in x[c((1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,(1+NA))]
Error in x[c((1 + NA), -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-10)]
Error in x[c((1 + NA), -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-2)]
Error in x[c((1 + NA), -2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,0)]
Error in x[c((1 + NA), -2, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,10)]
Error in x[c((1 + NA), -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,2)]
Error in x[c((1 + NA), -2, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-10)]
Error in x[c((1 + NA), 0, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-2)]
Error in x[c((1 + NA), 0, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-10)]
Error in x[c((1 + NA), 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-2)]
Error in x[c((1 + NA), 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,2)]
[1] NA NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,(1+NA))]
[1] NA  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-10)]
Error in x[c((1 + NA), 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-2)]
Error in x[c((1 + NA), 2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,0)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,10)]
[1] NA  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,2)]
[1] NA  2  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA))]
Error in x[c(-10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),(1+NA))]
Error in x[c(-10, (1 + NA), (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-10)]
Error in x[c(-10, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-2)]
Error in x[c(-10, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),0)]
Error in x[c(-10, (1 + NA), 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),10)]
Error in x[c(-10, (1 + NA), 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),2)]
Error in x[c(-10, (1 + NA), 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,(1+NA))]
Error in x[c(-10, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,0)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,10)]
Error in x[c(-10, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,2)]
Error in x[c(-10, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,(1+NA))]
Error in x[c(-10, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,10)]
Error in x[c(-10, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,2)]
Error in x[c(-10, -2, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,(1+NA))]
Error in x[c(-10, 0, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,0)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,10)]
Error in x[c(-10, 0, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,2)]
Error in x[c(-10, 0, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10)]
Error in x[c(-10, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,(1+NA))]
Error in x[c(-10, 10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-10)]
Error in x[c(-10, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-2)]
Error in x[c(-10, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,0)]
Error in x[c(-10, 10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,10)]
Error in x[c(-10, 10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,2)]
Error in x[c(-10, 10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2)]
Error in x[c(-10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,(1+NA))]
Error in x[c(-10, 2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-10)]
Error in x[c(-10, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-2)]
Error in x[c(-10, 2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,0)]
Error in x[c(-10, 2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,10)]
Error in x[c(-10, 2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,2)]
Error in x[c(-10, 2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA))]
Error in x[c(-2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),(1+NA))]
Error in x[c(-2, (1 + NA), (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-10)]
Error in x[c(-2, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-2)]
Error in x[c(-2, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),0)]
Error in x[c(-2, (1 + NA), 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),10)]
Error in x[c(-2, (1 + NA), 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),2)]
Error in x[c(-2, (1 + NA), 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,(1+NA))]
Error in x[c(-2, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,10)]
Error in x[c(-2, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,2)]
Error in x[c(-2, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,(1+NA))]
Error in x[c(-2, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,10)]
Error in x[c(-2, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,2)]
Error in x[c(-2, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,(1+NA))]
Error in x[c(-2, 0, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,10)]
Error in x[c(-2, 0, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,2)]
Error in x[c(-2, 0, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10)]
Error in x[c(-2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,(1+NA))]
Error in x[c(-2, 10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-10)]
Error in x[c(-2, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-2)]
Error in x[c(-2, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,0)]
Error in x[c(-2, 10, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,10)]
Error in x[c(-2, 10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,2)]
Error in x[c(-2, 10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2)]
Error in x[c(-2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,(1+NA))]
Error in x[c(-2, 2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-10)]
Error in x[c(-2, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-2)]
Error in x[c(-2, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,0)]
Error in x[c(-2, 2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,10)]
Error in x[c(-2, 2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,2)]
Error in x[c(-2, 2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA))]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-10)]
Error in x[c(0, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-2)]
Error in x[c(0, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,(1+NA))]
Error in x[c(0, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,0)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,10)]
Error in x[c(0, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,2)]
Error in x[c(0, -10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,(1+NA))]
Error in x[c(0, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,10)]
Error in x[c(0, -2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,2)]
Error in x[c(0, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0)]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,(1+NA))]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,0)]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,10)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,2)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-10)]
Error in x[c(0, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-2)]
Error in x[c(0, 10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,(1+NA))]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-10)]
Error in x[c(0, 2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-2)]
Error in x[c(0, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,0)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,10)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,2)]
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-10)]
Error in x[c(10, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-2)]
Error in x[c(10, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),2)]
[1] NA NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10)]
Error in x[c(10, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,(1+NA))]
Error in x[c(10, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-10)]
Error in x[c(10, -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-2)]
Error in x[c(10, -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,0)]
Error in x[c(10, -10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,10)]
Error in x[c(10, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,2)]
Error in x[c(10, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2)]
Error in x[c(10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,(1+NA))]
Error in x[c(10, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-10)]
Error in x[c(10, -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-2)]
Error in x[c(10, -2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,0)]
Error in x[c(10, -2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,10)]
Error in x[c(10, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,2)]
Error in x[c(10, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-10)]
Error in x[c(10, 0, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-2)]
Error in x[c(10, 0, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-10)]
Error in x[c(10, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-2)]
Error in x[c(10, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,2)]
[1] NA NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,(1+NA))]
[1] NA  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-10)]
Error in x[c(10, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-2)]
Error in x[c(10, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,0)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,10)]
[1] NA  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,2)]
[1] NA  2  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA))]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),(1+NA))]
[1]  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-10)]
Error in x[c(2, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-2)]
Error in x[c(2, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),0)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),10)]
[1]  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),2)]
[1]  2 NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10)]
Error in x[c(2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,(1+NA))]
Error in x[c(2, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-10)]
Error in x[c(2, -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-2)]
Error in x[c(2, -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,0)]
Error in x[c(2, -10, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,10)]
Error in x[c(2, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,2)]
Error in x[c(2, -10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2)]
Error in x[c(2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,(1+NA))]
Error in x[c(2, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-10)]
Error in x[c(2, -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-2)]
Error in x[c(2, -2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,0)]
Error in x[c(2, -2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,10)]
Error in x[c(2, -2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,2)]
Error in x[c(2, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,(1+NA))]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-10)]
Error in x[c(2, 0, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-2)]
Error in x[c(2, 0, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,0)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,10)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,2)]
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,(1+NA))]
[1]  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-10)]
Error in x[c(2, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-2)]
Error in x[c(2, 10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,0)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,10)]
[1]  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,2)]
[1]  2 NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2)]
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,(1+NA))]
[1]  2  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-10)]
Error in x[c(2, 2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-2)]
Error in x[c(2, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,0)]
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,10)]
[1]  2  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,2)]
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "7, 8, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "7, 8, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 8, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 8, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 8, 6" "7, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 8, 6" "7, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; codes <- c("A", "C", "G"); complements <- c("T", "G", "C"); x[codes] <- complements; as.vector(x);
[1] "T" "G" "C"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; codes <- c("A", "C", "G"); complements <- c("T", "G", "C"); x[codes] <- complements; names(x);
[1] "A" "C" "G"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; codes <- c("A", "C", "G"); complements <- c("T", "G", "C"); x[codes] <- complements; x[tolower(codes)] <- complements; as.vector(x);
[1] "T" "G" "C" "T" "G" "C"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; codes <- c("A", "C", "G"); complements <- c("T", "G", "C"); x[codes] <- complements; x[tolower(codes)] <- complements; names(x);
[1] "A" "C" "G" "a" "c" "g"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; names(x)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "A", "B")] <- "x"; as.vector(x["A"])
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "A", "B")] <- "x"; names(x["A"])
[1] "A"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "A", "B")] <- 1; names(x)
[1] "A" "B"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "B", "C")] <- c("x", "y", "z"); as.vector(x["B"])
[1] "y"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "B", "C")] <- c("x", "y", "z"); as.vector(x["C"])
[1] "z"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#y <- NULL; y[c("A", "A", "B")] <- 1; y <- NULL; names(y)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#v <- double(5) ; v[[3]] <- c(1) ; v
[1] 0 0 1 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#v <- double(5) ; v[[3]] <- matrix(c(1)) ; v
[1] 0 0 1 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[1:1] <- c(200L,300L); x
Warning message:
In x[1:1] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200   1   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[1:1] <- c(400L,500L,600L); x
Warning message:
In x[1:1] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[2:4] <- c(200L,300L); x
Warning message:
In x[2:4] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200 300 200   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[2:4] <- c(400L,500L,600L); x
[1]   0 400 500 600   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[4:2] <- c(200L,300L); x
Warning message:
In x[4:2] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200 300 200   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[4:2] <- c(400L,500L,600L); x
[1]   0 600 500 400   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),-10)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),-2)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),0)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),10)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),2)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,0)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,10)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,2)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,0)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,10)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,2)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),0)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),10)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),2)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,-10)] <- c(200L,300L); x
Warning message:
In x[c(-10, -10, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,0)] <- c(200L,300L); x
Warning message:
In x[c(-10, -10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,10)] <- c(200L,300L); x
Error in x[c(-10, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,10)] <- c(400L,500L,600L); x
Error in x[c(-10, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,2)] <- c(200L,300L); x
Error in x[c(-10, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,2)] <- c(400L,500L,600L); x
Error in x[c(-10, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,10)] <- c(200L,300L); x
Error in x[c(-10, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,10)] <- c(400L,500L,600L); x
Error in x[c(-10, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,2)] <- c(200L,300L); x
Error in x[c(-10, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,2)] <- c(400L,500L,600L); x
Error in x[c(-10, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 0, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,-10)] <- c(200L,300L); x
Warning message:
In x[c(-10, 0, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,0)] <- c(200L,300L); x
Warning message:
In x[c(-10, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,10)] <- c(200L,300L); x
Error in x[c(-10, 0, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 0, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,2)] <- c(200L,300L); x
Error in x[c(-10, 0, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 0, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,-10)] <- c(200L,300L); x
Error in x[c(-10, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,-10)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,-2)] <- c(200L,300L); x
Error in x[c(-10, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,-2)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,0)] <- c(200L,300L); x
Error in x[c(-10, 10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,0)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,10)] <- c(200L,300L); x
Error in x[c(-10, 10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,2)] <- c(200L,300L); x
Error in x[c(-10, 10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,-10)] <- c(200L,300L); x
Error in x[c(-10, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,-10)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,-2)] <- c(200L,300L); x
Error in x[c(-10, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,-2)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,0)] <- c(200L,300L); x
Error in x[c(-10, 2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,0)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,10)] <- c(200L,300L); x
Error in x[c(-10, 2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,2)] <- c(200L,300L); x
Error in x[c(-10, 2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),0)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),10)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),2)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,10)] <- c(200L,300L); x
Error in x[c(-2, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,10)] <- c(400L,500L,600L); x
Error in x[c(-2, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,2)] <- c(200L,300L); x
Error in x[c(-2, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,2)] <- c(400L,500L,600L); x
Error in x[c(-2, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,10)] <- c(200L,300L); x
Error in x[c(-2, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,10)] <- c(400L,500L,600L); x
Error in x[c(-2, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,2)] <- c(200L,300L); x
Error in x[c(-2, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,2)] <- c(400L,500L,600L); x
Error in x[c(-2, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 0, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,10)] <- c(200L,300L); x
Error in x[c(-2, 0, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 0, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,2)] <- c(200L,300L); x
Error in x[c(-2, 0, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 0, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,-10)] <- c(200L,300L); x
Error in x[c(-2, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,-10)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,-2)] <- c(200L,300L); x
Error in x[c(-2, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,-2)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,0)] <- c(200L,300L); x
Error in x[c(-2, 10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,0)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,10)] <- c(200L,300L); x
Error in x[c(-2, 10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,2)] <- c(200L,300L); x
Error in x[c(-2, 10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,-10)] <- c(200L,300L); x
Error in x[c(-2, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,-10)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,-2)] <- c(200L,300L); x
Error in x[c(-2, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,-2)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,0)] <- c(200L,300L); x
Error in x[c(-2, 2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,0)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,10)] <- c(200L,300L); x
Error in x[c(-2, 2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,2)] <- c(200L,300L); x
Error in x[c(-2, 2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(0, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),0)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),10)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),2)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(0, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,-10)] <- c(200L,300L); x
Warning message:
In x[c(0, -10, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,0)] <- c(200L,300L); x
Warning message:
In x[c(0, -10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,10)] <- c(200L,300L); x
Error in x[c(0, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,10)] <- c(400L,500L,600L); x
Error in x[c(0, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,2)] <- c(200L,300L); x
Error in x[c(0, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,2)] <- c(400L,500L,600L); x
Error in x[c(0, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(0, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,10)] <- c(200L,300L); x
Error in x[c(0, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,10)] <- c(400L,500L,600L); x
Error in x[c(0, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,2)] <- c(200L,300L); x
Error in x[c(0, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,2)] <- c(400L,500L,600L); x
Error in x[c(0, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,-10)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,0)] <- c(200L,300L); x
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,0)] <- c(400L,500L,600L); x
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,10)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,2)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 400   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,-10)] <- c(200L,300L); x
Error in x[c(0, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,-10)] <- c(400L,500L,600L); x
Error in x[c(0, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,-2)] <- c(200L,300L); x
Error in x[c(0, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,-2)] <- c(400L,500L,600L); x
Error in x[c(0, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,0)] <- c(200L,300L); x
Warning message:
In x[c(0, 10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,10)] <- c(200L,300L); x
 [1]   0   1   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,2)] <- c(200L,300L); x
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 500   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,-10)] <- c(200L,300L); x
Error in x[c(0, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,-10)] <- c(400L,500L,600L); x
Error in x[c(0, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,-2)] <- c(200L,300L); x
Error in x[c(0, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,-2)] <- c(400L,500L,600L); x
Error in x[c(0, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,0)] <- c(200L,300L); x
Warning message:
In x[c(0, 2, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 400   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,10)] <- c(200L,300L); x
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 400   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,2)] <- c(200L,300L); x
[1]   0 300   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 500   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(10, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),0)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),10)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),2)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(10, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,-10)] <- c(200L,300L); x
Error in x[c(10, -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,-10)] <- c(400L,500L,600L); x
Error in x[c(10, -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,-2)] <- c(200L,300L); x
Error in x[c(10, -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,-2)] <- c(400L,500L,600L); x
Error in x[c(10, -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,0)] <- c(200L,300L); x
Error in x[c(10, -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,0)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,10)] <- c(200L,300L); x
Error in x[c(10, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,10)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,2)] <- c(200L,300L); x
Error in x[c(10, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,2)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(10, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,-10)] <- c(200L,300L); x
Error in x[c(10, -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,-10)] <- c(400L,500L,600L); x
Error in x[c(10, -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,-2)] <- c(200L,300L); x
Error in x[c(10, -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,-2)] <- c(400L,500L,600L); x
Error in x[c(10, -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,0)] <- c(200L,300L); x
Error in x[c(10, -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,0)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,10)] <- c(200L,300L); x
Error in x[c(10, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,10)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,2)] <- c(200L,300L); x
Error in x[c(10, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,2)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,-10)] <- c(200L,300L); x
Error in x[c(10, 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,-2)] <- c(200L,300L); x
Error in x[c(10, 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,0)] <- c(200L,300L); x
Warning message:
In x[c(10, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,10)] <- c(200L,300L); x
 [1]   0   1   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,2)] <- c(200L,300L); x
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 500   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,-10)] <- c(200L,300L); x
Error in x[c(10, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,-2)] <- c(200L,300L); x
Error in x[c(10, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,0)] <- c(200L,300L); x
 [1]   0   1   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,10)] <- c(200L,300L); x
Warning message:
In x[c(10, 10, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,10)] <- c(400L,500L,600L); x
 [1]   0   1   2   3   4  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,2)] <- c(200L,300L); x
Warning message:
In x[c(10, 10, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,2)] <- c(400L,500L,600L); x
 [1]   0 600   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,-10)] <- c(200L,300L); x
Error in x[c(10, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,-2)] <- c(200L,300L); x
Error in x[c(10, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,0)] <- c(200L,300L); x
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 500   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,10)] <- c(200L,300L); x
Warning message:
In x[c(10, 2, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,10)] <- c(400L,500L,600L); x
 [1]   0 500   2   3   4  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,2)] <- c(200L,300L); x
Warning message:
In x[c(10, 2, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 200   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,2)] <- c(400L,500L,600L); x
 [1]   0 600   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(2, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),0)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),10)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),2)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(2, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,-10)] <- c(200L,300L); x
Error in x[c(2, -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,-10)] <- c(400L,500L,600L); x
Error in x[c(2, -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,-2)] <- c(200L,300L); x
Error in x[c(2, -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,-2)] <- c(400L,500L,600L); x
Error in x[c(2, -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,0)] <- c(200L,300L); x
Error in x[c(2, -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,0)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,10)] <- c(200L,300L); x
Error in x[c(2, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,10)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,2)] <- c(200L,300L); x
Error in x[c(2, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,2)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(2, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,-10)] <- c(200L,300L); x
Error in x[c(2, -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,-10)] <- c(400L,500L,600L); x
Error in x[c(2, -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,-2)] <- c(200L,300L); x
Error in x[c(2, -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,-2)] <- c(400L,500L,600L); x
Error in x[c(2, -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,0)] <- c(200L,300L); x
Error in x[c(2, -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,0)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,10)] <- c(200L,300L); x
Error in x[c(2, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,10)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,2)] <- c(200L,300L); x
Error in x[c(2, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,2)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,-10)] <- c(200L,300L); x
Error in x[c(2, 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,-2)] <- c(200L,300L); x
Error in x[c(2, 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,0)] <- c(200L,300L); x
Warning message:
In x[c(2, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 400   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,10)] <- c(200L,300L); x
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 400   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,2)] <- c(200L,300L); x
[1]   0 300   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 500   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,-10)] <- c(200L,300L); x
Error in x[c(2, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,-2)] <- c(200L,300L); x
Error in x[c(2, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,0)] <- c(200L,300L); x
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 400   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,10)] <- c(200L,300L); x
Warning message:
In x[c(2, 10, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 200   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,10)] <- c(400L,500L,600L); x
 [1]   0 400   2   3   4  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,2)] <- c(200L,300L); x
Warning message:
In x[c(2, 10, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,2)] <- c(400L,500L,600L); x
 [1]   0 600   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,-10)] <- c(200L,300L); x
Error in x[c(2, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,-2)] <- c(200L,300L); x
Error in x[c(2, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,0)] <- c(200L,300L); x
[1]   0 300   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 500   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,10)] <- c(200L,300L); x
Warning message:
In x[c(2, 2, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,10)] <- c(400L,500L,600L); x
 [1]   0 500   2   3   4  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,2)] <- c(200L,300L); x
Warning message:
In x[c(2, 2, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,2)] <- c(400L,500L,600L); x
[1]   0 600   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- 1:10; for (i in 1:2) { x[[1]] <- x[[1]]; x <- c(1, 2, 3) }; x
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1, 2, 3); y <- x; x[1] <- 100; y;
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[1:1] <- c(200L,300L); x
Warning message:
In x[1:1] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200   2   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[1:1] <- c(400L,500L,600L); x
Warning message:
In x[1:1] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[2:4] <- c(200L,300L); x
Warning message:
In x[2:4] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200 300 200   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[2:4] <- c(400L,500L,600L); x
[1]   1 400 500 600   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[4:2] <- c(200L,300L); x
Warning message:
In x[4:2] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200 300 200   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[4:2] <- c(400L,500L,600L); x
[1]   1 600 500 400   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-10)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-2)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),0)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),10)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),2)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,0)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,10)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,2)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,0)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,10)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,2)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),0)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),10)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),2)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-10)] <- c(200L,300L); x
Warning message:
In x[c(-10, -10, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,0)] <- c(200L,300L); x
Warning message:
In x[c(-10, -10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,10)] <- c(200L,300L); x
Error in x[c(-10, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,10)] <- c(400L,500L,600L); x
Error in x[c(-10, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,2)] <- c(200L,300L); x
Error in x[c(-10, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,2)] <- c(400L,500L,600L); x
Error in x[c(-10, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,10)] <- c(200L,300L); x
Error in x[c(-10, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,10)] <- c(400L,500L,600L); x
Error in x[c(-10, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,2)] <- c(200L,300L); x
Error in x[c(-10, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,2)] <- c(400L,500L,600L); x
Error in x[c(-10, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 0, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-10)] <- c(200L,300L); x
Warning message:
In x[c(-10, 0, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,0)] <- c(200L,300L); x
Warning message:
In x[c(-10, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,10)] <- c(200L,300L); x
Error in x[c(-10, 0, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 0, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,2)] <- c(200L,300L); x
Error in x[c(-10, 0, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 0, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-10)] <- c(200L,300L); x
Error in x[c(-10, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-10)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-2)] <- c(200L,300L); x
Error in x[c(-10, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-2)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,0)] <- c(200L,300L); x
Error in x[c(-10, 10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,0)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,10)] <- c(200L,300L); x
Error in x[c(-10, 10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,2)] <- c(200L,300L); x
Error in x[c(-10, 10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-10)] <- c(200L,300L); x
Error in x[c(-10, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-10)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-2)] <- c(200L,300L); x
Error in x[c(-10, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-2)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,0)] <- c(200L,300L); x
Error in x[c(-10, 2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,0)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,10)] <- c(200L,300L); x
Error in x[c(-10, 2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,2)] <- c(200L,300L); x
Error in x[c(-10, 2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),0)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),10)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),2)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,10)] <- c(200L,300L); x
Error in x[c(-2, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,10)] <- c(400L,500L,600L); x
Error in x[c(-2, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,2)] <- c(200L,300L); x
Error in x[c(-2, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,2)] <- c(400L,500L,600L); x
Error in x[c(-2, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,10)] <- c(200L,300L); x
Error in x[c(-2, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,10)] <- c(400L,500L,600L); x
Error in x[c(-2, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,2)] <- c(200L,300L); x
Error in x[c(-2, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,2)] <- c(400L,500L,600L); x
Error in x[c(-2, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 0, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,10)] <- c(200L,300L); x
Error in x[c(-2, 0, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 0, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,2)] <- c(200L,300L); x
Error in x[c(-2, 0, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 0, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-10)] <- c(200L,300L); x
Error in x[c(-2, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-10)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-2)] <- c(200L,300L); x
Error in x[c(-2, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-2)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,0)] <- c(200L,300L); x
Error in x[c(-2, 10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,0)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,10)] <- c(200L,300L); x
Error in x[c(-2, 10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,2)] <- c(200L,300L); x
Error in x[c(-2, 10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-10)] <- c(200L,300L); x
Error in x[c(-2, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-10)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-2)] <- c(200L,300L); x
Error in x[c(-2, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-2)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,0)] <- c(200L,300L); x
Error in x[c(-2, 2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,0)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,10)] <- c(200L,300L); x
Error in x[c(-2, 2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,2)] <- c(200L,300L); x
Error in x[c(-2, 2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(0, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),0)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),10)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),2)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(0, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-10)] <- c(200L,300L); x
Warning message:
In x[c(0, -10, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,0)] <- c(200L,300L); x
Warning message:
In x[c(0, -10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,10)] <- c(200L,300L); x
Error in x[c(0, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,10)] <- c(400L,500L,600L); x
Error in x[c(0, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,2)] <- c(200L,300L); x
Error in x[c(0, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,2)] <- c(400L,500L,600L); x
Error in x[c(0, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(0, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,10)] <- c(200L,300L); x
Error in x[c(0, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,10)] <- c(400L,500L,600L); x
Error in x[c(0, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,2)] <- c(200L,300L); x
Error in x[c(0, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,2)] <- c(400L,500L,600L); x
Error in x[c(0, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-10)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,0)] <- c(200L,300L); x
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,0)] <- c(400L,500L,600L); x
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,10)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,2)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 400   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-10)] <- c(200L,300L); x
Error in x[c(0, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-10)] <- c(400L,500L,600L); x
Error in x[c(0, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-2)] <- c(200L,300L); x
Error in x[c(0, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-2)] <- c(400L,500L,600L); x
Error in x[c(0, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,0)] <- c(200L,300L); x
Warning message:
In x[c(0, 10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,10)] <- c(200L,300L); x
 [1]   1   2   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,2)] <- c(200L,300L); x
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 500   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-10)] <- c(200L,300L); x
Error in x[c(0, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-10)] <- c(400L,500L,600L); x
Error in x[c(0, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-2)] <- c(200L,300L); x
Error in x[c(0, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-2)] <- c(400L,500L,600L); x
Error in x[c(0, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,0)] <- c(200L,300L); x
Warning message:
In x[c(0, 2, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 400   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,10)] <- c(200L,300L); x
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 400   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,2)] <- c(200L,300L); x
[1]   1 300   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 500   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(10, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),0)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),10)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),2)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(10, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-10)] <- c(200L,300L); x
Error in x[c(10, -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-10)] <- c(400L,500L,600L); x
Error in x[c(10, -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-2)] <- c(200L,300L); x
Error in x[c(10, -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-2)] <- c(400L,500L,600L); x
Error in x[c(10, -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,0)] <- c(200L,300L); x
Error in x[c(10, -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,0)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,10)] <- c(200L,300L); x
Error in x[c(10, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,10)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,2)] <- c(200L,300L); x
Error in x[c(10, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,2)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(10, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-10)] <- c(200L,300L); x
Error in x[c(10, -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-10)] <- c(400L,500L,600L); x
Error in x[c(10, -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-2)] <- c(200L,300L); x
Error in x[c(10, -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-2)] <- c(400L,500L,600L); x
Error in x[c(10, -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,0)] <- c(200L,300L); x
Error in x[c(10, -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,0)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,10)] <- c(200L,300L); x
Error in x[c(10, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,10)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,2)] <- c(200L,300L); x
Error in x[c(10, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,2)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-10)] <- c(200L,300L); x
Error in x[c(10, 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-2)] <- c(200L,300L); x
Error in x[c(10, 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,0)] <- c(200L,300L); x
Warning message:
In x[c(10, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,10)] <- c(200L,300L); x
 [1]   1   2   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,2)] <- c(200L,300L); x
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 500   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-10)] <- c(200L,300L); x
Error in x[c(10, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-2)] <- c(200L,300L); x
Error in x[c(10, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,0)] <- c(200L,300L); x
 [1]   1   2   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,10)] <- c(200L,300L); x
Warning message:
In x[c(10, 10, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,10)] <- c(400L,500L,600L); x
 [1]   1   2   3   4   5  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,2)] <- c(200L,300L); x
Warning message:
In x[c(10, 10, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,2)] <- c(400L,500L,600L); x
 [1]   1 600   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-10)] <- c(200L,300L); x
Error in x[c(10, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-2)] <- c(200L,300L); x
Error in x[c(10, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,0)] <- c(200L,300L); x
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 500   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,10)] <- c(200L,300L); x
Warning message:
In x[c(10, 2, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,10)] <- c(400L,500L,600L); x
 [1]   1 500   3   4   5  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,2)] <- c(200L,300L); x
Warning message:
In x[c(10, 2, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 200   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,2)] <- c(400L,500L,600L); x
 [1]   1 600   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(2, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),0)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),10)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),2)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(2, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-10)] <- c(200L,300L); x
Error in x[c(2, -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-10)] <- c(400L,500L,600L); x
Error in x[c(2, -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-2)] <- c(200L,300L); x
Error in x[c(2, -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-2)] <- c(400L,500L,600L); x
Error in x[c(2, -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,0)] <- c(200L,300L); x
Error in x[c(2, -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,0)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,10)] <- c(200L,300L); x
Error in x[c(2, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,10)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,2)] <- c(200L,300L); x
Error in x[c(2, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,2)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(2, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-10)] <- c(200L,300L); x
Error in x[c(2, -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-10)] <- c(400L,500L,600L); x
Error in x[c(2, -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-2)] <- c(200L,300L); x
Error in x[c(2, -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-2)] <- c(400L,500L,600L); x
Error in x[c(2, -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,0)] <- c(200L,300L); x
Error in x[c(2, -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,0)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,10)] <- c(200L,300L); x
Error in x[c(2, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,10)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,2)] <- c(200L,300L); x
Error in x[c(2, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,2)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-10)] <- c(200L,300L); x
Error in x[c(2, 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-2)] <- c(200L,300L); x
Error in x[c(2, 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,0)] <- c(200L,300L); x
Warning message:
In x[c(2, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 400   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,10)] <- c(200L,300L); x
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 400   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,2)] <- c(200L,300L); x
[1]   1 300   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 500   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-10)] <- c(200L,300L); x
Error in x[c(2, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-2)] <- c(200L,300L); x
Error in x[c(2, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,0)] <- c(200L,300L); x
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 400   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,10)] <- c(200L,300L); x
Warning message:
In x[c(2, 10, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 200   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,10)] <- c(400L,500L,600L); x
 [1]   1 400   3   4   5  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,2)] <- c(200L,300L); x
Warning message:
In x[c(2, 10, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,2)] <- c(400L,500L,600L); x
 [1]   1 600   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-10)] <- c(200L,300L); x
Error in x[c(2, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-2)] <- c(200L,300L); x
Error in x[c(2, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,0)] <- c(200L,300L); x
[1]   1 300   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 500   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,10)] <- c(200L,300L); x
Warning message:
In x[c(2, 2, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,10)] <- c(400L,500L,600L); x
 [1]   1 500   3   4   5  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,2)] <- c(200L,300L); x
Warning message:
In x[c(2, 2, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,2)] <- c(400L,500L,600L); x
[1]   1 600   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testAccessSequence
#{ x<-c(1L,2L,3L,4L,5L); x[1:4][1:3][1:2][1:1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testAccessSequence
#{ x<-c(1L,2L,3L,4L,5L); x[1:5][2:5][2:4][2:2] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testAccessSequence
#{ x<-c(1L,2L,3L,4L,5L); x[2:5][2:4][2:3][2:2] }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-7 }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = 7) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-NULL }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = NULL) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = c(7, 42)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-integer() }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = integer(0)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-7 }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = 7) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-c(7,42) }
Error in x[[1 + (0+1i), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-integer() }
Error in x[[1 + (0+1i), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-NULL }
Error in x[1 + (0+1i)] <- NULL : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-c(1) }
Error in x[1 + (0+1i)] <- c(1) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-c(1,2) }
Error in x[1 + (0+1i)] <- c(1, 2) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-c(1,2,3) }
Error in x[1 + (0+1i)] <- c(1, 2, 3) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-integer() }
Error in x[1 + (0+1i)] <- integer() : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-c(1) }
Error in x[[1 + (0+1i)]] <- c(1) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-c(1,2) }
Error in x[[1 + (0+1i)]] <- c(1, 2) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-c(1,2,3) }
Error in x[[1 + (0+1i)]] <- c(1, 2, 3) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-integer() }
Error in x[[1 + (0+1i)]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-7 }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = 7) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-NULL }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = NULL) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = c(7, 42)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-integer() }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = integer(0)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-7 }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = 7) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-NULL }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = NULL) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = c(7, 42)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-integer() }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = integer(0)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-NULL }
Error in x[1 + (0+1i)] <- NULL : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-c(1) }
Error in x[1 + (0+1i)] <- c(1) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-c(1,2) }
Error in x[1 + (0+1i)] <- c(1, 2) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-c(1,2,3) }
Error in x[1 + (0+1i)] <- c(1, 2, 3) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-integer() }
Error in x[1 + (0+1i)] <- integer() : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-NULL }
Error in x[[1 + (0+1i)]] <- NULL : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-c(1) }
Error in x[[1 + (0+1i)]] <- c(1) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-c(1,2) }
Error in x[[1 + (0+1i)]] <- c(1, 2) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-c(1,2,3) }
Error in x[[1 + (0+1i)]] <- c(1, 2, 3) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-integer() }
Error in x[[1 + (0+1i)]] <- integer() : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testEmptyUpdate
#{ a <- list(); a$a = 6; a; }
$a
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testEmptyUpdate
#{ a <- list(); a[['b']] = 6; a; }
$b
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- c(1,2); a$a = 3; a; }
[[1]]
[1] 1

[[2]]
[1] 2

$a
[1] 3

Warning message:
In a$a = 3 : Coercing LHS to a list

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- c(a=1,b=2); a$a; }
Error in a$a : $ operator is invalid for atomic vectors

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$a <- 67; a; }
$a
[1] 67

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$a; }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$b <- 67; a; }
$a
[1] 1

$b
[1] 67


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$b; }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$c <- 67; a; }
$a
[1] 1

$b
[1] 2

$c
[1] 67


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$c; }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ e <- list(a=2) ; e$"a" }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ e <- list(a=2) ; e$a }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ f <- function(v) { v$x } ; f(list(xa=1, xb=2, hello=3)) ; f(list(y=2,x=3)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ f <- function(v) { v$x } ; f(list(xa=1, xb=2, hello=3)) ; l <- list(y=2,x=3) ; f(l) ; l[[2]] <- 4 ; f(l) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$a }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$aa }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x <- list(1, 2) ; x$b }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; f(1:3) }
Error in x$b : $ operator is invalid for atomic vectors

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; f(x) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; x <- list(c=2,b=10) ; f(x) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x<-data.frame(a=list(1,2)); y<-list(bb=x, c=NULL); y$b$a.1 }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x<-data.frame(a=list(1,2)); y<-list(bb=x, c=NULL); y$b$a.2 }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x<-list(a=list(b=7)); x$a$b<-42; x }
$a
$a$b
[1] 42



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x<-list(a=list(b=7)); x$a[["b"]]<-42; x }
$a
$a$b
[1] 42



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x<-list(a=list(b=7)); x[["a"]]$b<-42; x }
$a
$a$b
[1] 42



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x<-list(list(a=7), NULL); x[[1]]$a<-42; x }
[[1]]
[[1]]$a
[1] 42


[[2]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testGenericUpdate
#{ a <- TRUE; a[[2]] <- FALSE; a; }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ (1 + 2i) %in% c(1+10i, 1+4i, 2+2i, 1+2i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ 1 %in% 1:10 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ 1:3 %in% 1:10 }
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ as.logical(-1:1) %in% TRUE }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ c("1L","hello") %in% 1:10 }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ x <- function(){1} ; x %in% TRUE }
Error in match(x, table, nomatch = 0L) :
  'match' requires vector arguments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testLengthUpdate
#{ k <- c(1,2,3) ; length(k) <- 5 ; k }
[1]  1  2  3 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testLengthUpdate
#{ k <- c(1,2,3,4,5,6,7,8,9) ; length(k) <- 4 ; k }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(1:3,2,2) ; f(1:3,"X",2) ; f(list(1,list(2)),c(2,1),4) }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 4



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1)  ; f(3:4) }
[[1]]
[1] 3

[[2]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1) ; f(1L) ; f(TRUE) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1) ; f(TRUE) ; f(1L)  }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(c(TRUE,FALSE))  ; f(3:4) }
[[1]]
[1] 3

[[2]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1L,2L,3L,4L,5L) ; x[i] } ; f(1) ; f(TRUE) ; f(c(3,2))  }
[[1]]
[1] 3

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(x, i) { x[i] } ; f(list(1,2,3),3:1) ; f(list(1L,2L,3L,4L,5L),c(0,0,0,0-2)) }
[[1]]
[1] 1

[[2]]
[1] 3

[[3]]
[1] 4

[[4]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(a=1,b=2,c=list(d=3,e=list(f=4))) ; l[[c(3,1)]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(a=1,b=2,c=list(d=3,e=list(f=4))) ; l[[c(3,2)]] }
$f
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c("c")]] }
$d
[1] 3

$e
f
4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c("c","e")]] }
f
4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c("c","e", "f")]] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),c(3,4))); l[[c(2,1)]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),list(3,4))); l[[c(1,-1)]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),list(3,4))); l[[c(1,-2)]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),list(3,4))); l[[c(1,2)]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),list(3,4))); l[[c(1,TRUE)]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2,3) ; l[c(1,2)] }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2,3) ; l[c(2)] }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[-2] }
[[1]]
[1] 1

[[2]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[FALSE] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[NA] }
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[[2]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[c(FALSE,FALSE,TRUE)] }
[[1]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ m<-list(1,2) ; m[NULL] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2,3,4,5) ; x[c(TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,NA)] }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
NULL

[[5]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[2:4] }
[[1]]
[1] 2

[[2]]
[1] TRUE

[[3]]
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[4:2] }
[[1]]
[1] FALSE

[[2]]
[1] TRUE

[[3]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(-2,-3)] }
[[1]]
[1] 1

[[2]]
[1] FALSE

[[3]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(-2,-3,-4,0,0,0)] }
[[1]]
[1] 1

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(2,5,4,3,3,3,0)] }
[[1]]
[1] 2

[[2]]
[1] 5

[[3]]
[1] FALSE

[[4]]
[1] TRUE

[[5]]
[1] TRUE

[[6]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(2L,5L,4L,3L,3L,3L,0L)] }
[[1]]
[1] 2

[[2]]
[1] 5

[[3]]
[1] FALSE

[[4]]
[1] TRUE

[[5]]
[1] TRUE

[[6]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(1,b=list(2,3)) }
[[1]]
[1] 1

$b
$b[[1]]
[1] 2

$b[[2]]
[1] 3



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(1,b=list(c=2,3)) }
[[1]]
[1] 1

$b
$b$c
[1] 2

$b[[2]]
[1] 3



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(1,list(2,list(3,4))) }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[[2]][[2]][[1]]
[1] 3

[[2]][[2]][[2]]
[1] 4




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(1:4) }
[[1]]
[1] 1 2 3 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(list(c=2)) }
[[1]]
[[1]]$c
[1] 2



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]] }
Error in x[[list(), 1]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(), 1, value = 7) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-c(7,42) }
Error in x[[list(), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-integer() }
Error in x[[list(), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]] }
Error in x[[list(1), 1]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-c(7,42) }
Error in x[[list(1), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-integer() }
Error in x[[list(1), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]] }
Error in x[[list(1, 2), 1]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = 7) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-c(7,42) }
Error in x[[list(1, 2), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-integer() }
Error in x[[list(1, 2), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = 7) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-c(7,42) }
Error in x[[list(1, 2, 3), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-integer() }
Error in x[[list(1, 2, 3), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(), 1] }
Error in x[list(), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-7 }
Error in `[<-`(`*tmp*`, list(), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1] }
Error in x[list(1), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1] }
Error in x[list(1, 2), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]] }
Error in x[[list(), 1]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(), 1, value = 7) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, list(), 1, value = NULL) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, list(), 1, value = c(7, 42)) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, list(), 1, value = integer(0)) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]] }
Error in x[[list(1), 1]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, list(1), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]] }
Error in x[[list(1, 2), 1]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = 7) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = NULL) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = c(7, 42)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = integer(0)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = 7) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = NULL) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = c(7, 42)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = integer(0)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1] }
Error in x[list(), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-7 }
Error in `[<-`(`*tmp*`, list(), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-NULL }
Error in `[<-`(`*tmp*`, list(), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1] }
Error in x[list(1), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-NULL }
Error in `[<-`(`*tmp*`, list(1), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1] }
Error in x[list(1, 2), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-NULL }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-NULL }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list()]] }
Error in z[[list()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list()]]<-42 }
Error in z[[list()]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list()]]<-integer() }
Error in z[[list()]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1)]] }
Error in z[[list(1)]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1)]]<-42 }
Error in z[[list(1)]] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1)]]<-NULL }
Error in z[[list(1)]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1)]]<-integer() }
Error in z[[list(1)]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2)]] }
Error in z[[list(1, 2)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2)]]<-42 }
Error in z[[list(1, 2)]] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2)]]<-NULL }
Error in z[[list(1, 2)]] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2)]]<-integer() }
Error in z[[list(1, 2)]] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2,3)]]<-42 }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = 42) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2,3)]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = NULL) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2,3)]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = integer(0)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list()] }
Error in z[list()] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list()]<-42 }
Error in z[list()] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list()]<-NULL }
Error in z[list()] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list()]<-integer() }
Error in z[list()] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1)] }
Error in z[list(1)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1)]<-42 }
Error in z[list(1)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1)]<-NULL }
Error in z[list(1)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1)]<-integer() }
Error in z[list(1)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2)] }
Error in z[list(1, 2)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2)]<-42 }
Error in z[list(1, 2)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2)]<-NULL }
Error in z[list(1, 2)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2)]<-integer() }
Error in z[list(1, 2)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2,3)]<-42 }
Error in z[list(1, 2, 3)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2,3)]<-NULL }
Error in z[list(1, 2, 3)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2,3)]<-integer() }
Error in z[list(1, 2, 3)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list()]] }
Error in z[[list()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list()]]<-42 }
Error in z[[list()]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list()]]<-NULL }
Error in z[[list()]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list()]]<-integer() }
Error in z[[list()]] <- integer() :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1)]] }
Error in z[[list(1)]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1)]]<-42 }
Error in z[[list(1)]] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1)]]<-NULL }
Error in z[[list(1)]] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1)]]<-integer() }
Error in z[[list(1)]] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2)]] }
Error in z[[list(1, 2)]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2)]]<-42 }
Error in z[[list(1, 2)]] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2)]]<-NULL }
Error in z[[list(1, 2)]] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2)]]<-integer() }
Error in z[[list(1, 2)]] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-42 }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = 42) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list()] }
Error in z[list()] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list()]<-42 }
Error in z[list()] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list()]<-NULL }
Error in z[list()] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list()]<-integer() }
Error in z[list()] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1)] }
Error in z[list(1)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1)]<-42 }
Error in z[list(1)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1)]<-NULL }
Error in z[list(1)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1)]<-integer() }
Error in z[list(1)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2)] }
Error in z[list(1, 2)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2)]<-42 }
Error in z[list(1, 2)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2)]<-NULL }
Error in z[list(1, 2)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2)]<-integer() }
Error in z[list(1, 2)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2,3)]<-42 }
Error in z[list(1, 2, 3)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2,3)]<-NULL }
Error in z[list(1, 2, 3)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2,3)]<-integer() }
Error in z[list(1, 2, 3)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
# { f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=c(a=2)),c(TRUE,TRUE),3) }
$a
[1] 3

$b
a
2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function() { l[1:2] <- x ; x[1] <- 211L  ; l[1] } ; l <- 1:3 ; x <- 10L ; f() }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(c(a=1,b=2),"b",as.raw(12)) }
Error in b[[i]] <- v :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(c(a=1,b=2),c(1+2i,3+4i),as.raw(12)) }
Error in b[[i]] <- v : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(f,TRUE,3) }
Error in b[[i]] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=2),"b",NULL) }
$a
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=c(a=2)),1+2i,1:3) }
Error in b[[i]] <- v : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=c(a=2)),c("b","a"),1:3) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=f),c("b","x"),3) }
Error in b[[i]] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=list(2)),"b",double()) }
$a
[1] 1

$b
numeric(0)


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(c(1,2,b=c(x=3)),c("b"),10) }
        b.x   b
  1   2   3  10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(c(1,2,b=c(x=3)),c("b","x"),10) }
Error in `[[<-`(`*tmp*`, i, value = 10) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2, list(3)),c("b","x"),10) }
Error in `[[<-`(`*tmp*`, i, value = 10) : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=c(x=3)),c("b","x"),10) }
[[1]]
[1] 1

[[2]]
[1] 2

$b
 x
10


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(3)),c("a","x"),10) }
Error in `[[<-`(`*tmp*`, i, value = 10) : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(a=list(x=1,y=2),3),4),c("b","a","x"),10) }
[[1]]
[1] 1

[[2]]
[1] 2

$b
$b$a
$b$a$x
[1] 10

$b$a$y
[1] 2


$b[[2]]
[1] 3


[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(x=3)),c("b","x"),10) }
[[1]]
[1] 1

[[2]]
[1] 2

$b
$b$x
[1] 10



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(x=3)),character(),10) }
Error in b[[i]] <- v : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), "hello", 2) }
                  hello
    1     2     3     2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), 2L, 1:2) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), f, 2) }
Error in b[[i]] <- v : invalid subscript type 'closure'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(1,2,3), 2L, 3) }
[[1]]
[1] 1

[[2]]
[1] 3

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(1,2,3), 2L, NULL) }
[[1]]
[1] 1

[[2]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(f,f), c(1,1), 3) }
Error in b[[i]] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- as.list(1:3) ; l[[0]] <- 2 }
Error in l[[0]] <- 2 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list() ; l[[1]] <-2 ; l}
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list() ; l[c(TRUE,TRUE)] <-2 ; l }
[[1]]
[1] 2

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1, list(2)) ;  m <- l ; l[[c(2,1)]] <- 3 ; m[[2]][[1]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1, list(2,3,4)) ;  m <- l ; l[[c(2,1)]] <- 3 ; m[[2]][[1]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2) ; l[[c(1,1,2,3,4,3)]] <- 10 ; l }
Error in `[[<-`(`*tmp*`, c(1, 1, 2, 3, 4, 3), value = 10) :
  recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2); l[0] <- NULL; l}
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2); l[[0]] }
Error in l[[0]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[-1L] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[-1] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[2] <- list(100) ; l[2] }
[[1]]
[1] 100


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[[2]] <- list(100) ; l[2] }
[[1]]
[[1]][[1]]
[1] 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[c(2,3)] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[c(2:3)] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[c(FALSE,TRUE,TRUE)] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; x <- list(100) ; y <- x; l[1:1] <- x ; l[[1]] }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; x <- list(100) ; y <- x; l[[1:1]] <- x ; l[[1]] }
[[1]]
[1] 100


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,list(2,c(3))) ; l[[c(2,2)]] <- 4 ; l }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[1] 4



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,list(2,c(3))) ; l[[c(2,2)]] <- NULL ; l }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 2



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,list(2,list(3))) ; l[[1]] <- 5 ; l }
[[1]]
[1] 5

[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[[2]][[2]][[1]]
[1] 3




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,list(2,list(3))) ; l[[1]] <- NULL ; l }
[[1]]
[[1]][[1]]
[1] 2

[[1]][[2]]
[[1]][[2]][[1]]
[1] 3




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(100) ; f <- function() { l[[1]] <- 2 } ; f() ; l }
[[1]]
[1] 100


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(100,200,300,400,500) ; f <- function() { l[[3]] <- 2 } ; f() ; l }
[[1]]
[1] 100

[[2]]
[1] 200

[[3]]
[1] 300

[[4]]
[1] 400

[[5]]
[1] 500


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[1] <- NULL ; l }
$b
[1] 2

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[3] <- NULL ; l }
$a
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[4] <- NULL ; l}
$a
[1] 1

$b
[1] 2

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[5] <- NULL ; l}
$a
[1] 1

$b
[1] 2

$c
[1] 3

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[["b"]] <- NULL ; l }
$a
[1] 1

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[[4]] <- NULL ; l}
$a
[1] 1

$b
[1] 2

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[[5]] <- NULL ; l}
$a
[1] 1

$b
[1] 2

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,cd=list(c=3,d=4)) ; x <- list(l,xy=list(x=l,y=l)) ; x[[c("xy","y","cd","d")]] <- 10 ; l }
$a
[1] 1

$b
[1] 2

$cd
$cd$c
[1] 3

$cd$d
[1] 4



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,cd=list(c=3,d=4)) ; x <- list(l,xy=list(x=l,y=l)) ; x[[c(2,2,3,2)]] <- 10 ; l }
$a
[1] 1

$b
[1] 2

$cd
$cd$c
[1] 3

$cd$d
[1] 4



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(list(1,2),2) ; l[[c(1,1,2,3,4,3)]] <- 10 ; l }
Error in `[[<-`(`*tmp*`, c(1, 1, 2, 3, 4, 3), value = 10) :
  recursive indexing failed at level 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- matrix(list(1,2)) ; l[3] <- NULL ; l }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- matrix(list(1,2)) ; l[4] <- NULL ; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- matrix(list(1,2)) ; l[[3]] <- NULL ; l }
     [,1]
[1,] 1
[2,] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- matrix(list(1,2)) ; l[[4]] <- NULL ; l }
     [,1]
[1,] 1
[2,] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list() ; x <- 1:3 ; l[[1]] <- x  ; l }
[[1]]
[1] 1 2 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list() ; x <- 1:3 ; l[[1]] <- x; x[2] <- 100L; l[[1]] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(1,2L,TRUE) ; l[[2]]<-100 ; l }
[[1]]
[1] 1

[[2]]
[1] 100

[[3]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(1,2L,TRUE) ; l[[3]]<-list(100) ; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[[3]][[1]]
[1] 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(1,2L,TRUE) ; l[[5]]<-100 ; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] TRUE

[[4]]
NULL

[[5]]
[1] 100


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a="a",b="b",c=list(d="cd",e="ce",f=c(x="cfx",y="cfy",z="cfz"))) ; l[[c("c","f","zz")]] <- "cfzz" ; l }
$a
[1] "a"

$b
[1] "b"

$c
$c$d
[1] "cd"

$c$e
[1] "ce"

$c$f
     x      y      z     zz
 "cfx"  "cfy"  "cfz" "cfzz"



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3) ; l[c("a","a","a","c")] <- NULL ; l }
$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(-1,-10)] <- NULL ; l}
$a
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(-1,-3)] <- NULL ; l}
$a
[1] 1

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3)] <- NULL ; l}
$a
[1] 1

$d
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3,5)] <- NULL ; l}
$a
[1] 1

$d
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3,6)] <- NULL ; l}
$a
[1] 1

$d
[1] 4

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,FALSE)] <- NULL ; l}
$b
[1] 2

$d
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,FALSE,FALSE,TRUE,FALSE,NA,TRUE,TRUE)] <- NULL ; l}
$b
[1] 2

$c
[1] 3

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,TRUE,FALSE,TRUE)] <- NULL ; l}
$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c("c","f")]] <- NULL ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c("c","f","z")]] <- 100 ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
  x   y   z
  1   2 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c("c","f","zz")]] <- 100 ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
  x   y   z  zz
  1   2   3 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c("c","f","zz")]] <- list(100) ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
$c$f$x
[1] 1

$c$f$y
[1] 2

$c$f$z
[1] 3

$c$f$zz
$c$f$zz[[1]]
[1] 100





##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,list(c=3,d=4,list(e=5:6,f=100))) ; l[[c(3,3,1)]] <- NULL ; l }
$a
[1] 1

$b
[1] 2

[[3]]
[[3]]$c
[1] 3

[[3]]$d
[1] 4

[[3]][[3]]
[[3]][[3]]$f
[1] 100




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c("c","f")]] <- 100L ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
[1] 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c("c","f")]] <- list(haha="gaga") ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
$c$f$haha
[1] "gaga"




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c("c","f","zz")]] <- 100L ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
  x   y   z  zz
  1   2   3 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=TRUE,b=FALSE,c=list(d=TRUE,e=FALSE,f=c(x=TRUE,y=FALSE,z=TRUE))) ; l[[c("c","f","zz")]] <- TRUE ; l }
$a
[1] TRUE

$b
[1] FALSE

$c
$c$d
[1] TRUE

$c$e
[1] FALSE

$c$f
    x     y     z    zz
 TRUE FALSE  TRUE  TRUE



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[TRUE] <- NULL ; m }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[[-1]] <- NULL ; m }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[[-2]] <- NULL ; m }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[[1]] <- NULL ; m }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[[TRUE]] <- NULL ; m }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-1:3 ; v[2] <- list(100) ; v }
[[1]]
[1] 1

[[2]]
[1] 100

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-1:3 ; v[[2]] <- list(100) ; v }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 100


[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c()] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(-1,-2,-6)] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(2,3,4)] <- NULL ; v }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(2,3,NA,7,0)] <- NULL ; v }
[[1]]
[1] 1

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(TRUE,FALSE)] <- NULL ; v }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE)] <- NULL ; v }
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(TRUE,FALSE,TRUE)] <- NULL ; v }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[double()] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[integer()] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[logical()] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- 1:3 ; l <- list(1) ; l[[TRUE]] <- x ; l[[1]] } 
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- as.list(1:3) ; x[[integer()]] <- 3 }
Error in x[[integer()]] <- 3 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- c(1L,2L,3L) ; l <- list(1) ; l[[1]] <- x ; x[2] <- 100L ; l[[1]] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- list(1,list(2,3),4) ; x[[c(2,3)]] <- 3 ; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[1] 3

[[2]][[3]]
[1] 3


[[3]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- list(1,list(2,3),4) ; z <- x[[2]] ; x[[c(2,3)]] <- 3 ; z }
[[1]]
[1] 2

[[2]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <-2L ; y <- x; x[1] <- 211L ; y }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-c(1,2,3) ; y<-x ; x[2]<-100 ; y }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(1,2,3,4,5); x[3:4]<-c(300L,400L); x }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 300

[[4]]
[1] 400

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(1,2,3,4,5); x[4:3]<-c(300L,400L); x }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 400

[[4]]
[1] 300

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(1,2L,TRUE,TRUE,FALSE); x[c(-2,-3,-3,-100,0)]<-256; x }
[[1]]
[1] 256

[[2]]
[1] 2

[[3]]
[1] TRUE

[[4]]
[1] 256

[[5]]
[1] 256


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(1,2L,list(3,list(4)),list(5)) ; x[c(4,2,3)]<-list(256L,257L,258L); x }
[[1]]
[1] 1

[[2]]
[1] 257

[[3]]
[1] 258

[[4]]
[1] 256


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(11,10,9) ; x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }
[[1]]
[1] 1000

[[2]]
[1] 10

[[3]]
[1] 2000


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(FALSE,NULL,3L,4L,5.5); x[c(TRUE,FALSE)] <- 1000; x }
[[1]]
[1] 1000

[[2]]
NULL

[[3]]
[1] 1000

[[4]]
[1] 4

[[5]]
[1] 1000


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE),c(FALSE,TRUE), drop=TRUE]}
[1]  9 11 13 15

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE,FALSE),c(FALSE,NA), drop=FALSE]}
     [,1]
[1,]   NA
[2,]   NA
[3,]   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE,FALSE),c(FALSE,TRUE), drop=TRUE]}
[1]  9 12 15

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:4, nrow=2) ; m[[2,1,drop=FALSE]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] } ; f(1,1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] } ; f(1,1:3) }
[1] 1 3 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,-1] }
     [,1] [,2]
[1,]    3    5
[2,]    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,1[2],drop=FALSE] }
     [,1]
[1,]   NA
[2,]   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,] }
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,c(-1,0,0,-1)] }
     [,1] [,2]
[1,]    3    5
[2,]    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,c(1,NA,1,NA)] }
     [,1] [,2] [,3] [,4]
[1,]    1   NA    1   NA
[2,]    2   NA    2   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,c(NA,1,0)] }
     [,1] [,2]
[1,]   NA    1
[2,]   NA    2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1,,drop=FALSE] }
     [,1] [,2] [,3]
[1,]    1    3    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1,2] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1,] }
[1] 1 3 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1:2,-1] }
     [,1] [,2]
[1,]    3    5
[2,]    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1:2,0:1] ; m[1:2,1:1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1:2,0:1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1:2,2:3] }
     [,1] [,2]
[1,]    3    5
[2,]    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[[1,2]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; x<-2 ; m[[1,x]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(1,c(-1,0,-1,-10)) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(1,c(1,2)) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(c(TRUE),c(FALSE,TRUE)) }
[1] 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-1.1:3.1; x[1L] }
[1] 1.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-1.1:3.1; x[2L] }
[1] 2.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-1.1:3.1; x[3L] }
[1] 3.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-3.1:1; x[1L] }
[1] 3.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-3.1:1; x[2L] }
[1] 2.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-3.1:1; x[3L] }
[1] 1.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-NULL; x[1L] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-NULL; x[2L] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-NULL; x[3L] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[NULL] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[0] <- NULL ; b }
     [,1] [,2] [,3]
[1,]    3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[[c(1,2)]] <- NULL ; b }
Error in `[[<-`(`*tmp*`, c(1, 2), value = NULL) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[] <- NULL ; b }
Error in b[] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[c(1)] <- NULL ; b }
Error in b[c(1)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[c(1,2)] <- NULL ; b }
Error in b[c(1, 2)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[c(FALSE, FALSE, FALSE)] <- NULL ; b }
     [,1] [,2] [,3]
[1,]    3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[0] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[0]] <- NULL ; b }
Error in b[[0]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[c(1)]] <- NULL ; b }
[[1]]
[1] 4

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[c(1,2)]] <- NULL ; b }
Error in b[[c(1, 2)]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[] <- NULL ; b }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[c(1)] <- NULL ; b }
[[1]]
[1] 4

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[c(1,2)] <- NULL ; b }
[[1]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- c(1,2) ;  attr(l, "foo")<-"foo"; names(l)<-c("a", "b"); l[1] <- 7 ; attributes(l) }
$foo
[1] "foo"

$names
[1] "a" "b"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- c(1,2) ; names(l)<-c("a", "b"); attr(l, "foo")<-"foo"; l[1] <- 7 ; attributes(l) }
$names
[1] "a" "b"

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2) ;  attr(l, "foo")<-"foo"; names(l)<-c("a", "b"); l[1] <- NULL ; attributes(l) }
$names
[1] "b"

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2) ; names(l)<-c("a", "b"); attr(l, "foo")<-"foo"; l[1] <- NULL ; attributes(l) }
$names
[1] "b"

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2,3) ; l[c(1,3)] <- NULL ; l }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2,3) ; l[c(1,3)] <- c(NULL, 42) ; l }
[[1]]
[1] 42

[[2]]
[1] 2

[[3]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2,3) ; l[c(1,3)] <- c(NULL, NULL) ; l }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(a=1,b=2) ; attr(l, "foo")<-"foo"; l[1] <- NULL ; l }
$b
[1] 2

attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(a=1,b=2) ; attr(l, "foo")<-"foo"; l[[1]] <- NULL ; l }
$b
[1] 2

attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- matrix(list(a=1,b=2,c=3,d=4)) ; attr(l, "foo")<-"foo"; l[1] <- NULL ; attributes(l) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- matrix(list(a=1,b=2,c=3,d=4)) ; attr(l, "foo")<-"foo"; l[[1]] <- NULL ; attributes(l) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1); l[1]<-NULL; l }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[1]<-NULL; l }
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[4]<-NULL; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[5]<-NULL; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[7]<-NULL; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
NULL

[[6]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(-1)]]<-c(1); l }
Error in l[[c(-1)]] <- c(1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(-1,1)]]<-c(1); l }
Error in l[[c(-1, 1)]] <- c(1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(0)]]<-c(1); l }
Error in l[[c(0)]] <- c(1) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(0,1)]]<-c(1); l }
Error in l[[c(0, 1)]] <- c(1) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(1,1,1)]]<-c(1); l }
Error in `[[<-`(`*tmp*`, c(1, 1, 1), value = 1) :
  recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(1,NA)]]<-c(1); l }
Error in l[[c(1, NA)]] <- c(1) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(2,1)]]<-7; l }
[[1]]
[1] 1

[[2]]
[1] 7

[[3]]
[1] 3

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(7,1)]]<-c(1); l }
Error in `[[<-`(`*tmp*`, c(7, 1), value = 1) : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(NA)]]<-c(1); l }
Error in l[[c(NA)]] <- c(1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(NA,1)]]<-c(-1); l }
Error in l[[c(NA, 1)]] <- c(-1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(NA,1)]]<-c(1); l }
Error in l[[c(NA, 1)]] <- c(1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[c(1,3)]<-list(NULL); l }
[[1]]
NULL

[[2]]
[1] 2

[[3]]
NULL

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[c(2,1)]<-7; l }
[[1]]
[1] 7

[[2]]
[1] 7

[[3]]
[1] 3

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(list(1),2,3,4); l[[c(1,1,NA)]]<-c(1); l }
Error in l[[c(1, 1, NA)]] <- c(1) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,7)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,8)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,8,9)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,7)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,8)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
[1] 6

[[5]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ n<-1; n[7]<-42; n }
[1]  1 NA NA NA NA NA 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ n<-1; n[[7]]<-42; n }
[1]  1 NA NA NA NA NA 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ n<-1; n[[c(7,8)]]<-c(42,43); n }
Error in `[[<-`(`*tmp*`, c(7, 8), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ n<-1; n[c(7,8)]<-c(42,43); n }
[1]  1 NA NA NA NA NA 42 43

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ v <- c(1,2,3,4,5,6,7,8,9); f <- function(k) v[k]; f(2:5); f(-1:-2) }
[1] 3 4 5 6 7 8 9

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- NULL; x[c("a", as.character(NA))] <- 7; x }
   a <NA>
   7    7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- NULL; x[c("a", as.character(NA), as.character(NA))] <- 7; x }
   a <NA> <NA>
   7    7    7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- c("a", "b"); y<-NULL; y[integer()]<-x[integer()]; y }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- c("a", "b"); y<-c("c","d"); y[integer()]<-x[integer()]; y}
[1] "c" "d"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- list() ; x[[NA]] <- NULL ; x }
Error in x[[NA]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- list(1) ; x[[NA]] <- NULL ; x }
Error in x[[NA]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- list(1,2) ; x[[NA]] <- NULL ; x }
Error in x[[NA]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- list(1,2,3) ; x[[NA]] <- NULL ; x }
Error in x[[NA]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)<-c(1,2); u<-2+2i; x[[u, u]] }
Error in x[[u, u]] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)<-c(1,2); x[2+2i, 2+2i] }
Error in x[2 + (0+2i), 2 + (0+2i)] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,1,2); x[[, , 1]] }
Error in x[[, , 1]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,1,2); x[[1, , 1]] }
Error in x[[1, , 1]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,1,2); x[[1, , ]] }
Error in x[[1, , ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[,] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[[, 1]] }
Error in x[[, 1]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[[, ]] }
Error in x[[, ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[[1, ]] }
Error in x[[1, ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; x[[c(TRUE, TRUE)]] }
Error in x[[c(TRUE, TRUE)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; x[c(TRUE, TRUE)] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4;  x[c(0, 1)]<-42; x }
[1] 42  2  3  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4;  x[c(0, 1)]<-c(7, 42); x }
[1] 7 2 3 4
Warning message:
In x[c(0, 1)] <- c(7, 42) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4;  x[c(1, 0)]<-42; x }
[1] 42  2  3  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4;  x[c(1, 0)]<-c(7, 42); x }
[1] 7 2 3 4
Warning message:
In x[c(1, 0)] <- c(7, 42) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2);  x[NA, NA]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-1,0]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-1] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-1]<-42; x }
     [,1] [,2]
[1,]    1   42
[2,]   42   42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-5,0]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-5]<-42; x }
     [,1] [,2]
[1,]   42   42
[2,]   42   42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[0,-1]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[0,-5]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[0,0]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[0]<-42; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[NA]<-42; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[NULL]<-42; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[-1, 0]] <- integer(); x }
Error in x[[-1, 0]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[-5, 0]] <- integer(); x }
Error in x[[-5, 0]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[0, -1]] <- integer(); x }
Error in x[[0, -1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[0, -5]] <- integer(); x }
Error in x[[0, -5]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[0, 0]] <- integer(); x }
Error in x[[0, 0]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(-1, -2)]]<-42; x }
Error in x[[c(-1, -2)]] <- 42 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0)]]<-c(42, 43); x }
Error in x[[c(0, 0)]] <- c(42, 43) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,0)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(0, 0, 0), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,1)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(0, 0, 1), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,42+71)]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, c(0, 0, 42 + 71), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,1)]]<-c(42, 43); x }
Error in x[[c(0, 1)]] <- c(42, 43) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,1,1)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(0, 1, 1), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,42+7i)]]<-c(42,43); x }
Error in x[[c(0, 42 + (0+7i))]] <- c(42, 43) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-c(42); x }
Error in x[[c(1 + (0+1i))]] <- c(42) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-c(42,43); x }
Error in x[[c(1 + (0+1i))]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-integer(); x }
Error in x[[c(1 + (0+1i))]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i,42+7i,3+3i)]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, c(1 + (0+1i), 42 + (0+7i), 3 + (0+3i)), value = c(42,  :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1,0)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(1, 0), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1,0,0)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(1, 0, 0), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1,1,0)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(1, 1, 0), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1,4)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(1, 4), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(FALSE,TRUE)]]<-c(42,43); x }
Error in x[[c(FALSE, TRUE)]] <- c(42, 43) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(FALSE,TRUE,TRUE)]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, c(FALSE, TRUE, TRUE), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-c(42,43); x }
Error in x[[c(as.raw(42))]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-c(43); x }
Error in x[[c(as.raw(42))]] <- c(43) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-integer(); x }
Error in x[[c(as.raw(42))]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42), as.raw(7))]]<-c(42,43); x }
Error in x[[c(as.raw(42), as.raw(7))]] <- c(42, 43) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42), as.raw(7), as.raw(1))]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, c(as.raw(42), as.raw(7), as.raw(1)), value = c(42,  :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(integer()))]]<-c(42,43); x }
Error in x[[c(as.raw(integer()))]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[complex()]]<-c(42,43); x }
Error in x[[complex()]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-c(42); x }
Error in x[[list()]] <- c(42) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-c(42,43); x }
Error in x[[list()]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-integer(); x }
Error in x[[list()]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-c(42); x }
Error in x[[list(1)]] <- c(42) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-c(42,43); x }
Error in x[[list(1)]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-integer(); x }
Error in x[[list(1)]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2)]]<-c(42,43); x }
Error in x[[list(1, 2)]] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3)]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(-1, -2)]<-42; x }
     [,1] [,2]
[1,]    1   42
[2,]    2   42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,0,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,0,1)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4
Warning message:
In x[c(0, 0, 1)] <- c(42, 43) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,1)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4
Warning message:
In x[c(0, 1)] <- c(42, 43) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,1,1)]<-c(42, 43); x }
     [,1] [,2]
[1,]   43    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,42+7i)]<-c(42,43); x }
Error in x[c(0, 42 + (0+7i))] <- c(42, 43) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-c(42); x }
Error in x[c(1 + (0+1i))] <- c(42) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-c(42,43); x }
Error in x[c(1 + (0+1i))] <- c(42, 43) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-integer(); x }
Error in x[c(1 + (0+1i))] <- integer() : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i,42+7i,3+3i)]<-c(42,43); x }
Error in x[c(1 + (0+1i), 42 + (0+7i), 3 + (0+3i))] <- c(42, 43) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1, NA), 2]<-7; x }
     [,1] [,2]
[1,]    1    7
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1, NA)]<-7; x }
     [,1] [,2]
[1,]    7    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4
Warning message:
In x[c(1, 0)] <- c(42, 43) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,0,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4
Warning message:
In x[c(1, 0, 0)] <- c(42, 43) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,1,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]   43    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,4)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2   43

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,NA)]<-c(42, 43); x }
Error in x[c(1, NA)] <- c(42, 43) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(NA, 1),1]<-7; x }
     [,1] [,2]
[1,]    7    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(NA, 1),1]<-c(7, 42); x }
Error in x[c(NA, 1), 1] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(NA, NA),1]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(NA,1)]<-c(42, 43); x }
Error in x[c(NA, 1)] <- c(42, 43) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-c(42,43); x }
Error in x[c(as.raw(42))] <- c(42, 43) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-c(43); x }
Error in x[c(as.raw(42))] <- c(43) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-integer(); x }
Error in x[c(as.raw(42))] <- integer() : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42), as.raw(7))]<-c(42,43); x }
Error in x[c(as.raw(42), as.raw(7))] <- c(42, 43) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42), as.raw(7), as.raw(1))]<-c(42,43); x }
Error in x[c(as.raw(42), as.raw(7), as.raw(1))] <- c(42, 43) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(integer()))]<-c(42,43); x }
Error in x[c(as.raw(integer()))] <- c(42, 43) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[complex()]<-c(42,43); x }
Error in x[complex()] <- c(42, 43) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list()]<-c(42); x }
Error in x[list()] <- c(42) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list()]<-c(42,43); x }
Error in x[list()] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list()]<-integer(); x }
Error in x[list()] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-c(42); x }
Error in x[list(1)] <- c(42) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-c(42,43); x }
Error in x[list(1)] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-integer(); x }
Error in x[list(1)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2)]<-c(42,43); x }
Error in x[list(1, 2)] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3)]<-c(42,43); x }
Error in x[list(1, 2, 3)] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[0]<-NULL; x }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[1]<-NULL; x }
Error in x[1] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[1]<-c(1,1); x }
[1] 1 2 3 4
Warning message:
In x[1] <- c(1, 1) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[[1]]<-c(1,1); x }
Error in x[[1]] <- c(1, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[c(1, NA)]<-7; x }
[1] 7 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[c(1, NA)]<-c(7, 42); x }
Error in x[c(1, NA)] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:8; dim(x)<-c(2,2,2); x[[-3, 1, 1]] }
Error in x[[-3, 1, 1]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[0]<-integer(); x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[1,1,1]<-42; x }
Error in x[1, 1, 1] <- 42 : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[1,1]<-42; x }
Error in x[1, 1] <- 42 : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[1]<-integer(); x }
Error in x[1] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[0]]<-integer(); x }
Error in x[[0]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[1,1,1]]<-42; x }
Error in x[[1, 1, 1]] <- 42 : [[ ]] improper number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[1,1]]<-42; x }
Error in x[[1, 1]] <- 42 : [[ ]] improper number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[]] }
Error in x[[]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[]]<-42; x }
Error in x[[]] <- 42 : [[ ]] with missing subscript

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[c(1, 1)]] }
Error in x[[c(1, 1)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[]<-42; x }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-2; x[NULL] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-2; x[[NULL]] }
Error in x[[NULL]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[0]<-42; x }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[NA]<-42; x }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[NA]<-c(42, 7); x }
Error in x[NA] <- c(42, 7) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[NULL]<-42; x }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[[0]]<-42; x }
Error in x[[0]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[[NA]]<-42; x }
Error in x[[NA]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[[NA]]<-c(42, 7); x }
Error in x[[NA]] <- c(42, 7) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[[NULL]]<-42; x }
Error in x[[NULL]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1,1,1]<-42; x }
Error in x[1, 1, 1] <- 42 : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1,1]<-42; x }
Error in x[1, 1] <- 42 : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1,1]<-NULL }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1]<-42+7i; x }
[1] 42+7i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1]<-42; x }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[7]<-42; x }
[1] NA NA NA NA NA NA 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[[1,1,1]]<-42; x }
Error in x[[1, 1, 1]] <- 42 : [[ ]] improper number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[[1,1]]<-42; x }
Error in x[[1, 1]] <- 42 : [[ ]] improper number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[c("a", "b")]<-42L; x }
 a  b
42 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-as.integer(1:4); dim(x)<-c(2,2); x[[as.integer(NA)]] }
Error in x[[as.integer(NA)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-as.integer(1:4); x[[as.integer(NA)]] }
Error in x[[as.integer(NA)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c("a", "b"); dim(x)<-c(2,1); dimnames(x)<-list(c("Z", "X"), NULL); x[, "Z"] }
Error in x[, "Z"] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1); x[[-4]]<-7 }
Error in x[[-4]] <- 7 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1); x[[NA]] }
Error in x[[NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(1,2); dimnames(x)<-list("a", c("b", "c")); x[,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(1,2); dimnames(x)<-list(NULL, c("b", "c")); x[,1] }
b
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1); dimnames(x)<-list(c("b", "c"), "d"); x[1,] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1); dimnames(x)<-list(c("b", "c"), NULL); x[1,] }
b
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c("b", "c"), "a", NULL); x[1,,] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c("b", "c"), NULL, "a"); x[1,,] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c("b", "c"), NULL, NULL); x[1,,] }
b
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-2; attr(x, "foo")<-"foo"; x["a"]<-42; attributes(x) }
$foo
[1] "foo"

$names
[1] ""  ""  "a"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-2; attr(x, "foo")<-"foo"; x[1]<-42; attributes(x) }
$dim
[1] 2

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list("a", c("b", "c")); x["z", "x"] }
Error in x["z", "x"] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list("a", c("b", "c")); x[["z", "x"]] }
Error in x[["z", "x"]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); x["a", "b"] }
Error in x["a", "b"] : no 'dimnames' attribute for array

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); x[["a", "b"]] }
Error in x[["a", "b"]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); x[[c("a")]] }
Error in x[[c("a")]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); x[c("a")] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); x[[c("a")]] }
Error in x[[c("a")]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); x[[c("a", "b")]] }
Error in x[[c("a", "b")]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); x[c("a")] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); x[c("a", "b")] }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); y<-list(a=x); names(y$a)<-"c"; names(y$a) }
[1] "c" NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); y<-list(a=x); names(y[1])<-"c"; names(y[1]) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); y<-list(a=x); names(y[1])<-"c"; names(y[[1]]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); y<-list(a=x); names(y[[1]])<-"c"; names(y[1]) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); y<-list(a=x); names(y[[1]])<-"c"; names(y[[1]]) }
[1] "c" NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3); x[[-1]]<-7 }
Error in x[[-1]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3); x[[-4]]<-7 }
Error in x[[-4]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3); x[[-4]]<-NULL }
Error in x[[-4]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1,1]<-NULL; x }
Error in x[1, 1] <- NULL :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1]<-NULL; x }
Error in x[1] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1,1]]<-NULL; x }
Error in x[[1, 1]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(5,10); names(x)<-c(101, 102); names(x)[1]<-42; x }
 42 102
  5  10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(TRUE,TRUE,FALSE); x[1L] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(TRUE,TRUE,FALSE); x[2L] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(TRUE,TRUE,FALSE); x[3L] }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1); x["b"]<-2; x }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1); x[c("a","b")]<-c(7,42); x }
 a  b
 7 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1); x[c("a","b","b")]<-c(7,42,100); x }
  a   b
  7 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1, b=2); x[1] }
a
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1, b=2); x[[1]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1, b=2); x[[c("z", "x")]] }
Error in x[[c("z", "x")]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1, b=2); x[c("z", "x")] }
<NA> <NA>
  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x["y"] }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[["y"]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[-1]] }
Error in x[[-1]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[-4]]<-7 }
Error in x[[-4]] <- 7 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[-4]]<-NULL }
Error in x[[-4]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[0]] }
Error in x[[0]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[NA]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[NULL]] }
Error in x[[NULL]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[as.integer(NA)]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(0)]] }
Error in x[[c(0)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 0)]] }
Error in x[[c(1, 0)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 1)]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 1, 1)]] }
Error in x[[c(1, 1, 1)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 2)]] }
Error in x[[c(1, 2)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 2, 0)]] }
Error in x[[c(1, 2, 0)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, NA)]] }
Error in x[[c(1, NA)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(NA)]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(NULL)]] }
Error in x[[c(NULL)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(TRUE, FALSE)]] }
Error in x[[c(TRUE, FALSE)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(TRUE, TRUE)]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, 2, list(42)); x[[c(-1, 1)]]<-7; x }
Error in x[[c(-1, 1)]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); dim(x)<-c(1,2); x[[c(2, 5)]]<-7; x }
     [,1] [,2]
[1,] 1    List,5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); dim(x)<-c(1,2); x[c(2, 5)]<-7; x }
[[1]]
[1] 1

[[2]]
[1] 7

[[3]]
NULL

[[4]]
NULL

[[5]]
[1] 7


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(-1, 1)]]<-7; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 7



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(-1, 1)]]<-NULL; x }
[[1]]
[1] 1

[[2]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(-3, 1)]]<-7; x }
Error in x[[c(-3, 1)]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(2, 1)]]<-NULL; x }
[[1]]
[1] 1

[[2]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(2, 5)]]<-7; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 42

[[2]][[2]]
NULL

[[2]][[3]]
NULL

[[2]][[4]]
NULL

[[2]][[5]]
[1] 7



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(2, 5)]]<-NULL; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 42



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[c(2, 5)]<-7; x }
[[1]]
[1] 1

[[2]]
[1] 7

[[3]]
NULL

[[4]]
NULL

[[5]]
[1] 7


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42, 1)); x[[c(-1, -2)]]<-7; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 7

[[2]][[2]]
[1] 1



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42, 1)); x[[c(-1, -3)]]<-7; x }
Error in x[[c(-1, -3)]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42, 1, 2)); x[[c(-1, -2)]]<-7; x }
Error in x[[c(-1, -2)]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-1]] }
Error in x[[-1]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-1]]<-7 }
Error in x[[-1]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-1]]<-NULL }
Error in x[[-1]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-4]]<-7 }
Error in x[[-4]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-4]]<-NULL }
Error in x[[-4]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-5]] }
Error in x[[-5]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1,1]<-NULL; x }
Error in x[1, 1] <- NULL :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1]<-NULL; x }
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1,1]]<-NULL; x }
Error in x[[1, 1]] <- NULL :
  incompatible types (from NULL to list) in [[ assignment

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1]]<-NULL; x }
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(-1, 1)]] }
Error in x[[c(-1, 1)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(0, 1)]] }
Error in x[[c(0, 1)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(1, -1)]] }
Error in x[[c(1, -1)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(1, 2)]] }
Error in x[[c(1, 2)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(1, NULL, 2)]] }
Error in x[[c(1, NULL, 2)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(2, 1, 3)]] }
Error in x[[c(2, 1, 3)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NA, 1)]] }
Error in x[[c(NA, 1)]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL, 2, 1, 3)]] }
Error in x[[c(NULL, 2, 1, 3)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL, 2, NULL, 1, 3)]] }
Error in x[[c(NULL, 2, NULL, 1, 3)]] :
  recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL, 2,1)]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL, NULL,1)]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL,1)]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x["a"] }
$a
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x["b"] }
$<NA>
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x[["a"]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x[["b"]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x[[c("a", "y")]] }
Error in x[[c("a", "y")]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=list(42)); x[[c("a", "y")]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=list(b=42)); x[[c("a", "b")]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,42)); x[[c(1, 2)]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42))); x[[c(1, 2)]] }
[[1]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42))); x[[c(1, 2)]]<-7; x }
[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[1] 7



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 2)]] }
[[1]]
[1] 143


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 2)]]<-7; x }
[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[[1]][[2]][[1]]
[1] 42

[[1]][[2]][[2]]
[1] 7




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 7)]]<-7; x }
[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[[1]][[2]][[1]]
[1] 42

[[1]][[2]][[2]]
[[1]][[2]][[2]][[1]]
[1] 143


[[1]][[2]][[3]]
NULL

[[1]][[2]][[4]]
NULL

[[1]][[2]][[5]]
NULL

[[1]][[2]][[6]]
NULL

[[1]][[2]][[7]]
[1] 7




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 7, 7)]]<-7; x }
Error in `[[<-`(`*tmp*`, c(1, 2, 7, 7), value = 7) :
  no such index at level 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, 2, 2, 1)]]<-7; x }
[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[[1]][[2]][[1]]
[1] 42

[[1]][[2]][[2]]
[[1]][[2]][[2]][[1]]
[1] 7





##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, 2, 2, NA)]]<-7; x }
Error in x[[c(1, 2, 2, NA)]] <- 7 :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, NA, 2, 1)]]<-7; x }
Error in `[[<-`(`*tmp*`, c(1, NA, 2, 1), value = 7) :
  no such index at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ y<-list(42,7); dim(y)<-c(1:2); attr(y, "foo")<-"foo"; x<-list(1, y); dim(x)<-c(1,2); x[[c(2, 1)]]<-7; x[2] }
[[1]]
     [,1] [,2]
[1,] 7    7
attr(,"foo")
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[,0,]) }
[1] 2 0 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,-1,0]) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,2,0]) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,3,0]) }
Error in x[0, 3, 0] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[1,0,]) }
[1] 0 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); x[-1,-1, 0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); x[-1,0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA] }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42); x }
Error in x[1, NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1] }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42); x }
Error in x[NA, 1] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42); x }
Error in x[NA, NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA] }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7, 42, 1); x }
Error in x[NA] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7,42); x }
Error in x[NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]] }
Error in x[[1, NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-7; x }
Error in x[[1, NA]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42); x }
Error in x[[1, NA]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42, 1); x }
Error in x[[1, NA]] <- c(7, 42, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]] }
Error in x[[NA, 1]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-7; x }
Error in x[[NA, 1]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42); x }
Error in x[[NA, 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42, 1); x }
Error in x[[NA, 1]] <- c(7, 42, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]] }
Error in x[[NA, NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-7; x }
Error in x[[NA, NA]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42); x }
Error in x[[NA, NA]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42, 1); x }
Error in x[[NA, NA]] <- c(7, 42, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]] }
Error in x[[NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-7; x }
Error in x[[NA]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42); x }
Error in x[[NA]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42, 1); x }
Error in x[[NA]] <- c(7, 42, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA] }
[[1]]
NULL

[[2]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-7; x }
     [,1] [,2]
[1,] 1    3
[2,] 2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42); x }
Error in x[1, NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42, 1); x }
Error in x[1, NA] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1] }
[[1]]
NULL

[[2]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-7; x }
     [,1] [,2]
[1,] 1    3
[2,] 2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42); x }
Error in x[NA, 1] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42, 1); x }
Error in x[NA, 1] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA] }
     [,1] [,2]
[1,] NULL NULL
[2,] NULL NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-7; x }
     [,1] [,2]
[1,] 1    3
[2,] 2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42); x }
Error in x[NA, NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42, 1); x }
Error in x[NA, NA] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA] }
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-7; x }
     [,1] [,2]
[1,] 1    3
[2,] 2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7, 42, 1); x }
Error in x[NA] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7,42); x }
Error in x[NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]] }
Error in x[[1, NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-7; x }
Error in x[[1, NA]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42); x }
Error in x[[1, NA]] <- c(7, 42) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42, 1); x }
Error in x[[1, NA]] <- c(7, 42, 1) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]] }
Error in x[[NA, 1]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-7; x }
Error in x[[NA, 1]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42); x }
Error in x[[NA, 1]] <- c(7, 42) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42, 1); x }
Error in x[[NA, 1]] <- c(7, 42, 1) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]] }
Error in x[[NA, NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-7; x }
Error in x[[NA, NA]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42); x }
Error in x[[NA, NA]] <- c(7, 42) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42, 1); x }
Error in x[[NA, NA]] <- c(7, 42, 1) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-7; x }
Error in x[[NA]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42); x }
Error in x[[NA]] <- c(7, 42) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42, 1); x }
Error in x[[NA]] <- c(7, 42, 1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ mp<-getOption("max.print"); options(max.print=3); x<-c(1,2,3,4,5); attr(x, "foo")<-"foo"; print(x); options(max.print=mp) }
[1] 1 2 3
 [ reached getOption("max.print") -- omitted 2 entries ]
attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ mp<-getOption("max.print"); options(max.print=3); x<-c(1,2,3,4,5); print(x); options(max.print=mp) }
[1] 1 2 3
 [ reached getOption("max.print") -- omitted 2 entries ]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-10001:10008; dim(x)<-c(2,2,2); x }
, , 1

      [,1]  [,2]
[1,] 10001 10003
[2,] 10002 10004

, , 2

      [,1]  [,2]
[1,] 10005 10007
[2,] 10006 10008


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-101:108; dim(x)<-c(2,2,2); dimnames(x)<-list(c(1, 2), c(3, 4), c(5, 6)); x }
, , 5

    3   4
1 101 103
2 102 104

, , 6

    3   4
1 105 107
2 106 108


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:16; dim(x)<-c(2,2,2,2); x }
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2

     [,1] [,2]
[1,]   13   15
[2,]   14   16


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:16; dim(x)<-c(2,4,2); x }
, , 1

     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8

, , 2

     [,1] [,2] [,3] [,4]
[1,]    9   11   13   15
[2,]   10   12   14   16


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:256; dim(x)<-c(4,4,4,4); x }
, , 1, 1

     [,1] [,2] [,3] [,4]
[1,]    1    5    9   13
[2,]    2    6   10   14
[3,]    3    7   11   15
[4,]    4    8   12   16

, , 2, 1

     [,1] [,2] [,3] [,4]
[1,]   17   21   25   29
[2,]   18   22   26   30
[3,]   19   23   27   31
[4,]   20   24   28   32

, , 3, 1

     [,1] [,2] [,3] [,4]
[1,]   33   37   41   45
[2,]   34   38   42   46
[3,]   35   39   43   47
[4,]   36   40   44   48

, , 4, 1

     [,1] [,2] [,3] [,4]
[1,]   49   53   57   61
[2,]   50   54   58   62
[3,]   51   55   59   63
[4,]   52   56   60   64

, , 1, 2

     [,1] [,2] [,3] [,4]
[1,]   65   69   73   77
[2,]   66   70   74   78
[3,]   67   71   75   79
[4,]   68   72   76   80

, , 2, 2

     [,1] [,2] [,3] [,4]
[1,]   81   85   89   93
[2,]   82   86   90   94
[3,]   83   87   91   95
[4,]   84   88   92   96

, , 3, 2

     [,1] [,2] [,3] [,4]
[1,]   97  101  105  109
[2,]   98  102  106  110
[3,]   99  103  107  111
[4,]  100  104  108  112

, , 4, 2

     [,1] [,2] [,3] [,4]
[1,]  113  117  121  125
[2,]  114  118  122  126
[3,]  115  119  123  127
[4,]  116  120  124  128

, , 1, 3

     [,1] [,2] [,3] [,4]
[1,]  129  133  137  141
[2,]  130  134  138  142
[3,]  131  135  139  143
[4,]  132  136  140  144

, , 2, 3

     [,1] [,2] [,3] [,4]
[1,]  145  149  153  157
[2,]  146  150  154  158
[3,]  147  151  155  159
[4,]  148  152  156  160

, , 3, 3

     [,1] [,2] [,3] [,4]
[1,]  161  165  169  173
[2,]  162  166  170  174
[3,]  163  167  171  175
[4,]  164  168  172  176

, , 4, 3

     [,1] [,2] [,3] [,4]
[1,]  177  181  185  189
[2,]  178  182  186  190
[3,]  179  183  187  191
[4,]  180  184  188  192

, , 1, 4

     [,1] [,2] [,3] [,4]
[1,]  193  197  201  205
[2,]  194  198  202  206
[3,]  195  199  203  207
[4,]  196  200  204  208

, , 2, 4

     [,1] [,2] [,3] [,4]
[1,]  209  213  217  221
[2,]  210  214  218  222
[3,]  211  215  219  223
[4,]  212  216  220  224

, , 3, 4

     [,1] [,2] [,3] [,4]
[1,]  225  229  233  237
[2,]  226  230  234  238
[3,]  227  231  235  239
[4,]  228  232  236  240

, , 4, 4

     [,1] [,2] [,3] [,4]
[1,]  241  245  249  253
[2,]  242  246  250  254
[3,]  243  247  251  255
[4,]  244  248  252  256


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(2,2,2,2,2); x }
, , 1, 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2, 1

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2, 1

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 1, 2

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 1, 2

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 1, 2, 2

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 2, 2, 2

     [,1] [,2]
[1,]   29   31
[2,]   30   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(2,2,2,4); x }
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 3

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 3

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 1, 4

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 2, 4

     [,1] [,2]
[1,]   29   31
[2,]   30   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(2,2,4,2); x }
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 3, 1

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 4, 1

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 2

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 2

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 3, 2

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 4, 2

     [,1] [,2]
[1,]   29   31
[2,]   30   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(2,4,2,2); x }
, , 1, 1

     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8

, , 2, 1

     [,1] [,2] [,3] [,4]
[1,]    9   11   13   15
[2,]   10   12   14   16

, , 1, 2

     [,1] [,2] [,3] [,4]
[1,]   17   19   21   23
[2,]   18   20   22   24

, , 2, 2

     [,1] [,2] [,3] [,4]
[1,]   25   27   29   31
[2,]   26   28   30   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(4,2,2,2); x }
, , 1, 1

     [,1] [,2]
[1,]    1    5
[2,]    2    6
[3,]    3    7
[4,]    4    8

, , 2, 1

     [,1] [,2]
[1,]    9   13
[2,]   10   14
[3,]   11   15
[4,]   12   16

, , 1, 2

     [,1] [,2]
[1,]   17   21
[2,]   18   22
[3,]   19   23
[4,]   20   24

, , 2, 2

     [,1] [,2]
[1,]   25   29
[2,]   26   30
[3,]   27   31
[4,]   28   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(1,2,2); x }
, , 1

     [,1] [,2]
[1,]    1    2

, , 2

     [,1] [,2]
[1,]    3    4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c("a", "b"), "c", c("d", "e")); x }
, , d

  c
a 1
b 2

, , e

  c
a 3
b 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(2,1,2); x }
, , 1

     [,1]
[1,]    1
[2,]    2

, , 2

     [,1]
[1,]    3
[2,]    4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(2,2,1); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(2,2,1,1); x }
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:64; dim(x)<-c(2,2,2,2,2,2); x }
, , 1, 1, 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1, 1, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2, 1, 1

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2, 1, 1

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 1, 2, 1

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 1, 2, 1

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 1, 2, 2, 1

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 2, 2, 2, 1

     [,1] [,2]
[1,]   29   31
[2,]   30   32

, , 1, 1, 1, 2

     [,1] [,2]
[1,]   33   35
[2,]   34   36

, , 2, 1, 1, 2

     [,1] [,2]
[1,]   37   39
[2,]   38   40

, , 1, 2, 1, 2

     [,1] [,2]
[1,]   41   43
[2,]   42   44

, , 2, 2, 1, 2

     [,1] [,2]
[1,]   45   47
[2,]   46   48

, , 1, 1, 2, 2

     [,1] [,2]
[1,]   49   51
[2,]   50   52

, , 2, 1, 2, 2

     [,1] [,2]
[1,]   53   55
[2,]   54   56

, , 1, 2, 2, 2

     [,1] [,2]
[1,]   57   59
[2,]   58   60

, , 2, 2, 2, 2

     [,1] [,2]
[1,]   61   63
[2,]   62   64


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:64; dim(x)<-c(2,2,2,4,2); x }
, , 1, 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2, 1

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2, 1

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 3, 1

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 3, 1

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 1, 4, 1

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 2, 4, 1

     [,1] [,2]
[1,]   29   31
[2,]   30   32

, , 1, 1, 2

     [,1] [,2]
[1,]   33   35
[2,]   34   36

, , 2, 1, 2

     [,1] [,2]
[1,]   37   39
[2,]   38   40

, , 1, 2, 2

     [,1] [,2]
[1,]   41   43
[2,]   42   44

, , 2, 2, 2

     [,1] [,2]
[1,]   45   47
[2,]   46   48

, , 1, 3, 2

     [,1] [,2]
[1,]   49   51
[2,]   50   52

, , 2, 3, 2

     [,1] [,2]
[1,]   53   55
[2,]   54   56

, , 1, 4, 2

     [,1] [,2]
[1,]   57   59
[2,]   58   60

, , 2, 4, 2

     [,1] [,2]
[1,]   61   63
[2,]   62   64


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:64; dim(x)<-c(4,4,4); x }
, , 1

     [,1] [,2] [,3] [,4]
[1,]    1    5    9   13
[2,]    2    6   10   14
[3,]    3    7   11   15
[4,]    4    8   12   16

, , 2

     [,1] [,2] [,3] [,4]
[1,]   17   21   25   29
[2,]   18   22   26   30
[3,]   19   23   27   31
[4,]   20   24   28   32

, , 3

     [,1] [,2] [,3] [,4]
[1,]   33   37   41   45
[2,]   34   38   42   46
[3,]   35   39   43   47
[4,]   36   40   44   48

, , 4

     [,1] [,2] [,3] [,4]
[1,]   49   53   57   61
[2,]   50   54   58   62
[3,]   51   55   59   63
[4,]   52   56   60   64


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2, 4); toString(x) }
[1] "1, 2, 3, 4, 5, 6, 7, 8"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2, 4); x }
     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), NULL, NULL); x }
, , 1

    [,1] [,2]
101    1    3
102    2    4

, , 2

    [,1] [,2]
101    5    7
102    6    8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), NULL, c(105, 106)); x }
, , 105

    [,1] [,2]
101    1    3
102    2    4

, , 106

    [,1] [,2]
101    5    7
102    6    8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(103, 104), NULL); x }
, , 1

    103 104
101   1   3
102   2   4

, , 2

    103 104
101   5   7
102   6   8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(103, 104), c(105, 106)); x }
, , 105

    103 104
101   1   3
102   2   4

, , 106

    103 104
101   5   7
102   6   8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(105, 106)); x }
, , 1

    105 106
101   1   3
102   2   4

, , 2

    105 106
101   5   7
102   6   8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
      a  a  a  a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa  b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa  b cc  d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1,2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }
     [,1]      [,2]
[1,] Numeric,2 2
[2,] 1         3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1:2, 100003:100004,10005:10008); dim(x)<-c(2,2,2); x }
, , 1

     [,1]   [,2]
[1,]    1 100003
[2,]    2 100004

, , 2

      [,1]  [,2]
[1,] 10005 10007
[2,] 10006 10008


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1:4,10005:10008); dim(x)<-c(2,2,2); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

      [,1]  [,2]
[1,] 10005 10007
[2,] 10006 10008


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(3+2i, 5+0i, 1+3i, 5+3i, 2-4i, 5-2i, 6-7i, 5-0i); dim(x)<-c(2,2,2); x }
, , 1

     [,1] [,2]
[1,] 3+2i 1+3i
[2,] 5+0i 5+3i

, , 2

     [,1] [,2]
[1,] 2-4i 6-7i
[2,] 5-2i 5+0i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
      a  a  a  a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa  b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa  b cc  d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-character(0); y<-list(x, 1+1i, 2+2i, 3+3i); dim(y)<-c(2, 2); y }
     [,1]        [,2]
[1,] Character,0 2+2i
[2,] 1+1i        3+3i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 0); x }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 0, 2, 2, 2); x }
, , 1, 1, 1



, , 2, 1, 1



, , 1, 2, 1



, , 2, 2, 1



, , 1, 1, 2



, , 2, 1, 2



, , 1, 2, 2



, , 2, 2, 2




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 1); dimnames(x)<-list(NULL, "a"); x }
     a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 1); x }
     [,1]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 3); x }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 4); dimnames(x)<-list(NULL, c("a", "bbbbbbbbbbbb", "c", "d")); x }
     a bbbbbbbbbbbb c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0); dimnames(x)<-list("a"); x }

a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0); x }

[1,]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 0); x }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 0, 2); x }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 2); x }
, , 1


[1,]

, , 2


[1,]


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 2, 0, 2); x }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 2, 2, 2); dimnames(x)<-list("a", NULL, c("b", "c"), c("d", "e"), c("f", "g")); x }
, , b, d, f


a

, , c, d, f


a

, , b, e, f


a

, , c, e, f


a

, , b, d, g


a

, , c, d, g


a

, , b, e, g


a

, , c, e, g


a


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(3, 0); x }

[1,]
[2,]
[3,]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }
     [,1]      [,2]
[1,] Integer,0 2
[2,] 1         3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(1, 2, 3, 4); dim(x)<-c(2, 2); toString(x) }
[1] "1, 2, 3, 4"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(1,2,3,4); dim(x)<-c(2, 2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }
     [,1]   [,2]
[1,] List,4 2
[2,] 1      3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(1,2,3,4,5,6,7,8); dim(x)<-c(2,2,2); x }
, , 1

     [,1] [,2]
[1,] 1    3
[2,] 2    4

, , 2

     [,1] [,2]
[1,] 5    7
[2,] 6    8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ z<-list(1,2,3,4); dim(z)<-c(2,2); x<-list(z,2,3,42); dim(x)<-c(2, 2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }
     [,1]   [,2]
[1,] List,4 2
[2,] 1      3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-7 }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = 7) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-NULL }
Error in x[[as.raw(1), 1]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-c(7,42) }
Error in x[[as.raw(1), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-integer() }
Error in x[[as.raw(1), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-7 }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = 7) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-NULL }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = NULL) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = c(7, 42)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-integer() }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = integer(0)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-NULL }
Error in x[[as.raw(1)]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1) }
Error in x[[as.raw(1)]] <- c(1) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1,2) }
Error in x[[as.raw(1)]] <- c(1, 2) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1,2,3) }
Error in x[[as.raw(1)]] <- c(1, 2, 3) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-integer() }
Error in x[[as.raw(1)]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-NULL }
Error in x[as.raw(1)] <- NULL : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1) }
Error in x[as.raw(1)] <- c(1) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1,2) }
Error in x[as.raw(1)] <- c(1, 2) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1,2,3) }
Error in x[as.raw(1)] <- c(1, 2, 3) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-integer() }
Error in x[as.raw(1)] <- integer() : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-7 }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = 7) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = NULL) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = c(7, 42)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = integer(0)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-7 }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = 7) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-NULL }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = NULL) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = c(7, 42)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-integer() }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = integer(0)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-NULL }
Error in x[[as.raw(1)]] <- NULL : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1) }
Error in x[[as.raw(1)]] <- c(1) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1,2) }
Error in x[[as.raw(1)]] <- c(1, 2) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1,2,3) }
Error in x[[as.raw(1)]] <- c(1, 2, 3) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-integer() }
Error in x[[as.raw(1)]] <- integer() : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-NULL }
Error in x[as.raw(1)] <- NULL : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1) }
Error in x[as.raw(1)] <- c(1) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1,2) }
Error in x[as.raw(1)] <- c(1, 2) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1,2,3) }
Error in x[as.raw(1)] <- c(1, 2, 3) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-integer() }
Error in x[as.raw(1)] <- integer() : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[-1L] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[-2L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[0L] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[2L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[FALSE] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[NA] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[TRUE] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-1:3; x[1.1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-1:3; x[2.1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-1:3; x[3.1] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-3:1; x[1.1] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-3:1; x[2.1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-3:1; x[3.1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1,2,3); x[1.1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1,2,3); x[2.1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1,2,3); x[3.1] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1L,2L,3L); x[1.1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1L,2L,3L); x[2.1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1L,2L,3L); x[3.1] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-1:3; x[-1.1] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-1:3; x[-2.1] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-1:3; x[-3.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1,2,3); x[-1.1] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1,2,3); x[-2.1] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1,2,3); x[-3.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-1.1] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-2.1] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-3.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
# { x <- 1:3 ; x[[NULL]] }
Error in x[[NULL]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ b <- c(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[1] <- 3+1i ; b }
     [,1]
[1,] 3+1i
[2,] 3+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b["hello"] <- NULL ; b }
[[1]]
[1] 1+2i

[[2]]
[1] 3+4i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, 1, 3:4) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, as.integer(NA), 3:4) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, list(), 3) }
Error in b[[i]] <- v : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, list(1), 3) }
Error in b[[i]] <- v : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, 1+2i, 3) }
Error in b[i] <- v : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-1) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-3) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,-1) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,4) }
Error in x[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,NA) }
Error in x[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,c(3,3)) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,c(TRUE,FALSE)) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:4,-3) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(2,-2) }
Error in x[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(2,-3) }
Error in x[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),1+0i) }
Error in x[[i]] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),FALSE) }
Error in x[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),TRUE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]]} ; f(list(1,2,3,4), 3); f(f,2) }
Error in x[[i]] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-4) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,0) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,c(1,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,c(TRUE,FALSE)) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(as.raw(c(10,11)),-4) }
[1] 0a 0b

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(as.raw(c(10,11)),0) }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(as.raw(c(10,11)),4) }
[1] 00

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c("a","b"),-4) }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c("a","b"),0) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c("a","b"),4) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c("a","b"),NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(1+2i,3+4i),-4) }
[1] 1+2i 3+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(1+2i,3+4i),4) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(1+2i,3+4i),NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),-2) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),-4) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),0) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),4) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a="a",b="b"),0) }
named character(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a=1+2i,b=3+4i),4) }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a=1L,b=2L),0) }
named integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a=TRUE,b=FALSE),0) }
named logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a=TRUE,b=FALSE),4) }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(integer(), NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(), NA) }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),-4) }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),4) }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(a=1,b=2),4) }
$<NA>
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(1+2i,3+4i) ; attr(z, "my") <- 1 ; f(z,-10) }
[1] 1+2i 3+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(1,3) ; attr(z, "my") <- 1 ; f(z,-10) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(1L,3L) ; attr(z, "my") <- 1 ; f(z,-10) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(TRUE,FALSE) ; attr(z, "my") <- 1 ; f(z,-10) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(a="a",b="b") ; attr(z, "my") <- 1 ; f(z,-10) }
  a   b
"a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(a=as.raw(10),b=as.raw(11)) ; attr(z, "my") <- 1 ; f(z,-10) }
 a  b
0a 0b

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,"a") ; f(function(){3},"b") }
Error in x[i] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,"a") ; f(x,2) }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,"a") }
a
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1 ; attr(x, "hi") <- 2; x[2] <- 2; attr(x, "hi") }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:2 ; x[as.integer(NA)] <- 3:4 }
Error in x[as.integer(NA)] <- 3:4 :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[2] <- integer() }
Error in x[2] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[TRUE] <- 10 ; x }
[1] 10 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[[FALSE]] <- 10 ; x }
Error in x[[FALSE]] <- 10 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[[NA]] <- 10 ; x }
Error in x[[NA]] <- 10 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[[TRUE]] <- 10 ; x }
[1] 10  2  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[[TRUE]] <- 1:2 }
Error in x[[TRUE]] <- 1:2 :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:4 ; y <- -1 ; x[y] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:4 ; y <- 10 ; x[y] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- as.list(1:2) ; f <- function(i) { x[[i]] <- NULL ; x } ; f(1) ; f(as.raw(10)) }
Error in x[[i]] <- NULL : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- as.list(1:2) ; f <- function(i) { x[i] <- NULL ; x } ; f(1) ; f(NULL) }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(1,4) ; y <- -1 ; x[y] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(1,4) ; y <- -1L ; x[y] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(1,4) ; y <- 10 ; x[y] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(1,4) ; y <- 10L ; x[y] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(TRUE, FALSE, NA) ; x[0] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a="A", b="B", c="C") ; x[-2] }
  a   c
"A" "C"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a="A", b="B", c="C") ; x[0] }
named character(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a="A", b="B", c="C") ; x[10] }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1+1i, b=2+2i, c=3+3i) ; x[0] }
named complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1+1i, b=2+2i, c=3+3i) ; x[10] }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1+2i, b=2+3i, c=3) ; x[-2] }
   a    c
1+2i 3+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[-2] }
a c
1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[0] }
named numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[10] }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[2] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[[2]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1,b=2) ; y <- 2 ; x[y] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1,b=2) ; y <- 2L ; x[y] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; x["b"] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; x["d"] }
d
4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1L, b=2L, c=3L) ; x[-2] }
a c
1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1L, b=2L, c=3L) ; x[0] }
named integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1L, b=2L, c=3L) ; x[10] }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=TRUE, b=FALSE, c=NA) ; x[-2] }
   a    c
TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=TRUE, b=FALSE, c=NA) ; x[0] }
named logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[-2] }
 a  c
0a 0c

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[0] }
named raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[10] }
<NA>
00

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(as.raw(10), as.raw(11), as.raw(12)) ; x[-2] }
[1] 0a 0c

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- function(){3} ; y <- 3 ; x[[y]] }
Error in x[[y]] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1,2,3,4) ; y <- 3 ; x[[y]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1,2,3,4) ; y <- 3 ; x[y] }
[[1]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1,4) ; y <- -1 ; x[y] }
[[1]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1,4) ; y <- 4 ; x[y] }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1L, 2L, 3L) ; x[10] }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(a=1,b=4) ; y <- 2 ; x[y] }
$b
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(a=1L, b=2L, c=3L) ; x[0] }
named list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-1:4; x[c(-1.5)] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-1:4; x[c(1.4,1.8)] }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-5:1 ; y <- -1L;  x[y] }
[1] 4 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-5:1 ; y <- 2L;  x[[y]] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-5:1 ; y <- 6L;  x[y] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-as.list(5:1) ; y <- 1:2;  x[[y]] }
Error in x[[y]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-as.list(5:1) ; y <- 2L;  x[[y]] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-c(TRUE,TRUE,FALSE); x[0-2] }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-function() {1} ; x[2L] }
Error in x[2L] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-function() {1} ; y <- 2;  x[y] }
Error in x[y] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-function() {1} ; y <- 2;  y[x] }
Error in y[x] : invalid subscript type 'closure'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[-1L] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[-2L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[0L] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[2L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[FALSE] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[NA] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[TRUE] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-1:3; x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-1:3; x[2L] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-1:3; x[3L] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-3:1; x[1L] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-3:1; x[2L] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-3:1; x[3L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1,2,3); x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1,2,3); x[2L] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1,2,3); x[3L] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1L,2L,3L); x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1L,2L,3L); x[2L] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1L,2L,3L); x[3L] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1,2,3); x[2.3] <- "hello"; x }
[1] "1"     "hello" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1,2,3); x[2.3] <- 100; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1,2,3); x[2.3] <- 100i; x }
[1] 1+  0i 0+100i 3+  0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1,2,3); x[2.3] <- FALSE; x }
[1] 1 0 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- "hello"; x }
[1] "1"     "hello" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- 100; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- 100L; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- 100i; x }
[1] 1+  0i 0+100i 3+  0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- FALSE; x }
[1] 1 0 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- "hello"; x }
[1] "TRUE"  "hello" "FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100; x }
[1]   1 100   0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100L; x }
[1]   1 100   0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100i; x }
[1] 1+  0i 0+100i 0+  0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- FALSE; x }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-1:3; x[-1L] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-1:3; x[-2L] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-1:3; x[-3L] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1,2,3); x[-1L] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1,2,3); x[-2L] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1,2,3); x[-3L] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-1L] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-2L] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-3L] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-1:3; x[FALSE] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-1:3; x[TRUE] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-c(1,2,3); x[FALSE] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-c(1,2,3); x[TRUE] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-c(1L,2L,3L); x[FALSE] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-c(1L,2L,3L); x[TRUE] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; typeof(x[NA]) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[-4.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[-4L] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[0.1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[0L] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[4.1] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[4L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[NA] }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); typeof(x[NA]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[-4.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[-4L] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[0.1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[0L] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[4.1] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[4L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[NA] }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); typeof(x[NA]) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[-4.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[-4L] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[0.1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[0L] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[4.1] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[4L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[NA] }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
# { b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(1:3,13L) }
[1]  1 13  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
# { x <- as.raw(c(10,11)) ; x["a"] <- NA ; x }
Error in x["a"] <- NA :
  incompatible types (from logical to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
# { x <- c(a=1+2i, b=3+4i) ; x["a"] <- as.raw(13) ; x }
Error in x["a"] <- as.raw(13) :
  incompatible types (from raw to complex) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ a <- c(1L,2L,3L); a <- 1:5; a[3] <- TRUE; a }
[1] 1 2 1 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(1) ; b[[-3]] <- as.raw(13) ; b }
Error in b[[-3]] <- as.raw(13) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[3] <- 3 ; b }
Error in b[3] <- 3 :
  incompatible types (from double to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[3] <- as.raw(13) ; b }
[1] 01 02 0d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[[-1]] <- as.raw(13) ; b }
[1] 01 0d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[[-2]] <- as.raw(13) ; b }
[1] 0d 02

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[[-3]] <- as.raw(13) ; b }
Error in b[[-3]] <- as.raw(13) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[as.double(NA)] <- as.raw(13) ; b }
[1] 01 02

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2,3)) ; b[[-2]] <- as.raw(13) ; b }
Error in b[[-2]] <- as.raw(13) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c("a","b") ; z <- b ; b[[-1L]] <- "xx" ; b }
[1] "a"  "xx"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c("a","b") ; z <- b ; b[[3L]] <- "xx" ; b }
[1] "a"  "b"  "xx"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1+2i,3+4i) ; b[3] <- 2 ; b }
[1] 1+2i 3+4i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[0L] <- 3 ; b }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[0] <- 1+2i ; b }
[1] 1+0i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[3] <- 2+3i ; b }
[1] 1+0i 2+0i 2+3i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[3] <- as.raw(13) ; b }
Error in b[3] <- as.raw(13) :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[5L] <- 3 ; b }
[1]  1  2 NA NA  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; b[2L] <- 3 ; b }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(b,13L) }
[1]  1 13

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(c(1,2),10) }
[1]  1 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10L) ; f(1:3,13L) }
[1]  1 13  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10L) ; f(b,13) }
[1]  1 13

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- b ; b[-10L] <- FALSE ; b }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- b ; b[-2] <- 3L ; b }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- b ; b[3L] <- 3L ; b }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- b ; b[3L] <- FALSE ; b }
[1] 1 2 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- c(10,11) ; attr(z,"my") <- 4 ; b[2] <- z ; b }
[1]  1 10
Warning message:
In b[2] <- z :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1L,2L) ; b[0] <- 13L ; b }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1L,2L) ; b[2] <- FALSE ; b }
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1L,2L) ; b[3] <- 13L ; b }
[1]  1  2 13

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(TRUE,NA) ; b[3] <- FALSE ; b }
[1]  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(TRUE,NA) ; z <- b ; b[-10L] <- FALSE ; b }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(TRUE,NA) ; z <- b ; b[4L] <- FALSE ; b }
[1]  TRUE    NA    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[3] <- NULL ; b }
[[1]]
[1] 1+2i

[[2]]
[1] 3+4i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- list(TRUE,NA) ; z <- b ; b[[-1L]] <- FALSE ; b }
[[1]]
[1] TRUE

[[2]]
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- list(TRUE,NA) ; z <- b ; b[[4L]] <- FALSE ; b }
[[1]]
[1] TRUE

[[2]]
[1] NA

[[3]]
NULL

[[4]]
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function() { a[3] <- 4 } ; f() }
Error in a[3] <- 4 : object 'a' not found

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i) { b[i] <- 1 } ; f(1:3,2) ; f(1:2, f) }
Error in b[i] <- 1 : invalid subscript type 'closure'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i) { b[i] <- 1 } ; f(1:3,2) ; f(f, 3) }
Error in b[i] <- 1 : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,2,10) ; f(1:2,1:3, 10) }
Error in `[[<-`(`*tmp*`, i, value = 10) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,2,10) ; f(as.list(1:2),1:3, 10) }
Error in `[[<-`(`*tmp*`, i, value = 10) :
  recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,c(2),10) ; f(1:2,0, 10) }
Error in b[[i]] <- v : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,c(2),10) ; f(1:2,2, 10) }
[1]  1 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; v } ; f(1:2,"hi",3L) ; f(1:2,c(2),10) ; f(1:2,as.integer(NA), 10) }
Error in b[[i]] <- v : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; b <- c(10L,2L) ; b[0] <- TRUE ; b }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; b <- c(10L,2L) ; b[3] <- TRUE ; b }
[1] 10  2  1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,-2,10) }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,2,10) ; f(1:2,as.integer(NA), 10) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1,2),FALSE) ; f(10,3) }
[1] 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1,2),FALSE) ; f(10L,3) }
[1] 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),10L) ; f(1,3) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),10L) ; f(1L,3) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),TRUE) ; f(10,3) }
[1] 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),TRUE) ; f(1L,3) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(TRUE,NA),FALSE) ; f(3,3) }
[1] 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(TRUE,NA),FALSE) ; f(c(FALSE,TRUE),3) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v } ; f(1:3,2) ; f(1:2, f) }
Error in b[2] <- v :
  incompatible types (from closure to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[[2]] <- v ; b } ; f(c("a","b"),"d") ; f(1:3,"x") }
[1] "1" "x" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(3,3) }
[1] 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(list(),NULL) }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(list(3),NULL) }
[[1]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,3L) ; f(c(1L,2L),2,3) }
[1] 1 3 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,3L) ; f(c(1L,2L),8,3L) }
[1]  1  2  3  4  5 NA NA  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,FALSE) ; f(c(1L,2L),2,3) }
[1] 1 3 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,FALSE) ; f(c(1L,2L),8,TRUE) }
[1]  1  2  3  4  5 NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:2 ; x["a"] <- 10 ; x }
       a
 1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:2 ; x["a"] <- 10+3i ; x }
                a
 1+0i  2+0i 10+3i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:2 ; x["a"] <- FALSE ; x }
    a
1 2 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:2; x[[as.integer(NA)]] <- 10 ; x }
Error in x[[as.integer(NA)]] <- 10 :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:3 ; x[2] <- "hi"; x }
[1] "1"  "hi" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- as.list(1:2) ; x[["z"]] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- as.raw(c(10,11)) ; x["a"] <- as.raw(13) ; x }
       a
0a 0b 0d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(1,2,3) ; x[2] <- "hi"; x }
[1] "1"  "hi" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(2,3,4) ; x[1] <- 3+4i ; x  }
[1] 3+4i 3+0i 4+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(TRUE,FALSE,FALSE) ; x[2] <- "hi"; x }
[1] "TRUE"  "hi"    "FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(a=1+2i, b=3+4i) ; x["a"] <- "hi" ; x }
     a      b
  "hi" "3+4i"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(a=1+2i, b=3+4i) ; x["a"] <- 10 ; x }
    a     b
10+0i  3+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(a=1,a=2) ; x["a"] <- 10L ; x }
 a  a
10  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(aa=TRUE) ; x["a"] <- list(2L) ; x }
$aa
[1] TRUE

$a
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(aa=TRUE) ; x[["a"]] <- list(2L) ; x }
$aa
[1] TRUE

$a
$a[[1]]
[1] 2



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(aa=TRUE,b=FALSE) ; x["a"] <- 2L ; x }
aa  b  a
 1  0  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(b=2,a=3) ; z <- x ; x["a"] <- 1 ; x }
b a
2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1) ; x[[-1]] <- NULL ; x }
Error in x[[-1]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1) ; x[[-2]] <- NULL ; x }
Error in x[[-2]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[2] <- NULL ; x }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[3] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[[2]] <- NULL ; x }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[[3]] <- NULL ; x }
     [,1]
[1,] 1
[2,] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[-1] <- NULL ; x }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[0] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[NA] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[[0]] <- NULL ; x }
Error in x[[0]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[as.integer(NA)] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2,3) ; x[[-1]] <- NULL ; x }
Error in x[[-1]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2,3) ; x[[-5]] <- NULL ; x }
Error in x[[-5]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(3,4) ; x[[-10]] <- NULL ; x }
Error in x[[-10]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(3,4) ; x[[-1]] <- NULL ; x }
[[1]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(3,4) ; x[[-2]] <- NULL ; x }
[[1]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(a=3,b=4) ; x["z"] <- NULL ; x }
$a
[1] 3

$b
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(a=3,b=4) ; x[["a"]] <- NULL ; x }
$b
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-1:2; x[[0-2]]<-100; x }
[1] 100   2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-1:3; x[1]<-100L; x }
[1] 100   2   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-1:5; x[2]<-1000; x[3] <- TRUE; x[8]<-3L; x }
[1]    1 1000    1    4    5   NA   NA    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-5:1; x[0-2]<-1000; x }
[1] 1000    4 1000 1000 1000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-c(); x[[TRUE]] <- 2; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-c(1,2,3); x[2L]<-100; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-c(1,2,3); x[2L]<-100L; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-c(1,2,3); x[2]<-FALSE; x }
[1] 1 0 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x[3] <<- 10 }
Error in x[3] <<- 10 : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[0:3] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[1:1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[1:2] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[1:3] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[2:3] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[0:3] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[1:1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[1:2] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[1:3] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[2:3] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ a <- 'hello'; a[[5]] <- 'done'; a[[3]] <- 'muhuhu'; a; }
[1] "hello"  NA       "muhuhu" NA       "done"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ a <- 'hello'; a[[5]] <- 'done'; b <- a; b[[3]] <- 'muhuhu'; b; }
[1] "hello"  NA       "muhuhu" NA       "done"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ b <- c(11,12) ; b[""] <- 100 ; b }

 11  12 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ b <- c(a=1+2i,b=3+4i) ; dim(b) <- c(2,1) ; b[c("a","b")] <- 3+1i ; b }
             a    b
1+2i 3+4i 3+1i 3+1i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[c("hello","hi")] <- NULL ; b }
[[1]]
[1] 1+2i

[[2]]
[1] 3+4i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1L,a=2L),c("X","b",NA),NULL) }
Error in `[[<-`(`*tmp*`, i, value = 4:6) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(1L,2L) ; attr(b,"my") <- 21 ; f(b,c("X","b",NA),NULL) }
[[1]]
[1] 1

[[2]]
[1] 2

attr(,"my")
[1] 21

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(b=1L,2L) ; attr(b,"my") <- 21 ; f(b,c("X","b",NA),NULL) }
[[1]]
[1] 2

attr(,"my")
[1] 21

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(b=1L,2L) ; attr(b,"my") <- 21 ; f(b,c("ZZ","ZZ",NA),NULL) }
$b
[1] 1

[[2]]
[1] 2

attr(,"my")
[1] 21

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),c(TRUE,NA)) }
   X    a    b <NA>
   1    2   NA    1
Warning message:
In b[i] <- v :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1L,a=2L),c("X","b",NA),c(TRUE,NA,FALSE)) }
   X    a    b <NA>
   1    2   NA    0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(list(X=1L,a=2L),c("X","b",NA),NULL) }
$a
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(1:3,"a",4) }
      a
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(NULL,"a",4) }
a
4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(NULL,c("a","X"),4:5) }
a X
4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),as.character(NA),as.complex(23)) }
             <NA>
13+0i 14+0i 23+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),c("","",""),as.complex(23)) }

13+0i 14+0i 23+0i 23+0i 23+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),c("","",NA),as.complex(23)) }
                         <NA>
13+0i 14+0i 23+0i 23+0i 23+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),character(),as.complex(23)) }
[1] 13+0i 14+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(11:13),c("a","X"),list(3,TRUE)) }
[[1]]
[1] 0b

[[2]]
[1] 0c

[[3]]
[1] 0d

$a
[1] 3

$X
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(c(13,14)),c("a","X","a"),as.raw(23)) }
       a  X
0d 0e 17 17

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(c(13,14)),c("a","X","a"),c(3,TRUE,FALSE)) }
Error in b[i] <- v :
  incompatible types (from double to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(1,a=2),c("a","X","a"),list(3,TRUE,FALSE)) }
[[1]]
[1] 1

$a
[1] FALSE

$X
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),1:3) }
   X    a    b <NA>
   1    2    2    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),as.complex(10)) }
    X     a     b  <NA>
10+0i  2+0i 10+0i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),as.raw(10)) }
Error in b[i] <- v :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),list(3,TRUE,FALSE)) }
$X
[1] 3

$a
[1] 2

$b
[1] TRUE

$<NA>
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("a","X","a"),list(3,TRUE,FALSE)) }
$X
[1] TRUE

$a
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("a","X","a","b"),list(3,TRUE,FALSE)) }
$X
[1] TRUE

$a
[1] FALSE

$b
[1] 3

Warning message:
In b[i] <- v :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(double(),c("a","X"),4:5) }
a X
4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(double(),c("a","X"),list(3,TRUE)) }
$a
[1] 3

$X
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSuperUpdate
#{ x <- 1:3 ; f <- function() { x[2] <- 10 ; x[2] <<- 100 ; x[2] <- 1000 } ; f() ; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSuperUpdate
#{ x <- 1:3 ; f <- function() { x[2] <<- 100 } ; f() ; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testUpdateOther
#{ x<-c(1,2); f<-function() { x<-c(100, 200); x[1]<-4; print(x) } ; f(); x }
[1]   4 200
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testUpdateOther
#{ x<-c(1,2); f<-function() { x<-c(100, 200); x[1]<<-4; print(x) } ; f(); x }
[1] 100 200
[1] 4 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
# { f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), c(TRUE,NA)) }
   a <NA>    c
   1   NA    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ (1:5)[3:4] }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ a <- c(1,2,3) ; x <- integer() ; a[[x]] }
Error in a[[x]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ a <- c(1,2,3) ; x <- integer() ; a[x] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b) { b[integer()] } ; f(c(TRUE,FALSE,TRUE)) ; f(f) }
Error in b[integer()] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[[i]] } ; f(list(1,list(2)),c(2,1)) ; f(1:3,list(1)) }
Error in b[[i]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c("h","hi")) ; f(1:3,TRUE) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c("h","hi")) ; f(function(){3},"hi") }
Error in b[i] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE)) ; f(f, c(TRUE,NA)) }
Error in b[i] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,NA)) }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,NA,NA,NA)) }
[1]  1 NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(1:3,3:1) }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(c(a=1,b=2,c=3),3:1) }
c b a
3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(function(){2},3:1) }
Error in b[i] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, logical()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,NULL) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,as.raw(c(10,11))) }
Error in b[i] : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,c(TRUE,FALSE)) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(1,2,3), c("hello","hi")) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(1,2,3), character()) }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), c(TRUE,NA,FALSE,FALSE,TRUE)) }
   a <NA> <NA>
   1   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), character()) }
named numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(a=1L,b=2L,c=3L), logical()) }
named integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; x <- c(1+2i,3+4i,5+6i) ; f(x,c(1,2)) ; f(x,c(1+2i)) }
Error in b[i] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, 1:3) ; f(c(2,-4)) }
Error in l[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, 1:3) ; f(c(2,NA)) }
Error in l[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, 2) ; f(c(2,-1)) }
Error in l[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, as.list(1:3)) ; f(c(2,NA)) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-1)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-2)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-4)) }
Error in l[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,0)) }
Error in l[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, f) ; f(c(2,1)) }
Error in f(c(2, 1)) :
  invalid type/length (closure/1) in vector allocation

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(1)  ; f(3:4) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(1L) ; f(TRUE) }
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(TRUE) ; f(1L)  }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(TRUE) ; f(c(3,2))  }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(c(TRUE,FALSE))  ; f(3:4) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x, i) { x[i] } ; f(1:3,0-3) ; f(1:5,c(0,0,0,0-2)) }
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x, i) { x[i] } ; f(1:3,0L-3L) ; f(1:5,c(0,0,0,0-2)) }
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x, i) { x[i] } ; f(1:3,3:1) ; f(1:5,c(0,0,0,0-2)) }
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x,l) { x[l == 3] <- 4 } ; f(c(1,2,3), c(1,2,3)) ; f(c(1,2,3), 1:3) ; f(1:3, c(3,3,2)) }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x,l) { x[l == 3] } ; f(c(1,2,3), c(1,2,3)) ; f(c(1,2,3), 1:3) ; f(1:3, c(3,3,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,2) ; l[[c(1,1,2,3,4,3)]] }
Error in l[[c(1, 1, 2, 3, 4, 3)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,NULL) ; f <- function(i) { l[[i]] } ; f(c(2,1)) }
Error in l[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,function(){3}) ; f <- function(i) { l[[i]] } ; f(c(2)) }
function(){3}

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,list(2)) ; f <- function(i) { l[[i]] } ; f(c(2,1)) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,list(2)) ; l[[integer()]] }
Error in l[[integer()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(list(1,2),2) ; l[[c(1,1,2,3,4,3)]] }
Error in l[[c(1, 1, 2, 3, 4, 3)]] : recursive indexing failed at level 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- "hi";  y<-c(1,1) ; x[y] }
[1] "hi" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1+2i;  y<-c(1,2) ; x[y] }
[1] 1+2i   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:2; x[[list()]] }
Error in x[[list()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:2; x[[list(-0,-1)]] }
Error in x[[list(-0, -1)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:2; x[[list(0)]] }
Error in x[[list(0)]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:3; x[function(){3}] }
Error in x[function() { : invalid subscript type 'closure'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:3; x[list(2,3)] }
Error in x[list(2, 3)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1;  y<-c(1,1) ; x[y] }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1L;  y<-c(1,1) ; x[y] }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- TRUE;  y<-c(1,1) ; x[y] }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[2:3] }
[1] 3+4i 5+6i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5)] }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5,-2)] }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5,-5)] }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,NA)] }
Error in x[c(-2, -3, NA)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,3,NA)] }
Error in x[c(-2, 3, NA)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(2,3,NA)] }
[1] 3+4i 5+6i   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1,2,3) ; x[-1:2] }
Error in x[-1:2] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1,2,3,2) ; x[c(3,4,2)==2] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1,2,3,2) ; x[c(3,4,2,NA)==2] }
[1]  3 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1,2,3,2) ; x[x==2] }
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(TRUE,FALSE,TRUE) ; x[2:3] }
[1] FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(TRUE,FALSE,TRUE) ; x[integer()] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2) ; x[[c("a","a")]] }
Error in x[[c("a", "a")]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; f <- function(s) { x[c(s,s)] } ; f(TRUE) ; f(1L) ; f("b") }
b b
2 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; f <- function(s) { x[s] } ; f(TRUE) ; f(1L) ; f("b") }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; x[c("b","b","d","a","a")] }
b b d a a
2 2 4 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; x[character()] }
named numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,x=2,b=3,y=2) ; x[c(3,4,2)==2] }
b
3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,x=2,b=3,y=2) ; x[c(3,4,2,1)==2] }
b
3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=as.raw(10),b=as.raw(11),c=as.raw(12),d=as.raw(13)) ; f <- function(s) { x[c(s,s)] } ; f(TRUE) ; f(1L) ; f(as.character(NA)) }
<NA> <NA>
00 00

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=as.raw(10),b=as.raw(11),c=as.raw(12),d=as.raw(13)) ; f <- function(s) { x[s] } ; f(TRUE) ; f(1L) ; f(as.character(NA)) }
<NA>
00

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(as.double(1:2000)) ; sum(x[rep(3, 2000)==3]) }
[1] 2001000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(as.double(1:2000)) ; x[c(1,3,3,3,1:1996)==3] }
[1] 2 3 4 7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(as.double(1:2000)) ; x[c(NA,3,3,NA,1:1996)==3] }
[1] NA  2  3 NA  7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- function(){3} ; x[3:2] }
Error in x[3:2] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2) ; x[[c("a","a")]] }
Error in x[[c("a", "a")]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2,list(3)) ; x[[c(3,1)]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2,list(3)) ; x[[c(3,NA)]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2,list(3)) ; x[[c(4,1)]] }
Error in x[[c(4, 1)]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2,list(3)) ; x[[c(NA,1)]] }
Error in x[[c(NA, 1)]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,list(3)) ; x[[c(-1,1)]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=1:3) ; f <- function(i) { x[[i]] } ; f(c(2,2)) ; f(2+3i) }
Error in x[[i]] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=1:3) ; f <- function(i) { x[[i]] } ; f(c(2,2)) ; x <- f ; f(2+3i) }
Error in x[[i]] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=1:3) ; x[[2+3i]] }
Error in x[[2 + (0+3i)]] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=1:3) ; x[[c("b","a")]] }
Error in x[[c("b", "a")]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; f <- function(i) { x[[i]] } ; f(c("d","x")) ; f("b") }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c("d","x")]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c("d",NA)]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c("z","x")]] }
Error in x[[c("z", "x")]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c("z",NA)]] }
Error in x[[c("z", NA)]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c(NA,"x")]] }
Error in x[[c(NA, "x")]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[character()]] }
Error in x[[character()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=function(){3},d=list(x=3)) ; f <- function(i) { x[[i]] } ; f(c("d","x")) ; f(c("b","z")) }
Error in x[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=function(){3},d=list(x=3)) ; x[[c(2,-3)]] }
Error in x[[c(2, -3)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=function(){3},d=list(x=3)) ; x[[c(2,10)]] }
Error in x[[c(2, 10)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-(1:5)[2:4] ; x[2:1] }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[3:4] }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[4:3] }
[1] 4 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[c(TRUE,FALSE)] }
[1] 1 3 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[c(TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,NA)] }
[1]  1  2  3 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[c(TRUE,TRUE,TRUE,NA)] }
[1]  1  2  3 NA  5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5;x[c(0-2,0-3)] }
[1] 1 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5;x[c(0-2,0-3,0,0,0)] }
[1] 1 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5;x[c(2,5,4,3,3,3,0)] }
[1] 2 5 4 3 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5;x[c(2L,5L,4L,3L,3L,3L,0L)] }
[1] 2 5 4 3 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-as.complex(c(1,2,3,4)) ; x[2:4] }
[1] 2+0i 3+0i 4+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-as.raw(c(1,2,3,4)) ; x[2:4] }
[1] 02 03 04

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2) ; names(x) <- c("a","b") ; x[c(FALSE,TRUE)] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2) ; names(x) <- c("a","b") ; x[c(FALSE,TRUE,NA,FALSE)] }
   b <NA>
   2   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2,3,4) ; names(x) <- c("a","b","c","d") ; x[c(-2,-4,0)] }
a c
1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2,3,4) ; names(x) <- c("a","b","c","d") ; x[c(10,2,3)] }
<NA>    b    c
  NA    2    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2,3,4) ; names(x) <- c("a","b","c","d") ; x[c(10,2,3,0)] }
<NA>    b    c
  NA    2    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2,3,4,5) ; x[4:3] }
[1] 4 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
# { f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, f) }
Error in b[i] <- v :
  incompatible types (from closure to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
# { f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), c(NA,FALSE)) }
[1]  3 NA  0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(1,2,3) ; b <- a; a[1] <- 4L; a }
[1] 4 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(1,2,3) ; b <- a; a[2] <- 4L; a }
[1] 1 4 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(1,2,3) ; b <- a; a[3] <- 4L; a }
[1] 1 2 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(2.1,2.2,2.3); b <- a; a[[2]] <- TRUE; a }
[1] 2.1 1.0 2.3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(2.1,2.2,2.3); b <- a; a[[3]] <- TRUE; a }
[1] 2.1 2.2 1.0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[1]] <- FALSE; a }
[1] FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[2]] <- FALSE; a }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[3]] <- FALSE; a }
[1]  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a = c(1, 2); a[['a']] = 67; a; }
       a
 1  2 67

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a = c(a=1,2,3); a[['x']] = 67; a; }
 a        x
 1  2  3 67

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a<- c('a','b','c','d'); a[3:4] <- c(4,5); a}
[1] "a" "b" "4" "5"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a<- c('a','b','c','d'); a[3:4] <- c(4L,5L); a}
[1] "a" "b" "4" "5"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a<- c('a','b','c','d'); a[3:4] <- c(TRUE,FALSE); a}
[1] "a"     "b"     "TRUE"  "FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 1:3 ; b[c(3,2)] <- list(TRUE,10) ; b }
[[1]]
[1] 1

[[2]]
[1] 10

[[3]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 1:3 ; b[integer()] <- 3:5 ; b }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 1:3 ; dim(b) <- c(1,3) ;  b[integer()] <- 3:5 ; b }
     [,1] [,2] [,3]
[1,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 1:4 ; b[c(3,2)] <- c(NA,NA) ; b }
[1]  1 NA NA  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[[c(NA,1)]] <- c(2,10) ; b }
Error in b[[c(NA, 1)]] <- c(2, 10) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(0,1)] <- c(2,10,11) ; b }
[1] 2 4
Warning message:
In b[c(0, 1)] <- c(2, 10, 11) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(3,2)] <- c("X","xx") ; b }
[1] "3"  "xx" "X"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(3,2)] <- c(1+2i,3+4i) ; b }
[1] 3+0i 3+4i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(NA)] <- c(2,7) ; b }
Error in b[c(NA)] <- c(2, 7) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(NA,1)] <- c(2,10) ; b }
Error in b[c(NA, 1)] <- c(2, 10) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[c(FALSE,FALSE,FALSE)] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[c(FALSE,TRUE,NA)] <- NULL ; b }
[[1]]
[1] 3

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; dim(b) <- c(1,4) ; b[c(FALSE,FALSE)] <- NULL ; b }
     [,1] [,2] [,3] [,4]
[1,] 3    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; dim(b) <- c(1,4) ; b[c(FALSE,FALSE,TRUE)] <- NULL ; b }
[[1]]
[1] 3

[[2]]
[1] 4

[[3]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; dim(b) <- c(4,1) ; b[c(TRUE,FALSE)] <- NULL ; b }
[[1]]
[1] 4

[[2]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; names(b) <- c("X","Y","Z","Q") ; b[c(FALSE,FALSE)] <- NULL ; b }
$X
[1] 3

$Y
[1] 4

$Z
[1] 5

$Q
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; names(b) <- c("X","Y","Z","Q") ; b[c(TRUE,FALSE)] <- NULL ; b }
$Y
[1] 4

$Q
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.raw(11:13) ; b[c(3,2)] <- 2 ; b }
Error in b[c(3, 2)] <- 2 :
  incompatible types (from double to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.raw(11:13) ; b[c(3,2)] <- as.raw(2) ; b }
[1] 0b 02 02

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.raw(11:13) ; b[c(3,2)] <- list(2) ; b }
[[1]]
[1] 0b

[[2]]
[1] 2

[[3]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.raw(1:5) ; b[c(TRUE,FALSE,TRUE)] <- c(1+2i,3+4i) ; b }
Error in b[c(TRUE, FALSE, TRUE)] <- c(1 + (0+2i), 3 + (0+4i)) :
  incompatible types (from complex to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; attr(b,"my") <- 211 ; b[c(FALSE,TRUE)] <- c("X") ; b }
[1] "a" "X" "c"
attr(,"my")
[1] 211

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(FALSE,NA,NA)] <- c("X","y") ; b }
Error in b[c(FALSE, NA, NA)] <- c("X", "y") :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(FALSE,TRUE,TRUE)] <- c("X","y","z") ; b }
[1] "a" "X" "y"
Warning message:
In b[c(FALSE, TRUE, TRUE)] <- c("X", "y", "z") :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE)] <- "X" ; b }
[1] "X" "b" "X"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE,NA)] <- "X" ; b }
[1] "X" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE,TRUE)] <- c(1+2i,3+4i) ; b }
[1] "1+2i" "b"    "3+4i"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE,TRUE,NA)] <- "X" ; b }
[1] "X" "b" "X" NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE,TRUE,TRUE)] <- "X" ; b }
[1] "X" "b" "X" "X"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,TRUE,TRUE)] <- rev(as.character(b)) ; b }
[1] "c" "b" "a"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[is.na(b)] <- c("X","z") ; b }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[logical()] <- "X" ; b }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; x <- b ; b[c(FALSE,TRUE,NA)] <- c("X","z") ; b }
Error in b[c(FALSE, TRUE, NA)] <- c("X", "z") :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; x <- b ; b[c(FALSE,TRUE,TRUE)] <- c("X","z") ; b } 
[1] "a" "X" "z"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("hello","hi") ; b[c(3,2)] <- c(2,3) ; b }
[1] "hello" "3"     "2"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1+2i,3+4i) ; b[c(3,2)] <- 5:6 ; b }
[1] 1+2i 6+0i 5+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ;  x <- as.double(NA) ; attr(x,"my") <- 2 ; b[c(1,NA,2)==2] <- x ; b }
[1]  1  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ;  x <- c(2,2,-1) ; b[x==2] <- c(10,11,5) ; b }
[1] 10 11  5
Warning message:
In b[x == 2] <- c(10, 11, 5) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ;  x <- c(2,2,NA) ; b[x==2] <- c(10,11,3) ; b }
Error in b[x == 2] <- c(10, 11, 3) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; attr(b,"my") <- 10 ; b[integer()] <- NULL ; b }
[1] 1 2 5
attr(,"my")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(0,3,5)] <- NULL ; b }
Error in b[c(0, 3, 5)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(1)] <- NULL ; b }
Error in b[c(1)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(TRUE,FALSE,FALSE)] <- NULL ; b }
Error in b[c(TRUE, FALSE, FALSE)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(TRUE,FALSE,TRUE)] <- list(TRUE,1+2i) ; b }
[[1]]
[1] TRUE

[[2]]
[1] 2

[[3]]
[1] 1+2i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(TRUE,NA,TRUE)] <- list(TRUE,1+2i) ; b }
Error in b[c(TRUE, NA, TRUE)] <- list(TRUE, 1 + (0+2i)) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[integer()] <- NULL ; b }
[1] 1 2 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[logical()] <- NULL ; b }
[1] 1 2 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,4,5) ;  x <- c(2,2) ; b[x==2] <- c(10,11) ; b }
[1] 10 11 10
Warning message:
In b[x == 2] <- c(10, 11) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,4,5) ; x <- c(2,8,2) ; b[x==2] <- c(10,11) ; b }
[1] 10  4 11

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,4,5) ; z <- b ; x <- c(2,8,2) ; b[x==2] <- c(10,11) ; b }
[1] 10  4 11

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,FALSE) ; b[c(3,2)] <- 5:6 ; b }
[1] 1 6 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,FALSE,FALSE,TRUE) ; b[b] <- c(TRUE,FALSE) ; b }
[1]  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE) ; b[c(3,2)] <- FALSE ; b }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE) ; b[c(TRUE,FALSE,TRUE,TRUE)] <- c(FALSE,NA,NA) ; b }
[1] FALSE    NA    NA    NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE) ; b[c(TRUE,TRUE)] <- c(FALSE,NA) ; b }
[1] FALSE    NA FALSE
Warning message:
In b[c(TRUE, TRUE)] <- c(FALSE, NA) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; attr(b,"my") <- 10 ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }
[1] FALSE    NA FALSE  TRUE
attr(,"my")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE)] <- c(FALSE,NA) ; b }
[1] FALSE    NA    NA  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,FALSE)] <- c(FALSE,NA) ; b }
[1] FALSE    NA FALSE    NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,TRUE,FALSE)] <- b ; b }
[1] TRUE   NA   NA TRUE
Warning message:
In b[c(TRUE, FALSE, TRUE, FALSE)] <- b :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }
[1] FALSE    NA FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,NA)] <- c(FALSE,NA) ; b }
Error in b[c(TRUE, NA)] <- c(FALSE, NA) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[logical()] <- c(FALSE,NA) ; b }
[1]  TRUE    NA FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; z <- b ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }
[1] FALSE    NA FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,3) ; attr(b,"my") <- 12; b[2:3] <- NULL ; b }
[[1]]
[1] 1

attr(,"my")
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,3) ; attr(b,"my") <- 12; b[2] <- NULL ; b }
[[1]]
[1] 1

[[2]]
[1] 3

attr(,"my")
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(-1,-4,-5,-1,-5)] <- NULL ; b }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(-1,1)] <- NULL ; b }
Error in b[c(-1, 1)] <- NULL :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(-1,NA)] <- NULL ; b }
Error in b[c(-1, NA)] <- NULL :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(0,-1)] <- NULL ; b }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(1,1,0,NA,5,5,7)] <- NULL ; b }
[[1]]
[1] 2

[[2]]
[1] 5

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(1,1,5)] <- NULL ; b }
[[1]]
[1] 2

[[2]]
[1] 5

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(1,NA)] <- NULL ; b }
[[1]]
[1] 2

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(-10,-20,0)] <- NULL ; b }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,-1)] <- NULL ; b }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,0)] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 1    2    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,0,-1,-2,-3)] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 1    2    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,3,5)] <- NULL ; b }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(TRUE,FALSE,TRUE)] <- list(TRUE,1+2i) ; b }
     [,1] [,2] [,3]
[1,] TRUE 2    1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(x=1,y=2,z=5) ; b[c(0,-1)] <- NULL ; b }
$x
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ buf <- character() ; buf[[1]] <- "hello" ; buf[[3]] <- "world" ; buf }
[1] "hello" NA      "world"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ buf <- double() ; buf[[1]] <- 23 ; buf }
[1] 23

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ buf <- integer() ; buf[[1]] <- 4L ; buf }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4:5) }
Error in `[[<-`(`*tmp*`, i, value = 5:6) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2, seq(1L,-8L,-2L),c(TRUE,FALSE,NA)) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2, seq(1L,6L,2L),c(TRUE,FALSE,NA)) }
[1]  1  2  0 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(1:8, c(1L,4L,7L), c(10,100,1000)) }
[1]   10    2    3  100    5    6 1000    8

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4), 1:2, c("hello","hi")) }
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4), 1:2, c(NA,NA)) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), -1:-2, 10) }
[1]  3  4 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), 1:2, list(3,TRUE)) }
[[1]]
[1] 3

[[2]]
[1] TRUE

[[3]]
[1] 8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), 3:4, 10) }
[1]  3  4 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(TRUE,FALSE,NA), 1:2, c(FALSE,TRUE)) }
[1] FALSE  TRUE    NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; z <- f(1:8, c(1L,4L,7L), list(10,100,1000)) ; sum(as.double(z)) }
[1] 1134

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(f, 1:2, 1:3) }
Error in b[i] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- c(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(l, 1:2, c(3,TRUE)) }
     [,1]
[1,]    3
[2,]    1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(l, 1:2, list(3,TRUE)) }
     [,1]
[1,] 3
[2,] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(list(3,TRUE), 1:2, l) }
[[1]]
[1] 3

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; m <- c(3,TRUE) ; dim(m) <- c(1,2) ; f(m, 1:2, l) }
[[1]]
[1] 3

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, 3:4); f(3:4, 2:1, c(NA,FALSE)) }
[1]  0 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, 3:4); f(c(TRUE,FALSE), 2:1, 1:2) }
[1] 2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), 4:6) }
[1] 3 4 5
Warning message:
In b[i] <- v :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), c(NA,FALSE)) }
[1]  3 NA  0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c("a","XX","b"), c(FALSE,TRUE,TRUE), 21:22) }
[1] "a"  "21" "22"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(10,12,3), c(FALSE,TRUE,TRUE), c("hi",NA)) }
[1] "10" "hi" NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(10,12,3), c(FALSE,TRUE,TRUE), c(1+2i,10)) }
[1] 10+0i  1+2i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(3+4i,5+6i), c(FALSE,TRUE,TRUE), c("hi",NA)) }
[1] "3+4i" "hi"   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(3+4i,5+6i), c(FALSE,TRUE,TRUE), c(NA,1+10i)) }
[1] 3+ 4i    NA 1+10i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(TRUE,FALSE), c(FALSE,TRUE,TRUE), c(NA,2L)) }
[1]  1 NA  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(TRUE,TRUE,FALSE), c(FALSE,TRUE,TRUE), c(TRUE,NA)) }
[1] TRUE TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- 10:12 ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), as.raw(21:22)) }
Error in b[i] <- v :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- as.raw(10:12) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), 21:22) }
Error in b[i] <- v :
  incompatible types (from integer to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- as.raw(10:12) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), as.raw(21:22)) }
     [,1] [,2] [,3]
[1,]   0a   15   16

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- list(1,2,5) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), list(TRUE,1+2i)) }
     [,1] [,2] [,3]
[1,] 1    TRUE 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:5, seq(1L,6L,2L),c(TRUE,FALSE,NA)) }
[1]  1  2  0  4 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.character(-3:3),c(1L,4L,7L),c("A","a","XX")) }
[1] "A"  "-2" "-1" "a"  "1"  "2"  "XX"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.double(1:5), c(7L,4L,1L),c(TRUE,FALSE,NA)) }
[1] NA  2  3  0  5 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.double(1:5), seq(1L,6L,2L),c(TRUE,FALSE,NA)) }
[1]  1  2  0  4 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.logical(-3:3),c(1L,4L,7L),c(TRUE,NA,FALSE)) }
[1]  TRUE  TRUE  TRUE    NA  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.raw(10:11), 1:2, c(10+1i, 11)) }
Error in b[i] <- v :
  incompatible types (from complex to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.raw(1:3), 1:2, as.raw(40:41)) }
[1] 28 29 03

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("a","b"),2:1,1+2i) }
[1] "1+2i" "1+2i"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("hello","hi","X"), -1:-2, "ZZ") }
[1] "hello" "hi"    "ZZ"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("hello","hi","X"), 1:2, c("ZZ","xx")) ; f(1:4,1:2,NA) }
[1] NA NA  3  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("hello","hi","X"), 1:2, c("ZZ","xx")) ; f(as.character(1:2),1:2,NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("hello","hi","X"), 3:4, "ZZ") }
[1] "hello" "hi"    "ZZ"    "ZZ"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1+2i,2+3i), 1:2, as.raw(10:11)) }
Error in b[i] <- v :
  incompatible types (from raw to complex) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1+2i,2+3i), 1:2, c(10+1i,2+4i)) }
[1] 10+1i  2+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4:5) }
Error in b[i] <- v : NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), 4:6) }
[1] 3 4 5
Warning message:
In b[i] <- v :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10), c(2L,4L),c(TRUE,FALSE)) }
[1]  1  1 10  0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),-1:0,c(TRUE,FALSE)) }
[1] 1 1 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,1+2i) }
[1]  1+2i  1+2i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(3,NA)) }
[1]  3 NA 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(3L,NA)) }
[1]  3 NA 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) ; f(c(10,4), 2:1, as.raw(10)) }
Error in b[i] <- v :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) ; f(c(10L,4L), 2:1, 1+2i) }
[1] 1+2i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) }
[1]  1  0 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) ; f(c(10,4), 2:1, 1+2i) }
[1] 1+2i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) ; f(c(10L,4L), 2:1, as.raw(10)) }
Error in b[i] <- v :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) }
[1]  1  0 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,1+2i) }
[1]  1+2i  1+2i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,c(3,NA)) }
[1] NA  3 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,c(3L,NA)) }
[1] NA  3 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE),2:1,c(NA,NA)) ; f(10:11,1:2,c(NA,FALSE)) }
[1] NA  0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE),2:1,c(NA,NA)) ; f(c(TRUE,FALSE),1:2,3:4) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,NA),2:1,1+2i) }
[1] 1+2i 1+2i   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),2:0,c(TRUE,NA)) }
[1]    NA  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),2:1,c(TRUE,NA)) }
[1]    NA  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),3:4,c(TRUE,NA)) }
[1] TRUE   NA TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, 10) ; f(1:2, 1:2, 11) }
[1] 11 11

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, 11L) }
[[1]]
[1] 11

[[2]]
[1] 11


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) ;  f(list(1,2), -1:1, c(2,10,5)) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) ;  f(list(1,2), 1:2, as.raw(10))}
[[1]]
[1] 0a

[[2]]
[1] 0a


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) }
[[1]]
[1] TRUE

[[2]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, 1:2, c(10,5))}
[1] 10  5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, c(0,0), as.raw(c(11,23)))}
Error in b[i] <- v :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, c(0,0), c(1+2i,3+4i))}
[1] 1+0i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), -10:10, 1:3) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), 1:2, c(1+2i,3+4i))}
[[1]]
[1] 1+2i

[[2]]
[1] 3+4i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), 1:3, c(2,10,5)) }
[[1]]
[1] 2

[[2]]
[1] 10

[[3]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,3:4) }
[[1]]
[1] 3

[[2]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,c(1+2i,3+2i)) }
[[1]]
[1] 1+2i

[[2]]
[1] 3+2i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,c(4,3)) }
[[1]]
[1] 4

[[2]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2,3,4), seq(1L,4L,2L), c(TRUE,NA)) }
[[1]]
[1] TRUE

[[2]]
[1] 2

[[3]]
[1] NA

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2,3,4,5), 4:3, c(TRUE,NA)) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] NA

[[4]]
[1] TRUE

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,c(2),10) ; f(1:2, -1, 10) }
[1]  1 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[b] <- b ; b } ; f(c(TRUE,FALSE,FALSE,TRUE)) ; f(1:3) }
[1] 1 2 3
Warning message:
In b[b] <- b :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, as.integer(NA), 2) }
[1] 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, c(1,-1), 2) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, c(NA,-1), 2) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c("a","b","c"),c(TRUE,FALSE),c("A","X")) ; f(1:3,c(TRUE,FALSE),4) }
[1] 4 2 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c("a","b","c"),c(TRUE,FALSE),c("A","X")) ; f(c("A","X"),c(TRUE,FALSE),4) }
[1] "4" "X"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c("a","b","c"),c(TRUE,FALSE),c("A","X")) ; f(c("A","X"),c(TRUE,FALSE),f) }
Error in b[i] <- v :
  incompatible types (from closure to character) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c("a","b","c"),c(TRUE,FALSE),c("A","X")) ; f(f,c(TRUE,FALSE),4) }
Error in b[i] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,FALSE,TRUE),c(TRUE,FALSE), NA) ; f(1:4, c(TRUE,TRUE), NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,FALSE,TRUE),c(TRUE,FALSE), NA) ; f(c(FALSE,FALSE,TRUE), c(TRUE,TRUE), c(1,2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(1:2, c(TRUE,FALSE), list(TRUE)) }
[[1]]
[1] TRUE

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 1+2i) }
[[1]]
[1] 1+2i

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 10) }
[[1]]
[1] 10

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 10L) }
[[1]]
[1] 10

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), TRUE) }
[[1]]
[1] TRUE

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) }
[[1]]
[1] 1+2i

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), 10) }
[[1]]
[1] 10

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), c(10,11)) }
Error in b[i] <- v : NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), list(1+2i)) }
[[1]]
[1] 1+2i

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; x <- list(1,2) ; attr(x,"my") <- 10 ; f(x, 1:2, c(10,11)) }
[[1]]
[1] 10

[[2]]
[1] 11

attr(,"my")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; x <- list(1,2) ; z <- x ; f(x, c(TRUE,NA), c(10,11)) }
Error in b[i] <- v : NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(b,i,v) { b[i]<-v ; b } ; f(1:4,4:1,TRUE) ; f(c(3,2,1),8,10) ; f(c(TRUE,FALSE),TRUE,FALSE) }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(b,i,v) { b[i]<-v ; b } ; f(1:4,4:1,TRUE) ; f(c(3,2,1),8,10) }
[1]  3  2  1 NA NA NA NA 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(i,v) { x<-1:5 ; x[[i]]<-v ; x } ; f(1,1) ; f(1L,TRUE) ; f(2,TRUE) }
[1] 1 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(1,1) ; f(1L,TRUE) ; f(2,TRUE) }
[1] 1 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(3:2,1) ; f(1L,TRUE) ; f(2:4,4:2) }
[1] 1 4 3 2 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(c(3,2),1) ; f(1L,TRUE) ; f(2:4,c(4,3,2)) }
[1] 1 4 3 2 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ inds <- 1:4 ; m <- 2:3 ; inds[m] <- inds[m] + 1L ; inds }
[1] 1 3 4 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ inds <- 1:4 ; m <- 2:3 ; inds[m] <- inds[m] + 1L ; m <- 1:2 ; inds[m] <- inds[m] + 1L ; inds }
[1] 2 4 4 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ inds <- 1:4 ; m <- 2L ; inds[m] <- inds[m] + 1L ; m <- c(1L,2L) ; inds[m] <- inds[m] + 1L ; inds }
[1] 2 4 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ inds <- 1:4 ; m <- c(2L,3L) ; inds[m] <- inds[m] + 1L ; inds }
[1] 1 3 4 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ l <- double() ; l[c(FALSE,TRUE)] <-2 ; l}
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ l <- double() ; l[c(TRUE,TRUE)] <-2 ; l}
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ v<-1:3 ; v[-1] <- c(100,101) ; v }
[1]   1 100 101

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ v<-1:3 ; v[TRUE] <- 100 ; v }
[1] 100 100 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ v<-1:3 ; v[TRUE] <- c(100,101,102) ; v }
[1] 100 101 102

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- (0:4); x[c(NA, NA, NA)] <- c(200L, 300L); x }
Error in x[c(NA, NA, NA)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(FALSE,FALSE,TRUE)]<-10; x }
[1]  1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,NA)] <- 3:4 ; x }
Error in x[c(TRUE, FALSE, FALSE, NA)] <- 3:4 :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,NA)] <- 3L ; x }
[1]  3  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,TRUE)] <- 3:4 ; x }
[1]  3  2 NA  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,NA)] <- 2:3 ; x }
Error in x[c(TRUE, NA)] <- 2:3 :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,NA)] <- 3L ; x }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:3 ; x[c(-2, 1)] <- 10 }
Error in x[c(-2, 1)] <- 10 :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c('a','b','c','d'); x[2:3] <- 'x'; x}
[1] "a" "x" "x" "d"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c('a','b','c','d'); x[2:3] <- c('x','y'); x}
[1] "a" "x" "y" "d"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c('a','b','c','d'); x[3:2] <- c('x','y'); x}
[1] "a" "y" "x" "d"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c('a','b','c','d'); x[c(TRUE,FALSE,TRUE)] <- c('x','y','z'); x }
[1] "x" "b" "y" "z"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); f <- function(i, v) { x[i] <- v ; x } ; f(1:2,3:4); f(c("a","b"),c(TRUE,FALSE)) }
    a     b
 TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); f <- function(i, v) { x[i] <- v ; x } ; f(1:2,3:4); f(c(1,2),c(TRUE,FALSE)) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); x[c('a','b')] <- c('a','b'); x }
  a   b
"a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); x[c('a','b')] <- c(1L,2L); x }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); x[c('a','b')] <- c(TRUE,FALSE); x }
    a     b
 TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1) ; f <- function() { x[[1]] <<- x[[1]] + 1 ; x } ; a <- f() ; b <- f() ; c(a,b) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0)  ; x[c(TRUE,TRUE)] <- rev(x) ; x }
[1] 0 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0)  ; x[is.na(x)] <- TRUE; x }
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; attr(x,"my") <- 1 ; x[c(TRUE,TRUE)] <- c(NA,TRUE); x }
[1] NA  1
attr(,"my")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; f <- function(v) { x[c(TRUE,TRUE)] <- v ; x } ; f(1:2) ; f(1+2i) }
[1] 1+2i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; f <- function(v) { x[c(TRUE,TRUE)] <- v ; x } ; f(1:2) ; f(c(1,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; x[c(NA,TRUE)] <- c(NA,TRUE); x }
Error in x[c(NA, TRUE)] <- c(NA, TRUE) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; x[c(TRUE,TRUE)] <- 3:4; x }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; x[c(TRUE,TRUE)] <- c(TRUE,NA); x }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; x[logical()] <- 3:4; x }
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; z <- x ; x[c(NA,TRUE)] <- TRUE; x }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; z <- x ; x[c(NA,TRUE)] <- c(NA,TRUE); x }
Error in x[c(NA, TRUE)] <- c(NA, TRUE) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L, 2L, 3L, 4L, 5L); x[c(NA, 0, NA)] <- c(400L, 500L, 600L); x }
Error in x[c(NA, 0, NA)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L, 2L, 3L, 4L, 5L); x[c(NA, 2, 10)] <- c(400L, 500L, 600L); x }
Error in x[c(NA, 2, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,1L,1L,1L); x[c(TRUE,TRUE,FALSE)] <- c('a','b','c'); x}
[1] "a" "b" "1" "c"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L) ; x[TRUE] <- 3L ; x }
[1] 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L) ; x[c(TRUE,FALSE)] <- 3L ; x }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L) ; x[c(TRUE,NA)] <- 3L ; x }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L) ; x[logical()] <- 3L ; x }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L,3L,4L) ;  x[is.na(x)] <- 5:6 ; x }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L,3L,4L) ; attr(x,"my") <- 0 ;  x[c(TRUE,FALSE)] <- 5:6 ; x }
[1] 5 2 6 4
attr(,"my")
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L,3L,4L) ; x[c(TRUE,FALSE)] <- 5:6 ; x }
[1] 5 2 6 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L,3L,4L) ; x[c(TRUE,FALSE)] <- rev(x) ; x }
[1] 4 2 3 4
Warning message:
In x[c(TRUE, FALSE)] <- rev(x) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(TRUE,TRUE,TRUE,TRUE); x[2:3] <- c(FALSE,FALSE); x }
[1]  TRUE FALSE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(TRUE,TRUE,TRUE,TRUE); x[3:2] <- c(FALSE,TRUE); x }
[1]  TRUE  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(TRUE,TRUE,TRUE,TRUE); x[c(TRUE,TRUE,FALSE)] <- c(10L,20L,30L); x }
[1] 10 20  1 30

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(TRUE,TRUE,TRUE,TRUE); x[c(TRUE,TRUE,FALSE)] <- list(10L,20L,30L); x }
[[1]]
[1] 10

[[2]]
[1] 20

[[3]]
[1] TRUE

[[4]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2) ; x[2:3]<-10; x }
 a  b
 1 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2) ; x[3]<-10; x }
 a  b
 1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2) ; x[c(2,3)]<-10; x }
 a  b
 1 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2) ; x[c(FALSE,FALSE,TRUE)]<-10; x }
 a  b
 1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2,c=3) ; x[2:3]<-10; x }
 a  b  c
 1 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2,c=3) ; x[2]<-10; x }
 a  b  c
 1 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2,c=3) ; x[c(2,3)]<-10; x }
 a  b  c
 1 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2,c=3) ; x[c(TRUE,TRUE,FALSE)]<-10; x }
 a  b  c
10 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(); x[c('a','b')] <- c('a','b'); x }
$a
[1] "a"

$b
[1] "b"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(); x[c('a','b')] <- list('a','b'); x }
$a
[1] "a"

$b
[1] "b"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; attr(x,"my") <- 20 ; x[c(TRUE,FALSE)] <- c(11,12) ; x }
[[1]]
[1] 11

[[2]]
[1] 0

attr(,"my")
[1] 20
Warning message:
In x[c(TRUE, FALSE)] <- c(11, 12) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[as.logical(x)] <- c(10,11); x }
[[1]]
[1] 10

[[2]]
[1] 0

Warning message:
In x[as.logical(x)] <- c(10, 11) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[c(TRUE,FALSE)] <- x[2:1] ; x }
[[1]]
[1] 0

[[2]]
[1] 0

Warning message:
In x[c(TRUE, FALSE)] <- x[2:1] :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[c(TRUE,TRUE)] <- c(TRUE,NA); x }
[[1]]
[1] TRUE

[[2]]
[1] NA


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[is.na(x)] <- c(10,11); x }
[[1]]
[1] 1

[[2]]
[1] 0


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[is.na(x)] <- c(10L,11L); x }
[[1]]
[1] 1

[[2]]
[1] 0


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[logical()] <- c(TRUE,NA); x }
[[1]]
[1] 1

[[2]]
[1] 0


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,2) ; attr(x,"my") <- 10; x[c(TRUE,TRUE)] <- c(10,11,12); x }
[[1]]
[1] 10

[[2]]
[1] 11

attr(,"my")
[1] 10
Warning message:
In x[c(TRUE, TRUE)] <- c(10, 11, 12) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- matrix(1:2) ; x[c(FALSE,FALSE,TRUE)]<-10; x }
[1]  1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x = c(1,2,3,4); x[x %% 2 == 0] <- c(1,2,3,4); }
Warning message:
In x[x%%2 == 0] <- c(1, 2, 3, 4) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-11:9 ; x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }
[1] 1000   10 2000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:3 ; y<-(x[2]<-100) ; y }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:3; x[c(TRUE, FALSE, TRUE)] <- c(TRUE,FALSE); x }
[1] 1 2 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:5 ; x[3] <- (x[4]<-100) ; x }
[1]   1   2 100 100   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:5; x[4:3]<-c(300L,400L); x }
[1]   1   2 400 300   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:5; x[c(0-2,0-3,0-3,0-100,0)]<-256; x }
[1] 256   2   3 256 256

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:5; x[c(4,2,3)]<-c(256L,257L,258L); x }
[1]   1 257 258 256   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-5:1 ; x[x[2]<-2] <- (x[3]<-50) ; x }
[1]  5 50 50  2  1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-5:1; x[3:4]<-c(300,400); x }
[1]   5   4 300 400   1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-5:1; x[3:4]<-c(300L,400L); x }
[1]   5   4 300 400   1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c() ; x[c("a","b","c","d")]<-c(1,2); x }
a b c d
1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[3:4]<-c(300,400); x }
[1]   1   2 300 400   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[4:3]<-c(300L,400L); x }
[1]   1   2 400 300   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE)] <- 1000; x }
[1] 1000    2 1000    4 1000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE,TRUE,TRUE,0)] <- c(1000,2000,3000); x }
[1] 3000    2    3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE,TRUE,TRUE,FALSE)] <- c(1000,2000,3000); x }
[1] 1000    2 2000 3000    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5,6); x[c(TRUE,TRUE,FALSE)] <- c(1000L,2000L) ; x }
[1] 1000 2000    3 1000 2000    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(TRUE,TRUE,FALSE); x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }
[1] 1000    1 2000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(TRUE,TRUE,FALSE); x[c(TRUE, FALSE, TRUE)] <- c(FALSE,TRUE); x }
[1] FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(TRUE,TRUE,FALSE,TRUE) ; x[3:2] <- TRUE; x }
[1] TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x["d"]<-4 ; x }
a b c d
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x[["b"]]<-200; x }
  a   b   c
  1 200   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x[["d"]]<-200; x }
  a   b   c   d
  1   2   3 200

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x[c("d","a","d","a")]<-c(4,5) ; x }
a b c d
5 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x[c("d","e")]<-c(4,5) ; x }
a b c d e
1 2 3 4 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinIm.testIm1
#argv <- list(c(0.117646597100126-0.573973479297987i, -0.740437474899139-0.482946826369552i, -0.333166449062945-0.753763230370951i, -0.256092192198247+0.707588353835588i, 0.522033838837248+0.102958580568997i, -0.651949901695459+0.059749937384601i, 0.235386572284857-0.70459646368007i, 0.077960849563711-0.71721816157401i, -0.563222209454641-0.518013590538404i, -0.068796124369349+0.97981641556181i, 0.244428915757284-0.330850507052219i, 0.451504053079215-0.090319593965852i, 0.04123292199294+0.214538826629216i, -0.422496832339625-0.738527704739573i, -0.451685375030484+0.126357395265016i, 0.375304016677864+0.436900190874168i, -0.674059300339186+0.084416799015191i, 0.739947510877334+0.418982404924464i, 0.509114684244823-0.086484623694157i, -0.535642839219739+0.289927561259502i, 0.629727249341749+0.707648659913726i, -0.262197489402468-0.502198718342861i, -0.333800277698424-0.317646103980588i, -0.422186107911717+0.317002735170286i, -0.616692335171505+0.068946145379939i, -0.136100485502624-0.487679764177213i, -0.68086000613138+0.047032323152903i, 0.296209908189768+0.585533462557103i, 0.43280012844045+0.136998748692477i, -0.680205941942733-0.256569497284745i, 0.787738847475178-0.375602871669773i, 0.76904224100091-0.561876363549783i, 0.332202578950118-0.343917234128459i, -0.983769553611346-0.088288289740869i, -0.046488672133508-0.622109071207677i, -0.280395335170247-0.088565112138884i, 0.379095891586975-0.727769566649926i, -0.372438756103829+0.630754115650567i, 0.976973386685621-0.113639895506141i, -0.150428076228347+0.615598727377677i, 0.762964492726935+0.377685645913312i, -0.7825325866026+0.365371705974346i, -0.792443423040311-0.029652870362208i, 0.265771060547393-0.106618612674382i, -0.076741350022367-0.422144111460857i, 0.120061986786934-0.623033085890884i, 0.636569674033849-0.133150964328944i, -0.145741981978782+0.529165019069452i, 0.516862044313609-0.388779864071743i, 0.368964527385086+0.089207223073295i, -0.215380507641693+0.845013004067436i, 0.065293033525315+0.962527968484271i, -0.034067253738464+0.684309429416465i, 0.328611964770906+0.215416587846774i, -0.583053183540166-0.668235480667835i, -0.782507286391418+0.318827979750013i, 0.037788399171079+0.174802700161256i, 0.310480749443137+0.074551177173735i, 0.436523478910183+0.428166764970505i, -0.458365332711106+0.02467498282614i, -0.271871452223431+0.426340387811162i, 0.590808184713385-0.344468770084509i, -0.349650387953555+0.386026568349676i, -0.865512862653374-0.265651625278222i, -0.236279568941097+0.118144511046681i, -0.197175894348552+0.134038645368463i, 0.866602113481861-0.172567291859327i, 0.031389337713892-0.607820631329035i, 0.754053785184521-0.219050378933476i, -0.499292017172261+0.168065383884658i, 0.151969488085021-0.827990593142535i, -0.266853748421854-0.866413193943766i, 0.071623062591495-0.867246686843546i, -0.788765741891382+0.508717463380604i, -0.228835546857432-0.349587041980114i, 0.500139791176978-0.016703152458872i, 0.15619107374708-0.485402548890295i, -0.369039310626083+0.398423724273751i, -0.611165916680421+0.020983586354237i, -0.399467692630093-0.421179989556223i, 0.411274074028001+0.133781691724871i, 0.573364366690245+0.328833257005489i, -0.265145056696353-0.938538703606894i, 0.387209171815106+0.750271083217101i, -0.41433994791886-0.437159533180399i, -0.476246894615578+0.331179172958982i, -0.168543113030619+0.43048451175239i, -0.594617267459511+0.211980433372292i, 0.388005062566602-0.290649953587954i, -0.013004326537709-0.490434895455784i, 0.069845221019376-0.762134635168809i, 0.243687429599092+0.756774763795962i, 0.27384734040072+0.383667165938905i, -0.51606383094478-0.601506708006782i, -0.894951082455532+0.317442909372288i, 0.5073401683933-0.213001485168032i, -0.441163216905286-0.105671334003774i, -0.343169835663372+0.597359384628839i, -0.283179001991236-0.385834501657171i, -0.517794900198098-0.36732932802092i));Im(argv[[1]]);
  [1] -0.57397348 -0.48294683 -0.75376323  0.70758835  0.10295858  0.05974994
  [7] -0.70459646 -0.71721816 -0.51801359  0.97981642 -0.33085051 -0.09031959
 [13]  0.21453883 -0.73852770  0.12635740  0.43690019  0.08441680  0.41898240
 [19] -0.08648462  0.28992756  0.70764866 -0.50219872 -0.31764610  0.31700274
 [25]  0.06894615 -0.48767976  0.04703232  0.58553346  0.13699875 -0.25656950
 [31] -0.37560287 -0.56187636 -0.34391723 -0.08828829 -0.62210907 -0.08856511
 [37] -0.72776957  0.63075412 -0.11363990  0.61559873  0.37768565  0.36537171
 [43] -0.02965287 -0.10661861 -0.42214411 -0.62303309 -0.13315096  0.52916502
 [49] -0.38877986  0.08920722  0.84501300  0.96252797  0.68430943  0.21541659
 [55] -0.66823548  0.31882798  0.17480270  0.07455118  0.42816676  0.02467498
 [61]  0.42634039 -0.34446877  0.38602657 -0.26565163  0.11814451  0.13403865
 [67] -0.17256729 -0.60782063 -0.21905038  0.16806538 -0.82799059 -0.86641319
 [73] -0.86724669  0.50871746 -0.34958704 -0.01670315 -0.48540255  0.39842372
 [79]  0.02098359 -0.42117999  0.13378169  0.32883326 -0.93853870  0.75027108
 [85] -0.43715953  0.33117917  0.43048451  0.21198043 -0.29064995 -0.49043490
 [91] -0.76213464  0.75677476  0.38366717 -0.60150671  0.31744291 -0.21300149
 [97] -0.10567133  0.59735938 -0.38583450 -0.36732933

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinIm.testIm4
#argv <- list(c(0+0i, 0.01-0i, 0.02-0i, 0.03-0i, 0.04-0i, 0.05-0i, 0.06-0i, 0.07-0i, 0.08-0i, 0.09-0i, 0.1-0i, 0.11-0i, 0.12-0i, 0.13-0i, 0.14-0i, 0.15-0i, 0.16-0i, 0.17-0i, 0.18-0i, 0.19-0i, 0.2-0i, 0.21-0i, 0.22-0i, 0.23-0i, 0.24-0i, 0.25-0i, 0.26-0i, 0.27-0i, 0.28-0i, 0.29-0i, 0.3-0i, 0.31-0i, 0.32-0i, 0.33-0i, 0.34-0i, 0.35-0i, 0.36-0i, 0.37-0i, 0.38-0i, 0.39-0i, 0.4-0i, 0.41-0i, 0.42-0i, 0.43-0i, 0.44-0i, 0.45-0i, 0.46-0i, 0.47-0i, 0.48-0i, 0.49-0i, 0.5-0i, 0.51-0i, 0.52-0i, 0.53-0i, 0.54-0i, 0.55-0i, 0.56-0i, 0.57-0i, 0.58-0i, 0.59-0i, 0.6-0i, 0.61-0i, 0.62-0i, 0.63-0i, 0.64-0i, 0.65-0i, 0.66-0i, 0.67-0i, 0.68-0i, 0.69-0i, 0.7-0i, 0.71-0i, 0.72-0i, 0.73-0i, 0.74-0i, 0.75-0i, 0.76-0i, 0.77-0i, 0.78-0i, 0.79-0i, 0.8-0i, 0.81-0i, 0.82-0i, 0.83-0i, 0.84-0i, 0.85-0i, 0.86-0i, 0.87-0i, 0.88-0i, 0.89-0i, 0.9-0i, 0.91-0i, 0.92-0i, 0.93-0i, 0.94-0i, 0.95-0i, 0.96-0i, 0.97-0i, 0.98-0i, 0.99-0i, 1-0i));Im(argv[[1]]);
  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinRe.testRe1
#argv <- list(c(0.997564050259824+0.069756473744125i, 0.987588409757226+0.069058909006684i, 0.977612769254628+0.068361344269243i, 0.96763712875203+0.067663779531802i, 0.957661488249431+0.06696621479436i, 0.947685847746833+0.066268650056919i, 0.937710207244235+0.065571085319478i, 0.927734566741637+0.064873520582037i, 0.917758926239038+0.064175955844595i, 0.90778328573644+0.063478391107154i, 0.897807645233842+0.062780826369713i, 0.887832004731244+0.062083261632272i, 0.877856364228645+0.06138569689483i, 0.867880723726047+0.060688132157389i, 0.857905083223449+0.059990567419948i, 0.847929442720851+0.059293002682507i, 0.837953802218252+0.058595437945065i, 0.827978161715654+0.057897873207624i, 0.818002521213056+0.057200308470183i, 0.808026880710458+0.056502743732742i, 0.79805124020786+0.0558051789953i, 0.788075599705261+0.055107614257859i, 0.778099959202663+0.054410049520418i, 0.768124318700065+0.053712484782976i, 0.758148678197466+0.053014920045535i, 0.748173037694868+0.052317355308094i, 0.73819739719227+0.051619790570653i, 0.728221756689672+0.050922225833211i, 0.718246116187073+0.05022466109577i, 0.708270475684475+0.049527096358329i, 0.698294835181877+0.048829531620888i, 0.688319194679279+0.048131966883446i, 0.67834355417668+0.047434402146005i, 0.668367913674082+0.046736837408564i, 0.658392273171484+0.046039272671123i, 0.648416632668886+0.045341707933681i, 0.638440992166287+0.04464414319624i, 0.628465351663689+0.043946578458799i, 0.618489711161091+0.043249013721358i, 0.608514070658493+0.042551448983916i, 0.598538430155894+0.041853884246475i, 0.588562789653296+0.041156319509034i, 0.578587149150698+0.040458754771593i, 0.5686115086481+0.039761190034151i, 0.558635868145502+0.03906362529671i, 0.548660227642903+0.038366060559269i, 0.538684587140305+0.037668495821828i, 0.528708946637707+0.036970931084386i, 0.518733306135109+0.036273366346945i, 0.50875766563251+0.035575801609504i, 0.498782025129912+0.034878236872063i, 0.488806384627314+0.034180672134621i, 0.478830744124716+0.03348310739718i, 0.468855103622117+0.032785542659739i, 0.458879463119519+0.032087977922298i, 0.448903822616921+0.031390413184856i, 0.438928182114323+0.030692848447415i, 0.428952541611724+0.029995283709974i, 0.418976901109126+0.029297718972533i, 0.409001260606528+0.028600154235091i, 0.39902562010393+0.02790258949765i, 0.389049979601331+0.027205024760209i, 0.379074339098733+0.026507460022768i, 0.369098698596135+0.025809895285326i, 0.359123058093537+0.025112330547885i, 0.349147417590938+0.024414765810444i, 0.33917177708834+0.023717201073003i, 0.329196136585742+0.023019636335561i, 0.319220496083144+0.02232207159812i, 0.309244855580545+0.021624506860679i, 0.299269215077947+0.020926942123238i, 0.289293574575349+0.020229377385796i, 0.279317934072751+0.019531812648355i, 0.269342293570153+0.018834247910914i, 0.259366653067554+0.018136683173473i, 0.249391012564956+0.017439118436031i, 0.239415372062358+0.01674155369859i, 0.22943973155976+0.016043988961149i, 0.219464091057161+0.015346424223708i, 0.209488450554563+0.014648859486266i, 0.199512810051965+0.013951294748825i, 0.189537169549367+0.013253730011384i, 0.179561529046768+0.012556165273943i, 0.16958588854417+0.011858600536501i, 0.159610248041572+0.01116103579906i, 0.149634607538974+0.010463471061619i, 0.139658967036375+0.009765906324178i, 0.129683326533777+0.009068341586736i, 0.119707686031179+0.008370776849295i, 0.109732045528581+0.007673212111854i, 0.0997564050259824+0.0069756473744125i, 0.0897807645233842+0.0062780826369713i, 0.0798051240207859+0.00558051789953i, 0.0698294835181877+0.0048829531620888i, 0.0598538430155895+0.0041853884246475i, 0.0498782025129912+0.0034878236872063i, 0.039902562010393+0.002790258949765i, 0.0299269215077947+0.0020926942123238i, 0.0199512810051965+0.0013951294748825i, 0.00997564050259824+0.00069756473744125i, 0+0i));Re(argv[[1]]);
  [1] 0.997564050 0.987588410 0.977612769 0.967637129 0.957661488 0.947685848
  [7] 0.937710207 0.927734567 0.917758926 0.907783286 0.897807645 0.887832005
 [13] 0.877856364 0.867880724 0.857905083 0.847929443 0.837953802 0.827978162
 [19] 0.818002521 0.808026881 0.798051240 0.788075600 0.778099959 0.768124319
 [25] 0.758148678 0.748173038 0.738197397 0.728221757 0.718246116 0.708270476
 [31] 0.698294835 0.688319195 0.678343554 0.668367914 0.658392273 0.648416633
 [37] 0.638440992 0.628465352 0.618489711 0.608514071 0.598538430 0.588562790
 [43] 0.578587149 0.568611509 0.558635868 0.548660228 0.538684587 0.528708947
 [49] 0.518733306 0.508757666 0.498782025 0.488806385 0.478830744 0.468855104
 [55] 0.458879463 0.448903823 0.438928182 0.428952542 0.418976901 0.409001261
 [61] 0.399025620 0.389049980 0.379074339 0.369098699 0.359123058 0.349147418
 [67] 0.339171777 0.329196137 0.319220496 0.309244856 0.299269215 0.289293575
 [73] 0.279317934 0.269342294 0.259366653 0.249391013 0.239415372 0.229439732
 [79] 0.219464091 0.209488451 0.199512810 0.189537170 0.179561529 0.169585889
 [85] 0.159610248 0.149634608 0.139658967 0.129683327 0.119707686 0.109732046
 [91] 0.099756405 0.089780765 0.079805124 0.069829484 0.059853843 0.049878203
 [97] 0.039902562 0.029926922 0.019951281 0.009975641 0.000000000

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinRe.testRe3
#argv <- list(c(-0.1-0.9i, -0.2-0.8i, -0.3-0.7i, -0.4-0.6i, -0.1-0.5i, -0.2-0.4i, -0.3-0.3i, -0.4-0.2i, -0.1-0.1i));Re(argv[[1]]);
[1] -0.1 -0.2 -0.3 -0.4 -0.1 -0.2 -0.3 -0.4 -0.1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinRe.testRe7
#argv <- list(c(0.00086580086580088+0i, 0.00259740259740261+0i, 0.00519480519480521+0i, 0.00865800865800867+0i, 0.012987012987013+0i, 0.0181818181818182+0i, 0.0242424242424242+0i, 0.0303030303030303+0i, 0.0363636363636363+0i, 0.0424242424242424+0i, 0.0484848484848484+0i, 0.0536796536796536+0i, 0.058008658008658+0i, 0.0614718614718614+0i, 0.064069264069264+0i, 0.0649350649350649+0i, 0.064069264069264+0i, 0.0614718614718614+0i, 0.058008658008658+0i, 0.0536796536796536+0i, 0.0484848484848485+0i, 0.0424242424242424+0i, 0.0363636363636363+0i, 0.0303030303030303+0i, 0.0242424242424242+0i, 0.0181818181818182+0i, 0.012987012987013+0i, 0.00865800865800867+0i, 0.00519480519480521+0i, 0.00259740259740261+0i, 0.000865800865800882+0i));Re(argv[[1]]);
 [1] 0.0008658009 0.0025974026 0.0051948052 0.0086580087 0.0129870130
 [6] 0.0181818182 0.0242424242 0.0303030303 0.0363636364 0.0424242424
[11] 0.0484848485 0.0536796537 0.0580086580 0.0614718615 0.0640692641
[16] 0.0649350649 0.0640692641 0.0614718615 0.0580086580 0.0536796537
[21] 0.0484848485 0.0424242424 0.0363636364 0.0303030303 0.0242424242
[26] 0.0181818182 0.0129870130 0.0086580087 0.0051948052 0.0025974026
[31] 0.0008658009

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinSysgetenv.testSysgetenv2
#argv <- list('SWEAVE_OPTIONS', NA_character_); .Internal(Sys.getenv(argv[[1]], argv[[2]]))
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinSysreadlink.testSysreadlink1
#argv <- list(character(0)); .Internal(Sys.readlink(argv[[1]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinSyssleep.testSyssleep1
#argv <- list(0.5); .Internal(Sys.sleep(argv[[1]]))

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinabs.testabs1
#argv <- list(c(0.9, 0.1, 0.3, 0.5, 0.7, 0.9, 0.1, 0.3, 0.5));abs(argv[[1]]);
[1] 0.9 0.1 0.3 0.5 0.7 0.9 0.1 0.3 0.5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinabs.testabs11
#argv <- list(c(NA, 1L));abs(argv[[1]]);
[1] NA  1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinabs.testabs14
#argv <- list(numeric(0));abs(argv[[1]]);
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinabs.testabs19
#argv <- list(-32L);abs(argv[[1]]);
[1] 32

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinabs.testabs2
#argv <- list(c(TRUE, TRUE, TRUE, TRUE));abs(argv[[1]]);
[1] 1 1 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinacos.testacos1
#argv <- list(c(0.999950000416665, 0.999800006666578, 0.999550033748988, 0.999200106660978, 0.998750260394966, 0.998200539935204, 0.99755100025328, 0.996801706302619, 0.995952733011994, 0.995004165278026, 0.993956097956697, 0.992808635853866, 0.991561893714788, 0.990215996212637, 0.988771077936042, 0.987227283375627, 0.985584766909561, 0.983843692788121, 0.98200423511727, 0.980066577841242, 0.978030914724148, 0.975897449330606, 0.973666395005375, 0.97133797485203, 0.968912421710645, 0.966389978134513, 0.963770896365891, 0.961055438310771, 0.958243875512697, 0.955336489125606, 0.952333569885713, 0.949235418082441, 0.946042343528387, 0.942754665528346, 0.939372712847379, 0.935896823677935, 0.932327345606034, 0.92866463557651, 0.924909059857313, 0.921060994002885, 0.917120822816605, 0.913088940312308, 0.908965749674885, 0.904751663219963, 0.900447102352677, 0.896052497525525, 0.891568288195329, 0.886994922779284, 0.882332858610121, 0.877582561890373, 0.872744507645751, 0.86781917967765, 0.862807070514761, 0.857708681363824, 0.852524522059506, 0.847255111013416, 0.841900975162269, 0.836462649915187, 0.830940679100164, 0.825335614909678, 0.819648017845479, 0.813878456662534, 0.808027508312152, 0.802095757884293, 0.796083798549056, 0.789992231497365, 0.783821665880849, 0.777572718750928, 0.771246014997107, 0.764842187284488, 0.758361875990508, 0.751805729140895, 0.74517440234487, 0.738468558729588, 0.731688868873821, 0.724836010740905, 0.717910669610943, 0.710913538012277, 0.703845315652236, 0.696706709347165, 0.689498432951747, 0.682221207287614, 0.674875760071267, 0.667462825841308, 0.659983145884982, 0.652437468164052, 0.644826547240001, 0.63715114419858, 0.629412026573697, 0.621609968270664, 0.613745749488812, 0.605820156643463, 0.597833982287298, 0.589788025031098, 0.581683089463884, 0.573519986072457, 0.565299531160354, 0.557022546766217, 0.548689860581588));acos(argv[[1]]);
 [1] 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15
[16] 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30
[31] 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44 0.45
[46] 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.60
[61] 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74 0.75
[76] 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.90
[91] 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinagrep.testagrep1
#argv <- list('x86_64-linux-gnu', 'x86_64-linux-gnu', FALSE, FALSE, c(1L, 1L, 1L), c(0.1, NA, NA, NA, NA), FALSE, TRUE); .Internal(agrep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall1
#argv <- list(c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE));all(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall10
#argv <- list(structure(1L, .Names = 'show'));all(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall11
#argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = 2:3, .Dimnames = list(NULL, c('a', 'b', 'c'))));all(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall12
#argv <- list(structure(c(TRUE, TRUE, FALSE, TRUE, TRUE), .Tsp = c(1, 5, 1), class = 'ts'));all(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall14
#argv <- list(NA);all(argv[[1]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall15
#argv <- list(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));all(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall16
#argv <- list(cdo.call('all', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall17
#argv <- structure(list(c(NA, TRUE), na.rm = FALSE), .Names = c('',     'na.rm'));do.call('all', argv)
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall2
#argv <- list(structure(c(FALSE, FALSE), .Names = c('x', 'value')));all(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall5
#argv <- list(logical(0));all(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall6
#all( );
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall7
#argv <- list(structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts'));all(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall8
#argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, FALSE), .Tsp = c(-1, 3, 1), class = 'ts'));all(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinall.testall9
#argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE), .Names = c('+ Temp', '<none>', '+ Soft', '- M.user')));all(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany1
#argv <- list(structure(csp = c(1, 101, 1), class = 'ts'));any(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany10
#argv <- list(structure(c(FALSE, FALSE, FALSE), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = '')));any(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany11
#argv <- list(logical(0));any(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany12
#argv <- list(structure(FALSE, .Dim = c(1L, 1L)));any(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany13
#argv <- list(structure(logical(0), .Dim = c(0L, 0L)));any(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany14
#argv <- list(c(FALSE, TRUE, FALSE));any(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany15
#argv <- list(structure(c(NA, NA, NA, NA, NA, NA, NA, NA), .Names = c('base', 'utils', 'methods', 'grDevices', 'graphics', 'stats', 'lapack', 'R_X11')));any(argv[[1]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany2
#argv <- list(structure(c(FALSE, FALSE, FALSE), .Dim = 3L, .Dimnames = list(c('A', 'B', 'C'))));any(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany3
#argv <- list(structure(csp = c(1949, 1960.91666666667, 12), class = 'ts'));any(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany4
#argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE), .Names = c('1', '2', '3', '4', '5'), .Dim = 5L, .Dimnames = list(c('1', '2', '3', '4', '5'))));any(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany6
#any( );
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany7
#argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = 3:4, .Dimnames = structure(list(x1 = c('a', 'b', 'c'), x2 = c('a', 'b', 'c', NA)), .Names = c('x1', 'x2'))));any(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany8
#argv <- list(structure(c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = c(4L, 3L), .Dimnames = list(c('<none>', 'Hair:Eye', 'Hair:Sex', 'Eye:Sex'), c('Df', 'Deviance', 'AIC'))));any(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinany.testany9
#argv <- list(c(1L, 1L, 1L, 1L, 1L));any(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated1
#argv <- list(c('U', 'V'), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated10
#argv <- list(c(12784, 12874, 12965, 13057, 13149, 13239, 13330, 13422, 13514, 13604, 13695, 13787, 13879, 13970, 14061, 14153, 14245, 14335), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated11
#argv <- list(structure(c('A', NA), .Names = c('1', '3')), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated12
#argv <- list(c('A', NA), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated13
#argv <- list(c(12784, 13149, 13514, 13879, 14245, 14610), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated15
#argv <- list(c(1L, 1L, 1L, 1L, 1L), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated16
#argv <- list(c('1', '4', '6', '9', '11', NA, '15', '16', '17', '20', '21', '23', '29', '41', '45', '48', '55', '62', '63', '65', '70', '74', '82', '83', '85', '86', '92', '93', '97', '98', '99', '103', '104', '106', '108', '109', '112', '113', '120', '126', '127', '128', '132', '139', '142', '145', '148', '151', '159', '164', '165', '169', '171', '173', '175', '189', '191', '193', '194', '195', '198', '200', '202', '209', '212', '213', '215', '216', '221', '223', '224', '227'), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated2
#argv <- list(c('refClassA', 'envRefClass', '.environment', 'refClass', 'environment', 'refObject'), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated3
#argv <- list(c(0, 0.00165722279589047, 0.00331444559178095, 0.00497166838767142, 0.00662889118356189, 0.00828611397945236, 0.00994333677534284, 0.0116005595712333, 0.0132577823671238, 0.0149150051630143, 0.0165722279589047, 0.0182294507547952, 0.0198866735506857, 0.0215438963465761, 0.0232011191424666, 0.0248583419383571, 0.0265155647342476, 0.028172787530138, 0.0298300103260285, 0.031487233121919, 0.0331444559178094, 0.0348016787136999, 0.0364589015095904, 0.0381161243054809, 0.0397733471013713, 0.0414305698972618, 0.0430877926931523, 0.0447450154890428, 0.0464022382849332, 0.0480594610808237, 0.0497166838767142, 0.0513739066726046, 0.0530311294684951, 0.0546883522643856, 0.0563455750602761, 0.0580027978561665, 0.059660020652057, 0.0613172434479475, 0.062974466243838, 0.0646316890397284, 0.0662889118356189, 0.0679461346315094, 0.0696033574273998, 0.0712605802232903, 0.0729178030191808, 0.0745750258150713, 0.0762322486109617, 0.0778894714068522, 0.0795466942027427, 0.0812039169986331, 0.0828611397945236, 0.0845183625904141, 0.0861755853863046, 0.087832808182195, 0.0894900309780855, 0.091147253773976, 0.0928044765698665, 0.0944616993657569, 0.0961189221616474, 0.0977761449575379, 0.0994333677534284, 0.101090590549319, 0.102747813345209, 0.1044050361411, 0.10606225893699, 0.107719481732881, 0.109376704528771, 0.111033927324662, 0.112691150120552, 0.114348372916443, 0.116005595712333, 0.117662818508224, 0.119320041304114, 0.120977264100004, 0.122634486895895, 0.124291709691785, 0.125948932487676, 0.127606155283566, 0.129263378079457, 0.130920600875347, 0.132577823671238, 0.134235046467128, 0.135892269263019, 0.137549492058909, 0.1392067148548, 0.14086393765069, 0.142521160446581, 0.144178383242471, 0.145835606038362, 0.147492828834252, 0.149150051630143, 0.150807274426033, 0.152464497221923, 0.154121720017814, 0.155778942813704, 0.157436165609595, 0.159093388405485, 0.160750611201376, 0.162407833997266, 0.164065056793157, 0.165722279589047, 0.167379502384938, 0.169036725180828, 0.170693947976719, 0.172351170772609, 0.1740083935685, 0.17566561636439, 0.177322839160281, 0.178980061956171, 0.180637284752062, 0.182294507547952, 0.183951730343842, 0.185608953139733, 0.187266175935623, 0.188923398731514, 0.190580621527404, 0.192237844323295, 0.193895067119185, 0.195552289915076, 0.197209512710966, 0.198866735506857, 0.200523958302747, 0.202181181098638, 0.203838403894528, 0.205495626690419, 0.207152849486309, 0.2088100722822, 0.21046729507809, 0.21212451787398, 0.213781740669871, 0.215438963465761, 0.217096186261652, 0.218753409057542, 0.220410631853433, 0.222067854649323, 0.223725077445214, 0.225382300241104, 0.227039523036995, 0.228696745832885, 0.230353968628776, 0.232011191424666, 0.233668414220557, 0.235325637016447, 0.236982859812338, 0.238640082608228, 0.240297305404119, 0.241954528200009, 0.243611750995899, 0.24526897379179, 0.24692619658768, 0.248583419383571, 0.250240642179461, 0.251897864975352, 0.253555087771242, 0.255212310567133, 0.256869533363023, 0.258526756158914, 0.260183978954804, 0.261841201750695, 0.263498424546585, 0.265155647342476, 0.266812870138366, 0.268470092934257, 0.270127315730147, 0.271784538526038, 0.273441761321928, 0.275098984117818, 0.276756206913709, 0.278413429709599, 0.28007065250549, 0.28172787530138, 0.283385098097271, 0.285042320893161, 0.286699543689052, 0.288356766484942, 0.290013989280833, 0.291671212076723, 0.293328434872614, 0.294985657668504, 0.296642880464395, 0.298300103260285, 0.299957326056176, 0.301614548852066, 0.303271771647956, 0.304928994443847, 0.306586217239737, 0.308243440035628, 0.309900662831518, 0.311557885627409, 0.313215108423299, 0.31487233121919, 0.31652955401508, 0.318186776810971, 0.319843999606861, 0.321501222402752, 0.323158445198642, 0.324815667994533, 0.326472890790423, 0.328130113586314, 0.329787336382204, 0.331444559178095, 0.333101781973985, 0.334759004769875, 0.336416227565766, 0.338073450361656, 0.339730673157547, 0.341387895953437, 0.343045118749328, 0.344702341545218, 0.346359564341109, 0.348016787136999, 0.34967400993289, 0.35133123272878, 0.352988455524671, 0.354645678320561, 0.356302901116452, 0.357960123912342, 0.359617346708233, 0.361274569504123, 0.362931792300013, 0.364589015095904, 0.366246237891794, 0.367903460687685, 0.369560683483575, 0.371217906279466, 0.372875129075356, 0.374532351871247, 0.376189574667137, 0.377846797463028, 0.379504020258918, 0.381161243054809, 0.382818465850699, 0.38447568864659, 0.38613291144248, 0.387790134238371, 0.389447357034261, 0.391104579830152, 0.392761802626042, 0.394419025421932, 0.396076248217823, 0.397733471013713, 0.399390693809604, 0.401047916605494, 0.402705139401385, 0.404362362197275, 0.406019584993166, 0.407676807789056, 0.409334030584947, 0.410991253380837, 0.412648476176728, 0.414305698972618, 0.415962921768509, 0.417620144564399, 0.41927736736029, 0.42093459015618, 0.42259181295207, 0.424249035747961), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated4
#argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated5
#argv <- list(c(NA, 9L, 13L), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated6
#argv <- list(structure(c('5.1\r3.5\r1.4\r0.2', '4.9\r3\r1.4\r0.2', '4.7\r3.2\r1.3\r0.2', '4.6\r3.1\r1.5\r0.2', '5\r3.6\r1.4\r0.2', '5.4\r3.9\r1.7\r0.4', '4.6\r3.4\r1.4\r0.3', '5\r3.4\r1.5\r0.2', '4.4\r2.9\r1.4\r0.2', '4.9\r3.1\r1.5\r0.1', '5.4\r3.7\r1.5\r0.2', '4.8\r3.4\r1.6\r0.2', '4.8\r3\r1.4\r0.1', '4.3\r3\r1.1\r0.1', '5.8\r4\r1.2\r0.2', '5.7\r4.4\r1.5\r0.4', '5.4\r3.9\r1.3\r0.4', '5.1\r3.5\r1.4\r0.3', '5.7\r3.8\r1.7\r0.3', '5.1\r3.8\r1.5\r0.3', '5.4\r3.4\r1.7\r0.2', '5.1\r3.7\r1.5\r0.4', '4.6\r3.6\r1\r0.2', '5.1\r3.3\r1.7\r0.5', '4.8\r3.4\r1.9\r0.2', '5\r3\r1.6\r0.2', '5\r3.4\r1.6\r0.4', '5.2\r3.5\r1.5\r0.2', '5.2\r3.4\r1.4\r0.2', '4.7\r3.2\r1.6\r0.2', '4.8\r3.1\r1.6\r0.2', '5.4\r3.4\r1.5\r0.4', '5.2\r4.1\r1.5\r0.1', '5.5\r4.2\r1.4\r0.2', '4.9\r3.1\r1.5\r0.2', '5\r3.2\r1.2\r0.2', '5.5\r3.5\r1.3\r0.2', '4.9\r3.6\r1.4\r0.1', '4.4\r3\r1.3\r0.2', '5.1\r3.4\r1.5\r0.2', '5\r3.5\r1.3\r0.3', '4.5\r2.3\r1.3\r0.3', '4.4\r3.2\r1.3\r0.2', '5\r3.5\r1.6\r0.6', '5.1\r3.8\r1.9\r0.4', '4.8\r3\r1.4\r0.3', '5.1\r3.8\r1.6\r0.2', '4.6\r3.2\r1.4\r0.2', '5.3\r3.7\r1.5\r0.2', '5\r3.3\r1.4\r0.2', '7\r3.2\r4.7\r1.4', '6.4\r3.2\r4.5\r1.5', '6.9\r3.1\r4.9\r1.5', '5.5\r2.3\r4\r1.3', '6.5\r2.8\r4.6\r1.5', '5.7\r2.8\r4.5\r1.3', '6.3\r3.3\r4.7\r1.6', '4.9\r2.4\r3.3\r1', '6.6\r2.9\r4.6\r1.3', '5.2\r2.7\r3.9\r1.4', '5\r2\r3.5\r1', '5.9\r3\r4.2\r1.5', '6\r2.2\r4\r1', '6.1\r2.9\r4.7\r1.4', '5.6\r2.9\r3.6\r1.3', '6.7\r3.1\r4.4\r1.4', '5.6\r3\r4.5\r1.5', '5.8\r2.7\r4.1\r1', '6.2\r2.2\r4.5\r1.5', '5.6\r2.5\r3.9\r1.1', '5.9\r3.2\r4.8\r1.8', '6.1\r2.8\r4\r1.3', '6.3\r2.5\r4.9\r1.5', '6.1\r2.8\r4.7\r1.2', '6.4\r2.9\r4.3\r1.3', '6.6\r3\r4.4\r1.4', '6.8\r2.8\r4.8\r1.4', '6.7\r3\r5\r1.7', '6\r2.9\r4.5\r1.5', '5.7\r2.6\r3.5\r1', '5.5\r2.4\r3.8\r1.1', '5.5\r2.4\r3.7\r1', '5.8\r2.7\r3.9\r1.2', '6\r2.7\r5.1\r1.6', '5.4\r3\r4.5\r1.5', '6\r3.4\r4.5\r1.6', '6.7\r3.1\r4.7\r1.5', '6.3\r2.3\r4.4\r1.3', '5.6\r3\r4.1\r1.3', '5.5\r2.5\r4\r1.3', '5.5\r2.6\r4.4\r1.2', '6.1\r3\r4.6\r1.4', '5.8\r2.6\r4\r1.2', '5\r2.3\r3.3\r1', '5.6\r2.7\r4.2\r1.3', '5.7\r3\r4.2\r1.2', '5.7\r2.9\r4.2\r1.3', '6.2\r2.9\r4.3\r1.3', '5.1\r2.5\r3\r1.1', '5.7\r2.8\r4.1\r1.3', '6.3\r3.3\r6\r2.5', '5.8\r2.7\r5.1\r1.9', '7.1\r3\r5.9\r2.1', '6.3\r2.9\r5.6\r1.8', '6.5\r3\r5.8\r2.2', '7.6\r3\r6.6\r2.1', '4.9\r2.5\r4.5\r1.7', '7.3\r2.9\r6.3\r1.8', '6.7\r2.5\r5.8\r1.8', '7.2\r3.6\r6.1\r2.5', '6.5\r3.2\r5.1\r2', '6.4\r2.7\r5.3\r1.9', '6.8\r3\r5.5\r2.1', '5.7\r2.5\r5\r2', '5.8\r2.8\r5.1\r2.4', '6.4\r3.2\r5.3\r2.3', '6.5\r3\r5.5\r1.8', '7.7\r3.8\r6.7\r2.2', '7.7\r2.6\r6.9\r2.3', '6\r2.2\r5\r1.5', '6.9\r3.2\r5.7\r2.3', '5.6\r2.8\r4.9\r2', '7.7\r2.8\r6.7\r2', '6.3\r2.7\r4.9\r1.8', '6.7\r3.3\r5.7\r2.1', '7.2\r3.2\r6\r1.8', '6.2\r2.8\r4.8\r1.8', '6.1\r3\r4.9\r1.8', '6.4\r2.8\r5.6\r2.1', '7.2\r3\r5.8\r1.6', '7.4\r2.8\r6.1\r1.9', '7.9\r3.8\r6.4\r2', '6.4\r2.8\r5.6\r2.2', '6.3\r2.8\r5.1\r1.5', '6.1\r2.6\r5.6\r1.4', '7.7\r3\r6.1\r2.3', '6.3\r3.4\r5.6\r2.4', '6.4\r3.1\r5.5\r1.8', '6\r3\r4.8\r1.8', '6.9\r3.1\r5.4\r2.1', '6.7\r3.1\r5.6\r2.4', '6.9\r3.1\r5.1\r2.3', '5.8\r2.7\r5.1\r1.9', '6.8\r3.2\r5.9\r2.3', '6.7\r3.3\r5.7\r2.5', '6.7\r3\r5.2\r2.3', '6.3\r2.5\r5\r1.9', '6.5\r3\r5.2\r2', '6.2\r3.4\r5.4\r2.3', '5.9\r3\r5.1\r1.8'), .Dim = c(50L, 3L), .Dimnames = list(NULL, c('Setosa', 'Versicolor', 'Virginica'))), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 143

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated7
#argv <- list(c(-6, -3, 0, 3, 6, 9, 12, 15), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated8
#argv <- list(c(9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 1L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L), FALSE, TRUE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 22

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicated.testanyDuplicated9
#argv <- list(c(-1.001, -1, -0.999), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyDuplicateddefault.testanyDuplicateddefault1
#argv <- structure(list(x = c(1, NA, 3, NA, 3), incomparables = c(3,     NA)), .Names = c('x', 'incomparables'));do.call('anyDuplicated.default', argv)
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinanyNA.testanyNA1
#argv <- list(c(1.81566026854212e-304, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0));do.call('anyNA', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinarray.testarray14
#argv <- list(logical(0), 0L, NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinarray.testarray17
#argv <- list(c('', '', ''), c(3, 1), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))
     [,1]
[1,] ""
[2,] ""
[3,] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinarray.testarray18
#argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), 0L, NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinarray.testarray2
#argv <- list(FALSE, FALSE, NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinarray.testarray21
#argv <- list(NA, c(1, 4), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))
     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinarray.testarray22
#argv <- list(structure(c(-0.350406242534262, -0.350406242534262, -3.35040624253426, 0.649593757465738, 1.64959375746574, 17.755677101477, 7.755677101477, -11.3171453341876, 5.68285466581244, -11.3171453341876, -2.31714533418756, 6.68285466581244, -16.3171453341876, 8.38722300809366, 42.3872230080937, 13.3872230080937, 27.8866653386156, -25.1133346613844, 7.88666533861561, -21.1133346613844, 9.71094990017841, 5.71094990017841, 26.7109499001784, -7.28905009982159, 21.7109499001784, -20.2890500998216, 6.226070726676, -15.773929273324, -28.773929273324, 14.226070726676, -14.773929273324, 21.226070726676, 6.226070726676, 29.226070726676, 13.226070726676, -1.18678877265756, 15.8132112273424, 1.81321122734244, 25.8132112273424, -0.186788772657565, 3.81321122734244, -10.1867887726576, 15.8132112273424, 9.81321122734244, 9.81321122734244, -35.0551967576179, 14.9448032423821, 13.9448032423821, -17.0551967576179, -6.05519675761792, -17.7296046985831, 14.9139035439664), gradient = structure(c(0, 0, 0, 0, 0, 56.989995924654, 56.989995924654, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 109.608811230383, 109.608811230383, 109.608811230383, 107.478028232287, 107.478028232287, 107.478028232287, 107.478028232287, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 10.7055301785859, 0, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 0.914597467778369, 0.914597467778369, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.599195286063472, 0.599195286063472, 0.599195286063472, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0202635232425103, 2.60032456603692e-08, 0, 0, 0, 0, 0, 0.165626203544259, 0.165626203544259, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.503396799290371, 0.503396799290371, 0.503396799290371, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.984387422945875, 0.999999996451695), .Dim = c(52L, 3L))), c(52L, 1L), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))
             [,1]
 [1,]  -0.3504062
 [2,]  -0.3504062
 [3,]  -3.3504062
 [4,]   0.6495938
 [5,]   1.6495938
 [6,]  17.7556771
 [7,]   7.7556771
 [8,] -11.3171453
 [9,]   5.6828547
[10,] -11.3171453
[11,]  -2.3171453
[12,]   6.6828547
[13,] -16.3171453
[14,]   8.3872230
[15,]  42.3872230
[16,]  13.3872230
[17,]  27.8866653
[18,] -25.1133347
[19,]   7.8866653
[20,] -21.1133347
[21,]   9.7109499
[22,]   5.7109499
[23,]  26.7109499
[24,]  -7.2890501
[25,]  21.7109499
[26,] -20.2890501
[27,]   6.2260707
[28,] -15.7739293
[29,] -28.7739293
[30,]  14.2260707
[31,] -14.7739293
[32,]  21.2260707
[33,]   6.2260707
[34,]  29.2260707
[35,]  13.2260707
[36,]  -1.1867888
[37,]  15.8132112
[38,]   1.8132112
[39,]  25.8132112
[40,]  -0.1867888
[41,]   3.8132112
[42,] -10.1867888
[43,]  15.8132112
[44,]   9.8132112
[45,]   9.8132112
[46,] -35.0551968
[47,]  14.9448032
[48,]  13.9448032
[49,] -17.0551968
[50,]  -6.0551968
[51,] -17.7296047
[52,]  14.9139035

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinarray.testarray6
#argv <- list(0, 61, NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[39] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinarray.testarray8
#argv <- list(c(NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), c(30L, 1L), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))
      [,1]
 [1,]   NA
 [2,]   NA
 [3,]   NA
 [4,]   NA
 [5,]   NA
 [6,]   NA
 [7,]   29
 [8,]   NA
 [9,]   71
[10,]   39
[11,]   NA
[12,]   NA
[13,]   23
[14,]   NA
[15,]   NA
[16,]   21
[17,]   37
[18,]   20
[19,]   12
[20,]   13
[21,]   NA
[22,]   NA
[23,]   NA
[24,]   NA
[25,]   NA
[26,]   NA
[27,]   NA
[28,]   NA
[29,]   NA
[30,]   NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasarray.testasarray1
#argv <- structure(list(x = 1:3), .Names = 'x');do.call('as.array', argv)
[1] 1 2 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter1
#argv <- list('bessel_y(2,nu=181.2): precision lost in result');as.character(argv[[1]]);
[1] "bessel_y(2,nu=181.2): precision lost in result"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter10
#argv <- list(structure(character(0), package = character(0), class = structure('ObjectsWithPackage', package = 'methods')));as.character(argv[[1]]);
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter11
#argv <- list(c(FALSE, TRUE));as.character(argv[[1]]);
[1] "FALSE" "TRUE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter13
#argv <- list(structure('1', .Tsp = c(1, 1, 1), class = 'ts'));as.character(argv[[1]]);
[1] "1"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter15
#argv <- list(c(2L, 1L, 3L, NA, 4L));as.character(argv[[1]]);
[1] "2" "1" "3" NA  "4"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter21
#argv <- list(c(3, 3, NA, NA, NA, NA, 4, 3, 4, NA, NA, 2, 3, 3, NA, NA, 2, 4, NA, 2, 5, 2, 2, 4, 3, NA, 2, NA, 3, 3));as.character(argv[[1]]);
 [1] "3" "3" NA  NA  NA  NA  "4" "3" "4" NA  NA  "2" "3" "3" NA  NA  "2" "4" NA
[20] "2" "5" "2" "2" "4" "3" NA  "2" NA  "3" "3"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter25
#argv <- list(c(-Inf, NaN, Inf));as.character(argv[[1]]);
[1] "-Inf" "NaN"  "Inf"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter26
#argv <- list(FALSE, useSource = TRUE);as.character(argv[[1]],argv[[2]]);
[1] "FALSE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter29
#argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Dim = c(10L, 2L)));as.character(argv[[1]]);
 [1] "1" "1" "1" "1" "1" "1" "1" "1" "1" "1" "2" "2" "2" "2" "2" "2" "2" "2" "2"
[20] "2"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter3
#argv <- list(c(2L, 1L, NA));as.character(argv[[1]]);
[1] "2" "1" NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter30
#argv <- list(cas.character(argv[[1]]);
  [1] "FALSE" "FALSE" "FALSE" "FALSE" NA      "FALSE" "FALSE" "FALSE" "FALSE"
 [10] NA      "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE"
 [19] "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" NA      NA      NA
 [28] "FALSE" "FALSE" "TRUE"  "FALSE" NA      NA      NA      NA      NA
 [37] NA      "FALSE" NA      "FALSE" "FALSE" NA      NA      "FALSE" NA
 [46] NA      "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" NA      NA      NA
 [55] NA      NA      NA      NA      NA      NA      NA      "TRUE"  "FALSE"
 [64] "FALSE" NA      "FALSE" "FALSE" "FALSE" "TRUE"  "TRUE"  "TRUE"  NA
 [73] "FALSE" "FALSE" NA      "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE"
 [82] "FALSE" NA      NA      "FALSE" "TRUE"  "FALSE" "FALSE" "TRUE"  "FALSE"
 [91] "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "TRUE"
[100] "TRUE"  "TRUE"  NA      NA      "FALSE" "FALSE" "FALSE" NA      "FALSE"
[109] "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" NA      "FALSE" "TRUE"
[118] "FALSE" NA      "FALSE" "TRUE"  "TRUE"  "TRUE"  "TRUE"  "FALSE" "FALSE"
[127] "TRUE"  "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE"
[136] "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" "FALSE"
[145] "FALSE" "FALSE" "FALSE" "FALSE" "FALSE" NA      "FALSE" "FALSE" "FALSE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter33
#argv <- list(logical(0));as.character(argv[[1]]);
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter35
#argv <- list(c(-4, 4, 3.99, -1, -3.01));as.character(argv[[1]]);
[1] "-4"    "4"     "3.99"  "-1"    "-3.01"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter37
#argv <- list(c(34L, -45L));as.character(argv[[1]]);
[1] "34"  "-45"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter43
#argv <- list(NaN);as.character(argv[[1]]);
[1] "NaN"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter44
#argv <- list(Inf);as.character(argv[[1]]);
[1] "Inf"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter45
#argv <- list(c('class', 'names', 'package'));as.character(argv[[1]]);
[1] "class"   "names"   "package"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter46
#argv <- list(c(59.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59.5));as.character(argv[[1]]);
 [1] "59.5" "1"    "2"    "3"    "4"    "5"    "6"    "7"    "8"    "9"
[11] "10"   "11"   "12"   "13"   "14"   "15"   "16"   "17"   "18"   "19"
[21] "20"   "21"   "22"   "23"   "24"   "25"   "26"   "27"   "28"   "29"
[31] "30"   "31"   "32"   "33"   "34"   "35"   "36"   "37"   "38"   "39"
[41] "40"   "41"   "42"   "43"   "44"   "45"   "46"   "47"   "48"   "49"
[51] "50"   "51"   "52"   "53"   "54"   "55"   "56"   "57"   "58"   "59.5"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter8
#argv <- list(c(Inf, -Inf, NaN, NA));as.character(argv[[1]]);
[1] "Inf"  "-Inf" "NaN"  NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacter.testascharacter9
#argv <- list(c(1, 2, NA, 2));as.character(argv[[1]]);
[1] "1" "2" NA  "2"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascharacterfactor.testascharacterfactor1
#argv <- structure(list(x = structure(c(1L, 2L, NA), .Label = c('AB',     'CD'), class = 'factor')), .Names = 'x');do.call('as.character.factor', argv)
[1] "AB" "CD" NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascomplex.testascomplex1
#argv <- list(logical(0), logical(0));as.complex(argv[[1]],argv[[2]]);
complex(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascomplex.testascomplex11
#argv <- list(NULL, NULL);as.complex(argv[[1]],argv[[2]]);
complex(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascomplex.testascomplex2
#argv <- list(FALSE, FALSE);as.complex(argv[[1]],argv[[2]]);
[1] 0+0i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascomplex.testascomplex5
#argv <- list('1.3');as.complex(argv[[1]]);
[1] 1.3+0i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascomplex.testascomplex8
#argv <- list(integer(0));as.complex(argv[[1]]);
complex(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinascomplex.testascomplex9
#argv <- list(1L);as.complex(argv[[1]]);
[1] 1+0i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble1
#argv <- list(c(3.14159265358979, 3.14159265358981, 3.14159265358981, 3.14159265358981, 3.14159265358978, 3.1415926535898, 3.1415926535898, 3.14159265358978, 3.14159265358981, 3.14159265358979, 3.14159265358979, 3.14159265358978, 3.14159265358979, 3.14159265358981, 3.1415926535898, 3.14159265358978, 3.14159265358978, 3.14159265358978, 3.14159265358978, 3.14159265358981, 3.14159265358981, 3.14159265358978, 3.14159265358979, 3.14159265358978, 3.14159265358978, 3.14159265358978, 3.1415926535898, 3.14159265358977, 3.14159265358979, 3.14159265358979, 3.1415926535898, 3.14159265358979, 3.1415926535898, 3.14159265358979, 3.14159265358979, 3.14159265358981, 3.14159265358978, 3.1415926535898, 3.14159265358979, 3.14159265358981, 3.1415926535898, 3.14159265358981, 3.14159265358978, 3.1415926535898, 3.14159265358981, 3.1415926535898, 3.14159265358978, 3.14159265358979, 3.14159265358978, 3.14159265358979, 3.1415926535898, 3.14159265358981, 3.14159265358978, 3.1415926535898, 3.14159265358979, 3.1415926535898, 3.14159265358978, 3.1415926535898, 3.14159265358978, 3.14159265358979, 3.1415926535898, 3.14159265358978, 3.1415926535898, 3.14159265358981, 3.14159265358977, 3.14159265358981, 3.14159265358978, 3.14159265358978, 3.14159265358981, 3.14159265358979, 3.14159265358977, 3.14159265358978, 3.14159265358981, 3.14159265358979, 3.14159265358981, 3.1415926535898, 3.14159265358979, 3.14159265358979, 3.1415926535898, 3.14159265358979, 3.14159265358981, 3.14159265358979, 3.14159265358979, 3.14159265358981, 3.14159265358977, 3.1415926535898, 3.14159265358979, 3.1415926535898, 3.14159265358979, 3.1415926535898, 3.1415926535898, 3.1415926535898, 3.14159265358978, 3.1415926535898, 3.1415926535898, 3.1415926535898, 3.14159265358981, 3.14159265358979, 3.14159265358978, 3.14159265358981, 3.14159265358981));as.double(argv[[1]]);
  [1] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
  [9] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [17] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [25] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [33] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [41] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [49] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [57] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [65] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [73] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [81] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [89] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [97] 3.141593 3.141593 3.141593 3.141593 3.141593

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble10
#argv <- list(structure(c(1, 2, 3, 4, 5, 0, 7, 8, 9, 10, 11, 12), .Dim = c(4L, 3L)));as.double(argv[[1]]);
 [1]  1  2  3  4  5  0  7  8  9 10 11 12

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble12
#argv <- list(character(0));as.double(argv[[1]]);
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble13
#argv <- list(structure(c(21, 16.4, 18.7, 16.8, 17.8, 10.9, 14, 3.5, 4.3, 3.5, 2.7, 6, 14, 2.3), .Dim = c(7L, 2L), .Dimnames = list(c('L', 'NL', 'D', 'B', 'F', 'IRL', 'UK'), c('x', 'y'))));as.double(argv[[1]]);
 [1] 21.0 16.4 18.7 16.8 17.8 10.9 14.0  3.5  4.3  3.5  2.7  6.0 14.0  2.3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble15
#argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('WinF', 'WinNF', 'Veh', 'Con', 'Tabl', 'Head'), class = 'factor'));as.double(argv[[1]]);
  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2
 [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3
[149] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5
[186] 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble17
#argv <- list(structure(c(0, 0.000202660677936876, 0.00241803309686265, 0.00307283986031733, 0.00265711006681184, 0.00284334291579362, 0.00328411981940272, 0.00355926216704063, 0.00344761438149018, 0.00289210744006633, 0.00204225708046235, 0.00178504641867207, 0.00172572372502035, 0.00159946455058003, 0.00194868716238274, 0.00230753595074067, 0.00246954915831488, 0.00290833971278575, 0.00337412960419987, 0.00358181270769781, 0.00354428559372645, 0.00326334045783046, 0.00298117073292367, 0.00293436142844913, 0.0029459867318606, 0.00298412396438805, 0.00320781989229225, 0.00342867445796099, 0.00405369787195761, 0.00417753179826535, 0.00414267894375602, 0.00407024400729904, 0.00393965520892809, 0.00385238230694322, 0.00383595140804293, 0.00378781523717584, 0.0037736404476557, 0.00382248725149436, 0.00381326514145668, 0.0038973026728862, 0.00395676065396717, 0.00431861015154494, 0.00443079015716877, 0.00450544753584657, 0.00439372971759073, 0.00433442297069524, 0.00429954456230782, 0.00426944313801568, 0.00423795462806802, 0.00417472474765742, 0.0042795282659813, 0.00454163385850258, 0.00473601380444899, 0.00466407336984038, 0.00462392764582444, 0.00456056187379283, 0.0045055003087985, 0.00442670076624794, 0.00431121205766447, 0.00421990442925801, 0.00416971729251421, 0.00407853686842565, 0.00409133004830999, 0.0041364805798209, 0.00427208054940612, 0.0044573146303062, 0.00463786827882152, 0.00462599613024964, 0.00456902544608922, 0.00448500474247415, 0.00443631355776013, 0.0043987926301962, 0.00439976139365821, 0.00444739366229557, 0.00441357461857941, 0.00445091952164202, 0.00450346393728121, 0.00462169457996522, 0.004734024297345, 0.00475873200245829, 0.00475253573403064, 0.00471631526131182, 0.00465515282727091, 0.00464698887217466, 0.00462685789718263, 0.00462996361305565, 0.00464191147874474, 0.00464879307071608, 0.00469113571839472, 0.00476270873398438, 0.00477314235918783, 0.00479544142345609, 0.0047737904084596, 0.00471999826644103, 0.00469372169840419, 0.0046463488677134, 0.00461799759453906, 0.00458947682120691, 0.00460912357592989, 0.00463333675159159, 0.00466732307616235, 0.00471231441093801, 0.00474022677208645, 0.00477297287765633, 0.00476766819213148, 0.00473849505147981, 0.00469782534032621, 0.00463861048753855, 0.00457840111456501, 0.00452291229235016, 0.00446341204452307, 0.00442002128896248, 0.00442991931450486, 0.00446688166198173, 0.00452411449686222, 0.00458536543416883, 0.00454175859707822, 0.00450829288322652, 0.00445725707512455, 0.00439091360820385, 0.00437267387139272, 0.00436951404759565, 0.00439586780117785, 0.00443132731253063, 0.00447997483459774, 0.00446916178054371, 0.00448357738281654, 0.00448976052744213, 0.00450610513067692, 0.00449385388080097, 0.00448875792730345, 0.00450025038413588, 0.00448200635475038, 0.00445933490412089, 0.00437269614488144, 0.00441152247400175, 0.00444283816260407, 0.00446748686328766, 0.00448539598299297, 0.00445924890176085, 0.00444386385593038, 0.00445984197910477, 0.00443574296742794, 0.00440036042966077), .Tsp = c(1949, 1960.91666666667, 12), class = 'ts'));as.double(argv[[1]]);
  [1] 0.0000000000 0.0002026607 0.0024180331 0.0030728399 0.0026571101
  [6] 0.0028433429 0.0032841198 0.0035592622 0.0034476144 0.0028921074
 [11] 0.0020422571 0.0017850464 0.0017257237 0.0015994646 0.0019486872
 [16] 0.0023075360 0.0024695492 0.0029083397 0.0033741296 0.0035818127
 [21] 0.0035442856 0.0032633405 0.0029811707 0.0029343614 0.0029459867
 [26] 0.0029841240 0.0032078199 0.0034286745 0.0040536979 0.0041775318
 [31] 0.0041426789 0.0040702440 0.0039396552 0.0038523823 0.0038359514
 [36] 0.0037878152 0.0037736404 0.0038224873 0.0038132651 0.0038973027
 [41] 0.0039567607 0.0043186102 0.0044307902 0.0045054475 0.0043937297
 [46] 0.0043344230 0.0042995446 0.0042694431 0.0042379546 0.0041747247
 [51] 0.0042795283 0.0045416339 0.0047360138 0.0046640734 0.0046239276
 [56] 0.0045605619 0.0045055003 0.0044267008 0.0043112121 0.0042199044
 [61] 0.0041697173 0.0040785369 0.0040913300 0.0041364806 0.0042720805
 [66] 0.0044573146 0.0046378683 0.0046259961 0.0045690254 0.0044850047
 [71] 0.0044363136 0.0043987926 0.0043997614 0.0044473937 0.0044135746
 [76] 0.0044509195 0.0045034639 0.0046216946 0.0047340243 0.0047587320
 [81] 0.0047525357 0.0047163153 0.0046551528 0.0046469889 0.0046268579
 [86] 0.0046299636 0.0046419115 0.0046487931 0.0046911357 0.0047627087
 [91] 0.0047731424 0.0047954414 0.0047737904 0.0047199983 0.0046937217
 [96] 0.0046463489 0.0046179976 0.0045894768 0.0046091236 0.0046333368
[101] 0.0046673231 0.0047123144 0.0047402268 0.0047729729 0.0047676682
[106] 0.0047384951 0.0046978253 0.0046386105 0.0045784011 0.0045229123
[111] 0.0044634120 0.0044200213 0.0044299193 0.0044668817 0.0045241145
[116] 0.0045853654 0.0045417586 0.0045082929 0.0044572571 0.0043909136
[121] 0.0043726739 0.0043695140 0.0043958678 0.0044313273 0.0044799748
[126] 0.0044691618 0.0044835774 0.0044897605 0.0045061051 0.0044938539
[131] 0.0044887579 0.0045002504 0.0044820064 0.0044593349 0.0043726961
[136] 0.0044115225 0.0044428382 0.0044674869 0.0044853960 0.0044592489
[141] 0.0044438639 0.0044598420 0.0044357430 0.0044003604

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble20
#argv <- list(NULL);as.double(argv[[1]]);
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble22
#argv <- list(c(TRUE, FALSE, TRUE));as.double(argv[[1]]);
[1] 1 0 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble23
#argv <- list(c(TRUE, TRUE, FALSE));as.double(argv[[1]]);
[1] 1 1 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble24
#argv <- list(c(NA, NA, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L));as.double(argv[[1]]);
 [1] NA NA  1  2  3  4  5  6  7  8  9

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble25
#argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L), .Label = c('Rural Male', 'Rural Female', 'Urban Male', 'Urban Female'), class = 'factor', .Dim = c(5L, 4L)));as.double(argv[[1]]);
 [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble28
#argv <- list('Inf');as.double(argv[[1]]);
[1] Inf

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble29
#argv <- list(c(' 9', ' 3', ' 3', '  6.761', '156.678', ' 18.327', ' 11.764', '191.64', '323.56', '197.21', '190.64'));as.double(argv[[1]]);
 [1]   9.000   3.000   3.000   6.761 156.678  18.327  11.764 191.640 323.560
[10] 197.210 190.640

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble30
#argv <- list(structure(c(NA, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L), .Tsp = c(1, 101, 1), class = 'ts'));as.double(argv[[1]]);
  [1]  NA   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
 [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35
 [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
 [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71
 [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89
 [91]  90  91  92  93  94  95  96  97  98  99 100

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble32
#argv <- list(NA);do.call('as.double', argv)
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble4
#argv <- list('NaN');as.double(argv[[1]]);
[1] NaN

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble5
#argv <- list(structure(c(1.97479242156194, 1.71068206679967, 1.52241456554483), .Names = c('Bens of Jura', 'Knock Hill', 'Lairig Ghru')));as.double(argv[[1]]);
[1] 1.974792 1.710682 1.522415

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasdouble.testasdouble9
#argv <- list(c('-.1', ' 2.7 ', 'B'));as.double(argv[[1]]);
[1] -0.1  2.7   NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasin.testasin1
#argv <- list(c(0.185157057377868, 0.15968866445196, 0.190428414477965, 0.0799378829516562, 0.043979457119882, 0.0348843282121068, 0.0484793103572122, 0.109221220908651, 0.264364324223884, 0.211999913632203, 0.141157385938914, 0.143099951254224, 0.193270515700824, 0.217573738375349, 0.216954681783302, 0.291716047319384, 0.387858840434923, 0.461666520261029, 0.49992310387409, 0.421641232345205, 0.419256648241403, 0.442116045838704, 0.375354272383531, 0.416333612927645, 0.506835005179142, 0.408511923588378, 0.442160540547329, 0.59649385178332, 0.729919018318794, 0.811421169963513, 0.896290688103034, 0.752346465072037, 0.654905104838795, 0.821242494513718, 0.91715624670646, 0.885960209053628));asin(argv[[1]]);
 [1] 0.18623168 0.16037526 0.19159853 0.08002326 0.04399365 0.03489141
 [7] 0.04849832 0.10943955 0.26754474 0.21362094 0.14163041 0.14359290
[13] 0.19449442 0.21932797 0.21869376 0.29602043 0.39830745 0.47987300
[19] 0.52350999 0.43525455 0.43262638 0.45795644 0.38477896 0.42940909
[25] 0.53150931 0.42082315 0.45800605 0.63912559 0.81820347 0.94657961
[31] 1.11133315 0.85161677 0.71405704 0.96358522 1.16088520 1.08856042

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger1
#argv <- list(structure(c(4L, 5L, 3L, 2L, 2L, 1L, 6L), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables', 'R Core'), class = 'factor'));as.integer(argv[[1]]);
[1] 4 5 3 2 2 1 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger12
#argv <- list(TRUE);as.integer(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger13
#argv <- list(structure(c(1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0), .Dim = c(13L, 1L), .Dimnames = list(c('59', '115', '156', '268', '329', '431', '448', '477', '638', '803', '855', '1040', '1106'), NULL)));as.integer(argv[[1]]);
 [1] 1 1 1 1 1 1 0 0 1 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger14
#argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));as.integer(argv[[1]]);
[1] 0 0 0 0 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger15
#argv <- list(character(0));as.integer(argv[[1]]);
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger16
#argv <- list(4999.0000000001);as.integer(argv[[1]]);
[1] 4999

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger18
#argv <- list(structure(c(1L, 2L, 3L, 2L), .Label = c('1', '2', NA), class = 'factor'));as.integer(argv[[1]]);
[1] 1 2 3 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger19
#argv <- list(structure(c(NA, 1L, NA, 2L, 1L, NA, NA, 1L, 4L, 1L, NA, 4L, 1L, 3L, NA, 4L, 2L, 2L, NA, 4L, 4L, 2L, 4L, 4L, 2L, 1L, 4L, 4L, 3L, 1L, 1L, 4L, 1L, 4L, NA, 1L, 4L, 4L, 2L, 2L, 4L, 4L, 3L, 4L, 2L, 2L, 3L, 3L, 4L, 1L, 1L, 1L, 4L, 1L, 4L, 4L, 4L, 4L, NA, 4L, 4L, 4L, NA, 1L, 2L, 3L, 4L, 3L, 4L, 2L, 4L, 4L, 1L, 4L, 1L, 4L, NA, 4L, 2L, 1L, 4L, 1L, 1L, 1L, 4L, 4L, 2L, 4L, 1L, 1L, 1L, 4L, 1L, 1L, 1L, 4L, 3L, 1L, 4L, 3L, 2L, 4L, 3L, 1L, 4L, 2L, 4L, NA, 4L, 4L, 4L, 2L, 1L, 4L, 4L, NA, 2L, 4L, 4L, 1L, 1L, 1L, 1L, 4L, 1L, 2L, 3L, 2L, 1L, 4L, 4L, 4L, 1L, NA, 4L, 2L, 2L, 2L, 4L, 4L, 3L, 3L, 4L, 2L, 4L, 3L, 1L, 1L, 4L, 2L, 4L, 3L, 1L, 4L, 3L, 4L, 4L, 1L, 1L, 4L, 4L, 3L, 1L, 1L, 2L, 1L, 3L, 4L, 2L, 2L, 2L, 4L, 4L, 3L, 2L, 1L, 1L, 4L, 1L, 1L, 2L, NA, 2L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 4L, 4L, 4L, 4L, 4L, 4L, 2L, 2L, 1L, 4L, 1L, 4L, 3L, 4L, 2L, 3L, 1L, 3L, 1L, 4L, 1L, 4L, 1L, 4L, 3L, 3L, 4L, 4L, 1L, NA, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 4L, 3L, 4L, 2L, 4L, 4L, 1L, 2L, NA, 4L, 4L, 4L, 4L, 1L, 2L, 1L, 1L, 2L, 1L, 4L, 2L, 3L, 1L, 4L, 4L, 4L, 1L, 2L, 1L, 4L, 2L, 1L, 3L, 1L, 2L, 2L, 1L, 2L, 1L, NA, 3L, 2L, 2L, 4L, 1L, 4L, 4L, 2L, 4L, 4L, 4L, 2L, 1L, 4L, 2L, 4L, 4L, 4L, 4L, 4L, 1L, 3L, 4L, 3L, 4L, 1L, NA, 4L, NA, 1L, 1L, 1L, 4L, 4L, 4L, 4L, 2L, 4L, 3L, 2L, NA, 1L, 4L, 4L, 3L, 4L, 4L, 4L, 2L, 4L, 2L, 1L, 4L, 4L, NA, 4L, 4L, 3L, 3L, 4L, 2L, 2L, 4L, 1L, 4L, 4L, 4L, 3L, 4L, 4L, 4L, 3L, 2L, 1L, 3L, 1L, 4L, 1L, 4L, 2L, NA, 1L, 4L, 4L, 3L, 1L, 4L, 1L, 4L, 1L, 4L, 4L, 1L, 2L, 2L, 1L, 4L, 1L, 1L, 4L, NA, 4L, NA, 4L, 4L, 4L, 1L, 4L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 1L, 2L, 1L, 4L, 2L, 3L, 3L, 1L, 3L, 1L, 4L, 1L, 3L, 2L, 2L, 4L, 1L, NA, 3L, 4L, 2L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 4L, 4L, 3L, 2L, 1L, 4L, 4L, 2L, 4L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 4L, 4L, 1L, 1L, 4L, 1L, 4L, 4L, 4L, 1L, 1L, NA, 3L, 2L, 4L, 4L, 4L, 4L, 2L, 3L, 3L, 2L, NA, 4L, 2L, 4L, 4L, 1L, 1L, 4L, 4L, 1L, 1L, 4L, 1L, 2L, 2L, 2L, 2L, 1L, 4L, 4L, 1L, 2L, 2L, 2L, 3L, 4L, 4L, 3L, 4L, 1L, 1L, 4L, 4L, NA, 4L, 1L, 4L, 4L, 4L, 1L, 4L, 4L, 1L, 2L, 4L, 4L, 4L, 4L, 1L, 2L, 4L, 4L, 2L, 1L, 4L, 2L, 4L, 2L, 2L, 4L, 1L, 3L, 3L, 2L, 4L, 1L, 4L, 4L, 4L, 1L, NA, 4L, 4L, 2L, 4L, 4L, 4L, 4L, 4L, 2L, NA, 4L, 2L, 4L, 3L, 1L, 4L, 4L, 3L, 4L, 2L, 4L, 4L, 1L, 2L, 1L, 4L, 1L, 3L, 3L, 1L, 4L, 4L, 2L, 4L, 4L, 4L, 4L, 3L, 2L, 3L, 3L, 2L, NA, 3L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 2L, 4L, 2L, 3L, 4L, 1L, 3L, 1L, NA, 4L, 1L, 2L, 2L, 1L, 4L, 3L, 3L, 4L, 1L, 1L, 3L), .Label = c('(1) Approve STRONGLY', '(2) Approve SOMEWHAT', '(3) Disapprove SOMEWHAT', '(4) Disapprove STRONGLY'), class = 'factor'));as.integer(argv[[1]]);
  [1] NA  1 NA  2  1 NA NA  1  4  1 NA  4  1  3 NA  4  2  2 NA  4  4  2  4  4  2
 [26]  1  4  4  3  1  1  4  1  4 NA  1  4  4  2  2  4  4  3  4  2  2  3  3  4  1
 [51]  1  1  4  1  4  4  4  4 NA  4  4  4 NA  1  2  3  4  3  4  2  4  4  1  4  1
 [76]  4 NA  4  2  1  4  1  1  1  4  4  2  4  1  1  1  4  1  1  1  4  3  1  4  3
[101]  2  4  3  1  4  2  4 NA  4  4  4  2  1  4  4 NA  2  4  4  1  1  1  1  4  1
[126]  2  3  2  1  4  4  4  1 NA  4  2  2  2  4  4  3  3  4  2  4  3  1  1  4  2
[151]  4  3  1  4  3  4  4  1  1  4  4  3  1  1  2  1  3  4  2  2  2  4  4  3  2
[176]  1  1  4  1  1  2 NA  2  3  3  2  1  1  1  1  4  4  4  4  4  4  2  2  1  4
[201]  1  4  3  4  2  3  1  3  1  4  1  4  1  4  3  3  4  4  1 NA  3  4  4  4  4
[226]  4  4  3  4  3  4  2  4  4  1  2 NA  4  4  4  4  1  2  1  1  2  1  4  2  3
[251]  1  4  4  4  1  2  1  4  2  1  3  1  2  2  1  2  1 NA  3  2  2  4  1  4  4
[276]  2  4  4  4  2  1  4  2  4  4  4  4  4  1  3  4  3  4  1 NA  4 NA  1  1  1
[301]  4  4  4  4  2  4  3  2 NA  1  4  4  3  4  4  4  2  4  2  1  4  4 NA  4  4
[326]  3  3  4  2  2  4  1  4  4  4  3  4  4  4  3  2  1  3  1  4  1  4  2 NA  1
[351]  4  4  3  1  4  1  4  1  4  4  1  2  2  1  4  1  1  4 NA  4 NA  4  4  4  1
[376]  4  2  1  2  2  2  2  1  1  2  1  4  2  3  3  1  3  1  4  1  3  2  2  4  1
[401] NA  3  4  2  4  4  4  4  4  4  3  4  4  3  2  1  4  4  2  4  2  1  2  1  1
[426]  1  1  4  4  1  1  4  1  4  4  4  1  1 NA  3  2  4  4  4  4  2  3  3  2 NA
[451]  4  2  4  4  1  1  4  4  1  1  4  1  2  2  2  2  1  4  4  1  2  2  2  3  4
[476]  4  3  4  1  1  4  4 NA  4  1  4  4  4  1  4  4  1  2  4  4  4  4  1  2  4
[501]  4  2  1  4  2  4  2  2  4  1  3  3  2  4  1  4  4  4  1 NA  4  4  2  4  4
[526]  4  4  4  2 NA  4  2  4  3  1  4  4  3  4  2  4  4  1  2  1  4  1  3  3  1
[551]  4  4  2  4  4  4  4  3  2  3  3  2 NA  3  4  4  3  3  4  4  4  1  4  4  4
[576]  4  4  4  4  2  4  2  3  4  1  3  1 NA  4  1  2  2  1  4  3  3  4  1  1  3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger20
#argv <- list(39);as.integer(argv[[1]]);
[1] 39

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger4
#argv <- list(c(0, 1, NA, NA, 1, 1, -1, 1, 3, -2, -2, 7, -1, -1, -1, -1, -1, -1, -1, -1, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));as.integer(argv[[1]]);
 [1]  0  1 NA NA  1  1 -1  1  3 -2 -2  7 -1 -1 -1 -1 -1 -1 -1 -1 17  0  0  0  0
[26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
[51]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
[76]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger6
#argv <- list(2e+05);as.integer(argv[[1]]);
[1] 200000

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger8
#argv <- list(list(7L, 20, 0L, 1));as.integer(argv[[1]]);
[1]  7 20  0  1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasinteger.testasinteger9
#argv <- list('-1');as.integer(argv[[1]]);
[1] -1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslist.testaslist1
#argv <- structure(list(x = structure(c(9.83610941897737, 1.76740501065812,     3.23822416444495, -2.66666666666667, -10, 28), .Names = c('X',     'Y', 'Z', 'a', 'b', 'c'))), .Names = 'x');do.call('as.list', argv)
$X
[1] 9.836109

$Y
[1] 1.767405

$Z
[1] 3.238224

$a
[1] -2.666667

$b
[1] -10

$c
[1] 28


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical1
#argv <- list(structure(c(0L, 0L, 0L, 1L), .Names = c('Y', 'B', 'V', 'N')));as.logical(argv[[1]]);
[1] FALSE FALSE FALSE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical10
#argv <- list(NULL);as.logical(argv[[1]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical11
#argv <- list(structure('TRUE', .Names = '.registration'));as.logical(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical12
#argv <- list(structure(c(0, 1, 2, 2), .Dim = c(4L, 1L), .Dimnames = list(c('Y', 'B', 'V', 'N'), NULL)));as.logical(argv[[1]]);
[1] FALSE  TRUE  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical13
#argv <- list(c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));as.logical(argv[[1]]);
 [1]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical14
#argv <- list(structure(list(a = 1), .Names = 'a'));as.logical(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical15
#argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));as.logical(argv[[1]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical17
#argv <- list(c(1, 2, 3, 4, 5, NA, NA, 2, 3, 4, 5, 6));as.logical(argv[[1]]);
 [1] TRUE TRUE TRUE TRUE TRUE   NA   NA TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical2
#argv <- list(structure(c(-4, 1), .Names = c('', '')));as.logical(argv[[1]]);
[1] TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical3
#argv <- list(structure(c(1L, 0L, 0L, 0L, 0L), .Names = c('bibtype', NA, NA, NA, NA)));as.logical(argv[[1]]);
[1]  TRUE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical4
#argv <- list(c(1L, NA, 0L));as.logical(argv[[1]]);
[1]  TRUE    NA FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical7
#argv <- list('FALSE');as.logical(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical8
#argv <- list(structure(logical(0), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)));as.logical(argv[[1]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinaslogical.testaslogical9
#argv <- list(c(3.74165738677394, 0, 8.55235974119758, 1.96396101212393));as.logical(argv[[1]]);
[1]  TRUE FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasmatrix.testasmatrix1
#argv <- structure(list(x = structure(c(9L, 27L, 27L, 27L, 27L,     3L, 3L, 3L, 3L, 9L, 9L, 9L, 9L, 9L, 9L), .Names = c('Blocks',     'A', 'B', 'C', 'D', 'Blocks:A', 'Blocks:B', 'Blocks:C', 'Blocks:D',     'A:B', 'A:C', 'A:D', 'B:C', 'B:D', 'C:D'))), .Names = 'x');do.call('as.matrix', argv)
         [,1]
Blocks      9
A          27
B          27
C          27
D          27
Blocks:A    3
Blocks:B    3
Blocks:C    3
Blocks:D    3
A:B         9
A:C         9
A:D         9
B:C         9
B:D         9
C:D         9

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasraw.testasraw1
#argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));as.raw(argv[[1]]);
raw(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasraw.testasraw2
#argv <- list(integer(0));as.raw(argv[[1]]);
raw(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasraw.testasraw3
#argv <- list(logical(0));as.raw(argv[[1]]);
raw(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasraw.testasraw4
#argv <- list(character(0));as.raw(argv[[1]]);
raw(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasraw.testasraw5
#argv <- list(NULL);as.raw(argv[[1]]);
raw(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinasraw.testasraw6
#argv <- list(list());as.raw(argv[[1]]);
raw(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinassign.testassign1
#argv <- structure(list(x = '`', value = TRUE), .Names = c('x',     'value'));do.call('assign', argv)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinatan.testatan2
#argv <- list(c(-Inf, Inf));atan(argv[[1]]);
[1] -1.570796  1.570796

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinatan.testatan4
#argv <- list(c(1.24374261655622, 0.0991858914142951, -2.20142053912221, 2.32991997369528, -1.81371893641746, -2.23549697963848, 1.2062731926336, 0.766855355229013, 2.22205301460314, 3.00826513920171, 2.93956891545304, -0.947558891656842, -1.25682397176386, -0.535715772527751, 3.41845348048775, -0.760770219081429, -1.17237584279591, 5.89658401779422, 4.83929989447739, 1.29127425323328, 5.07843950370286, -0.812083060727, 0.688022442899665, 0.51448669913956, -0.286066209156396, -0.571116279122374, 3.99296063466557, 0.543926802451157, 10.5876703046153, -0.012750328000196, 8.35693622233428, -0.357306991432726, 4.27528487251696, 6.30217771913028, 3.89678155886045, -1.57897283794064, -2.06992463735805, 4.67986125893053, -1.26868871126894, 0.0676543743900469, 3.24354507548999, 0.242170808041476, 3.39848727561001, -0.616002138333813, 4.61847372836275, 1.27216752717472, -0.280512588403515, -0.898619929521427, -1.39985243813315, -1.28443284360156, 2.63389613373223, 6.30217771913028, 1.87342709084826, -1.09797072834446, 5.71334116764491, 13.1134896151196, 3.66949044715118, -1.08958378903637, 0.8976473859976, 0.169792654329705, 2.15662832698598, 2.85593682526588, 5.94427279099212, 3.06088249587567, 5.71334116764491, 2.35752884553298, -1.60367725265451, 0.275679954649422, 2.06745683332381, -1.66968494417226, 1.25318650417107, 10.8387072712787, 3.66949044715118, 2.11807401040277, 0.289193352142719, -1.16420273509137, 0.750915507554624, 10.8387072712787, 2.83949743554363, -1.49627880689407, 4.61847372836275, 2.52897165841403, 2.99093712861336, -1.55047774121799, 1.45900279946893, -0.889632055927773, 3.35896467002158, -1.30399295303346, 3.06088249587567, -0.951966998076272, 1.9567142584347, 4.83929989447739, 1.88517906265842, -0.640640247845954, 7.94407524992589, 2.7907339351624, 1.2062731926336, -0.037046093389687, 3.00826513920171, -0.49471891801084, 0.131065830042764, 0.742978487169905, 4.27528487251696, 2.82315118733936, 3.18752185714054, -0.335573516981329, 10.8387072712787, 0.26894691754398, 0.847902962488109, 9.94387770885966, 2.75867688212949, 1.46917954755241, 2.4562951432938, -0.308174402320662, 10.3567386812681, 2.30257280126274, -0.308174402320662, 1.41865102155398, 0.750915507554624, 0.182817981601453, 2.48514643462545, -0.447890214901362, 6.24824895102907, -0.489553106263216, 2.37143299336077, 4.71105188801319, 5.94427279099212, -0.453131097523732, -0.410935024130492, 1.36899222090483, 2.44197697450093, 0.831510275829206, -0.235694520704707, 1.6370875838366, -0.235694520704707, 0.688022442899665, 0.56620571694393, 0.0865319014350673, 0.965336240640277, 2.4562951432938, 0.442174515567164, 2.16959511326347, 5.84967070625675, 0.0802256582898436, 0.807094572229046, 0.831510275829206, 3.06088249587567, 7.84947316519051, 0.939766456519272, 2.08002811722361, 0.169792654329705, 1.16011052636907, 2.74278094610367, 3.18752185714054, 1.03465140856114, 0.742978487169905, 1.38875329192844, 2.7907339351624, 0.649399307990452, 0.588658009946432, 1.62630213168625, 1.37885583765837, 3.4588052584027, 0.378607817368726, 1.64791350682152, 2.55856273925465, 1.11467486151704, 2.75867688212949, 1.44886182210277, 1.29127425323328, 0.872667965105639, 2.51428915807333, 0.603723867107512, 1.27216752717472, 1.33960210165592, 2.77466088473214, 2.68005879999676, 3.39848727561001, 1.61555684891069, 1.30087527736898, 1.45900279946893, 0.856134366332116, 1.58355905227488, 1.37885583765837, 1.00846268026794, 1.44886182210277, 1.72485420222661, 4.19550729872178, 1.43875636487019, 1.60485143740593, 5.07843950370286, 3.69143051554687, 2.13086828897653, 1.61555684891069, 2.13086828897653, 1.90882759744288, 1.51024935267055, 1.54143998175321, 3.6046538963397, 5.15057088795887, 5.99276309359934, 1.94466787312459, 2.44197697450093, 2.00540917116861, 4.32972243262905, 2.14371955784334, 1.9567142584347, 1.98095898169889, 2.88909931785647, 1.80390312212468, 2.18262044053522, 2.69561196483408, 4.71105188801319, 10.3567386812681, 2.16959511326347, 2.5884604688802, 2.72697211153424, 2.31621398549464, 2.85593682526588, 2.51428915807333, 2.42772951300254, 4.04227987136562, 2.64920176692422, 2.60352632604128, 4.32972243262905, 2.87247042403941, 2.82315118733936));atan(argv[[1]]);
  [1]  0.89360601  0.09886254 -1.14441195  1.16537423 -1.06691467 -1.15016680
  [7]  0.87862112  0.65420155  1.14791390  1.24987024  1.24289116 -0.75847808
 [13] -0.89870956 -0.49181033  1.28620681 -0.65035849 -0.86458125  1.40280496
 [19]  1.36702298  0.91184320  1.37637283 -0.68206536  0.60264202  0.47516969
 [25] -0.27862499 -0.51891066  1.32540290  0.49816853  1.47662620 -0.01274964
 [31]  1.45170152 -0.34316950  1.34102464  1.41343296  1.31959494 -1.00623422
 [37] -1.12075229  1.36028071 -0.90328253  0.06755144  1.27173812  0.23759655
 [43]  1.28462440 -0.55210276  1.35756611  0.90461337 -0.27348396 -0.73205211
 [49] -0.95049699 -0.90926985  1.20794147  1.41343296  1.08049045 -0.83206212
 [55]  1.39752259  1.49468628  1.30473963 -0.82824352  0.73151379  0.16818863
 [61]  1.13661896  1.23398984  1.40412777  1.25502475  1.39752259  1.16962639
 [67] -1.01322824  0.26899825  1.12028486 -1.03117472  0.89729697  1.47879486
 [73]  1.30473963  1.12969468  0.28151319 -0.86112524  0.64408678  1.47879486
 [79]  1.23218519 -0.98164677  1.35756611  1.19424649  1.24813701 -0.99797056
 [85]  0.96993662 -0.72705734  1.28144105 -0.91658221  1.25502475 -0.76079564
 [91]  1.09833926  1.36702298  1.08308370 -0.56976726  1.44557499  1.22672110
 [97]  0.87862112 -0.03702916  1.24987024 -0.45941383  0.13032298  0.63899217
[103]  1.34102464  1.23037223  1.26679735 -0.32376536  1.47879486  0.26273005
[109]  0.70327537  1.47056890  1.22303587  0.97317396  1.18416953 -0.29893927
[115]  1.47453923  1.16107763 -0.29893927  0.95679268  0.64408678  0.18082114
[121]  1.18823064 -0.42109804  1.41209734 -0.45525522  1.17173605  1.36163405
[127]  1.40412777 -0.42545470 -0.38989743  0.93991572  1.18212356  0.69366141
[133] -0.23147003  1.02244371 -0.23147003  0.60264202  0.51520003  0.08631689
[139]  0.76776242  1.18416953  0.41632723  1.13890224  1.40148320  0.08005420
[145]  0.67905195  0.69366141  1.25502475  1.44408183  0.75435618  1.12265663
[151]  0.16818863  0.85938432  1.22118026  1.26679735  0.80242715  0.63899217
[157]  0.94672698  1.22672110  0.57595283  0.53203806  1.01949880  0.94333151
[163]  1.28935344  0.36192993  1.02537138  1.19820751  0.83957323  1.22303587
[169]  0.96667994  0.91184320  0.71750767  1.19225120  0.54315314  0.90461337
[175]  0.92954520  1.22488279  1.21366950  1.28462440  1.01653654  0.91542594
[181]  0.96993662  0.70804462  1.00754442  0.94333151  0.78961165  0.96667994
[187]  1.04539278  1.33681188  0.96340381  1.01355681  1.37637283  1.30624799
[193]  1.13201528  1.01653654  1.13201528  1.08822633  0.98593251  0.99530454
[199]  1.30018245  1.37902893  1.40545183  1.09583230  1.18212356  1.10822822
[205]  1.34381476  1.13432334  1.09833926  1.10331131  1.23757454  1.06461685
[211]  1.14117328  1.21556060  1.36163405  1.47453923  1.13890224  1.20212967
[217]  1.21931590  1.16323153  1.23398984  1.19225120  1.18006719  1.32828021
[223]  1.20986002  1.20407638  1.34381476  1.23578627  1.23037223

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr1
#argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1), .Dim = c(32L, 23L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32'), c('(Intercept)', 'HairBrown', 'HairRed', 'HairBlond', 'EyeBlue', 'EyeHazel', 'EyeGreen', 'SexFemale', 'HairBrown:EyeBlue', 'HairRed:EyeBlue', 'HairBlond:EyeBlue', 'HairBrown:EyeHazel', 'HairRed:EyeHazel', 'HairBlond:EyeHazel', 'HairBrown:EyeGreen', 'HairRed:EyeGreen', 'HairBlond:EyeGreen', 'HairBrown:SexFemale', 'HairRed:SexFemale', 'HairBlond:SexFemale', 'EyeBlue:SexFemale', 'EyeHazel:SexFemale', 'EyeGreen:SexFemale')), assign = c(0L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L), contrasts = structure(list(Hair = 'contr.treatment',     Eye = 'contr.treatment', Sex = 'contr.treatment'), .Names = c('Hair', 'Eye', 'Sex'))), 'assign');attr(argv[[1]],argv[[2]]);
 [1] 0 1 1 1 2 2 2 3 4 4 4 4 4 4 4 4 4 5 5 5 6 6 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr12
#argv <- list(structure(list(`1000/MPG.city` = c(40, 55.5555555555556, 50, 52.6315789473684, 45.4545454545455, 45.4545454545455, 52.6315789473684, 62.5, 52.6315789473684, 62.5, 62.5, 40, 40, 52.6315789473684, 47.6190476190476, 55.5555555555556, 66.6666666666667, 58.8235294117647, 58.8235294117647, 50, 43.4782608695652, 50, 34.4827586206897, 43.4782608695652, 45.4545454545455, 58.8235294117647, 47.6190476190476, 55.5555555555556, 34.4827586206897, 50, 32.258064516129, 43.4782608695652, 45.4545454545455, 45.4545454545455, 41.6666666666667, 66.6666666666667, 47.6190476190476, 55.5555555555556, 21.7391304347826, 33.3333333333333, 41.6666666666667, 23.8095238095238, 41.6666666666667, 34.4827586206897, 45.4545454545455, 38.4615384615385, 50, 58.8235294117647, 55.5555555555556, 55.5555555555556, 58.8235294117647, 55.5555555555556, 34.4827586206897, 35.7142857142857, 38.4615384615385, 55.5555555555556, 58.8235294117647, 50, 52.6315789473684, 43.4782608695652, 52.6315789473684, 34.4827586206897, 55.5555555555556, 34.4827586206897, 41.6666666666667, 58.8235294117647, 47.6190476190476, 41.6666666666667, 43.4782608695652, 55.5555555555556, 52.6315789473684, 43.4782608695652, 32.258064516129, 43.4782608695652, 52.6315789473684, 52.6315789473684, 52.6315789473684, 50, 35.7142857142857, 30.3030303030303, 40, 43.4782608695652, 25.6410256410256, 31.25, 40, 45.4545454545455, 55.5555555555556, 40, 58.8235294117647, 47.6190476190476, 55.5555555555556, 47.6190476190476, 50), Weight = c(2705L, 3560L, 3375L, 3405L, 3640L, 2880L, 3470L, 4105L, 3495L, 3620L, 3935L, 2490L, 2785L, 3240L, 3195L, 3715L, 4025L, 3910L, 3380L, 3515L, 3085L, 3570L, 2270L, 2670L, 2970L, 3705L, 3080L, 3805L, 2295L, 3490L, 1845L, 2530L, 2690L, 2850L, 2710L, 3735L, 3325L, 3950L, 1695L, 2475L, 2865L, 2350L, 3040L, 2345L, 2620L, 2285L, 2885L, 4000L, 3510L, 3515L, 3695L, 4055L, 2325L, 2440L, 2970L, 3735L, 2895L, 2920L, 3525L, 2450L, 3610L, 2295L, 3730L, 2545L, 3050L, 4100L, 3200L, 2910L, 2890L, 3715L, 3470L, 2640L, 2350L, 2575L, 3240L, 3450L, 3495L, 2775L, 2495L, 2045L, 2490L, 3085L, 1965L, 2055L, 2950L, 3030L, 3785L, 2240L, 3960L, 2985L, 2810L, 2985L, 3245L), Cylinders = structure(c(2L, 4L, 4L, 4L, 2L, 2L, 4L, 4L, 4L, 5L, 5L, 2L, 2L, 4L, 2L, 4L, 4L, 5L, 5L, 4L, 2L, 4L, 2L, 2L, 2L, 4L, 2L, 4L, 2L, 4L, 2L, 2L, 2L, 2L, 2L, 4L, 4L, 5L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 5L, 4L, 4L, 4L, 5L, 2L, 2L, 2L, 4L, 6L, 2L, 4L, 2L, 4L, 2L, 4L, 2L, 2L, 4L, 4L, 2L, 2L, 4L, 4L, 2L, 2L, 2L, 4L, 4L, 4L, 2L, 2L, 1L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 4L, 2L, 3L), .Label = c('3', '4', '5', '6', '8', 'rotary'), class = 'factor'), Type = structure(c(4L, 3L, 1L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 3L, 1L, 1L, 5L, 3L, 6L, 6L, 2L, 5L, 2L, 1L, 2L, 4L, 4L, 1L, 6L, 3L, 5L, 4L, 2L, 4L, 4L, 1L, 5L, 5L, 6L, 3L, 2L, 4L, 5L, 5L, 4L, 1L, 4L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 2L, 4L, 4L, 1L, 6L, 5L, 1L, 3L, 5L, 3L, 4L, 3L, 4L, 1L, 6L, 3L, 1L, 3L, 6L, 2L, 5L, 4L, 1L, 5L, 3L, 2L, 1L, 4L, 4L, 4L, 1L, 4L, 4L, 5L, 3L, 6L, 4L, 6L, 1L, 5L, 1L, 3L), .Label = c('Compact', 'Large', 'Midsize', 'Small', 'Sporty', 'Van'), class = 'factor'), EngineSize = c(1.8, 3.2, 2.8, 2.8, 3.5, 2.2, 3.8, 5.7, 3.8, 4.9, 4.6, 2.2, 2.2, 3.4, 2.2, 3.8, 4.3, 5, 5.7, 3.3, 3, 3.3, 1.5, 2.2, 2.5, 3, 2.5, 3, 1.5, 3.5, 1.3, 1.8, 2.3, 2.3, 2, 3, 3, 4.6, 1, 1.6, 2.3, 1.5, 2.2, 1.5, 1.8, 1.5, 2, 4.5, 3, 3, 3.8, 4.6, 1.6, 1.8, 2.5, 3, 1.3, 2.3, 3.2, 1.6, 3.8, 1.5, 3, 1.6, 2.4, 3, 3, 2.3, 2.2, 3.8, 3.8, 1.8, 1.6, 2, 3.4, 3.4, 3.8, 2.1, 1.9, 1.2, 1.8, 2.2, 1.3, 1.5, 2.2, 2.2, 2.4, 1.8, 2.5, 2, 2.8, 2.3, 2.4), DriveTrain = structure(c(2L, 2L, 2L, 2L, 3L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 1L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 1L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 3L, 2L, 3L, 2L, 2L, 2L, 1L, 3L, 3L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 3L, 2L), .Label = c('4WD', 'Front', 'Rear'), class = 'factor')), .Names = c('1000/MPG.city', 'Weight', 'Cylinders', 'Type', 'EngineSize', 'DriveTrain'), terms = quote(1000/MPG.city ~ Weight + Cylinders + Type + EngineSize + DriveTrain), row.names = c(NA, 93L), class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
[51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
[76] 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr15
#argv <- list(structure(list(Df = c(NA, 1), Deviance = c(5.65604443125997, 8.44399377410362), AIC = c(71.3540021461976, 72.1419514890413)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user:Temp'), class = c('anova', 'data.frame'), heading = c('Single term deletions', '\nModel:', 'cbind(X, M) ~ M.user + Temp + M.user:Temp')), 'row.names');attr(argv[[1]],argv[[2]]);
[1] "<none>"        "- M.user:Temp"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr16
#argv <- list(structure(list(`1000/MPG.city` = c(40, 55.5555555555556, 50, 52.6315789473684, 45.4545454545455, 45.4545454545455, 52.6315789473684, 62.5, 52.6315789473684, 62.5, 62.5, 40, 40, 52.6315789473684, 47.6190476190476, 55.5555555555556, 66.6666666666667, 58.8235294117647, 58.8235294117647, 50, 43.4782608695652, 50, 34.4827586206897, 43.4782608695652, 45.4545454545455, 58.8235294117647, 47.6190476190476, 55.5555555555556, 34.4827586206897, 50, 32.258064516129, 43.4782608695652, 45.4545454545455, 45.4545454545455, 41.6666666666667, 66.6666666666667, 47.6190476190476, 55.5555555555556, 21.7391304347826, 33.3333333333333, 41.6666666666667, 23.8095238095238, 41.6666666666667, 34.4827586206897, 45.4545454545455, 38.4615384615385, 50, 58.8235294117647, 55.5555555555556, 55.5555555555556, 58.8235294117647, 55.5555555555556, 34.4827586206897, 35.7142857142857, 38.4615384615385, 55.5555555555556, 58.8235294117647, 50, 52.6315789473684, 43.4782608695652, 52.6315789473684, 34.4827586206897, 55.5555555555556, 34.4827586206897, 41.6666666666667, 58.8235294117647, 47.6190476190476, 41.6666666666667, 43.4782608695652, 55.5555555555556, 52.6315789473684, 43.4782608695652, 32.258064516129, 43.4782608695652, 52.6315789473684, 52.6315789473684, 52.6315789473684, 50, 35.7142857142857, 30.3030303030303, 40, 43.4782608695652, 25.6410256410256, 31.25, 40, 45.4545454545455, 55.5555555555556, 40, 58.8235294117647, 47.6190476190476, 55.5555555555556, 47.6190476190476, 50), Weight = c(2705L, 3560L, 3375L, 3405L, 3640L, 2880L, 3470L, 4105L, 3495L, 3620L, 3935L, 2490L, 2785L, 3240L, 3195L, 3715L, 4025L, 3910L, 3380L, 3515L, 3085L, 3570L, 2270L, 2670L, 2970L, 3705L, 3080L, 3805L, 2295L, 3490L, 1845L, 2530L, 2690L, 2850L, 2710L, 3735L, 3325L, 3950L, 1695L, 2475L, 2865L, 2350L, 3040L, 2345L, 2620L, 2285L, 2885L, 4000L, 3510L, 3515L, 3695L, 4055L, 2325L, 2440L, 2970L, 3735L, 2895L, 2920L, 3525L, 2450L, 3610L, 2295L, 3730L, 2545L, 3050L, 4100L, 3200L, 2910L, 2890L, 3715L, 3470L, 2640L, 2350L, 2575L, 3240L, 3450L, 3495L, 2775L, 2495L, 2045L, 2490L, 3085L, 1965L, 2055L, 2950L, 3030L, 3785L, 2240L, 3960L, 2985L, 2810L, 2985L, 3245L), Cylinders = structure(c(2L, 4L, 4L, 4L, 2L, 2L, 4L, 4L, 4L, 5L, 5L, 2L, 2L, 4L, 2L, 4L, 4L, 5L, 5L, 4L, 2L, 4L, 2L, 2L, 2L, 4L, 2L, 4L, 2L, 4L, 2L, 2L, 2L, 2L, 2L, 4L, 4L, 5L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 5L, 4L, 4L, 4L, 5L, 2L, 2L, 2L, 4L, 6L, 2L, 4L, 2L, 4L, 2L, 4L, 2L, 2L, 4L, 4L, 2L, 2L, 4L, 4L, 2L, 2L, 2L, 4L, 4L, 4L, 2L, 2L, 1L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 4L, 2L, 3L), .Label = c('3', '4', '5', '6', '8', 'rotary'), class = 'factor'), Type = structure(c(4L, 3L, 1L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 3L, 1L, 1L, 5L, 3L, 6L, 6L, 2L, 5L, 2L, 1L, 2L, 4L, 4L, 1L, 6L, 3L, 5L, 4L, 2L, 4L, 4L, 1L, 5L, 5L, 6L, 3L, 2L, 4L, 5L, 5L, 4L, 1L, 4L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 2L, 4L, 4L, 1L, 6L, 5L, 1L, 3L, 5L, 3L, 4L, 3L, 4L, 1L, 6L, 3L, 1L, 3L, 6L, 2L, 5L, 4L, 1L, 5L, 3L, 2L, 1L, 4L, 4L, 4L, 1L, 4L, 4L, 5L, 3L, 6L, 4L, 6L, 1L, 5L, 1L, 3L), .Label = c('Compact', 'Large', 'Midsize', 'Small', 'Sporty', 'Van'), class = 'factor'), EngineSize = c(1.8, 3.2, 2.8, 2.8, 3.5, 2.2, 3.8, 5.7, 3.8, 4.9, 4.6, 2.2, 2.2, 3.4, 2.2, 3.8, 4.3, 5, 5.7, 3.3, 3, 3.3, 1.5, 2.2, 2.5, 3, 2.5, 3, 1.5, 3.5, 1.3, 1.8, 2.3, 2.3, 2, 3, 3, 4.6, 1, 1.6, 2.3, 1.5, 2.2, 1.5, 1.8, 1.5, 2, 4.5, 3, 3, 3.8, 4.6, 1.6, 1.8, 2.5, 3, 1.3, 2.3, 3.2, 1.6, 3.8, 1.5, 3, 1.6, 2.4, 3, 3, 2.3, 2.2, 3.8, 3.8, 1.8, 1.6, 2, 3.4, 3.4, 3.8, 2.1, 1.9, 1.2, 1.8, 2.2, 1.3, 1.5, 2.2, 2.2, 2.4, 1.8, 2.5, 2, 2.8, 2.3, 2.4), DriveTrain = structure(c(2L, 2L, 2L, 2L, 3L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 1L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 1L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 3L, 2L, 3L, 2L, 2L, 2L, 1L, 3L, 3L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 3L, 2L), .Label = c('4WD', 'Front', 'Rear'), class = 'factor')), .Names = c('1000/MPG.city', 'Weight', 'Cylinders', 'Type', 'EngineSize', 'DriveTrain'), terms = quote(1000/MPG.city ~ Weight + Cylinders + Type + EngineSize + DriveTrain), row.names = c(NA, 93L), class = 'data.frame'), 'na.action');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr18
#argv <- list(c(NA, NA, '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/histogram.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/histogram.R'), 'levels');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr19
#argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats'), frow = c(2418L, 2418L, 2418L, 2421L, 2422L, 2424L), lrow = c(2418L, 2418L, 2418L, 2421L, 2426L, 2424L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 6L), class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr2
#argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'), Soft = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L), .Label = c('Hard', 'Medium', 'Soft'), class = 'factor')), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), terms = quote(cbind(X, M) ~ M.user + Temp + Soft), row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), class = 'data.frame'), 'terms');attr(argv[[1]],argv[[2]]);
cbind(X, M) ~ M.user + Temp + Soft

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr21
#argv <- list(structure(list(ID = c(63L, 63L, 63L, 63L, 63L), Age = c(30L, 30L, 30L, 30L, 30L), OME = structure(c(3L, 3L, 3L, 3L, 3L), .Label = c('N/A', 'high', 'low'), class = 'factor'), Loud = c(35L, 40L, 45L, 50L, 55L), Noise = structure(c(2L, 2L, 2L, 2L, 2L), .Label = c('coherent', 'incoherent'), class = 'factor'), Correct = c(1L, 1L, 1L, 3L, 1L), Trials = c(2L, 1L, 1L, 3L, 1L), UID = c(67L, 67L, 67L, 67L, 67L), UIDn = c(67.1, 67.1, 67.1, 67.1, 67.1)), .Names = c('ID', 'Age', 'OME', 'Loud', 'Noise', 'Correct', 'Trials', 'UID', 'UIDn'), row.names = c(635L, 639L, 643L, 647L, 651L), class = 'data.frame'), 'na.action');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr26
#argv <- list(structure(list(structure(list(structure('Update varFunc Object', Rd_tag = 'TEXT')), Rd_tag = '\\title'), structure(list(structure('update.varFunc', Rd_tag = 'VERB')), Rd_tag = '\\name'), structure(list(structure('update.varExp', Rd_tag = 'VERB')), Rd_tag = '\\alias'), structure(list(structure('update.varFunc', Rd_tag = 'VERB')), Rd_tag = '\\alias'), structure(list(structure('update.varComb', Rd_tag = 'VERB')), Rd_tag = '\\alias'), structure(list(structure('update.varConstPower', Rd_tag = 'VERB')), Rd_tag = '\\alias'),     structure(list(structure('update.varExpon', Rd_tag = 'VERB')), Rd_tag = '\\alias'), structure(list(structure('update.varPower', Rd_tag = 'VERB')), Rd_tag = '\\alias'), structure(list(structure('models', Rd_tag = 'TEXT')), Rd_tag = '\\keyword'), structure(list(structure('\n', Rd_tag = 'TEXT'), structure('  If the ', Rd_tag = 'TEXT'), structure(list(structure('formula(object)', Rd_tag = 'RCODE')), Rd_tag = '\\code'), structure(' includes a ', Rd_tag = 'TEXT'), structure(list(structure('\'.\'', Rd_tag = 'RCODE')), Rd_tag = '\\code'),         structure(' term, representing\n', Rd_tag = 'TEXT'), structure('  a fitted object, the variance covariate needs to be updated upon\n', Rd_tag = 'TEXT'), structure('  completion of an optimization cycle (in which the variance function\n', Rd_tag = 'TEXT'), structure('  weights are kept fixed). This method function allows a reevaluation of\n', Rd_tag = 'TEXT'), structure('  the variance covariate using the current fitted object and,\n', Rd_tag = 'TEXT'), structure('  optionally, other variables in the original data.\n', Rd_tag = 'TEXT')), Rd_tag = '\\description'),     structure(list(structure('\n', Rd_tag = 'RCODE'), structure(list(list(structure('update', Rd_tag = 'TEXT')), list(structure('varFunc', Rd_tag = 'TEXT'))), Rd_tag = '\\method'), structure('(object, data, ', Rd_tag = 'RCODE'), structure(list(), Rd_tag = '\\dots'), structure(')\n', Rd_tag = 'RCODE')), Rd_tag = '\\usage'), structure(list(structure('\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT'), structure(list(list(structure('object', Rd_tag = 'TEXT')), list(structure('an object inheriting from class ', Rd_tag = 'TEXT'),         structure(list(structure('varFunc', Rd_tag = 'RCODE')), Rd_tag = '\\code'), structure(',\n', Rd_tag = 'TEXT'), structure('    representing a variance function structure.', Rd_tag = 'TEXT'))), Rd_tag = '\\item'), structure(' \n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT'), structure(list(list(structure('data', Rd_tag = 'TEXT')), list(structure('a list with a component named ', Rd_tag = 'TEXT'), structure(list(structure('\'.\'', Rd_tag = 'RCODE')), Rd_tag = '\\code'), structure(' with the current\n', Rd_tag = 'TEXT'),         structure('    version of the fitted object (from which fitted values, coefficients,\n', Rd_tag = 'TEXT'), structure('    and residuals can be extracted) and, if necessary, other variables\n', Rd_tag = 'TEXT'), structure('    used to evaluate the variance covariate(s).', Rd_tag = 'TEXT'))), Rd_tag = '\\item'), structure('\n', Rd_tag = 'TEXT'), structure(' ', Rd_tag = 'TEXT'), structure(list(list(structure(list(), Rd_tag = '\\dots')), list(structure('some methods for this generic require additional\n', Rd_tag = 'TEXT'),         structure('    arguments.  None are used in this method.', Rd_tag = 'TEXT'))), Rd_tag = '\\item'), structure(' \n', Rd_tag = 'TEXT')), Rd_tag = '\\arguments'), structure(list(structure('\n', Rd_tag = 'TEXT'), structure('  if ', Rd_tag = 'TEXT'), structure(list(structure('formula(object)', Rd_tag = 'RCODE')), Rd_tag = '\\code'), structure(' includes a ', Rd_tag = 'TEXT'), structure(list(structure('\'.\'', Rd_tag = 'RCODE')), Rd_tag = '\\code'), structure(' term, an\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT'),         structure(list(structure('varFunc', Rd_tag = 'RCODE')), Rd_tag = '\\code'), structure(' object similar to ', Rd_tag = 'TEXT'), structure(list(structure('object', Rd_tag = 'RCODE')), Rd_tag = '\\code'), structure(', but with the \n', Rd_tag = 'TEXT'), structure('  variance covariate reevaluated at the current fitted object value;\n', Rd_tag = 'TEXT'), structure('  else ', Rd_tag = 'TEXT'), structure(list(structure('object', Rd_tag = 'RCODE')), Rd_tag = '\\code'), structure(' is returned unchanged.\n', Rd_tag = 'TEXT')), Rd_tag = '\\value'),     structure(list(structure('José Pinheiro and Douglas Bates ', Rd_tag = 'TEXT'), structure(list(structure('bates@stat.wisc.edu', Rd_tag = 'TEXT')), Rd_tag = '\\email')), Rd_tag = '\\author'), structure(list(structure(list(structure(list(structure('needUpdate', Rd_tag = 'TEXT')), Rd_tag = '\\link')), Rd_tag = '\\code'), structure(',\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT'), structure(list(structure(list(structure('covariate<-.varFunc', Rd_tag = 'TEXT')), Rd_tag = '\\link')), Rd_tag = '\\code'),         structure('\n', Rd_tag = 'TEXT')), Rd_tag = '\\seealso')), Rdfile = '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/man/update.varFunc.Rd', class = 'Rd', meta = structure(list(docType = character(0)), .Names = 'docType'), prepared = 3L), 'prepared');attr(argv[[1]],argv[[2]]);
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr29
#argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 'row.names');attr(argv[[1]],argv[[2]]);
[1] "1" "2" "3"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr30
#argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/graphics/R/graphics', '/home/lzhao/hg/r-instrumented/library/graphics/R/graphics'), frow = 4262:4263, lrow = 4262:4263), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);
[1] 1 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr34
#argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x * z)), 'row.names');attr(argv[[1]],argv[[2]]);
 [1]  1  2  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr35
#argv <- list(structure(c(123.48457192908, 239.059434652297, 290.055338401838, 18.397281603467, 6.57585722655537, 0.670931786731845, 0.178466148156965, 0.245410750178149, 0.363167328274208, 0.194808268742596, 2172.67583033103, 8.91763605923317e+38), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), 'class');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr36
#argv <- list(structure(c(8.85169533448293e-238, 2.77884205079773e-237, 8.5330427463164e-242, 7.89244209468013e-215, 6.74732964729372e-231, 1.30818670504849e-217, 1.39113376416096e-208, 1.35683278955814e-215, 7.74002099666521e-219, 3.64254537730231e-220, 6.75916981442421e-296, 0), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), 'class');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr37
#argv <- list(structure(c(0, 0, 0, 0, 0, 0, 1.90299264808673e-318, 0, 0, 0, 0, 0), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), 'class');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr38
#argv <- list(list(c(57, 95, 8, 69, 92, 90, 15, 2, 84, 6, 127, 36, 51, 2, 69, 71, 87, 72, 5, 39, 22, 16, 72, 4, 130, 4, 114, 9, 20, 24, 10, 51, 43, 28, 60, 5, 17, 7, 81, 71, 12, 29, 44, 77, 4, 27, 47, 76, 8, 72, 13, 57, 4, 81, 20, 61, 80, 114, 39, 14, 86, 55, 3, 19)), 'names');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr39
#argv <- list(structure(list(coef = c(0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099), m = 50L), .Names = c('coef', 'm'), name = 'Daniell(50)', class = 'tskernel'), 'name');attr(argv[[1]],argv[[2]]);
[1] "Daniell(50)"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr4
#argv <- list(structure(list(`cbind(w = weight, w2 = weight^2)` = structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), terms = quote(cbind(w = weight, w2 = weight^2) ~ group), row.names = c(NA, 20L), class = 'data.frame'), 'terms');attr(argv[[1]],argv[[2]]);
cbind(w = weight, w2 = weight^2) ~ group

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr41
#argv <- list(structure(list(A = 0:10, B = 10:20, `NA` = 20:30), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);
 [1]  1  2  3  4  5  6  7  8  9 10 11

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr42
#argv <- list(structure(list(coef = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.05), m = 5L), .Names = c('coef', 'm'), name = 'mDaniell(5)', class = 'tskernel'), 'name');attr(argv[[1]],argv[[2]]);
[1] "mDaniell(5)"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr45
#argv <- list(c(35.2589338684655, 59.5005803666983, 12.4529321610302, 2.53579570262684, 10.370198579714, 42.0067149618146, 8.14319638132861, 34.0508943233725, 7.78517191057496, 26.9998965458032, 6.70435391953205, 3.62502215105156, 2.59277105754344, 14.4998960151485, 6.70435391953205, 5.8000097831969, 32.741875696675, 59.5015090627504, 13.5512565366133, 4.46460764999704, 9.62989278443572, 42.0073706103832, 8.86141045052292, 59.9511558158597, 7.22940551532861, 27.0003179651772, 7.29566488446303, 6.38233656214029, 2.40767880256155, 14.5001223322046, 7.29566488446303, 10.2116933242272), 'dim');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr6
#argv <- list(structure(list(Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L), B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor')), .Names = c('Y', 'B', 'V', 'N'), terms = quote(Y ~ B + V + N + V:N), row.names = 2:72, class = 'data.frame'), 'na.action');attr(argv[[1]],argv[[2]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr7
#argv <- list(structure('mtext(\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\', side = 3)\n', Rd_tag = 'RCODE'), 'Rd_tag');attr(argv[[1]],argv[[2]]);
[1] "RCODE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattr.testattr9
#argv <- list(structure(list(Fr = c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8), Hair = structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('Black', 'Brown', 'Red', 'Blond'), class = 'factor'), Eye = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('Fr', 'Hair', 'Eye', 'Sex'), terms = quote(Fr ~ (Hair + Eye + Sex)^2), row.names = c(NA, 32L), class = 'data.frame'), 'terms');attr(argv[[1]],argv[[2]]);
Fr ~ (Hair + Eye + Sex)^2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattributes.testattributes13
#argv <- list(c(FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE));attributes(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattributes.testattributes18
#argv <- list(structure(3.14159265358979, comment = 'Start with pi'));attributes(argv[[1]]);
$comment
[1] "Start with pi"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattributes.testattributes2
#argv <- list(1386518010.66723);attributes(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattributes.testattributes22
#argv <- list(c(1000, 1e+07, 1));attributes(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattributes.testattributes25
#argv <- list(structure(character(0), package = character(0), class = structure('ObjectsWithPackage', package = 'methods')));attributes(argv[[1]]);
$package
character(0)

$class
[1] "ObjectsWithPackage"
attr(,"package")
[1] "methods"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattributes.testattributes4
#argv <- list(structure(c(1+1i, 2+1.4142135623731i, 3+1.73205080756888i, 4+2i, 5+2.23606797749979i, 6+2.44948974278318i, 7+2.64575131106459i, 8+2.82842712474619i, 9+3i, 10+3.1622776601684i), id = character(0), class = structure('withId', package = '.GlobalEnv')));attributes(argv[[1]]);
$id
character(0)

$class
[1] "withId"
attr(,"package")
[1] ".GlobalEnv"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinattributes.testattributes8
#argv <- list('Error in setClass(\'class3\', representation(\'class1\', \'class2\')) : \n  error in contained classes (\'class2\') for class “class3”; class definition removed from ‘.GlobalEnv’\n');attributes(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinbasename.testbasename1
#argv <- list('/home/roman/r-instrumented/library/base/help/DateTimeClasses'); .Internal(basename(argv[[1]]))
[1] "DateTimeClasses"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinbasename.testbasename2
#argv <- list(structure('myTst', .Names = '')); .Internal(basename(argv[[1]]))
[1] "myTst"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinbasename.testbasename3
#argv <- list(c('file55711ba85492.R', '/file55711ba85492.R')); .Internal(basename(argv[[1]]))
[1] "file55711ba85492.R" "file55711ba85492.R"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinbasename.testbasename4
#argv <- list(character(0)); .Internal(basename(argv[[1]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinbasename.testbasename5
#argv <- list(structure('/home/lzhao/hg/r-instrumented/library/utils', .Names = 'Dir')); .Internal(basename(argv[[1]]))
[1] "utils"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinbasename.testbasename6
#argv <- list('tk_messageBox.Rd'); .Internal(basename(argv[[1]]))
[1] "tk_messageBox.Rd"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinbasename.testbasename7
#argv <- list(cdata', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'inst', 'inst', 'inst/doc', 'inst/doc', 'inst/doc', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb/figures', 'noweb/figures', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'vignettes', 'vignettes', 'vignettes')); .Internal(basename(argv[[1]]))
  [1] "."         "."         "."         "."         "R"         "R"
  [7] "R"         "R"         "R"         "R"         "R"         "R"
 [13] "R"         "R"         "R"         "R"         "R"         "R"
 [19] "R"         "R"         "R"         "R"         "R"         "R"
 [25] "R"         "R"         "R"         "R"         "R"         "R"
 [31] "R"         "R"         "R"         "R"         "R"         "R"
 [37] "R"         "R"         "R"         "R"         "R"         "R"
 [43] "R"         "R"         "R"         "R"         "R"         "R"
 [49] "R"         "R"         "R"         "R"         "R"         "R"
 [55] "R"         "R"         "R"         "R"         "R"         "R"
 [61] "R"         "R"         "R"         "R"         "R"         "R"
 [67] "R"         "R"         "R"         "R"         "R"         "R"
 [73] "R"         "R"         "R"         "R"         "R"         "R"
 [79] "R"         "R"         "R"         "R"         "R"         "R"
 [85] "R"         "R"         "R"         "R"         "R"         "R"
 [91] "R"         "R"         "R"         "R"         "R"         "R"
 [97] "R"         "R"         "R"         "R"         "R"         "R"
[103] "R"         "R"         "R"         "R"         "R"         "R"
[109] "R"         "R"         "R"         "R"         "R"         "R"
[115] "R"         "R"         "R"         "R"         "R"         "R"
[121] "R"         "R"         "R"         "data"      "data"      "data"
[127] "data"      "data"      "data"      "data"      "data"      "data"
[133] "data"      "data"      "data"      "data"      "data"      "data"
[139] "data"      "data"      "data"      "data"      "inst"      "inst"
[145] "doc"       "doc"       "doc"       "man"       "man"       "man"
[151] "man"       "man"       "man"       "man"       "man"       "man"
[157] "man"       "man"       "man"       "man"       "man"       "man"
[163] "man"       "man"       "man"       "man"       "man"       "man"
[169] "man"       "man"       "man"       "man"       "man"       "man"
[175] "man"       "man"       "man"       "man"       "man"       "man"
[181] "man"       "man"       "man"       "man"       "man"       "man"
[187] "man"       "man"       "man"       "man"       "man"       "man"
[193] "man"       "man"       "man"       "man"       "man"       "man"
[199] "man"       "man"       "man"       "man"       "man"       "man"
[205] "man"       "man"       "man"       "man"       "man"       "man"
[211] "man"       "man"       "man"       "man"       "man"       "man"
[217] "man"       "man"       "man"       "man"       "man"       "man"
[223] "man"       "man"       "man"       "man"       "man"       "man"
[229] "man"       "noweb"     "noweb"     "noweb"     "noweb"     "noweb"
[235] "noweb"     "noweb"     "noweb"     "noweb"     "figures"   "figures"
[241] "noweb"     "noweb"     "noweb"     "noweb"     "noweb"     "rates"
[247] "rates"     "rates"     "rates"     "rates"     "rates"     "rates"
[253] "rates"     "rates"     "rates"     "rates"     "rates"     "rates"
[259] "rates"     "rates"     "rates"     "noweb"     "noweb"     "noweb"
[265] "noweb"     "noweb"     "noweb"     "noweb"     "noweb"     "noweb"
[271] "src"       "src"       "src"       "src"       "src"       "src"
[277] "src"       "src"       "src"       "src"       "src"       "src"
[283] "src"       "src"       "src"       "src"       "src"       "src"
[289] "src"       "src"       "src"       "src"       "src"       "src"
[295] "src"       "src"       "src"       "src"       "src"       "src"
[301] "src"       "src"       "src"       "src"       "src"       "src"
[307] "src"       "src"       "src"       "src"       "src"       "src"
[313] "src"       "src"       "src"       "src"       "src"       "src"
[319] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[325] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[331] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[337] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[343] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[349] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[355] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[361] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[367] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[373] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[379] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[385] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[391] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[397] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[403] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[409] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[415] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[421] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[427] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[433] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[439] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[445] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[451] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[457] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[463] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[469] "tests"     "tests"     "tests"     "tests"     "tests"     "tests"
[475] "tests"     "tests"     "tests"     "tests"     "tests"     "vignettes"
[481] "vignettes" "vignettes"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinbasename.testbasename9
#argv <- structure(list(path = 'myTst'), .Names = 'path');do.call('basename', argv)
[1] "myTst"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc1
#argv <- list(character(0), 'myLib/myTst');c(argv[[1]],argv[[2]]);
[1] "myLib/myTst"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc11
#argv <- list(`(Intercept)` = '(Intercept)', structure(list(B = 'B', V = 'V', N = 'N', `V:N` = c('V', 'N'), Residuals = c('B', 'V', 'N', 'Within')), .Names = c('B', 'V', 'N', 'V:N', 'Residuals')));c(argv[[1]],argv[[2]]);
[[1]]
[1] "(Intercept)"

$B
[1] "B"

$V
[1] "V"

$N
[1] "N"

$`V:N`
[1] "V" "N"

$Residuals
[1] "B"      "V"      "N"      "Within"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc12
#argv <- list(structure(c(512, 313, 89, 19, 353, 207, 17, 8, 120, 205, 202, 391, 138, 279, 131, 244, 53, 138, 94, 299, 22, 351, 24, 317), .Dim = c(2L, 2L, 6L), .Dimnames = structure(list(Admit = c('Admitted', 'Rejected'), Gender = c('Male', 'Female'), Dept = c('A', 'B', 'C', 'D', 'E', 'F')), .Names = c('Admit', 'Gender', 'Dept')), class = 'table'));c(argv[[1]]);
 [1] 512 313  89  19 353 207  17   8 120 205 202 391 138 279 131 244  53 138  94
[20] 299  22 351  24 317

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc19
#argv <- list(10L, NULL, 10);c(argv[[1]],argv[[2]],argv[[3]]);
[1] 10 10

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc2
#argv <- list(structure(list(names = c('x', 'z')), .Names = 'names'), structure(list(class = 'data.frame', row.names = c(NA, 10L)), .Names = c('class', 'row.names')));c(argv[[1]],argv[[2]]);
$names
[1] "x" "z"

$class
[1] "data.frame"

$row.names
[1] NA 10


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc23
#argv <- list(list(NULL), list(NULL, c('a', 'b', 'c'), NULL, c('V5', 'V6', 'V7', 'V8', 'V9')));c(argv[[1]],argv[[2]]);
[[1]]
NULL

[[2]]
NULL

[[3]]
[1] "a" "b" "c"

[[4]]
NULL

[[5]]
[1] "V5" "V6" "V7" "V8" "V9"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc26
#argv <- list(0, c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE));c(argv[[1]],argv[[2]]);
 [1] 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc27
#argv <- list(character(0));c(argv[[1]]);
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc29
#argv <- list(1944, 1944.75, 4);c(argv[[1]],argv[[2]],argv[[3]]);
[1] 1944.00 1944.75    4.00

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc36
#argv <- list(-1, 0+1i);c(argv[[1]],argv[[2]]);
[1] -1+0i  0+1i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc37
#argv <- list(c(0, 1, 1.3, 1.8, 2.4), 4.6, NULL);c(argv[[1]],argv[[2]],argv[[3]]);
[1] 0.0 1.0 1.3 1.8 2.4 4.6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc38
#argv <- list(raw(0), 61);c(argv[[1]],argv[[2]]);
[1] 61

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc4
#argv <- list(1, 1, 1, 1, NA);c(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);
[1]  1  1  1  1 NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc40
#argv <- list(structure(list(A = 1, c = 'C'), .Names = c('A', 'c')), d = 1:3);c(argv[[1]],argv[[2]]);
$A
[1] 1

$c
[1] "C"

[[3]]
[1] 1

[[4]]
[1] 2

[[5]]
[1] 3


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc42
#argv <- list(structure(list(Ozone = c(41L, 36L, 12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L, 14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L, 45L, 115L, 37L, NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 135L, 49L, 32L, NA, 64L, 40L, 77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L, 79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L, 59L, 39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA, 44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA, 45L, 168L, 73L, NA, 76L, 118L, 84L, 85L, 96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L), Solar.R = c(190L, 118L, 149L, 313L, NA, NA, 299L, 99L, 19L, 194L, NA, 256L, 290L, 274L, 65L, 334L, 307L, 78L, 322L, 44L, 8L, 320L, 25L, 92L, 66L, 266L, NA, 13L, 252L, 223L, 279L, 286L, 287L, 242L, 186L, 220L, 264L, 127L, 273L, 291L, 323L, 259L, 250L, 148L, 332L, 322L, 191L, 284L, 37L, 120L, 137L, 150L, 59L, 91L, 250L, 135L, 127L, 47L, 98L, 31L, 138L, 269L, 248L, 236L, 101L, 175L, 314L, 276L, 267L, 272L, 175L, 139L, 264L, 175L, 291L, 48L, 260L, 274L, 285L, 187L, 220L, 7L, 258L, 295L, 294L, 223L, 81L, 82L, 213L, 275L, 253L, 254L, 83L, 24L, 77L, NA, NA, NA, 255L, 229L, 207L, 222L, 137L, 192L, 273L, 157L, 64L, 71L, 51L, 115L, 244L, 190L, 259L, 36L, 255L, 212L, 238L, 215L, 153L, 203L, 225L, 237L, 188L, 167L, 197L, 183L, 189L, 95L, 92L, 252L, 220L, 230L, 259L, 236L, 259L, 238L, 24L, 112L, 237L, 224L, 27L, 238L, 201L, 238L, 14L, 139L, 49L, 20L, 193L, 145L, 191L, 131L, 223L), Wind = c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5, 9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4, 8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8, 4.1, 9.2, 9.2, 10.9, 4.6, 10.9, 5.1, 6.3, 5.7, 7.4, 8.6, 14.3, 14.9, 14.9, 14.3, 6.9, 10.3, 6.3, 5.1, 11.5, 6.9, 9.7, 11.5, 8.6, 8, 8.6, 12, 7.4, 7.4, 7.4, 9.2, 6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3, 8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9, 10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3, 6.3, 6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7, 14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6, 9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), Temp = c(67L, 72L, 74L, 62L, 56L, 66L, 65L, 59L, 61L, 69L, 74L, 69L, 66L, 68L, 58L, 64L, 66L, 57L, 68L, 62L, 59L, 73L, 61L, 61L, 57L, 58L, 57L, 67L, 81L, 79L, 76L, 78L, 74L, 67L, 84L, 85L, 79L, 82L, 87L, 90L, 87L, 93L, 92L, 82L, 80L, 79L, 77L, 72L, 65L, 73L, 76L, 77L, 76L, 76L, 76L, 75L, 78L, 73L, 80L, 77L, 83L, 84L, 85L, 81L, 84L, 83L, 83L, 88L, 92L, 92L, 89L, 82L, 73L, 81L, 91L, 80L, 81L, 82L, 84L, 87L, 85L, 74L, 81L, 82L, 86L, 85L, 82L, 86L, 88L, 86L, 83L, 81L, 81L, 81L, 82L, 86L, 85L, 87L, 89L, 90L, 90L, 92L, 86L, 86L, 82L, 80L, 79L, 77L, 79L, 76L, 78L, 78L, 77L, 72L, 75L, 79L, 81L, 86L, 88L, 97L, 94L, 96L, 94L, 91L, 92L, 93L, 93L, 87L, 84L, 80L, 78L, 75L, 73L, 81L, 76L, 77L, 71L, 71L, 78L, 67L, 76L, 68L, 82L, 64L, 71L, 81L, 69L, 63L, 70L, 77L, 75L, 76L, 68L), Month = c(5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L), Day = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L)), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day'), row.names = c(NA, -153L)), list(NULL, NULL));c(argv[[1]],argv[[2]]);
$Ozone
  [1]  41  36  12  18  NA  28  23  19   8  NA   7  16  11  14  18  14  34   6
 [19]  30  11   1  11   4  32  NA  NA  NA  23  45 115  37  NA  NA  NA  NA  NA
 [37]  NA  29  NA  71  39  NA  NA  23  NA  NA  21  37  20  12  13  NA  NA  NA
 [55]  NA  NA  NA  NA  NA  NA  NA 135  49  32  NA  64  40  77  97  97  85  NA
 [73]  10  27  NA   7  48  35  61  79  63  16  NA  NA  80 108  20  52  82  50
 [91]  64  59  39   9  16  78  35  66 122  89 110  NA  NA  44  28  65  NA  22
[109]  59  23  31  44  21   9  NA  45 168  73  NA  76 118  84  85  96  78  73
[127]  91  47  32  20  23  21  24  44  21  28   9  13  46  18  13  24  16  13
[145]  23  36   7  14  30  NA  14  18  20

$Solar.R
  [1] 190 118 149 313  NA  NA 299  99  19 194  NA 256 290 274  65 334 307  78
 [19] 322  44   8 320  25  92  66 266  NA  13 252 223 279 286 287 242 186 220
 [37] 264 127 273 291 323 259 250 148 332 322 191 284  37 120 137 150  59  91
 [55] 250 135 127  47  98  31 138 269 248 236 101 175 314 276 267 272 175 139
 [73] 264 175 291  48 260 274 285 187 220   7 258 295 294 223  81  82 213 275
 [91] 253 254  83  24  77  NA  NA  NA 255 229 207 222 137 192 273 157  64  71
[109]  51 115 244 190 259  36 255 212 238 215 153 203 225 237 188 167 197 183
[127] 189  95  92 252 220 230 259 236 259 238  24 112 237 224  27 238 201 238
[145]  14 139  49  20 193 145 191 131 223

$Wind
  [1]  7.4  8.0 12.6 11.5 14.3 14.9  8.6 13.8 20.1  8.6  6.9  9.7  9.2 10.9 13.2
 [16] 11.5 12.0 18.4 11.5  9.7  9.7 16.6  9.7 12.0 16.6 14.9  8.0 12.0 14.9  5.7
 [31]  7.4  8.6  9.7 16.1  9.2  8.6 14.3  9.7  6.9 13.8 11.5 10.9  9.2  8.0 13.8
 [46] 11.5 14.9 20.7  9.2 11.5 10.3  6.3  1.7  4.6  6.3  8.0  8.0 10.3 11.5 14.9
 [61]  8.0  4.1  9.2  9.2 10.9  4.6 10.9  5.1  6.3  5.7  7.4  8.6 14.3 14.9 14.9
 [76] 14.3  6.9 10.3  6.3  5.1 11.5  6.9  9.7 11.5  8.6  8.0  8.6 12.0  7.4  7.4
 [91]  7.4  9.2  6.9 13.8  7.4  6.9  7.4  4.6  4.0 10.3  8.0  8.6 11.5 11.5 11.5
[106]  9.7 11.5 10.3  6.3  7.4 10.9 10.3 15.5 14.3 12.6  9.7  3.4  8.0  5.7  9.7
[121]  2.3  6.3  6.3  6.9  5.1  2.8  4.6  7.4 15.5 10.9 10.3 10.9  9.7 14.9 15.5
[136]  6.3 10.9 11.5  6.9 13.8 10.3 10.3  8.0 12.6  9.2 10.3 10.3 16.6  6.9 13.2
[151] 14.3  8.0 11.5

$Temp
  [1] 67 72 74 62 56 66 65 59 61 69 74 69 66 68 58 64 66 57 68 62 59 73 61 61 57
 [26] 58 57 67 81 79 76 78 74 67 84 85 79 82 87 90 87 93 92 82 80 79 77 72 65 73
 [51] 76 77 76 76 76 75 78 73 80 77 83 84 85 81 84 83 83 88 92 92 89 82 73 81 91
 [76] 80 81 82 84 87 85 74 81 82 86 85 82 86 88 86 83 81 81 81 82 86 85 87 89 90
[101] 90 92 86 86 82 80 79 77 79 76 78 78 77 72 75 79 81 86 88 97 94 96 94 91 92
[126] 93 93 87 84 80 78 75 73 81 76 77 71 71 78 67 76 68 82 64 71 81 69 63 70 77
[151] 75 76 68

$Month
  [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6
 [38] 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7
 [75] 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8
[112] 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9
[149] 9 9 9 9 9

$Day
  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
 [26] 26 27 28 29 30 31  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19
 [51] 20 21 22 23 24 25 26 27 28 29 30  1  2  3  4  5  6  7  8  9 10 11 12 13 14
 [76] 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  1  2  3  4  5  6  7  8
[101]  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  1  2
[126]  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
[151] 28 29 30

[[7]]
NULL

[[8]]
NULL


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc45
#argv <- list(1, c(2, 3, 4, 6, 7, 8, 9, 10, 11), c(3, 4, 5, 7, 8, 9, 10, 11), 11L);c(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);
 [1]  1  2  3  4  6  7  8  9 10 11  3  4  5  7  8  9 10 11 11

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc46
#argv <- list(TRUE, NULL);c(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc5
#argv <- list(`difference in location` = -30);c(argv[[1]]);
[1] -30

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc50
#argv <- list(1, 1, 1, list());c(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);
[[1]]
[1] 1

[[2]]
[1] 1

[[3]]
[1] 1


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc52
#argv <- list(structure(list(names = c('freq', 'score')), .Names = 'names'), structure(list(class = 'data.frame', row.names = integer(0)), .Names = c('class', 'row.names')));c(argv[[1]],argv[[2]]);
$names
[1] "freq"  "score"

$class
[1] "data.frame"

$row.names
integer(0)


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc53
#argv <- list(1, FALSE, c(0, 0));c(argv[[1]],argv[[2]],argv[[3]]);
[1] 1 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc55
#argv <- list(c(1L, 2L, 3L, NA), c(-1, 0, 1, NA));c(argv[[1]],argv[[2]]);
[1]  1  2  3 NA -1  0  1 NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc58
#argv <- list(FALSE, 'More testing :', 12321, 'B2');c(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);
[1] "FALSE"          "More testing :" "12321"          "B2"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc59
#argv <- list(1:10, 1+1i, TRUE);c(argv[[1]],argv[[2]],argv[[3]]);
 [1]  1+0i  2+0i  3+0i  4+0i  5+0i  6+0i  7+0i  8+0i  9+0i 10+0i  1+1i  1+0i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc6
#argv <- list(TRUE, TRUE, NA);c(argv[[1]],argv[[2]],argv[[3]]);
[1] TRUE TRUE   NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc60
#argv <- list('ArgMethod', 1.10714871779409);c(argv[[1]],argv[[2]]);
[1] "ArgMethod"        "1.10714871779409"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc62
#argv <- list(list(), list());c(argv[[1]],argv[[2]]);
list()

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc63
#argv <- list(recursive = TRUE);c(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc66
#argv <- list(NA, 1+2i);c(argv[[1]],argv[[2]]);
[1]   NA 1+2i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc68
#argv <- list(structure(list(ctrl = c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14), trt1 = c(4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69), trt2 = c(6.31, 5.12, 5.54, 5.5, 5.37, 5.29, 4.92, 6.15, 5.8, 5.26)), .Dim = 3L, .Dimnames = list(c('ctrl', 'trt1', 'trt2'))));c(argv[[1]]);
$ctrl
 [1] 4.17 5.58 5.18 6.11 4.50 4.61 5.17 4.53 5.33 5.14

$trt1
 [1] 4.81 4.17 4.41 3.59 5.87 3.83 6.03 4.89 4.32 4.69

$trt2
 [1] 6.31 5.12 5.54 5.50 5.37 5.29 4.92 6.15 5.80 5.26


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc69
#argv <- list(list(NA, FALSE), structure(list(na.rm = TRUE), .Names = 'na.rm'));c(argv[[1]],argv[[2]]);
[[1]]
[1] NA

[[2]]
[1] FALSE

$na.rm
[1] TRUE


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinc.testc8
#argv <- list(-0.1, 0.1);c(argv[[1]],argv[[2]]);
[1] -0.1  0.1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincat.testcat1
#argv <- list('head\n', 1:2, '\n', 3:4, file = 'foo4');cat(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);
head
 1 2
 3 4 foo4
##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincat.testcat3
#argv <- list('%comment\n\n%another\n%\n%\n', 'C1\tC2\tC3\n\'Panel\'\t\'Area Examined\'\t\'% Blemishes\'\n', '\'1\'\t\'0.8\'\t\'3\'\n', '\'2\'\t\'0.6\'\t\'2\'\n', '\'3\'\t\'0.8\'\t\'3\'\n', file = 'test.dat', sep = '');cat(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);
%comment

%another
%
%
 C1	C2	C3
'Panel'	'Area Examined'	'% Blemishes'
 '1'	'0.8'	'3'
 '2'	'0.6'	'2'
 '3'	'0.8'	'3'
 test.dat
##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincat.testcat4
#argv <- list('#comment\n\n#another\n#\n#\n', 'C1\tC2\tC3\n\'Panel\'\t\'Area Examined\'\t\'# Blemishes\'\n', '\'1\'\t\'0.8\'\t\'3\'\n', '\'2\'\t\'0.6\'\t\'2\'\n', '\'3\'\t\'0.8\'\t\'3\'\n', file = 'test.dat', sep = '');cat(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);
#comment

#another
#
#
 C1	C2	C3
'Panel'	'Area Examined'	'# Blemishes'
 '1'	'0.8'	'3'
 '2'	'0.6'	'2'
 '3'	'0.8'	'3'
 test.dat
##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincat.testcat5
#argv <- list('head\n', file = 'foo2');cat(argv[[1]],argv[[2]]);
head
 foo2
##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincbind.testcbind1
#argv <- list(748L, c(5.08759633523238, 4.0943445622221, 5.66642668811243,     3.43398720448515), c(1L, 1L, 1L, 1L), 1L, c(FALSE, TRUE,     TRUE, TRUE), c(0, 1, 0, 1), c(0, 1, 1, 1), c(0, 1, 0, 1),     c(FALSE, FALSE, TRUE, FALSE), c(FALSE, FALSE, FALSE, TRUE));do.call('cbind', argv)
     [,1]     [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]  748 5.087596    1    1    0    0    0    0    0     0
[2,]  748 4.094345    1    1    1    1    1    1    0     0
[3,]  748 5.666427    1    1    1    0    1    0    1     0
[4,]  748 3.433987    1    1    1    1    1    1    0     1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincbind.testcbind3
#argv <- list(structure(c(3L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L,     2L, 1L, 2L, 2L, 1L, 2L, 3L, 3L, 2L, 2L, 2L, 2L, 4L, 4L, 3L,     1L, 2L, 2L, 1L, 2L, 3L, 1L, 1L, 1L, 4L, 2L, 2L, 2L, 2L, 1L,     1L, 2L, 1L, 3L, 3L, 2L, 2L, 3L, 2L, 2L, 1L, 2L, 2L, 2L, 2L,     1L, 1L, 4L, 2L, 3L, 2L, 1L, 3L, 2L, 3L, 1L, 2L, 3L, 4L, 2L,     4L, 2L, 3L, 1L, 1L, 3L, 4L, 3L, 1L, 2L, 2L, 1L, 2L, 3L, 1L,     2L, 2L, 2L, 2L, 4L, 2L, 2L, 2L, 3L, 1L, 1L, 1L, 2L, 2L, 4L,     1L, 1L, 1L, 1L, 2L, 4L, 3L, 2L, 3L, 3L, 2L, 2L, 2L, 2L, 2L,     1L, 2L, 2L, 2L, 2L, 2L, 4L, 2L, 2L, 1L, 3L, 2L, 2L, 1L, 4L,     1L, 3L, 2L, 2L, 3L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 3L,     2L, 1L, 3L, 1L, 3L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 3L, 1L, 2L,     1L, 2L, 2L, 4L, 2L, 2L, 2L, 2L, 1L, 3L, 1L, 1L, 1L, 2L, 2L,     3L, 2L, 4L, 3L, 3L, 4L, 1L, 3L, 2L, 2L, 4L, 2L, 1L, 2L, 2L,     2L, 3L, 2L, 2L, 1L, 2L, 3L, 2L, 1L, 2L, 2L), .Label = c('1 Extremely well',     '2 Quite well', '3 Not too well', '4 Not well at all'), class = 'factor'),     structure(c(1L, 2L, 2L, 4L, 2L, 2L, 1L, 2L, 2L, 3L, 2L, 3L,         3L, 1L, 2L, 3L, 3L, 2L, 1L, 4L, 2L, 3L, 1L, 3L, 1L, 4L,         1L, 1L, 3L, 4L, 2L, 1L, 2L, 3L, 2L, 3L, 4L, 4L, 1L, 4L,         3L, 1L, 3L, 3L, 2L, 3L, 2L, 2L, 3L, 1L, 2L, 2L, 2L, 3L,         2L, 1L, 4L, 2L, 3L, 4L, 1L, 3L, 2L, 3L, 1L, 2L, 2L, 4L,         2L, 4L, 2L, 3L, 1L, 1L, 4L, 4L, 3L, 2L, 3L, 2L, 3L, 3L,         3L, 2L, 3L, 2L, 2L, 3L, 4L, 2L, 4L, 2L, 3L, 1L, 1L, 1L,         2L, 3L, 4L, 3L, 2L, 1L, 2L, 1L, 4L, 3L, 1L, 2L, 2L, 2L,         2L, 2L, 3L, 4L, 2L, 3L, 2L, 1L, 3L, 2L, 3L, 3L, 3L, 1L,         2L, 2L, 3L, 2L, 4L, 1L, 3L, 3L, 4L, 3L, 2L, 2L, 3L, 2L,         4L, 4L, 2L, 1L, 4L, 3L, 2L, 4L, 3L, 4L, 2L, 2L, 1L, 2L,         3L, 1L, 2L, 3L, 2L, 1L, 4L, 3L, 2L, 3L, 3L, 2L, 2L, 1L,         4L, 2L, 3L, 2L, 2L, 2L, 4L, 2L, 4L, 2L, 3L, 3L, 4L, 4L,         1L, 3L, 4L, 3L, 4L, 2L, 1L, 2L, 2L, 2L, 2L, 3L, 2L, 2L,         2L, 3L, 3L, 2L, 3L, 2L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'), structure(c(2L, 2L, 2L, 2L, 2L, 2L,         1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L,         1L, 3L, 1L, 2L, 1L, 3L, 2L, 2L, 3L, 2L, 2L, 3L, 2L, 1L,         2L, 2L, 3L, 4L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 3L, 1L,         2L, 3L, 2L, 1L, 1L, 3L, 2L, 2L, 4L, 2L, 2L, 2L, 4L, 2L,         2L, 2L, 3L, 3L, 3L, 4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L,         2L, 1L, 1L, 2L, 1L, 2L, 3L, 2L, 3L, 2L, 2L, 4L, 3L, 2L,         2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L,         4L, 3L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,         2L, 2L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 3L, 2L, 2L, 2L,         2L, 3L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 2L, 2L, 3L,         2L, 2L, 3L, 1L, 1L, 4L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L,         2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 3L, 1L, 1L, 2L, 3L, 1L,         3L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 3L, 2L, 1L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'), structure(c(1L, 2L, 2L, 1L, 3L, 2L,         2L, 3L, 2L, 2L, 3L, 2L, 2L, 4L, 1L, 4L, 2L, 4L, 3L, 2L,         3L, 2L, 3L, 1L, 1L, 1L, 3L, 1L, 2L, 2L, 2L, 2L, 2L, 2L,         3L, 2L, 1L, 1L, 4L, 3L, 1L, 4L, 3L, 1L, 2L, 2L, 2L, 2L,         1L, 1L, 2L, 2L, 3L, 2L, 1L, 3L, 4L, 2L, 1L, 2L, 2L, 2L,         2L, 1L, 2L, 2L, 1L, 2L, 2L, 1L, 3L, 1L, 4L, 2L, 2L, 4L,         2L, 2L, 2L, 3L, 4L, 2L, 2L, 1L, 1L, 3L, 2L, 1L, 2L, 4L,         2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 3L, 3L, 2L,         1L, 1L, 2L, 3L, 1L, 2L, 2L, 3L, 2L, 2L, 3L, 2L, 3L, 3L,         2L, 3L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 1L, 2L, 4L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 1L, 3L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 4L, 2L, 2L, 1L,         2L, 2L, 2L, 2L, 2L, 1L, 3L, 2L, 2L, 1L, 3L, 2L, 4L, 3L,         2L, 2L, 1L, 1L, 3L, 2L, 2L, 1L, 2L, 2L, 2L, 3L, 1L, 2L,         2L, 2L, 3L, 2L, 2L, 3L, 2L, 2L, 1L, 2L, 2L, 1L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'), structure(c(1L, 2L, 3L, 1L, 4L, 3L,         4L, 2L, 2L, 4L, 2L, 2L, 2L, 4L, 2L, 3L, 2L, 4L, 4L, 4L,         3L, 2L, 3L, 3L, 1L, 1L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 1L,         3L, 2L, 1L, 1L, 4L, 4L, 1L, 1L, 3L, 2L, 4L, 3L, 2L, 3L,         1L, 1L, 3L, 3L, 4L, 2L, 1L, 4L, 4L, 4L, 2L, 3L, 2L, 2L,         3L, 2L, 4L, 3L, 1L, 2L, 3L, 1L, 3L, 2L, 3L, 4L, 2L, 4L,         2L, 3L, 3L, 3L, 4L, 1L, 2L, 2L, 2L, 4L, 2L, 3L, 2L, 4L,         2L, 2L, 2L, 3L, 3L, 3L, 1L, 3L, 2L, 2L, 3L, 4L, 4L, 3L,         2L, 1L, 3L, 2L, 2L, 2L, 3L, 1L, 2L, 2L, 2L, 2L, 4L, 3L,         3L, 3L, 2L, 4L, 2L, 3L, 2L, 2L, 3L, 3L, 3L, 3L, 2L, 3L,         2L, 2L, 3L, 3L, 2L, 2L, 4L, 3L, 3L, 3L, 3L, 2L, 3L, 2L,         2L, 2L, 3L, 4L, 3L, 2L, 2L, 3L, 2L, 1L, 4L, 3L, 2L, 1L,         3L, 3L, 3L, 3L, 2L, 1L, 3L, 2L, 2L, 4L, 3L, 4L, 4L, 3L,         2L, 2L, 1L, 2L, 3L, 2L, 3L, 2L, 2L, 3L, 3L, 4L, 3L, 3L,         2L, 4L, 4L, 2L, 2L, 4L, 3L, 1L, 2L, 2L, 2L, 2L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'), structure(c(2L, 2L, 2L, 2L, 4L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 2L, 2L, 2L, 4L, 2L, 4L,         3L, 2L, 3L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L,         2L, 2L, 1L, 1L, 3L, 3L, 2L, 4L, 2L, 2L, 2L, 2L, 2L, 2L,         1L, 1L, 3L, 4L, 1L, 2L, 1L, 2L, 4L, 4L, 2L, 1L, 2L, 2L,         2L, 1L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 4L, 2L, 3L, 2L, 2L, 3L, 2L, 2L, 2L, 4L,         2L, 2L, 2L, 2L, 3L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 3L, 2L,         2L, 1L, 3L, 3L, 2L, 3L, 2L, 1L, 2L, 3L, 3L, 2L, 2L, 4L,         2L, 4L, 3L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 3L, 2L, 3L, 2L,         1L, 2L, 3L, 3L, 1L, 2L, 2L, 2L, 2L, 3L, 1L, 2L, 3L, 1L,         2L, 2L, 2L, 4L, 1L, 2L, 2L, 3L, 2L, 2L, 3L, 4L, 1L, 1L,         2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 4L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 3L, 3L, 2L, 2L,         2L, 3L, 3L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'));do.call('cbind', argv)
       [,1] [,2] [,3] [,4] [,5] [,6]
  [1,]    3    1    2    1    1    2
  [2,]    1    2    2    2    2    2
  [3,]    2    2    2    2    3    2
  [4,]    2    4    2    1    1    2
  [5,]    2    2    2    3    4    4
  [6,]    2    2    2    2    3    2
  [7,]    1    1    1    2    4    2
  [8,]    2    2    2    3    2    2
  [9,]    2    2    2    2    2    2
 [10,]    2    3    2    2    4    2
 [11,]    1    2    2    3    2    2
 [12,]    2    3    2    2    2    2
 [13,]    2    3    2    2    2    3
 [14,]    1    1    1    4    4    3
 [15,]    2    2    2    1    2    2
 [16,]    3    3    2    4    3    2
 [17,]    3    3    2    2    2    2
 [18,]    2    2    1    4    4    4
 [19,]    2    1    2    3    4    2
 [20,]    2    4    1    2    4    4
 [21,]    2    2    1    3    3    3
 [22,]    4    3    3    2    2    2
 [23,]    4    1    1    3    3    3
 [24,]    3    3    2    1    3    2
 [25,]    1    1    1    1    1    1
 [26,]    2    4    3    1    1    1
 [27,]    2    1    2    3    3    2
 [28,]    1    1    2    1    2    2
 [29,]    2    3    3    2    3    2
 [30,]    3    4    2    2    2    1
 [31,]    1    2    2    2    2    2
 [32,]    1    1    3    2    2    2
 [33,]    1    2    2    2    2    2
 [34,]    4    3    1    2    1    2
 [35,]    2    2    2    3    3    2
 [36,]    2    3    2    2    2    2
 [37,]    2    4    3    1    1    1
 [38,]    2    4    4    1    1    1
 [39,]    1    1    2    4    4    3
 [40,]    1    4    2    3    4    3
 [41,]    2    3    2    1    1    2
 [42,]    1    1    2    4    1    4
 [43,]    3    3    3    3    3    2
 [44,]    3    3    2    1    2    2
 [45,]    2    2    2    2    4    2
 [46,]    2    3    2    2    3    2
 [47,]    3    2    3    2    2    2
 [48,]    2    2    1    2    3    2
 [49,]    2    3    2    1    1    1
 [50,]    1    1    3    1    1    1
 [51,]    2    2    2    2    3    3
 [52,]    2    2    1    2    3    4
 [53,]    2    2    1    3    4    1
 [54,]    2    3    3    2    2    2
 [55,]    1    2    2    1    1    1
 [56,]    1    1    2    3    4    2
 [57,]    4    4    4    4    4    4
 [58,]    2    2    2    2    4    4
 [59,]    3    3    2    1    2    2
 [60,]    2    4    2    2    3    1
 [61,]    1    1    4    2    2    2
 [62,]    3    3    2    2    2    2
 [63,]    2    2    2    2    3    2
 [64,]    3    3    2    1    2    1
 [65,]    1    1    3    2    4    2
 [66,]    2    2    3    2    3    2
 [67,]    3    2    3    1    1    1
 [68,]    4    4    4    2    2    2
 [69,]    2    2    2    2    3    2
 [70,]    4    4    1    1    1    1
 [71,]    2    2    2    3    3    1
 [72,]    3    3    2    1    2    2
 [73,]    1    1    1    4    3    1
 [74,]    1    1    1    2    4    2
 [75,]    3    4    1    2    2    2
 [76,]    4    4    2    4    4    2
 [77,]    3    3    2    2    2    2
 [78,]    1    2    1    2    3    2
 [79,]    2    3    1    2    3    2
 [80,]    2    2    2    3    3    2
 [81,]    1    3    1    4    4    4
 [82,]    2    3    2    2    1    2
 [83,]    3    3    3    2    2    3
 [84,]    1    2    2    1    2    2
 [85,]    2    3    3    1    2    2
 [86,]    2    2    2    3    4    3
 [87,]    2    2    2    2    2    2
 [88,]    2    3    4    1    3    2
 [89,]    4    4    3    2    2    2
 [90,]    2    2    2    4    4    4
 [91,]    2    4    2    2    2    2
 [92,]    2    2    2    1    2    2
 [93,]    3    3    2    2    2    2
 [94,]    1    1    1    2    3    2
 [95,]    1    1    1    2    3    3
 [96,]    1    1    1    2    3    2
 [97,]    2    2    2    1    1    1
 [98,]    2    3    2    2    3    2
 [99,]    4    4    2    1    2    1
[100,]    1    3    1    1    2    1
[101,]    1    2    1    1    3    2
[102,]    1    1    1    3    4    2
[103,]    1    2    2    3    4    3
[104,]    2    1    2    2    3    2
[105,]    4    4    4    1    2    2
[106,]    3    3    3    1    1    1
[107,]    2    1    1    2    3    3
[108,]    3    2    2    3    2    3
[109,]    3    2    2    1    2    2
[110,]    2    2    2    2    2    3
[111,]    2    2    2    2    3    2
[112,]    2    2    2    3    1    1
[113,]    2    3    2    2    2    2
[114,]    2    4    2    2    2    3
[115,]    1    2    2    3    2    3
[116,]    2    3    2    2    2    2
[117,]    2    2    2    3    4    2
[118,]    2    1    1    3    3    4
[119,]    2    3    2    2    3    2
[120,]    2    2    2    3    3    4
[121,]    4    3    3    2    2    3
[122,]    2    3    2    2    4    3
[123,]    2    3    3    2    2    3
[124,]    1    1    2    3    3    3
[125,]    3    2    2    2    2    2
[126,]    2    2    2    2    2    2
[127,]    2    3    2    2    3    3
[128,]    1    2    1    2    3    2
[129,]    4    4    3    1    3    3
[130,]    1    1    2    2    3    2
[131,]    3    3    2    2    2    3
[132,]    2    3    2    2    3    2
[133,]    2    4    2    2    2    1
[134,]    3    3    3    2    2    2
[135,]    2    2    2    2    3    3
[136,]    1    2    2    2    3    3
[137,]    2    3    1    2    2    1
[138,]    1    2    1    1    2    2
[139,]    1    4    1    2    4    2
[140,]    2    4    2    4    3    2
[141,]    2    2    2    2    3    2
[142,]    1    1    1    2    3    3
[143,]    2    4    2    2    3    1
[144,]    3    3    2    2    2    2
[145,]    2    2    2    2    3    3
[146,]    1    4    3    2    2    1
[147,]    3    3    2    2    2    2
[148,]    1    4    2    1    2    2
[149,]    3    2    3    3    3    2
[150,]    1    2    1    3    4    4
[151,]    1    1    1    2    3    1
[152,]    1    2    4    3    2    2
[153,]    2    3    2    2    2    2
[154,]    1    1    1    2    3    3
[155,]    2    2    2    2    2    2
[156,]    1    3    1    2    1    2
[157,]    3    2    2    4    4    3
[158,]    1    1    1    2    3    4
[159,]    2    4    1    2    2    1
[160,]    1    3    2    1    1    1
[161,]    2    2    2    2    3    2
[162,]    2    3    2    2    3    2
[163,]    4    3    2    2    3    2
[164,]    2    2    2    2    3    2
[165,]    2    2    2    2    2    2
[166,]    2    1    1    1    1    1
[167,]    2    4    2    3    3    2
[168,]    1    2    2    2    2    2
[169,]    3    3    3    2    2    2
[170,]    1    2    1    1    4    2
[171,]    1    2    1    3    3    3
[172,]    1    2    2    2    4    2
[173,]    2    4    3    4    4    2
[174,]    2    2    1    3    3    4
[175,]    3    4    3    2    2    2
[176,]    2    2    2    2    2    2
[177,]    4    3    2    1    1    2
[178,]    3    3    2    1    2    2
[179,]    3    4    2    3    3    2
[180,]    4    4    3    2    2    2
[181,]    1    1    2    2    3    2
[182,]    3    3    2    1    2    1
[183,]    2    4    2    2    2    2
[184,]    2    3    2    2    3    2
[185,]    4    4    3    2    3    3
[186,]    2    2    2    3    4    3
[187,]    1    1    1    1    3    2
[188,]    2    2    2    2    3    2
[189,]    2    2    2    2    2    2
[190,]    2    2    2    2    4    3
[191,]    3    2    2    3    4    3
[192,]    2    3    2    2    2    2
[193,]    2    2    2    2    2    2
[194,]    1    2    2    3    4    2
[195,]    2    2    2    2    3    3
[196,]    3    3    2    2    1    2
[197,]    2    3    2    1    2    2
[198,]    1    2    2    2    2    2
[199,]    2    3    2    2    2    2
[200,]    2    2    2    1    2    2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinceiling.testceiling1
#argv <- list(1001);ceiling(argv[[1]]);
[1] 1001

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinceiling.testceiling2
#argv <- list(13990.84);ceiling(argv[[1]]);
[1] 13991

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinceiling.testceiling3
#argv <- list(c(1, 4.5, 8, 11.5, 15));ceiling(argv[[1]]);
[1]  1  5  8 12 15

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinceiling.testceiling4
#argv <- list(c(1, 5.5, 10.5, 15.5, 20));ceiling(argv[[1]]);
[1]  1  6 11 16 20

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinceiling.testceiling5
#argv <- list(-0.698970004336019);ceiling(argv[[1]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinceiling.testceiling9
#argv <- list(c(-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3,     3.5, 4));do.call('ceiling', argv)
 [1] -2 -1 -1  0  0  1  1  2  2  3  3  4  4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincharacter.testcharacter1
#argv <- structure(list(length = 0L), .Names = 'length');do.call('character', argv)
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass10
#argv <- list(structure(list(time = 1:10, y = c(1, 1.4142135623731, 1.73205080756888, 2, 2.23606797749979, 2.44948974278318, 2.64575131106459, 2.82842712474619, 3, 3.16227766016838)), .Names = c('time', 'y'), row.names = c(NA, 10L), .S3Class = 'data.frame', date = structure(16045, class = 'Date'), class = structure('dataFrameD', package = '.GlobalEnv')));class(argv[[1]]);
[1] "dataFrameD"
attr(,"package")
[1] ".GlobalEnv"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass11
#argv <- list(structure(list(), .Names = character(0), row.names = integer(0), .S3Class = 'data.frame', class = structure('data.frame', package = 'methods')));class(argv[[1]]);
[1] "data.frame"
attr(,"package")
[1] "methods"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass13
#argv <- list(structure(c(3.1, 6.695, 8.14, 7.50090909091, 8.95, 9.26), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = c('summaryDefault', 'table')));class(argv[[1]]);
[1] "summaryDefault" "table"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass14
#argv <- list(complex(0));class(argv[[1]]);
[1] "complex"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass15
#argv <- list(structure(c(-0.00225540511921, -0.00045867962383, -8.86739505379e-06, -1.96554854754e-06, 0.000402346479421, 0.00193962597167), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = c('summaryDefault', 'table')));class(argv[[1]]);
[1] "summaryDefault" "table"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass16
#argv <- list(c(FALSE, FALSE, FALSE, NA, NA, TRUE, TRUE, TRUE, NA, NA, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));class(argv[[1]]);
[1] "logical"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass17
#argv <- list(c(-10, -10, -10, NA, NA, 150, 170, 180, NA, NA, 310, 330, 340, 350, 370, 380));class(argv[[1]]);
[1] "numeric"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass19
#argv <- list(structure(c(0.5, 0, 0.5, 0, 0, 0.5, 0, 0, 0.0740740740740741, 0, 0, 0.5, 1, 0, 0, 0.5, 1, 0.5), unit = c('char', 'grobheight', 'char', 'grobheight', 'grobheight', 'char', 'mm', 'lines', 'null', 'mm', 'mm', 'char', 'grobheight', 'char', 'grobheight', 'char', 'grobheight', 'char'), valid.unit = c(18L, 22L, 18L, 22L, 22L, 18L, 7L, 3L, 5L, 7L, 7L, 18L, 22L, 18L, 22L, 18L, 22L, 18L), data = list(NULL, structure(list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'),     just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'GRID.text.1', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL, structure(list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL, vjust = NULL,     rot = 0, check.overlap = FALSE, name = 'GRID.text.2', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), structure(list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'GRID.text.3',     gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL, NULL, NULL, NULL, NULL, NULL, NULL, structure(list(label = 'Column', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'plot_01.xlab',     gp = structure(list(fontface = 1, alpha = 1, cex = 1, col = '#000000', lineheight = 1, font = 1L), .Names = c('fontface', 'alpha', 'cex', 'col', 'lineheight', 'font'), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL, structure(list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'),     just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'GRID.text.5', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL, structure(list(label = 'Dimensions: 4 x 54', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL,     vjust = NULL, rot = 0, check.overlap = FALSE, name = 'plot_01.sub', gp = structure(list(fontface = 2, alpha = 1, cex = 1, col = '#000000', lineheight = 1, font = 2L), .Names = c('fontface', 'alpha', 'cex', 'col', 'lineheight', 'font'), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL), class = 'unit'));class(argv[[1]]);
[1] "unit"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass2
#argv <- list(structure(c(1, 0, 0, 0, 1, 0, 0, 0, 1), .Dim = c(3L, 3L), class = structure('mmat2', package = '.GlobalEnv')));class(argv[[1]]);
[1] "mmat2"
attr(,"package")
[1] ".GlobalEnv"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass22
#argv <- list(c(17, 289, 4913, 83521, 1419857, 24137569, 410338673, 6975757441, 118587876497, 2015993900449, 34271896307633, 582622237229761, 9904578032905936, 168377826559400928, 2862423051509815808, 48661191875666870272, 8.27240261886337e+20, 1.40630844520677e+22, 2.39072435685151e+23, 4.06423140664757e+24, 6.90919339130087e+25, 1.17456287652115e+27, 1.99675689008595e+28, 3.39448671314612e+29, 5.7706274123484e+30, 9.81006660099228e+31, 1.66771132216869e+33, 2.83510924768677e+34, 4.81968572106751e+35, 8.19346572581477e+36, 1.39288917338851e+38, 2.36791159476047e+39, 4.02544971109279e+40, 6.84326450885775e+41, 1.16335496650582e+43, 1.97770344305989e+44, 3.36209585320181e+45, 5.71556295044308e+46, 9.71645701575324e+47, 1.65179769267805e+49, 2.80805607755269e+50, 4.77369533183957e+51, 8.11528206412726e+52, 1.37959795090163e+54, 2.34531651653278e+55, 3.98703807810572e+56, 6.77796473277973e+57, 1.15225400457255e+59, 1.95883180777334e+60, 3.33001407321468e+61, 5.66102392446496e+62, 9.62374067159043e+63, 1.63603591417037e+65, 2.78126105408963e+66, 4.72814379195238e+67, 8.03784444631904e+68, 1.36643355587424e+70, 2.3229370449862e+71, 3.94899297647655e+72, 6.71328806001013e+73, 1.14125897020172e+75, 1.94014024934293e+76, 3.29823842388298e+77, 5.60700532060106e+78, 9.5319090450218e+79, 1.62042453765371e+81, 2.7547217140113e+82, 4.68302691381921e+83, 7.96114575349266e+84, 1.35339477809375e+86, 2.30077112275938e+87, 3.91131090869094e+88, 6.6492285447746e+89, 1.13036885261168e+91, 1.92162704943986e+92, 3.26676598404776e+93, 5.5535021728812e+94, 9.44095369389803e+95, 1.60496212796267e+97, 2.72843561753653e+98, 4.6383405498121e+99, 7.88517893468058e+100, 1.3404804188957e+102, 2.27881671212269e+103, 3.87398841060857e+104, 6.58578029803456e+105, 1.11958265066588e+107, 1.90329050613199e+108, 3.23559386042438e+109, 5.50050956272145e+110, 9.35086625662646e+111, 1.5896472636265e+113, 2.70240034816505e+114, 4.59408059188058e+115, 7.80993700619699e+116, 1.32768929105349e+118, 2.25707179479093e+119, 3.83702205114458e+120, 6.52293748694579e+121, 1.10889937278078e+123, 5.5535021728812e+94, 3.33001407321468e+61, 1.95883180777334e+60, 1.15225400457255e+59, 6.77796473277973e+57, 3.98703807810572e+56, 2.34531651653278e+55, 1.37959795090163e+54, 8.11528206412726e+52, 4.77369533183957e+51, 2.80805607755269e+50, 1.65179769267805e+49, 2015993900449));class(argv[[1]]);
[1] "numeric"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass24
#argv <- list(c(-0.31833672642477-1.38507061859438i, 1.42379885362755+0.0383231810219i, 0.405090858049187-0.763030162361974i, -0.995386565684023+0.212306135525839i, -0.95881778764026+1.42553796686779i, -0.918087896319951+0.744479822333976i, 0.15096960188161+0.70022940298623i, 1.2230687888662-0.22935461345173i, 0.868824288637794+0.197093861895352i, 1.04248536490429+1.20715377387226i));class(argv[[1]]);
[1] "complex"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass28
#argv <- list(c(1.1+0i, NA, 3+0i));class(argv[[1]]);
[1] "complex"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass3
#argv <- list(structure(3.14159265358979, comment = 'Start with pi', class = structure('num1', package = '.GlobalEnv')));class(argv[[1]]);
[1] "num1"
attr(,"package")
[1] ".GlobalEnv"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass31
#argv <- list(c(71.128, 69.70625, 70.9566666666667, 71.7, 71.435,     72.5766666666667, 70.6916666666667));do.call('class', argv)
[1] "numeric"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass32
#argv <- list(structure(c(0.909297426825682, 0.141120008059867,     -0.756802495307928), class = c('foo', 'bar')));do.call('class', argv)
[1] "foo" "bar"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass4
#argv <- list(structure(c(1+1i, 2+1.4142135623731i, 3+1.73205080756888i, 4+2i, 5+2.23606797749979i, 6+2.44948974278318i, 7+2.64575131106459i, 8+2.82842712474619i, 9+3i, 10+3.1622776601684i), id = character(0), class = structure('withId', package = '.GlobalEnv')));class(argv[[1]]);
[1] "withId"
attr(,"package")
[1] ".GlobalEnv"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass6
#argv <- list(structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = TRUE, xscale = c(-15.89, 356.89), yscale = c(0.683750615306643, 5.8340977374556), angle = 0, layout = NULL, layout.pos.row = c(21L, 21L), layout.pos.col = c(17L, 17L), valid.just = c(0.5, 0.5), valid.pos.row = c(21L, 21L), valid.pos.col = c(17L, 17L), name = 'plot_01.panel.3.1.vp'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport'));class(argv[[1]]);
[1] "viewport"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass7
#argv <- list(c(NA, '2', '3'));class(argv[[1]]);
[1] "character"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass8
#argv <- list(c(325, 257, 303, 315, 380, 153, 263, 242, 206, 344, 258));class(argv[[1]]);
[1] "numeric"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclass.testclass9
#argv <- list(structure(list(message = 'Choosing method ‘sparseMatrix#ANY’ from 2 ambiguous possibilities', call = NULL), .Names = c('message', 'call'), class = c('simpleCondition', 'condition')));class(argv[[1]]);
[1] "simpleCondition" "condition"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclassassign.testclassassign12
#argv <- list(structure(1, class = 'bar'), value = 'bar');`class<-`(argv[[1]],argv[[2]]);
[1] 1
attr(,"class")
[1] "bar"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinclassassign.testclassassign4
#argv <- list(structure(c(8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14), class = 'anyC'), value = 'anyC');`class<-`(argv[[1]],argv[[2]]);
  [1]  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8
 [26] 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10
 [51] 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12
 [76] 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14
[101]  8 10 12 14  8 10 12 14
attr(,"class")
[1] "anyC"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolMeans.testcolMeans2
#argv <- list(structure(c(135L, 49L, 32L, NA, 64L, 40L, 77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L, 79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L, 59L), .Dim = c(31L, 1L)), 31, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 59.11538

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolMeans.testcolMeans3
#argv <- list(structure(c(2, 1, 0, 1, 0, NA, NA, NA, 0), .Dim = c(3L, 3L)), 3, 3, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1.0 0.5 0.0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolMeans.testcolMeans4
#argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), 0, 0, FALSE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolMeans.testcolMeans5
#argv <- list(structure(c(3, 3, NA, 3, 3, 3, 3, 3, 4, 3, NA, NA, 2, 3, 4, 5), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))), 8, 2, FALSE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] NA NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolMeans.testcolMeans6
#argv <- list(structure(c(2.72365184362824, -0.796449881281511, 0.796148249055565, 2.02271745300814, 1.2802770548002, 1.337056204255, 2.6107240701292, 2.10828628469836, 1.43875587381801, 0.595316954266145, 3.49563715531476, 1.48558049063486, 1.41226464164167, 2.44508400241911, 2.57984360481665, -1.20772288776711, 2.43688378444644, 0.533076425061003, 1.3034273968671, 3.70362282204711, 0.608593870458723, 0.953140512120224, 0.386257122548769, 3.75339780206139, 3.42482460204159, 0.619548124388308, 3.14887764228466, 0.751148471471006, 1.87137783412956, 1.62046400462005, 0.94345287218966, 1.64506447351138, 1.30606946576658, 2.45886447346843, 2.03431588373773, -0.338520676288604, 2.03487908340323, 1.29252851374035, 1.2267540180234, 2.05222753374982, 2.83569182599169, 3.48408642621763, 2.39258208808217, 1.92637187747015, 1.9464722888473, 0.936987622444041, -0.457825141151114, 0.770998483524033, 1.80682914026242, 0.916590155958594, 2.78096073652237, 1.55750387883765, 3.3880545417157, 3.65182127019008, 1.46303726963845, 2.58757002961928, 2.44326477189276, 0.94225036142597, 1.29219317072567, 2.94893881867, 1.24384829814308, 1.84885702049451, 1.32523566412607, 1.28973308890195, 0.395997063065922, 1.22892077218378, 1.7220093913143, 0.805646559888977, 1.01315020534677, 1.31726023805076, 1.72638291442835, 1.7933922500199, 1.62417301864782, 2.84632954278294, 1.06390349068226, 0.393286798351562, 2.85644316208756, 1.17640470313741, 0.528983054741685, 1.96126284937392, 0.917057889286139, 2.45214192885654, 2.46901056075969, 0.964752028993787, 1.15564656732576, 1.8050377493702, 3.92150679994132, 1.89242778597682, 1.79539660063946, 3.11975967552643, 3.60233448863085, 1.28811938153997, 2.49044833125605, 2.82723855540917, 0.488353198794268), .Dim = c(95L, 1L)), 95, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1.716445

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolMeans.testcolMeans7
#argv <- list(structure(FALSE, .Dim = c(1L, 1L)), 1, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolMeans.testcolMeans9
#argv <- list(structure(c(NA, 17.4716236802524, 0.424429400003, -2.45474630431729, -8.6855922903657, -11.7956139807344, -8.08147081196715, -13.3123167980156, -1.24650334752019, 21.281002075072, -5.32311940332657, 0.621869751489083, -19.2022951076469, -0.543162784063959, NA, NA, 15.344649382745, -9.74060313555005, 0.149375174081257, -5.85062482591874, -6.90563567110309, -9.96064651628744, 5.6326723568001, -8.78481137542338, -6.01565736147178, -15.543162784064, 2.34681552556734, -13.2465033475202, -3.82901961529671, 1.5226506664314, NA, -5.9777558474085, 22.7534966524798, 15.5010454558094, 4.13857256877024, -11.6855922903657, 11.6768805966734, -7.38893285382193, 10.8527157375375, -11.3889328538219, 14.1493751740813, -0.388932853821931, 13.0835617235859, -1.98225172690947, 5.96273742790618, -1.50975714950164, -1.38893285382193, 9.90772658272184, 7.3144077096343, -12.9822517269095, 2.02855087840155, -4.7956139807344, 3.14937517408126, -10.3231194033266, -2.25730595283121, 2.56685890630474, 4.27019946976097, 5.14937517408126, 0.0285508784015471, 5.85271573753749, 6.73189144185778, -6.38893285382193, 0.0285508784015471, -3.14728426246251, 15.1493751740813, 13.7869022870421, -7.27891116345324, 9.61106714617807, 4.84191313222647, -3.98225172690947, -6.38893285382193, 13.0285508784015, 5.13857256877024, -8.50975714950164, -0.619778839870337, -3.97144912159845, 23.1493751740813, -2.80641658604541, -1.03726257209382, 2.25939686444995, 4.25939686444995, -4.38893285382193, 6.38022116012966, -4.74060313555005, 2.02855087840155, -15.7956139807344, 8.21518862457662, -12.0264599667828, -2.1364816571515, 5.8635183428485, -14.729800530239, 4.80850749766416, -11.7848113754234, 9.45683721593604, -15.2573059528312, 5.28100207507198, 12.8635183428485, 6.50104545580937, 1.55605630099372, -7.44394369900628, 9.9735400332172, -11.2681085581422, 7.44603461062503, -8.14728426246251, -1.72980053023903, -3.90563567110309, 4.56685890630474, -5.37813024851092, -1.25730595283121, 10.7426940471688, NA, NA, 6.24343998511081, -21.9164382764141, -6.1364816571515, -15.8398222206077, -4.12567905184048, -7.94984391097642, -6.4773493335686, -5.65318447443266), .Dim = c(120L, 1L)), 120, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] -0.4536633

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolSums.testcolSums1
#argv <- list(structure(c(365, 365, 365, 366, 1, 0), .Dim = c(3L, 2L)), 3, 2, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1095  367

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolSums.testcolSums2
#argv <- list(structure(c(1L, 0L, 0L, 0L, 2L, 0L, 0L, 0L, 3L), .Dim = c(3L, 3L)), 3, 3, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1 2 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolSums.testcolSums3
#argv <- list(structure(c(5, 29, 14, 16, 15, 54, 14, 10, 20, 84, 17, 94, 68, 119, 26, 7), .Dim = c(4L, 4L), .Dimnames = structure(list(Hair = c('Black', 'Brown', 'Red', 'Blond'), Eye = c('Green', 'Hazel', 'Blue', 'Brown')), .Names = c('Hair', 'Eye'))), 4, 4, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1]  64  93 215 220

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolSums.testcolSums4
#argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, TRUE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1]  0  0  0  0  0  0  0  0  7  7 56 28  3  3 24 12

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolSums.testcolSums5
#argv <- list(structure(cim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1]  0  0  0  0  0  0  0  0  1 NA  2  2  0 NA  1  1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolSums.testcolSums6
#argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), 0, 0, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolSums.testcolSums9
#argv <- list(structure(c(0, 0, 0, 0, 0, -1.43884556914512e-134, 0, 0, 0, -7.95468296571581e-252, 1.76099882882167e-260, 0, -9.38724727098368e-323, -0.738228974836154, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.84657791618065e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.05931985100232e-174, 0, -3.41789378681991e-150, 0, 0, 0, 0, -1.07225492686949e-10, 0, 1.65068934474523e-67, 0, -6.49830035279282e-307, 0, 5.83184963977238e-90, 0, -9.81722610183938e-287, 6.25336419454196e-54, 0, 0, 0, -1.72840591500382e-274, 1.22894687952101e-13, 0.660132850077566, 0, 0, 7.79918925397516e-200, -2.73162827952857e-178, 1.32195942051179e-41, 0, 0, 0, 0, 2.036057023761e-45, -3.40425060445074e-186, 1.59974269220388e-26, 0, 6.67054294775317e-124, 0.158503117506202, 0, 0, 0, 0, 0, 0, 3.42455724859116e-97, 0, 0, -2.70246891320217e-272, 0, 0, -3.50562438899045e-06, 0, 0, 1.35101732326608e-274, 0, 0, 0, 0, 0, 0, 0, 7.24580295957621e-65, 0, -3.54887341172294e-149, 0, 0, 0, 0, 0, 0, 0, 0, 1.77584594753563e-133, 0, 0, 0, 2.88385135688311e-250, 1.44299633616158e-259, 0, 1.56124744085834e-321, 1.63995835868977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.01050064173383e-122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.64868196850938e-172, 0, 6.28699823828692e-149, 0, 0, 0, 0, 5.0552295590188e-09, 0, 2.30420733561404e-66, 0, 7.0823279075443e-306, 0, 2.05009901740696e-88, 0, 7.41800724282869e-285, 7.18347043784483e-53, 0, 0, 0, 1.04251223075649e-273, 9.75816316577433e-13, 4.29519957592147, 0, 0, 1.33541454912682e-198, 2.34606233784019e-176, 8.38236726536896e-41, 0, 0, 0, 0, 1.35710537434521e-43, 1.15710503176511e-185, 1.25601735272233e-25, 0, 4.46811655846376e-123, 4.4196641795634, 0, 0, 0, 0, 0, 0, 3.74179015251531e-93, 0, 0, 3.62662047836582e-271, 0, 0, 1.26220330674453e-05, 0, 0, 1.72715562657338e-273, 0, 0, 0, 0, 0, 0, 0, 5.46372806810809e-64, 0, 2.47081972486962e-148, 0, 0, 0), .Dim = c(100L, 2L)), 100, 2, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1]  0.08040349 10.35483474

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolnames.testcolnames1
#argv <- structure(list(x = structure(c(1.00000000000001, 2, 3,     4, 5, 6, 7, 8, 9, 10, 0.999999999999998, 4, 9, 16, 25, 36,     49, 64, 81, 100, 5.39416105805496e-14, 2, 6, 12, 20, 30,     42, 56, 72, 90, 1, 0.999999999999999, 1, 1, 1, 1, 1, 1, 1,     1), .Dim = c(10L, 4L), .Dimnames = list(NULL, c('', 'B',     'C', 'D')))), .Names = 'x');do.call('colnames', argv)
[1] ""  "B" "C" "D"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolnames.testcolnames2
#argv <- structure(list(x = structure(list(x = 1:6, CC = 11:16,     f = structure(c(1L, 1L, 2L, 2L, 3L, 3L), .Label = c('1',         '2', '3'), class = 'factor')), .Names = c('x', 'CC',     'f'), row.names = c(NA, -6L), class = 'data.frame')), .Names = 'x');do.call('colnames', argv)
[1] "x"  "CC" "f"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincolnamesassign_.testcolnamesassign_1
#argv <- structure(list(x = structure(c(0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0), .Dim = c(200L, 5L)), value = c('X1', 'X2', 'X3',     'X4', 'X5')), .Names = c('x', 'value'));do.call('colnames<-', argv)
       X1 X2 X3 X4 X5
  [1,]  0  0  0  0  0
  [2,]  0  0  0  0  0
  [3,]  0  0  0  0  0
  [4,]  0  0  0  0  0
  [5,]  0  0  0  0  0
  [6,]  0  0  0  0  0
  [7,]  0  0  0  0  0
  [8,]  0  0  0  0  0
  [9,]  0  0  0  0  0
 [10,]  0  0  0  0  0
 [11,]  0  0  0  0  0
 [12,]  0  0  0  0  0
 [13,]  0  0  0  0  0
 [14,]  0  0  0  0  0
 [15,]  0  0  0  0  0
 [16,]  0  0  0  0  0
 [17,]  0  0  0  0  0
 [18,]  0  0  0  0  0
 [19,]  0  0  0  0  0
 [20,]  0  0  0  0  0
 [21,]  0  0  0  0  0
 [22,]  0  0  0  0  0
 [23,]  0  0  0  0  0
 [24,]  0  0  0  0  0
 [25,]  0  0  0  0  0
 [26,]  0  0  0  0  0
 [27,]  0  0  0  0  0
 [28,]  0  0  0  0  0
 [29,]  0  0  0  0  0
 [30,]  0  0  0  0  0
 [31,]  0  0  0  0  0
 [32,]  0  0  0  0  0
 [33,]  0  0  0  0  0
 [34,]  0  0  0  0  0
 [35,]  0  0  0  0  0
 [36,]  0  0  0  0  0
 [37,]  0  0  0  0  0
 [38,]  0  0  0  0  0
 [39,]  0  0  0  0  0
 [40,]  0  0  0  0  0
 [41,]  0  0  0  0  0
 [42,]  0  0  0  0  0
 [43,]  0  0  0  0  0
 [44,]  0  0  0  0  0
 [45,]  0  0  0  0  0
 [46,]  0  0  0  0  0
 [47,]  0  0  0  0  0
 [48,]  0  0  0  0  0
 [49,]  0  0  0  0  0
 [50,]  0  0  0  0  0
 [51,]  0  0  0  0  0
 [52,]  0  0  0  0  0
 [53,]  0  0  0  0  0
 [54,]  0  0  0  0  0
 [55,]  0  0  0  0  0
 [56,]  0  0  0  0  0
 [57,]  0  0  0  0  0
 [58,]  0  0  0  0  0
 [59,]  0  0  0  0  0
 [60,]  0  0  0  0  0
 [61,]  0  0  0  0  0
 [62,]  0  0  0  0  0
 [63,]  0  0  0  0  0
 [64,]  0  0  0  0  0
 [65,]  0  0  0  0  0
 [66,]  0  0  0  0  0
 [67,]  0  0  0  0  0
 [68,]  0  0  0  0  0
 [69,]  0  0  0  0  0
 [70,]  0  0  0  0  0
 [71,]  0  0  0  0  0
 [72,]  0  0  0  0  0
 [73,]  0  0  0  0  0
 [74,]  0  0  0  0  0
 [75,]  0  0  0  0  0
 [76,]  0  0  0  0  0
 [77,]  0  0  0  0  0
 [78,]  0  0  0  0  0
 [79,]  0  0  0  0  0
 [80,]  0  0  0  0  0
 [81,]  0  0  0  0  0
 [82,]  0  0  0  0  0
 [83,]  0  0  0  0  0
 [84,]  0  0  0  0  0
 [85,]  0  0  0  0  0
 [86,]  0  0  0  0  0
 [87,]  0  0  0  0  0
 [88,]  0  0  0  0  0
 [89,]  0  0  0  0  0
 [90,]  0  0  0  0  0
 [91,]  0  0  0  0  0
 [92,]  0  0  0  0  0
 [93,]  0  0  0  0  0
 [94,]  0  0  0  0  0
 [95,]  0  0  0  0  0
 [96,]  0  0  0  0  0
 [97,]  0  0  0  0  0
 [98,]  0  0  0  0  0
 [99,]  0  0  0  0  0
[100,]  0  0  0  0  0
[101,]  0  0  0  0  0
[102,]  0  0  0  0  0
[103,]  0  0  0  0  0
[104,]  0  0  0  0  0
[105,]  0  0  0  0  0
[106,]  0  0  0  0  0
[107,]  0  0  0  0  0
[108,]  0  0  0  0  0
[109,]  0  0  0  0  0
[110,]  0  0  0  0  0
[111,]  0  0  0  0  0
[112,]  0  0  0  0  0
[113,]  0  0  0  0  0
[114,]  0  0  0  0  0
[115,]  0  0  0  0  0
[116,]  0  0  0  0  0
[117,]  0  0  0  0  0
[118,]  0  0  0  0  0
[119,]  0  0  0  0  0
[120,]  0  0  0  0  0
[121,]  0  0  0  0  0
[122,]  0  0  0  0  0
[123,]  0  0  0  0  0
[124,]  0  0  0  0  0
[125,]  0  0  0  0  0
[126,]  0  0  0  0  0
[127,]  0  0  0  0  0
[128,]  0  0  0  0  0
[129,]  0  0  0  0  0
[130,]  0  0  0  0  0
[131,]  0  0  0  0  0
[132,]  0  0  0  0  0
[133,]  0  0  0  0  0
[134,]  0  0  0  0  0
[135,]  0  0  0  0  0
[136,]  0  0  0  0  0
[137,]  0  0  0  0  0
[138,]  0  0  0  0  0
[139,]  0  0  0  0  0
[140,]  0  0  0  0  0
[141,]  0  0  0  0  0
[142,]  0  0  0  0  0
[143,]  0  0  0  0  0
[144,]  0  0  0  0  0
[145,]  0  0  0  0  0
[146,]  0  0  0  0  0
[147,]  0  0  0  0  0
[148,]  0  0  0  0  0
[149,]  0  0  0  0  0
[150,]  0  0  0  0  0
[151,]  0  0  0  0  0
[152,]  0  0  0  0  0
[153,]  0  0  0  0  0
[154,]  0  0  0  0  0
[155,]  0  0  0  0  0
[156,]  0  0  0  0  0
[157,]  0  0  0  0  0
[158,]  0  0  0  0  0
[159,]  0  0  0  0  0
[160,]  0  0  0  0  0
[161,]  0  0  0  0  0
[162,]  0  0  0  0  0
[163,]  0  0  0  0  0
[164,]  0  0  0  0  0
[165,]  0  0  0  0  0
[166,]  0  0  0  0  0
[167,]  0  0  0  0  0
[168,]  0  0  0  0  0
[169,]  0  0  0  0  0
[170,]  0  0  0  0  0
[171,]  0  0  0  0  0
[172,]  0  0  0  0  0
[173,]  0  0  0  0  0
[174,]  0  0  0  0  0
[175,]  0  0  0  0  0
[176,]  0  0  0  0  0
[177,]  0  0  0  0  0
[178,]  0  0  0  0  0
[179,]  0  0  0  0  0
[180,]  0  0  0  0  0
[181,]  0  0  0  0  0
[182,]  0  0  0  0  0
[183,]  0  0  0  0  0
[184,]  0  0  0  0  0
[185,]  0  0  0  0  0
[186,]  0  0  0  0  0
[187,]  0  0  0  0  0
[188,]  0  0  0  0  0
[189,]  0  0  0  0  0
[190,]  0  0  0  0  0
[191,]  0  0  0  0  0
[192,]  0  0  0  0  0
[193,]  0  0  0  0  0
[194,]  0  0  0  0  0
[195,]  0  0  0  0  0
[196,]  0  0  0  0  0
[197,]  0  0  0  0  0
[198,]  0  0  0  0  0
[199,]  0  0  0  0  0
[200,]  0  0  0  0  0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincrossprod.testcrossprod3
#argv <- list(c(1.078125, 0.603125, -0.90625, 0.984375, 1.359375, -2.21875, -0.5, 1.2, 0.5), c(3.1859635002998, 2.5309880107589, 0.0716489644728567, 1.23651898905887, 1.28393932315826, -0.671528370670039, 0.873486219199556, 1.05088299688189, 0.0536562654335257)); .Internal(crossprod(argv[[1]], argv[[2]]))
         [,1]
[1,] 10.20009

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincummax.testcummax1
#argv <- list(c(3L, 2L, 1L, 2L, 1L, 0L, 4L, 3L, 2L));cummax(argv[[1]]);
[1] 3 3 3 3 3 3 4 4 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincummax.testcummax4
#argv <- list(FALSE);cummax(argv[[1]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincummin.testcummin1
#argv <- list(c(3L, 2L, 1L, 2L, 1L, 0L, 4L, 3L, 2L));cummin(argv[[1]]);
[1] 3 2 1 1 1 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincummin.testcummin8
#argv <- list(FALSE);cummin(argv[[1]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumprod.testcumprod10
#argv <- list(c(0.982149602642989, 0.91866776738084, 0.859369083800704, 0.921182928974104));cumprod(argv[[1]]);
[1] 0.9821496 0.9022692 0.7753822 0.7142689

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumprod.testcumprod6
#argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));cumprod(argv[[1]]);
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumprod.testcumprod9
#argv <- list(character(0));cumprod(argv[[1]]);
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumsum.testcumsum1
#argv <- list(c(9L, 5L, 13L));cumsum(argv[[1]]);
[1]  9 14 27

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumsum.testcumsum11
#argv <- list(c(8L, 2L, 12L, 6L, 4L, 5L, 13L));cumsum(argv[[1]]);
[1]  8 10 22 28 32 37 50

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumsum.testcumsum12
#argv <- list(c(0.535137960496205, -0.371944875163495, -1.02554224849711, -0.582401674605252, 0.342888392897331, -0.450934647056651, 0.51423012023069, -0.334338052169782, -0.105559908794475, -0.730509672807828, 1.9050435849087, 0.332621731470394, 0.230633640499451, -1.69186241488407, 0.659791899549327, -1.02362358887971, -0.891521574354298, 0.918341171021649, -0.45270064650823, -1.74837228000318, 1.76990410988936, -2.37740692539252, 0.572811529859585, 1.01724924908461, -0.630967866660535, 0.444287051411554, 0.439130388388555, 1.04062315291451, 0.484099387952522, -0.244883779092525, 0.915992057940211, 0.800622356509766, -0.936569034135793, -1.40078743399573, 0.160277539993178, -0.273962374775183, -0.985539112562296, 0.0839306795150329, -1.31999652648691, 0.161226351326199, -0.62492838754192, 0.957164274192481, 2.42448914116153, -0.915979243686792, 1.05766417094298, 0.825149727768283, -0.0701942243053587, -0.453646374057015, 1.57530770683748, -2.00545781823625, -0.643194791593663, -1.43684344365778, 1.39531343894608, -0.190703432644857, -0.524671199469671, 3.18404447406633, -0.0500372678876282, -0.443749311866524, 0.299865250136145, -1.56842462075497, 0.490302642672068, -0.0961632010799668, 0.468525122530146, -0.982370635937854, -1.02298384214794, -0.693414663276185, -0.767989573092782, 1.29904996668359, 1.57914556180809, -0.156891953039067, -0.35893656058468, -0.329038830421669, 0.0692364778530165, 0.0969042337010548, 0.290034387765571, -0.746678941046256, -0.846896388820319, 1.19707766374608, -0.548627361103323, 0.303045695225451, -0.056970533803332, -0.957849392150669, 0.591061909411507, 0.173104873492955, 1.39978335621251, 0.117459584626988, -0.331545758200853, 0.278294913305364, -1.18559164903534, -0.835894053393597, 0.510273251139431, -0.333120901223949, -0.0659609463524635, -0.11522170942195, -0.650512618774529, -2.01868865908242, 0.348834970176592, 0.761639507646859, -1.28871623535013, 1.48240271845861));cumsum(argv[[1]]);
  [1]  0.53513796  0.16319309 -0.86234916 -1.44475084 -1.10186244 -1.55279709
  [7] -1.03856697 -1.37290502 -1.47846493 -2.20897461 -0.30393102  0.02869071
 [13]  0.25932435 -1.43253806 -0.77274616 -1.79636975 -2.68789133 -1.76955016
 [19] -2.22225080 -3.97062308 -2.20071897 -4.57812590 -4.00531437 -2.98806512
 [25] -3.61903299 -3.17474593 -2.73561555 -1.69499239 -1.21089301 -1.45577678
 [31] -0.53978473  0.26083763 -0.67573140 -2.07651884 -1.91624130 -2.19020367
 [37] -3.17574279 -3.09181211 -4.41180863 -4.25058228 -4.87551067 -3.91834639
 [43] -1.49385725 -2.40983650 -1.35217233 -0.52702260 -0.59721682 -1.05086320
 [49]  0.52444451 -1.48101331 -2.12420810 -3.56105154 -2.16573810 -2.35644154
 [55] -2.88111274  0.30293174  0.25289447 -0.19085484  0.10901041 -1.45941421
 [61] -0.96911157 -1.06527477 -0.59674965 -1.57912028 -2.60210413 -3.29551879
 [67] -4.06350836 -2.76445840 -1.18531283 -1.34220479 -1.70114135 -2.03018018
 [73] -1.96094370 -1.86403947 -1.57400508 -2.32068402 -3.16758041 -1.97050275
 [79] -2.51913011 -2.21608441 -2.27305494 -3.23090434 -2.63984243 -2.46673755
 [85] -1.06695420 -0.94949461 -1.28104037 -1.00274546 -2.18833711 -3.02423116
 [91] -2.51395791 -2.84707881 -2.91303976 -3.02826147 -3.67877409 -5.69746274
 [97] -5.34862777 -4.58698827 -5.87570450 -4.39330178

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumsum.testcumsum13
#argv <- list(c(23L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, 15L, 15L, 15L, 15L, 15L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, -9L, -9L, -9L, -9L, -9L, -9L, -9L, -9L, -9L, -9L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, NA, NA, 3L, 3L, 3L, -19L, -19L, -19L, -19L, -19L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L));cumsum(argv[[1]]);
  [1]  23  34  45  56  67  78  89 100 111 122 133 143 153 163 173 183 193 203
 [19] 213 223 224 225 226 227 228 229 230 231 232 233 234 227 220 213 206 199
 [37] 192 185 178 171 164 157 150 143 136 129 144 159 174 189 204 200 196 192
 [55] 188 184 180 176 172 168 164 160 156 160 164 168 172 176 180 184 188 192
 [73] 196 187 178 169 160 151 142 133 124 115 106 113 120 127 134 141 148 155
 [91] 162 169 176 183 190 197 204 201 198 195 192 189 186 183 180 177 174 171
[109] 168 165 167 169 171 173 175 177 179 181 183 185 187 189 191 193 195 197
[127] 199 201 199 197 195 193 191 189 187 185 183 181 179 173 167 161 155 149
[145] 143 137 131 125 124 123 122 121 120 119 118 117 117 117 117 117 117 117
[163] 117 117 117 117 117 117 117 117 120 123 126 129 132 135 138 141 144  NA
[181]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA
[199]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA
[217]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA
[235]  NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumsum.testcumsum14
#argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE));cumsum(argv[[1]]);
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 2 2 2 2 2 3 4
[39] 4 4 4 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumsum.testcumsum15
#argv <- list(character(0));cumsum(argv[[1]]);
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltincumsum.testcumsum8
#argv <- list(c(6, 6, 5));cumsum(argv[[1]]);
[1]  6 12 17

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindataclass.testdataclass1
#argv <- structure(list(x = c('A', 'B', 'C', NA)), .Names = 'x');do.call('data.class', argv)
[1] "character"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindiff.testdiff1
#argv <- structure(list(x = c(0.467590032349108, 0.560407538764412)),     .Names = 'x');do.call('diff', argv)
[1] 0.09281751

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim14
#argv <- list(c(99, 1, 2, -3, 4, 3, NA));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim19
#argv <- list(structure(c(0, 87, 82, 75, 63, 50, 43, 32, 35, 60, 54, 55, 36, 39, 0, 0, 69, 57, 57, 51, 45, 37, 46, 39, 36, 24, 32, 23, 25, 32, 0, 32, 59, 74, 75, 60, 71, 61, 71, 57, 71, 68, 79, 73, 76, 71, 67, 75, 79, 62, 63, 57, 60, 49, 48, 52, 57, 62, 61, 66, 71, 62, 61, 57, 72, 83, 71, 78, 79, 71, 62, 74, 76, 64, 62, 57, 80, 73, 69, 69, 71, 64, 69, 62, 63, 46, 56, 44, 44, 52, 38, 46, 36, 49, 35, 44, 59, 65, 65, 56, 66, 53, 61, 52, 51, 48, 54, 49, 49, 61, 0, 0, 68, 44, 40, 27, 28, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts'));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim21
#argv <- list(c(0, 1, 131072, 129140163, 17179869184, 762939453125, 16926659444736, 232630513987207, 2251799813685248, 16677181699666568, 1e+17));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim24
#argv <- list(c(NA, NA, NA, NA, NA, 'Ripley', 'Venables & Smith'));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim25
#argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim27
#argv <- list(structure(c(-3.001e+155, -1.067e+107, -1.976e+62, -9.961e+152, -2.059e+23, 1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = 'table'));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim28
#argv <- list(structure(1395082220.91387, class = c('POSIXct', 'POSIXt')));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim30
#argv <- list(structure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6,     5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4,     5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7,     4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4,     5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7,     6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2,     5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5,     5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5,     5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6,     4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7,     7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2,     7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9,     6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9), Sepal.Width = c(3.5,     3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3, 3,     4, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3, 3.4,     3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3,     3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2,     3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9,     2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8,     3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5,     2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3,     2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2,     3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3, 2.8,     3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1, 3, 3.1, 3.1, 3.1,     3.2, 3.3, 3, 2.5, 3, 3.4, 3), Petal.Length = c(1.4, 1.4,     1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1,     1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6,     1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4,     1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4,     4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2,     4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3,     4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7,     4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1,     6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3,     5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7,     6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6,     5.5, 4.8, 5.4, 5.6, 5.1, 5.9, 5.7, 5.2, 5, 5.2, 5.4, 5.1),     Petal.Width = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2,         0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3,         0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2,         0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3,         0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5,         1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3,         1.4, 1.5, 1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4,         1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3,         1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1,         1.3, 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5,         2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2,         2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5,         1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 2.3, 2.5, 2.3,         1.9, 2, 2.3, 1.8), Species = structure(c(1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L), .Label = c('setosa', 'versicolor',         'virginica'), class = 'factor')), .Names = c('Sepal.Length',     'Sepal.Width', 'Petal.Length', 'Petal.Width', 'Species'),     row.names = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L,         12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L,         23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L,         34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L,         45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L,         56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L,         67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L,         78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L,         89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L,         100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L, 108L,         109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L,         118L, 119L, 120L, 121L, 122L, 123L, 124L, 125L, 126L,         127L, 128L, 129L, 130L, 131L, 132L, 133L, 134L, 135L,         136L, 137L, 138L, 139L, 140L, 141L, 142L, 144L, 145L,         146L, 147L, 148L, 149L, 150L), class = 'data.frame'));do.call('dim', argv)
[1] 149   5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim4
#argv <- list(structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor', contrasts = 'contr.treatment'));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim7
#argv <- list(c(2832L, 2836L, 2836L, 2833L, 2833L));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindim.testdim9
#argv <- list(c(NA, NA, '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R'));dim(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindimnames.testdimnames1
#argv <- list(structure(c(4L, 3L, 2L, 1L, 2L), .Label = c('0.6', '0.8', 'Area Examined', 'C2'), class = 'factor'));dimnames(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindimnames.testdimnames13
#argv <- list(structure(c(1.00000000141919, 1.00000000141919, 1.00000000141919, 1.00000000141919, 1.00000000141919, 1.00000003943081, 0.999999963407572, 1.00000003943081, 0.999999887384338, 0.999999887384338, 1.00000110375608, 0.999998671012596, 1.00000353649956, 0.999993805525628, 1.0000132674735, 0.999993805525628, 0.999954881629886, 1.00003272942137, 1.00018842500434, 1.00018842500434, 0.998942860340576, 0.998942860340576, 1.00143398966811, 1.00641624832317, 0.996451731013043, 0.996451731013043, 0.996451731013043, 0.956593661772521, 1.11602593873461, 0.956593661772521, 0.637729107848348, 1.2754582156967, 0, 5.10183286278678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.94013552497596, 3.76412613616612, 7.30291496677768, 14.1686451539795, 27.4890922070583, 53.3325661305982, 103.472408672272, 200.750502109581, 389.483191189237, 755.650202381997, 1466.06384193569, 2844.36258373045, 5518.44906703615, 10706.5393765913, 20772.1380196383, 40300.7636161042, 78188.9463884664, 151697.155845212, 294313.049942543, 571007.218374244, 1107831.42112573, 2149343.17429151, 4170017.13104157, 8090398.61389002, 15696470.311059, 30453280.1141634, 59083492.559312, 114629985.805561, 222397713.850125, 431481718.951103, 837133036.93017, 1624151587.48205, 3151074263.75394, 6113511302.83196, 11861040827.0204, 23012027206.5324, 44646452442.3573, 86620170794.9288, 168054874821.487, 326049245490.904, 632579733498.458, 1227290450360.24, 2381109863489.76, 4619676014664.61, 8962797733853.2, 17389042711398.3, 33737100912048.4, 65454549040847.5, 126990699928896, 246379175201939, 478009006423530, 927402279739830, 1799286146937082, 3490859083252747, 6772739936266967, 13140033736528760, 25493446790450148, 49460743386475336, 95960547120913696, 186176471759588736, 361207596842468544, 700791709787994368, 1359630936550262016, 2637868362903399936, 5117822236182886400, 9929268960054196224, 19264127970060791808, 37375020125774807040, 72512606973297393664, 1.40684287014036e+20, 2.7294659047997e+20, 5.29553390729944e+20, 1.02740538360686e+21, 1.99330573047582e+21, 3.86728338996836e+21, 7.50305404171627e+21, 1.45569421000466e+22, 2.82424412804067e+22, 5.47941653460064e+22, 1.06308109216746e+23, 2.06252146205912e+23, 4.00157124688985e+23, 7.76359070435321e+23, 1.50624186823988e+24, 2.9223134410489e+24, 5.66968428254813e+24, 1.09999562078627e+25, 2.13414063286361e+25, 4.14052220754691e+25, 8.03317433205064e+25, 1.55854473744651e+26, 3.02378808245954e+26, 5.8665589378512e+26, 1.1381919629553e+27, 2.20824672789753e+27, 4.28429802210817e+27, 8.31211904202342e+27, 1.6126637849175e+28, 3.12878639712715e+28, 6.07026977774323e+28, -1.69869203952449, -6.59138547321901, -19.1822720729097, -49.6216113971901, -120.340815686727, -280.172995242172, -634.16918707159, -1406.14196698717, -3069.11929954479, -6616.11942037001, -14119.7855095835, -29884.6887074354, -62812.0433183954, -131238.022320374, -272806.670597037, -564567.387887297, -1163795.8381508, -2390740.65186453, -4896047.65118829, -9998943.37840444, -20369271.0188994, -41401011.400719, -83974646.5467737, -170005771.46876, -343577337.860415, -693250079.585253, -1396729874.79437, -2810209917.82931, -5646909305.11788, -11333554766.2687, -22721587164.2141, -45504990439.9914, -91044782407.2254, -181991924578.337, -363473977210.141, -725337050553.89, -1446342551648.47, -2881941162160.65, -5738497521398.03, -11418936575319.8, -22708142164275.2, -45131432245311.6, -89645884346409.8, -177969941625094, -353133219287688, -700351348689777, -1388315183960579, -2750828581307066, -5448167546359572, -10785901526178346, -21344633431230288, -42223472396959864, -83494631109252016, -165047335865753888, -326144099824872960, -644268556323104896, -1272289222665704960, -2511719077288045568, -4957094068295422976, -9780441891046391808, -1.9291639356539e+19, -38041976425069862912, -74997019625717596160, -1.47813980522732e+20, -2.91260085798056e+20, -5.73777646929122e+20, -1.13007319819804e+21, -2.22521899361014e+21, -4.38071519248462e+21, -8.62235781974388e+21, -1.69675222834625e+22, -3.33829458816692e+22, -6.56669878434099e+22, -1.2914810481395e+23, -2.53950840681221e+23, -4.99268379737403e+23, -9.81393715458217e+23, -1.92876460684381e+24, -3.79004004348997e+24, -7.44626980645141e+24, -1.46273574426805e+25, -2.87294154406129e+25, -5.64187042306716e+25, -1.10778729236262e+26, -2.1748439290622e+26, -4.26913311245721e+26, -8.37900750248964e+26, -1.64432657900359e+27, -3.22646894393502e+27, -6.33012184999843e+27, -1.24177532894999e+28, -2.4356873672908e+28, -4.77692848222753e+28, -9.36754365223252e+28, -1.83676481719521e+29, -3.60108404728876e+29, -7.05936824038065e+29, -1.38373288587828e+30, -2.71202352823357e+30, -5.31484173040654e+30), .Dim = c(100L, 3L)));dimnames(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindimnames.testdimnames17
#argv <- list(structure(c(0, 0, 0, 0, 0, -1.43884556914512e-134, 0, 0, 0, -7.95468296571581e-252, 1.76099882882167e-260, 0, -9.38724727098368e-323, -0.738228974836154, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.84657791618065e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.05931985100232e-174, 0, -3.41789378681991e-150, 0, 0, 0, 0, -1.07225492686949e-10, 0, 1.65068934474523e-67, 0, -6.49830035279282e-307, 0, 5.83184963977238e-90, 0, -9.81722610183938e-287, 6.25336419454196e-54, 0, 0, 0, -1.72840591500382e-274, 1.22894687952101e-13, 0.660132850077566, 0, 0, 7.79918925397516e-200, -2.73162827952857e-178, 1.32195942051179e-41, 0, 0, 0, 0, 2.036057023761e-45, -3.40425060445074e-186, 1.59974269220388e-26, 0, 6.67054294775317e-124, 0.158503117506202, 0, 0, 0, 0, 0, 0, 3.42455724859116e-97, 0, 0, -2.70246891320217e-272, 0, 0, -3.50562438899045e-06, 0, 0, 1.35101732326608e-274, 0, 0, 0, 0, 0, 0, 0, 7.24580295957621e-65, 0, -3.54887341172294e-149, 0, 0, 0, 0, 0, 0, 0, 0, 1.77584594753563e-133, 0, 0, 0, 2.88385135688311e-250, 1.44299633616158e-259, 0, 1.56124744085834e-321, 1.63995835868977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.01050064173383e-122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.64868196850938e-172, 0, 6.28699823828692e-149, 0, 0, 0, 0, 5.0552295590188e-09, 0, 2.30420733561404e-66, 0, 7.0823279075443e-306, 0, 2.05009901740696e-88, 0, 7.41800724282869e-285, 7.18347043784483e-53, 0, 0, 0, 1.04251223075649e-273, 9.75816316577433e-13, 4.29519957592147, 0, 0, 1.33541454912682e-198, 2.34606233784019e-176, 8.38236726536896e-41, 0, 0, 0, 0, 1.35710537434521e-43, 1.15710503176511e-185, 1.25601735272233e-25, 0, 4.46811655846376e-123, 4.4196641795634, 0, 0, 0, 0, 0, 0, 3.74179015251531e-93, 0, 0, 3.62662047836582e-271, 0, 0, 1.26220330674453e-05, 0, 0, 1.72715562657338e-273, 0, 0, 0, 0, 0, 0, 0, 5.46372806810809e-64, 0, 2.47081972486962e-148, 0, 0, 0), .Dim = c(100L, 2L)));dimnames(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindimnames.testdimnames2
#argv <- list(structure(c(0, 0, 0, 0, 0, 56.989995924654, 56.989995924654, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 109.608811230383, 109.608811230383, 109.608811230383, 107.478028232287, 107.478028232287, 107.478028232287, 107.478028232287, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 10.7055301785859, 0, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 0.914597467778369, 0.914597467778369, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.599195286063472, 0.599195286063472, 0.599195286063472, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0202635232425103, 2.60032456603692e-08, 0, 0, 0, 0, 0, 0.165626203544259, 0.165626203544259, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.503396799290371, 0.503396799290371, 0.503396799290371, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.984387422945875, 0.999999996451695), .Dim = c(52L, 3L)));dimnames(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindimnames.testdimnames24
#argv <- list(structure(c(1L, 1L, 1L, 1L, 2L, 1L, NA), .Label = c('no', 'yes'), class = 'factor'));dimnames(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindimnames.testdimnames3
#argv <- list(structure(c(FALSE, FALSE, FALSE), .Dim = c(3L, 1L)));dimnames(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindimnames.testdimnames5
#argv <- list(structure(c(0.0495149735282523, -0.108383943640066, 0.077846206317523, -0.0237949779538032, 0.00481774174809338, -0.108383943640066, 0.280303242453237, -0.276080245636638, 0.130604235856321, -0.0264432890328551, 0.077846206317523, -0.276080245636638, 0.443183251704797, -0.364557026828347, 0.119607814442664, -0.0237949779538032, 0.130604235856321, -0.364557026828347, 0.44886505191838, -0.191117282992552, 0.00481774174809338, -0.0264432890328551, 0.119607814442664, -0.191117282992552, 0.0931350158346494), .Dim = c(5L, 5L)));dimnames(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindimnames.testdimnames7
#argv <- list(structure(c(13.0879058831551, -0.0481782079188499, 0.0648397936975344, -0.0703016880559154, -0.433062454113996, -0.000149473169823967, -16.3229386445345, -0.0481782079188499, 1.42936577525521, 0.00346026862477374, 0.000168722552167122, -0.00850959684180395, -9.2926002743558e-06, -1.44812039916227, 0.0648397936975344, 0.00346026862477374, 0.0649221455479854, 1.50206888047831e-06, 0.0303152177308945, -5.59890220792902e-06, -0.238079760031664, -0.0703016880559154, 0.000168722552167122, 1.50206888047831e-06, 0.00876007504795771, 0.000744776618395879, -6.15610217329725e-06, -0.0811419414051802, -0.433062454113996, -0.00850959684180395, 0.0303152177308945, 0.000744776618395879, 10.728754385628, -6.46786616103191e-05, -11.116657381748, -0.000149473169823967, -9.2926002743558e-06, -5.59890220792902e-06, -6.15610217329725e-06, -6.46786616103191e-05, 0.00193527894824396, -0.000812297378584339, -16.3229386445345, -1.44812039916227, -0.238079760031664, -0.0811419414051802, -11.116657381748, -0.000812297378584339, 249.99918229946), .Dim = c(7L, 7L)));dimnames(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindirname.testdirname1
#argv <- list('/home/roman/r-instrumented/library/graphics'); .Internal(dirname(argv[[1]]))
[1] "/home/roman/r-instrumented/library"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindirname.testdirname2
#argv <- list('/home/lzhao/hg/r-instrumented/tests/Packages/survival/inst/CITATION'); .Internal(dirname(argv[[1]]))
[1] "/home/lzhao/hg/r-instrumented/tests/Packages/survival/inst"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindirname.testdirname3
#argv <- list(character(0)); .Internal(dirname(argv[[1]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindirname.testdirname5
#argv <- list(structure('/home/lzhao/hg/r-instrumented/library/utils', .Names = 'Dir')); .Internal(dirname(argv[[1]]))
[1] "/home/lzhao/hg/r-instrumented/library"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindirname.testdirname7
#argv <- structure(list(path = character(0)), .Names = 'path');do.call('dirname', argv)
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindouble.testdouble1
#argv <- list();do.call('double', argv)
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltindrop.testdrop13
#argv <- structure(list(x = structure(c(8, 4, 2), .Dim = c(3L,     1L))), .Names = 'x');do.call('drop', argv)
[1] 8 4 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinenvironment.testenvironment2
#argv <- list(FALSE); .Internal(environment(argv[[1]]))
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinenvironment.testenvironment3
#argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(environment(argv[[1]]))
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinenvironment.testenvironment4
#argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0'))); .Internal(environment(argv[[1]]))
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinenvironmentName.testenvironmentName1
#argv <- list(FALSE); .Internal(environmentName(argv[[1]]))
[1] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinenvironmentName.testenvironmentName2
#argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0'))); .Internal(environmentName(argv[[1]]))
[1] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinenvironmentName.testenvironmentName3
#argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(environmentName(argv[[1]]))
[1] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinexp.testexp1
#argv <- list(-3.99290891786396);exp(argv[[1]]);
[1] 0.01844598

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinexp.testexp4
#argv <- list(c(0, 0, 0, 0, 0, 0.312525079410893, 0.312525079410893, 0.519628781161469, 0.519628781161469, 0.519628781161469, 0.519628781161469, 0.519628781161469, 0.519628781161469, 0.656871985321733, 0.656871985321733, 0.656871985321733, 0.747820128348458, 0.747820128348458, 0.747820128348458, 0.747820128348458, 0.808089522163767, 0.808089522163767, 0.808089522163767, 0.808089522163767, 0.808089522163767, 0.808089522163767, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.892034685155886, 0.892034685155886, 0.892034685155886, 0.892034685155886, 0.892034685155886, 0.911359578074335, 0.916463626041527));exp(argv[[1]]);
 [1] 1.000000 1.000000 1.000000 1.000000 1.000000 1.366872 1.366872 1.681403
 [9] 1.681403 1.681403 1.681403 1.681403 1.681403 1.928750 1.928750 1.928750
[17] 2.112390 2.112390 2.112390 2.112390 2.243618 2.243618 2.243618 2.243618
[25] 2.243618 2.243618 2.335039 2.335039 2.335039 2.335039 2.335039 2.335039
[33] 2.335039 2.335039 2.335039 2.397666 2.397666 2.397666 2.397666 2.397666
[41] 2.397666 2.397666 2.397666 2.397666 2.397666 2.440089 2.440089 2.440089
[49] 2.440089 2.440089 2.487702 2.500432

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinexp.testexp9
#argv <- list(c(4.92585186838819, 4.80249477012754, 4.18570927882429, 4.06235218056364, 3.81563798404234, 3.32220959099974, 3.19885249273909, 2.95213829621779, 2.45870990317518, 2.33535280491453, 2.08863860839323, 1.59521021535063, 1.47185311708998, 1.34849601882933, 0.608353429265429, 0.361639232744128, -0.131789160298473, -0.255146258559123, -1.11864594638368, -1.24200304464433, -1.85878853594758, -1.98214563420823, -2.84564532203278, -3.09235951855408, -3.70914500985733));exp(argv[[1]]);
 [1] 137.80668481 121.81393653  65.74011245  58.11083763  45.40571527
 [6]  27.72153619  24.50439509  19.14685163  11.68972094  10.33310486
[11]   8.07391592   4.92936519   4.35730226   3.85162840   1.83740349
[16]   1.43568090   0.87652578   0.77480317   0.32672189   0.28880515
[21]   0.15586134   0.13777331   0.05809676   0.04539472   0.02449846

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinexpm1.testexpm11
#argv <- list(-0.518798300715899);expm1(argv[[1]]);
[1] -0.4047646

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfilecreate.testfilecreate1
#argv <- list('codetools-manual.log', TRUE); .Internal(file.create(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfilecreate.testfilecreate2
#argv <- list(character(0), TRUE); .Internal(file.create(argv[[1]], argv[[2]]))
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfilecreate.testfilecreate4
#argv <- structure(list('foo1'), .Names = '');do.call('file.create', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfileexists.testfileexists1
#argv <- list('/home/lzhao/hg/r-instrumented/library/methods/data/Rdata.rdb'); .Internal(file.exists(argv[[1]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfileexists.testfileexists2
#argv <- list(c('src/Makevars', 'src/Makevars.in')); .Internal(file.exists(argv[[1]]))
[1] FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfileexists.testfileexists3
#argv <- list(character(0)); .Internal(file.exists(argv[[1]]))
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfilepath.testfilepath7
#argv <- structure(list('.', 'Pkgs'), .Names = c('', ''));do.call('file.path', argv)
[1] "./Pkgs"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfileremove.testfileremove1
#argv <- list(character(0)); .Internal(file.remove(argv[[1]]))
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfilerename.testfilerename1
#argv <- list(character(0), character(0)); .Internal(file.rename(argv[[1]], argv[[2]]))
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfloor.testfloor1
#argv <- list(c(2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 11));floor(argv[[1]]);
[1]  2  3  4  5  6  7  8  9 11

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfloor.testfloor2
#argv <- list(structure(c(12784, 13149, 13514, 13879, 14245, 14610), tzone = 'UTC'));floor(argv[[1]]);
[1] 12784 13149 13514 13879 14245 14610
attr(,"tzone")
[1] "UTC"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfloor.testfloor3
#argv <- list(c(-0.783587745879035, -0.739712343519063, -0.314304892261569));floor(argv[[1]]);
[1] -1 -1 -1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinfloor.testfloor5
#argv <- list(c(-1.94786705265839, 0.813844117537122));floor(argv[[1]]);
[1] -2  0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat10
#argv <- list(c(FALSE, NA, TRUE), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] "FALSE" "   NA" " TRUE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat13
#argv <- list(c(1L, 2L, 3L, 4L, 5L, -1L, -2L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] " 1" " 2" " 3" " 4" " 5" "-1" "-2"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat16
#argv <- list(structure(c(1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
 [1] "1960" "1960" "1960" "1960" "1960" "1960" "1960" "1960" "1960" "1960"
[11] "1960" "1961" "1961" "1961" "1961" "1961" "1961" "1961" "1961" "1961"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat18
#argv <- list(c(2L, 4L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] "2" "4"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat19
#argv <- list(c(1L, NA, 1L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] " 1" "NA" " 1"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat26
#argv <- list(c(172, 88, 88, 55, 92, 92, 72, 72, 63, 63), TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
 [1] "172" "88"  "88"  "55"  "92"  "92"  "72"  "72"  "63"  "63"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat35
#argv <- list(c(-41L, -36L, -12L, -18L, NA, -28L, -23L, -19L, -8L, NA, -7L, -16L, -11L, -14L, -18L, -14L, -34L, -6L, -30L, -11L, -1L, -11L, -4L, -32L, NA, NA, NA, -23L, -45L, -115L, -37L, NA, NA, NA, NA, NA, NA, -29L, NA, -71L, -39L, NA, NA, -23L, NA, NA, -21L, -37L, -20L, -12L, -13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, -135L, -49L, -32L, NA, -64L, -40L, -77L, -97L, -97L, -85L, NA, -10L, -27L, NA, -7L, -48L, -35L, -61L, -79L, -63L, -16L, NA, NA, -80L, -108L, -20L, -52L, -82L, -50L, -64L, -59L, -39L, -9L, -16L, -78L, -35L, -66L, -122L, -89L, -110L, NA, NA, -44L, -28L, -65L, NA, -22L, -59L, -23L, -31L, -44L, -21L, -9L, NA, -45L, -168L, -73L, NA, -76L, -118L, -84L, -85L, -96L, -78L, -73L, -91L, -47L, -32L, -20L, -23L, -21L, -24L, -44L, -21L, -28L, -9L, -13L, -46L, -18L, -13L, -24L, -16L, -13L, -23L, -36L, -7L, -14L, -30L, NA, -14L, -18L, -20L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
  [1] " -41" " -36" " -12" " -18" "  NA" " -28" " -23" " -19" "  -8" "  NA"
 [11] "  -7" " -16" " -11" " -14" " -18" " -14" " -34" "  -6" " -30" " -11"
 [21] "  -1" " -11" "  -4" " -32" "  NA" "  NA" "  NA" " -23" " -45" "-115"
 [31] " -37" "  NA" "  NA" "  NA" "  NA" "  NA" "  NA" " -29" "  NA" " -71"
 [41] " -39" "  NA" "  NA" " -23" "  NA" "  NA" " -21" " -37" " -20" " -12"
 [51] " -13" "  NA" "  NA" "  NA" "  NA" "  NA" "  NA" "  NA" "  NA" "  NA"
 [61] "  NA" "-135" " -49" " -32" "  NA" " -64" " -40" " -77" " -97" " -97"
 [71] " -85" "  NA" " -10" " -27" "  NA" "  -7" " -48" " -35" " -61" " -79"
 [81] " -63" " -16" "  NA" "  NA" " -80" "-108" " -20" " -52" " -82" " -50"
 [91] " -64" " -59" " -39" "  -9" " -16" " -78" " -35" " -66" "-122" " -89"
[101] "-110" "  NA" "  NA" " -44" " -28" " -65" "  NA" " -22" " -59" " -23"
[111] " -31" " -44" " -21" "  -9" "  NA" " -45" "-168" " -73" "  NA" " -76"
[121] "-118" " -84" " -85" " -96" " -78" " -73" " -91" " -47" " -32" " -20"
[131] " -23" " -21" " -24" " -44" " -21" " -28" "  -9" " -13" " -46" " -18"
[141] " -13" " -24" " -16" " -13" " -23" " -36" "  -7" " -14" " -30" "  NA"
[151] " -14" " -18" " -20"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat36
#argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), TRUE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat39
#argv <- list(FALSE, FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] "FALSE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat41
#argv <- list(structure(c(3035, 2552, 2704, 2554, 2014, 1655, 1721, 1524, 1596, 2074, 2199, 2512, 2933, 2889, 2938, 2497, 1870, 1726, 1607, 1545, 1396, 1787, 2076, 2837, 2787, 3891, 3179, 2011, 1636, 1580, 1489, 1300, 1356, 1653, 2013, 2823, 3102, 2294, 2385, 2444, 1748, 1554, 1498, 1361, 1346, 1564, 1640, 2293, 2815, 3137, 2679, 1969, 1870, 1633, 1529, 1366, 1357, 1570, 1535, 2491, 3084, 2605, 2573, 2143, 1693, 1504, 1461, 1354, 1333, 1492, 1781, 1915), .Tsp = c(1973, 1978.91666666667, 12), class = 'ts'), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
 [1] "3035" "2552" "2704" "2554" "2014" "1655" "1721" "1524" "1596" "2074"
[11] "2199" "2512" "2933" "2889" "2938" "2497" "1870" "1726" "1607" "1545"
[21] "1396" "1787" "2076" "2837" "2787" "3891" "3179" "2011" "1636" "1580"
[31] "1489" "1300" "1356" "1653" "2013" "2823" "3102" "2294" "2385" "2444"
[41] "1748" "1554" "1498" "1361" "1346" "1564" "1640" "2293" "2815" "3137"
[51] "2679" "1969" "1870" "1633" "1529" "1366" "1357" "1570" "1535" "2491"
[61] "3084" "2605" "2573" "2143" "1693" "1504" "1461" "1354" "1333" "1492"
[71] "1781" "1915"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat44
#argv <- list(95, 2, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] "95"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat48
#argv <- list(c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] " TRUE" "FALSE" " TRUE" "FALSE" "FALSE" "FALSE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat50
#argv <- list(c(Inf, -Inf), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] " Inf" "-Inf"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinformat.testformat9
#argv <- list(integer(0), TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingetNamespaceVersion.testgetNamespaceVersion1
#argv <- structure(list(ns = 'stats'), .Names = 'ns');do.call('getNamespaceVersion', argv)
version
"3.1.1"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingettext.testgettext1
#argv <- list(NULL, 'Loading required package: %s'); .Internal(gettext(argv[[1]], argv[[2]]))
[1] "Loading required package: %s"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingettext.testgettext2
#argv <- list(NULL, ''); .Internal(gettext(argv[[1]], argv[[2]]))
[1] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingettext.testgettext4
#argv <- list(NULL, c('/', ' not meaningful for factors')); .Internal(gettext(argv[[1]], argv[[2]]))
[1] "/"                           " not meaningful for factors"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingettext.testgettext5
#argv <- list(NULL, character(0)); .Internal(gettext(argv[[1]], argv[[2]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingregexpr.testgregexpr8
#argv <- list('[[:space:]]?(,|,?[[:space:]]and)[[:space:]]+', character(0), FALSE, FALSE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))
list()

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingrep.testgrep12
#argv <- list('^[[:blank:]]*$', 'mtext(\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\', side = 3)', FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingrep.testgrep9
#argv <- list('^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789]', 'all.R', FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingrepl.testgrepl1
#argv <- list('([[:digit:]]+[.-]){1,}[[:digit:]]+', c('1.0', '1.0'), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingrepl.testgrepl11
#argv <- list('^prepare_Rd', structure(character(0), class = 'checkRd'), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingrepl.testgrepl4
#argv <- list('([[:digit:]]+[.-]){1,}[[:digit:]]+', structure('7.3-26', .Names = 'Version'), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingsub.testgsub1
#argv <- list('([[:alnum:]])--([[:alnum:]])', '\\1-\\2', 'Date-Time Classes', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] "Date-Time Classes"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltingsub.testgsub12
#argv <- list('([[:digit:]]+[.-]){1,}[[:digit:]]+', '', 'pkgB_1.0.tar.gz', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] "pkgB_.tar.gz"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical1
#argv <- list('oats[-1, ]', 'newdata', TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical10
#argv <- list(complex(0), complex(0), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical12
#argv <- list(c(TRUE, TRUE, NA), c(TRUE, TRUE, NA), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical17
#argv <- list(raw(0), raw(0), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical18
#argv <- list(c(1, 1, 0.5, 1, 1, 1, 1, 1, 0, 0, 0.5, 1, 0, 1, 0, 1, 0.5, 1, NA, 0.75, 0.5, 0, 0.5, 0.5, 0.666666666666667, 0.666666666666667, 1, 1, 0.666666666666667, 1, 0.666666666666667, 0.666666666666667, 0.333333333333333, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0, 1, 0.5, 1, 1, 0.5, 1, 1, 1, 0.5, 1, 1, NA, 0.5), c(1, 1, 0.5, 1, 1, 1, 1, 1, 0, 0, 0.5, 1, 0, 1, 0, 1, 0.5, 1, NA, 0.75, 0.5, 0, 0.5, 0.5, 0.666666666666667, 0.666666666666667, 1, 1, 0.666666666666667, 1, 0.666666666666667, 0.666666666666667, 0.333333333333333, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0, 1, 0.5, 1, 1, 0.5, 1, 1, 1, 0.5, 1, 1, NA, 0.5), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical19
#argv <- list(c(0.0804034870161223, 10.3548347412639), structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08,     it = 898L, maxit = 5000, ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical2
#argv <- list(structure(c(NA, 2, NA, 1, NA, 0), .Dim = 2:3), structure(c(NA, 2, NA, 1, NA, 0), .Dim = 2:3), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical21
#argv <- list(c('«', '»', '¿', '?'), 'TeX', TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical22
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')), 42, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical23
#argv <- list(c(3L, 3L, NA, 3L), c(3L, 3L, NA, 3L), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical25
#argv <- list(c('object', NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), c('object', NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical26
#argv <- list(3.04888344611714e+29, 3.04888344611714e+29, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical27
#argv <- list(structure('BunchKaufman', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), structure('Matrix', .Names = 'x', package = 'Matrix', class = structure('signature', package = 'methods')), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical29
#argv <- list(c('1', '2', NA), c('1', '2', NA), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical3
#argv <- list(structure(c('dgTMatrix', 'matrix.coo'), .Names = c('from', 'to'), package = c('Matrix', ''), class = structure('signature', package = 'methods')), structure(c('dgTMatrix', 'matrix.coo'), .Names = c('from', 'to'), package = c('Matrix', ''), class = structure('signature', package = 'methods')), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical30
#argv <- list(c(-9.42477796076938, -6.28318530717959, -3.14159265358979, 0, 3.14159265358979, 6.28318530717959, 9.42477796076938, 12.5663706143592, 15.707963267949, 18.8495559215388), c(-9.42477796076938, -6.28318530717959, -3.14159265358979, 0, 3.14159265358979, 6.28318530717959, 9.42477796076938, 12.5663706143592, 15.707963267949, 18.8495559215388), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical31
#argv <- list(structure('classGeneratorFunction', package = 'methods'), structure('classGeneratorFunction', package = 'methods'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical33
#argv <- list(structure(1L, match.length = 8L, useBytes = TRUE), structure(1L, match.length = 8L, useBytes = TRUE), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical4
#argv <- list(structure(3.14159265358979, comment = 'Start with pi', class = structure('num1', package = '.GlobalEnv')), structure(3.14159265358979, comment = 'Start with pi', class = structure('num1', package = '.GlobalEnv')), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical7
#argv <- list(c(-1.38507061859438+0.31833672642477i, 0.0383231810219-1.42379885362755i, -0.763030162361974-0.405090858049187i, 0.212306135525839+0.995386565684023i, 1.42553796686779+0.95881778764026i, 0.744479822333976+0.918087896319951i, 0.70022940298623-0.15096960188161i, -0.22935461345173-1.2230687888662i, 0.197093861895352-0.868824288637794i, 1.20715377387226-1.04248536490429i), c(-1.38507061859438+0.31833672642477i, 0.0383231810219-1.42379885362755i, -0.763030162361974-0.405090858049187i, 0.212306135525839+0.995386565684023i, 1.42553796686779+0.95881778764026i, 0.744479822333976+0.918087896319951i, 0.70022940298623-0.15096960188161i, -0.22935461345173-1.2230687888662i, 0.197093861895352-0.868824288637794i, 1.20715377387226-1.04248536490429i), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinidentical.testidentical9
#argv <- list(ccnternal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinifelse.testifelse1
#argv <- structure(list(test = c(TRUE, TRUE, FALSE, TRUE, FALSE),     yes = 'True', no = 'False'), .Names = c('test', 'yes', 'no'));do.call('ifelse', argv)
[1] "True"  "True"  "False" "True"  "False"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits1
#argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Names = c('dtrMatrix', 'MatrixFactorization', 'ddenseMatrix', 'triangularMatrix', 'dMatrix', 'denseMatrix', 'Matrix', 'mMatrix')), 'factor', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits10
#argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits11
#argv <- list(structure(list(srcfile = '/home/lzhao/hg/r-instrumented/library/stats/R/stats', frow = 853L, lrow = 853L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits13
#argv <- list(structure(10, class = c('a', 'b')), c('a', 'b', 'c'), TRUE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] 1 2 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits14
#argv <- list(complex(0), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits15
#argv <- list(structure(FALSE, .Tsp = c(0, 0, 1), class = 'ts'), 'ts', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits16
#argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits17
#argv <- list(raw(0), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits18
#argv <- list(structure(c(-1.5116089581734, 0.200010507218348, 0.266001075015567, 0.339550302820724, 0.425045882083188, 0.496549005782181, 0.576998440511346, -0.909988579721932, -1.06576984591386, 0.174059431391812, -0.0372498129362256, -0.282881300668478, -0.488312023557303, -0.719445779363312), gradient = structure(c(0.160743714207466, 0.251172444221428, 0.307513919261763, 0.350467096622222, 0.367731527586793, 0.346345778958899, 0.262925702855199, -0.160743714207466, -0.251172444221428, -0.307513919261763, -0.350467096622222, -0.367731526984617, -0.346345778958899, -0.262925703156287), .Dim = c(7L, 2L, 1L)), .Dim = c(7L, 2L)), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits19
#argv <- list(structure(3.14159265358979, comment = 'Start with pi'), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits2
#argv <- list(structure(list(x = numeric(0), y = numeric(0), fac = structure(integer(0), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = integer(0), class = 'data.frame'), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits20
#argv <- list(c(TRUE, NA, FALSE, TRUE), 'Date', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits21
#argv <- list(c(-1, 1, -1, 2, 1, NA, -1, 1, 4, 1, NA, 4, 1, 3, NA, 4, 2, 2, NA, 4, 4, 2, 4, 4, 2, 1, 4, 4, 3, 1, 1, 4, 1, 4, NA, 1, 4, 4, 2, 2, 4, 4, 3, 4, 2, 2, 3, 3, 4, 1, 1, 1, 4, 1, 4, 4, 4, 4, NA, 4, 4, 4, NA, 1, 2, 3, 4, 3, 4, 2, 4, 4, 1, 4, 1, 4, NA, 4, 2, 1, 4, 1, 1, 1, 4, 4, 2, 4, 1, 1, 1, 4, 1, 1, 1, 4, 3, 1, 4, 3, 2, 4, 3, 1, 4, 2, 4, NA, 4, 4, 4, 2, 1, 4, 4, NA, 2, 4, 4, 1, 1, 1, 1, 4, 1, 2, 3, 2, 1, 4, 4, 4, 1, NA, 4, 2, 2, 2, 4, 4, 3, 3, 4, 2, 4, 3, 1, 1, 4, 2, 4, 3, 1, 4, 3, 4, 4, 1, 1, 4, 4, 3, 1, 1, 2, 1, 3, 4, 2, 2, 2, 4, 4, 3, 2, 1, 1, 4, 1, 1, 2, NA, 2, 3, 3, 2, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 2, 2, 1, 4, 1, 4, 3, 4, 2, 3, 1, 3, 1, 4, 1, 4, 1, 4, 3, 3, 4, 4, 1, NA, 3, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 2, 4, 4, 1, 2, NA, 4, 4, 4, 4, 1, 2, 1, 1, 2, 1, 4, 2, 3, 1, 4, 4, 4, 1, 2, 1, 4, 2, 1, 3, 1, 2, 2, 1, 2, 1, NA, 3, 2, 2, 4, 1, 4, 4, 2, 4, 4, 4, 2, 1, 4, 2, 4, 4, 4, 4, 4, 1, 3, 4, 3, 4, 1, NA, 4, NA, 1, 1, 1, 4, 4, 4, 4, 2, 4, 3, 2, NA, 1, 4, 4, 3, 4, 4, 4, 2, 4, 2, 1, 4, 4, NA, 4, 4, 3, 3, 4, 2, 2, 4, 1, 4, 4, 4, 3, 4, 4, 4, 3, 2, 1, 3, 1, 4, 1, 4, 2, NA, 1, 4, 4, 3, 1, 4, 1, 4, 1, 4, 4, 1, 2, 2, 1, 4, 1, 1, 4, NA, 4, NA, 4, 4, 4, 1, 4, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 4, 2, 3, 3, 1, 3, 1, 4, 1, 3, 2, 2, 4, 1, NA, 3, 4, 2, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 2, 1, 4, 4, 2, 4, 2, 1, 2, 1, 1, 1, 1, 4, 4, 1, 1, 4, 1, 4, 4, 4, 1, 1, NA, 3, 2, 4, 4, 4, 4, 2, 3, 3, 2, NA, 4, 2, 4, 4, 1, 1, 4, 4, 1, 1, 4, 1, 2, 2, 2, 2, 1, 4, 4, 1, 2, 2, 2, 3, 4, 4, 3, 4, 1, 1, 4, 4, NA, 4, 1, 4, 4, 4, 1, 4, 4, 1, 2, 4, 4, 4, 4, 1, 2, 4, 4, 2, 1, 4, 2, 4, 2, 2, 4, 1, 3, 3, 2, 4, 1, 4, 4, 4, 1, NA, 4, 4, 2, 4, 4, 4, 4, 4, 2, NA, 4, 2, 4, 3, 1, 4, 4, 3, 4, 2, 4, 4, 1, 2, 1, 4, 1, 3, 3, 1, 4, 4, 2, 4, 4, 4, 4, 3, 2, 3, 3, 2, NA, 3, 4, 4, 3, 3, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 3, 4, 1, 3, 1, NA, 4, 1, 2, 2, 1, 4, 3, 3, 4, 1, 1, 3), 'Date', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits23
#argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96), .Dim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4')), .Tsp = c(1, 101, 1), class = c('mts', 'ts', 'matrix')), 'ts', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits24
#argv <- list(c(10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 1e+05, 110000, 120000, 130000, 140000, 150000, 160000, 170000, 180000, 190000, 2e+05, 210000, 220000, 230000, 240000, 250000, 260000, 270000, 280000, 290000, 3e+05, 310000, 320000, 330000, 340000, 350000, 360000, 370000, 380000, 390000, 4e+05, 410000, 420000, 430000, 440000, 450000, 460000, 470000, 480000, 490000, 5e+05, 510000, 520000, 530000, 540000, 550000, 560000, 570000, 580000, 590000, 6e+05, 610000, 620000, 630000, 640000, 650000, 660000, 670000, 680000, 690000, 7e+05, 710000, 720000, 730000, 740000, 750000, 760000, 770000, 780000, 790000, 8e+05, 810000, 820000, 830000, 840000, 850000, 860000, 870000, 880000, 890000, 9e+05, 910000, 920000, 930000, 940000, 950000, 960000, 970000, 980000, 990000, 1e+06), 'POSIXlt', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits25
#argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/grid/R/grid', '/home/lzhao/hg/r-instrumented/library/grid/R/grid'), frow = 3581:3582, lrow = c(3581L, 3590L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits26
#argv <- list('  Running ‘scales.R’', 'condition', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits27
#argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i), 'ts', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits28
#argv <- list(structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits29
#argv <- list(structure(c(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'), 'ts', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits3
#argv <- list(structure(c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Tsp = c(2, 11, 1)), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits30
#argv <- list(structure(list(coefficients = numeric(0), residuals = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), fitted.values = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), weights = NULL, rank = 0L, df.residual = 10L,     call = quote(lm(formula = y ~ 0)), terms = quote(y ~ 0), model = structure(list(y = c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434)), .Names = 'y', terms = quote(y ~ 0), row.names = c(NA, 10L), class = 'data.frame')), .Names = c('coefficients', 'residuals', 'fitted.values', 'weights', 'rank', 'df.residual', 'call', 'terms', 'model'), class = 'lm'), 'lm', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits31
#argv <- list(structure(c(-0.562441486309934, -0.588967592535822, 0.0277608937997097, 0.568074124752969, 3.89980510825846, -0.428174866497729, -0.343990813420242, -0.260996370058754, -2.31774610938305, 0.314764947225063, -0.455124436264437, -0.0444006414474544, -0.27748974692001, -0.303134023269405, -0.670168347915028, 2.92643313367, -0.749546667806845, -0.410394401887929, -0.203261263063707, 0.1847365997012, 0.128559671155683, 0.313558179929332, -0.0668425264405297, -0.106427678524531, -0.523747793519006, -0.402585404761851, 0.0642079595716389, -0.779859286629166, 0.356484381211739, -0.625053119472271, 1.31547628490512, -0.21959878152752, -0.102402088986461), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')), 'factor', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits34
#argv <- structure(list(x = structure(c(1412799280.04908, 1412799280.04908),     class = c('POSIXct', 'POSIXt')), what = 'POSIXt'), .Names = c('x',     'what'));do.call('inherits', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits4
#argv <- list(structure(list(Sepal.Length = c(4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7, 7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2), Sepal.Width = c(3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3, 3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2, 3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9, 2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8, 3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5, 2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3, 2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2, 3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3, 2.8, 3),     Petal.Length = c(1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8    ), Petal.Width = c(0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5, 1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1,     1.6)), .Names = c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width'), row.names = 30:130, class = 'data.frame'), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits5
#argv <- list(structure(1L, .Dim = 1L), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits6
#argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), 'Surv', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits7
#argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('Ctl', 'A', 'B'), class = 'factor', contrasts = 'contr.treatment'), 'factor', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits8
#argv <- list(c(NA, NA, '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/groupedData.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/groupedData.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/groupedData.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/groupedData.R'), 'ordered', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininherits.testinherits9
#argv <- list(list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit'))), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininteger.testinteger1
#argv <- structure(list(length = 2), .Names = 'length');do.call('integer', argv)
[1] 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininteraction.testinteraction1
#argv <- list(c('a.b', 'a'), c('c', 'b.c'));do.call('interaction', argv)
[1] a.b.c a.b.c
Levels: a.b.c a.b.b.c a.c

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible1
#argv <- list(c(3.14159265358977, 3.14159265358981));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible11
#argv <- list(structure('Error in `[.data.frame`(dd, , \'x\') : undefined columns selected\n', class = 'try-error', condition = structure(list(message = 'undefined columns selected', call = quote(`[.data.frame`(dd, , 'x'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible12
#argv <- list(structure(list(value = structure(c(NA, NA, 1L, 9L), .Names = c('size', 'current', 'direction', 'eval_depth')), visible = TRUE), .Names = c('value', 'visible')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible14
#argv <- list(structure(list(coefficients = structure(c(-0.0880891704401362, -0.508170309402877, -0.00510235947825228, 0.0737329622006759), .Names = c('(Intercept)', 'x1', 'z', 'x1:z')), residuals = structure(c(0.471500137591588, -0.418206002310214, -1.08038471222353, -0.582889907355648, 0.671048026430597, 1.41161034263987, 0.0130575334430522, 0.598273046028054, -0.0752209852417045, -1.00878747900206), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), effects = structure(c(0.483887391035467, -0.316505532770654, -0.0456368905560498, -0.659487662652535, 0.502868792132386, 1.20242722895332, -0.301792379913696, 0.0429789614006214, -0.536741577656989, -1.91019253457038), .Names = c('(Intercept)', 'x1', 'z', 'x1:z', '', '', '', '', '', '')), rank = 4L, fitted.values = structure(c(-0.527628877120589, 0.262410495604884, -0.390367671675741, 0.104739852247028, -0.253106466230895, -0.0529307911108283, -0.115845260786048, -0.210601434468685, 0.0214159446587994, -0.368272077826542), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), assign = 0:3, qr = structure(list(qr = structure(c(-3.16227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0, 3.16227766016838, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -17.3925271309261, -1.58113883008419, 8.94427190999916, 0.0204447427551466, -0.048810308101025, -0.203162054994832, -0.272417105851004, -0.426768852744811, -0.496023903600983, -0.65037565049479, 1.58113883008419, 17.3925271309261, 2.77555756156289e-17, -8.94427190999916, 0.202312619197469, -0.0523458957441388, 0.422028033632482, -0.279844076809084, 0.641743448067495, -0.507342257874029), .Dim = c(10L, 4L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), c('(Intercept)', 'x1', 'z', 'x1:z')), assign = 0:3, contrasts = structure(list(    x = 'contr.helmert'), .Names = 'x')), qraux = c(1.31622776601684, 1.39220245868163, 1.17479648964895, 1.17515228532081), pivot = 1:4, tol = 1e-07, rank = 4L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 6L, contrasts = structure(list(x = 'contr.helmert'), .Names = 'x'), xlevels = structure(list(), .Names = character(0)), call = quote(lm(formula = y ~ x * z)), terms = quote(y ~ x * z), model = structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), terms = quote(y ~ x * z), row.names = c(NA, 10L), class = 'data.frame')), .Names = c('coefficients', 'residuals', 'effects', 'rank', 'fitted.values', 'assign', 'qr', 'df.residual', 'contrasts', 'xlevels', 'call', 'terms', 'model'), class = 'lm'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible15
#argv <- list(structure('Error in scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings,  : \n  line 1 did not have 4 elements\n', class = 'try-error', condition = structure(list(message = 'line 1 did not have 4 elements', call = quote(scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, flush, fill, strip.white, quiet, blank.lines.skip, multi.line, comment.char, allowEscapes, encoding))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible17
#argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible18
#argv <- list(structure(c(3, 8), .Dim = 2L, .Dimnames = structure(list(g = c('1', '2')), .Names = 'g'), call = quote(by.data.frame(data = X, INDICES = g, FUN = colMeans)), class = 'by'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible19
#argv <- list(structure('Error in rnorm(2, c(1, NA)) : (converted from warning) NAs produced\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(2, c(1, NA)))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible20
#argv <- list(structure(list(z = structure(c(1395082040.29392, 1395082040.29392, 1395082040.29392, 1395082040.29392, 1395082040.29392), class = c('AsIs', 'POSIXct', 'POSIXt'))), .Names = 'z', row.names = c(NA, -5L), class = 'data.frame'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible22
#argv <- list(structure(list(tables = structure(list(`Grand mean` = 103.87323943662, N = structure(c(78.7365206866197, 98.5088731171753, 113.842206450509, 123.008873117175), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'), class = 'mtable'), `V:N` = structure(c(79.5323303457107, 86.1989970123773, 69.7732394366197, 98.0323303457106, 108.032330345711, 89.1989970123773, 114.198997012377, 116.698997012377, 110.365663679044, 124.365663679044, 126.365663679044, 118.032330345711), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')), class = 'mtable')), .Names = c('Grand mean', 'N', 'V:N')), n = structure(list(N = structure(c(17, 18, 18, 18), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N')), `V:N` = structure(c(6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')))), .Names = c('N', 'V:N'))), .Names = c('tables', 'n'), type = 'means', class = c('tables_aov', 'list.of')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible23
#argv <- list(structure(list(A = 0:10, `NA` = 20:30), .Names = c('A', NA), class = 'data.frame', row.names = c(NA, -11L)));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible24
#argv <- list(structure(c(-Inf, -Inf, -2.248e+263, -Inf, -3.777e+116, -1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = 'table'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible25
#argv <- list(structure(list(Df = c(1, 1, NA, 2), Deviance = c(12.2441566485997, 28.4640218366572, 32.825622681839, 32.4303239692005), AIC = c(73.9421143635373, 90.1619795515948, 92.5235803967766, 96.1282816841381)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('+ M.user', '+ Temp', '<none>', '+ Soft'), class = c('anova', 'data.frame')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible26
#argv <- list(c(-1, -0.5, 0, 0.5, 1));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible27
#argv <- list(structure(c('Min.   :  5.00  ', '1st Qu.: 12.50  ', 'Median : 23.00  ', 'Mean   : 29.48  ', '3rd Qu.: 33.50  ', 'Max.   :161.00  ', 'Min.   :0.0000  ', '1st Qu.:1.0000  ', 'Median :1.0000  ', 'Mean   :0.7826  ', '3rd Qu.:1.0000  ', 'Max.   :1.0000  ', 'Maintained   :11  ', 'Nonmaintained:12  ', NA, NA, NA, NA), .Dim = c(6L, 3L), .Dimnames = list(c('', '', '', '', '', ''), c('     time', '    status', '            x')), class = 'table'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible28
#argv <- list(structure(list(latin1 = 0L, utf8 = 0L, bytes = 0L, unknown = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('non_ASCII', 'where')))), .Names = c('latin1', 'utf8', 'bytes', 'unknown'), class = 'check_package_datasets'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible29
#argv <- list(structure(NA, .Tsp = c(1, 1, 1), class = 'ts'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible30
#argv <- list(structure(list(), class = 'formula'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible31
#argv <- list(structure(list(strip.vp = structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(-0.0330971105140634, 1.03229244338581), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = c(1L, 1L), layout.pos.col = c(1L, 1L), valid.just = c(0.5, 0.5), valid.pos.row = c(1L, 1L), valid.pos.col = c(1L, 1L), name = 'GRID.VP.40'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport'), plot.vp = structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'),     width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(-0.0330971105140634, 1.03229244338581), yscale = c(-0.0353837383445352, 1.04704589419998), angle = 0, layout = NULL, layout.pos.row = c(2L, 2L), layout.pos.col = c(1L, 1L), valid.just = c(0.5, 0.5), valid.pos.row = c(2L, 2L), valid.pos.col = c(1L, 1L), name = 'GRID.VP.41'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport')), .Names = c('strip.vp', 'plot.vp')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible33
#argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible34
#argv <- list(structure(list(sec = 59.7693939208984, min = 47L, hour = 18L, mday = 17L, mon = 2L, year = 114L, wday = 1L, yday = 75L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible35
#argv <- list(structure(list(x = structure(c(63.8079770211941, 64.1015289795127, 64.3950809378313, 64.6886328961499, 64.9821848544685, 65.2757368127871, 65.5692887711057, 65.8628407294243, 66.1563926877429, 66.4499446460616, 66.7434966043802, 67.0370485626988, 67.3306005210174, 67.624152479336, 67.9177044376546, 68.2112563959732, 68.5048083542918, 68.7983603126104, 69.091912270929, 69.3854642292476, 69.6790161875662, 69.9725681458849, 70.2661201042035, 70.5596720625221, 70.8532240208407, 71.1467759791593, 71.4403279374779, 71.7338798957965, 72.0274318541151, 72.3209838124337, 72.6145357707524, 72.908087729071, 73.2016396873896, 73.4951916457082, 73.7887436040268, 74.0822955623454, 74.375847520664, 74.6693994789826, 74.9629514373012, 75.2565033956198, 75.5500553539384, 75.843607312257, 76.1371592705757, 76.4307112288943, 76.7242631872129, 77.0178151455315, 77.3113671038501, 77.6049190621687, 77.8984710204873, 78.1920229788059), unit = 'native', valid.unit = 4L, class = 'unit'), y = structure(c(0.000292389503184205, 0.000897790147984954, 0.00234624782100963, 0.00521720896677798, 0.00989423163518025, 0.015999825469344, 0.0221693602680603, 0.0266484406702544, 0.0287592128884921, 0.0302032637184832, 0.0349150884986298, 0.0473117449499264, 0.069811568153779, 0.101849712371392, 0.14014558800306, 0.179532924691013, 0.213121481011927, 0.233373692723354, 0.235396372946243, 0.221556776074102, 0.201658872746641, 0.187397555681655, 0.184299939839784, 0.187901304936084, 0.186879499085897, 0.171534710980926, 0.140953197828419, 0.103411084284294, 0.0700968149951466, 0.0478115464491638, 0.0363916682131507, 0.0310202066683672, 0.0267344490723088, 0.0212112857883806, 0.0149149265224817, 0.00956339674119522, 0.00665150505587597, 0.00689835920722663, 0.010231338259878, 0.0157315524205489, 0.0215689799990253, 0.0254154063025622, 0.0255363521874538, 0.0218531199052928, 0.0159232922023665, 0.00987834564939972, 0.00521442208935573, 0.00234582757042574, 0.000897736459776011, 0.000292383673435392), unit = 'native', valid.unit = 4L, class = 'unit'),     arrow = NULL, name = 'plot_02.density.lines.panel.3.1', gp = structure(list(lty = 1, col = '#0080ff', lwd = 1, alpha = 1), .Names = c('lty', 'col', 'lwd', 'alpha'), class = 'gpar'), vp = NULL), .Names = c('x', 'y', 'arrow', 'name', 'gp', 'vp'), class = c('lines', 'grob', 'gDesc')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible37
#argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible38
#argv <- list(structure(list(value = 4.94065645841247e-324, visible = TRUE), .Names = c('value', 'visible')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible39
#argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor'), c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = c('c0', 'c0'), row.names = integer(0), class = 'data.frame'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible4
#argv <- list(structure(list(height = numeric(0), weight = numeric(0)), .Names = c('height', 'weight'), row.names = integer(0), class = 'data.frame'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible40
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible41
#argv <- list(c(1e-10, 1e+49, 1e+108, 1e+167, 1e+226));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible42
#argv <- list(structure('checkRd: (-3) Surv.Rd:90: Unnecessary braces at ‘{time2}’', class = 'checkRd'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible43
#argv <- list(structure(list(raster = structure('#000000', .Dim = c(1L, 1L), class = 'raster'), x = structure(0, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = NULL, height = NULL, just = 'centre', hjust = NULL, vjust = NULL, interpolate = TRUE, name = 'GRID.rastergrob.785', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('raster', 'x', 'y', 'width', 'height', 'just', 'hjust', 'vjust', 'interpolate', 'name', 'gp', 'vp'), class = c('rastergrob', 'grob', 'gDesc')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible44
#argv <- list(structure(c('0', 'NULL', 'NULL'), .Names = c('Length', 'Class', 'Mode'), class = c('summaryDefault', 'table')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible45
#argv <- list(structure(list(TEST = structure(c(1L, 2L, 6L, 3L, 4L, 5L, 10L, 11L, 9L, 7L, 8L), .Label = c('1', '2', '4', '5', '\\040', '\\b', '\\n', '\\r', '\\t', '\\x20', 'c:\\spencer\\tests'), class = 'factor')), .Names = 'TEST', class = 'data.frame', row.names = c(NA, -11L)));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible46
#argv <- list(structure(list(size = numeric(0), isdir = logical(0), mode = structure(integer(0), class = 'octmode'), mtime = structure(numeric(0), class = c('POSIXct', 'POSIXt')), ctime = structure(numeric(0), class = c('POSIXct', 'POSIXt')), atime = structure(numeric(0), class = c('POSIXct', 'POSIXt')), uid = integer(0), gid = integer(0), uname = character(0), grname = character(0)), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = character(0)));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible47
#argv <- list(structure(list(a = c(1L, 4L, 7L), b = c(2L, 5L, 8L), c = c(3L, 6L, 9L)), .Names = c('a', 'b', 'c'), class = 'data.frame', row.names = c(NA, -3L)));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible49
#argv <- list(structure('Error in rnorm(1, sd = Inf) : (converted from warning) NAs produced\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible50
#argv <- list(structure(1395078479.75887, class = c('POSIXct', 'POSIXt')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible51
#argv <- list(structure('Error in read.table(\'foo1\') : no lines available in input\n', class = 'try-error', condition = structure(list(message = 'no lines available in input', call = quote(read.table('foo1'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible52
#argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Dim = c(10L, 2L), .Dimnames = list(NULL, c('tt', 'tt + 1')), .Tsp = c(1920.5, 1921.25, 12), class = c('mts', 'ts', 'matrix')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible6
#argv <- list(structure(list(call = quote(lm(formula = y ~ x1 + x2 + x3)), terms = quote(y ~ x1 + x2 + x3), residuals = structure(c(0.224762433374997, 0.4813346401898, -0.548705796690786, -0.873306430909872, 0.3255545927283, -0.288240908441576, 0.530823516045489, -0.0649703574297026, 1.2699009772491, -1.05715266611575), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), coefficients = structure(c(1.47191076131574, 0.586694550701453, 0.258706725324317, 0.948371836939988, 0.396080061109718, 0.350912037541581, 1.55203972111298, 1.48125242421363, 0.737240953991673, 0.164593338447767, 0.182090654313858, 0.484947927602608), .Dim = 3:4, .Dimnames = list(c('(Intercept)', 'x1', 'x3'), c('Estimate', 'Std. Error', 't value', 'Pr(>|t|)'))), aliased = structure(c(FALSE, FALSE, TRUE, FALSE), .Names = c('(Intercept)', 'x1', 'x2', 'x3')), sigma = 0.806334473232766, df = c(3L, 7L, 4L), r.squared = 0.932605950232242, adj.r.squared = 0.913350507441455, fstatistic = structure(c(48.4333681840033, 2, 7), .Names = c('value', 'numdf', 'dendf')), cov.unscaled = structure(c(1.38333333333333, -0.525000000000001, 0.416666666666667, -0.525000000000001, 0.241287878787879, -0.208333333333334, 0.416666666666667, -0.208333333333334, 0.18939393939394), .Dim = c(3L, 3L), .Dimnames = list(c('(Intercept)', 'x1', 'x3'), c('(Intercept)', 'x1', 'x3'))), correlation = structure(c(1, -0.908715905467124, 0.814033538872717, -0.908715905467124, 1, -0.974558628915209, 0.814033538872717, -0.974558628915209, 1), .Dim = c(3L, 3L), .Dimnames = list(    c('(Intercept)', 'x1', 'x3'), c('(Intercept)', 'x1', 'x3'))), symbolic.cor = FALSE), .Names = c('call', 'terms', 'residuals', 'coefficients', 'aliased', 'sigma', 'df', 'r.squared', 'adj.r.squared', 'fstatistic', 'cov.unscaled', 'correlation', 'symbolic.cor'), class = 'summary.lm'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible7
#argv <- list(structure(list(call = quote(lm(formula = y ~ 0)), terms = quote(y ~ 0), aliased = logical(0), residuals = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), df = c(0L, 10L, 0L), coefficients = structure(logical(0), .Dim = c(0L, 4L), .Dimnames = list(NULL, c('Estimate', 'Std. Error', 't value', 'Pr(>|t|)'))), sigma = 0.523484262069588, adj.r.squared = 0, r.squared = 0), .Names = c('call', 'terms', 'aliased', 'residuals', 'df', 'coefficients', 'sigma', 'adj.r.squared', 'r.squared'), class = 'summary.lm'));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltininvisible.testinvisible8
#argv <- list(structure(list(width = 80L, minIndent = 10L, extraIndent = 4L, sectionIndent = 5L, sectionExtra = 2L, itemBullet = '• ', enumFormat = function (n) sprintf('%d. ', n), showURLs = FALSE, code_quote = TRUE, underline_titles = FALSE), .Names = c('width', 'minIndent', 'extraIndent', 'sectionIndent', 'sectionExtra', 'itemBullet', 'enumFormat', 'showURLs', 'code_quote', 'underline_titles')));invisible(argv[[1]]);

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisTRUE.testisTRUE1
#argv <- structure(list(x = TRUE), .Names = 'x');do.call('isTRUE', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray1
#argv <- list(structure(list(weight = c(4.17, 5.58), group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('weight', 'group'), row.names = 1:2, class = 'data.frame'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray10
#argv <- list(structure(integer(0), .Names = character(0)));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray11
#argv <- list(structure(list(c0 = logical(0)), .Names = 'c0', row.names = integer(0), class = 'difftime'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray12
#argv <- list(structure(list(B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor'), Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L)), .Names = c('B', 'V', 'N', 'Y'), row.names = 2:72, class = 'data.frame'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray13
#argv <- list(1.79769313486232e+308);is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray17
#argv <- list(c('1', '2', NA));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray18
#argv <- list(structure(list(y = c(0.219628047744843, 0.360454661130887, NA, 0.114681204747219, -1.14267533343616, 0.772374419482067, 0.681741904304867, 0.171869265068012, 2.08409180391906, 0.367547276775469), x1 = c(1L, 2L, 3L, NA, 5L, 6L, 7L, 8L, 9L, 10L), x2 = 1:10, x3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), wt = c(0, 1, 1, 1, 1, 1, 1, 1, 1, 1)), .Names = c('y', 'x1', 'x2', 'x3', 'wt'), row.names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), class = 'data.frame'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray19
#argv <- list(structure(list(x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861)), .Names = c('x', 'y'), row.names = c(NA, -10L), class = 'data.frame'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray2
#argv <- list(structure(list(weight = c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('weight', 'group'), row.names = c(NA, -20L), class = 'data.frame'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray21
#argv <- list(integer(0));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray23
#argv <- list(c(0.568, 1.432, -1.08, 1.08));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray4
#argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray7
#argv <- list(c('2001-01-01', NA, NA, '2004-10-26'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray8
#argv <- list(structure(list(breaks = c(26, 30, 54, 25, 70, 52, 51, 26, 67, 27, 14, 29, 19, 29, 31, 41, 20, 44), wool = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('A', 'B'), class = 'factor'), tension = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c('L', 'M', 'H'), class = 'factor')), .Names = c('breaks', 'wool', 'tension'), row.names = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L), class = 'data.frame'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisarray.testisarray9
#argv <- list(structure(list(carb = c(33, 40, 37, 27, 30, 43, 34, 48, 30, 38, 50, 51, 30, 36, 41, 42, 46, 24, 35, 37), age = c(33, 47, 49, 35, 46, 52, 62, 23, 32, 42, 31, 61, 63, 40, 50, 64, 56, 61, 48, 28), wgt = c(100, 92, 135, 144, 140, 101, 95, 101, 98, 105, 108, 85, 130, 127, 109, 107, 117, 100, 118, 102), prot = c(14, 15, 18, 12, 15, 15, 14, 17, 15, 14, 17, 19, 19, 20, 15, 16, 18, 13, 18, 14)), .Names = c('carb', 'age', 'wgt', 'prot'), row.names = c(NA, -20L), class = 'data.frame'));is.array(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic1
#argv <- list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic10
#argv <- list(structure(c(123.263157894737, 88.6052631578949, 77.0526315789476, 60.9473684210528, 54.3947368421055, 43.8421052631581, 34.2894736842107, 14.7368421052633, 10.6315789473686, 1.07894736842124, -9.47368421052613, -11.0263157894735, -16.1315789473682, -13.6842105263156, -3.23684210526298, -1.34210526315772, 11.1052631578949, -0.44736842105246, 7.00000000000017, 7.4473684210528, 6.89473684210543, 5.34210526315806, -8.21052631578931, -15.7631578947367, -3.31578947368405, 24.5789473684212, 27.0263157894738, 26.4736842105265, 21.9210526315791, 23.3684210526317, 27.263157894737, 19.6052631578949, 21.0526315789475, 26.5000000000001, 22.9473684210528, 12.3947368421054, 1.84210526315803, 5.28947368421066, -1.81578947368408, 4.63157894736855, 24.5263157894738, 10.9736842105264, 4.42105263157907, -10.1315789473683, -10.6842105263157, 12.763157894737, 33.2105263157896, 35.1052631578949, 44.5526315789475, 41.0000000000001, 46.4473684210527, 59.8947368421054, 69.342105263158, 64.7894736842106, 48.6842105263159, 63.1315789473685, 54.0263157894738, 46.4736842105264, 41.921052631579, 35.3684210526317, 27.8157894736843, 32.2631578947369, 36.7105263157896, 32.1578947368422, 23.6052631578948, 14.0526315789475, 12.5000000000001, -5.05263157894728, 9.84210526315798, 7.28947368421061, 16.7368421052632, 13.1842105263159, 13.6315789473685, 7.07894736842113, 9.52631578947376, 6.42105263157902, 4.31578947368428, -7.23684210526309, -15.7894736842105, 0.657894736842167, -5.8947368421052, 0.552631578947427, 7.44736842105269, -10.1052631578947, -3.65789473684205, 0.789473684210577, 7.23684210526321, 16.6842105263158, 7.13157894736847, -4.4210526315789, -5.97368421052627, -11.5263157894736, -4.07894736842101, -16.6315789473684, -14.1842105263158, -19.7368421052631, -11.2894736842105, -5.84210526315786, -13.3947368421052, -14.9473684210526, -15.5, -21.0526315789473, -6.60526315789471, -14.1578947368421, -8.71052631578945, -6.26315789473682, -11.8157894736842, -19.3684210526316, -6.92105263157893, -18.4736842105263, -19.0263157894737, -15.578947368421, -16.1315789473684, -12.6842105263158, 5.76315789473685, 3.21052631578948, 2.65789473684211, 5.10526315789474, 11.5526315789474), .Names = c('11', '12', '13', '15', '26', '30', '31', '53', '54', '59', '60', '65', '71', '81', '88', '92', '93', '95', '105', '107', '110', '116', '118', '131', '132', '135', '142', '144', '147', '156', '163', '166', '170', '174', '175', '176', '177', '179', '180', '181', '183', '185', '188', '189', '191', '196', '197', '202', '207', '210', '212', '218', '221', '222', '223', '225', '229', '230', '237', '239', '246', '259', '267', '269', '270', '279', '283', '284', '285', '286', '288', '291', '292', '300', '301', '303', '306', '310', '320', '329', '337', '353', '363', '364', '371', '387', '390', '394', '404', '413', '428', '429', '442', '444', '455', '457', '458', '460', '477', '519', '524', '533', '558', '567', '574', '583', '613', '624', '643', '655', '689', '707', '791', '806', '814', '840', '883', '1010', '1022')));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic11
#argv <- list(structure(c(0, -0.0555555555555556, 0.02, 0.0625, 0.0625, 0.04, 0, 0), .Dim = c(8L, 1L), .Dimnames = list(c('2', '3', '6', '7', '8', '9', '14', '17'), 'x')));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic12
#argv <- list(structure(c(2.21843970753346, 1.80732678656753, -1.09399175987006, 0.585986462327552, -5.68458926982395, 1.23352238598674, 0.457950438444482, 2.51599006679516, -2.28780372840319, 5.53596062467695, 2.17890565095959, -1.59611751350773, -2.9672978602151, 0.745175851232308, 1.93388282434376, -3.03559459078455, 2.19500990255906, 0.0725275773318347, -0.75336064096447, -1.15505962102859, -2.84782886882524, -1.41070341448251, -0.540252474026749, 4.87719739781058, 0.890715639552621, -0.968642103099399, 1.73177156113283, -0.993218102309356, -0.656454198323984, -1.5299506933835, -0.298424468882268, 6.51011264717937, 2.68326774833378, 1.99295445531679, -0.214079422583434, 6.73505308264589, -4.54579214489424, -2.3991834444486, -1.71479569181251, -6.47293095421849, -1.67116930820449, -11.5853328029437, -2.48588878138021, -0.888857646918452, 8.06807102468956, -0.216046323028316, 6.24682938323398, -1.74761908105831, 2.53082303181417, 2.31410662801887, 2.97453294161523, -2.88723068649699, -1.04144266580674, -0.835536300630093, -6.10229135345437, -4.37605802846523, -1.94289029309402e-16, 5.96619037131792, -1.1474434665393, 3.78819830631063, -3.01580771910632, -0.656454198323984, 1.50824785799851, -2.06401783962239, -3.02346226775125, 0.407243897855763, -3.96478352340807, -2.12718621336067, -0.78924288871239, -3.03559459078455, 0.457950438444496, -0.797900839851943, -3.38233849466459, 1.97815029009903, 0.745175851232309, -1.09645503136389, 0.341748714147263, 7.32472922782987, -1.33672649241008, 1.51931399477032, 0.00590129163826772, -4.09533092706814, 0.195481697042187, -2.7736762657602, -3.48737543915568, 0.536312040203338, 0.775871729180551, 4.37979177946206, 1.30271070089245, 4.2132287611068, 7.33457656622414, 3.28311350719274, -1.30271070089245), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic13
#argv <- list(c(1, 0, 2, NA, 3));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic14
#argv <- list(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00566013786017473, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00900237050730269, -0.728901016108085, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.0165439610603712, 0.195986923200517, -0.65974257839475, 1, 0, 0, 0, 0, 0, 0, 0, -0.066085607580362, -0.0156976524162818, 0.173905017001082, -0.499536921684336, 1, 0, 0, 0, 0, 0, 0, -0.0738085645370442, -0.0203225592950423, -0.115986092442635, 0.0129919901272555, -0.442920654638837, 1, 0, 0, 0, 0, 0, 0.0393894522336503, -0.0197375262983596, -0.124011676515792, -0.217221939591068, -0.129869023991585, -0.565387274218169, 1, 0, 0, 0, 0, 0.0607863121945582, -0.0166644168652946, -0.107337280394758, -0.197961946387821, -0.278643450192551, -0.207586147284064, -0.767412521925717, 1, 0, 0, 0, 0.062350529551034, -0.00752786862124525, -0.0512212310455943, -0.0966787787982999, -0.13451920005707, -0.183723918913255, -0.15174930099133, -1.08016400642495, 1, 0, 0, 0.00956599068508591, -0.00134207672049057, -0.00895378984363029, -0.0175914048294707, -0.0252596683886793, -0.0334470581271047, -0.0623904491074943, 0.117178336161866, -1.32461347964996, 1, 0, -0.000288769768734922, -7.2526747819756e-05, -0.000396728614559744, -0.000760325293277726, -0.00119170347009929, -0.00158048211775626, -0.00256503558312322, -0.00605270851626604, 0.3995724375217, -0.740914424130097, 1));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic15
#argv <- list(structure(list(age = 62.4473684210526, age.strata.sex.sex.2 = 24.109649122807), .Names = c('age', 'age.strata.sex.sex.2'), row.names = c(NA, -1L), class = 'data.frame'));is.atomic(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic16
#argv <- list(structure(list(base = c(11L, 11L, 6L, 8L, 66L, 27L, 12L, 52L, 23L, 10L, 52L, 33L, 18L, 42L, 87L, 50L, 18L, 111L, 18L, 20L, 12L, 9L, 17L, 28L, 55L, 9L, 10L, 47L, 76L, 38L, 19L, 10L, 19L, 24L, 31L, 14L, 11L, 67L, 41L, 7L, 22L, 13L, 46L, 36L, 38L, 7L, 36L, 11L, 151L, 22L, 41L, 32L, 56L, 24L, 16L, 22L, 25L, 13L, 12L)), .Names = 'base', class = 'data.frame', row.names = c(1L, 5L, 9L, 13L, 17L, 21L, 25L, 29L, 33L, 37L, 41L, 45L, 49L, 53L, 57L, 61L, 65L, 69L, 73L, 77L, 81L, 85L, 89L, 93L, 97L, 101L, 105L, 109L, 113L, 117L, 121L, 125L, 129L, 133L, 137L, 141L, 145L, 149L, 153L, 157L, 161L, 165L, 169L, 173L, 177L, 181L, 185L, 189L, 193L, 197L, 201L, 205L, 209L, 213L, 217L, 221L, 225L, 229L, 233L)));is.atomic(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic17
#argv <- list(c(0, 0, 0, 0, 0, 0, 2.47032822920623e-323, 0, 0, 0, 0, 0));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic18
#argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic19
#argv <- list(c(NA, 'Ripley', 'Venables & Smith'));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic2
#argv <- list(structure(c(1, 2, 3, 0, 10, NA), .Dim = c(3L, 2L)));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic20
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic21
#argv <- list(structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts'));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic22
#argv <- list(structure(numeric(0), .Dim = c(4L, 0L)));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic24
#argv <- list(structure(c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L), .Label = c('freckle', 'superficial', 'nodular', 'indeterminate'), class = 'factor', contrasts = 'contr.treatment'));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic25
#argv <- list(raw(0));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic26
#argv <- list(c(19.7787405591752, 12504507.4953993, 12504507.4953993, 5.96190157728191e+41));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic27
#argv <- list(character(0));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic28
#argv <- list(structure(list(a1 = 1:3, a2 = 4:6, a3 = 3.14159265358979, a4 = c('a', 'b', 'c')), .Names = c('a1', 'a2', 'a3', 'a4')));is.atomic(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic29
#argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = 'factor'));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic3
#argv <- list(structure(list(x = 1:10, yyy = 11:20), .Names = c('x', 'yyy'), row.names = c(NA, -10L), class = 'data.frame'));is.atomic(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic30
#argv <- list(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic31
#argv <- list(c(2L, 1L, NA));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic4
#argv <- list(c(-1.12778377684043, -12820.0784261145, -21650982809.6744, -473300382255715392, -6.08456909882282e+25, -3.04622557026196e+34, -4.60125024792566e+43, -1.76183826972506e+53, -1.5069799345972e+63, -2.61556777274611e+73, -8.54170618068872e+83, -4.9383857330861e+94, -4.80716085942859e+105, -7.55412056676629e+116, -1.84898368353639e+128, -6.83535188151783e+139, -3.71562599613334e+151, -2.90089508183654e+163, -3.18582547396557e+175, -4.83110332887119e+187, -9.94902790498679e+199, -2.74100158340596e+212, -9.96611412047338e+224, -4.72336572671053e+237, -2.88514442494869e+250, -2.24780296109123e+263, -2.21240023126594e+276, -2.72671165723473e+289, -4.17369555651928e+302, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic5
#argv <- list(c(2.5, 6, 6, 7.5, 8, 8, 16, 6, 5, 6, 28, 5, 9.5, 6, 4.5, 10, 14, 3, 4.5, 5.5, 3, 3.5, 6, 2, 3, 4, 6, 5, 6.5, 5, 10, 6, 18, 4.5, 20));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic6
#argv <- list(structure(c(1, 2, 2, 3, 3, 3, 4, 5), .Names = c('dsyMatrix', 'ddenseMatrix', 'symmetricMatrix', 'dMatrix', 'denseMatrix', 'compMatrix', 'Matrix', 'mMatrix')));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic7
#argv <- list(c(-Inf, -Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic8
#argv <- list(structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisatomic.testisatomic9
#argv <- list(structure(c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')));is.atomic(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter1
#argv <- list('pch');is.character(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter10
#argv <- list('\'class\' is a reserved slot name and cannot be redefined');do.call('is.character', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter2
#argv <- list(structure(list(mai = c(0.51, 0.41, 0.41, 0.21), mar = c(5.1, 4.1, 4.1, 2.1), cex = 1, yaxs = 'r'), .Names = c('mai', 'mar', 'cex', 'yaxs')));is.character(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter3
#argv <- list(structure(list(usr = c(-0.04, 1.04, -0.04, 1.04), mgp = c(3, 1, 0)), .Names = c('usr', 'mgp')));is.character(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter4
#argv <- list(c(-1, 1, -1, 1));is.character(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter5
#argv <- list(structure(list(usr = c(-4.82721591443179, -1.44459960821772, -4.82721591443179, -1.44459960821772)), .Names = 'usr'));is.character(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter6
#argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.character(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter7
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.character(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinischaracter.testischaracter8
#argv <- list(structure(c(238L, 154L, 73L), .Dim = c(3L, 1L), .Dimnames = list(c('red', 'green', 'blue'), NULL)));is.character(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltiniscomplex.testiscomplex1
#argv <- list(integer(0));is.complex(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltiniscomplex.testiscomplex2
#argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.complex(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltiniscomplex.testiscomplex5
#argv <- list(1.3+0i);is.complex(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltiniscomplex.testiscomplex6
#argv <- list(complex(0));is.complex(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltiniscomplex.testiscomplex7
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.complex(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisdouble.testisdouble1
#argv <- list(list(1, list(3, 'A')));is.double(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisdouble.testisdouble3
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.double(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisdouble.testisdouble4
#argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.double(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisdouble.testisdouble7
#argv <- list(structure(c(1, 5, 9, 13, 17, 21, 2, 6, 10, 14, 18,     22, 3, 7, 11, 15, 19, 23, 4, 8, 12, 16, 20, 24), .Dim = c(6L,     4L)));do.call('is.double', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment1
#argv <- list(structure(list(B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor'), Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L)), .Names = c('B', 'V', 'N', 'Y'), row.names = 2:72, class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment10
#argv <- list(structure(list(breaks = c(26, 30, 54, 25, 70, 52, 51, 26, 67, 18, 21, 29, 17, 12, 18, 35, 30, 36, 36, 21, 24, 18, 10, 43, 28, 15, 26, 27, 14, 29, 19, 29, 31, 41, 20, 44, 42, 26, 19, 16, 39, 28, 21, 39, 29, 20, 21, 24, 17, 13, 15, 15, 16, 28), wool = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('A', 'B'), class = 'factor'), tension = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('L', 'M', 'H'), class = 'factor')), .Names = c('breaks', 'wool', 'tension'), row.names = c(NA, -54L), class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment11
#argv <- list(structure(list(y = c(0.219628047744843, 0.360454661130887, NA, 0.114681204747219, -1.14267533343616, 0.772374419482067, 0.681741904304867, 0.171869265068012, 2.08409180391906, 0.367547276775469), x1 = c(1L, 2L, 3L, NA, 5L, 6L, 7L, 8L, 9L, 10L), x2 = 1:10, x3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), wt = c(0, 1, 1, 1, 1, 1, 1, 1, 1, 1)), .Names = c('y', 'x1', 'x2', 'x3', 'wt'), row.names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment12
#argv <- list(structure(list(x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861)), .Names = c('x', 'y'), row.names = c(NA, -10L), class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment13
#argv <- list(structure(list(weight = c(1.9, 3.1, 3.3, 4.8, 5.3, 6.1, 6.4, 7.6, 9.8, 12.4), depression = c(2, 1, 5, 5, 20, 20, 23, 10, 30, 25)), .Names = c('weight', 'depression'), row.names = c(NA, -10L), class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment14
#argv <- list(structure(list(loglik = c(-577.080015666702, -568.702653976085, -567.639101463216, -565.252511135152), Chisq = c(NA, 16.7547233812336, 2.12710502573896, 4.77318065612872), Df = c(NA, 1, 1, 3), `Pr(>|Chi|)` = c(NA, 4.25362427346476e-05, 0.144713844418628, 0.189179603743297)), .Names = c('loglik', 'Chisq', 'Df', 'Pr(>|Chi|)'), row.names = c('NULL', 'ph.ecog', 'wt.loss', 'poly(age, 3)'), class = c('anova', 'data.frame'), heading = 'Analysis of Deviance Table\n Cox model: response is Surv(time, status)\nTerms added sequentially (first to last)\n'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment16
#argv <- list(numeric(0));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment2
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment3
#argv <- list(structure(list(ID = c(65L, 65L), Age = c(18L, 18L), OME = structure(c(1L, 1L), .Label = c('N/A', 'high', 'low'), class = 'factor'), Loud = c(35L, 50L), Noise = structure(c(2L, 2L), .Label = c('coherent', 'incoherent'), class = 'factor'), Correct = 0:1, Trials = c(1L, 1L), UID = c(71L, 71L), UIDn = c(71.1, 71.1)), .Names = c('ID', 'Age', 'OME', 'Loud', 'Noise', 'Correct', 'Trials', 'UID', 'UIDn'), row.names = c(691L, 701L), class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment4
#argv <- list(c(1.21066831870929-1.66634219937781i, -1.3109785475009-4.03477541783013i, -8.31047673770943-2.70023589529419i, -14.5607479203187+10.5790080335186i, 0.0000113099668+37.0708585836817i, 61.7727497177743+44.8804951883406i, 149.572574104172-48.599145973822i, 100.099969025816-308.076538446181i, -392.173075447774-539.779307378543i, -1374.2485561312+0.00083854036i, -1663.75779164483+2289.96937670968i, 1801.61375934412+5544.78319295828i, 11420.6629218159+3710.7883116515i, 20010.0779347631-14538.198725138i, -0.0466281166-50944.5738831589i, -84891.1497420117-61676.9039120865i, -205549.85324714+66787.431606375i, -137561.979567894+423373.822075425i, 538943.735314369+741790.604941508i, 1888559.09402798-2.30472576i));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment5
#argv <- list(structure(c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(5L, 5L)));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment6
#argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment7
#argv <- list(structure(c(1+0i, 5+0i, 9+0i, 13+0i, 17+0i, 21+0i, 2+0i, 6+0i, 10+0i, 14+0i, 18+0i, 22+0i, 3+0i, 7+0i, 11+0i, 15+0i, 19+0i, 23+0i, 4+0i, 8+0i, 12+0i, 16+0i, 20+0i, 24+0i), .Dim = c(6L, 4L)));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment8
#argv <- list(structure(list(z = c(-3.32814298919898, -2.50040106767383, -1.77388580318944, -1.1253131847654, -0.538436159302777, 0, 0.494272294062615, 0.955576378633541, 1.38763151510367, 1.79457990658358, 2.17975641634868, 2.54588157879649, 2.89520069061619), par.vals = structure(c(14.1116522107389, 16.2879401909036, 18.4642281710683, 20.640516151233, 22.8168041313977, 24.9930921115624, 27.1693800917271, 29.3456680718919, 31.5219560520566, 33.6982440322213, 35.874532012386, 38.0508199925507, 40.2271079727154, 9.77292620586829, 6.94555751970939, 5.3344468962477, 4.29948550876711, 3.58192055542193, 3.05706219239734, 2.6578922832996, 2.34490705796319, 2.09354140228955, 1.88766190416604, 1.71625883349025, 1.57157057930468, 1.44797941211333), .Dim = c(13L, 2L), .Dimnames = list(NULL, c('ymax', 'xhalf')))), .Names = c('z', 'par.vals'), row.names = c(NA, -13L), class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisenvironment.testisenvironment9
#argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'));is.environment(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression1
#argv <- list(c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression10
#argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression11
#argv <- list(structure(list(var = structure(c(3L, 5L, 3L, 1L, 1L, 1L, 3L, 4L, 1L, 2L, 1L, 1L, 1L), .Label = c('<leaf>', 'frost', 'life.exp', 'population', 'region'), class = 'factor'), n = c(50L, 21L, 13L, 10L, 3L, 8L, 29L, 21L, 4L, 17L, 9L, 8L, 8L), wt = c(50, 21, 13, 10, 3, 8, 29, 21, 4, 17, 9, 8, 8), dev = c(667.7458, 87.3866666666667, 18.8523076923077, 6.989, 2.84666666666667, 28.2, 222.311724137931, 116.909523809524, 10.18, 50.8823529411765, 24.24, 11.62, 14.415), yval = c(7.378, 4.23333333333333, 3.14615384615385, 2.69, 4.66666666666667, 6, 9.6551724137931, 8.56190476190476, 5.2, 9.35294117647059, 8.46666666666667, 10.35, 12.525), complexity = c(0.536203161735203, 0.0604037628905475, 0.0135031040639133, 0.00508384221318095, 0.01, 0.01, 0.136260236048519, 0.0836353757198433, 0.01, 0.0224971133344103, 0.01, 0.01, 0.01), ncompete = c(4L, 4L, 4L, 0L, 0L, 0L, 4L, 4L, 0L, 4L, 0L, 0L, 0L), nsurrogate = c(5L, 4L, 1L, 0L, 0L, 0L, 4L, 3L, 0L, 5L, 0L, 0L, 0L)), .Names = c('var', 'n', 'wt', 'dev', 'yval', 'complexity', 'ncompete', 'nsurrogate'), row.names = c(1L, 2L, 4L, 8L, 9L, 5L, 3L, 6L, 12L, 13L, 26L, 27L, 7L), class = 'data.frame'));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression12
#argv <- list(structure(c(1, 24.25, 56.5, 56.92771, 86.75, 117), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression13
#argv <- list(1.79769313486232e+308);is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression14
#argv <- list(c(1.1+0i, NA, 3+0i));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression15
#argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression16
#argv <- list(structure(c('***', '***', '*', '*'), legend = '0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1', class = 'noquote'));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression17
#argv <- list(structure(c(-0.0880891704401362, -0.508170309402877, -0.00510235947825228, 0.0737329622006759), .Names = c('(Intercept)', 'x1', 'z', 'x1:z')));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression18
#argv <- list(structure(c(-Inf, -Inf, -2.248e+263, -Inf, -3.777e+116, -1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression2
#argv <- list(structure(list(class = c('ordered', 'factor'), levels = character(0)), .Names = c('class', 'levels')));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression20
#argv <- list(c(-0.5, -0.47979797979798, -0.45959595959596, -0.439393939393939, -0.419191919191919, -0.398989898989899, -0.378787878787879, -0.358585858585859, -0.338383838383838, -0.318181818181818, -0.297979797979798, -0.277777777777778, -0.257575757575758, -0.237373737373737, -0.217171717171717, -0.196969696969697, -0.176767676767677, -0.156565656565657, -0.136363636363636, -0.116161616161616, -0.0959595959595959, -0.0757575757575757, -0.0555555555555555, -0.0353535353535353, -0.0151515151515151, 0.00505050505050508, 0.0252525252525253, 0.0454545454545455, 0.0656565656565657, 0.0858585858585859, 0.106060606060606, 0.126262626262626, 0.146464646464647, 0.166666666666667, 0.186868686868687, 0.207070707070707, 0.227272727272727, 0.247474747474748, 0.267676767676768, 0.287878787878788, 0.308080808080808, 0.328282828282828, 0.348484848484849, 0.368686868686869, 0.388888888888889, 0.409090909090909, 0.429292929292929, 0.44949494949495, 0.46969696969697, 0.48989898989899, 0.51010101010101, 0.53030303030303, 0.550505050505051, 0.570707070707071, 0.590909090909091, 0.611111111111111, 0.631313131313131, 0.651515151515152, 0.671717171717172, 0.691919191919192, 0.712121212121212, 0.732323232323232, 0.752525252525253, 0.772727272727273, 0.792929292929293, 0.813131313131313, 0.833333333333333, 0.853535353535354, 0.873737373737374, 0.893939393939394, 0.914141414141414, 0.934343434343434, 0.954545454545455, 0.974747474747475, 0.994949494949495, 1.01515151515152, 1.03535353535354, 1.05555555555556, 1.07575757575758, 1.0959595959596, 1.11616161616162, 1.13636363636364, 1.15656565656566, 1.17676767676768, 1.1969696969697, 1.21717171717172, 1.23737373737374, 1.25757575757576, 1.27777777777778, 1.2979797979798, 1.31818181818182, 1.33838383838384, 1.35858585858586, 1.37878787878788, 1.3989898989899, 1.41919191919192, 1.43939393939394, 1.45959595959596, 1.47979797979798, 1.5));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression21
#argv <- list(structure(list(dim = 1L, dimnames = list('a')), .Names = c('dim', 'dimnames')));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression22
#argv <- list(structure(c(NA, 6346.2), .Names = c('1', '2')));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression23
#argv <- list(3.97376540705816e-12);is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression25
#argv <- list(expression(quote(expression(b = pi^3))));do.call('is.expression', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression3
#argv <- list(c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression4
#argv <- list(structure(list(nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('nationality', 'deceased', 'title', 'other.author'), class = 'data.frame', row.names = c(NA, -6L)));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression5
#argv <- list(structure(c('Min.   :10.00  ', '1st Qu.:15.25  ', 'Median :20.50  ', 'Mean   :21.67  ', '3rd Qu.:25.50  ', 'Max.   :43.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool'))));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression6
#argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression7
#argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression8
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisexpression.testisexpression9
#argv <- list(structure(3.14159265358979, .Tsp = c(1, 1, 1), class = 'ts'));is.expression(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfactor.testisfactor1
#argv <- structure(list(x = c(TRUE, TRUE, TRUE, TRUE, FALSE, FALSE,     FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE,     FALSE, FALSE, FALSE, FALSE, FALSE)), .Names = 'x');do.call('is.factor', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite1
#argv <- list(c(20.1635649375266, 0.00464806897188935, 7.66871331765456, 12.5627629785965, 11.5797681339384, 12.9719582729673, 25.2769526097163, -1.81739378653632, 0.81215865601413, -3.83170645669318, -0.246853801421158, 3.46135095276697, 2.4554639832607, -3.21187324485145, -3.0183971859156));is.finite(argv[[1]]);
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite11
#argv <- list(3.18309886183776e-301);is.finite(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite12
#argv <- list(c(0.0599, 0.00599, 0.000599, 5.99e-05, 5.99e-06, 5.99e-07));is.finite(argv[[1]]);
[1] TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite15
#argv <- list(c(0.0099, 0.099, 0.99, 9.9, 99, 990, 9900, 99000, 990000, 9900000, 9.9e+07, 9.9e+08, 9.9e+09, 9.9e+10));is.finite(argv[[1]]);
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite18
#argv <- list(structure(1, .Tsp = c(1, 1, 1), class = 'ts'));is.finite(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite2
#argv <- list(c(NA, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100));is.finite(argv[[1]]);
  [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [49]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [61]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [97]  TRUE  TRUE  TRUE  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite21
#argv <- list(c(1.86606598307361, 339033474310168, 6.15968019059533e+28, 1.11911250438065e+43, 2.03324321833028e+57, 3.69406826275609e+71, 6.71151400229846e+85, 1.21937162496937e+100, 2.2153975381282e+114, 4.02501267984465e+128, 7.31278553581751e+142, 1.32861276588395e+157, 2.41387071044804e+171, 4.38560576593759e+185, 7.96792382084694e+199, 1.44764060891943e+214, 2.63012470966353e+228, 4.77850368783602e+242, 8.6817546752692e+256, 1.57733192575377e+271));is.finite(argv[[1]]);
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite25
#argv <- list(structure(c(13991, 13995), class = 'Date'));is.finite(argv[[1]]);
[1] TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite4
#argv <- list(151.670620533678);is.finite(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite5
#argv <- list(c(NA, 5, 9, 1, 2, 5, 6, 7, 8, 3, 8));is.finite(argv[[1]]);
 [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfinite.testisfinite7
#argv <- list(c(3.16233404821525, 0.257188565034331, -0.453229834209339, 0.242190153165057, -0.923637244637281, -0.792686406797337, -0.000583432444331871, -0.115409318984254, 0.305847927531439, 0.0246693430266492, 0.461347310132161, -0.236100949717949, 0.28892702011061, -0.134702428025256, -0.00354133265015019, -0.239319416508562, -0.657338306370259, 0.617201588652923, 0.864066808989359, 0.903680787204032, 0.524476724719486, 1.12851069606821, -0.0690532444696005, 0.111965689984579, -0.494558736384601, -0.26678456955063, -0.953423764504691, 0.0388401464034938, -0.280977489674148, -0.0317343673308523, 0.332270617799988, -0.0953997363217814));is.finite(argv[[1]]);
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[31] TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction1
#argv <- list(function (x, y) {    c(x, y)});is.function(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction10
#argv <- list(structure(c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(5L, 5L)));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction11
#argv <- list(c(0.2853725+0.3927816i, -0.07283992154231+0.224178134292i, -0.10883955678256+0.035364093700981i, -0.0449501817243521-0.0326582354266614i, 8.2299281e-09-2.69753665872767e-02i, 0.0105954299973322-0.0076980245688633i, 0.00604728675391113+0.00196488543076221i, 0.00095395849586903+0.00293598723445021i, -0.00088096824266454+0.00121254736140417i, -7.27670402517897e-04-4.44010655e-10i, -2.07656947543323e-04-2.85815671682054e-04i, 5.3003554565545e-05-1.6312776087427e-04i, 7.9199339795869e-05-2.57333559721505e-05i, 3.27089023280074e-05+2.37644512768026e-05i, -1.79660253e-11+1.96291758626278e-05i, -7.70998422901389e-06+5.60161993213361e-06i, -4.4004307139296e-06-1.42979165736404e-06i, -6.9416605906477e-07-2.13643143624753e-06i, 6.4105505412914e-07-8.82334435385704e-07i, 5.29504214700362e-07+6.46186824e-13i));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction12
#argv <- list(structure(c(9, 13, 13, 18, 23, 28, 31, 34, 45, 48, 161, 5, 5, 8, 8, 12, 16, 23, 27, 30, 33, 43, 45, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1), .Dim = c(23L, 2L), .Dimnames = list(NULL, c('time', 'status')), type = 'right', class = 'Surv'));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction13
#argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction14
#argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, -10L), class = 'data.frame'));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction17
#argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = c('ordered', 'factor')));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction18
#argv <- list(structure(list(usr = c(0.568, 1.432, -1.08, 1.08), xaxp = c(0.6, 1.4, 4), yaxp = c(-1, 1, 4)), .Names = c('usr', 'xaxp', 'yaxp')));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction19
#argv <- list(structure(list(double.eps = 2.22044604925031e-16, double.neg.eps = 1.11022302462516e-16, double.xmin = 2.2250738585072e-308, double.xmax = 1.79769313486232e+308, double.base = 2L, double.digits = 53L, double.rounding = 5L, double.guard = 0L, double.ulp.digits = -52L, double.neg.ulp.digits = -53L, double.exponent = 11L, double.min.exp = -1022L, double.max.exp = 1024L, integer.max = 2147483647L, sizeof.long = 8L, sizeof.longlong = 8L, sizeof.longdouble = 16L, sizeof.pointer = 8L), .Names = c('double.eps', 'double.neg.eps', 'double.xmin', 'double.xmax', 'double.base', 'double.digits', 'double.rounding', 'double.guard', 'double.ulp.digits', 'double.neg.ulp.digits', 'double.exponent', 'double.min.exp', 'double.max.exp', 'integer.max', 'sizeof.long', 'sizeof.longlong', 'sizeof.longdouble', 'sizeof.pointer')));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction2
#argv <- list(c('a', 'b', NA, NA, NA, 'f', 'g', 'h', 'i', 'j', 'k', 'l'));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction20
#argv <- list(structure(list(extra = c(0.7, -1.6, -0.2, -1.2, -0.1, 3.4, 3.7, 0.8, 0, 2, 1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 5.5, 1.6, 4.6, 3.4), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('1', '2'), class = 'factor'), ID = structure(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L), .Label = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), class = 'factor')), .Names = c('extra', 'group', 'ID'), row.names = c(NA, -20L), class = 'data.frame'));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction25
#argv <- list(structure(list(platform = 'x86_64-unknown-linux-gnu',     arch = 'x86_64', os = 'linux-gnu', system = 'x86_64, linux-gnu',     status = '', major = '3', minor = '1.1', year = '2014', month = '07',     day = '10', `svn rev` = '66115', language = 'R', version.string = 'R version 3.1.1 (2014-07-10)',     nickname = 'Sock it to Me'), .Names = c('platform', 'arch',     'os', 'system', 'status', 'major', 'minor', 'year', 'month',     'day', 'svn rev', 'language', 'version.string', 'nickname'),     class = 'simple.list'));do.call('is.function', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction29
#argv <- list(function(x, i, ...) structure(NextMethod('['), class = class(x)));do.call('is.function', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction3
#argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction32
#argv <- list(function(cpu = Inf, elapsed = Inf, transient = FALSE) .Internal(setTimeLimit(cpu,     elapsed, transient)));do.call('is.function', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction4
#argv <- list(structure(c(1, 0.341108926893721, 7.03552967282433, 0.0827010685995216, 2.31431632448833, 2.09774421189194, 17.4719768806091, 0.00710660186854106, 0.341108926893721, 6.24415190746514, 0.0686360870302571, 2.93161486304804, 1, 20.6254633582673, 0.242447681896313, 6.78468413466471, 6.14977811045541, 51.2211071100253, 0.02083381966358, 1, 18.3054485390546, 0.201214572879361, 0.142135709250525, 0.0484837592557245, 1, 0.0117547750411693, 0.328946992211217, 0.298164361383444, 2.48339182593415, 0.00101010189694619, 0.0484837592557245, 0.887516960035576, 0.00975563891022635, 12.0917421858535, 4.12460120129202, 85.071810944714, 1, 27.984116332225, 25.3653821820638, 211.266639917518, 0.0859311976119033, 4.12460120129202, 75.5026750343739, 0.829929869015672, 0.432093050296869, 0.147390796704999, 3.04000347678479, 0.0357345569939779, 1, 0.906420695258988, 7.54951978505874, 0.00307071327862333, 0.147390796704999, 2.69805464421362, 0.0296571762053451, 0.476702542822467, 0.16260749282968, 3.35385488513828, 0.0394238096955273, 1.10324047677913, 1, 8.32893580712171, 0.00338773518156042, 0.16260749282968, 2.97660309205839, 0.0327189972167077, 0.0572345079685763, 0.0195232015944512, 0.402675079122419, 0.00473335496976909, 0.132458756115733, 0.120063357811564, 1, 0.000406742861274512, 0.0195232015944512, 0.357380962104814, 0.00392835267006514, 140.714228614202, 47.998879521268, 989.999130803802, 11.6372170735519, 325.65723636963, 295.182458606281, 2458.55574912007, 1, 47.998879521268, 878.641019008853, 9.65807404155984, 2.93161486304804, 1, 20.6254633582673, 0.242447681896313, 6.78468413466471, 6.14977811045541, 51.2211071100253, 0.02083381966358, 1, 18.3054485390546, 0.201214572879361, 0.160149851384054, 0.0546285439478035, 1.12673903151092, 0.0132445638455158, 0.370637415422497, 0.335953423776254, 2.79813450081517, 0.00113812123309249, 0.0546285439478035, 1, 0.0109920591374787, 14.5695951396408, 4.96981896335886, 102.50481892598, 1.20492108711069, 33.7186518728567, 30.5632838737905, 254.559629439639, 0.103540312043258, 4.96981896335886, 90.9747652821832, 1), .Dim = c(11L, 11L), .Dimnames = list(c('ATS', 'BEF', 'DEM', 'ESP', 'FIM', 'FRF', 'IEP', 'ITL', 'LUF', 'NLG', 'PTE'), c('ATS', 'BEF', 'DEM', 'ESP', 'FIM', 'FRF', 'IEP', 'ITL', 'LUF', 'NLG', 'PTE'))));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction5
#argv <- list(structure(c(1+0i, 5+0i, 9+0i, 13+0i, 17+0i, 21+0i, 2+0i, 6+0i, 10+0i, 14+0i, 18+0i, 22+0i, 3+0i, 7+0i, 11+0i, 15+0i, 19+0i, 23+0i, 4+0i, 8+0i, 12+0i, 16+0i, 20+0i, 24+0i), .Dim = c(6L, 4L)));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction6
#argv <- list(structure(list(Df = c(1L, 7L), `Sum Sq` = c(158.407612694902, 204.202165082876), `Mean Sq` = c(158.407612694902, 29.1717378689823), `F value` = c(5.43017400630538, NA), `Pr(>F)` = c(0.052592726218915, NA)), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), row.names = c('depression', 'Residuals'), class = c('anova', 'data.frame'), heading = c('Analysis of Variance Table\n', 'Response: weight')));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction7
#argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction8
#argv <- list(structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166, 171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194, 196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201, 204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 229, 242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432), .Tsp = c(1949, 1960.91666666667, 12), class = 'ts'));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisfunction.testisfunction9
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.function(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger1
#argv <- list(2.74035772634541);is.integer(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger11
#argv <- list(c(1L, 0L, NA, 1L));do.call('is.integer', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger2
#argv <- list(c(NA, 9, 3, 3));is.integer(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger3
#argv <- list(c(NA, 0L));is.integer(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger4
#argv <- list(c(NA, -4.19095158576965e-09));is.integer(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger5
#argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.integer(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger6
#argv <- list(c(-0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6));is.integer(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger7
#argv <- list(c(NA, 1L));is.integer(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger8
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.integer(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisinteger.testisinteger9
#argv <- list(structure(c(1, 1, 1, 1, 1, 1), .Dim = 1:3));is.integer(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage1
#argv <- list(c(3.14159265358988, 3.14159265358988, 3.14159265358983, 3.14159265358982, 3.14159265358974, 3.14159265358989, 3.14159265358976, 3.14159265358993, 3.14159265358997, 3.14159265358984, 3.14159265358969, 3.14159265358989, 3.14159265358977, 3.14159265358964, 3.14159265358982, 3.14159265358969, 3.14159265358968, 3.1415926535898, 3.14159265358961, 3.14159265358967, 3.14159265358983, 3.14159265358997, 3.14159265358987, 3.14159265358995, 3.14159265358992, 3.14159265358996, 3.14159265358965, 3.14159265358964, 3.14159265358997, 3.14159265358968, 3.14159265358995, 3.14159265358961, 3.14159265358993, 3.14159265358985, 3.14159265358996, 3.14159265358964, 3.1415926535898, 3.1415926535896, 3.14159265358964, 3.14159265358994, 3.14159265358964, 3.14159265358962, 3.14159265358985, 3.14159265358962, 3.14159265358977, 3.14159265358973, 3.14159265358969, 3.14159265358987, 3.14159265358978, 3.14159265358965, 3.14159265358991, 3.14159265358997, 3.14159265358979, 3.1415926535897, 3.14159265358974, 3.14159265358977, 3.14159265358985, 3.14159265358982, 3.14159265358981, 3.14159265358984, 3.14159265358991, 3.14159265358989, 3.14159265358978, 3.14159265358967, 3.1415926535899, 3.14159265358998, 3.14159265358992, 3.14159265358972, 3.14159265358984, 3.14159265358974, 3.14159265358969, 3.14159265358984, 3.14159265358983, 3.14159265358995, 3.14159265358963, 3.14159265358996, 3.14159265358976, 3.14159265358973, 3.14159265358995, 3.14159265358965, 3.14159265358966, 3.1415926535898, 3.14159265358965, 3.14159265358992, 3.14159265358959, 3.14159265358988, 3.14159265358988, 3.14159265358974, 3.14159265358994, 3.14159265358996, 3.1415926535897, 3.14159265358973, 3.14159265358971, 3.14159265358986, 3.14159265358998, 3.14159265358984, 3.14159265358988, 3.1415926535896, 3.1415926535897, 3.14159265358985, 3.14159265358983));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage10
#argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage11
#argv <- list(numeric(0));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage13
#argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage14
#argv <- list(c(NA, NA, 0, NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, NA, NA, NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage15
#argv <- list(c(3L, 3L, NA, 3L, 4L, 3L, NA, 3L, 3L, 3L, 3L, 2L, 3L, 3L, 4L, 3L, 2L, 2L, 3L, 5L, 2L, 2L, 2L, 4L, 3L, 3L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 3L, 4L, 3L, 3L, 4L, 3L, 1L, 3L, 3L, 5L, 3L, NA, 2L, 4L, 1L, 3L, 3L, NA, 2L, 5L, 3L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 4L, 4L, NA, 3L, 5L, 5L, 5L, 5L, 4L, 5L, 4L, 4L, 5L));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage16
#argv <- list(structure(list(nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('nationality', 'deceased', 'title', 'other.author'), class = 'data.frame', row.names = c(NA, -6L)));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage17
#argv <- list(structure(list(x = c(0.3, 3.6, 6.2, 3.8, 3.1, 4.1, 6), y = c(6.1, 6.2, 5.2, 2.3, 1.1, 0.8, 0.1)), .Names = c('x', 'y'), row.names = c(1L, 4L, 12L, 31L, 37L, 48L, 50L), class = 'data.frame'));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage18
#argv <- list(c('1', '2', NA));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage19
#argv <- list(structure(c(9, 13, 13, 18, 23, 28, 31, 34, 45, 48, 161, 5, 5, 8, 8, 12, 16, 23, 27, 30, 33, 43, 45, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1), .Dim = c(23L, 2L), .Dimnames = list(NULL, c('time', 'status')), type = 'right', class = 'Surv'));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage2
#argv <- list(structure(cim = 16:17));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage20
#argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage21
#argv <- list(integer(0));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage23
#argv <- list(c(0.568, 1.432, -1.08, 1.08));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage24
#argv <- list('«Latin-1 accented chars»: éè øØ å<Å æ<Æ');is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage3
#argv <- list(structure(c(-5.96781464124519, -6.49437440734601, -3.09795335180399, -6.0516983940436, 2.94181419227242, 1.32243907887975, -6.14000748997388, -1.17705131190311), .Dim = c(4L, 2L), .Dimnames = list(c('Murder', 'Assault', 'UrbanPop', 'Rape'), c('PC1', 'PC2'))));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage4
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage6
#argv <- list(1.79769313486232e+308);is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage7
#argv <- list(c('2001-01-01', NA, NA, '2004-10-26'));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage8
#argv <- list(c(0+0i, 0.00809016994374947-0.00587785252292473i, 0.0161803398874989-0.0117557050458495i, 0.0242705098312484-0.0176335575687742i, 0.0323606797749979-0.0235114100916989i, 0.0404508497187474-0.0293892626146237i, 0.0485410196624968-0.0352671151375484i, 0.0566311896062463-0.0411449676604731i, 0.0647213595499958-0.0470228201833979i, 0.0728115294937453-0.0529006727063226i, 0.0809016994374947-0.0587785252292473i, 0.0889918693812442-0.0646563777521721i, 0.0970820393249937-0.0705342302750968i, 0.105172209268743-0.076412082798022i, 0.113262379212493-0.082289935320946i, 0.121352549156242-0.088167787843871i, 0.129442719099992-0.094045640366796i, 0.137532889043741-0.09992349288972i, 0.14562305898749-0.105801345412645i, 0.15371322893124-0.11167919793557i, 0.16180339887499-0.117557050458495i, 0.169893568818739-0.123434902981419i, 0.177983738762488-0.129312755504344i, 0.186073908706238-0.135190608027269i, 0.194164078649987-0.141068460550194i, 0.202254248593737-0.146946313073118i, 0.210344418537486-0.152824165596043i, 0.218434588481236-0.158702018118968i, 0.226524758424985-0.164579870641893i, 0.234614928368735-0.170457723164817i, 0.242705098312484-0.176335575687742i, 0.250795268256234-0.182213428210667i, 0.258885438199983-0.188091280733591i, 0.266975608143733-0.193969133256516i, 0.275065778087482-0.199846985779441i, 0.283155948031232-0.205724838302366i, 0.291246117974981-0.21160269082529i, 0.29933628791873-0.217480543348215i, 0.30742645786248-0.22335839587114i, 0.315516627806229-0.229236248394065i, 0.323606797749979-0.235114100916989i, 0.331696967693728-0.240991953439914i, 0.339787137637478-0.246869805962839i, 0.347877307581227-0.252747658485764i, 0.355967477524977-0.258625511008688i, 0.364057647468726-0.264503363531613i, 0.372147817412476-0.270381216054538i, 0.380237987356225-0.276259068577462i, 0.388328157299975-0.282136921100387i, 0.396418327243724-0.288014773623312i, 0.404508497187474-0.293892626146237i, 0.412598667131223-0.299770478669161i, 0.420688837074973-0.305648331192086i, 0.428779007018722-0.311526183715011i, 0.436869176962472-0.317404036237936i, 0.444959346906221-0.32328188876086i, 0.453049516849971-0.329159741283785i, 0.46113968679372-0.33503759380671i, 0.469229856737469-0.340915446329634i, 0.477320026681219-0.346793298852559i, 0.485410196624968-0.352671151375484i, 0.493500366568718-0.358549003898409i, 0.501590536512467-0.364426856421333i, 0.509680706456217-0.370304708944258i, 0.517770876399966-0.376182561467183i, 0.525861046343716-0.382060413990108i, 0.533951216287465-0.387938266513032i, 0.542041386231215-0.393816119035957i, 0.550131556174964-0.399693971558882i, 0.558221726118714-0.405571824081807i, 0.566311896062463-0.411449676604731i, 0.574402066006213-0.417327529127656i, 0.582492235949962-0.423205381650581i, 0.590582405893712-0.429083234173506i, 0.598672575837461-0.43496108669643i, 0.60676274578121-0.440838939219355i, 0.61485291572496-0.44671679174228i, 0.62294308566871-0.452594644265205i, 0.631033255612459-0.458472496788129i, 0.639123425556208-0.464350349311054i, 0.647213595499958-0.470228201833979i, 0.655303765443707-0.476106054356903i, 0.663393935387457-0.481983906879828i, 0.671484105331206-0.487861759402753i, 0.679574275274956-0.493739611925678i, 0.687664445218705-0.499617464448602i, 0.695754615162455-0.505495316971527i, 0.703844785106204-0.511373169494452i, 0.711934955049954-0.517251022017377i, 0.720025124993703-0.523128874540301i, 0.728115294937453-0.529006727063226i, 0.736205464881202-0.534884579586151i, 0.744295634824952-0.540762432109075i, 0.752385804768701-0.546640284632i, 0.76047597471245-0.552518137154925i, 0.7685661446562-0.55839598967785i, 0.77665631459995-0.564273842200774i, 0.784746484543699-0.570151694723699i, 0.792836654487448-0.576029547246624i, 0.800926824431198-0.581907399769549i, 0.809016994374947-0.587785252292473i));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislanguage.testislanguage9
#argv <- list(structure(c(-0.148741651280925, -0.200659450546418, -0.0705810742857073, -0.356547323513813, -0.214670164989233, -0.161150909262745, -0.0362121726544447, -0.259637310505756, -0.142667503568732, -0.113509274827518, -0.0362121726544447, -0.221848749616356, -0.0809219076239261, -0.0969100130080564, 0, -0.113509274827518, -0.0362121726544447, 0, 0.0934216851622351, 0, 0.0644579892269184, 0.113943352306837, 0.161368002234975, 0.0969100130080564, 0.100370545117563, 0.139879086401236, 0.269512944217916, 0.193124598354462, 0.184691430817599, 0.201397124320452, 0.262451089730429, 0.269512944217916, 0.184691430817599, 0.315970345456918, 0.369215857410143, 0.352182518111362, 0.334453751150931, 0.385606273598312, 0.431363764158987, 0.352182518111362, 0.445604203273598, 0.534026106056135, 0.56702636615906, 0.556302500767287, 0.556302500767287, 0.635483746814912, 0.635483746814912, 0.607455023214668, 0.686636269262293, 0.702430536445525, 0.702430536445525, 0.644438589467839, 0.746634198937579, 0.76715586608218, 0.817565369559781, 0.725094521081469, 0.780317312140151, 0.8055008581584, 0.840733234611807, 0.76715586608218, 0.840733234611807, 0.888740960682893, 0.893761762057943, 0.786751422145561, 0.888740960682893, 0.949877704036875, 0.91803033678488, 0.835056101720116, 0.979548374704095, 1.0111473607758, 0.979548374704095, 0.94101424370557, 1.07481644064517, 1.08134730780413, 1.08457627793433, 0.949877704036875, 1.14736710779379, 1.11260500153457, 1.17172645365323, 0.999565488225982, 1.20951501454263, 1.16643011384328, 1.20466251174822, 1.06483221973857), .Tsp = c(1960, 1980.75, 4), class = 'ts'));is.language(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist10
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist11
#argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist12
#argv <- list(5e-14);is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist13
#argv <- list(structure(c(NA, 6346.2), .Names = c('1', '2')));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist14
#argv <- list(c(1.1+0i, NA, 3+0i));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist15
#argv <- list(structure(list(Ozone = c(NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), Solar.R = c(286L, 287L, 242L, 186L, 220L, 264L, 127L, 273L, 291L, 323L, 259L, 250L, 148L, 332L, 322L, 191L, 284L, 37L, 120L, 137L, 150L, 59L, 91L, 250L, 135L, 127L, 47L, 98L, 31L, 138L), Wind = c(8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8), Temp = c(78L, 74L, 67L, 84L, 85L, 79L, 82L, 87L, 90L, 87L, 93L, 92L, 82L, 80L, 79L, 77L, 72L, 65L, 73L, 76L, 77L, 76L, 76L, 76L, 75L, 78L, 73L, 80L, 77L, 83L), Month = c(6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), Day = 1:30), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day'), row.names = 32:61, class = 'data.frame'));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist16
#argv <- list(structure(c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4), .Tsp = c(1945, 1974.75, 4), class = 'ts'));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist17
#argv <- list(structure(c('***', '***', '*', '*'), legend = '0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1', class = 'noquote'));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist18
#argv <- list(structure(list(`/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/lookup.xport.Rd` = structure(c('read.xport', ''), .Dim = 1:2, .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.S.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.arff.Rd` = structure(c('connection', 'write.arff', '', ''), .Dim = c(2L, 2L), .Dimnames = list(    NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.dbf.Rd` = structure(c('make.names', 'write.dbf', '', ''), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.dta.Rd` = structure(c('write.dta', 'attributes', 'Date', 'factor', '', '', '', ''), .Dim = c(4L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.epiinfo.Rd` = structure(c('Date', 'DateTimeClasses', '', ''), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.mtp.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.octave.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.spss.Rd` = structure(c('sub', 'iconv', 'iconvlist', '', '', ''), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.ssd.Rd` = structure(c('read.xport', ''), .Dim = 1:2, .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.systat.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.xport.Rd` = structure(c('lookup.xport', ''), .Dim = 1:2, .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.arff.Rd` = structure(c('make.names', 'read.arff', '', ''), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.dbf.Rd` = structure(c('read.dbf', ''), .Dim = 1:2, .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.dta.Rd` = structure(c('drop', 'read.dta', 'attributes', 'DateTimeClasses', 'abbreviate', '', '', '', '', ''), .Dim = c(5L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.foreign.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor')))), .Names = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/lookup.xport.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.S.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.arff.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.dbf.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.dta.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.epiinfo.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.mtp.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.octave.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.spss.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.ssd.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.systat.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.xport.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.arff.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.dbf.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.dta.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.foreign.Rd')));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist19
#argv <- list(3.14159265358979e+20);is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist2
#argv <- list(structure(c(2671, 6.026e+77, 3.161e+152, 3.501e+299, 2.409e+227, 1.529e+302), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist20
#argv <- list(structure(list(srcfile = c(NA, '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R'), frow = c(NA, 88L, 89L, 89L, 90L, 90L, 90L, 88L, 88L, 92L, 92L, 92L, 92L, 92L, 94L, 94L, 100L, 103L, 108L, 108L, 128L, 131L, 138L, 142L, 160L, 160L), lrow = c(NA, 91L, 89L, 89L, 90L, 90L, 90L, 91L, 91L, 93L, 93L, 93L, 93L, 93L, 95L, 95L, 100L, 104L, 108L, 108L, 132L, 131L, 138L, 144L, 160L, 160L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 26L)));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist21
#argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/R_systat.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/R_systat.R'), frow = 21:22, lrow = 21:22), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist22
#argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, NA, NA, NA, NA, NA), .Label = c('[0,2)', '[2,4)', '[4,6)', '[6,8)'), class = 'factor'));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist23
#argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), .Dim = c(10L, 2L), .Dimnames = list(NULL, c('x', 'y'))));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist24
#argv <- list(structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08, it = 898L, maxit = 5000,     ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist25
#argv <- list(structure(c(NA, 1, 1, 2), .Names = c('<none>', 'M.user', 'Temp', 'Soft')));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist26
#argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), terms = quote(y ~ x * z), row.names = c(NA, 10L), class = 'data.frame'));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist27
#argv <- list(structure(c(1920, 1920, 1920, 1920, 1920, 1920, 1921, 1921, 1921, 1921), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist29
#argv <- list(structure(1, .Dim = 1L));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist3
#argv <- list('• ');is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist30
#argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), terms = quote(Employed ~ GNP.deflator + GNP + Unemployed +     Armed.Forces + Population + Year), row.names = 1947:1962, class = 'data.frame'));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist31
#argv <- list(structure(list(onefile = TRUE, family = 'Helvetica',     title = 'R Graphics Output', fonts = NULL, encoding = 'default',     bg = 'transparent', fg = 'black', width = 0, height = 0,     horizontal = TRUE, pointsize = 12, paper = 'default', pagecentre = TRUE,     print.it = FALSE, command = 'default', colormodel = 'srgb',     useKerning = TRUE, fillOddEven = FALSE), .Names = c('onefile',     'family', 'title', 'fonts', 'encoding', 'bg', 'fg', 'width',     'height', 'horizontal', 'pointsize', 'paper', 'pagecentre',     'print.it', 'command', 'colormodel', 'useKerning', 'fillOddEven')));do.call('is.list', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist4
#argv <- list(13186.6170826564);is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist5
#argv <- list(structure(list(object = c(0.568, 1.432, -1.08, 1.08), max.level = NA, vec.len = 4, digits.d = 3, nchar.max = 128, give.attr = TRUE, give.head = TRUE, width = 80L, envir = NULL, strict.width = 'no', formatNum = function (x, ...) format(x, trim = TRUE, drop0trailing = TRUE, ...), list.len = 99, give.length = TRUE, nest.lev = 1, indent.str = '  ..'), .Names = c('object', 'max.level', 'vec.len', 'digits.d', 'nchar.max', 'give.attr', 'give.head', 'width', 'envir', 'strict.width', 'formatNum', 'list.len', 'give.length', 'nest.lev', 'indent.str')));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist6
#argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = 'factor'));is.list(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist7
#argv <- list(structure(list(y = c(1.08728092481538, 0.0420572471552261, 0.787502161306819, 0.512717751544676, 3.35376639535311, 0.204341510750309, -0.334930602487435, 0.80049208412789, -0.416177803375218, -0.777970346246018, 0.934996808181635, -0.678786709127108, 1.52621589791412, 0.5895781228122, -0.744496121210548, -1.99065153885627, 1.51286447692396, -0.750182409847851), A = c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1), U = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor'), V = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('y', 'A', 'U', 'V'), terms = quote(y ~ A:U + A:V - 1), row.names = c(NA, 18L), class = 'data.frame'));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislist.testislist9
#argv <- list(structure(list(srcfile = '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', frow = 612L, lrow = 612L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L)));is.list(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisloaded.testisloaded1
#argv <- list('PDF', '', 'External'); .Internal(is.loaded(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisloaded.testisloaded2
#argv <- list('supsmu', '', ''); .Internal(is.loaded(argv[[1]], argv[[2]], argv[[3]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislogical.testislogical1
#argv <- list(structure(cim = c(22L, 13L), .Dimnames = list(c('r39', 'r17', 'r39', 'r14', 'r39', 'r8', 'r25', 'r9', 'r17', 'r27', 'r17', 'r14', 'r39', 'r27', 'r9', 'r25', 'r8', 'r17', 'r9', 'r8', 'r25', 'r5'), c('c4', 'c1', 'c13', 'c13', 'c1', 'c20', 'c20', 'c13', 'c20', 'c8', 'c8', 'c8', 'c13'))));is.logical(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislogical.testislogical2
#argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.logical(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislogical.testislogical3
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.logical(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislogical.testislogical4
#argv <- list(structure(c(1, 4.16333634234434e-17, 5.55111512312578e-17, -1.38777878078145e-17, 2.77555756156289e-17, 4.16333634234434e-17, 1, -1.11022302462516e-16, -2.77555756156289e-17, -5.55111512312578e-17, 5.55111512312578e-17, -1.11022302462516e-16, 1, 5.55111512312578e-17, 0, -1.38777878078145e-17, -2.77555756156289e-17, 5.55111512312578e-17, 1, -1.11022302462516e-16, 2.77555756156289e-17, -5.55111512312578e-17, 0, -1.11022302462516e-16, 1), .Dim = c(5L, 5L)));is.logical(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislogical.testislogical5
#argv <- list(structure(c(1, 0, 0, 0, NA, 6, 0, 0, 0, 14, 3, 0, 15, 0, 0, 8), .Dim = c(4L, 4L)));is.logical(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinislogical.testislogical7
#argv <- list(c(FALSE, TRUE, FALSE));do.call('is.logical', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix1
#argv <- list(c(-3.44, 62.44));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix11
#argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/arff.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/arff.R'), frow = c(86L, 86L), lrow = c(88L, 88L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix13
#argv <- list(structure(list(srcfile = c(NA, '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats'), frow = c(NA, 16987L, 16991L), lrow = c(NA, 16987L, 16991L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 3L), class = 'data.frame'));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix14
#argv <- list(structure(list(V1 = c(NA, 2, NA, 4, 5), V2 = c(NA, NA, 3, 4, 5)), .Names = c('V1', 'V2'), class = 'data.frame', row.names = c(NA, -5L)));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix16
#argv <- list(structure(list(Df = c(NA, 1), Deviance = c(12.2441566485997, 32.825622681839), AIC = c(73.9421143635373, 92.5235803967766)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user'), class = c('anova', 'data.frame'), heading = c('Single term deletions', '\nModel:', 'cbind(X, M) ~ M.user')));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix17
#argv <- list(structure(list(V1 = 1L, V2 = structure(1L, .Label = c('A', 'D', 'E'), class = 'factor'), V3 = 6), .Names = c('V1', 'V2', 'V3'), class = 'data.frame', row.names = c(NA, -1L)));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix19
#argv <- list(c(-1.12778377684043, -12820.0784261145, -21650982809.6744, -473300382255715392, -6.08456909882282e+25, -3.04622557026196e+34, -4.60125024792566e+43, -1.76183826972506e+53, -1.5069799345972e+63, -2.61556777274611e+73, -8.54170618068872e+83, -4.9383857330861e+94, -4.80716085942859e+105, -7.55412056676629e+116, -1.84898368353639e+128, -6.83535188151783e+139, -3.71562599613334e+151, -2.90089508183654e+163, -3.18582547396557e+175, -4.83110332887119e+187, -9.94902790498679e+199, -2.74100158340596e+212, -9.96611412047338e+224, -4.72336572671053e+237, -2.88514442494869e+250, -2.24780296109123e+263, -2.21240023126594e+276, -2.72671165723473e+289, -4.17369555651928e+302, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix23
#argv <- list(0.0597289453377495);do.call('is.matrix', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix3
#argv <- list(structure(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), from = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = 'registered S3method for summary', class = 'factor')), .Names = c('visible', 'from'), row.names = c('summary.aspell', 'summary.ecdf', 'summary.loess', 'summary.nls', 'summary.packageStatus', 'summary.PDF_Dictionary', 'summary.PDF_Stream', 'summary.ppr', 'summary.prcomp', 'summary.princomp', 'summary.stl', 'summary.tukeysmooth'), class = 'data.frame'));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix4
#argv <- list(structure(c(0, 87, 82, 75, 63, 50, 43, 32, 35, 60, 54, 55, 36, 39, 0, 0, 69, 57, 57, 51, 45, 37, 46, 39, 36, 24, 32, 23, 25, 32, 0, 32, 59, 74, 75, 60, 71, 61, 71, 57, 71, 68, 79, 73, 76, 71, 67, 75, 79, 62, 63, 57, 60, 49, 48, 52, 57, 62, 61, 66, 71, 62, 61, 57, 72, 83, 71, 78, 79, 71, 62, 74, 76, 64, 62, 57, 80, 73, 69, 69, 71, 64, 69, 62, 63, 46, 56, 44, 44, 52, 38, 46, 36, 49, 35, 44, 59, 65, 65, 56, 66, 53, 61, 52, 51, 48, 54, 49, 49, 61, 0, 0, 68, 44, 40, 27, 28, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts'));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix5
#argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R'), frow = c(112L, 114L, 115L, 116L, 127L, 130L, 130L, 130L, 133L, 133L, 133L, 136L, 136L, 136L, 140L, 140L, 140L, 143L, 143L, 143L, 147L, 147L, 147L, 147L, 150L, 150L, 150L, 155L, 161L), lrow = c(156L, 114L, 115L, 116L, 127L, 130L, 130L, 130L, 133L, 133L, 133L, 136L, 136L, 136L, 140L, 140L, 140L, 143L, 143L, 143L, 147L, 147L, 147L, 147L, 150L, 150L, 150L, 155L, 178L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 29L), class = 'data.frame'));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix6
#argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix7
#argv <- list(c(1.2e+100, 1.3e+100));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinismatrix.testismatrix9
#argv <- list(structure(list(Topic = c('myTst-package', 'foo-class', 'myTst', 'show,foo-method', 'show,foo-method', 'show-methods'), File = c('myTst-package', 'foo-class', 'myTst-package', 'foo-class', 'show-methods', 'show-methods')), .Names = c('Topic', 'File'), row.names = c(3L, 1L, 4L, 2L, 6L, 5L), class = 'data.frame'));is.matrix(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna1
#argv <- list(8.21977282218514e-09);is.na(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna11
#argv <- list('•');is.na(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna12
#argv <- list(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, NA, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, NA, 16L, NA, NA, 17L, 18L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 19L, 20L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 21L, 22L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 23L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 24L, 25L, NA, NA, NA, NA, NA, 26L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 27L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 28L, NA, NA, NA, NA, NA, NA, NA));is.na(argv[[1]]);
  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
 [13] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE
 [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [49]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [61]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE
 [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [97]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[109]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[121]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[145]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[157]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[169]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[181]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[193]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
[205]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[217]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[229]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[241]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[253]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[265]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[277]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[289]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[301]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[313]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[325]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[337]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[349]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[361]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[373]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[385]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[397]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[409]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[421]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[433]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[445]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[457] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna14
#argv <- list(structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'));is.na(argv[[1]]);
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna18
#argv <- list(c(1.15623864987889e-07, 2.29156215117184e-06, 2.23566813947706e-05, 0.000143191143888661, 0.000677580461489631, 0.00252801907454942, 0.00775156037133752, 0.0201095764491411, 0.0451105149252681, 0.0890234210350955, 0.15678837112652, 0.249535722442692, 0.362988194603088, 0.487807940725587, 0.611969188999548, 0.724126192770213, 0.816469100858263, 0.885981556331846, 0.933947517503216, 0.964353470219262, 0.982092072679401, 0.991629921792979));is.na(argv[[1]]);
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna21
#argv <- list(structure(c(-0.435358622483264, -0.0335050551134034, 0.133034650300067, -0.159998333048696, 0.195871393282558, 0.350272600548034, 0.39175188095922, 0.80136172049434, 0.278604939810076, 0.226807608071186, -0.705366153102363, -0.673376038650154, 1.0575405448001, -0.361896730525493, -0.183063001472974, 0.770224627641576, -0.723327517911943, 0.641508754101234, -0.497966152633253, -0.565883899194175, -0.163154615929682, -1.04605311744929, 0.345822472294285, -0.120642075306238, -0.310915191264717, -0.421459810417331, 0.127313193315093, 0.0460216192070582, -0.571263568938105, -0.255068194977355, 0.466680400648398, -0.577405253130228, 0.427189001707599, -0.117526978398191, 0.338157182237428, 0.106063414615583, 0.0652166343937516, 0.113976880905178, -0.508973211491926, -0.0281367896906678, 0.0255810420505139, -0.0895312259800421, 0.343273059276787, 0.25878029892501, 0.178005594248437, 0.616202813145647, -0.223306051799002, -0.822237650949987, 0.181243736532592, 1.03805050988759, -0.535064558180362, 0.629967292956912, -0.206091625685159, -0.0982523326578774, 0.414371639034748, -0.332128640110978, 0.0280866409684434, -0.53195331347224, -0.0381291521565174, -0.0522348719327905, 0.221019543981438, -0.306904771316101, 0.553064781030607, -0.15705513179628, 0.740342712486913, -0.307570821127478, -0.952143530102099, -0.691835269560791, -0.27190785111766, -0.196035414096589, -0.970405281846342, -0.177170015488179, -0.885843727603163, 0.429176556994819, 0.310459328495626, -0.258604904263182, -1.18516758379134, -0.690975294813695, 0.965849167652318, 0.44535708731974, -0.0846102375086248, -0.32082832908822, 0.528416539604261, 0.620184198607294, 0.317666232431379, 0.283097649168652, 0.223675435302281, -0.697584545802335, 1.0301502006605, 0.452533534739715, 0.264750609900989, 0.267980537616643, 0.0973596082099813, 0.161838610289358, 0.612946027273891, 0.816578471249094, -1.15340096289088, -1.01680545446605, 0.422976667855578, -0.23961110455947, 0.0316786188682291, -0.797164261874229, 0.184311996008136, 0.0876867376986658, 0.312240812855443, 0.0432826980205777, -0.00317515675173313, -0.296692321406956, 0.598755930788477, 0.298681977334167, 0.258864357137695, 0.126248580888692, 0.318393890044881, 0.316636862337678), .Tsp = c(1, 114, 1), class = 'ts'));is.na(argv[[1]]);
  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[109] FALSE FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna40
#argv <- list(structure(list(1L, 3L), class = structure('L', package = '.GlobalEnv')));is.na(argv[[1]]);
[1] FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna41
#argv <- list(c('«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', 'éè'));is.na(argv[[1]]);
[1] FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna42
#argv <- list(c(-Inf, -Inf, -Inf, 0, 1, 2, Inf, Inf));is.na(argv[[1]]);
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna46
#argv <- list(integer(0));is.na(argv[[1]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisna.testisna6
#argv <- list(list(list(1)));is.na(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull1
#argv <- list(c('a', 'b', 'c'));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull10
#argv <- list(structure(list(coefficients = numeric(0), residuals = structure(c(-68.7898369431611, -71.7713382904347, -44.0000000000001, -56.5455568546283, -29.303772984227), .Dim = c(5L, 1L), .Dimnames = list(c('2', '3', '4', '5', '6'), NULL)), fitted.values = structure(c(0, 0, 0, 0, 0), .Dim = c(5L, 1L), .Dimnames = list(c('2', '3', '4', '5', '6'), NULL)), weights = NULL, rank = 0L, df.residual = 5L), .Names = c('coefficients', 'residuals', 'fitted.values', 'weights', 'rank', 'df.residual'), class = c('aov', 'lm')));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull11
#argv <- list(complex(0));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull12
#argv <- list(1.74126257032961e-18);is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull13
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull15
#argv <- list(complex(real = 3, imaginary = -Inf));do.call('is.null', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull2
#argv <- list(structure(c(NA, NA, 159.125, 204, 221.25, 245.125, 319.75, 451.5, 561.125, 619.25, 615.625, 548, 462.125, 381.125, 316.625, 264, 228.375, 210.75, 188.375, 199, 207.125, 191, 166.875, 72, -9.25, -33.125, -36.75, 36.25, 103, 131.625, NA, NA), .Tsp = c(1951, 1958.75, 4), class = 'ts'));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull3
#argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('L', 'M', 'H'), class = 'factor'));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull4
#argv <- list(c('(2,5.5]', '(5.5,10]', NA));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull5
#argv <- list(structure(list(z = c(-2.71928906935559, -2.42170276502517, -2.09964379178171, -1.74953243478614, -1.36765437050161, -0.950481896729501, -0.49514368442691, 0, 0.534774072422106, 1.1067130528647, 1.71078417306203, 2.33938293418822, 2.98268239609615), par.vals = structure(c(0.707463571249756, 0.714694094477037, 0.725412821685713, 0.74111612512182, 0.763750498997247, 0.795678221483334, 0.839503022768249, 0.897728639347183, 0.972289000300049, 1.06404105741634, 1.1722925771844, 1.29437141627989, 1.42522018859931, -3.11497037357416, -3.12714840246737, -3.14532049441438, -3.17220876767473, -3.21154655520113, -3.26827705075488, -3.34869944608425, -3.46054428079529, -3.61294451442018, -3.81614134368036, -4.08060875057211, -4.41549521607872, -4.82702626542922, -0.0255577133668773, -0.0384397882414428, -0.0575047563177536, -0.085367554260897, -0.125387593962273, -0.181561305237101, -0.258149413255891, -0.359008117508679, -0.486728760637899, -0.641785962540215, -0.821841695092364, -1.02123122113516, -1.23065013245083, 7.95100998228548, 7.54634587182367, 7.14890399737901, 6.76196968783309, 6.39005226899545, 6.03912521056563, 5.71679838524513, 5.43240185128028, 5.19696909896364, 5.02301800418124, 4.92391121830517, 4.91279665045699, 5.00177553632184, -9.53200922191114, -8.69335766510962, -7.8547061083081, -7.01605455150657, -6.17740299470505, -5.33875143790352, -4.500099881102, -3.66144832430047, -2.82279676749895, -1.98414521069743, -1.1454936538959, -0.306842097094378, 0.531809459707146), .Dim = c(13L, 5L), .Dimnames = list(    NULL, c('(Intercept)', 'PS', 'AI', 'VS', 'PS:AI')))), .Names = c('z', 'par.vals'), row.names = c(NA, 13L), class = 'data.frame'));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull6
#argv <- list(structure(c(-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96), .Tsp = c(1, 101, 1), class = 'ts'));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull7
#argv <- list(numeric(0));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnull.testisnull8
#argv <- list(structure(c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));is.null(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric1
#argv <- list(structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric10
#argv <- list(structure(c(1L, 2L, NA, 3L), .Label = c('aa', 'bb', 'dd')));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric11
#argv <- list(structure(c(1120, 1160, 963, 1210, 1160, 1160, 813, 1230, 1370, 1140, 995, 935, 1110, 994, 1020, 960, 1180, 799, 958, 1140, 1100, 1210, 1150, 1250, 1260, 1220, 1030, 1100, 774, 840, 874, 694, 940, 833, 701, 916, 692, 1020, 1050, 969, 831, 726, 456, 824, 702, 1120, 1100, 832, 764, 821, 768, 845, 864, 862, 698, 845, 744, 796, 1040, 759, 781, 865, 845, 944, 984, 897, 822, 1010, 771, 676, 649, 846, 812, 742, 801, 1040, 860, 874, 848, 890, 744, 749, 838, 1050, 918, 986, 797, 923, 975, 815, 1020, 906, 901, 1170, 912, 746, 919, 718, 714, 740), .Tsp = c(1871, 1970, 1), class = 'ts'));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric12
#argv <- list(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric15
#argv <- list(c('2001-01-01', NA, NA, '2004-10-26'));is.numeric(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric16
#argv <- list(c(1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374947, 0.707106781186547, 0.587785252292473, 0.453990499739547, 0.309016994374947, 0.156434465040231, -1.83697019872103e-16, -0.156434465040231, -0.309016994374948, -0.453990499739547, -0.587785252292473, -0.707106781186548, -0.809016994374948, -0.891006524188368, -0.951056516295154, -0.987688340595138, -1, -0.987688340595138, -0.951056516295154, -0.891006524188368, -0.809016994374947, -0.707106781186547, -0.587785252292473, -0.453990499739547, -0.309016994374947, -0.156434465040231, 6.12323399573677e-17, 0.156434465040231, 0.309016994374947, 0.453990499739547, 0.587785252292473, 0.707106781186548, 0.809016994374947, 0.891006524188368, 0.951056516295154, 0.987688340595138, 1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374947, 0.707106781186548, 0.587785252292473, 0.453990499739547, 0.309016994374947, 0.156434465040231, 6.12323399573677e-17, -0.15643446504023, -0.309016994374947, -0.453990499739548, -0.587785252292473, -0.707106781186547, -0.809016994374947, -0.891006524188368, -0.951056516295154, -0.987688340595138, -1, -0.987688340595138, -0.951056516295154, -0.891006524188368, -0.809016994374948, -0.707106781186547, -0.587785252292473, -0.453990499739548, -0.309016994374948, -0.15643446504023, -1.83697019872103e-16, 0.15643446504023, 0.309016994374947, 0.453990499739547, 0.587785252292473, 0.707106781186547, 0.809016994374947, 0.891006524188368, 0.951056516295154, 0.987688340595138, 1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374948, 0.707106781186547, 0.587785252292473, 0.453990499739548, 0.309016994374948, 0.15643446504023, 3.06161699786838e-16, -0.15643446504023, -0.309016994374947, -0.453990499739547, -0.587785252292473, -0.707106781186547, -0.809016994374947, -0.891006524188368, -0.951056516295153, -0.987688340595138, -1));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric17
#argv <- list(structure(c(0.696706709347165, 0.362357754476673, -0.0291995223012888, 0.696706709347165, 0.696706709347165, -0.0291995223012888, 0.696706709347165, -0.0291995223012888, 0.362357754476673, 0.696706709347165, -0.0291995223012888, 0.362357754476673, -0.416146836547142, 0.362357754476673, 0.696706709347165, 0.696706709347165, 0.362357754476673, -0.416146836547142, -0.0291995223012888, -0.416146836547142, 0.696706709347165, -0.416146836547142, 0.362357754476673, -0.0291995223012888, 0.717356090899523, 0.932039085967226, 0.999573603041505, 0.717356090899523, 0.717356090899523, 0.999573603041505, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.909297426825682, 0.932039085967226, 0.717356090899523, 0.717356090899523, 0.932039085967226, 0.909297426825682, 0.999573603041505, 0.909297426825682, 0.717356090899523, 0.909297426825682, 0.932039085967226, 0.999573603041505, -0.0291995223012888, -0.737393715541246, -0.998294775794753, -0.0291995223012888, -0.0291995223012888, -0.998294775794753, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.653643620863612, -0.737393715541246, -0.0291995223012888, -0.0291995223012888, -0.737393715541246, -0.653643620863612, -0.998294775794753, -0.653643620863612, -0.0291995223012888, -0.653643620863612, -0.737393715541246, -0.998294775794753, 0.999573603041505, 0.67546318055115, -0.0583741434275801, 0.999573603041505, 0.999573603041505, -0.0583741434275801, 0.999573603041505, -0.0583741434275801, 0.67546318055115, 0.999573603041505, -0.0583741434275801, 0.67546318055115, -0.756802495307928, 0.67546318055115, 0.999573603041505, 0.999573603041505, 0.67546318055115, -0.756802495307928, -0.0583741434275801, -0.756802495307928, 0.999573603041505, -0.756802495307928, 0.67546318055115, -0.0583741434275801), .Dim = c(24L, 4L), .Dimnames = list(NULL, c('A', 'B', 'C', 'D'))));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric18
#argv <- list(c(1, 1, NA, 2));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric19
#argv <- list(structure(c(79.5323303457107, 6, 86.1989970123773, 6, 69.7732394366197, 5, 98.0323303457106, 6, 108.032330345711, 6, 89.1989970123773, 6, 114.198997012377, 6, 116.698997012377, 6, 110.365663679044, 6, 124.365663679044, 6, 126.365663679044, 6, 118.032330345711, 6), .Dim = c(6L, 4L), .Dimnames = structure(list(V = c('Golden.rain', 'rep        ', 'Marvellous ', 'rep        ', 'Victory    ', 'rep        '), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N'))));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric20
#argv <- list(structure(numeric(0), .Dim = c(3L, 0L)));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric22
#argv <- list(structure(c(-3.001e+155, -1.067e+107, -1.976e+62, -9.961e+152, -2.059e+23, 0.5104), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = c('summaryDefault', 'table')));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric3
#argv <- list(c(1.4615016373309e+48, 5.70899077082384e+45, 2.23007451985306e+43, 8.71122859317602e+40, 3.40282366920938e+38, 1.32922799578492e+36, 5.19229685853483e+33, 2.02824096036517e+31, 7.92281625142643e+28, 3.09485009821345e+26, 1.20892581961463e+24, 4.72236648286965e+21, 18446744073709551616, 72057594037927936, 281474976710656, 1099511627776, 4294967296, 16777216, 65536, 256, 1, 0.00390625, 1.52587890625e-05, 5.96046447753906e-08, 2.3283064365387e-10, 9.09494701772928e-13, 3.5527136788005e-15, 1.38777878078145e-17, 5.42101086242752e-20, 2.11758236813575e-22, 8.27180612553028e-25));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric4
#argv <- list(integer(0));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric5
#argv <- list(c(16.4, 11.4, 7.8, 14, 10.9, 16.8, 16.6, 5.9, 21));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric6
#argv <- list(c(0, 0, 0, 1, 0, 0, 0, 0, 1, 0, NA, NA, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, NA, 1, 0, 1, 0, NA, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, NA, 0, 1, 0, 0, 0, 0, NA, 1, 1));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric7
#argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.numeric(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisnumeric.testisnumeric9
#argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));is.numeric(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject1
#argv <- list(c(45.0314849918875, 57.5361690778799, 61.7043971065441, 61.7043971065441, 128.39604556517, 45.0314849918875, 36.6950289345592, 45.0314849918875, 228.43351825311, 36.6950289345592, 74.2090811925365, 45.0314849918875, 32.5268009058951, 78.3773092212007, 111.723133450514, 20.0221168199027, 32.5268009058951, 40.8632569632234, 20.0221168199027, 24.1903448485668, 45.0314849918875, 11.6856607625744, 20.0221168199027, 28.3585728772309, 45.0314849918875, 36.6950289345592, 49.1997130205517, 36.6950289345592, 78.3773092212007, 45.0314849918875, 145.068957679827, 32.5268009058951, 161.741869794484));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject10
#argv <- list(structure(c(-0.562441486309934, -0.588967592535822, 0.0277608937997097, 0.568074124752969, 3.89980510825846, -0.428174866497729, -0.343990813420242, -0.260996370058754, -2.31774610938305, 0.314764947225063, -0.455124436264437, -0.0444006414474544, -0.27748974692001, -0.303134023269405, -0.670168347915028, 2.92643313367, -0.749546667806845, -0.410394401887929, -0.203261263063707, 0.1847365997012, 0.128559671155683, 0.313558179929332, -0.0668425264405297, -0.106427678524531, -0.523747793519006, -0.402585404761851, 0.0642079595716389, -0.779859286629166, 0.356484381211739, -0.625053119472271, 1.31547628490512, -0.21959878152752, -0.102402088986461), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject11
#argv <- list(integer(0));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject12
#argv <- list(c(25, 50, 100, 250, 500, 1e+05));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject13
#argv <- list(numeric(0));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject14
#argv <- list(c(TRUE, FALSE));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject16
#argv <- list(1:3);do.call('is.object', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject2
#argv <- list(structure(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L), .Label = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59'), class = 'factor'));is.object(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject3
#argv <- list(c(-2.97525100835805, -2.82075793382799, -2.66593061478436, -2.51078653265898, -2.35534314690423, -2.19961777085284, -2.04362765822923, -1.88739011884942, -1.73092311663886, -1.57424503752904, -1.41737428587374, -1.26032952797003, -1.10312969205829, -0.945793720579289, -0.788340724666015, -0.630790076924443, -0.473161172617641, -0.315473462875692, -0.157746535777026, -4.9960036108132e-16, 0.157746535777027, 0.315473462875696, 0.473161172617647, 0.630790076924451, 0.788340724666025, 0.9457937205793, 1.1031296920583, 1.26032952797003, 1.41737428587374, 1.57424503752905, 1.73092311663887, 1.88739011884943, 2.04362765822924, 2.19961777085286, 2.35534314690424, 2.510786532659, 2.66593061478437, 2.82075793382801, 2.97525100835807));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject4
#argv <- list(structure(c(-0.266501885293689, -3.8931863588937, -0.272681427089914, 0.685830427280619, 0.146697567632144, -0.178509228122189, -0.827954133483467, -0.00847153748452917, -0.439077730128206, -0.100627762490786, 1.90697806298419, 0.534191446603769, 0.118116488305486, 0.266107216595585, 1.09677961111435, 0.294604712451767, 1.26527267402907, -1.37468346842381, -0.501152044022612, 0.277514706049866, 0.080458897112638, 0.0436443543043109, -0.480973816036986, 1.25647294144768, 0.371150285558408), .Dim = 25L, .Dimnames = list(    c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject5
#argv <- list(c(0.3814, 1.0281, 0.3814, 0.1202, -0.3385, 0.6757, 0.6757, -0.5422, -1.0914, 1.0281, -0.3385, 0.3814, 0.3814, -1.0914, -0.7326, 0.6757, 1.5128, 0.6757, 1.0281, 0.6757, 1.0281, -1.0914, -0.7326, 0.1202, -0.3385, 0.3814, 0.6757, 1.5128, 0.1202, -0.7326, 1.5128, -1.0914, 0.6757, 2.4608, 0.3814, 0.6757, -0.8176, 1.0281, 0.1202, 2.4404, -0.5422, 0.1202, -0.1182, 0.3814, -0.5422, -0.5422, 0.6757, -0.3385, -1.6508, 0.6757, -0.7326, -0.1182, -1.0914, 0.3814, 0.3814, -0.1182, 0.3814, 0.1202, 0.6757, 0.6757, 0.1202, -0.5422, 1.5128, 0.3814, -1.2692, 1.0281, 0.6757, 0.1202, -0.5422, 0.3814, -0.3385, 1.0281, -0.1182, 0.1202, 1.5128, 2.4608, 0.6757, -1.0914, -0.9144, -0.3385, 0.1202, 0.1202, 0.1202, 0.3814, -0.13, -0.5422, 0.1202, -0.1182, 0.3814, 1.0281, 0.6757, 1.0281, -1.2692, 0.1202, 0.3814, 1.5128, -0.1182, 0.3814, 1.0281, 0.3814, 0.1202, -0.3385, 0.6757, 0.6757, -0.5422, -1.0914, 1.0281, -0.3385, 0.3814, 0.3814, -1.0914, -0.7326, 0.6757, 1.5128, 0.6757, 1.0281, 0.6757, 1.0281, -1.0914, -0.7326, 0.1202, -0.3385, 0.3814, 0.6757, 1.5128, 0.1202, -0.7326, 1.5128, -1.0914, 0.6757, 2.4608, 0.3814, 0.6757, -0.8176, 1.0281, 0.1202, 2.4404, -0.5422, 0.1202, -0.1182, 0.3814, -0.5422, -0.5422, 0.6757, -0.3385, -1.6508, 0.6757, -0.7326, -0.1182, -1.0914, 0.3814, 0.3814, -0.1182, 0.3814, 0.1202, 0.6757, 0.6757, 0.1202, -0.5422, 1.5128, 0.3814, -1.2692, 1.0281, 0.6757, 0.1202, -0.5422, 0.3814, -0.3385, 1.0281, -0.1182, 0.1202, 1.5128, 2.4608, 0.6757, -1.0914, -0.9144, -0.3385, 0.1202, 0.1202, 0.1202, 0.3814, -0.13, -0.5422, 0.1202, -0.1182, 0.3814, 1.0281, 0.6757, 1.0281, -1.2692, 0.1202, 0.3814, 1.5128, -0.1182, 0.3814, 1.0281, 0.3814, 0.1202, -0.3385, 0.6757, 0.6757, -0.5422, -1.0914, 1.0281, -0.3385, 0.3814, 0.3814, -1.0914, -0.7326, 0.6757, 1.5128, 0.6757, 1.0281, 0.6757, 1.0281, -1.0914, -0.7326, 0.1202, -0.3385, 0.3814, 0.6757, 1.5128, 0.1202, -0.7326, 1.5128, -1.0914, 0.6757, 2.4608, 0.3814, 0.6757, -0.8176, 1.0281, 0.1202, 2.4404, -0.5422, 0.1202, -0.1182, 0.3814, -0.5422, -0.5422, 0.6757, -0.3385, -1.6508, 0.6757, -0.7326, -0.1182, -1.0914, 0.3814, 0.3814, -0.1182, 0.3814, 0.1202, 0.6757, 0.6757, 0.1202, -0.5422, 1.5128, 0.3814, -1.2692, 1.0281, 0.6757, 0.1202, -0.5422, 0.3814, -0.3385, 1.0281, -0.1182, 0.1202, 1.5128, 2.4608, 0.6757, -1.0914, -0.9144, -0.3385, 0.1202, 0.1202, 0.1202, 0.3814, -0.13, -0.5422, 0.1202, -0.1182, 0.3814, 1.0281, 0.6757, 1.0281, -1.2692, 0.1202, 0.3814, 1.5128, -0.1182, NA, NA, NA));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject6
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.object(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject7
#argv <- list(structure(c(-0.00544194018731062, -0.00542949133552226, -1.20718999105839e-05, -0.00505497198006266, -0.827687885653788, -0.00315385274195005, -0.0023164952286401, -0.00117183915211372, -2.09167441982205, -0.00193959227691399, -0.00358084102808485, -3.39138861812986e-05, -0.00163051710052444, -0.00168735925488057, -0.0167253073891896, -0.237074502262169, -0.0118967636015583, -0.00307437031103621, -0.00114371252369823, -0.000860763872820255, -0.00028432076263802, -0.00329557354736053, -0.000123683950933913, -0.00026114238659798, -0.00471892942651347, -0.00317288091968884, -6.76955217513137e-05, -0.0119061189538054, -0.00233356124758579, -0.00672098496026968, -0.134965372025281, -0.00102115420103838, -0.00114816901125044), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject8
#argv <- list(c(FALSE, FALSE));is.object(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisobject.testisobject9
#argv <- list(structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'));is.object(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisordered.testisordered1
#argv <- structure(list(x = structure(c(1L, 3L), .Label = c('b',     'c', 'a'), class = c('ordered', 'factor'))), .Names = 'x');do.call('is.ordered', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist1
#argv <- list(list(NULL, c('time', 'status')));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist10
#argv <- list(structure(list(height = c(58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72), weight = c(115, 117, 120, 123, 126, 129, 132, 135, 139, 142, 146, 150, 154, 159, 164)), .Names = c('height', 'weight'), row.names = c(NA, -15L), class = 'data.frame'));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist11
#argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist13
#argv <- list(structure(list(a = c(1L, 2L, 3L, NA), b = c(NA, 3.14159265358979, 3.14159265358979, 3.14159265358979), c = c(TRUE, NA, FALSE, TRUE), d = structure(c(1L, 2L, NA, 3L), .Label = c('aa', 'bb', 'dd'), class = 'factor'), e = structure(c('a1', NA, NA, 'a4'), class = 'AsIs'), f = structure(c(11323, NA, NA, 12717), class = 'Date')), .Names = c('a', 'b', 'c', 'd', 'e', 'f'), row.names = c(NA, -4L), class = 'data.frame'));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist14
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist16
#argv <- list(NULL);do.call('is.pairlist', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist2
#argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist3
#argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist4
#argv <- list(structure(list(double.eps = 2.22044604925031e-16, double.neg.eps = 1.11022302462516e-16, double.xmin = 2.2250738585072e-308, double.xmax = 1.79769313486232e+308, double.base = 2L, double.digits = 53L, double.rounding = 5L, double.guard = 0L, double.ulp.digits = -52L, double.neg.ulp.digits = -53L, double.exponent = 11L, double.min.exp = -1022L, double.max.exp = 1024L, integer.max = 2147483647L, sizeof.long = 8L, sizeof.longlong = 8L, sizeof.longdouble = 16L, sizeof.pointer = 8L), .Names = c('double.eps', 'double.neg.eps', 'double.xmin', 'double.xmax', 'double.base', 'double.digits', 'double.rounding', 'double.guard', 'double.ulp.digits', 'double.neg.ulp.digits', 'double.exponent', 'double.min.exp', 'double.max.exp', 'integer.max', 'sizeof.long', 'sizeof.longlong', 'sizeof.longdouble', 'sizeof.pointer')));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist5
#argv <- list(structure(list(widths = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.880387330793302, 0.872694837975491, 0.862482627238653, 0.85694743348285, 0.844691564126209, 0.837992157219203, 0.826065549537932, 0.821813943091766, 0.801815430713592, 0.777814415451275, 0.862246453969427, 0.852609391860845, 0.852456189097792, 0.852184980555031, 0.847433895388854, 0.847321709738264, 0.843043642624801, 0.839180526055581, 0.838791375904974, 0.832684615585117, 0.829332878628487, 0.818738807141856, 0.817393740696655, 0.795187378905238, 0.771817782697421, 0.644452148607831, 0.532190150080465, 0.330404926016424), .Dim = c(28L, 3L), .Dimnames = list(c('10', '9', '2', '4', '8', '7', '6', '3', '1', '5', '22', '19', '11', '13', '18', '15', '16', '23', '24', '12', '14', '20', '21', '17', '25', '27', '28', '26'), c('cluster', 'neighbor', 'sil_width'))), clus.avg.widths = c(0.838270528963027, 0.778192810753059), avg.width = 0.799649138685191), .Names = c('widths', 'clus.avg.widths', 'avg.width')));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist6
#argv <- list(structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08, it = 898L, maxit = 5000,     ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist7
#argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L), mday = c(30L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 30L, 30L, 30L, 31L, 30L, 31L, 31L, 31L, 30L), mon = c(5L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 5L, 5L, 5L, 5L, 11L, 11L, 11L, 5L, 5L, 5L, 11L, 5L, 11L, 11L, 11L, 5L), year = c(72L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 81L, 82L, 83L, 85L, 87L, 89L, 90L, 92L, 93L, 94L, 95L, 97L, 98L, 105L, 108L, 112L), wday = c(5L, 0L, 1L, 2L, 3L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 0L, 4L, 0L, 1L, 2L, 3L, 4L, 0L, 1L, 4L, 6L, 3L, 6L), yday = c(181L, 365L, 364L, 364L, 364L, 365L, 364L, 364L, 364L, 180L, 180L, 180L, 180L, 364L, 364L, 364L, 181L, 180L, 180L, 364L, 180L, 364L, 364L, 365L, 181L), isdst = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), tzone = c('', 'EST', 'EDT')));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist8
#argv <- list(structure(list(usr = c(0.568, 1.432, -1.08, 1.08), xaxp = c(0.6, 1.4, 4), yaxp = c(-1, 1, 4)), .Names = c('usr', 'xaxp', 'yaxp')));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinispairlist.testispairlist9
#argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, -10L), class = 'data.frame'));is.pairlist(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisraw.testisraw1
#argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.raw(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisraw.testisraw2
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.raw(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisraw.testisraw3
#argv <- list(c(0.367649186507741, -0.792514168501158, 0.0770550181313438, 0.193209990320579, 0.556026088821232, -1.90995675991293, 1.21007077813812, -1.22764970620883));is.raw(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisraw.testisraw4
#argv <- list(structure(c(1, 1, 1, 1, 1, 1), .Dim = 1:3));is.raw(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisraw.testisraw5
#argv <- list(raw(0));is.raw(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinissymbol.testissymbol1
#argv <- list(0.05);is.symbol(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinissymbol.testissymbol2
#argv <- list(structure(c(1, 1, 1, 1, 1, 1), .Dim = 1:3));is.symbol(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinissymbol.testissymbol3
#argv <- list(numeric(0));is.symbol(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinissymbol.testissymbol4
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.symbol(argv[[1]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted1
#argv <- list(c(1L, 2L, 4L), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted11
#argv <- structure(list(x = c('A', 'B', 'C', 'D', 'E', 'F', 'G',     'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',     'T', 'U', 'V', 'W', 'X', 'Y', 'Z')), .Names = 'x');do.call('is.unsorted', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted13
#argv <- structure(list(x = c(1L, 2L, 3L, 5L, 5L, 6L, 6L, 7L,     7L, 7L, 7L, 7L, 8L, 8L, 9L, 9L, 10L, 12L, 12L, 12L, 12L,     13L, 15L, 20L, 28L)), .Names = 'x');do.call('is.unsorted', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted2
#argv <- list(c(10.7041467781967, 11.5754756379084, 12.524991240374, 13.5975143137056, 14.4688431734172, 15.4183587758829, 16.4908818492144, 17.7566218541999, 19.1425780866377, 20.5285343190754, 22.0685075746448, 23.9825281292691, 26.4455166737415, 29.7592803351446, 34.4380365011698, 41.4254228764895, 44.7391865378926, 49.4179427039178, 56.4053290792375), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted3
#argv <- list(c(-19, -12.21, -7.07, -6.14, -4.56, -4.09, -3.8, -2.22, -1.97, -1.95, -1.83, -1.82, -1.77, -1.56, -1.48, -1.42, -1.19, -1.12, -1.09, -1.04, -0.96, -0.89, -0.87, -0.87, -0.78, -0.77, -0.77, -0.74, -0.71, -0.63, -0.61, -0.59, -0.54, -0.51, -0.5, -0.5, -0.44, -0.4, -0.4, -0.37, -0.33, -0.28, -0.21, -0.2, -0.16, -0.16, -0.12, -0.1, -0.05, -0.01, -0.01, 0.04, 0.11, 0.13, 0.14, 0.15, 0.15, 0.25, 0.25, 0.26, 0.34, 0.42, 0.44, 0.46, 0.48, 0.48, 0.49, 0.49, 0.51, 0.57, 0.58, 0.64, 0.66, 0.7, 0.74, 0.8, 0.83, 0.94, 0.94, 1.02, 1.09, 1.12, 1.15, 1.18, 1.19, 1.63, 1.86, 1.92, 2.11, 2.17, 2.21, 2.22, 2.25, 2.64, 2.75, 4.18, 4.6, 5.74, 22.42, 44.32), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted4
#argv <- list(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted5
#argv <- list(c(8, 6, 9, 4, 3, 7, 1, 5, 2), TRUE); .Internal(is.unsorted(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted6
#argv <- list(c(1, 2, 3, 2), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted8
#argv <- list(c(2L, 1L, 0L, 3L), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisunsorted.testisunsorted9
#argv <- list(c(1L, 3L, 2L, 4L), TRUE); .Internal(is.unsorted(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector1
#argv <- list(list(structure(0, class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), 1262304000), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector11
#argv <- list(list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/methods/R/methods', '/home/lzhao/hg/r-instrumented/library/methods/R/methods'), frow = c(6030L, 6032L), lrow = c(6031L, 6063L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/hg/r-instrumented/library/methods/R/methods', frow = 6036L, lrow = 6055L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector12
#argv <- list(structure(list(B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor')), .Names = c('B', 'V', 'N'), class = 'data.frame', row.names = 2:72), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector13
#argv <- list(list('‘FUN’ is found by a call to ‘match.fun’ and typically   is specified as a function or a symbol (e.g. a backquoted name) or a   character string specifying a function to be searched for from the   environment of the call to ‘lapply’.'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector14
#argv <- list(list(c(35, 232, 232, 355, 1041, 1510, 1525, 1548, 1560, 1560, 1563, 1641, 1648, 1652, 1654, 1654, 1690, 1690, 1710, 1710, 1710, 1710, 1779, 1779, 1779, 1779, 1787, 1804, 1812, 1836, 1854, 1864, 1899, 1919, 1920, 1958, 1963, 2007, 2011, 2024, 2024, 2024, 2028, 2061, 2061, 2061, 2062, 2062, 2075, 2085, 2103, 2156, 2227, 2264, 2339, 2339, 2361, 2361, 2387, 2387, 2388, 2426, 2431, 2460, 2493, 2493, 2542, 2559, 2559, 2570, 2676, 2738, 2782, 2984, 3067, 3144, 3154, 3199, 3228, 3297, 3328, 3328, 3330, 3383, 3384, 3384, 3402, 3402, 3441, 3458, 3459, 3459, 3476, 3476, 3695, 3695, 3776, 3776, 3776, 3830, 3856, 3909, 3909, 3968, 3968, 4001, 4119, 4124, 4207, 4207, 4310, 4390, 4479, 4479, 4688), c(0, 0, 0, 0, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector15
#argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector17
#argv <- list(structure(c(315.42, 316.32, 316.49, 317.56, 318.13, 318, 316.39, 314.66, 313.68, 313.18, 314.66, 315.43, 316.27, 316.81, 317.42, 318.87, 319.87, 319.43, 318.01, 315.75, 314, 313.68, 314.84, 316.03, 316.73, 317.54, 318.38, 319.31, 320.42, 319.61, 318.42, 316.64, 314.83, 315.15, 315.95, 316.85, 317.78, 318.4, 319.53, 320.41, 320.85, 320.45, 319.44, 317.25, 316.12, 315.27, 316.53, 317.53, 318.58, 318.92, 319.7, 321.22, 322.08, 321.31, 319.58, 317.61, 316.05, 315.83, 316.91, 318.2, 319.41, 320.07, 320.74, 321.4, 322.06, 321.73, 320.27, 318.54, 316.54, 316.71, 317.53, 318.55, 319.27, 320.28, 320.73, 321.97, 322, 321.71, 321.05, 318.71, 317.65, 317.14, 318.71, 319.25, 320.46, 321.43, 322.22, 323.54, 323.91, 323.59, 322.26, 320.21, 318.48, 317.94, 319.63, 320.87, 322.17, 322.34, 322.88, 324.25, 324.83, 323.93, 322.39, 320.76, 319.1, 319.23, 320.56, 321.8, 322.4, 322.99, 323.73, 324.86, 325.41, 325.19, 323.97, 321.92, 320.1, 319.96, 320.97, 322.48, 323.52, 323.89, 325.04, 326.01, 326.67, 325.96, 325.13, 322.9, 321.61, 321.01, 322.08, 323.37, 324.34, 325.3, 326.29, 327.54, 327.54, 327.21, 325.98, 324.42, 322.91, 322.9, 323.85, 324.96, 326.01, 326.51, 327.01, 327.62, 328.76, 328.4, 327.2, 325.28, 323.2, 323.4, 324.64, 325.85, 326.6, 327.47, 327.58, 329.56, 329.9, 328.92, 327.89, 326.17, 324.68, 325.04, 326.34, 327.39, 328.37, 329.4, 330.14, 331.33, 332.31, 331.9, 330.7, 329.15, 327.34, 327.02, 327.99, 328.48, 329.18, 330.55, 331.32, 332.48, 332.92, 332.08, 331.02, 329.24, 327.28, 327.21, 328.29, 329.41, 330.23, 331.24, 331.87, 333.14, 333.8, 333.42, 331.73, 329.9, 328.4, 328.17, 329.32, 330.59, 331.58, 332.39, 333.33, 334.41, 334.71, 334.17, 332.88, 330.77, 329.14, 328.77, 330.14, 331.52, 332.75, 333.25, 334.53, 335.9, 336.57, 336.1, 334.76, 332.59, 331.41, 330.98, 332.24, 333.68, 334.8, 335.22, 336.47, 337.59, 337.84, 337.72, 336.37, 334.51, 332.6, 332.37, 333.75, 334.79, 336.05, 336.59, 337.79, 338.71, 339.3, 339.12, 337.56, 335.92, 333.74, 333.7, 335.13, 336.56, 337.84, 338.19, 339.9, 340.6, 341.29, 341, 339.39, 337.43, 335.72, 335.84, 336.93, 338.04, 339.06, 340.3, 341.21, 342.33, 342.74, 342.07, 340.32, 338.27, 336.52, 336.68, 338.19, 339.44, 340.57, 341.44, 342.53, 343.39, 343.96, 343.18, 341.88, 339.65, 337.8, 337.69, 339.09, 340.32, 341.2, 342.35, 342.93, 344.77, 345.58, 345.14, 343.81, 342.22, 339.69, 339.82, 340.98, 342.82, 343.52, 344.33, 345.11, 346.88, 347.25, 346.61, 345.22, 343.11, 340.9, 341.17, 342.8, 344.04, 344.79, 345.82, 347.25, 348.17, 348.75, 348.07, 346.38, 344.52, 342.92, 342.63, 344.06, 345.38, 346.12, 346.79, 347.69, 349.38, 350.04, 349.38, 347.78, 345.75, 344.7, 344.01, 345.5, 346.75, 347.86, 348.32, 349.26, 350.84, 351.7, 351.11, 349.37, 347.97, 346.31, 346.22, 347.68, 348.82, 350.29, 351.58, 352.08, 353.45, 354.08, 353.66, 352.25, 350.3, 348.58, 348.74, 349.93, 351.21, 352.62, 352.93, 353.54, 355.27, 355.52, 354.97, 353.74, 351.51, 349.63, 349.82, 351.12, 352.35, 353.47, 354.51, 355.18, 355.98, 356.94, 355.99, 354.58, 352.68, 350.72, 350.92, 352.55, 353.91), .Tsp = c(1959, 1990.91666666667, 12), class = 'ts'), 'symbol'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector18
#argv <- list(structure(list(age = 60), .Names = 'age', row.names = c(NA, -1L), class = 'data.frame'), 'numeric'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector19
#argv <- list(c(1.00000001+1.00000001i, 1.00000002+1.00000002i, 1.00000003+1.00000003i, 1.00000004+1.00000004i, 1.00000005+1.00000005i, 1.00000006+1.00000006i, 1.00000007+1.00000007i, 1.00000008+1.00000008i, 1.00000009+1.00000009i, 1.0000001+1.0000001i), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector2
#argv <- list(list(c(' 1', 'NA', ' 1'), c('1.1', ' NA', '2.0'), c('1.1+0i', '    NA', '3.0+0i'), c('NA', 'NA', 'NA'), c('FALSE', '   NA', ' TRUE'), c('abc', NA, 'def')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector22
#argv <- list(structure(list(Subject = structure(c(40L, 40L, 40L, 40L, 40L, 40L, 40L, 40L), .Label = c('42', '28', '30', '56', '46', '5', '55', '32', '43', '29', '3', '11', '45', '22', '40', '47', '31', '14', '7', '41', '33', '44', '23', '57', '34', '18', '36', '21', '15', '38', '10', '1', '58', '51', '4', '6', '19', '2', '27', '53', '37', '20', '12', '9', '17', '26', '8', '49', '39', '54', '25', '35', '52', '13', '16', '59', '48', '24', '50'), class = c('ordered', 'factor')), Wt = c(1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7), Apgar = structure(c(8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L), .Label = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), class = c('ordered', 'factor')), ApgarInd = structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('< 5', '>= 5'), class = 'factor'), time = c(0, 4, 6, 23.8, 27, 28, 39.5, 47), dose = c(17, 17, NA, 4, 7.5, 4, 4, NA), conc = c(NA, NA, 19.1, NA, NA, NA, NA, 33.3)), .Names = c('Subject', 'Wt', 'Apgar', 'ApgarInd', 'time', 'dose', 'conc'), row.names = c('669', '670', '671', '672', '673', '674', '675', '676'), class = 'data.frame'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector23
#argv <- list(list(structure(c(0.445983387275159, 0.0291424961297979, 0.305722673636889, 0.0640910333172597, 6.1841587262516e-05, 0.000608774190997193, 0.00533346072966287, 1.87468589092225, 0.00776943250876635, 0.00695873604736988), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), 0), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector24
#argv <- list(structure(list(`1` = structure(list(stats = c(-9.90250128905181, -7.70852699427806, -5.13496062122677, -3.95948091921295, 1.46970778502994), n = 29L, conf = c(-6.23492561965266, -4.03499562280088), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `2` = structure(list(stats = c(-11.1332994435188, -6.39592651878103, -4.21825647639093, -2.4710346135438, 0.142332232638518), n = 27L, conf = c(-5.41170283935282, -3.02481011342905), out = c(5.49660997093232, 3.55716552721441)), .Names = c('stats', 'n', 'conf', 'out')), `3` = structure(list(stats = c(-6.21825647639093, -4.89504044270307, -3.50339002906768, -2.12460329098075, 1.68674122392151), n = 27L, conf = c(-4.34580001700278, -2.66098004113257), out = 3.49961675599928), .Names = c('stats', 'n', 'conf', 'out')), `4` = structure(list(stats = c(-5.85766776736148, -2.17391966458661, -1.21825647639093, 0.620760276498144, 4.06758688195534), n = 27L, conf = c(-2.06803799696724, -0.368474955814626), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `5` = structure(list(stats = c(-7.47307099543129, -3.31679346391683, -0.571500134198763, 0.883997101871453, 5.68320653608317), n = 29L, conf = c(-1.8040063492643, 0.661006080866776), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `6` = structure(list(stats = c(-5.74371144541934, -1.32005454439779, -0.0691719185754582, 1.68918858100201, 5.88399710187145), n = 25L, conf = c(-1.02009274620179, 0.881748909050878), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `7` = structure(list(    stats = c(-0.959725366614089, 1.04051908078705, 2.68320653608317, 4.68320653608317, 6.86503937877323), n = 29L, conf = c(1.61444701144563, 3.7519660607207), out = c(10.4020441274641, 11.9338597320297)), .Names = c('stats', 'n', 'conf', 'out')), `8` = structure(list(stats = c(-4.31872184443094, -0.341901367712618, 2.09749871094819, 4.42849305489153, 9.86504029478776), n = 29L, conf = c(0.69787150218962, 3.49712591970676), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `9` = structure(list(    stats = c(-4.47307099543129, 1.46970778502994, 3.27573063223268, 6.09749871094819, 8.5266833961141), n = 29L, conf = c(1.91794309465097, 4.63351816981439), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `10` = structure(list(stats = c(-5.31679346391683, -1.04725655125673, 2.61440793064106, 7.68320653608317, 14.5985362650564), n = 26L, conf = c(-0.0908438616349159, 5.31965972291703), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `11` = structure(list(stats = c(-4.26322883423527, -1.27884444060771, 1.37070166144218, 5.85051662661329, 10.1854674121229), n = 31L, conf = c(-0.65244259398095, 3.39384591686531), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out'))), .Dim = 11L, .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'))), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector25
#argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector26
#argv <- list(list(structure(list(srcfile = c(NA, '/home/lzhao/hg/r-instrumented/library/graphics/R/graphics'), frow = c(NA, 3990L), lrow = c(NA, 3991L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/hg/r-instrumented/library/graphics/R/graphics', frow = 3998L, lrow = 4009L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector27
#argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), terms = quote(y ~ x * z), row.names = c(NA, 10L), class = 'data.frame'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector28
#argv <- list(list(structure(c(-1L, -2L, -3L, -4L, -5L, -6L, -7L, -8L, -9L, -10L), .Dim = c(2L, 5L)), structure(list(V1 = 1:5, V2 = 6:10, V3 = 11:15, V4 = 16:20, V5 = 21:25), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(NA, -5L), class = 'data.frame')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector29
#argv <- list(structure(list(group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor', contrasts = 'contr.treatment')), .Names = 'group', class = 'data.frame', row.names = 1:2), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector3
#argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector30
#argv <- list(structure(c(12L, 120L, 116L), .Dim = 3L, .Dimnames = structure(list(c('0-5yrs', '6-11yrs', '12+ yrs')), .Names = ''), class = 'table'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector31
#argv <- list(structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor'), 'symbol'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector32
#argv <- list(structure(list(Df = c(NA, 0L), Deviance = c(NA, 0), `Resid. Df` = c(10L, 10L), `Resid. Dev` = c(2.74035772634541, 2.74035772634541)), .Names = c('Df', 'Deviance', 'Resid. Df', 'Resid. Dev'), row.names = c('NULL', 'x'), class = c('anova', 'data.frame'), heading = 'Analysis of Deviance Table\n\nModel: gaussian, link: identity\n\nResponse: y\n\nTerms added sequentially (first to last)\n\n'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector34
#argv <- structure(list(x = 3), .Names = 'x');do.call('is.vector', argv)
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector5
#argv <- list(structure(list(group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = 'group', class = 'data.frame', row.names = c(NA, 20L)), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector6
#argv <- list(structure(list(y = c(1.08728092481538, 0.0420572471552261, 0.787502161306819, 0.512717751544676, 3.35376639535311, 0.204341510750309, -0.334930602487435, 0.80049208412789, -0.416177803375218, -0.777970346246018, 0.934996808181635, -0.678786709127108, 1.52621589791412, 0.5895781228122, -0.744496121210548, -1.99065153885627, 1.51286447692396, -0.750182409847851), A = c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1), U = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor'), V = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('y', 'A', 'U', 'V'), terms = quote(y ~ A:U + A:V - 1), row.names = c(NA, 18L), class = 'data.frame'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector7
#argv <- list(list(integer(0)), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinisvector.testisvector9
#argv <- list(structure(list(Plant = structure(c(5L, 5L, 5L, 5L, 5L, 5L, 5L), .Label = c('Qn1', 'Qn2', 'Qn3', 'Qc1', 'Qc3', 'Qc2', 'Mn3', 'Mn2', 'Mn1', 'Mc2', 'Mc3', 'Mc1'), class = c('ordered', 'factor')), Type = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c('Quebec', 'Mississippi'), class = 'factor'), Treatment = structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('nonchilled', 'chilled'), class = 'factor')), .Names = c('Plant', 'Type', 'Treatment'), class = 'data.frame', row.names = 36:42), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength1
#argv <- list('~ . + Soft+M.user:Temp');length(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength10
#argv <- list(list(structure(c(-1L, -2L, -3L, -4L, -5L, -6L, -7L, -8L, -9L, -10L), .Dim = c(2L, 5L)), structure(list(V1 = 1:5, V2 = 6:10, V3 = 11:15, V4 = 16:20, V5 = 21:25), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(NA, -5L), class = 'data.frame')));length(argv[[1]]);
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength11
#argv <- list(structure(list(weight = c(4.17, 5.58), group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('weight', 'group'), row.names = 1:2, class = 'data.frame'));length(argv[[1]]);
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength13
#argv <- list(structure(c(-Inf, -Inf, 0, 0, 1, 2, Inf, Inf, Inf, -Inf, -Inf, 0, 0.5, 1, 2, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 1, 2, 2, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.8, 1.6, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.3, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.4, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.2, 1.9, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.499999999999999, 1.33333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.325, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)));length(argv[[1]]);
[1] 81

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength14
#argv <- list(structure(list(character = character(0), numeric = numeric(0), numeric = numeric(0), complex = complex(0), integer = integer(0), logical = logical(0), character = character(0)), .Names = c('character', 'numeric', 'numeric', 'complex', 'integer', 'logical', 'character')));length(argv[[1]]);
[1] 7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength15
#argv <- list(structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08, it = 898L, maxit = 5000,     ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'));length(argv[[1]]);
[1] 12

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength16
#argv <- list(c(-167.089651989438, -122.420302709026));length(argv[[1]]);
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength17
#argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils'), frow = c(1809L, 1810L, 1811L, 1812L, 1802L, 1827L, 1840L), lrow = c(1809L, 1814L, 1811L, 1813L, 1816L, 1834L, 1842L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 7L)));length(argv[[1]]);
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength18
#argv <- list(structure(list(object = structure(3.14159265358979, comment = 'Start with pi'), slots = 'comment', dataPart = TRUE), .Names = c('object', 'slots', 'dataPart')));length(argv[[1]]);
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength19
#argv <- list(structure(list(name = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor'), nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor')), .Names = c('name', 'title', 'other.author', 'nationality', 'deceased'), row.names = c(6L, 4L, 5L, 3L, 1L, 2L), class = 'data.frame'));length(argv[[1]]);
[1] 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength2
#argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));length(argv[[1]]);
[1] 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength20
#argv <- list(c('  These operators return vectors containing the result of the element', '  by element operations.  The elements of shorter vectors are recycled', '  as necessary (with a ‘warning’ when they are recycled only', '  _fractionally_).  The operators are ‘+’ for addition,', '  ‘-’ for subtraction, ‘*’ for multiplication, ‘/’ for', '  division and ‘^’ for exponentiation.', '', '  ‘%%’ indicates ‘x mod y’ and ‘%/%’ indicates', '  integer division.  It is guaranteed that '));length(argv[[1]]);
[1] 9

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength21
#argv <- list(structure(c(3.14475800140539, 3.11465478132706, 3.10630529271564, 3.0844667956717, 3.10602734436792, 3.1179780987041, 3.10510218928681, 3.13870964347838, 3.1236627058491, 3.16426296817658, 3.18524449375727, 3.19607967740367, 3.12404668400251, 3.1073799072767, 3.10252776401906, 3.0888846453793, 3.10244112014795, 3.1099501880355, 3.10186319790916, 3.12297248377609, 3.11352136079872, 3.13902281247452, 3.1522015282299, 3.15900722027104), .Tsp = c(1983, 1984.91666666667, 12), class = 'ts'));length(argv[[1]]);
[1] 24

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength22
#argv <- list(c(3.14159265358979e-10, 0.0314159265358979, 3.14159265358979, 31.4159265358979, 314.159265358979, 314159265.358979, 3.14159265358979e+20));length(argv[[1]]);
[1] 7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength23
#argv <- list(structure(list(names = character(0), row.names = integer(0), class = 'data.frame'), .Names = c('names', 'row.names', 'class')));length(argv[[1]]);
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength24
#argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));length(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength25
#argv <- list(c(0+0i, -0.740437474899139-0.482946826369552i, -0.333166449062945-0.753763230370951i, 0+0i, 0.522033838837248+0.102958580568997i, 0+0i, 0+0i, 0+0i, -0.563222209454641-0.518013590538404i, -0.068796124369349+0.97981641556181i, 0.244428915757284-0.330850507052219i, 0+0i, 0+0i, 0+0i, -0.451685375030484+0.126357395265016i, 0.375304016677864+0.436900190874168i, -0.674059300339186+0.084416799015191i, 0+0i, 0.509114684244823-0.086484623694157i, -0.535642839219739+0.289927561259502i, 0.629727249341749+0.707648659913726i, 0+0i, -0.333800277698424-0.317646103980588i, -0.422186107911717+0.317002735170286i, -0.616692335171505+0.068946145379939i, -0.136100485502624-0.487679764177213i, -0.68086000613138+0.047032323152903i, 0.296209908189768+0.585533462557103i, 0.43280012844045+0.136998748692477i, -0.680205941942733-0.256569497284745i, 0+0i, 0+0i, 0+0i, -0.983769553611346-0.088288289740869i, -0.046488672133508-0.622109071207677i, 0+0i, 0.379095891586975-0.727769566649926i, 0+0i, 0+0i, -0.150428076228347+0.615598727377677i, 0.762964492726935+0.377685645913312i, -0.7825325866026+0.365371705974346i, -0.792443423040311-0.029652870362208i, 0.265771060547393-0.106618612674382i, -0.076741350022367-0.422144111460857i, 0.120061986786934-0.623033085890884i, 0+0i, -0.145741981978782+0.529165019069452i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0.328611964770906+0.215416587846774i, -0.583053183540166-0.668235480667835i, -0.782507286391418+0.318827979750013i, 0+0i, 0+0i, 0+0i, 0+0i, -0.271871452223431+0.426340387811162i, 0.590808184713385-0.344468770084509i, 0+0i, 0+0i, 0+0i, 0+0i, 0.866602113481861-0.172567291859327i, 0.031389337713892-0.607820631329035i, 0+0i, 0+0i, 0.151969488085021-0.827990593142535i, -0.266853748421854-0.866413193943766i, 0.071623062591495-0.867246686843546i, -0.788765741891382+0.508717463380604i, -0.228835546857432-0.349587041980114i, 0.500139791176978-0.016703152458872i, 0.15619107374708-0.485402548890295i, -0.369039310626083+0.398423724273751i, 0+0i, -0.399467692630093-0.421179989556223i, 0.411274074028001+0.133781691724871i, 0.573364366690245+0.328833257005489i, 0+0i, 0.387209171815106+0.750271083217101i, 0+0i, 0+0i, -0.168543113030619+0.43048451175239i, 0+0i, 0.388005062566602-0.290649953587954i, -0.013004326537709-0.490434895455784i, 0.069845221019376-0.762134635168809i, 0+0i, 0.27384734040072+0.383667165938905i, 0+0i, -0.894951082455532+0.317442909372288i, 0.5073401683933-0.213001485168032i, 0+0i, -0.343169835663372+0.597359384628839i, -0.283179001991236-0.385834501657171i, -0.517794900198098-0.36732932802092i));length(argv[[1]]);
[1] 100

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength27
#argv <- list(c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));length(argv[[1]]);
[1] 23

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength28
#argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));length(argv[[1]]);
[1] 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength29
#argv <- list(list(structure(list(srcfile = c('/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R'), frow = 122:123, lrow = 122:123), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', frow = 124L, lrow = 124L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame')));length(argv[[1]]);
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength30
#argv <- list(structure(list(Df = c(NA, 1, 1, 1), `Sum of Sq` = c(NA, 820.907401534698, 26.7893827563485, 9.93175377572661), RSS = c(47.9727294003871, 868.880130935086, 74.7621121567356, 57.9044831761137), AIC = c(24.9738836085411, 60.6293256496563, 28.7417044039189, 25.4199908988691)), .Names = c('Df', 'Sum of Sq', 'RSS', 'AIC'), row.names = c('<none>', '- x1', '- x2', '- x4'), class = c('anova', 'data.frame')));length(argv[[1]]);
[1] 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength31
#argv <- list(list(structure(c(30.3398431424662, 53.0273088677942, 11.6721423374092, 3.1219098789343, 9.58888402166762, 41.0027598267751, 8.26816396385794, 46.7997906867199, 7.96616780447507, 27.2952699050281, 7.05399789883986, 5.03904688224502, 2.61409832611023, 14.9537930856989, 7.22312484916424, 8.25480759597494, 37.7467076615774, 65.972863357068, 14.5216619125438, 3.88406159493231, 10.6419076139158, 45.5055646732323, 9.17614988785547, 51.9392087455927, 7.84624470450625, 26.8843655076016, 6.94780665155944, 4.96318881123281, 2.45558360989303, 14.0470191347445, 6.78512618085463, 7.75424934595279), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')), 2.22044604925031e-16));length(argv[[1]]);
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength32
#argv <- list(structure(c(78796800, 94694400, 126230400, 157766400, 189302400, 220924800, 252460800, 283996800, 315532800, 362793600, 394329600, 425865600, 489024000, 567993600, 631152000, 662688000, 709948800, 741484800, 773020800, 820454400, 867715200, 915148800, 1136073600, 1230768000, 1341100800), class = c('POSIXct', 'POSIXt')));length(argv[[1]]);
[1] 25

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength33
#argv <- list(c(1.03711990677284e+29, 4.58346574364236e+27, 2.02562481791768e+26, 8.95208153058638e+24, 3.95629847255715e+23, 1.7484534240517e+22, 7.7271454561408e+20, 34149480972585590784, 1509208102926327040, 66698206089453432, 2947672264272576, 130269967045726, 5757178273805.44, 254434569303.796, 11244672651.0134, 496975017.177538, 21967997.2327598, 971670.715389718, 43086.3667907314, 1929.95757399166, 90.0797181275922, 5.03402841668789, 0.625146618950265, -0.304867530220417, -0.123332207492738, 0.0884498083502638, 0.0243523396488189, -0.0527015109337102, -3.68088311960635e-05, -0.0351989174304481, 0.024656114194774));length(argv[[1]]);
[1] 31

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength34
#argv <- list(structure(c('1.0', NA, NA, 'methods, graphics, pkgA', NA, NA, NA, 'GPL (>= 2)', NA, NA, NA, NA, NA, NA, 'R 3.0.1; ; 2014-03-17 18:49:56 UTC; unix'), .Names = c('Version', NA, NA, 'Imports', NA, NA, NA, 'License', NA, NA, NA, NA, NA, NA, 'Built')));length(argv[[1]]);
[1] 15

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength35
#argv <- list(structure(c(-1, 0, 1, 2, 3), .Tsp = c(-1, 3, 1)));length(argv[[1]]);
[1] 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength4
#argv <- list(structure(list(a = 6:10), .Names = 'a', row.names = 6:10, class = 'data.frame'));length(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlength.testlength9
#argv <- list(clength(argv[[1]]);
[1] 260

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlevels.testlevels1
#argv <- structure(list(x = structure(c(1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L),     .Label = c('1', '2'), class = 'factor')), .Names = 'x');do.call('levels', argv)
[1] "1" "2"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlist.testlist28
#argv <- list(3.14159265358979, 'C', NaN, Inf, 1:3, c(0, NA), NA);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);
[[1]]
[1] 3.141593

[[2]]
[1] "C"

[[3]]
[1] NaN

[[4]]
[1] Inf

[[5]]
[1] 1 2 3

[[6]]
[1]  0 NA

[[7]]
[1] NA


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlist.testlist38
#argv <- list(srcfile = '/home/lzhao/hg/r-instrumented/library/utils/R/utils', frow = 1271L, lrow = 1273L);list(argv[[1]],argv[[2]],argv[[3]]);
[[1]]
[1] "/home/lzhao/hg/r-instrumented/library/utils/R/utils"

[[2]]
[1] 1271

[[3]]
[1] 1273


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlist.testlist40
#argv <- list(x = c(190, 118, 149, 313, NA, NA, 299, 99, 19, 194, NA, 256, 290, 274, 65, 334, 307, 78, 322, 44, 8, 320, 25, 92, 66, 266, NA, 13, 252, 223, 279, 286, 287, 242, 186, 220, 264, 127, 273, 291, 323, 259, 250, 148, 332, 322, 191, 284, 37, 120, 137, 150, 59, 91, 250, 135, 127, 47, 98, 31, 138, 269, 248, 236, 101, 175, 314, 276, 267, 272, 175, 139, 264, 175, 291, 48, 260, 274, 285, 187, 220, 7, 258, 295, 294, 223, 81, 82, 213, 275, 253, 254, 83, 24, 77, NA, NA, NA, 255, 229, 207, 222, 137, 192, 273, 157, 64, 71, 51, 115, 244, 190, 259, 36, 255, 212, 238, 215, 153, 203, 225, 237, 188, 167, 197, 183, 189, 95, 92, 252, 220, 230, 259, 236, 259, 238, 24, 112, 237, 224, 27, 238, 201, 238, 14, 139, 49, 20, 193, 145, 191, 131, 223), y = c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5, 9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4, 8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8, 4.1, 9.2, 9.2, 10.9, 4.6, 10.9, 5.1, 6.3, 5.7, 7.4, 8.6, 14.3, 14.9, 14.9, 14.3, 6.9, 10.3, 6.3, 5.1, 11.5, 6.9, 9.7, 11.5, 8.6, 8, 8.6, 12, 7.4, 7.4, 7.4, 9.2, 6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3, 8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9, 10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3, 6.3, 6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7, 14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6, 9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), xlab = NULL, ylab = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);
[[1]]
  [1] 190 118 149 313  NA  NA 299  99  19 194  NA 256 290 274  65 334 307  78
 [19] 322  44   8 320  25  92  66 266  NA  13 252 223 279 286 287 242 186 220
 [37] 264 127 273 291 323 259 250 148 332 322 191 284  37 120 137 150  59  91
 [55] 250 135 127  47  98  31 138 269 248 236 101 175 314 276 267 272 175 139
 [73] 264 175 291  48 260 274 285 187 220   7 258 295 294 223  81  82 213 275
 [91] 253 254  83  24  77  NA  NA  NA 255 229 207 222 137 192 273 157  64  71
[109]  51 115 244 190 259  36 255 212 238 215 153 203 225 237 188 167 197 183
[127] 189  95  92 252 220 230 259 236 259 238  24 112 237 224  27 238 201 238
[145]  14 139  49  20 193 145 191 131 223

[[2]]
  [1]  7.4  8.0 12.6 11.5 14.3 14.9  8.6 13.8 20.1  8.6  6.9  9.7  9.2 10.9 13.2
 [16] 11.5 12.0 18.4 11.5  9.7  9.7 16.6  9.7 12.0 16.6 14.9  8.0 12.0 14.9  5.7
 [31]  7.4  8.6  9.7 16.1  9.2  8.6 14.3  9.7  6.9 13.8 11.5 10.9  9.2  8.0 13.8
 [46] 11.5 14.9 20.7  9.2 11.5 10.3  6.3  1.7  4.6  6.3  8.0  8.0 10.3 11.5 14.9
 [61]  8.0  4.1  9.2  9.2 10.9  4.6 10.9  5.1  6.3  5.7  7.4  8.6 14.3 14.9 14.9
 [76] 14.3  6.9 10.3  6.3  5.1 11.5  6.9  9.7 11.5  8.6  8.0  8.6 12.0  7.4  7.4
 [91]  7.4  9.2  6.9 13.8  7.4  6.9  7.4  4.6  4.0 10.3  8.0  8.6 11.5 11.5 11.5
[106]  9.7 11.5 10.3  6.3  7.4 10.9 10.3 15.5 14.3 12.6  9.7  3.4  8.0  5.7  9.7
[121]  2.3  6.3  6.3  6.9  5.1  2.8  4.6  7.4 15.5 10.9 10.3 10.9  9.7 14.9 15.5
[136]  6.3 10.9 11.5  6.9 13.8 10.3 10.3  8.0 12.6  9.2 10.3 10.3 16.6  6.9 13.2
[151] 14.3  8.0 11.5

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlist.testlist51
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));list(argv[[1]]);
[[1]]
[1] 3.141593
attr(,"class")
[1] "3.14159265358979"
attr(,"class")
[1] "testit"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlist.testlist56
#argv <- list(class = 'data.frame', row.names = c(NA, 32L));list(argv[[1]],argv[[2]]);
[[1]]
[1] "data.frame"

[[2]]
[1] NA 32


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlist.testlist63
#argv <- list(x = 2.28125, y = 1.70580465116279, xlab = NULL, ylab = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);
[[1]]
[1] 2.28125

[[2]]
[1] 1.705805

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlog.testlog1
#argv <- list(0.7800058115849);do.call('log', argv)
[1] -0.2484539

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlog10.testlog101
#argv <- list(c(0.047, 0.013, 0.002, 1e-04, 2.3e-05, 4.5e-06));log10(argv[[1]]);
[1] -1.327902 -1.886057 -2.698970 -4.000000 -4.638272 -5.346787

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlog10.testlog102
#argv <- list(1.529e+302);log10(argv[[1]]);
[1] 302.1844

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlog10.testlog106
#argv <- list(c(10, 100, 1000, 10000, 1e+05));log10(argv[[1]]);
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlog2.testlog21
#argv <- list(48L);log2(argv[[1]]);
[1] 5.584963

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlog2.testlog23
#argv <- list(2.2250738585072e-308);log2(argv[[1]]);
[1] -1022

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlog2.testlog25
#argv <- list(2.2250738585072e-308);do.call('log2', argv)
[1] -1022

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinlogical.testlogical1
#argv <- structure(list(length = 0), .Names = 'length');do.call('logical', argv)
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames1
#argv <- list('head', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "head"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames10
#argv <- list(c('', '', 'bady'), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "X"    "X"    "bady"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames11
#argv <- list(character(0), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames2
#argv <- list('FALSE', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "FALSE."

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames3
#argv <- list(c('.Call', '.Call numParameters', '.Fortran', '.Fortran numParameters'), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] ".Call"                  ".Call.numParameters"    ".Fortran"
[4] ".Fortran.numParameters"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames4
#argv <- list('..adfl.row.names', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "..adfl.row.names"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames5
#argv <- list(c('name', 'title', 'other.author'), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "name"         "title"        "other.author"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames6
#argv <- list('.2a', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "X.2a"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames7
#argv <- list('', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "X"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames8
#argv <- list(NA_character_, TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "NA."

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakenames.testmakenames9
#argv <- list(c('Subject', 'predict.fixed', 'predict.Subject'), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))
[1] "Subject"         "predict.fixed"   "predict.Subject"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakeunique.testmakeunique1
#argv <- list(c('A', 'B', 'C', 'D', 'E', 'F'), '.'); .Internal(make.unique(argv[[1]], argv[[2]]))
[1] "A" "B" "C" "D" "E" "F"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakeunique.testmakeunique2
#argv <- list(c('b', 'NA', 'NA'), '.'); .Internal(make.unique(argv[[1]], argv[[2]]))
[1] "b"    "NA"   "NA.1"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakeunique.testmakeunique3
#argv <- list(c('1', '2', '3', '6', '7', '7', '7', '8', '8', '10', '11', '12', '12', '12', '15', '15', '16', '17', '19', '20', '21', '21', '23'), '.'); .Internal(make.unique(argv[[1]], argv[[2]]))
 [1] "1"    "2"    "3"    "6"    "7"    "7.1"  "7.2"  "8"    "8.1"  "10"
[11] "11"   "12"   "12.1" "12.2" "15"   "15.1" "16"   "17"   "19"   "20"
[21] "21"   "21.1" "23"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmakeunique.testmakeunique4
#argv <- list(character(0), '.'); .Internal(make.unique(argv[[1]], argv[[2]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch1
#argv <- list('corMatrix', c('dpoMatrix', 'dsyMatrix', 'ddenseMatrix', 'symmetricMatrix', 'dMatrix', 'denseMatrix', 'compMatrix', 'Matrix', 'mMatrix'), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch12
#argv <- list(1:4, 3L, 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 0 0 1 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch13
#argv <- list(c('0.5', '0.5', '0.5', '0.5', '0.5'), 0.5, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1 1 1 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch15
#argv <- list(c('May', 'Jun', 'Jul', 'Aug', 'Sep'), c(NA, NaN), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch16
#argv <- list(c(1L, 2L, 4L, 13L, 14L, 15L, 16L, 17L, 18L, 23L), c(23L, 28L), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] 0 0 0 0 0 0 0 0 0 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch17
#argv <- list(c('dMatrix', 'nonStructure', 'structure'), c('nonStructure', 'structure'), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] NA  1  2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch18
#argv <- list(structure(c(0, 1), .Names = c('Domestic', 'Foreign')), NA_integer_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] NA NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch2
#argv <- list(c('ANY', 'abIndex', 'ddenseMatrix', 'diagonalMatrix', 'dsparseMatrix', 'lMatrix', 'nMatrix', 'nsparseVector', 'pMatrix', 'sparseVector'), 'ANY', NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1]  1 NA NA NA NA NA NA NA NA NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch20
#argv <- list(structure(c(1, 1, 6, 2, 2, 7, 3, 3, 7, 3, 3, 8, 4, 4, 4, 5), .Dim = c(16L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16'), 'y')), c(1, 2, 3, 4, 5, 6, 7, 8), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] 1 1 6 2 2 7 3 3 7 3 3 8 4 4 4 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch21
#argv <- list(structure(c(0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3), .Tsp = c(1959, 1997.91666667, 12), class = 'ts'), c(0, 1, 2, 3), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
  [1] 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1
 [38] 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1
 [75] 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1
[112] 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2
[149] 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2
[186] 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2
[223] 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3
[260] 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3
[297] 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3
[334] 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4
[371] 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4
[408] 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4
[445] 1 1 1 2 2 2 3 3 3 4 4 4 1 1 1 2 2 2 3 3 3 4 4 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch22
#argv <- list(c(NA, NA, 3, 4, 5), c(NA, NA, 4, 5), 0L, NA); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 0 0 0 3 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch23
#argv <- list(structure('tools', .Names = 'name'), c('base', 'utils'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch27
#argv <- list(c('2005-01-01', '2006-01-01', '2007-01-01', '2008-01-01', '2009-01-01'), c(NA, NaN), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch29
#argv <- list(c('TRUE', 'FALSE', 'TRUE', 'FALSE', 'TRUE', 'FALSE', 'TRUE', 'FALSE', 'TRUE', 'FALSE'), c(FALSE, TRUE), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] 2 1 2 1 2 1 2 1 2 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch3
#argv <- list(character(0), NA_integer_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch30
#argv <- list(c('2005-01-01', '2005-02-01', '2005-03-01', '2005-04-01', '2005-05-01', '2005-06-01', '2005-07-01', '2005-08-01', '2005-09-01', '2005-10-01', '2005-11-01', '2005-12-01', '2006-01-01', '2006-02-01', '2006-03-01', '2006-04-01', '2006-05-01', '2006-06-01', '2006-07-01', '2006-08-01', '2006-09-01', '2006-10-01', '2006-11-01', '2006-12-01', '2007-01-01', '2007-02-01', '2007-03-01', '2007-04-01', '2007-05-01', '2007-06-01', '2007-07-01', '2007-08-01', '2007-09-01', '2007-10-01', '2007-11-01', '2007-12-01', '2008-01-01', '2008-02-01', '2008-03-01', '2008-04-01', '2008-05-01', '2008-06-01', '2008-07-01', '2008-08-01', '2008-09-01', '2008-10-01', '2008-11-01', '2008-12-01', '2009-01-01'), NA_integer_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
[26] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch31
#argv <- list(c(1, 2, 3, 4, 8, 12), c(1, 2, 3, 4, 8, 12), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch32
#argv <- list(c('.__C__classA', '.__T__$:base', '.__T__$<-:base', '.__T__[:base', '.__T__plot:graphics', 'plot'), c('.__NAMESPACE__.', '.__S3MethodsTable__.', '.packageName', '.First.lib', '.Last.lib', '.onLoad', '.onAttach', '.onDetach', '.conflicts.OK', '.noGenerics'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 0 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch5
#argv <- list(c(0.00711247435174189, 0.251292124343149, -0.319172743733056, 5.75733114833721e-05, -0.35788385867217, -0.423873493915367, -0.440922191441033, 0.454737405613056, -0.337349081024889, -0.340540089756868, 0.0142999714851724, -0.337349081024889, 0.16929974943645, 0.0119141094780619, 0.0237947544260095, 0.481799107922823, -0.398620160881439, 0.112296211162227, 0.124500575635478, -0.423873493915367, 0.476631055345105, -0.201544176575946, 0.0504435384277691, 0.0142999714851724, 0.0859627732681778, -0.402191440217491, 0.0237947544260095, -0.35788385867217, 0.131606068222389, -0.328335725283617, -0.366873527650917, 0.855944113774621, 0.0506448607016037, -0.540294711232517, 0.365377890605673, 0.122315677921641, 0.122315677921641, 0.476631055345105, 0.0859627732681778, 0.028962807003728, 0.130710526672205, 0.704128425262244, 0.0119141094780619, 0.0506448607016037, 0.0859627732681778, 0.131606068222389, 0.122315677921641, -0.429041546493085, 0.0506448607016037, -0.35788385867217, 0.746844979419744, -0.158827622418446, -0.340540089756868, 0.130710526672205, -0.429041546493085, 0.126579318324608, 0.0119141094780619, 0.251292124343149, -0.283536551482645, 0.107466982896435, 0.586499858105134, -0.402392762491326, -0.85437461044313, 0.133663557186039, -0.328335725283617, 0.124500575635478, 0.0237947544260095, 0.133663557186039, 0.133663557186039, 0.656149860060726, 0.579415619243703, 0.107466982896435, -0.599127482939288, -0.326256982594487, 0.746844979419744, -0.452778727607612, -0.328335725283617, 0.0119141094780619, -0.340540089756868, -0.319172743733056, -0.725390113737062, 0.503481161620698, -0.661275243349858, -0.402392762491326, 0.476631055345105, 0.126579318324608, 0.251292124343149, -0.0874584103134217, 0.107466982896435, -0.201544176575946, 0.0734191385691725), c(-0.85437461044313, -0.725390113737062, -0.661275243349858, -0.599127482939288, -0.540294711232517, -0.452778727607612, -0.440922191441033, -0.429041546493085, -0.423873493915367, -0.402392762491326, -0.402191440217491, -0.398620160881439, -0.366873527650917, -0.35788385867217, -0.340540089756868, -0.337349081024889, -0.328335725283617, -0.326256982594487, -0.319172743733056, -0.283536551482645, -0.201544176575946, -0.158827622418446, -0.0874584103134217, 5.75733114833721e-05, 0.00711247435174189, 0.0119141094780619, 0.0142999714851724, 0.0237947544260095, 0.028962807003728, 0.0504435384277691, 0.0506448607016037, 0.0734191385691725, 0.0859627732681778, 0.107466982896435, 0.112296211162227, 0.122315677921641, 0.124500575635478, 0.126579318324608, 0.130710526672205, 0.131606068222389, 0.133663557186039, 0.16929974943645, 0.251292124343149, 0.365377890605673, 0.454737405613056, 0.476631055345105, 0.481799107922823, 0.503481161620698, 0.579415619243703, 0.586499858105134, 0.656149860060726, 0.704128425262244, 0.746844979419744, 0.855944113774621), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] 25 43 19 24 14  9  7 45 16 15 27 16 42 26 28 47 12 35 37  9 46 21 30 27 33
[26] 11 28 14 40 17 13 54 31  5 44 36 36 46 33 29 39 52 26 31 33 40 36  8 31 14
[51] 53 22 15 39  8 38 26 43 20 34 50 10  1 41 17 37 28 41 41 51 49 34  4 18 53
[76]  6 17 26 15 19  2 48  3 10 46 38 43 23 34 21 32

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch6
#argv <- list(c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'), NA_integer_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [26] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [51] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [76] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
[101] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch7
#argv <- list(character(0), c('methods', 'utils', 'XML', 'RCurl'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch8
#argv <- list(c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'), NA_real_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmatch.testmatch9
#argv <- list(c(-1628571, -1628571, -1200000, -1200000, -1057143, -914286, -771429, -771429, -771429, -628571, -628571, -485714, -485714, -485714, -485714, -342857, -342857, -342857, -342857, -2e+05, -2e+05, -2e+05, -2e+05, -57143, -57143, -57143, 85714, 85714, 228571, 228571, 228571, 371429, 371429, 371429, 371429, 514286, 514286, 514286, 657143, 657143, 657143, 657143, 657143, 942857, 1085714, 1228571, 1228571, 1228571, 1228571, 1371429), c(-1628571, -1200000, -1057143, -914286, -771429, -628571, -485714, -342857, -2e+05, -57143, 85714, 228571, 371429, 514286, 657143, 942857, 1085714, 1228571, 1371429), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1]  1  1  2  2  3  4  5  5  5  6  6  7  7  7  7  8  8  8  8  9  9  9  9 10 10
[26] 10 11 11 12 12 12 13 13 13 13 14 14 14 15 15 15 15 15 16 17 18 18 18 18 19

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax1
#argv <- list(10L, 1L);max(argv[[1]],argv[[2]]);
[1] 10

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax10
#argv <- list(c(FALSE, FALSE));max(argv[[1]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax12
#argv <- list(4L, numeric(0));max(argv[[1]],argv[[2]]);
[1] 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax13
#argv <- list(6L, numeric(0));max(argv[[1]],argv[[2]]);
[1] 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax14
#argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));max(argv[[1]]);
[1] 0.3333332

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax21
#argv <- list(structure(c(13823, NA), class = 'Date'), na.rm = TRUE);max(argv[[1]],argv[[2]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax22
#argv <- list(structure(c(7L, 4L, 3L), .Dim = 3L, .Dimnames = structure(list(c('0', '1', '5')), .Names = ''), class = 'table'));max(argv[[1]]);
[1] 7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax23
#argv <- list(structure(c(0, 1, 1, 1, 1), .Names = c('Hair', 'Eye', 'Sex', 'Hair:Eye', 'Hair:Sex')));max(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax24
#argv <- list(structure(c(Inf, Inf, 2.248e+263, Inf, 3.777e+116, 1.128), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));max(argv[[1]]);
[1] Inf

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax25
#argv <- list(structure(c(-11.3814849918875, -11.9361690778798, 0.562602893455921, 11.5126028934559, 76.2209544348296, -8.66448499188751, -6.94502893455923, -5.28148499188751, -35.7665182531098, 6.35497106544077, -9.20908119253651, -0.898484991887508, -5.59380090589508, -6.12730922120065, -13.3061334505138, 58.6278831800973, -15.1098009058951, -8.29625696322337, -4.07211681990265, 3.7096551514332, 2.60151500811249, 6.24733923742563, -1.33911681990266, -2.14157287723094, -10.5984849918875, -8.12802893455923, 1.30028697944835, -15.7450289345592, 7.20569077879935, -12.6484849918875, 25.1810423201731, -4.42680090589508, -1.90886979448351), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));max(argv[[1]]);
[1] 76.22095

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax26
#argv <- list(c(1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374947, 0.707106781186547, 0.587785252292473, 0.453990499739547, 0.309016994374947, 0.156434465040231, -1.83697019872103e-16, -0.156434465040231, -0.309016994374948, -0.453990499739547, -0.587785252292473, -0.707106781186548, -0.809016994374948, -0.891006524188368, -0.951056516295154, -0.987688340595138, -1, -0.987688340595138, -0.951056516295154, -0.891006524188368, -0.809016994374947, -0.707106781186547, -0.587785252292473, -0.453990499739547, -0.309016994374947, -0.156434465040231, 6.12323399573677e-17, 0.156434465040231, 0.309016994374947, 0.453990499739547, 0.587785252292473, 0.707106781186548, 0.809016994374947, 0.891006524188368, 0.951056516295154, 0.987688340595138, 1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374947, 0.707106781186548, 0.587785252292473, 0.453990499739547, 0.309016994374947, 0.156434465040231, 6.12323399573677e-17, -0.15643446504023, -0.309016994374947, -0.453990499739548, -0.587785252292473, -0.707106781186547, -0.809016994374947, -0.891006524188368, -0.951056516295154, -0.987688340595138, -1, -0.987688340595138, -0.951056516295154, -0.891006524188368, -0.809016994374948, -0.707106781186547, -0.587785252292473, -0.453990499739548, -0.309016994374948, -0.15643446504023, -1.83697019872103e-16, 0.15643446504023, 0.309016994374947, 0.453990499739547, 0.587785252292473, 0.707106781186547, 0.809016994374947, 0.891006524188368, 0.951056516295154, 0.987688340595138, 1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374948, 0.707106781186547, 0.587785252292473, 0.453990499739548, 0.309016994374948, 0.15643446504023, 3.06161699786838e-16, -0.15643446504023, -0.309016994374947, -0.453990499739547, -0.587785252292473, -0.707106781186547, -0.809016994374947, -0.891006524188368, -0.951056516295153, -0.987688340595138, -1));max(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax28
#argv <- structure(list(2, 3, NA, na.rm = TRUE), .Names = c('',     '', '', 'na.rm'));do.call('max', argv)
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax29
#argv <- list(2, 3, NA);do.call('max', argv)
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax3
#argv <- list(5, 1, 0);max(argv[[1]],argv[[2]],argv[[3]]);
[1] 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax4
#argv <- list(c(NA, 1, 2, 3, -Inf, NaN, Inf));max(argv[[1]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax7
#argv <- list(1573.05073007216, 1000);max(argv[[1]],argv[[2]]);
[1] 1573.051

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmax.testmax8
#argv <- list(structure(c(6L, 3L, 8L, 4L, 4L, 5L, 7L, 8L, 5L), .Dim = 9L, .Dimnames = structure(list(state.division = c('New England', 'Middle Atlantic', 'South Atlantic', 'East South Central', 'West South Central', 'East North Central', 'West North Central', 'Mountain', 'Pacific')), .Names = 'state.division'), class = 'table'));max(argv[[1]]);
[1] 8

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmean.testmean20
#argv <- structure(list(x = c(TRUE, FALSE, TRUE, TRUE)), .Names = 'x');do.call('mean', argv)
[1] 0.75

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmean.testmean23
#argv <- structure(list(x = c(83.7010937038573, 61.9895951152624,     259.87035947113, 58.4906618904788, 24.7573173158259, 27.3459081536165,     286.404145870861, 31.5386609266279, 11.4645558243349, 48.261763556938,     24.118141168773, 25.3079966732443)), .Names = 'x');do.call('mean', argv)
[1] 78.60418

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin1
#argv <- list(c(10L, 1L));min(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin11
#argv <- list(c(FALSE, FALSE));min(argv[[1]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin12
#argv <- list(c(2, 13954490295224484, 9.73638996997572e+31, 6.79331796732739e+47, 4.73986448237219e+63, 3.30711964599708e+79, 2.30745845026066e+95, 1.60997032753976e+111, 1.12331576556267e+127, 7.83764947450857e+142, 5.46852017646992e+158, 3.8155205865895e+174, 2.66218224983966e+190, 1.85746981847535e+206, 1.29600222777925e+222, 9.04252525506755e+237, 6.30919154580821e+253, 4.40207760983472e+269, 3.07143746426322e+285, 2.14301721437253e+301));min(argv[[1]]);
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin14
#argv <- list(structure(c(13823, NA), class = 'Date'), na.rm = TRUE);min(argv[[1]],argv[[2]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin16
#argv <- list(3L, 7);min(argv[[1]],argv[[2]]);
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin17
#argv <- list(c(-7, -5.6, -4.2, -2.8, -1.4, 0, 1.4, 2.8, 4.2, 5.6, 7));min(argv[[1]]);
[1] -7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin19
#argv <- list(structure(c(-0.562441486309934, -0.588967592535822, 0.0277608937997097, 0.568074124752969, 3.89980510825846, -0.428174866497729, -0.343990813420242, -0.260996370058754, -2.31774610938305, 0.314764947225063, -0.455124436264437, -0.0444006414474544, -0.27748974692001, -0.303134023269405, -0.670168347915028, 2.92643313367, -0.749546667806845, -0.410394401887929, -0.203261263063707, 0.1847365997012, 0.128559671155683, 0.313558179929332, -0.0668425264405297, -0.106427678524531, -0.523747793519006, -0.402585404761851, 0.0642079595716389, -0.779859286629166, 0.356484381211739, -0.625053119472271, 1.31547628490512, -0.21959878152752, -0.102402088986461), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));min(argv[[1]]);
[1] -2.317746

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin2
#argv <- list(structure(c(0.25069599964819, 0.252830784944624), .Dim = 1:2));min(argv[[1]]);
[1] 0.250696

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin22
#argv <- list(2, 3, NA);do.call('min', argv)
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin3
#argv <- list(c(-3.37619548064471, -3.28575139573497, -3.19530731082523, -3.10486322591549, -3.01441914100575, -2.923975056096, -2.83353097118626, -2.74308688627652, -2.65264280136678, -2.56219871645704, -2.4717546315473, -2.38131054663755, -2.29086646172781, -2.20042237681807, -2.10997829190833, -2.01953420699859, -1.92909012208884, -1.8386460371791, -1.74820195226936, -1.65775786735962, -1.56731378244988, -1.47686969754013, -1.38642561263039, -1.29598152772065, -1.20553744281091, -1.11509335790117, -1.02464927299142, -0.934205188081682, -0.84376110317194, -0.753317018262198, -0.662872933352456, -0.572428848442715, -0.481984763532973, -0.39154067862323, -0.301096593713489, -0.210652508803747, -0.120208423894005, -0.029764338984263, 0.0606797459254791, 0.151123830835221, 0.241567915744963, 0.332012000654705, 0.422456085564447, 0.512900170474189, 0.603344255383931, 0.693788340293673, 0.784232425203414, 0.874676510113156, 0.965120595022898, 1.05556467993264, 1.14600876484238, 1.23645284975212, 1.32689693466187, 1.41734101957161, 1.50778510448135, 1.59822918939109, 1.68867327430083, 1.77911735921058, 1.86956144412032, 1.96000552903006, 2.0504496139398, 2.14089369884954, 2.23133778375928, 2.32178186866903, 2.41222595357877, 2.50267003848851, 2.59311412339825, 2.68355820830799, 2.77400229321774, 2.86444637812748, 2.95489046303722, 3.04533454794696, 3.1357786328567, 3.22622271776645, 3.31666680267619, 3.40711088758593, 3.49755497249567, 3.58799905740541, 3.67844314231516, 3.7688872272249, 3.85933131213464, 3.94977539704438, 4.04021948195412, 4.13066356686387, 4.22110765177361, 4.31155173668335, 4.40199582159309, 4.49243990650283, 4.58288399141258, 4.67332807632232, 4.76377216123206, 4.8542162461418, 4.94466033105154, 5.03510441596129, 5.12554850087103, 5.21599258578077, 5.30643667069051, 5.39688075560025, 5.48732484051, 5.57776892541974, 5.66821301032948, 5.75865709523922, 5.84910118014896, 5.9395452650587, 6.02998934996845, 6.12043343487819, 6.21087751978793, 6.30132160469767, 6.39176568960741, 6.48220977451716, 6.5726538594269, 6.66309794433664, 6.75354202924638, 6.84398611415612, 6.93443019906586, 7.02487428397561, 7.11531836888535, 7.20576245379509, 7.29620653870483, 7.38665062361457, 7.47709470852432, 7.56753879343406, 7.6579828783438, 7.74842696325354, 7.83887104816328, 7.92931513307303, 8.01975921798277, 8.11020330289251));min(argv[[1]]);
[1] -3.376195

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmin.testmin4
#argv <- list(c(NA, 1, 2, 3, -Inf, NaN, Inf));min(argv[[1]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinmode.testmode1
#argv <- structure(list(x = NA_real_), .Names = 'x');do.call('mode', argv)
[1] "numeric"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames1
#argv <- list(structure(list(size = 113, isdir = FALSE, mode = structure(436L, class = 'octmode'), mtime = structure(1395082088.72988, class = c('POSIXct', 'POSIXt')), ctime = structure(1395082088.72988, class = c('POSIXct', 'POSIXt')), atime = structure(1395082088.77388, class = c('POSIXct', 'POSIXt')), uid = 1001L, gid = 1001L, uname = 'roman', grname = 'roman'), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = '/tmp/RtmptPgrXI/file55711ba85492'));names(argv[[1]]);
 [1] "size"   "isdir"  "mode"   "mtime"  "ctime"  "atime"  "uid"    "gid"
 [9] "uname"  "grname"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames10
#argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));names(argv[[1]]);
[1] "A" "B" "C" "D" "E" "F"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames11
#argv <- list(structure(c(NA, NA, NA, NA, NA, 1L, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor'));names(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames12
#argv <- list(structure(list(V1 = c(-1L, -2L, 1L, 2L, 3L, 4L, 5L), V2 = c(-3L, -4L, 6L, 7L, 8L, 9L, 10L), V3 = c(-5L, -6L, 11L, 12L, 13L, 14L, 15L), V4 = c(-7L, -8L, 16L, 17L, 18L, 19L, 20L), V5 = c(-9L, -10L, 21L, 22L, 23L, 24L, 25L)), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(NA, 7L), class = 'data.frame'));names(argv[[1]]);
[1] "V1" "V2" "V3" "V4" "V5"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames13
#argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), class = 'data.frame', row.names = 1947:1962, terms = quote(Employed ~     GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year)));names(argv[[1]]);
[1] "Employed"     "GNP.deflator" "GNP"          "Unemployed"   "Armed.Forces"
[6] "Population"   "Year"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames14
#argv <- list(structure(list(ii = 1:10, xx = c(-9.42477796076938, -6.28318530717959, -3.14159265358979, 0, 3.14159265358979, 6.28318530717959, 9.42477796076938, 12.5663706143592, 15.707963267949, 18.8495559215388)), .Names = c('ii', 'xx')));names(argv[[1]]);
[1] "ii" "xx"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames15
#argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'), Soft = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L), .Label = c('Hard', 'Medium', 'Soft'), class = 'factor')), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), class = 'data.frame', row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), terms = quote(cbind(X, M) ~ M.user + Temp + Soft)));names(argv[[1]]);
[1] "cbind(X, M)" "M.user"      "Temp"        "Soft"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames17
#argv <- list(c(1281L, 1283L));names(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames18
#argv <- list(structure(list(itemBullet = '• '), .Names = 'itemBullet'));names(argv[[1]]);
[1] "itemBullet"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames19
#argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils'), frow = c(2417L, 2417L, 2418L, 2418L, 2420L, 2420L, 2422L, 2422L, 2423L, 2424L, 2426L, 2426L, 2426L, 2426L), lrow = c(2417L, 2417L, 2419L, 2419L, 2421L, 2421L, 2422L, 2422L, 2434L, 2425L, 2433L, 2433L, 2433L, 2433L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 14L), class = 'data.frame'));names(argv[[1]]);
[1] "srcfile" "frow"    "lrow"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames2
#argv <- list(list(character(0), numeric(0), numeric(0), complex(0), integer(0), logical(0), character(0)));names(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames20
#argv <- list(c(-21.222245139688+176.377752294836i, -21.222245139688-176.377752294836i, 61.0965873274464+76.7794305756989i, 61.0965873274464-76.7794305756989i, -11.748684375517+0i));names(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames21
#argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));names(argv[[1]]);
[1] "a"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames22
#argv <- list(structure(list(`Surv(time, status)` = structure(c(9, 1, 1, 6, 6, 8, 1, 1, 0, 1, 1, 0), .Dim = c(6L, 2L), .Dimnames = list(NULL, c('time', 'status')), class = 'Surv', type = 'right'), x = c(0, 1, 1, 1, 0, 0)), .Names = c('Surv(time, status)', 'x'), class = 'data.frame', row.names = c(1L, 3L, 4L, 5L, 6L, 7L)));names(argv[[1]]);
[1] "Surv(time, status)" "x"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames23
#argv <- list(structure(list(xlev = structure(list(), .Names = character(0))), .Names = 'xlev'));names(argv[[1]]);
[1] "xlev"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames25
#argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));names(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames26
#argv <- list(structure(c(3.22711508258913, 3.17840134153376, 3.17811325231463, 3.14144977340047, 3.21272015441784, 3.17926446433903, 3.19284611518884, 3.21218760440396, 3.19838213000829, 3.21827285357145, 3.33284226699435, 3.33203427702752, 3.24353410183206, 3.24674470972384, 3.23477029516092, 3.19256745333655, 3.19728055812562, 3.18184358794477, 3.25647720624168, 3.25527250510331, 3.23527587668705, 3.30276370847298, 3.35063560825895, 3.39410130204004, 3.30749603791321, 3.21879799811174, 3.22865695810894, 3.21031851982623, 3.25647720624168, 3.24204423936955, 3.25406445291434, 3.28465628278852, 3.20924684875337, 3.29928933408768, 3.34888872307144, 3.34084054981233, 3.31806333496276, 3.24748226067705, 3.26363606858811, 3.19562294358694, 3.29578694025161, 3.2678754193189, 3.29336255471145, 3.22762964957101, 3.24993175663419, 3.29578694025161, 3.37966803403365, 3.42390091852842, 3.32159843046534, 3.29292029960001, 3.22453306260609, 3.28802553538836, 3.30168094929358, 3.25839780409551, 3.30362797638389, 3.28148788794008, 3.31889771462749, 3.31806333496276, 3.32592595577147, 3.33243845991561, 3.20628604441243, 3.17695898058691, 3.18977095634687, 3.14050804303818, 3.23829706787539, 3.25478968739721, 3.25017594808393, 3.27577190016493, 3.30189771719521, 3.3174364965351, 3.32056168019524, 3.31196566036837, 3.1978316933289, 3.13225968953104, 3.21801004298436, 3.14050804303818, 3.18155777386279, 3.15259407792747, 3.15896526038341, 3.18836592606315, 3.21906033244886, 3.19340290306242, 3.27989498001164, 3.34222522936079, 3.16820274684263, 3.21879799811174, 3.14829409743475, 3.14457420760962, 3.1846914308176, 3.11693964655076, 3.18355453361886, 3.12287092286444, 3.21138755293686, 3.24254142829838, 3.29181268746712, 3.35679046035172, 3.2169572073611, 3.14643813528577, 3.14952701375435, 3.14705767102836, 3.14426277376199, 3.18184358794477, 3.18412335423967, 3.21563756343506, 3.18041263283832, 3.22659990520736, 3.30102999566398, 3.34537373055909, 3.29136885045158, 3.16494737262184, 3.19395897801919, 3.16405529189345, 3.16016829295851, 3.21005084987514, 3.21932250841934, 3.2143138974244, 3.21563756343506, 3.22608411597582, 3.31175386105575, 3.35449260058944, 3.25839780409551, 3.15986784709257, 3.24600590407603, 3.1646502159343, 3.19200959265367, 3.15563963375978, 3.15442397311465, 3.1914510144649, 3.21616590228599, 3.21827285357145, 3.30449052777349, 3.34380233316165, 3.22141423784234, 3.13385812520333, 3.17782497186468, 3.13353890837022, 3.16226561429802, 3.18241465243455, 3.16435285578444, 3.19089171692217, 3.18977095634687, 3.26173854735254, 3.2397998184471, 3.28802553538836, 3.16849748352303, 3.16375752398196, 3.18808437371494, 3.14736710779379, 3.18241465243455, 3.14144977340047, 3.21510858105309, 3.17897694729317, 3.22556771343947, 3.28735377271475, 3.27137687189407, 3.23704079137919, 3.16316137497702, 3.15986784709257, 3.16316137497702, 3.13513265137677, 3.17231096852195, 3.19256745333655, 3.17260293120986, 3.22634208716363, 3.20248831706009, 3.26717172840301, 3.30059548388996, 3.31785448933147), .Tsp = c(1969, 1982.91666666667, 12), class = 'ts'));names(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames27
#argv <- list(structure(list(object = structure(3.14159265358979, comment = 'Start with pi'), slots = 'comment', dataPart = TRUE, class = structure('classPrototypeDef', package = 'methods')), .Names = c('object', 'slots', 'dataPart', 'class')));names(argv[[1]]);
[1] "object"   "slots"    "dataPart" "class"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames28
#argv <- list(list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\Sexpr', 'build', 'install', 'render'))));names(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames29
#argv <- list(structure(list(zz = complex(0)), .Names = 'zz'));names(argv[[1]]);
[1] "zz"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames31
#argv <- list(list(structure(list(srcfile = c('/home/lzhao/tmp/RtmpTzriDZ/R.INSTALL30d4108a07be/mgcv/R/gam.fit3.r', '/home/lzhao/tmp/RtmpTzriDZ/R.INSTALL30d4108a07be/mgcv/R/gam.fit3.r'), frow = c(1287L, 1289L), lrow = c(1287L, 1289L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/tmp/RtmpTzriDZ/R.INSTALL30d4108a07be/mgcv/R/gam.fit3.r', frow = 1289L, lrow = 1289L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame')));names(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames32
#argv <- list(structure(list(trace = 0, fnscale = 1, parscale = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ndeps = c(0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001), maxit = 100L, abstol = -Inf, reltol = 1.49011611938477e-08, alpha = 1, beta = 0.5, gamma = 2, REPORT = 10, type = 1, lmm = 5, factr = 1e+07, pgtol = 0, tmax = 10, temp = 10), .Names = c('trace', 'fnscale', 'parscale', 'ndeps', 'maxit', 'abstol', 'reltol', 'alpha', 'beta', 'gamma', 'REPORT', 'type', 'lmm', 'factr', 'pgtol', 'tmax', 'temp')));names(argv[[1]]);
 [1] "trace"    "fnscale"  "parscale" "ndeps"    "maxit"    "abstol"
 [7] "reltol"   "alpha"    "beta"     "gamma"    "REPORT"   "type"
[13] "lmm"      "factr"    "pgtol"    "tmax"     "temp"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames33
#argv <- list(structure(list(Df = c(NA, 0L), Deviance = c(NA, 0), `Resid. Df` = c(10L, 10L), `Resid. Dev` = c(2.74035772634541, 2.74035772634541)), .Names = c('Df', 'Deviance', 'Resid. Df', 'Resid. Dev'), row.names = c('NULL', 'x'), class = c('anova', 'data.frame'), heading = 'Analysis of Deviance Table\n\nModel: gaussian, link: identity\n\nResponse: y\n\nTerms added sequentially (first to last)\n\n'));names(argv[[1]]);
[1] "Df"         "Deviance"   "Resid. Df"  "Resid. Dev"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames35
#argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x * z)));names(argv[[1]]);
[1] "y" "x" "z"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames37
#argv <- list(structure(list(surname = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia'), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'no', 'yes', 'no'), class = 'AsIs'), title = structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...'), class = 'AsIs'), other.author = structure(c(NA, NA, NA, NA, NA, 'Ripley'), class = 'AsIs')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author')));names(argv[[1]]);
[1] "surname"      "nationality"  "deceased"     "title"        "other.author"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames38
#argv <- list(structure(list(head = logical(0)), .Names = 'head', class = 'data.frame', row.names = integer(0)));names(argv[[1]]);
[1] "head"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnames.testnames6
#argv <- list(structure(list(groups = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor')), .Names = 'groups'));names(argv[[1]]);
[1] "groups"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnargs.testnargs1
#nargs( );
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar1
#argv <- list('DtTmCl> format(.leap.seconds)         # all 24 leap seconds in your timezone', 'c', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
[1] 76

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar10
#argv <- list(FALSE, 'chars', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
[1] 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar11
#argv <- list('> contour(x, y, volcano, levels = lev, col=\'yellow\', lty=\'solid\', add=TRUE)', 'c', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
[1] 75

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar12
#argv <- list(character(0), 'c', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar2
#argv <- list(c('\'a\'', '\'b\'', NA, NA, NA, '\'f\'', '\'g\'', '\'h\'', '\'i\'', '\'j\'', '\'k\'', '\'l\''), 'w', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
 [1] 3 3 2 2 2 3 3 3 3 3 3 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar3
#argv <- list('\'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\'', 'w', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
[1] 2602

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar4
#argv <- list(structure(c('1', '2', '3', '4', '5', '1', '2', '3', '4', '5'), .Dim = 10L), 'c', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
 [1] 1 1 1 1 1 1 1 1 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar5
#argv <- list(c('Var1', 'Var2'), 'bytes', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
[1] 4 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar6
#argv <- list(c('0.0470', '0.0130', '0.0020', '0.0001', '2.3e-05', '4.5e-06'), 'w', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
[1] 6 6 6 6 7 7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar7
#argv <- list(c('x1', 'x.2', 'x3'), 'bytes', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
[1] 2 3 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnchar.testnchar9
#argv <- list(c('\'1\'', '\'2\'', NA), 'w', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))
[1] 3 3 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinncol.testncol1
#argv <- structure(list(x = structure(list(pop15 = c(29.35, 23.32,     23.8, 41.89, 42.19, 31.72, 39.74, 44.75, 46.64, 47.64, 24.42,     46.31, 27.84, 25.06, 23.31, 25.62, 46.05, 47.32, 34.03, 41.31,     31.16, 24.52, 27.01, 41.74, 21.8, 32.54, 25.95, 24.71, 32.61,     45.04, 43.56, 41.18, 44.19, 46.26, 28.96, 31.94, 31.92, 27.74,     21.44, 23.49, 43.42, 46.12, 23.27, 29.81, 46.4, 45.25, 41.12,     28.13, 43.69, 47.2), pop75 = c(2.87, 4.41, 4.43, 1.67, 0.83,     2.85, 1.34, 0.67, 1.06, 1.14, 3.93, 1.19, 2.37, 4.7, 3.35,     3.1, 0.87, 0.58, 3.08, 0.96, 4.19, 3.48, 1.91, 0.91, 3.73,     2.47, 3.67, 3.25, 3.17, 1.21, 1.2, 1.05, 1.28, 1.12, 2.85,     2.28, 1.52, 2.87, 4.54, 3.73, 1.08, 1.21, 4.46, 3.43, 0.9,     0.56, 1.73, 2.72, 2.07, 0.66), dpi = c(2329.68, 1507.99,     2108.47, 189.13, 728.47, 2982.88, 662.86, 289.52, 276.65,     471.24, 2496.53, 287.77, 1681.25, 2213.82, 2457.12, 870.85,     289.71, 232.44, 1900.1, 88.94, 1139.95, 1390, 1257.28, 207.68,     2449.39, 601.05, 2231.03, 1740.7, 1487.52, 325.54, 568.56,     220.56, 400.06, 152.01, 579.51, 651.11, 250.96, 768.79, 3299.49,     2630.96, 389.66, 249.87, 1813.93, 4001.89, 813.39, 138.33,     380.47, 766.54, 123.58, 242.69), ddpi = c(2.87, 3.93, 3.82,     0.22, 4.56, 2.43, 2.67, 6.51, 3.08, 2.8, 3.99, 2.19, 4.32,     4.52, 3.44, 6.28, 1.48, 3.19, 1.12, 1.54, 2.99, 3.54, 8.21,     5.81, 1.57, 8.12, 3.62, 7.66, 1.76, 2.48, 3.61, 1.03, 0.67,     2, 7.48, 2.19, 2, 4.35, 3.01, 2.7, 2.96, 1.13, 2.01, 2.45,     0.53, 5.14, 10.23, 1.88, 16.71, 5.08)), .Names = c('pop15',     'pop75', 'dpi', 'ddpi'), class = 'data.frame', row.names = c('Australia',     'Austria', 'Belgium', 'Bolivia', 'Brazil', 'Canada', 'Chile',     'China', 'Colombia', 'Costa Rica', 'Denmark', 'Ecuador',     'Finland', 'France', 'Germany', 'Greece', 'Guatamala', 'Honduras',     'Iceland', 'India', 'Ireland', 'Italy', 'Japan', 'Korea',     'Luxembourg', 'Malta', 'Norway', 'Netherlands', 'New Zealand',     'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Philippines',     'Portugal', 'South Africa', 'South Rhodesia', 'Spain', 'Sweden',     'Switzerland', 'Turkey', 'Tunisia', 'United Kingdom', 'United States',     'Venezuela', 'Zambia', 'Jamaica', 'Uruguay', 'Libya', 'Malaysia'))),     .Names = 'x');do.call('ncol', argv)
[1] 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinngettext.testngettext1
#argv <- list(1L, '%s is not TRUE', '%s are not all TRUE', NULL); .Internal(ngettext(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] "%s is not TRUE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinngettext.testngettext2
#argv <- list(2L, '%s is not TRUE', '%s are not all TRUE', NULL); .Internal(ngettext(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] "%s are not all TRUE"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnlevels.testnlevels1
#argv <- structure(list(x = structure(c(1L, 2L, NA), .Label = c('1',     '2'), class = 'factor')), .Names = 'x');do.call('nlevels', argv)
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnrow.testnrow1
#argv <- structure(list(x = structure(c(0, 3313, 2963, 3175, 3339,     2762, 3276, 2610, 4485, 2977, 3030, 4532, 2753, 3949, 2865,     2282, 2179, 3000, 817, 3927, 1991, 3313, 0, 1318, 1326, 1294,     1498, 2218, 803, 1172, 2018, 1490, 1305, 645, 636, 521, 1014,     1365, 1033, 1460, 2868, 1802, 2963, 1318, 0, 204, 583, 206,     966, 677, 2256, 597, 172, 2084, 690, 1558, 1011, 925, 747,     285, 1511, 1616, 1175, 3175, 1326, 204, 0, 460, 409, 1136,     747, 2224, 714, 330, 2052, 739, 1550, 1059, 1077, 977, 280,     1662, 1786, 1381, 3339, 1294, 583, 460, 0, 785, 1545, 853,     2047, 1115, 731, 1827, 789, 1347, 1101, 1209, 1160, 340,     1794, 2196, 1588, 2762, 1498, 206, 409, 785, 0, 760, 1662,     2436, 460, 269, 2290, 714, 1764, 1035, 911, 583, 465, 1497,     1403, 937, 3276, 2218, 966, 1136, 1545, 760, 0, 1418, 3196,     460, 269, 2971, 1458, 2498, 1778, 1537, 1104, 1176, 2050,     650, 1455, 2610, 803, 677, 747, 853, 1662, 1418, 0, 1975,     1118, 895, 1936, 158, 1439, 425, 328, 591, 513, 995, 2068,     1019, 4485, 1172, 2256, 2224, 2047, 2436, 3196, 1975, 0,     2897, 2428, 676, 1817, 698, 1693, 2185, 2565, 1971, 2631,     3886, 2974, 2977, 2018, 597, 714, 1115, 460, 460, 1118, 2897,     0, 550, 2671, 1159, 2198, 1479, 1238, 805, 877, 1751, 949,     1155, 3030, 1490, 172, 330, 731, 269, 269, 895, 2428, 550,     0, 2280, 863, 1730, 1183, 1098, 851, 457, 1683, 1500, 1205,     4532, 1305, 2084, 2052, 1827, 2290, 2971, 1936, 676, 2671,     2280, 0, 1178, 668, 1762, 2250, 2507, 1799, 2700, 3231, 2937,     2753, 645, 690, 739, 789, 714, 1458, 158, 1817, 1159, 863,     1178, 0, 1281, 320, 328, 724, 471, 1048, 2108, 1157, 3949,     636, 1558, 1550, 1347, 1764, 2498, 1439, 698, 2198, 1730,     668, 1281, 0, 1157, 1724, 2010, 1273, 2097, 3188, 2409, 2865,     521, 1011, 1059, 1101, 1035, 1778, 425, 1693, 1479, 1183,     1762, 320, 1157, 0, 618, 1109, 792, 1011, 2428, 1363, 2282,     1014, 925, 1077, 1209, 911, 1537, 328, 2185, 1238, 1098,     2250, 328, 1724, 618, 0, 331, 856, 586, 2187, 898, 2179,     1365, 747, 977, 1160, 583, 1104, 591, 2565, 805, 851, 2507,     724, 2010, 1109, 331, 0, 821, 946, 1754, 428, 3000, 1033,     285, 280, 340, 465, 1176, 513, 1971, 877, 457, 1799, 471,     1273, 792, 856, 821, 0, 1476, 1827, 1249, 817, 1460, 1511,     1662, 1794, 1497, 2050, 995, 2631, 1751, 1683, 2700, 1048,     2097, 1011, 586, 946, 1476, 0, 2707, 1209, 3927, 2868, 1616,     1786, 2196, 1403, 650, 2068, 3886, 949, 1500, 3231, 2108,     3188, 2428, 2187, 1754, 1827, 2707, 0, 2105, 1991, 1802,     1175, 1381, 1588, 937, 1455, 1019, 2974, 1155, 1205, 2937,     1157, 2409, 1363, 898, 428, 1249, 1209, 2105, 0), .Dim = c(21L,     21L), .Dimnames = list(c('Athens', 'Barcelona', 'Brussels',     'Calais', 'Cherbourg', 'Cologne', 'Copenhagen', 'Geneva',     'Gibraltar', 'Hamburg', 'Hook of Holland', 'Lisbon', 'Lyons',     'Madrid', 'Marseilles', 'Milan', 'Munich', 'Paris', 'Rome',     'Stockholm', 'Vienna'), c('Athens', 'Barcelona', 'Brussels',     'Calais', 'Cherbourg', 'Cologne', 'Copenhagen', 'Geneva',     'Gibraltar', 'Hamburg', 'Hook of Holland', 'Lisbon', 'Lyons',     'Madrid', 'Marseilles', 'Milan', 'Munich', 'Paris', 'Rome',     'Stockholm', 'Vienna')))), .Names = 'x');do.call('NROW', argv)
[1] 21

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar1
#argv <- list('./myTst2/man/DocLink-class.Rd');nzchar(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar10
#argv <- list(logical(0));nzchar(argv[[1]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar12
#argv <- list('');do.call('nzchar', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar2
#argv <- list(FALSE);nzchar(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar3
#argv <- list(c('a', 'b', 'c'));nzchar(argv[[1]]);
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar4
#argv <- list(structure('MASS', .Names = ''));nzchar(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar5
#argv <- list(NULL);nzchar(argv[[1]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar6
#argv <- list(c('Fr', 'Temp', 'Soft', 'M.user', 'Brand'));nzchar(argv[[1]]);
[1] TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar7
#argv <- list(structure('survival', .Names = ''));nzchar(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinnzchar.testnzchar8
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));nzchar(argv[[1]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass1
#argv <- list(structure(list(`cbind(w = weight, w2 = weight^2)` = structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), terms = quote(cbind(w = weight, w2 = weight^2) ~ group), row.names = c(NA, 20L), class = 'data.frame'));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass11
#argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/RtmpS45wYI/R.INSTALL2aa62411bcd3/rpart/R/rsq.rpart.R', '/home/lzhao/tmp/RtmpS45wYI/R.INSTALL2aa62411bcd3/rpart/R/rsq.rpart.R'), frow = c(7L, 9L), lrow = c(7L, 9L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass13
#argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));oldClass(argv[[1]]);
[1] "3.14159265358979"
attr(,"class")
[1] "testit"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass14
#argv <- list(structure(list(`cbind(A, B, C, D)` = structure(c(0.696706709347165, 0.362357754476673, -0.0291995223012888, 0.696706709347165, 0.696706709347165, -0.0291995223012888, 0.696706709347165, -0.0291995223012888, 0.362357754476673, 0.696706709347165, -0.0291995223012888, 0.362357754476673, -0.416146836547142, 0.362357754476673, 0.696706709347165, 0.696706709347165, 0.362357754476673, -0.416146836547142, -0.0291995223012888, -0.416146836547142, 0.696706709347165, -0.416146836547142, 0.362357754476673, -0.0291995223012888, 0.717356090899523, 0.932039085967226, 0.999573603041505, 0.717356090899523, 0.717356090899523, 0.999573603041505, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.909297426825682, 0.932039085967226, 0.717356090899523, 0.717356090899523, 0.932039085967226, 0.909297426825682, 0.999573603041505, 0.909297426825682, 0.717356090899523, 0.909297426825682, 0.932039085967226, 0.999573603041505, -0.0291995223012888, -0.737393715541246, -0.998294775794753, -0.0291995223012888, -0.0291995223012888, -0.998294775794753, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.653643620863612, -0.737393715541246, -0.0291995223012888, -0.0291995223012888, -0.737393715541246, -0.653643620863612, -0.998294775794753, -0.653643620863612, -0.0291995223012888, -0.653643620863612, -0.737393715541246, -0.998294775794753, 0.999573603041505, 0.67546318055115, -0.0583741434275801, 0.999573603041505, 0.999573603041505, -0.0583741434275801, 0.999573603041505, -0.0583741434275801, 0.67546318055115, 0.999573603041505, -0.0583741434275801, 0.67546318055115, -0.756802495307928, 0.67546318055115, 0.999573603041505, 0.999573603041505, 0.67546318055115, -0.756802495307928, -0.0583741434275801, -0.756802495307928, 0.999573603041505, -0.756802495307928, 0.67546318055115, -0.0583741434275801), .Dim = c(24L, 4L), .Dimnames = list(NULL, c('A', 'B', 'C', 'D'))), groups = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor')), .Names = c('cbind(A, B, C, D)', 'groups'), terms = quote(cbind(A, B, C, D) ~ groups), row.names = c(NA, 24L), class = 'data.frame'));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass15
#argv <- list(structure(list(), .Names = character(0), class = 'data.frame', row.names = c(NA, -10L)));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass16
#argv <- list(structure(list(y = c(1.08728092481538, 0.0420572471552261, 0.787502161306819, 0.512717751544676, 3.35376639535311, 0.204341510750309, -0.334930602487435, 0.80049208412789, -0.416177803375218, -0.777970346246018, 0.934996808181635, -0.678786709127108, 1.52621589791412, 0.5895781228122, -0.744496121210548, -1.99065153885627, 1.51286447692396, -0.750182409847851), A = c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1), U = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor'), V = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('y', 'A', 'U', 'V'), class = 'data.frame', row.names = c(NA, 18L), terms = quote(y ~ A:U + A:V - 1)));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass17
#argv <- list(structure(list(surname = structure(integer(0), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(integer(0), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(integer(0), .Label = c('no', 'yes'), class = 'factor'), title = structure(integer(0), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(integer(0), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = integer(0), class = 'data.frame'));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass18
#argv <- list(structure(list(srcfile = c(NA, NA, '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R'), frow = c(NA, NA, 1739L, 1741L, 1807L, 1868L, 1868L, 1868L, 1870L, 1873L, 1888L, 1888L, 1888L, 1898L, 1898L, 1898L, 1899L, 1905L), lrow = c(NA, NA, 1739L, 1742L, 1807L, 1868L, 1868L, 1868L, 1872L, 1873L, 1888L, 1888L, 1888L, 1898L, 1898L, 1898L, 1901L, 1905L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 18L), class = 'data.frame'));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass19
#argv <- list(structure(list(double.eps = 2.22044604925031e-16, double.neg.eps = 1.11022302462516e-16, double.xmin = 2.2250738585072e-308, double.xmax = 1.79769313486232e+308, double.base = 2L, double.digits = 53L, double.rounding = 5L, double.guard = 0L, double.ulp.digits = -52L, double.neg.ulp.digits = -53L, double.exponent = 11L, double.min.exp = -1022L, double.max.exp = 1024L, integer.max = 2147483647L, sizeof.long = 8L, sizeof.longlong = 8L, sizeof.longdouble = 16L, sizeof.pointer = 8L), .Names = c('double.eps', 'double.neg.eps', 'double.xmin', 'double.xmax', 'double.base', 'double.digits', 'double.rounding', 'double.guard', 'double.ulp.digits', 'double.neg.ulp.digits', 'double.exponent', 'double.min.exp', 'double.max.exp', 'integer.max', 'sizeof.long', 'sizeof.longlong', 'sizeof.longdouble', 'sizeof.pointer')));oldClass(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass2
#argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass22
#argv <- list(c('1.537e+04', '1.54e+04', '1.546e+04'));do.call('oldClass', argv)
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass3
#argv <- list(c(7.50863122075491e-09, 1.87762632589663e-07, 2.29589583061716e-06, 1.83002461474278e-05, 0.000106962770210119, 0.000488992941332962, 0.00182154707835978, 0.0056884235091347, 0.0152093632759767, 0.0353957474549943, 0.0726726073416657, 0.13316547411151));oldClass(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass4
#argv <- list(c(0.2853725+0.3927816i, -0.07283992154231+0.224178134292i, -0.10883955678256+0.035364093700981i, -0.0449501817243521-0.0326582354266614i, 8.2299281e-09-2.69753665872767e-02i, 0.0105954299973322-0.0076980245688633i, 0.00604728675391113+0.00196488543076221i, 0.00095395849586903+0.00293598723445021i, -0.00088096824266454+0.00121254736140417i, -7.27670402517897e-04-4.44010655e-10i, -2.07656947543323e-04-2.85815671682054e-04i, 5.3003554565545e-05-1.6312776087427e-04i, 7.9199339795869e-05-2.57333559721504e-05i, 3.27089023280074e-05+2.37644512768026e-05i, -1.79660253e-11+1.96291758626278e-05i, -7.70998422901389e-06+5.60161993213361e-06i, -4.4004307139296e-06-1.42979165736404e-06i, -6.9416605906477e-07-2.13643143624753e-06i, 6.41055054129141e-07-8.82334435385704e-07i, 5.29504214700362e-07+6.46186824e-13i));oldClass(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass5
#argv <- list(structure(list(Subject = structure(c(1L, 3L, 6L, 2L, 4L, 5L), .Label = c('1', '4', '2', '5', '6', '3'), class = c('ordered', 'factor')), conc.0.25 = c(1.5, 2.03, 2.72, 1.85, 2.05, 2.31), conc.0.5 = c(0.94, 1.63, 1.49, 1.39, 1.04, 1.44), conc.0.75 = c(0.78, 0.71, 1.16, 1.02, 0.81, 1.03), conc.1 = c(0.48, 0.7, 0.8, 0.89, 0.39, 0.84), conc.1.25 = c(0.37, 0.64, 0.8, 0.59, 0.3, 0.64), conc.2 = c(0.19, 0.36, 0.39, 0.4, 0.23, 0.42)), row.names = c(1L, 12L, 23L, 34L, 45L, 56L), .Names = c('Subject', 'conc.0.25', 'conc.0.5', 'conc.0.75', 'conc.1', 'conc.1.25', 'conc.2'), class = c('nfnGroupedData', 'nfGroupedData', 'groupedData', 'data.frame')));oldClass(argv[[1]]);
[1] "nfnGroupedData" "nfGroupedData"  "groupedData"    "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass6
#argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L)));oldClass(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass7
#argv <- list(3.18309886183791e-301);oldClass(argv[[1]]);
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass8
#argv <- list(structure(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), from = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = 'registered S3method for predict', class = 'factor')), .Names = c('visible', 'from'), row.names = c('predict.Arima', 'predict.HoltWinters', 'predict.StructTS', 'predict.ar', 'predict.arima0', 'predict.bSpline', 'predict.bs', 'predict.glm', 'predict.glmmPQL', 'predict.lda', 'predict.lm', 'predict.loess', 'predict.lqs', 'predict.mca', 'predict.mlm', 'predict.nbSpline', 'predict.nls', 'predict.npolySpline', 'predict.ns', 'predict.pbSpline', 'predict.polr', 'predict.poly', 'predict.polySpline', 'predict.ppolySpline', 'predict.ppr', 'predict.prcomp', 'predict.princomp', 'predict.qda', 'predict.rlm', 'predict.smooth.spline', 'predict.smooth.spline.fit'), class = 'data.frame'));oldClass(argv[[1]]);
[1] "data.frame"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoldClass.testoldClass9
#argv <- list(structure(c(4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L), .Label = c('C', 'E', 'D', 'A', 'F', 'B'), class = 'factor', scores = structure(c(14, 16.5, 1.5, 5, 3, 15), .Dim = 6L, .Dimnames = list(c('A', 'B', 'C', 'D', 'E', 'F')))));oldClass(argv[[1]]);
[1] "factor"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators10
#argv <- list(1, 0+1i);`+`(argv[[1]],argv[[2]]);
[1] 1+1i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators100
#argv <- list(c(30L, 30L, 60L, 60L, 60L, 60L, 60L, 60L, 30L, 30L, 60L, 60L, 60L, NA, 30L, 30L, 30L, 30L, 60L, 60L, 60L, 60L, 60L, 60L, 30L, 30L, 60L, 60L, 60L, 60L, 30L, 30L, 30L, NA, 30L, 30L, 60L, 60L, 30L, 30L, 30L, 30L, 30L, 60L, 60L, 30L, 30L, 30L, 30L, 60L, NA, 60L, NA, 30L, 60L, 60L, 30L, NA, 30L, 30L, 60L, NA, 30L, 30L, 30L, 30L, 30L, NA, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, NA, 18L, 18L, 30L, 30L, 30L, 30L, 18L, 18L, 30L, 30L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, NA, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, NA, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 30L, 30L, NA, 18L, NA, 30L, 30L, NA, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 30L, 30L, NA, 30L, 18L, 18L, 30L, 30L, 18L, 18L, 7L, 7L, 30L, 30L, 18L, 18L, NA, 30L, 7L, 7L, 7L, NA, 18L, 18L, 7L, 7L, 18L, NA, 30L, 30L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 18L, 18L), 60);`<=`(argv[[1]],argv[[2]]);
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE   NA TRUE   NA TRUE TRUE TRUE TRUE   NA TRUE TRUE
 [61] TRUE   NA TRUE TRUE TRUE TRUE TRUE   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA TRUE TRUE
[106] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[121] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[136] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA TRUE TRUE TRUE
[151] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA TRUE   NA TRUE
[166] TRUE   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA
[181] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA TRUE
[196] TRUE TRUE TRUE   NA TRUE TRUE TRUE TRUE TRUE   NA TRUE TRUE TRUE TRUE TRUE
[211] TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators103
#argv <- list(NULL, NULL);`<=`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators106
#argv <- list(0.998212441139784, c(0.999998001700552, -0.0013118835870674, -0.000526551904329415, 0.999999038344567, -0.000903475278483392, -0.000381296378838388, 0.999999057686544, -0.000896140095625969, -0.000373156128147092, 0.999998405868953, -0.00114777435393854, -0.000526063245555164, 0.99999814161282, -0.00120795166706622, -0.000631851641234638, 0.999997792453059, -0.00139185834612791, -0.000519877304541034, 0.999998020546725, -0.00127080900255349, -0.00060373324887666, 0.999998059330159, -0.00123814735894241, -0.000638480377887232, 0.999998337108097, -0.00115570987192407, -0.000572034814304861, 0.999998571810103, -0.00106400147389197, -0.00054414035107764, 0.999999136998844, -0.000829344110491764, -0.000418555560445895, 0.999999436800894, -0.000688792506748533, -0.00029793232712181, 0.999999182435777, -0.000786088000160243, -0.000446798847724984, 0.999998035855459, -0.00125214214514046, -0.000629508325517675, 0.999995461301925, -0.00191759993645823, -0.000928163756226527, 0.999990501294199, -0.00282586497589704, -0.00123008240127283, 0.99998523015117, -0.00349306924843624, -0.00160252859811979, 0.999980247693918, -0.00393070891026528, -0.00207399213858218, 0.999258133391236, -0.0212608113487506, 0.0170086490790013, 0.999752823870685, -0.0151150534926454, -0.00431858671218418, 0.998521231438773, -0.0331918414882689, 0.0193619075348229, 0.973987730061349, 0.0773006134969334, -0.139141104294479, 0.997923156801661, -0.0321910695742469, 0.0321910695742468, 0.999947758503179, -0.00259457124676546, -0.006745885241587, -0.0013118835870674, 0.138748425090248, -0.345681325192261, -0.000903475278483392, 0.151184975864853, -0.358227947918666, -0.000896140095625969, 0.147770769059702, -0.354871477867884, -0.00114777435393854, 0.173602465164251, -0.378765536799718, -0.00120795166706622, 0.214831416406957, -0.410703566802515, -0.00139185834612791, 0.122433312766354, -0.327782640513123, -0.00127080900255349, 0.184140620360657, -0.387596745778816, -0.00123814735894241, 0.21006198499474, -0.407350481092054, -0.00115570987192407, 0.196781639012774, -0.397564195941878, -0.00106400147389197, 0.207318901950479, -0.405384561552842, -0.000829344110491764, 0.203000309817415, -0.402231893588506, -0.000688792506748533, 0.157606764246543, -0.364371236069974, -0.000786088000160243, 0.244176387845927, -0.429597092087573, -0.00125214214514046, 0.201759382472957, -0.401311557517518, -0.00191759993645823, 0.189814026846399, -0.392149187005707, -0.00282586497589704, 0.159305169670633, -0.365949514378666, -0.00349306924843624, 0.173889122744829, -0.378998013455332, -0.00393070891026528, 0.217788926857211, -0.412724435577854, -0.0212608113487506, 0.000452357688250284, -0.00036188615058233, -0.0151150534926454, 0.000228521327097438, 6.52918077527545e-05, -0.0331918414882689, 0.00110332991097693, -0.000643609114746404, 0.0773006134969334, 0.00613496932514866, -0.0110429447852694, -0.0321910695742469, 0.0010384215991718, -0.00103842159917336, -0.00259457124676546, 6.73215168555691e-06, 1.75035942027152e-05, -0.000526551904329415, -0.345681325192261, 0.861253573209199, -0.000381296378838388, -0.358227947918666, 0.848815985790579, -0.000373156128147092, -0.354871477867884, 0.852230173253752, -0.000526063245555164, -0.378765536799718, 0.826399128966796, -0.000631851641234638, -0.410703566802515, 0.785170441980223, -0.000519877304541034, -0.327782640513123, 0.877568894780586, -0.00060373324887666, -0.387596745778816, 0.815861359092619, -0.000638480377887232, -0.407350481092054, 0.789939955675102, -0.000572034814304861, -0.397564195941878, 0.803220023879128, -0.00054414035107764, -0.405384561552842, 0.792682526239419, -0.000418555560445895, -0.402231893588506, 0.797000553183741, -0.00029793232712181, -0.364371236069974, 0.842393798952562, -0.000446798847724984, -0.429597092087573, 0.755824429718295, -0.000629508325517675, -0.401311557517518, 0.798242581671585, -0.000928163756226527, -0.392149187005707, 0.810190511851676, -0.00123008240127283, -0.365949514378666, 0.840704329035169, -0.00160252859811979, -0.378998013455332, 0.826125647104002, -0.00207399213858218, -0.412724435577854, 0.782230825448871, 0.0170086490790013, -0.00036188615058233, 0.00028950892043616, -0.00431858671218418, 6.52918077527545e-05, 1.86548021961656e-05, 0.0193619075348229, -0.000643609114746404, 0.000375438650284673, -0.139141104294479, -0.0110429447852694, 0.0198773006134874, 0.0321910695742468, -0.00103842159917336, 0.00103842159917592, -0.006745885241587, 1.75035942027152e-05, 4.55093454284494e-05));`<=`(argv[[1]],argv[[2]]);
  [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [13]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [25]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [37]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [49]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [61]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[169] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[181] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[193] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[205] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators111
#argv <- list(c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, NA, 2L, 2L, 0L, NA, 1L, 1L), c(0, 0, 0, 0, 0, 0, 0, 0, 1, NA, 2, 2, 0, NA, 1, 1));`==`(argv[[1]],argv[[2]]);
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA TRUE TRUE TRUE   NA TRUE
[16] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators114
#argv <- list(structure(c(1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0), .Dim = 12L), 0);`==`(argv[[1]],argv[[2]]);
 [1] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators115
#argv <- list(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 124, 125, 126, 127, 160, 160, 164, 167, 168, 173, 173, 176, 180, 184, 193, 194, 196, 199, 201, 203, 205, 206, 211, 212, 214, 215, 218, 220, 221, 223, 225, 226, 228, 231, 233, 235, 237, 238, 243, 244, 246, 247, 250, 252, 253, 258, 259, 260, 261, 262, 263, 268, 269, 270, 271, 272, 272, 273, 273, 280, 281, 282, 283, 313, 314, 317, 318, 321, 322, 323, 324, 327, 328, 336, 336, 337, 337, 340, 341, 344, 345, 346, 347, 350, 351, 352, 353, 354, 354, 355, 355, 356, 357, 366, 367, 368, 368, 369, 369, 377, 378, 379, 379, 380, 380, 381, 382, 711, 728, 729, 731, 733), structure(231L, .Names = 'e7', class = c('noquote', 'hexmode')));`==`(argv[[1]],argv[[2]]);
  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[157] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[169] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[181] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[193] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[205] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[217] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[229] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators119
#argv <- list(c(0, 7.93839803127729e-06, 7.93839803127729e-06, 1.58767960625546e-05, 2.38151940938319e-05, 3.96919901563864e-05, 5.5568786218941e-05, 8.73223783440502e-05, 0.000119075970469159, 0.0001746447566881, 0.000230213542907041, 0.000317535921251092, 0.000412796697626419, 0.00055568786218941, 0.000698579026752401, 0.000904977375565611, 0.00112725252044137, 0.00142097324759863, 0.00173057077081845, 0.00213542907041359, 0.00255616416607129, 0.00308803683416687, 0.00364372469635628, 0.00431848852901484, 0.00501706755576725, 0.00585853774708264, 0.00670000793839803, 0.00769230769230769, 0.00869254584424863, 0.00983567516075256, 0.0109629276811939, 0.0122410097642296, 0.0134714614590776, 0.0148448043184885, 0.016146701595618, 0.0175597364451854, 0.0188775105183774, 0.020298483765976, 0.0215606890529491, 0.022902278320235, 0.0240692228308327, 0.0252758593315869, 0.0262602206874653, 0.0272763356354688, 0.0280304834484401, 0.0287925696594427, 0.0292768119393506, 0.0297372390251647, 0.0299118837818528, 0.0300706517424784, 0.0299118837818528, 0.0297372390251647, 0.0292768119393506, 0.0287925696594427, 0.0280304834484401, 0.0272763356354688, 0.0262602206874653, 0.0252758593315869, 0.0240692228308327, 0.022902278320235, 0.0215606890529491, 0.020298483765976, 0.0188775105183774, 0.0175597364451854, 0.016146701595618, 0.0148448043184885, 0.0134714614590776, 0.0122410097642296, 0.0109629276811939, 0.00983567516075256, 0.00869254584424863, 0.00769230769230769, 0.00670000793839803, 0.00585853774708264, 0.00501706755576725, 0.00431848852901484, 0.00364372469635628, 0.00308803683416687, 0.00255616416607129, 0.00213542907041359, 0.00173057077081845, 0.00142097324759863, 0.00112725252044137, 0.000904977375565611, 0.000698579026752401, 0.00055568786218941, 0.000412796697626419, 0.000317535921251092, 0.000230213542907041, 0.0001746447566881, 0.000119075970469159, 8.73223783440502e-05, 5.5568786218941e-05, 3.96919901563864e-05, 2.38151940938319e-05, 1.58767960625546e-05, 7.93839803127729e-06, 7.93839803127729e-06, 0), c(0, 7.93839803127729e-06, 7.93839803127729e-06, 1.58767960625546e-05, 2.38151940938319e-05, 3.96919901563864e-05, 5.5568786218941e-05, 8.73223783440502e-05, 0.000119075970469159, 0.0001746447566881, 0.000230213542907041, 0.000317535921251092, 0.000412796697626419, 0.00055568786218941, 0.000698579026752401, 0.000904977375565611, 0.00112725252044137, 0.00142097324759863, 0.00173057077081845, 0.00213542907041359, 0.00255616416607129, 0.00308803683416687, 0.00364372469635628, 0.00431848852901484, 0.00501706755576725, 0.00585853774708264, 0.00670000793839803, 0.00769230769230769, 0.00869254584424863, 0.00983567516075256, 0.0109629276811939, 0.0122410097642296, 0.0134714614590776, 0.0148448043184885, 0.016146701595618, 0.0175597364451854, 0.0188775105183774, 0.020298483765976, 0.0215606890529491, 0.022902278320235, 0.0240692228308327, 0.0252758593315869, 0.0262602206874653, 0.0272763356354688, 0.0280304834484401, 0.0287925696594427, 0.0292768119393506, 0.0297372390251647, 0.0299118837818528, 0.0300706517424784, 0.0299118837818528, 0.0297372390251647, 0.0292768119393506, 0.0287925696594427, 0.0280304834484401, 0.0272763356354688, 0.0262602206874653, 0.0252758593315869, 0.0240692228308327, 0.022902278320235, 0.0215606890529491, 0.020298483765976, 0.0188775105183774, 0.0175597364451854, 0.016146701595618, 0.0148448043184885, 0.0134714614590776, 0.0122410097642296, 0.0109629276811939, 0.00983567516075256, 0.00869254584424863, 0.00769230769230769, 0.00670000793839803, 0.00585853774708264, 0.00501706755576725, 0.00431848852901484, 0.00364372469635628, 0.00308803683416687, 0.00255616416607129, 0.00213542907041359, 0.00173057077081845, 0.00142097324759863, 0.00112725252044137, 0.000904977375565611, 0.000698579026752401, 0.00055568786218941, 0.000412796697626419, 0.000317535921251092, 0.000230213542907041, 0.0001746447566881, 0.000119075970469159, 8.73223783440502e-05, 5.5568786218941e-05, 3.96919901563864e-05, 2.38151940938319e-05, 1.58767960625546e-05, 7.93839803127729e-06, 7.93839803127729e-06, 0));`==`(argv[[1]],argv[[2]]);
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators124
#argv <- list(16L, 8);`%%`(argv[[1]],argv[[2]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators125
#argv <- list('«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè', '«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè');`==`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators128
#argv <- list(c(30000L, 100000L), c(30000, 1e+05));`==`(argv[[1]],argv[[2]]);
[1] TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators129
#argv <- list(2L, e2 = 2);`==`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators13
#argv <- list(c(1, 1, 10, 1, 1, 10, 10), 0);`!=`(argv[[1]],argv[[2]]);
[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators131
#argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 1L);`==`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators132
#argv <- list(NULL, NULL);`==`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators134
#argv <- list(FALSE, 'Sweave');`==`(argv[[1]],argv[[2]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators135
#argv <- list(1, 26);`%%`(argv[[1]],argv[[2]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators136
#argv <- list(NULL, NULL);`>`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators138
#argv <- list(structure(NA_real_, class = c('POSIXct', 'POSIXt')), structure(1386394754, class = c('POSIXct', 'POSIXt')));`>`(argv[[1]],argv[[2]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators14
#argv <- list(c(23.454000046244, 23.454000046244, 23.454000046244, 23.454000046244, 28.3020224298599, 28.3020224298599, 28.3020224298599, 28.3020224298599, 30.800519631939, 30.800519631939, 30.800519631939, 30.800519631939, 25.9206422064884, 25.9206422064884, 25.9206422064884, 23.2002066882042, 23.2002066882042, 23.2002066882042, 20.1196890721666, 20.1196890721666, 20.1196890721666, 33.5952341720171, 33.5952341720171, 39.0519830824759, 39.0519830824759, 32.136512000254, 32.136512000254, 40.0046131871928, 40.0046131871928, 36.1899385542654, 36.1899385542654, 36.1899385542654, 36.9107066354437, 36.9107066354437, 30.6345192978006, 30.6345192978006, 34.3113600002908, 34.3113600002908, 38.3947952390571, 38.3947952390571, 31.2256309266188, 31.2256309266188, 31.2256309266188, 31.2256309266188, 31.2302025081837, 31.2302025081837, 31.2302025081837, 31.2302025081837, 19.9976293105352, 19.9976293105352, 19.9976293105352, 37.0952034528547, 37.0952034528547, 37.0952034528547, 32.5940180631865, 32.5940180631865, 32.5940180631865, 30.3755575381127, 30.3755575381127, 30.3755575381127), c(-7.78372381938215, -2.21918545910218, -0.632702831725275, -0.180387300047981, -7.49017129741483, -2.13549190787282, -0.608841307830204, -0.173584239188075, -22.5802449738518, -16.4998575320751, -8.81014962829596, -2.51182549655016, -23.557038894075, -17.2136212906412, -9.19126598036131, -21.8778835738372, -15.9866273589884, -8.53610880037608, -15.0686941140291, -11.0110101269414, -5.87936269076593, -5.59523381317633, -1.59523408160483, -33.4519828181102, -13.051983020203, -16.7365117167447, -8.93651185736664, -28.2046129643012, -11.0046131346857, -24.7866580698756, -18.1121297542524, -9.67102733534973, -10.9107059357263, -3.11070645913868, -6.43451888517834, -1.83451919385285, -19.311359673177, -10.3113598354284, -17.5947943688525, -9.39479451670115, -13.4592527410221, -3.83731214857368, -1.09404027169438, -0.311917318619494, -9.6582725100978, -2.75363032037238, -0.7850762062622, -0.223829845669225, -4.53229442651767, -1.2921838083017, -0.368409206751382, -8.25942763485825, -2.35481141586021, -0.671370589998607, -10.5255747423345, -3.00090328985181, -0.855575184775718, -7.55762449149225, -2.15472321038819, -0.614324265331269));`+`(argv[[1]],argv[[2]]);
 [1] 15.670276 21.234815 22.821297 23.273613 20.811851 26.166531 27.693181
 [8] 28.128438  8.220275 14.300662 21.990370 28.288694  2.363603  8.707021
[15] 16.729376  1.322323  7.213579 14.664098  5.050995  9.108679 14.240326
[22] 28.000000 32.000000  5.600000 26.000000 15.400000 23.200000 11.800000
[29] 29.000000 11.403280 18.077809 26.518911 26.000001 33.800000 24.200000
[36] 28.800000 15.000000 24.000000 20.800001 29.000001 17.766378 27.388319
[43] 30.131591 30.913714 21.571930 28.476572 30.445126 31.006373 15.465335
[50] 18.705446 19.629220 28.835776 34.740392 36.423833 22.068443 29.593115
[57] 31.738443 22.817933 28.220834 29.761233

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators140
#argv <- list(structure(c(24L, 13L, 15L, 68L, 39L, 74L, 22L, 1L, 8L, 55L, 24L, 20L, 51L, 13L, 3L, 4L, 5L, 6L, 15L, 2L, 8L, 60L, 67L, 23L, 58L, 24L, 22L, 21L, 37L, 74L, 59L, 39L, 14L, 14L, 19L, 23L, 70L, 21L, 22L, 31L, 29L, 30L, 45L, 58L, 17L, 7L, 19L, 26L, 39L, 74L, 57L, 59L, 12L, 72L, 70L, 37L, 64L, 16L, 18L, 21L, 22L, 8L, 62L, 61L, 63L, 71L, 105L, 64L, 10L, 41L, 8L, 27L, 11L, 34L, 32L, 33L, 68L, 107L, NA, 66L, NA, 65L, 48L, 52L, 43L, 47L, 46L, 44L, 41L, 54L, 28L, 50L, 40L, NA, 69L, NA, 75L, 109L, NA, 86L, 112L, 110L, 104L, 24L, 111L, 87L, NA, NA, 92L, 73L, 85L, 90L, 89L, NA, 83L, NA, 102L, NA, 108L, 88L, 91L, 93L, NA, 94L, 84L, NA, 106L, NA, 95L, 82L, 56L, 87L, 109L, 75L, 104L, 110L, 112L, 111L, 24L, 73L, 85L, 86L, 90L, 89L, 102L, 88L, 92L, 9L, 49L, 42L, 38L, 35L, 36L, 25L, NA, NA, 9L, 49L, 42L, NA, 36L, 38L, 25L, 53L, 79L, 78L, 103L, 77L, 80L, 114L, 97L, 113L, 76L, 96L, 81L, 116L, 99L, 117L, 115L, 98L, 101L, 100L), .Label = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266')), 20);`>`(argv[[1]],argv[[2]]);
  [1]  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
 [13]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE
 [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE
 [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE
 [49]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE
 [61]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE
 [73] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA  TRUE    NA  TRUE  TRUE  TRUE
 [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE    NA  TRUE    NA
 [97]  TRUE  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE    NA    NA
[109]  TRUE  TRUE  TRUE  TRUE  TRUE    NA  TRUE    NA  TRUE    NA  TRUE  TRUE
[121]  TRUE  TRUE    NA  TRUE  TRUE    NA  TRUE    NA  TRUE  TRUE  TRUE  TRUE
[133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[145]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE    NA    NA
[157] FALSE  TRUE  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[169]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[181]  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators143
#argv <- list(c(8262, 2889), 1e+05);`>`(argv[[1]],argv[[2]]);
[1] FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators145
#argv <- list(c(1, 2, 3, NA, -1, 0, 1, NA), 0);`>`(argv[[1]],argv[[2]]);
[1]  TRUE  TRUE  TRUE    NA FALSE FALSE  TRUE    NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators146
#argv <- list(10, 16L);`%%`(argv[[1]],argv[[2]]);
[1] 10

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators148
#argv <- list(FALSE, FALSE);`>=`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators150
#argv <- list(NULL, NULL);`>=`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators152
#argv <- list(structure(3.00390625, base = 16, lens = 3L, .classes = c('R_system_version', 'package_version', 'numeric_version')), structure(2.9375, base = 16, lens = 3L, .classes = c('package_version', 'numeric_version')));`>=`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators154
#argv <- list('3.0.1', '2.3.0');`>=`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators155
#argv <- list(c(30L, 30L, 60L, 60L, 60L, 60L, 60L, 60L, 30L, 30L, 60L, 60L, 60L, NA, 30L, 30L, 30L, 30L, 60L, 60L, 60L, 60L, 60L, 60L, 30L, 30L, 60L, 60L, 60L, 60L, 30L, 30L, 30L, NA, 30L, 30L, 60L, 60L, 30L, 30L, 30L, 30L, 30L, 60L, 60L, 30L, 30L, 30L, 30L, 60L, NA, 60L, NA, 30L, 60L, 60L, 30L, NA, 30L, 30L, 60L, NA, 30L, 30L, 30L, 30L, 30L, NA, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, NA, 18L, 18L, 30L, 30L, 30L, 30L, 18L, 18L, 30L, 30L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, NA, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, NA, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 30L, 30L, NA, 18L, NA, 30L, 30L, NA, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 30L, 30L, NA, 30L, 18L, 18L, 30L, 30L, 18L, 18L, 7L, 7L, 30L, 30L, 18L, 18L, NA, 30L, 7L, 7L, 7L, NA, 18L, 18L, 7L, 7L, 18L, NA, 30L, 30L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 18L, 18L), 30);`>=`(argv[[1]],argv[[2]]);
  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [13]  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE    NA  TRUE  TRUE
 [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [49]  TRUE  TRUE    NA  TRUE    NA  TRUE  TRUE  TRUE  TRUE    NA  TRUE  TRUE
 [61]  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE    NA  TRUE  TRUE  TRUE  TRUE
 [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [85]    NA FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
 [97]  TRUE FALSE FALSE FALSE FALSE  TRUE    NA FALSE FALSE  TRUE  TRUE FALSE
[109] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
[121] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
[133] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE
[145] FALSE  TRUE    NA FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
[157] FALSE  TRUE  TRUE  TRUE  TRUE    NA FALSE    NA  TRUE  TRUE    NA FALSE
[169] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE    NA
[181]  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
[193] FALSE    NA  TRUE FALSE FALSE FALSE    NA FALSE FALSE FALSE FALSE FALSE
[205]    NA  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[217] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators158
#argv <- list(c(1.67451869393188, 0.668927329809365, 0.0791361259651342, 0.543924729050942, 0.00967644138302005, 0.464139419264689, 1.12629957234273), 1e-30);`>=`(argv[[1]],argv[[2]]);
[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators159
#argv <- list(c(2.00256647265648e-308, 2.22284878464869e-308, 2.22507363599982e-308, 2.2250738585072e-308, 2.22507408101459e-308, 2.22729893236571e-308, 2.44758124435792e-308, 1.61792382137608e+308, 1.79589544172745e+308, 1.797692955093e+308, 1.79769313486232e+308), 1);`>=`(argv[[1]],argv[[2]]);
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators161
#argv <- list(structure(c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492, -0.305388387156356, 1.51178116845085, 0.389843236411431, -0.621240580541804, -2.2146998871775, 1.12493091814311, -0.0449336090152309, -0.0161902630989461, 0.943836210685299, 0.821221195098089, 0.593901321217509, 0.918977371608218, 0.782136300731067, 0.0745649833651906, -1.98935169586337, 0.61982574789471, -0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861, -0.41499456329968, -0.394289953710349, -0.0593133967111857, 1.10002537198388, 0.763175748457544, -0.164523596253587, -0.253361680136508, 0.696963375404737, 0.556663198673657, -0.68875569454952, -0.70749515696212, 0.36458196213683, 0.768532924515416, -0.112346212150228, 0.881107726454215), .Label = structure(list(c(-2.21578569960353, -0.304302574730325), c(-0.689841506975551, -0.0550429271029698), c(-0.254447492562539, 0.3887574239854), c(-0.0548908530089361, 0.620911560320741), c(0.3887574239854, 0.882193538880246), c(0.695877562978706, 1.59636661456382)), class = 'shingleLevel'), class = 'shingle'), -0.254447492562539);`>=`(argv[[1]],argv[[2]]);
 [1] FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
[13] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
[25]  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
[37] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE
[49]  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators162
#argv <- list(c(1, 2, 3, 4, 5, 6, 7, NA, 9, 10, 11, 12), 1);`>=`(argv[[1]],argv[[2]]);
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE   NA TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators163
#argv <- list(structure(c(18000, 315550800, 631170000, 946702800, 1262322000, 1577854800), class = c('POSIXct', 'POSIXt'), tzone = ''), 28304640);`>=`(argv[[1]],argv[[2]]);
[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators164
#argv <- list(c`!`(argv[[1]]);
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators170
#argv <- list(429204532L, 2L);`%%`(argv[[1]],argv[[2]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators172
#argv <- list(c(-1, 0, 0, 0, 0, 0, 1, 1, 1), 2L);`%%`(argv[[1]],argv[[2]]);
[1] 1 0 0 0 0 0 1 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators173
#argv <- list(-65205377L, 1073741824L);`%%`(argv[[1]],argv[[2]]);
[1] 1008536447

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators174
#argv <- list(160L, 16);`%%`(argv[[1]],argv[[2]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators176
#argv <- list(1, 2);`%%`(argv[[1]],argv[[2]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators177
#argv <- list(c(0, 1, 1, 2, 2, 3, 3, 4, 4), 2L);`%%`(argv[[1]],argv[[2]]);
[1] 0 1 1 0 0 1 1 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators181
#argv <- list(0, NA_real_);`%*%`(argv[[1]],argv[[2]]);
     [,1]
[1,]   NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators187
#argv <- list(243L, 16);`%/%`(argv[[1]],argv[[2]]);
[1] 15

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators188
#argv <- list(4L, 2L);`%/%`(argv[[1]],argv[[2]]);
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators189
#argv <- list(5, 3);`%/%`(argv[[1]],argv[[2]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators190
#argv <- list(1:2, 4L);`%%`(argv[[1]],argv[[2]]);
[1] 1 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators191
#argv <- list(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));`&`(argv[[1]],argv[[2]]);
[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators2
#argv <- list(c(NA, '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', NA));`!=`(argv[[1]],argv[[2]]);
 [1]    NA FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE FALSE    NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators201
#argv <- list(3e+09, 30000L);`%%`(argv[[1]],argv[[2]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators209
#argv <- list(0.603420215896625, c(0, 0, 0, 0, 0, -0.0303676182248376, -0.0303676182248376, -0.0616574286863247, -0.0616574286863247, -0.0616574286863247, -0.0616574286863247, -0.0616574286863247, -0.0616574286863247, -0.0938974361662337, -0.0938974361662337, -0.0938974361662337, -0.127116495884859, -0.127116495884859, -0.127116495884859, -0.127116495884859, -0.161344339326807, -0.161344339326807, -0.161344339326807, -0.161344339326807, -0.161344339326807, -0.161344339326807, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.270391595295763, -0.270391595295763, -0.270391595295763, -0.270391595295763, -0.270391595295763, -0.348720674486417, -0.389678109021166));`*`(argv[[1]],argv[[2]]);
 [1]  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000 -0.01832443
 [7] -0.01832443 -0.03720534 -0.03720534 -0.03720534 -0.03720534 -0.03720534
[13] -0.03720534 -0.05665961 -0.05665961 -0.05665961 -0.07670466 -0.07670466
[19] -0.07670466 -0.07670466 -0.09735844 -0.09735844 -0.09735844 -0.09735844
[25] -0.09735844 -0.09735844 -0.11863941 -0.11863941 -0.11863941 -0.11863941
[31] -0.11863941 -0.11863941 -0.11863941 -0.11863941 -0.11863941 -0.14056665
[37] -0.14056665 -0.14056665 -0.14056665 -0.14056665 -0.14056665 -0.14056665
[43] -0.14056665 -0.14056665 -0.14056665 -0.16315975 -0.16315975 -0.16315975
[49] -0.16315975 -0.16315975 -0.21042510 -0.23513965

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators21
#argv <- list(1, c(FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE));`+`(argv[[1]],argv[[2]]);
 [1] 1 1 1 2 1 2 2 1 1 1 1 1 1 1 1 1 1 2 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators212
#argv <- list(0, 0L);`%%`(argv[[1]],argv[[2]]);
[1] NaN

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators216
#argv <- list(1, 8);`*`(argv[[1]],argv[[2]]);
[1] 8

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators217
#argv <- list(0+1i, 2);`*`(argv[[1]],argv[[2]]);
[1] 0+2i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators218
#argv <- list(2L, 5L);`*`(argv[[1]],argv[[2]]);
[1] 10

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators219
#argv <- list(0+2i, 3.14159265358979);`*`(argv[[1]],argv[[2]]);
[1] 0+6.283185i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators221
#argv <- list(3, 0+5i);`+`(argv[[1]],argv[[2]]);
[1] 3+5i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators227
#argv <- list(3.14159265358979, c(8.24339426780198e-14, 8.88066145332545e-14, 3.39607080058103e-14, 2.87112686384263e-14, -5.3372537031158e-14, 9.96185601455202e-14, -3.26659396832497e-14, 1.39086823244366e-13, 1.72881695621852e-13, 4.32507741831361e-14, -9.84603924440361e-14, 9.87208407136427e-14, -2.73032911651077e-14, -1.48736837028697e-13, 2.94392054503409e-14, -1.05171613093738e-13, -1.14029445758562e-13, 5.13338041611324e-15, -1.87531579189825e-13, -1.25627528672486e-13, 4.10267164560562e-14, 1.74236574669889e-13, 8.02066525165472e-14, 1.57764465352e-13, 1.23253351804626e-13, 1.6788749880341e-13, -1.39908165098147e-13, -1.58115885024452e-13, 1.81544497697974e-13, -1.14362367874561e-13, 1.56626365789358e-13, -1.81348445541539e-13, 1.34029870837468e-13, 5.83660521214748e-14, 1.66415892254192e-13, -1.55962501921682e-13, 5.56922447997358e-15, -1.90684901734508e-13, -1.56068620913678e-13, 1.42594677103356e-13, -1.5324035174056e-13, -1.72045664669025e-13, 6.15626207230525e-14, -1.70423231918929e-13, -2.2440318442518e-14, -6.47937716601402e-14, -1.03307295568126e-13, 7.89213836842498e-14, -9.01552844071197e-15, -1.39863491975671e-13, 1.21580502093206e-13, 1.74391617154328e-13, -7.68474764369541e-15, -9.62952541877272e-14, -5.3148471902392e-14, -2.21880305144443e-14, 5.26389742858333e-14, 2.7159840200832e-14, 1.87431554819324e-14, 4.56102486340353e-14, 1.11966090535737e-13, 9.46528420538298e-14, -1.10626253790834e-14, -1.20682584010224e-13, 1.09679727142136e-13, 1.85521222833898e-13, 1.28904258163856e-13, -7.30112958403796e-14, 4.38190249362539e-14, -5.25642067782032e-14, -1.07266296983526e-13, 4.48939091164837e-14, 4.09010010401022e-14, 1.576058154827e-13, -1.65586113176678e-13, 1.64953139323032e-13, -3.61017352519794e-14, -5.98713716165795e-14, 1.5553263601743e-13, -1.40329145253713e-13, -1.34306416738384e-13, 6.33760537168414e-15, -1.47719256195174e-13, 1.30439641217338e-13, -1.9949544714752e-13, 8.89585653992738e-14, 9.03099047696007e-14, -5.47032374550363e-14, 1.44655516265113e-13, 1.70556682807057e-13, -9.71359599142186e-14, -6.53941098287223e-14, -8.38818567534634e-14, 6.7826899389696e-14, 1.86838153280979e-13, 4.37228204318607e-14, 8.3759639291968e-14, -1.92868749423155e-13, -9.13894925944948e-14, 5.76515542011828e-14, 3.92733987046576e-14));`+`(argv[[1]],argv[[2]]);
  [1] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
  [9] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [17] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [25] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [33] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [41] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [49] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [57] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [65] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [73] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [81] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [89] 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593 3.141593
 [97] 3.141593 3.141593 3.141593 3.141593 3.141593

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators228
#argv <- list(4, 1:5);`+`(argv[[1]],argv[[2]]);
[1] 5 6 7 8 9

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators23
#argv <- list(1:2, c(0+8i, 0+9i));`+`(argv[[1]],argv[[2]]);
[1] 1+8i 2+9i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators231
#argv <- list(1, 1);`-`(argv[[1]],argv[[2]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators235
#argv <- list(FALSE, c(-3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L));`%%`(argv[[1]],argv[[2]]);
 [1]  0  0  0 NA  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
[26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
[51]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
[76]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators24
#argv <- list(c(14, 2, 2, -7), c(14, 2, 2, -7));`!=`(argv[[1]],argv[[2]]);
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators242
#argv <- list(5);`-`(argv[[1]]);
[1] -5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators245
#argv <- list(17L, 10L);`-`(argv[[1]],argv[[2]]);
[1] 7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators253
#argv <- list(c(1, 1, 1, 1, 1), -10);`<`(argv[[1]],argv[[2]]);
[1] FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators254
#argv <- list(structure(c(1208822400, 1208908800, 1208995200, 1209081600, 1209168000, 1209254400), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), structure(1209168000, class = c('POSIXct', 'POSIXt'), tzone = 'GMT'));`<=`(argv[[1]],argv[[2]]);
[1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators258
#argv <- list(2L, 1);`==`(argv[[1]],argv[[2]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators259
#argv <- list(structure(c(2L, NA, NA, 4L, 3L, 2L, 1L, 5L, 5L, 6L), .Label = c('NA', 'a', 'b', 'c', 'd', NA), class = 'factor'), structure(c(2L, NA, NA, 4L, 3L, 2L, 1L, 5L, 5L, 6L), .Label = c('NA', 'a', 'b', 'c', 'd', NA), class = 'factor'));`==`(argv[[1]],argv[[2]]);
 [1] TRUE   NA   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators260
#argv <- list(c(-Inf, Inf), c(-Inf, Inf));`==`(argv[[1]],argv[[2]]);
[1] TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators263
#argv <- list(structure(c(1L, 2L, NA), .Label = c('1', '2'), class = 'factor'), structure(c(1L, 2L, NA), .Label = c('1', '2'), class = 'factor'));`==`(argv[[1]],argv[[2]]);
[1] TRUE TRUE   NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators264
#argv <- list(c(5L, 2L, 4L), c(5, 2, 4));`==`(argv[[1]],argv[[2]]);
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators265
#argv <- list(NULL, 'foo');`==`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators267
#argv <- list(c('1', '2', NA), c('1', '2', NA));`==`(argv[[1]],argv[[2]]);
[1] TRUE TRUE   NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators268
#argv <- list(-1:12, 2);`%%`(argv[[1]],argv[[2]]);
 [1] 1 0 1 0 1 0 1 0 1 0 1 0 1 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators269
#argv <- list(structure('(converted from warning) NAs produced\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), '(converted from warning) NAs produced\n');`==`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators270
#argv <- list(75.1931882101063, 0);`>`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators271
#argv <- list(3.001e+155, 0);`>`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators276
#argv <- list(structure(c(13991, 13992, 13993, 13994, 13995), class = 'Date', labels = c('Apr 22', 'Apr 23', 'Apr 24', 'Apr 25', 'Apr 26')), 13991);`>=`(argv[[1]],argv[[2]]);
[1] TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators277
#argv <- list(structure(3.00510204081633, base = 14, lens = 3L, .classes = c('R_system_version', 'package_version', 'numeric_version')), structure(2.92857142857143, base = 14, lens = 3L, .classes = c('package_version', 'numeric_version')));`>=`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators280
#argv <- list(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69), 2);`^`(argv[[1]],argv[[2]]);
 [1] 17.3889 31.1364 26.8324 37.3321 20.2500 21.2521 26.7289 20.5209 28.4089
[10] 26.4196 23.1361 17.3889 19.4481 12.8881 34.4569 14.6689 36.3609 23.9121
[19] 18.6624 21.9961

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators287
#argv <- list(-3:4, 2);`^`(argv[[1]],argv[[2]]);
[1]  9  4  1  0  1  4  9 16

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators288
#argv <- list(0.9, Inf);`^`(argv[[1]],argv[[2]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators29
#argv <- list(c(NA, 6.12, 19.92, 29.64, 35.4, 39.72, 45.24, 52.32, 63.48), c(6.12, 19.92, 29.64, 35.4, 39.72, 45.24, 52.32, 63.48, NA));`+`(argv[[1]],argv[[2]]);
[1]     NA  26.04  49.56  65.04  75.12  84.96  97.56 115.80     NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators291
#argv <- list(c(-Inf, -2, -1), -3);`^`(argv[[1]],argv[[2]]);
[1]  0.000 -0.125 -1.000

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators292
#argv <- list(integer(0), 1:3);`^`(argv[[1]],argv[[2]]);
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators297
#argv <- list(c(-Inf, -2, -1), 0.5);`^`(argv[[1]],argv[[2]]);
[1] NaN NaN NaN

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators300
#argv <- list(c(-Inf, -2, -1, 0, 1, 2, Inf, NA, NaN), 0);`^`(argv[[1]],argv[[2]]);
[1] 1 1 1 1 1 1 1 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators306
#argv <- list(c(1.1, 2, Inf), -Inf);`^`(argv[[1]],argv[[2]]);
[1] 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators308
#argv <- list(list());`|`(argv[[1]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators316
#argv <- list(character(0));`!`(argv[[1]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators328
#argv <- list(350L, 7);`%/%`(argv[[1]],argv[[2]]);
[1] 50

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators329
#argv <- list(34, 2L);`%/%`(argv[[1]],argv[[2]]);
[1] 17

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators330
#argv <- list(TRUE, 0:10);`%/%`(argv[[1]],argv[[2]]);
 [1] NA  1  0  0  0  0  0  0  0  0  0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators334
#argv <- list(c(0, -1, 0, -1, -1, 0, NA, NA, 0, 0, 0, 0, 0, 15, 0, 17, 18, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 33, 34, 0, 0, 35, 0, 37, 38, 0), 2);`%/%`(argv[[1]],argv[[2]]);
 [1]  0 -1  0 -1 -1  0 NA NA  0  0  0  0  0  7  0  8  9  0  0  0 NA  0  0  0  0
[26]  0 NA  0  0  0  0  0  0  0  0  0  0 15  0 16 17  0  0 17  0 18 19  0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators344
#argv <- list(list());`&`(argv[[1]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators35
#argv <- list(c(3, 1, 2, 2, 3.2, -1, 1, 3.2, 4, 3, 3.2, 3.2, 202, 241, 243), 0);`!=`(argv[[1]],argv[[2]]);
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators360
#argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 'auto');`!=`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators365
#argv <- list(-0.0290053253855826, c(95, 175, 250, 350, 500, 675, 1000));`*`(argv[[1]],argv[[2]]);
[1]  -2.755506  -5.075932  -7.251331 -10.151864 -14.502663 -19.578595 -29.005325

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators366
#argv <- list(c(2L, 1L), c(2L, 2L));`*`(argv[[1]],argv[[2]]);
[1] 4 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators368
#argv <- list(1.5, 1.5);`*`(argv[[1]],argv[[2]]);
[1] 2.25

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators371
#argv <- list(TRUE, TRUE);`!=`(argv[[1]],argv[[2]]);
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators377
#argv <- list(30, 1:100);`*`(argv[[1]],argv[[2]]);
  [1]   30   60   90  120  150  180  210  240  270  300  330  360  390  420  450
 [16]  480  510  540  570  600  630  660  690  720  750  780  810  840  870  900
 [31]  930  960  990 1020 1050 1080 1110 1140 1170 1200 1230 1260 1290 1320 1350
 [46] 1380 1410 1440 1470 1500 1530 1560 1590 1620 1650 1680 1710 1740 1770 1800
 [61] 1830 1860 1890 1920 1950 1980 2010 2040 2070 2100 2130 2160 2190 2220 2250
 [76] 2280 2310 2340 2370 2400 2430 2460 2490 2520 2550 2580 2610 2640 2670 2700
 [91] 2730 2760 2790 2820 2850 2880 2910 2940 2970 3000

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators380
#argv <- list(-3:3, 0+1i);`*`(argv[[1]],argv[[2]]);
[1] 0-3i 0-2i 0-1i 0+0i 0+1i 0+2i 0+3i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators381
#argv <- list(181L, 3.14159265358979);`*`(argv[[1]],argv[[2]]);
[1] 568.6283

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators41
#argv <- list(1.15);`-`(argv[[1]]);
[1] -1.15

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators43
#argv <- list(1, c(0.588534374722704, 0.346372710230244, 0.203852246436365, 0.119974054392244, 0.0706088550846872, 0.0244569805019377));`-`(argv[[1]],argv[[2]]);
[1] 0.4114656 0.6536273 0.7961478 0.8800259 0.9293911 0.9755430

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators45
#argv <- list(38, 24L);`-`(argv[[1]],argv[[2]]);
[1] 14

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators48
#argv <- list(41L, 0L);`-`(argv[[1]],argv[[2]]);
[1] 41

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators65
#argv <- list(c(41L, 36L, 12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L, 14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L, 45L, 115L, 37L, NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 135L, 49L, 32L, NA, 64L, 40L, 77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L, 79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L, 59L, 39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA, 44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA, 45L, 168L, 73L, NA, 76L, 118L, 84L, 85L, 96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L));`-`(argv[[1]]);
  [1]  -41  -36  -12  -18   NA  -28  -23  -19   -8   NA   -7  -16  -11  -14  -18
 [16]  -14  -34   -6  -30  -11   -1  -11   -4  -32   NA   NA   NA  -23  -45 -115
 [31]  -37   NA   NA   NA   NA   NA   NA  -29   NA  -71  -39   NA   NA  -23   NA
 [46]   NA  -21  -37  -20  -12  -13   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [61]   NA -135  -49  -32   NA  -64  -40  -77  -97  -97  -85   NA  -10  -27   NA
 [76]   -7  -48  -35  -61  -79  -63  -16   NA   NA  -80 -108  -20  -52  -82  -50
 [91]  -64  -59  -39   -9  -16  -78  -35  -66 -122  -89 -110   NA   NA  -44  -28
[106]  -65   NA  -22  -59  -23  -31  -44  -21   -9   NA  -45 -168  -73   NA  -76
[121] -118  -84  -85  -96  -78  -73  -91  -47  -32  -20  -23  -21  -24  -44  -21
[136]  -28   -9  -13  -46  -18  -13  -24  -16  -13  -23  -36   -7  -14  -30   NA
[151]  -14  -18  -20

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators67
#argv <- list(c(4L, 3L, 2L, 1L, 2L, 3L, 4L, 5L), 0+5i);`-`(argv[[1]],argv[[2]]);
[1] 4-5i 3-5i 2-5i 1-5i 2-5i 3-5i 4-5i 5-5i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators68
#argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), structure(integer(0), .Label = character(0), class = 'factor'));`!=`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators78
#argv <- list(1, 4);`<`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators79
#argv <- list(NULL, NULL);`!=`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators8
#argv <- list(0.5, c(0.0945457474962427, 0.369817831189094, 0.485958087431202, 0.498816870239398, 0.499902671395055));`+`(argv[[1]],argv[[2]]);
[1] 0.5945457 0.8698178 0.9859581 0.9988169 0.9999027

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators80
#argv <- list(structure(1L, .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')), structure(3L, .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')));`<`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators81
#argv <- list(structure(1386500270.17764, class = c('POSIXct', 'POSIXt')), structure(c(1383854025.35606, 1386388510.66806), class = c('POSIXct', 'POSIXt')));`<`(argv[[1]],argv[[2]]);
[1] FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators82
#argv <- list(c(0.999998001700552, -0.0013118835870674, -0.000526551904329415, 0.999999038344567, -0.000903475278483392, -0.000381296378838388, 0.999999057686544, -0.000896140095625969, -0.000373156128147092, 0.999998405868953, -0.00114777435393854, -0.000526063245555164, 0.99999814161282, -0.00120795166706622, -0.000631851641234638, 0.999997792453059, -0.00139185834612791, -0.000519877304541034, 0.999998020546725, -0.00127080900255349, -0.00060373324887666, 0.999998059330159, -0.00123814735894241, -0.000638480377887232, 0.999998337108097, -0.00115570987192407, -0.000572034814304861, 0.999998571810103, -0.00106400147389197, -0.00054414035107764, 0.999999136998844, -0.000829344110491764, -0.000418555560445895, 0.999999436800894, -0.000688792506748533, -0.00029793232712181, 0.999999182435777, -0.000786088000160243, -0.000446798847724984, 0.999998035855459, -0.00125214214514046, -0.000629508325517675, 0.999995461301925, -0.00191759993645823, -0.000928163756226527, 0.999990501294199, -0.00282586497589704, -0.00123008240127283, 0.99998523015117, -0.00349306924843624, -0.00160252859811979, 0.999980247693918, -0.00393070891026528, -0.00207399213858218, 0.999258133391236, -0.0212608113487506, 0.0170086490790013, 0.999752823870685, -0.0151150534926454, -0.00431858671218418, 0.998521231438773, -0.0331918414882689, 0.0193619075348229, 0.973987730061349, 0.0773006134969334, -0.139141104294479, 0.997923156801661, -0.0321910695742469, 0.0321910695742468, 0.999947758503179, -0.00259457124676546, -0.006745885241587, -0.0013118835870674, 0.138748425090248, -0.345681325192261, -0.000903475278483392, 0.151184975864853, -0.358227947918666, -0.000896140095625969, 0.147770769059702, -0.354871477867884, -0.00114777435393854, 0.173602465164251, -0.378765536799718, -0.00120795166706622, 0.214831416406957, -0.410703566802515, -0.00139185834612791, 0.122433312766354, -0.327782640513123, -0.00127080900255349, 0.184140620360657, -0.387596745778816, -0.00123814735894241, 0.21006198499474, -0.407350481092054, -0.00115570987192407, 0.196781639012774, -0.397564195941878, -0.00106400147389197, 0.207318901950479, -0.405384561552842, -0.000829344110491764, 0.203000309817415, -0.402231893588506, -0.000688792506748533, 0.157606764246543, -0.364371236069974, -0.000786088000160243, 0.244176387845927, -0.429597092087573, -0.00125214214514046, 0.201759382472957, -0.401311557517518, -0.00191759993645823, 0.189814026846399, -0.392149187005707, -0.00282586497589704, 0.159305169670633, -0.365949514378666, -0.00349306924843624, 0.173889122744829, -0.378998013455332, -0.00393070891026528, 0.217788926857211, -0.412724435577854, -0.0212608113487506, 0.000452357688250284, -0.00036188615058233, -0.0151150534926454, 0.000228521327097438, 6.52918077527545e-05, -0.0331918414882689, 0.00110332991097693, -0.000643609114746404, 0.0773006134969334, 0.00613496932514866, -0.0110429447852694, -0.0321910695742469, 0.0010384215991718, -0.00103842159917336, -0.00259457124676546, 6.73215168555691e-06, 1.75035942027152e-05, -0.000526551904329415, -0.345681325192261, 0.861253573209199, -0.000381296378838388, -0.358227947918666, 0.848815985790579, -0.000373156128147092, -0.354871477867884, 0.852230173253752, -0.000526063245555164, -0.378765536799718, 0.826399128966796, -0.000631851641234638, -0.410703566802515, 0.785170441980223, -0.000519877304541034, -0.327782640513123, 0.877568894780586, -0.00060373324887666, -0.387596745778816, 0.815861359092619, -0.000638480377887232, -0.407350481092054, 0.789939955675102, -0.000572034814304861, -0.397564195941878, 0.803220023879128, -0.00054414035107764, -0.405384561552842, 0.792682526239419, -0.000418555560445895, -0.402231893588506, 0.797000553183741, -0.00029793232712181, -0.364371236069974, 0.842393798952562, -0.000446798847724984, -0.429597092087573, 0.755824429718295, -0.000629508325517675, -0.401311557517518, 0.798242581671585, -0.000928163756226527, -0.392149187005707, 0.810190511851676, -0.00123008240127283, -0.365949514378666, 0.840704329035169, -0.00160252859811979, -0.378998013455332, 0.826125647104002, -0.00207399213858218, -0.412724435577854, 0.782230825448871, 0.0170086490790013, -0.00036188615058233, 0.00028950892043616, -0.00431858671218418, 6.52918077527545e-05, 1.86548021961656e-05, 0.0193619075348229, -0.000643609114746404, 0.000375438650284673, -0.139141104294479, -0.0110429447852694, 0.0198773006134874, 0.0321910695742468, -0.00103842159917336, 0.00103842159917592, -0.006745885241587, 1.75035942027152e-05, 4.55093454284494e-05), 0.692636183089874);`<`(argv[[1]],argv[[2]]);
  [1] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
 [13] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
 [25] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
 [37] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
 [49] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
 [61] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
 [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [97]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[109]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[121]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[145]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE
[157]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE
[169]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE
[181]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE
[193]  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[205]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators85
#argv <- list(c(2.00256647265648e-308, 2.22284878464869e-308, 2.22507363599982e-308, 2.2250738585072e-308, 2.22507408101459e-308, 2.22729893236571e-308, 2.44758124435792e-308, 1.61792382137608e+308, 1.79589544172745e+308, 1.797692955093e+308, 1.79769313486232e+308), 1);`<`(argv[[1]],argv[[2]]);
 [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators88
#argv <- list(c(1, 2, 3, 4, 5, 6, 7, NA, 9, 10, 11, 12), 2);`<`(argv[[1]],argv[[2]]);
 [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE    NA FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators90
#argv <- list(c(1, 0, 0, 1, 0, 1, 2, 2, 1, 2, 1, 2, 1, NA, 1, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 3, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 0, 2, 1, 2, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 0, 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 1, 2, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 2, 2, 1, 2, 1, 1, 0, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 2, 0, 2, 1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 2, 0, 1, 1, 1, 1, 0, 2, 1, 1), 1);`!=`(argv[[1]],argv[[2]]);
  [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE
 [13] FALSE    NA FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE
 [25]  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
 [37]  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE
 [49]  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE
 [61]  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE
 [73]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE
 [97] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE
[109] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE
[121]  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE
[133]  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE
[145] FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
[157] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE
[169] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE
[181]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE
[193] FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE
[205]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE
[217] FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators92
#argv <- list(structure(c(0, 0.414213562373095, 0.732050807568877, 0, 0.23606797749979, 0.449489742783178, 0.645751311064591, 0.82842712474619, 0, 0.16227766016838), id = 'test 1', class = structure('withId', package = '.GlobalEnv')), 0.01);`<`(argv[[1]],argv[[2]]);
 [1]  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators93
#argv <- list(NULL, NULL);`<`(argv[[1]],argv[[2]]);
logical(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators94
#argv <- list('a', 'b');`<`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators95
#argv <- list(structure(c(1386478800, 1386651600, 1386824400, 1386997200, 1387170000, 1387342800, 1387515600, 1387688400, 1387861200, 1388034000, 1388206800, 1388379600, 1388552400, 1388725200), class = c('POSIXct', 'POSIXt'), tzone = ''), structure(1387538790.57927, class = c('POSIXct', 'POSIXt')));`<=`(argv[[1]],argv[[2]]);
 [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators96
#argv <- list(c(17, 45.1, 39.7, 36.5, 43.5), 6);`<=`(argv[[1]],argv[[2]]);
[1] FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators98
#argv <- list(c(0L, 1L, 2L, 2L, 2L, 3L, 4L, 5L, 5L, 5L, 6L, 7L, 7L, 7L, 8L, 9L, 9L, 9L, 10L, 11L, 11L, 11L, 12L, 12L, 12L, 13L, 14L, 14L, 14L), 1L);`<=`(argv[[1]],argv[[2]]);
 [1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[25] FALSE FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinoperators.testoperators99
#argv <- list(150000, 3e+09);`<=`(argv[[1]],argv[[2]]);
[1] TRUE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpackageEvent.testpackageEvent1
#argv <- structure(list(pkgname = 'stats4', event = 'onLoad'),     .Names = c('pkgname', 'event'));do.call('packageEvent', argv)
[1] "UserHook::stats4::onLoad"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpairlist.testpairlist1
#argv <- list();do.call('pairlist', argv)
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste.testpaste10
#argv <- list(list('(', structure(c(' 1.124', ' 1.056', ' 1.059', ' 0.932'), .Dim = c(2L, 2L)), ','), '', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))
[1] "( 1.124," "( 1.056," "( 1.059," "( 0.932,"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste.testpaste11
#argv <- list(list(character(0)), ' ', ''); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))
[1] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste.testpaste3
#argv <- list(list(), ' ', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste.testpaste4
#argv <- list(list('package', structure('pkgA', .Names = 'name')), ':', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))
[1] "package:pkgA"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste.testpaste5
#argv <- list(list(c('[', 'as.data.frame', 'plot', 'print', 'summary', 'as.character', 'print', 'print', 'plot', 'update', 'dim', 'dimnames', 'dimnames<-', '[', 't', 'summary', 'print', 'barchart', 'barchart', 'barchart', 'barchart', 'barchart', 'barchart', 'bwplot', 'bwplot', 'densityplot', 'densityplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'histogram', 'histogram', 'histogram', 'qqmath', 'qqmath', 'stripplot', 'stripplot', 'qq', 'xyplot', 'xyplot', 'levelplot', 'levelplot', 'levelplot', 'levelplot', 'contourplot', 'contourplot', 'contourplot', 'contourplot', 'cloud', 'cloud', 'cloud', 'wireframe', 'wireframe', 'splom', 'splom', 'splom', 'parallelplot', 'parallelplot', 'parallelplot', 'parallel', 'parallel', 'parallel', 'tmd', 'tmd', 'llines', 'ltext', 'lpoints'), c('shingle', 'shingle', 'shingle', 'shingle', 'shingle', 'shingleLevel', 'shingleLevel', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'summary.trellis', 'formula', 'array', 'default', 'matrix', 'numeric', 'table', 'formula', 'numeric', 'formula', 'numeric', 'formula', 'array', 'default', 'matrix', 'numeric', 'table', 'formula', 'factor', 'numeric', 'formula', 'numeric', 'formula', 'numeric', 'formula', 'formula', 'ts', 'formula', 'table', 'array', 'matrix', 'formula', 'table', 'array', 'matrix', 'formula', 'matrix', 'table', 'formula', 'matrix', 'formula', 'matrix', 'data.frame', 'formula', 'matrix', 'data.frame', 'formula', 'matrix', 'data.frame', 'formula', 'trellis', 'default', 'default', 'default')), '.', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))
 [1] "[.shingle"                 "as.data.frame.shingle"
 [3] "plot.shingle"              "print.shingle"
 [5] "summary.shingle"           "as.character.shingleLevel"
 [7] "print.shingleLevel"        "print.trellis"
 [9] "plot.trellis"              "update.trellis"
[11] "dim.trellis"               "dimnames.trellis"
[13] "dimnames<-.trellis"        "[.trellis"
[15] "t.trellis"                 "summary.trellis"
[17] "print.summary.trellis"     "barchart.formula"
[19] "barchart.array"            "barchart.default"
[21] "barchart.matrix"           "barchart.numeric"
[23] "barchart.table"            "bwplot.formula"
[25] "bwplot.numeric"            "densityplot.formula"
[27] "densityplot.numeric"       "dotplot.formula"
[29] "dotplot.array"             "dotplot.default"
[31] "dotplot.matrix"            "dotplot.numeric"
[33] "dotplot.table"             "histogram.formula"
[35] "histogram.factor"          "histogram.numeric"
[37] "qqmath.formula"            "qqmath.numeric"
[39] "stripplot.formula"         "stripplot.numeric"
[41] "qq.formula"                "xyplot.formula"
[43] "xyplot.ts"                 "levelplot.formula"
[45] "levelplot.table"           "levelplot.array"
[47] "levelplot.matrix"          "contourplot.formula"
[49] "contourplot.table"         "contourplot.array"
[51] "contourplot.matrix"        "cloud.formula"
[53] "cloud.matrix"              "cloud.table"
[55] "wireframe.formula"         "wireframe.matrix"
[57] "splom.formula"             "splom.matrix"
[59] "splom.data.frame"          "parallelplot.formula"
[61] "parallelplot.matrix"       "parallelplot.data.frame"
[63] "parallel.formula"          "parallel.matrix"
[65] "parallel.data.frame"       "tmd.formula"
[67] "tmd.trellis"               "llines.default"
[69] "ltext.default"             "lpoints.default"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste.testpaste7
#argv <- list(list(character(0)), ' ', ' '); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))
[1] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste.testpaste9
#argv <- list(list('GRID', 'text', '6'), '.', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))
[1] "GRID.text.6"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste01
#argv <- list(list('2', ': '), NULL); .Internal(paste0(argv[[1]], argv[[2]]))
[1] "2: "

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste010
#argv <- list(list(structure(c('-0.16', '-0.03', ' 0.11', '-0.19', ' 0.12', ' 0.00', '-0.03', ' 0.18', ' 0.01', '-0.03', '-0.11', '-0.11', ' 0.00', ' 0.09', '-0.15', ' 0.05', '-0.04', ' 0.00', ' 0.04', ' 0.00', ' 0.01', ' 0.04', ' 0.11', ' 0.11', '-0.10', '-0.01', ' 0.04', ' 0.34', '-0.30', ' 0.00', '-0.02', '-0.31', '-0.04', '-0.01', '-0.05', '-0.05', '-0.07', '-0.03', ' 0.02', ' 0.21', '-0.17', ' 0.00', '-0.03', '-0.17', '-0.03', '-0.04', ' 0.28', '-0.45', '-0.24', ' 0.00', ' 0.02', ' 0.25', '-0.28', ' 0.00', '-0.01', '-0.24', '-0.04', '-0.04', '-0.06', '-0.06', '-0.44', '-0.01', ' 0.02', ' 0.18', '-0.26', ' 0.00', ' 0.00', '-0.19', '-0.03', '-0.03', '-0.04', '-0.04', ' 0.01', '-0.03', ' 0.04', ' 0.18', '-0.11', ' 0.00', '-0.02', '-0.15', '-0.02', '-0.02', '-0.06', '-0.06', ' 0.12', ' 0.08', ' 0.07', '-0.01', '-0.03', ' 0.00', '-0.01', ' 0.00', ' 0.00', ' 0.04', '-0.01', '-0.01', ' 0.00', ' 0.01', ' 0.08', '-0.01', ' 0.01', ' 0.00', '-0.02', ' 0.01', ' 0.00', ' 0.03', '-0.07', '-0.07', ' 0.21', ' 0.00', '-0.08', ' 0.04', '-0.42', ' 0.00', ' 0.01', ' 0.01', ' 0.00', ' 0.02', ' 0.05', ' 0.05', ' 0.06', '-0.04', '-0.09', ' 0.01', ' 0.01', ' 0.00', ' 0.01', '-0.02', ' 0.00', ' 0.03', ' 0.04', ' 0.04', '-0.04', '-0.01', ' 0.16', '-0.06', '-0.03', ' 0.00', ' 0.02', '-0.07', ' 0.00', ' 0.06', ' 0.08', ' 0.08', ' 0.47', '-0.15', ' 0.06', ' 0.01', ' 0.18', ' 0.00', '-0.03', ' 0.01', ' 0.00', '-0.02', '-0.06', '-0.06', '-0.04', ' 0.01', ' 0.09', '-0.08', '-0.10', ' 0.00', ' 0.05', '-0.18', ' 0.01', '-0.03', ' 0.12', ' 0.12', ' 0.03', ' 0.02', ' 0.12', '-0.08', '-0.11', ' 0.00', ' 0.03', '-0.14', ' 0.01', '-0.02', ' 0.10', ' 0.10', ' 0.73', '-0.24', '-0.26', '-0.44', '-0.89', '  NaN', ' 0.08', ' 0.45', ' 0.05', ' 0.14', ' 0.64', '-0.64', ' 1.71', ' 2.09', ' 1.86', ' 1.76', ' 0.13', '  NaN', ' 1.63', ' 1.92', ' 1.88', ' 1.60', ' 2.68', ' 2.68', ' 0.04', ' 0.00', ' 0.00', ' 0.01', ' 0.05', '  NaN', ' 0.00', ' 0.01', ' 0.00', ' 0.00', ' 0.03', ' 0.03', ' 0.39', ' 0.43', ' 0.36', ' 0.36', ' 0.06', ' 1.00', ' 0.26', ' 0.40', ' 0.36', ' 0.25', ' 0.57', ' 0.57'), .Dim = c(12L, 19L), .Dimnames = list(c('8', '19', '28', '39', '42', '57', '66', '80', '83', '87', '89', '93'), c('dfb.1_', 'dfb.Wght', 'dfb.Cyl4', 'dfb.Cyl5', 'dfb.Cyl6', 'dfb.Cyl8', 'dfb.Cyln', 'dfb.TypL', 'dfb.TypM', 'dfb.TypSm', 'dfb.TypSp', 'dfb.TypV', 'dfb.EngS', 'dfb.DrTF', 'dfb.DrTR', 'dffit', 'cov.r', 'cook.d', 'hat'))), cnternal(paste0(argv[[1]], argv[[2]]))
  [1] "-0.16"   "-0.03"   " 0.11"   "-0.19"   " 0.12"   " 0.00"   "-0.03"
  [8] " 0.18"   " 0.01"   "-0.03"   "-0.11"   "-0.11"   " 0.00"   " 0.09"
 [15] "-0.15"   " 0.05"   "-0.04"   " 0.00"   " 0.04"   " 0.00"   " 0.01"
 [22] " 0.04"   " 0.11"   " 0.11"   "-0.10"   "-0.01"   " 0.04"   " 0.34"
 [29] "-0.30"   " 0.00"   "-0.02"   "-0.31"   "-0.04"   "-0.01"   "-0.05"
 [36] "-0.05"   "-0.07"   "-0.03"   " 0.02"   " 0.21"   "-0.17"   " 0.00"
 [43] "-0.03"   "-0.17"   "-0.03"   "-0.04"   " 0.28"   "-0.45"   "-0.24"
 [50] " 0.00"   " 0.02"   " 0.25"   "-0.28"   " 0.00"   "-0.01"   "-0.24"
 [57] "-0.04"   "-0.04"   "-0.06"   "-0.06"   "-0.44"   "-0.01"   " 0.02"
 [64] " 0.18"   "-0.26"   " 0.00"   " 0.00"   "-0.19"   "-0.03"   "-0.03"
 [71] "-0.04"   "-0.04"   " 0.01"   "-0.03"   " 0.04"   " 0.18"   "-0.11"
 [78] " 0.00"   "-0.02"   "-0.15"   "-0.02"   "-0.02"   "-0.06"   "-0.06"
 [85] " 0.12"   " 0.08"   " 0.07"   "-0.01"   "-0.03"   " 0.00"   "-0.01"
 [92] " 0.00"   " 0.00"   " 0.04"   "-0.01"   "-0.01"   " 0.00"   " 0.01"
 [99] " 0.08"   "-0.01"   " 0.01"   " 0.00"   "-0.02"   " 0.01"   " 0.00"
[106] " 0.03"   "-0.07"   "-0.07"   " 0.21"   " 0.00"   "-0.08"   " 0.04"
[113] "-0.42"   " 0.00"   " 0.01"   " 0.01"   " 0.00"   " 0.02"   " 0.05"
[120] " 0.05"   " 0.06"   "-0.04"   "-0.09"   " 0.01"   " 0.01"   " 0.00"
[127] " 0.01"   "-0.02"   " 0.00"   " 0.03"   " 0.04"   " 0.04"   "-0.04"
[134] "-0.01"   " 0.16"   "-0.06"   "-0.03"   " 0.00"   " 0.02"   "-0.07"
[141] " 0.00"   " 0.06"   " 0.08"   " 0.08"   " 0.47"   "-0.15"   " 0.06"
[148] " 0.01"   " 0.18"   " 0.00"   "-0.03"   " 0.01"   " 0.00"   "-0.02"
[155] "-0.06"   "-0.06"   "-0.04"   " 0.01"   " 0.09"   "-0.08"   "-0.10"
[162] " 0.00"   " 0.05"   "-0.18"   " 0.01"   "-0.03"   " 0.12"   " 0.12"
[169] " 0.03"   " 0.02"   " 0.12"   "-0.08"   "-0.11"   " 0.00"   " 0.03"
[176] "-0.14"   " 0.01"   "-0.02"   " 0.10"   " 0.10"   " 0.73"   "-0.24"
[183] "-0.26"   "-0.44"   "-0.89"   "  NaN"   " 0.08"   " 0.45"   " 0.05"
[190] " 0.14"   " 0.64"   "-0.64"   " 1.71_*" " 2.09_*" " 1.86_*" " 1.76_*"
[197] " 0.13_*" "  NaN"   " 1.63_*" " 1.92_*" " 1.88_*" " 1.60_*" " 2.68_*"
[204] " 2.68_*" " 0.04"   " 0.00"   " 0.00"   " 0.01"   " 0.05"   "  NaN"
[211] " 0.00"   " 0.01"   " 0.00"   " 0.00"   " 0.03"   " 0.03"   " 0.39"
[218] " 0.43"   " 0.36"   " 0.36"   " 0.06"   " 1.00_*" " 0.26"   " 0.40"
[225] " 0.36"   " 0.25"   " 0.57_*" " 0.57_*"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste013
#argv <- list(list(character(0), '$y'), NULL); .Internal(paste0(argv[[1]], argv[[2]]))
[1] "$y"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste015
#argv <- list(list('cnstrO> ', 'constrOptim(c(2,-1,-1), fQP, gQP, ui = t(Amat), ci = bvec)'), '\n'); .Internal(paste0(argv[[1]], argv[[2]]))
[1] "cnstrO> constrOptim(c(2,-1,-1), fQP, gQP, ui = t(Amat), ci = bvec)"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste02
#argv <- list(list(structure(c('-0.20', ' 0.07', ' 0.16', ' 0.55', ' 0.13', '-0.07', '-0.08', '-0.48', ' 0.22', ' 0.04', '-0.34', '-0.38', '-0.02', '-0.23', ' 0.09', '-0.02', ' 0.12', '-0.03', ' 0.23', '-1.02', '-0.46', '-0.25', ' 0.75', '-1.16', ' 0.65', ' 1.66', ' 0.51', ' 2.09', ' 0.04', ' 0.01', ' 0.10', ' 0.27', ' 0.04', ' 0.33', ' 0.06', ' 0.53'), .Dim = c(4L, 9L), .Dimnames = list(c('Chile', 'United States', 'Zambia', 'Libya'), c('dfb.1_', 'dfb.pp15', 'dfb.pp75', 'dfb.dpi', 'dfb.ddpi', 'dffit', 'cov.r', 'cook.d', 'hat'))), c('', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '_*', '', '', '', '_*', '_*', '_*', '_*', '_*', '', '', '', '', '', '_*', '', '_*')), NULL); .Internal(paste0(argv[[1]], argv[[2]]))
 [1] "-0.20"   " 0.07"   " 0.16"   " 0.55"   " 0.13"   "-0.07"   "-0.08"
 [8] "-0.48"   " 0.22"   " 0.04"   "-0.34"   "-0.38"   "-0.02"   "-0.23"
[15] " 0.09"   "-0.02"   " 0.12"   "-0.03"   " 0.23"   "-1.02_*" "-0.46"
[22] "-0.25"   " 0.75"   "-1.16_*" " 0.65_*" " 1.66_*" " 0.51_*" " 2.09_*"
[29] " 0.04"   " 0.01"   " 0.10"   " 0.27"   " 0.04"   " 0.33_*" " 0.06"
[36] " 0.53_*"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste03
#argv <- list(list(c('\'1\'', '\'2\'', NA)), ','); .Internal(paste0(argv[[1]], argv[[2]]))
[1] "'1','2',NA"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste05
#argv <- list(list(structure(c('coef.aov', 'extractAIC.aov', 'model.tables.aov', 'print.aov', 'proj.aov', 'se.contrast.aov', 'summary.aov', 'TukeyHSD.aov'), class = 'MethodsFunction', info = structure(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE), from = structure(c(9L, 9L, 9L, 9L, 9L, 9L, 7L, 7L), .Label = c('CheckExEnv', 'package:base', 'package:datasets', 'package:graphics', 'package:grDevices', 'package:methods', 'package:stats', 'package:utils', 'registered S3method'), class = 'factor')), .Names = c('visible', 'from'), row.names = c('coef.aov', 'extractAIC.aov', 'model.tables.aov', 'print.aov', 'proj.aov', 'se.contrast.aov', 'summary.aov', 'TukeyHSD.aov'), class = 'data.frame')), c('*', '*', '*', '*', '*', '*', '', '')), NULL); .Internal(paste0(argv[[1]], argv[[2]]))
[1] "coef.aov*"         "extractAIC.aov*"   "model.tables.aov*"
[4] "print.aov*"        "proj.aov*"         "se.contrast.aov*"
[7] "summary.aov"       "TukeyHSD.aov"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste06
#argv <- list(list(character(0), character(0)), '\n'); .Internal(paste0(argv[[1]], argv[[2]]))
[1] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpaste0.testpaste07
#argv <- list(list(), NULL); .Internal(paste0(argv[[1]], argv[[2]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpathexpand.testpathexpand1
#argv <- list('/tmp/RtmptPgrXI/Pkgs/pkgA'); .Internal(path.expand(argv[[1]]))
[1] "/tmp/RtmptPgrXI/Pkgs/pkgA"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpathexpand.testpathexpand2
#argv <- list(c('/home/lzhao/hg/r-instrumented/tests/compiler.Rcheck', '/home/lzhao/R/x86_64-unknown-linux-gnu-library/3.0')); .Internal(path.expand(argv[[1]]))
[1] "/home/lzhao/hg/r-instrumented/tests/compiler.Rcheck"
[2] "/home/lzhao/R/x86_64-unknown-linux-gnu-library/3.0"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpathexpand.testpathexpand3
#argv <- list(character(0)); .Internal(path.expand(argv[[1]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpathexpand.testpathexpand5
#argv <- structure(list(path = '/tmp/RtmpagC9oa/Pkgs/exNSS4'),     .Names = 'path');do.call('path.expand', argv)
[1] "/tmp/RtmpagC9oa/Pkgs/exNSS4"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmatch.testpmatch1
#argv <- list('kendall', c('pearson', 'kendall', 'spearman'), 0L, TRUE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmatch.testpmatch2
#argv <- list('month', c('secs', 'mins', 'hours', 'days', 'weeks', 'months', 'years', 'DSTdays'), NA_integer_, FALSE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmatch.testpmatch3
#argv <- list(c(NA_character_, NA_character_, NA_character_, NA_character_), 'NA', NA_integer_, TRUE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1 1 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmatch.testpmatch4
#argv <- list('maximum', 'euclidian', NA_integer_, FALSE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmatch.testpmatch5
#argv <- list('fanny.object.', 'fanny.object', 0L, FALSE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmatch.testpmatch6
#argv <- list(c('alpha', 'col', 'border', 'lty', 'lwd'), c('col', 'border', 'alpha', 'size', 'height', 'angle', 'density'), NA_integer_, TRUE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1]  3  1  2 NA NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmatch.testpmatch7
#argv <- list('unique.', 'unique.array', 0L, FALSE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmatch.testpmatch8
#argv <- list(character(0), c('labels', 'col', 'alpha', 'adj', 'cex', 'lineheight', 'font'), NA_integer_, TRUE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax1
#argv <- list(FALSE, 5L, 12); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
[1] 12

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax10
#argv <- list(FALSE, c(1.05, 1.92, 0.36, 4.98, 4.56, 0.69, -5.97, 1.26, 5.58, -0.06, -4.92, -1.38, -0.3, 3.75, 1.11, 0.93, 3.33, 4.95, 0.99, 2.67, -0.75, -2.61, -0.66, 2.13, -6.78, 2.31, -0.15, 0.96, -1.92, 1.17, 0.57, -4.86, 1.11, 0.06, 2.91, -7.86, 0.45, 4.65, -4.23, -7.05, -1.29, 1.71, -1.98, -0.24, 0.06, 0.72, -0.99, -0.09, -3.39, 0.96, 4.65, 6.39, -0.3, -0.96, -2.01, 4.32, 0.12, -3.3, -2.85, -0.57, -2.04, -1.29, -2.52, 2.07, -1.95, 2.13, 0.57, 1.35, 1.35, -3.57, 3.9, 0.42, -1.08, -1.5, -1.41, -3.93, -3.06, 3.51, 4.53, -0.99, -0.03, -1.77, -0.84, -0.54, -3.21, 1.98, -2.13, 5.64, -0.42, -0.57, 2.52, 1.32, 3.99, -0.6, -1.35, 4.38, 3, -3.06, 2.04, 2.52), 0); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
  [1] 1.05 1.92 0.36 4.98 4.56 0.69 0.00 1.26 5.58 0.00 0.00 0.00 0.00 3.75 1.11
 [16] 0.93 3.33 4.95 0.99 2.67 0.00 0.00 0.00 2.13 0.00 2.31 0.00 0.96 0.00 1.17
 [31] 0.57 0.00 1.11 0.06 2.91 0.00 0.45 4.65 0.00 0.00 0.00 1.71 0.00 0.00 0.06
 [46] 0.72 0.00 0.00 0.00 0.96 4.65 6.39 0.00 0.00 0.00 4.32 0.12 0.00 0.00 0.00
 [61] 0.00 0.00 0.00 2.07 0.00 2.13 0.57 1.35 1.35 0.00 3.90 0.42 0.00 0.00 0.00
 [76] 0.00 0.00 3.51 4.53 0.00 0.00 0.00 0.00 0.00 0.00 1.98 0.00 5.64 0.00 0.00
 [91] 2.52 1.32 3.99 0.00 0.00 4.38 3.00 0.00 2.04 2.52

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax11
#argv <- list(FALSE, c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L), 7L, c(7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 6L)); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 7 7 7 7 7 7 7 7 7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax12
#argv <- list(FALSE, 1:7, structure(c(2, 3, 4, 2, 2, 2), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('a', '')))); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
[1] 2 3 4 4 5 6 7
Warning message:
an argument will be fractionally recycled

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax13
#argv <- list(FALSE, cnternal(pmax(argv[[1]], argv[[2]]))
  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax3
#argv <- list(FALSE, c(0L, 1L, 1L, 1L, 2L), 5L, c(6L, 5L, 5L, 5L, 4L)); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 6 5 5 5 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax4
#argv <- list(FALSE, 0, numeric(0)); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax5
#argv <- list(FALSE, structure(c(63.5607991023966, 46.8465846258113, 40.7088275958184, 31.3395189414991, 42.5666751143734, 47.0610532806931, 23.9315410227325, 43.0690616089581, 66.7869292908986, 49.2243580808943, 31.6784834018036, 24.3875466143556, 48.4619434336134, 53.5787701502931, 25.0466211495357, 45.0758464889871, 66.9256619232735, 49.3266089980428, 31.7843035976521, 24.4690118450696, 50.7406402769298, 56.0980619029545, 17.201254072711, 30.956714016252), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24')), 2.22044604925031e-16); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
 [1] 63.56080 46.84658 40.70883 31.33952 42.56668 47.06105 23.93154 43.06906
 [9] 66.78693 49.22436 31.67848 24.38755 48.46194 53.57877 25.04662 45.07585
[17] 66.92566 49.32661 31.78430 24.46901 50.74064 56.09806 17.20125 30.95671

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax6
#argv <- list(FALSE, FALSE, FALSE); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax7
#argv <- list(FALSE, 1L, c(15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L)); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
[1] 15 15 15 15 15 15 15 15 15

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax8
#argv <- list(FALSE, structure(c(0.0193057433072215, 0.00434780301273374, 0.0549750394687487, 0.510714717273168, 0.0482077179041234, 0.349752997299534, 0.15114556457294, 0.614610341225044, 0.270367074042314, 0.376738504472563, 0.00100006670765362, 0.616978737736246, 0.000115089535300671, 0.114479803728228, 0.0345012755277619, 0.520238904129887, 0.0177036726480846, 0.00345369763623826, 0.0372744005491215, 0.245210198359521, 0.0651842100459408, 0.4506670448926, 0.178923774229777, 0.332256206500317, 0.402299202627705, 0.380395198873703, 0.000984316947253816, 0.403063829062269, 0.000174431720286923, 0.138958543973059, 0.0379750520636422, 0.379247258699123), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')), 0); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
 [1] 0.0193057433 0.0043478030 0.0549750395 0.5107147173 0.0482077179
 [6] 0.3497529973 0.1511455646 0.6146103412 0.2703670740 0.3767385045
[11] 0.0010000667 0.6169787377 0.0001150895 0.1144798037 0.0345012755
[16] 0.5202389041 0.0177036726 0.0034536976 0.0372744005 0.2452101984
[21] 0.0651842100 0.4506670449 0.1789237742 0.3322562065 0.4022992026
[26] 0.3803951989 0.0009843169 0.4030638291 0.0001744317 0.1389585440
[31] 0.0379750521 0.3792472587

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmax.testpmax9
#argv <- list(FALSE, structure(c(35.2592591597479, 59.4999999843455, 12.4507044164935, 2.53543312099158, 10.3703703404756, 42.0000005728299, 8.14084538858294, 34.04724471918, 7.77778142338517, 26.9999999889474, 6.70422536805755, 3.62204828940961, 2.59259259558406, 14.4999999939529, 6.70422536805755, 5.79527724426002, 32.7407408614199, 59.5000000376209, 13.54929592464, 4.46456690511876, 9.62962966454155, 42.0000006104361, 8.85915523787816, 59.9527554977598, 7.22222565443263, 27.0000000131229, 7.29577463400041, 6.37795443616981, 2.40740742585304, 14.500000006936, 7.29577463400041, 10.2047270647755), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')), 2.22044604925031e-16); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))
 [1] 35.259259 59.500000 12.450704  2.535433 10.370370 42.000001  8.140845
 [8] 34.047245  7.777781 27.000000  6.704225  3.622048  2.592593 14.500000
[15]  6.704225  5.795277 32.740741 59.500000 13.549296  4.464567  9.629630
[22] 42.000001  8.859155 59.952755  7.222226 27.000000  7.295775  6.377954
[29]  2.407407 14.500000  7.295775 10.204727

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin1
#argv <- list(FALSE, c(0, 0.25, 0.5, 0.75, 1), 1); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))
[1] 0.00 0.25 0.50 0.75 1.00

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin10
#argv <- list(FALSE, 1, 0.341867139159); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))
[1] 0.3418671

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin3
#argv <- list(FALSE, c(19.7787405591752, 12504507.4953993, 12504507.4953993, 5.96190157728191e+41), 1); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))
[1] 1 1 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin4
#argv <- list(FALSE, structure(c(2, 3, 4, 2, 2, 2), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('a', ''))), 1:7); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))
[1] 1 2 3 2 2 2 2
Warning message:
an argument will be fractionally recycled

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin5
#argv <- list(FALSE, structure(c(-2.30560410637911, -1.56788329848973, -0.885216282233891, -0.246592299284877, 0.350190802022645, 0.913941628350052, 1.44466017969734, 1.94895291106052), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')), 700); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))
[1] -2.3056041 -1.5678833 -0.8852163 -0.2465923  0.3501908  0.9139416  1.4446602
[8]  1.9489529

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin6
#argv <- list(FALSE, 1, structure(numeric(0), .Dim = c(4L, 0L))); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin7
#argv <- list(FALSE, FALSE, FALSE); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin8
#argv <- list(FALSE, FALSE); .Internal(pmin(argv[[1]], argv[[2]]))
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinpmin.testpmin9
#argv <- list(FALSE, 48L, 19L); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))
[1] 19

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinprint.testprint1
#argv <- structure(list(x = 'The leverage of the points is'),     .Names = 'x');do.call('print', argv)
[1] "The leverage of the points is"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinprint.testprint4
#argv <- structure(list(x = c(1.12029789965078, -0.718988837588323,     -0.799820795962862, 1.36325504609423, -0.877647212109208,     -1.46608694151033, -0.277315770575131, 0.49759016736751,     -1.49309981133256, 0.147586557048694, 1.32490895489118, -0.993328430480091,     -0.809428793397133, 1.39969712961021, 0.43065679489178, 0.19581824909626,     -0.0622842939729247, 0.57841339234696, 2.31951400192491,     2.93765523729633)), .Names = 'x');do.call('print', argv)
 [1]  1.12029790 -0.71898884 -0.79982080  1.36325505 -0.87764721 -1.46608694
 [7] -0.27731577  0.49759017 -1.49309981  0.14758656  1.32490895 -0.99332843
[13] -0.80942879  1.39969713  0.43065679  0.19581825 -0.06228429  0.57841339
[19]  2.31951400  2.93765524

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinprod.testprod1
#argv <- list(9L);prod(argv[[1]]);
[1] 9

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinprod.testprod3
#argv <- list(c(4, 2.5, 1.3, -1.20673076923077));prod(argv[[1]]);
[1] -15.6875

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinprod.testprod4
#argv <- list(structure(c(4L, 4L, 2L), .Names = c('Hair', 'Eye', 'Sex')));prod(argv[[1]]);
[1] 32

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinprod.testprod6
#argv <- list(structure(c(2, 0, 1, 2), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))));prod(argv[[1]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinprod.testprod7
#argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))));prod(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort1
#argv <- list(3L, FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort10
#argv <- list(c(1, 13, 26, 38, 51, 14, 39), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
[1]  1 13 14 26 38 39 51

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort11
#argv <- list(c(-Inf, -Inf, -Inf, -Inf, -Inf, 0, 1, 2, 3, 4, Inf, Inf, Inf, Inf), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
 [1] -Inf -Inf -Inf -Inf -Inf    0    1    2    3    4  Inf  Inf  Inf  Inf

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort13
#argv <- list(c(63, 187, 64, 188), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
[1]  63  64 187 188

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort2
#argv <- list(c(306, 455, 1010, 210, 883, 1022, 218, 166, 170, 567, 144, 613, 707, 88, 301, 624, 371, 394, 574, 118, 390, 12, 26, 533, 53, 814, 93, 460, 583, 303, 519, 643, 189, 246, 689, 65, 132, 223, 175, 163, 428, 230, 840, 11, 176, 791, 95, 196, 806, 284, 147, 655, 239, 30, 179, 310, 477, 364, 107, 177, 156, 429, 15, 181, 283, 13, 212, 524, 288, 363, 442, 54, 558, 207, 92, 60, 202, 353, 267, 387, 457, 337, 404, 222, 458, 31, 229, 444, 329, 291, 292, 142, 413, 320, 285, 197, 180, 300, 259, 110, 286, 270, 81, 131, 225, 269, 279, 135, 59, 105, 237, 221, 185, 183, 116, 188, 191, 174), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
  [1]   11   12   13   15   26   30   31   53   54   59   60   65   81   88   92
 [16]   93   95  105  107  110  116  118  131  132  135  142  144  147  156  163
 [31]  166  170  174  175  176  177  179  180  181  183  185  188  189  191  196
 [46]  197  202  207  210  212  218  221  222  223  225  229  230  237  239  246
 [61]  259  267  269  270  279  283  284  285  286  288  291  292  300  301  303
 [76]  306  310  320  329  337  353  363  364  371  387  390  394  404  413  428
 [91]  429  442  444  455  457  458  460  477  519  524  533  558  567  574  583
[106]  613  624  643  655  689  707  791  806  814  840  883 1010 1022

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort3
#argv <- list(numeric(0), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort6
#argv <- list(c(1, 2, 4, 6, 8, 3, 5, 7), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
[1] 1 2 3 4 5 6 7 8

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort7
#argv <- list(c(1, 173, 346, 518, 691, 174, 519), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
[1]   1 173 174 346 518 519 691

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort8
#argv <- list(c(1, 42, 83, 124, 166, 43, 84, 125), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
[1]   1  42  43  83  84 124 125 166

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinqsort.testqsort9
#argv <- list(c(-Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 1, 2, 3, 4, 5, Inf, Inf, Inf, Inf, Inf), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))
 [1] -Inf -Inf -Inf -Inf -Inf -Inf    0    1    2    3    4    5  Inf  Inf  Inf
[16]  Inf  Inf

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinraw.testraw1
#argv <- structure(list(length = 0), .Names = 'length');do.call('raw', argv)
raw(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep21
#argv <- structure(list(1:5, each = 2), .Names = c('', 'each'));do.call('rep', argv)
 [1] 1 1 2 2 3 3 4 4 5 5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep23
#argv <- list(structure(c(11.3164921459501, 9.56444166646261,     23.868524352596, 8.592077957758, 0.187318691429722, -11.3963997363604,     -6.26079624982537, 6.05560822307356, -6.03903226622761, 4.13503361306269),     .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')),     15);do.call('rep', argv)
          a           b           c           d           e           f
 11.3164921   9.5644417  23.8685244   8.5920780   0.1873187 -11.3963997
          g           h           i           j           a           b
 -6.2607962   6.0556082  -6.0390323   4.1350336  11.3164921   9.5644417
          c           d           e           f           g           h
 23.8685244   8.5920780   0.1873187 -11.3963997  -6.2607962   6.0556082
          i           j           a           b           c           d
 -6.0390323   4.1350336  11.3164921   9.5644417  23.8685244   8.5920780
          e           f           g           h           i           j
  0.1873187 -11.3963997  -6.2607962   6.0556082  -6.0390323   4.1350336
          a           b           c           d           e           f
 11.3164921   9.5644417  23.8685244   8.5920780   0.1873187 -11.3963997
          g           h           i           j           a           b
 -6.2607962   6.0556082  -6.0390323   4.1350336  11.3164921   9.5644417
          c           d           e           f           g           h
 23.8685244   8.5920780   0.1873187 -11.3963997  -6.2607962   6.0556082
          i           j           a           b           c           d
 -6.0390323   4.1350336  11.3164921   9.5644417  23.8685244   8.5920780
          e           f           g           h           i           j
  0.1873187 -11.3963997  -6.2607962   6.0556082  -6.0390323   4.1350336
          a           b           c           d           e           f
 11.3164921   9.5644417  23.8685244   8.5920780   0.1873187 -11.3963997
          g           h           i           j           a           b
 -6.2607962   6.0556082  -6.0390323   4.1350336  11.3164921   9.5644417
          c           d           e           f           g           h
 23.8685244   8.5920780   0.1873187 -11.3963997  -6.2607962   6.0556082
          i           j           a           b           c           d
 -6.0390323   4.1350336  11.3164921   9.5644417  23.8685244   8.5920780
          e           f           g           h           i           j
  0.1873187 -11.3963997  -6.2607962   6.0556082  -6.0390323   4.1350336
          a           b           c           d           e           f
 11.3164921   9.5644417  23.8685244   8.5920780   0.1873187 -11.3963997
          g           h           i           j           a           b
 -6.2607962   6.0556082  -6.0390323   4.1350336  11.3164921   9.5644417
          c           d           e           f           g           h
 23.8685244   8.5920780   0.1873187 -11.3963997  -6.2607962   6.0556082
          i           j           a           b           c           d
 -6.0390323   4.1350336  11.3164921   9.5644417  23.8685244   8.5920780
          e           f           g           h           i           j
  0.1873187 -11.3963997  -6.2607962   6.0556082  -6.0390323   4.1350336
          a           b           c           d           e           f
 11.3164921   9.5644417  23.8685244   8.5920780   0.1873187 -11.3963997
          g           h           i           j           a           b
 -6.2607962   6.0556082  -6.0390323   4.1350336  11.3164921   9.5644417
          c           d           e           f           g           h
 23.8685244   8.5920780   0.1873187 -11.3963997  -6.2607962   6.0556082
          i           j           a           b           c           d
 -6.0390323   4.1350336  11.3164921   9.5644417  23.8685244   8.5920780
          e           f           g           h           i           j
  0.1873187 -11.3963997  -6.2607962   6.0556082  -6.0390323   4.1350336

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep24
#argv <- list(0, 2000);do.call('rep', argv)
   [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [149] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [186] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [223] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [260] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [297] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [334] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [371] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [408] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [445] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [482] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [519] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [556] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [593] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [630] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [667] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [704] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [741] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [778] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [815] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [852] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [889] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [926] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [963] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1000] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1037] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1074] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1111] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1148] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1185] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1222] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1259] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1296] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1333] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1370] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1407] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1444] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1481] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1518] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1555] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1592] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1629] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1666] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1703] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1740] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1777] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1814] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1851] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1888] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1925] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1962] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[1999] 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep25
#argv <- list(0 - (0+2i), 13);do.call('rep', argv)
 [1] 0-2i 0-2i 0-2i 0-2i 0-2i 0-2i 0-2i 0-2i 0-2i 0-2i 0-2i 0-2i 0-2i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep26
#argv <- list(c(1, 2, 3, 4, 7), c(3, 4, 5, 4, 2));do.call('rep', argv)
 [1] 1 1 1 2 2 2 2 3 3 3 3 3 4 4 4 4 7 7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep27
#argv <- list(1:14, c(3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4));do.call('rep', argv)
 [1]  1  1  1  2  2  2  2  3  3  3  3  4  4  4  4  5  5  5  5  6  6  6  6  7  7
[26]  7  7  8  8  8  8  9  9  9  9 10 10 10 10 11 11 11 11 12 12 12 12 13 13 13
[51] 13 14 14 14 14

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep28
#argv <- structure(list(c(2, 2, -1, -1, -1, -1, 0, 0), each = 48),     .Names = c('', 'each'));do.call('rep', argv)
  [1]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [26]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [51]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [76]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2 -1 -1 -1 -1
[101] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
[126] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
[151] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
[176] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
[201] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
[226] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
[251] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
[276] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0  0  0  0  0  0  0  0  0  0  0
[301]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
[326]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
[351]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
[376]  0  0  0  0  0  0  0  0  0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep29
#argv <- list(c('A', 'B'), c(48L, 44L));do.call('rep', argv)
 [1] "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A"
[20] "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "A"
[39] "A" "A" "A" "A" "A" "A" "A" "A" "A" "A" "B" "B" "B" "B" "B" "B" "B" "B" "B"
[58] "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B"
[77] "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B" "B"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrep.testrep30
#argv <- structure(list(c('a', 'b', 'c'), each = 3), .Names = c('',     'each'));do.call('rep', argv)
[1] "a" "a" "a" "b" "b" "b" "c" "c" "c"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrev.testrev1
#argv <- structure(list(x = c('#FF0000FF', '#FFFF00FF', '#00FF00FF')),     .Names = 'x');do.call('rev', argv)
[1] "#00FF00FF" "#FFFF00FF" "#FF0000FF"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinround.testround1
#argv <- list(3.98778192287757, 3);do.call('round', argv)
[1] 3.988

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinround.testround2
#argv <- structure(list(c(37.9490090935718, 34.1981894015095),     digits = 3), .Names = c('', 'digits'));do.call('round', argv)
[1] 37.949 34.198

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowMeans.testrowMeans1
#argv <- list(structure(c(3, 3, NA, 3, 3, 3, 3, 3, 4, 3, NA, NA, 2, 3, 4, 5), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))), 8, 2, TRUE); .Internal(rowMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 3.5 3.0 NaN 3.0 2.5 3.0 3.5 4.0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowMeans.testrowMeans3
#argv <- list(structure(c(2, 2, NA, 2, 2, 2, 2, 2, -5, -5, NA, NA, -5, -5, -5, -5), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))), 8, 2, TRUE); .Internal(rowMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] -1.5 -1.5  NaN  2.0 -1.5 -1.5 -1.5 -1.5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowSums.testrowSums1
#argv <- list(structure(c(1L, 0L, 0L, 0L, 2L, 0L, 0L, 0L, 3L), .Dim = c(3L, 3L)), 3, 3, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1 2 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowSums.testrowSums2
#argv <- list(structure(c(0.999999999999996, -5.93240323105314e-31, -1.22690013807617e-30, -2.66771163434776e-30, 6.26446113912225e-17, -5.95448228496283e-17, -3.41105197331973e-17, 2.9023639112071e-17, -1.98544126594555e-18, 5.0222594521389e-17, -2.11849144310153e-17, 1.78452635853509e-17, -6.4482597529713e-30, -5.93240323105314e-31, 1, -2.70177878542148e-31, 4.10223078154481e-30, -7.29760565072095e-17, 4.21528303119361e-16, 1.69346505683726e-16, -8.46179388945247e-17, -2.12579366024309e-17, -1.08608258515243e-16, -1.91006916081825e-17, -1.09544412010741e-16, 1.52841800386571e-30, -1.22690013807617e-30, -2.70177878542148e-31, 1, 5.63751592936848e-30, 4.44597451723816e-17, -1.70262938021701e-16, -4.55196812407612e-17, 1.77744051006272e-17, -5.96596846288922e-17, 9.58999363873063e-17, -5.74900426053008e-17, 1.14815157965335e-16, -3.6669706141133e-30, -2.66771163434776e-30, 4.10223078154481e-30, 5.63751592936848e-30, 1, -5.9187048613625e-18, -1.70068399080916e-16, -6.90189597604163e-18, -6.36439216662415e-19, -4.18657854049523e-19, 3.0354538418548e-17, -7.42749951284567e-18, -8.90495022022045e-18, 1.55306990715387e-30, 6.26446113912225e-17, -7.29760565072095e-17, 4.44597451723816e-17, -5.9187048613625e-18, 0.55411820856073, -0.00247216583270833, -0.0121967562426746, -0.0136834443420207, 0.00612437416936414, -0.00919613834986896, -0.017907465564047, 0.0210800496836485, 0, -5.95448228496283e-17, 4.21528303119361e-16, -1.70262938021701e-16, -1.70068399080916e-16, -0.00247216583270833, 0.0915588872840349, 0.00402469784261988, 0.0225004116141538, 0.00428277377776577, 0.0217395090957974, 0.00506691575079725, -0.155787004553276, -1.57863385792422e-15, -3.41105197331973e-17, 1.69346505683726e-16, -4.55196812407612e-17, -6.90189597604163e-18, -0.0121967562426746, 0.00402469784261988, 0.00831687169973403, 0.00905869237132552, 0.00121203034126938, 0.00939616211925082, 0.00270063068023987, -0.0350427136160765, 1.66845523703974e-15, 2.9023639112071e-17, -8.46179388945247e-17, 1.77744051006272e-17, -6.36439216662415e-19, -0.0136834443420207, 0.0225004116141538, 0.00905869237132552, 0.0237646346509256, 0.0107094040391417, 0.0632843775518589, 0.0165995956409034, -0.317638195769953, 3.75582594532732e-16, -1.98544126594555e-18, -2.12579366024309e-17, -5.96596846288922e-17, -4.18657854049523e-19, 0.00612437416936414, 0.00428277377776577, 0.00121203034126938, 0.0107094040391417, 0.000250414165674235, 0.0118733901248423, 0.0032448838873885, -0.0719898325072222, -4.32029144045995e-15, 5.0222594521389e-17, -1.08608258515243e-16, 9.58999363873063e-17, 3.0354538418548e-17, -0.00919613834986896, 0.0217395090957974, 0.00939616211925082, 0.0632843775518589, 0.0118733901248423, 0.0578950164197554, 0.0182925914744869, -0.367565522079614, -1.23944977824402e-15, -2.11849144310153e-17, -1.91006916081825e-17, -5.74900426053008e-17, -7.42749951284567e-18, -0.017907465564047, 0.00506691575079725, 0.00270063068023987, 0.0165995956409034, 0.0032448838873885, 0.0182925914744869, 0.00349919192597366, -0.0788502030216034, 0, 1.78452635853509e-17, -1.09544412010741e-16, 1.14815157965335e-16, -8.90495022022045e-18, 0.0210800496836485, -0.155787004553276, -0.0350427136160765, -0.317638195769953, -0.0719898325072222, -0.367565522079614, -0.0788502030216034, 2.49598569418347, -8.69223914290117e-16, -6.4482597529713e-30, 1.52841800386571e-30, -3.6669706141133e-30, 1.55306990715387e-30, 0, -1.57863385792422e-15, 1.66845523703974e-15, 3.75582594532732e-16, -4.32029144045995e-15, -1.23944977824402e-15, 0, -8.69223914290117e-16, 1), .Dim = c(13L, 13L), .Dimnames = list(c('(Intercept)', 'fac2', 'fac3', 'fac4', '', '', '', '', '', '', '', '', ''), NULL)), 13, 13, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1]  1.000000000  1.000000000  1.000000000  1.000000000  0.525866662
 [6] -0.009085975 -0.012530385 -0.185404524 -0.034292562 -0.194280614
[11] -0.047353859  1.490192272  1.000000000

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowSums.testrowSums3
#argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, TRUE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] 3 2 1 1 3 2 1 1 0 0 0 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowSums.testrowSums4
#argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, NA, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] NA  1  0  0 NA  2  1  1  0  0  0  0  0  0  0  0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowSums.testrowSums5
#argv <- list(structure(numeric(0), .Dim = c(0L, 3L), .Dimnames = list(NULL, c('wt.loss', 'age', 'I(age)'))), 0, 3, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowSums.testrowSums6
#argv <- list(structure(c(1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), .Dim = c(61L, 4L), .Dimnames = list(c('190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250'), NULL)), 61, 4, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrowSums.testrowSums7
#argv <- list(structure(cim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, TRUE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] 1 1 0 0 2 2 1 1 0 0 0 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrownames.testrownames1
#argv <- structure(list(x = structure(list(x = 1:3, y = c(6.28318530717959,     3.14159265358979, 0)), .Names = c('x', 'y'), row.names = c(NA,     -3L), class = 'data.frame')), .Names = 'x');do.call('row.names', argv)
[1] "1" "2" "3"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrownames.testrownames2
#argv <- structure(list(x = structure(logical(0), .Dim = c(4L,     0L)), do.NULL = FALSE), .Names = c('x', 'do.NULL'));do.call('rownames', argv)
[1] "row1" "row2" "row3" "row4"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinrownamesdataframe.testrownamesdataframe1
#argv <- structure(list(x = structure(list(x = 3:4), .Names = 'x',     row.names = c(NA, -2L), class = 'data.frame')), .Names = 'x');do.call('row.names.data.frame', argv)
[1] "1" "2"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsQuote.testsQuote1
#argv <- structure(list(x = character(0)), .Names = 'x');do.call('sQuote', argv)
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsample.testsample1
#argv <- list(0L, 0L, FALSE, NULL); .Internal(sample(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsample.testsample2
#argv <- list(1L, 1L, FALSE, NULL); .Internal(sample(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsample.testsample3
#argv <- list(2L, 499, TRUE, c(0, 0.525)); .Internal(sample(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[112] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[149] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[186] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[371] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[408] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[445] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[482] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsep.testsep1
#argv <- list(1, 1);`/`(argv[[1]],argv[[2]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsep.testsep12
#argv <- list(1, c(6.25, 36, 36, 56.25, 64, 64, 256, 36, 25, 36, 784, 25, 90.25, 36, 20.25, 100, 196, 9, 20.25, 30.25, 9, 12.25, 36, 4, 9, 16, 36, 25, 42.25, 25, 100, 36, 324, 20.25, 400));`/`(argv[[1]],argv[[2]]);
 [1] 0.160000000 0.027777778 0.027777778 0.017777778 0.015625000 0.015625000
 [7] 0.003906250 0.027777778 0.040000000 0.027777778 0.001275510 0.040000000
[13] 0.011080332 0.027777778 0.049382716 0.010000000 0.005102041 0.111111111
[19] 0.049382716 0.033057851 0.111111111 0.081632653 0.027777778 0.250000000
[25] 0.111111111 0.062500000 0.027777778 0.040000000 0.023668639 0.040000000
[31] 0.010000000 0.027777778 0.003086420 0.049382716 0.002500000

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsep.testsep19
#argv <- list(0.5, c(576.899196412178, 48.2726847449981, 4.88037826224117, 1.31852084431627, 1.02614578306738));`/`(argv[[1]],argv[[2]]);
[1] 0.0008667025 0.0103578246 0.1024510751 0.3792128142 0.4872602005

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsep.testsep27
#argv <- list(998.602763134667, 78L);`/`(argv[[1]],argv[[2]]);
[1] 12.8026

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsep.testsep7
#argv <- list(1e+05, 3);`/`(argv[[1]],argv[[2]]);
[1] 33333.33

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq1
#argv <- list(c('y', 'A', 'U', 'V'));seq_along(argv[[1]]);
[1] 1 2 3 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq10
#argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, NA, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, NA, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52), .Dim = c(98L, 2L), .Dimnames = list(NULL, c('intercept', 'trend'))));seq_along(argv[[1]]);
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108
[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126
[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144
[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq11
#argv <- list(list(structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166, 171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194, 196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201, 204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 229, 242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432), .Tsp = c(1949, 1960.91666666667, 12), class = 'ts'), structure(c(419.147602949539, 391.474665943444, 435.919286153217, 443.935203034261, 455.023399013445, 517.28707821144, 589.71337277669, 582.999919227301, 484.573388713116, 428.878182738437, 368.526582998452, 406.728709993152, 415.660571294428, 388.716535970235, 433.006017658935, 440.885684396326, 451.651900136866, 513.051252429496, 584.327164324967, 577.055407135124, 479.076505013118, 423.494870357491, 363.43932958967, 400.592058645117), .Tsp = c(1961, 1962.91666666667, 12), class = 'ts'), structure(c(484.030717075782, 462.954959541421, 526.353307750503, 546.165638262644, 569.502470928676, 657.838443307596, 761.241730163307, 763.280655335144, 642.989004951864, 576.423799567567, 501.429012064338, 559.981301364233, 591.700754553767, 565.210772316967, 642.377841008703, 666.682421047093, 695.547100430962, 804.065022775202, 931.340589597203, 934.837830059897, 788.422986194072, 707.666678543854, 616.37838266375, 689.250456425465), .Tsp = c(1961, 1962.91666666667, 12), class = 'ts')));seq_along(argv[[1]]);
[1] 1 2 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq12
#argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i));seq_along(argv[[1]]);
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq14
#argv <- list(structure(list(g = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L), .Label = c('1', '2', '3', '4'), class = 'factor')), .Names = 'g'));seq_along(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq15
#argv <- list(structure(list(20), row.names = c(NA, -1L)));seq_along(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq17
#argv <- list(structure(list(Topic = c('myTst-package', 'foo-class', 'myTst', 'show,foo-method', 'show,foo-method', 'show-methods'), File = c('myTst-package', 'foo-class', 'myTst-package', 'foo-class', 'show-methods', 'show-methods')), .Names = c('Topic', 'File'), row.names = c(3L, 1L, 4L, 2L, 6L, 5L)));seq_along(argv[[1]]);
[1] 1 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq18
#argv <- list(structure(list(structure(' A Simple Plot and Legend Demo ', Rd_tag = 'TEXT')), Rd_tag = 'Rd', class = 'Rd'));seq_along(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq19
#argv <- list(structure(list(Topic = character(0), File = character(0), Title = character(0), Internal = character(0)), .Names = c('Topic', 'File', 'Title', 'Internal'), row.names = integer(0), class = 'data.frame'));seq_along(argv[[1]]);
[1] 1 2 3 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq2
#argv <- list(structure(c(1, 2, 3, 0, 10, NA), .Dim = c(3L, 2L)));seq_along(argv[[1]]);
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq20
#argv <- list(structure(c(2.21843970753346, 1.80732678656753, -1.09399175987006, 0.585986462327552, -5.68458926982395, 1.23352238598674, 0.457950438444482, 2.51599006679516, -2.28780372840319, 5.53596062467695, 2.17890565095959, -1.59611751350773, -2.9672978602151, 0.745175851232308, 1.93388282434376, -3.03559459078455, 2.19500990255906, 0.0725275773318347, -0.75336064096447, -1.15505962102859, -2.84782886882524, -1.41070341448251, -0.540252474026749, 4.87719739781058, 0.890715639552621, -0.968642103099399, 1.73177156113283, -0.993218102309356, -0.656454198323984, -1.5299506933835, -0.298424468882268, 6.51011264717937, 2.68326774833378, 1.99295445531679, -0.214079422583434, 6.73505308264589, -4.54579214489424, -2.3991834444486, -1.71479569181251, -6.47293095421849, -1.67116930820449, -11.5853328029437, -2.48588878138021, -0.888857646918452, 8.06807102468956, -0.216046323028316, 6.24682938323398, -1.74761908105831, 2.53082303181417, 2.31410662801887, 2.97453294161523, -2.88723068649699, -1.04144266580674, -0.835536300630093, -6.10229135345437, -4.37605802846523, -1.94289029309402e-16, 5.96619037131792, -1.1474434665393, 3.78819830631063, -3.01580771910632, -0.656454198323984, 1.50824785799851, -2.06401783962239, -3.02346226775125, 0.407243897855763, -3.96478352340807, -2.12718621336067, -0.78924288871239, -3.03559459078455, 0.457950438444496, -0.797900839851943, -3.38233849466459, 1.97815029009903, 0.745175851232309, -1.09645503136389, 0.341748714147263, 7.32472922782987, -1.33672649241008, 1.51931399477032, 0.00590129163826772, -4.09533092706814, 0.195481697042187, -2.7736762657602, -3.48737543915568, 0.536312040203338, 0.775871729180551, 4.37979177946206, 1.30271070089245, 4.2132287611068, 7.33457656622414, 3.28311350719274, -1.30271070089245), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')));seq_along(argv[[1]]);
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
[51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
[76] 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq21
#argv <- list(structure(list(surname = structure(integer(0), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(integer(0), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(integer(0), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = integer(0), class = 'data.frame'));seq_along(argv[[1]]);
[1] 1 2 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq22
#argv <- list(structure(list(A = 0:10, B = 10:20, `NA` = 20:30), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame'));seq_along(argv[[1]]);
[1] 1 2 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq23
#argv <- list(c(TRUE, TRUE, TRUE));seq_along(argv[[1]]);
[1] 1 2 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq24
#argv <- list(structure(c(3, 8), .Dim = 2L, .Dimnames = structure(list(g = c('1', '2')), .Names = 'g'), call = quote(by.data.frame(data = X, INDICES = g, FUN = colMeans)), class = 'by'));seq_along(argv[[1]]);
[1] 1 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq25
#argv <- list(structure(list(.Data = 'numeric'), .Names = '.Data'));seq_along(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq29
#argv <- structure(list(0, 38431.66015625, by = 1000), .Names = c('',     '', 'by'));do.call('seq', argv)
 [1]     0  1000  2000  3000  4000  5000  6000  7000  8000  9000 10000 11000
[13] 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000
[25] 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000
[37] 36000 37000 38000

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq30
#argv <- structure(list(18000, 28000, length = 50L), .Names = c('',     '', 'length'));do.call('seq', argv)
 [1] 18000.00 18204.08 18408.16 18612.24 18816.33 19020.41 19224.49 19428.57
 [9] 19632.65 19836.73 20040.82 20244.90 20448.98 20653.06 20857.14 21061.22
[17] 21265.31 21469.39 21673.47 21877.55 22081.63 22285.71 22489.80 22693.88
[25] 22897.96 23102.04 23306.12 23510.20 23714.29 23918.37 24122.45 24326.53
[33] 24530.61 24734.69 24938.78 25142.86 25346.94 25551.02 25755.10 25959.18
[41] 26163.27 26367.35 26571.43 26775.51 26979.59 27183.67 27387.76 27591.84
[49] 27795.92 28000.00

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq7
#argv <- list(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));seq_along(argv[[1]]);
 [1]  1  2  3  4  5  6  7  8  9 10 11

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq8
#argv <- list(structure(list(levels = c('1', '2', NA), class = 'factor'), .Names = c('levels', 'class')));seq_along(argv[[1]]);
[1] 1 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseq.testseq9
#argv <- list(list(c(1+1i, 2+1.4142135623731i, 3+1.73205080756888i, 4+2i, 5+2.23606797749979i, 6+2.44948974278318i, 7+2.64575131106459i, 8+2.82842712474619i, 9+3i, 10+3.1622776601684i)));seq_along(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseqint.testseqint10
#argv <- list(from = 0, to = structure(-1, .Names = 'c0'));seq.int(argv[[1]],argv[[2]]);
[1]  0 -1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseqint.testseqint13
#argv <- list(102L, 112L, 1L);seq.int(argv[[1]],argv[[2]],argv[[3]]);
 [1] 102 103 104 105 106 107 108 109 110 111 112

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseqint.testseqint19
#argv <- list(0, length.out = 3L);seq.int(argv[[1]],argv[[2]]);
[1] 0 1 2 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinseqint.testseqint22
#argv <- list(4, 4L);seq.int(argv[[1]],argv[[2]]);
[1] 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsetdiff.testsetdiff1
#argv <- structure(list(x = c('bibtex', 'tex'), y = '.svn'), .Names = c('x',     'y'));do.call('setdiff', argv)
[1] "bibtex" "tex"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsetseed.testsetseed5
#argv <- list(1000, 1L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsetseed.testsetseed6
#argv <- list(0, NULL, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsetseed.testsetseed8
#argv <- list(NULL, NULL, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames1
#argv <- list(structure(list(c(8.44399377410362, 28.4640218366572, 12.2441566485997)), row.names = c(NA, -3L), class = 'data.frame'), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] -3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames11
#argv <- list(structure(list(age = c(40, 60, 80)), .Names = 'age', row.names = c(NA, -3L), class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] NA -3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames12
#argv <- list(structure(list(surname = structure(integer(0), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(integer(0), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(integer(0), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = integer(0), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames13
#argv <- list(structure(list(age = 1:65), .Names = 'age'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
NULL

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames14
#argv <- list(structure(list(variog = c(0.000474498531874882, 0.00702969158809408, 0.00702969158809408, 0.00398874346479977, 0.000383788683835002, 1.20172224431796e-06, 1.20172224431796e-06, 0.122905372955376, 0.378939119261529, 0.00604112083775904, 0.0365586576304611, 2.52242766079251e-05, 0.100345142776916, 0.00940165099100291, 0.149441544291522, 0.0295722090612792), dist = c(36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36)), .Names = c('variog', 'dist'), row.names = c('2.16', '3.16', '4.16', '1.16', '8.16', '5.16', '6.16', '7.16', '11.16', '9.16', '10.16', '12.16', '13.16', '15.16', '14.16', '16.16'), class = c('Variogram', 'data.frame')), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 16

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames15
#argv <- list(structure(list(age = c(-1, -0.959071428571429, -0.918142857142857, -0.877214285714286, -0.836285714285714, -0.795357142857143, -0.754428571428571, -0.7135, -0.672571428571429, -0.631642857142857, -0.590714285714286, -0.549785714285714, -0.508857142857143, -0.467928571428571, -0.427, -0.386071428571429, -0.345142857142857, -0.304214285714286, -0.263285714285714, -0.222357142857143, -0.181428571428571, -0.1405, -0.0995714285714285, -0.0586428571428571, -0.0177142857142856, 0.0232142857142859, 0.0641428571428573, 0.105071428571429, 0.146, 0.186928571428572, 0.227857142857143, 0.268785714285714, 0.309714285714286, 0.350642857142857, 0.391571428571429, 0.4325, 0.473428571428572, 0.514357142857143, 0.555285714285714, 0.596214285714286, 0.637142857142857, 0.678071428571429, 0.719, 0.759928571428572, 0.800857142857143, 0.841785714285714, 0.882714285714286, 0.923642857142857, 0.964571428571429, 1.0055), Subject = structure(c(25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L), .Label = c('10', '26', '25', '9', '2', '6', '7', '17', '16', '15', '8', '20', '1', '18', '5', '23', '11', '21', '3', '24', '22', '12', '13', '14', '19', '4'), class = 'factor')), .Names = c('age', 'Subject'), out.attrs = structure(list(dim = structure(c(50L, 26L), .Names = c('age', 'Subject')), dimnames = structure(list(    age = c('age=-1.00000000', 'age=-0.95907143', 'age=-0.91814286', 'age=-0.87721429', 'age=-0.83628571', 'age=-0.79535714', 'age=-0.75442857', 'age=-0.71350000', 'age=-0.67257143', 'age=-0.63164286', 'age=-0.59071429', 'age=-0.54978571', 'age=-0.50885714', 'age=-0.46792857', 'age=-0.42700000', 'age=-0.38607143', 'age=-0.34514286', 'age=-0.30421429', 'age=-0.26328571', 'age=-0.22235714', 'age=-0.18142857', 'age=-0.14050000', 'age=-0.09957143', 'age=-0.05864286', 'age=-0.01771429', 'age= 0.02321429',     'age= 0.06414286', 'age= 0.10507143', 'age= 0.14600000', 'age= 0.18692857', 'age= 0.22785714', 'age= 0.26878571', 'age= 0.30971429', 'age= 0.35064286', 'age= 0.39157143', 'age= 0.43250000', 'age= 0.47342857', 'age= 0.51435714', 'age= 0.55528571', 'age= 0.59621429', 'age= 0.63714286', 'age= 0.67807143', 'age= 0.71900000', 'age= 0.75992857', 'age= 0.80085714', 'age= 0.84178571', 'age= 0.88271429', 'age= 0.92364286', 'age= 0.96457143', 'age= 1.00550000'), Subject = c('Subject=10', 'Subject=26',     'Subject=25', 'Subject=9', 'Subject=2', 'Subject=6', 'Subject=7', 'Subject=17', 'Subject=16', 'Subject=15', 'Subject=8', 'Subject=20', 'Subject=1', 'Subject=18', 'Subject=5', 'Subject=23', 'Subject=11', 'Subject=21', 'Subject=3', 'Subject=24', 'Subject=22', 'Subject=12', 'Subject=13', 'Subject=14', 'Subject=19', 'Subject=4')), .Names = c('age', 'Subject'))), .Names = c('dim', 'dimnames')), row.names = 1201:1250, class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 50

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames16
#argv <- list(structure(list(variog = structure(c('0.007239522', '0.014584634', '0.014207936', '0.018442267', '0.011128505', '0.019910082', '0.027072311', '0.034140379', '0.028320657', '0.037525507'), class = 'AsIs'), dist = structure(c(' 1', ' 6', ' 7', ' 8', '13', '14', '15', '20', '21', '22'), class = 'AsIs'), n.pairs = structure(c(' 16', ' 16', '144', ' 16', ' 16', '128', ' 16', ' 16', '112', ' 16'), .Dim = 10L, .Dimnames = structure(list(c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22')), .Names = ''))), .Names = c('variog', 'dist', 'n.pairs'), row.names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 10

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames17
#argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
 [1] 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961
[16] 1962

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames18
#argv <- list(structure(list(surname = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia'), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'no', 'yes', 'no'), class = 'AsIs'), title = structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...'), class = 'AsIs'), other.author = structure(c(NA, NA, NA, NA, NA, 'Ripley'), class = 'AsIs')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c('1', '2', '3', '4', '5', '6'), class = 'data.frame'), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 6

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames19
#argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor', contrasts = 'contr.treatment'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor', contrasts = 'contr.treatment')), .Names = c('cbind(X, M)', 'M.user', 'Temp'), terms = quote(cbind(X, M) ~ M.user + Temp + M.user:Temp), row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 12

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames2
#argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), terms = quote(y ~ x * z - 1), row.names = c(NA, 10L), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 10

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames20
#argv <- list(structure(list(height = numeric(0), weight = numeric(0)), .Names = c('height', 'weight'), row.names = integer(0), class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames21
#argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames22
#argv <- list(structure(list(Hair = structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('Black', 'Brown', 'Red', 'Blond'), class = 'factor'), Eye = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('Hair', 'Eye', 'Sex'), out.attrs = structure(list(dim = structure(c(4L, 4L, 2L), .Names = c('Hair', 'Eye', 'Sex')), dimnames = structure(list(Hair = c('Hair=Black', 'Hair=Brown', 'Hair=Red', 'Hair=Blond'), Eye = c('Eye=Brown', 'Eye=Blue', 'Eye=Hazel', 'Eye=Green'), Sex = c('Sex=Male', 'Sex=Female')), .Names = c('Hair', 'Eye', 'Sex'))), .Names = c('dim', 'dimnames')), class = 'data.frame', row.names = c(NA, -32L)), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] -32

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames23
#argv <- list(structure(list(Df = c(NA, 1, 2), Deviance = c(12.2441566485997, 8.44399377410362, 11.9670615295804), AIC = c(73.9421143635373, 72.1419514890412, 77.665019244518)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', 'Temp', 'Soft'), class = c('anova', 'data.frame'), heading = c('Single term additions', '\nModel:', 'cbind(X, M) ~ M.user')), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames3
#argv <- list(structure(list(weight = c(4.17, 5.58), group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('weight', 'group'), row.names = 1:2, class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 1 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames6
#argv <- list(structure(list(c(101, 32741, 2147483621, 1.70141183460469e+38, 8.98846567431158e+307)), row.names = c(NA, -5L), class = 'data.frame'), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] -5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames7
#argv <- list(structure(list(srcfile = '/home/lzhao/hg/r-instrumented/library/stats/R/stats', frow = 5139L, lrow = 5139L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames8
#argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
[1] 39

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinshortRowNames.testshortRowNames9
#argv <- list(structure(list(Topic = character(0), File = character(0), Title = character(0), Internal = character(0)), .Names = c('Topic', 'File', 'Title', 'Internal'), row.names = integer(0), class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsin.testsin2
#argv <- list(c(0.0156298141969641, 0.0312596283939283, 0.0468894425908924, 0.0625192567878566, 0.0781490709848207, 0.0937788851817849, 0.109408699378749, 0.125038513575713, 0.140668327772677, 0.156298141969641, 0.171927956166606, 0.18755777036357, 0.203187584560534, 0.218817398757498, 0.234447212954462, 0.250077027151426, 0.26570684134839, 0.281336655545355, 0.296966469742319, 0.312596283939283, 0.328226098136247, 0.343855912333211, 0.359485726530175, 0.375115540727139, 0.390745354924104, 0.406375169121068, 0.422004983318032, 0.437634797514996, 0.45326461171196, 0.468894425908924, 0.484524240105888, 0.500154054302853, 0.515783868499817, 0.531413682696781, 0.547043496893745, 0.562673311090709, 0.578303125287673, 0.593932939484637, 0.609562753681602, 0.625192567878566, 0.64082238207553, 0.656452196272494, 0.672082010469458, 0.687711824666422, 0.703341638863387, 0.718971453060351, 0.734601267257315, 0.750231081454279, 0.765860895651243, 0.781490709848207, 0.797120524045171, 0.812750338242136, 0.8283801524391, 0.844009966636064, 0.859639780833028, 0.875269595029992, 0.890899409226956, 0.90652922342392, 0.922159037620885, 0.937788851817849, 0.953418666014813, 0.969048480211777, 0.984678294408741, 1.00030810860571, 1.01593792280267, 1.03156773699963, 1.0471975511966, 1.06282736539356, 1.07845717959053, 1.09408699378749, 1.10971680798445, 1.12534662218142, 1.14097643637838, 1.15660625057535, 1.17223606477231, 1.18786587896927, 1.20349569316624, 1.2191255073632, 1.23475532156017, 1.25038513575713, 1.2660149499541, 1.28164476415106, 1.29727457834802, 1.31290439254499, 1.32853420674195, 1.34416402093892, 1.35979383513588, 1.37542364933284, 1.39105346352981, 1.40668327772677, 1.42231309192374, 1.4379429061207, 1.45357272031767, 1.46920253451463, 1.48483234871159, 1.50046216290856, 1.51609197710552, 1.53172179130249, 1.54735160549945, 1.56298141969641));sin(argv[[1]]);
  [1] 0.01562918 0.03125454 0.04687226 0.06247854 0.07806955 0.09364149
  [7] 0.10919055 0.12471295 0.14020487 0.15566255 0.17108220 0.18646005
 [13] 0.20179236 0.21707537 0.23230536 0.24747859 0.26259137 0.27764000
 [19] 0.29262081 0.30753013 0.32236433 0.33711978 0.35179288 0.36638004
 [25] 0.38087769 0.39528231 0.40959036 0.42379835 0.43790282 0.45190031
 [31] 0.46578741 0.47956073 0.49321689 0.50675257 0.52016446 0.53344927
 [37] 0.54660378 0.55962475 0.57250902 0.58525343 0.59785487 0.61031026
 [43] 0.62261656 0.63477077 0.64676991 0.65861106 0.67029131 0.68180782
 [49] 0.69315778 0.70433840 0.71534697 0.72618079 0.73683721 0.74731363
 [55] 0.75760749 0.76771628 0.77763753 0.78736881 0.79690775 0.80625202
 [61] 0.81539933 0.82434745 0.83309419 0.84163742 0.84997504 0.85810504
 [67] 0.86602540 0.87373421 0.88122958 0.88850968 0.89557273 0.90241700
 [73] 0.90904082 0.91544257 0.92162070 0.92757369 0.93330008 0.93879848
 [79] 0.94406755 0.94910599 0.95391258 0.95848614 0.96282556 0.96692977
 [85] 0.97079778 0.97442863 0.97782144 0.98097539 0.98388970 0.98656365
 [91] 0.98899660 0.99118796 0.99313718 0.99484379 0.99630737 0.99752757
 [97] 0.99850409 0.99923669 0.99972519 0.99996946

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsin.testsin3
#argv <- list(c(0.560475646552213, 0.23017748948328, -1.55870831414912, -0.070508391424576, -0.129287735160946, -1.71506498688328, -0.460916205989202, 1.26506123460653, 0.686852851893526, 0.445661970099958, -1.22408179743946, -0.359813827057364, -0.400771450594052, -0.11068271594512, 0.555841134754075, -1.78691313680308, -0.497850478229239, 1.96661715662964, -0.701355901563686, 0.472791407727934, 1.06782370598685, 0.217974914658295, 1.02600444830724, 0.72889122929114, 0.625039267849257, 1.68669331074241, -0.837787044494525, -0.153373117836515, 1.13813693701195, -1.25381492106993, -0.426464221476814, 0.295071482992271, -0.895125661045022, -0.878133487533042, -0.821581081637487, -0.688640254100091, -0.553917653537589, 0.0619117105767217, 0.305962663739917, 0.380471001012383, 0.694706978920513, 0.207917278019599, 1.26539635156826, -2.16895596533851, -1.20796199830499, 1.12310858320335, 0.402884835299076, 0.466655353623219, -0.779965118336318, 0.0833690664718293, -0.253318513994755, 0.028546755348703, 0.0428704572913161, -1.36860228401446, 0.225770985659268, -1.51647060442954, 1.54875280423022, -0.584613749636069, -0.123854243844614, -0.215941568743973, -0.379639482759882, 0.502323453109302, 0.33320738366942, 1.01857538310709, 1.07179122647558, -0.303528641404258, -0.448209778629426, -0.0530042267305041, -0.922267467879738, -2.05008468562714, 0.491031166056535, 2.30916887564081, -1.00573852446226, 0.709200762582393, 0.688008616467358, -1.0255713696967, 0.284773007051009, 1.22071771225454, -0.18130347974915, 0.138891362439045, -0.00576418589988693, -0.38528040112633, 0.370660031792409, -0.644376548518833, 0.220486561818751, -0.331781963915697, -1.09683901314935, -0.435181490833803, 0.325931585531227, -1.14880761845109, -0.993503855962119, -0.54839695950807, -0.238731735111441, 0.627906076039371, -1.36065244853001, 0.600259587147127, -2.18733299301658, -1.53261062618519, 0.235700359100477));sin(argv[[1]]);
 [1]  0.531589132  0.228150335 -0.999926941 -0.070449985 -0.128927855
 [6] -0.989611314 -0.444768889  0.953625952  0.634106808  0.431055287
[11] -0.940494222 -0.352099989 -0.390128779 -0.110456865  0.527657995
[16] -0.976737516 -0.477538050  0.922680391 -0.645254145  0.455373248
[21]  0.876153536  0.216252901  0.855235166  0.666042998  0.585129117
[26]  0.993291459 -0.743164232 -0.152772517  0.907853915 -0.950180641
[31] -0.413654302  0.290808244 -0.780287678 -0.769548286 -0.732223563
[36] -0.635487895 -0.526023105  0.061872166  0.301211270  0.371357830
[41]  0.640160356  0.206422483  0.953726766 -0.826373363 -0.934894605
[46]  0.901450446  0.392073827  0.449901777 -0.703254621  0.083272525
[51] -0.250617941  0.028542878  0.042857327 -0.979628330  0.223857848
[56] -0.998524721  0.999757051 -0.551877320 -0.123537835 -0.214267224
[61] -0.370585646  0.481463265  0.327075677  0.851361562  0.878059108
[66] -0.298889400 -0.433352838 -0.052979411 -0.796973251 -0.887323319
[71]  0.471535469  0.739564951 -0.844557651  0.651227452  0.635000074
[76] -0.855010647  0.280939608  0.939345753 -0.180311841  0.138445238
[81] -0.005764154 -0.375818997  0.362230719 -0.600700122  0.218704432
[86] -0.325728326 -0.889769099 -0.421574983  0.320191465 -0.912276219
[91] -0.837943373 -0.521319927 -0.236470522  0.587451519 -0.978000912
[96]  0.564856701 -0.815885890 -0.999271015  0.233524038

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsort.testsort17
#argv <- structure(list(x = c(2.14210348343477, 2.73273128271103,     2.99806873407215, -0.528692848049104, -2.21930913347751,     0.327189480420202, -0.761920109856874, -1.45133259287104,     2.58289965474978, 0.882365602534264, -0.678148102015257,     2.09740992262959, 1.11015366297215, 2.70643682219088, 0.185772243887186,     -2.38685618760064, -2.97262442205101, 0.473321800120175,     -1.20133379939944, 1.63897713040933, -1.89173630112782, 1.73645787220448,     -0.0272455788217485, -0.0804266170598567, 2.78059691889212,     -2.11383658647537, 0.0939270523376763, -0.390122111421078,     -2.80329246399924, 1.61059647146612, 2.74780045822263, -0.0192620046436787,     0.0169407553039491, -1.57991883857176, 1.76223263237625,     -2.21499892836437, 0.367137833498418, -0.284903160296381,     2.52876619063318, 0.633825332857668, 0.613207478541881, 2.08658177917823,     -2.96446485584602, -2.07629728876054, 0.46877646446228, 1.88368982356042,     0.416373030748218, 1.91595612186939, -2.8897425387986, -0.625228523276746,     0.134519706945866, -0.416335945017636, -2.52922565164044,     0.17425535665825, -1.39055569516495, -0.423170546069741,     2.93497854005545, -1.64256255235523, 0.708815339952707, -2.20641956990585,     1.95717442128807, -2.05757057340816, 2.76040208246559, 2.2406962341629,     -1.68299576221034, -1.50189629523084, 1.54184397496283, 0.0106206983327866,     -0.644365496467799, 1.71497052256018, -2.21753972489387,     -0.272966742049903, -0.0741098136641085, 2.63908819807693,     2.97978561837226, -1.19580693589523, -0.940262471325696,     0.556911027990282, -2.33519576629624, -0.223178054206073,     2.98530492978171, -2.27890933351591, 2.41673697670922, -2.31641680374742,     -0.397401746828109, -1.83408120274544, -0.934458317700773,     -2.91743992455304, -0.452570331282914, -1.79014129796997,     -2.82882511569187, 1.8992390432395, 1.25369117455557, -2.21495646424592,     -2.45502642402425, -2.67720098560676, -1.5648388476111, -0.0616166163235903,     2.89307818282396, -2.87064984021708)), .Names = 'x');do.call('sort', argv)
  [1] -2.97262442 -2.96446486 -2.91743992 -2.88974254 -2.87064984 -2.82882512
  [7] -2.80329246 -2.67720099 -2.52922565 -2.45502642 -2.38685619 -2.33519577
 [13] -2.31641680 -2.27890933 -2.21930913 -2.21753972 -2.21499893 -2.21495646
 [19] -2.20641957 -2.11383659 -2.07629729 -2.05757057 -1.89173630 -1.83408120
 [25] -1.79014130 -1.68299576 -1.64256255 -1.57991884 -1.56483885 -1.50189630
 [31] -1.45133259 -1.39055570 -1.20133380 -1.19580694 -0.94026247 -0.93445832
 [37] -0.76192011 -0.67814810 -0.64436550 -0.62522852 -0.52869285 -0.45257033
 [43] -0.42317055 -0.41633595 -0.39740175 -0.39012211 -0.28490316 -0.27296674
 [49] -0.22317805 -0.08042662 -0.07410981 -0.06161662 -0.02724558 -0.01926200
 [55]  0.01062070  0.01694076  0.09392705  0.13451971  0.17425536  0.18577224
 [61]  0.32718948  0.36713783  0.41637303  0.46877646  0.47332180  0.55691103
 [67]  0.61320748  0.63382533  0.70881534  0.88236560  1.11015366  1.25369117
 [73]  1.54184397  1.61059647  1.63897713  1.71497052  1.73645787  1.76223263
 [79]  1.88368982  1.89923904  1.91595612  1.95717442  2.08658178  2.09740992
 [85]  2.14210348  2.24069623  2.41673698  2.52876619  2.58289965  2.63908820
 [91]  2.70643682  2.73273128  2.74780046  2.76040208  2.78059692  2.89307818
 [97]  2.93497854  2.97978562  2.98530493  2.99806873

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsort.testsort18
#argv <- structure(list(x = structure(c(8092, 8092, 8048, 8093,     8066), origin = structure(c(1, 1, 1970), .Names = c('month',     'day', 'year')), class = c('dates', 'times'))), .Names = 'x');do.call('sort', argv)
[1] 8048 8066 8092 8092 8093

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsprintf.testsprintf21
#argv <- structure(list(fmt = '%9.4g', 12345.6789), .Names = c('fmt',     ''));do.call('sprintf', argv)
[1] "1.235e+04"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsqrt.testsqrt1
#argv <- list(12.8025995273675);sqrt(argv[[1]]);
[1] 3.578072

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsqrt.testsqrt2
#argv <- list(numeric(0));sqrt(argv[[1]]);
numeric(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsqrt.testsqrt4
#argv <- list(1e+07);sqrt(argv[[1]]);
[1] 3162.278

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsqrt.testsqrt5
#argv <- list(1);sqrt(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinstoragemode.teststoragemode1
#argv <- structure(list(x = structure(c(1, 0.666666666666667,     0.333333333333333, 0, -0.333333333333333, -0.666666666666667,     -1, -1.33333333333333, -1.66666666666667, 1.5, 1, 0.5, 0,     -0.5, -1, -1.5, -2, -2.5, 3, 2, 1, 0, -1, -2, -3, -4, -5,     -Inf, -Inf, -Inf, NaN, Inf, Inf, Inf, Inf, Inf, -3, -2, -1,     0, 1, 2, 3, 4, 5, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5,     -1, -0.666666666666667, -0.333333333333333, 0, 0.333333333333333,     0.666666666666667, 1, 1.33333333333333, 1.66666666666667,     -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1, 1.25, -0.6, -0.4,     -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1), .Dim = c(9L, 9L))), .Names = 'x');do.call('storage.mode', argv)
[1] "double"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinstoragemodeassign.teststoragemodeassign2
#argv <- list(3.14159265358979, value = 'complex');`storage.mode<-`(argv[[1]],argv[[2]]);
[1] 3.141593+0i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinstrsplit.teststrsplit1
#argv <- list('exNSS4', '_', TRUE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))
[[1]]
[1] "exNSS4"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinstrsplit.teststrsplit12
#argv <- list('Keywords:  utilities ', '\n[ \t\n]*\n', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))
[[1]]
[1] "Keywords:  utilities "


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinstrsplit.teststrsplit13
#argv <- list('x', '', FALSE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))
[[1]]
[1] "x"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinstrsplit.teststrsplit2
#argv <- list(structure('x, row.names = NULL, ', Rd_tag = 'RCODE'), '', FALSE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))
[[1]]
 [1] "x" "," " " "r" "o" "w" "." "n" "a" "m" "e" "s" " " "=" " " "N" "U" "L" "L"
[20] "," " "


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinstrsplit.teststrsplit4
#argv <- list('Keywords:  device ', '[ \t\n]', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))
[[1]]
[1] "Keywords:" ""          "device"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinstrsplit.teststrsplit9
#argv <- list('M.user:Temp', ':', FALSE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))
[[1]]
[1] "M.user" "Temp"


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsub.testsub1
#argv <- list('^..dfd.', '', c('aa', '..dfd.row.names'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
[1] "aa"        "row.names"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsub.testsub11
#argv <- list(' +$', '', c(NA, '1', NA, '2', '1', NA, NA, '1', '4', '1', NA, '4', '1', '3', NA, '4', '2', '2', NA, '4', '4', '2', '4', '4', '2', '1', '4', '4', '3', '1', '1', '4', '1', '4', NA, '1', '4', '4', '2', '2', '4', '4', '3', '4', '2', '2', '3', '3', '4', '1', '1', '1', '4', '1', '4', '4', '4', '4', NA, '4', '4', '4', NA, '1', '2', '3', '4', '3', '4', '2', '4', '4', '1', '4', '1', '4', NA, '4', '2', '1', '4', '1', '1', '1', '4', '4', '2', '4', '1', '1', '1', '4', '1', '1', '1', '4', '3', '1', '4', '3', '2', '4', '3', '1', '4', '2', '4', NA, '4', '4', '4', '2', '1', '4', '4', NA, '2', '4', '4', '1', '1', '1', '1', '4', '1', '2', '3', '2', '1', '4', '4', '4', '1', NA, '4', '2', '2', '2', '4', '4', '3', '3', '4', '2', '4', '3', '1', '1', '4', '2', '4', '3', '1', '4', '3', '4', '4', '1', '1', '4', '4', '3', '1', '1', '2', '1', '3', '4', '2', '2', '2', '4', '4', '3', '2', '1', '1', '4', '1', '1', '2', NA, '2', '3', '3', '2', '1', '1', '1', '1', '4', '4', '4', '4', '4', '4', '2', '2', '1', '4', '1', '4', '3', '4', '2', '3', '1', '3', '1', '4', '1', '4', '1', '4', '3', '3', '4', '4', '1', NA, '3', '4', '4', '4', '4', '4', '4', '3', '4', '3', '4', '2', '4', '4', '1', '2', NA, '4', '4', '4', '4', '1', '2', '1', '1', '2', '1', '4', '2', '3', '1', '4', '4', '4', '1', '2', '1', '4', '2', '1', '3', '1', '2', '2', '1', '2', '1', NA, '3', '2', '2', '4', '1', '4', '4', '2', '4', '4', '4', '2', '1', '4', '2', '4', '4', '4', '4', '4', '1', '3', '4', '3', '4', '1', NA, '4', NA, '1', '1', '1', '4', '4', '4', '4', '2', '4', '3', '2', NA, '1', '4', '4', '3', '4', '4', '4', '2', '4', '2', '1', '4', '4', NA, '4', '4', '3', '3', '4', '2', '2', '4', '1', '4', '4', '4', '3', '4', '4', '4', '3', '2', '1', '3', '1', '4', '1', '4', '2', NA, '1', '4', '4', '3', '1', '4', '1', '4', '1', '4', '4', '1', '2', '2', '1', '4', '1', '1', '4', NA, '4', NA, '4', '4', '4', '1', '4', '2', '1', '2', '2', '2', '2', '1', '1', '2', '1', '4', '2', '3', '3', '1', '3', '1', '4', '1', '3', '2', '2', '4', '1', NA, '3', '4', '2', '4', '4', '4', '4', '4', '4', '3', '4', '4', '3', '2', '1', '4', '4', '2', '4', '2', '1', '2', '1', '1', '1', '1', '4', '4', '1', '1', '4', '1', '4', '4', '4', '1', '1', NA, '3', '2', '4', '4', '4', '4', '2', '3', '3', '2', NA, '4', '2', '4', '4', '1', '1', '4', '4', '1', '1', '4', '1', '2', '2', '2', '2', '1', '4', '4', '1', '2', '2', '2', '3', '4', '4', '3', '4', '1', '1', '4', '4', NA, '4', '1', '4', '4', '4', '1', '4', '4', '1', '2', '4', '4', '4', '4', '1', '2', '4', '4', '2', '1', '4', '2', '4', '2', '2', '4', '1', '3', '3', '2', '4', '1', '4', '4', '4', '1', NA, '4', '4', '2', '4', '4', '4', '4', '4', '2', NA, '4', '2', '4', '3', '1', '4', '4', '3', '4', '2', '4', '4', '1', '2', '1', '4', '1', '3', '3', '1', '4', '4', '2', '4', '4', '4', '4', '3', '2', '3', '3', '2', NA, '3', '4', '4', '3', '3', '4', '4', '4', '1', '4', '4', '4', '4', '4', '4', '4', '2', '4', '2', '3', '4', '1', '3', '1', NA, '4', '1', '2', '2', '1', '4', '3', '3', '4', '1', '1', '3'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
  [1] NA  "1" NA  "2" "1" NA  NA  "1" "4" "1" NA  "4" "1" "3" NA  "4" "2" "2"
 [19] NA  "4" "4" "2" "4" "4" "2" "1" "4" "4" "3" "1" "1" "4" "1" "4" NA  "1"
 [37] "4" "4" "2" "2" "4" "4" "3" "4" "2" "2" "3" "3" "4" "1" "1" "1" "4" "1"
 [55] "4" "4" "4" "4" NA  "4" "4" "4" NA  "1" "2" "3" "4" "3" "4" "2" "4" "4"
 [73] "1" "4" "1" "4" NA  "4" "2" "1" "4" "1" "1" "1" "4" "4" "2" "4" "1" "1"
 [91] "1" "4" "1" "1" "1" "4" "3" "1" "4" "3" "2" "4" "3" "1" "4" "2" "4" NA
[109] "4" "4" "4" "2" "1" "4" "4" NA  "2" "4" "4" "1" "1" "1" "1" "4" "1" "2"
[127] "3" "2" "1" "4" "4" "4" "1" NA  "4" "2" "2" "2" "4" "4" "3" "3" "4" "2"
[145] "4" "3" "1" "1" "4" "2" "4" "3" "1" "4" "3" "4" "4" "1" "1" "4" "4" "3"
[163] "1" "1" "2" "1" "3" "4" "2" "2" "2" "4" "4" "3" "2" "1" "1" "4" "1" "1"
[181] "2" NA  "2" "3" "3" "2" "1" "1" "1" "1" "4" "4" "4" "4" "4" "4" "2" "2"
[199] "1" "4" "1" "4" "3" "4" "2" "3" "1" "3" "1" "4" "1" "4" "1" "4" "3" "3"
[217] "4" "4" "1" NA  "3" "4" "4" "4" "4" "4" "4" "3" "4" "3" "4" "2" "4" "4"
[235] "1" "2" NA  "4" "4" "4" "4" "1" "2" "1" "1" "2" "1" "4" "2" "3" "1" "4"
[253] "4" "4" "1" "2" "1" "4" "2" "1" "3" "1" "2" "2" "1" "2" "1" NA  "3" "2"
[271] "2" "4" "1" "4" "4" "2" "4" "4" "4" "2" "1" "4" "2" "4" "4" "4" "4" "4"
[289] "1" "3" "4" "3" "4" "1" NA  "4" NA  "1" "1" "1" "4" "4" "4" "4" "2" "4"
[307] "3" "2" NA  "1" "4" "4" "3" "4" "4" "4" "2" "4" "2" "1" "4" "4" NA  "4"
[325] "4" "3" "3" "4" "2" "2" "4" "1" "4" "4" "4" "3" "4" "4" "4" "3" "2" "1"
[343] "3" "1" "4" "1" "4" "2" NA  "1" "4" "4" "3" "1" "4" "1" "4" "1" "4" "4"
[361] "1" "2" "2" "1" "4" "1" "1" "4" NA  "4" NA  "4" "4" "4" "1" "4" "2" "1"
[379] "2" "2" "2" "2" "1" "1" "2" "1" "4" "2" "3" "3" "1" "3" "1" "4" "1" "3"
[397] "2" "2" "4" "1" NA  "3" "4" "2" "4" "4" "4" "4" "4" "4" "3" "4" "4" "3"
[415] "2" "1" "4" "4" "2" "4" "2" "1" "2" "1" "1" "1" "1" "4" "4" "1" "1" "4"
[433] "1" "4" "4" "4" "1" "1" NA  "3" "2" "4" "4" "4" "4" "2" "3" "3" "2" NA
[451] "4" "2" "4" "4" "1" "1" "4" "4" "1" "1" "4" "1" "2" "2" "2" "2" "1" "4"
[469] "4" "1" "2" "2" "2" "3" "4" "4" "3" "4" "1" "1" "4" "4" NA  "4" "1" "4"
[487] "4" "4" "1" "4" "4" "1" "2" "4" "4" "4" "4" "1" "2" "4" "4" "2" "1" "4"
[505] "2" "4" "2" "2" "4" "1" "3" "3" "2" "4" "1" "4" "4" "4" "1" NA  "4" "4"
[523] "2" "4" "4" "4" "4" "4" "2" NA  "4" "2" "4" "3" "1" "4" "4" "3" "4" "2"
[541] "4" "4" "1" "2" "1" "4" "1" "3" "3" "1" "4" "4" "2" "4" "4" "4" "4" "3"
[559] "2" "3" "3" "2" NA  "3" "4" "4" "3" "3" "4" "4" "4" "1" "4" "4" "4" "4"
[577] "4" "4" "4" "2" "4" "2" "3" "4" "1" "3" "1" NA  "4" "1" "2" "2" "1" "4"
[595] "3" "3" "4" "1" "1" "3"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsub.testsub16
#argv <- list('^ +', '', c('1_', 'Weight', 'Cylinders4', 'Cylinders5', 'Cylinders6', 'Cylinders8', 'Cylindersrotary', 'TypeLarge', 'TypeMidsize', 'TypeSmall', 'TypeSporty', 'TypeVan', 'EngineSize', 'DriveTrainFront', 'DriveTrainRear'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
 [1] "1_"              "Weight"          "Cylinders4"      "Cylinders5"
 [5] "Cylinders6"      "Cylinders8"      "Cylindersrotary" "TypeLarge"
 [9] "TypeMidsize"     "TypeSmall"       "TypeSporty"      "TypeVan"
[13] "EngineSize"      "DriveTrainFront" "DriveTrainRear"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsub.testsub19
#argv <- list('([^:]*):(.*)', '\\2', character(0), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsub.testsub5
#argv <- list('./', '', structure(c('./data', './html', './po/en@quot/LC_MESSAGES', './po/en@quot', './po/pl/LC_MESSAGES', './po/pl', './po/de/LC_MESSAGES', './po/de', './po', './doc/SuiteSparse', './doc', './Meta', './include', './R', './help', './libs', './external'), class = 'AsIs'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))
 [1] "data"                   "html"                   "po/en@quot/LC_MESSAGES"
 [4] "po/en@quot"             "po/pl/LC_MESSAGES"      "po/pl"
 [7] "po/de/LC_MESSAGES"      "po/de"                  "po"
[10] "doc/SuiteSparse"        "doc"                    "Meta"
[13] "include"                "R"                      "help"
[16] "libs"                   "external"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsubstr.testsubstr1
#argv <- list('weight', 1L, 2L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))
[1] "we"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsubstr.testsubstr2
#argv <- list(c('        ', '        '), 1L, c(4L, -16L)); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))
[1] "    " ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsubstr.testsubstr4
#argv <- list(character(0), 7L, 1000000L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsubstr.testsubstr6
#argv <- list(character(0), 1L, 5L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsubstr.testsubstr7
#argv <- list('', 1L, 2L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))
[1] ""

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsubstrassign.testsubstrassign1
#argv <- list('(0,5]', 1L, 1L, '['); .Internal(`substr<-`(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] "[0,5]"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsubstring.testsubstring1
#argv <- structure(list(text = c('NA', NA, 'BANANA'), first = 1,     last = 1), .Names = c('text', 'first', 'last'));do.call('substring', argv)
[1] "N" NA  "B"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsubstring.testsubstring2
#argv <- structure(list(text = 'abcdef', first = 1:6, last = 1:6),     .Names = c('text', 'first', 'last'));do.call('substring', argv)
[1] "a" "b" "c" "d" "e" "f"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum1
#argv <- list(structure(313, .Names = ''));sum(argv[[1]]);
[1] 313

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum10
#argv <- list(structure(c(1.40573809911564e-05, 2.82275077233781e-31, 298891091593544, 127.398214346512, 1.96341150816547e-14, 0.100886417276321, 18137216711891664896, 75471627676.8224, 1.0423615801344e-05, 4184414.04436152, 0.00284364073413795, 0.124845661512668, 6.26689770279226e-09, 137507212543972912, 2.4515242751977e-06, 17279.5247449809, 9.31653241445582, 2.95260115615331e-07, 2.47540394744834e+33, 1.06282257391682e-08, 280.577969261283, 2.2306055461863e-12, 28194894.3770164, 3.27212932994522e+56, 2.35217223982607e-15, 1.93298541124412e-16, 3.82110080220967e-22, 0.020664532453814, 838.952367401989, 1.48989538272057, 58.0422958839475, 25315229.2305008, 1.14418993503202e-07, 0.141089233086962, 385551.97528297, 72589269069.5057, 3.63818589408037, 3.93055539198144e-15, 0.484224006687325, 0.00122384090262982, 509.681530848699, 1.09212481089264e-13, 4.20671904141446e-12, 1.41116557356417, 0.161225941178553, 0.369883152940699, 0.000211066453902523, 1536.88854142326, 1.21220206873588e-13, 18.2818077643159, 67.5636713643055, 33.0891402079429, 1.17150909115673e-23, 304202.728006006, 0.00353331875245541, 4.32607156718415e+28, 776642523346.066, 0.00115835488031795, 0.00496146869860724, 5.31574527522895e-12), .Dim = 60L, .Dimnames = list(c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))));sum(argv[[1]]);
[1] 3.272129e+56

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum11
#argv <- list(1:10, 1+1i);sum(argv[[1]],argv[[2]]);
[1] 56+1i

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum12
#argv <- list(structure(c(2.19172926547288, 0.330877282992322, 2.43947034322552, 1.27858232527863, 1.34995699383497, 2.31589710162493, -0.100056357529734, 2.12383938264747, 1.1838950457512, 2.61258053432978, -0.0427077741902965, 3.32267292229042, 2.72078100200188, 1.50121623996352, 0.286636947273328, 0.276805761557996, 1.58770673719377, 1.2835349906538, 2.21171702752298, 0.371840556806206, 0.185048028214896, 0.083459109156465, 0.189963621072562, 0.342346999660209, -0.144296693248728, 0.352178185375541, 0.217818647266003, 2.22181318666033, 0.121145321065238, 0.289914009178438, 0.257143390127332, -0.0394307122851858, 2.17200902055199, 0.229288363933891, 1.6805330236497, -0.20328380754072, 0.25058926631711, 1.33428464681067, -0.00502156228152353, NaN, 3.26336745706726, 1.9882766360458, 0.117868259160127, 2.69303413653791, 2.56113239793806, 0.265336044890108, 3.07945609430521, 0.221095709171114, 0.0408573043900261, 0.278444292510551, 1.33428464681067, 1.06801925109484, 0.209625992503226, 3.06212550875829, 0.116229728207572, 1.39280910631599, 2.53602717112413, 0.0457728972476921, 4.7651657207987, 0.194879213930228, 0.114591197255017, 3.26336745706726, 0.0883747020141311, 1.88846207251023, 0.119506790112683, 1.87250223559585, 2.35968057412311, 0.29974519489377, 0.29974519489377, 0.031026118674694, 1.47173382020508, 2.41624560055216, 0.167024187736788, 3.40508627615607, 3.34290799326704, 0.0113637472440299, 0.0588811448681349, 1.54990439966979, 1.35522847629799, 3.07945609430521, 0.224372771076225, 0.129337975828015, 2.99455268975735, 2.83681720000879, 0.0506884901053581, 0.334154344897433, 3.91642660780075, 1.17486192682541, 2.77775688906243, 0.194879213930228, 1.77308062628823, 0.298106663941215, 1.45438038819124, 0.193240682977673, 3.30267449277716, 1.38194860291798, 1.66007135758589, 5.1096442273052, 0.337431406802543, 0.363647902043429), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));sum(argv[[1]]);
[1] NaN

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum13
#argv <- list(numeric(0));sum(argv[[1]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum14
#argv <- list(c(49, 61, NA, NA));sum(argv[[1]]);
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum15
#argv <- list(1073741824L, 1073741824L, 0);sum(argv[[1]],argv[[2]],argv[[3]]);
[1] 2147483648

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum17
#argv <- list(structure(csp = c(1, 101, 1), class = 'ts'));sum(argv[[1]]);
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum19
#argv <- list(structure(c(0.0946626763551857, 1.56832184548816e-06, 0.226697441774756, 0.00453708504256956, 0.258320521579932, 2.57680524978307, 0.467122524211721, 5.16534267196331, 0.694563006492192, 0.197723848046524, 0.000799319848162311, 0.000570944537286636, 0.0654689540726797, 0.000146788076901938, 0.00669686464041458, 0.00765355286634145, 0.0786604017778045, 1.25812820036403e-06, 0.167435582495234, 0.00356206279639504, 0.25547689715822, 2.72165076185825, 0.488128793070721, 3.66078502081211, 0.898984802200849, 0.190804322887854, 0.00080933803412378, 0.000578096808847448, 0.0782510283683936, 0.000156595864868186, 0.00698171105046541, 0.00797910506602018), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')));sum(argv[[1]]);
[1] 18.32736

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum2
#argv <- list(structure(c(-3.02896519757699, -2.37177231827064, -2.49295252901048, -2.99672420295655, -2.59773735414265, -2.26026537208028, -2.74080517809177, -3.785668787425, -2.80120311135215, -2.57773983108655, -5.06092522358575, -2.25629807618983), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')));sum(argv[[1]]);
[1] -34.97106

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum20
#argv <- list(csum(argv[[1]]);
[1] 93

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum21
#argv <- list(structure(c(6L, 12L, 18L, 24L, 30L, 36L, 42L, 48L, 54L, 60L, 66L, 72L, 78L, 84L, 90L, 96L, 102L, 108L, 114L, 120L), .Dim = 4:5, .Dimnames = list(NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))));sum(argv[[1]]);
[1] 1260

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum23
#argv <- list(2, 3, NA);do.call('sum', argv)
[1] NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum3
#argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), class = 'table', .Dim = 60L, .Dimnames = structure(list(r = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60')), .Names = 'r')));sum(argv[[1]]);
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum4
#argv <- list(structure(c(-1.94895827232912e-306, 0, 9.36477567902783e-210, 3.61651164350633e-272, 0, -6.24957292845831e-288, 8.01866432306958e-186, 8.68951728615672e-228, -4.51587577314873e-307, 3.44824066264446e-249, -3.07734214990199e-295, -1.63737039109249e-287, -6.4228533959362e-323, 1.99299936577426e-196, -3.77967355768316e-310, 2.99503783387623e-261, 3.69173164797792e-278, -1.16866860094119e-314, 3.18619635538936e-115, -9.28843414181544e-322, 2.14105998923225e-270, 0, 5.16415548974996e-245, 6.63795852562496, 0, 0, 0, -3.94804275684608e-291, 5.96425287032638e-268, 7.18607375106076e-283, 6.05285733998884e-274, 3.00167530091305e-245, -1.10890415661145e-316, -2.83304044404219e-287, 2.03740072057053e-254, 7.14727745939762e-228, 1.98119254926182e-280, 0, -4.86004310565019e-285, -5.29597124993551e-297, 4.62156398366003e-269, 0, 0, 4.73760851736069e-283, -5.12888870803705e-287, -1.74386324923243e-285, -1.06055701952213e-300, 1.32316178368225e-266, 0, 1.3776952356639e-276, 1.33745692946041e-273, 3.1799923028917e-275, 0, 6.14747062861386e-255, -8.73416235737445e-295, 5.68676829309248e-139, 1.04052519425852e-222, -4.06077295726178e-297, -4.44772889827087e-294, 0), .Dim = 60L, .Dimnames = list(c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))));sum(argv[[1]]);
[1] 6.637959

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum5
#argv <- list(c(2.24999999999999, 0.809999999999997, 3.24, 2.89, 0.0899999999999994, 1.96, 6.25, 0.490000000000001, 9.00000000000001, 0.00999999999999993, 0.249999999999998, 4.41000000000001, 3.24, 3.60999999999999));sum(argv[[1]]);
[1] 38.5

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum6
#argv <- list(structure(c(42L, 1L, 0L, 16L, 84L, 0L, 3L, 0L, 0L), .Dim = c(3L, 3L), .Dimnames = structure(list(c('(0,2.5]', '(2.5,4]', NA), c('(2,5.5]', '(5.5,10]', NA)), .Names = c('', '')), class = 'table'));sum(argv[[1]]);
[1] 146

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum7
#argv <- list(structure(cim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4')), .Tsp = c(1, 101, 1), class = c('mts', 'ts', 'matrix')));sum(argv[[1]]);
[1] 7

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum8
#argv <- list(structure(c(1, 0, 0, 0, 1, 0, 0, 0, 1), .Dim = c(3L, 3L)), extrarg = FALSE);sum(argv[[1]],argv[[2]]);
[1] 3

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsum.testsum9
#sum( );
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinswitch.testswitch4
#argv <- list(2L, TRUE, FALSE, FALSE);do.call('switch', argv)
[1] FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinsysparent.testsysparent1
#argv <- list(2); .Internal(sys.parent(argv[[1]]))
[1] 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltint.testt1
#argv <- structure(list(x = c(-2.13777446721376, 1.17045456767922,     5.85180137819007)), .Names = 'x');do.call('t', argv)
          [,1]     [,2]     [,3]
[1,] -2.137774 1.170455 5.851801

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltintan.testtan2
#argv <- list(c(0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99));tan(argv[[1]]);
 [1] 0.01000033 0.02000267 0.03000900 0.04002135 0.05004171 0.06007210
 [7] 0.07011456 0.08017110 0.09024379 0.10033467 0.11044582 0.12057934
[13] 0.13073732 0.14092189 0.15113522 0.16137946 0.17165682 0.18196953
[19] 0.19231984 0.20271004 0.21314244 0.22361942 0.23414336 0.24471670
[25] 0.25534192 0.26602154 0.27675814 0.28755433 0.29841279 0.30933625
[31] 0.32032751 0.33138941 0.34252487 0.35373688 0.36502849 0.37640285
[37] 0.38786316 0.39941272 0.41105492 0.42279322 0.43463120 0.44657255
[43] 0.45862102 0.47078053 0.48305507 0.49544877 0.50796590 0.52061084
[49] 0.53338815 0.54630249 0.55935872 0.57256183 0.58591701 0.59942962
[55] 0.61310521 0.62694954 0.64096855 0.65516845 0.66955565 0.68413681
[61] 0.69891886 0.71390901 0.72911473 0.74454382 0.76020440 0.77610491
[67] 0.79225417 0.80866138 0.82533611 0.84228838 0.85952867 0.87706790
[73] 0.89491753 0.91308953 0.93159646 0.95045146 0.96966833 0.98926154
[79] 1.00924629 1.02963856 1.05045514 1.07171372 1.09343292 1.11563235
[85] 1.13833271 1.16155586 1.18532486 1.20966412 1.23459946 1.26015822
[91] 1.28636938 1.31326370 1.34087383 1.36923448 1.39838259 1.42835749
[97] 1.45920113 1.49095827 1.52367674

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltintoupper.testtoupper6
#argv <- structure(list(x = c('na', NA, 'banana')), .Names = 'x');do.call('toupper', argv)
[1] "NA"     NA       "BANANA"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltintypeof.testtypeof33
#argv <- structure(list(x = c(1.1 + (0+0i), NA, 3 + (0+0i))),     .Names = 'x');do.call('typeof', argv)
[1] "complex"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltintypeof.testtypeof34
#argv <- structure(list(x = c(NA_integer_, NA_integer_, NA_integer_)),     .Names = 'x');do.call('typeof', argv)
[1] "integer"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinunclass.testunclass1
#argv <- list(c(-1, -1));unclass(argv[[1]]);
[1] -1 -1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinunclass.testunclass16
#argv <- list(structure(list(structure(9L, members = 1L, height = 0, label = 9L, leaf = TRUE, value = 2L), structure(list(structure(10L, label = 10L, members = 1L, height = 0, leaf = TRUE, value = 1L), structure(1L, label = 1L, members = 1L, height = 0, leaf = TRUE, value = 10L)), members = 2L, midpoint = 0.5, height = 0.114813676452255, value = 5.5)), members = 3L, midpoint = 0.75, height = 0.241190881793568, value = 3.75));unclass(argv[[1]]);
[[1]]
[1] 9
attr(,"members")
[1] 1
attr(,"height")
[1] 0
attr(,"label")
[1] 9
attr(,"leaf")
[1] TRUE
attr(,"value")
[1] 2

[[2]]
[[2]][[1]]
[1] 10
attr(,"label")
[1] 10
attr(,"members")
[1] 1
attr(,"height")
[1] 0
attr(,"leaf")
[1] TRUE
attr(,"value")
[1] 1

[[2]][[2]]
[1] 1
attr(,"label")
[1] 1
attr(,"members")
[1] 1
attr(,"height")
[1] 0
attr(,"leaf")
[1] TRUE
attr(,"value")
[1] 10

attr(,"members")
[1] 2
attr(,"midpoint")
[1] 0.5
attr(,"height")
[1] 0.1148137
attr(,"value")
[1] 5.5

attr(,"members")
[1] 3
attr(,"midpoint")
[1] 0.75
attr(,"height")
[1] 0.2411909
attr(,"value")
[1] 3.75

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinunclass.testunclass17
#argv <- list(c(-1.6, -0.9));unclass(argv[[1]]);
[1] -1.6 -0.9

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinunclass.testunclass22
#argv <- list(c(10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 1e+05, 110000, 120000, 130000, 140000, 150000, 160000, 170000, 180000, 190000, 2e+05, 210000, 220000, 230000, 240000, 250000, 260000, 270000, 280000, 290000, 3e+05, 310000, 320000, 330000, 340000, 350000, 360000, 370000, 380000, 390000, 4e+05, 410000, 420000, 430000, 440000, 450000, 460000, 470000, 480000, 490000, 5e+05, 510000, 520000, 530000, 540000, 550000, 560000, 570000, 580000, 590000, 6e+05, 610000, 620000, 630000, 640000, 650000, 660000, 670000, 680000, 690000, 7e+05, 710000, 720000, 730000, 740000, 750000, 760000, 770000, 780000, 790000, 8e+05, 810000, 820000, 830000, 840000, 850000, 860000, 870000, 880000, 890000, 9e+05, 910000, 920000, 930000, 940000, 950000, 960000, 970000, 980000, 990000, 1e+06));unclass(argv[[1]]);
  [1]   10000   20000   30000   40000   50000   60000   70000   80000   90000
 [10]  100000  110000  120000  130000  140000  150000  160000  170000  180000
 [19]  190000  200000  210000  220000  230000  240000  250000  260000  270000
 [28]  280000  290000  300000  310000  320000  330000  340000  350000  360000
 [37]  370000  380000  390000  400000  410000  420000  430000  440000  450000
 [46]  460000  470000  480000  490000  500000  510000  520000  530000  540000
 [55]  550000  560000  570000  580000  590000  600000  610000  620000  630000
 [64]  640000  650000  660000  670000  680000  690000  700000  710000  720000
 [73]  730000  740000  750000  760000  770000  780000  790000  800000  810000
 [82]  820000  830000  840000  850000  860000  870000  880000  890000  900000
 [91]  910000  920000  930000  940000  950000  960000  970000  980000  990000
[100] 1000000

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinunique.testunique1
#argv <- list(character(0), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
character(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinunique.testunique17
#argv <- list(c('2.21', '7.6', '18.19', '19.78', '20.23', '27.01', '28.06', '29.28', '32.79', '37.06', '39.72', '41.26', '41.76', '42.5', '42.82', '43.59', '45.29', '47.09', '47.12', '47.68', '48.52', '48.93', '49.26', '49.45', '49.58', '49.69', '51.01', '51.18', '52.24', '52.39', '55.06', '55.25', '55.76', '57.02', '57.21', '57.71', '58.33', '58.84', '59.63', '59.83', '61.54', '62.16', '62.26', '65.35', '72.03', '75.37', '78.22', NA), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
 [1] "2.21"  "7.6"   "18.19" "19.78" "20.23" "27.01" "28.06" "29.28" "32.79"
[10] "37.06" "39.72" "41.26" "41.76" "42.5"  "42.82" "43.59" "45.29" "47.09"
[19] "47.12" "47.68" "48.52" "48.93" "49.26" "49.45" "49.58" "49.69" "51.01"
[28] "51.18" "52.24" "52.39" "55.06" "55.25" "55.76" "57.02" "57.21" "57.71"
[37] "58.33" "58.84" "59.63" "59.83" "61.54" "62.16" "62.26" "65.35" "72.03"
[46] "75.37" "78.22" NA

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinunique.testunique6
#argv <- list(c('colors', 'colours'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))
[1] "colors"  "colours"

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinvector.testvector1
#argv <- list('integer', 0L); .Internal(vector(argv[[1]], argv[[2]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinvector.testvector2
#argv <- list('double', 17.1); .Internal(vector(argv[[1]], argv[[2]]))
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinvector.testvector3
#argv <- list('list', 1L); .Internal(vector(argv[[1]], argv[[2]]))
[[1]]
NULL


##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinvector.testvector4
#argv <- list('logical', 15L); .Internal(vector(argv[[1]], argv[[2]]))
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinvector.testvector5
#argv <- list('double', 2); .Internal(vector(argv[[1]], argv[[2]]))
[1] 0 0

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhich.testwhich1
#argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)); .Internal(which(argv[[1]]))
 [1] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
[26] 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
[51] 68 69 70

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhich.testwhich2
#argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B')))); .Internal(which(argv[[1]]))
[1] 1 2 3 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhich.testwhich3
#argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)); .Internal(which(argv[[1]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhich.testwhich5
#argv <- list(logical(0)); .Internal(which(argv[[1]]))
integer(0)

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhich.testwhich6
#argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L))); .Internal(which(argv[[1]]))
[1] 1 2 3 4

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhich.testwhich7
#argv <- list(c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)); .Internal(which(argv[[1]]))
[1] 2

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhich.testwhich8
#argv <- list(structure(c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE), .Dim = 12L)); .Internal(which(argv[[1]]))
[1]  3  6  9 12

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhichmax.testwhichmax1
#argv <- list(structure(c(TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = 4:5, .Dimnames = list(c('I(a)', 'b', 'c', 'a'), c('I(a)', 'b', 'c', 'b:c', 'a:x')))); .Internal(which.max(argv[[1]]))
[1] 1

##com.oracle.truffle.r.test.testrgen.TestrGenBuiltinwhichmax.testwhichmax3
#argv <- list(c(7985.84636551931, 7366.07281363396, 7342.71367123673, 7315.48787041648, 7290.90503004105)); .Internal(which.max(argv[[1]]))
[1] 1

