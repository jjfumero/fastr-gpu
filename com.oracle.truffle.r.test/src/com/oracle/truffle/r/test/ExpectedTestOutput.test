##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testArithmeticUpdate
#{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- 1L + x ; x } ; f(FALSE) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testArithmeticUpdate
#{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- x + 1L ; x } ; f(FALSE) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testArithmeticUpdate
#{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- x - 1L ; x } ; f(FALSE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0+1i)/0) * ((0+1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0-1i)/0) * ((-1-1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0-1i)/0) * ((0+1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0-1i)/0) * ((0-1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ ((0-1i)/0) * ((1-1i)/0) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (-1+0i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (-1-1i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (0+0i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (0+1i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (1+0i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (1+1i)/(0+0i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ (1+2i) / ((0-0i)/(0+0i)) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ 0/0 - 4i }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ 0^(-1+1i) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ 4i + 0/0  }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testComplexNaNInfinity
#{ a <- 1 + 2i; b <- 0/0 - 4i; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-1)^(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-1/0)^(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-1/0)^3 }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-2)^(-1/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (-2)^(1/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (0/0)^(1/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (1)^(-1/0) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (1/0)^(-4) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ (1/0)^(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 0^(-1/0) }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 0^(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 0^(1/0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 1^(0/0) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{ 1^(1/0) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testExponentiation
#{(-1/0)^(-4) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3 %/% -2 }
[1] -2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3 %/% 0 }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3 %/% 2 }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3L %/% -2L }
[1] -2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerDivision
#{ 3L %/% 2L }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerOverflowNoWarning
#{ 3L %% 0L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerOverflowNoWarning
#{ 3L %/% 0L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerOverflowNoWarning
#{ c(3L,3L) %% 0L }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testIntegerOverflowNoWarning
#{ c(3L,3L) %/% 0L }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatrices
#{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m-1 }
     [,1] [,2] [,3]
[1,]    0    1    2
[2,]    3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatrices
#{ z<-matrix(12)+1 ; z }
     [,1]
[1,]   13

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ double() %*% double() }
     [,1]
[1,]    0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(0,4) ; m %*% t(m) }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(0,4) ; n <- matrix(1:4,4) ; m %*% n }
     [,1]

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(0,4) ; t(m) %*% m }
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
[4,]    0    0    0    0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testMatricesProduct
#{ m <- double() ; dim(m) <- c(4,0) ; n <- matrix(1:4,ncol=4) ; n %*% m }

[1,]

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3 %% -2 }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3 %% 0 }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3 %% 2 }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3L %% -2L }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testModulo
#{ 3L %% 2L }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ "1" && c(1, 0) }
Error in "1" && c(1, 0) : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ 1.0 && c(1+1i, 0+0i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ FALSE && FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ FALSE && NA }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ FALSE && TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ NA && FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ NA && NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ NA && TRUE }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ TRUE && FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ TRUE && NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ TRUE && TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ TRUE && c(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ as.raw(c(1, 0)) && TRUE }
Error in as.raw(c(1, 0)) && TRUE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c("1", "0") && TRUE }
Error in c("1", "0") && TRUE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1+1i, 0+0i) && 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1+1i, 0+0i) && c(1+1i, 0+0i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1, 0) && "1" }
Error in c(1, 0) && "1" : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1, 0) && 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1, 0) && 1+1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1.0, 0.0) && 1.0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(1.1, 0.0) && c(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(TRUE, FALSE) && c(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ c(TRUE, FALSE) && c(TRUE, FALSE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; FALSE && f(FALSE) ; x } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA && f(NA) ; x } 
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; c(FALSE, TRUE) && f(FALSE) ; x } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(1,2) ; f(logical(),4) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(1,2) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(2+3i,1/0) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(2+3i,logical()) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(double(),2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(integer(),2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(TRUE, c(TRUE,TRUE,FALSE)) ; f(1,2) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ as.raw(c(1,4)) | as.raw(c(1,5,4)) }
[1] 01 05 05
Warning message:
In as.raw(c(1, 4)) | as.raw(c(1, 5, 4)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ as.raw(c(1,5,4)) | as.raw(c(1,4)) }
[1] 01 05 05
Warning message:
In as.raw(c(1, 5, 4)) | as.raw(c(1, 4)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ c(TRUE, FALSE, FALSE) & c(TRUE,TRUE) }
[1]  TRUE FALSE FALSE
Warning message:
In c(TRUE, FALSE, FALSE) & c(TRUE, TRUE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ c(TRUE, TRUE) & c(TRUE, FALSE, FALSE) }
[1]  TRUE FALSE FALSE
Warning message:
In c(TRUE, TRUE) & c(TRUE, FALSE, FALSE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalLengthChecks
#{ c(a=TRUE, TRUE) | c(TRUE, b=FALSE, FALSE) }
        b
TRUE TRUE TRUE
Warning message:
In c(a = TRUE, TRUE) | c(TRUE, b = FALSE, FALSE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ 0 || 0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ 0 || NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ 1 || 0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ 1.1 || 3.15 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ NA || 0 }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ NA || 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA || f(NA) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalOr
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; TRUE || f(FALSE) ; x } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" && 1 }
Error in "hello" && 1 : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" && 1L }
Error in "hello" && 1L : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" && TRUE }
Error in "hello" && TRUE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" || 1 }
Error in "hello" || 1 : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" || 1L }
Error in "hello" || 1L : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" || FALSE }
Error in "hello" || FALSE : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ "hello" || TRUE }
Error in "hello" || TRUE : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0 && "hello" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0 || "hello" }
Error in 0 || "hello" : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0 || NULL }
Error in 0 || NULL : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0 || as.raw(1) }
Error in 0 || as.raw(1) : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0+0i || FALSE}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0.0 && "hello" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0.1 && "hello" }
Error in 0.1 && "hello" : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0.1 && NULL }
Error in 0.1 && NULL : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0.1 && as.raw(1) }
Error in 0.1 && as.raw(1) : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 0L || "hello" }
Error in 0L || "hello" : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1 && "hello" }
Error in 1 && "hello" : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1 || "hello" }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1+2i && 0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1+2i && TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1+2i || 0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1+2i || 1.0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1.0 && 0+0i}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ 1.1 || "hello" }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ FALSE && "hello" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ FALSE || "hello" }
Error in FALSE || "hello" : invalid 'y' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ FALSE || 1+2i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ NULL && 1 }
Error in NULL && 1 : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ NULL || 1 }
Error in NULL || 1 : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ TRUE && "hello" }
Error in TRUE && "hello" : invalid 'y' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ TRUE && 0+0i}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ TRUE || "hello" }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ as.raw(1) && 1 }
Error in as.raw(1) && 1 : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ as.raw(1) || 1 }
Error in as.raw(1) || 1 : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ as.raw(10) && "hi" }
Error in as.raw(10) && "hi" : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ as.raw(c(1,4)) | raw() }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ c(TRUE,FALSE) | logical() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ character(0) && FALSE }
Error in character(0) && FALSE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ character(0) && TRUE }
Error in character(0) && TRUE : invalid 'x' type in 'x && y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ character(0) || FALSE }
Error in character(0) || FALSE : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ character(0) || TRUE }
Error in character(0) || TRUE : invalid 'x' type in 'x || y'

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical() | c(TRUE,FALSE) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) && FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) && TRUE }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) && logical(0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) || FALSE }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) || TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ logical(0) || logical(0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testNonvectorizedLogicalSpecialChecks
#{ raw() | as.raw(c(1,4))}
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ (1:2)[3] + 2L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ (1:2)[3] / 2L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ 1L / 2L }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ 2L + (1:2)[3] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ 2L / (1:2)[3] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- (1:2)[3] ; b <- 2 ; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- (1:2)[3] ; b <- 2L ; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- (1:2)[3] ; b <- 2L ; a / b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- 2 ; b <- (1:2)[3] ; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- 2L ; b <- (1:2)[3] ; a + b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ a <- 2L ; b <- (1:2)[3] ; a / b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f((1:2)[3], 2L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,(1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,4) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,4L) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f((1:2)[3], 2L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f((1:2)[3],2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2,(1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,(1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,4) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,4L) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(a, b) { a / b } ; f(1L, 2L) ; f(1, 2) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { (1:2)[3] + b } ; f(1) ; f(2L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { (1:2)[3] + b } ; f(1L) ; f(2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 + b } ; f(1L) ; f(TRUE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 / b } ; f(1) ; f(1L) ; f(4) }
[1] 0.25

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 / b } ; f(1) ; f(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 / b } ; f(1L) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 1 / b } ; f(TRUE) ; f(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L + b } ; f(1L) ; f(2) ; f((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L + b } ; f(1L) ; f(2) ; f(TRUE) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L + b } ; f(1L) ; f(2) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L / b } ; f(1L) ; f(2) ; f((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L / b } ; f(1L) ; f(2) ; f(TRUE) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { 4L / b } ; f(1L) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { FALSE + b } ; f(1L) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b + 1 } ; f(1L) ; f(TRUE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b + 4L } ; f(1L) ; f(2) ; f((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b + 4L } ; f(1L) ; f(2) ; f(TRUE) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b + FALSE } ; f(1L) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 1 } ; f(1) ; f(1L) ; f(4) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 2 } ; f(1) ; f(1L) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 2L } ; f(1L) ; f(2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 4 } ; f(1L) ; f(1) }
[1] 0.25

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 4L } ; f(1L) ; f(2) ; f((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalars
#{ f <- function(b) { b / 4L } ; f(1L) ; f(2) ; f(TRUE) }
[1] 0.25

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ ((1+0i)/(0+0i)) ^ (-3) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ ((1+1i)/(0+0i)) ^ (-3) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (0+2i)^0 }
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i) / ((0-1i)/(0+0i)) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i)*(3+4i) }
[1] -5+10i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i)^(-2) }
[1] -0.12-0.16i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i)^0 }
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (1+2i)^2 }
[1] -3+4i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ (3+2i)^2 }
[1] 5+12i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ 1/((1+0i)/(0+0i)) }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(-1+2i,1.1+2.1i) }
[1] -1.0+2.0i  1.1+2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1+12i,1.1+2.1i) }
[1] 1.0+12.0i 1.1+ 2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1+2i,1.1+12.1i) }
[1] 1.0+ 2.0i 1.1+12.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1+2i,1.1+2.1i) }
[1] 1.0+2.0i 1.1+2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1+2i,11.1+2.1i) }
[1]  1.0+2.0i 11.1+2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(1-2i,1+22i) }
[1] 1- 2i 1+22i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ c(11+2i,1.1+2.1i) }
[1] 11.0+2.0i  1.1+2.1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a + b } ; f(1+2i, 3) ; f(1, 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a + b } ; f(1+2i, 3+4i) ; f(1, 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1+2i) ; f(TRUE, 2)  }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a + b } ; f(2, 3+4i) ; f(1, 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2+1i,(1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1 / b } ; f(1+1i) ; f(1L)  }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1i / b } ; f(1) ; f(1L) ; f(4) }
[1] 0+0.25i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1i / b } ; f(1) ; f(1L) }
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1i / b } ; f(1+1i) ; f(1L) }
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { 1i / b } ; f(TRUE) ; f(1L) }
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { b / 2 } ; f(1+1i) ; f(1L)  }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ f <- function(b) { b / 4i } ; f(1) ; f(1L) }
[1] 0-0.25i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ round( ((1+1i)/(0+1i)) ^ (-3.54), digits=5) }
[1] -0.27428+0.10364i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ round( (1+2i)^(3+4i), digits=5 ) }
[1] 0.12901+0.03392i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- 1+2i; y <- 3+4i; round(x*x*y/(x+y), digits=5) }
[1] -1.92308+2.88462i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- 1+2i; y <- 3+4i; x*y }
[1] -5+10i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- 1+2i; y <- 3+4i; x-y }
[1] -2-2i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- 1+2i; y <- 3+4i; x/y }
[1] 0.44+0.08i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; round(y/x, digits=5) }
[1] -1.00000+1.00000i  0.34862+0.50459i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; y-x }
[1]  4+3i -7-5i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1.5-1i,-1.3-1i) ; y <- c(0+0i, 0+0i) ; y*y+x }
[1] -1.5-1i -1.3-1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsComplex
#{ x <- c(-1.5-1i,-1.3-1i) ; y <- c(0+0i, 0+0i) ; y-x }
[1] 1.5+1i 1.3+1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsRange
#{ f <- function(a, b) { a + b } ; f(1:2, 3:4) ; f(c(1,2), 3:4) }
[1] 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsRange
#{ f <- function(a, b) { a + b } ; f(1:2, c(3,4)) ; f(c(1,2), 3:4) }
[1] 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsRange
#{ f <- function(a, b) { a + b } ; f(c(1,2), c(3,4)) ; f(c(1,2), 3:4) }
[1] 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ ( 1+1)*(3+2) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 0x10 + 0x10L + 1.28 }
[1] 33.28

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1+FALSE<=0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1+NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1+TRUE }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L*NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L+1 }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L+1L }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L+FALSE<=0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 1L+TRUE }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ 2L^10L }
[1] 1024

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testScalarsReal
#{ TRUE+TRUE+TRUE*TRUE+FALSE+4 }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ -(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ -(1/0) }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ ----3 }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ ---3 }
[1] -3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ --3 }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinus
#{ -3 }
[1] -3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(1) ; f(1L) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(1L) ; f(1) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(1L) ; f(TRUE) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ f <- function(z) { -z } ; f(TRUE) ; f(1L) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ z <- double() ; -z }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ z <- integer() ; -z }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunction
#{ z <- logical() ; -z }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunctionComplex
#{ f <- function(z) { -z } ; f(1+1i) ; f(1L) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusAsFunctionComplex
#{ f <- function(z) { -z } ; f(1L) ; f(1+1i) }
[1] -1-1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusComplex
#{ -((0+1i)/0)  }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusComplex
#{ -((1+0i)/0)  }
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusComplex
#{ -(2+1i)  }
[1] -2-1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryMinusVector
#{ -(1[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNot
#{ !FALSE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNot
#{ !NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNot
#{ !TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotError
#{ l <- c("hello", "hi") ; !l }
Error in !l : invalid argument type

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotError
#{ l <- function(){1} ; !l }
Error in !l : invalid argument type

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotError
#{ l <- list(1); !l }
Error in !l : invalid argument type

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotError
#{ x<-1:4; dim(x)<-c(2, 2); names(x)<-101:104; attr(x, "dimnames")<-list(c("201", "202"), c("203", "204")); attr(x, "foo")<-"foo"; y<-!x; attributes(y) }
$names
[1] "101" "102" "103" "104"

$dim
[1] 2 2

$dimnames
$dimnames[[1]]
[1] "201" "202"

$dimnames[[2]]
[1] "203" "204"



##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotPropagate
#{ x<-1:4; dim(x)<-c(2, 2); names(x)<-101:104; attr(x, "dimnames")<-list(201:202, 203:204); attr(x, "foo")<-"foo"; y<-!x; attributes(y) }
$names
[1] "101" "102" "103" "104"

$dim
[1] 2 2

$dimnames
$dimnames[[1]]
[1] "201" "202"

$dimnames[[2]]
[1] "203" "204"



##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ a <- as.raw(12) ; !a }
[1] f3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ a <- as.raw(201) ; !a }
[1] 36

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ f <- function(arg) { !arg } ; f(as.raw(10)) ; f(as.raw(1:3)) }
[1] fe fd fc

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ f <- function(arg) { !arg } ; f(as.raw(10)) ; f(as.raw(c(a=1,b=2))) }
[1] fe fd

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ f <- function(arg) { !arg } ; f(as.raw(10)) ; x <- as.raw(10:11) ; attr(x, "my") <- 1 ; f(x) }
[1] f5 f4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotRaw
#{ l <- list(); !l }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotVector
#{ !((0-3):3) }
[1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotVector
#{ !c(1,2,3,4,0,0,NA) }
[1] FALSE FALSE FALSE FALSE  TRUE  TRUE    NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testUnaryNotVector
#{ !c(TRUE,TRUE,FALSE,NA) }
[1] FALSE FALSE  TRUE    NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ 1:4 & c(FALSE,TRUE) }
[1] FALSE  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ FALSE & FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ FALSE & NA }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ FALSE & TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ NA & FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ NA & NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ NA & TRUE }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ TRUE & FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ TRUE & NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ TRUE & TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ a <- as.raw(201) ; b <- as.raw(1) ; a & b }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; FALSE & f(FALSE) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAnd
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA & f(NA) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 0) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 0L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 3+4i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(FALSE, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(as.raw(10), as.raw(11)) }
[1] 0a

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, FALSE) ; f(1L, 3+4i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAndAsFunction
#{ f <- function(a,b) { a & b } ; f(TRUE, FALSE) ; f(TRUE, 3+4i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; dim(x)<-c(2,2); y<-21:28; x | y }
Error: dims [product 4] do not match the length of object [8]

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; attr(x, "foo")<-"foo"; attributes(x | TRUE) }
$names
[1] "101" "102" "103" "104"


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; attr(x, "foo")<-"foo"; y<-21:24; names(y)<-121:124; attributes(x | y) }
$names
[1] "101" "102" "103" "104"


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; x | TRUE }
 101  102  103  104
TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:24; names(y)<-121:124; x | y }
 101  102  103  104
TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; attributes(x | y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128;  attributes(y | x) }
$names
[1] "121" "122" "123" "124" "125" "126" "127" "128"


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128; x | y }
 121  122  123  124  125  126  127  128
TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-1:4; y<-21:24; names(y)<-121:124; attributes(x | y) }
$names
[1] "121" "122" "123" "124"


##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalAttributes
#{ x<-as.raw(1:4); names(x)<-101:104; y<-as.raw(21:24); names(y)<-121:124; x | y }
101 102 103 104
15 16 17 1c

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalComplex
#{ 1+2i & 0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalComplex
#{ 1+2i | 0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ 0 | 0 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ 0 | NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ 1 | 0 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ 1.1 | 3.15 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ NA | 0 }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ NA | 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ a <- as.raw(200) ; b <- as.raw(1) ; a | b }
[1] c9

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ a <- as.raw(200) ; b <- as.raw(255) ; a | b }
[1] ff

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA | f(NA) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOr
#{ x <- 1 ; f <- function(r) { x <<- 2; r } ; TRUE | f(FALSE) ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOrAsFunction
#{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(4, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOrAsFunction
#{ f <- function(a,b) { a | b } ; f(c(TRUE, FALSE), FALSE) ; f(1L, 3+4i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalOrAsFunction
#{ f <- function(a,b) { a | b } ; f(c(TRUE, FALSE), FALSE) ; f(c(FALSE,FALSE), 3+4i) }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ TRUE | "hello" }
Error in TRUE | "hello" :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(FALSE, as.raw(10)) }
Error in a & b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(as.raw(10), 12) }
Error in a & b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a | b } ; f(3, as.raw(c(1,4))) }
Error in a | b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), 3) }
Error in a | b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(FALSE, as.raw(4)) }
Error in a | b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorizedLogicalTypeCheck
#{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(as.raw(4), FALSE) }
Error in a | b :
  operations are possible only for numeric, logical or complex types

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ c(1L,2L,3L)*c(10,11,12) }
[1] 10 22 36

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ c(1L,2L,3L)*c(10L) }
[1] 10 20 30

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ c(1L,2L,3L)+TRUE }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ c(1L,2L,3L,4L)-c(TRUE,FALSE) }
[1] 0 2 2 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ ia<-c(1L,2L);ib<-c(3L,4L);d<-c(5,6);ia+ib+d }
[1]  9 12

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-1+NA; c(1,2,3,4)+c(x,10) }
[1] NA 12 NA 14

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2);y<-c(3,4,5,6);x*y }
[1]  3  8  5 12

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2);y<-c(3,4,5,6);x+y }
[1] 4 6 6 8

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2);z<-c();x==z }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x*2 }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x*x+x }
[1]  2  6 12

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x+2 }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x+FALSE }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectors
#{ x<-c(1,2,3);x+TRUE }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsComplex
#{ 1:4+c(1,2+2i) }
[1] 2+0i 4+2i 4+0i 6+2i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsComplex
#{ c(1,2+2i)+1:4 }
[1] 2+0i 4+2i 4+0i 6+2i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsEmptyResult
#{ 1+integer() }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsEmptyResult
#{ integer()+1 }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsIntegerDivision
#{ c(3,4) %/% 2 }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsModulo
#{ c(3,4) %% 2 }
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsModulo
#{ c(3,4) %% c(2,5) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1 + c(1L, NA, 3L) }
[1]  2 NA  4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1:2+c(NA,NA,NA,NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1:3+NA }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1:3+c(NA, NA, NA) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ 1:4+c(NA, NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ NA + c(1, 2, 3) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ NA+1:3 }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ NA+c(1L, 2L, 3L) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1, 2, 3) + NA }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L, 2L, 3L)+NA }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,2L)+c(NA,NA,NA,NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,2L,3L)+c(NA, NA, NA) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,2L,3L,4L)+c(NA, NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,NA) + c(2,3) }
[1]  3 NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(1L,NA)+1 }
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(2,3) + c(1L,NA)}
[1]  3 NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA)+1:4 }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA)+c(1L,2L,3L,4L) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA,NA)+1:3 }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA,NA)+c(1L,2L,3L) }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA,NA,NA)+1:2 }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsNA
#{ c(NA,NA,NA,NA)+c(1L,2L) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ a <- c(1,3) ; a ^ 3 }
[1]  1 27

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ a <- c(1,3) ; b <- c(2,4) ; a ^ b }
[1]  1 81

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ c(1,3) %/% c(2,4) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperations
#{ c(1,3) - 4 }
[1] -3 -1

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ a <- c(1+1i,3+2i) ; a - (4+3i) }
[1] -3-2i -1-1i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ c(1+1i,3+2i) * c(1,2) }
[1] 1+1i 6+4i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ round( 3^c(1,2,3+1i), digits=5 ) }
[1]  3.00000+ 0.00000i  9.00000+ 0.00000i 12.28048+24.04558i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ round(c(1+1i,2+3i)^c(1+1i,3+4i), digits = 5) }
[1]  0.27396+0.58370i -0.20455+0.89662i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsOperationsComplex
#{ z <- c(1+1i,3+2i) ; z * c(1,2) }
[1] 1+1i 6+4i

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1 + 1:2 }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + 1 }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + 2L }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + 3:4 }
[1] 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + c(1,2) }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + c(1,2,3,4) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:2 + c(1L, 2L) }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:4 + c(1L, 2L) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1:4+c(1,2) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1L + 1:2 }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 1L + c(1,2) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 2L + 1:2 }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 2L + c(1L, 2L) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ 4:3 + 2L }
[1] 6 5

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1,2) + 1:2 }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1,2)+1:4 }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1,2,3,4) + 1:2 }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1,2,3,4) + c(1L,2L) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1L, 2L) + 1:4 }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1L, 2L) + 2L }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testVectorsRanges
#{ c(1L,2L) + c(1,2,3,4) }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
# xor(FALSE, FALSE) 
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
# xor(FALSE, TRUE) 
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
# xor(TRUE, FALSE) 
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
# xor(TRUE, TRUE) 
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
#{ xor(0:2, 2:4) }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
#{ xor(0:2, 2:7) }
[1]  TRUE FALSE FALSE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArithmetic.testXor
#{ xor(7, 42) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dim(x[0,0,0]) }
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")) ;x[,0,] }
, , e


a
b

, , f


a
b


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")) ;x[1,1,NA] }
<NA> <NA>
  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")) ;x[1,1,] }
e f
1 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")); x[1,1,c(1,NA,1)] }
   e <NA>    e
   1   NA    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d"), c("e", "f")); x[NA,1,c(1,NA,1)] }
      e <NA>  e
<NA> NA   NA NA
<NA> NA   NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); x[0,0,1] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); x[1,1,NA] }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); x[1,1,c(1,NA,1)] }
[1]  1 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-(1:8); dim(x)<-c(2, 2, 2); x[NA,1,c(1,NA,1)] }
     [,1] [,2] [,3]
[1,]   NA   NA   NA
[2,]   NA   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(2,2,4); dim(x[0,-1,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(2,2,4); x[,1,1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c("a", "b", "c", "d"), "z", c("e", "f", "g", "h")); dimnames(x[-1,1,-1]) }
[[1]]
[1] "b" "c" "d"

[[2]]
[1] "f" "g" "h"


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c("a", "b", "c", "d"), NULL, c("e", "f", "g", "h")); x[-1,1,-1] }
  f  g  h
b 6 10 14
c 7 11 15
d 8 12 16

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c("a", "b", "c", "d"), NULL, c("e", "f", "g", "h")); x[-1,1,1] }
b c d
2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:256; dim(x)<-c(4,4,4,4); dim(x[1,0, 1,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:256; dim(x)<-c(4,4,4,4); dim(x[1,1, 0,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dim(x[-1,1,1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(NULL, c("x", "y"), c("e", "f", "g", "h")); x[-1,1,1] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c("a", "b", "c", "d"), NULL, c("e", "f", "g", "h")); x[-1,,-1] }
, , f

  [,1] [,2]
b   10   14
c   11   15
d   12   16

, , g

  [,1] [,2]
b   18   22
c   19   23
d   20   24

, , h

  [,1] [,2]
b   26   30
c   27   31
d   28   32


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c("a", "b", "c", "d"), c("x", "y"), c("e", "f", "g", "h")); x[-1,,-1] }
, , f

   x  y
b 10 14
c 11 15
d 12 16

, , g

   x  y
b 18 22
c 19 23
d 20 24

, , h

   x  y
b 26 30
c 27 31
d 28 32


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c("a", "b", "c", "d"), c("x", "y"), c("e", "f", "g", "h")); x[1,1,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,0, 1,-1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, 0,-1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); dim(x[0,-1,-1]) }
[1] 0 3 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); dim(x[0,1,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); dim(x[1,0,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); x[-1,-1,1] }
     [,1] [,2] [,3]
[1,]    6   10   14
[2,]    7   11   15
[3,]    8   12   16

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); x[-1,1,3] }
[1] 34 35 36

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:64; dim(x)<-c(4,4,4); x[1,1,3] }
[1] 33

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(1,2,4); dim(x[0,,-1]) }
[1] 0 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(1,2,4); dim(x[0,1,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(1,2,4); dim(x[1,0,-1]) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(1,2,4); dim(x[1,0,3]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[1,0,1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1, 1] }
Error in x[1, 1, 1, 1] : incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(2,2,2); x[42,1,1] }
Error: subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testAccess
#{ x<-1:8; dim(x)<-c(2,2,2); x[[, 1, 1]] }
Error in x[[, 1, 1]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a <- array(); dim(a) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a = array(); is.na(a[1]) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a = array(); is.null(dimnames(a)); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a = array(); length(a) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ a = array(1:10, dim = c(2,6)); length(a) }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ array(NA, dim=c(-2,-2)); }
Error in array(NA, dim = c(-2, -2)) : the dims contain negative values

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ array(NA, dim=c(-2,2)); }
Error in array(NA, dim = c(-2, 2)) :
  negative length vectors are not allowed

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ dim(array(NA, dim=c(2.1,2.9,3.1,4.7))) }
[1] 2 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayBuiltin
#{ length(array(NA, dim=c(1,0,2,3))) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); a = dim(a[,1,]); c(length(a),a[1],a[2]) }
[1] 2 3 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); a = dim(a[1,1,1, drop = FALSE]); c(length(a),a[1],a[2],a[3]) }
[1] 3 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); a[2,2]; }
Error in a[2, 2] : incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); is.null(dim(a[1,1,1])) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1,c(3,3,3)); is.null(dim(a[1,1,])) } 
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1:27, c(3,3,3)); b = a[,,]; d = dim(b); c(d[1],d[2],d[3]) }
[1] 3 3 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1:27, c(3,3,3)); c(a[1],a[27],a[22],a[6]) }
[1]  1 27 22  6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ a = array(1:27,c(3,3,3)); c(a[1,1,1],a[3,3,3],a[1,2,3],a[3,2,1]) }
[1]  1 27 22  6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(1:4, dim=c(4,1,1)) ; x <- m[[2,1,1,drop=FALSE]] ; is.null(dim(x)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- dim(m[1:2,1,1,drop=FALSE]) ; c(x[1],x[2],x[3]) }
[1] 2 1 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- dim(m[1:2,1,1]) ; is.null(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,1] ; c(x[1],x[2]) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,integer()] ; d <- dim(x) ; c(d[1],d[2]) }
[1] 2 0

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,integer()] ; d <- dim(x) ; length(x) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=0, 0, -1]) }
[1] 1 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=FALSE, 0, -1]) }
[1] 1 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=FALSE, 0, drop=TRUE, -1]) }
Error in x[1, 1, drop = FALSE, 0, drop = TRUE, -1] :
  incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=c(0,2), 0, -1]) }
[1] 1 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=integer(), 0, -1]) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySimpleRead
#{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,drop=FALSE, 1, drop=TRUE, -1]) }
[1] 1 1 2 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ array(1,c(3,3,3))[1,1,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ array(1,c(3,3,3))[[,,]]; }
Error in array(1, c(3, 3, 3))[[, , ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ array(1,c(3,3,3))[[1,1,1]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ array(1,c(3,3,3))[[c(1,2),1,1]]; }
Error in array(1, c(3, 3, 3))[[c(1, 2), 1, 1]] :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ m <- array(1:24, dim=c(2,3,4)) ; f <- function(i) { m[,,i] } ; f(1) ; f(2) ; dim(f(1:2)) }
[1] 2 3 2

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ m <- array(1:24, dim=c(2,3,4)) ; f <- function(i) { m[,,i] } ; f(1[2]) ; f(3) }
     [,1] [,2] [,3]
[1,]   13   15   17
[2,]   14   16   18

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ m <- array(1:24, dim=c(2,3,4)) ; m[,,2,drop=FALSE] }
, , 1

     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArraySubsetAndSelection
#{ m <- array(1:24, dim=c(2,3,4)) ; m[,,2] }
     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdate
#{ a = matrix(1,2,2); a[1,2] = 3; a[1,2] == 3; }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdateIgnore
#{ a = array(1,c(3,3,3)); a[1,2,3] = 3; a }
, , 1

     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    1    1    1

, , 2

     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    1    1    1

, , 3

     [,1] [,2] [,3]
[1,]    1    3    1
[2,]    1    1    1
[3,]    1    1    1


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdateIgnore
#{ a = array(1,c(3,3,3)); b = a; b[1,2,3] = 3; c(a[1,2,3],b[1,2,3]) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdateIgnore
#{ a = array(1,c(3,3,3)); c(a[1,2,3],a[1,2,3]) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testArrayUpdateIgnore
#{ x <- array(c(1,2,3), dim=c(3,1,1)) ; x[1:2,1,1] <- sqrt(x[2:1]) ; c(x[1] == sqrt(2), x[2], x[3]) }
[1] 1 1 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testBugIfiniteLoopInGeneralizedRewriting
#{ m <- array(1:3, dim=c(3,1,1)) ; f <- function(x,v) { x[1:2,1,1] <- v ; x } ; f(m,10L) ; f(m,10) ; f(m,c(11L,12L)); c(m[1,1,1],m[2,1,1],m[3,1,1]) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitionsIgnore
#{ m <- matrix() ; m }
     [,1]
[1,]   NA

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitionsIgnore
#{ m <- matrix(1:6, ncol=3, byrow=TRUE) ; m }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitionsIgnore
#{ m <- matrix(1:6, nrow=2, byrow=TRUE) ; m }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitionsIgnore
#{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitionsIgnore
#{ matrix( (1:6) * (1+3i), nrow=2 ) }
     [,1]  [,2]  [,3]
[1,] 1+3i 3+ 9i 5+15i
[2,] 2+6i 4+12i 6+18i

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testDefinitionsIgnore
#{ matrix( as.raw(101:106), nrow=2 ) }
     [,1] [,2] [,3]
[1,]   65   67   69
[2,]   66   68   6a

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1.3,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1.5,c(3,3,3)); a[1,2,3] = "2+3i"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1L,c(3,3,3)); a[1,2,3] = "2+3i"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1L,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(1L,c(3,3,3)); a[1,2,3] = 8.1; typeof(a[1,2,3]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(TRUE,c(3,3,3)); a[1,2,3] = "2+3i"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 8.1; typeof(a[1,2,3]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testLhsCopy
#{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 8L; typeof(a[1,2,3]) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixBuiltin
#{ length(matrix()) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSimpleRead
#{ a = matrix(1,3,3); is.null(dim(a[1,])); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelection
#{ matrix(1,3,3)[1,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelection
#{ matrix(1,3,3)[[1,1]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelectionIgnore
#{  m <- matrix(1:6, nrow=2) ;  m[1,NULL] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelectionIgnore
#{ matrix(1,3,3)[[,]]; }
Error in matrix(1, 3, 3)[[, ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMatrixSubsetAndSelectionIgnore
#{ matrix(1,3,3)[[c(1,2),1]]; }
Error in matrix(1, 3, 3)[[c(1, 2), 1]] :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdate
#{ a = matrix(1,3,3); a[,1] = c(3,4,5); c(a[1,1],a[2,1],a[3,1]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdate
#{ a = matrix(1,3,3); a[1,] = c(3,4,5); c(a[1,1],a[1,2],a[1,3]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdateIgnore
#{ a = array(1,c(3,3,3)); a[,1,1] = c(3,4,5); c(a[1,1,1],a[2,1,1],a[3,1,1]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdateIgnore
#{ a = array(1,c(3,3,3)); a[1,,1] = c(3,4,5); c(a[1,1,1],a[1,2,1],a[1,3,1]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdateIgnore
#{ a = array(1,c(3,3,3)); a[1,,] = matrix(1:9,3,3); c(a[1,1,1],a[1,3,1],a[1,3,3]) }
[1] 1 3 9

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testMultiDimensionalUpdateIgnore
#{ a = array(1,c(3,3,3)); a[1,1,] = c(3,4,5); c(a[1,1,1],a[1,1,2],a[1,1,3]) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array("3+2i",c(3,3,3)); b = 2+3i; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array("3+2i",c(3,3,3)); b = 7L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array("3+2i",c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "character" "character"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(1.7,c(3,3,3)); b = 3L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "double" "double"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(1.7,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "double" "double"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(3+2i,c(3,3,3)); b = 4.2; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "complex" "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(3+2i,c(3,3,3)); b = 4L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "complex" "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(3+2i,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "complex" "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ a = array(7L,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }
[1] "integer" "integer"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testRhsCopy
#{ m <- array(c(1+1i,2+2i,3+3i), dim=c(3,1,1)) ; m[1:2,1,1] <- c(100L,101L) ; m ; c(typeof(m[1,1,1]),typeof(m[2,1,1])) }
[1] "complex" "complex"

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testSelection
#{ m <- matrix(1:6, nrow=2) ; m[upper.tri(m)] }
[1] 3 5 6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testSelection
#{ m <- matrix(c(1,2,3,4,5,6), nrow=3) ; m[0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testSelection
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[0] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-as.character(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to character) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-as.complex(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to complex) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-as.double(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#({ x<-as.logical(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to logical) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{  m <- array(1:3, dim=c(3,1,1)) ; f <- function(x,v) { x[[2,1,1]] <- v ; x } ; f(m,10L) ; f(m,10) ; x <- f(m,11L) ; c(x[1],x[2],x[3]) }
[1]  1 11  3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ a <- 1:9 ; a[, , 1] <- 10L }
Error in a[, , 1] <- 10L : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ a <- 1:9 ; a[, 1] <- 10L }
Error in a[, 1] <- 10L : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ a <- 1:9 ; a[1, 1, 1] <- 10L }
Error in a[1, 1, 1] <- 10L : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ a <- 1:9 ; a[1, 1] <- 10L }
Error in a[1, 1] <- 10L : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- array(1:24, dim=c(2,3,4)) ; m[,,4] <- 10:15 ; m[,,4] }
     [,1] [,2] [,3]
[1,]   10   12   14
[2,]   11   13   15

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2) ; m[, 1] = c(1, 2, 3, 4) ; m }
Error in m[, 1] = c(1, 2, 3, 4) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2) ; m[,1] = 7 ; m }
     [,1] [,2]
[1,]    7    1
[2,]    7    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2) ; m[,1] = c(10,11) ; m }
     [,1] [,2]
[1,]   10    1
[2,]   11    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2) ; m[1,] = 7 ; m }
     [,1] [,2]
[1,]    7    7
[2,]    1    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1,2,2); m[1,1] = 6; m }
     [,1] [,2]
[1,]    6    1
[2,]    1    1

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:100, nrow=10) ; z <- 1; s <- 0 ; for(i in 1:3) { m[z <- z + 1,z <- z + 1] <- z * z * 1000 } ; sum(m) }
[1] 39918

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1, c(-1,-10)) ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,-1) ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,c(-1,-10)) ; m <- f(-1,2) ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2   10    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,c(-1,-10)) ; m <- f(1,-1) ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(2,1:3) ; m <- f(1,-2) ; m }
     [,1] [,2] [,3]
[1,]   10    3   10
[2,]   10   10   10

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[, 2] <- integer() }
Error in m[, 2] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[,2:3] <- 10:11 ; m }
     [,1] [,2] [,3]
[1,]    1   10   10
[2,]    2   11   11

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[,2] <- 10:11 ; m }
     [,1] [,2] [,3]
[1,]    1   10    5
[2,]    2   11    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[,integer()] <- integer() ; m }
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[1, 2] <- 1:3 }
Error in m[1, 2] <- 1:3 :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[1, 2] <- integer() }
Error in m[1, 2] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[[1, 1]] <- integer() }
Error in m[[1, 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[[1:2, 1]] <- integer() }
Error in m[[1:2, 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[[1:2,1]] <- 1 }
Error in `[[<-`(`*tmp*`, 1:2, 1, value = 1) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=2) ; m[[integer(),1]] <- 1 }
Error in `[[<-`(`*tmp*`, integer(), 1, value = 1) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(1:6, nrow=3) ; m[2] <- list(100) ; m }
[[1]]
[1] 1

[[2]]
[1] 100

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
[1] 5

[[6]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(as.double(1:6), nrow=2) ; mi <- matrix(1:6, nrow=2) ; f <- function(v,i,j) { v[i,j] <- 100 ; v[i,j] * i * j } ; f(m, 1L, 2L) ; f(m,1L,-1)  }
[1] -100 -100

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(as.double(1:6), nrow=2) ; mi <- matrix(1:6, nrow=2) ; f <- function(v,i,j) { v[i,j] <- 100 ; v[i,j] * i * j } ; f(m, 1L, 2L) ; f(m,1L,TRUE)  }
[1] 100 100 100

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[2] <- list(100) ; m }
     [,1] [,2]
[1,] 1    4
[2,] 100  5
[3,] 3    6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[[2]] <- list(100) ; m }
     [,1]   [,2]
[1,] 1      4
[2,] List,1 5
[3,] 3      6

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,4,6)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x <- array(c(1,2,3), dim=c(3,1)) ; x[1:2,1] <- 2:1 ; x }
     [,1]
[1,]    2
[2,]    1
[3,]    3

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1.1:8.8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x }
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:16; dim(x)<-c(2,2,2,2); y<-c(101:108); dim(y)<-c(2,4); x[1:2, 1:2, 1] <- y; x }
Error in x[1:2, 1:2, 1] <- y : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x }
Error in x[1, 1, 1] = as.raw(42) :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); x[] = 42; x }
, , 1

     [,1] [,2]
[1,]   42   42
[2,]   42   42

, , 2

     [,1] [,2]
[1,]   42   42
[2,]   42   42


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); x[] = c(42,7); x }
, , 1

     [,1] [,2]
[1,]   42   42
[2,]    7    7

, , 2

     [,1] [,2]
[1,]   42   42
[2,]    7    7


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:102); z<-(x[1:2,c(1,2,0),1]<-y); x }
, , 1

     [,1] [,2]
[1,]  101  101
[2,]  102  102

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); x[1, 1] <- y; x }
Error in x[1, 1] <- y : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); x[1:2,1:2,1]<-y; x }
, , 1

     [,1] [,2]
[1,]  101  103
[2,]  102  104

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[0,5,1] <- y); x }
Error in `[<-`(`*tmp*`, 0, 5, 1, value = 101:104) :
  subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2, c(1, 2, 1), 1] <- y); x }
Error in x[1:2, c(1, 2, 1), 1] <- y :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2, c(1, NA), 1] <- y); x }
Error in x[1:2, c(1, NA), 1] <- y :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,1:2,0]<-y); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,1:2,c(0,0)]<-y); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,1),1]<-y); x }
, , 1

     [,1] [,2]
[1,]  103    3
[2,]  104    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,2,0),1]<-y); x }
, , 1

     [,1] [,2]
[1,]  101  103
[2,]  102  104

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,2,NA),1]<-y); x }
Error in x[1:2, c(1, 2, NA), 1] <- y :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:120); z<-(x[1:2, c(1, 2, 0), 1] <- y); x }
Error in x[1:2, c(1, 2, 0), 1] <- y :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-1:8; dim(x)<-c(2,2,2); z<-(x[1,1,1]<-42); z }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ x<-as.double(1:8); dim(x)<-c(2,2,2); x[1,1,1]<-42L; x }
, , 1

     [,1] [,2]
[1,]   42    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ z<-1:4; y<-((names(z)<-101:104) >  1) }

##com.oracle.truffle.r.test.simple.TestSimpleArrays.testUpdate
#{ z<-1:4; y<-((z[1]<-42) >  1) }

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testAssign1
#{ a<-1; a }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testAssign1
#{ a<-1; a<-a+1; a }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testAssign2
#a <- 42; f <- function() { a <- 13; a <<- 37; }; f(); a;
[1] 37

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testAssignBuiltin
#{ x <- 3 ; f <- function() { assign("x", 4) ; h <- function() { assign("z", 5) ; g <- function() { x <<- 10 ; x } ; g() } ; h() } ; f() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function() { if (FALSE) { c <- 1 } ; g <- function() { c } ; g() } ; typeof(f()) }
[1] "builtin"

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() }
Error in g() : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function(i) { if (i==1) { c <- 1 ; x <- 1 } ; if (i!=2) { x } else { c }} ; f(1) ; f(1) ; typeof(f(2)) }
[1] "builtin"

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function(i) { if (i==1) { c <- 1 } ; c } ; f(1) ; typeof(f(2)) }
[1] "builtin"

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function(i) { if (i==1) { x <- 1 } ; x } ; f(1) ; f(1) ; f(2) }
Error in f(2) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ f <- function(i) { if (i==1) { x <- 1 } ; x } ; f(1) ; f(2) }
Error in f(2) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ nonexistent }
Error: object 'nonexistent' not found

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testMisc
#{ x <- 3 ; f <- function() { assign("x", 4) ; g <- function() { assign("y", 3) ; hh <- function() { assign("z", 6) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; hh() } ; g()  } ; f() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ a <- c(0,0,0) ; f <- function() { g <- function() { a[2] <<- 9 } ; g() } ; u <- function() { a <- c(1,1,1) ; f() ; a } ; r <- a ; s <- u() ; t <- a ; list(r,s,t) }
[[1]]
[1] 0 0 0

[[2]]
[1] 1 1 1

[[3]]
[1] 0 9 0


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ a <- c(0,0,0) ; u <- function() { a <- c(1,1,1) ; f <- function() { g <- function() { a[2] <<- 9 } ; g() } ; f() ; a } ; list(a,u()) }
[[1]]
[1] 0 0 0

[[2]]
[1] 1 9 1


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ a <- c(1,2,3) ; f <- function() { a[2] <<- 4 } ; f() ; a }
[1] 1 4 3

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- 2 ; f <- function() { b <- 4 } ; f() ; b }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- 2 ; f <- function() { b <<- 4 } ; f() ; b }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- 2 ; f <- function() { b[2] <- 4 } ; f() ; b }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- 2 ; f <- function() { b[2] <<- 4 } ; f() ; b }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ b <- c(1,1) ; f <- function(v,x) { g <- function(y) { v[y] <<- 2 } ; g(x) ; v } ; k <- f(b,1) ; l <- f(b,2) ; list(k,l,b) }
[[1]]
[1] 2 1

[[2]]
[1] 1 2

[[3]]
[1] 1 1


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ f <- function() { x <<- 2 } ; f() ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ f <- function(a) { g <- function(x,y) { a[x] <<- y } ; g(2,4) ; a } ; u <- c(1,2,3) ; k <- f(u) ; u <- c(3,2,1) ; l <- f(u) ; list(k,l) }
[[1]]
[1] 1 4 3

[[2]]
[1] 3 4 1


##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ h <- function() { x <- 10 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { x <<- 3 ; x } ; f() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; f <- function() { x <<- 2 ; x } ; c(f(), f()) }
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; f <- function() { x <<- 2 } ; f() ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; g <- function() { f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; g <- function() { x ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleAssignment.testSuperAssign
#{ x <- 10 ; g <- function() { x <- 100 ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }
[1] 100   2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1+1i;  attr(x, "hi") <- 1+2 ; y <- 2:3 ;  x+y }
[1] 3+1i 4+1i

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2 ;  attr(x, "hi") <- 2 ;  !x  }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2;  attr(x, "hi") <- 2 ;  x & x }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- 1:2;  attr(x, "hi") <- 2 ;  x+1:4 }
[1] 2 4 4 6

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- as.raw(1:2);  attr(x, "hi") <- 2 ;  x & x }
[1] 01 02

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagation
#{ x <- c(a=FALSE,b=TRUE) ;  attr(x, "hi") <- 2 ;  !x  }
    a     b
 TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- 1 ; attr(x, "my") <- 2; 2+x }
[1] 3
attr(,"my")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- 1+1i;  attr(x, "hi") <- 1+2 ; y <- 2:3 ; attr(y,"zz") <- 2; x+y }
[1] 3+1i 4+1i
attr(,"zz")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- 1:2 ;  attr(x, "hi") <- 3 ; attr(x, "hihi") <- 10 ; y <- 2:3 ; attr(y,"zz") <- 2; attr(y,"hi") <-3; attr(y,"bye") <- 4 ; x+y }
[1] 3 5
attr(,"zz")
[1] 2
attr(,"hi")
[1] 3
attr(,"bye")
[1] 4
attr(,"hihi")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- 1:2;  attr(x, "hi") <- 2 ;  x+1 }
[1] 2 3
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- 1:2;  attr(x, "hi") <- 2 ; y <- 2:3 ; attr(y,"hello") <- 3; x+y }
[1] 3 5
attr(,"hello")
[1] 3
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- 1;  attr(x, "hi") <- 1+2 ; y <- 2:3 ; attr(y, "zz") <- 2; x+y }
[1] 3 4
attr(,"zz")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- c(1+1i, 2+2i) ;  attr(x, "hi") <- 3 ; attr(x, "hihi") <- 10 ; y <- c(2+2i, 3+3i) ; attr(y,"zz") <- 2; attr(y,"hi") <-3; attr(y,"bye") <- 4 ; x+y }
[1] 3+3i 5+5i
attr(,"zz")
[1] 2
attr(,"hi")
[1] 3
attr(,"bye")
[1] 4
attr(,"hihi")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- c(1+1i,2+2i);  attr(x, "hi") <- 3 ; y <- 2:3 ; attr(y,"zz") <- 2; x+y }
[1] 3+1i 5+2i
attr(,"zz")
[1] 2
attr(,"hi")
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- c(1+1i,2+2i);  names(x)<-c("a", "b"); attr(x, "hi") <- 3 ; y <- 2:3 ; attr(y,"zz") <- 2; attributes(x+y) }
$zz
[1] 2

$hi
[1] 3

$names
[1] "a" "b"


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- c(1+1i,2+2i,3+3i,4+4i);  dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); attr(x, "hi") <- 3 ; y <- 2:5 ; attr(y,"zz") <- 2; attributes(x+y) }
$zz
[1] 2

$hi
[1] 3

$dim
[1] 2 2

$dimnames
$dimnames[[1]]
[1] "a" "b"

$dimnames[[2]]
[1] "c" "d"



##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- c(1+1i,2+2i,3+3i,4+4i);  dim(x)<-c(2,2); names(x)<-c("a", "b"); attr(x, "hi") <- 3 ; y <- 2:5 ; attr(y,"zz") <- 2; attributes(x+y) }
$zz
[1] 2

$hi
[1] 3

$dim
[1] 2 2


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- c(a=1) ; y <- c(b=2,c=3) ; x + y }
b c
3 4

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- c(a=1) ; y <- c(b=2,c=3) ; y + x }
b c
3 4

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArithmeticPropagationIgnore
#{ x <- c(a=1,b=2) ;  attr(x, "hi") <- 2 ;  -x  }
 a  b
-1 -2
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ a <- array(c(1,1), dim=c(1,2)) ; attr(a, "a") <- 1 ;  a[1,1] <- 1+1i ; a }
     [,1] [,2]
[1,] 1+1i 1+0i
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ m <- matrix(rep(1,4), nrow=2) ; attr(m, "a") <- 1 ;  m[2,2] <- 1+1i ; m }
     [,1] [,2]
[1,] 1+0i 1+0i
[2,] 1+0i 1+1i
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- TRUE ; attr(x, "myatt") <- 1; x[1] <- 2 ; x }
[1] 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- TRUE ; attr(x, "myatt") <- 1; x[2] <- 2 ; x }
[1] 1 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; x["a"] <- 2 ; x }
a b
2 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; x[c(1,1)] }
a a
1 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testArrayPropagation
#{ x <- c(a=TRUE, b=FALSE) ; attr(x, "myatt") <- 1; x[2] <- 2 ; x }
a b
1 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- 1:3 ; attr(m,"a") <- 1 ;  t(m) }
     [,1] [,2] [,3]
[1,]    1    2    3
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- matrix(1:6, nrow=2) ; attr(m,"a") <- 1 ;  diag(m) <- c(1,1) ; m }
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    1    6
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- matrix(1:6, nrow=2) ; attr(m,"a") <- 1 ;  t(m) }
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6
attr(,"a")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ m <- matrix(rep(1,4), nrow=2) ; attr(m,"a") <- 1 ;  upper.tri(m) }
      [,1]  [,2]
[1,] FALSE  TRUE
[2,] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- "a" ; attr(x, "myatt") <- 1; toupper(x) }
[1] "A"
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; c(x, x, x) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; cumsum(c(x, x, x)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; min(x) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; rep(x,2) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; x%o%x }
     [,1]
[1,]    1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- 1 ; attr(x, "myatt") <- 1; x:x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1) ; attr(x, "myatt") <- 1; log10(x) }
a
0
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1) ; attr(x, "myatt") <- 1; nchar(x) }
a
1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; abs(x) }
a b
1 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; array(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; matrix(x) }
     [,1]
[1,]    1
[2,]    2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; order(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; rev(x) }
b a
2 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; sum(x) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; unlist(list(x,x)) }
a b a b
1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1; unlist(x) }
a b
1 2
attr(,"myatt")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x <- c(hello=1, hi=9) ; attr(x, "hi") <- 2 ;  sqrt(x) }
hello    hi
    1     3
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x<-1:8; dim(x)<-c(2, 2, 2); names(x)<-101:108; attr(x, "dimnames")<-list(201:202, 203:204, 205:206); attr(x, "foo")<-"foo"; y<-x; attributes(x>y) }
$dim
[1] 2 2 2

$dimnames
$dimnames[[1]]
[1] "201" "202"

$dimnames[[2]]
[1] "203" "204"

$dimnames[[3]]
[1] "205" "206"



##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testBuiltinPropagation
#{ x<-1:8; dim(x)<-c(2, 2, 2); names(x)<-101:108; attr(x, "dimnames")<-list(c("201", "202"), c("203", "204"), c("205", "206")); attr(x, "foo")<-"foo"; y<-x; attributes(x>y) }
$dim
[1] 2 2 2

$dimnames
$dimnames[[1]]
[1] "201" "202"

$dimnames[[2]]
[1] "203" "204"

$dimnames[[3]]
[1] "205" "206"



##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testCastsIgnore
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; as.character(x) }
[1] "1" "2"

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testCastsIgnore
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; as.double(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testCastsIgnore
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 1 ; as.integer(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- "s" ; attr(x, "hi") <- 2 ;  x }
[1] "s"
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- 1 ; attr(x, "hi") <- 2 ;  x }
[1] 1
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- 1+1i ; attr(x, "hi") <- 2 ;  x }
[1] 1+1i
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- 1L ; attr(x, "hi") <- 2 ;  x }
[1] 1
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- TRUE ; attr(x, "hi") <- 2 ;  x }
[1] TRUE
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- as.raw(10) ; attr(x, "hi") <- 2 ;  x }
[1] 0a
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(1, 2) ; attr(x, "hi") <- 2; x }
[1] 1 2
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(1L, 2L) ; attr(x, "hi") <- 2; attr(x, "hello") <- 1:2 ;  x }
[1] 1 2
attr(,"hi")
[1] 2
attr(,"hello")
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(1L, 2L) ; attr(x, "hi") <- 2; x }
[1] 1 2
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(hello=1) ; attr(x, "hi") <- 2 ;  attr(x,"names") <- "HELLO" ; x }
HELLO
    1
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x <- c(hello=9) ; attr(x, "hi") <- 2 ;  y <- x ; y }
hello
    9
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x<-1; dim(x)<-1; y<-(attr(x, "dimnames")<-list(1)); y }
[[1]]
[1] "1"


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x<-1; dim(x)<-1; y<-list(a="1"); attr(y, "foo")<-"foo"; z<-(attr(x, "dimnames")<-y); z }
$a
[1] "1"

attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testDefinition
#{ x<-1; dim(x)<-1; y<-list(a="1"); z<-(attr(x, "dimnames")<-y); z }
$a
[1] "1"


##com.oracle.truffle.r.test.simple.TestSimpleAttributes.testOtherPropagation
#{ x <- 1:2;  attr(x, "hi") <- 2 ;  x == x }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((-0-1i)/(0+0i)) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((-1-0i)/(0+0i)) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((0+0i)/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((1/0)*(1-0i)) }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs((1:2)[3]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(-1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(-100) }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(-1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(0/0) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(100) }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(NA+0.1) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1, -2, 3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1, -2, NA)) }
[1]  1  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1, 2, 3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1L, -2L, 3L)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1L, -2L, NA)) }
[1]  1  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAbs
#{ abs(c(1L, 2L, 3L)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, FALSE, NA,  na.rm=FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, FALSE, NA,  na.rm=TRUE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, TRUE, NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, TRUE, NA,  na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(TRUE, TRUE, TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ all(logical(0)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAll
#{ v <- c("abc", "def") ; w <- c("abc", "def") ; all(v == w) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(FALSE, NA,  na.rm=FALSE) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(NA, NA, NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, FALSE, NA,  na.rm=TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, TRUE, NA) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, TRUE, NA,  na.rm=TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(TRUE, TRUE, TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAny
#{ any(logical(0)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testApply
#{ m <- matrix(c(1,2,3,4,5,6),2) ; apply(m,1,sum) }
[1]  9 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testApply
#{ m <- matrix(c(1,2,3,4,5,6),2) ; apply(m,2,sum) }
[1]  3  7 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ character(1L) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ double() }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ double(3) }
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ integer() }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ logical() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ logical(3L) }
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testArrayConstructors
#{ raw() }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(1) }
[1] "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(1:3) }
[1] "1" "2" "3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(1L) }
[1] "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(NULL) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsCharacter
#{ as.character(TRUE) }
[1] "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("-1+5i") }
[1] -1+5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("-1-5i") }
[1] -1-5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("0x42") }
[1] 66+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("1+5i") }
[1] 1+5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("Inf") }
[1] Inf+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("NaN") }
[1] NaN+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex("TRUE") }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(0) }
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(0/0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(TRUE) }
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(c("1","hello")) }
[1] 1+0i   NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ as.complex(c(0/0, 0/0)) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.complex(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsComplex
#{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.complex(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double("1.27") }
[1] 1.27

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double("TRUE") }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(10+2i) }
[1] 10
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(as.raw(1)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(c("1","hello")) }
[1]  1 NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ as.double(c(3+3i, 4+4i)) }
[1] 3 4
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.double(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsDouble
#{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.double(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer("1") }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer("TRUE") }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(-0/0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(-10000000000) }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(0/0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(1.1:5.1) }
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(10+2i) }
[1] 10
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(10000000000) }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(10000000000000) }
[1] NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(as.raw(1)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(as.raw(c(1,2,3,4))) }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c("1","2")) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c("1","hello")) }
[1]  1 NA
Warning message:
NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c(1,2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c(1.0,2.5,3.9)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(c(3+3i, 4+4i)) }
[1] 3 4
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(list(1,2,3,list())) }
[1]  1  2  3 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(list(c(1),2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(list(integer(),2,3)) }
[1] NA  2  3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ as.integer(list(list(1),2,3)) }
[1] NA  2  3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.integer(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsInteger
#{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.integer(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical("TRUE") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical("dummy") }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical("false") }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical(1) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical(10+2i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical(c("1","hello")) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ as.logical(c(3+3i, 4+4i)) }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.logical(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsLogical
#{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, "foo")<-"foo"; y<-as.logical(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(1) }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(1.1) }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(1L) }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(NULL) }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(c(1, 2, 3)) }
[1] 01 02 03

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(c(1L, 2L, 3L)) }
[1] 01 02 03

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(list("1", 2L, 3.4)) }
[1] 01 02 03

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRaw
#{ as.raw(list(1,2,3)) }
[1] 01 02 03

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw("test") }
[1] 00
Warning messages:
1: NAs introduced by coercion
2: out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(-1) }
[1] 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(-1L) }
[1] 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(1+1i) }
[1] 01
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(NA) }
[1] 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1+3i, -2-1i, NA)) }
[1] 01 00 00
Warning messages:
1: imaginary parts discarded in coercion
2: out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1, -2, 3)) }
[1] 01 00 03
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1,1000,NA)) }
[1] 01 00 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1L, -2L, 3L)) }
[1] 01 00 03
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsRawIgnore
#{ as.raw(c(1L, -2L, NA)) }
[1] 01 00 00
Warning message:
out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#x<-c(a=1.1, b=2.2); as.vector(x, "raw")
[1] 01 02

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#x<-c(a=1L, b=2L); as.vector(x, "complex")
[1] 1+0i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo") }
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "bar") }
Error in as.vector(x, mode) : invalid 'mode' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "character") }
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "double") }
[1] NA
Warning message:
In as.vector("foo", "double") : NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "integer") }
[1] NA
Warning message:
In as.vector("foo", "integer") : NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "list") }
[[1]]
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "logical") }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "numeric") }
[1] NA
Warning message:
In as.vector("foo", "numeric") : NAs introduced by coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector("foo", "raw") }
[1] 00
Warning messages:
1: In as.vector("foo", "raw") : NAs introduced by coercion
2: In as.vector("foo", "raw") :
  out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ as.vector(c("foo", "bar"), "raw") }
[1] 00 00
Warning messages:
1: In as.vector(c("foo", "bar"), "raw") : NAs introduced by coercion
2: In as.vector(c("foo", "bar"), "raw") :
  out-of-range values treated as 0 in coercion to raw

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ x<-1:4; dim(x)<-c(2, 2); dimnames(x)<-list(c("a", "b"), c("c", "d")); y<-as.vector(x, "list"); y }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ x<-c(a=1, b=2); as.vector(x, "list") }
$a
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ x<-c(a=FALSE, b=TRUE); attr(x, "foo")<-"foo"; y<-as.vector(x); attributes(y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAsVector
#{ x<-c(a=FALSE, b=TRUE); attr(x, "foo")<-"foo"; y<-as.vector(x, "list"); attributes(y) }
$names
[1] "a" "b"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ attach(.Platform, 2); file.sep }
[1] "/"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ detach("missing"); x }
Error in detach("missing") : invalid 'name' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", "abc", e); attach(e, 2); x }
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", 1, e); attach(e, 2); x; detach(2) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", 1, e); attach(e, 2); x; detach(2); x }
Error: object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", 1, e); attach(e, name = "mine"); x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttach
#{ e <- new.env(); assign("x", 1, e); attach(e, name = "mine"); x; detach("mine") }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1 ; attributes(x) <- list(hi=3, hello=2) ; x }
[1] 1
attr(,"hi")
[1] 3
attr(,"hello")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1 ; attributes(x) <- list(hi=3, names="name") ; x }
name
   1
attr(,"hi")
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1:2; attr(x, "aa") <- 1 ; attr(x, "ab") <- 2; attr(x, "bb") <- 3; attr(x, "b") }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1:3 ; attr(x, "myatt") <- 2:4 ; attr(x, "myatt1") <- "hello" ; attributes(x) }
$myatt
[1] 2 3 4

$myatt1
[1] "hello"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1:3 ; attr(x, "myatt") <- 2:4 ; attributes(x) }
$myatt
[1] 2 3 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1:3 ; attr(x, "myatt") <- 2:4 ; y <- x; attr(x, "myatt1") <- "hello" ; attributes(y) }
$myatt
[1] 2 3 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1; attributes(x) <- list(my = 1) ; y <- x; attributes(y) <- list(his = 2) ; x }
[1] 1
attr(,"my")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- 1; names(x) <- "hello" ; attributes(x) }
$names
[1] "hello"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(a=1, b=2) ; attr(x, "mya") <- 1; attr(x, "b") <- 2; attr(x, "m") }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(a=1, b=2) ; attr(x, "myatt") <- 2:4 ; y <- x; attr(x, "myatt1") <- "hello" ; attributes(y) }
$names
[1] "a" "b"

$myatt
[1] 2 3 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(a=1, b=2) ; attr(x, "na") }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(a=1, b=2) ; attr(x, "names") }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(1, hi = 2) ; x }
Error in attributes(x) <- list(1, hi = 2) :
  attempt to use zero-length variable name

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(1, hi = 2, 3) ; x }
Error in attributes(x) <- list(1, hi = 2, 3) :
  all attributes must have names [3 does not]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(hi = 1, 2) ; x }
Error in attributes(x) <- list(hi = 1, 2) :
  all attributes must have names [2 does not]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(hi=1) ;  attributes(x) <- NULL ; x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(hi=1, names=NULL, hello=3, hi=2, hello=NULL) ; x }
[1] 1
attr(,"hi")
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(ho = 1, 2, 3) ; x }
Error in attributes(x) <- list(ho = 1, 2, 3) :
  all attributes must have names [2 does not]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; attributes(x) <- list(names=NULL) ; x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x <- c(hello=1) ; y<-list(1,2); names(y)<-c("hi", ""); attributes(x)<-y; x }
Error in attributes(x) <- y : all attributes must have names [2 does not]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ x<-1; attributes(x)<-list(names="c", dim=NULL); attributes(x) }
$names
[1] "c"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testAttributes
#{ z <- 1; attr(z,"a") <- 1; attr(z,"b") <- 2; attr(z,"c") <- 3 ; attr(z,"b") <- NULL ; z }
[1] 1
attr(,"a")
[1] 1
attr(,"c")
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.character(as.complex(1:2)) }
[1] "1+0i" "2+0i"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.character(as.double(1:5)) }
[1] "1" "2" "3" "4" "5"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.complex(as.character(c(1+1i,1+1i))) }
[1] 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.complex(as.integer(c(1+1i,1+1i))) }
[1] 1+0i 1+0i
Warning message:
imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.complex(as.logical(c(1+1i,1+1i))) }
[1] 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.double(as.logical(c(10,10))) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.integer(as.logical(-1:1)) }
[1] 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.list(3:6) }
[[1]]
[1] 3

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.list(c(1,2,3,2,1)) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 2

[[5]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.list(list(1,2,"eep")) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] "eep"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.matrix(1) }
     [,1]
[1,]    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.matrix(1:3) }
     [,1]
[1,]    1
[2,]    2
[3,]    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.raw(as.logical(as.raw(c(1,2)))) }
[1] 01 01

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ as.vector(list(1,2,3), mode="integer") }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ k <- as.list(3:6) ; l <- as.list(1) ; list(k,l) }
[[1]]
[[1]][[1]]
[1] 3

[[1]][[2]]
[1] 4

[[1]][[3]]
[1] 5

[[1]][[4]]
[1] 6


[[2]]
[[2]][[1]]
[1] 1



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ l <- 1 ; attr(l, "my") <- 1; as.list(l) }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ l <- c(x=1) ; as.list(l) }
$x
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ l <- list(1) ; attr(l, "my") <- 1; as.list(l) }
[[1]]
[1] 1

attr(,"my")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m <- matrix(1:6, nrow=2) ; as.double(m) }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; as.integer(m) }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; as.logical(m) }
[1] TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(1:6, nrow=3) ; as.integer(m) }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(1:6, nrow=3) ; as.vector(m, "any") }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(1:6, nrow=3) ; as.vector(mode = "integer", x=m) }
[1] 1 2 3 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(as.raw(c(1,2,3,4)), nrow=2) ; as.vector(m) }
[1] 01 02 03 04

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c("a","b","c","d"), nrow=2) ; as.vector(m) }
[1] "a" "b" "c" "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1+1i,2+2i,3-3i,4-4i), nrow=2) ; as.vector(m) }
[1] 1+1i 2+2i 3-3i 4-4i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,0,1,0), nrow=2) ; as.vector(m, mode = "logical") }
[1]  TRUE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m) }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "character") }
[1] "1" "2" "3" "4"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "complex") }
[1] 1+0i 2+0i 3+0i 4+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "double") }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "numeric") }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = "raw") }
[1] 01 02 03 04

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ m<-matrix(c(TRUE,FALSE,FALSE,TRUE), nrow=2) ; as.vector(m) }
[1]  TRUE FALSE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- 1:2; names(x) <- c("hello","hi") ; as.double(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- 1:3 ; attr(x,"my") <- 10 ; attributes(as.matrix(x)) }
$dim
[1] 3 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- 1:3; z <- as.matrix(x); x }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- c(0,2); names(x) <- c("hello","hi") ; as.logical(x) }
[1] FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCasts
#{ x <- c(1,2); names(x) <- c("hello","hi") ; as.integer(x) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("a") }
a
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("a", "b") }
a b
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("hi",1:3,"hello") }
hi 1 2 3 hello
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat("hi",1[2],"hello",sep="-") }
hi-NA-hello
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat() }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1) }
1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1, "a") }
1 a
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1,2,3) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1,2,sep=".") }
1.2
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1.2,3.4) }
1.2 3.4
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1:3) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1L) }
1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(1L, 2L, 3L) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(2.3) }
2.3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(NULL) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(TRUE) }
TRUE
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(TRUE, c(1,2,3), FALSE, 7, c("a","b"), "x") }
TRUE 1 2 3 FALSE 7 a b x
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c("a","b")) }
a b
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(1,2,3)) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(1,2,3),c("a","b")) }
1 2 3 a b
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(1.2,3.4),5.6) }
1.2 3.4 5.6
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(1L, 2L, 3L)) }
1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(c(TRUE,FALSE), TRUE) }
TRUE FALSE TRUE
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(rep(NA, 8), "Hey","Hey","Goodbye","\n") }
NA NA NA NA NA NA NA NA Hey Hey Goodbye

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ cat(sep=" ", "hello") }
hello
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCat
#{ m <- matrix(as.character(1:6), nrow=2) ; cat(m) }
1 2 3 4 5 6
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCbind
#{ cbind() }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCbind
#{ cbind(1:3,1:3) }
     [,1] [,2]
[1,]    1    1
[2,]    2    2
[3,]    3    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCbind
#{ cbind(1:3,2) }
     [,1] [,2]
[1,]    1    2
[2,]    2    2
[3,]    3    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCbind
#{ m <- matrix(1:6, nrow=2) ; cbind(11:12, m) }
     [,1] [,2] [,3] [,4]
[1,]   11    1    3    5
[2,]   12    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCeiling
#{ ceiling(c(0.2,-3.4,NA,0/0,1/0)) }
[1]   1  -3  NA NaN Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharUtils
#{ tolower(c("Hello","ByE")) }
[1] "hello" "bye"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharUtils
#{ tolower(c()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharUtils
#{ toupper(c("hello","bye")) }
[1] "HELLO" "BYE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCharUtils
#{ toupper(c()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColStatsMatrix
#{ a = colSums(matrix(1:12,3,4)); dim(a) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColStatsMatrix
#{ a = colSums(matrix(1:12,3,4)); length(a) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColStatsMatrix
#{ colSums(matrix(1:12,3,4)) }
[1]  6 15 24 33

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testColumnsRowsStat
#{ m <- matrix(1:6, nrow=2) ; colSums(na.rm = FALSE, x = m) }
[1]  3  7 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 100, 1:3, 200 ) }
[1] 100   1   2   3 200

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 1:3 ) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 1:3, 5, 7:9 ) }
[1] 1 2 3 5 7 8 9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 1:3, 7:9 ) }
[1] 1 2 3 7 8 9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c( 1L:3L ) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("1","b") }
[1] "1" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("1.00","2.00") }
[1] "1.00" "2.00"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("1.00","b") }
[1] "1.00" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("1.2","3.4") }
[1] "1.2" "3.4"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a", "b") }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a", NULL) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a", c("b","c")) }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("a","b","c") }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("d") }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("d", 2L) }
[1] "d" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("d", NULL) }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("d", c(2L,"f")) }
[1] "d" "2" "f"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("g") }
[1] "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("g", 2) }
[1] "g" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("g", NULL) }
[1] "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("g", c(2,2)) }
[1] "g" "2" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("hello", "hi") }
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("j") }
[1] "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("j", NULL) }
[1] "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("j", TRUE) }
[1] "j"    "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c("j", c(TRUE,TRUE)) }
[1] "j"    "TRUE" "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c() }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1+1i, as.raw(10)) }
[1]  1+1i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1+1i,2-3i,4+5i) }
[1] 1+1i 2-3i 4+5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1, 2) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1, NULL) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1, b=2) }
  b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1, c(2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1,z=list(1,b=22,3)) }
[[1]]
[1] 1

$z1
[1] 1

$z.b
[1] 22

$z3
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1.0,1L) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L, 2L) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L, NULL) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L, c(2L,3L)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(1L,1.0) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "a") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "a", NULL) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "d") }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "d", NULL) }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "g") }
[1] "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "g", NULL) }
[1] "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "j") }
[1] "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, "j", NULL) }
[1] "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, 1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, 1, NULL) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, 1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, 1L, NULL) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, TRUE, NULL) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c("a","b")) }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c("d",2L)) }
[1] "d" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c("g",2)) }
[1] "g" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c("j",TRUE)) }
[1] "j"    "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c(1,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c(1L,2L)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL, c(TRUE,FALSE)) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL,1,2,3) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(NULL,NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE, FALSE) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE, NULL) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE, c(FALSE,FALSE)) }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE,1L,1.0,list(3,4)) }
[[1]]
[1] TRUE

[[2]]
[1] 1

[[3]]
[1] 1

[[4]]
[1] 3

[[5]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(TRUE,1L,1.0,list(3,list(4,5))) }
[[1]]
[1] TRUE

[[2]]
[1] 1

[[3]]
[1] 1

[[4]]
[1] 3

[[5]]
[[5]][[1]]
[1] 4

[[5]][[2]]
[1] 5



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a="bar", b="baz") }
    a     b
"bar" "baz"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a="foo") }
    a
"foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1, 2) }
a
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1, b=2) }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1,b=2:3,list(x=FALSE))  }
$a
[1] 1

$b1
[1] 2

$b2
[1] 3

$x
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1:2, 42) }
a1 a2
 1  2 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1:2, b=c(42)) }
a1 a2  b
 1  2 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1:2, b=double()) }
a1 a2
 1  2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=1i, b=2i) }
   a    b
0+1i 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=42) }
 a
42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=7i) }
   a
0+7i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=7i, a=1:2) }
   a   a1   a2
0+7i 1+0i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=FALSE) }
    a
FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=FALSE, b=TRUE) }
    a     b
FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=as.raw(1), b=as.raw(2)) }
 a  b
01 02

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=as.raw(7)) }
 a
07

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(a=c(z=1), 42) }
a.z
  1  42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(as.raw(10),  "test") }
[1] "0a"   "test"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(as.raw(10), as.raw(20)) }
[1] 0a 14

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), "c") }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), "c", c("a","b")) }
[1] "a" "b" "c" "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), NULL) }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), c("c","a")) }
[1] "a" "b" "c" "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("a","b"), c("c","a"), c("b","c")) }
[1] "a" "b" "c" "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), "f") }
[1] "d" "2" "f"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), "f", c("d",2L)) }
[1] "d" "2" "f" "d" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), NULL) }
[1] "d" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), c("f","d")) }
[1] "d" "2" "f" "d"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("d",2L), c("f","d"), c(2L,"f")) }
[1] "d" "2" "f" "d" "2" "f"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), 2) }
[1] "g" "2" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), 2, c("g",2)) }
[1] "g" "2" "2" "g" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), NULL) }
[1] "g" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), c(2,"g")) }
[1] "g" "2" "2" "g"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("g",2), c(2,"g"), c(2,2)) }
[1] "g" "2" "2" "g" "2" "2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), NULL) }
[1] "j"    "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), TRUE) }
[1] "j"    "TRUE" "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), TRUE, c("j",TRUE)) }
[1] "j"    "TRUE" "TRUE" "j"    "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), c(TRUE,"j")) }
[1] "j"    "TRUE" "TRUE" "j"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c("j",TRUE), c(TRUE,"j"), c(TRUE,TRUE)) }
[1] "j"    "TRUE" "TRUE" "j"    "TRUE" "TRUE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), 3) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), 3, c(1,2)) }
[1] 1 2 3 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), NULL) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), c(3,1)) }
[1] 1 2 3 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1,2), c(3,1), c(2,3)) }
[1] 1 2 3 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), 3L) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), 3L, c(1L,2L)) }
[1] 1 2 3 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), NULL) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), c(3L,1L)) }
[1] 1 2 3 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(1L,2L), c(3L,1L), c(2L,3L)) }
[1] 1 2 3 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), FALSE) }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), FALSE, c(TRUE,FALSE)) }
[1]  TRUE FALSE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), NULL) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), c(FALSE,TRUE)) }
[1]  TRUE FALSE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(c(TRUE,FALSE), c(FALSE,TRUE), c(FALSE,FALSE)) }
[1]  TRUE FALSE FALSE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(x=1,2) }
x
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ c(x=1,y=2) }
x y
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ f <- function(x,y) { c(x,y) } ; f(1,1) ; f(1, TRUE) ; f(NULL, NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ f <- function(x,y) { c(x,y) } ; f(1,1) ; f(1, TRUE) }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x <- 1:2 ; names(x) <- c("A",NA) ; c(x,test=x) }
      A    <NA>  test.A test.NA
      1       2       1       2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8;  z<-c(x, integer()); z }
7 8
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; y<-3:4; names(y)<-9:10; z<-c(x, y); z }
 7  8  9 10
 1  2  3  4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; y<-3:4; z<-c(x, y); z }
7 8
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; y<-double(0);  z<-c(x, y); z }
7 8
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; z<-c(3L, x); z }
  7 8
3 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; z<-c(x, 3); attributes(z) }
$names
[1] "7" "8" ""


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; z<-c(x, 3); z }
7 8
1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-1:2; names(x)<-7:8; z<-c(x, 3L); z }
7 8
1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(1);  c(z=x, 42) }
 z
 1 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(y=1);  c(x, 42) }
 y
 1 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(y=1, 2);  c(a=x, 42) }
a.y  a2
  1   2  42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(y=1, z=2);  c(a=x, 42) }
a.y a.z
  1   2  42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(y=1, z=2); names(x)=c("", ""); c(a=x, 42) }
a1 a2
 1  2 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCombine
#{ x<-c(z=1); names(x)=c(""); c(a=x, 42) }
 a
 1 42

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testComplex
#{ complex(3) }
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testComplex
#{ complex(real=1,imag=2) }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testComplex
#{ complex(real=1,imaginary=2) }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testComplexGroupDispatch
#{x<--7+2i;class(x)<-"foo";Complex.foo<-function(z){1;};Im(x);}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ as.integer(cor(c(1,2,3),c(1,2,5))*10000000) }
[1] 9607689

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ cor(c(1,2,3),c(1,2,3)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ cor(cbind(c(1, 1, 1), c(1, 1, 1))) }
     [,1] [,2]
[1,]    1   NA
[2,]   NA    1
Warning message:
In cor(cbind(c(1, 1, 1), c(1, 1, 1))) : the standard deviation is zero

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ cor(cbind(c(1:9,0/0), 101:110)) }
     [,1] [,2]
[1,]    1   NA
[2,]   NA    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCor
#{ cor(cbind(c(3,2,1), c(1,2,3))) }
     [,1] [,2]
[1,]    1   -1
[2,]   -1    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCov
#{ cov(c(1,2,3),c(1,2,3)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCov
#{ cov(c(1,2,3),c(1,2,4)) }
[1] 1.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCov
#{ cov(c(1,2,3),c(1,2,5)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(1:10) }
 [1]  1  3  6 10 15 21 28 36 45 55

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(as.logical(-2:2)) }
[1] 1 2 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(1+1i, NA, 2+3i)) }
[1] 1+1i   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(1+1i,2-3i,4+5i)) }
[1] 1+1i 3-2i 7+3i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(1,2,3)) }
[1] 1 3 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(2000000000L, NA, 2000000000L)) }
[1] 2000000000         NA         NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(TRUE,FALSE,NA,TRUE)) }
[1]  1  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testCumulativeSum
#{ cumsum(c(TRUE,FALSE,TRUE)) }
[1] 1 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDefaultArgs
#{ array(dim=c(-2,-2)); }
Error in array(dim = c(-2, -2)) : the dims contain negative values

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDefaultArgs
#{ array(dim=c(-2,2)); }
Error in array(dim = c(-2, 2)) : negative length vectors are not allowed

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDefaultArgs
#{ dim(array(dim=c(2.1,2.9,3.1,4.7))) }
[1] 2 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDefaultArgs
#{ length(array(dim=c(1,0,2,3))) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ m <- matrix(1:6, nrow=2) ; diag(m) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) }
[1] 1 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDiagonal
#{ m <- matrix(1:9, nrow=3) ; diag(m) }
[1] 1 5 9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ NCOL(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ NCOL(1:3) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ NROW(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ NROW(1:3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ b <- c(a=1+2i,b=3+4i) ; attr(b,"my") <- 211 ; dim(b) <- c(2,1) ; names(b) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ dim(1) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ dim(1:3) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ dimnames(1) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ dimnames(NULL) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ m <- matrix(1:6, nrow=3) ; dim(m) }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ m <- matrix(1:6, nrow=3) ; ncol(m) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ m <- matrix(1:6, nrow=3) ; nrow(m) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ ncol(1) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ ncol(1:3) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ nrow(1) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ nrow(1:3) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; attr(x, "dim") <- c(2,1) ; x }
     [,1]
[1,]    1
[2,]    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- c(1, -1) ; x }
Error in dim(x) <- c(1, -1) : the dims contain negative values

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- c(1, 3) ; x }
Error in dim(x) <- c(1, 3) :
  dims [product 3] do not match the length of object [2]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- c(1, NA) ; x }
Error in dim(x) <- c(1, NA) : the dims contain missing values

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- c(1,2) ; x }
     [,1] [,2]
[1,]    1    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:2 ; dim(x) <- integer() ; x }
Error in dim(x) <- integer() : length-0 dimension vector is invalid

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x <- 1:4 ; f <- function() { x <- 1:4 ; dim(x) <<- c(2,2) } ; f() ; dim(x) }
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; attr(x, "dim")<-c(3, 4); dim(x) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c("12"); x }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c(12); x }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c(12+10i); x }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12
Warning message:
In dim(x) <- c(12 + (0+10i)) : imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c(3, 4); attr(x, "dim") }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:12; dim(x)<-c(as.raw(12)); x }
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:1; dim(x)<-c(TRUE); x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:2; dim(x)=c(1,2); names(x)<-c("a", "b"); attr(x, "foo")<-"foo"; dim(x)<-NULL; attributes(x) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; attr(x, "dimnames") <- list(101, 102, 103, 104) }
Error in attr(x, "dimnames") <- list(101, 102, 103, 104) :
  'dimnames' applied to non-array

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c("a")); x }
Error in dimnames(x) <- list(c("a")) :
  length of 'dimnames' [1] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c("a", "b"), "c", c("d", "e"), 7); attributes(x) }
Error in dimnames(x) <- list(c("a", "b"), "c", c("d", "e"), 7) :
  length of 'dimnames' [4] must match that of 'dims' [3]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c("a", "b"), 42, c("d", "e", "f")); attributes(x) }
Error in dimnames(x) <- list(c("a", "b"), 42, c("d", "e", "f")) :
  length of 'dimnames' [3] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c("a", "b"), NULL, c("d")); x }
Error in dimnames(x) <- list(c("a", "b"), NULL, c("d")) :
  length of 'dimnames' [3] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(NULL); attributes(x) }
$dim
[1] 2 1 2

$dimnames
$dimnames[[1]]
NULL

$dimnames[[2]]
NULL

$dimnames[[3]]
NULL



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c("a", "b"), "c", c("d", "e")); attributes(x) }
$dim
[1] 2 1 2

$dimnames
$dimnames[[1]]
[1] "a" "b"

$dimnames[[2]]
[1] "c"

$dimnames[[3]]
[1] "d" "e"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c("a", "b"), 42, c("d", "e")); attributes(x) }
$dim
[1] 2 1 2

$dimnames
$dimnames[[1]]
[1] "a" "b"

$dimnames[[2]]
[1] "42"

$dimnames[[3]]
[1] "d" "e"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(4); y<-101:104; dim(y)<-c(2,2); x > y }
Error in x > y : non-conformable arrays

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(4); y<-101:104; dim(y)<-c(4); x > y }
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(4); y<-101:104; x > y }
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; dim(x)<-c(4); y<-101:108; dim(y)<-c(8); x > y }
Error in x > y : non-conformable arrays

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; names(x)<-c(21:24); attr(x, "dim")<-c(4); attr(x, "foo")<-"foo"; x }
[1] 1 2 3 4
attr(,"names")
[1] "21" "22" "23" "24"
attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; names(x)<-c(21:24); attr(x, "foo")<-"foo"; x }
21 22 23 24
 1  2  3  4
attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; y<-101:104; dim(y)<-c(4); x > y }
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1:4; y<-c(2, 2); dim(x)<-y; y[1]=4; dim(x) }
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; attr(x, "dimnames") <- 1 }
Error in attr(x, "dimnames") <- 1 : 'dimnames' must be a list

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; dimnames(x) <- 1; dimnames(x) }
Error in dimnames(x) <- 1 : 'dimnames' must be a list

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; dimnames(x)<-list("a"); dimnames(x); dimnames(x)<-list(); dimnames(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; dimnames(x)<-list() }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)<-1; dimnames(x)<-list(0) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)=1; attr(x, "foo")<-"foo"; dim(x)<-NULL; attributes(x) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)=1; attr(x, "names")<-"a"; dim(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dim(x)=1; names(x)<-"a"; dim(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-1; dimnames(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-42; y<-(dim(x)<-1); y }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-42; y<-(dim(x)<-1); }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(1); dim(x)<-1; attr(x, "dimnames")<-list("b"); attributes(x) }
$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "b"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(1); dim(x)<-1; attr(x, "dimnames")<-list(a="b"); attributes(x) }
$dim
[1] 1

$dimnames
$dimnames$a
[1] "b"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(1); dim(x)<-1; names(x)<-c("b"); attributes(x) }
$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "b"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(1); y<-c(1); dim(x)<-1; dim(y)<-1; attr(x, "dimnames")<-(attr(y, "dimnames")<-list("b")); attributes(x) }
$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "b"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; attr(x, "foo")<-"foo"; attr(x, "dim")<-NULL; attributes(x) }
$names
[1] "a"

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; attributes(x) }
$names
[1] "a"

$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "z"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; dim(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; names(x)<-NULL; attr(x, "dimnames")<-NULL; attributes(x) }
$dim
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-c(42); names(x)<-"a"; attr(x, "dim")<-1; names(x)<-"z"; names(x)<-NULL; attributes(x) }
$dim
[1] 1

$dimnames
$dimnames[[1]]
[1] "z"



##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-list(1,2,3); names(x)<-c(21:23); attr(x, "dim")<-c(3); attr(x, "foo")<-"foo"; x }
$`21`
[1] 1

$`22`
[1] 2

$`23`
[1] 3

attr(,"names")
[1] "21" "22" "23"
attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ x<-list(1,2,3); names(x)<-c(21:23); attr(x, "foo")<-"foo"; x }
$`21`
[1] 1

$`22`
[1] 2

$`23`
[1] 3

attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDimensions
#{ z <- 1 ; dim(z) <- c(1,1) ; dim(z) <- NULL ; z }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testDrop
#{ x <- array(1:12, dim = c(1,3,1,1,2,1,2)); drop(x) }
, , 1

     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

, , 2

     [,1] [,2]
[1,]    7   10
[2,]    8   11
[3,]    9   12


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(".GlobalEnv") }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment("package:base") }
<environment: base>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(-1) }
Error in as.environment(-1) : no enclosing environment

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(0) }
Error in as.environment(0) : invalid 'pos' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(1) }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(as.environment) }
Error in as.environment(as.environment) :
  invalid object for 'as.environment'

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(length(search()) + 1) }
<environment: R_EmptyEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(length(search()) + 2) }
Error in as.environment(length(search()) + 2) : invalid 'pos' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ as.environment(length(search())) }
<environment: base>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ baseenv() }
<environment: base>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e <- new.env(); `parent.env<-`(e, emptyenv()); identical(parent.env(e), emptyenv()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env() ; assign("x",1,e) ; get("x",e) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env() ; assign("x",1,e) ; ls(e) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env() ; ls(e) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockBinding("a", e); rm("a",envir = e); ls() }
[1] "e"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockEnvironment(e); assign("a", 2, e) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockEnvironment(e); rm("a",envir = e); }
Error in rm("a", envir = e) :
  cannot remove bindings from a locked environment

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockEnvironment(e, TRUE); assign("a", 2, e) }
Error in assign("a", 2, e) :
  cannot change value of locked binding for 'a'

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; lockEnvironment(e, TRUE); unlockBinding("a", e); assign("a", 2, e) }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e) ; rm("a",envir = e); ls() }
[1] "e"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e); bindingIsLocked("a", e) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e); lockBinding("a", e); assign("a", 2, e) }
Error in assign("a", 2, e) :
  cannot change value of locked binding for 'a'

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("a", 1, e); lockBinding("a", e); bindingIsLocked("a", e) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); assign("x", 1, e); get("x", e) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); environmentIsLocked(e) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); get("x", e) }
Error in get("x", e) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); lockEnvironment(e); assign("a", 1, e) }
Error in assign("a", 1, e) : cannot add bindings to a locked environment

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); lockEnvironment(e); environmentIsLocked(e) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); x<-1; get("x", e) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(); x<-1; get("x", e, inherits=FALSE) }
Error in get("x", e, inherits = FALSE) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ e<-new.env(parent=emptyenv()); x<-1; get("x", e) }
Error in get("x", e) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ emptyenv() }
<environment: R_EmptyEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environment() }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environment(environment) }
<environment: namespace:base>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environmentName(1) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environmentName(baseenv()) }
[1] "base"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environmentName(emptyenv()) }
[1] "R_EmptyEnv"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ environmentName(globalenv()) }
[1] "R_GlobalEnv"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ f <- function()  { as.environment(-1) } ; f() }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ f <- function(x, y) { ls() }; f(1, 2) }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ globalenv() }
<environment: R_GlobalEnv>

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign("abc", "yes", h) ; exists(c("abc", "def"), h) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign("abc", "yes", h) ; exists(c("def", "abc"), h) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign("x", 1, h) ; assign("x", 1, h) ; get("x", h) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign("x", 1, h) ; assign("x", 2, h) ; get("x", h) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign(c("a"), 1, h) ; ls(h) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; assign(c("a"), 1L, h) ; ls(h) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env() ; u <- 1 ; assign("x", u, h) ; assign("x", u, h) ; get("x", h) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("x", 1, h) ; assign("y", 2, h) ; ls(h) }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("x", 1, h) ; exists("x", h) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("x", 1, h) ; exists("xx", h) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("y", 1, h) ; assign("x", 2, h) ; ls(h) }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=emptyenv()) ; assign("y", 2, h) ; get("z", h) }
Error in get("z", h) : object 'z' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ h <- new.env(parent=globalenv()) ; assign("x", 10, h, inherits=TRUE) ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ hh <- new.env() ; assign("z", 3, hh) ; h <- new.env(parent=hh) ; assign("y", 2, h) ; exists("z", h) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ hh <- new.env() ; assign("z", 3, hh) ; h <- new.env(parent=hh) ; assign("y", 2, h) ; get("z", h) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ identical(parent.env(baseenv()), emptyenv()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ is.environment(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ is.environment(globalenv()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ls() }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ls(.GlobalEnv) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ph <- new.env() ; h <- new.env(parent=ph) ; assign("x", 10, h, inherits=TRUE) ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ph <- new.env() ; h <- new.env(parent=ph) ; assign("x", 2, h) ; assign("x", 10, h, inherits=TRUE) ; get("x", ph)}
Error in get("x", ph) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ph <- new.env() ; h <- new.env(parent=ph) ; assign("x", 2, ph) ; assign("x", 10, h, inherits=TRUE) ; get("x", ph)}
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ ph <- new.env(parent=emptyenv()) ; h <- new.env(parent=ph) ; assign("x", 10, h, inherits=TRUE) ; get("x", ph)}
Error in get("x", ph) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ plus <- function(x) { function(y) x + y } ; plus_one <- plus(1) ; ls(environment(plus_one)) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ rm("foo", envir = baseenv()) }
Error in rm("foo", envir = baseenv()) :
  cannot remove variables from the base environment

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ x <- 1 ; ls(.GlobalEnv) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ x <- 1; .y <- 2; ls(globalenv()) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testEnvironment
#{ x <- 1; ls(globalenv()) }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFloor
#{ floor(c(0.2,-3.4,NA,0/0,1/0)) }
[1]   0  -4  NA NaN Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFormat
#{ format(7) }
[1] "7"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFormat
#{ format(7.42) }
[1] "7.42"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFormat
#{ format(c(7,42)) }
[1] " 7" "42"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFormat
#{ format(c(7.42,42.7)) }
[1] " 7.42" "42.70"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFormat
#{ format(c(7.42,42.7,NA)) }
[1] " 7.42" "42.70" "   NA"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testFrames
#{ t1 <- function() {  aa <- 1; t2 <- function() { cat("current frame is", sys.nframe(), "; "); cat("parents are frame numbers", sys.parents(), "; "); print(ls(envir = sys.frame(-1))) };  t2() }; t1() }
current frame is 2 ; parents are frame numbers 0 1 ; [1] "aa" "t2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ get(".Platform")$endian }
[1] "little"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ get(".Platform", globalenv())$endian }
[1] "little"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ get("dummy") }
Error in get("dummy") : object 'dummy' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ x <- 33 ; f <- function() { get("x", inherits = FALSE) } ; f() }
Error in get("x", inherits = FALSE) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{ x <- 33 ; f <- function() { if (FALSE) { x <- 22  } ; get("x", inherits = FALSE) } ; f() }
Error in get("x", inherits = FALSE) : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="closure")};y();}
function(){y<-2;get("y",mode="closure")}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="double")};y();}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="double",inherits=FALSE)};y();}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="integer")};y();}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGet
#{y<-function(){y<-2;get("y",mode="integer",inherits=FALSE);get("y",mode="integer",inherits=FALSE)};y();}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{ x<-1; oldClass(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-1;class(x)}
[1] "numeric"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-1L;class(x)}
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-c(1,2,3);class(x)}
[1] "numeric"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-c(1L,2L,3L);class(x)}
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-seq(1.1,10.1);class(x)}
[1] "numeric"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGetClass
#{x<-seq(1L,10L);class(x)}
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("1+1i", "7", "42.1", "7+42i"); grep("[0-9].*[-+][0-9].*i$", txt) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("arm","foot","lefroo", "bafoobar"); grep("foo", txt) }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("arm","foot","lefroo", "bafoobar"); grepl("foo", txt) }
[1] FALSE  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("is", "intended", "to", "guarantee", "your", "freedom"); grep("[gu]", txt) }
[1] 4 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testGrep
#{ txt<-c("rai", "ira", "iri"); grep("i$", txt) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIfelse
#{ ifelse(FALSE,1,0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIfelse
#{ ifelse(NA,1,0) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIfelse
#{ ifelse(TRUE,1,0) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ "hello" %in% c("I", "say", "hello", "world") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ 2 %in% c(1,2,3) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ `%in%`(2,c(1,2,3)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ c("hello", "say") %in% c("I", "say", "hello", "world") }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIn
#{ c(1,2,3,4,5) %in% c(1,2,1,2) }
[1]  TRUE  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10; inherits(x, "a") ;}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a");inherits(x, c("a", "b", "a"), TRUE) ;}
[1] 1 0 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b"); inherits(x,"a") ;}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, "a", TRUE) ;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, "a", c(TRUE)) ;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, c("a", "b", "c"), TRUE) ;}
[1] 1 2 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, c("c", "q", "b")) ;}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInherits
#{x <- 10;class(x) <- c("a", "b");inherits(x, c("c", "q", "b"), TRUE) ;}
[1] 0 0 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvisible
#{ f <- function() { invisible(23) } ; f() }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvisible
#{ f <- function() { invisible(23) } ; toString(f()) }
[1] "23"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ f <- function(a, ...) { list(...) } ; f(1) }
list()

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ g <- function(...) { max(...) } ; g(1,2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ matrix(1:4, n = 2) }
Error in matrix(1:4, n = 2) :
  argument 2 matches multiple formal arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ matrix(da=1:3,1) }
     [,1] [,2] [,3]
[1,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ rnorm(n = 1, n = 2) }
Error in rnorm(n = 1, n = 2) :
  formal argument "n" matched by multiple actual arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testInvocation
#{ rnorm(s = 1, s = 1) }
Error in rnorm(s = 1, s = 1) :
  formal argument "sd" matched by multiple actual arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ !is.atomic(function() {}) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ !is.atomic(list()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(1) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(1:3) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(1L) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(NA) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(NULL) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsAtomic
#{ is.atomic(c(1,2,3)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsFactor
#{x<-1;class(x)<-"foo";is.factor(x)}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(1[10]) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(NA) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(c(1,2,3,4)) }
[1] FALSE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(c(1,2,NA,4)) }
[1] FALSE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(c(1[10],2[10],3)) }
[1]  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNA
#{ is.na(c(NA)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsNABroken
#{ is.na(list(1[10],1L[10],list(),integer())) }
[1]  TRUE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(1:3) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(1L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(NA) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsObject
#{ is.object(c(1,2,3)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(NA) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(as.vector(1)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(as.vector(FALSE)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsTRUE
#{ isTRUE(as.vector(TRUE)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsUnsorted
#{ is.unsorted(c(1,2,3,4)) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsUnsorted
#{ is.unsorted(c(1,2,6,4)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ is.vector(1) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ is.vector(1:3) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ is.vector(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1); attr(x, "foo")<-"foo"; is.vector(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1,3); is.vector(x, "d"); }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1,3); is.vector(x, "double"); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1,3); is.vector(x, "integer"); }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1:3); is.vector(x, "double"); }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-c(1:3); is.vector(x, "integer"); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-list(1); attr(x, "foo")<-"foo"; is.vector(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{ x<-list(1,3); }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{is.vector(c(TRUE,FALSE),"logical");}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{is.vector(c(TRUE,FALSE),"numeric");}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{x<-1;class(x)<-"a";is.vector(x);}
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testIsVector
#{x<-1;names(x)<-"a";is.vector(x);}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ f <- function() { lapply(c(X="a",Y="b"), function(x) { c(a=x) })  } ; f() }
$X
  a
"a"

$Y
  a
"b"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ lapply(1:3, function(x) { 2*x }) }
[[1]]
[1] 2

[[2]]
[1] 4

[[3]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ lapply(1:3, function(x,y) { x*y }, 2) }
[[1]]
[1] 2

[[2]]
[1] 4

[[3]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLapply
#{ x<-c(1,3,4);attr(x,"names")<-c("a","b","c");lapply(x, function(x,y) { as.character(x*y) }, 2) }
$a
[1] "2"

$b
[1] "6"

$c
[1] "8"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(1+1i) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(1:3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(NA) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(NULL) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(TRUE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(c(z=1:4)) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ length(d<-dim(1:3)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x <- 1 ; f <- function() { length(x) <<- 2 } ; f() ; x }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x <- 1:2 ; length(x) <- 4 ; x }
[1]  1  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x <- 1:2 ; z <- (length(x) <- 4) ; z }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x <- 1:4 ; length(x) <- 2 ; x }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x<-c(a=7, b=42); length(x)<-1; x }
a
7

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLength
#{ x<-c(a=7, b=42); length(x)<-4; x }
 a  b
 7 42 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ list(1, b=2) }
[[1]]
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ list(a=1, 2) }
$a
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ list(a=1, b=2) }
$a
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-c(y=1, 2);  list(a=x, 42) }
$a
y
1 2

[[2]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-list(y=1, 2);  c(42, a=x) }
[[1]]
[1] 42

$a.y
[1] 1

$a2
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-list(y=1, 2);  c(a=x, 42) }
$a.y
[1] 1

$a2
[1] 2

[[3]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-list(y=1, 2);  c(a=x, c(y=7,z=42)) }
$a.y
[1] 1

$a2
[1] 2

$y
[1] 7

$z
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testList
#{ x<-list(y=1, 2);  c(a=x, c(z=7,42)) }
$a.y
[1] 1

$a2
[1] 2

$z
[1] 7

[[4]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ log(0) }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ log(1) } 
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ log(c(0,1)) }
[1] -Inf    0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ round( log(10,), digits = 5 ) }
[1] 2.30259

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ round( log(10,10), digits = 5 ) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog
#{ round( log(10,2), digits = 5 ) }
[1] 3.32193

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ as.integer(log10(200)*100000) } 
[1] 230102

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(0) }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(1) } 
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(10) } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(100) } 
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog10
#{ log10(c(0,1)) }
[1] -Inf    0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ as.integer(log2(6)*1000000) } 
[1] 2584962

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(0) }
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(1) } 
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(2) } 
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(4) } 
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLog2
#{ log2(c(0,1)) }
[1] -Inf    0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ assign("z", 10, inherits=TRUE) ; z }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ exists("sum") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ exists("sum", inherits = FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() {  g <- function() { assign("x", 1, inherits=TRUE) } ; g() } ; f() ; x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { 4 } ; h <- function() { assign("f", 5) ; f() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { 4 } ; h <- function() { assign("z", 5) ; f() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 1) ; g <- function() { assign("z", 2) ; x } ; g() } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 1) ; x } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 1) ; y <- 2 ; if (FALSE) { z <- 3 } ; ls() } ; f() }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 1) ; y <- 2 ; ls() } ; f() }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 2) ; exists("x", inherits=FALSE) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 2, inherits=TRUE) ; assign("x", 1) ; h <- function() { x } ; h() } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 3) ; g <- function() { x } ; g() } ; x <- 10 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 3) ; h <- function() { assign("z", 4) ; g <- function() { x } ; g() } ; h() } ; x <- 10 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", 3) ; h <- function() { g <- function() { x } ; g() } ; h() } ; x <- 10 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("x", function(){2}, inherits=TRUE) ; assign("x", function(){1}) ; h <- function() { x() } ; h() } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { assign("z", 2) ; g <- function() { get("x", inherits=TRUE) } ; g() } ; x <- 3 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { for (i in rev(1:10)) { assign(as.character(i), i) } ; ls() } ; length(f()) }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { g <- function() { get("x", inherits=TRUE) } ; g() } ; x <- 3 ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { if (FALSE) { x <- 1 } ; y <- 2 ; ls() } ; f() }
[1] "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { if (FALSE) { x <- 3 } ; exists("x", inherits=FALSE) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 1 ; g <- function() { h <- function() { x <<- 2 } ; h() } ; g() ; x } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 1 ; y <- 2 ; ls() } ; f() }
[1] "x" "y"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; g <- function() { assign("x", 1, inherits=FALSE) } ; g() ; x } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; g <- function() { assign("x", 1, inherits=TRUE) } ; g() ; x } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; g <- function() { if (FALSE) { x <- 2 } ; assign("x", 1, inherits=TRUE) } ; g() ; x } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; g <- function() { x <- 3 ; assign("x", 1, inherits=FALSE) ; x } ; g() } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 2 ; get("x") } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 22 ; get("x", inherits=FALSE) } ; f() }
[1] 22

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { x <- 3 ; exists("x", inherits=FALSE) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function() { z <- 3 ; exists("x", inherits=FALSE) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function(x) { assign(x, 23) ; exists(x) } ; c(f("a"),f("b")) }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ f <- function(z) { exists("z") } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ fu <- function() { uu <<- 23 } ; fu() ; ls(globalenv()) }
[1] "fu" "uu"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { f <- function() { assign("x", 3) ; if (FALSE) { x } ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { f <- function() { assign("z", 3) ; if (FALSE) { x } ; exists("x") }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { f <- function() { if (FALSE) { x } ; assign("x", 1) ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 ; y <- 3} ; f <- function() { if (FALSE) { x } ; assign("y", 2) ; exists("x") }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { assign("z", 10) ; f <- function() { x <<- 3 } ; f() } ; h() } ; g() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { if (FALSE) { x <- 1 } ; assign("z", 10) ; f <- function() { assign("x", 4) ; x <<- 3 } ; f() } ; h() } ; g() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { assign("x", 4) ; x <<- 3 } ; f() } ; g() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; assign("x", 2) ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("x", 2) ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("x", 2) ; gg <- function() { h <- function() { exists("x") } ; h() } ; gg() } ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("x", 2) ; gg <- function() { h <- function() { get("x") } ; h() } ; gg() } ; f() } ; g() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("x", 2) ; h <- function() { exists("x") } ; h() }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign("y", 2) ; h <- function() { exists("x") } ; h() }  ; f() } ; g() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; f <- function() { if (FALSE) { x <- 3 } ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; f <- function() { x ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; f <- function() { x <- 5 ; exists("x") }  ; f() } ; g() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; z <- 3 ; hh <- function() { assign("z", 2) ; h <- function() { assign("x", 1); f <- function() { x <<- 3 } ; f() } ; h() } ; hh() ; x } ; x <- 10 ; g() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ g <- function() { x <- 2 ; z <- 3 ; hh <- function() { assign("z", 2) ; h <- function() { f <- function() { x <<- 3 } ; f() } ; h() } ; hh() } ; x <- 10 ; g() ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ get("x") }
Error in get("x") : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ gg <- function() {  assign("x", function(){11}) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ gg <- function() { assign("x", 100) ; g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { if (FALSE) { x <- 1 } ; assign("z", 10) ; f <- function() { assign("x", 4) ; x <<- 3 } ; f() } ; h() } ; g() } ; x <- 10 ; gg() ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ gg <- function() { if (FALSE) { x <- 100 } ; g <- function() { if (FALSE) { x <- 100 } ; h <- function() { f <- function() { x <<- 3 } ; f() } ; h() } ; g() } ; x <- 10 ; gg() ; x }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { assign("f", function() {4}) ; f() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { assign("x", 1) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { assign("z", 1) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { g <- function() {4} ; f <- function() { if (FALSE) { g <- 4 } ; g() } ; f() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; g <- function() { assign("z", 3) ; if (FALSE) { x <- 4 } ;  f <- function() { exists("x") } ; f() } ; g() } ; h() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { myfunc <- function(i) { sum(i) } ; g <- function() { myfunc <- 2 ; f <- function() { myfunc(2) } ; f() } ; g() } ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 2 ; f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() } ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3  ; f <- function() { assign("x", 2) ; g <- function() { x } ; g() } ; f() }  ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { assign("x", 5) ; x } ; f <- function() { assign("x", 2) ; g() } ; f() }  ; h() }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { assign("z", 2) ; x } ; f <- function() { assign("x", 2) ; g() } ; f() }  ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists("x") }  ; f() } ; g() } ; h() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- 3 ; g <- function() { x } ; f <- function() { assign("x", 2) ; g() } ; f() }  ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function() {3} ; g <- function() { assign("x", function() {4}) ; x() } ; g() } ; h() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function() {3} ; g <- function() { assign("x", function() {5} ) ; x() } ; g() } ; h() }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function() {3} ; g <- function() { assign("z", 2) ; x } ; f <- function() { assign("x", 2) ; g() } ; f() }  ; z <- h() ; z() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function() {3} ; gg <- function() { assign("x", 5) ; g <- function() { x() } ; g() } ; gg() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { x <- function(){2} ; f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() } ; z <- h() ; z() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { z <- 2 ; x <- function() {3} ; g <- function() { assign("z", 1) ; x() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { z <- 2 ; x <- function() {3} ; gg <- function() { assign("z", 5) ; g <- function() { x() } ; g() } ; gg() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ h <- function() { z <- 3 ; x <- function() {3} ; g <- function() { x <- 1 ; assign("z", 5) ; x() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 10 ; g <- function() { x <- 100 ; z <- 2 ; f <- function() { assign("z", 1); x <- x ; x } ; f() } ; g() }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 1; exists("x", inherits = FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 2 ; rm("x") ; get("x") }
Error in get("x") : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 2 ; y <- 3 ; rm("y") ; ls() }
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 2) ; g <- function() { x } ; g() } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 4) ; g <- function() { assign("y", 3) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; g()  } ; f() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 4) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x <<- 6 } ; h() ; get("x") } ; f() }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 4) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; f() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { assign("x", 4) ; hh <- function() { if (FALSE) { x <- 100 } ; h <- function() { x <<- 6 } ; h() } ; hh() ; get("x") } ; f() }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { exists("x") } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { exists("x", inherits=FALSE) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { get("x") } ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { x <- 2 ; get("x") } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function() { x <- 2; h <- function() {  get("x") }  ; h() } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function(i) { if (i == 1) { assign("x", 4) } ; function() { x } } ; f1 <- f(1) ; f2 <- f(2) ; f1() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function(i) { if (i == 1) { assign("x", 4) } ; function() { x } } ; f1 <- f(1) ; f2 <- f(2) ; f2() ; f1() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function(i) { if (i == 1) { assign("x", 4) } ; function(v) { x <<- v} } ; f1 <- f(1) ; f2 <- f(2) ; f1(10) ; f2(11) ; x }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; f <- function(i) { if (i == 1) { assign("x", 4) } ; function(v) { x <<- v} } ; f1 <- f(1) ; f2 <- f(2) ; f2(10) ; f1(11) ; x }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x ; hh <- function() { x <<- 4 } ; hh() } ; h() } ; f() } ; g() ; x }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x } ; h() } ; f() } ; g() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; g <- function() { x } ; f <- function() { assign("x", 2) ; g() } ; f() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; gg <- function() {  g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x } ; h() } ; f() } ; g() } ; gg() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; h <- function() { g <- function() { x } ; f <- function() { assign("x", 2, inherits=TRUE) } ; f() ; g() }  ; h() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; h <- function(s) { if (s == 2) { assign("x", 2) } ; x }  ; h(1) ; h(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 3 ; h <- function(s) { y <- x ; if (s == 2) { assign("x", 2) } ; c(y,x) }  ; c(h(1),h(2)) }
[1] 3 3 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- 33 ; f <- function() { assign("x", 44) ; get("x", inherits=FALSE) } ; f() }
[1] 44

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() { 3 } ; h <- function() { g <- function() { f <- function() { x <- 1 ; x() } ; f() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() { 3 } ; h <- function() { if (FALSE) { x <- 2 } ;  z <- 2  ; g <- function() { assign("z", 1) ; x() } ; g() } ; h() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() {11} ; g <- function() { f <- function() { assign("x", 2) ; x() } ; f() } ; g() }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign("x", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f1() ; f2() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign("x", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f1() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign("x", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f2() ; f1() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function(){3} ; f <- function() { assign("x", function(){4}) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x() } ; h() } ; f() }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function(){3} ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function(){3} ; gg <- function() {  g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testLookup
#{ x <- function(){3} ; gg <- function() { assign("x", 4) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ as.vector(c(1,2,3)) %*% t(as.vector(c(1,2))) }
     [,1] [,2]
[1,]    1    2
[2,]    2    4
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ c(1,0,4) %*% matrix(c(3,1,2,0,1,2),3) }
     [,1] [,2]
[1,]   11    8

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ c(1,2,3) %*% c(4,5,6) }
     [,1]
[1,]   32

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ matrix(c(1,2,3,4), 2) %*% matrix(c(5,6,7,8), 2) }
     [,1] [,2]
[1,]   23   31
[2,]   34   46

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ matrix(c(3,1,2,0,1,2), 2) %*% matrix(c(1,0,4,2,1,0), 3) }
     [,1] [,2]
[1,]    7    8
[2,]    9    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatMult
#{ matrix(c(3,1,2,0,1,2),2) %*% c(1,0,4) }
     [,1]
[1,]    7
[2,]    9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match("abc", c("xyz")) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match("abc", c("xyz"), nomatch=-1) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match("hello",c("I", "say", "hello", "world")) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match(2,c(1,2,3)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match(c("hello", "say"),c("I", "say", "hello", "world")) }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatch
#{ match(c(1,2,3,4,5),c(1,2,1,2)) }
[1]  1  2 NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchFun
#{ f <- function(x) { y <- match.fun(x) ; y(3,4) } ; c(f("+"),f("*")) }
[1]  7 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchFun
#{ f <- function(x) { y <- match.fun(x) ; y(c(1,2,3)) } ; c(f("sum"),f("cumsum")) }
[1] 6 1 3 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchFun
#{ f <- match.fun("length") ; f(c(1,2,3)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatchFun
#{ f <- match.fun(length) ; f(c(1,2,3)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMathGroupDispatch
#{x<--7;class(x)<-"foo";Math.foo<-function(z){-z;};log(x);}
[1] 7
attr(,"class")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMathGroupDispatch
#{x<--7;class(x)<-"foo";Math.foo<-function(z){x};abs(x);}
[1] -7
attr(,"class")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix("a",10,10) }
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [2,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [3,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [4,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [5,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [6,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [7,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [8,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [9,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
[10,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:4, nrow=2) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:4,2,2) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6)}
     [,1]
[1,]    1
[2,]    2
[3,]    3
[4,]    4
[5,]    5
[6,]    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6, ncol=3:5,byrow=TRUE)}
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6, nrow=3,byrow=1)}
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6, nrow=3,byrow=TRUE)}
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1:6, nrow=c(3,4,5),byrow=TRUE)}
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(1i,10,10) }
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [2,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [3,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [4,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [5,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [6,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [7,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [8,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [9,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
[10,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(as.double(NA),2,2) }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c("a",NA),10,10) }
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [2,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [3,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [4,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [5,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [6,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [7,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
 [8,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA
 [9,] "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"  "a"
[10,] NA   NA   NA   NA   NA   NA   NA   NA   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1+1i,2+2i,3+3i,4+4i),2) }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,] 2+2i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1,2,3,4), nrow=2) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1,2,3,4),2,2) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(10+10i,5+5i,6+6i,20-20i),2) }
       [,1]   [,2]
[1,] 10+10i  6+ 6i
[2,]  5+ 5i 20-20i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1i,100i),10,10) }
        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]
 [1,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
 [2,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i
 [3,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
 [4,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i
 [5,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
 [6,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i
 [7,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
 [8,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i
 [9,] 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i 0+  1i
[10,] 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i 0+100i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(c(1i,NA),10,10) }
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
 [3,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
 [5,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
 [7,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
 [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA
 [9,] 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i 0+1i
[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMatrix
#{ matrix(nrow=2,ncol=2) }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max((-1):100) }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max() }
[1] -Inf
Warning message:
In max() : no non-missing arguments to max; returning -Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(1:10, 100:200, c(4.0, 5.0)) }
[1] 200

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMaximum
#{ max(2L, 4L) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(1,2,3,4,5)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMean
#{ mean(c(5,5,5,5,5)) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ max(c(1,2,0/0)) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min((-1):100) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min() }
[1] Inf
Warning message:
In min() : no non-missing arguments to min; returning Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(1:10, 100:200, c(4.0, -5.0)) }
[1] -5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(2L, 4L) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMinimum
#{ min(c(1,2,0/0)) }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a = 2) { g(a) } ; g <- function(b) { missing(b) } ; f() }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a) { g(a) } ;  g <- function(b) { missing(b) } ; f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ f <- function(a,b,c) { missing(b) } ; f(1,,2) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMissing
#{ g <- function(a, b, c) { b } ; f <- function(a,b,c) { g(a,b=2,c) } ; f(1,,2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testMod
#{ round(Mod(1+1i)*10000) }
[1] 14142

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNChar
#{ nchar(c("hello", "hi")) }
[1] 5 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNChar
#{ nchar(c("hello", "hi", 10, 130)) }
[1] 5 2 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNChar
#{ nchar(c(10,130)) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(-1, "a", "b") }
Error in ngettext(-1, "a", "b") : invalid 'n' argument

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(0, "a", "b") }
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1+1i, "a", "b") }
[1] "a"
Warning message:
In ngettext(1 + (0+1i), "a", "b") : imaginary parts discarded in coercion

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", "b") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", NULL) }
Error in ngettext(1, "a", NULL) : 'msg2' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", c("b")) }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", c("b", "c")) }
Error in ngettext(1, "a", c("b", "c")) :
  'msg2' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, "a", c(1)) }
Error in ngettext(1, "a", c(1)) : 'msg2' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, NULL, "b") }
Error in ngettext(1, NULL, "b") : 'msg1' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, NULL, NULL) }
Error in ngettext(1, NULL, NULL) : 'msg1' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, c("a"), "b") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, c("a", "c"), "b") }
Error in ngettext(1, c("a", "c"), "b") :
  'msg1' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(1, c(1), "b") }
Error in ngettext(1, c(1), "b") : 'msg1' must be a character string

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(42, "a", "b") }
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(c(1), "a", "b") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testNgettext
#{ ngettext(c(1,2), "a", "b") }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `!`(TRUE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `%%`(1,2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `%/%`(1,2) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `%o%`(3,5) }
     [,1]
[1,]   15

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `&&`(TRUE, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `&`(TRUE, FALSE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `*`(1,2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `+`(1,2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `-`(1,2) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `/`(1,2) }
[1] 0.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `^`(1,2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `|`(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ `||`(TRUE, FALSE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ x <- `+` ; f <- function() { x <- 1 ; x(2,3) } ; f() }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOperators
#{ x <- `+` ; x(2,3) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;class(x)<-"foo";"!.foo"<-function(e1,e2){x};!x}
[1] 1
attr(,"class")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"foo";class(y)<-"foo";"*.foo"<-function(e1,e2){min(e1,e2)};x*y}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"foo";class(y)<-"foo";"^.foo"<-function(e1,e2){e1+e2};x^y}
[1] 8
attr(,"class")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"foo";class(y)<-"fooX";"*.foo"<-function(e1,e2){min(e1,e2)};x*y}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"fooX";class(y)<-"foo";"*.foo"<-function(e1,e2){min(e1,e2)};x*y}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOpsGroupDispatch
#{x<-1;y<-7;class(x)<-"fooX";class(y)<-"fooX";"*.foo"<-function(e1,e2){min(e1,e2)};x*y}
[1] 7
attr(,"class")
[1] "fooX"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c("a","c","b","d","e","f")) }
[1] 1 3 2 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(1,1,1,1),c("d","c","b","a")) }
[1] 4 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(1,1,1,1),c(4,3,2,1)) }
[1] 4 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(1i,2i,3i)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(3+1i,2+2i,1+3i)) }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(3+1i,2+3i,2+2i,1+3i)) }
[1] 4 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(3i,1i,2i)) }
[1] 2 3 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(5,2,2,1,7,4)) }
[1] 4 2 3 6 1 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOrder
#{ order(c(5,2,2,1,7,4),c("a","c","b","d","e","f")) }
[1] 4 3 2 6 1 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOther
#{ rev.mine <- function(x) { if (length(x)) x[length(x):1L] else x } ; rev.mine(1:3) }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOuter
#{ outer(1, 3, "-") }
     [,1]
[1,]   -2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOuter
#{ outer(c(1,2,3),c(1,2),"*") }
     [,1] [,2]
[1,]    1    2
[2,]    2    4
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOuter
#{ outer(c(1,2,3),c(1,2),"-") }
     [,1] [,2]
[1,]    0   -1
[2,]    1    0
[3,]    2    1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testOverride
#{ sub <- function(x,y) { x - y }; sub(10,5) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ a <- as.raw(200) ; b <- as.raw(255) ; paste(a, b) }
[1] "c8 ff"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste() }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste(1:2, 1:3, FALSE, collapse="-", sep="+") }
[1] "1+1+FALSE-2+2+FALSE-1+3+FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste(1:2, 1:3, FALSE, collapse=NULL) }
[1] "1 1 FALSE" "2 2 FALSE" "1 3 FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste(character(0),31415) }
[1] " 31415"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPaste
#{ paste(sep="") }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{  x<-c(11, 7, 2222, 7, 33); print(x) }
[1]   11    7 2222    7   33

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(1:3) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(23) }
[1] 23

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(c(1,2.34567)) }
[1] 1.00000 2.34567

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(c(1.1,2.34567)) }
[1] 1.10000 2.34567

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(c(11.1,2.34567)) }
[1] 11.10000  2.34567

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(list(1,2,3)) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ print(list(list(list(1,2),list(3)),list(list(4),list(5,6)))) }
[[1]]
[[1]][[1]]
[[1]][[1]][[1]]
[1] 1

[[1]][[1]][[2]]
[1] 2


[[1]][[2]]
[[1]][[2]][[1]]
[1] 3



[[2]]
[[2]][[1]]
[[2]][[1]][[1]]
[1] 4


[[2]][[2]]
[[2]][[2]][[1]]
[1] 5

[[2]][[2]][[2]]
[1] 6




##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c("11", "7", "2222", "7", "33"); names(x)<-1:5; print(x) }
     1      2      3      4      5
  "11"    "7" "2222"    "7"   "33"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c("11", "7", "2222", "7", "33"); print(x) }
[1] "11"   "7"    "2222" "7"    "33"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c(1, 2:20, 21); n<-"a"; n[21]="b"; names(x)<-n; print(x) }
   a <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>
   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16
<NA> <NA> <NA> <NA>    b
  17   18   19   20   21

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c(1,2); names(x)=c("a", "b"); print(x) }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c(10000000, 10000:10007, 21000000); n<-"a"; n[10]="b"; names(x)<-n; print(x) }
       a     <NA>     <NA>     <NA>     <NA>     <NA>     <NA>     <NA>
10000000    10000    10001    10002    10003    10004    10005    10006
    <NA>        b
   10007 21000000

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testPrint
#{ x<-c(11, 7, 2222, 7, 33); names(x)<-1:5; print(x) }
   1    2    3    4    5
  11    7 2222    7   33

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(4336, "default"); sum(runif(10000)) }
[1] 4997.493

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(4357, "default"); round( rnorm(3), digits = 5 ) }
[1] -0.13102  0.98938 -0.30562

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(4357, "default"); sum(runif(10)) }
[1] 6.631059

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); matrix(rnorm(10), ncol=5) }
          [,1]       [,2]       [,3]       [,4]      [,5]
[1,]  2.287247 -0.6942925 -0.9706733  0.7481393 0.1526576
[2,] -1.196772 -0.4122930 -0.9472799 -0.1169552 2.1899781

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); matrix(rnorm(100), ncol=10) }
            [,1]         [,2]       [,3]        [,4]       [,5]         [,6]
 [1,]  2.2872472  0.356986230  0.8397504 -0.87085102  1.2185505 -0.262742349
 [2,] -1.1967717  2.716751783  0.7053418  0.71871055 -0.6993171 -0.007668105
 [3,] -0.6942925  2.281451926  1.3059647  0.11065288 -0.2854328  0.367153007
 [4,] -0.4122930  0.324020540 -1.3879962 -0.07846677 -1.3115527  1.707162545
 [5,] -0.9706733  1.896067067  1.2729169 -0.42049046 -0.3910124  0.723740263
 [6,] -0.9472799  0.467680511  0.1841928 -0.56212588 -0.4015266  0.481036049
 [7,]  0.7481393 -0.893800723  0.7522799  0.99751344  1.3505176 -1.567868244
 [8,] -0.1169552 -0.307328300  0.5917451 -1.10513006  0.5911900  0.318250283
 [9,]  0.1526576 -0.004822422 -0.9830526 -0.14228783  0.1005255  0.165991451
[10,]  2.1899781  0.988164149 -0.2760640  0.31499490  0.9310720 -0.899907630
            [,7]        [,8]         [,9]      [,10]
 [1,] 0.07637147  0.43262716  0.342585350  1.6357944
 [2,] 0.15915528 -0.92260172  0.004248236 -0.6454235
 [3,] 0.54367418 -0.61558421  0.029219842  0.6189922
 [4,] 0.70480735 -0.86665969 -0.393423429  0.2363936
 [5,] 0.31896914 -1.63951709 -0.792704563  0.8465009
 [6,] 1.10924979 -1.32583924 -0.311701865 -0.5736457
 [7,] 0.76915419 -0.88903673 -0.346068592  1.1179932
 [8,] 1.15347367 -0.55760233 -0.304607588 -1.5400011
 [9,] 1.26068350 -0.06240231 -1.785893487 -0.4381239
[10,] 0.70062351  2.42269298  0.587274672 -0.1506730

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); matrix(rnorm(25*25), ncol=25) }
              [,1]        [,2]         [,3]         [,4]        [,5]
 [1,]  2.287247161  0.18419277 -0.262742349 -1.325839244  0.51905837
 [2,] -1.196771682  0.75227990 -0.007668105 -0.889036728  0.58753970
 [3,] -0.694292510  0.59174505  0.367153007 -0.557602330 -0.07933306
 [4,] -0.412292951 -0.98305260  1.707162545 -0.062402309 -1.17436101
 [5,] -0.970673341 -0.27606396  0.723740263  2.422692977  0.30872212
 [6,] -0.947279945 -0.87085102  0.481036049  0.342585350 -1.60387854
 [7,]  0.748139340  0.71871055 -1.567868244  0.004248236  0.99128963
 [8,] -0.116955226  0.11065288  0.318250283  0.029219842  1.02322044
 [9,]  0.152657626 -0.07846677  0.165991451 -0.393423429  0.84014544
[10,]  2.189978107 -0.42049046 -0.899907630 -0.792704563  0.12007861
[11,]  0.356986230 -0.56212588  0.076371474 -0.311701865 -0.42625506
[12,]  2.716751783  0.99751344  0.159155278 -0.346068592  0.45892624
[13,]  2.281451926 -1.10513006  0.543674185 -0.304607588  0.64504795
[14,]  0.324020540 -0.14228783  0.704807353 -1.785893487  0.61153055
[15,]  1.896067067  0.31499490  0.318969143  0.587274672 -0.88921129
[16,]  0.467680511  1.21855053  1.109249789  1.635794434  1.54389235
[17,] -0.893800723 -0.69931708  0.769154195 -0.645423474 -1.24176360
[18,] -0.307328300 -0.28543275  1.153473675  0.618992169  1.10344734
[19,] -0.004822422 -1.31155267  1.260683503  0.236393598  0.98277236
[20,]  0.988164149 -0.39101243  0.700623507  0.846500899  0.30432717
[21,]  0.839750360 -0.40152661  0.432627161 -0.573645739 -1.55471822
[22,]  0.705341831  1.35051758 -0.922601718  1.117993204  1.56989078
[23,]  1.305964721  0.59119003 -0.615584207 -1.540001132  0.68844969
[24,] -1.387996217  0.10052546 -0.866659688 -0.438123899 -0.17760366
[25,]  1.272916864  0.93107200 -1.639517087 -0.150672971  0.72920127
             [,6]         [,7]        [,8]        [,9]        [,10]       [,11]
 [1,]  1.53325093 -0.355694443  0.25604208  2.02334405  1.242064560 -1.47759178
 [2,]  0.50657845  1.097300411  0.72783900  0.86249250 -0.015258466 -2.97325571
 [3,]  0.03332768 -0.906691970  1.32411092 -0.02490949 -0.791788389 -1.33976214
 [4,] -1.46755072 -0.207456624  0.14715849  0.60063495 -0.401618743 -0.26584203
 [5,]  1.01915772  0.678861434 -0.59853939  1.21648074 -1.896701290 -0.38399341
 [6,] -0.59333933 -0.797787741  2.19252993 -1.17653155  0.971974934 -0.60294233
 [7,]  0.81240989 -1.591538938  2.32711280 -0.60934003 -0.513954856 -0.65152404
 [8,]  0.86616783  1.180348125  1.13486960  0.38726257  0.014561673  1.75767151
 [9,]  0.36830830  1.222569290 -0.19088456 -1.39914014 -0.260935570 -0.01903487
[10,]  1.13481910 -0.010909187  0.47484456  1.23249185  1.522358392  0.15528461
[11,] -0.75709928  0.345522466 -0.54547494  0.01550750 -1.473369746 -0.76084644
[12,]  0.44522057  0.094189158  1.05564854 -1.62095905 -0.016558014 -1.54972691
[13,]  0.91593294  0.006793368  0.42902183 -0.66546466  0.024540609  2.75016501
[14,]  0.26975874  0.742622878 -1.81995641 -0.57484051 -0.001256989  1.04742325
[15,]  1.00754045  1.042186536 -0.69197609 -0.90189298 -0.433932707  0.91799247
[16,] -1.46143326 -0.319337138 -1.93182825  1.49159937 -0.405559057  0.47010951
[17,] -0.87478561  0.322643396  1.20967201 -0.13727932  0.155233319 -0.61737209
[18,]  0.16522894  0.685052979 -0.27900005  0.10828170 -0.972381818  0.04210627
[19,]  0.20720703  0.320242774 -1.09578323 -1.03521510  1.548174930 -0.90189890
[20,]  0.48236189 -1.914938024 -0.10218604 -0.44474392 -0.370123333  1.33958321
[21,] -0.07165837 -2.339962899  0.35702296 -0.19604927  1.961525257  0.80385435
[22,] -0.88892843  0.482864294 -0.88230257 -1.26936449 -0.609995576  0.31847865
[23,]  0.48594357  1.178530047 -0.05664779  0.95352118 -0.077428757 -0.19045331
[24,]  0.34049676 -1.292777034 -0.58101895  0.47254665 -1.828859263 -1.08726669
[25,] -1.09792419  0.615773085  0.64408819 -0.55877810  0.805924242  0.14539973
            [,12]       [,13]       [,14]       [,15]      [,16]       [,17]
 [1,]  2.46280025  0.52526155 -0.61315746  0.49138316 -0.9997716 -0.31970564
 [2,]  0.92361969 -0.27572731  0.15250297 -0.06901262  0.5492103  1.16506594
 [3,]  0.74187669  0.05470977 -0.59170745 -1.35079631  0.2797712 -0.62171055
 [4,]  1.41602179 -0.38824961 -0.96070497  0.79935757  0.9166359  1.24821319
 [5,]  1.25166337 -0.41702305 -0.58495799 -0.32009408 -1.7312573  1.44040154
 [6,]  2.10890569 -1.16417517  0.65667289 -0.35695119 -1.4795811  0.76199344
 [7,]  0.71031260  1.73786414 -0.29024959 -0.51072794  2.2298110  0.55937124
 [8,] -1.47518201 -0.25407735  0.90409773 -1.87888008  0.3864989  1.59926381
 [9,] -0.58972648 -0.97371862  0.19902022 -0.95184509  0.6602657 -0.09845773
[10,]  0.13970325  1.11119895 -0.05157481  2.27315661 -0.2762352 -1.44955378
[11,] -0.51172423  0.97349906 -0.90820518  0.20268763  0.2759330 -0.25766131
[12,]  0.15093735  1.25712868 -1.14247834 -2.30855470 -2.2742312 -2.03307133
[13,]  0.44203940  1.77628758  0.99032494 -0.05663566  0.9080857  0.58696417
[14,] -0.16239912 -2.68316852  0.11227328  0.06284384 -1.0862531  0.16058653
[15,]  0.97183854  0.65986308  1.14963167  0.71022814 -0.2155267  0.11315287
[16,] -0.67126548  1.17944967 -0.91049532 -0.59230740 -0.7334274  0.57169061
[17,]  1.63839716  0.39351378 -1.10381972  0.29852463  0.2121178 -0.96552965
[18,] -1.06827268 -1.18985867 -1.63486731  0.64253563 -0.9391419  0.31800115
[19,] -0.01141212 -0.35652737 -1.61638249  2.11279510 -0.6191936 -0.17350759
[20,] -1.86528134 -1.46550804 -0.83673701  0.91777963  0.2440112 -0.91261118
[21,]  0.01825086 -1.09073015  1.09299912 -1.57285475  0.3717434 -1.84689477
[22,] -0.24702055 -0.65725422  1.23509818  0.99264173  0.6272082  0.66951802
[23,] -0.91942511  2.26294100  0.17206660  0.47952087 -1.0731139 -0.10878652
[24,] -2.17316443  0.08769003  0.12049317 -0.29658056 -0.7086927  1.56657535
[25,] -0.64937705  0.76752300  0.55753267  0.81584023  0.9071317 -0.84484523
            [,18]       [,19]       [,20]       [,21]       [,22]        [,23]
 [1,]  1.09764928 -1.30582273  0.11689002 -0.20601575  0.28303792 -0.027191653
 [2,]  0.30088034  2.02341262  0.42113270 -0.58784361 -2.25259008  1.561392979
 [3,] -0.77696625 -0.75564882  1.57740438 -0.68545295  0.73435019 -0.991078158
 [4,] -0.03843418 -0.24159462 -0.25138852  1.00482418  0.14580574  0.004193986
 [5,]  1.10948957  1.09715890 -0.05562434 -0.77264909 -0.64942858 -0.044804842
 [6,]  0.53632527 -0.94661275 -0.02253187 -1.99373370 -0.56122436 -0.688653669
 [7,] -0.36334846 -1.13395992  2.33096097 -0.90925448  0.33479205 -0.130254649
 [8,] -0.10550071 -0.88338352 -0.09883035 -0.56315608  0.03201843  0.155092788
 [9,]  0.33387464  0.51641340  0.16643158 -1.21785562  1.23691719  1.277341552
[10,]  0.81023105 -0.33795540 -0.26963540 -1.82031785  0.05641342  1.053548212
[11,] -1.68369538 -0.02245186  0.84447361 -0.39962935 -0.14543271 -0.371716546
[12,]  0.66572784 -0.10205096  1.40876775  2.11836835 -0.59234963 -0.103132501
[13,] -0.79238753  0.30040860 -1.56623622  1.41515755 -1.26071298  2.498073606
[14,]  1.52772330  0.80662041  0.16903819  0.56476512 -0.68360578 -0.777260866
[15,] -1.48669240 -0.03720589 -1.50567917 -1.08129716 -0.16343720  0.757384577
[16,] -0.67114858 -1.45647599  0.99493295 -0.94197609 -0.43847351  0.022545035
[17,]  1.67517745 -0.62389065  1.24390841 -0.24418344 -0.57870301 -1.650031528
[18,]  0.61193206 -0.16959827 -0.03625683  1.08548855  1.58109043 -0.889116216
[19,] -0.23220565  1.27612317 -0.41125588  0.55834383  1.54066131 -0.608369722
[20,]  0.60529332 -0.25591448  1.28414896 -2.17622835  0.70298100 -0.213062904
[21,] -1.15910612 -0.16536827 -1.11780766  0.87730123 -0.06374862  1.471211256
[22,] -1.16442927 -0.42732111 -0.83506970  0.84253534 -0.74062398  0.466388474
[23,] -0.86992495 -0.05687275  1.50081170 -0.05158399 -1.03394717  1.818358361
[24,] -0.26110572 -1.44538360  0.89915086 -0.69012140 -0.29606366  1.923396212
[25,] -0.49419566  1.88280702 -0.45641208 -1.83898285 -1.44294972 -0.539003564
            [,24]       [,25]
 [1,] -0.38627880 -1.22783170
 [2,] -0.86180767  0.13415845
 [3,] -0.40200658 -0.37323349
 [4,]  0.59896282  0.03906038
 [5,]  0.08183728  0.14312432
 [6,]  0.33102576  0.10494725
 [7,] -0.46124694  0.60219574
 [8,]  0.35903924 -0.11839549
 [9,] -0.51579118  0.55916954
[10,]  0.58727622  0.04186138
[11,]  1.61961103  0.06362112
[12,]  0.44523123  1.46620369
[13,]  1.25526120 -0.47263087
[14,] -0.57490665  0.16347454
[15,]  0.31608949  0.30635016
[16,] -2.18787056  0.79257622
[17,]  2.37210132 -0.94907675
[18,]  0.97657987  0.90478698
[19,]  0.61445181 -0.34011041
[20,] -0.31526265  1.53100750
[21,]  0.23103795  0.38940339
[22,]  2.07548009  0.49598198
[23,]  0.65268490  0.64485868
[24,] -0.03739630 -0.04376477
[25,] -0.70639151 -1.35686873

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); rnorm(10) }
 [1]  2.2872472 -1.1967717 -0.6942925 -0.4122930 -0.9706733 -0.9472799
 [7]  0.7481393 -0.1169552  0.1526576  2.1899781

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); rnorm(100) }
  [1]  2.287247161 -1.196771682 -0.694292510 -0.412292951 -0.970673341
  [6] -0.947279945  0.748139340 -0.116955226  0.152657626  2.189978107
 [11]  0.356986230  2.716751783  2.281451926  0.324020540  1.896067067
 [16]  0.467680511 -0.893800723 -0.307328300 -0.004822422  0.988164149
 [21]  0.839750360  0.705341831  1.305964721 -1.387996217  1.272916864
 [26]  0.184192771  0.752279896  0.591745052 -0.983052596 -0.276063955
 [31] -0.870851023  0.718710553  0.110652878 -0.078466768 -0.420490459
 [36] -0.562125876  0.997513445 -1.105130059 -0.142287831  0.314994905
 [41]  1.218550535 -0.699317079 -0.285432752 -1.311552673 -0.391012431
 [46] -0.401526613  1.350517581  0.591190027  0.100525456  0.931071996
 [51] -0.262742349 -0.007668105  0.367153007  1.707162545  0.723740263
 [56]  0.481036049 -1.567868244  0.318250283  0.165991451 -0.899907630
 [61]  0.076371474  0.159155278  0.543674185  0.704807353  0.318969143
 [66]  1.109249789  0.769154195  1.153473675  1.260683503  0.700623507
 [71]  0.432627161 -0.922601718 -0.615584207 -0.866659688 -1.639517087
 [76] -1.325839244 -0.889036728 -0.557602330 -0.062402309  2.422692977
 [81]  0.342585350  0.004248236  0.029219842 -0.393423429 -0.792704563
 [86] -0.311701865 -0.346068592 -0.304607588 -1.785893487  0.587274672
 [91]  1.635794434 -0.645423474  0.618992169  0.236393598  0.846500899
 [96] -0.573645739  1.117993204 -1.540001132 -0.438123899 -0.150672971

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); rnorm(25*25) }
  [1]  2.287247161 -1.196771682 -0.694292510 -0.412292951 -0.970673341
  [6] -0.947279945  0.748139340 -0.116955226  0.152657626  2.189978107
 [11]  0.356986230  2.716751783  2.281451926  0.324020540  1.896067067
 [16]  0.467680511 -0.893800723 -0.307328300 -0.004822422  0.988164149
 [21]  0.839750360  0.705341831  1.305964721 -1.387996217  1.272916864
 [26]  0.184192771  0.752279896  0.591745052 -0.983052596 -0.276063955
 [31] -0.870851023  0.718710553  0.110652878 -0.078466768 -0.420490459
 [36] -0.562125876  0.997513445 -1.105130059 -0.142287831  0.314994905
 [41]  1.218550535 -0.699317079 -0.285432752 -1.311552673 -0.391012431
 [46] -0.401526613  1.350517581  0.591190027  0.100525456  0.931071996
 [51] -0.262742349 -0.007668105  0.367153007  1.707162545  0.723740263
 [56]  0.481036049 -1.567868244  0.318250283  0.165991451 -0.899907630
 [61]  0.076371474  0.159155278  0.543674185  0.704807353  0.318969143
 [66]  1.109249789  0.769154195  1.153473675  1.260683503  0.700623507
 [71]  0.432627161 -0.922601718 -0.615584207 -0.866659688 -1.639517087
 [76] -1.325839244 -0.889036728 -0.557602330 -0.062402309  2.422692977
 [81]  0.342585350  0.004248236  0.029219842 -0.393423429 -0.792704563
 [86] -0.311701865 -0.346068592 -0.304607588 -1.785893487  0.587274672
 [91]  1.635794434 -0.645423474  0.618992169  0.236393598  0.846500899
 [96] -0.573645739  1.117993204 -1.540001132 -0.438123899 -0.150672971
[101]  0.519058365  0.587539705 -0.079333061 -1.174361015  0.308722118
[106] -1.603878543  0.991289625  1.023220445  0.840145439  0.120078608
[111] -0.426255055  0.458926244  0.645047948  0.611530549 -0.889211294
[116]  1.543892349 -1.241763605  1.103447340  0.982772357  0.304327174
[121] -1.554718216  1.569890776  0.688449693 -0.177603659  0.729201266
[126]  1.533250931  0.506578448  0.033327676 -1.467550715  1.019157716
[131] -0.593339333  0.812409890  0.866167830  0.368308303  1.134819099
[136] -0.757099280  0.445220569  0.915932944  0.269758742  1.007540449
[141] -1.461433265 -0.874785611  0.165228938  0.207207027  0.482361891
[146] -0.071658375 -0.888928425  0.485943570  0.340496757 -1.097924194
[151] -0.355694443  1.097300411 -0.906691970 -0.207456624  0.678861434
[156] -0.797787741 -1.591538938  1.180348125  1.222569290 -0.010909187
[161]  0.345522466  0.094189158  0.006793368  0.742622878  1.042186536
[166] -0.319337138  0.322643396  0.685052979  0.320242774 -1.914938024
[171] -2.339962899  0.482864294  1.178530047 -1.292777034  0.615773085
[176]  0.256042081  0.727839002  1.324110919  0.147158490 -0.598539393
[181]  2.192529927  2.327112796  1.134869600 -0.190884556  0.474844564
[186] -0.545474935  1.055648545  0.429021832 -1.819956414 -0.691976089
[191] -1.931828248  1.209672013 -0.279000048 -1.095783227 -0.102186042
[196]  0.357022958 -0.882302566 -0.056647794 -0.581018951  0.644088189
[201]  2.023344053  0.862492498 -0.024909491  0.600634949  1.216480735
[206] -1.176531550 -0.609340034  0.387262573 -1.399140144  1.232491851
[211]  0.015507501 -1.620959052 -0.665464664 -0.574840510 -0.901892975
[216]  1.491599370 -0.137279317  0.108281698 -1.035215103 -0.444743919
[221] -0.196049266 -1.269364492  0.953521185  0.472546654 -0.558778101
[226]  1.242064560 -0.015258466 -0.791788389 -0.401618743 -1.896701290
[231]  0.971974934 -0.513954856  0.014561673 -0.260935570  1.522358392
[236] -1.473369746 -0.016558014  0.024540609 -0.001256989 -0.433932707
[241] -0.405559057  0.155233319 -0.972381818  1.548174930 -0.370123333
[246]  1.961525257 -0.609995576 -0.077428757 -1.828859263  0.805924242
[251] -1.477591780 -2.973255713 -1.339762142 -0.265842026 -0.383993408
[256] -0.602942330 -0.651524037  1.757671509 -0.019034865  0.155284612
[261] -0.760846441 -1.549726907  2.750165012  1.047423248  0.917992474
[266]  0.470109508 -0.617372088  0.042106273 -0.901898901  1.339583210
[271]  0.803854350  0.318478653 -0.190453307 -1.087266691  0.145399729
[276]  2.462800251  0.923619692  0.741876688  1.416021792  1.251663370
[281]  2.108905691  0.710312603 -1.475182009 -0.589726484  0.139703246
[286] -0.511724233  0.150937351  0.442039395 -0.162399123  0.971838541
[291] -0.671265482  1.638397161 -1.068272681 -0.011412125 -1.865281340
[296]  0.018250863 -0.247020546 -0.919425112 -2.173164432 -0.649377054
[301]  0.525261550 -0.275727311  0.054709765 -0.388249606 -0.417023046
[306] -1.164175165  1.737864135 -0.254077350 -0.973718623  1.111198947
[311]  0.973499056  1.257128676  1.776287583 -2.683168522  0.659863075
[316]  1.179449667  0.393513776 -1.189858667 -0.356527365 -1.465508044
[321] -1.090730152 -0.657254216  2.262941004  0.087690029  0.767523002
[326] -0.613157464  0.152502970 -0.591707447 -0.960704967 -0.584957995
[331]  0.656672889 -0.290249588  0.904097729  0.199020224 -0.051574807
[336] -0.908205179 -1.142478339  0.990324936  0.112273278  1.149631674
[341] -0.910495324 -1.103819717 -1.634867306 -1.616382494 -0.836737007
[346]  1.092999116  1.235098180  0.172066602  0.120493170  0.557532670
[351]  0.491383162 -0.069012624 -1.350796315  0.799357571 -0.320094077
[356] -0.356951189 -0.510727938 -1.878880082 -0.951845090  2.273156615
[361]  0.202687630 -2.308554698 -0.056635663  0.062843842  0.710228137
[366] -0.592307397  0.298524630  0.642535627  2.112795096  0.917779633
[371] -1.572854753  0.992641731  0.479520871 -0.296580555  0.815840235
[376] -0.999771613  0.549210294  0.279771204  0.916635890 -1.731257258
[381] -1.479581067  2.229811027  0.386498946  0.660265688 -0.276235210
[386]  0.275932999 -2.274231202  0.908085740 -1.086253108 -0.215526715
[391] -0.733427376  0.212117835 -0.939141903 -0.619193637  0.244011158
[396]  0.371743383  0.627208219 -1.073113926 -0.708692714  0.907131672
[401] -0.319705638  1.165065941 -0.621710549  1.248213190  1.440401542
[406]  0.761993438  0.559371235  1.599263806 -0.098457735 -1.449553784
[411] -0.257661306 -2.033071331  0.586964172  0.160586532  0.113152868
[416]  0.571690607 -0.965529654  0.318001153 -0.173507590 -0.912611181
[421] -1.846894773  0.669518018 -0.108786519  1.566575351 -0.844845232
[426]  1.097649284  0.300880343 -0.776966252 -0.038434179  1.109489569
[431]  0.536325266 -0.363348458 -0.105500712  0.333874643  0.810231052
[436] -1.683695383  0.665727843 -0.792387535  1.527723303 -1.486692398
[441] -0.671148581  1.675177447  0.611932061 -0.232205646  0.605293318
[446] -1.159106124 -1.164429272 -0.869924947 -0.261105718 -0.494195664
[451] -1.305822731  2.023412621 -0.755648821 -0.241594619  1.097158899
[456] -0.946612751 -1.133959921 -0.883383523  0.516413399 -0.337955399
[461] -0.022451856 -0.102050958  0.300408597  0.806620413 -0.037205895
[466] -1.456475992 -0.623890647 -0.169598272  1.276123168 -0.255914477
[471] -0.165368271 -0.427321111 -0.056872747 -1.445383596  1.882807020
[476]  0.116890018  0.421132703  1.577404382 -0.251388524 -0.055624336
[481] -0.022531871  2.330960973 -0.098830347  0.166431579 -0.269635400
[486]  0.844473608  1.408767749 -1.566236221  0.169038186 -1.505679169
[491]  0.994932947  1.243908408 -0.036256826 -0.411255878  1.284148964
[496] -1.117807659 -0.835069705  1.500811698  0.899150860 -0.456412078
[501] -0.206015750 -0.587843606 -0.685452946  1.004824182 -0.772649093
[506] -1.993733701 -0.909254485 -0.563156081 -1.217855617 -1.820317853
[511] -0.399629346  2.118368348  1.415157546  0.564765116 -1.081297164
[516] -0.941976094 -0.244183443  1.085488554  0.558343827 -2.176228351
[521]  0.877301231  0.842535336 -0.051583988 -0.690121403 -1.838982845
[526]  0.283037917 -2.252590083  0.734350187  0.145805741 -0.649428581
[531] -0.561224360  0.334792049  0.032018427  1.236917189  0.056413424
[536] -0.145432708 -0.592349626 -1.260712980 -0.683605784 -0.163437195
[541] -0.438473508 -0.578703015  1.581090432  1.540661310  0.702981004
[546] -0.063748618 -0.740623984 -1.033947166 -0.296063663 -1.442949725
[551] -0.027191653  1.561392979 -0.991078158  0.004193986 -0.044804842
[556] -0.688653669 -0.130254649  0.155092788  1.277341552  1.053548212
[561] -0.371716546 -0.103132501  2.498073606 -0.777260866  0.757384577
[566]  0.022545035 -1.650031528 -0.889116216 -0.608369722 -0.213062904
[571]  1.471211256  0.466388474  1.818358361  1.923396212 -0.539003564
[576] -0.386278801 -0.861807666 -0.402006583  0.598962820  0.081837282
[581]  0.331025756 -0.461246936  0.359039240 -0.515791179  0.587276223
[586]  1.619611026  0.445231229  1.255261202 -0.574906649  0.316089488
[591] -2.187870565  2.372101320  0.976579870  0.614451811 -0.315262654
[596]  0.231037949  2.075480091  0.652684898 -0.037396298 -0.706391507
[601] -1.227831705  0.134158451 -0.373233489  0.039060375  0.143124323
[606]  0.104947251  0.602195742 -0.118395494  0.559169543  0.041861378
[611]  0.063621116  1.466203694 -0.472630868  0.163474538  0.306350163
[616]  0.792576218 -0.949076754  0.904786982 -0.340110408  1.531007499
[621]  0.389403389  0.495981980  0.644858676 -0.043764773 -1.356868729

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); runif(10) }
 [1] 0.98890930 0.39774545 0.11569778 0.06974868 0.24374939 0.79201043
 [7] 0.34006235 0.97206250 0.16585548 0.45910367

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); runif(100) }
  [1] 0.988909298 0.397745453 0.115697779 0.069748679 0.243749391 0.792010426
  [7] 0.340062353 0.972062501 0.165855485 0.459103666 0.171748077 0.231477102
 [13] 0.772811946 0.096301542 0.453447770 0.084700713 0.560665867 0.008704600
 [19] 0.985737091 0.316584804 0.639448942 0.295223235 0.996703694 0.906021320
 [25] 0.988739144 0.065645739 0.627038758 0.490475041 0.971024413 0.362220848
 [31] 0.679993461 0.263719930 0.185714261 0.185143222 0.379296747 0.847024392
 [37] 0.498076133 0.790585574 0.838463872 0.456903865 0.799475815 0.381943061
 [43] 0.759701231 0.436775602 0.904217721 0.319534914 0.082569093 0.816289079
 [49] 0.898476221 0.966496398 0.573068883 0.720079497 0.774058624 0.627760801
 [55] 0.722989341 0.386831279 0.162790778 0.187228283 0.391249474 0.273901210
 [61] 0.191917748 0.504391806 0.763840357 0.693668871 0.544054188 0.659087226
 [67] 0.468728380 0.481805539 0.337063598 0.424526302 0.287015131 0.601191532
 [73] 0.840742326 0.620837048 0.134551619 0.567722430 0.443426331 0.437975423
 [79] 0.623617233 0.932653342 0.888492583 0.878540561 0.242176948 0.741453797
 [85] 0.387656313 0.078951739 0.094835550 0.762142731 0.347894026 0.416766709
 [91] 0.344016231 0.008410923 0.911574991 0.182205419 0.722803449 0.571963331
 [97] 0.540036414 0.354947415 0.824091838 0.186136761

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(7); runif(25*25) }
  [1] 0.988909298 0.397745453 0.115697779 0.069748679 0.243749391 0.792010426
  [7] 0.340062353 0.972062501 0.165855485 0.459103666 0.171748077 0.231477102
 [13] 0.772811946 0.096301542 0.453447770 0.084700713 0.560665867 0.008704600
 [19] 0.985737091 0.316584804 0.639448942 0.295223235 0.996703694 0.906021320
 [25] 0.988739144 0.065645739 0.627038758 0.490475041 0.971024413 0.362220848
 [31] 0.679993461 0.263719930 0.185714261 0.185143222 0.379296747 0.847024392
 [37] 0.498076133 0.790585574 0.838463872 0.456903865 0.799475815 0.381943061
 [43] 0.759701231 0.436775602 0.904217721 0.319534914 0.082569093 0.816289079
 [49] 0.898476221 0.966496398 0.573068883 0.720079497 0.774058624 0.627760801
 [55] 0.722989341 0.386831279 0.162790778 0.187228283 0.391249474 0.273901210
 [61] 0.191917748 0.504391806 0.763840357 0.693668871 0.544054188 0.659087226
 [67] 0.468728380 0.481805539 0.337063598 0.424526302 0.287015131 0.601191532
 [73] 0.840742326 0.620837048 0.134551619 0.567722430 0.443426331 0.437975423
 [79] 0.623617233 0.932653342 0.888492583 0.878540561 0.242176948 0.741453797
 [85] 0.387656313 0.078951739 0.094835550 0.762142731 0.347894026 0.416766709
 [91] 0.344016231 0.008410923 0.911574991 0.182205419 0.722803449 0.571963331
 [97] 0.540036414 0.354947415 0.824091838 0.186136761 0.396374585 0.486214877
[103] 0.496940902 0.387040419 0.643247554 0.343830247 0.956104083 0.042711742
[109] 0.765387396 0.203770043 0.684754565 0.396167753 0.058455937 0.736253970
[115] 0.624852455 0.629168641 0.565918159 0.789320506 0.184084703 0.832688440
[121] 0.530438221 0.473129903 0.563226733 0.221216818 0.706667149 0.321192662
[127] 0.759534939 0.160266412 0.625125045 0.108314490 0.866338781 0.778653253
[133] 0.779099110 0.505085685 0.875641987 0.657582362 0.896288547 0.809519769
[139] 0.758230993 0.805500210 0.667357171 0.513291479 0.178107399 0.562763405
[145] 0.269084484 0.719015143 0.193064248 0.924299747 0.050552808 0.967109258
[151] 0.092446474 0.903669725 0.186991671 0.202658952 0.288557984 0.798631273
[157] 0.475121226 0.770771818 0.992297024 0.811099534 0.634044782 0.846010283
[163] 0.501694796 0.663214930 0.511655369 0.524638179 0.347003380 0.809235938
[169] 0.213974988 0.423013881 0.377633552 0.784650579 0.364645584 0.731619959
[175] 0.380332519 0.714831269 0.037058254 0.498559137 0.721490374 0.978518000
[181] 0.949058695 0.296092094 0.259326394 0.923973980 0.732039236 0.739723322
[187] 0.593436368 0.080261439 0.801363316 0.261158882 0.283103776 0.714157090
[193] 0.868215054 0.701323045 0.061780042 0.437410935 0.330648232 0.904205126
[199] 0.440116849 0.384970255 0.698139974 0.873962532 0.721579354 0.442052124
[205] 0.468383849 0.866327895 0.120125231 0.016276919 0.621233539 0.450468939
[211] 0.054370416 0.397014734 0.839227910 0.517077034 0.846898185 0.338453275
[217] 0.799586573 0.722995738 0.547789566 0.290069000 0.334961002 0.652502363
[223] 0.676856431 0.734399399 0.740551948 0.242195845 0.729575800 0.258018252
[229] 0.186944764 0.904899304 0.938692790 0.967275376 0.107161898 0.386746766
[235] 0.865083527 0.394467736 0.837140262 0.051914743 0.619560680 0.528164664
[241] 0.060006598 0.130914320 0.941779737 0.725135227 0.754415178 0.454452775
[247] 0.429517122 0.708526997 0.767060720 0.280059143 0.937392981 0.047742886
[253] 0.693774679 0.727987585 0.513293359 0.338572729 0.071113148 0.676048664
[259] 0.845935948 0.425374720 0.276477046 0.186031271 0.791721761 0.292779080
[265] 0.806800934 0.303845516 0.643678320 0.543556314 0.871774436 0.506891669
[271] 0.224495193 0.708128533 0.671919822 0.395381115 0.820148962 0.931951389
[277] 0.606327066 0.410366985 0.843162433 0.358348509 0.071948284 0.836629100
[283] 0.190845285 0.417061561 0.565618111 0.050722353 0.582075913 0.174117556
[289] 0.685225555 0.278545690 0.471436888 0.475961835 0.187020776 0.346010851
[295] 0.686496411 0.723981390 0.633258768 0.049270478 0.136118793 0.559847002
[301] 0.361034700 0.649323652 0.863744956 0.336403099 0.182284860 0.153892108
[307] 0.417826634 0.288717891 0.751387168 0.556558449 0.212496839 0.828355182
[313] 0.055744168 0.824246763 0.881069107 0.813416916 0.889253792 0.427185679
[319] 0.495647947 0.811994791 0.635149184 0.966256866 0.537520557 0.168309421
[325] 0.502710135 0.944187227 0.771144985 0.614569535 0.851337402 0.319993825
[331] 0.374735431 0.921936606 0.626517335 0.629350343 0.753344758 0.388883051
[337] 0.625607855 0.250782848 0.027750204 0.323975102 0.009642830 0.438463602
[343] 0.685403952 0.187244218 0.880707320 0.472374433 0.098044091 0.394348188
[349] 0.730977848 0.687304613 0.601040831 0.357461814 0.766643930 0.052174472
[355] 0.907266900 0.342795660 0.558496540 0.435603583 0.274740044 0.117309494
[361] 0.985829362 0.926973709 0.990020368 0.556270809 0.871785018 0.752441008
[367] 0.424308022 0.421402510 0.682551119 0.122051680 0.292713461 0.198493198
[373] 0.854435593 0.049085436 0.666046329 0.397446506 0.034382821 0.163344789
[379] 0.244476175 0.428066254 0.026690355 0.694405509 0.886797613 0.861526547
[385] 0.390122391 0.343954109 0.136586823 0.355828221 0.459304503 0.870256480
[391] 0.639462688 0.477497697 0.188806608 0.509698991 0.477412879 0.176907800
[397] 0.280613845 0.114403635 0.740240878 0.496620325 0.978481153 0.651185201
[403] 0.805791720 0.911352574 0.490063579 0.046876546 0.725958425 0.098552066
[409] 0.888099081 0.393106178 0.119691266 0.827733963 0.271149533 0.951310817
[415] 0.650719090 0.139196557 0.080885481 0.451400035 0.891117295 0.787731541
[421] 0.506186348 0.803989580 0.052513209 0.795292841 0.252876663 0.923684047
[427] 0.282699579 0.797022308 0.183556859 0.925229186 0.932097897 0.185298056
[433] 0.445405010 0.356907755 0.543113886 0.014449528 0.150284231 0.368167803
[439] 0.328252418 0.129830291 0.422285806 0.023890862 0.102155550 0.449767343
[445] 0.829836969 0.201506994 0.681731676 0.558151370 0.288156588 0.110282171
[451] 0.892893629 0.149954897 0.493912989 0.200156888 0.214242040 0.416463380
[457] 0.343982318 0.068086939 0.028933688 0.693376990 0.834468489 0.913377619
[463] 0.303641777 0.404263421 0.505809065 0.051665923 0.397071097 0.475474120
[469] 0.936040343 0.800159157 0.070325686 0.225021683 0.493394610 0.554503728
[475] 0.509789303 0.124445061 0.499498537 0.390260760 0.332168660 0.071715833
[481] 0.342533308 0.462215300 0.561681310 0.154426905 0.165430319 0.279062960
[487] 0.939209907 0.866816371 0.355645297 0.971240275 0.975091108 0.264834033
[493] 0.270932370 0.026024646 0.469141233 0.293257812 0.033710347 0.204622180
[499] 0.789856732 0.254799355 0.069758541 0.467920935 0.001473298 0.210184196
[505] 0.090161342 0.698558903 0.395180434 0.475053075 0.350491667 0.168137522
[511] 0.273273522 0.965892061 0.257354132 0.998879220 0.960598297 0.122483281
[517] 0.492406644 0.281286263 0.561701527 0.771911790 0.223374396 0.924947239
[523] 0.060603541 0.250506086 0.997021737 0.302592350 0.852547788 0.794759759
[529] 0.820688596 0.877223568 0.680861612 0.275680595 0.268494662 0.798162794
[535] 0.516793009 0.668437805 0.183555288 0.655466895 0.909809557 0.688679830
[541] 0.789259453 0.399949068 0.624939055 0.456209752 0.424476959 0.785816751
[547] 0.138459486 0.154755993 0.557802361 0.531342120 0.993107169 0.388125351
[553] 0.822157821 0.830869126 0.770918974 0.209627276 0.921615443 0.162160798
[559] 0.894653726 0.131491530 0.982523636 0.473127613 0.761244842 0.803365579
[565] 0.070081810 0.115550329 0.277687014 0.707308517 0.555552766 0.489766358
[571] 0.304422007 0.771430857 0.559987429 0.828644309 0.670769653 0.536579325
[577] 0.435495781 0.261434323 0.834434558 0.888513507 0.251025711 0.480356591
[583] 0.949330568 0.492853978 0.142698761 0.873871213 0.495447319 0.605360667
[589] 0.031070987 0.641177472 0.507280635 0.544740617 0.402446161 0.482019869
[595] 0.178936627 0.885093973 0.014883971 0.884073181 0.258047348 0.459595995
[601] 0.700299312 0.123179266 0.391378759 0.787041728 0.521815158 0.578327551
[607] 0.348915665 0.591439999 0.338330774 0.995909323 0.122176517 0.425663092
[613] 0.958882616 0.907734567 0.399717898 0.462696604 0.165098135 0.432789549
[619] 0.866758644 0.078569611 0.834847336 0.601319070 0.895646481 0.305230110
[625] 0.962157237

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRandom
#{ set.seed(9567, "Marsaglia-Multicarry"); sum(runif(100)) }
[1] 52.92218

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ m <- matrix(1:6, ncol=2) ; rbind(11:12, m) }
     [,1] [,2]
[1,]   11   12
[2,]    1    4
[3,]    2    5
[4,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ m <- matrix(1:6, ncol=2) ; rbind(m, 11:12) }
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
[4,]   11   12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ rbind() }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ rbind(1.1:3.3,1.1:3.3) }
     [,1] [,2] [,3]
[1,]  1.1  2.1  3.1
[2,]  1.1  2.1  3.1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ rbind(1:3,1:3) }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRbind
#{ rbind(1:3,2) }
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    2    2    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(1) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(1+1i) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(NA+2i) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(as.double(NA)) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(c(1+1i,2-2i)) }
[1]  1 -2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(c(1,2)) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Im(c(1,NA,2)) }
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(1+1i) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(NA+2i) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(as.double(NA)) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(c(1+1i,2-2i)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(c(1,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testReIm
#{ Re(c(1,NA,2)) }
[1]  1 NA  2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ Recall(10) }
Error in Recall(10) : 'Recall' called from outside a closure

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ f<-function(i) { if (i==1) { 1 } else if (i==2) { 1 } else { Recall(i-1) + Recall(i-2) } } ; f(10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ f<-function(i) { if(i<=1) 1 else i*Recall(i-1) } ; f(10) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRecall
#{ f<-function(i) { if(i<=1) 1 else i*Recall(i-1) } ; g <- f ; f <- sum ; g(10) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep("hello", 3) }
[1] "hello" "hello" "hello"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(1,3) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(1:3, length.out=4) }
[1] 1 2 3 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(1:3,2) }
[1] 1 2 3 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(NA,8) }
[1] NA NA NA NA NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(TRUE,8) }
[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(as.raw(14), 4) }
[1] 0e 0e 0e 0e

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1,2),0) }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRep
#{ rep(c(1,2),c(3,3)) }
[1] 1 1 1 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int("a",3) }
[1] "a" "a" "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(1,3) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(1:3,2) }
[1] 1 2 3 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(1L,3L) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(as.raw(14), 4) }
[1] 0e 0e 0e 0e

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(c(1,2),0) }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRepInt
#{ rep.int(c(1,2),2) }
[1] 1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRev
#{ rev(1:3) }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRev
#{ rev(c(1+1i, 2+2i)) }
[1] 2+2i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(-1.5) }
[1] -2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(0.4) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(0.5) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(0.6) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(1.5) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(1/0) }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(1L) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testRound
#{ round(c(0,0.2,0.4,0.6,0.8,1)) }
[1] 0 0 0 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function() { sapply(1:3,function(x){x*2L}) }; f() + f() }
[1]  4  8 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f <- function() { sapply(c(1,2,3),function(x){x*2}) }; f() + f() }
[1]  4  8 12

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f<-function() { x<-2 ; sapply(1, function(i) { x }) } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f<-function(g) { sapply(1:3, g) } ; f(function(x) { x*2 }) }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ f<-length; sapply(1:3, f) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ h <- new.env() ; assign("a",1,h) ; assign("b",2,h) ; sa <- sapply(ls(h), function(k) get(k,h,inherits=FALSE)) ; names(sa) }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(x) { if (x==1) { 1 } else if (x==2) { integer() } else { TRUE } }) }
[[1]]
[1] 1

[[2]]
integer(0)

[[3]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, function(x) { if (x==1) { list(1) } else if (x==2) { list(NULL) } else { list() } }) }
[[1]]
[[1]][[1]]
[1] 1


[[2]]
[[2]][[1]]
NULL


[[3]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3, length) }
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(1:3,function(x){x*2L}) }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(c(1,2,3),function(x){x*2}) }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSapply
#{ sapply(list(1,2,3),function(x){x*2}) }
[1] 2 4 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSd
#{ round(100*sd(c(1,2))^2) }
[1] 50

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ (0-1.5):(0-12) }
 [1]  -1.5  -2.5  -3.5  -4.5  -5.5  -6.5  -7.5  -8.5  -9.5 -10.5 -11.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ (0-12):1.5 }
 [1] -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ (0-5):(0-9) }
[1] -5 -6 -7 -8 -9

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1.1:5.1 }
[1] 1.1 2.1 3.1 4.1 5.1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1.5:(0-12) }
 [1]   1.5   0.5  -0.5  -1.5  -2.5  -3.5  -4.5  -5.5  -6.5  -7.5  -8.5  -9.5
[13] -10.5 -11.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 10:1 }
 [1] 10  9  8  7  6  5  4  3  2  1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1:(0-10) }
 [1]   1   0  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1:(0L-10L) }
 [1]   1   0  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1:10 }
 [1]  1  2  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 1L:(0-10) }
 [1]   1   0  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 5L:(0L-5L) }
 [1]  5  4  3  2  1  0 -1 -2 -3 -4 -5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequence
#{ 5L:10L }
[1]  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0,0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0,0,0) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0,0,1i) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0L,0L) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(0L,0L,0L) }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(1,-4,-2) }
[1]  1 -1 -3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(10L,1L) }
 [1] 10  9  8  7  6  5  4  3  2  1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(1L,10L) }
 [1]  1  2  3  4  5  6  7  8  9 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatement
#{ seq(1L,4L,2L) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=-10,to=-5,by=2) }
[1] -10  -8  -6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=1,to=3) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=1,to=3,by=1) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=1.4) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(from=1.7) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSequenceStatementNamedParams
#{ seq(length.out=1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSimpleRm
#{ rm("ieps") }
Warning message:
In rm("ieps") : object 'ieps' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSimpleRm
#{ x <- 200 ; rm("x") ; x }
Error: object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSimpleRm
#{ x <- 200 ; rm("x") }

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%03d", 1:3) }
[1] "001" "002" "003"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%04X", 26) }
[1] "001A"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%3d", 1:3) }
[1] "  1" "  2" "  3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%4X", 26) }
[1] "  1A"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%7.3f", 10.1) }
[1] " 10.100"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%d", 10) }
[1] "10"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("%d%d",1L,2L) }
[1] "12"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("0x%x",1) }
[1] "0x1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("0x%x",10) }
[1] "0xa"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("0x%x",10L) }
[1] "0xa"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("0x%x",1L) }
[1] "0x1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("Hello %*2$d", 3, 2) }
[1] "Hello  3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("Hello %*d", 3, 2) }
[1] "Hello   2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSprintf
#{ sprintf("Hello %2$*2$d", 3, 2) }
[1] "Hello  2"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(9) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(9L) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(c(1,4,9,16)) }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSqrt
#{ sqrt(c(1,4,NA,16)) }
[1]  1  2 NA  4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{storage.mode(1)}
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{storage.mode(c(1,2,3))}
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{storage.mode(c)}
[1] "function"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{storage.mode(f<-function(){1})}
[1] "function"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{x<-1;storage.mode(x)<-"character"}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStorageMode
#{x<-1;storage.mode(x)<-"logical";x}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit( c("helloh", "hi"), c("h","")) }
[[1]]
[1] ""     "ello"

[[2]]
[1] "h" "i"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit( c("helloh", "hi"), c("h",""), fixed=TRUE) }
[[1]]
[1] ""     "ello"

[[2]]
[1] "h" "i"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit("helloh", "", fixed=TRUE) }
[[1]]
[1] "h" "e" "l" "l" "o" "h"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit("helloh", "h") }
[[1]]
[1] ""     "ello"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testStrSplit
#{ strsplit("helloh", "h", fixed=TRUE) }
[[1]]
[1] ""     "ello"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSub
#{ gsub("a","aa", "prAgue alley") }
[1] "prAgue aalley"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSub
#{ gsub("a","aa", "prague alley") }
[1] "praague aalley"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSub
#{ sub("a","aa", "prague alley") }
[1] "praague alley"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", -1, 3) }
[1] "123"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", -20, -100) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", -5, -1) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 2, 4) }
[1] "234"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 2.8, 4) }
[1] "234"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 2L, 4L) }
[1] "234"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 4, 2) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 4, 8) }
[1] "456"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("123456", 7, 8) }
[1] ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("abcdef",c(1,2),c(3L,5L)) }
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("fastr", 1, NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr("fastr", NA, 2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(1234,2,3) }
[1] "23"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(1234L,2,3) }
[1] "23"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(NA,1,2) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), 2, integer()) }
Error in substr(c("abcdef", "aa"), 2, integer()) :
  invalid substring arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), 3, NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), NA, 4) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), c(1,NA), 4) }
[1] "abcd" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), c(NA,8), 4) }
[1] NA ""

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("abcdef", "aa"), integer(), 2) }
Error in substr(c("abcdef", "aa"), integer(), 2) :
  invalid substring arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("hello", "bye"), 1, 2) }
[1] "he" "by"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("hello", "bye"), 1, c(1,2,3)) }
[1] "h"  "by"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("hello", "bye"), c(1,2), c(2,3)) }
[1] "he" "ye"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(c("hello", "bye"), c(1,2,3), 4) }
[1] "hell" "ye"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ substr(character(), integer(), integer()) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,3)<-"0"; x }
[1] "0bcdef"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,3)<-"0000"; x }
[1] "000def"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,3)<-NULL; x }
Error in `substr<-`(`*tmp*`, 1, 3, value = NULL) : invalid value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,3)<-character(); x }
Error in `substr<-`(`*tmp*`, 1, 3, value = character(0)) : invalid value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,4)<-"0000"; x }
[1] "0000ef"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,1,NA)<-"0"; x }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,3,1)<-0; x }
Error in `substr<-`(`*tmp*`, 3, 1, value = 0) : invalid value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,NA,3)<-"0"; x }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-"abcdef"; substr(x,integer(),3)<-NULL; x }
Error in `substr<-`(`*tmp*`, integer(), 3, value = NULL) :
  invalid substring arguments

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-c("abcdef"); substr(x[1], 2, 3)<-"0"; x }
[1] "a0cdef"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-c("abcdef", "ghijklm"); substr(x, c(1,NA), 4)<-"0"; x }
[1] "0bcdef" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-character(); substr(x,1,3)<-"0"; x }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-character(); substr(x,1,3)<-0; x }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-character(); substr(x,1,3)<-NULL; x }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSubstring
#{ x<-character(); substr(x,integer(),3)<-NULL; x }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ `sum`(1:10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum() }
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(0, 1, 2, 3) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(1:6, 3, 4) }
[1] 28

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(1:6, 3L, TRUE) }
[1] 25

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(c(0, 1, 2, 3)) }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSum
#{ sum(c(0, 1, 2, 3), 4) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSummaryGroupDispatch
#{x<-c(1,2,3);class(x)<-"foo";Summary.foo<-function(x,...){"summary"};max(x)}
[1] "summary"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSummaryGroupDispatch
#{x<-c(1,2,3);class(x)<-"foo";Summary.foo<-function(x,...){"summary"};min(x)}
[1] "summary"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSummaryGroupDispatch
#{x<-c(1,2,3);class(x)<-"foo";min.foo<-function(x,...){"summary"};min(x)}
[1] "summary"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ test1 <- function(type) { switch(type, mean = 1, median = 2, trimmed = 3) };test1("median")}
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ test1 <- function(type) { switch(type, mean = mean(c(1,2,3,4)), median = 2, trimmed = 3) };test1("mean")}
[1] 2.5

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{ u <- "uiui" ; switch(u, "iuiu" = "ieps", "uiui" = "miep") }
[1] "miep"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{switch(3,1,2,3)}
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testSwitch
#{switch(4,1,2,3)}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- double() ; dim(m) <- c(0,4) ; t(m) }

[1,]
[2,]
[3,]
[4,]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- matrix(-5000:4999, nrow=100) ; sum(m * t(m)) }
[1] 1666502500

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- matrix(1:49, nrow=7) ; sum(m * t(m)) }
[1] 33369

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- matrix(1:81, nrow=9) ; sum(m * t(m)) }
[1] 145881

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ m <- matrix(c(rep(1:10,100200),100L), nrow=1001) ; sum(m * t(m)) }
[1] 38587000

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(1:3) }
     [,1] [,2] [,3]
[1,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(matrix(1:4, nrow=2)) }
     [,1] [,2]
[1,]    1    2
[2,]    3    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(matrix(1:6, nrow=2)) }
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(t(matrix(1:4, nrow=2))) }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(t(matrix(1:6, nrow=2))) }
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTranspose
#{ t(t(t(1:3))) }
     [,1] [,2] [,3]
[1,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.array(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.array(1:6) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.array(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.array(matrix(1:6, nrow=2)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.character("hi") }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.complex(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.complex(1i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.double("10") }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.double(10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.double(10L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.integer(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.integer(1L) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.logical(1L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.logical(NA) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.matrix(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.matrix(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.matrix(matrix(1:6, nrow=2)) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.numeric(10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.numeric(10L) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.numeric(TRUE) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeCheck
#{ is.raw(raw()) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ length(typeof(NULL)) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof("hi") }
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof("test") }
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(1) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(1:3) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(1L) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(NULL) }
[1] "NULL"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(TRUE) }
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(c(1, 2, 3)) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(c(1L, 2L, 3L)) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(c(TRUE, TRUE, FALSE)) }
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(function(){}) }
[1] "closure"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(length(typeof(NULL))) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(sum) }
[1] "builtin"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testTypeOf
#{ typeof(typeof(NULL)) }
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUnlist
#{ unlist(list("hello", "hi")) }
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"foo"; class(x) }
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"foo"; oldClass(x) }
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"integer"; class(x) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"integer"; class(x)<-"integer"; class(x) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"integer"; class(x)<-"integer"; oldClass(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x<-1; oldClass(x)<-"integer"; oldClass(x) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{ x=1;class(x)<-"character"; x}
[1] "1"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-"abc";class(x)<-"a";class(x)<-"character";x;}
[1] "abc"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1; class(x)<-"logical"; x;  class(x)<-c(1,2,3); x; class(x)<-NULL; x;}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;attr(x,"class")<-"b";x;}
[1] 1
attr(,"class")
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;attr(x,"class")<-c("a","b");attr(x,"class")<-"numeric";x}
[1] 1
attr(,"class")
[1] "numeric"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;attr(x,"class")<-c("a","b");x;}
[1] 1
attr(,"class")
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-"a";class(x)<-"numeric";x;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-"a";x}
[1] 1
attr(,"class")
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(1,2,3); x;}
[1] 1
attr(,"class")
[1] "1" "2" "3"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(1,2,3);class(x)<-NULL; x;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(1,2,3);class(x)<-c(); x;}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(1,2,3);y<-unclass(x);x;y}
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(2+3i,4+5i); x;}
[1] 1
attr(,"class")
[1] "2+3i" "4+5i"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;class(x)<-c(TRUE,FALSE); x;}
[1] 1
attr(,"class")
[1] "TRUE"  "FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-1;y<-"b";attr(x,"class")<-y;x;}
[1] 1
attr(,"class")
[1] "b"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-2+3i;class(x)<-"a";class(x)<-"complex";x;}
[1] 2+3i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-TRUE;class(x)<-"a";class(x)<-"logical";x;}
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2);class(x)<-"a";class(x)<-"list";x;}
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x);dim(x)<-c(2,2,1);class(x)}
[1] "array"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x)<-"array"; x; class(x)<-"matrix"; x;}
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x)}
[1] "matrix"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(1,2,3,4); dim(x)<-c(2,2,1); class(x)}
[1] "array"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x<-c(2+3i,4+5i);class(x)<-"a";class(x)<-"complex";x;}
[1] 2+3i 4+5i

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateClass
#{x=1; class(x)<-"first"; x;}
[1] 1
attr(,"class")
[1] "first"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ;  attr(m, "foo")<-"foo"; diag(m) <- c(1,2); attributes(m) }
$dim
[1] 3 2

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ;  attr(m, "foo")<-"foo"; diag(m) <- c(1.1,2.2); attributes(m) }
$dim
[1] 3 2

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1,2) ; m }
     [,1] [,2]
[1,]    1    4
[2,]    2    2
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1,2.2); m }
     [,1] [,2]
[1,]    1  4.0
[2,]    2  2.2
[3,]    3  6.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1.1,2); m }
     [,1] [,2]
[1,]  1.1    4
[2,]  2.0    2
[3,]  3.0    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1.1,2.2); m }
     [,1] [,2]
[1,]  1.1  4.0
[2,]  2.0  2.2
[3,]  3.0  6.0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3) ; f <- function() { diag(m) <- c(100,200) } ; f() ; m }
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ m <- matrix(1:6, nrow=3); y<-m+42; diag(y) <- c(1,2); y }
     [,1] [,2]
[1,]    1   46
[2,]   44    2
[3,]   45   48

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateDiagonal
#{ x <- (m <- matrix(1:6, nrow=3)) ; diag(m) <- c(1,2) ; x }
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- 1:2 ; names(x) <- c("hello"); names(x) }
[1] "hello" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- 1:2 ; names(x) <- c("hello", "hi"); names(x) } 
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- 1:2; names(x) <- c("A", "B") ; abs(x) }
A B
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- 1:2; names(x) <- c("hello", "hi") ; x }
hello    hi
    1     2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,2) ; names(x) <- c("hello"); names(x) }
[1] "hello" NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,2) ; names(x) <- c("hello", "hi"); names(x) } 
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,2); names(x) <- c("hello", "hi") ; x }
hello    hi
    1     2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,9); names(x) <- c("hello","hi") ; is.na(x) }
hello    hi
FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,9); names(x) <- c("hello","hi") ; sqrt(x) }
hello    hi
    1     3

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,NA); names(x) <- c("hello","hi") ; cumsum(x) }
hello    hi
    1    NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x <- c(1,NA); names(x) <- c(NA,"hi") ; cumsum(x) }
<NA>   hi
   1   NA

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-7; attr(x, "foo")<-"a"; attr(x, "bar")<-42; attributes(x) }
$foo
[1] "a"

$bar
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c("a", "", "bbb", "", "c"); names(x)<-1:4; x }
    1     2     3     4  <NA>
  "a"    "" "bbb"    ""   "c"

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); attr(x, "names")<-c("a", "b"); names(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); attr(x, "names")<-c("a", "b"); x }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); names(x)<-42; x }
  42 <NA>
   1    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); names(x)<-c("a", "b"); attr(x, "names")<-NULL; x }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1, 2); names(x)<-c(TRUE, FALSE); x }
 TRUE FALSE
    1     2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1,2); attr(x, "names") <- 42:45; x }
Error in attr(x, "names") <- 42:45 :
  'names' attribute [4] must be the same length as the vector [2]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-c(1,2); names(x) <- 42:44; x }
Error in names(x) <- 42:44 :
  'names' attribute [3] must be the same length as the vector [2]

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-list(1,2); names(x)<-42:43; x }
$`42`
[1] 1

$`43`
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-list(1,2); names(x)<-c("a","$"); x }
$a
[1] 1

$`$`
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-list(1,2); names(x)<-c("a","b"); x }
$a
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ x<-list(1,2); names(x)<-c("a",NA); x }
$a
[1] 1

$<NA>
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateNames
#{ z <- c(a=1, b=2) ; names(z) <- NULL ; z }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateStorageMode
#{ x <- c(1L, 2L); dim(x)<-c(1,2); storage.mode(x) <- "double"; x}
     [,1] [,2]
[1,]    1    2

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateStorageMode
#{ x <- c(1L, 2L); storage.mode(x) <- "double"}

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpdateStorageMode
#{ x <- c(1L, 2L); storage.mode(x) <- "not.double"}
Error in storage.mode(x) <- "not.double" : invalid value

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpperTriangular
#{ m <- matrix(1:6, nrow=2) ;  upper.tri(m, diag=FALSE) }
      [,1]  [,2] [,3]
[1,] FALSE  TRUE TRUE
[2,] FALSE FALSE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpperTriangular
#{ m <- matrix(1:6, nrow=2) ;  upper.tri(m, diag=TRUE) }
      [,1] [,2] [,3]
[1,]  TRUE TRUE TRUE
[2,] FALSE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpperTriangular
#{ upper.tri(1:3, diag=FALSE) }
      [,1]
[1,] FALSE
[2,] FALSE
[3,] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUpperTriangular
#{ upper.tri(1:3, diag=TRUE) }
      [,1]
[1,]  TRUE
[2,] FALSE
[3,] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodEnclFuncArgs
#{f <- function(x,y,z){ UseMethod("f"); }; f.second <- function(x,y,z){cat("f second",x,y,z)}; obj <-1; attr(obj,"class") <- "second"; arg2=2; arg3=3; f(obj,arg2,arg3);}
f second 1 2 3
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodNested
#{f <- function(x){g<- function(x){ h<- function(x){ UseMethod("f");}; h(x)}; g(x) }; f.second <- function(x){cat("f second",x);}; obj <-1; attr(obj,"class")  <- "second"; f(obj);}
f second 1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodOneArg
#{f <- function(x){ UseMethod("f"); };f.first <- function(x){cat("f first",x)}; f.second <- function(x){cat("f second",x)}; obj <-1; attr(obj,"class")  <- "first"; f(obj); attr(obj,"class")  <- "second";}
f first 1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodReturn
#{f <- function(x){ UseMethod("f");cat("This should not be executed"); }; f.second <- function(x){cat("f second",x);}; obj <-1; attr(obj,"class")  <- "second"; f(obj);}
f second 1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testUseMethodSimple
#{f <- function(x){ UseMethod("f",x); };f.first <- function(x){cat("f first",x)};f.second <- function(x){cat("f second",x)};obj <-1;attr(obj,"class")  <- "first";f(obj);attr(obj,"class")  <- "second";}
f first 1
##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector("integer") }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector("numeric") }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector("numeric", length=4) }
[1] 0 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testVectorConstructor
#{ vector() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhich
#{ which(NA) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhich
#{ which(TRUE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhich
#{ which(c(TRUE, FALSE, NA, TRUE)) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleBuiltins.testWhich
#{ which(logical()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; dim(x)<-c(2,2); y<-21:28; x > y }
Error: dims [product 4] do not match the length of object [8]

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; attr(x, "foo")<-"foo"; attributes(x < 7) }
$names
[1] "101" "102" "103" "104"


##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; attr(x, "foo")<-"foo"; y<-21:24; names(y)<-121:124; attributes(x < y) }
$names
[1] "101" "102" "103" "104"


##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; x < 7 }
 101  102  103  104
TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:24; names(y)<-121:124; x < y }
 101  102  103  104
TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; attributes(x > y) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128;  attributes(y > x) }
$names
[1] "121" "122" "123" "124" "125" "126" "127" "128"


##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128; x < y }
 121  122  123  124  125  126  127  128
TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testAttributes
#{ x<-1:4; y<-21:24; names(y)<-121:124; attributes(x > y) }
$names
[1] "121" "122" "123" "124"


##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "+1+1i" > 1+1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "-1+1i" > "1+1i" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "-1+1i" > 1+1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "1+1.100i" == 1+1.100i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "1+1.1i" == 1+1.1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ "1+2i" > 1+1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 0/0 <= 2 }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1+0i == 1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1+1i == 1 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1+1i == TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1<=0L }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1==1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1==NULL }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1L<=1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 1L==1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 2==1 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 2L==NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 2L==TRUE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ 2L==as.double(NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ FALSE<=TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ FALSE<TRUE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ NA==2L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE!=FALSE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE==1 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE==1L }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE==FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE>=FALSE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ TRUE>FALSE }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ as.double(NA)==2L }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ x<-1+1i; x > FALSE }
Error in x > FALSE : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalars
#{ x<-2; f<-function(z=x) { if (z<=x) {z} else {x} } ; f(1.4)}
[1] 1.4

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(0L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(2L,TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(FALSE,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2L) ; f(1,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2L) ; f(1L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1L,2) ; f(1,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1L,2) ; f(1L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1L,2L) ; f(1,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(1L,2L) ; f(1L,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(TRUE,2L) ; f(0L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(TRUE,2L) ; f(FALSE,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(TRUE,FALSE) ; f(1L,2L) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsAsFunction
#{ f <- function(a,b) { a > b } ; f(TRUE,FALSE) ; f(TRUE,2) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i != 1+1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i != 1-1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i != 2+1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i == 1+1i }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i == 1-1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsComplex
#{ 1+1i == 2+1i }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1 ; b <- 1L[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1 ; b <- a[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1 ; b <- a[2] ; b > a }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L ; b <- 1[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L ; b <- a[2] ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L ; b <- a[2] ; b > a }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L[2] ; b <- 1 ; a == b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L[2] ; b <- 1 ; b > a }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1L[2] ; b <- TRUE ; a != b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- 1[2] ; b <- 1L ; b > a }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNA
#{ a <- TRUE ; b <- 1L[2] ; a > b }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2, 1L[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2, 1[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L, 1L[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L, 1[2]) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L[2], 1) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L[2], 1L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2[2], 1) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsNAAsFunction
#{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2[2], 1L) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(1) ; b <- as.raw(2) ; a < b }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(1) ; b <- as.raw(2) ; a == b }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(1) ; b <- as.raw(2) ; a > b }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(1) ; b <- as.raw(200) ; a < b }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ a <- as.raw(200) ; b <- as.raw(255) ; a < b }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(10) <= as.raw(15) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(10) >= as.raw(15) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) != as.raw(10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) != as.raw(15) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) < as.raw(10) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) <= as.raw(10) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) == as.raw(10) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) == as.raw(15) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) > as.raw(10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsRaw
#{ as.raw(15) >= as.raw(10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" != "hello"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" < "hi"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" <= "hi"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" == "hello"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" > "hi"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hello" >= "hi"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" != "hello"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" < "hello"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" <= "hello"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" == "hello"
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" > "hello"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#"hi" >= "hello"
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#{ "2.0" == 2 }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#{ "a" <= "b" }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testScalarsStrings
#{ "a" > "b" }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ "hi" > c("hello", "hi")  }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ "hi" > c("hello", NA)  }
[1] TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ (1+2i)[0] == c(2+3i, 4+1i) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 0/0 == c(1,2,3,4) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 1:3 < NA }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 1:3 < integer() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 1:3 == TRUE }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 2 != c(1,2,NA,4) }
[1]  TRUE FALSE    NA  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 2 == c(1,2,NA,4) }
[1] FALSE  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 2L > c(1L,NA,2L) }
[1]  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ 3 != 1:2 }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ NA > 1:3 }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ NA > c("hello", "hi") }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ TRUE == 1:3 }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ as.raw(c(1,2)) < as.raw(c(2,1,4)) }
[1]  TRUE FALSE  TRUE
Warning message:
In as.raw(c(1, 2)) < as.raw(c(2, 1, 4)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ as.raw(c(2,1,4)) < as.raw(c(1,2)) }
[1] FALSE  TRUE FALSE
Warning message:
In as.raw(c(2, 1, 4)) < as.raw(c(1, 2)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ as.raw(c(2,1,4)) < raw() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ b <- 1:3 ; z <- FALSE ; b[2==2] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("cau", "ahoj") != c("hi","hello","bye") }
[1] TRUE TRUE TRUE
Warning message:
In c("cau", "ahoj") != c("hi", "hello", "bye") :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", "hi") < NA }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", "hi") == character() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", NA) < c("hi", NA) }
[1] TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", NA) > c(NA, "hi") }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hello", NA) >= "hi" }
[1] FALSE    NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c("hi","hello","bye") > c("cau", "ahoj") }
[1]  TRUE  TRUE FALSE
Warning message:
In c("hi", "hello", "bye") > c("cau", "ahoj") :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(0/0+1i,2+1i) == c(1+1i,2+1i) }
[1]   NA TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1+1i,2+1i) == c(0/0+1i,2+1i) }
[1]   NA TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1+1i,2+2i) == c(2+1i,1+2i,1+1i) }
[1] FALSE FALSE  TRUE
Warning message:
In c(1 + (0+1i), 2 + (0+2i)) == c(2 + (0+1i), 1 + (0+2i), 1 + (0+1i)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1+2i, 3+4i) == (1+2i)[0] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2) < c(2,1,4) }
[1]  TRUE FALSE  TRUE
Warning message:
In c(1, 2) < c(2, 1, 4) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2,3) < double() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2,3,4) != c(1,NA) }
[1] FALSE    NA  TRUE    NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2,NA,4) != 2 }
[1]  TRUE FALSE    NA  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1,2,NA,4) == 2 }
[1] FALSE  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1:3,4,5)==1:5 }
[1] TRUE TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1L, NA) > c(NA, 2L) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1L,2L) < c(2L,1L,4L) }
[1]  TRUE FALSE  TRUE
Warning message:
In c(1L, 2L) < c(2L, 1L, 4L) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(1L,NA,2L) < 2L }
[1]  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(2+1i,1+2i,1+1i) == c(1+1i, 2+2i) }
[1] FALSE FALSE  TRUE
Warning message:
In c(2 + (0+1i), 1 + (0+2i), 1 + (0+1i)) == c(1 + (0+1i), 2 + (0+2i)) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(2,1,4) < c(1,2) }
[1] FALSE  TRUE FALSE
Warning message:
In c(2, 1, 4) < c(1, 2) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(2L,1L,4L) < c(1L,2L) }
[1] FALSE  TRUE FALSE
Warning message:
In c(2L, 1L, 4L) < c(1L, 2L) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(TRUE, NA) > c(NA, FALSE) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(TRUE,FALSE) < logical() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(TRUE,FALSE,FALSE) < c(TRUE,TRUE) }
[1] FALSE  TRUE  TRUE
Warning message:
In c(TRUE, FALSE, FALSE) < c(TRUE, TRUE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ c(TRUE,TRUE) == c(TRUE,FALSE,FALSE) }
[1]  TRUE FALSE FALSE
Warning message:
In c(TRUE, TRUE) == c(TRUE, FALSE, FALSE) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ character() > c("hello", "hi") }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ double() == c(1,2,3) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ integer() < 1:3 }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ integer() == 2L }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ logical() == c(FALSE, FALSE) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ raw() < as.raw(c(2,1,4)) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-1+1i; y<-2+2i; x < y }
Error in x < y : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-1+1i; y<-2+2i; x <= y }
Error in x <= y : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-1+1i; y<-2+2i; x > y }
Error in x > y : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-1+1i; y<-2+2i; x >= y }
Error in x >= y : invalid comparison with complex values

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-5;y<-4:6; x<=y }
[1] FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c("0","1");y<-c("a","-1"); x<y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c("0","1","-1", "2");y<-c("a","-1", "0", "2"); x<y }
[1]  TRUE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1,2,3,4);y<-2.5; x<=y }
[1]  TRUE  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1,2,3,4);y<-c(10,2); x<=y }
[1]  TRUE  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1,2,3,4);y<-c(2.5+NA,2.5); x<=y }
[1]    NA  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10,1,3);y<-4:6; x<=y }
[1] FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10,3);y<-c(10,2); x<=y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10,3);y<-c(10L,2L); x<=y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10L,3L);y<-c(10,2); x<=y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(10L,3L);y<-c(10L,2L); x<=y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1L,2L,3L,4L);y<-1.5; x<=y }
[1]  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1L,2L,3L,4L);y<-c(2.5+NA,2.5); x<=y }
[1]    NA  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(1L,2L,3L,4L);y<-c(TRUE,FALSE); x<=y }
[1]  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(FALSE,TRUE);y<-c(TRUE,FALSE); x<y }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleComparison.testVectors
#{ x<-c(FALSE,TRUE, FALSE, FALSE);y<-c(TRUE,FALSE); x<y }
[1]  TRUE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-c(7,42); y<-as.data.frame(x, row.names=NULL, nm="x"); y[[1]] }
[1]  7 42

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAccess
#{ x<-list(7,42); class(x)<-"data.frame"; row.names(x)<-"r1"; x[[1]] }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-1; class(x)<-"foo"; y<-as.data.frame(x) }
Error in as.data.frame.default(x) :
  cannot coerce class ""foo"" to a data.frame

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.character(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.character(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.complex(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.complex(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.double(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.double(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.logical(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.logical(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.raw(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-as.raw(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names="r1", nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] "r1"

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names=NULL, nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names=NULL, nm="x"); is.data.frame(y); }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names=c("r1", "r2"), nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] "r1" "r2"

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-c(7L,42L); y<-as.data.frame(x, row.names=c("r1", "r2", "r3"), nm="x"); attributes(y); }
$names
[1] "x"

$row.names
[1] "r1" "r2" "r3"

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-list(1,2); class(x)<-"data.frame"; row.names(x)<-"r1"; y<-as.data.frame(x, "r2"); attributes(x) }
$class
[1] "data.frame"

$row.names
[1] "r1"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-list(1,2); class(x)<-"data.frame"; row.names(x)<-"r1"; y<-as.data.frame(x, "r2"); attributes(y) }
$class
[1] "data.frame"

$row.names
[1] "r2"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-list(1,2); class(x)<-"data.frame"; row.names(x)<-"r1"; y<-as.data.frame(x, c("r1", "r2")); attributes(y) }
Error in as.data.frame.data.frame(x, c("r1", "r2")) :
  invalid 'row.names', length 2 for a data frame with 1 row

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-matrix(c(1,2,3,4), nrow=2); y<-as.data.frame(x, row.names="r1", optional=FALSE); attributes(y); }
$names
[1] "V1" "V2"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testAsDataFrame
#{ x<-matrix(c(1,2,3,4), nrow=2); y<-as.data.frame(x, row.names=NULL, optional=FALSE); attributes(y); }
$names
[1] "V1" "V2"

$row.names
[1] 1 2

$class
[1] "data.frame"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ is.data.frame(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ is.data.frame(NULL) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(1,2); is.data.frame(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; attr(x, "foo")<-"foo"; class(x)<-NULL;  attributes(x) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; class(x)<-NULL; is.vector(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; is.data.frame(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; is.list(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-"data.frame"; is.vector(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-c(7,42); class(x)<-c("foo", "data.frame", "bar"); is.data.frame(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(1,2); is.data.frame(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-"data.frame"; is.data.frame(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-"data.frame"; is.list(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-"data.frame"; is.vector(x) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testIsDataFrame
#{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-c("foo", "data.frame", "bar"); is.data.frame(x) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{ x<-c(1,2); class(x)<-"data.frame"; row.names(x)<-integer(); x }
NULL
<0 rows> (or 0-length row.names)

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{ x<-integer(); class(x)<-"data.frame"; x }
data frame with 0 columns and 0 rows

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testPrint
#{x<-c(1,2); class(x)<-"data.frame"; x}
NULL
<0 rows> (or 0-length row.names)

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-NULL; attributes(x) }
$dim
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-NULL; row.names(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-c(7, 42); attributes(x) }
$dim
[1] 2

$dimnames
$dimnames[[1]]
[1] "7"  "42"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-c(7, 42); row.names(x) }
[1] "7"  "42"

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-logical(); attributes(x) }
$dim
[1] 2

$dimnames
$dimnames[[1]]
NULL



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-2; row.names(x)<-logical(); row.names(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); class(x)<-"data.frame"; row.names(x) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); class(x)<-"data.frame"; row.names(x)<-"r1"; row.names(x) }
[1] "r1"

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-7; attributes(x) }
$dim
[1] 1 2

$dimnames
$dimnames[[1]]
[1] "7"

$dimnames[[2]]
[1] "2.2" "3.3"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-7; row.names(x) }
[1] "7"

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-NULL; attributes(x) }
$dim
[1] 1 2

$dimnames
$dimnames[[1]]
NULL

$dimnames[[2]]
[1] "2.2" "3.3"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-NULL; row.names(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-logical(); attributes(x) }
$dim
[1] 1 2

$dimnames
$dimnames[[1]]
NULL

$dimnames[[2]]
[1] "2.2" "3.3"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-logical(); row.names(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-7; attributess(x) }
Error in `rownames<-`(x, value) :
  length of 'dimnames' [1] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-7; row.names(x) }
Error in `rownames<-`(x, value) :
  length of 'dimnames' [1] not equal to array extent

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-c(7, 42); attributes(x) }
$dim
[1] 2 1

$dimnames
$dimnames[[1]]
[1] "7"  "42"

$dimnames[[2]]
[1] "1.1"



##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-c(7, 42); row.names(x) }
[1] "7"  "42"

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); row.names(x)<-NULL; attributes(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); row.names(x)<-c(7, 42); attributes(x) }
Error in `rownames<-`(x, value) :
  attempt to set 'rownames' on an object with no dimensions

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2); row.names(x)<-logical(); attributes(x) }
Error in `rownames<-`(x, value) :
  attempt to set 'rownames' on an object with no dimensions

##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-"data.frame"; row.names(z)<-NULL; attributes(z) }
$class
[1] "data.frame"

$row.names
integer(0)


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-"data.frame"; row.names(z)<-c("a", "b"); row.names(z)<-NULL; attributes(z) }
$class
[1] "data.frame"

$row.names
[1] 1 2


##com.oracle.truffle.r.test.simple.TestSimpleDataFrames.testRowNames
#{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-"data.frame"; row.names(z)<-c("a", "b", "c"); row.names(z)<-NULL; attributes(z) }
$class
[1] "data.frame"

$row.names
[1] 1 2 3


##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4)  }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(function(x) { x + x }, 10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 10) ; f(is.na,5) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(is.na, 10) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(length, 10) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; f(function(x) {TRUE}, 5) ; f(is.na, 4) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(c, 10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(function(x) { 3+4i }, 10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(is.na, 10) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(is.na, 10) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; h <- function(x) { x == x } ; f(h, 3) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) ; f(function(i) {3}, 1) ; f(length,1:3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) ; f(length,1:3) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(i) { c(1,2) } ; f(1) ; c <- sum ; f(2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(i) { if (i==2) { assign("c", sum) }; c(1,2) } ; f(1) ; f(2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ f <- function(i) { if (i==2) { c <- sum }; c(1,2) } ; f(1) ; f(2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; g <- function(x,y) { x + y } ; myapp(f = g, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = g, y = 10, x = 3) ;  myapp(f = g, y = 11, x = 2) }
[1] 13

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = c, y = 10, x = 3) }
[1]  3 10

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = function(x,y) { x - y }, y = 10, x = 3) }
[1] -7

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testBinding
#{ myapp <- function(f, x, y) { f(x,y) } ; myapp(function(x,y) { x + y }, 1, 2) ; myapp(sum, 1, 2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitions
#x<-function(){1};x
function(){1}

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitions
#{ "%plus%" <- function(a,b) a+b ; 3 %plus% 4 }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitions
#{ "-"(1) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitions
#{ 'my<-' <- function(x, value) { attr(x, "myattr") <- value ; x } ; z <- 1; my(z) <- "hello" ; z }
[1] 1
attr(,"myattr")
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f <- sum ; f(1:10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(1,2,c=4,d=4) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(1,2,d=8,c=1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(1,d=8,2,c=1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(d=8,1,2,c=1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a,b,c=2,d) {c} ; f(d=8,c=1,2,3) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a=1,b=2,c=3) {TRUE} ; f(,,) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(a=10,b,c=20,d=20) {c} ; f(4,3,5,1) }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(x=2) {x} ; f() } 
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ f<-function(z, x=if (z) 2 else 3) {x} ; f(FALSE) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ x <- function(y) { sum(y) } ; f <- function() { x <- 1 ; x(1:10) } ; f() }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ x<-1 ; f<-function(x=x) { x } ; f(x=x) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ x<-1 ; z<-TRUE ; f<-function(y=x,a=z,b) { if (z) {y} else {z}} ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{ x<-1 ; z<-TRUE ; f<-function(y=x,a=z,b) { if (z) {y} else {z}} ; f(b=2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsNamedAndDefault
#{f<-function(a,b,c=2,d) {c} ; g <- function() f(d=8,c=1,2,3) ; g() ; g() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ f<-function() {z} ; z<-2 ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ f<-function(x){g<-function(x) {x} ; g(x) } ; f(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(){x} ; x<-2 ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(x){a<-1; b<-2; g<-function(x) {b<-3;x} ; g(b) } ; f(TRUE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(x){a<-1;b<-2;x} ; f(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(x){x} ; f(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; f<-function(z) { if (z) { x<-2 } ; x } ; x<-3 ; f(FALSE) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-1 ; g<-function() { x<-12 ; f<-function(z) { if (z) { x<-2 } ; x } ; x<-3 ; f(FALSE) } ; g() }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-function() { z<-211 ; function(a) { if (a) { z } else { 200 } } } ; f<-x() ; z<-1000 ; f(TRUE) }
[1] 211

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDefinitionsWorking
#{ x<-function(z){z} ; x(TRUE) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) cat(..., "\n") ; f("Hello", "world") }
Hello world

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(...) { g(...) } ;  g <- function(b=2) { b } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, b) { a * b } ; g <- function(...) { f(...,...) } ; g(3) }
[1] 9

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, b) { a - b } ; g <- function(...) { f(1, ...) } ; g(b = 2) }
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a, barg) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(b=2) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ f <- function(a=1,...) a ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testDots
#{ g <- function(...) { c(...,...) } ; g(3) }
[1] 3 3

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ f <- function(a) { a } ; f(1,2) }
Error in f(1, 2) : unused argument (2)

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ f <- function(hello, hi) { hello + hi } ; f(h = 1) }
Error in f(h = 1) : argument 1 matches multiple formal arguments

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ f <- function(hello, hi) { hello + hi } ; f(hello = 1, bye = 3) }
Error in f(hello = 1, bye = 3) : unused argument (bye = 3)

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ x<-function(foo,bar){foo*bar} ; x(f=10,2) }
[1] 20

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testMatching
#{ x<-function(foo,bar){foo*bar} ; x(fo=10, bar=2) }
[1] 20

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testPromises
#{ z <- 1 ; f <- function(c = z) { c(1,2) ; z <- z + 1 ; c  } ; f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if (i==1) { 1 } else if (i==2) { 1 } else { f(i-1) + f(i-2) } } ; f(10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if (i==1L) { 1L } else if (i==2L) { 1L } else { f(i-1L) + f(i-2L) } } ; f(10L) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i<=1) 1 else i*f(i-1) } ; f(10) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i<=1) 1 else i*f(i-1) } ; g<-function(n, f, a) { if (n==1) { f(a) } else { f(a) ; g(n-1, f, a) } } ; g(100,f,120) }
[1] 6.689503e+198

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i<=1L) 1L else i*f(i-1L) } ; f(10L) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i==1) { 1 } else { f(i-1) } } ; f(10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testRecursion
#{ f<-function(i) { if(i==1) { 1 } else { j<-i-1 ; f(j) } } ; f(10) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testReturn
#{ f<-function() { return() } ; f() }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleFunctions.testReturn
#{ f<-function() { return(2) ; 3 } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(v) { if (FALSE==v) TRUE else FALSE } ; f(TRUE) ; f(1) }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x == 2) 1 else 2 } ; f(1) ; f(NA) }
Error in if (x == 2) 1 else 2 : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f("hello") }
Error in if (x) 1 else 2 : argument is not interpretable as logical

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(FALSE) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(NA) }
Error in if (x) 1 else 2 : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(TRUE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(logical()) }
Error in if (x) 1 else 2 : argument is of length zero

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ f <- function(x) { if (x) 1 else 2 } ; f(NA)  }
Error in if (x) 1 else 2 : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (FALSE==1) TRUE else FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (FALSE==TRUE) TRUE else FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (NA == TRUE) TRUE else FALSE }
Error in if (NA == TRUE) TRUE else FALSE :
  missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (TRUE == NA) TRUE else FALSE }
Error in if (TRUE == NA) TRUE else FALSE :
  missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ if (TRUE==FALSE) TRUE else FALSE }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ x <- 2 ; if (1==x) TRUE else 2 }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf
#{ x <- 2 ; if (NA) x <- 3 ; x }
Error in if (NA) x <- 3 : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf2
#if(FALSE) 1 else 2
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIf2
#if(TRUE) 1 else 2
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfDanglingElse
#if(TRUE) if (FALSE) 1 else 2
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfNot1
#if(!FALSE) 1 else 2
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfNot1
#if(!TRUE) 1 else 2
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleIfEvaluator.testIfWithoutElse
#if(TRUE) 1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,2,3) ; x <- integer() ; a[[x]] }
Error in a[[x]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,2,3) ; x <- integer() ; a[x] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,NULL,list()) ; a[3] }
[[1]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,NULL,list()) ; a[[3]] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,NULL,list()) ; typeof(a[3]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ a <- list(1,NULL,list()) ; typeof(a[[3]]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[-2] }
[[1]]
[1] 1

[[2]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[-5] }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[0] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[5] }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[NA] }
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[-2]] }
Error in l[[-2]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[-5]] }
Error in l[[-5]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[0]] }
Error in l[[0]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[5]] }
Error in l[[5]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; l[[NA]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; typeof(l[-2]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; typeof(l[5]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; typeof(l[NA]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(1,2,3) ; typeof(l[[NA]]) }
[1] "NULL"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(c(1,2,3),"eep") ; l[[1]] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListAccess
#{ l <- list(c(1,2,3),"eep") ; l[[2]] }
[1] "eep"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; a }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; a[3] }
[[1]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; a[[3]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; typeof(a) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; typeof(a[3]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(1,2,list(3,4),5) ; typeof(a[[3]]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(list(1)) ; typeof(a) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(list(1)) ; typeof(a[1]) }
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCombine
#{ a <- c(list(1)) ; typeof(a[[1]]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCreation
#{ list() }
list()

##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCreation
#{ list(1,NULL,list()) }
[[1]]
[1] 1

[[2]]
NULL

[[3]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListCreation
#{ list(list(),list()) }
[[1]]
list()

[[2]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleLists.testListUpdate
#{ l <- list(c(1,2,3),c(4,5,6)) ; l[[1]] <- c(7,8,9) ; l[[1]] }
[1] 7 8 9

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testFactorial
#{ f<-function(i) { if (i<=1) {1} else {r<-i; for(j in 2:(i-1)) {r=r*j}; r} }; f(10) }
[1] 3628800

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testFibonacci
#{ f<-function(i) { x<-integer(i); x[1]<-1; x[2]<-1; if (i>2) { for(j in 3:i) { x[j]<-x[j-1]+x[j-2] } }; x[i] } ; f(32) }
[1] 2178309

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testForSequenceDescending
#{ sum <- 0; for (i in 3:1) { sum <- sum + i; }; sum; }
[1] 6

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ f<-function(r) { x<-0 ; for(i in r) { x<-x+i } ; x } ; f(1:10) ; f(c(1,2,3,4,5)) }
[1] 15

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ f<-function(r) { x<-0 ; for(i in r) { x<-x+i } ; x } ; f(c(1,2,3,4,5)) ; f(1:10) }
[1] 55

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ for(i in c(1,2)) { x <- i } ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ r <- "" ; for (s in c("Hello", "world")) r <- paste(r, s) ; r }
[1] " Hello world"

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; for(i in 1:10) { x<-x+1 } ; x }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; repeat { x <- x + 1 ; if (x <= 11) { next } else { break } ; x <- 1024 } ; x }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; repeat { x <- x + 1 ; if (x > 11) { break } } ; x }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; while(TRUE) { x <- x + 1 ; if (x > 11) { break } } ; x }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-1 ; while(x <= 10) { x<-x+1 } ; x }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoops1
#{ x<-210 ; repeat { x <- x + 1 ; break } ; x }
[1] 211

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ f <- function() { for(i in 1:4) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ f <- function() { for(i in c(1,2,3,4)) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f()  }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ f <- function(s) { for(i in s) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f(2:1) ; f(c(1,2,3,4)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ for(i in 1:4) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ for(i in c(1,2,3,4)) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsBreakNext
#{ i <- 0L ; while(i < 3L) { i <- i + 1 ; if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsErrors
#{ break; }
Error: no loop for break/next, jumping to top level

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsErrors
#{ next; }
Error: no loop for break/next, jumping to top level

##com.oracle.truffle.r.test.simple.TestSimpleLoop.testLoopsErrors
#{ while (1 < NA) { 1 } }
Error in while (1 < NA) { : missing value where TRUE/FALSE needed

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-1:10; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-1; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-1L; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-FALSE; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-TRUE; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-c(1, 2, 3); dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessDim
#{ x<-c(1L, 2L, 3L); dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3, -4)]
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3, -4)]
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3, -4)]
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
a b c d
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
a c
1 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
a d
1 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2, 2); x[, -1] }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2, 2); x[-1, ] }
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, NA] }
<NA> <NA>
  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
   1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[NA, 1] }
<NA> <NA>
  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
  c <NA>
a 1   NA
a 1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
      c <NA>
a     1   NA
<NA> NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
   1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[-1, -1] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[1,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[1,2] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,]    1    3
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,]    1    3
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:4); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1)] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3)] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(0)] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(1)] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2, 4); x[c(-1, -2),c(1, 2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[-1,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[-2,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,-1] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,-2] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[0,] }
     [,1] [,2] [,3] [,4]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[1, c(1, NA)] }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[1, c(NA, NA)] }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(2,4); x[1,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[-1, 1] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[0,1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[0,2] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[1, -1] }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[1,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-(1:8); dim(x)<-c(4,2); x[2,0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:16; dim(x)<-c(4,4); x[-1,-2] }
     [,1] [,2] [,3]
[1,]    2   10   14
[2,]    3   11   15
[3,]    4   12   16

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:16; dim(x)<-c(4,4); x[-1,c(1,1,2,3)] }
     [,1] [,2] [,3] [,4]
[1,]    2    2    6   10
[2,]    3    3    7   11
[3,]    4    4    8   12

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:2; dim(x)<-c(1:2); dimnames(x)<-list("z", c("a", "b")); x["z", 1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:2; dim(x)<-c(1:2); dimnames(x)<-list("z", c("a", "b")); x[c("z", "z"), 1] }
z z
1 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x["b", 1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x["d", 1] }
Error: subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[1, 1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[as.character(NA), 1] }
Error: subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c("a", "a"), 1] }
a a
1 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c("a", "b"), 1] }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c("b"), 1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c(1,1), 1] }
a a
1 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c(1,2), 1] }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("d", "e")); x[c(1,2,1), 1] }
a b a
1 2 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(2,2); x[1,3] }
Error: subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(4,1); dimnames(x)<-list(c("a", "b", "c", "d"), "z"); x[, 1] }
a b c d
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:4; dim(x)<-c(4,1); dimnames(x)<-list(c("a", "b", "c", "d"), "z"); x[c(2,4), 1] }
b d
2 4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2, 4); x[c(-1, -2),c(5)] }
Error: subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); x[1, 2] }
Error in x[1, 2] : incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, FALSE] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, TRUE] }
[1] 1 3 5 7

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE)] }
[1] 1 5 7

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE, FALSE)] }
[1] 1 5

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE, TRUE, TRUE)] }
Error: (subscript) logical subscript too long

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-1:8; x[1, 2] }
Error in x[1, 2] : incorrect number of dimensions

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
  a   b   c   d
"a" "b" "c" "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
  a   c
"a" "c"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
  a   d
"a" "c"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[, -1] }
[1] "c" "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,] "a"  "c"
[2,] "b"  "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[-1, ] }
[1] "b" "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,] "a"  "c"
[2,] "b"  "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2, 2); x[1, 1] }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
 "a"   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
  c   <NA>
a "a" NA
a "a" NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
     c   <NA>
a    "a" NA
<NA> NA  NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
 "a"   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[-1, -1] }
[1] "d"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[1,1] }
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[1,2] }
[1] "c"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,] "a"  "c"
[2,] NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,] "a"  "c"
[2,] NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c("a", "b", "c", "d"); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
      b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
      a  b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
      a  a  a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
   a    b    c    d
1+1i 2+2i 3+3i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
   a    c
1+1i 3+3i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
   a    d
1+1i 3+3i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[, -1] }
[1] 3+3i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,] 2+2i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[-1, ] }
[1] 2+2i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,] 2+2i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[1, 1] }
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
1+1i   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
     c <NA>
a 1+1i   NA
a 1+1i   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
        c <NA>
a    1+1i   NA
<NA>   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
1+1i   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[-1, -1] }
[1] 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[1,1] }
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[1,2] }
[1] 3+3i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,] 1+1i 3+3i
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(-1)] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3)] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(0)] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(1)] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2, 4); x[c(-1, -2),c(1, 2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[-1,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[-2,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,-1] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,-2] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,1] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[0,] }
     [,1] [,2] [,3] [,4]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(2,4); x[1,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[-1, 1] }
[1] 2+2i 3+3i 4+4i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[0,1] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[0,2] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[1, -1] }
[1] 5+5i

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[1,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i, 5+5i, 6+6i, 7+7i, 8+8i); dim(x)<-c(4,2); x[2,0] }
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1, 2, 3, 4); dim(x)<-c(2, 2); x[1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
  a   b   c   d
1.1 2.2 3.3 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
  a   c
1.1 3.3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
  a   d
1.1 3.3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2, 2); x[, -1] }
[1] 3.3 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]  2.2  4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2, 2); x[-1, ] }
[1] 2.2 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]  2.2  4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
 1.1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
    c <NA>
a 1.1   NA
a 1.1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
       c <NA>
a    1.1   NA
<NA>  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
 1.1   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[-1, -1] }
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[1,1] }
[1] 1.1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[1,2] }
[1] 3.3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1)] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(-1, -2, -3)] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(0)] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(1)] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2, 4); x[c(-1, -2),c(1, 2)] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[-1,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[-2,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,-1] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,-2] }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[0,] }
     [,1] [,2] [,3] [,4]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(2,4); x[1,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[-1, 1] }
[1] 2.2 3.3 4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[0,1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[0,2] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[1, -1] }
[1] 5.5

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[1,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8); dim(x)<-c(4,2); x[2,0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2,3); x[1,2] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L); dim(x) <- c(2,5); x[2,4] }
[1] 8

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(FALSE, TRUE, TRUE, FALSE); dim(x)<-c(2, 2); x[1, 1] }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
    a     b     c     d
 TRUE FALSE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
   a    c
TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
   a    d
TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2, 2); x[, -1] }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2, 2); x[, -3] }
      [,1]  [,2]
[1,]  TRUE  TRUE
[2,] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2, 2); x[-1, ] }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2, 2); x[-3, ] }
      [,1]  [,2]
[1,]  TRUE  TRUE
[2,] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
     c <NA>
a TRUE   NA
a TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
        c <NA>
a    TRUE   NA
<NA>   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[-1, -1] }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[1,1] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[1,2] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,] TRUE TRUE
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,] TRUE TRUE
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(TRUE, FALSE, TRUE, FALSE); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
      b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
      a  b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
      a  a  a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
 a  b  c  d
01 02 03 04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
 a  c
01 03

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
 a  d
01 03

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2, 2); x[, -1] }
[1] 03 04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,]   01   03
[2,]   02   04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2, 2); x[-1, ] }
[1] 02 04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,]   01   03
[2,]   02   04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
   c <NA>
01 00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
   c <NA>
a 01   00
a 01   00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
      c <NA>
a    01   00
<NA> 00   00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
   a <NA>
01 00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[-1, -1] }
[1] 04

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[1,1] }
[1] 01

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[1,2] }
[1] 03

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,]   01   03
[2,]   00   00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,]   01   03
[2,]   00   00

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[, 0] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[-1, 0] }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, -1] }
     b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, 1] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, ] }
     a b c d

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1)] }
     a a a

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, 0] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, ] }
$a
[1] TRUE

$b
[1] "a"

$c
[1] 42

$d
[1] 1.1


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[1, c(1,3)] }
$a
[1] TRUE

$c
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[c(1,1,1), 0] }

z
z
z

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "d", "e")); x[1, c(1,3)] }
$a
[1] TRUE

$d
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2, 2); x[, -1] }
[[1]]
[1] 42

[[2]]
[1] 1.1


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2, 2); x[, -3] }
     [,1] [,2]
[1,] TRUE 42
[2,] "a"  1.1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2, 2); x[-1, ] }
[[1]]
[1] "a"

[[2]]
[1] 1.1


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2, 2); x[-3, ] }
     [,1] [,2]
[1,] TRUE 42
[2,] "a"  1.1

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[1, c(1,NA)] }
$c
[1] TRUE

$<NA>
NULL


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, 1), c(1,NA)] }
  c    <NA>
a TRUE NULL
a TRUE NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1, NA), c(1,NA)] }
     c    <NA>
a    TRUE NULL
<NA> NULL NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); dimnames(x)<-list(c("a", "b"), c("c", "d")); x[c(1,NA), 1] }
$a
[1] TRUE

$<NA>
NULL


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[,0] }

[1,]
[2,]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[-1, -1] }
[[1]]
[1] 1.1


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[1,1] }
[[1]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[1,2] }
[[1]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[c(1, NA), ] }
     [,1] [,2]
[1,] TRUE 42
[2,] NULL NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(2,2); x[c(TRUE, NA), ] }
     [,1] [,2]
[1,] TRUE 42
[2,] NULL NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testAccessScalarIndex
#{ x<-list(TRUE, "a", 42, 1.1); x<-1:4; dim(x)<-c(2,2); x[NA, ] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testMatrixAccessWithScalarAndVector
#{ i <- c(1L,3L,5L) ; m <- 1:10 ; dim(m) <- c(2,5) ; m[2,i] }
[1]  2  6 10

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testMatrixAccessWithScalarAndVector
#{ i <- c(1L,3L,5L) ; m <- c("a","b","c","d","e","f","g","h","i","j") ; dim(m) <- c(2,5) ; m[2,i] }
[1] "b" "f" "j"

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1,2,3,4,5,6); dim(x) <- c(2L,3L); dim(x) <- NULL; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1,2,3,4,5,6); dim(x) <- c(2L,3L); dim(x) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2.1,3.9); dim(x) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2L,3L); dim(x) <- NULL; dim(x) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateDim
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2L,3L); dim(x) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{  x<-c(1,2,3,4); dim(x)<-c(2,2); x[3][1]<-42; x }
     [,1] [,2]
[1,]    1   42
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{  x<-c(1,2,3,4); dim(x)<-c(2,2); x[3][1][1]<-42; x }
     [,1] [,2]
[1,]    1   42
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[,][1]<-42; x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[, c(1)] }
[1] 1.1 2.2

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[, c(1,2)] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]  2.2  4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(1), ] }
[1] 1.1 3.3

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(1,2), ] }
     [,1] [,2]
[1,]  1.1  3.3
[2,]  2.2  4.4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1L,2L,3L,4L); dim(x)<-c(2,2); f<-function() { x[3][1]<-42; x }; f() }
     [,1] [,2]
[1,]    1   42
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1L,2L,3L,4L); dim(x)<-c(2,2); f<-function() { x[3][1]<-42; }; f(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2,3); x[1,2] <- 100L; x[1,2] }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleMatrix.testUpdateScalarIndex
#{ x<-c(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L); dim(x) <- c(2,5); x[2,4] <- 100L; x[2,4] }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 1.1:3.1 }
[1] 1.1 2.1 3.1

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 1:3 }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 3.1:1 }
[1] 3.1 2.1 1.1

##com.oracle.truffle.r.test.simple.TestSimpleSequences.testSequenceConstruction
#{ 3:1 }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { 1:5 } ; f(); f() }
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { if (1) TRUE } ; f(); f() }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { if (if (1) {TRUE} else {FALSE} ) 1 } ; f(); f() }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { length(c(1,2)) } ; f(); f() }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function() { logical(0) } ; f(); f() }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { i ; if (FALSE) { 1 } else { i } } ; f(2) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { i ; if (TRUE) { 1 } else { i } } ; f(2) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { if (TRUE) { i } } ; f(2) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { if(i==1) { 1 } else { i } } ; f(2) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) { if(i==1) { 1 } else { i } } ; f(2) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.test1
#{ f<-function(i) {i} ; f(1) ; f(2) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; for(i in 1:10) { x<-x+1 } ; x } ; f(); f() }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; repeat { x <- x + 1 ; if (x <= 11) { next } else { break } ; x <- 1024 } ; x } ; f() ; f() }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; repeat { x <- x + 1 ; if (x > 11) { break } } ; x } ; f(); f() }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; while(TRUE) { x <- x + 1 ; if (x > 11) { break } } ; x } ; f(); f() }
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-1 ; while(x <= 10) { x<-x+1 } ; x } ; f(); f() }
[1] 11

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testLoop
#{ f<-function() { x<-210 ; repeat { x <- x + 1 ; break } ; x } ; f() ; f() }
[1] 211

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testWarningsAndErrors
#{ (c(1, 2) < c(1, 2, 3)) ==  (c(1, 2) < c(1, 3, 4)) }
[1]  TRUE FALSE  TRUE
Warning messages:
1: In c(1, 2) < c(1, 2, 3) :
  longer object length is not a multiple of shorter object length
2: In c(1, 2) < c(1, 3, 4) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testWarningsAndErrors
#{ 1i > ((c(1, 2) < c(1, 2, 3)) ==  (c(1, 2) < c(1, 3, 4))) }
Error in 0+1i > ((c(1, 2) < c(1, 2, 3)) == (c(1, 2) < c(1, 3, 4))) :
  invalid comparison with complex values
In addition: Warning messages:
1: In c(1, 2) < c(1, 2, 3) :
  longer object length is not a multiple of shorter object length
2: In c(1, 2) < c(1, 3, 4) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleTruffle.testWarningsAndErrors
#{ 1i > (c(1, 2) < c(1, 2, 3)) }
Error in 0+1i > (c(1, 2) < c(1, 2, 3)) :
  invalid comparison with complex values
In addition: Warning message:
In c(1, 2) < c(1, 2, 3) :
  longer object length is not a multiple of shorter object length

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- "hello"; attr(x, "a");
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- "hello"; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- ((0/0)+1i); attr(x, "a");
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- ((0/0)+1i); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-(0/0)); attr(x, "a");
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-(0/0)); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-(1/0)); attr(x, "a");
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-(1/0)); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-0.0); attr(x, "a");
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (-0.0); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (0/0); attr(x, "a");
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (0/0); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1+NA); attr(x, "a");
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1+NA); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1/0); attr(x, "a");
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1/0); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1i+NA); attr(x, "a");
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (1i+NA); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (3.4+NA); attr(x, "a");
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- (3.4+NA); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1; attr(x, "a");
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1L; attr(x, "a");
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1L; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1i; attr(x, "a");
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 1i; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 3.4; attr(x, "a");
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- 3.4; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- FALSE; attr(x, "a");
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- FALSE; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- NULL; attr(x, "a");
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- NULL; names(attributes(x));
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- TRUE; attr(x, "a");
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- TRUE; names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- as.raw(10); attr(x, "a");
[1] 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- as.raw(10); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c("hello","hello","hello"); attr(x, "a");
[1] "hello" "hello" "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c("hello","hello","hello"); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1,1,1); attr(x, "a");
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1,1,1); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1L,1L,1L); attr(x, "a");
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1L,1L,1L); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1i,1i,1i); attr(x, "a");
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(1i,1i,1i); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(3.4,3.4,3.4); attr(x, "a");
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(3.4,3.4,3.4); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(FALSE,FALSE,FALSE); attr(x, "a");
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(FALSE,FALSE,FALSE); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(NULL,NULL,NULL); attr(x, "a");
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(NULL,NULL,NULL); names(attributes(x));
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(TRUE,TRUE,TRUE); attr(x, "a");
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(TRUE,TRUE,TRUE); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(as.raw(10),as.raw(10),as.raw(10)); attr(x, "a");
[1] 0a 0a 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- c(as.raw(10),as.raw(10),as.raw(10)); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- list(1, 2, 3); attr(x, "a");
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleValues.testAttributes
#x <- 1; attr(x, "a") <- list(1, 2, 3); names(attributes(x));
[1] "a"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%"hello"
Error in "hello"%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%((0/0)+1i)
Error in "hello"%%((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(-(0/0))
Error in "hello"%%(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(-(1/0))
Error in "hello"%%(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(-0.0)
Error in "hello"%%(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(0/0)
Error in "hello"%%(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(1+NA)
Error in "hello"%%(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(1/0)
Error in "hello"%%(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(1i+NA)
Error in "hello"%%(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%(3.4+NA)
Error in "hello"%%(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%1
Error in "hello"%%1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%1L
Error in "hello"%%1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%1i
Error in "hello"%%(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%3.4
Error in "hello"%%3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%FALSE
Error in "hello"%%FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%NULL
Error in "hello"%%NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%TRUE
Error in "hello"%%TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%as.raw(10)
Error in "hello"%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c("hello","hello","hello")
Error in "hello"%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(1,1,1)
Error in "hello"%%c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(1L,1L,1L)
Error in "hello"%%c(1L, 1L, 1L) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(1i,1i,1i)
Error in "hello"%%c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(3.4,3.4,3.4)
Error in "hello"%%c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(FALSE,FALSE,FALSE)
Error in "hello"%%c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(NULL,NULL,NULL)
Error in "hello"%%c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(TRUE,TRUE,TRUE)
Error in "hello"%%c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"%%c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello"%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*"hello"
Error in "hello" * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*((0/0)+1i)
Error in "hello" * ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(-(0/0))
Error in "hello" * (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(-(1/0))
Error in "hello" * (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(-0.0)
Error in "hello" * (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(0/0)
Error in "hello" * (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(1+NA)
Error in "hello" * (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(1/0)
Error in "hello" * (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(1i+NA)
Error in "hello" * (0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*(3.4+NA)
Error in "hello" * (3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*1
Error in "hello" * 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*1L
Error in "hello" * 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*1i
Error in "hello" * (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*3.4
Error in "hello" * 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*FALSE
Error in "hello" * FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*NULL
Error in "hello" * NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*TRUE
Error in "hello" * TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*as.raw(10)
Error in "hello" * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c("hello","hello","hello")
Error in "hello" * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(1,1,1)
Error in "hello" * c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(1L,1L,1L)
Error in "hello" * c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(1i,1i,1i)
Error in "hello" * c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(3.4,3.4,3.4)
Error in "hello" * c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(FALSE,FALSE,FALSE)
Error in "hello" * c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(NULL,NULL,NULL)
Error in "hello" * c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(TRUE,TRUE,TRUE)
Error in "hello" * c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"*c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello" * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+"hello"
Error in "hello" + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+((0/0)+1i)
Error in "hello" + ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(-(0/0))
Error in "hello" + (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(-(1/0))
Error in "hello" + (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(-0.0)
Error in "hello" + (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(0/0)
Error in "hello" + (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(1+NA)
Error in "hello" + (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(1/0)
Error in "hello" + (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(1i+NA)
Error in "hello" + (0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+(3.4+NA)
Error in "hello" + (3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+1
Error in "hello" + 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+1L
Error in "hello" + 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+1i
Error in "hello" + (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+3.4
Error in "hello" + 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+FALSE
Error in "hello" + FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+NULL
Error in "hello" + NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+TRUE
Error in "hello" + TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+as.raw(10)
Error in "hello" + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c("hello","hello","hello")
Error in "hello" + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(1,1,1)
Error in "hello" + c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(1L,1L,1L)
Error in "hello" + c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(1i,1i,1i)
Error in "hello" + c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(3.4,3.4,3.4)
Error in "hello" + c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(FALSE,FALSE,FALSE)
Error in "hello" + c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(NULL,NULL,NULL)
Error in "hello" + c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(TRUE,TRUE,TRUE)
Error in "hello" + c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"+c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello" + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-"hello"
Error in "hello" - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-((0/0)+1i)
Error in "hello" - ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(-(0/0))
Error in "hello" - (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(-(1/0))
Error in "hello" - (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(-0.0)
Error in "hello" - (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(0/0)
Error in "hello" - (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(1+NA)
Error in "hello" - (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(1/0)
Error in "hello" - (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(1i+NA)
Error in "hello" - (0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-(3.4+NA)
Error in "hello" - (3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-1
Error in "hello" - 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-1L
Error in "hello" - 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-1i
Error in "hello" - (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-3.4
Error in "hello" - 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-FALSE
Error in "hello" - FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-NULL
Error in "hello" - NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-TRUE
Error in "hello" - TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-as.raw(10)
Error in "hello" - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c("hello","hello","hello")
Error in "hello" - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(1,1,1)
Error in "hello" - c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(1L,1L,1L)
Error in "hello" - c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(1i,1i,1i)
Error in "hello" - c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(3.4,3.4,3.4)
Error in "hello" - c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(FALSE,FALSE,FALSE)
Error in "hello" - c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(NULL,NULL,NULL)
Error in "hello" - c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(TRUE,TRUE,TRUE)
Error in "hello" - c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"-c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello" - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/"hello"
Error in "hello"/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/((0/0)+1i)
Error in "hello"/((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(-(0/0))
Error in "hello"/(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(-(1/0))
Error in "hello"/(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(-0.0)
Error in "hello"/(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(0/0)
Error in "hello"/(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(1+NA)
Error in "hello"/(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(1/0)
Error in "hello"/(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(1i+NA)
Error in "hello"/(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/(3.4+NA)
Error in "hello"/(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/1
Error in "hello"/1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/1L
Error in "hello"/1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/1i
Error in "hello"/(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/3.4
Error in "hello"/3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/FALSE
Error in "hello"/FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/NULL
Error in "hello"/NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/TRUE
Error in "hello"/TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/as.raw(10)
Error in "hello"/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c("hello","hello","hello")
Error in "hello"/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(1,1,1)
Error in "hello"/c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(1L,1L,1L)
Error in "hello"/c(1L, 1L, 1L) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(1i,1i,1i)
Error in "hello"/c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(3.4,3.4,3.4)
Error in "hello"/c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(FALSE,FALSE,FALSE)
Error in "hello"/c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(NULL,NULL,NULL)
Error in "hello"/c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(TRUE,TRUE,TRUE)
Error in "hello"/c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"/c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello"/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^"hello"
Error in "hello"^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^((0/0)+1i)
Error in "hello"^((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(-(0/0))
Error in "hello"^(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(-(1/0))
Error in "hello"^(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(-0.0)
Error in "hello"^(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(0/0)
Error in "hello"^(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(1+NA)
Error in "hello"^(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(1/0)
Error in "hello"^(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(1i+NA)
Error in "hello"^(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^(3.4+NA)
Error in "hello"^(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^1
Error in "hello"^1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^1L
Error in "hello"^1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^1i
Error in "hello"^(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^3.4
Error in "hello"^3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^FALSE
Error in "hello"^FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^NULL
Error in "hello"^NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^TRUE
Error in "hello"^TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^as.raw(10)
Error in "hello"^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c("hello","hello","hello")
Error in "hello"^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(1,1,1)
Error in "hello"^c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(1L,1L,1L)
Error in "hello"^c(1L, 1L, 1L) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(1i,1i,1i)
Error in "hello"^c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(3.4,3.4,3.4)
Error in "hello"^c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(FALSE,FALSE,FALSE)
Error in "hello"^c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(NULL,NULL,NULL)
Error in "hello"^c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(TRUE,TRUE,TRUE)
Error in "hello"^c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#"hello"^c(as.raw(10),as.raw(10),as.raw(10))
Error in "hello"^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%"hello"
Error in ((0/0) + (0+1i))%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(-(0/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(-(1/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(-0.0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(0/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(1+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(1/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%(3.4+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%1
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%1L
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%3.4
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%FALSE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%TRUE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%as.raw(10)
Error in ((0/0) + (0+1i))%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c("hello","hello","hello")
Error in ((0/0) + (0+1i))%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(1,1,1)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(1L,1L,1L)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(3.4,3.4,3.4)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(FALSE,FALSE,FALSE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(TRUE,TRUE,TRUE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i))%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*"hello"
Error in ((0/0) + (0+1i)) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*as.raw(10)
Error in ((0/0) + (0+1i)) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c("hello","hello","hello")
Error in ((0/0) + (0+1i)) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)*c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i)) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+"hello"
Error in ((0/0) + (0+1i)) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+as.raw(10)
Error in ((0/0) + (0+1i)) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c("hello","hello","hello")
Error in ((0/0) + (0+1i)) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)+c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i)) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-"hello"
Error in ((0/0) + (0+1i)) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-as.raw(10)
Error in ((0/0) + (0+1i)) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c("hello","hello","hello")
Error in ((0/0) + (0+1i)) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)-c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i)) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/"hello"
Error in ((0/0) + (0+1i))/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/as.raw(10)
Error in ((0/0) + (0+1i))/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c("hello","hello","hello")
Error in ((0/0) + (0+1i))/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)/c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i))/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^"hello"
Error in ((0/0) + (0+1i))^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(-0.0)
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^FALSE
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^as.raw(10)
Error in ((0/0) + (0+1i))^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c("hello","hello","hello")
Error in ((0/0) + (0+1i))^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(FALSE,FALSE,FALSE)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#((0/0)+1i)^c(as.raw(10),as.raw(10),as.raw(10))
Error in ((0/0) + (0+1i))^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%"hello"
Error in (-(0/0))%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%as.raw(10)
Error in (-(0/0))%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c("hello","hello","hello")
Error in (-(0/0))%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0))%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*"hello"
Error in (-(0/0)) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*as.raw(10)
Error in (-(0/0)) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c("hello","hello","hello")
Error in (-(0/0)) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))*c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0)) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+"hello"
Error in (-(0/0)) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+as.raw(10)
Error in (-(0/0)) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c("hello","hello","hello")
Error in (-(0/0)) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))+c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0)) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-"hello"
Error in (-(0/0)) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-as.raw(10)
Error in (-(0/0)) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c("hello","hello","hello")
Error in (-(0/0)) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))-c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0)) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/"hello"
Error in (-(0/0))/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/as.raw(10)
Error in (-(0/0))/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c("hello","hello","hello")
Error in (-(0/0))/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))/c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0))/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^"hello"
Error in (-(0/0))^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^as.raw(10)
Error in (-(0/0))^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c("hello","hello","hello")
Error in (-(0/0))^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(0/0))^c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(0/0))^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%"hello"
Error in (-(1/0))%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%as.raw(10)
Error in (-(1/0))%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c("hello","hello","hello")
Error in (-(1/0))%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0))%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*"hello"
Error in (-(1/0)) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*1i
[1] NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*3.4
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*as.raw(10)
Error in (-(1/0)) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c("hello","hello","hello")
Error in (-(1/0)) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(1i,1i,1i)
[1] NaN-Infi NaN-Infi NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(3.4,3.4,3.4)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))*c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0)) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+"hello"
Error in (-(1/0)) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+1i
[1] -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+3.4
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+FALSE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+as.raw(10)
Error in (-(1/0)) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c("hello","hello","hello")
Error in (-(1/0)) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(1i,1i,1i)
[1] -Inf+1i -Inf+1i -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(3.4,3.4,3.4)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(FALSE,FALSE,FALSE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))+c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0)) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-"hello"
Error in (-(1/0)) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-1i
[1] -Inf-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-3.4
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-FALSE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-as.raw(10)
Error in (-(1/0)) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c("hello","hello","hello")
Error in (-(1/0)) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(1i,1i,1i)
[1] -Inf-1i -Inf-1i -Inf-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(3.4,3.4,3.4)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(FALSE,FALSE,FALSE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))-c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0)) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/"hello"
Error in (-(1/0))/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(-0.0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/1i
[1] NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/3.4
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/FALSE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/as.raw(10)
Error in (-(1/0))/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c("hello","hello","hello")
Error in (-(1/0))/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(1i,1i,1i)
[1] NaN+Infi NaN+Infi NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(3.4,3.4,3.4)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(FALSE,FALSE,FALSE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))/c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0))/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^"hello"
Error in (-(1/0))^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^1
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^1L
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^1i
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^TRUE
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^as.raw(10)
Error in (-(1/0))^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c("hello","hello","hello")
Error in (-(1/0))^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(1,1,1)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(1L,1L,1L)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(TRUE,TRUE,TRUE)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-(1/0))^c(as.raw(10),as.raw(10),as.raw(10))
Error in (-(1/0))^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%"hello"
Error in (-0)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%as.raw(10)
Error in (-0)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c("hello","hello","hello")
Error in (-0)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*"hello"
Error in (-0) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*as.raw(10)
Error in (-0) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c("hello","hello","hello")
Error in (-0) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+"hello"
Error in (-0) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+as.raw(10)
Error in (-0) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c("hello","hello","hello")
Error in (-0) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-"hello"
Error in (-0) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-1
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-1L
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-3.4
[1] -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-TRUE
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-as.raw(10)
Error in (-0) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c("hello","hello","hello")
Error in (-0) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(1,1,1)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(1L,1L,1L)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(3.4,3.4,3.4)
[1] -3.4 -3.4 -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(TRUE,TRUE,TRUE)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/"hello"
Error in (-0)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/as.raw(10)
Error in (-0)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c("hello","hello","hello")
Error in (-0)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^"hello"
Error in (-0)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^((0/0)+1i)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(1i+NA)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^1i
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^as.raw(10)
Error in (-0)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c("hello","hello","hello")
Error in (-0)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(-0.0)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (-0)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%"hello"
Error in (0/0)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%as.raw(10)
Error in (0/0)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c("hello","hello","hello")
Error in (0/0)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*"hello"
Error in (0/0) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*as.raw(10)
Error in (0/0) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c("hello","hello","hello")
Error in (0/0) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+"hello"
Error in (0/0) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+as.raw(10)
Error in (0/0) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c("hello","hello","hello")
Error in (0/0) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-"hello"
Error in (0/0) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-as.raw(10)
Error in (0/0) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c("hello","hello","hello")
Error in (0/0) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/"hello"
Error in (0/0)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/as.raw(10)
Error in (0/0)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c("hello","hello","hello")
Error in (0/0)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^"hello"
Error in (0/0)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(1+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^(3.4+NA)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^as.raw(10)
Error in (0/0)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c("hello","hello","hello")
Error in (0/0)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(0/0)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (0/0)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%"hello"
Error in (1 + NA)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%as.raw(10)
Error in (1 + NA)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c("hello","hello","hello")
Error in (1 + NA)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*"hello"
Error in (1 + NA) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*as.raw(10)
Error in (1 + NA) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c("hello","hello","hello")
Error in (1 + NA) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+"hello"
Error in (1 + NA) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+as.raw(10)
Error in (1 + NA) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c("hello","hello","hello")
Error in (1 + NA) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-"hello"
Error in (1 + NA) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-as.raw(10)
Error in (1 + NA) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c("hello","hello","hello")
Error in (1 + NA) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/"hello"
Error in (1 + NA)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/as.raw(10)
Error in (1 + NA)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c("hello","hello","hello")
Error in (1 + NA)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^"hello"
Error in (1 + NA)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^as.raw(10)
Error in (1 + NA)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c("hello","hello","hello")
Error in (1 + NA)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1+NA)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (1 + NA)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%"hello"
Error in (1/0)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%1
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%1L
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%3.4
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%TRUE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%as.raw(10)
Error in (1/0)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c("hello","hello","hello")
Error in (1/0)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(1,1,1)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(1L,1L,1L)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(3.4,3.4,3.4)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(TRUE,TRUE,TRUE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*"hello"
Error in (1/0) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*1i
[1] NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*as.raw(10)
Error in (1/0) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c("hello","hello","hello")
Error in (1/0) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(1i,1i,1i)
[1] NaN+Infi NaN+Infi NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+"hello"
Error in (1/0) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(-0.0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+1i
[1] Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+as.raw(10)
Error in (1/0) + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c("hello","hello","hello")
Error in (1/0) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(1i,1i,1i)
[1] Inf+1i Inf+1i Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-"hello"
Error in (1/0) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(-0.0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-1i
[1] Inf-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-as.raw(10)
Error in (1/0) - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c("hello","hello","hello")
Error in (1/0) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(1i,1i,1i)
[1] Inf-1i Inf-1i Inf-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/"hello"
Error in (1/0)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/1i
[1] NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/as.raw(10)
Error in (1/0)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c("hello","hello","hello")
Error in (1/0)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(1i,1i,1i)
[1] NaN-Infi NaN-Infi NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^"hello"
Error in (1/0)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^1
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^1L
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^1i
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^3.4
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^TRUE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^as.raw(10)
Error in (1/0)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c("hello","hello","hello")
Error in (1/0)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(1,1,1)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(1L,1L,1L)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(3.4,3.4,3.4)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(TRUE,TRUE,TRUE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1/0)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (1/0)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%"hello"
Error in (0+1i + NA)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(-(0/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(-(1/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(-0.0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(0/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(1+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(1/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%(3.4+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%1
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%1L
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%3.4
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%FALSE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%TRUE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%as.raw(10)
Error in (0+1i + NA)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c("hello","hello","hello")
Error in (0+1i + NA)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(1,1,1)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(1L,1L,1L)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(3.4,3.4,3.4)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(FALSE,FALSE,FALSE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(TRUE,TRUE,TRUE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*"hello"
Error in (0+1i + NA) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*as.raw(10)
Error in (0+1i + NA) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c("hello","hello","hello")
Error in (0+1i + NA) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+"hello"
Error in (0+1i + NA) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+as.raw(10)
Error in (0+1i + NA) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c("hello","hello","hello")
Error in (0+1i + NA) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-"hello"
Error in (0+1i + NA) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-as.raw(10)
Error in (0+1i + NA) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c("hello","hello","hello")
Error in (0+1i + NA) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/"hello"
Error in (0+1i + NA)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/as.raw(10)
Error in (0+1i + NA)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c("hello","hello","hello")
Error in (0+1i + NA)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^"hello"
Error in (0+1i + NA)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(-0.0)
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^FALSE
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^as.raw(10)
Error in (0+1i + NA)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c("hello","hello","hello")
Error in (0+1i + NA)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(FALSE,FALSE,FALSE)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(1i+NA)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i + NA)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%"hello"
Error in (3.4 + NA)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%as.raw(10)
Error in (3.4 + NA)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c("hello","hello","hello")
Error in (3.4 + NA)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*"hello"
Error in (3.4 + NA) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*as.raw(10)
Error in (3.4 + NA) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c("hello","hello","hello")
Error in (3.4 + NA) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)*c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+"hello"
Error in (3.4 + NA) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+as.raw(10)
Error in (3.4 + NA) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c("hello","hello","hello")
Error in (3.4 + NA) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)+c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-"hello"
Error in (3.4 + NA) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-as.raw(10)
Error in (3.4 + NA) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c("hello","hello","hello")
Error in (3.4 + NA) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)-c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/"hello"
Error in (3.4 + NA)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(-0.0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/as.raw(10)
Error in (3.4 + NA)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c("hello","hello","hello")
Error in (3.4 + NA)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)/c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^"hello"
Error in (3.4 + NA)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(-(1/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(1/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^1
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^1L
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^1i
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^3.4
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^TRUE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^as.raw(10)
Error in (3.4 + NA)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c("hello","hello","hello")
Error in (3.4 + NA)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(1,1,1)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(1L,1L,1L)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(1i,1i,1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(3.4,3.4,3.4)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(TRUE,TRUE,TRUE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#(3.4+NA)^c(as.raw(10),as.raw(10),as.raw(10))
Error in (3.4 + NA)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%"hello"
Error in 1%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%as.raw(10)
Error in 1%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c("hello","hello","hello")
Error in 1%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1%%c(as.raw(10),as.raw(10),as.raw(10))
Error in 1%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*"hello"
Error in 1 * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*as.raw(10)
Error in 1 * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c("hello","hello","hello")
Error in 1 * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1*c(as.raw(10),as.raw(10),as.raw(10))
Error in 1 * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+"hello"
Error in 1 + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+1
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+1L
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+1i
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+3.4
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+TRUE
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+as.raw(10)
Error in 1 + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c("hello","hello","hello")
Error in 1 + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1+c(as.raw(10),as.raw(10),as.raw(10))
Error in 1 + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-"hello"
Error in 1 - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-1i
[1] 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-3.4
[1] -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-as.raw(10)
Error in 1 - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c("hello","hello","hello")
Error in 1 - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1-c(as.raw(10),as.raw(10),as.raw(10))
Error in 1 - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/"hello"
Error in 1/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/3.4
[1] 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/as.raw(10)
Error in 1/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c("hello","hello","hello")
Error in 1/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1/c(as.raw(10),as.raw(10),as.raw(10))
Error in 1/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%"hello"
Error in 1L%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%as.raw(10)
Error in 1L%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c("hello","hello","hello")
Error in 1L%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L%%c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*"hello"
Error in 1L * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*as.raw(10)
Error in 1L * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c("hello","hello","hello")
Error in 1L * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L*c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+"hello"
Error in 1L + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+1
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+1L
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+1i
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+3.4
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+TRUE
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+as.raw(10)
Error in 1L + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c("hello","hello","hello")
Error in 1L + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L+c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-"hello"
Error in 1L - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-1i
[1] 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-3.4
[1] -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-as.raw(10)
Error in 1L - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c("hello","hello","hello")
Error in 1L - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L-c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/"hello"
Error in 1L/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/3.4
[1] 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/as.raw(10)
Error in 1L/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c("hello","hello","hello")
Error in 1L/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L/c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^"hello"
Error in 1L^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(-(0/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(-(1/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(0/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(1+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(1/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^(3.4+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^1i
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^as.raw(10)
Error in 1L^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c("hello","hello","hello")
Error in 1L^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1L^c(as.raw(10),as.raw(10),as.raw(10))
Error in 1L^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^"hello"
Error in 1^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(-(0/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(-(1/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(0/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(1+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(1/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^(3.4+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^1i
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^as.raw(10)
Error in 1^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c("hello","hello","hello")
Error in 1^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1^c(as.raw(10),as.raw(10),as.raw(10))
Error in 1^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%"hello"
Error in (0+1i)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(-(0/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(-(1/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(-0.0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(0/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(1+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(1/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%(3.4+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%1
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%1L
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%3.4
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%FALSE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%TRUE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%as.raw(10)
Error in (0+1i)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c("hello","hello","hello")
Error in (0+1i)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(1,1,1)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(1L,1L,1L)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(3.4,3.4,3.4)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(FALSE,FALSE,FALSE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(TRUE,TRUE,TRUE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i%%c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*"hello"
Error in (0+1i) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(-(1/0))
[1] NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(-0.0)
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(1/0)
[1] NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*1
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*1L
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*1i
[1] -1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*3.4
[1] 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*FALSE
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*TRUE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*as.raw(10)
Error in (0+1i) * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c("hello","hello","hello")
Error in (0+1i) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(1i,1i,1i)
[1] -1+0i -1+0i -1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(3.4,3.4,3.4)
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(FALSE,FALSE,FALSE)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i*c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+"hello"
Error in 0+1i + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(-(1/0))
[1] -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(-0.0)
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(1/0)
[1] Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+1
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+1L
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+1i
[1] 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+3.4
[1] 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+FALSE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+TRUE
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+as.raw(10)
Error in 0+1i + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c("hello","hello","hello")
Error in 0+1i + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(1,1,1)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(1L,1L,1L)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(1i,1i,1i)
[1] 0+2i 0+2i 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(3.4,3.4,3.4)
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(FALSE,FALSE,FALSE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(TRUE,TRUE,TRUE)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i+c(as.raw(10),as.raw(10),as.raw(10))
Error in 0+1i + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-"hello"
Error in 0+1i - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(-(1/0))
[1] Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(-0.0)
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(1/0)
[1] -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-1
[1] -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-1L
[1] -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-3.4
[1] -3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-FALSE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-TRUE
[1] -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-as.raw(10)
Error in 0+1i - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c("hello","hello","hello")
Error in 0+1i - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(1,1,1)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(1L,1L,1L)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(3.4,3.4,3.4)
[1] -3.4+1i -3.4+1i -3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(FALSE,FALSE,FALSE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(TRUE,TRUE,TRUE)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i-c(as.raw(10),as.raw(10),as.raw(10))
Error in 0+1i - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/"hello"
Error in (0+1i)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(-(1/0))
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(-0.0)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(1/0)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/1
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/1L
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/1i
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/3.4
[1] 0+0.2941176i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/FALSE
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/TRUE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/as.raw(10)
Error in (0+1i)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c("hello","hello","hello")
Error in (0+1i)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(3.4,3.4,3.4)
[1] 0+0.2941176i 0+0.2941176i 0+0.2941176i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(FALSE,FALSE,FALSE)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i/c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^"hello"
Error in (0+1i)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(-(0/0))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(-(1/0))
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(-0.0)
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(0/0)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(1/0)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^1
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^1L
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^1i
[1] 0.2078796+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^3.4
[1] 0.5877853-0.809017i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^FALSE
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^TRUE
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^as.raw(10)
Error in (0+1i)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c("hello","hello","hello")
Error in (0+1i)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(1i,1i,1i)
[1] 0.2078796+0i 0.2078796+0i 0.2078796+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(3.4,3.4,3.4)
[1] 0.5877853-0.809017i 0.5877853-0.809017i 0.5877853-0.809017i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(FALSE,FALSE,FALSE)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#1i^c(as.raw(10),as.raw(10),as.raw(10))
Error in (0+1i)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%"hello"
Error in 3.4%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%1
[1] 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%1L
[1] 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%TRUE
[1] 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%as.raw(10)
Error in 3.4%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c("hello","hello","hello")
Error in 3.4%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(1,1,1)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(1L,1L,1L)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(TRUE,TRUE,TRUE)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4%%c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*"hello"
Error in 3.4 * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*1
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*1L
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*1i
[1] 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*3.4
[1] 11.56

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*TRUE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*as.raw(10)
Error in 3.4 * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c("hello","hello","hello")
Error in 3.4 * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(1i,1i,1i)
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(3.4,3.4,3.4)
[1] 11.56 11.56 11.56

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4*c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4 * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+"hello"
Error in 3.4 + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(-0.0)
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+1
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+1L
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+1i
[1] 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+3.4
[1] 6.8

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+FALSE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+TRUE
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+as.raw(10)
Error in 3.4 + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c("hello","hello","hello")
Error in 3.4 + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(1,1,1)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(1L,1L,1L)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(1i,1i,1i)
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(3.4,3.4,3.4)
[1] 6.8 6.8 6.8

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(FALSE,FALSE,FALSE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(TRUE,TRUE,TRUE)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4+c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4 + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-"hello"
Error in 3.4 - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(-0.0)
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-1
[1] 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-1L
[1] 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-1i
[1] 3.4-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-FALSE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-TRUE
[1] 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-as.raw(10)
Error in 3.4 - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c("hello","hello","hello")
Error in 3.4 - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(1,1,1)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(1L,1L,1L)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(1i,1i,1i)
[1] 3.4-1i 3.4-1i 3.4-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(FALSE,FALSE,FALSE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(TRUE,TRUE,TRUE)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4-c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4 - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/"hello"
Error in 3.4/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/1
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/1L
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/1i
[1] 0-3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/TRUE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/as.raw(10)
Error in 3.4/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c("hello","hello","hello")
Error in 3.4/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(1i,1i,1i)
[1] 0-3.4i 0-3.4i 0-3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4/c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^"hello"
Error in 3.4^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^1
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^1L
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^1i
[1] 0.3400978+0.9403901i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^3.4
[1] 64.12514

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^TRUE
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^as.raw(10)
Error in 3.4^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c("hello","hello","hello")
Error in 3.4^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(1i,1i,1i)
[1] 0.3400978+0.9403901i 0.3400978+0.9403901i 0.3400978+0.9403901i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(3.4,3.4,3.4)
[1] 64.12514 64.12514 64.12514

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#3.4^c(as.raw(10),as.raw(10),as.raw(10))
Error in 3.4^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%"hello"
Error in FALSE%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%as.raw(10)
Error in FALSE%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c("hello","hello","hello")
Error in FALSE%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE%%c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*"hello"
Error in FALSE * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*as.raw(10)
Error in FALSE * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c("hello","hello","hello")
Error in FALSE * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE*c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+"hello"
Error in FALSE + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+as.raw(10)
Error in FALSE + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c("hello","hello","hello")
Error in FALSE + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE+c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-"hello"
Error in FALSE - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-1
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-1L
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-3.4
[1] -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-TRUE
[1] -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-as.raw(10)
Error in FALSE - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c("hello","hello","hello")
Error in FALSE - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(1,1,1)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(1L,1L,1L)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(3.4,3.4,3.4)
[1] -3.4 -3.4 -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(TRUE,TRUE,TRUE)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE-c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/"hello"
Error in FALSE/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/1i
[1] 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/FALSE
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/as.raw(10)
Error in FALSE/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c("hello","hello","hello")
Error in FALSE/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE/c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^"hello"
Error in FALSE^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^((0/0)+1i)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(-3)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(1i+NA)
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^1i
[1] NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^3.4
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^as.raw(10)
Error in FALSE^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c("hello","hello","hello")
Error in FALSE^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#FALSE^c(as.raw(10),as.raw(10),as.raw(10))
Error in FALSE^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%"hello"
Error in NULL%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%as.raw(10)
Error in NULL%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c("hello","hello","hello")
Error in NULL%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL%%c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*"hello"
Error in NULL * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*as.raw(10)
Error in NULL * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c("hello","hello","hello")
Error in NULL * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL*c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+"hello"
Error in NULL + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+as.raw(10)
Error in NULL + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c("hello","hello","hello")
Error in NULL + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL+c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-"hello"
Error in NULL - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-as.raw(10)
Error in NULL - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c("hello","hello","hello")
Error in NULL - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL-c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/"hello"
Error in NULL/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/as.raw(10)
Error in NULL/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c("hello","hello","hello")
Error in NULL/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL/c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^"hello"
Error in NULL^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^as.raw(10)
Error in NULL^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c("hello","hello","hello")
Error in NULL^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#NULL^c(as.raw(10),as.raw(10),as.raw(10))
Error in NULL^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%"hello"
Error in TRUE%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(-(1/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(-0.0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(1/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%FALSE
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%as.raw(10)
Error in TRUE%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c("hello","hello","hello")
Error in TRUE%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE%%c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*"hello"
Error in TRUE * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*FALSE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*as.raw(10)
Error in TRUE * as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c("hello","hello","hello")
Error in TRUE * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE*c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+"hello"
Error in TRUE + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+1
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+1L
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+1i
[1] 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+3.4
[1] 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+TRUE
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+as.raw(10)
Error in TRUE + as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c("hello","hello","hello")
Error in TRUE + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE+c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-"hello"
Error in TRUE - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(-(1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(1/0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-1
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-1L
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-1i
[1] 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-3.4
[1] -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-TRUE
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-as.raw(10)
Error in TRUE - as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c("hello","hello","hello")
Error in TRUE - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE-c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/"hello"
Error in TRUE/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(-(1/0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(-0.0)
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(1/0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/1i
[1] 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/3.4
[1] 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/FALSE
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/as.raw(10)
Error in TRUE/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c("hello","hello","hello")
Error in TRUE/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE/c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^"hello"
Error in TRUE^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(-(0/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(-(1/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(-0.0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(0/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(1+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(1/0)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^(3.4+NA)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^1i
[1] 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^3.4
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^FALSE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^TRUE
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^as.raw(10)
Error in TRUE^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c("hello","hello","hello")
Error in TRUE^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#TRUE^c(as.raw(10),as.raw(10),as.raw(10))
Error in TRUE^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%"hello"
Error in as.raw(10)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%((0/0)+1i)
Error in as.raw(10)%%((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(-(0/0))
Error in as.raw(10)%%(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(-(1/0))
Error in as.raw(10)%%(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(-0.0)
Error in as.raw(10)%%(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(0/0)
Error in as.raw(10)%%(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(1+NA)
Error in as.raw(10)%%(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(1/0)
Error in as.raw(10)%%(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(1i+NA)
Error in as.raw(10)%%(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%(3.4+NA)
Error in as.raw(10)%%(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%1
Error in as.raw(10)%%1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%1L
Error in as.raw(10)%%1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%1i
Error in as.raw(10)%%(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%3.4
Error in as.raw(10)%%3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%FALSE
Error in as.raw(10)%%FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%NULL
Error in as.raw(10)%%NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%TRUE
Error in as.raw(10)%%TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%as.raw(10)
Error in as.raw(10)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c("hello","hello","hello")
Error in as.raw(10)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(1,1,1)
Error in as.raw(10)%%c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(1L,1L,1L)
Error in as.raw(10)%%c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(1i,1i,1i)
Error in as.raw(10)%%c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(3.4,3.4,3.4)
Error in as.raw(10)%%c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(FALSE,FALSE,FALSE)
Error in as.raw(10)%%c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(NULL,NULL,NULL)
Error in as.raw(10)%%c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(TRUE,TRUE,TRUE)
Error in as.raw(10)%%c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*"hello"
Error in as.raw(10) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*((0/0)+1i)
Error in as.raw(10) * ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(-(0/0))
Error in as.raw(10) * (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(-(1/0))
Error in as.raw(10) * (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(-0.0)
Error in as.raw(10) * (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(0/0)
Error in as.raw(10) * (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(1+NA)
Error in as.raw(10) * (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(1/0)
Error in as.raw(10) * (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(1i+NA)
Error in as.raw(10) * (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*(3.4+NA)
Error in as.raw(10) * (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*1
Error in as.raw(10) * 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*1L
Error in as.raw(10) * 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*1i
Error in as.raw(10) * (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*3.4
Error in as.raw(10) * 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*FALSE
Error in as.raw(10) * FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*NULL
Error in as.raw(10) * NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*TRUE
Error in as.raw(10) * TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*as.raw(10)
Error in as.raw(10) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c("hello","hello","hello")
Error in as.raw(10) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(1,1,1)
Error in as.raw(10) * c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(1L,1L,1L)
Error in as.raw(10) * c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(1i,1i,1i)
Error in as.raw(10) * c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(3.4,3.4,3.4)
Error in as.raw(10) * c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(FALSE,FALSE,FALSE)
Error in as.raw(10) * c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(NULL,NULL,NULL)
Error in as.raw(10) * c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(TRUE,TRUE,TRUE)
Error in as.raw(10) * c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)*c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+"hello"
Error in as.raw(10) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+((0/0)+1i)
Error in as.raw(10) + ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(-(0/0))
Error in as.raw(10) + (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(-(1/0))
Error in as.raw(10) + (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(-0.0)
Error in as.raw(10) + (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(0/0)
Error in as.raw(10) + (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(1+NA)
Error in as.raw(10) + (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(1/0)
Error in as.raw(10) + (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(1i+NA)
Error in as.raw(10) + (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+(3.4+NA)
Error in as.raw(10) + (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+1
Error in as.raw(10) + 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+1L
Error in as.raw(10) + 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+1i
Error in as.raw(10) + (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+3.4
Error in as.raw(10) + 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+FALSE
Error in as.raw(10) + FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+NULL
Error in as.raw(10) + NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+TRUE
Error in as.raw(10) + TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+as.raw(10)
Error in as.raw(10) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c("hello","hello","hello")
Error in as.raw(10) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(1,1,1)
Error in as.raw(10) + c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(1L,1L,1L)
Error in as.raw(10) + c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(1i,1i,1i)
Error in as.raw(10) + c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(3.4,3.4,3.4)
Error in as.raw(10) + c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(FALSE,FALSE,FALSE)
Error in as.raw(10) + c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(NULL,NULL,NULL)
Error in as.raw(10) + c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(TRUE,TRUE,TRUE)
Error in as.raw(10) + c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)+c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-"hello"
Error in as.raw(10) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-((0/0)+1i)
Error in as.raw(10) - ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(-(0/0))
Error in as.raw(10) - (-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(-(1/0))
Error in as.raw(10) - (-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(-0.0)
Error in as.raw(10) - (-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(0/0)
Error in as.raw(10) - (0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(1+NA)
Error in as.raw(10) - (1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(1/0)
Error in as.raw(10) - (1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(1i+NA)
Error in as.raw(10) - (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-(3.4+NA)
Error in as.raw(10) - (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-1
Error in as.raw(10) - 1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-1L
Error in as.raw(10) - 1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-1i
Error in as.raw(10) - (0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-3.4
Error in as.raw(10) - 3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-FALSE
Error in as.raw(10) - FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-NULL
Error in as.raw(10) - NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-TRUE
Error in as.raw(10) - TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-as.raw(10)
Error in as.raw(10) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c("hello","hello","hello")
Error in as.raw(10) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(1,1,1)
Error in as.raw(10) - c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(1L,1L,1L)
Error in as.raw(10) - c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(1i,1i,1i)
Error in as.raw(10) - c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(3.4,3.4,3.4)
Error in as.raw(10) - c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(FALSE,FALSE,FALSE)
Error in as.raw(10) - c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(NULL,NULL,NULL)
Error in as.raw(10) - c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(TRUE,TRUE,TRUE)
Error in as.raw(10) - c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)-c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/"hello"
Error in as.raw(10)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/((0/0)+1i)
Error in as.raw(10)/((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(-(0/0))
Error in as.raw(10)/(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(-(1/0))
Error in as.raw(10)/(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(-0.0)
Error in as.raw(10)/(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(0/0)
Error in as.raw(10)/(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(1+NA)
Error in as.raw(10)/(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(1/0)
Error in as.raw(10)/(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(1i+NA)
Error in as.raw(10)/(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/(3.4+NA)
Error in as.raw(10)/(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/1
Error in as.raw(10)/1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/1L
Error in as.raw(10)/1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/1i
Error in as.raw(10)/(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/3.4
Error in as.raw(10)/3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/FALSE
Error in as.raw(10)/FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/NULL
Error in as.raw(10)/NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/TRUE
Error in as.raw(10)/TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/as.raw(10)
Error in as.raw(10)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c("hello","hello","hello")
Error in as.raw(10)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(1,1,1)
Error in as.raw(10)/c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(1L,1L,1L)
Error in as.raw(10)/c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(1i,1i,1i)
Error in as.raw(10)/c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(3.4,3.4,3.4)
Error in as.raw(10)/c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(FALSE,FALSE,FALSE)
Error in as.raw(10)/c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(NULL,NULL,NULL)
Error in as.raw(10)/c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(TRUE,TRUE,TRUE)
Error in as.raw(10)/c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)/c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^"hello"
Error in as.raw(10)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^((0/0)+1i)
Error in as.raw(10)^((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(-(0/0))
Error in as.raw(10)^(-(0/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(-(1/0))
Error in as.raw(10)^(-(1/0)) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(-0.0)
Error in as.raw(10)^(-0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(0/0)
Error in as.raw(10)^(0/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(1+NA)
Error in as.raw(10)^(1 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(1/0)
Error in as.raw(10)^(1/0) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(1i+NA)
Error in as.raw(10)^(0+1i + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^(3.4+NA)
Error in as.raw(10)^(3.4 + NA) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^1
Error in as.raw(10)^1 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^1L
Error in as.raw(10)^1L : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^1i
Error in as.raw(10)^(0+1i) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^3.4
Error in as.raw(10)^3.4 : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^FALSE
Error in as.raw(10)^FALSE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^NULL
Error in as.raw(10)^NULL : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^TRUE
Error in as.raw(10)^TRUE : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^as.raw(10)
Error in as.raw(10)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c("hello","hello","hello")
Error in as.raw(10)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(1,1,1)
Error in as.raw(10)^c(1, 1, 1) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(1L,1L,1L)
Error in as.raw(10)^c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(1i,1i,1i)
Error in as.raw(10)^c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(3.4,3.4,3.4)
Error in as.raw(10)^c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(FALSE,FALSE,FALSE)
Error in as.raw(10)^c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(NULL,NULL,NULL)
Error in as.raw(10)^c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(TRUE,TRUE,TRUE)
Error in as.raw(10)^c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#as.raw(10)^c(as.raw(10),as.raw(10),as.raw(10))
Error in as.raw(10)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%"hello"
Error in c("hello", "hello", "hello")%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%((0/0)+1i)
Error in c("hello", "hello", "hello")%%((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(-(0/0))
Error in c("hello", "hello", "hello")%%(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(-(1/0))
Error in c("hello", "hello", "hello")%%(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(-0.0)
Error in c("hello", "hello", "hello")%%(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(0/0)
Error in c("hello", "hello", "hello")%%(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(1+NA)
Error in c("hello", "hello", "hello")%%(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(1/0)
Error in c("hello", "hello", "hello")%%(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(1i+NA)
Error in c("hello", "hello", "hello")%%(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%(3.4+NA)
Error in c("hello", "hello", "hello")%%(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%1
Error in c("hello", "hello", "hello")%%1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%1L
Error in c("hello", "hello", "hello")%%1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%1i
Error in c("hello", "hello", "hello")%%(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%3.4
Error in c("hello", "hello", "hello")%%3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%FALSE
Error in c("hello", "hello", "hello")%%FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%NULL
Error in c("hello", "hello", "hello")%%NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%TRUE
Error in c("hello", "hello", "hello")%%TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%as.raw(10)
Error in c("hello", "hello", "hello")%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c("hello","hello","hello")
Error in c("hello", "hello", "hello")%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(1,1,1)
Error in c("hello", "hello", "hello")%%c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(1L,1L,1L)
Error in c("hello", "hello", "hello")%%c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(1i,1i,1i)
Error in c("hello", "hello", "hello")%%c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello")%%c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello")%%c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello")%%c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello")%%c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello")%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*"hello"
Error in c("hello", "hello", "hello") * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*((0/0)+1i)
Error in c("hello", "hello", "hello") * ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(-(0/0))
Error in c("hello", "hello", "hello") * (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(-(1/0))
Error in c("hello", "hello", "hello") * (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(-0.0)
Error in c("hello", "hello", "hello") * (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(0/0)
Error in c("hello", "hello", "hello") * (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(1+NA)
Error in c("hello", "hello", "hello") * (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(1/0)
Error in c("hello", "hello", "hello") * (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(1i+NA)
Error in c("hello", "hello", "hello") * (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*(3.4+NA)
Error in c("hello", "hello", "hello") * (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*1
Error in c("hello", "hello", "hello") * 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*1L
Error in c("hello", "hello", "hello") * 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*1i
Error in c("hello", "hello", "hello") * (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*3.4
Error in c("hello", "hello", "hello") * 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*FALSE
Error in c("hello", "hello", "hello") * FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*NULL
Error in c("hello", "hello", "hello") * NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*TRUE
Error in c("hello", "hello", "hello") * TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*as.raw(10)
Error in c("hello", "hello", "hello") * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c("hello","hello","hello")
Error in c("hello", "hello", "hello") * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(1,1,1)
Error in c("hello", "hello", "hello") * c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(1L,1L,1L)
Error in c("hello", "hello", "hello") * c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(1i,1i,1i)
Error in c("hello", "hello", "hello") * c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello") * c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello") * c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello") * c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello") * c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")*c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello") * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+"hello"
Error in c("hello", "hello", "hello") + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+((0/0)+1i)
Error in c("hello", "hello", "hello") + ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(-(0/0))
Error in c("hello", "hello", "hello") + (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(-(1/0))
Error in c("hello", "hello", "hello") + (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(-0.0)
Error in c("hello", "hello", "hello") + (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(0/0)
Error in c("hello", "hello", "hello") + (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(1+NA)
Error in c("hello", "hello", "hello") + (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(1/0)
Error in c("hello", "hello", "hello") + (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(1i+NA)
Error in c("hello", "hello", "hello") + (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+(3.4+NA)
Error in c("hello", "hello", "hello") + (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+1
Error in c("hello", "hello", "hello") + 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+1L
Error in c("hello", "hello", "hello") + 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+1i
Error in c("hello", "hello", "hello") + (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+3.4
Error in c("hello", "hello", "hello") + 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+FALSE
Error in c("hello", "hello", "hello") + FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+NULL
Error in c("hello", "hello", "hello") + NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+TRUE
Error in c("hello", "hello", "hello") + TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+as.raw(10)
Error in c("hello", "hello", "hello") + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c("hello","hello","hello")
Error in c("hello", "hello", "hello") + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(1,1,1)
Error in c("hello", "hello", "hello") + c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(1L,1L,1L)
Error in c("hello", "hello", "hello") + c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(1i,1i,1i)
Error in c("hello", "hello", "hello") + c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello") + c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello") + c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello") + c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello") + c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")+c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello") + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-"hello"
Error in c("hello", "hello", "hello") - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-((0/0)+1i)
Error in c("hello", "hello", "hello") - ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(-(0/0))
Error in c("hello", "hello", "hello") - (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(-(1/0))
Error in c("hello", "hello", "hello") - (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(-0.0)
Error in c("hello", "hello", "hello") - (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(0/0)
Error in c("hello", "hello", "hello") - (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(1+NA)
Error in c("hello", "hello", "hello") - (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(1/0)
Error in c("hello", "hello", "hello") - (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(1i+NA)
Error in c("hello", "hello", "hello") - (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-(3.4+NA)
Error in c("hello", "hello", "hello") - (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-1
Error in c("hello", "hello", "hello") - 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-1L
Error in c("hello", "hello", "hello") - 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-1i
Error in c("hello", "hello", "hello") - (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-3.4
Error in c("hello", "hello", "hello") - 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-FALSE
Error in c("hello", "hello", "hello") - FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-NULL
Error in c("hello", "hello", "hello") - NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-TRUE
Error in c("hello", "hello", "hello") - TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-as.raw(10)
Error in c("hello", "hello", "hello") - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c("hello","hello","hello")
Error in c("hello", "hello", "hello") - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(1,1,1)
Error in c("hello", "hello", "hello") - c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(1L,1L,1L)
Error in c("hello", "hello", "hello") - c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(1i,1i,1i)
Error in c("hello", "hello", "hello") - c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello") - c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello") - c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello") - c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello") - c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")-c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello") - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/"hello"
Error in c("hello", "hello", "hello")/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/((0/0)+1i)
Error in c("hello", "hello", "hello")/((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(-(0/0))
Error in c("hello", "hello", "hello")/(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(-(1/0))
Error in c("hello", "hello", "hello")/(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(-0.0)
Error in c("hello", "hello", "hello")/(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(0/0)
Error in c("hello", "hello", "hello")/(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(1+NA)
Error in c("hello", "hello", "hello")/(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(1/0)
Error in c("hello", "hello", "hello")/(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(1i+NA)
Error in c("hello", "hello", "hello")/(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/(3.4+NA)
Error in c("hello", "hello", "hello")/(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/1
Error in c("hello", "hello", "hello")/1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/1L
Error in c("hello", "hello", "hello")/1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/1i
Error in c("hello", "hello", "hello")/(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/3.4
Error in c("hello", "hello", "hello")/3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/FALSE
Error in c("hello", "hello", "hello")/FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/NULL
Error in c("hello", "hello", "hello")/NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/TRUE
Error in c("hello", "hello", "hello")/TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/as.raw(10)
Error in c("hello", "hello", "hello")/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c("hello","hello","hello")
Error in c("hello", "hello", "hello")/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(1,1,1)
Error in c("hello", "hello", "hello")/c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(1L,1L,1L)
Error in c("hello", "hello", "hello")/c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(1i,1i,1i)
Error in c("hello", "hello", "hello")/c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello")/c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello")/c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello")/c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello")/c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")/c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello")/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^"hello"
Error in c("hello", "hello", "hello")^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^((0/0)+1i)
Error in c("hello", "hello", "hello")^((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(-(0/0))
Error in c("hello", "hello", "hello")^(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(-(1/0))
Error in c("hello", "hello", "hello")^(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(-0.0)
Error in c("hello", "hello", "hello")^(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(0/0)
Error in c("hello", "hello", "hello")^(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(1+NA)
Error in c("hello", "hello", "hello")^(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(1/0)
Error in c("hello", "hello", "hello")^(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(1i+NA)
Error in c("hello", "hello", "hello")^(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^(3.4+NA)
Error in c("hello", "hello", "hello")^(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^1
Error in c("hello", "hello", "hello")^1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^1L
Error in c("hello", "hello", "hello")^1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^1i
Error in c("hello", "hello", "hello")^(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^3.4
Error in c("hello", "hello", "hello")^3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^FALSE
Error in c("hello", "hello", "hello")^FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^NULL
Error in c("hello", "hello", "hello")^NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^TRUE
Error in c("hello", "hello", "hello")^TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^as.raw(10)
Error in c("hello", "hello", "hello")^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c("hello","hello","hello")
Error in c("hello", "hello", "hello")^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(1,1,1)
Error in c("hello", "hello", "hello")^c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(1L,1L,1L)
Error in c("hello", "hello", "hello")^c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(1i,1i,1i)
Error in c("hello", "hello", "hello")^c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(3.4,3.4,3.4)
Error in c("hello", "hello", "hello")^c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(FALSE,FALSE,FALSE)
Error in c("hello", "hello", "hello")^c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(NULL,NULL,NULL)
Error in c("hello", "hello", "hello")^c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(TRUE,TRUE,TRUE)
Error in c("hello", "hello", "hello")^c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c("hello","hello","hello")^c(as.raw(10),as.raw(10),as.raw(10))
Error in c("hello", "hello", "hello")^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%"hello"
Error in c(1, 1, 1)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%FALSE
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%as.raw(10)
Error in c(1, 1, 1)%%as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c("hello","hello","hello")
Error in c(1, 1, 1)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*"hello"
Error in c(1, 1, 1) * "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*1i
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*3.4
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*as.raw(10)
Error in c(1, 1, 1) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c("hello","hello","hello")
Error in c(1, 1, 1) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+"hello"
Error in c(1, 1, 1) + "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+1
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+1L
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+1i
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+3.4
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+TRUE
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+as.raw(10)
Error in c(1, 1, 1) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c("hello","hello","hello")
Error in c(1, 1, 1) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-"hello"
Error in c(1, 1, 1) - "hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-1i
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-3.4
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-as.raw(10)
Error in c(1, 1, 1) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c("hello","hello","hello")
Error in c(1, 1, 1) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/"hello"
Error in c(1, 1, 1)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(-0.0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/1i
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/3.4
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/FALSE
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/as.raw(10)
Error in c(1, 1, 1)/as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c("hello","hello","hello")
Error in c(1, 1, 1)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^"hello"
Error in c(1, 1, 1)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(-(0/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(-(1/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(0/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(1+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(1/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^(3.4+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^1i
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^as.raw(10)
Error in c(1, 1, 1)^as.raw(10) : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c("hello","hello","hello")
Error in c(1, 1, 1)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1,1,1)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1, 1, 1)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%"hello"
Error in c(1L, 1L, 1L)%%"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%FALSE
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%as.raw(10)
Error in c(1L, 1L, 1L)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c("hello","hello","hello")
Error in c(1L, 1L, 1L)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*"hello"
Error in c(1L, 1L, 1L) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*1i
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*3.4
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*as.raw(10)
Error in c(1L, 1L, 1L) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c("hello","hello","hello")
Error in c(1L, 1L, 1L) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+"hello"
Error in c(1L, 1L, 1L) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+1
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+1L
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+1i
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+3.4
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+TRUE
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+as.raw(10)
Error in c(1L, 1L, 1L) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c("hello","hello","hello")
Error in c(1L, 1L, 1L) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-"hello"
Error in c(1L, 1L, 1L) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-1i
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-3.4
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-as.raw(10)
Error in c(1L, 1L, 1L) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c("hello","hello","hello")
Error in c(1L, 1L, 1L) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/"hello"
Error in c(1L, 1L, 1L)/"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(-0.0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/1i
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/3.4
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/FALSE
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/as.raw(10)
Error in c(1L, 1L, 1L)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c("hello","hello","hello")
Error in c(1L, 1L, 1L)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^"hello"
Error in c(1L, 1L, 1L)^"hello" : non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(-(0/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(-(1/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(0/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(1+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(1/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^(3.4+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^1i
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^as.raw(10)
Error in c(1L, 1L, 1L)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c("hello","hello","hello")
Error in c(1L, 1L, 1L)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1L,1L,1L)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(1L, 1L, 1L)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%"hello"
Error in c(0+1i, 0+1i, 0+1i)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(-(0/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(-(1/0))
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(-0.0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(0/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(1+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(1/0)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%(3.4+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%1
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%1L
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%3.4
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%FALSE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%TRUE
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%as.raw(10)
Error in c(0+1i, 0+1i, 0+1i)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(1,1,1)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(1L,1L,1L)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(3.4,3.4,3.4)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(FALSE,FALSE,FALSE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(TRUE,TRUE,TRUE)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*"hello"
Error in c(0+1i, 0+1i, 0+1i) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(-(1/0))
[1] NaN-Infi NaN-Infi NaN-Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(-0.0)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(1/0)
[1] NaN+Infi NaN+Infi NaN+Infi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*1
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*1L
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*1i
[1] -1+0i -1+0i -1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*3.4
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*FALSE
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*TRUE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*as.raw(10)
Error in c(0+1i, 0+1i, 0+1i) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(1i,1i,1i)
[1] -1+0i -1+0i -1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(3.4,3.4,3.4)
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(FALSE,FALSE,FALSE)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+"hello"
Error in c(0+1i, 0+1i, 0+1i) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(-(1/0))
[1] -Inf+1i -Inf+1i -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(-0.0)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(1/0)
[1] Inf+1i Inf+1i Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+1
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+1L
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+1i
[1] 0+2i 0+2i 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+3.4
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+FALSE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+TRUE
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+as.raw(10)
Error in c(0+1i, 0+1i, 0+1i) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(1,1,1)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(1L,1L,1L)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(1i,1i,1i)
[1] 0+2i 0+2i 0+2i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(3.4,3.4,3.4)
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(FALSE,FALSE,FALSE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(TRUE,TRUE,TRUE)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-"hello"
Error in c(0+1i, 0+1i, 0+1i) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(-(1/0))
[1] Inf+1i Inf+1i Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(-0.0)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(1/0)
[1] -Inf+1i -Inf+1i -Inf+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-1
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-1L
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-1i
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-3.4
[1] -3.4+1i -3.4+1i -3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-FALSE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-TRUE
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-as.raw(10)
Error in c(0+1i, 0+1i, 0+1i) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(1,1,1)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(1L,1L,1L)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(3.4,3.4,3.4)
[1] -3.4+1i -3.4+1i -3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(FALSE,FALSE,FALSE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(TRUE,TRUE,TRUE)
[1] -1+1i -1+1i -1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/"hello"
Error in c(0+1i, 0+1i, 0+1i)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(-(1/0))
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(-0.0)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(1/0)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/1
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/1L
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/1i
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/3.4
[1] 0+0.2941176i 0+0.2941176i 0+0.2941176i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/FALSE
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/TRUE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/as.raw(10)
Error in c(0+1i, 0+1i, 0+1i)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(3.4,3.4,3.4)
[1] 0+0.2941176i 0+0.2941176i 0+0.2941176i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(FALSE,FALSE,FALSE)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^"hello"
Error in c(0+1i, 0+1i, 0+1i)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(-(0/0))
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(-(1/0))
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(-0.0)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(0/0)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(1/0)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^1
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^1L
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^1i
[1] 0.2078796+0i 0.2078796+0i 0.2078796+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^3.4
[1] 0.5877853-0.809017i 0.5877853-0.809017i 0.5877853-0.809017i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^FALSE
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^NULL
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^TRUE
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^as.raw(10)
Error in c(0+1i, 0+1i, 0+1i)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c("hello","hello","hello")
Error in c(0+1i, 0+1i, 0+1i)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(1,1,1)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(1L,1L,1L)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(1i,1i,1i)
[1] 0.2078796+0i 0.2078796+0i 0.2078796+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(3.4,3.4,3.4)
[1] 0.5877853-0.809017i 0.5877853-0.809017i 0.5877853-0.809017i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(FALSE,FALSE,FALSE)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(NULL,NULL,NULL)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(TRUE,TRUE,TRUE)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(1i,1i,1i)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(0+1i, 0+1i, 0+1i)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%"hello"
Error in c(3.4, 3.4, 3.4)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%1
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%1L
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%FALSE
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%TRUE
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%as.raw(10)
Error in c(3.4, 3.4, 3.4)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(1,1,1)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(1L,1L,1L)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(TRUE,TRUE,TRUE)
[1] 0.4 0.4 0.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*"hello"
Error in c(3.4, 3.4, 3.4) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*1
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*1L
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*1i
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*3.4
[1] 11.56 11.56 11.56

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*TRUE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*as.raw(10)
Error in c(3.4, 3.4, 3.4) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(1i,1i,1i)
[1] 0+3.4i 0+3.4i 0+3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(3.4,3.4,3.4)
[1] 11.56 11.56 11.56

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+"hello"
Error in c(3.4, 3.4, 3.4) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(-0.0)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+1
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+1L
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+1i
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+3.4
[1] 6.8 6.8 6.8

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+FALSE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+TRUE
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+as.raw(10)
Error in c(3.4, 3.4, 3.4) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(1,1,1)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(1L,1L,1L)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(1i,1i,1i)
[1] 3.4+1i 3.4+1i 3.4+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(3.4,3.4,3.4)
[1] 6.8 6.8 6.8

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(FALSE,FALSE,FALSE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(TRUE,TRUE,TRUE)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-"hello"
Error in c(3.4, 3.4, 3.4) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(-0.0)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-1
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-1L
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-1i
[1] 3.4-1i 3.4-1i 3.4-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-FALSE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-TRUE
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-as.raw(10)
Error in c(3.4, 3.4, 3.4) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(1,1,1)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(1L,1L,1L)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(1i,1i,1i)
[1] 3.4-1i 3.4-1i 3.4-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(FALSE,FALSE,FALSE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(TRUE,TRUE,TRUE)
[1] 2.4 2.4 2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/"hello"
Error in c(3.4, 3.4, 3.4)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(-0.0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/1
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/1L
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/1i
[1] 0-3.4i 0-3.4i 0-3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/FALSE
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/TRUE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/as.raw(10)
Error in c(3.4, 3.4, 3.4)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(1i,1i,1i)
[1] 0-3.4i 0-3.4i 0-3.4i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^"hello"
Error in c(3.4, 3.4, 3.4)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^1
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^1L
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^1i
[1] 0.3400978+0.9403901i 0.3400978+0.9403901i 0.3400978+0.9403901i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^3.4
[1] 64.12514 64.12514 64.12514

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^TRUE
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^as.raw(10)
Error in c(3.4, 3.4, 3.4)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c("hello","hello","hello")
Error in c(3.4, 3.4, 3.4)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(1,1,1)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(1L,1L,1L)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(1i,1i,1i)
[1] 0.3400978+0.9403901i 0.3400978+0.9403901i 0.3400978+0.9403901i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(3.4,3.4,3.4)
[1] 64.12514 64.12514 64.12514

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(TRUE,TRUE,TRUE)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(3.4,3.4,3.4)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(3.4, 3.4, 3.4)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%"hello"
Error in c(FALSE, FALSE, FALSE)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%FALSE
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%as.raw(10)
Error in c(FALSE, FALSE, FALSE)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*"hello"
Error in c(FALSE, FALSE, FALSE) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*1i
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*as.raw(10)
Error in c(FALSE, FALSE, FALSE) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+"hello"
Error in c(FALSE, FALSE, FALSE) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+1i
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+3.4
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+as.raw(10)
Error in c(FALSE, FALSE, FALSE) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-"hello"
Error in c(FALSE, FALSE, FALSE) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-1
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-1L
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-1i
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-3.4
[1] -3.4 -3.4 -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-TRUE
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-as.raw(10)
Error in c(FALSE, FALSE, FALSE) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(1,1,1)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(1L,1L,1L)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(3.4,3.4,3.4)
[1] -3.4 -3.4 -3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(TRUE,TRUE,TRUE)
[1] -1 -1 -1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/"hello"
Error in c(FALSE, FALSE, FALSE)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/1i
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/FALSE
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/as.raw(10)
Error in c(FALSE, FALSE, FALSE)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(1i,1i,1i)
[1] 0+0i 0+0i 0+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(FALSE,FALSE,FALSE)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^"hello"
Error in c(FALSE, FALSE, FALSE)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^((0/0)+1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(1i+NA)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^1i
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^3.4
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^as.raw(10)
Error in c(FALSE, FALSE, FALSE)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c("hello","hello","hello")
Error in c(FALSE, FALSE, FALSE)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(1i,1i,1i)
[1] NaN+NaNi NaN+NaNi NaN+NaNi

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(3.4,3.4,3.4)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(FALSE,FALSE,FALSE)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(FALSE, FALSE, FALSE)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%"hello"
Error in c(NULL, NULL, NULL)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%as.raw(10)
Error in c(NULL, NULL, NULL)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c("hello","hello","hello")
Error in c(NULL, NULL, NULL)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*"hello"
Error in c(NULL, NULL, NULL) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*as.raw(10)
Error in c(NULL, NULL, NULL) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c("hello","hello","hello")
Error in c(NULL, NULL, NULL) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+"hello"
Error in c(NULL, NULL, NULL) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+as.raw(10)
Error in c(NULL, NULL, NULL) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c("hello","hello","hello")
Error in c(NULL, NULL, NULL) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-"hello"
Error in c(NULL, NULL, NULL) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-as.raw(10)
Error in c(NULL, NULL, NULL) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c("hello","hello","hello")
Error in c(NULL, NULL, NULL) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/"hello"
Error in c(NULL, NULL, NULL)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/as.raw(10)
Error in c(NULL, NULL, NULL)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c("hello","hello","hello")
Error in c(NULL, NULL, NULL)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^"hello"
Error in c(NULL, NULL, NULL)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^((0/0)+1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(-(0/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(-(1/0))
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(-0.0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(0/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(1+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(1/0)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(1i+NA)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^(3.4+NA)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^1
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^1L
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^1i
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^3.4
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^FALSE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^TRUE
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^as.raw(10)
Error in c(NULL, NULL, NULL)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c("hello","hello","hello")
Error in c(NULL, NULL, NULL)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(1,1,1)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(1L,1L,1L)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(1i,1i,1i)
complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(3.4,3.4,3.4)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(FALSE,FALSE,FALSE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(TRUE,TRUE,TRUE)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(NULL,NULL,NULL)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(NULL, NULL, NULL)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%"hello"
Error in c(TRUE, TRUE, TRUE)%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%((0/0)+1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(-(1/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(-0.0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(1/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(1i+NA)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%1i
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%FALSE
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%as.raw(10)
Error in c(TRUE, TRUE, TRUE)%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE)%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(1i,1i,1i)
Error: unimplemented complex operation

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(FALSE,FALSE,FALSE)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE)%%c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*"hello"
Error in c(TRUE, TRUE, TRUE) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(-0.0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*1i
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*3.4
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*FALSE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*as.raw(10)
Error in c(TRUE, TRUE, TRUE) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(FALSE,FALSE,FALSE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE) * c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+"hello"
Error in c(TRUE, TRUE, TRUE) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(-(1/0))
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(1/0)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+1
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+1L
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+1i
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+3.4
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+TRUE
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+as.raw(10)
Error in c(TRUE, TRUE, TRUE) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(1,1,1)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(1L,1L,1L)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(1i,1i,1i)
[1] 1+1i 1+1i 1+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(3.4,3.4,3.4)
[1] 4.4 4.4 4.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(TRUE,TRUE,TRUE)
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE) + c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-"hello"
Error in c(TRUE, TRUE, TRUE) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(-(1/0))
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(1/0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-1
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-1L
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-1i
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-3.4
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-TRUE
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-as.raw(10)
Error in c(TRUE, TRUE, TRUE) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(1,1,1)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(1L,1L,1L)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(1i,1i,1i)
[1] 1-1i 1-1i 1-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(3.4,3.4,3.4)
[1] -2.4 -2.4 -2.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(TRUE,TRUE,TRUE)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE) - c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/"hello"
Error in c(TRUE, TRUE, TRUE)/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(-(0/0))
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(-(1/0))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(-0.0)
[1] -Inf -Inf -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(0/0)
[1] NaN NaN NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(1+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(1/0)
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/(3.4+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/1i
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/3.4
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/FALSE
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/as.raw(10)
Error in c(TRUE, TRUE, TRUE)/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE)/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(1i,1i,1i)
[1] 0-1i 0-1i 0-1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(3.4,3.4,3.4)
[1] 0.2941176 0.2941176 0.2941176

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(FALSE,FALSE,FALSE)
[1] Inf Inf Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE)/c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^"hello"
Error in c(TRUE, TRUE, TRUE)^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^((0/0)+1i)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(-(0/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(-(1/0))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(-0.0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(0/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(1+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(1/0)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(1i+NA)
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^(3.4+NA)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^1
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^1L
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^1i
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^3.4
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^FALSE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^NULL
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^TRUE
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^as.raw(10)
Error in c(TRUE, TRUE, TRUE)^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c("hello","hello","hello")
Error in c(TRUE, TRUE, TRUE)^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(1i,1i,1i)
[1] 1+0i 1+0i 1+0i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(3.4,3.4,3.4)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(FALSE,FALSE,FALSE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(NULL,NULL,NULL)
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(TRUE,TRUE,TRUE)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(TRUE,TRUE,TRUE)^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(TRUE, TRUE, TRUE)^c(as.raw(10), as.raw(10), as.raw(10)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10))%%"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%1
Error in c(as.raw(10), as.raw(10), as.raw(10))%%1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%1L
Error in c(as.raw(10), as.raw(10), as.raw(10))%%1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%1i
Error in c(as.raw(10), as.raw(10), as.raw(10))%%(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%3.4
Error in c(as.raw(10), as.raw(10), as.raw(10))%%3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10))%%FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%NULL
Error in c(as.raw(10), as.raw(10), as.raw(10))%%NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10))%%TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))%%c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10))%%c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10)) * "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*1
Error in c(as.raw(10), as.raw(10), as.raw(10)) * 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*1L
Error in c(as.raw(10), as.raw(10), as.raw(10)) * 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*1i
Error in c(as.raw(10), as.raw(10), as.raw(10)) * (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*3.4
Error in c(as.raw(10), as.raw(10), as.raw(10)) * 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10)) * FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*NULL
Error in c(as.raw(10), as.raw(10), as.raw(10)) * NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10)) * TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))*c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10)) * c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10)) + "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+1
Error in c(as.raw(10), as.raw(10), as.raw(10)) + 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+1L
Error in c(as.raw(10), as.raw(10), as.raw(10)) + 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+1i
Error in c(as.raw(10), as.raw(10), as.raw(10)) + (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+3.4
Error in c(as.raw(10), as.raw(10), as.raw(10)) + 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10)) + FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+NULL
Error in c(as.raw(10), as.raw(10), as.raw(10)) + NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10)) + TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))+c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10)) + c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10)) - "hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - ((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-1
Error in c(as.raw(10), as.raw(10), as.raw(10)) - 1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-1L
Error in c(as.raw(10), as.raw(10), as.raw(10)) - 1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-1i
Error in c(as.raw(10), as.raw(10), as.raw(10)) - (0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-3.4
Error in c(as.raw(10), as.raw(10), as.raw(10)) - 3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10)) - FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-NULL
Error in c(as.raw(10), as.raw(10), as.raw(10)) - NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10)) - TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))-c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10)) - c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10))/"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))/((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))/(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))/(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))/(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/1
Error in c(as.raw(10), as.raw(10), as.raw(10))/1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/1L
Error in c(as.raw(10), as.raw(10), as.raw(10))/1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/1i
Error in c(as.raw(10), as.raw(10), as.raw(10))/(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/3.4
Error in c(as.raw(10), as.raw(10), as.raw(10))/3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10))/FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/NULL
Error in c(as.raw(10), as.raw(10), as.raw(10))/NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10))/TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10))/as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10))/c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))/c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10))/c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^"hello"
Error in c(as.raw(10), as.raw(10), as.raw(10))^"hello" :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^((0/0)+1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))^((0/0) + (0+1i)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(-(0/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))^(-(0/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(-(1/0))
Error in c(as.raw(10), as.raw(10), as.raw(10))^(-(1/0)) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(-0.0)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(-0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(0/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(0/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(1+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(1 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(1/0)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(1/0) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(1i+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(0+1i + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^(3.4+NA)
Error in c(as.raw(10), as.raw(10), as.raw(10))^(3.4 + NA) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^1
Error in c(as.raw(10), as.raw(10), as.raw(10))^1 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^1L
Error in c(as.raw(10), as.raw(10), as.raw(10))^1L :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^1i
Error in c(as.raw(10), as.raw(10), as.raw(10))^(0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^3.4
Error in c(as.raw(10), as.raw(10), as.raw(10))^3.4 :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^FALSE
Error in c(as.raw(10), as.raw(10), as.raw(10))^FALSE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^NULL
Error in c(as.raw(10), as.raw(10), as.raw(10))^NULL :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^TRUE
Error in c(as.raw(10), as.raw(10), as.raw(10))^TRUE :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^as.raw(10)
Error in c(as.raw(10), as.raw(10), as.raw(10))^as.raw(10) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c("hello","hello","hello")
Error in c(as.raw(10), as.raw(10), as.raw(10))^c("hello", "hello", "hello") :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(1,1,1)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(1, 1, 1) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(1L,1L,1L)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(1L, 1L, 1L) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(1i,1i,1i)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(0+1i, 0+1i, 0+1i) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(3.4,3.4,3.4)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(3.4, 3.4, 3.4) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(FALSE,FALSE,FALSE)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(FALSE, FALSE, FALSE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(NULL,NULL,NULL)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(NULL, NULL, NULL) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(TRUE,TRUE,TRUE)
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(TRUE, TRUE, TRUE) :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testBinaryArithmetic
#c(as.raw(10),as.raw(10),as.raw(10))^c(as.raw(10),as.raw(10),as.raw(10))
Error in c(as.raw(10), as.raw(10), as.raw(10))^c(as.raw(10), as.raw(10),  :
  non-numeric argument to binary operator

##com.oracle.truffle.r.test.simple.TestSimpleValues.testComplex
#{ 1i }
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testDefaultVariables
#{ .Platform$endian }
[1] "little"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- (1:3)+0.1; f(x); x[1]
[1] 1.1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- 1:3; f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- 1; f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- 1L; f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- c(1, 2, 3); f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testFunctionCall
#f <- function(x) { x[1] = 2; }; x <- c(1L, 2L, 3L); f(x); x[1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testMatrixAccess
#x <- matrix(c(1,2,3,4),2) ; x[,2]
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testMatrixAccess
#x <- matrix(c(1,2,3,4),2) ; x[,]
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testMatrixAccess
#x <- matrix(c(1,2,3,4),2) ; x[2,]
[1] 2 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#"hello"
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#((0/0)+1i)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(-(0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(-(1/0))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(-0.0)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(0/0)
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(1+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(1/0)
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(1i+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#(3.4+NA)
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#1
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#1L
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#1i
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#3.4
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#FALSE
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#NULL
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#TRUE
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#as.raw(10)
[1] 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c("hello","hello","hello")
[1] "hello" "hello" "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(1,1,1)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(1L,1L,1L)
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(1i,1i,1i)
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(3.4,3.4,3.4)
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(FALSE,FALSE,FALSE)
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(NULL,NULL,NULL)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(TRUE,TRUE,TRUE)
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#c(as.raw(10),as.raw(10),as.raw(10))
[1] 0a 0a 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testPrintValues
#list(1, 2, 3)
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleValues.testSpecial
#{ Inf }
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testSpecial
#{ NA }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testSpecial
#{ NULL }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testSpecial
#{ NaN }
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testStrings
#{ "hello" }
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTranspose
#x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); dim(x) <- c(2L,5L); x <- t(x); dim(x) <- NULL; x
 [1]  1  3  5  7  9  2  4  6  8 10

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTranspose
#x <- c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L); dim(x) <- c(2L,5L); x <- t(x); dim(x) <- NULL; x
 [1]  1  3  5  7  9  2  4  6  8 10

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof("hello")
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(((0/0)+1i))
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((-(0/0)))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((-(1/0)))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((-0.0))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((0/0))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((1+NA))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((1/0))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((1i+NA))
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof((3.4+NA))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(1)
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(1L)
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(1i)
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(3.4)
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(FALSE)
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(NULL)
[1] "NULL"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(TRUE)
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(as.raw(10))
[1] "raw"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c("hello","hello","hello"))
[1] "character"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(1,1,1))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(1L,1L,1L))
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(1i,1i,1i))
[1] "complex"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(3.4,3.4,3.4))
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(FALSE,FALSE,FALSE))
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(NULL,NULL,NULL))
[1] "NULL"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(TRUE,TRUE,TRUE))
[1] "logical"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(c(as.raw(10),as.raw(10),as.raw(10)))
[1] "raw"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testTypeofValues
#typeof(list(1, 2, 3))
[1] "list"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs("hello")
Error in abs("hello") : non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(((0/0)+1i))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((-(0/0)))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((-(1/0)))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((-0.0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((1+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((1i+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs((3.4+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(1)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(1L)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(1i)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(3.4)
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(FALSE)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(NULL)
Error in abs(NULL) : non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(TRUE)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(as.raw(10))
Error in abs(as.raw(10)) : non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c("hello","hello","hello"))
Error in abs(c("hello", "hello", "hello")) :
  non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(1,1,1))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(1L,1L,1L))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(1i,1i,1i))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(3.4,3.4,3.4))
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(FALSE,FALSE,FALSE))
[1] 0 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(NULL,NULL,NULL))
Error in abs(c(NULL, NULL, NULL)) :
  non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(TRUE,TRUE,TRUE))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#abs(c(as.raw(10),as.raw(10),as.raw(10)))
Error in abs(c(as.raw(10), as.raw(10), as.raw(10))) :
  non-numeric argument to mathematical function

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length("hello")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(((0/0)+1i))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((-(0/0)))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((-(1/0)))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((-0.0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((0/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((1+NA))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((1/0))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((1i+NA))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length((3.4+NA))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(1)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(1L)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(1i)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(3.4)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(FALSE)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(NULL)
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(TRUE)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(as.raw(10))
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c("hello","hello","hello"))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(1,1,1))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(1L,1L,1L))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(1i,1i,1i))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(3.4,3.4,3.4))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(FALSE,FALSE,FALSE))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(NULL,NULL,NULL))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(TRUE,TRUE,TRUE))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#length(c(as.raw(10),as.raw(10),as.raw(10)))
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names("hello")
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(((0/0)+1i))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((-(0/0)))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((-(1/0)))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((-0.0))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((0/0))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((1+NA))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((1/0))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((1i+NA))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names((3.4+NA))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(1)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(1L)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(1i)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(3.4)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(FALSE)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(NULL)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(TRUE)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(as.raw(10))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c("hello","hello","hello"))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(1,1,1))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(1L,1L,1L))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(1i,1i,1i))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(3.4,3.4,3.4))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(FALSE,FALSE,FALSE))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(NULL,NULL,NULL))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(TRUE,TRUE,TRUE))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#names(c(as.raw(10),as.raw(10),as.raw(10)))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev("hello")
[1] "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(((0/0)+1i))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((-(0/0)))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((-(1/0)))
[1] -Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((-0.0))
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((0/0))
[1] NaN

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((1+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((1/0))
[1] Inf

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((1i+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev((3.4+NA))
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(1)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(1L)
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(1i)
[1] 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(3.4)
[1] 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(FALSE)
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(NULL)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(TRUE)
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(as.raw(10))
[1] 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c("hello","hello","hello"))
[1] "hello" "hello" "hello"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(1,1,1))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(1L,1L,1L))
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(1i,1i,1i))
[1] 0+1i 0+1i 0+1i

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(3.4,3.4,3.4))
[1] 3.4 3.4 3.4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(FALSE,FALSE,FALSE))
[1] FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(NULL,NULL,NULL))
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(TRUE,TRUE,TRUE))
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnaryBuiltings
#rev(c(as.raw(10),as.raw(10),as.raw(10)))
[1] 0a 0a 0a

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnlist
#x <- list(1, 2, 3); unlist(x);
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnlist
#x <- list(1, 2, NA); unlist(x);
[1]  1  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnlist
#x <- list(1, TRUE, 3); unlist(x);
[1] 1 1 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testUnlist
#x <- list(1L, 2L, 3L); unlist(x);
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[(1+NA)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[-10]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[-2]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[0]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[10]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[1:1]
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[2:4]
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[2]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[4:2]
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),-10)]
Error in x[c((1 + NA), (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),-2)]
Error in x[c((1 + NA), (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),(1+NA),2)]
[1] NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10)]
Error in x[c((1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,(1+NA))]
Error in x[c((1 + NA), -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,-10)]
Error in x[c((1 + NA), -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,-2)]
Error in x[c((1 + NA), -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,0)]
Error in x[c((1 + NA), -10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,10)]
Error in x[c((1 + NA), -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-10,2)]
Error in x[c((1 + NA), -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2)]
Error in x[c((1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,(1+NA))]
Error in x[c((1 + NA), -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,-10)]
Error in x[c((1 + NA), -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,-2)]
Error in x[c((1 + NA), -2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,0)]
Error in x[c((1 + NA), -2, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,10)]
Error in x[c((1 + NA), -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),-2,2)]
Error in x[c((1 + NA), -2, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,-10)]
Error in x[c((1 + NA), 0, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,-2)]
Error in x[c((1 + NA), 0, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),0,2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,-10)]
Error in x[c((1 + NA), 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,-2)]
Error in x[c((1 + NA), 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),10,2)]
[1] NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,(1+NA))]
[1] NA  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,-10)]
Error in x[c((1 + NA), 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,-2)]
Error in x[c((1 + NA), 2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,0)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,10)]
[1] NA  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c((1+NA),2,2)]
[1] NA  1  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA))]
Error in x[c(-10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),(1+NA))]
Error in x[c(-10, (1 + NA), (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),-10)]
Error in x[c(-10, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),-2)]
Error in x[c(-10, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),0)]
Error in x[c(-10, (1 + NA), 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),10)]
Error in x[c(-10, (1 + NA), 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,(1+NA),2)]
Error in x[c(-10, (1 + NA), 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,(1+NA))]
Error in x[c(-10, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,0)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,10)]
Error in x[c(-10, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-10,2)]
Error in x[c(-10, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,(1+NA))]
Error in x[c(-10, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,10)]
Error in x[c(-10, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,-2,2)]
Error in x[c(-10, -2, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,(1+NA))]
Error in x[c(-10, 0, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,0)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,10)]
Error in x[c(-10, 0, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,0,2)]
Error in x[c(-10, 0, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10)]
Error in x[c(-10, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,(1+NA))]
Error in x[c(-10, 10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,-10)]
Error in x[c(-10, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,-2)]
Error in x[c(-10, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,0)]
Error in x[c(-10, 10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,10)]
Error in x[c(-10, 10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,10,2)]
Error in x[c(-10, 10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2)]
Error in x[c(-10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,(1+NA))]
Error in x[c(-10, 2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,-10)]
Error in x[c(-10, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,-2)]
Error in x[c(-10, 2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,0)]
Error in x[c(-10, 2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,10)]
Error in x[c(-10, 2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-10,2,2)]
Error in x[c(-10, 2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA))]
Error in x[c(-2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),(1+NA))]
Error in x[c(-2, (1 + NA), (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),-10)]
Error in x[c(-2, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),-2)]
Error in x[c(-2, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),0)]
Error in x[c(-2, (1 + NA), 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),10)]
Error in x[c(-2, (1 + NA), 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,(1+NA),2)]
Error in x[c(-2, (1 + NA), 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,(1+NA))]
Error in x[c(-2, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,10)]
Error in x[c(-2, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-10,2)]
Error in x[c(-2, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,(1+NA))]
Error in x[c(-2, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,10)]
Error in x[c(-2, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,-2,2)]
Error in x[c(-2, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,(1+NA))]
Error in x[c(-2, 0, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,10)]
Error in x[c(-2, 0, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,0,2)]
Error in x[c(-2, 0, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10)]
Error in x[c(-2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,(1+NA))]
Error in x[c(-2, 10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,-10)]
Error in x[c(-2, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,-2)]
Error in x[c(-2, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,0)]
Error in x[c(-2, 10, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,10)]
Error in x[c(-2, 10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,10,2)]
Error in x[c(-2, 10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2)]
Error in x[c(-2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,(1+NA))]
Error in x[c(-2, 2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,-10)]
Error in x[c(-2, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,-2)]
Error in x[c(-2, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,0)]
Error in x[c(-2, 2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,10)]
Error in x[c(-2, 2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(-2,2,2)]
Error in x[c(-2, 2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA))]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),-10)]
Error in x[c(0, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),-2)]
Error in x[c(0, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,(1+NA),2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,(1+NA))]
Error in x[c(0, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,0)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,10)]
Error in x[c(0, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-10,2)]
Error in x[c(0, -10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,(1+NA))]
Error in x[c(0, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,-10)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,0)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,10)]
Error in x[c(0, -2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,-2,2)]
Error in x[c(0, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0)]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,(1+NA))]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,-10)]
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,-2)]
[1] 0 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,0)]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,10)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,0,2)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,-10)]
Error in x[c(0, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,-2)]
Error in x[c(0, 10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,10,2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,(1+NA))]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,-10)]
Error in x[c(0, 2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,-2)]
Error in x[c(0, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,0)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,10)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(0,2,2)]
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),-10)]
Error in x[c(10, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),-2)]
Error in x[c(10, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,(1+NA),2)]
[1] NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10)]
Error in x[c(10, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,(1+NA))]
Error in x[c(10, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,-10)]
Error in x[c(10, -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,-2)]
Error in x[c(10, -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,0)]
Error in x[c(10, -10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,10)]
Error in x[c(10, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-10,2)]
Error in x[c(10, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2)]
Error in x[c(10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,(1+NA))]
Error in x[c(10, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,-10)]
Error in x[c(10, -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,-2)]
Error in x[c(10, -2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,0)]
Error in x[c(10, -2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,10)]
Error in x[c(10, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,-2,2)]
Error in x[c(10, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,-10)]
Error in x[c(10, 0, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,-2)]
Error in x[c(10, 0, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,0,2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,-10)]
Error in x[c(10, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,-2)]
Error in x[c(10, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,10,2)]
[1] NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,(1+NA))]
[1] NA  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,-10)]
Error in x[c(10, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,-2)]
Error in x[c(10, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,0)]
[1] NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,10)]
[1] NA  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(10,2,2)]
[1] NA  1  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA))]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),(1+NA))]
[1]  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),-10)]
Error in x[c(2, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),-2)]
Error in x[c(2, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),0)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),10)]
[1]  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,(1+NA),2)]
[1]  1 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10)]
Error in x[c(2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,(1+NA))]
Error in x[c(2, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,-10)]
Error in x[c(2, -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,-2)]
Error in x[c(2, -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,0)]
Error in x[c(2, -10, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,10)]
Error in x[c(2, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-10,2)]
Error in x[c(2, -10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2)]
Error in x[c(2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,(1+NA))]
Error in x[c(2, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,-10)]
Error in x[c(2, -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,-2)]
Error in x[c(2, -2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,0)]
Error in x[c(2, -2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,10)]
Error in x[c(2, -2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,-2,2)]
Error in x[c(2, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,(1+NA))]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,-10)]
Error in x[c(2, 0, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,-2)]
Error in x[c(2, 0, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,0)]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,10)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,0,2)]
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,(1+NA))]
[1]  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,-10)]
Error in x[c(2, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,-2)]
Error in x[c(2, 10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,0)]
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,10)]
[1]  1 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,10,2)]
[1]  1 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2)]
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,(1+NA))]
[1]  1  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,-10)]
Error in x[c(2, 2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,-2)]
Error in x[c(2, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,0)]
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,10)]
[1]  1  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- (0:4); x[c(2,2,2)]
[1] 1 1 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[(1+NA)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[-10]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[-2]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[0]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[10]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[1:1]
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[2:4]
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[2]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[4:2]
[1] 4 3 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-10)]
Error in x[c((1 + NA), (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-2)]
Error in x[c((1 + NA), (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),2)]
[1] NA NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10)]
Error in x[c((1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,(1+NA))]
Error in x[c((1 + NA), -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-10)]
Error in x[c((1 + NA), -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-2)]
Error in x[c((1 + NA), -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,0)]
Error in x[c((1 + NA), -10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,10)]
Error in x[c((1 + NA), -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,2)]
Error in x[c((1 + NA), -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2)]
Error in x[c((1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,(1+NA))]
Error in x[c((1 + NA), -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-10)]
Error in x[c((1 + NA), -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-2)]
Error in x[c((1 + NA), -2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,0)]
Error in x[c((1 + NA), -2, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,10)]
Error in x[c((1 + NA), -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,2)]
Error in x[c((1 + NA), -2, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-10)]
Error in x[c((1 + NA), 0, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-2)]
Error in x[c((1 + NA), 0, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-10)]
Error in x[c((1 + NA), 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-2)]
Error in x[c((1 + NA), 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,2)]
[1] NA NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,(1+NA))]
[1] NA  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-10)]
Error in x[c((1 + NA), 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-2)]
Error in x[c((1 + NA), 2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,0)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,10)]
[1] NA  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,2)]
[1] NA  2  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA))]
Error in x[c(-10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),(1+NA))]
Error in x[c(-10, (1 + NA), (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-10)]
Error in x[c(-10, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-2)]
Error in x[c(-10, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),0)]
Error in x[c(-10, (1 + NA), 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),10)]
Error in x[c(-10, (1 + NA), 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),2)]
Error in x[c(-10, (1 + NA), 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,(1+NA))]
Error in x[c(-10, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,0)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,10)]
Error in x[c(-10, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,2)]
Error in x[c(-10, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,(1+NA))]
Error in x[c(-10, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,10)]
Error in x[c(-10, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,2)]
Error in x[c(-10, -2, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,(1+NA))]
Error in x[c(-10, 0, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,0)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,10)]
Error in x[c(-10, 0, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,2)]
Error in x[c(-10, 0, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10)]
Error in x[c(-10, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,(1+NA))]
Error in x[c(-10, 10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-10)]
Error in x[c(-10, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-2)]
Error in x[c(-10, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,0)]
Error in x[c(-10, 10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,10)]
Error in x[c(-10, 10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,2)]
Error in x[c(-10, 10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2)]
Error in x[c(-10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,(1+NA))]
Error in x[c(-10, 2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-10)]
Error in x[c(-10, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-2)]
Error in x[c(-10, 2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,0)]
Error in x[c(-10, 2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,10)]
Error in x[c(-10, 2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,2)]
Error in x[c(-10, 2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA))]
Error in x[c(-2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),(1+NA))]
Error in x[c(-2, (1 + NA), (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-10)]
Error in x[c(-2, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-2)]
Error in x[c(-2, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),0)]
Error in x[c(-2, (1 + NA), 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),10)]
Error in x[c(-2, (1 + NA), 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),2)]
Error in x[c(-2, (1 + NA), 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,(1+NA))]
Error in x[c(-2, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,10)]
Error in x[c(-2, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,2)]
Error in x[c(-2, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,(1+NA))]
Error in x[c(-2, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,10)]
Error in x[c(-2, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,2)]
Error in x[c(-2, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,(1+NA))]
Error in x[c(-2, 0, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,10)]
Error in x[c(-2, 0, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,2)]
Error in x[c(-2, 0, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10)]
Error in x[c(-2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,(1+NA))]
Error in x[c(-2, 10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-10)]
Error in x[c(-2, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-2)]
Error in x[c(-2, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,0)]
Error in x[c(-2, 10, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,10)]
Error in x[c(-2, 10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,2)]
Error in x[c(-2, 10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2)]
Error in x[c(-2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,(1+NA))]
Error in x[c(-2, 2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-10)]
Error in x[c(-2, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-2)]
Error in x[c(-2, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,0)]
Error in x[c(-2, 2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,10)]
Error in x[c(-2, 2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,2)]
Error in x[c(-2, 2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA))]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-10)]
Error in x[c(0, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-2)]
Error in x[c(0, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,(1+NA))]
Error in x[c(0, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,0)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,10)]
Error in x[c(0, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,2)]
Error in x[c(0, -10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,(1+NA))]
Error in x[c(0, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-10)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,0)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,10)]
Error in x[c(0, -2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,2)]
Error in x[c(0, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0)]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,(1+NA))]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-10)]
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-2)]
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,0)]
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,10)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,2)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-10)]
Error in x[c(0, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-2)]
Error in x[c(0, 10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,(1+NA))]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-10)]
Error in x[c(0, 2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-2)]
Error in x[c(0, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,0)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,10)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,2)]
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-10)]
Error in x[c(10, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-2)]
Error in x[c(10, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),2)]
[1] NA NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10)]
Error in x[c(10, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,(1+NA))]
Error in x[c(10, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-10)]
Error in x[c(10, -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-2)]
Error in x[c(10, -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,0)]
Error in x[c(10, -10, 0)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,10)]
Error in x[c(10, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,2)]
Error in x[c(10, -10, 2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2)]
Error in x[c(10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,(1+NA))]
Error in x[c(10, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-10)]
Error in x[c(10, -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-2)]
Error in x[c(10, -2, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,0)]
Error in x[c(10, -2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,10)]
Error in x[c(10, -2, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,2)]
Error in x[c(10, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,(1+NA))]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-10)]
Error in x[c(10, 0, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-2)]
Error in x[c(10, 0, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,0)]
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,(1+NA))]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-10)]
Error in x[c(10, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-2)]
Error in x[c(10, 10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,0)]
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,10)]
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,2)]
[1] NA NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,(1+NA))]
[1] NA  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-10)]
Error in x[c(10, 2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-2)]
Error in x[c(10, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,0)]
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,10)]
[1] NA  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,2)]
[1] NA  2  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA))]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),(1+NA))]
[1]  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-10)]
Error in x[c(2, (1 + NA), -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-2)]
Error in x[c(2, (1 + NA), -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),0)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),10)]
[1]  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),2)]
[1]  2 NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10)]
Error in x[c(2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,(1+NA))]
Error in x[c(2, -10, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-10)]
Error in x[c(2, -10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-2)]
Error in x[c(2, -10, -2)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,0)]
Error in x[c(2, -10, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,10)]
Error in x[c(2, -10, 10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,2)]
Error in x[c(2, -10, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2)]
Error in x[c(2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,(1+NA))]
Error in x[c(2, -2, (1 + NA))] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-10)]
Error in x[c(2, -2, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-2)]
Error in x[c(2, -2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,0)]
Error in x[c(2, -2, 0)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,10)]
Error in x[c(2, -2, 10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,2)]
Error in x[c(2, -2, 2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,(1+NA))]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-10)]
Error in x[c(2, 0, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-2)]
Error in x[c(2, 0, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,0)]
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,10)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,2)]
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,(1+NA))]
[1]  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-10)]
Error in x[c(2, 10, -10)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-2)]
Error in x[c(2, 10, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,0)]
[1]  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,10)]
[1]  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,2)]
[1]  2 NA  2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2)]
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,(1+NA))]
[1]  2  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-10)]
Error in x[c(2, 2, -10)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-2)]
Error in x[c(2, 2, -2)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,0)]
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,10)]
[1]  2  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorAccess
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,2)]
[1] 2 2 2

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 9" "7, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a <- b;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "7, 8, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "7, 8, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[1] <- 7;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 5, 6" "7, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 5, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 5, 6" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 5, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); a[3] <- 9;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 8, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a + 0;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 8, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b <- a;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 8, 6" "7, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 8, 6" "7, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a <- b;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;a <- b; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[1] <- 7;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 9" "7, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;a[3] <- 9;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a + 0;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "1, 8, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b <- a;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;a[3] <- 9; c(toString(a),toString(b))
[1] "4, 8, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;b <- a + 0; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;b <- a; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a <- b;b[2] <- 8; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;a[3] <- 9; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;b <- a + 0; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;b <- a; c(toString(a),toString(b))
[1] "7, 2, 3" "7, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[1] <- 7;b[2] <- 8; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;b <- a; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 9"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;a[3] <- 9;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a + 0;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;a <- b; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b <- a;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 8, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;a <- b; c(toString(a),toString(b))
[1] "4, 8, 6" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;a[1] <- 7; c(toString(a),toString(b))
[1] "7, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;a[3] <- 9; c(toString(a),toString(b))
[1] "1, 2, 9" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;b <- a + 0; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;b <- a; c(toString(a),toString(b))
[1] "1, 2, 3" "1, 2, 3"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorCopySemantics
#a <- c(1, 2, 3); b <- c(4, 5, 6); b[2] <- 8;b[2] <- 8;b[2] <- 8;b[2] <- 8; c(toString(a),toString(b))
[1] "1, 2, 3" "4, 8, 6"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; codes <- c("A", "C", "G"); complements <- c("T", "G", "C"); x[codes] <- complements; as.vector(x);
[1] "T" "G" "C"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; codes <- c("A", "C", "G"); complements <- c("T", "G", "C"); x[codes] <- complements; names(x);
[1] "A" "C" "G"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; codes <- c("A", "C", "G"); complements <- c("T", "G", "C"); x[codes] <- complements; x[tolower(codes)] <- complements; as.vector(x);
[1] "T" "G" "C" "T" "G" "C"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; codes <- c("A", "C", "G"); complements <- c("T", "G", "C"); x[codes] <- complements; x[tolower(codes)] <- complements; names(x);
[1] "A" "C" "G" "a" "c" "g"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; names(x)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "A", "B")] <- "x"; as.vector(x["A"])
[1] "x"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "A", "B")] <- "x"; names(x["A"])
[1] "A"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "A", "B")] <- 1; names(x)
[1] "A" "B"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "B", "C")] <- c("x", "y", "z"); as.vector(x["B"])
[1] "y"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#x <- NULL; x[c("A", "B", "C")] <- c("x", "y", "z"); as.vector(x["C"])
[1] "z"

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorStringAccess
#y <- NULL; y[c("A", "A", "B")] <- 1; y <- NULL; names(y)
NULL

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#v <- double(5) ; v[[3]] <- c(1) ; v
[1] 0 0 1 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#v <- double(5) ; v[[3]] <- matrix(c(1)) ; v
[1] 0 0 1 0 0

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[1:1] <- c(200L,300L); x
Warning message:
In x[1:1] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200   1   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[1:1] <- c(400L,500L,600L); x
Warning message:
In x[1:1] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[2:4] <- c(200L,300L); x
Warning message:
In x[2:4] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200 300 200   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[2:4] <- c(400L,500L,600L); x
[1]   0 400 500 600   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[4:2] <- c(200L,300L); x
Warning message:
In x[4:2] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200 300 200   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[4:2] <- c(400L,500L,600L); x
[1]   0 600 500 400   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),-10)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),-2)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),0)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),10)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),2)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,0)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,10)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,2)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-10,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,0)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,10)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,2)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),-2,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),0,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),10,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c((1+NA),2,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),0)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),10)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),2)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,-10)] <- c(200L,300L); x
Warning message:
In x[c(-10, -10, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,0)] <- c(200L,300L); x
Warning message:
In x[c(-10, -10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,10)] <- c(200L,300L); x
Error in x[c(-10, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,10)] <- c(400L,500L,600L); x
Error in x[c(-10, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,2)] <- c(200L,300L); x
Error in x[c(-10, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-10,2)] <- c(400L,500L,600L); x
Error in x[c(-10, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,10)] <- c(200L,300L); x
Error in x[c(-10, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,10)] <- c(400L,500L,600L); x
Error in x[c(-10, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,2)] <- c(200L,300L); x
Error in x[c(-10, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,-2,2)] <- c(400L,500L,600L); x
Error in x[c(-10, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 0, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,-10)] <- c(200L,300L); x
Warning message:
In x[c(-10, 0, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,0)] <- c(200L,300L); x
Warning message:
In x[c(-10, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,10)] <- c(200L,300L); x
Error in x[c(-10, 0, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 0, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,2)] <- c(200L,300L); x
Error in x[c(-10, 0, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,0,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 0, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,-10)] <- c(200L,300L); x
Error in x[c(-10, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,-10)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,-2)] <- c(200L,300L); x
Error in x[c(-10, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,-2)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,0)] <- c(200L,300L); x
Error in x[c(-10, 10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,0)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,10)] <- c(200L,300L); x
Error in x[c(-10, 10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,2)] <- c(200L,300L); x
Error in x[c(-10, 10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,10,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,-10)] <- c(200L,300L); x
Error in x[c(-10, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,-10)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,-2)] <- c(200L,300L); x
Error in x[c(-10, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,-2)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,0)] <- c(200L,300L); x
Error in x[c(-10, 2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,0)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,10)] <- c(200L,300L); x
Error in x[c(-10, 2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,2)] <- c(200L,300L); x
Error in x[c(-10, 2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-10,2,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),0)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),10)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),2)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,10)] <- c(200L,300L); x
Error in x[c(-2, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,10)] <- c(400L,500L,600L); x
Error in x[c(-2, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,2)] <- c(200L,300L); x
Error in x[c(-2, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-10,2)] <- c(400L,500L,600L); x
Error in x[c(-2, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,10)] <- c(200L,300L); x
Error in x[c(-2, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,10)] <- c(400L,500L,600L); x
Error in x[c(-2, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,2)] <- c(200L,300L); x
Error in x[c(-2, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,-2,2)] <- c(400L,500L,600L); x
Error in x[c(-2, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 0, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,10)] <- c(200L,300L); x
Error in x[c(-2, 0, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 0, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,2)] <- c(200L,300L); x
Error in x[c(-2, 0, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,0,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 0, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,-10)] <- c(200L,300L); x
Error in x[c(-2, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,-10)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,-2)] <- c(200L,300L); x
Error in x[c(-2, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,-2)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,0)] <- c(200L,300L); x
Error in x[c(-2, 10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,0)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,10)] <- c(200L,300L); x
Error in x[c(-2, 10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,2)] <- c(200L,300L); x
Error in x[c(-2, 10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,10,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,-10)] <- c(200L,300L); x
Error in x[c(-2, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,-10)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,-2)] <- c(200L,300L); x
Error in x[c(-2, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,-2)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,0)] <- c(200L,300L); x
Error in x[c(-2, 2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,0)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,10)] <- c(200L,300L); x
Error in x[c(-2, 2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,2)] <- c(200L,300L); x
Error in x[c(-2, 2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(-2,2,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(0, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),0)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),10)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),2)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(0, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,-10)] <- c(200L,300L); x
Warning message:
In x[c(0, -10, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,0)] <- c(200L,300L); x
Warning message:
In x[c(0, -10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,10)] <- c(200L,300L); x
Error in x[c(0, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,10)] <- c(400L,500L,600L); x
Error in x[c(0, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,2)] <- c(200L,300L); x
Error in x[c(0, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-10,2)] <- c(400L,500L,600L); x
Error in x[c(0, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(0, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,-10)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,0)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,10)] <- c(200L,300L); x
Error in x[c(0, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,10)] <- c(400L,500L,600L); x
Error in x[c(0, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,2)] <- c(200L,300L); x
Error in x[c(0, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,-2,2)] <- c(400L,500L,600L); x
Error in x[c(0, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,-10)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,-2)] <- c(200L,300L); x
[1] 200   1 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   1 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,0)] <- c(200L,300L); x
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,0)] <- c(400L,500L,600L); x
[1] 0 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,10)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,2)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 400   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,-10)] <- c(200L,300L); x
Error in x[c(0, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,-10)] <- c(400L,500L,600L); x
Error in x[c(0, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,-2)] <- c(200L,300L); x
Error in x[c(0, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,-2)] <- c(400L,500L,600L); x
Error in x[c(0, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,0)] <- c(200L,300L); x
Warning message:
In x[c(0, 10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,10)] <- c(200L,300L); x
 [1]   0   1   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,2)] <- c(200L,300L); x
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,10,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 500   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,-10)] <- c(200L,300L); x
Error in x[c(0, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,-10)] <- c(400L,500L,600L); x
Error in x[c(0, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,-2)] <- c(200L,300L); x
Error in x[c(0, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,-2)] <- c(400L,500L,600L); x
Error in x[c(0, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,0)] <- c(200L,300L); x
Warning message:
In x[c(0, 2, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 400   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,10)] <- c(200L,300L); x
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 400   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,2)] <- c(200L,300L); x
[1]   0 300   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(0,2,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 500   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(10, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),0)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),10)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),2)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(10, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,-10)] <- c(200L,300L); x
Error in x[c(10, -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,-10)] <- c(400L,500L,600L); x
Error in x[c(10, -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,-2)] <- c(200L,300L); x
Error in x[c(10, -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,-2)] <- c(400L,500L,600L); x
Error in x[c(10, -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,0)] <- c(200L,300L); x
Error in x[c(10, -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,0)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,10)] <- c(200L,300L); x
Error in x[c(10, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,10)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,2)] <- c(200L,300L); x
Error in x[c(10, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-10,2)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(10, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,-10)] <- c(200L,300L); x
Error in x[c(10, -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,-10)] <- c(400L,500L,600L); x
Error in x[c(10, -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,-2)] <- c(200L,300L); x
Error in x[c(10, -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,-2)] <- c(400L,500L,600L); x
Error in x[c(10, -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,0)] <- c(200L,300L); x
Error in x[c(10, -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,0)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,10)] <- c(200L,300L); x
Error in x[c(10, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,10)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,2)] <- c(200L,300L); x
Error in x[c(10, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,-2,2)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,-10)] <- c(200L,300L); x
Error in x[c(10, 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,-2)] <- c(200L,300L); x
Error in x[c(10, 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,0)] <- c(200L,300L); x
Warning message:
In x[c(10, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,10)] <- c(200L,300L); x
 [1]   0   1   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,2)] <- c(200L,300L); x
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 500   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,-10)] <- c(200L,300L); x
Error in x[c(10, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,-2)] <- c(200L,300L); x
Error in x[c(10, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,0)] <- c(200L,300L); x
 [1]   0   1   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,10)] <- c(200L,300L); x
Warning message:
In x[c(10, 10, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0   1   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,10)] <- c(400L,500L,600L); x
 [1]   0   1   2   3   4  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,2)] <- c(200L,300L); x
Warning message:
In x[c(10, 10, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,10,2)] <- c(400L,500L,600L); x
 [1]   0 600   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,-10)] <- c(200L,300L); x
Error in x[c(10, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,-2)] <- c(200L,300L); x
Error in x[c(10, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,0)] <- c(200L,300L); x
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 500   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,10)] <- c(200L,300L); x
Warning message:
In x[c(10, 2, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,10)] <- c(400L,500L,600L); x
 [1]   0 500   2   3   4  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,2)] <- c(200L,300L); x
Warning message:
In x[c(10, 2, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 200   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(10,2,2)] <- c(400L,500L,600L); x
 [1]   0 600   2   3   4  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(2, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),0)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),10)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),2)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(2, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,-10)] <- c(200L,300L); x
Error in x[c(2, -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,-10)] <- c(400L,500L,600L); x
Error in x[c(2, -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,-2)] <- c(200L,300L); x
Error in x[c(2, -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,-2)] <- c(400L,500L,600L); x
Error in x[c(2, -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,0)] <- c(200L,300L); x
Error in x[c(2, -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,0)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,10)] <- c(200L,300L); x
Error in x[c(2, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,10)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,2)] <- c(200L,300L); x
Error in x[c(2, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-10,2)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(2, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,-10)] <- c(200L,300L); x
Error in x[c(2, -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,-10)] <- c(400L,500L,600L); x
Error in x[c(2, -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,-2)] <- c(200L,300L); x
Error in x[c(2, -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,-2)] <- c(400L,500L,600L); x
Error in x[c(2, -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,0)] <- c(200L,300L); x
Error in x[c(2, -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,0)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,10)] <- c(200L,300L); x
Error in x[c(2, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,10)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,2)] <- c(200L,300L); x
Error in x[c(2, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,-2,2)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,-10)] <- c(200L,300L); x
Error in x[c(2, 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,-2)] <- c(200L,300L); x
Error in x[c(2, 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,0)] <- c(200L,300L); x
Warning message:
In x[c(2, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 400   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,10)] <- c(200L,300L); x
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 400   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,2)] <- c(200L,300L); x
[1]   0 300   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 500   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,-10)] <- c(200L,300L); x
Error in x[c(2, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,-2)] <- c(200L,300L); x
Error in x[c(2, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,0)] <- c(200L,300L); x
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 400   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,10)] <- c(200L,300L); x
Warning message:
In x[c(2, 10, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 200   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,10)] <- c(400L,500L,600L); x
 [1]   0 400   2   3   4  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,2)] <- c(200L,300L); x
Warning message:
In x[c(2, 10, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 200   2   3   4  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,10,2)] <- c(400L,500L,600L); x
 [1]   0 600   2   3   4  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,-10)] <- c(200L,300L); x
Error in x[c(2, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,-2)] <- c(200L,300L); x
Error in x[c(2, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,0)] <- c(200L,300L); x
[1]   0 300   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   0 500   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,10)] <- c(200L,300L); x
Warning message:
In x[c(2, 2, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   0 300   2   3   4  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,10)] <- c(400L,500L,600L); x
 [1]   0 500   2   3   4  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,2)] <- c(200L,300L); x
Warning message:
In x[c(2, 2, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   0 200   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- (0:4); x[c(2,2,2)] <- c(400L,500L,600L); x
[1]   0 600   2   3   4

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- 1:10; for (i in 1:2) { x[[1]] <- x[[1]]; x <- c(1, 2, 3) }; x
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1, 2, 3); y <- x; x[1] <- 100; y;
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[1:1] <- c(200L,300L); x
Warning message:
In x[1:1] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200   2   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[1:1] <- c(400L,500L,600L); x
Warning message:
In x[1:1] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[2:4] <- c(200L,300L); x
Warning message:
In x[2:4] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200 300 200   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[2:4] <- c(400L,500L,600L); x
[1]   1 400 500 600   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[4:2] <- c(200L,300L); x
Warning message:
In x[4:2] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200 300 200   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[4:2] <- c(400L,500L,600L); x
[1]   1 600 500 400   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-10)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-2)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),0)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),10)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),2)] <- c(200L,300L); x
Error in x[c((1 + NA), (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,0)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,10)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,2)] <- c(200L,300L); x
Error in x[c((1 + NA), -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-10,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,0)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,10)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,2)] <- c(200L,300L); x
Error in x[c((1 + NA), -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),-2,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 0, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),0,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 0, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 10, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),10,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 10, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,(1+NA))] <- c(200L,300L); x
Error in x[c((1 + NA), 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-10)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-2)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,-2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,0)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,0)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,10)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,10)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,2)] <- c(200L,300L); x
Error in x[c((1 + NA), 2, 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c((1+NA),2,2)] <- c(400L,500L,600L); x
Error in x[c((1 + NA), 2, 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),0)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),10)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),2)] <- c(200L,300L); x
Error in x[c(-10, (1 + NA), 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(-10, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-10)] <- c(200L,300L); x
Warning message:
In x[c(-10, -10, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,0)] <- c(200L,300L); x
Warning message:
In x[c(-10, -10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,10)] <- c(200L,300L); x
Error in x[c(-10, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,10)] <- c(400L,500L,600L); x
Error in x[c(-10, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,2)] <- c(200L,300L); x
Error in x[c(-10, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-10,2)] <- c(400L,500L,600L); x
Error in x[c(-10, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,10)] <- c(200L,300L); x
Error in x[c(-10, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,10)] <- c(400L,500L,600L); x
Error in x[c(-10, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,2)] <- c(200L,300L); x
Error in x[c(-10, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,-2,2)] <- c(400L,500L,600L); x
Error in x[c(-10, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 0, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-10)] <- c(200L,300L); x
Warning message:
In x[c(-10, 0, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,0)] <- c(200L,300L); x
Warning message:
In x[c(-10, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-10, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,10)] <- c(200L,300L); x
Error in x[c(-10, 0, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 0, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,2)] <- c(200L,300L); x
Error in x[c(-10, 0, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,0,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 0, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-10)] <- c(200L,300L); x
Error in x[c(-10, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-10)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-2)] <- c(200L,300L); x
Error in x[c(-10, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,-2)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,0)] <- c(200L,300L); x
Error in x[c(-10, 10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,0)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,10)] <- c(200L,300L); x
Error in x[c(-10, 10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,2)] <- c(200L,300L); x
Error in x[c(-10, 10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,10,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,(1+NA))] <- c(200L,300L); x
Error in x[c(-10, 2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-10, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-10)] <- c(200L,300L); x
Error in x[c(-10, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-10)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-2)] <- c(200L,300L); x
Error in x[c(-10, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,-2)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,0)] <- c(200L,300L); x
Error in x[c(-10, 2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,0)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,10)] <- c(200L,300L); x
Error in x[c(-10, 2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,10)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,2)] <- c(200L,300L); x
Error in x[c(-10, 2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-10,2,2)] <- c(400L,500L,600L); x
Error in x[c(-10, 2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),0)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),10)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),2)] <- c(200L,300L); x
Error in x[c(-2, (1 + NA), 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(-2, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,10)] <- c(200L,300L); x
Error in x[c(-2, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,10)] <- c(400L,500L,600L); x
Error in x[c(-2, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,2)] <- c(200L,300L); x
Error in x[c(-2, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-10,2)] <- c(400L,500L,600L); x
Error in x[c(-2, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,10)] <- c(200L,300L); x
Error in x[c(-2, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,10)] <- c(400L,500L,600L); x
Error in x[c(-2, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,2)] <- c(200L,300L); x
Error in x[c(-2, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,-2,2)] <- c(400L,500L,600L); x
Error in x[c(-2, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 0, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(-2, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,10)] <- c(200L,300L); x
Error in x[c(-2, 0, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 0, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,2)] <- c(200L,300L); x
Error in x[c(-2, 0, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,0,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 0, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-10)] <- c(200L,300L); x
Error in x[c(-2, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-10)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-2)] <- c(200L,300L); x
Error in x[c(-2, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,-2)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,0)] <- c(200L,300L); x
Error in x[c(-2, 10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,0)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,10)] <- c(200L,300L); x
Error in x[c(-2, 10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,2)] <- c(200L,300L); x
Error in x[c(-2, 10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,10,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,(1+NA))] <- c(200L,300L); x
Error in x[c(-2, 2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(-2, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-10)] <- c(200L,300L); x
Error in x[c(-2, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-10)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-2)] <- c(200L,300L); x
Error in x[c(-2, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,-2)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,0)] <- c(200L,300L); x
Error in x[c(-2, 2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,0)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,10)] <- c(200L,300L); x
Error in x[c(-2, 2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,10)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,2)] <- c(200L,300L); x
Error in x[c(-2, 2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(-2,2,2)] <- c(400L,500L,600L); x
Error in x[c(-2, 2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(0, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),0)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),10)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),2)] <- c(200L,300L); x
Error in x[c(0, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(0, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(0, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-10)] <- c(200L,300L); x
Warning message:
In x[c(0, -10, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,0)] <- c(200L,300L); x
Warning message:
In x[c(0, -10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,10)] <- c(200L,300L); x
Error in x[c(0, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,10)] <- c(400L,500L,600L); x
Error in x[c(0, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,2)] <- c(200L,300L); x
Error in x[c(0, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-10,2)] <- c(400L,500L,600L); x
Error in x[c(0, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(0, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-10)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,0)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, -2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,10)] <- c(200L,300L); x
Error in x[c(0, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,10)] <- c(400L,500L,600L); x
Error in x[c(0, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,2)] <- c(200L,300L); x
Error in x[c(0, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,-2,2)] <- c(400L,500L,600L); x
Error in x[c(0, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-10)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, -10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1] 200 300 200 300 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, -10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400 500 600 400 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-2)] <- c(200L,300L); x
[1] 200   2 300 200 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,-2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, -2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1] 400   2 500 600 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,0)] <- c(200L,300L); x
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,0)] <- c(400L,500L,600L); x
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,10)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,2)] <- c(200L,300L); x
Warning message:
In x[c(0, 0, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 400   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-10)] <- c(200L,300L); x
Error in x[c(0, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-10)] <- c(400L,500L,600L); x
Error in x[c(0, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-2)] <- c(200L,300L); x
Error in x[c(0, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,-2)] <- c(400L,500L,600L); x
Error in x[c(0, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,0)] <- c(200L,300L); x
Warning message:
In x[c(0, 10, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,10)] <- c(200L,300L); x
 [1]   1   2   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,2)] <- c(200L,300L); x
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,10,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 10, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 500   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,(1+NA))] <- c(200L,300L); x
Error in x[c(0, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(0, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-10)] <- c(200L,300L); x
Error in x[c(0, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-10)] <- c(400L,500L,600L); x
Error in x[c(0, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-2)] <- c(200L,300L); x
Error in x[c(0, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,-2)] <- c(400L,500L,600L); x
Error in x[c(0, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,0)] <- c(200L,300L); x
Warning message:
In x[c(0, 2, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 400   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,10)] <- c(200L,300L); x
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 400   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,2)] <- c(200L,300L); x
[1]   1 300   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(0,2,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(0, 2, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 500   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(10, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),0)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),10)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),2)] <- c(200L,300L); x
Error in x[c(10, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(10, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(10, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-10)] <- c(200L,300L); x
Error in x[c(10, -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-10)] <- c(400L,500L,600L); x
Error in x[c(10, -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-2)] <- c(200L,300L); x
Error in x[c(10, -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,-2)] <- c(400L,500L,600L); x
Error in x[c(10, -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,0)] <- c(200L,300L); x
Error in x[c(10, -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,0)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,10)] <- c(200L,300L); x
Error in x[c(10, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,10)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,2)] <- c(200L,300L); x
Error in x[c(10, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-10,2)] <- c(400L,500L,600L); x
Error in x[c(10, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(10, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-10)] <- c(200L,300L); x
Error in x[c(10, -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-10)] <- c(400L,500L,600L); x
Error in x[c(10, -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-2)] <- c(200L,300L); x
Error in x[c(10, -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,-2)] <- c(400L,500L,600L); x
Error in x[c(10, -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,0)] <- c(200L,300L); x
Error in x[c(10, -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,0)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,10)] <- c(200L,300L); x
Error in x[c(10, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,10)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,2)] <- c(200L,300L); x
Error in x[c(10, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,-2,2)] <- c(400L,500L,600L); x
Error in x[c(10, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-10)] <- c(200L,300L); x
Error in x[c(10, 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-2)] <- c(200L,300L); x
Error in x[c(10, 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,0)] <- c(200L,300L); x
Warning message:
In x[c(10, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,10)] <- c(200L,300L); x
 [1]   1   2   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,2)] <- c(200L,300L); x
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 500   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-10)] <- c(200L,300L); x
Error in x[c(10, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-2)] <- c(200L,300L); x
Error in x[c(10, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,0)] <- c(200L,300L); x
 [1]   1   2   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,10)] <- c(200L,300L); x
Warning message:
In x[c(10, 10, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1   2   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,10)] <- c(400L,500L,600L); x
 [1]   1   2   3   4   5  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,2)] <- c(200L,300L); x
Warning message:
In x[c(10, 10, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,10,2)] <- c(400L,500L,600L); x
 [1]   1 600   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,(1+NA))] <- c(200L,300L); x
Error in x[c(10, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(10, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-10)] <- c(200L,300L); x
Error in x[c(10, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-10)] <- c(400L,500L,600L); x
Error in x[c(10, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-2)] <- c(200L,300L); x
Error in x[c(10, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,-2)] <- c(400L,500L,600L); x
Error in x[c(10, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,0)] <- c(200L,300L); x
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(10, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 500   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,10)] <- c(200L,300L); x
Warning message:
In x[c(10, 2, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,10)] <- c(400L,500L,600L); x
 [1]   1 500   3   4   5  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,2)] <- c(200L,300L); x
Warning message:
In x[c(10, 2, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 200   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(10,2,2)] <- c(400L,500L,600L); x
 [1]   1 600   3   4   5  NA  NA  NA  NA 400

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),(1+NA))] <- c(200L,300L); x
Error in x[c(2, (1 + NA), (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-10)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-10)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-2)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),-2)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),0)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 0)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),0)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 0)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),10)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 10)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),10)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),2)] <- c(200L,300L); x
Error in x[c(2, (1 + NA), 2)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,(1+NA),2)] <- c(400L,500L,600L); x
Error in x[c(2, (1 + NA), 2)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,(1+NA))] <- c(200L,300L); x
Error in x[c(2, -10, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, -10, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-10)] <- c(200L,300L); x
Error in x[c(2, -10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-10)] <- c(400L,500L,600L); x
Error in x[c(2, -10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-2)] <- c(200L,300L); x
Error in x[c(2, -10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,-2)] <- c(400L,500L,600L); x
Error in x[c(2, -10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,0)] <- c(200L,300L); x
Error in x[c(2, -10, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,0)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,10)] <- c(200L,300L); x
Error in x[c(2, -10, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,10)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,2)] <- c(200L,300L); x
Error in x[c(2, -10, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-10,2)] <- c(400L,500L,600L); x
Error in x[c(2, -10, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,(1+NA))] <- c(200L,300L); x
Error in x[c(2, -2, (1 + NA))] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, -2, (1 + NA))] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-10)] <- c(200L,300L); x
Error in x[c(2, -2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-10)] <- c(400L,500L,600L); x
Error in x[c(2, -2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-2)] <- c(200L,300L); x
Error in x[c(2, -2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,-2)] <- c(400L,500L,600L); x
Error in x[c(2, -2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,0)] <- c(200L,300L); x
Error in x[c(2, -2, 0)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,0)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 0)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,10)] <- c(200L,300L); x
Error in x[c(2, -2, 10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,10)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,2)] <- c(200L,300L); x
Error in x[c(2, -2, 2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,-2,2)] <- c(400L,500L,600L); x
Error in x[c(2, -2, 2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 0, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 0, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-10)] <- c(200L,300L); x
Error in x[c(2, 0, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 0, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-2)] <- c(200L,300L); x
Error in x[c(2, 0, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 0, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,0)] <- c(200L,300L); x
Warning message:
In x[c(2, 0, 0)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 400   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,10)] <- c(200L,300L); x
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,10)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 10)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 400   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,2)] <- c(200L,300L); x
[1]   1 300   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,0,2)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 0, 2)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 500   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 10, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 10, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-10)] <- c(200L,300L); x
Error in x[c(2, 10, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 10, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-2)] <- c(200L,300L); x
Error in x[c(2, 10, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 10, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,0)] <- c(200L,300L); x
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 10, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 400   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,10)] <- c(200L,300L); x
Warning message:
In x[c(2, 10, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 200   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,10)] <- c(400L,500L,600L); x
 [1]   1 400   3   4   5  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,2)] <- c(200L,300L); x
Warning message:
In x[c(2, 10, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 200   3   4   5  NA  NA  NA  NA 300

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,10,2)] <- c(400L,500L,600L); x
 [1]   1 600   3   4   5  NA  NA  NA  NA 500

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,(1+NA))] <- c(200L,300L); x
Error in x[c(2, 2, (1 + NA))] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,(1+NA))] <- c(400L,500L,600L); x
Error in x[c(2, 2, (1 + NA))] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-10)] <- c(200L,300L); x
Error in x[c(2, 2, -10)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-10)] <- c(400L,500L,600L); x
Error in x[c(2, 2, -10)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-2)] <- c(200L,300L); x
Error in x[c(2, 2, -2)] <- c(200L, 300L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,-2)] <- c(400L,500L,600L); x
Error in x[c(2, 2, -2)] <- c(400L, 500L, 600L) :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,0)] <- c(200L,300L); x
[1]   1 300   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,0)] <- c(400L,500L,600L); x
Warning message:
In x[c(2, 2, 0)] <- c(400L, 500L, 600L) :
  number of items to replace is not a multiple of replacement length
[1]   1 500   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,10)] <- c(200L,300L); x
Warning message:
In x[c(2, 2, 10)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
 [1]   1 300   3   4   5  NA  NA  NA  NA 200

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,10)] <- c(400L,500L,600L); x
 [1]   1 500   3   4   5  NA  NA  NA  NA 600

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,2)] <- c(200L,300L); x
Warning message:
In x[c(2, 2, 2)] <- c(200L, 300L) :
  number of items to replace is not a multiple of replacement length
[1]   1 200   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleValues.testVectorUpdate
#x <- c(1L, 2L, 3L, 4L, 5L); x[c(2,2,2)] <- c(400L,500L,600L); x
[1]   1 600   3   4   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testAccessSequence
#{ x<-c(1L,2L,3L,4L,5L); x[1:4][1:3][1:2][1:1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testAccessSequence
#{ x<-c(1L,2L,3L,4L,5L); x[1:5][2:5][2:4][2:2] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testAccessSequence
#{ x<-c(1L,2L,3L,4L,5L); x[2:5][2:4][2:3][2:2] }
[1] 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-7 }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = 7) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-NULL }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = NULL) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = c(7, 42)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-integer() }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = integer(0)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-7 }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = 7) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-NULL }
Error in x[[1 + (0+1i), 1]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-c(7,42) }
Error in x[[1 + (0+1i), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-integer() }
Error in x[[1 + (0+1i), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-NULL }
Error in x[1 + (0+1i)] <- NULL : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-c(1) }
Error in x[1 + (0+1i)] <- c(1) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-c(1,2) }
Error in x[1 + (0+1i)] <- c(1, 2) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-c(1,2,3) }
Error in x[1 + (0+1i)] <- c(1, 2, 3) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[1+1i]<-integer() }
Error in x[1 + (0+1i)] <- integer() : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-NULL }
Error in x[[1 + (0+1i)]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-c(1) }
Error in x[[1 + (0+1i)]] <- c(1) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-c(1,2) }
Error in x[[1 + (0+1i)]] <- c(1, 2) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-c(1,2,3) }
Error in x[[1 + (0+1i)]] <- c(1, 2, 3) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-c(1,2,3,4); x[[1+1i]]<-integer() }
Error in x[[1 + (0+1i)]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-7 }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = 7) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-NULL }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = NULL) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = c(7, 42)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-integer() }
Error in `[<-`(`*tmp*`, 1 + (0+1i), 1, value = integer(0)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-7 }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = 7) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-NULL }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = NULL) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = c(7, 42)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-integer() }
Error in `[[<-`(`*tmp*`, 1 + (0+1i), 1, value = integer(0)) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-NULL }
Error in x[1 + (0+1i)] <- NULL : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-c(1) }
Error in x[1 + (0+1i)] <- c(1) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-c(1,2) }
Error in x[1 + (0+1i)] <- c(1, 2) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-c(1,2,3) }
Error in x[1 + (0+1i)] <- c(1, 2, 3) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[1+1i]<-integer() }
Error in x[1 + (0+1i)] <- integer() : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-NULL }
Error in x[[1 + (0+1i)]] <- NULL : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-c(1) }
Error in x[[1 + (0+1i)]] <- c(1) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-c(1,2) }
Error in x[[1 + (0+1i)]] <- c(1, 2) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-c(1,2,3) }
Error in x[[1 + (0+1i)]] <- c(1, 2, 3) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testComplexIndex
#{ x<-list(1,2,3,4); x[[1+1i]]<-integer() }
Error in x[[1 + (0+1i)]] <- integer() : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testEmptyUpdate
#{ a <- list(); a$a = 6; a; }
$a
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testEmptyUpdate
#{ a <- list(); a[['b']] = 6; a; }
$b
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- c(1,2); a$a = 3; a; }
[[1]]
[1] 1

[[2]]
[1] 2

$a
[1] 3

Warning message:
In a$a = 3 : Coercing LHS to a list

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- c(a=1,b=2); a$a; }
Error in a$a : $ operator is invalid for atomic vectors

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$a <- 67; a; }
$a
[1] 67

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$a; }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$b <- 67; a; }
$a
[1] 1

$b
[1] 67


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$b; }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$c <- 67; a; }
$a
[1] 1

$b
[1] 2

$c
[1] 67


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ a <- list(a = 1, b = 2); a$c; }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ f <- function(v) { v$x } ; f(list(xa=1, xb=2, hello=3)) ; f(list(y=2,x=3)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ f <- function(v) { v$x } ; f(list(xa=1, xb=2, hello=3)) ; l <- list(y=2,x=3) ; f(l) ; l[[2]] <- 4 ; f(l) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$a }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$aa }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x <- list(1, 2) ; x$b }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; f(1:3) }
Error in x$b : $ operator is invalid for atomic vectors

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; f(x) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testFieldAccess
#{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; x <- list(c=2,b=10) ; f(x) }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testGenericUpdate
#{ a <- TRUE; a[[2]] <- FALSE; a; }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ (1 + 2i) %in% c(1+10i, 1+4i, 2+2i, 1+2i) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ 1 %in% 1:10 }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ 1:3 %in% 1:10 }
[1] TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ as.logical(-1:1) %in% TRUE }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ c("1L","hello") %in% 1:10 }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testIn
#{ x <- function(){1} ; x %in% TRUE }
Error in match(x, table, nomatch = 0L) :
  'match' requires vector arguments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testLengthUpdate
#{ k <- c(1,2,3) ; length(k) <- 5 ; k }
[1]  1  2  3 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testLengthUpdate
#{ k <- c(1,2,3,4,5,6,7,8,9) ; length(k) <- 4 ; k }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(1:3,2,2) ; f(1:3,"X",2) ; f(list(1,list(2)),c(2,1),4) }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 4



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1)  ; f(3:4) }
[[1]]
[1] 3

[[2]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1) ; f(1L) ; f(TRUE) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1) ; f(TRUE) ; f(1L)  }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(c(TRUE,FALSE))  ; f(3:4) }
[[1]]
[1] 3

[[2]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(i) { x<-list(1L,2L,3L,4L,5L) ; x[i] } ; f(1) ; f(TRUE) ; f(c(3,2))  }
[[1]]
[1] 3

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ f<-function(x, i) { x[i] } ; f(list(1,2,3),3:1) ; f(list(1L,2L,3L,4L,5L),c(0,0,0,0-2)) }
[[1]]
[1] 1

[[2]]
[1] 3

[[3]]
[1] 4

[[4]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(a=1,b=2,c=list(d=3,e=list(f=4))) ; l[[c(3,1)]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(a=1,b=2,c=list(d=3,e=list(f=4))) ; l[[c(3,2)]] }
$f
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c("c")]] }
$d
[1] 3

$e
f
4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c("c","e")]] }
f
4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c("c","e", "f")]] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),c(3,4))); l[[c(2,1)]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),list(3,4))); l[[c(1,-1)]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),list(3,4))); l[[c(1,-2)]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),list(3,4))); l[[c(1,2)]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-(list(list(1,2),list(3,4))); l[[c(1,TRUE)]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2,3) ; l[c(1,2)] }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2,3) ; l[c(2)] }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[-2] }
[[1]]
[1] 1

[[2]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[FALSE] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[NA] }
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[[2]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ l<-list(1,2L,TRUE) ; l[c(FALSE,FALSE,TRUE)] }
[[1]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ m<-list(1,2) ; m[NULL] }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2,3,4,5) ; x[c(TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,NA)] }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
NULL

[[5]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[2:4] }
[[1]]
[1] 2

[[2]]
[1] TRUE

[[3]]
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[4:2] }
[[1]]
[1] FALSE

[[2]]
[1] TRUE

[[3]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(-2,-3)] }
[[1]]
[1] 1

[[2]]
[1] FALSE

[[3]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(-2,-3,-4,0,0,0)] }
[[1]]
[1] 1

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(2,5,4,3,3,3,0)] }
[[1]]
[1] 2

[[2]]
[1] 5

[[3]]
[1] FALSE

[[4]]
[1] TRUE

[[5]]
[1] TRUE

[[6]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListAccess
#{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(2L,5L,4L,3L,3L,3L,0L)] }
[[1]]
[1] 2

[[2]]
[1] 5

[[3]]
[1] FALSE

[[4]]
[1] TRUE

[[5]]
[1] TRUE

[[6]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(1,b=list(2,3)) }
[[1]]
[1] 1

$b
$b[[1]]
[1] 2

$b[[2]]
[1] 3



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(1,b=list(c=2,3)) }
[[1]]
[1] 1

$b
$b$c
[1] 2

$b[[2]]
[1] 3



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(1,list(2,list(3,4))) }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[[2]][[2]][[1]]
[1] 3

[[2]][[2]][[2]]
[1] 4




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(1:4) }
[[1]]
[1] 1 2 3 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListDefinitions
#{ list(list(c=2)) }
[[1]]
[[1]]$c
[1] 2



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]] }
Error in x[[list(), 1]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(), 1, value = 7) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-c(7,42) }
Error in x[[list(), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-integer() }
Error in x[[list(), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]] }
Error in x[[list(1), 1]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-c(7,42) }
Error in x[[list(1), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-integer() }
Error in x[[list(1), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]] }
Error in x[[list(1, 2), 1]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = 7) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-c(7,42) }
Error in x[[list(1, 2), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-integer() }
Error in x[[list(1, 2), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = 7) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-c(7,42) }
Error in x[[list(1, 2, 3), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-integer() }
Error in x[[list(1, 2, 3), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(), 1] }
Error in x[list(), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-7 }
Error in `[<-`(`*tmp*`, list(), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1] }
Error in x[list(1), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1] }
Error in x[list(1, 2), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]] }
Error in x[[list(), 1]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(), 1, value = 7) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, list(), 1, value = NULL) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, list(), 1, value = c(7, 42)) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, list(), 1, value = integer(0)) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]] }
Error in x[[list(1), 1]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, list(1), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]] }
Error in x[[list(1, 2), 1]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = 7) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = NULL) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = c(7, 42)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1, 2), 1, value = integer(0)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-7 }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = 7) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = NULL) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = c(7, 42)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), 1, value = integer(0)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1] }
Error in x[list(), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-7 }
Error in `[<-`(`*tmp*`, list(), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-NULL }
Error in `[<-`(`*tmp*`, list(), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1] }
Error in x[list(1), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-NULL }
Error in `[<-`(`*tmp*`, list(1), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1] }
Error in x[list(1, 2), 1] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-NULL }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1, 2), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-7 }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = 7) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-NULL }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = c(7, 42)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-integer() }
Error in `[<-`(`*tmp*`, list(1, 2, 3), 1, value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list()]] }
Error in z[[list()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list()]]<-42 }
Error in z[[list()]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list()]]<-NULL }
Error in z[[list()]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list()]]<-integer() }
Error in z[[list()]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1)]] }
Error in z[[list(1)]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1)]]<-42 }
Error in z[[list(1)]] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1)]]<-NULL }
Error in z[[list(1)]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1)]]<-integer() }
Error in z[[list(1)]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2)]] }
Error in z[[list(1, 2)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2)]]<-42 }
Error in z[[list(1, 2)]] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2)]]<-NULL }
Error in z[[list(1, 2)]] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2)]]<-integer() }
Error in z[[list(1, 2)]] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2,3)]]<-42 }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = 42) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2,3)]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = NULL) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[[list(1,2,3)]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = integer(0)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list()] }
Error in z[list()] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list()]<-42 }
Error in z[list()] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list()]<-NULL }
Error in z[list()] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list()]<-integer() }
Error in z[list()] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1)] }
Error in z[list(1)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1)]<-42 }
Error in z[list(1)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1)]<-NULL }
Error in z[list(1)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1)]<-integer() }
Error in z[list(1)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2)] }
Error in z[list(1, 2)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2)]<-42 }
Error in z[list(1, 2)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2)]<-NULL }
Error in z[list(1, 2)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2)]<-integer() }
Error in z[list(1, 2)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2,3)]<-42 }
Error in z[list(1, 2, 3)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2,3)]<-NULL }
Error in z[list(1, 2, 3)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-1:4; z[list(1,2,3)]<-integer() }
Error in z[list(1, 2, 3)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list()]] }
Error in z[[list()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list()]]<-42 }
Error in z[[list()]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list()]]<-NULL }
Error in z[[list()]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list()]]<-integer() }
Error in z[[list()]] <- integer() :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1)]] }
Error in z[[list(1)]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1)]]<-42 }
Error in z[[list(1)]] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1)]]<-NULL }
Error in z[[list(1)]] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1)]]<-integer() }
Error in z[[list(1)]] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2)]] }
Error in z[[list(1, 2)]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2)]]<-42 }
Error in z[[list(1, 2)]] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2)]]<-NULL }
Error in z[[list(1, 2)]] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2)]]<-integer() }
Error in z[[list(1, 2)]] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-42 }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = 42) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-NULL }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = NULL) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-integer() }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = integer(0)) :
  invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list()] }
Error in z[list()] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list()]<-42 }
Error in z[list()] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list()]<-NULL }
Error in z[list()] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list()]<-integer() }
Error in z[list()] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1)] }
Error in z[list(1)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1)]<-42 }
Error in z[list(1)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1)]<-NULL }
Error in z[list(1)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1)]<-integer() }
Error in z[list(1)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2)] }
Error in z[list(1, 2)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2)]<-42 }
Error in z[list(1, 2)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2)]<-NULL }
Error in z[list(1, 2)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2)]<-integer() }
Error in z[list(1, 2)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2,3)]<-42 }
Error in z[list(1, 2, 3)] <- 42 : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2,3)]<-NULL }
Error in z[list(1, 2, 3)] <- NULL : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListIndex
#{ z<-list(1,2,3,4); z[list(1,2,3)]<-integer() }
Error in z[list(1, 2, 3)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
# { f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=c(a=2)),c(TRUE,TRUE),3) }
$a
[1] 3

$b
a
2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function() { l[1:2] <- x ; x[1] <- 211L  ; l[1] } ; l <- 1:3 ; x <- 10L ; f() }
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(c(a=1,b=2),"b",NULL) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(c(a=1,b=2),"b",as.raw(12)) }
Error in b[[i]] <- v :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(c(a=1,b=2),c(1+2i,3+4i),as.raw(12)) }
Error in b[[i]] <- v : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(f,TRUE,3) }
Error in b[[i]] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=2),"b",NULL) }
$a
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=c(a=2)),1+2i,1:3) }
Error in b[[i]] <- v : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=c(a=2)),c("b","a"),1:3) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=f),c("b","x"),3) }
Error in b[[i]] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c("b","a"),10) ; f(list(a=1,b=list(2)),"b",double()) }
$a
[1] 1

$b
numeric(0)


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(c(1,2,b=c(x=3)),c("b"),10) }
        b.x   b
  1   2   3  10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(c(1,2,b=c(x=3)),c("b","x"),10) }
Error in `[[<-`(`*tmp*`, i, value = 10) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2, list(3)),c("b","x"),10) }
Error in `[[<-`(`*tmp*`, i, value = 10) : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=c(x=3)),c("b","x"),10) }
[[1]]
[1] 1

[[2]]
[1] 2

$b
 x
10


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(3)),c("a","x"),10) }
Error in `[[<-`(`*tmp*`, i, value = 10) : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(a=list(x=1,y=2),3),4),c("b","a","x"),10) }
[[1]]
[1] 1

[[2]]
[1] 2

$b
$b$a
$b$a$x
[1] 10

$b$a$y
[1] 2


$b[[2]]
[1] 3


[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(x=3)),c("b","x"),10) }
[[1]]
[1] 1

[[2]]
[1] 2

$b
$b$x
[1] 10



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(x=3)),character(),10) }
Error in b[[i]] <- v : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), "hello", 2) }
                  hello
    1     2     3     2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), 2L, 1:2) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), 2L, NULL) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), f, 2) }
Error in b[[i]] <- v : invalid subscript type 'closure'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(1,2,3), 2L, 3) }
[[1]]
[1] 1

[[2]]
[1] 3

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(1,2,3), 2L, NULL) }
[[1]]
[1] 1

[[2]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(f,f), c(1,1), 3) }
Error in b[[i]] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- as.list(1:3) ; l[[0]] <- 2 }
Error in l[[0]] <- 2 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list() ; l[[1]] <-2 ; l}
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list() ; l[c(TRUE,TRUE)] <-2 ; l }
[[1]]
[1] 2

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1, list(2)) ;  m <- l ; l[[c(2,1)]] <- 3 ; m[[2]][[1]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1, list(2,3,4)) ;  m <- l ; l[[c(2,1)]] <- 3 ; m[[2]][[1]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2) ; l[[c(1,1,2,3,4,3)]] <- 10 ; l }
Error in `[[<-`(`*tmp*`, c(1, 1, 2, 3, 4, 3), value = 10) :
  recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2); l[0] <- NULL; l}
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2); l[[0]] }
Error in l[[0]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[-1L] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[-1] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[2] <- list(100) ; l[2] }
[[1]]
[1] 100


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[[2]] <- list(100) ; l[2] }
[[1]]
[[1]][[1]]
[1] 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[c(2,3)] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[c(2:3)] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; l[c(FALSE,TRUE,TRUE)] <- c(20,30) ; l }
[[1]]
[1] 1

[[2]]
[1] 20

[[3]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; x <- list(100) ; y <- x; l[1:1] <- x ; l[[1]] }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,2,3) ; x <- list(100) ; y <- x; l[[1:1]] <- x ; l[[1]] }
[[1]]
[1] 100


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,list(2,c(3))) ; l[[c(2,2)]] <- 4 ; l }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[1] 4



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,list(2,c(3))) ; l[[c(2,2)]] <- NULL ; l }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 2



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,list(2,list(3))) ; l[[1]] <- 5 ; l }
[[1]]
[1] 5

[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[[2]][[2]][[1]]
[1] 3




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(1,list(2,list(3))) ; l[[1]] <- NULL ; l }
[[1]]
[[1]][[1]]
[1] 2

[[1]][[2]]
[[1]][[2]][[1]]
[1] 3




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(100) ; f <- function() { l[[1]] <- 2 } ; f() ; l }
[[1]]
[1] 100


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(100,200,300,400,500) ; f <- function() { l[[3]] <- 2 } ; f() ; l }
[[1]]
[1] 100

[[2]]
[1] 200

[[3]]
[1] 300

[[4]]
[1] 400

[[5]]
[1] 500


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[1] <- NULL ; l }
$b
[1] 2

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[3] <- NULL ; l }
$a
[1] 1

$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[4] <- NULL ; l}
$a
[1] 1

$b
[1] 2

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[5] <- NULL ; l}
$a
[1] 1

$b
[1] 2

$c
[1] 3

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[["b"]] <- NULL ; l }
$a
[1] 1

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[[4]] <- NULL ; l}
$a
[1] 1

$b
[1] 2

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,c=3) ; l[[5]] <- NULL ; l}
$a
[1] 1

$b
[1] 2

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,cd=list(c=3,d=4)) ; x <- list(l,xy=list(x=l,y=l)) ; x[[c("xy","y","cd","d")]] <- 10 ; l }
$a
[1] 1

$b
[1] 2

$cd
$cd$c
[1] 3

$cd$d
[1] 4



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(a=1,b=2,cd=list(c=3,d=4)) ; x <- list(l,xy=list(x=l,y=l)) ; x[[c(2,2,3,2)]] <- 10 ; l }
$a
[1] 1

$b
[1] 2

$cd
$cd$c
[1] 3

$cd$d
[1] 4



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- list(list(1,2),2) ; l[[c(1,1,2,3,4,3)]] <- 10 ; l }
Error in `[[<-`(`*tmp*`, c(1, 1, 2, 3, 4, 3), value = 10) :
  recursive indexing failed at level 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- matrix(list(1,2)) ; l[3] <- NULL ; l }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- matrix(list(1,2)) ; l[4] <- NULL ; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- matrix(list(1,2)) ; l[[3]] <- NULL ; l }
     [,1]
[1,] 1
[2,] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l <- matrix(list(1,2)) ; l[[4]] <- NULL ; l }
     [,1]
[1,] 1
[2,] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list() ; x <- 1:3 ; l[[1]] <- x  ; l }
[[1]]
[1] 1 2 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list() ; x <- 1:3 ; l[[1]] <- x; x[2] <- 100L; l[[1]] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(1,2L,TRUE) ; l[[2]]<-100 ; l }
[[1]]
[1] 1

[[2]]
[1] 100

[[3]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(1,2L,TRUE) ; l[[3]]<-list(100) ; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[[3]][[1]]
[1] 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(1,2L,TRUE) ; l[[5]]<-100 ; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] TRUE

[[4]]
NULL

[[5]]
[1] 100


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a="a",b="b",c=list(d="cd",e="ce",f=c(x="cfx",y="cfy",z="cfz"))) ; l[[c("c","f","zz")]] <- "cfzz" ; l }
$a
[1] "a"

$b
[1] "b"

$c
$c$d
[1] "cd"

$c$e
[1] "ce"

$c$f
     x      y      z     zz
 "cfx"  "cfy"  "cfz" "cfzz"



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3) ; l[c("a","a","a","c")] <- NULL ; l }
$b
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(-1,-10)] <- NULL ; l}
$a
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(-1,-3)] <- NULL ; l}
$a
[1] 1

$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3)] <- NULL ; l}
$a
[1] 1

$d
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3,5)] <- NULL ; l}
$a
[1] 1

$d
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3,6)] <- NULL ; l}
$a
[1] 1

$d
[1] 4

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,FALSE)] <- NULL ; l}
$b
[1] 2

$d
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,FALSE,FALSE,TRUE,FALSE,NA,TRUE,TRUE)] <- NULL ; l}
$b
[1] 2

$c
[1] 3

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,TRUE,FALSE,TRUE)] <- NULL ; l}
$c
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c("c","f")]] <- NULL ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c("c","f","z")]] <- 100 ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
  x   y   z
  1   2 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c("c","f","zz")]] <- 100 ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
  x   y   z  zz
  1   2   3 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c("c","f","zz")]] <- list(100) ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
$c$f$x
[1] 1

$c$f$y
[1] 2

$c$f$z
[1] 3

$c$f$zz
$c$f$zz[[1]]
[1] 100





##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1,b=2,list(c=3,d=4,list(e=5:6,f=100))) ; l[[c(3,3,1)]] <- NULL ; l }
$a
[1] 1

$b
[1] 2

[[3]]
[[3]]$c
[1] 3

[[3]]$d
[1] 4

[[3]][[3]]
[[3]][[3]]$f
[1] 100




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c("c","f")]] <- 100L ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
[1] 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c("c","f")]] <- list(haha="gaga") ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
$c$f$haha
[1] "gaga"




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c("c","f","zz")]] <- 100L ; l }
$a
[1] 1

$b
[1] 2

$c
$c$d
[1] 1

$c$e
[1] 2

$c$f
  x   y   z  zz
  1   2   3 100



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ l<-list(a=TRUE,b=FALSE,c=list(d=TRUE,e=FALSE,f=c(x=TRUE,y=FALSE,z=TRUE))) ; l[[c("c","f","zz")]] <- TRUE ; l }
$a
[1] TRUE

$b
[1] FALSE

$c
$c$d
[1] TRUE

$c$e
[1] FALSE

$c$f
    x     y     z    zz
 TRUE FALSE  TRUE  TRUE



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[TRUE] <- NULL ; m }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[[-1]] <- NULL ; m }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[[-2]] <- NULL ; m }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[[1]] <- NULL ; m }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ m<-list(1,2) ; m[[TRUE]] <- NULL ; m }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-1:3 ; v[2] <- list(100) ; v }
[[1]]
[1] 1

[[2]]
[1] 100

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-1:3 ; v[[2]] <- list(100) ; v }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 100


[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c()] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(-1,-2,-6)] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(2,3,4)] <- NULL ; v }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(2,3,NA,7,0)] <- NULL ; v }
[[1]]
[1] 1

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(TRUE,FALSE)] <- NULL ; v }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE)] <- NULL ; v }
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[c(TRUE,FALSE,TRUE)] <- NULL ; v }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[double()] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[integer()] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ v<-list(1,2,3) ; v[logical()] <- NULL ; v }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- 1:3 ; l <- list(1) ; l[[TRUE]] <- x ; l[[1]] } 
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- as.list(1:3) ; x[[integer()]] <- 3 }
Error in x[[integer()]] <- 3 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- c(1L,2L,3L) ; l <- list(1) ; l[[1]] <- x ; x[2] <- 100L ; l[[1]] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- list(1,list(2,3),4) ; x[[c(2,3)]] <- 3 ; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 2

[[2]][[2]]
[1] 3

[[2]][[3]]
[1] 3


[[3]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <- list(1,list(2,3),4) ; z <- x[[2]] ; x[[c(2,3)]] <- 3 ; z }
[[1]]
[1] 2

[[2]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x <-2L ; y <- x; x[1] <- 211L ; y }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-c(1,2,3) ; y<-x ; x[2]<-100 ; y }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(1,2,3,4,5); x[3:4]<-c(300L,400L); x }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 300

[[4]]
[1] 400

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(1,2,3,4,5); x[4:3]<-c(300L,400L); x }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 400

[[4]]
[1] 300

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(1,2L,TRUE,TRUE,FALSE); x[c(-2,-3,-3,-100,0)]<-256; x }
[[1]]
[1] 256

[[2]]
[1] 2

[[3]]
[1] TRUE

[[4]]
[1] 256

[[5]]
[1] 256


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(1,2L,list(3,list(4)),list(5)) ; x[c(4,2,3)]<-list(256L,257L,258L); x }
[[1]]
[1] 1

[[2]]
[1] 257

[[3]]
[1] 258

[[4]]
[1] 256


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(11,10,9) ; x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }
[[1]]
[1] 1000

[[2]]
[1] 10

[[3]]
[1] 2000


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testListUpdate
#{ x<-list(FALSE,NULL,3L,4L,5.5); x[c(TRUE,FALSE)] <- 1000; x }
[[1]]
[1] 1000

[[2]]
NULL

[[3]]
[1] 1000

[[4]]
[1] 4

[[5]]
[1] 1000


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE),c(FALSE,TRUE), drop=TRUE]}
[1]  9 11 13 15

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE,FALSE),c(FALSE,NA), drop=FALSE]}
     [,1]
[1,]   NA
[2,]   NA
[3,]   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE,FALSE),c(FALSE,TRUE), drop=TRUE]}
[1]  9 12 15

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:4, nrow=2) ; m[[2,1,drop=FALSE]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] } ; f(1,1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] } ; f(1,1:3) }
[1] 1 3 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,-1] }
     [,1] [,2]
[1,]    3    5
[2,]    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,1[2],drop=FALSE] }
     [,1]
[1,]   NA
[2,]   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,] }
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,c(-1,0,0,-1)] }
     [,1] [,2]
[1,]    3    5
[2,]    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,c(1,NA,1,NA)] }
     [,1] [,2] [,3] [,4]
[1,]    1   NA    1   NA
[2,]    2   NA    2   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[,c(NA,1,0)] }
     [,1] [,2]
[1,]   NA    1
[2,]   NA    2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1,,drop=FALSE] }
     [,1] [,2] [,3]
[1,]    1    3    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1,2] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1,] }
[1] 1 3 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1:2,-1] }
     [,1] [,2]
[1,]    3    5
[2,]    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1:2,0:1] ; m[1:2,1:1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1:2,0:1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[1:2,2:3] }
     [,1] [,2]
[1,]    3    5
[2,]    4    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; m[[1,2]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=2) ; x<-2 ; m[[1,x]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(1,c(-1,0,-1,-10)) }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(1,c(1,2)) }
[1] 1 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMatrixIndex
#{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(c(TRUE),c(FALSE,TRUE)) }
[1] 4 5 6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-1.1:3.1; x[1L] }
[1] 1.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-1.1:3.1; x[2L] }
[1] 2.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-1.1:3.1; x[3L] }
[1] 3.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-3.1:1; x[1L] }
[1] 3.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-3.1:1; x[2L] }
[1] 2.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-3.1:1; x[3L] }
[1] 1.1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-NULL; x[1L] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-NULL; x[2L] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectors
#{ x<-NULL; x[3L] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[NULL] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[0] <- NULL ; b }
     [,1] [,2] [,3]
[1,]    3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[[c(1,2)]] <- NULL ; b }
Error in `[[<-`(`*tmp*`, c(1, 2), value = NULL) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[] <- NULL ; b }
Error in b[] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[c(1)] <- NULL ; b }
Error in b[c(1)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[c(1,2)] <- NULL ; b }
Error in b[c(1, 2)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-3:5; dim(b) <- c(1,3) ; b[c(FALSE, FALSE, FALSE)] <- NULL ; b }
     [,1] [,2] [,3]
[1,]    3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[0] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[0]] <- NULL ; b }
Error in b[[0]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[c(1)]] <- NULL ; b }
[[1]]
[1] 4

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[c(1,2)]] <- NULL ; b }
Error in b[[c(1, 2)]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[] <- NULL ; b }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[c(1)] <- NULL ; b }
[[1]]
[1] 4

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[c(1,2)] <- NULL ; b }
[[1]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- c(1,2) ;  attr(l, "foo")<-"foo"; names(l)<-c("a", "b"); l[1] <- 7 ; attributes(l) }
$foo
[1] "foo"

$names
[1] "a" "b"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- c(1,2) ; names(l)<-c("a", "b"); attr(l, "foo")<-"foo"; l[1] <- 7 ; attributes(l) }
$names
[1] "a" "b"

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2) ;  attr(l, "foo")<-"foo"; names(l)<-c("a", "b"); l[1] <- NULL ; attributes(l) }
$names
[1] "b"

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2) ; names(l)<-c("a", "b"); attr(l, "foo")<-"foo"; l[1] <- NULL ; attributes(l) }
$names
[1] "b"

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2,3) ; l[c(1,3)] <- NULL ; l }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2,3) ; l[c(1,3)] <- c(NULL, 42) ; l }
[[1]]
[1] 42

[[2]]
[1] 2

[[3]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(1,2,3) ; l[c(1,3)] <- c(NULL, NULL) ; l }
[[1]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(a=1,b=2) ; attr(l, "foo")<-"foo"; l[1] <- NULL ; l }
$b
[1] 2

attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- list(a=1,b=2) ; attr(l, "foo")<-"foo"; l[[1]] <- NULL ; l }
$b
[1] 2

attr(,"foo")
[1] "foo"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- matrix(list(a=1,b=2,c=3,d=4)) ; attr(l, "foo")<-"foo"; l[1] <- NULL ; attributes(l) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l <- matrix(list(a=1,b=2,c=3,d=4)) ; attr(l, "foo")<-"foo"; l[[1]] <- NULL ; attributes(l) }
$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1); l[1]<-NULL; l }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[1]<-NULL; l }
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[4]<-NULL; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[5]<-NULL; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[7]<-NULL; l }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

[[4]]
[1] 4

[[5]]
NULL

[[6]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(-1)]]<-c(1); l }
Error in l[[c(-1)]] <- c(1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(-1,1)]]<-c(1); l }
Error in l[[c(-1, 1)]] <- c(1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(0)]]<-c(1); l }
Error in l[[c(0)]] <- c(1) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(0,1)]]<-c(1); l }
Error in l[[c(0, 1)]] <- c(1) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(1,1,1)]]<-c(1); l }
Error in `[[<-`(`*tmp*`, c(1, 1, 1), value = 1) :
  recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(1,NA)]]<-c(1); l }
Error in l[[c(1, NA)]] <- c(1) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(2,1)]]<-7; l }
[[1]]
[1] 1

[[2]]
[1] 7

[[3]]
[1] 3

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(7,1)]]<-c(1); l }
Error in `[[<-`(`*tmp*`, c(7, 1), value = 1) : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(NA)]]<-c(1); l }
Error in l[[c(NA)]] <- c(1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(NA,1)]]<-c(-1); l }
Error in l[[c(NA, 1)]] <- c(-1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[[c(NA,1)]]<-c(1); l }
Error in l[[c(NA, 1)]] <- c(1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[c(1,3)]<-list(NULL); l }
[[1]]
NULL

[[2]]
[1] 2

[[3]]
NULL

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(1,2,3,4); l[c(2,1)]<-7; l }
[[1]]
[1] 7

[[2]]
[1] 7

[[3]]
[1] 3

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ l<-list(list(1),2,3,4); l[[c(1,1,NA)]]<-c(1); l }
Error in l[[c(1, 1, NA)]] <- c(1) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,7)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,8)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,8,9)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,7)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,8)] <- NULL ; m }
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 5

[[4]]
[1] 6

[[5]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ n<-1; n[7]<-42; n }
[1]  1 NA NA NA NA NA 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ n<-1; n[[7]]<-42; n }
[1]  1 NA NA NA NA NA 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ n<-1; n[[c(7,8)]]<-c(42,43); n }
Error in `[[<-`(`*tmp*`, c(7, 8), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ n<-1; n[c(7,8)]<-c(42,43); n }
[1]  1 NA NA NA NA NA 42 43

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- NULL; x[c("a", as.character(NA))] <- 7; x }
   a <NA>
   7    7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- NULL; x[c("a", as.character(NA), as.character(NA))] <- 7; x }
   a <NA> <NA>
   7    7    7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- c("a", "b"); y<-NULL; y[integer()]<-x[integer()]; y }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- c("a", "b"); y<-c("c","d"); y[integer()]<-x[integer()]; y}
[1] "c" "d"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- list() ; x[[NA]] <- NULL ; x }
Error in x[[NA]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- list(1) ; x[[NA]] <- NULL ; x }
Error in x[[NA]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- list(1,2) ; x[[NA]] <- NULL ; x }
Error in x[[NA]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x <- list(1,2,3) ; x[[NA]] <- NULL ; x }
Error in x[[NA]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)<-c(1,2); u<-2+2i; x[[u, u]] }
Error in x[[u, u]] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)<-c(1,2); x[2+2i, 2+2i] }
Error: invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,1,2); x[[, , 1]] }
Error in x[[, , 1]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,1,2); x[[1, , 1]] }
Error in x[[1, , 1]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,1,2); x[[1, , ]] }
Error in x[[1, , ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[,] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[[, 1]] }
Error in x[[, 1]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[[, ]] }
Error in x[[, ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; dim(x)=c(1,2); x[[1, ]] }
Error in x[[1, ]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; x[[c(TRUE, TRUE)]] }
Error in x[[c(TRUE, TRUE)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:2; x[c(TRUE, TRUE)] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4;  x[c(0, 1)]<-42; x }
[1] 42  2  3  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4;  x[c(0, 1)]<-c(7, 42); x }
[1] 7 2 3 4
Warning message:
In x[c(0, 1)] <- c(7, 42) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4;  x[c(1, 0)]<-42; x }
[1] 42  2  3  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4;  x[c(1, 0)]<-c(7, 42); x }
[1] 7 2 3 4
Warning message:
In x[c(1, 0)] <- c(7, 42) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2);  x[NA, NA]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-1,0]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-1] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-1]<-42; x }
     [,1] [,2]
[1,]    1   42
[2,]   42   42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-5,0]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[-5]<-42; x }
     [,1] [,2]
[1,]   42   42
[2,]   42   42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[0,-1]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[0,-5]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[0,0]<-integer(); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[0]<-42; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[NA]<-42; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[NULL]<-42; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[-1, 0]] <- integer(); x }
Error in x[[-1, 0]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[-5, 0]] <- integer(); x }
Error in x[[-5, 0]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[0, -1]] <- integer(); x }
Error in x[[0, -1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[0, -5]] <- integer(); x }
Error in x[[0, -5]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[0, 0]] <- integer(); x }
Error in x[[0, 0]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(-1, -2)]]<-42; x }
Error in x[[c(-1, -2)]] <- 42 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0)]]<-c(42, 43); x }
Error in x[[c(0, 0)]] <- c(42, 43) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,0)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(0, 0, 0), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,1)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(0, 0, 1), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,42+71)]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, c(0, 0, 42 + 71), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,1)]]<-c(42, 43); x }
Error in x[[c(0, 1)]] <- c(42, 43) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,1,1)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(0, 1, 1), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(0,42+7i)]]<-c(42,43); x }
Error in x[[c(0, 42 + (0+7i))]] <- c(42, 43) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-c(42); x }
Error in x[[c(1 + (0+1i))]] <- c(42) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-c(42,43); x }
Error in x[[c(1 + (0+1i))]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-integer(); x }
Error in x[[c(1 + (0+1i))]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i,42+7i,3+3i)]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, c(1 + (0+1i), 42 + (0+7i), 3 + (0+3i)), value = c(42,  :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1,0)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(1, 0), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1,0,0)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(1, 0, 0), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1,1,0)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(1, 1, 0), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(1,4)]]<-c(42, 43); x }
Error in `[[<-`(`*tmp*`, c(1, 4), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(FALSE,TRUE)]]<-c(42,43); x }
Error in x[[c(FALSE, TRUE)]] <- c(42, 43) :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(FALSE,TRUE,TRUE)]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, c(FALSE, TRUE, TRUE), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-c(42,43); x }
Error in x[[c(as.raw(42))]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-c(43); x }
Error in x[[c(as.raw(42))]] <- c(43) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-integer(); x }
Error in x[[c(as.raw(42))]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42), as.raw(7))]]<-c(42,43); x }
Error in x[[c(as.raw(42), as.raw(7))]] <- c(42, 43) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42), as.raw(7), as.raw(1))]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, c(as.raw(42), as.raw(7), as.raw(1)), value = c(42,  :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(integer()))]]<-c(42,43); x }
Error in x[[c(as.raw(integer()))]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[complex()]]<-c(42,43); x }
Error in x[[complex()]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-c(42); x }
Error in x[[list()]] <- c(42) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-c(42,43); x }
Error in x[[list()]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-integer(); x }
Error in x[[list()]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-c(42); x }
Error in x[[list(1)]] <- c(42) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-c(42,43); x }
Error in x[[list(1)]] <- c(42, 43) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-integer(); x }
Error in x[[list(1)]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2)]]<-c(42,43); x }
Error in x[[list(1, 2)]] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3)]]<-c(42,43); x }
Error in `[[<-`(`*tmp*`, list(1, 2, 3), value = c(42, 43)) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(-1, -2)]<-42; x }
     [,1] [,2]
[1,]    1   42
[2,]    2   42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,0,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,0,1)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4
Warning message:
In x[c(0, 0, 1)] <- c(42, 43) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,1)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4
Warning message:
In x[c(0, 1)] <- c(42, 43) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,1,1)]<-c(42, 43); x }
     [,1] [,2]
[1,]   43    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(0,42+7i)]<-c(42,43); x }
Error in x[c(0, 42 + (0+7i))] <- c(42, 43) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-c(42); x }
Error in x[c(1 + (0+1i))] <- c(42) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-c(42,43); x }
Error in x[c(1 + (0+1i))] <- c(42, 43) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-integer(); x }
Error in x[c(1 + (0+1i))] <- integer() : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i,42+7i,3+3i)]<-c(42,43); x }
Error in x[c(1 + (0+1i), 42 + (0+7i), 3 + (0+3i))] <- c(42, 43) :
  invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1, NA), 2]<-7; x }
     [,1] [,2]
[1,]    1    7
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1, NA)]<-7; x }
     [,1] [,2]
[1,]    7    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4
Warning message:
In x[c(1, 0)] <- c(42, 43) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,0,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2    4
Warning message:
In x[c(1, 0, 0)] <- c(42, 43) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,1,0)]<-c(42, 43); x }
     [,1] [,2]
[1,]   43    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,4)]<-c(42, 43); x }
     [,1] [,2]
[1,]   42    3
[2,]    2   43

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(1,NA)]<-c(42, 43); x }
Error in x[c(1, NA)] <- c(42, 43) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(NA, 1),1]<-7; x }
     [,1] [,2]
[1,]    7    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(NA, 1),1]<-c(7, 42); x }
Error in x[c(NA, 1), 1] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(NA, NA),1]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(NA,1)]<-c(42, 43); x }
Error in x[c(NA, 1)] <- c(42, 43) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-c(42,43); x }
Error in x[c(as.raw(42))] <- c(42, 43) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-c(43); x }
Error in x[c(as.raw(42))] <- c(43) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-integer(); x }
Error in x[c(as.raw(42))] <- integer() : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42), as.raw(7))]<-c(42,43); x }
Error in x[c(as.raw(42), as.raw(7))] <- c(42, 43) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42), as.raw(7), as.raw(1))]<-c(42,43); x }
Error in x[c(as.raw(42), as.raw(7), as.raw(1))] <- c(42, 43) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(integer()))]<-c(42,43); x }
Error in x[c(as.raw(integer()))] <- c(42, 43) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[complex()]<-c(42,43); x }
Error in x[complex()] <- c(42, 43) : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list()]<-c(42); x }
Error in x[list()] <- c(42) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list()]<-c(42,43); x }
Error in x[list()] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list()]<-integer(); x }
Error in x[list()] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-c(42); x }
Error in x[list(1)] <- c(42) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-c(42,43); x }
Error in x[list(1)] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-integer(); x }
Error in x[list(1)] <- integer() : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2)]<-c(42,43); x }
Error in x[list(1, 2)] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3)]<-c(42,43); x }
Error in x[list(1, 2, 3)] <- c(42, 43) : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[0]<-NULL; x }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[1]<-NULL; x }
Error in x[1] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[1]<-c(1,1); x }
[1] 1 2 3 4
Warning message:
In x[1] <- c(1, 1) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[[1]]<-c(1,1); x }
Error in x[[1]] <- c(1, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[c(1, NA)]<-7; x }
[1] 7 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:4; x[c(1, NA)]<-c(7, 42); x }
Error in x[c(1, NA)] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1:8; dim(x)<-c(2,2,2); x[[-3, 1, 1]] }
Error in x[[-3, 1, 1]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[0]<-integer(); x }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[1,1,1]<-42; x }
Error in x[1, 1, 1] <- 42 : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[1,1]<-42; x }
Error in x[1, 1] <- 42 : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[1]<-integer(); x }
Error in x[1] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[0]]<-integer(); x }
Error in x[[0]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[1,1,1]]<-42; x }
Error in x[[1, 1, 1]] <- 42 : [[ ]] improper number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[1,1]]<-42; x }
Error in x[[1, 1]] <- 42 : [[ ]] improper number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[]] }
Error in x[[]] : invalid subscript type 'symbol'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[]]<-42; x }
Error in x[[]] <- 42 : [[ ]] with missing subscript

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[[c(1, 1)]] }
Error in x[[c(1, 1)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-1; x[]<-42; x }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-2; x[NULL] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-2; x[[NULL]] }
Error in x[[NULL]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[0]<-42; x }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[NA]<-42; x }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[NA]<-c(42, 7); x }
Error in x[NA] <- c(42, 7) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[NULL]<-42; x }
[1] 7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[[0]]<-42; x }
Error in x[[0]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[[NA]]<-42; x }
Error in x[[NA]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[[NA]]<-c(42, 7); x }
Error in x[[NA]] <- c(42, 7) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-7; x[[NULL]]<-42; x }
Error in x[[NULL]] <- 42 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1,1,1]<-42; x }
Error in x[1, 1, 1] <- 42 : incorrect number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1,1]<-42; x }
Error in x[1, 1] <- 42 : incorrect number of subscripts on matrix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1,1]<-NULL }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1]<-42+7i; x }
[1] 42+7i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[1]<-42; x }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[7]<-42; x }
[1] NA NA NA NA NA NA 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[[1,1,1]]<-42; x }
Error in x[[1, 1, 1]] <- 42 : [[ ]] improper number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[[1,1]]<-42; x }
Error in x[[1, 1]] <- 42 : [[ ]] improper number of subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-NULL; x[c("a", "b")]<-42L; x }
 a  b
42 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-as.integer(1:4); dim(x)<-c(2,2); x[[as.integer(NA)]] }
Error in x[[as.integer(NA)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-as.integer(1:4); x[[as.integer(NA)]] }
Error in x[[as.integer(NA)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c("a", "b"); dim(x)<-c(2,1); dimnames(x)<-list(c("Z", "X"), NULL); x[, "Z"] }
Error in x[, "Z"] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1); x[[-4]]<-7 }
Error in x[[-4]] <- 7 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1); x[[-4]]<-NULL }
Error in x[[-4]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1); x[[NA]] }
Error in x[[NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(1,2); dimnames(x)<-list("a", c("b", "c")); x[,1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(1,2); dimnames(x)<-list(NULL, c("b", "c")); x[,1] }
b
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1); dimnames(x)<-list(c("b", "c"), "d"); x[1,] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1); dimnames(x)<-list(c("b", "c"), NULL); x[1,] }
b
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c("b", "c"), "a", NULL); x[1,,] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c("b", "c"), NULL, "a"); x[1,,] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c("b", "c"), NULL, NULL); x[1,,] }
b
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-2; attr(x, "foo")<-"foo"; x["a"]<-42; attributes(x) }
$foo
[1] "foo"

$names
[1] ""  ""  "a"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-2; attr(x, "foo")<-"foo"; x[1]<-42; attributes(x) }
$dim
[1] 2

$foo
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list("a", c("b", "c")); x["z", "x"] }
Error: subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list("a", c("b", "c")); x[["z", "x"]] }
Error in x[["z", "x"]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); x["a", "b"] }
Error: no 'dimnames' attribute for array

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); x[["a", "b"]] }
Error in x[["a", "b"]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); x[[c("a")]] }
Error in x[[c("a")]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); dim(x)<-c(1,2); x[c("a")] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); x[[c("a")]] }
Error in x[[c("a")]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); x[[c("a", "b")]] }
Error in x[[c("a", "b")]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); x[c("a")] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2); x[c("a", "b")] }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3); x[[-1]]<-7 }
Error in x[[-1]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3); x[[-1]]<-NULL }
Error in x[[-1]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3); x[[-4]]<-7 }
Error in x[[-4]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3); x[[-4]]<-NULL }
Error in x[[-4]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1,1]<-NULL; x }
Error in x[1, 1] <- NULL :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1]<-NULL; x }
Error in x[1] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1,1]]<-NULL; x }
Error in x[[1, 1]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(5,10); names(x)<-c(101, 102); names(x)[1]<-42; x }
 42 102
  5  10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(TRUE,TRUE,FALSE); x[1L] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(TRUE,TRUE,FALSE); x[2L] }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(TRUE,TRUE,FALSE); x[3L] }
[1] FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1); x["b"]<-2; x }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1); x[c("a","b")]<-c(7,42); x }
 a  b
 7 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1); x[c("a","b","b")]<-c(7,42,100); x }
  a   b
  7 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1, b=2); x[1] }
a
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1, b=2); x[[1]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1, b=2); x[[c("z", "x")]] }
Error in x[[c("z", "x")]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-c(a=1, b=2); x[c("z", "x")] }
<NA> <NA>
  NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x["y"] }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[["y"]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[-1]] }
Error in x[[-1]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[-4]]<-7 }
Error in x[[-4]] <- 7 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[-4]]<-NULL }
Error in x[[-4]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[0]] }
Error in x[[0]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[NA]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[NULL]] }
Error in x[[NULL]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[as.integer(NA)]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(0)]] }
Error in x[[c(0)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 0)]] }
Error in x[[c(1, 0)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 1)]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 1, 1)]] }
Error in x[[c(1, 1, 1)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 2)]] }
Error in x[[c(1, 2)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, 2, 0)]] }
Error in x[[c(1, 2, 0)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(1, NA)]] }
Error in x[[c(1, NA)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(NA)]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(NULL)]] }
Error in x[[c(NULL)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(TRUE, FALSE)]] }
Error in x[[c(TRUE, FALSE)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1); x[[c(TRUE, TRUE)]] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, 2, list(42)); x[[c(-1, 1)]]<-7; x }
Error in x[[c(-1, 1)]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); dim(x)<-c(1,2); x[[c(2, 5)]]<-7; x }
     [,1] [,2]
[1,] 1    List,5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); dim(x)<-c(1,2); x[c(2, 5)]<-7; x }
[[1]]
[1] 1

[[2]]
[1] 7

[[3]]
NULL

[[4]]
NULL

[[5]]
[1] 7


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(-1, 1)]]<-7; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 7



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(-1, 1)]]<-NULL; x }
[[1]]
[1] 1

[[2]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(-3, 1)]]<-7; x }
Error in x[[c(-3, 1)]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(2, 1)]]<-NULL; x }
[[1]]
[1] 1

[[2]]
list()


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(2, 5)]]<-7; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 42

[[2]][[2]]
NULL

[[2]][[3]]
NULL

[[2]][[4]]
NULL

[[2]][[5]]
[1] 7



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[[c(2, 5)]]<-NULL; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 42



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42)); x[c(2, 5)]<-7; x }
[[1]]
[1] 1

[[2]]
[1] 7

[[3]]
NULL

[[4]]
NULL

[[5]]
[1] 7


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42, 1)); x[[c(-1, -2)]]<-7; x }
[[1]]
[1] 1

[[2]]
[[2]][[1]]
[1] 7

[[2]][[2]]
[1] 1



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42, 1)); x[[c(-1, -3)]]<-7; x }
Error in x[[c(-1, -3)]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1, list(42, 1, 2)); x[[c(-1, -2)]]<-7; x }
Error in x[[c(-1, -2)]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-1]] }
Error in x[[-1]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-1]]<-7 }
Error in x[[-1]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-1]]<-NULL }
Error in x[[-1]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-4]]<-7 }
Error in x[[-4]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-4]]<-NULL }
Error in x[[-4]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3); x[[-5]] }
Error in x[[-5]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1,1]<-NULL; x }
Error in x[1, 1] <- NULL :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1]<-NULL; x }
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1,1]]<-NULL; x }
Error in x[[1, 1]] <- NULL :
  incompatible types (from NULL to list) in [[ assignment

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1]]<-NULL; x }
[[1]]
[1] 2

[[2]]
[1] 3

[[3]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(-1, 1)]] }
Error in x[[c(-1, 1)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(0, 1)]] }
Error in x[[c(0, 1)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(1, -1)]] }
Error in x[[c(1, -1)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(1, 2)]] }
Error in x[[c(1, 2)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(1, NULL, 2)]] }
Error in x[[c(1, NULL, 2)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(2, 1, 3)]] }
Error in x[[c(2, 1, 3)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NA, 1)]] }
Error in x[[c(NA, 1)]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL, 2, 1, 3)]] }
Error in x[[c(NULL, 2, 1, 3)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL, 2, NULL, 1, 3)]] }
Error in x[[c(NULL, 2, NULL, 1, 3)]] :
  recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL, 2,1)]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL, NULL,1)]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(42,2,3); x[[c(NULL,1)]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x["a"] }
$a
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x["b"] }
$<NA>
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x[["a"]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x[["b"]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=42); x[[c("a", "y")]] }
Error in x[[c("a", "y")]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=list(42)); x[[c("a", "y")]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(a=list(b=42)); x[[c("a", "b")]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,42)); x[[c(1, 2)]] }
[1] 42

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42))); x[[c(1, 2)]] }
[[1]]
[1] 42


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42))); x[[c(1, 2)]]<-7; x }
[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[1] 7



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 2)]] }
[[1]]
[1] 143


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 2)]]<-7; x }
[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[[1]][[2]][[1]]
[1] 42

[[1]][[2]][[2]]
[1] 7




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 7)]]<-7; x }
[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[[1]][[2]][[1]]
[1] 42

[[1]][[2]][[2]]
[[1]][[2]][[2]][[1]]
[1] 143


[[1]][[2]][[3]]
NULL

[[1]][[2]][[4]]
NULL

[[1]][[2]][[5]]
NULL

[[1]][[2]][[6]]
NULL

[[1]][[2]][[7]]
[1] 7




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 7, 7)]]<-7; x }
Error in `[[<-`(`*tmp*`, c(1, 2, 7, 7), value = 7) :
  no such index at level 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, 2, 2, 1)]]<-7; x }
[[1]]
[[1]][[1]]
[1] 1

[[1]][[2]]
[[1]][[2]][[1]]
[1] 42

[[1]][[2]][[2]]
[[1]][[2]][[2]][[1]]
[1] 7





##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, 2, 2, NA)]]<-7; x }
Error in x[[c(1, 2, 2, NA)]] <- 7 :
  attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, NA, 2, 1)]]<-7; x }
Error in `[[<-`(`*tmp*`, c(1, NA, 2, 1), value = 7) :
  no such index at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMoreVectorsOther
#{ y<-list(42,7); dim(y)<-c(1:2); attr(y, "foo")<-"foo"; x<-list(1, y); dim(x)<-c(1,2); x[[c(2, 1)]]<-7; x[2] }
[[1]]
     [,1] [,2]
[1,] 7    7
attr(,"foo")
[1] "foo"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[,0,]) }
[1] 2 0 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,-1,0]) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,2,0]) }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,3,0]) }
Error: subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); dim(x[1,0,]) }
[1] 0 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); x[-1,-1, 0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testMultiDimScalarIndex
#{ x<-1:8; dim(x)<-c(2,2,2); x[-1,0,] }
     [,1] [,2]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA] }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42); x }
Error in x[1, NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1] }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42); x }
Error in x[NA, 1] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA] }
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42); x }
Error in x[NA, NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA] }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-7; x }
     [,1] [,2]
[1,]    1    3
[2,]    2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7, 42, 1); x }
Error in x[NA] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7,42); x }
Error in x[NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]] }
Error in x[[1, NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-7; x }
Error in x[[1, NA]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42); x }
Error in x[[1, NA]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42, 1); x }
Error in x[[1, NA]] <- c(7, 42, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]] }
Error in x[[NA, 1]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-7; x }
Error in x[[NA, 1]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42); x }
Error in x[[NA, 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42, 1); x }
Error in x[[NA, 1]] <- c(7, 42, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]] }
Error in x[[NA, NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-7; x }
Error in x[[NA, NA]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42); x }
Error in x[[NA, NA]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42, 1); x }
Error in x[[NA, NA]] <- c(7, 42, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]] }
Error in x[[NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-7; x }
Error in x[[NA]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42); x }
Error in x[[NA]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42, 1); x }
Error in x[[NA]] <- c(7, 42, 1) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA] }
[[1]]
NULL

[[2]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-7; x }
     [,1] [,2]
[1,] 1    3
[2,] 2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42); x }
Error in x[1, NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42, 1); x }
Error in x[1, NA] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1] }
[[1]]
NULL

[[2]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-7; x }
     [,1] [,2]
[1,] 1    3
[2,] 2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42); x }
Error in x[NA, 1] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42, 1); x }
Error in x[NA, 1] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA] }
     [,1] [,2]
[1,] NULL NULL
[2,] NULL NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-7; x }
     [,1] [,2]
[1,] 1    3
[2,] 2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42); x }
Error in x[NA, NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42, 1); x }
Error in x[NA, NA] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA] }
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-7; x }
     [,1] [,2]
[1,] 1    3
[2,] 2    4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7, 42, 1); x }
Error in x[NA] <- c(7, 42, 1) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7,42); x }
Error in x[NA] <- c(7, 42) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]] }
Error in x[[1, NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-7; x }
Error in x[[1, NA]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42); x }
Error in x[[1, NA]] <- c(7, 42) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42, 1); x }
Error in x[[1, NA]] <- c(7, 42, 1) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]] }
Error in x[[NA, 1]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-7; x }
Error in x[[NA, 1]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42); x }
Error in x[[NA, 1]] <- c(7, 42) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42, 1); x }
Error in x[[NA, 1]] <- c(7, 42, 1) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]] }
Error in x[[NA, NA]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-7; x }
Error in x[[NA, NA]] <- 7 : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42); x }
Error in x[[NA, NA]] <- c(7, 42) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42, 1); x }
Error in x[[NA, NA]] <- c(7, 42, 1) : [[ ]] subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-7; x }
Error in x[[NA]] <- 7 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42); x }
Error in x[[NA]] <- c(7, 42) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testNAIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42, 1); x }
Error in x[[NA]] <- c(7, 42, 1) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-(1:4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-10001:10008; dim(x)<-c(2,2,2); x }
, , 1

      [,1]  [,2]
[1,] 10001 10003
[2,] 10002 10004

, , 2

      [,1]  [,2]
[1,] 10005 10007
[2,] 10006 10008


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-101:108; dim(x)<-c(2,2,2); dimnames(x)<-list(c(1, 2), c(3, 4), c(5, 6)); x }
, , 5

    3   4
1 101 103
2 102 104

, , 6

    3   4
1 105 107
2 106 108


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:16; dim(x)<-c(2,2,2,2); x }
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2

     [,1] [,2]
[1,]   13   15
[2,]   14   16


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:16; dim(x)<-c(2,4,2); x }
, , 1

     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8

, , 2

     [,1] [,2] [,3] [,4]
[1,]    9   11   13   15
[2,]   10   12   14   16


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:256; dim(x)<-c(4,4,4,4); x }
, , 1, 1

     [,1] [,2] [,3] [,4]
[1,]    1    5    9   13
[2,]    2    6   10   14
[3,]    3    7   11   15
[4,]    4    8   12   16

, , 2, 1

     [,1] [,2] [,3] [,4]
[1,]   17   21   25   29
[2,]   18   22   26   30
[3,]   19   23   27   31
[4,]   20   24   28   32

, , 3, 1

     [,1] [,2] [,3] [,4]
[1,]   33   37   41   45
[2,]   34   38   42   46
[3,]   35   39   43   47
[4,]   36   40   44   48

, , 4, 1

     [,1] [,2] [,3] [,4]
[1,]   49   53   57   61
[2,]   50   54   58   62
[3,]   51   55   59   63
[4,]   52   56   60   64

, , 1, 2

     [,1] [,2] [,3] [,4]
[1,]   65   69   73   77
[2,]   66   70   74   78
[3,]   67   71   75   79
[4,]   68   72   76   80

, , 2, 2

     [,1] [,2] [,3] [,4]
[1,]   81   85   89   93
[2,]   82   86   90   94
[3,]   83   87   91   95
[4,]   84   88   92   96

, , 3, 2

     [,1] [,2] [,3] [,4]
[1,]   97  101  105  109
[2,]   98  102  106  110
[3,]   99  103  107  111
[4,]  100  104  108  112

, , 4, 2

     [,1] [,2] [,3] [,4]
[1,]  113  117  121  125
[2,]  114  118  122  126
[3,]  115  119  123  127
[4,]  116  120  124  128

, , 1, 3

     [,1] [,2] [,3] [,4]
[1,]  129  133  137  141
[2,]  130  134  138  142
[3,]  131  135  139  143
[4,]  132  136  140  144

, , 2, 3

     [,1] [,2] [,3] [,4]
[1,]  145  149  153  157
[2,]  146  150  154  158
[3,]  147  151  155  159
[4,]  148  152  156  160

, , 3, 3

     [,1] [,2] [,3] [,4]
[1,]  161  165  169  173
[2,]  162  166  170  174
[3,]  163  167  171  175
[4,]  164  168  172  176

, , 4, 3

     [,1] [,2] [,3] [,4]
[1,]  177  181  185  189
[2,]  178  182  186  190
[3,]  179  183  187  191
[4,]  180  184  188  192

, , 1, 4

     [,1] [,2] [,3] [,4]
[1,]  193  197  201  205
[2,]  194  198  202  206
[3,]  195  199  203  207
[4,]  196  200  204  208

, , 2, 4

     [,1] [,2] [,3] [,4]
[1,]  209  213  217  221
[2,]  210  214  218  222
[3,]  211  215  219  223
[4,]  212  216  220  224

, , 3, 4

     [,1] [,2] [,3] [,4]
[1,]  225  229  233  237
[2,]  226  230  234  238
[3,]  227  231  235  239
[4,]  228  232  236  240

, , 4, 4

     [,1] [,2] [,3] [,4]
[1,]  241  245  249  253
[2,]  242  246  250  254
[3,]  243  247  251  255
[4,]  244  248  252  256


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(2,2,2,2,2); x }
, , 1, 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2, 1

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2, 1

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 1, 2

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 1, 2

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 1, 2, 2

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 2, 2, 2

     [,1] [,2]
[1,]   29   31
[2,]   30   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(2,2,2,4); x }
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 3

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 3

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 1, 4

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 2, 4

     [,1] [,2]
[1,]   29   31
[2,]   30   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(2,2,4,2); x }
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 3, 1

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 4, 1

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 2

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 2

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 3, 2

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 4, 2

     [,1] [,2]
[1,]   29   31
[2,]   30   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(2,4,2,2); x }
, , 1, 1

     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8

, , 2, 1

     [,1] [,2] [,3] [,4]
[1,]    9   11   13   15
[2,]   10   12   14   16

, , 1, 2

     [,1] [,2] [,3] [,4]
[1,]   17   19   21   23
[2,]   18   20   22   24

, , 2, 2

     [,1] [,2] [,3] [,4]
[1,]   25   27   29   31
[2,]   26   28   30   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:32; dim(x)<-c(4,2,2,2); x }
, , 1, 1

     [,1] [,2]
[1,]    1    5
[2,]    2    6
[3,]    3    7
[4,]    4    8

, , 2, 1

     [,1] [,2]
[1,]    9   13
[2,]   10   14
[3,]   11   15
[4,]   12   16

, , 1, 2

     [,1] [,2]
[1,]   17   21
[2,]   18   22
[3,]   19   23
[4,]   20   24

, , 2, 2

     [,1] [,2]
[1,]   25   29
[2,]   26   30
[3,]   27   31
[4,]   28   32


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(1,2,2); x }
, , 1

     [,1] [,2]
[1,]    1    2

, , 2

     [,1] [,2]
[1,]    3    4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c("a", "b"), "c", c("d", "e")); x }
, , d

  c
a 1
b 2

, , e

  c
a 3
b 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(2,1,2); x }
, , 1

     [,1]
[1,]    1
[2,]    2

, , 2

     [,1]
[1,]    3
[2,]    4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(2,2,1); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:4; dim(x)<-c(2,2,1,1); x }
, , 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:64; dim(x)<-c(2,2,2,2,2,2); x }
, , 1, 1, 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1, 1, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2, 1, 1

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2, 1, 1

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 1, 2, 1

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 1, 2, 1

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 1, 2, 2, 1

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 2, 2, 2, 1

     [,1] [,2]
[1,]   29   31
[2,]   30   32

, , 1, 1, 1, 2

     [,1] [,2]
[1,]   33   35
[2,]   34   36

, , 2, 1, 1, 2

     [,1] [,2]
[1,]   37   39
[2,]   38   40

, , 1, 2, 1, 2

     [,1] [,2]
[1,]   41   43
[2,]   42   44

, , 2, 2, 1, 2

     [,1] [,2]
[1,]   45   47
[2,]   46   48

, , 1, 1, 2, 2

     [,1] [,2]
[1,]   49   51
[2,]   50   52

, , 2, 1, 2, 2

     [,1] [,2]
[1,]   53   55
[2,]   54   56

, , 1, 2, 2, 2

     [,1] [,2]
[1,]   57   59
[2,]   58   60

, , 2, 2, 2, 2

     [,1] [,2]
[1,]   61   63
[2,]   62   64


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:64; dim(x)<-c(2,2,2,4,2); x }
, , 1, 1, 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2, 1, 1

     [,1] [,2]
[1,]    5    7
[2,]    6    8

, , 1, 2, 1

     [,1] [,2]
[1,]    9   11
[2,]   10   12

, , 2, 2, 1

     [,1] [,2]
[1,]   13   15
[2,]   14   16

, , 1, 3, 1

     [,1] [,2]
[1,]   17   19
[2,]   18   20

, , 2, 3, 1

     [,1] [,2]
[1,]   21   23
[2,]   22   24

, , 1, 4, 1

     [,1] [,2]
[1,]   25   27
[2,]   26   28

, , 2, 4, 1

     [,1] [,2]
[1,]   29   31
[2,]   30   32

, , 1, 1, 2

     [,1] [,2]
[1,]   33   35
[2,]   34   36

, , 2, 1, 2

     [,1] [,2]
[1,]   37   39
[2,]   38   40

, , 1, 2, 2

     [,1] [,2]
[1,]   41   43
[2,]   42   44

, , 2, 2, 2

     [,1] [,2]
[1,]   45   47
[2,]   46   48

, , 1, 3, 2

     [,1] [,2]
[1,]   49   51
[2,]   50   52

, , 2, 3, 2

     [,1] [,2]
[1,]   53   55
[2,]   54   56

, , 1, 4, 2

     [,1] [,2]
[1,]   57   59
[2,]   58   60

, , 2, 4, 2

     [,1] [,2]
[1,]   61   63
[2,]   62   64


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:64; dim(x)<-c(4,4,4); x }
, , 1

     [,1] [,2] [,3] [,4]
[1,]    1    5    9   13
[2,]    2    6   10   14
[3,]    3    7   11   15
[4,]    4    8   12   16

, , 2

     [,1] [,2] [,3] [,4]
[1,]   17   21   25   29
[2,]   18   22   26   30
[3,]   19   23   27   31
[4,]   20   24   28   32

, , 3

     [,1] [,2] [,3] [,4]
[1,]   33   37   41   45
[2,]   34   38   42   46
[3,]   35   39   43   47
[4,]   36   40   44   48

, , 4

     [,1] [,2] [,3] [,4]
[1,]   49   53   57   61
[2,]   50   54   58   62
[3,]   51   55   59   63
[4,]   52   56   60   64


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2, 4); toString(x) }
[1] "1, 2, 3, 4, 5, 6, 7, 8"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2, 4); x }
     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), NULL, NULL); x }
, , 1

    [,1] [,2]
101    1    3
102    2    4

, , 2

    [,1] [,2]
101    5    7
102    6    8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), NULL, c(105, 106)); x }
, , 105

    [,1] [,2]
101    1    3
102    2    4

, , 106

    [,1] [,2]
101    5    7
102    6    8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(103, 104), NULL); x }
, , 1

    103 104
101   1   3
102   2   4

, , 2

    103 104
101   5   7
102   6   8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(103, 104), c(105, 106)); x }
, , 105

    103 104
101   1   3
102   2   4

, , 106

    103 104
101   5   7
102   6   8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(105, 106)); x }
, , 1

    105 106
101   1   3
102   2   4

, , 2

    105 106
101   5   7
102   6   8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-1:8; dim(x)<-c(2,2,2); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c("a", "b", "c", "d"); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
      a  a  a  a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa  b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa  b cc  d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1,2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }
     [,1]      [,2]
[1,] Numeric,2 2
[2,] 1         3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1:2, 100003:100004,10005:10008); dim(x)<-c(2,2,2); x }
, , 1

     [,1]   [,2]
[1,]    1 100003
[2,]    2 100004

, , 2

      [,1]  [,2]
[1,] 10005 10007
[2,] 10006 10008


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(1:4,10005:10008); dim(x)<-c(2,2,2); x }
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

      [,1]  [,2]
[1,] 10005 10007
[2,] 10006 10008


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(TRUE, FALSE, TRUE, FALSE); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
      a  a  a  a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa  b  c  d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-c(as.raw(1),as.raw(2),as.raw(3),as.raw(4)); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa  b cc  d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-character(0); y<-list(x, 1+1i, 2+2i, 3+3i); dim(y)<-c(2, 2); y }
     [,1]        [,2]
[1,] Character,0 2+2i
[2,] 1+1i        3+3i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 0); x }
<0 x 0 matrix>

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 0, 2, 2, 2); x }
, , 1, 1, 1



, , 2, 1, 1



, , 1, 2, 1



, , 2, 2, 1



, , 1, 1, 2



, , 2, 1, 2



, , 1, 2, 2



, , 2, 2, 2




##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 1); dimnames(x)<-list(NULL, "a"); x }
     a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 1); x }
     [,1]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 3); x }
     [,1] [,2] [,3]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(0, 4); dimnames(x)<-list(NULL, c("a", "bbbbbbbbbbbb", "c", "d")); x }
     a bbbbbbbbbbbb c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0); dimnames(x)<-list("a"); x }

a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0); x }

[1,]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 0); x }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 0, 2); x }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 2); x }
, , 1


[1,]

, , 2


[1,]


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 2, 0, 2); x }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(1, 0, 2, 2, 2); dimnames(x)<-list("a", NULL, c("b", "c"), c("d", "e"), c("f", "g")); x }
, , b, d, f


a

, , c, d, f


a

, , b, e, f


a

, , c, e, f


a

, , b, d, g


a

, , c, d, g


a

, , b, e, g


a

, , c, e, g


a


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); dim(x)<-c(3, 0); x }

[1,]
[2,]
[3,]

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-integer(0); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }
     [,1]      [,2]
[1,] Integer,0 2
[2,] 1         3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(1, 2, 3, 4); dim(x)<-c(2, 2); toString(x) }
[1] "1, 2, 3, 4"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(1,2,3,4); dim(x)<-c(2, 2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }
     [,1]   [,2]
[1,] List,4 2
[2,] 1      3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(1,2,3,4,5,6,7,8); dim(x)<-c(2,2,2); x }
, , 1

     [,1] [,2]
[1,] 1    3
[2,] 2    4

, , 2

     [,1] [,2]
[1,] 5    7
[2,] 6    8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("a", "b", "c", "d")); x[0, c(1,1,1,1)] }
     a a a a

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,1,1,1)] }
     aaa aaa aaa aaa

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "c", "d")); x[0, c(1,2,3,4)] }
     aaa b c d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ x<-list(TRUE, "a", 42, 1.1); dim(x)<-c(1,4); dimnames(x)<-list("z", c("aaa", "b", "cc", "d")); x[0, c(1,2,3,4)] }
     aaa b cc d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testPrint
#{ z<-list(1,2,3,4); dim(z)<-c(2,2); x<-list(z,2,3,42); dim(x)<-c(2, 2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }
     [,1]   [,2]
[1,] List,4 2
[2,] 1      3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-7 }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = 7) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-NULL }
Error in x[[as.raw(1), 1]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-c(7,42) }
Error in x[[as.raw(1), 1]] <- c(7, 42) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-integer() }
Error in x[[as.raw(1), 1]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-7 }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = 7) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-NULL }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = NULL) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = c(7, 42)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-integer() }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = integer(0)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-NULL }
Error in x[[as.raw(1)]] <- NULL :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1) }
Error in x[[as.raw(1)]] <- c(1) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1,2) }
Error in x[[as.raw(1)]] <- c(1, 2) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1,2,3) }
Error in x[[as.raw(1)]] <- c(1, 2, 3) :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[[as.raw(1)]]<-integer() }
Error in x[[as.raw(1)]] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-NULL }
Error in x[as.raw(1)] <- NULL : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1) }
Error in x[as.raw(1)] <- c(1) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1,2) }
Error in x[as.raw(1)] <- c(1, 2) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1,2,3) }
Error in x[as.raw(1)] <- c(1, 2, 3) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-c(1,2,3,4); x[as.raw(1)]<-integer() }
Error in x[as.raw(1)] <- integer() : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-7 }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = 7) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-NULL }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = NULL) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-c(7,42) }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = c(7, 42)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-integer() }
Error in `[[<-`(`*tmp*`, as.raw(1), 1, value = integer(0)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-7 }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = 7) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-NULL }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = NULL) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-c(7,42) }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = c(7, 42)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-integer() }
Error in `[<-`(`*tmp*`, as.raw(1), 1, value = integer(0)) :
  invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-NULL }
Error in x[[as.raw(1)]] <- NULL : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1) }
Error in x[[as.raw(1)]] <- c(1) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1,2) }
Error in x[[as.raw(1)]] <- c(1, 2) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1,2,3) }
Error in x[[as.raw(1)]] <- c(1, 2, 3) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[[as.raw(1)]]<-integer() }
Error in x[[as.raw(1)]] <- integer() : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-NULL }
Error in x[as.raw(1)] <- NULL : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1) }
Error in x[as.raw(1)] <- c(1) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1,2) }
Error in x[as.raw(1)] <- c(1, 2) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1,2,3) }
Error in x[as.raw(1)] <- c(1, 2, 3) : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testRawIndex
#{ x<-list(1,2,3,4); x[as.raw(1)]<-integer() }
Error in x[as.raw(1)] <- integer() : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[-1L] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[-2L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[0L] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[2L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[FALSE] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[NA] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleAsVector
#{ x<-1; x[TRUE] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-1:3; x[1.1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-1:3; x[2.1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-1:3; x[3.1] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-3:1; x[1.1] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-3:1; x[2.1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-3:1; x[3.1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1,2,3); x[1.1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1,2,3); x[2.1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1,2,3); x[3.1] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1L,2L,3L); x[1.1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1L,2L,3L); x[2.1] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleIndexOnVector
#{ x<-c(1L,2L,3L); x[3.1] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-1:3; x[-1.1] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-1:3; x[-2.1] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-1:3; x[-3.1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1,2,3); x[-1.1] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1,2,3); x[-2.1] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1,2,3); x[-3.1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-1.1] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-2.1] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarDoubleNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-3.1] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
# { x <- 1:3 ; x[[NULL]] }
Error in x[[NULL]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ b <- c(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[1] <- 3+1i ; b }
     [,1]
[1,] 3+1i
[2,] 3+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b["hello"] <- NULL ; b }
[[1]]
[1] 1+2i

[[2]]
[1] 3+4i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, 1, 3:4) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, as.integer(NA), 3:4) }
Error in b[[i]] <- v : more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, list(), 3) }
Error in b[[i]] <- v : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, list(1), 3) }
Error in b[[i]] <- v : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), "hello", TRUE) ; f(1:2, 1+2i, 3) }
Error in b[i] <- v : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-1) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-3) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,-1) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,4) }
Error in x[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,NA) }
Error in x[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,c(3,3)) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,c(TRUE,FALSE)) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:4,-3) }
Error in x[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(2,-2) }
Error in x[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(2,-3) }
Error in x[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),1+0i) }
Error in x[[i]] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),FALSE) }
Error in x[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),TRUE) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[[i]]} ; f(list(1,2,3,4), 3); f(f,2) }
Error in x[[i]] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-2) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,-4) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,0) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:2,NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,c(1,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(1:3,c(TRUE,FALSE)) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(as.raw(c(10,11)),-4) }
[1] 0a 0b

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(as.raw(c(10,11)),0) }
raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(as.raw(c(10,11)),4) }
[1] 00

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c("a","b"),-4) }
[1] "a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c("a","b"),0) }
character(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c("a","b"),4) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c("a","b"),NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(1+2i,3+4i),-4) }
[1] 1+2i 3+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(1+2i,3+4i),4) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(1+2i,3+4i),NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),-2) }
[1] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),-4) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),0) }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),4) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(TRUE,FALSE),NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a="a",b="b"),0) }
named character(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a=1+2i,b=3+4i),4) }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a=1L,b=2L),0) }
named integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a=TRUE,b=FALSE),0) }
named logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(c(a=TRUE,b=FALSE),4) }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(integer(), NA) }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(), NA) }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),-4) }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(1,2),4) }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; f(list(a=1,b=2),4) }
$<NA>
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(1+2i,3+4i) ; attr(z, "my") <- 1 ; f(z,-10) }
[1] 1+2i 3+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(1,3) ; attr(z, "my") <- 1 ; f(z,-10) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(1L,3L) ; attr(z, "my") <- 1 ; f(z,-10) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(TRUE,FALSE) ; attr(z, "my") <- 1 ; f(z,-10) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(a="a",b="b") ; attr(z, "my") <- 1 ; f(z,-10) }
  a   b
"a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), "a") ; z <- c(a=as.raw(10),b=as.raw(11)) ; attr(z, "my") <- 1 ; f(z,-10) }
 a  b
0a 0b

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,"a") ; f(function(){3},"b") }
Error in x[i] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,"a") ; f(x,2) }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,"a") }
a
1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1 ; attr(x, "hi") <- 2; x[2] <- 2; attr(x, "hi") }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:2 ; x[as.integer(NA)] <- 3:4 }
Error in x[as.integer(NA)] <- 3:4 :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[2] <- integer() }
Error in x[2] <- integer() : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[TRUE] <- 10 ; x }
[1] 10 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[[FALSE]] <- 10 ; x }
Error in x[[FALSE]] <- 10 : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[[NA]] <- 10 ; x }
Error in x[[NA]] <- 10 : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[[TRUE]] <- 10 ; x }
[1] 10  2  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:3 ; x[[TRUE]] <- 1:2 }
Error in x[[TRUE]] <- 1:2 :
  more elements supplied than there are to replace

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:4 ; y <- -1 ; x[y] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- 1:4 ; y <- 10 ; x[y] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- as.list(1:2) ; f <- function(i) { x[[i]] <- NULL ; x } ; f(1) ; f(as.raw(10)) }
Error in x[[i]] <- NULL : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- as.list(1:2) ; f <- function(i) { x[i] <- NULL ; x } ; f(1) ; f(NULL) }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(1,4) ; y <- -1 ; x[y] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(1,4) ; y <- -1L ; x[y] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(1,4) ; y <- 10 ; x[y] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(1,4) ; y <- 10L ; x[y] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(TRUE, FALSE, NA) ; x[0] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a="A", b="B", c="C") ; x[-2] }
  a   c
"A" "C"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a="A", b="B", c="C") ; x[0] }
named character(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a="A", b="B", c="C") ; x[10] }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1+1i, b=2+2i, c=3+3i) ; x[0] }
named complex(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1+1i, b=2+2i, c=3+3i) ; x[10] }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1+2i, b=2+3i, c=3) ; x[-2] }
   a    c
1+2i 3+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[-2] }
a c
1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[0] }
named numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[10] }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[2] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1, b=2, c=3) ; x[[2]] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1,b=2) ; y <- 2 ; x[y] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1,b=2) ; y <- 2L ; x[y] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; x["b"] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; x["d"] }
d
4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1L, b=2L, c=3L) ; x[-2] }
a c
1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1L, b=2L, c=3L) ; x[0] }
named integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=1L, b=2L, c=3L) ; x[10] }
<NA>
  NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=TRUE, b=FALSE, c=NA) ; x[-2] }
   a    c
TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=TRUE, b=FALSE, c=NA) ; x[0] }
named logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[-2] }
 a  c
0a 0c

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[0] }
named raw(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[10] }
<NA>
00

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- c(as.raw(10), as.raw(11), as.raw(12)) ; x[-2] }
[1] 0a 0c

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- function(){3} ; y <- 3 ; x[[y]] }
Error in x[[y]] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1,2,3,4) ; y <- 3 ; x[[y]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1,2,3,4) ; y <- 3 ; x[y] }
[[1]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1,4) ; y <- -1 ; x[y] }
[[1]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1,4) ; y <- 4 ; x[y] }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(1L, 2L, 3L) ; x[10] }
[[1]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(a=1,b=4) ; y <- 2 ; x[y] }
$b
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x <- list(a=1L, b=2L, c=3L) ; x[0] }
named list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-1:4; x[c(-0.5)] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-1:4; x[c(-1.5)] }
[1] 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-1:4; x[c(1.4,1.8)] }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-5:1 ; y <- -1L;  x[y] }
[1] 4 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-5:1 ; y <- 2L;  x[[y]] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-5:1 ; y <- 6L;  x[y] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-as.list(5:1) ; y <- 1:2;  x[[y]] }
Error in x[[y]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-as.list(5:1) ; y <- 2L;  x[[y]] }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-c(TRUE,TRUE,FALSE); x[0-2] }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-function() {1} ; x[2L] }
Error in x[2L] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-function() {1} ; y <- 2;  x[y] }
Error in x[y] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIndex
#{ x<-function() {1} ; y <- 2;  y[x] }
Error in y[x] : invalid subscript type 'closure'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[-1L] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[-2L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[0L] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[2L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[FALSE] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[NA] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntAsVector
#{ x<-1L; x[TRUE] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-1:3; x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-1:3; x[2L] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-1:3; x[3L] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-3:1; x[1L] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-3:1; x[2L] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-3:1; x[3L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1,2,3); x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1,2,3); x[2L] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1,2,3); x[3L] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1L,2L,3L); x[1L] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1L,2L,3L); x[2L] }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexOnVector
#{ x<-c(1L,2L,3L); x[3L] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1,2,3); x[2.3] <- "hello"; x }
[1] "1"     "hello" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1,2,3); x[2.3] <- 100; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1,2,3); x[2.3] <- 100i; x }
[1] 1+  0i 0+100i 3+  0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1,2,3); x[2.3] <- FALSE; x }
[1] 1 0 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- "hello"; x }
[1] "1"     "hello" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- 100; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- 100L; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- 100i; x }
[1] 1+  0i 0+100i 3+  0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(1L,2L,3L); x[2.3] <- FALSE; x }
[1] 1 0 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- "hello"; x }
[1] "TRUE"  "hello" "FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100; x }
[1]   1 100   0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100L; x }
[1]   1 100   0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100i; x }
[1] 1+  0i 0+100i 0+  0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntIndexScalarValueUpdateOnVector
#{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- FALSE; x }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-1:3; x[-1L] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-1:3; x[-2L] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-1:3; x[-3L] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1,2,3); x[-1L] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1,2,3); x[-2L] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1,2,3); x[-3L] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-1L] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-2L] }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarIntNegativeIndexOnVector
#{ x<-c(1L,2L,3L); x[-3L] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-1:3; x[FALSE] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-1:3; x[TRUE] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-c(1,2,3); x[FALSE] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-c(1,2,3); x[TRUE] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-c(1L,2L,3L); x[FALSE] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarLogicOnVector
#{ x<-c(1L,2L,3L); x[TRUE] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; typeof(x[NA]) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[-0.1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[-4.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[-4L] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[0.1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[0L] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[4.1] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[4L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-1:3; x[NA] }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); typeof(x[NA]) }
[1] "double"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[-0.1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[-4.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[-4L] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[0.1] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[0L] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[0] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[4.1] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[4L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1,2,3); x[NA] }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); typeof(x[NA]) }
[1] "integer"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[-0.1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[-4.1] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[-4L] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[0.1] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[0L] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[0] }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[4.1] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[4L] }
[1] NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarOutOfBoundsOnVector
#{ x<-c(1L,2L,3L); x[NA] }
[1] NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
# { b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(1:3,13L) }
[1]  1 13  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
# { x <- as.raw(c(10,11)) ; x["a"] <- NA ; x }
Error in x["a"] <- NA :
  incompatible types (from logical to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
# { x <- c(a=1+2i, b=3+4i) ; x["a"] <- as.raw(13) ; x }
Error in x["a"] <- as.raw(13) :
  incompatible types (from raw to complex) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ a <- c(1L,2L,3L); a <- 1:5; a[3] <- TRUE; a }
[1] 1 2 1 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(1) ; b[[-3]] <- as.raw(13) ; b }
Error in b[[-3]] <- as.raw(13) : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[3] <- 3 ; b }
Error in b[3] <- 3 :
  incompatible types (from double to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[3] <- as.raw(13) ; b }
[1] 01 02 0d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[[-1]] <- as.raw(13) ; b }
[1] 01 0d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[[-2]] <- as.raw(13) ; b }
[1] 0d 02

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[[-3]] <- as.raw(13) ; b }
Error in b[[-3]] <- as.raw(13) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2)) ; b[as.double(NA)] <- as.raw(13) ; b }
[1] 01 02

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- as.raw(c(1,2,3)) ; b[[-2]] <- as.raw(13) ; b }
Error in b[[-2]] <- as.raw(13) : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c("a","b") ; z <- b ; b[[-1L]] <- "xx" ; b }
[1] "a"  "xx"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c("a","b") ; z <- b ; b[[3L]] <- "xx" ; b }
[1] "a"  "b"  "xx"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1+2i,3+4i) ; b[3] <- 2 ; b }
[1] 1+2i 3+4i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[0L] <- 3 ; b }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[0] <- 1+2i ; b }
[1] 1+0i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[3] <- 2+3i ; b }
[1] 1+0i 2+0i 2+3i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[3] <- as.raw(13) ; b }
Error in b[3] <- as.raw(13) :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; b[5L] <- 3 ; b }
[1]  1  2 NA NA  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; b[2L] <- 3 ; b }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(b,13L) }
[1]  1 13

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(c(1,2),10) }
[1]  1 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10L) ; f(1:3,13L) }
[1]  1 13  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10L) ; f(b,13) }
[1]  1 13

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- b ; b[-10L] <- FALSE ; b }
[1] 0 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- b ; b[-2] <- 3L ; b }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- b ; b[3L] <- 3L ; b }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- b ; b[3L] <- FALSE ; b }
[1] 1 2 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1,2) ; z <- c(10,11) ; attr(z,"my") <- 4 ; b[2] <- z ; b }
[1]  1 10
Warning message:
In b[2] <- z :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1L,2L) ; b[0] <- 13L ; b }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1L,2L) ; b[2] <- FALSE ; b }
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(1L,2L) ; b[3] <- 13L ; b }
[1]  1  2 13

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(TRUE,NA) ; b[3] <- FALSE ; b }
[1]  TRUE    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(TRUE,NA) ; z <- b ; b[-10L] <- FALSE ; b }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- c(TRUE,NA) ; z <- b ; b[4L] <- FALSE ; b }
[1]  TRUE    NA    NA FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[3] <- NULL ; b }
[[1]]
[1] 1+2i

[[2]]
[1] 3+4i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- list(TRUE,NA) ; z <- b ; b[[-1L]] <- FALSE ; b }
[[1]]
[1] TRUE

[[2]]
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ b <- list(TRUE,NA) ; z <- b ; b[[4L]] <- FALSE ; b }
[[1]]
[1] TRUE

[[2]]
[1] NA

[[3]]
NULL

[[4]]
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function() { a[3] <- 4 } ; f() }
Error in a[3] <- 4 : object 'a' not found

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i) { b[i] <- 1 } ; f(1:3,2) ; f(1:2, f) }
Error in b[i] <- 1 : invalid subscript type 'closure'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i) { b[i] <- 1 } ; f(1:3,2) ; f(f, 3) }
Error in b[i] <- 1 : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,2,10) ; f(1:2,1:3, 10) }
Error in `[[<-`(`*tmp*`, i, value = 10) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,2,10) ; f(as.list(1:2),1:3, 10) }
Error in `[[<-`(`*tmp*`, i, value = 10) :
  recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,c(2),10) ; f(1:2,0, 10) }
Error in b[[i]] <- v : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,c(2),10) ; f(1:2,2, 10) }
[1]  1 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; v } ; f(1:2,"hi",3L) ; f(1:2,c(2),10) ; f(1:2,as.integer(NA), 10) }
Error in b[[i]] <- v : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; b <- c(10L,2L) ; b[0] <- TRUE ; b }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; b <- c(10L,2L) ; b[3] <- TRUE ; b }
[1] 10  2  1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,-2,10) }
[1] 10  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,2,10) ; f(1:2,as.integer(NA), 10) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1,2),FALSE) ; f(10,3) }
[1] 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1,2),FALSE) ; f(10L,3) }
[1] 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),10L) ; f(1,3) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),10L) ; f(1L,3) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),TRUE) ; f(10,3) }
[1] 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),TRUE) ; f(1L,3) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(TRUE,NA),FALSE) ; f(3,3) }
[1] 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v ; b } ; f(c(TRUE,NA),FALSE) ; f(c(FALSE,TRUE),3) }
[1] 0 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[2] <- v } ; f(1:3,2) ; f(1:2, f) }
Error in b[2] <- v :
  incompatible types (from closure to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[[2]] <- v ; b } ; f(c("a","b"),"d") ; f(1:3,"x") }
[1] "1" "x" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(3,3) }
[1] 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(list(),NULL) }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(list(3),NULL) }
[[1]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,3L) ; f(c(1L,2L),2,3) }
[1] 1 3 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,3L) ; f(c(1L,2L),8,3L) }
[1]  1  2  3  4  5 NA NA  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,FALSE) ; f(c(1L,2L),2,3) }
[1] 1 3 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,FALSE) ; f(c(1L,2L),8,TRUE) }
[1]  1  2  3  4  5 NA NA  1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:2 ; x["a"] <- 10 ; x }
       a
 1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:2 ; x["a"] <- 10+3i ; x }
                a
 1+0i  2+0i 10+3i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:2 ; x["a"] <- FALSE ; x }
    a
1 2 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:2; x[[as.integer(NA)]] <- 10 ; x }
Error in x[[as.integer(NA)]] <- 10 :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- 1:3 ; x[2] <- "hi"; x }
[1] "1"  "hi" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- as.list(1:2) ; x[["z"]] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- as.raw(c(10,11)) ; x["a"] <- as.raw(13) ; x }
       a
0a 0b 0d

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(1,2,3) ; x[2] <- "hi"; x }
[1] "1"  "hi" "3"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(2,3,4) ; x[1] <- 3+4i ; x  }
[1] 3+4i 3+0i 4+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(TRUE,FALSE,FALSE) ; x[2] <- "hi"; x }
[1] "TRUE"  "hi"    "FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(a=1+2i, b=3+4i) ; x["a"] <- "hi" ; x }
     a      b
  "hi" "3+4i"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(a=1+2i, b=3+4i) ; x["a"] <- 10 ; x }
    a     b
10+0i  3+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(a=1,a=2) ; x["a"] <- 10L ; x }
 a  a
10  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(aa=TRUE) ; x["a"] <- list(2L) ; x }
$aa
[1] TRUE

$a
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(aa=TRUE) ; x[["a"]] <- list(2L) ; x }
$aa
[1] TRUE

$a
$a[[1]]
[1] 2



##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(aa=TRUE,b=FALSE) ; x["a"] <- 2L ; x }
aa  b  a
 1  0  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- c(b=2,a=3) ; z <- x ; x["a"] <- 1 ; x }
b a
2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1) ; x[[-1]] <- NULL ; x }
Error in x[[-1]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1) ; x[[-2]] <- NULL ; x }
Error in x[[-2]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[2] <- NULL ; x }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[3] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[[2]] <- NULL ; x }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[[3]] <- NULL ; x }
     [,1]
[1,] 1
[2,] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[-1] <- NULL ; x }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[0] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[NA] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[[0]] <- NULL ; x }
Error in x[[0]] <- NULL : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2) ; x[as.integer(NA)] <- NULL ; x }
[[1]]
[1] 1

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2,3) ; x[[-1]] <- NULL ; x }
Error in x[[-1]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(1,2,3) ; x[[-5]] <- NULL ; x }
Error in x[[-5]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(3,4) ; x[[-10]] <- NULL ; x }
Error in x[[-10]] <- NULL : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(3,4) ; x[[-1]] <- NULL ; x }
[[1]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(3,4) ; x[[-2]] <- NULL ; x }
[[1]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(a=3,b=4) ; x["z"] <- NULL ; x }
$a
[1] 3

$b
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x <- list(a=3,b=4) ; x[["a"]] <- NULL ; x }
$b
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-1:2; x[[0-2]]<-100; x }
[1] 100   2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-1:3; x[1]<-100L; x }
[1] 100   2   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-1:5; x[2]<-1000; x[3] <- TRUE; x[8]<-3L; x }
[1]    1 1000    1    4    5   NA   NA    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-5:1; x[0-2]<-1000; x }
[1] 1000    4 1000 1000 1000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-c(); x[[TRUE]] <- 2; x }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-c(1,2,3); x[2L]<-100; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-c(1,2,3); x[2L]<-100L; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x<-c(1,2,3); x[2]<-FALSE; x }
[1] 1 0 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testScalarUpdate
#{ x[3] <<- 10 }
Error in x[3] <<- 10 : object 'x' not found

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[0:3] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[1:1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[1:2] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[1:3] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1,2,3); x[2:3] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[0:3] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[1:1] }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[1:2] }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[1:3] }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSequenceIntIndexOnVector
#{ x<-c(1L,2L,3L); x[2:3] }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ a <- 'hello'; a[[5]] <- 'done'; a[[3]] <- 'muhuhu'; a; }
[1] "hello"  NA       "muhuhu" NA       "done"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ a <- 'hello'; a[[5]] <- 'done'; b <- a; b[[3]] <- 'muhuhu'; b; }
[1] "hello"  NA       "muhuhu" NA       "done"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ b <- c(11,12) ; b[""] <- 100 ; b }

 11  12 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ b <- c(a=1+2i,b=3+4i) ; dim(b) <- c(2,1) ; b[c("a","b")] <- 3+1i ; b }
             a    b
1+2i 3+4i 3+1i 3+1i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[c("hello","hi")] <- NULL ; b }
[[1]]
[1] 1+2i

[[2]]
[1] 3+4i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1L,a=2L),c("X","b",NA),NULL) }
Error in `[[<-`(`*tmp*`, i, value = 4:6) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(1L,2L) ; attr(b,"my") <- 21 ; f(b,c("X","b",NA),NULL) }
[[1]]
[1] 1

[[2]]
[1] 2

attr(,"my")
[1] 21

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(b=1L,2L) ; attr(b,"my") <- 21 ; f(b,c("X","b",NA),NULL) }
[[1]]
[1] 2

attr(,"my")
[1] 21

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(b=1L,2L) ; attr(b,"my") <- 21 ; f(b,c("ZZ","ZZ",NA),NULL) }
$b
[1] 1

[[2]]
[1] 2

attr(,"my")
[1] 21

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),c(TRUE,NA)) }
   X    a    b <NA>
   1    2   NA    1
Warning message:
In b[i] <- v :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1L,a=2L),c("X","b",NA),c(TRUE,NA,FALSE)) }
   X    a    b <NA>
   1    2   NA    0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(list(X=1L,a=2L),c("X","b",NA),NULL) }
$a
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(1:3,"a",4) }
      a
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(NULL,"a",4) }
a
4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(NULL,c("a","X"),4:5) }
a X
4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),as.character(NA),as.complex(23)) }
             <NA>
13+0i 14+0i 23+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),c("","",""),as.complex(23)) }

13+0i 14+0i 23+0i 23+0i 23+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),c("","",NA),as.complex(23)) }
                         <NA>
13+0i 14+0i 23+0i 23+0i 23+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),character(),as.complex(23)) }
[1] 13+0i 14+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(11:13),c("a","X"),list(3,TRUE)) }
[[1]]
[1] 0b

[[2]]
[1] 0c

[[3]]
[1] 0d

$a
[1] 3

$X
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(c(13,14)),c("a","X","a"),as.raw(23)) }
       a  X
0d 0e 17 17

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(c(13,14)),c("a","X","a"),c(3,TRUE,FALSE)) }
Error in b[i] <- v :
  incompatible types (from double to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(1,a=2),c("a","X","a"),list(3,TRUE,FALSE)) }
[[1]]
[1] 1

$a
[1] FALSE

$X
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),1:3) }
   X    a    b <NA>
   1    2    2    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),as.complex(10)) }
    X     a     b  <NA>
10+0i  2+0i 10+0i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),as.raw(10)) }
Error in b[i] <- v :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("X","b",NA),list(3,TRUE,FALSE)) }
$X
[1] 3

$a
[1] 2

$b
[1] TRUE

$<NA>
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("a","X","a"),list(3,TRUE,FALSE)) }
$X
[1] TRUE

$a
[1] FALSE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c("a","X","a","b"),list(3,TRUE,FALSE)) }
$X
[1] TRUE

$a
[1] FALSE

$b
[1] 3

Warning message:
In b[i] <- v :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(double(),c("a","X"),4:5) }
a X
4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testStringUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(double(),c("a","X"),list(3,TRUE)) }
$a
[1] 3

$X
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSuperUpdate
#{ x <- 1:3 ; f <- function() { x[2] <- 10 ; x[2] <<- 100 ; x[2] <- 1000 } ; f() ; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testSuperUpdate
#{ x <- 1:3 ; f <- function() { x[2] <<- 100 } ; f() ; x }
[1]   1 100   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testUpdateOther
#{ f<-function() { print(`*tmp*`[2]); `*tmp*`[2]<-7; 1 } ; x<-c(1,2); x[f()]<-42; x }
[1] 2
[1] 42  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testUpdateOther
#{ f<-function() { print(`*tmp*`[2]); `*tmp*`[2]<<-7; 1 } ; x<-c(1,2); x[f()]<-42; x }
[1] 2
[1] 42  7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testUpdateOther
#{ x<-c(1,2); f<-function() { x<-c(100, 200); x[1]<-4; print(x) } ; f(); x }
[1]   4 200
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testUpdateOther
#{ x<-c(1,2); f<-function() { x<-c(100, 200); x[1]<<-4; print(x) } ; f(); x }
[1] 100 200
[1] 4 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testUpdateOther
#{ x<-c(1,2); x[1]<-42; `*tmp*`[1]<-7; x }
[1] 42  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
# { f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), c(TRUE,NA)) }
   a <NA>    c
   1   NA    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ (1:5)[3:4] }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ a <- c(1,2,3) ; x <- integer() ; a[[x]] }
Error in a[[x]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ a <- c(1,2,3) ; x <- integer() ; a[x] }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b) { b[integer()] } ; f(c(TRUE,FALSE,TRUE)) ; f(f) }
Error in b[integer()] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[[i]] } ; f(list(1,list(2)),c(2,1)) ; f(1:3,list(1)) }
Error in b[[i]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c("h","hi")) ; f(1:3,TRUE) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c("h","hi")) ; f(function(){3},"hi") }
Error in b[i] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE)) ; f(f, c(TRUE,NA)) }
Error in b[i] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,NA)) }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,NA,NA,NA)) }
[1]  1 NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(1:3,3:1) }
[1] 3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(c(a=1,b=2,c=3),3:1) }
c b a
3 2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(function(){2},3:1) }
Error in b[i] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3, logical()) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,NULL) }
integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,as.raw(c(10,11))) }
Error in b[i] : invalid subscript type 'raw'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,c(TRUE,FALSE)) }
[1] 1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(1,2,3), c("hello","hi")) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(1,2,3), character()) }
numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), c(TRUE,NA,FALSE,FALSE,TRUE)) }
   a <NA> <NA>
   1   NA   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), character()) }
named numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; f(c(a=1L,b=2L,c=3L), logical()) }
named integer(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(b,i) { b[i] } ; x <- c(1+2i,3+4i,5+6i) ; f(x,c(1,2)) ; f(x,c(1+2i)) }
Error in b[i] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, 1:3) ; f(c(2,-4)) }
Error in l[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, 1:3) ; f(c(2,NA)) }
Error in l[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, 2) ; f(c(2,-1)) }
Error in l[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, as.list(1:3)) ; f(c(2,NA)) }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-1)) }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-2)) }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-4)) }
Error in l[[i]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,0)) }
Error in l[[i]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f <- function(i) { l[[i]] } ; l <- list(1, f) ; f(c(2,1)) }
Error in f(c(2, 1)) :
  invalid type/length (closure/1) in vector allocation

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(1)  ; f(3:4) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(1L) ; f(TRUE) }
[1] 1 2 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(TRUE) ; f(1L)  }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(TRUE) ; f(c(3,2))  }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(i) { x<-1:5 ; x[i] } ; f(c(TRUE,FALSE))  ; f(3:4) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x, i) { x[i] } ; f(1:3,0-3) ; f(1:5,c(0,0,0,0-2)) }
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x, i) { x[i] } ; f(1:3,0L-3L) ; f(1:5,c(0,0,0,0-2)) }
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x, i) { x[i] } ; f(1:3,3:1) ; f(1:5,c(0,0,0,0-2)) }
[1] 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x,l) { x[l == 3] <- 4 } ; f(c(1,2,3), c(1,2,3)) ; f(c(1,2,3), 1:3) ; f(1:3, c(3,3,2)) }

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ f<-function(x,l) { x[l == 3] } ; f(c(1,2,3), c(1,2,3)) ; f(c(1,2,3), 1:3) ; f(1:3, c(3,3,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,2) ; l[[c(1,1,2,3,4,3)]] }
Error in l[[c(1, 1, 2, 3, 4, 3)]] : recursive indexing failed at level 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,NULL) ; f <- function(i) { l[[i]] } ; f(c(2,1)) }
Error in l[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,function(){3}) ; f <- function(i) { l[[i]] } ; f(c(2)) }
function(){3}

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,list(2)) ; f <- function(i) { l[[i]] } ; f(c(2,1)) ; f(1) }
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(1,list(2)) ; l[[integer()]] }
Error in l[[integer()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ l <- list(list(1,2),2) ; l[[c(1,1,2,3,4,3)]] }
Error in l[[c(1, 1, 2, 3, 4, 3)]] : recursive indexing failed at level 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- "hi";  y<-c(1,1) ; x[y] }
[1] "hi" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1+2i;  y<-c(1,2) ; x[y] }
[1] 1+2i   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:2; x[[list()]] }
Error in x[[list()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:2; x[[list(-0,-1)]] }
Error in x[[list(-0, -1)]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:2; x[[list(0)]] }
Error in x[[list(0)]] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:3; x[function(){3}] }
Error in x[function() { : invalid subscript type 'closure'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1:3; x[list(2,3)] }
Error in x[list(2, 3)] : invalid subscript type 'list'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1;  y<-c(1,1) ; x[y] }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- 1L;  y<-c(1,1) ; x[y] }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- TRUE;  y<-c(1,1) ; x[y] }
[1] TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[2:3] }
[1] 3+4i 5+6i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5)] }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5,-2)] }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5,-5)] }
[1] 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,NA)] }
Error in x[c(-2, -3, NA)] :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,3,NA)] }
Error in x[c(-2, 3, NA)] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1+2i,3+4i,5+6i) ; x[c(2,3,NA)] }
[1] 3+4i 5+6i   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1,2,3) ; x[-1:2] }
Error in x[-1:2] : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1,2,3,2) ; x[c(3,4,2)==2] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1,2,3,2) ; x[c(3,4,2,NA)==2] }
[1]  3 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(1,2,3,2) ; x[x==2] }
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(TRUE,FALSE,TRUE) ; x[2:3] }
[1] FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(TRUE,FALSE,TRUE) ; x[integer()] }
logical(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2) ; x[[c("a","a")]] }
Error in x[[c("a", "a")]] : attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; f <- function(s) { x[c(s,s)] } ; f(TRUE) ; f(1L) ; f("b") }
b b
2 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; f <- function(s) { x[s] } ; f(TRUE) ; f(1L) ; f("b") }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; x[c("b","b","d","a","a")] }
b b d a a
2 2 4 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,b=2,c=3,d=4) ; x[character()] }
named numeric(0)

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,x=2,b=3,y=2) ; x[c(3,4,2)==2] }
b
3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=1,x=2,b=3,y=2) ; x[c(3,4,2,1)==2] }
b
3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=as.raw(10),b=as.raw(11),c=as.raw(12),d=as.raw(13)) ; f <- function(s) { x[c(s,s)] } ; f(TRUE) ; f(1L) ; f(as.character(NA)) }
<NA> <NA>
00 00

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(a=as.raw(10),b=as.raw(11),c=as.raw(12),d=as.raw(13)) ; f <- function(s) { x[s] } ; f(TRUE) ; f(1L) ; f(as.character(NA)) }
<NA>
00

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(as.double(1:2000)) ; sum(x[rep(3, 2000)==3]) }
[1] 2001000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(as.double(1:2000)) ; x[c(1,3,3,3,1:1996)==3] }
[1] 2 3 4 7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- c(as.double(1:2000)) ; x[c(NA,3,3,NA,1:1996)==3] }
[1] NA  2  3 NA  7

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- function(){3} ; x[3:2] }
Error in x[3:2] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2) ; x[[c("a","a")]] }
Error in x[[c("a", "a")]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2,list(3)) ; x[[c(3,1)]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2,list(3)) ; x[[c(3,NA)]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2,list(3)) ; x[[c(4,1)]] }
Error in x[[c(4, 1)]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,2,list(3)) ; x[[c(NA,1)]] }
Error in x[[c(NA, 1)]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(1,list(3)) ; x[[c(-1,1)]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=1:3) ; f <- function(i) { x[[i]] } ; f(c(2,2)) ; f(2+3i) }
Error in x[[i]] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=1:3) ; f <- function(i) { x[[i]] } ; f(c(2,2)) ; x <- f ; f(2+3i) }
Error in x[[i]] : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=1:3) ; x[[2+3i]] }
Error in x[[2 + (0+3i)]] : invalid subscript type 'complex'

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=1:3) ; x[[c("b","a")]] }
Error in x[[c("b", "a")]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; f <- function(i) { x[[i]] } ; f(c("d","x")) ; f("b") }
[1] 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c("d","x")]] }
[1] 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c("d",NA)]] }
NULL

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c("z","x")]] }
Error in x[[c("z", "x")]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c("z",NA)]] }
Error in x[[c("z", NA)]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c(NA,"x")]] }
Error in x[[c(NA, "x")]] : no such index at level 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=2,d=list(x=3)) ; x[[character()]] }
Error in x[[character()]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=function(){3},d=list(x=3)) ; f <- function(i) { x[[i]] } ; f(c("d","x")) ; f(c("b","z")) }
Error in x[[i]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=function(){3},d=list(x=3)) ; x[[c(2,-3)]] }
Error in x[[c(2, -3)]] : attempt to select less than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x <- list(a=1,b=function(){3},d=list(x=3)) ; x[[c(2,10)]] }
Error in x[[c(2, 10)]] : subscript out of bounds

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-(1:5)[2:4] ; x[2:1] }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[3:4] }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[4:3] }
[1] 4 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[c(TRUE,FALSE)] }
[1] 1 3 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[c(TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,NA)] }
[1]  1  2  3 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5 ; x[c(TRUE,TRUE,TRUE,NA)] }
[1]  1  2  3 NA  5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5;x[c(0-2,0-3)] }
[1] 1 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5;x[c(0-2,0-3,0,0,0)] }
[1] 1 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5;x[c(2,5,4,3,3,3,0)] }
[1] 2 5 4 3 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-1:5;x[c(2L,5L,4L,3L,3L,3L,0L)] }
[1] 2 5 4 3 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-as.complex(c(1,2,3,4)) ; x[2:4] }
[1] 2+0i 3+0i 4+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-as.raw(c(1,2,3,4)) ; x[2:4] }
[1] 02 03 04

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2) ; names(x) <- c("a","b") ; x[c(FALSE,TRUE)] }
b
2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2) ; names(x) <- c("a","b") ; x[c(FALSE,TRUE,NA,FALSE)] }
   b <NA>
   2   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2,3,4) ; names(x) <- c("a","b","c","d") ; x[c(-2,-4,0)] }
a c
1 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2,3,4) ; names(x) <- c("a","b","c","d") ; x[c(10,2,3)] }
<NA>    b    c
  NA    2    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2,3,4) ; names(x) <- c("a","b","c","d") ; x[c(10,2,3,0)] }
<NA>    b    c
  NA    2    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorIndex
#{ x<-c(1,2,3,4,5) ; x[4:3] }
[1] 4 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
# { f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, f) }
Error in b[i] <- v :
  incompatible types (from closure to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
# { f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), c(NA,FALSE)) }
[1]  3 NA  0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(1,2,3) ; b <- a; a[1] <- 4L; a }
[1] 4 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(1,2,3) ; b <- a; a[2] <- 4L; a }
[1] 1 4 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(1,2,3) ; b <- a; a[3] <- 4L; a }
[1] 1 2 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(2.1,2.2,2.3); b <- a; a[[2]] <- TRUE; a }
[1] 2.1 1.0 2.3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(2.1,2.2,2.3); b <- a; a[[3]] <- TRUE; a }
[1] 2.1 2.2 1.0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[1]] <- FALSE; a }
[1] FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[2]] <- FALSE; a }
[1]  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[3]] <- FALSE; a }
[1]  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a = c(1, 2); a[['a']] = 67; a; }
       a
 1  2 67

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a = c(a=1,2,3); a[['x']] = 67; a; }
 a        x
 1  2  3 67

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a<- c('a','b','c','d'); a[3:4] <- c(4,5); a}
[1] "a" "b" "4" "5"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a<- c('a','b','c','d'); a[3:4] <- c(4L,5L); a}
[1] "a" "b" "4" "5"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ a<- c('a','b','c','d'); a[3:4] <- c(TRUE,FALSE); a}
[1] "a"     "b"     "TRUE"  "FALSE"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 1:3 ; b[c(3,2)] <- list(TRUE,10) ; b }
[[1]]
[1] 1

[[2]]
[1] 10

[[3]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 1:3 ; b[integer()] <- 3:5 ; b }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 1:3 ; dim(b) <- c(1,3) ;  b[integer()] <- 3:5 ; b }
     [,1] [,2] [,3]
[1,]    1    2    3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 1:4 ; b[c(3,2)] <- c(NA,NA) ; b }
[1]  1 NA NA  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[[c(NA,1)]] <- c(2,10) ; b }
Error in b[[c(NA, 1)]] <- c(2, 10) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(0,1)] <- c(2,10,11) ; b }
[1] 2 4
Warning message:
In b[c(0, 1)] <- c(2, 10, 11) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(3,2)] <- c("X","xx") ; b }
[1] "3"  "xx" "X"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(3,2)] <- c(1+2i,3+4i) ; b }
[1] 3+0i 3+4i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(NA)] <- c(2,7) ; b }
Error in b[c(NA)] <- c(2, 7) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- 3:4 ; b[c(NA,1)] <- c(2,10) ; b }
Error in b[c(NA, 1)] <- c(2, 10) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[c(FALSE,FALSE,FALSE)] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[c(FALSE,TRUE,NA)] <- NULL ; b }
[[1]]
[1] 3

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; dim(b) <- c(1,4) ; b[c(FALSE,FALSE)] <- NULL ; b }
     [,1] [,2] [,3] [,4]
[1,] 3    4    5    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; dim(b) <- c(1,4) ; b[c(FALSE,FALSE,TRUE)] <- NULL ; b }
[[1]]
[1] 3

[[2]]
[1] 4

[[3]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; dim(b) <- c(4,1) ; b[c(TRUE,FALSE)] <- NULL ; b }
[[1]]
[1] 4

[[2]]
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; names(b) <- c("X","Y","Z","Q") ; b[c(FALSE,FALSE)] <- NULL ; b }
$X
[1] 3

$Y
[1] 4

$Z
[1] 5

$Q
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.list(3:6) ; names(b) <- c("X","Y","Z","Q") ; b[c(TRUE,FALSE)] <- NULL ; b }
$Y
[1] 4

$Q
[1] 6


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.raw(11:13) ; b[c(3,2)] <- 2 ; b }
Error in b[c(3, 2)] <- 2 :
  incompatible types (from double to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.raw(11:13) ; b[c(3,2)] <- as.raw(2) ; b }
[1] 0b 02 02

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.raw(11:13) ; b[c(3,2)] <- list(2) ; b }
[[1]]
[1] 0b

[[2]]
[1] 2

[[3]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- as.raw(1:5) ; b[c(TRUE,FALSE,TRUE)] <- c(1+2i,3+4i) ; b }
Error in b[c(TRUE, FALSE, TRUE)] <- c(1 + (0+2i), 3 + (0+4i)) :
  incompatible types (from complex to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; attr(b,"my") <- 211 ; b[c(FALSE,TRUE)] <- c("X") ; b }
[1] "a" "X" "c"
attr(,"my")
[1] 211

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(FALSE,NA,NA)] <- c("X","y") ; b }
Error in b[c(FALSE, NA, NA)] <- c("X", "y") :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(FALSE,TRUE,TRUE)] <- c("X","y","z") ; b }
[1] "a" "X" "y"
Warning message:
In b[c(FALSE, TRUE, TRUE)] <- c("X", "y", "z") :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE)] <- "X" ; b }
[1] "X" "b" "X"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE,NA)] <- "X" ; b }
[1] "X" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE,TRUE)] <- c(1+2i,3+4i) ; b }
[1] "1+2i" "b"    "3+4i"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE,TRUE,NA)] <- "X" ; b }
[1] "X" "b" "X" NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,FALSE,TRUE,TRUE)] <- "X" ; b }
[1] "X" "b" "X" "X"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[c(TRUE,TRUE,TRUE)] <- rev(as.character(b)) ; b }
[1] "c" "b" "a"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[is.na(b)] <- c("X","z") ; b }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; b[logical()] <- "X" ; b }
[1] "a" "b" "c"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; x <- b ; b[c(FALSE,TRUE,NA)] <- c("X","z") ; b }
Error in b[c(FALSE, TRUE, NA)] <- c("X", "z") :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("a","b","c") ; x <- b ; b[c(FALSE,TRUE,TRUE)] <- c("X","z") ; b } 
[1] "a" "X" "z"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c("hello","hi") ; b[c(3,2)] <- c(2,3) ; b }
[1] "hello" "3"     "2"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1+2i,3+4i) ; b[c(3,2)] <- 5:6 ; b }
[1] 1+2i 6+0i 5+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ;  x <- as.double(NA) ; attr(x,"my") <- 2 ; b[c(1,NA,2)==2] <- x ; b }
[1]  1  2 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ;  x <- c(2,2,-1) ; b[x==2] <- c(10,11,5) ; b }
[1] 10 11  5
Warning message:
In b[x == 2] <- c(10, 11, 5) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ;  x <- c(2,2,NA) ; b[x==2] <- c(10,11,3) ; b }
Error in b[x == 2] <- c(10, 11, 3) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; attr(b,"my") <- 10 ; b[integer()] <- NULL ; b }
[1] 1 2 5
attr(,"my")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(0,3,5)] <- NULL ; b }
Error in b[c(0, 3, 5)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(1)] <- NULL ; b }
Error in b[c(1)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(TRUE,FALSE,FALSE)] <- NULL ; b }
Error in b[c(TRUE, FALSE, FALSE)] <- NULL : replacement has length zero

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(TRUE,FALSE,TRUE)] <- list(TRUE,1+2i) ; b }
[[1]]
[1] TRUE

[[2]]
[1] 2

[[3]]
[1] 1+2i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[c(TRUE,NA,TRUE)] <- list(TRUE,1+2i) ; b }
Error in b[c(TRUE, NA, TRUE)] <- list(TRUE, 1 + (0+2i)) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[integer()] <- NULL ; b }
[1] 1 2 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,2,5) ; b[logical()] <- NULL ; b }
[1] 1 2 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,4,5) ;  x <- c(2,2) ; b[x==2] <- c(10,11) ; b }
[1] 10 11 10
Warning message:
In b[x == 2] <- c(10, 11) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,4,5) ; x <- c(2,8,2) ; b[x==2] <- c(10,11) ; b }
[1] 10  4 11

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(1,4,5) ; z <- b ; x <- c(2,8,2) ; b[x==2] <- c(10,11) ; b }
[1] 10  4 11

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,FALSE) ; b[c(3,2)] <- 5:6 ; b }
[1] 1 6 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,FALSE,FALSE,TRUE) ; b[b] <- c(TRUE,FALSE) ; b }
[1]  TRUE FALSE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE) ; b[c(3,2)] <- FALSE ; b }
[1]  TRUE FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE) ; b[c(TRUE,FALSE,TRUE,TRUE)] <- c(FALSE,NA,NA) ; b }
[1] FALSE    NA    NA    NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE) ; b[c(TRUE,TRUE)] <- c(FALSE,NA) ; b }
[1] FALSE    NA FALSE
Warning message:
In b[c(TRUE, TRUE)] <- c(FALSE, NA) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; attr(b,"my") <- 10 ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }
[1] FALSE    NA FALSE  TRUE
attr(,"my")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE)] <- c(FALSE,NA) ; b }
[1] FALSE    NA    NA  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,FALSE)] <- c(FALSE,NA) ; b }
[1] FALSE    NA FALSE    NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,TRUE,FALSE)] <- b ; b }
[1] TRUE   NA   NA TRUE
Warning message:
In b[c(TRUE, FALSE, TRUE, FALSE)] <- b :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }
[1] FALSE    NA FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,NA)] <- c(FALSE,NA) ; b }
Error in b[c(TRUE, NA)] <- c(FALSE, NA) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; b[logical()] <- c(FALSE,NA) ; b }
[1]  TRUE    NA FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- c(TRUE,NA,FALSE,TRUE) ; z <- b ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }
[1] FALSE    NA FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,3) ; attr(b,"my") <- 12; b[2:3] <- NULL ; b }
[[1]]
[1] 1

attr(,"my")
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,3) ; attr(b,"my") <- 12; b[2] <- NULL ; b }
[[1]]
[1] 1

[[2]]
[1] 3

attr(,"my")
[1] 12

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(-1,-4,-5,-1,-5)] <- NULL ; b }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(-1,1)] <- NULL ; b }
Error in b[c(-1, 1)] <- NULL :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(-1,NA)] <- NULL ; b }
Error in b[c(-1, NA)] <- NULL :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(0,-1)] <- NULL ; b }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(1,1,0,NA,5,5,7)] <- NULL ; b }
[[1]]
[1] 2

[[2]]
[1] 5

[[3]]
NULL

[[4]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(1,1,5)] <- NULL ; b }
[[1]]
[1] 2

[[2]]
[1] 5

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; b[c(1,NA)] <- NULL ; b }
[[1]]
[1] 2

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(-10,-20,0)] <- NULL ; b }
list()

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,-1)] <- NULL ; b }
[[1]]
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,0)] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 1    2    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,0,-1,-2,-3)] <- NULL ; b }
     [,1] [,2] [,3]
[1,] 1    2    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,3,5)] <- NULL ; b }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
NULL


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(TRUE,FALSE,TRUE)] <- list(TRUE,1+2i) ; b }
     [,1] [,2] [,3]
[1,] TRUE 2    1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ b <- list(x=1,y=2,z=5) ; b[c(0,-1)] <- NULL ; b }
$x
[1] 1


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ buf <- character() ; buf[[1]] <- "hello" ; buf[[3]] <- "world" ; buf }
[1] "hello" NA      "world"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ buf <- double() ; buf[[1]] <- 23 ; buf }
[1] 23

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ buf <- integer() ; buf[[1]] <- 4L ; buf }
[1] 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4:5) }
Error in `[[<-`(`*tmp*`, i, value = 5:6) :
  attempt to select more than one element

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2, seq(1L,-8L,-2L),c(TRUE,FALSE,NA)) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2, seq(1L,6L,2L),c(TRUE,FALSE,NA)) }
[1]  1  2  0 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(1:8, c(1L,4L,7L), c(10,100,1000)) }
[1]   10    2    3  100    5    6 1000    8

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4), 1:2, c("hello","hi")) }
[1] "hello" "hi"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4), 1:2, c(NA,NA)) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), -1:-2, 10) }
[1]  3  4 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), 1:2, list(3,TRUE)) }
[[1]]
[1] 3

[[2]]
[1] TRUE

[[3]]
[1] 8


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), 3:4, 10) }
[1]  3  4 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(TRUE,FALSE,NA), 1:2, c(FALSE,TRUE)) }
[1] FALSE  TRUE    NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; z <- f(1:8, c(1L,4L,7L), list(10,100,1000)) ; sum(as.double(z)) }
[1] 1134

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(f, 1:2, 1:3) }
Error in b[i] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- c(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(l, 1:2, c(3,TRUE)) }
     [,1]
[1,]    3
[2,]    1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(l, 1:2, list(3,TRUE)) }
     [,1]
[1,] 3
[2,] TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(list(3,TRUE), 1:2, l) }
[[1]]
[1] 3

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; m <- c(3,TRUE) ; dim(m) <- c(1,2) ; f(m, 1:2, l) }
[[1]]
[1] 3

[[2]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, 3:4); f(3:4, 2:1, c(NA,FALSE)) }
[1]  0 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, 3:4); f(c(TRUE,FALSE), 2:1, 1:2) }
[1] 2 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), 4:6) }
[1] 3 4 5
Warning message:
In b[i] <- v :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), c(NA,FALSE)) }
[1]  3 NA  0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c("a","XX","b"), c(FALSE,TRUE,TRUE), 21:22) }
[1] "a"  "21" "22"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(10,12,3), c(FALSE,TRUE,TRUE), c("hi",NA)) }
[1] "10" "hi" NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(10,12,3), c(FALSE,TRUE,TRUE), c(1+2i,10)) }
[1] 10+0i  1+2i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(3+4i,5+6i), c(FALSE,TRUE,TRUE), c("hi",NA)) }
[1] "3+4i" "hi"   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(3+4i,5+6i), c(FALSE,TRUE,TRUE), c(NA,1+10i)) }
[1] 3+ 4i    NA 1+10i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(TRUE,FALSE), c(FALSE,TRUE,TRUE), c(NA,2L)) }
[1]  1 NA  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(TRUE,TRUE,FALSE), c(FALSE,TRUE,TRUE), c(TRUE,NA)) }
[1] TRUE TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- 10:12 ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), as.raw(21:22)) }
Error in b[i] <- v :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- as.raw(10:12) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), 21:22) }
Error in b[i] <- v :
  incompatible types (from integer to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- as.raw(10:12) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), as.raw(21:22)) }
     [,1] [,2] [,3]
[1,]   0a   15   16

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- list(1,2,5) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), list(TRUE,1+2i)) }
     [,1] [,2] [,3]
[1,] 1    TRUE 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:5, seq(1L,6L,2L),c(TRUE,FALSE,NA)) }
[1]  1  2  0  4 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.character(-3:3),c(1L,4L,7L),c("A","a","XX")) }
[1] "A"  "-2" "-1" "a"  "1"  "2"  "XX"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.double(1:5), c(7L,4L,1L),c(TRUE,FALSE,NA)) }
[1] NA  2  3  0  5 NA  1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.double(1:5), seq(1L,6L,2L),c(TRUE,FALSE,NA)) }
[1]  1  2  0  4 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.logical(-3:3),c(1L,4L,7L),c(TRUE,NA,FALSE)) }
[1]  TRUE  TRUE  TRUE    NA  TRUE  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.raw(10:11), 1:2, c(10+1i, 11)) }
Error in b[i] <- v :
  incompatible types (from complex to raw) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.raw(1:3), 1:2, as.raw(40:41)) }
[1] 28 29 03

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("a","b"),2:1,1+2i) }
[1] "1+2i" "1+2i"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("hello","hi","X"), -1:-2, "ZZ") }
[1] "hello" "hi"    "ZZ"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("hello","hi","X"), 1:2, c("ZZ","xx")) ; f(1:4,1:2,NA) }
[1] NA NA  3  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("hello","hi","X"), 1:2, c("ZZ","xx")) ; f(as.character(1:2),1:2,NA) }
[1] NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c("hello","hi","X"), 3:4, "ZZ") }
[1] "hello" "hi"    "ZZ"    "ZZ"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1+2i,2+3i), 1:2, as.raw(10:11)) }
Error in b[i] <- v :
  incompatible types (from raw to complex) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1+2i,2+3i), 1:2, c(10+1i,2+4i)) }
[1] 10+1i  2+4i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4) }
[1] 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4:5) }
Error in b[i] <- v : NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), 4:6) }
[1] 3 4 5
Warning message:
In b[i] <- v :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10), c(2L,4L),c(TRUE,FALSE)) }
[1]  1  1 10  0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),-1:0,c(TRUE,FALSE)) }
[1] 1 1 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,1+2i) }
[1]  1+2i  1+2i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(3,NA)) }
[1]  3 NA 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(3L,NA)) }
[1]  3 NA 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) ; f(c(10,4), 2:1, as.raw(10)) }
Error in b[i] <- v :
  incompatible types (from raw to double) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) ; f(c(10L,4L), 2:1, 1+2i) }
[1] 1+2i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) }
[1]  1  0 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) ; f(c(10,4), 2:1, 1+2i) }
[1] 1+2i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) ; f(c(10L,4L), 2:1, as.raw(10)) }
Error in b[i] <- v :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) }
[1]  1  0 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,1+2i) }
[1]  1+2i  1+2i 10+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,c(3,NA)) }
[1] NA  3 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,c(3L,NA)) }
[1] NA  3 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE),2:1,c(NA,NA)) ; f(10:11,1:2,c(NA,FALSE)) }
[1] NA  0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE),2:1,c(NA,NA)) ; f(c(TRUE,FALSE),1:2,3:4) }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,NA),2:1,1+2i) }
[1] 1+2i 1+2i   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),2:0,c(TRUE,NA)) }
[1]    NA  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),2:1,c(TRUE,NA)) }
[1]    NA  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),3:4,c(TRUE,NA)) }
[1] TRUE   NA TRUE   NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, 10) ; f(1:2, 1:2, 11) }
[1] 11 11

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, 11L) }
[[1]]
[1] 11

[[2]]
[1] 11


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) ;  f(list(1,2), -1:1, c(2,10,5)) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) ;  f(list(1,2), 1:2, as.raw(10))}
[[1]]
[1] 0a

[[2]]
[1] 0a


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) }
[[1]]
[1] TRUE

[[2]]
[1] TRUE


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, 1:2, c(10,5))}
[1] 10  5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, c(0,0), as.raw(c(11,23)))}
Error in b[i] <- v :
  incompatible types (from raw to integer) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, c(0,0), c(1+2i,3+4i))}
[1] 1+0i 2+0i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), -10:10, 1:3) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), 1:2, c(1+2i,3+4i))}
[[1]]
[1] 1+2i

[[2]]
[1] 3+4i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), 1:3, c(2,10,5)) }
[[1]]
[1] 2

[[2]]
[1] 10

[[3]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,3:4) }
[[1]]
[1] 3

[[2]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,c(1+2i,3+2i)) }
[[1]]
[1] 1+2i

[[2]]
[1] 3+2i


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,c(4,3)) }
[[1]]
[1] 4

[[2]]
[1] 3


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2,3,4), seq(1L,4L,2L), c(TRUE,NA)) }
[[1]]
[1] TRUE

[[2]]
[1] 2

[[3]]
[1] NA

[[4]]
[1] 4


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2,3,4,5), 4:3, c(TRUE,NA)) }
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] NA

[[4]]
[1] TRUE

[[5]]
[1] 5


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,"hi",3L) ; f(1:2,c(2),10) ; f(1:2, -1, 10) }
[1]  1 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[b] <- b ; b } ; f(c(TRUE,FALSE,FALSE,TRUE)) ; f(1:3) }
[1] 1 2 3
Warning message:
In b[b] <- b :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, as.integer(NA), 2) }
[1] 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, c(1,-1), 2) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, c(NA,-1), 2) }
Error in b[i] <- v : only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c("a","b","c"),c(TRUE,FALSE),c("A","X")) ; f(1:3,c(TRUE,FALSE),4) }
[1] 4 2 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c("a","b","c"),c(TRUE,FALSE),c("A","X")) ; f(c("A","X"),c(TRUE,FALSE),4) }
[1] "4" "X"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c("a","b","c"),c(TRUE,FALSE),c("A","X")) ; f(c("A","X"),c(TRUE,FALSE),f) }
Error in b[i] <- v :
  incompatible types (from closure to character) in subassignment type fix

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c("a","b","c"),c(TRUE,FALSE),c("A","X")) ; f(f,c(TRUE,FALSE),4) }
Error in b[i] <- v : object of type 'closure' is not subsettable

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,FALSE,TRUE),c(TRUE,FALSE), NA) ; f(1:4, c(TRUE,TRUE), NA) }
[1] NA NA NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,FALSE,TRUE),c(TRUE,FALSE), NA) ; f(c(FALSE,FALSE,TRUE), c(TRUE,TRUE), c(1,2,3)) }
[1] 1 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(1:2, c(TRUE,FALSE), list(TRUE)) }
[[1]]
[1] TRUE

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 1+2i) }
[[1]]
[1] 1+2i

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 10) }
[[1]]
[1] 10

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 10L) }
[[1]]
[1] 10

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), TRUE) }
[[1]]
[1] TRUE

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) }
[[1]]
[1] 1+2i

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), 10) }
[[1]]
[1] 10

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), c(10,11)) }
Error in b[i] <- v : NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), list(1+2i)) }
[[1]]
[1] 1+2i

[[2]]
[1] 2


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; x <- list(1,2) ; attr(x,"my") <- 10 ; f(x, 1:2, c(10,11)) }
[[1]]
[1] 10

[[2]]
[1] 11

attr(,"my")
[1] 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f <- function(b,i,v) { b[i] <- v ; b } ; x <- list(1,2) ; z <- x ; f(x, c(TRUE,NA), c(10,11)) }
Error in b[i] <- v : NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(b,i,v) { b[i]<-v ; b } ; f(1:4,4:1,TRUE) ; f(c(3,2,1),8,10) ; f(c(TRUE,FALSE),TRUE,FALSE) }
[1] FALSE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(b,i,v) { b[i]<-v ; b } ; f(1:4,4:1,TRUE) ; f(c(3,2,1),8,10) }
[1]  3  2  1 NA NA NA NA 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(i,v) { x<-1:5 ; x[[i]]<-v ; x } ; f(1,1) ; f(1L,TRUE) ; f(2,TRUE) }
[1] 1 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(1,1) ; f(1L,TRUE) ; f(2,TRUE) }
[1] 1 1 3 4 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(3:2,1) ; f(1L,TRUE) ; f(2:4,4:2) }
[1] 1 4 3 2 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(c(3,2),1) ; f(1L,TRUE) ; f(2:4,c(4,3,2)) }
[1] 1 4 3 2 5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ inds <- 1:4 ; m <- 2:3 ; inds[m] <- inds[m] + 1L ; inds }
[1] 1 3 4 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ inds <- 1:4 ; m <- 2:3 ; inds[m] <- inds[m] + 1L ; m <- 1:2 ; inds[m] <- inds[m] + 1L ; inds }
[1] 2 4 4 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ inds <- 1:4 ; m <- 2L ; inds[m] <- inds[m] + 1L ; m <- c(1L,2L) ; inds[m] <- inds[m] + 1L ; inds }
[1] 2 4 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ inds <- 1:4 ; m <- c(2L,3L) ; inds[m] <- inds[m] + 1L ; inds }
[1] 1 3 4 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ l <- double() ; l[c(FALSE,TRUE)] <-2 ; l}
[1] NA  2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ l <- double() ; l[c(TRUE,TRUE)] <-2 ; l}
[1] 2 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ v<-1:3 ; v[-1] <- c(100,101) ; v }
[1]   1 100 101

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ v<-1:3 ; v[TRUE] <- 100 ; v }
[1] 100 100 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ v<-1:3 ; v[TRUE] <- c(100,101,102) ; v }
[1] 100 101 102

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- (0:4); x[c(NA, NA, NA)] <- c(200L, 300L); x }
Error in x[c(NA, NA, NA)] <- c(200L, 300L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(FALSE,FALSE,TRUE)]<-10; x }
[1]  1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,NA)] <- 3:4 ; x }
Error in x[c(TRUE, FALSE, FALSE, NA)] <- 3:4 :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,NA)] <- 3L ; x }
[1]  3  2 NA NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,TRUE)] <- 3:4 ; x }
[1]  3  2 NA  4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,NA)] <- 2:3 ; x }
Error in x[c(TRUE, NA)] <- 2:3 :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:2 ; x[c(TRUE,NA)] <- 3L ; x }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- 1:3 ; x[c(-2, 1)] <- 10 }
Error in x[c(-2, 1)] <- 10 :
  only 0's may be mixed with negative subscripts

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c('a','b','c','d'); x[2:3] <- 'x'; x}
[1] "a" "x" "x" "d"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c('a','b','c','d'); x[2:3] <- c('x','y'); x}
[1] "a" "x" "y" "d"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c('a','b','c','d'); x[3:2] <- c('x','y'); x}
[1] "a" "y" "x" "d"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c('a','b','c','d'); x[c(TRUE,FALSE,TRUE)] <- c('x','y','z'); x }
[1] "x" "b" "y" "z"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); f <- function(i, v) { x[i] <- v ; x } ; f(1:2,3:4); f(c("a","b"),c(TRUE,FALSE)) }
    a     b
 TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); f <- function(i, v) { x[i] <- v ; x } ; f(1:2,3:4); f(c(1,2),c(TRUE,FALSE)) }
[1]  TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); x[c('a','b')] <- c('a','b'); x }
  a   b
"a" "b"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); x[c('a','b')] <- c(1L,2L); x }
a b
1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(); x[c('a','b')] <- c(TRUE,FALSE); x }
    a     b
 TRUE FALSE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1) ; f <- function() { x[[1]] <<- x[[1]] + 1 ; x } ; a <- f() ; b <- f() ; c(a,b) }
[1] 2 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0)  ; x[c(TRUE,TRUE)] <- rev(x) ; x }
[1] 0 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0)  ; x[is.na(x)] <- TRUE; x }
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; attr(x,"my") <- 1 ; x[c(TRUE,TRUE)] <- c(NA,TRUE); x }
[1] NA  1
attr(,"my")
[1] 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; f <- function(v) { x[c(TRUE,TRUE)] <- v ; x } ; f(1:2) ; f(1+2i) }
[1] 1+2i 1+2i

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; f <- function(v) { x[c(TRUE,TRUE)] <- v ; x } ; f(1:2) ; f(c(1,2)) }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; x[c(NA,TRUE)] <- c(NA,TRUE); x }
Error in x[c(NA, TRUE)] <- c(NA, TRUE) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; x[c(TRUE,TRUE)] <- 3:4; x }
[1] 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; x[c(TRUE,TRUE)] <- c(TRUE,NA); x }
[1]  1 NA

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; x[logical()] <- 3:4; x }
[1] 1 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; z <- x ; x[c(NA,TRUE)] <- TRUE; x }
[1] 1 1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1,0) ; z <- x ; x[c(NA,TRUE)] <- c(NA,TRUE); x }
Error in x[c(NA, TRUE)] <- c(NA, TRUE) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L, 2L, 3L, 4L, 5L); x[c(NA, 0, NA)] <- c(400L, 500L, 600L); x }
Error in x[c(NA, 0, NA)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L, 2L, 3L, 4L, 5L); x[c(NA, 2, 10)] <- c(400L, 500L, 600L); x }
Error in x[c(NA, 2, 10)] <- c(400L, 500L, 600L) :
  NAs are not allowed in subscripted assignments

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,1L,1L,1L); x[c(TRUE,TRUE,FALSE)] <- c('a','b','c'); x}
[1] "a" "b" "1" "c"

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L) ; x[TRUE] <- 3L ; x }
[1] 3 3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L) ; x[c(TRUE,FALSE)] <- 3L ; x }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L) ; x[c(TRUE,NA)] <- 3L ; x }
[1] 3 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L) ; x[logical()] <- 3L ; x }
[1] 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L,3L,4L) ;  x[is.na(x)] <- 5:6 ; x }
[1] 1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L,3L,4L) ; attr(x,"my") <- 0 ;  x[c(TRUE,FALSE)] <- 5:6 ; x }
[1] 5 2 6 4
attr(,"my")
[1] 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L,3L,4L) ; x[c(TRUE,FALSE)] <- 5:6 ; x }
[1] 5 2 6 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(1L,2L,3L,4L) ; x[c(TRUE,FALSE)] <- rev(x) ; x }
[1] 4 2 3 4
Warning message:
In x[c(TRUE, FALSE)] <- rev(x) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(TRUE,TRUE,TRUE,TRUE); x[2:3] <- c(FALSE,FALSE); x }
[1]  TRUE FALSE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(TRUE,TRUE,TRUE,TRUE); x[3:2] <- c(FALSE,TRUE); x }
[1]  TRUE  TRUE FALSE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(TRUE,TRUE,TRUE,TRUE); x[c(TRUE,TRUE,FALSE)] <- c(10L,20L,30L); x }
[1] 10 20  1 30

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(TRUE,TRUE,TRUE,TRUE); x[c(TRUE,TRUE,FALSE)] <- list(10L,20L,30L); x }
[[1]]
[1] 10

[[2]]
[1] 20

[[3]]
[1] TRUE

[[4]]
[1] 30


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2) ; x[2:3]<-10; x }
 a  b
 1 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2) ; x[3]<-10; x }
 a  b
 1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2) ; x[c(2,3)]<-10; x }
 a  b
 1 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2) ; x[c(FALSE,FALSE,TRUE)]<-10; x }
 a  b
 1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2,c=3) ; x[2:3]<-10; x }
 a  b  c
 1 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2,c=3) ; x[2]<-10; x }
 a  b  c
 1 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2,c=3) ; x[c(2,3)]<-10; x }
 a  b  c
 1 10 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- c(a=1,b=2,c=3) ; x[c(TRUE,TRUE,FALSE)]<-10; x }
 a  b  c
10 10  3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(); x[c('a','b')] <- c('a','b'); x }
$a
[1] "a"

$b
[1] "b"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(); x[c('a','b')] <- list('a','b'); x }
$a
[1] "a"

$b
[1] "b"


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; attr(x,"my") <- 20 ; x[c(TRUE,FALSE)] <- c(11,12) ; x }
[[1]]
[1] 11

[[2]]
[1] 0

attr(,"my")
[1] 20
Warning message:
In x[c(TRUE, FALSE)] <- c(11, 12) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[as.logical(x)] <- c(10,11); x }
[[1]]
[1] 10

[[2]]
[1] 0

Warning message:
In x[as.logical(x)] <- c(10, 11) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[c(TRUE,FALSE)] <- x[2:1] ; x }
[[1]]
[1] 0

[[2]]
[1] 0

Warning message:
In x[c(TRUE, FALSE)] <- x[2:1] :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[c(TRUE,TRUE)] <- c(TRUE,NA); x }
[[1]]
[1] TRUE

[[2]]
[1] NA


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[is.na(x)] <- c(10,11); x }
[[1]]
[1] 1

[[2]]
[1] 0


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[is.na(x)] <- c(10L,11L); x }
[[1]]
[1] 1

[[2]]
[1] 0


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,0) ; x[logical()] <- c(TRUE,NA); x }
[[1]]
[1] 1

[[2]]
[1] 0


##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- list(1,2) ; attr(x,"my") <- 10; x[c(TRUE,TRUE)] <- c(10,11,12); x }
[[1]]
[1] 10

[[2]]
[1] 11

attr(,"my")
[1] 10
Warning message:
In x[c(TRUE, TRUE)] <- c(10, 11, 12) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x <- matrix(1:2) ; x[c(FALSE,FALSE,TRUE)]<-10; x }
[1]  1  2 10

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x = c(1,2,3,4); x[x %% 2 == 0] <- c(1,2,3,4); }
Warning message:
In x[x%%2 == 0] <- c(1, 2, 3, 4) :
  number of items to replace is not a multiple of replacement length

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-11:9 ; x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }
[1] 1000   10 2000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:3 ; y<-(x[2]<-100) ; y }
[1] 100

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:3; x[c(TRUE, FALSE, TRUE)] <- c(TRUE,FALSE); x }
[1] 1 2 0

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:5 ; x[3] <- (x[4]<-100) ; x }
[1]   1   2 100 100   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:5; x[4:3]<-c(300L,400L); x }
[1]   1   2 400 300   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:5; x[c(0-2,0-3,0-3,0-100,0)]<-256; x }
[1] 256   2   3 256 256

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-1:5; x[c(4,2,3)]<-c(256L,257L,258L); x }
[1]   1 257 258 256   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-5:1 ; x[x[2]<-2] <- (x[3]<-50) ; x }
[1]  5 50 50  2  1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-5:1; x[3:4]<-c(300,400); x }
[1]   5   4 300 400   1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-5:1; x[3:4]<-c(300L,400L); x }
[1]   5   4 300 400   1

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c() ; x[c("a","b","c","d")]<-c(1,2); x }
a b c d
1 2 1 2

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[3:4]<-c(300,400); x }
[1]   1   2 300 400   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[4:3]<-c(300L,400L); x }
[1]   1   2 400 300   5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE)] <- 1000; x }
[1] 1000    2 1000    4 1000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE,TRUE,TRUE,0)] <- c(1000,2000,3000); x }
[1] 3000    2    3    4    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE,TRUE,TRUE,FALSE)] <- c(1000,2000,3000); x }
[1] 1000    2 2000 3000    5

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(1,2,3,4,5,6); x[c(TRUE,TRUE,FALSE)] <- c(1000L,2000L) ; x }
[1] 1000 2000    3 1000 2000    6

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(TRUE,TRUE,FALSE); x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }
[1] 1000    1 2000

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(TRUE,TRUE,FALSE); x[c(TRUE, FALSE, TRUE)] <- c(FALSE,TRUE); x }
[1] FALSE  TRUE  TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(TRUE,TRUE,FALSE,TRUE) ; x[3:2] <- TRUE; x }
[1] TRUE TRUE TRUE TRUE

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x["d"]<-4 ; x }
a b c d
1 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x[["b"]]<-200; x }
  a   b   c
  1 200   3

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x[["d"]]<-200; x }
  a   b   c   d
  1   2   3 200

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x[c("d","a","d","a")]<-c(4,5) ; x }
a b c d
5 2 3 4

##com.oracle.truffle.r.test.simple.TestSimpleVectors.testVectorUpdate
#{ x<-c(a=1,b=2,c=3) ; x[c("d","e")]<-c(4,5) ; x }
a b c d e
1 2 3 4 5

