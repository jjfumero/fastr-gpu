// DO NOT EDIT, update using 'mx rignoredtests'
// This contains a copy of the @Test tests one micro-test per method
package com.oracle.truffle.r.test.all;

import org.junit.Test;

import com.oracle.truffle.r.test.*;

//Checkstyle: stop
public class AllTests extends TestBase {
    @Test
    public void TestConnections_testPushBack_57eb33ce24132c578875659c3672161c() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBackLength(con) }");
    }

    @Test
    public void TestConnections_testPushBack_9ab94443d4655966c16600edc46013db() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(\"G\", con); pushBackLength(con) }");
    }

    @Test
    public void TestConnections_testPushBack_fb83ddf08b850f1fb0fcfa825768f88c() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(\"G\", con); clearPushBack(con); pushBackLength(con) }");
    }

    @Test
    public void TestConnections_testPushBack_55ed6d0b83e86e1385de091582e4af8d() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(\"G\", con); readLines(con, 1) }");
    }

    @Test
    public void TestConnections_testPushBack_d91ddfe61c4e439f5209ecaba013916d() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(\"G\", con); readLines(con, 2) }");
    }

    @Test
    public void TestConnections_testPushBack_94a34439238e4c99bceeda15b2b188e9() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(\"G\", con, newLine=FALSE); readLines(con, 1) }");
    }

    @Test
    public void TestConnections_testPushBack_4fdcb63fc43fe75d3bcbc2d474febfd7() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(\"G\", con, newLine=FALSE); readLines(con, 2) }");
    }

    @Test
    public void TestConnections_testPushBack_db52df62c6e2dbab91e2a3304e913e32() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\", \"H\"), con); pushBackLength(con) }");
    }

    @Test
    public void TestConnections_testPushBack_c5817008fe12a3cea146ab439cf253d0() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\", \"H\"), con); readLines(con, 1) }");
    }

    @Test
    public void TestConnections_testPushBack_fd6725165764cf8a366286d2f48fd0bd() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\", \"H\"), con); readLines(con, 2) }");
    }

    @Test
    public void TestConnections_testPushBack_196e9a486c227dad1cbdeb22ca8fbcb9() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\", \"H\"), con, newLine=FALSE); pushBackLength(con) }");
    }

    @Test
    public void TestConnections_testPushBack_29dbbd688316a533cf6a889c7313ebf4() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\", \"H\"), con, newLine=FALSE); readLines(con, 1) }");
    }

    @Test
    public void TestConnections_testPushBack_76de44fe978f208462151f57d1ee3aed() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\", \"H\"), con, newLine=FALSE); readLines(con, 2) }");
    }

    @Test
    public void TestConnections_testPushBack_e4b327628b569f903a3f239f5a226fb7() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\\nH\"), con); pushBackLength(con) }");
    }

    @Test
    public void TestConnections_testPushBack_d4d6eb9b95b2dee91619746ab87657ca() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\\nH\"), con); readLines(con, 1) }");
    }

    @Test
    public void TestConnections_testPushBack_6f6542b9ba9f30da8906fc36a12e7b6f() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\\nH\"), con); readLines(con, 2) }");
    }

    @Test
    public void TestConnections_testPushBack_3452d401d4b77d0a5da3cec670b75dd6() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\\nH\"), con, newLine=FALSE); pushBackLength(con) }");
    }

    @Test
    public void TestConnections_testPushBack_ef4bb1fb2afbe783e73c8f6450c67c32() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\\nH\"), con, newLine=FALSE); readLines(con, 1) }");
    }

    @Test
    public void TestConnections_testPushBack_e0fcd304300ae2e3c775fa989d5a667d() {
        assertEval("{ con<-textConnection(c(\"a\",\"b\",\"c\",\"d\")); pushBack(c(\"G\\nH\"), con, newLine=FALSE); readLines(con, 2) }");
    }

    @Test
    public void TestConnections_testTextReadConnection_d61f16f8b553065174bc69e879308230() {
        assertEval("{ con <- textConnection(c(\"1\", \"2\", \"3\",\"4\")); readLines(con) }");
    }

    @Test
    public void TestConnections_testTextReadConnection_7f9a1867afa461805ce8e2f819b40460() {
        assertEval("{ con <- textConnection(c(\"1\", \"2\", \"3\",\"4\")); readLines(con, 2) }");
    }

    @Test
    public void TestConnections_testTextReadConnection_7f4ab83f4b2f9d736100d1e0b428b58a() {
        assertEval("{ con <- textConnection(c(\"1\", \"2\", \"3\",\"4\")); readLines(con, 2); readLines(con, 2) }");
    }

    @Test
    public void TestConnections_testTextReadConnection_dc19b2220ba560eec444032f971cff2f() {
        assertEval("{ con <- textConnection(c(\"1\", \"2\", \"3\",\"4\")); readLines(con, 2); readLines(con, 2); readLines(con, 2) }");
    }

    @Test
    public void TestSimpleArithmetic_testArithmeticUpdate_53dd62f0f4ee11cdf35cbec8ec41f7c8() {
        assertEval("{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- x + 1L ; x } ; f(FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testArithmeticUpdate_7c11cc002b58eebf858e56da622b7816() {
        assertEval("{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- 1L + x ; x } ; f(FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testArithmeticUpdate_e4e9b5e68f5febfd8848a72f10d818be() {
        assertEval("{ x <- 3 ; f <- function(z) { if (z) { x <- 1 } ; x <- x - 1L ; x } ; f(FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_8124186154226341ba9cef3e8816cbaa() {
        assertEval("{ 0^(-1+1i) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_6c5ffca629fa2d7d2b1412f6621a46a1() {
        assertEval("{ (0+0i)/(0+0i) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_5d534dca1c2d0275dbaa22b12e0b4f2e() {
        assertEval("{ (1+0i)/(0+0i) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_58576b74c634ea951bc7f90f7e2a97f2() {
        assertEval("{ (0+1i)/(0+0i) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_1a10642f746450640a45c01c34a6a318() {
        assertEval("{ (1+1i)/(0+0i) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_efde6bf8de686595a1aa36aea46c5828() {
        assertEval("{ (-1+0i)/(0+0i) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_1c9c59138fc580458ed35848f74c4a78() {
        assertEval("{ (-1-1i)/(0+0i) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_ea15462c9b7c011c1d945736e3a3dcf8() {
        assertEval("{ (1+2i) / ((0-0i)/(0+0i)) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_675d9cf5c53725282f0c294743ce6b39() {
        assertEval("{ ((0+1i)/0) * ((0+1i)/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_0ae6d7ac55927a259d69f7f03a4542e3() {
        assertEval("{ ((0-1i)/0) * ((0+1i)/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_27f92a8a7da750230f55859308842034() {
        assertEval("{ ((0-1i)/0) * ((0-1i)/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_2afee5796d3c017f5bb957d5553f5800() {
        assertEval("{ ((0-1i)/0) * ((1-1i)/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_b8ac47096347e664f052f76de05fe994() {
        assertEval("{ ((0-1i)/0) * ((-1-1i)/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_3bb94c09c10232c654e3a8d73caa236d() {
        assertEval("{ 0/0 - 4i }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_413b4efc28ed020519ac2305176225ff() {
        assertEval("{ 4i + 0/0  }");
    }

    @Test
    public void TestSimpleArithmetic_testComplexNaNInfinity_4bc46d908fc18069dc1921591018a438() {
        assertEval("{ a <- 1 + 2i; b <- 0/0 - 4i; a + b }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_f17675ff294c6d47a0d09cb3db0bdf2a() {
        assertEval("{ 1^(1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_4710d67f4bd1982f8c40202ed5307dce() {
        assertEval("{ (-2)^(1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_6d863a43b4b431014a0dcbda198c0af8() {
        assertEval("{ (-2)^(-1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_504ab1a6fda5fb22ee8cf23fe4624f81() {
        assertEval("{ (1)^(-1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_1bb4c11ec62cdf615b04b1dcb3185cfb() {
        assertEval("{ 0^(-1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_428f96d84c85cc65662e08ab2d77d1d1() {
        assertEval("{ 0^(1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_924b9c012d964293a4383a9399ee6a83() {
        assertEval("{ 0^(0/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_cb129d707887df32a9b72c721dbf5199() {
        assertEval("{ 1^(0/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_f947c668e5820532d6f52ca88e810da3() {
        assertEval("{ (-1)^(0/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_f290cee9e92be8587a7b24f137183d2b() {
        assertEval("{ (-1/0)^(0/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_1d4363eb048e63be2bd9139289c6b738() {
        assertEval("{ (1/0)^(0/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_c3cce60bf627dc8bd18806a13df87aae() {
        assertEval("{ (0/0)^(1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_7fdec89de71f828679d99068de8a70e8() {
        assertEval("{ (-1/0)^3 }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_3245c9f71d4a8423326955c12aabd2a4() {
        assertEval("{ (1/0)^(-4) }");
    }

    @Test
    public void TestSimpleArithmetic_testExponentiation_611e93b0981944cb54f20b5a79b1bce4() {
        assertEval("{(-1/0)^(-4) }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerDivision_3b1bbf0ad36002ef273d079f5390abdb() {
        assertEval("{ 3 %/% 2 }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerDivision_88024b2c4c54a96e1833b57b07471f45() {
        assertEval("{ 3L %/% 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerDivision_4c13d6cec19707fc289ad9b95ff6d6eb() {
        assertEval("{ 3L %/% -2L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerDivision_0e5eed1178d5b020dbbdc5fe357f700f() {
        assertEval("{ 3 %/% -2 }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerDivision_eaa376f24e148a6538d9df85851782c4() {
        assertEval("{ 3 %/% 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_e56646664ed3ccebd0b978a474ccae3c() {
        assertEvalWarning("{ x <- 2147483647L ; x + 1L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_9cc3316d11cb57fdb9d71e833e43dcd6() {
        assertEvalWarning("{ x <- 2147483647L ; x * x }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_a5d2e40a03d44363ee0bf4afb8a3a70d() {
        assertEvalWarning("{ x <- -2147483647L ; x - 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_52bf15e78c97dfea203e3a3a75c0c096() {
        assertEvalWarning("{ x <- -2147483647L ; x - 1L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_4a27f3f0ef1c0e73ea1ae4a599818778() {
        assertEvalWarning("{ 2147483647L + 1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_d17b51eaa8f9d85088d30f7b59888e01() {
        assertEvalWarning("{ 2147483647L + c(1L,2L,3L) }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_a208f558c3d55c2d86aa5cfe699b218a() {
        assertEvalWarning("{ 1:3 + 2147483647L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_1444a6f9919138380d32057ddfa36eec() {
        assertEvalWarning("{ c(1L,2L,3L) + 2147483647L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_dd77dbcef3cf523fc2aa46c4c0deaf5c() {
        assertEvalWarning("{ 1:3 + c(2147483647L,2147483647L,2147483647L) }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_72a5d4dd67ed5a21396516c0968edf6e() {
        assertEvalWarning("{ c(2147483647L,2147483647L,2147483647L) + 1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_6fd7e6825d4c56f715061fbb7124628a() {
        assertEvalWarning("{ c(1L,2L,3L) + c(2147483647L,2147483647L,2147483647L) }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_6b9734a08caf45fad14bde9d7b10a97c() {
        assertEvalWarning("{ c(2147483647L,2147483647L,2147483647L) + c(1L,2L,3L) }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_8b60212b3b68acfddf00f22ea65883db() {
        assertEvalWarning("{ 1:4 + c(2147483647L,2147483647L) }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_ffe1faa265bec1af2b8c1f1c4d9fc343() {
        assertEvalWarning("{ c(2147483647L,2147483647L) + 1:4 }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_8894beb2d0cbaf7303c2efa930d6684b() {
        assertEvalWarning("{ c(1L,2L,3L,4L) + c(2147483647L,2147483647L) }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_68d4c3db613629f473aa7128bff2c5a8() {
        assertEvalWarning("{ c(2147483647L,2147483647L) + c(1L,2L,3L,4L) }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflowNoWarning_a3ab4fef386bc64ef22475c67e0ffa13() {
        assertEval("{ 3L %/% 0L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflowNoWarning_046ca027eee4285bccdc8a4eebb20ab2() {
        assertEval("{ 3L %% 0L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflowNoWarning_7a89533aae8626464e0426511cbfc211() {
        assertEval("{ c(3L,3L) %/% 0L }");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflowNoWarning_d9e8981d1a9430da45fae8c5a53f8184() {
        assertEval("{ c(3L,3L) %% 0L }");
    }

    @Test
    public void TestSimpleArithmetic_testMatrices_1e3c62e0c2fe6df45e9682661c296c9e() {
        assertEval("{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m-1 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatrices_5e7a942b4dd16d7b452ea0befe6c79b3() {
        assertEval("{ z<-matrix(12)+1 ; z }");
    }

    @Test
    public void TestSimpleArithmetic_testMatrices_6501297c30346fab1b5e3cb8243d733e() {
        assertEval("{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m+1L }");
    }

    @Test
    public void TestSimpleArithmetic_testMatrices_20ecb09faabed8eebd8838ad5e84bd30() {
        assertEval("{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m+m }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesOuterProduct_10f665dc31dc8de98c87bb9b2603e3ac() {
        assertEval("{ 1:3 %o% 1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesOuterProduct_b4ef8ce1b5d0ec522e1700961204a7fe() {
        assertEval("{ 1:3 %*% c(TRUE,FALSE,TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesOuterProduct_37728a54ca59a17f41ea4c8e909975fa() {
        assertEvalError("{ 1:4 %*% 1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesOuterProduct_35e59fddf166a877e6189099ee6fb1fa() {
        assertEvalError("{ 1:3 %*% as.raw(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesOuterProduct_a09ecf2d4e23f8197f1193edacadb395() {
        assertEvalError("{ as.raw(1:3) %o% 1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesPrecedence_2ffbf2ffcec6699d78e24fb25ef01c31() {
        assertEval("{ 10 / 1:3 %*% 3:1 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesPrecedence_535ad26d0ae2d6aebb3f6b8ee7202d6b() {
        assertEval("{ x <- 1:2 ; dim(x) <- c(1,1,2) ; y <- 2:3 ; dim(y) <- c(1,1,2) ; x + y }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_8ca5705f5446845cbed42dd449fc7c06() {
        assertEval("{ double() %*% double() }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_af557b2850b93c6f969d8bbddeda060f() {
        assertEval("{ m <- double() ; dim(m) <- c(0,4) ; m %*% t(m) }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_f85f22d8857748f52317e561e2718ae3() {
        assertEval("{ m <- double() ; dim(m) <- c(0,4) ; t(m) %*% m }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_f1ed21950d9811ec9ce279909f8ac20a() {
        assertEval("{ m <- double() ; dim(m) <- c(0,4) ; n <- matrix(1:4,4) ; m %*% n }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_a0b87c9b473a105c31dbe9f024f1229f() {
        assertEval("{ m <- double() ; dim(m) <- c(4,0) ; n <- matrix(1:4,ncol=4) ; n %*% m }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_2d6353b38e2b880f487de091cada51de() {
        assertEval("{ x <- 1:3 %*% 9:11 ; x[1] }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_24bd08e2ca37ab0518a7581f2f50ddee() {
        assertEval("{ m<-matrix(1:3, nrow=1) ; 1:2 %*% m }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_5ec0a442914239f245360029a38d268d() {
        assertEval("{ m<-matrix(1:6, nrow=2) ; 1:2 %*% m }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_d0711a4730cdf02f5a3b8f72241f1e4b() {
        assertEval("{ m<-matrix(1:6, nrow=2) ; m %*% 1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_863b40edd577576cae70ebf3e7bfced1() {
        assertEval("{ m<-matrix(1:3, ncol=1) ; m %*% 1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_5ff07900e3894985c2c175e2f144e1e5() {
        assertEval("{ a<-matrix(1:6, ncol=2) ; b<-matrix(11:16, nrow=2) ; a %*% b }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_fcf07ee50d1cec625af66d876a3ade31() {
        assertEval("{ a <- array(1:9, dim=c(3,1,3)) ;  a %*% 1:9 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_caeff71e032666868b80c5661b0aedbf() {
        assertEval("{ m <- matrix(c(1,2,3,0/0), nrow=4) ; m %*% 1:4 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_70b2522d5c0789b448aaa4e42bcb041d() {
        assertEval("{ m <- matrix(c(NA,1,0/0,2), nrow=2) ; 1:2 %*% m }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_54299d1df8e5f86b0085b241c557b2db() {
        assertEval("{ m <- double() ; dim(m) <- c(0,0) ; m %*% m }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_1ec6885e784fa47096ed05a88cc80f60() {
        assertEval("{ m <- matrix(c(NA,1,4,2), nrow=2) ; t(m) %*% m }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_dcc24f855641426f57aae95814c402ba() {
        assertEval("{ matrix(c(3,1,0/0,2), nrow=2) %*% matrix(1:6,nrow=2) }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_6b9454263a04c54bc733dd613376e166() {
        assertEvalError("{ matrix(2,nrow=2,ncol=3) %*% matrix(4,nrow=1,ncol=5) }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_ead68010e962c2d7e87bdca6608f0e53() {
        assertEvalError("{ 1:3 %*% matrix(4,nrow=2,ncol=5) }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_b920cd3ed3cec15b725979c29716cbaf() {
        assertEvalError("{ matrix(4,nrow=2,ncol=5) %*% 1:4 }");
    }

    @Test
    public void TestSimpleArithmetic_testMatricesProduct_bc12ac5a1ffe6af2ea4fd50c117b9c64() {
        assertEvalError("{ as.raw(1:3) %*% 1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testModulo_202573a7f4d94dd371f035e6320682ba() {
        assertEval("{ 3 %% 2 }");
    }

    @Test
    public void TestSimpleArithmetic_testModulo_9bb9e1239536cbde22cebb969dcb45cf() {
        assertEval("{ 3L %% 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testModulo_9e38b0a757946bb29595e4d1088a2e66() {
        assertEval("{ 3L %% -2L }");
    }

    @Test
    public void TestSimpleArithmetic_testModulo_06b718e5ce5ae46c4a411a09da74d9f0() {
        assertEval("{ 3 %% -2 }");
    }

    @Test
    public void TestSimpleArithmetic_testModulo_580af7a9bdcb8715462ed7eed121a9ba() {
        assertEval("{ 3 %% 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_cff9c3d9b0fd8cc5fbcf3bc968b56d36() {
        assertEval("{ TRUE && FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_05930136c0a595320cf48c26498946d7() {
        assertEval("{ FALSE && FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_b67dff95a7948a3a53e547752dcae356() {
        assertEval("{ FALSE && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_c3ee6db57300925d8ce3d59d3099896d() {
        assertEval("{ TRUE && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_21c10a7cda34cd431d95210e1ea170ba() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; FALSE && f(FALSE) ; x } ");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_0b093f90a0e1ef1a86a958007b96db3b() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; c(FALSE, TRUE) && f(FALSE) ; x } ");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_1f396564af274610e5be09291c5fc95d() {
        assertEval("{ TRUE && NA }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_97ce6d0e8cb12d9a46f7e74cd0752930() {
        assertEval("{ FALSE && NA }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_0b0cb7f79750321198743bd2ccf4fb92() {
        assertEval("{ NA && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_93c19a2cb63dfc748a1394a8143eef3b() {
        assertEval("{ NA && FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_4eaa032d92546e29feb671e9b97b6dae() {
        assertEval("{ NA && NA }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_ebfdf2708abf9adaa3d7a3227bfbe73a() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA && f(NA) ; x } ");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_b01625d80e4379978afb1d75376cb6eb() {
        assertEval("{ TRUE && c(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_551e97c314a1a0c046e7633b5cc84a1f() {
        assertEval("{ c(TRUE, FALSE) && c(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_eebd41a5410d062a6b2137d0b634c952() {
        assertEval("{ c(TRUE, FALSE) && c(TRUE, FALSE, FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_f4537d57cf8d3df0d2fe212a5d0a3d0e() {
        assertEval("{ c(1.0, 0.0) && 1.0 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_46227f653f6fce0f79e69d6db085bc60() {
        assertEval("{ c(1, 0) && 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_5afad57a0c523b0dcf5649822c4f8a37() {
        assertEval("{ c(1.1, 0.0) && c(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_d0c22acdacf31c2a8f13048f02bde419() {
        assertEval("{ c(1, 0) && 1+1i }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_68b11794f64110f23c2d8271dcff5f34() {
        assertEval("{ c(1+1i, 0+0i) && 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_50b0be4def9e64e8876db0de53d0a0f6() {
        assertEval("{ 1.0 && c(1+1i, 0+0i) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_0445580e385bed757d863aa9838cfb1a() {
        assertEval("{ c(1+1i, 0+0i) && c(1+1i, 0+0i) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_4b86f5b4342387abd9e8f9bee52ffba0() {
        assertEvalError("{ c(\"1\", \"0\") && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_6decce739d81b593c0049822632f9e12() {
        assertEvalError("{ c(1, 0) && \"1\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_458c45be2120f0f097d58673e99fc5d0() {
        assertEvalError("{ \"1\" && c(1, 0) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAnd_6acb641048da6f23855f1f75fb877993() {
        assertEvalError("{ as.raw(c(1, 0)) && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_7f3ae07c12cb772d001e503b34ab3f33() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_af987d86996028033ce13fb70386754f() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_88bd252f9707cc0728933d5a01d5ec36() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(1,2) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_0d6f9f6d6b5bf8c004bd208c8b88a72e() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(double(),2) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_c924f78b26ae5bf033f4de08b188383f() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(integer(),2) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_2a6f592a022116d86a5ec89d04304c16() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(2+3i,1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_72585e59f431501cf5001dd2c3e50d33() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(2+3i,logical()) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_852d4ff2e6db41111d0f4c780193e927() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(1:3,4:10) ; f(1,2) ; f(logical(),4) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalAndAsFunction_127115bfa7022c79f86704e41e945f5c() {
        assertEval("{ f <- function(a,b) { a && b } ;  f(c(TRUE, FALSE), logical()) ; f(TRUE, c(TRUE,TRUE,FALSE)) ; f(1,2) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalLengthChecks_d490718031714d1bdd340f16c17adb30() {
        assertEvalWarning("{ as.raw(c(1,4)) | as.raw(c(1,5,4)) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalLengthChecks_8ffa31733d993b902cfacd5ad43d3287() {
        assertEvalWarning("{ as.raw(c(1,5,4)) | as.raw(c(1,4)) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalLengthChecks_cff0c7f286d7100c893ceaf4dee9a0c2() {
        assertEvalWarning("{ c(TRUE, FALSE, FALSE) & c(TRUE,TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalLengthChecks_1ea15db9b7685a8714146e29573cabde() {
        assertEvalWarning("{ c(TRUE, TRUE) & c(TRUE, FALSE, FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalLengthChecks_a1594db2ddfa1d07731f6c5f92cd9833() {
        assertEvalWarning("{ c(a=TRUE, TRUE) | c(TRUE, b=FALSE, FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalOr_526f9e209761ca3bbd64718e71e97c92() {
        assertEval("{ 1.1 || 3.15 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalOr_45cfdfc8a595a5ca7def354d7302fa2b() {
        assertEval("{ 0 || 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalOr_402100c7062bc903b141b0f04e634db8() {
        assertEval("{ 1 || 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalOr_f1db670be5140a3855c81cfab1cdce57() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; TRUE || f(FALSE) ; x } ");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalOr_760a93622b583f112db61af5ecb89065() {
        assertEval("{ NA || 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalOr_575c3b7057582a5e30afa06c6ad2ad77() {
        assertEval("{ 0 || NA }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalOr_242f310f9750193bba40515bb9f20379() {
        assertEval("{ NA || 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalOr_9b819df695ba4d3b15034aa187c01bd3() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA || f(NA) ; x }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_cfba50a4001725b57220cb4dbe5cfd6a() {
        assertEval("{ FALSE && \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_fdc8ea59d7d02e9f011cdc1e3fbd6dfb() {
        assertEval("{ TRUE || \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_cd3b11a8a08ad8e03971429625307fa5() {
        assertEval("{ 0 && \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_05ec7b8e23727b3a9523c6b3bdcde09f() {
        assertEval("{ 0.0 && \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_53f44f07da03b9d10ab9dc94241ab996() {
        assertEval("{ 1+2i && 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_4e6a6d54d19e85dbee52ca1e9d3fbadf() {
        assertEval("{ 1+2i && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_8b8c90899a26f742e85bf8683fd9f1fe() {
        assertEval("{ TRUE && 0+0i}");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_515b2f282e6c851eef0caf046006c490() {
        assertEval("{ 1.0 && 0+0i}");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_3f2ad5582aaf127b3fa1203f59721aa3() {
        assertEval("{ logical(0) && logical(0) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_e87b491302f42fd5b9d44498164b954c() {
        assertEval("{ logical(0) && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_85db1f05c7496d81ab9698cda92d281f() {
        assertEval("{ logical(0) && FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_b56c8840a38299ad9972cca70c0e981d() {
        assertEval("{ 1 || \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_e3bebc31704023fade44e00f7abfbe92() {
        assertEval("{ FALSE || 1+2i }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_91c7d8f56c2020b4f049b8a1f2b4920b() {
        assertEval("{ 0+0i || FALSE}");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_250eb924ad73f0bd5845691cf37bc3e8() {
        assertEval("{ 1.1 || \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_5dd259f546909e39cf793ce5b00ff554() {
        assertEval("{ 1+2i || 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_ed2ce66395f43593bd77dfa55bde6bed() {
        assertEval("{ 1+2i || 1.0 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_5663699886cbdea8749e9cdc778245c9() {
        assertEval("{ c(TRUE,FALSE) | logical() }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_077b6a471529efd7c28cf1386adbc0ae() {
        assertEval("{ logical() | c(TRUE,FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_e980b880f67c586ee098681fb19abb1d() {
        assertEval("{ as.raw(c(1,4)) | raw() }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_5b535f433912e7c82ad33269b3c9c3fb() {
        assertEval("{ raw() | as.raw(c(1,4))}");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_82cfd97f03646f390c31d30590ed9c9f() {
        assertEval("{ logical(0) || logical(0) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_58043a4520662956383c9439eda19b3a() {
        assertEval("{ logical(0) || TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_e76e51b08dc40a0aaecd51fa1282cb91() {
        assertEval("{ logical(0) || FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_cd87ee7ad7211e553313f7da7ed79f00() {
        assertEvalError("{ \"hello\" || TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_3d4942d3f510f8b7df72309b09d0f706() {
        assertEvalError("{ FALSE || \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_a8e04940f4acf7b01d96884ee2e2802e() {
        assertEvalError("{ 1 && \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_b0d66f451f4dca2a71c2583473ffce37() {
        assertEvalError("{ 0.1 && \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_f10d753b2bced9e3dffb226ef0873762() {
        assertEvalError("{ TRUE && \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_7fa0b8add5e6d06679999cb35350915d() {
        assertEvalError("{ \"hello\" && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_3b90ad971292b18114d513b30e69f5fb() {
        assertEvalError("{ \"hello\" && 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_5838ac95b19505178a85db9c0028cc50() {
        assertEvalError("{ \"hello\" && 1L }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_caf963ebc8aa302adef10c8d57b0beb5() {
        assertEvalError("{ NULL && 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_68feed475319e891b10e8af5da92d322() {
        assertEvalError("{ 0.1 && NULL }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_3d7fba79ef009650011f6e19d9a66f01() {
        assertEvalError("{ as.raw(1) && 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_df6652528d8be7f3d56f1cfd1327184e() {
        assertEvalError("{ 0.1 && as.raw(1) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_86ba711f72f5ac4b0d5c22311f9d4dc4() {
        assertEvalError("{ character(0) && FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_101ebf2b12333cafe8aca411da8715b4() {
        assertEvalError("{ character(0) && TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_a3e717839989fef0f0f31d9228e40dfc() {
        assertEvalError("{ 0 || \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_79c0fd44f9ee5f8dad0bc89580c3d5c8() {
        assertEvalError("{ 0L || \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_ca99587d0dccc88b7e24e4276ca4ad67() {
        assertEvalError("{ \"hello\" || FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_0f7a997113480257623eb03f8379e158() {
        assertEvalError("{ \"hello\" || 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_fde5b40fd6ac3d81925ea9695a5370ab() {
        assertEvalError("{ \"hello\" || 1L }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_c95444abd5e43a0900d814a17fc28a58() {
        assertEvalError("{ NULL || 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_f4f1d0076aac93764444979f2ef93750() {
        assertEvalError("{ 0 || NULL }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_d43c763bc74de86bfca4c261cbc965f0() {
        assertEvalError("{ as.raw(1) || 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_8e4ec7bd6b3ef0faf637c0b9fa1a3c8b() {
        assertEvalError("{ 0 || as.raw(1) }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_0f8ddb2f431956495e6d3de5d97793cb() {
        assertEvalError("{ as.raw(10) && \"hi\" }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_82387ae5f5be52ae3c5771b24adffd18() {
        assertEvalError("{ character(0) || FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testNonvectorizedLogicalSpecialChecks_2e79166909c81dc7a05657a71ef3b7f2() {
        assertEvalError("{ character(0) || TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_186631423c2671219f6f877cecd6813b() {
        assertEval("{ 1L / 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_69097829d5c88829794b03d29d20b8ce() {
        assertEval("{ f <- function(a, b) { a / b } ; f(1L, 2L) ; f(1, 2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_94287359cfb1c1ddcca7c50d6d1fc934() {
        assertEval("{ (1:2)[3] / 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_84ddba9eb45e94df82001276c9f1bcdc() {
        assertEval("{ 2L / (1:2)[3] }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_ef2f16bd42f3d621ddf6f5b85a8c2d07() {
        assertEval("{ a <- (1:2)[3] ; b <- 2L ; a / b }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_0b07e9009d2b69b0a2d3a3455795f373() {
        assertEval("{ a <- 2L ; b <- (1:2)[3] ; a / b }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_e75f1cfbb6b0dbba9f5f172556a88c0a() {
        assertEval("{ (1:2)[3] + 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_4ec2b1c1f69dd9db4c2a00b54718a383() {
        assertEval("{ 2L + (1:2)[3] }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_5228271a44507bcd597e7d9d62fb3443() {
        assertEval("{ a <- (1:2)[3] ; b <- 2L ; a + b }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_9ab44a01d786f609320ecbda14f28abf() {
        assertEval("{ a <- 2L ; b <- (1:2)[3] ; a + b }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_d270e7cc8f6c72a9ce5baeb4debe7dad() {
        assertEval("{ a <- (1:2)[3] ; b <- 2 ; a + b }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_9ef70bef566326dfc334d1ecdac268cf() {
        assertEval("{ a <- 2 ; b <- (1:2)[3] ; a + b }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_2ef895188aeec66b46a86a0084b2a897() {
        assertEval("{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,4) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_56777eeff1eb98c086df11debd53a324() {
        assertEval("{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,4L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_5c748b3d4087d10ba63f6a8c138ae1ed() {
        assertEval("{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2L,(1:2)[3]) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_84880b284d8e876f1305479838b3b1a9() {
        assertEval("{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f((1:2)[3], 2L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_116703f2c3a220bc9256a6f605642a9a() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,4) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_70e80e6089bb9dbcc90262b7b8ded679() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,4L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_d6249993511f48359b36daa49673225b() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f(2L,(1:2)[3]) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_75a20c7661d5e982b8f2b4bdc2577da8() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1L) ; f((1:2)[3], 2L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_2f158ef5596f78f866f1de7bce1f7784() {
        assertEval("{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2,(1:2)[3]) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_77bbb91ce80d2ceb3b1fa96156368f95() {
        assertEval("{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f((1:2)[3],2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_d6e37e585a5786869d75d20335b2b4f6() {
        assertEval("{ f <- function(b) { 1 / b } ; f(1) ; f(1L) ; f(4) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_925fb3c91d92ac487d4870c346573acd() {
        assertEval("{ f <- function(b) { 1 / b } ; f(1) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_b9293f4877209fe4c2d1b7934c7557f0() {
        assertEval("{ f <- function(b) { 1 / b } ; f(1L) ; f(1) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_f68293e2bd9e5050f7837a7acf4f3a06() {
        assertEval("{ f <- function(b) { 1 / b } ; f(TRUE) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_887ff2a05b1453b98aea46535d185a42() {
        assertEval("{ f <- function(b) { b / 1 } ; f(1) ; f(1L) ; f(4) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_acc6834548ad102ce95d9a70ced0de76() {
        assertEval("{ f <- function(b) { b / 2 } ; f(1) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_8c20fe2311e73618347df9436dfccac9() {
        assertEval("{ f <- function(b) { b / 4 } ; f(1L) ; f(1) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_13aeae0ea9aeabb6c54503c997181dd0() {
        assertEval("{ f <- function(b) { 4L / b } ; f(1L) ; f(2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_239c1fda07eec2149279fbcbb024e970() {
        assertEval("{ f <- function(b) { 4L + b } ; f(1L) ; f(2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_7e07c33b47ae19bbce6c1a30dd2b4397() {
        assertEval("{ f <- function(b) { b / 2L } ; f(1L) ; f(2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_056fd1401eb9b6d44fdd6b7118adec90() {
        assertEval("{ f <- function(b) { 4L / b } ; f(1L) ; f(2) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_e5b5720cd626d122d70a44a63d2e038d() {
        assertEval("{ f <- function(b) { 4L + b } ; f(1L) ; f(2) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_82b87d6972e69ef3aa94df96bceb9a13() {
        assertEval("{ f <- function(b) { 4L + b } ; f(1L) ; f(2) ; f((1:2)[3]) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_7613b5ee974bcf117b9ad2a1aef4482d() {
        assertEval("{ f <- function(b) { 4L / b } ; f(1L) ; f(2) ; f((1:2)[3]) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_fad6b936dbaf7bf25da3ea9d56323264() {
        assertEval("{ f <- function(b) { (1:2)[3] + b } ; f(1L) ; f(2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_bf738ed494d2f6e7c4ad0b264f901dad() {
        assertEval("{ f <- function(b) { (1:2)[3] + b } ; f(1) ; f(2L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_569a75cffcded7df47e97cdef09d39a1() {
        assertEval("{ f <- function(b) { b + 4L } ; f(1L) ; f(2) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_501e7431265017eac321df953b5d76a2() {
        assertEval("{ f <- function(b) { b + 4L } ; f(1L) ; f(2) ; f((1:2)[3]) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_6410a63578eda77956f1eb6bd7887048() {
        assertEval("{ f <- function(b) { b / 4L } ; f(1L) ; f(2) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_5b709806d5a2e78cf7266aee73cb11c7() {
        assertEval("{ f <- function(b) { b / 4L } ; f(1L) ; f(2) ; f((1:2)[3]) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_a22bb6e39039a0e2a4ab56be9aa3bdcb() {
        assertEval("{ f <- function(b) { 1 + b } ; f(1L) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_d79498270e9d18dfb1a89fce92ab08ac() {
        assertEval("{ f <- function(b) { FALSE + b } ; f(1L) ; f(2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_c077bbafce498e393c8fa79b9551eebc() {
        assertEval("{ f <- function(b) { b + 1 } ; f(1L) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalars_00e340b620c338b55b0ba841e730ce4c() {
        assertEval("{ f <- function(b) { b + FALSE } ; f(1L) ; f(2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_7a36b65206e2d484390878a9ec86cee3() {
        assertEval("{ (1+2i)*(3+4i) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_262cd3f2bc987a80702aff7b886bdd74() {
        assertEval("{ x <- 1+2i; y <- 3+4i; x*y }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_585854327c85383a0189a81ae30d0f04() {
        assertEval("{ x <- 1+2i; y <- 3+4i; x-y }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_d38efa5cf6e85de2ce0e840877c6274f() {
        assertEval("{ x <- c(-1.5-1i,-1.3-1i) ; y <- c(0+0i, 0+0i) ; y*y+x }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_a7ad6778b6621bb07aaf361afa349c42() {
        assertEval("{ x <- c(-1.5-1i,-1.3-1i) ; y <- c(0+0i, 0+0i) ; y-x }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_d52392544a7d42e16166a7e0fb0a5465() {
        assertEval("{ x <- 1+2i; y <- 3+4i; x/y }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_80cfe9bbee075e0700b78acc33ea4ad6() {
        assertEval("{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; y-x }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_e1ae1c2af2f35adba4733bb031c66b19() {
        assertEval("{ (1+2i)^2 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_274e34fe67c827c3a3481eeb929fd942() {
        assertEval("{ (1+2i)^(-2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_c859ca43706b3a82cad19ecef340e76b() {
        assertEval("{ (1+2i)^0 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_34c8f857664c09e4a590a4fff80f1c83() {
        assertEval("{ 1/((1+0i)/(0+0i)) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_685e18553e73232fd903f34faa58ec02() {
        assertEval("{ ((1+0i)/(0+0i)) ^ (-3) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_5732c8d2f1659e05d68762541d667d29() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1+2i, 3+4i) ; f(1, 2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_cf9d64b117ad27553a621ed57dea3ac6() {
        assertEval("{ f <- function(a, b) { a + b } ; f(2, 3+4i) ; f(1, 2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_f66aaa58a9903fa88847396fe7dde40d() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1+2i, 3) ; f(1, 2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_ae77830355ffa60a341a5af4c66b6bfb() {
        assertEval("{ f <- function(b) { b / 4i } ; f(1) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_d8d77339fc0de88fac10791e3f577ab1() {
        assertEval("{ f <- function(b) { 1i / b } ; f(1) ; f(1L) ; f(4) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_45f6d0c3b8410f3c35be3890b2c65885() {
        assertEval("{ f <- function(b) { 1i / b } ; f(1+1i) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_ba49497cffb3fff3b97b40503f565798() {
        assertEval("{ f <- function(b) { 1i / b } ; f(1) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_a9549fe9b3baad4869a62913144fa5c2() {
        assertEval("{ f <- function(b) { 1i / b } ; f(TRUE) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_2bae58be02dccb51ae4cad3616f0cdad() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1,1) ; f(1,1+2i) ; f(TRUE, 2)  }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_b1b4bb9041840baeab0c2eaa666173ca() {
        assertEval("{ f <- function(b) { 1 / b } ; f(1+1i) ; f(1L)  }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_9b515da8059337cca20b191fb590dbc6() {
        assertEval("{ f <- function(b) { b / 2 } ; f(1+1i) ; f(1L)  }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_f777aed6636c3d4bfab7026441d24188() {
        assertEval("{ f <- function(a, b) { a / b } ; f(1,1) ; f(1,1L) ; f(2+1i,(1:2)[3]) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_163f2795c697e95e51884f26116db16b() {
        assertEval("{ (0+2i)^0 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_9bd3ca7d6b66f864b101aa1165f16435() {
        assertEval("{ (1+2i) / ((0-1i)/(0+0i)) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_a86889b885428d4aeed5f5abec2fb487() {
        assertEval("{ ((1+1i)/(0+0i)) ^ (-3) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_c65fc676672c24a2284a61ac44346062() {
        assertEval("{ (3+2i)^2 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_ec41b305258209dcd1f01b4c73dfa38c() {
        assertEval("{ x <- 1+2i; y <- 3+4i; round(x*x*y/(x+y), digits=5) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_e04a6b232a786acb98dfb4218c363291() {
        assertEval("{ round( (1+2i)^(3+4i), digits=5 ) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_b962b71eb5d225af35b575db321f93dc() {
        assertEval("{ round( ((1+1i)/(0+1i)) ^ (-3.54), digits=5) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_c4757c37a7ae086ad8969c73a91e9cf2() {
        assertEval("{ c(1+2i,1.1+2.1i) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_78cc1126bf3f8f6e3c709b5beacf95d8() {
        assertEval("{ c(1+2i,11.1+2.1i) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_a2328b24a0a62e3659427bb986873204() {
        assertEval("{ c(1+2i,1.1+12.1i) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_db6b99346a02533a68ac1bdc5d6a1182() {
        assertEval("{ c(11+2i,1.1+2.1i) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_5434efc74a8434ff9b00c74c21af36be() {
        assertEval("{ c(1+12i,1.1+2.1i) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_f8e47fb5c1d2a99c0ceadffef991295e() {
        assertEval("{ c(-1+2i,1.1+2.1i) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_60b9c85b174529d3ae154bf8ae10cd98() {
        assertEval("{ c(1-2i,1+22i) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_3687279e543d6b321de708f1696d22d9() {
        assertEval("{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; round(y/x, digits=5) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_0dc33376658fd492af2c5beb032efdbf() {
        assertEval("{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; y+x }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplex_46cb3430474fb02811820b09b2bcd950() {
        assertEval("{ x <- c(-1-2i,3+10i) ; y <- c(3+1i, -4+5i) ; y*x }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRange_dd5eca5b8772a13dc278f20c915b60db() {
        assertEval("{ f <- function(a, b) { a + b } ; f(c(1,2), c(3,4)) ; f(c(1,2), 3:4) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRange_f8875779383c435f06610f698b00e481() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1:2, c(3,4)) ; f(c(1,2), 3:4) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRange_5636fbef654851e28d20d8bbb43fc670() {
        assertEval("{ f <- function(a, b) { a + b } ; f(1:2, 3:4) ; f(c(1,2), 3:4) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_5e5988347c2d8cbd4606eee90ce2b335() {
        assertEval("{ 1L+1 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_b779c148ae12bf9a4e04f1c519982853() {
        assertEval("{ 1L+1L }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_a0e88bbb1d756086d455b6d8f465b8dd() {
        assertEval("{ ( 1+1)*(3+2) }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_89950aaa7904a1aa1f3c6a1cc7fd2518() {
        assertEval("{ 1+TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_1ae0f163b8728127078c82e6e565a8d8() {
        assertEval("{ 1L+TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_9624d804341a740e3857be00394ae0b8() {
        assertEval("{ 1+FALSE<=0 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_51569e83b1718ab59d4fefbd74b7c730() {
        assertEval("{ 1L+FALSE<=0 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_c982e8fb2ee87aabd3cbc22df8731f45() {
        assertEval("{ TRUE+TRUE+TRUE*TRUE+FALSE+4 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_0e87d87b38b7386f4300ebbffe64a3c6() {
        assertEval("{ 1L*NA }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_201efe7374a30129f27f930b5d57015f() {
        assertEval("{ 1+NA }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_6bfe156ff2611a1de13f1001c82b08a4() {
        assertEval("{ 2L^10L }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsReal_da3edbe7985b8d4c078992481c60d00c() {
        assertEval("{ 0x10 + 0x10L + 1.28 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRealIgnore_706f889093f4841d307059b60cb81c13() {
        assertEval("{ 1000000000*100000000000 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRealIgnore_85c78d2d490e3d28bc72254fbec91949() {
        assertEval("{ 1000000000L*1000000000 }");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRealIgnore_846b21508ff7d445e01b13f78cc32dba() {
        assertEval("{ 1000000000L*1000000000L }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinus_354d377e6e8a798d6a219fa84614eb79() {
        assertEval("{ -3 }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinus_c0a840f339b3835fd0651357d7854201() {
        assertEval("{ --3 }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinus_7a76b9408e0d879a22542acd68f8e06a() {
        assertEval("{ ---3 }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinus_795eea899e4c26eb99d9ac804c48fbff() {
        assertEval("{ ----3 }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinus_25918da55b4273462e2b83de73d7f553() {
        assertEval("{ -(0/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinus_0ae57acbf3978e9a6e6f362479cef43e() {
        assertEval("{ -(1/0) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_8c4038ab2149a1c53e903705f7bbd937() {
        assertEval("{ f <- function(z) { -z } ; f(TRUE) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_9ac6be2b3cd2ec729f2ae9440e929209() {
        assertEval("{ f <- function(z) { -z } ; f(1L) ; f(1) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_c33985a5a61dd127b8344a5f54068948() {
        assertEval("{ f <- function(z) { -z } ; f(1) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_ad32eae103dd185d82e6f66f8c88d0cc() {
        assertEval("{ f <- function(z) { -z } ; f(1L) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_fb30dde62421f121b9f4464672e44dfb() {
        assertEval("{ z <- logical() ; -z }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_4d74f70cdc010447dbd665e51e0ca72a() {
        assertEval("{ z <- integer() ; -z }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_e7a77d18a773ed94576da3005163944a() {
        assertEval("{ z <- double() ; -z }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_4c11e746d97889722bef95b2bdd24346() {
        assertEval("{ f <- function(z) { -z } ; f(1:3) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunction_f2913439e4ee1afd564679f72b140a69() {
        assertEval("{ f <- function(z) { -z } ; f(1:3) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunctionComplex_2ef3e2b434c2df195cd1a5960c38bfa6() {
        assertEval("{ f <- function(z) { -z } ; f(1L) ; f(1+1i) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunctionComplex_ee081ab92d450e411a984c558262615c() {
        assertEval("{ f <- function(z) { -z } ; f(1+1i) ; f(1L) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunctionComplex_cd4ef6b3e70982a4c95167396730ad4b() {
        assertEval("{ z <- (1+1i)[0] ; -z }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusAsFunctionComplex_f8f74002ffea632d51fc3d3665458ddc() {
        assertEval("{ f <- function(z) { -z } ; f(1:3) ; f(c((0+0i)/0,1+1i)) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusComplex_dd24e4be6558c646da975eff2f49c134() {
        assertEval("{ -(2+1i)  }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusComplex_0372ccc0dc005166454e6f60ef472f8a() {
        assertEval("{ -((0+1i)/0)  }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusComplex_9ff65d7a79a26d4343c979c130cfd45d() {
        assertEval("{ -((1+0i)/0)  }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusComplex_b993a07efd537eb7df29f4eb2477101c() {
        assertEval("{ -c((1+0i)/0,2) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusDimensions_82d8cc2dfa20802f3af03d30533599c1() {
        assertEval("{ xx <- double(0); dim(xx) <- c(0,0); dim(-xx) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusDimensions_1c0bc1dd2399b5dd2298ffe8d8da94c2() {
        assertEval("{ xx <- double(1); dim(xx) <- c(1,1); dim(-xx) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusErrors_c1f5e118009944a5b67f947745697a4a() {
        assertEvalError("{ z <- \"hello\" ; -z }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusErrors_3ea860899d34a37019008b913240ce41() {
        assertEvalError("{ z <- c(\"hello\",\"hi\") ; -z }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusErrors_3a5d9c20857e8cd1fdf6da7e6ba61ed0() {
        assertEvalError("{ f <- function(z) { -z } ; f(1:3) ; f(\"hello\") }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryMinusVector_8edadc7fccaabe12f07eb8c985aa5b35() {
        assertEval("{ -(1[2]) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNot_611eb958cd71def0fd25c2c1911a775f() {
        assertEval("{ !TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNot_5b5eb15edba8d9739b058b4b3b1f3425() {
        assertEval("{ !FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNot_b79c4e77d1ff433f864e22550d675120() {
        assertEval("{ !NA }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotDimensions_c06858978ee19736bc28f17e7c3acf08() {
        assertEval("{ xx <- double(0); dim(xx) <- c(0,0); dim(!xx) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotDimensions_e16c9de9476e28643ba613022602d2a6() {
        assertEval("{ xx <- double(1); dim(xx) <- c(1,1); dim(!xx) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotError_e1de893845dc88297503728fe5d2e03c() {
        assertEval("{ x<-1:4; dim(x)<-c(2, 2); names(x)<-101:104; attr(x, \"dimnames\")<-list(c(\"201\", \"202\"), c(\"203\", \"204\")); attr(x, \"foo\")<-\"foo\"; y<-!x; attributes(y) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotError_f188fcdda0e80e0093ed4ea740e630cd() {
        assertEvalError("{ l <- c(\"hello\", \"hi\") ; !l }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotError_0a1ca1e4bd2cbc1c6c177fb6648d3db0() {
        assertEvalError("{ l <- function(){1} ; !l }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotError_d2547e3e20e3391361d3ff0603170063() {
        assertEvalError("{ l <- list(1); !l }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotPropagate_44e928a036845cbe587412096f70a046() {
        assertEval("{ x<-1:4; dim(x)<-c(2, 2); names(x)<-101:104; attr(x, \"dimnames\")<-list(201:202, 203:204); attr(x, \"foo\")<-\"foo\"; y<-!x; attributes(y) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotRaw_5a2b5a8b61128750aca8b43af3c88638() {
        assertEval("{ f <- function(arg) { !arg } ; f(as.raw(10)) ; f(as.raw(1:3)) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotRaw_f5bef882d05ecad663e020c1bc381359() {
        assertEval("{ a <- as.raw(201) ; !a }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotRaw_842f10509b520c9b3ad087b281d4db17() {
        assertEval("{ a <- as.raw(12) ; !a }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotRaw_49b21b728afb05180fab326c49e9dcfb() {
        assertEval("{ f <- function(arg) { !arg } ; f(as.raw(10)) ; f(as.raw(c(a=1,b=2))) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotRaw_2f01c418739d7e365f5da87ef163d9ac() {
        assertEval("{ l <- list(); !l }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotRaw_38e2346209ed5b661d4d085d731ec2eb() {
        assertEval("{ f <- function(arg) { !arg } ; f(as.raw(10)) ; f(matrix(as.raw(1:4),nrow=2 )) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotRaw_8801c6cb606818bed4684b55c58bf949() {
        assertEval("{ f <- function(arg) { !arg } ; f(as.raw(10)) ; x <- as.raw(10:11) ; attr(x, \"my\") <- 1 ; f(x) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotVector_1cdb793ddf4f8f12d5c502c5f4f260bf() {
        assertEval("{ !c(TRUE,TRUE,FALSE,NA) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotVector_675094a72491db9301e5e2cf2e0e97a7() {
        assertEval("{ !c(1,2,3,4,0,0,NA) }");
    }

    @Test
    public void TestSimpleArithmetic_testUnaryNotVector_491ec58a4b4f49738b937768d9499719() {
        assertEval("{ !((0-3):3) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_fe55393ecc0bd08a36ecd03e59b1f621() {
        assertEval("{ TRUE & FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_d6dcc5824f84b2861a706947ee15e273() {
        assertEval("{ FALSE & FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_5179740d36cc7cdf30f9329d39e06728() {
        assertEval("{ FALSE & TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_ec24d35230cc384a67d6f5846a6b9365() {
        assertEval("{ TRUE & TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_0159d0b79cf4e0b6dfa9a534759eec6a() {
        assertEval("{ TRUE & NA }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_24729b1d3c5d50b859f09a5fa708562a() {
        assertEval("{ FALSE & NA }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_a823ff4fd47e829c8fcd8b6c2a835ee0() {
        assertEval("{ NA & TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_1ebf7c109bd5b25fe4aa9d2b7f4817cd() {
        assertEval("{ NA & FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_de032146890677546c77d5a26eadc7cd() {
        assertEval("{ NA & NA }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_c883245aa7598b61072222b846e7632d() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA & f(NA) ; x }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_5606cb8b7aeb5d28f3fc21854d2bc619() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; FALSE & f(FALSE) ; x }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_f48496f675d04b09c3c4b09648ee26f3() {
        assertEval("{ 1:4 & c(FALSE,TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAnd_c184b13bd337f6d163382adb99e68ab0() {
        assertEval("{ a <- as.raw(201) ; b <- as.raw(1) ; a & b }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAndAsFunction_c6c81ab71937235d9de882c22f3a3450() {
        assertEval("{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(FALSE, FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAndAsFunction_6f8663edc4665b1d776819e2842f1009() {
        assertEval("{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(as.raw(10), as.raw(11)) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAndAsFunction_f133e960fcb6e28c776fe3cad1684bd8() {
        assertEval("{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 0L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAndAsFunction_040014da6d7b67600d0bae0930a7801c() {
        assertEval("{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 0) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAndAsFunction_88eb134600c92118c87b5dc9fbacd8fe() {
        assertEval("{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAndAsFunction_2d3db286f2d7609de564b18b045f20db() {
        assertEval("{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(1L, 3+4i) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAndAsFunction_30ea56769075fee8ddcaa21ea0a3a58c() {
        assertEval("{ f <- function(a,b) { a & b } ; f(TRUE, FALSE) ; f(1L, 3+4i) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAndAsFunction_d30d7e1d8ce20e93cae5b041cb305155() {
        assertEval("{ f <- function(a,b) { a & b } ; f(TRUE, FALSE) ; f(TRUE, 3+4i) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_3cb323aedddca7aec31453b56560ed29() {
        assertEval("{ x<-1:4; names(x)<-101:104; x | TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_f174457596a64fdff066c6d12afc5086() {
        assertEval("{ x<-1:4; names(x)<-101:104; y<-21:24; names(y)<-121:124; x | y }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_6d75db9196a7fc63f58c4bda307050ba() {
        assertEval("{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128; x | y }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_5ca008442080837840e1e6669a54420f() {
        assertEval("{ x<-1:4; names(x)<-101:104; attr(x, \"foo\")<-\"foo\"; attributes(x | TRUE) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_7d74605bd0681bef4342741f635d1dae() {
        assertEval("{ x<-1:4; names(x)<-101:104; attr(x, \"foo\")<-\"foo\"; y<-21:24; names(y)<-121:124; attributes(x | y) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_e50d47a9c7c9a3c298a5c78d241eba5b() {
        assertEval("{ x<-as.raw(1:4); names(x)<-101:104; y<-as.raw(21:24); names(y)<-121:124; x | y }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_55b675c333cf66be393c36db69f4c915() {
        assertEval("{ x<-1:4; y<-21:24; names(y)<-121:124; attributes(x | y) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_afec08a1eb0b9964ecd8b188eecf54ee() {
        assertEval("{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128;  attributes(y | x) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_bd3b25b61ec66ebcbb094af2af53c2cc() {
        assertEval("{ x<-1:4; names(x)<-101:104; y<-21:28; attributes(x | y) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributes_6ca96306ddcf6d79c3645b1dcdb13321() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); y<-21:28; x | y }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalComplex_db6245e5fbff0772afabbadd064b5217() {
        assertEval("{ 1+2i | 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalComplex_c2118b77e1d74a887aeb51afd958c386() {
        assertEval("{ 1+2i & 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_fcf4cf5d4ee95b7377fd4201abde0f79() {
        assertEval("{ 1.1 | 3.15 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_c4b174af036113f7ee0427a8108a980b() {
        assertEval("{ 0 | 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_b4ff4fc310d8846d37ac6da649b4d360() {
        assertEval("{ 1 | 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_76f9397ea21963eec828f63f9a933ef4() {
        assertEval("{ NA | 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_57ffdae36cb4b298e36ad31392557867() {
        assertEval("{ NA | 0 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_e1e601fdcc6d7548353e0dd448895bb1() {
        assertEval("{ 0 | NA }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_47cf0ab59c59bc81609a25d1ec2b89cc() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; NA | f(NA) ; x }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_d4c237628c6a4eb2348915e768b49ef5() {
        assertEval("{ x <- 1 ; f <- function(r) { x <<- 2; r } ; TRUE | f(FALSE) ; x }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_69f6945f2d55d3e3e5571e2bfb563409() {
        assertEval("{ a <- as.raw(200) ; b <- as.raw(255) ; a | b }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOr_b0e626937a889ce9724ab2f04295d8ea() {
        assertEval("{ a <- as.raw(200) ; b <- as.raw(1) ; a | b }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOrAsFunction_2430569ece928348fbb44fe735610d35() {
        assertEval("{ f <- function(a,b) { a | b } ; f(c(TRUE, FALSE), FALSE) ; f(1L, 3+4i) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOrAsFunction_8692d06bcd0e170b9e6ff8a8a28ff292() {
        assertEval("{ f <- function(a,b) { a | b } ; f(c(TRUE, FALSE), FALSE) ; f(c(FALSE,FALSE), 3+4i) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalOrAsFunction_bef95365abd9cf0ceadca09e5a20a7d4() {
        assertEval("{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(4, FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalTypeCheck_f868a7be75215431a6b1334cf3089025() {
        assertEvalError("{ TRUE | \"hello\" }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalTypeCheck_887fdea1382cb85634f10bc002f163eb() {
        assertEvalError("{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(as.raw(10), 12) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalTypeCheck_034e6243fe235667b84b772832030996() {
        assertEvalError("{ f <- function(a,b) { a & b } ; f(TRUE, 1L) ; f(FALSE, as.raw(10)) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalTypeCheck_9c7b0a4dbe4f23a2cf145fb069db6b35() {
        assertEvalError("{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(as.raw(4), FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalTypeCheck_d9206d5a6320512214fdd11e28bf5e0c() {
        assertEvalError("{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), as.raw(3)) ; f(FALSE, as.raw(4)) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalTypeCheck_9bfd2b61f4f0894c323c9288e12f46cb() {
        assertEvalError("{ f <- function(a,b) { a | b } ; f(as.raw(c(1,4)), 3) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalTypeCheck_c4ba4c76b8ad6f97f56be65e5b4d264e() {
        assertEvalError("{ f <- function(a,b) { a | b } ; f(3, as.raw(c(1,4))) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_f80723b7de60ac18a6b3b5470731e564() {
        assertEval("{ x<-c(1,2,3);x }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_34f65f65153f9257170190104729625a() {
        assertEval("{ x<-c(1,2,3);x*2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_be19c53a4eb27216e05eb4cd073d99f3() {
        assertEval("{ x<-c(1,2,3);x+2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_821c50f9c93d4ce0aea9286a77ed2db7() {
        assertEval("{ x<-c(1,2,3);x+FALSE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_228f18c5da08d4fd51bbc6c1c69b6713() {
        assertEval("{ x<-c(1,2,3);x+TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_48ccb4bb17db71eb78a647a74eeb787b() {
        assertEval("{ x<-c(1,2,3);x*x+x }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_1b300b87828d2ca05c219061a36b288a() {
        assertEval("{ x<-c(1,2);y<-c(3,4,5,6);x+y }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_d3bab0ec10d77b6597f006889753b101() {
        assertEval("{ x<-c(1,2);y<-c(3,4,5,6);x*y }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_b50fea46c43f35e96b3a302121bb91d1() {
        assertEval("{ x<-c(1,2);z<-c();x==z }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_1b82c40b26b8cf7b0fbcbe3824f88c4c() {
        assertEval("{ x<-1+NA; c(1,2,3,4)+c(x,10) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_3af9364ff2e305fca42b6ac0c67b74e2() {
        assertEval("{ c(1L,2L,3L)+TRUE }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_a7ae4e1fb9e04ff93535700cac1b9626() {
        assertEval("{ c(1L,2L,3L)*c(10L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_7cb740d8b5fcf7c540662f91dad2e91b() {
        assertEval("{ c(1L,2L,3L)*c(10,11,12) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_d373d97eedff5f0181b5fe756156b92a() {
        assertEval("{ c(1L,2L,3L,4L)-c(TRUE,FALSE) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectors_afaba6a25ddbe6025cb1c132b4f667a1() {
        assertEval("{ ia<-c(1L,2L);ib<-c(3L,4L);d<-c(5,6);ia+ib+d }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsComplex_e622aa08e36d1dd2f9cfc2673541bf62() {
        assertEval("{ 1:4+c(1,2+2i) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsComplex_495842139f1f043773b2c44f8d1fa6ef() {
        assertEval("{ c(1,2+2i)+1:4 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsEmptyResult_38742bfc0f5ea992de288b0a1ed044ad() {
        assertEval("{ integer()+1 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsEmptyResult_0d391d4da490d194323b1e179da0f703() {
        assertEval("{ 1+integer() }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsIntegerDivision_287ca51f5ca9733a25e760245f79bd31() {
        assertEval("{ c(3,4) %/% 2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsLengthWarning_434cf402275d72887df7f3d5075408bc() {
        assertEvalWarning("{ 1:2+1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsLengthWarning_fb266e5d477400a227beb2a990776758() {
        assertEvalWarning("{ 1:3*1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsLengthWarning_61d2c11726af0b5cec1c3b100370b905() {
        assertEvalWarning("{ 1:3+c(1,2+2i) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsLengthWarning_ea160ab7a388f1aea439e3233d7e21eb() {
        assertEvalWarning("{ c(1,2+2i)+1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsMatrixDimsDontMatch_4715846ee2436cdade5e4275aac886d9() {
        assertEvalError("{ m <- matrix(nrow=2, ncol=2, 1:4) ; m + 1:16 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsModulo_b27fdb1ffd2c7031e99ad3d04668cd7d() {
        assertEval("{ c(3,4) %% 2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsModulo_fb8ce13c65036336eb29ab9d752e11f7() {
        assertEval("{ c(3,4) %% c(2,5) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_a5857e53025b324d5f4deb9b4b235ebc() {
        assertEval("{ 1 + c(1L, NA, 3L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_0f8c20fd1e2b4c124458626fc6cd1beb() {
        assertEval("{ NA + c(1, 2, 3) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_5d6cc134026a2a400bf806097ac470ac() {
        assertEval("{ c(1, 2, 3) + NA }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_1c476841e9f55094d52c1f95265cd91d() {
        assertEval("{ NA+1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_76d8c8bce4a15fcc8297e780421770a6() {
        assertEval("{ 1:3+NA }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_604d28e7ede894739a1609570052594c() {
        assertEval("{ NA+c(1L, 2L, 3L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_cb302da14588e4889ab571d621e18e8f() {
        assertEval("{ c(1L, 2L, 3L)+NA }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_3bb135d75c81a195cf76b5f7a36cc0d3() {
        assertEval("{ c(NA,NA,NA)+1:3 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_def2344e6000a7ccd48ad858c2398682() {
        assertEval("{ 1:3+c(NA, NA, NA) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_06944cdfa4127476e2371734429c10b0() {
        assertEval("{ c(NA,NA,NA)+c(1L,2L,3L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_c54a2a35a843a4efa33a69c195795da2() {
        assertEval("{ c(1L,2L,3L)+c(NA, NA, NA) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_389c85a610a9c0cd0f6007abd550b46a() {
        assertEval("{ c(NA,NA)+1:4 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_a5309b597099b264b82547881fc98b17() {
        assertEval("{ 1:4+c(NA, NA) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_4131f1be62ff9a0191bc989cb2436885() {
        assertEval("{ c(NA,NA,NA,NA)+1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_01c5e2b08650eb230a0648d6a7da8659() {
        assertEval("{ 1:2+c(NA,NA,NA,NA) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_abc9da17ffde5a966e4d36f456657e12() {
        assertEval("{ c(NA,NA)+c(1L,2L,3L,4L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_86bcdf8eb2b052700f43be978cb0bb13() {
        assertEval("{ c(1L,2L,3L,4L)+c(NA, NA) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_b74304d533411ff2c792d6568ba55548() {
        assertEval("{ c(NA,NA,NA,NA)+c(1L,2L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_904e436f90553249725ca6e3ff9229b9() {
        assertEval("{ c(1L,2L)+c(NA,NA,NA,NA) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_fdec335e4c4b3ccf37bdaf8e1b548683() {
        assertEval("{ c(1L,NA)+1 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_6e5a44d28f18bd91c2999d3b0bd19848() {
        assertEval("{ c(1L,NA) + c(2,3) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNA_1e9071a9e93ec415aa6f276e3a88b146() {
        assertEval("{ c(2,3) + c(1L,NA)}");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNonConformable_2b9020c835ed09c8aa45ff026f9859aa() {
        assertEvalError("{ x <- 1:2 ; dim(x) <- 1:2 ; y <- 2:3 ; dim(y) <- 2:1 ; x + y }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsNonConformable_a631557f258a6d6c95c89ddc20e555f2() {
        assertEvalError("{ x <- 1:2 ; dim(x) <- 1:2 ; y <- 2:3 ; dim(y) <- c(1,1,2) ; x + y }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperations_44d255712be5c567274f75b350d734f8() {
        assertEval("{ a <- c(1,3) ; b <- c(2,4) ; a ^ b }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperations_f31fa3f2579eabcfbcf0418c144a8306() {
        assertEval("{ a <- c(1,3) ; a ^ 3 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperations_7c0266100b32126e72a4ddf0cd65d4d0() {
        assertEval("{ c(1,3) - 4 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperations_fddeb727d1c62277c4675da71cb8dba8() {
        assertEval("{ c(1,3) %/% c(2,4) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperations_bc2cc92da6012e61c40e913719b41e8a() {
        assertEval("{ c(1,3) / c(2,4) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperationsComplex_c4f88c1fe9fb8ce16f6132db7a2b6305() {
        assertEval("{ a <- c(1+1i,3+2i) ; a - (4+3i) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperationsComplex_4060ff48dc1f976360e6a709c8569f77() {
        assertEval("{ c(1+1i,3+2i) * c(1,2) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperationsComplex_4a0fafc4eb5c9674d9ef06057a41b601() {
        assertEval("{ z <- c(1+1i,3+2i) ; z * c(1,2) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperationsComplex_26cbb52252ff028ab7bba252147de26c() {
        assertEval("{ round(c(1+1i,2+3i)^c(1+1i,3+4i), digits = 5) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperationsComplex_a88a08c3bbe4807e9507763726c626e5() {
        assertEval("{ round( 3^c(1,2,3+1i), digits=5 ) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperationsComplex_9b81d167391e44e04a528a367013f806() {
        assertEval("{ z <- c(-1.5-1i,10) ; (z * z)[1] }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperationsComplex_0dae874162cc69c107cdd6f0c5ea334c() {
        assertEval("{ c(1+1i,3+2i) / 2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsOperationsComplex_15a6502f9ece8e54a080a3e20541165c() {
        assertEval("{ c(1,2,3+1i)^3 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_27adc38facd51fc9f2e69fe5c3e56d30() {
        assertEval("{ 1L + 1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_2d4bfded3bdfd86958589973e46fd5b2() {
        assertEval("{ 4:3 + 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_47de5333c035a98dc383da3e3f2602d5() {
        assertEval("{ 1:2 + 3:4 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_fb366fe79110c95d1316ac6b5bd480b0() {
        assertEval("{ 1:2 + c(1L, 2L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_29d5158083ef18879fe68fe720a2742e() {
        assertEval("{ c(1L, 2L) + 1:4 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_a84190f22c5befb7c83934e5f2944312() {
        assertEval("{ 1:4 + c(1L, 2L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_5c4bfbf270c5f6b3c7387ebb96684184() {
        assertEval("{ 2L + 1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_e1699b2805a46685fcd75e71f3ab60b8() {
        assertEval("{ 1:2 + 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_7204e59747c1de8e9a67feea744e7ff9() {
        assertEval("{ c(1L, 2L) + 2L }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_6a18ba526051281ca2ce4a5a88e2a902() {
        assertEval("{ 2L + c(1L, 2L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_efe1b59f2dce52ed7f3137c6ab6bdc4c() {
        assertEval("{ 1 + 1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_3e38fa21a22f6dc0a775a50cbc74008c() {
        assertEval("{ c(1,2) + 1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_4c6d9e6202bf256ee14820189453d6cf() {
        assertEval("{ c(1,2,3,4) + 1:2 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_9b2256415b8ffeccb2a14ac443764148() {
        assertEval("{ c(1,2,3,4) + c(1L,2L) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_fa668c992ee5138c354eb51448cd2c3c() {
        assertEval("{ 1:2 + 1 }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_34f66de4699725129b1265d8d2cf10ea() {
        assertEval("{ 1:2 + c(1,2) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_9417977c7df5c9385d859ffeb31c707e() {
        assertEval("{ 1:2 + c(1,2,3,4) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_27a8646ab027e9cb9a674cfb97c43dd7() {
        assertEval("{ c(1L,2L) + c(1,2,3,4) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_a9df6de7b9778ea074439b3477024f46() {
        assertEval("{ 1L + c(1,2) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_0b81720c4f35708568cfb4c05e4922a5() {
        assertEval("{ 1:4+c(1,2) }");
    }

    @Test
    public void TestSimpleArithmetic_testVectorsRanges_a73289342c5df58c715caa68dcea4846() {
        assertEval("{ c(1,2)+1:4 }");
    }

    @Test
    public void TestSimpleArithmetic_testXor_79ad34585fbc7363e71021912c02f78c() {
        assertEval(" xor(FALSE, FALSE) ");
    }

    @Test
    public void TestSimpleArithmetic_testXor_ca68839175a6f107f85a28531ce3983e() {
        assertEval(" xor(TRUE, FALSE) ");
    }

    @Test
    public void TestSimpleArithmetic_testXor_e5021d833ae597222abb6a8487a23ddc() {
        assertEval(" xor(FALSE, TRUE) ");
    }

    @Test
    public void TestSimpleArithmetic_testXor_30407db58b1526d76ec4d7ad7c6967c6() {
        assertEval(" xor(TRUE, TRUE) ");
    }

    @Test
    public void TestSimpleArithmetic_testXor_69e3c453ca02fe06d1ad0b5373676747() {
        assertEval("{ xor(7, 42) }");
    }

    @Test
    public void TestSimpleArithmetic_testXor_657e3fa183c042e6e05b5576ce2dd4b2() {
        assertEval("{ xor(0:2, 2:4) }");
    }

    @Test
    public void TestSimpleArithmetic_testXor_55adab1407fcef52ee9e5c927aeca8ab() {
        assertEval("{ xor(0:2, 2:7) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_7fa54d8eeff2e2fcbd82d3b6fb833e1a() {
        assertEval("{ x<-1:8; dim(x)<-c(1,2,4); dim(x[1,0,3]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_30488b5c545c0e320762798f7305f7fa() {
        assertEval("{ x<-1:8; dim(x)<-c(1,2,4); dim(x[1,0,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_d117396db8313c46cdbbf79266c28505() {
        assertEval("{ x<-1:8; dim(x)<-c(1,2,4); dim(x[0,1,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_41d367ba3c4c89c8195385d388de8b6d() {
        assertEval("{ x<-1:16; dim(x)<-c(2,2,4); dim(x[0,-1,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_7d11b1e88c5059abb23bffd0989aca65() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,4); dim(x[0,-1,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_0b1267815c33d30fc5e514e4433e4ac5() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,4); dim(x[0,1,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_05c0e7197d7f7b6257e67a59009f33aa() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,4); dim(x[1,0,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_ada18605e29ac6095a99084e74ae774d() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, 0,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_f5e7eac90323ccac9d2114dd45e9a1ec() {
        assertEval("{ x<-1:256; dim(x)<-c(4,4,4,4); dim(x[1,1, 0,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_19bb6fb6d17321586bff51b634724483() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,0, 1,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_65425321a23596811695f54295559b47() {
        assertEval("{ x<-1:256; dim(x)<-c(4,4,4,4); dim(x[1,0, 1,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_a51f3c1b971cf35008b9df963a6e492b() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dim(x[1,0,1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_9586dd6fd7d9547734b53c25053b8fb5() {
        assertEval("{ x<-1:8; dim(x)<-c(1,2,4); dim(x[0,,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_a7c65ae48cd3dd54408819e26912ad78() {
        assertEval("{ x<-1:16; dim(x)<-c(2,2,4); x[,1,1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_543f9f5c22bc2ff25cefa7f0618e29e1() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,4); x[-1,-1,1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_cbd7ca93ab9d577f831eafa6349041d7() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,4); x[-1,1,3] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_7d00e6dea95ddefdda84abd23fd3d406() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,4); x[1,1,3] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_34c47ad746fccb44a4f34801d947f650() {
        assertEval("{ x<-1:32; dim(x)<-c(4,2,4); dim(x[-1,1,1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_c1ec7dc4d096ca84175f761d8ec651cc() {
        assertEval("{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c(\"a\", \"b\", \"c\", \"d\"), NULL, c(\"e\", \"f\", \"g\", \"h\")); x[-1,1,1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_63b17d90cab5471a37d0af95ebdf80d8() {
        assertEval("{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c(\"a\", \"b\", \"c\", \"d\"), NULL, c(\"e\", \"f\", \"g\", \"h\")); x[-1,1,-1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_03c83c893e63d579cad55778f668daf6() {
        assertEval("{ x<-1:16; dim(x)<-c(4,1,4); dimnames(x)<-list(c(\"a\", \"b\", \"c\", \"d\"), \"z\", c(\"e\", \"f\", \"g\", \"h\")); dimnames(x[-1,1,-1]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_4cad27eceba31418e643ea7cbd473d6e() {
        assertEval("{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c(\"a\", \"b\", \"c\", \"d\"), c(\"x\", \"y\"), c(\"e\", \"f\", \"g\", \"h\")); x[-1,,-1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_dfc17a2fe684a22920890e218fe959a4() {
        assertEval("{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c(\"a\", \"b\", \"c\", \"d\"), c(\"x\", \"y\"), c(\"e\", \"f\", \"g\", \"h\")); x[1,1,1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_ee1652f88128ccc0503cd3422496bcb4() {
        assertEval("{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(c(\"a\", \"b\", \"c\", \"d\"), NULL, c(\"e\", \"f\", \"g\", \"h\")); x[-1,,-1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_afa286aa27a17ea8616763b60cbe88ee() {
        assertEval("{ x<-1:32; dim(x)<-c(4,2,4); dimnames(x)<-list(NULL, c(\"x\", \"y\"), c(\"e\", \"f\", \"g\", \"h\")); x[-1,1,1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_088279681c71efb751e713c6755e57ea() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\"), c(\"e\", \"f\")) ;x[1,1,] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_fd05e785deabe1d0f368d9a70c3ac57a() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\"), c(\"e\", \"f\")) ;x[,0,] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_773947cda5ed2e582faff115cc4ccf26() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); x[1,1,NA] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_20bd8218f895f981e730a9bec83d0c10() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); x[1,1,c(1,NA,1)] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_56524fd2e88d5f6d8715c4690b9c9396() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); x[NA,1,c(1,NA,1)] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_d56f875384f0b2d413684966b21acaa9() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\"), c(\"e\", \"f\")) ;x[1,1,NA] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_5fcb47c406216ea32092925c28dfb4d8() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\"), c(\"e\", \"f\")); x[1,1,c(1,NA,1)] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_c4e20adecb559e12c3b7db6be5f3a515() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\"), c(\"e\", \"f\")); x[NA,1,c(1,NA,1)] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_587ad0c9609dc4123c9590f037813a27() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); dim(x[0,0,0]) }");
    }

    @Test
    public void TestSimpleArrays_testAccess_23a36b90ec9ac75b7f4740c6bf7247ab() {
        assertEval("{ x<-(1:8); dim(x)<-c(2, 2, 2); x[0,0,1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_ea7a54f82e5a448af49459e63e2f3a5c() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1, 1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_edb35c675f513b9c006ede06699f3cad() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); x[42,1,1] }");
    }

    @Test
    public void TestSimpleArrays_testAccess_19411bf3b70f9001e93b99dcfc55bcad() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); x[[, 1, 1]] }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_9a47dd99312e693ad52405e33fe75b04() {
        assertEval("{ a = array(); length(a) }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_1a73a6d88a8f538984fb22368c9412bb() {
        assertEval("{ a = array(); is.na(a[1]) }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_9e9890dca281ce611bb5bd48143b9b09() {
        assertEval("{ a = array(); is.null(dimnames(a)); }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_3d8969238024eab6bebc08a29ff468e7() {
        assertEval("{ a <- array(); dim(a) }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_06425e22638ed1a1ea10f1f3a8920693() {
        assertEval("{ a = array(1:10, dim = c(2,6)); length(a) }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_d0ed6bf6a52a56790dccad57cfecdd08() {
        assertEval("{ length(array(NA, dim=c(1,0,2,3))) }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_155b552decb85f600b252aa86008ce29() {
        assertEval("{ dim(array(NA, dim=c(2.1,2.9,3.1,4.7))) }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_204dbd46ef3ac206dbc98d55d12999f7() {
        assertEval("{ c <- array(c(3+2i, 5+0i, 1+3i, 5-3i), c(2,2,2)); length(c); dim(c) <- c(2,2,2); }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_e57eb5be20feb32f2d83ebb6866057c9() {
        assertEvalError("{ array(NA, dim=c(-2,2)); }");
    }

    @Test
    public void TestSimpleArrays_testArrayBuiltin_3b72d275119cfc0cbdf526fbd5ecf594() {
        assertEvalError("{ array(NA, dim=c(-2,-2)); }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_29eb8d92d01f2a70b40ed74e26a1d55a() {
        assertEval("{ a = array(1:27,c(3,3,3)); c(a[1,1,1],a[3,3,3],a[1,2,3],a[3,2,1]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_c3c3aa99fdb0575dba707c054acc7001() {
        assertEval("{ a = array(1:27, c(3,3,3)); b = a[,,]; d = dim(b); c(d[1],d[2],d[3]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_b977c8c8366306c3295e9a41241295aa() {
        assertEval("{ a = array(1,c(3,3,3)); a = dim(a[,1,]); c(length(a),a[1],a[2]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_46223217c55f14bde7338b03ac9a89da() {
        assertEval("{ a = array(1,c(3,3,3)); is.null(dim(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_4f8ddffb583fcf44319c51bfa21736f2() {
        assertEval("{ a = array(1,c(3,3,3)); is.null(dim(a[1,1,])) } ");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_1f676b8c4e884a24f7214afb77a23299() {
        assertEval("{ a = array(1,c(3,3,3)); a = dim(a[1,1,1, drop = FALSE]); c(length(a),a[1],a[2],a[3]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_c02732f112fcc9ca168e5026287e8d1c() {
        assertEval("{ m <- array(1:4, dim=c(4,1,1)) ; x <- m[[2,1,1,drop=FALSE]] ; is.null(dim(x)) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_324c037a80f2eca786f087bfbbf7eaf6() {
        assertEval("{ a = array(1:27, c(3,3,3)); c(a[1],a[27],a[22],a[6]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_da1b6e2faf04ef67c8c682ff9b3858ff() {
        assertEval("{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,1] ; c(x[1],x[2]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_07d18e8c39dc1eada48537968597f808() {
        assertEval("{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- dim(m[1:2,1,1]) ; is.null(x) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_d341018138a0670caa7710486df37f5c() {
        assertEval("{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- dim(m[1:2,1,1,drop=FALSE]) ; c(x[1],x[2],x[3]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_18803ee9bbdd977e41ea10fa24f0b161() {
        assertEval("{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,integer()] ; d <- dim(x) ; length(x) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_e71dd62b8bb11ec211d08f4aa3b23015() {
        assertEval("{ m <- array(c(1,2,3), dim=c(3,1,1)) ; x <- m[1:2,1,integer()] ; d <- dim(x) ; c(d[1],d[2]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_ddfb81111b88b8188ceda0aa75c41a4c() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=FALSE, 0, -1]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_db3b466dd83c54ea5aa2ce7f2321bf12() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=c(0,2), 0, -1]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_0c5b2be5ef11fdfec2097e442f53b637() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=0, 0, -1]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_3867951b74ceb63b3cf702022967100f() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=integer(), 0, -1]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_899066bd33233e98e571e5908e183adb() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,drop=FALSE, 1, drop=TRUE, -1]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_7b74b2887b86d6dbce9cc6dba1cdfac0() {
        assertEvalError("{ a = array(1,c(3,3,3)); a[2,2]; }");
    }

    @Test
    public void TestSimpleArrays_testArraySimpleRead_7bfdbb54d9a6446b3cc76cc29dfb78f8() {
        assertEvalError("{ x<-1:64; dim(x)<-c(4,4,2,2); dim(x[1,1, drop=FALSE, 0, drop=TRUE, -1]) }");
    }

    @Test
    public void TestSimpleArrays_testArraySubsetAndSelection_68b97da5a27b01312c95f5d56fe9076d() {
        assertEval("{ array(1,c(3,3,3))[1,1,1] }");
    }

    @Test
    public void TestSimpleArrays_testArraySubsetAndSelection_1d37dd887da3ba708333f8487ccd9f8f() {
        assertEval("{ array(1,c(3,3,3))[[1,1,1]] }");
    }

    @Test
    public void TestSimpleArrays_testArraySubsetAndSelection_efa2a1d85fabc79e8fd5db5134d2a3b9() {
        assertEval("{ m <- array(1:24, dim=c(2,3,4)) ; m[,,2] }");
    }

    @Test
    public void TestSimpleArrays_testArraySubsetAndSelection_d6bda98b11042efe7b4f5c90e1a5493e() {
        assertEval("{ m <- array(1:24, dim=c(2,3,4)) ; m[,,2,drop=FALSE] }");
    }

    @Test
    public void TestSimpleArrays_testArraySubsetAndSelection_d475d1d0faa8bd93959318ac5cafc48d() {
        assertEval("{ m <- array(1:24, dim=c(2,3,4)) ; f <- function(i) { m[,,i] } ; f(1) ; f(2) ; dim(f(1:2)) }");
    }

    @Test
    public void TestSimpleArrays_testArraySubsetAndSelection_9f1844b4c9c14d03f5117a7bddac8659() {
        assertEval("{ m <- array(1:24, dim=c(2,3,4)) ; f <- function(i) { m[,,i] } ; f(1[2]) ; f(3) }");
    }

    @Test
    public void TestSimpleArrays_testArraySubsetAndSelection_930c158db699e39727e6645602fde017() {
        assertEvalError("{ array(1,c(3,3,3))[[,,]]; }");
    }

    @Test
    public void TestSimpleArrays_testArraySubsetAndSelection_b7b4f062010fbeb7ef8c64794ad0b0cd() {
        assertEvalError("{ array(1,c(3,3,3))[[c(1,2),1,1]]; }");
    }

    @Test
    public void TestSimpleArrays_testArrayUpdate_b599fd9800450ca5bdaff3779fdc29aa() {
        assertEval("{ a = matrix(1,2,2); a[1,2] = 3; a[1,2] == 3; }");
    }

    @Test
    public void TestSimpleArrays_testArrayUpdate_b143dfae9c4c5ae3489a82b375ca1361() {
        assertEval("{ a = array(1,c(3,3,3)); c(a[1,2,3],a[1,2,3]) }");
    }

    @Test
    public void TestSimpleArrays_testArrayUpdate_fa399785b588c0934381a477dc943405() {
        assertEval("{ a = array(1,c(3,3,3)); a[1,2,3] = 3; a }");
    }

    @Test
    public void TestSimpleArrays_testArrayUpdate_c8ec0a7ad6d6e5de78f3113e7eac4558() {
        assertEval("{ a = array(1,c(3,3,3)); b = a; b[1,2,3] = 3; c(a[1,2,3],b[1,2,3]) }");
    }

    @Test
    public void TestSimpleArrays_testArrayUpdate_74477ab1a1ca6b600db67b4629a76e8b() {
        assertEval("{ x <- array(c(1,2,3), dim=c(3,1,1)) ; x[1:2,1,1] <- sqrt(x[2:1]) ; c(x[1] == sqrt(2), x[2], x[3]) }");
    }

    @Test
    public void TestSimpleArrays_testArrayUpdate_2c6393d87463a3fdb5e3da8f4463de30() {
        assertEval("{ ansmat <- array(dim=c(2,2),dimnames=list(c(\"1\",\"2\"),c(\"A\",\"B\"))) ; ansmat }");
    }

    @Test
    public void TestSimpleArrays_testArrayUpdate_19ae9a9d778d02750701e2d3df57d230() {
        assertEval("{ ansmat <- array(dim=c(2,2),dimnames=list(c(\"1\",\"2\"),c(\"A\",\"B\"))) ; ansmat[c(1,2,4)] <- c(1,2,3) ; ansmat }");
    }

    @Test
    public void TestSimpleArrays_testBugIfiniteLoopInGeneralizedRewriting_0947755b213127f97cc94793b7086114() {
        assertEval("{ m <- array(1:3, dim=c(3,1,1)) ; f <- function(x,v) { x[1:2,1,1] <- v ; x } ; f(m,10L) ; f(m,10) ; f(m,c(11L,12L)); c(m[1,1,1],m[2,1,1],m[3,1,1]) }");
    }

    @Test
    public void TestSimpleArrays_testDefinitions_57b0a537728276c59318eff6c37f368e() {
        assertEval("{ matrix( as.raw(101:106), nrow=2 ) }");
    }

    @Test
    public void TestSimpleArrays_testDefinitions_acc2ff6e352fc26dfe6658d5d25a6581() {
        assertEval("{ m <- matrix(1:6, ncol=3, byrow=TRUE) ; m }");
    }

    @Test
    public void TestSimpleArrays_testDefinitions_e2e3e47a6687353d12f0cfb25c473e24() {
        assertEval("{ m <- matrix(1:6, nrow=2, byrow=TRUE) ; m }");
    }

    @Test
    public void TestSimpleArrays_testDefinitions_3cde0982135f37c027f66e92df1feb34() {
        assertEval("{ m <- matrix() ; m }");
    }

    @Test
    public void TestSimpleArrays_testDefinitions_f46772e8eabb18f95c6940feb557cadf() {
        assertEval("{ matrix( (1:6) * (1+3i), nrow=2 ) }");
    }

    @Test
    public void TestSimpleArrays_testDefinitions_a738f26a25596a33b702362864391c08() {
        assertEval("{ m <- matrix(1:6, nrow=2, ncol=3, byrow=TRUE) ; m }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_b28c0a33cc0f880b94d67b72b8d2c3fe() {
        assertEval("{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 8L; typeof(a[1,2,3]) }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_1ca74f727f5e095c80b0c363226c8cad() {
        assertEval("{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 8.1; typeof(a[1,2,3]) }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_1188e5d4220f7ee6bf073bfcf6c44bdc() {
        assertEval("{ a = array(1L,c(3,3,3)); a[1,2,3] = 8.1; typeof(a[1,2,3]) }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_89ee7a7c1467b421c0cd7aa8b5b0ab1a() {
        assertEval("{ a = array(TRUE,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_aeb54b7a0776636764ae6fb6c1aa9598() {
        assertEval("{ a = array(1L,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_1bf88352245f5e663232507ef40ba011() {
        assertEval("{ a = array(1.3,c(3,3,3)); a[1,2,3] = 2+3i; typeof(a[1,2,3]) }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_0e017bf3bcf4621c77c8cde8e9285be9() {
        assertEval("{ a = array(TRUE,c(3,3,3)); a[1,2,3] = \"2+3i\"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_fe4f3635b552f069567ccbb6cebee7ef() {
        assertEval("{ a = array(1L,c(3,3,3)); a[1,2,3] = \"2+3i\"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testLhsCopy_7ba7c939dea8cf9dd35a94fc1defe85a() {
        assertEval("{ a = array(1.5,c(3,3,3)); a[1,2,3] = \"2+3i\"; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testMatrixBuiltin_2e31b866518a0babac7185b6a624f910() {
        assertEval("{ length(matrix()) }");
    }

    @Test
    public void TestSimpleArrays_testMatrixSimpleRead_eb16fa2e75406d7cb53d9577dd513282() {
        assertEval("{ a = matrix(1,3,3); is.null(dim(a[1,])); }");
    }

    @Test
    public void TestSimpleArrays_testMatrixSubsetAndSelection_cb63ad38b6dae22340c98cae3e1b7544() {
        assertEval("{ matrix(1,3,3)[1,1] }");
    }

    @Test
    public void TestSimpleArrays_testMatrixSubsetAndSelection_d90eaa7e0462d85ab3a250782ee72171() {
        assertEval("{ matrix(1,3,3)[[1,1]] }");
    }

    @Test
    public void TestSimpleArrays_testMatrixSubsetAndSelection_143f74286d3b0c31c553f6eb924f1cf9() {
        assertEval("{  m <- matrix(1:6, nrow=2) ;  m[1,NULL] }");
    }

    @Test
    public void TestSimpleArrays_testMatrixSubsetAndSelection_f25c7ad49835429e017a36e857b420f0() {
        assertEvalError("{ matrix(1,3,3)[[,]]; }");
    }

    @Test
    public void TestSimpleArrays_testMatrixSubsetAndSelection_ef9e65c0b7ef9fcfb532ed3b89735ebe() {
        assertEvalError("{ matrix(1,3,3)[[c(1,2),1]]; }");
    }

    @Test
    public void TestSimpleArrays_testMultiDimensionalUpdate_28a7a262e528d483c4f8748808fbbf80() {
        assertEval("{ a = matrix(1,3,3); a[1,] = c(3,4,5); c(a[1,1],a[1,2],a[1,3]) }");
    }

    @Test
    public void TestSimpleArrays_testMultiDimensionalUpdate_e8bbbb6f2925b062e169e30ad559b96a() {
        assertEval("{ a = matrix(1,3,3); a[,1] = c(3,4,5); c(a[1,1],a[2,1],a[3,1]) }");
    }

    @Test
    public void TestSimpleArrays_testMultiDimensionalUpdate_2880884c9d4299c1d6fc09ff8cad6ac1() {
        assertEval("{ a = array(1,c(3,3,3)); a[1,1,] = c(3,4,5); c(a[1,1,1],a[1,1,2],a[1,1,3]) }");
    }

    @Test
    public void TestSimpleArrays_testMultiDimensionalUpdate_a760b17b27d515ffd03bd8fcb9c9d596() {
        assertEval("{ a = array(1,c(3,3,3)); a[1,,1] = c(3,4,5); c(a[1,1,1],a[1,2,1],a[1,3,1]) }");
    }

    @Test
    public void TestSimpleArrays_testMultiDimensionalUpdate_4254fad80bad98a95f88e1afedc060c2() {
        assertEval("{ a = array(1,c(3,3,3)); a[,1,1] = c(3,4,5); c(a[1,1,1],a[2,1,1],a[3,1,1]) }");
    }

    @Test
    public void TestSimpleArrays_testMultiDimensionalUpdate_3bd39d84ee2da13efb7fd25b042003fd() {
        assertEval("{ a = array(1,c(3,3,3)); a[1,,] = matrix(1:9,3,3); c(a[1,1,1],a[1,3,1],a[1,3,3]) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_7a83b076f303201e23fe9f57257228cd() {
        assertEval("{ a = array(7L,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_ec537db2632e715dbb3696faaa234c7b() {
        assertEval("{ a = array(1.7,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_86b83677af3adfffd3a7a8f34771a3d1() {
        assertEval("{ a = array(3+2i,c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_c98226511471ad5901b4f1d9a633a5cc() {
        assertEval("{ a = array(\"3+2i\",c(3,3,3)); b = TRUE; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_daac639ee4db005477fbffdb937aa5df() {
        assertEval("{ a = array(1.7,c(3,3,3)); b = 3L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_30baf7a53dc92b67fafbe6e9256459bf() {
        assertEval("{ a = array(3+2i,c(3,3,3)); b = 4L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_fb4c6bb0078e0cdd9cd396140f149d28() {
        assertEval("{ m <- array(c(1+1i,2+2i,3+3i), dim=c(3,1,1)) ; m[1:2,1,1] <- c(100L,101L) ; m ; c(typeof(m[1,1,1]),typeof(m[2,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_2f054df4a290a4cb0b2a972f3a90a8b3() {
        assertEval("{ a = array(\"3+2i\",c(3,3,3)); b = 7L; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_3a0e1e67b55dda52f9a150d1ea3b18d8() {
        assertEval("{ a = array(3+2i,c(3,3,3)); b = 4.2; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testRhsCopy_67cb7cce32247dd7370808c4cb8bd92b() {
        assertEval("{ a = array(\"3+2i\",c(3,3,3)); b = 2+3i; a[1,2,3] = b; c(typeof(a[1,2,3]),typeof(a[1,1,1])) }");
    }

    @Test
    public void TestSimpleArrays_testSelection_23efbfe0cbd87140bd499be6f514f28d() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6), nrow=3) ; m[0] }");
    }

    @Test
    public void TestSimpleArrays_testSelection_68ba1e0b5773910a3e4c1ff9fde81858() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[upper.tri(m)] }");
    }

    @Test
    public void TestSimpleArrays_testSelection_0891abc916693bd9aafef52e327f4085() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[0] }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_38dc5faf9571715adc3bf3201964d97d() {
        assertEval("{ m <- matrix(1,2,2); m[1,1] = 6; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_0ba83e01ba52f02d2d92225bbd25285d() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,4,6)] <- NULL ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_ea6193fb770dbb3218ab789a577fae6b() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); x[1:2,1:2,1]<-y; x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_9d33d551a0185e7c52110e4def606b7f() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:102); z<-(x[1:2,c(1,2,0),1]<-y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_7aa4715384dbabbb215c0963183438b8() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,1),1]<-y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_5e6045e0cd5503184ca06025e0964f1e() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,2,0),1]<-y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_b08dfe706b2530f144de0f10eca0c148() {
        assertEval("{ x<-as.double(1:8); dim(x)<-c(2,2,2); x[1,1,1]<-42L; x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_95413b92272752471ccd772cb002c80b() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,1:2,0]<-y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_04f025466c2fd90a5a8e00881bb11787() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,1:2,c(0,0)]<-y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_5cc050596c4a8432a51a889789f95621() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); z<-(x[1,1,1]<-42); z }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_35ada927d965af96aede8ad35b8262a3() {
        assertEval("{ m <- matrix(1,2,2) ; m[,1] = 7 ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_1f013c008fd87b22b853ef1747301556() {
        assertEval("{ m <- matrix(1,2,2) ; m[1,] = 7 ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_7394ae5d30001af76fe55a4f83da2e67() {
        assertEval("{ m <- matrix(1,2,2) ; m[,1] = c(10,11) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_bb1776e50de338c553c22fcd9ac59d32() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[2] <- list(100) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_09da1d9365bc7d6a74fccd3e0e6091b8() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,2] <- 10:11 ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_bf3975c5c2955ae7d6bba427e5c001c3() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,2:3] <- 10:11 ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_56b2b139446460e5096668823217cec0() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,integer()] <- integer() ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_5b55fb396efed1a468d4a15fbd7bba4a() {
        assertEval("{ m <- matrix(1:100, nrow=10) ; z <- 1; s <- 0 ; for(i in 1:3) { m[z <- z + 1,z <- z + 1] <- z * z * 1000 } ; sum(m) }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_25f8ea9709db55f1e3a5858bfbad09ff() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,-1) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_ffe08a1037594e11b7fd8b76e7e9b82d() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1, c(-1,-10)) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_a789679657679e8da4e45a4b818b645d() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,c(-1,-10)) ; m <- f(1,-1) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_fa779fe93ac86707197b170fc4150d1a() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(1,c(-1,-10)) ; m <- f(-1,2) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_517498110d51fa15ee12a1dcb4aac54e() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] <- 10 ; m } ; m <- f(2,1:3) ; m <- f(1,-2) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_da3cea51647c18602b50f7a5ec065395() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; m[2] <- list(100) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_5b6ebd5dfba1698cc17205996366b023() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[[2]] <- list(100) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_abe9d8737c99da9620fbb24f508ef79d() {
        assertEval("{ m <- array(1:24, dim=c(2,3,4)) ; m[,,4] <- 10:15 ; m[,,4] }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_a64c7ba3d206a06ff99627855de6b058() {
        assertEval("{  m <- array(1:3, dim=c(3,1,1)) ; f <- function(x,v) { x[[2,1,1]] <- v ; x } ; f(m,10L) ; f(m,10) ; x <- f(m,11L) ; c(x[1],x[2],x[3]) }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_4c96865e28716d351527e1b840b21d19() {
        assertEval("{ m <- matrix(as.double(1:6), nrow=2) ; mi <- matrix(1:6, nrow=2) ; f <- function(v,i,j) { v[i,j] <- 100 ; v[i,j] * i * j } ; f(m, 1L, 2L) ; f(m,1L,TRUE)  }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_56ec90a6916b32370da9d365cdd6c805() {
        assertEval("{ m <- matrix(as.double(1:6), nrow=2) ; mi <- matrix(1:6, nrow=2) ; f <- function(v,i,j) { v[i,j] <- 100 ; v[i,j] * i * j } ; f(m, 1L, 2L) ; f(m,1L,-1)  }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_686a578fdef5256103b362a1989d849b() {
        assertEval("{ x <- array(c(1,2,3), dim=c(3,1)) ; x[1:2,1] <- 2:1 ; x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_7641ceaebe4dbe9ebf51b1268ba21ed0() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); x[] = 42; x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_cb001350cf8748cfbf79d8fae2f5e3c6() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); x[] = c(42,7); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_f576da04d7eb30be786e850c391cb138() {
        assertEval("{ z<-1:4; y<-((z[1]<-42) >  1) }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_2fcbfbd07a71c18eb466aa1a3b354a61() {
        assertEval("{ z<-1:4; y<-((names(z)<-101:104) >  1) }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_b8115d323e5bad7e3768c3cf9086df3d() {
        assertEvalError("({ x<-as.complex(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })");
    }

    @Test
    public void TestSimpleArrays_testUpdate_8061a26a33e8e671859c0a05f79196bc() {
        assertEvalError("({ x<-as.character(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })");
    }

    @Test
    public void TestSimpleArrays_testUpdate_4fe3874c527deb18e092824ff58ff9e2() {
        assertEvalError("({ x<-as.logical(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })");
    }

    @Test
    public void TestSimpleArrays_testUpdate_b94798cc2ae8809273624ecc2d0a8d61() {
        assertEvalError("({ x<-as.double(1:8); dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })");
    }

    @Test
    public void TestSimpleArrays_testUpdate_2de4ff58580126cb0c6d42d2ac080976() {
        assertEvalError("({ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x })");
    }

    @Test
    public void TestSimpleArrays_testUpdate_d5792bd2ae11d4500576d3ae43044769() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); x[1, 1] <- y; x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_6fa91247f0163918c1100999fc026988() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:120); z<-(x[1:2, c(1, 2, 0), 1] <- y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_4983118d6eff6055c9fd4c410281a88a() {
        assertEvalError("{ x<-1:16; dim(x)<-c(2,2,2,2); y<-c(101:108); dim(y)<-c(2,4); x[1:2, 1:2, 1] <- y; x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_a28829e2b4043c3f83a730ecb79401fb() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2, c(1, 2, 1), 1] <- y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_3b376634dada7194f8c362d8dde2d90a() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[0,5,1] <- y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_3215dc07aee02a17686c865850a7de65() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2, c(1, NA), 1] <- y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_05f70fa9b550a137dc5550050fe9e5bc() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_23ba0d046652a7c50d2974d05e7c0401() {
        assertEvalError("{ x<-1.1:8.8; dim(x)<-c(2,2,2); x[1, 1, 1] = as.raw(42); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_f5e13dd11cb17804c5a2299ccb95e939() {
        assertEvalError("{ m <- matrix(1,2,2) ; m[, 1] = c(1, 2, 3, 4) ; m }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_59af2b5d7153279529a31b1fce956192() {
        assertEvalError("{ m <- matrix(1:6, nrow=2) ; m[, 2] <- integer() }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_60087d8626d45b07c9cbff4643e5f354() {
        assertEvalError("{ a <- 1:9 ; a[, , 1] <- 10L }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_5a5c3233d90ba28e45426d21ed213df0() {
        assertEvalError("{ a <- 1:9 ; a[, 1] <- 10L }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_487c5f957e71e496ee525305bcb3b2b3() {
        assertEvalError("{ a <- 1:9 ; a[1, 1] <- 10L }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_df918d2ebef36c23490588e5b7393d8e() {
        assertEvalError("{ a <- 1:9 ; a[1, 1, 1] <- 10L }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_77550087a3175fdf6431513b61a3d2b4() {
        assertEvalError("{ m <- matrix(1:6, nrow=2) ; m[[1, 1]] <- integer() }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_266e6eb5b0b70e87d226096e143850ac() {
        assertEvalError("{ m <- matrix(1:6, nrow=2) ; m[[1:2, 1]] <- integer() }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_713578410e0bb97eccf8372ce663ef5a() {
        assertEvalError("{ m <- matrix(1:6, nrow=2) ; m[1, 2] <- integer() }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_c4058b1d991077ed6f08caa422de78df() {
        assertEvalError("{ m <- matrix(1:6, nrow=2) ; m[1, 2] <- 1:3 }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_13ed7b6494e56b7dc867a982ccf70b44() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); y<-c(101:104); dim(y)<-c(2,2); z<-(x[1:2,c(1,2,NA),1]<-y); x }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_916a50ecd7fc7c819f3c19aa10c7bfab() {
        assertEvalError("{ m <- matrix(1:6, nrow=2) ; m[[1:2,1]] <- 1 }");
    }

    @Test
    public void TestSimpleArrays_testUpdate_ef4a6efccd575fddefbfa099ae1f511d() {
        assertEvalError("{ m <- matrix(1:6, nrow=2) ; m[[integer(),1]] <- 1 }");
    }

    @Test
    public void TestSimpleAssignment_testAssign_283c9530c525c82a5e49b43433fdced9() {
        assertEvalNoOutput("{ a<-1 }");
    }

    @Test
    public void TestSimpleAssignment_testAssign_e7172f616e0946e808cf73fe8c5ba64b() {
        assertEvalNoOutput("{ a<-FALSE ; b<-a }");
    }

    @Test
    public void TestSimpleAssignment_testAssign_b21774dbc3b823d809cfaf4ee17527de() {
        assertEvalNoOutput("{ x = if (FALSE) 1 }");
    }

    @Test
    public void TestSimpleAssignment_testAssign1_09e0568d4e14f0cb95fcddf3e8cbb044() {
        assertEval("{ a<-1; a }");
    }

    @Test
    public void TestSimpleAssignment_testAssign1_eb7695b574cd27fa67c81aa87a217908() {
        assertEval("{ a<-1; a<-a+1; a }");
    }

    @Test
    public void TestSimpleAssignment_testAssign2_d140d26b8ba0a45a0383ad91da2047eb() {
        assertEval("a <- 42; f <- function() { a <- 13; a <<- 37; }; f(); a;");
    }

    @Test
    public void TestSimpleAssignment_testAssignBuiltin_e5c95e6f05f39af943fabed80872c648() {
        assertEval("{ x <- 3 ; f <- function() { assign(\"x\", 4) ; h <- function() { assign(\"z\", 5) ; g <- function() { x <<- 10 ; x } ; g() } ; h() } ; f() ; x }");
    }

    @Test
    public void TestSimpleAssignment_testAssignFunctionLookup1_af5ff7016009f392e234cca594160ea3() {
        assertEval("f <- function(b) { c <- 42; c(1,1); }; f(0); f(1)");
    }

    @Test
    public void TestSimpleAssignment_testAssignFunctionLookup1_2346e3897adeba694188ec2ab21c1070() {
        assertEval("f <- function(b) { if (b) c <- 42; c(1,1); }; f(0); f(1)");
    }

    @Test
    public void TestSimpleAssignment_testAssignPoly1_66cf51299f299d2cd8bfa5c599824623() {
        assertEval("test <- function(b) { if (b) f <- function() { 42 }; g <- function() { if (!b) f <- function() { 43 }; f() }; g() }; c(test(FALSE), test(TRUE))");
    }

    @Test
    public void TestSimpleAssignment_testAssignShadowBuiltin1_f2d5da3c45411e2c079849343ea84875() {
        assertEval("f <- function(b) { c <- function(x,y) 42; c(1,1); }; f(0); f(1)");
    }

    @Test
    public void TestSimpleAssignment_testAssignShadowBuiltin1_b9c9722029283827d0a91f19bac45918() {
        assertEval("f <- function(b) { if (b) c <- function(x,y) 42; c(1,1); }; f(0); f(1)");
    }

    @Test
    public void TestSimpleAssignment_testDynamic_d66d832275659532e17a035d9554c549() {
        assertEval("{ l <- quote(x <- 1) ; f <- function() { eval(l) } ; x <- 10 ; f() ; x }");
    }

    @Test
    public void TestSimpleAssignment_testDynamic_e224a6d79056c025f24a2a9d1a73d019() {
        assertEval("{ l <- quote(x <- 1) ; f <- function() { eval(l) ; x <<- 10 ; get(\"x\") } ; f() }");
    }

    @Test
    public void TestSimpleAssignment_testMisc_100afd1332c60dd5c86703f287e3911a() {
        assertEval("{ f <- function(i) { if (i==1) { c <- 1 } ; c } ; f(1) ; typeof(f(2)) }");
    }

    @Test
    public void TestSimpleAssignment_testMisc_11f8577ba30c376fff5b0303083cae96() {
        assertEval("{ f <- function(i) { if (i==1) { c <- 1 ; x <- 1 } ; if (i!=2) { x } else { c }} ; f(1) ; f(1) ; typeof(f(2)) }");
    }

    @Test
    public void TestSimpleAssignment_testMisc_f1cd2d7494f21b68f5cd46b0f9de2ce3() {
        assertEval("{ x <- 3 ; f <- function() { assign(\"x\", 4) ; g <- function() { assign(\"y\", 3) ; hh <- function() { assign(\"z\", 6) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; hh() } ; g()  } ; f() }");
    }

    @Test
    public void TestSimpleAssignment_testMisc_2a5d4112a9df61a54de6d7a8a11d8ecf() {
        assertEval("{ f <- function() { if (FALSE) { c <- 1 } ; g <- function() { c } ; g() } ; typeof(f()) }");
    }

    @Test
    public void TestSimpleAssignment_testMisc_3473f21fbb8ff3f4621185b92fa898be() {
        assertEvalError("{ nonexistent }");
    }

    @Test
    public void TestSimpleAssignment_testMisc_a564aa5cff59f3815a991cd97a0065fc() {
        assertEvalError("{ f <- function(i) { if (i==1) { x <- 1 } ; x } ; f(1) ; f(2) }");
    }

    @Test
    public void TestSimpleAssignment_testMisc_6ea5ab2009ad6e4270c312f2694dd77d() {
        assertEvalError("{ f <- function(i) { if (i==1) { x <- 1 } ; x } ; f(1) ; f(1) ; f(2) }");
    }

    @Test
    public void TestSimpleAssignment_testMisc_7dfa89a192c051a9eca7cfb92894ad3f() {
        assertEvalError("{ f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_f9bb230e23dc5f0ddc569b1426f8c167() {
        assertEval("{ f <- function() { x <<- 2 } ; f() ; x }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_76240cdf26b6b096bdf624153c83c326() {
        assertEval("{ x <- 10 ; f <- function() { x <<- 2 } ; f() ; x }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_c19f2461210bc3e8b07a79c6a89f2199() {
        assertEval("{ x <- 10 ; f <- function() { x <<- 2 ; x } ; c(f(), f()) }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_d2f998d6fc6310797195c8e90d6d96a7() {
        assertEval("{ x <- 10 ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_3203bfeb2d4247d4daf6723fed114ec4() {
        assertEval("{ x <- 10 ; g <- function() { f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_95bbe7b2e4dc61354b8489dc53bfb86a() {
        assertEval("{ x <- 10 ; g <- function() { x ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_5377162cb52b696b2bb6254b44b0d603() {
        assertEval("{ x <- 10 ; g <- function() { x <- 100 ; f <- function() { x <- x ; x <<- 2 ; x } ; c(f(), f()) } ; g() }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_8d705fd54a541e676b0f55b79759028e() {
        assertEval("{ h <- function() { x <- 10 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { x <<- 3 ; x } ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_fd507ff0258d17af4cc20dd9767f93b2() {
        assertEval("{ b <- 2 ; f <- function() { b <- 4 } ; f() ; b }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_a8d79f5d83d13f5f3b59a26cebaaa7de() {
        assertEval("{ b <- 2 ; f <- function() { b <<- 4 } ; f() ; b }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_81cc32028bebd34eb03e1cca48ceda54() {
        assertEval("{ b <- 2 ; f <- function() { b[2] <- 4 } ; f() ; b }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_90949174a47b681a14ad5c5231f682b1() {
        assertEval("{ b <- 2 ; f <- function() { b[2] <<- 4 } ; f() ; b }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_12ecfcc5fc1638a412dde13bb505856a() {
        assertEval("{ a <- c(1,2,3) ; f <- function() { a[2] <<- 4 } ; f() ; a }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_d7ae9d2b149a168ea98b157820d1c1b8() {
        assertEval("{ f <- function(a) { g <- function(x,y) { a[x] <<- y } ; g(2,4) ; a } ; u <- c(1,2,3) ; k <- f(u) ; u <- c(3,2,1) ; l <- f(u) ; list(k,l) }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_368c5b171ee9e8c92a6652038f19c4f9() {
        assertEval("{ b <- c(1,1) ; f <- function(v,x) { g <- function(y) { v[y] <<- 2 } ; g(x) ; v } ; k <- f(b,1) ; l <- f(b,2) ; list(k,l,b) }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_a98ebddfb233e51a7c68c98d2bd39044() {
        assertEval("{ a <- c(0,0,0) ; u <- function() { a <- c(1,1,1) ; f <- function() { g <- function() { a[2] <<- 9 } ; g() } ; f() ; a } ; list(a,u()) }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_dd05d82c1fd098b6a426d63c199276f2() {
        assertEval("{ a <- c(0,0,0) ; f <- function() { g <- function() { a[2] <<- 9 } ; g() } ; u <- function() { a <- c(1,1,1) ; f() ; a } ; r <- a ; s <- u() ; t <- a ; list(r,s,t) }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_aa7819c363cd9256dd72e3d33036853a() {
        assertEval("{ answer <<- 42 }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_aa206594ebb10eb912cbc08e7c82e4e3() {
        assertEval("{ a <- c(1,2,3) ; f <- function() { a[2] <- 4 } ; list(f(),a) }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_cfdf1ec04d27a60bdfe3a1bea92933e6() {
        assertEvalNoOutput("{ x <<- 1 }");
    }

    @Test
    public void TestSimpleAssignment_testSuperAssign_437eb5c1cc18125d4b5896cf3d2b5365() {
        assertEvalNoOutput("{ x <<- 1 ; x }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_7e4a3bc20603e321a27b3bb945396724() {
        assertEval("{ x <- 1:2;  attr(x, \"hi\") <- 2 ;  x+1:4 }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_c7640c5004c57f6c0ba09229e1231252() {
        assertEval("{ x <- 1+1i;  attr(x, \"hi\") <- 1+2 ; y <- 2:3 ;  x+y }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_a195448ef25445661595ab655c313b36() {
        assertEval("{ x <- 1:2 ;  attr(x, \"hi\") <- 2 ;  !x  }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_ac2abd8e31ed3b36b0a27ecdcaaea36d() {
        assertEval("{ x <- 1:2;  attr(x, \"hi\") <- 2 ;  x & x }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_6de4a8f653aba2cd0c9addf89d5e8894() {
        assertEval("{ x <- as.raw(1:2);  attr(x, \"hi\") <- 2 ;  x & x }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_1bda07d542646902be34ad03340e3589() {
        assertEval("{ x <- c(1+1i,2+2i);  attr(x, \"hi\") <- 3 ; y <- 2:3 ; attr(y,\"zz\") <- 2; x+y }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_cc69f5992ce92e155a3e58de80622625() {
        assertEval("{ x <- 1+1i;  attr(x, \"hi\") <- 1+2 ; y <- 2:3 ; attr(y,\"zz\") <- 2; x+y }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_7d329add63812fd510617aeb1ca08021() {
        assertEval("{ x <- c(1+1i, 2+2i) ;  attr(x, \"hi\") <- 3 ; attr(x, \"hihi\") <- 10 ; y <- c(2+2i, 3+3i) ; attr(y,\"zz\") <- 2; attr(y,\"hi\") <-3; attr(y,\"bye\") <- 4 ; x+y }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_7389f0a3eba8a4f98e70eefb81b427d5() {
        assertEval("{ x <- 1 ; attr(x, \"my\") <- 2; 2+x }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_8b6f5b94450df9d844225e38d17048cb() {
        assertEval("{ x <- c(a=1) ; y <- c(b=2,c=3) ; x + y }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_f7681448c0e12bcaeda34d2fd8a7ca9e() {
        assertEval("{ x <- c(a=1) ; y <- c(b=2,c=3) ; y + x }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_a4301aa383a7a82db04455b69087bfdd() {
        assertEval("{ x <- 1:2;  attr(x, \"hi\") <- 2 ;  x+1 }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_48b0478621d37a6014b0cbfa6773292b() {
        assertEval("{ x <- 1:2;  attr(x, \"hi\") <- 2 ; y <- 2:3 ; attr(y,\"hello\") <- 3; x+y }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_9189f1ae9d4f71e60b9b9ef99e6a1fea() {
        assertEval("{ x <- 1;  attr(x, \"hi\") <- 1+2 ; y <- 2:3 ; attr(y, \"zz\") <- 2; x+y }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_de673112886e8ff7e3c0167e9fbe3fc1() {
        assertEval("{ x <- 1:2 ;  attr(x, \"hi\") <- 3 ; attr(x, \"hihi\") <- 10 ; y <- 2:3 ; attr(y,\"zz\") <- 2; attr(y,\"hi\") <-3; attr(y,\"bye\") <- 4 ; x+y }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_26dafe051e5a4eaed76812ecb0c1d215() {
        assertEval("{ x <- c(a=1,b=2) ;  attr(x, \"hi\") <- 2 ;  -x  }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_e8d42dc69308c652b3f34cad5a6d4e16() {
        assertEval("{ x <- c(1+1i,2+2i);  names(x)<-c(\"a\", \"b\"); attr(x, \"hi\") <- 3 ; y <- 2:3 ; attr(y,\"zz\") <- 2; attributes(x+y) }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_28d78b701f690207ab98fb46cacf6ef4() {
        assertEval("{ x <- c(1+1i,2+2i,3+3i,4+4i);  dim(x)<-c(2,2); names(x)<-c(\"a\", \"b\"); attr(x, \"hi\") <- 3 ; y <- 2:5 ; attr(y,\"zz\") <- 2; attributes(x+y) }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_0152359fb4a6b66eee82170e9358766c() {
        assertEval("{ x <- c(1+1i,2+2i,3+3i,4+4i);  dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\")); attr(x, \"hi\") <- 3 ; y <- 2:5 ; attr(y,\"zz\") <- 2; attributes(x+y) }");
    }

    @Test
    public void TestSimpleAttributes_testArithmeticPropagation_bd8aedf4ca4bd613b8c5ce35463c17a5() {
        assertEval("{ x <- c(a=FALSE,b=TRUE) ;  attr(x, \"hi\") <- 2 ;  !x  }");
    }

    @Test
    public void TestSimpleAttributes_testArrayPropagation_ff71faa7f9c4a02839d5cb9c6735788f() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; x[c(1,1)] }");
    }

    @Test
    public void TestSimpleAttributes_testArrayPropagation_67aa8586d6e9a61d530bc718f23a6fbc() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; x[\"a\"] <- 2 ; x }");
    }

    @Test
    public void TestSimpleAttributes_testArrayPropagation_f3e7bd3afad0d337f715dc9c0654c411() {
        assertEval("{ x <- c(a=TRUE, b=FALSE) ; attr(x, \"myatt\") <- 1; x[2] <- 2 ; x }");
    }

    @Test
    public void TestSimpleAttributes_testArrayPropagation_c9de33e462d40ccb19cfef28e600e93c() {
        assertEval("{ x <- TRUE ; attr(x, \"myatt\") <- 1; x[2] <- 2 ; x }");
    }

    @Test
    public void TestSimpleAttributes_testArrayPropagation_0054a011ab57339f812d2a1bc4006aed() {
        assertEval("{ x <- TRUE ; attr(x, \"myatt\") <- 1; x[1] <- 2 ; x }");
    }

    @Test
    public void TestSimpleAttributes_testArrayPropagation_7941d0b5f46e8abd2458c464c7c0c63f() {
        assertEval("{ m <- matrix(rep(1,4), nrow=2) ; attr(m, \"a\") <- 1 ;  m[2,2] <- 1+1i ; m }");
    }

    @Test
    public void TestSimpleAttributes_testArrayPropagation_69e8824b34256c5d038cd1cf95e24d0c() {
        assertEval("{ a <- array(c(1,1), dim=c(1,2)) ; attr(a, \"a\") <- 1 ;  a[1,1] <- 1+1i ; a }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_51d2d368098c36292dd484b9a67e6025() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; matrix(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_8f17bb447b60a34ee3b9ef32b4affe5e() {
        assertEval("{ x <- 1 ; attr(x, \"myatt\") <- 1; x:x }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_772cf48140c03fdf6261b417e8bc21a0() {
        assertEval("{ x <- 1 ; attr(x, \"myatt\") <- 1; c(x, x, x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_58ea04a98d6a0eb0a8ce5f3d54bcf157() {
        assertEval("{ x <- 1 ; attr(x, \"myatt\") <- 1; cumsum(c(x, x, x)) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_f153fe3099db5134bf2ca6e53295342f() {
        assertEval("{ x <- 1 ; attr(x, \"myatt\") <- 1; min(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_17cdb1fb3024afacda26d8f703bcd65d() {
        assertEval("{ x <- 1 ; attr(x, \"myatt\") <- 1; x%o%x }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_c5bbaeef48f1d2325c6a5b0a595cb0cc() {
        assertEval("{ x <- 1 ; attr(x, \"myatt\") <- 1; rep(x,2) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_10293a2fb3ca5e2b36b00f881b4a44a7() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; order(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_2ef50b87740e6da45357fabcf2e52f8d() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; sum(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_46530f286a71e41bcc7de14fa7504dad() {
        assertEval("{ x<-1:8; dim(x)<-c(2, 2, 2); names(x)<-101:108; attr(x, \"dimnames\")<-list(c(\"201\", \"202\"), c(\"203\", \"204\"), c(\"205\", \"206\")); attr(x, \"foo\")<-\"foo\"; y<-x; attributes(x>y) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_74dc4cc35dbb11bd44bd7b1feaf36e6c() {
        assertEval("{ x<-1:8; dim(x)<-c(2, 2, 2); names(x)<-101:108; attr(x, \"dimnames\")<-list(201:202, 203:204, 205:206); attr(x, \"foo\")<-\"foo\"; y<-x; attributes(x>y) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_8e0e4c508ec0f20a865b0743b9c50074() {
        assertEval("{ m <- 1:3 ; attr(m,\"a\") <- 1 ;  t(m) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_d0b74ca1e3a968310d26a6eb998b7eed() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1 ; abs(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_fa36677c6a14355f660b5cf2568af617() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; array(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_f841fa185d5ca4d1e5534001f2a940ed() {
        assertEval("{ x <- \"a\" ; attr(x, \"myatt\") <- 1; toupper(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_2948272b3cd57d3c283b62245eada5c3() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; attr(m,\"a\") <- 1 ;  diag(m) <- c(1,1) ; m }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_f9c5942aae3ff5c8311c10aadbac4c1b() {
        assertEval("{ x <- c(a=1) ; attr(x, \"myatt\") <- 1; log10(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_4a561b926c2901d834996e4dcf07b721() {
        assertEval("{ x <- c(a=1) ; attr(x, \"myatt\") <- 1; nchar(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_938eacb0f06e2c5a1a15e8a0e3de20c8() {
        assertEval("{ m <- matrix(rep(1,4), nrow=2) ; attr(m,\"a\") <- 1 ;  upper.tri(m) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_4bb5cb517e5163df0d8f61721691bc5d() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; rev(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_568694034662a8b6af55c318d54ad291() {
        assertEval("{ x <- c(hello=1, hi=9) ; attr(x, \"hi\") <- 2 ;  sqrt(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_889b85feda5669920cfe714405ea72cd() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; attr(m,\"a\") <- 1 ;  t(m) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_294da5e2033cde503cc35cc77c91a8be() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; unlist(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_5f3c184dd2fb70f674345e3d0a5ee9ca() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; unlist(list(x,x)) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_d789eedbfc9166e0b7f70ef343f75e96() {
        assertEval("{ x <- c(a=1) ; attr(x, \"myatt\") <- 1 ; lapply(1:2, function(z) {x}) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_48555b07b59d80c7b427d6f16acb129d() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; attr(m,\"a\") <- 1 ; mm <- aperm(m) ; dim(mm) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_815238e2a76d61eb69db36c00e322f34() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; attr(m,\"a\") <- 1 ;  aperm(m) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_d7181010a1cd39e67a56ceb71922fff9() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1 ; sapply(1:2, function(z) {x}) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_34276682124e7b74954e779277f54a3f() {
        assertEval("{ x <- 1 ; attr(x, \"myatt\") <- 1; round(exp(x), digits=5) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_a6d9aa2324d3219c03b95843ecb53801() {
        assertEval("{ x <- c(a=1,b=2) ; attr(x, \"myatt\") <- 1; round(exp(x), digits=5) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_ba4fb75be7f9282488203faac6ec01f8() {
        assertEval("{ x <- c(1,2) ; dim(x)<-c(1,2); attr(x, \"myatt\") <- 1; round(exp(x), digits=5) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_dd00df1d23bd40731a3be30ec8fa4cbe() {
        assertEval("{ x <- c(a=TRUE) ; attr(x, \"myatt\") <- 1; rep(x,2) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_1c5a0061ff8753565f24001f9747bc4e() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1; seq(x) }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_bdbce9dc51ead906ffe3abd5d3c92918() {
        assertEval("{ a <- c(1,2,3,4); attr(a, \"x\") <- \"attrib\"; dim(a) <- c(2,2); a }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagation_fc7ec3d913ed7cc4163fe6821cb8b39a() {
        assertEval("{ a <- c(1,2,3,4); attr(a, \"x\") <- \"attrib\"; dim(a) <- NULL; a }");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagationIgnore_df9b3724960b222fffd20b6a1ef94ed5() {
        assertEval("{ m <- matrix(c(1,1,1,1), nrow=2) ; attr(m,\"a\") <- 1 ;  r <- eigen(m) ; r$vectors <- round(r$vectors, digits=5) ; r  }");
    }

    @Test
    public void TestSimpleAttributes_testCasts_7421f56a7aeb2d6ab6fb29c2bdb776f6() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1 ; as.character(x) }");
    }

    @Test
    public void TestSimpleAttributes_testCasts_c7ac6373611836a463ed1329c7aa7eee() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1 ; as.double(x) }");
    }

    @Test
    public void TestSimpleAttributes_testCasts_a553b41add3e553324f2a994498662c4() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 1 ; as.integer(x) }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_9bfc4209f222e2d701466ef7d338132a() {
        assertEval("{ x <- as.raw(10) ; attr(x, \"hi\") <- 2 ;  x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_80a0a73a4efa096e215a3bf7e5e5ee3e() {
        assertEval("{ x <- TRUE ; attr(x, \"hi\") <- 2 ;  x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_59f68b4d9d36df8c78eb72446822f6dd() {
        assertEval("{ x <- 1L ; attr(x, \"hi\") <- 2 ;  x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_ea8b6eacdfe0a30063d3a701d8b81f6e() {
        assertEval("{ x <- 1 ; attr(x, \"hi\") <- 2 ;  x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_a0ab09aad0b3f396ec58751a4051d177() {
        assertEval("{ x <- 1+1i ; attr(x, \"hi\") <- 2 ;  x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_32d40d8d60a044f9fafe367b8ae885fb() {
        assertEval("{ x <- \"s\" ; attr(x, \"hi\") <- 2 ;  x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_ce72d4164b0322ade6f4182d9311ebb0() {
        assertEval("{ x <- c(1L, 2L) ; attr(x, \"hi\") <- 2; x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_6c9cda38c30d74cc14b3e95de0034c60() {
        assertEval("{ x <- c(1, 2) ; attr(x, \"hi\") <- 2; x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_424967deb3f2e2c414ea5fb27c821f3b() {
        assertEval("{ x <- c(1L, 2L) ; attr(x, \"hi\") <- 2; attr(x, \"hello\") <- 1:2 ;  x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_af51cfc72a0c2a460dea902e49bac27c() {
        assertEval("{ x <- c(hello=9) ; attr(x, \"hi\") <- 2 ;  y <- x ; y }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_efd8aa922890186c8ec61d84b7fefd05() {
        assertEval("{ x <- c(hello=1) ; attr(x, \"hi\") <- 2 ;  attr(x,\"names\") <- \"HELLO\" ; x }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_09cc8ecbb951d42df7ce9a2b83157a71() {
        assertEval("{ x<-1; dim(x)<-1; y<-(attr(x, \"dimnames\")<-list(1)); y }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_4889b45f46fc504e4461e022620fc5d7() {
        assertEval("{ x<-1; dim(x)<-1; y<-list(a=\"1\"); z<-(attr(x, \"dimnames\")<-y); z }");
    }

    @Test
    public void TestSimpleAttributes_testDefinition_3856e444c64ddd1b3dbeb3529dd0c22f() {
        assertEval("{ x<-1; dim(x)<-1; y<-list(a=\"1\"); attr(y, \"foo\")<-\"foo\"; z<-(attr(x, \"dimnames\")<-y); z }");
    }

    @Test
    public void TestSimpleAttributes_testOtherPropagation_4957f6dceaabc15ff469b4e6e576d6dc() {
        assertEval("{ x <- 1:2;  attr(x, \"hi\") <- 2 ;  x == x }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_68f096986a0e9ceed28506f20d94f257() {
        assertEval("{ abs(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_0acc9423c2327a12a6706a9997f0712f() {
        assertEval("{ abs(100) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_569eff027a08e9fde94d1b7d3ba01f39() {
        assertEval("{ abs(-100) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_1fc0494f8dd251a24b83991491080491() {
        assertEval("{ abs(0/0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_e6d5bf03ff804a0d023af770b585d69c() {
        assertEval("{ abs((1:2)[3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_88476886e0f40a7639f1996d50fddc07() {
        assertEval("{ abs((1/0)*(1-0i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_42fe2bd49dfa37377c15aea64f82ee5a() {
        assertEval("{ abs(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_4456708f0bfcc38934777e67f82a7548() {
        assertEval("{ abs(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_49a74a9acf7cf428f70314c68c018c85() {
        assertEval("{ abs(-1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_7d0151c6a4328be98c5bc1e36d7852e5() {
        assertEval("{ abs(-1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_b5d0668b9136f3c69e0fc9550dbfb522() {
        assertEval("{ abs(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_0a7fc2c350e52e9c63daec2feb9c0bed() {
        assertEval("{ abs(c(1, 2, 3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_6bfa52057bb27680f3f04805b1537720() {
        assertEval("{ abs(c(1L, 2L, 3L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_effeff677a4a5a8eb358dcdd8b6e4577() {
        assertEval("{ abs(c(1, -2, 3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_8d1ac4adf1814118b24e3c61913abe06() {
        assertEval("{ abs(c(1L, -2L, 3L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_a8078003e9fda805136e2483baee5b91() {
        assertEval("{ abs(c(1L, -2L, NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_a03de453893b37f67fdd422f9655f627() {
        assertEval("{ abs((-1-0i)/(0+0i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_9da4d471d0d1d58d830a27ab25dee2e1() {
        assertEval("{ abs((-0-1i)/(0+0i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_abe899521613e6d073bd9e7bb246c74b() {
        assertEval("{ abs(NA+0.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_860cb30c6847e251edc865a9c717708a() {
        assertEval("{ abs((0+0i)/0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbs_a95bf267b6b89c8ae0d816aaa8b2a61e() {
        assertEval("{ abs(c(1, -2, NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbsIgnore_261d7e173c1caffcac87b3030f93a81c() {
        assertEval("{ abs(c(0/0,1i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbsIgnore_0ab2d0f2d7030b273cd0e45daf435b57() {
        assertEval("{ abs(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbsIgnore_eb0e93fa1cbdf12456e6b7c849b0f670() {
        assertEval("{ abs(-1:-3) }");
    }

    @Test
    public void TestSimpleBuiltins_testAbsIgnore_f9ca5d8354239b619dbd0b67d729e220() {
        assertEvalError("{ abs(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_46b44798ef0ef861d7099cb70f6e04fc() {
        assertEval("{ all(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_7eb2579b0011ec9cebb90c3868f102af() {
        assertEval("{ all(TRUE, TRUE, TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_63dfd708a8f6ca07c66d9a36ca7c1671() {
        assertEval("{ all() }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_74e62414f00a7a01b7aee87141540d1c() {
        assertEval("{ all(logical(0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_18caf1af80d31568dbcee6231603018b() {
        assertEval("{ all(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_e8b74c770784ab3c2c066d80e5fcedbf() {
        assertEval("{ all(FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_69042d8d60da68fbd9a94537c7d616e0() {
        assertEval("{ all(TRUE, TRUE, NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_d80184fa93dcecce1606e966853cf051() {
        assertEval("{ v <- c(\"abc\", \"def\") ; w <- c(\"abc\", \"def\") ; all(v == w) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_fe60ec40e3bf3085eaf425c129a1cbcf() {
        assertEval("{ all(TRUE, FALSE, NA,  na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_15bb54df265504a467a3ebdb5fcdf7c1() {
        assertEval("{ all(TRUE, FALSE, NA,  na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAll_a3aeecdc1931de721a504b853f3fbb34() {
        assertEval("{ all(TRUE, TRUE, NA,  na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_1cad38b2b58506e86b3faf337282af34() {
        assertEval("{ all(TRUE, TRUE, NA,  na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_2b56cf245fc3518ca8c3daa8c70c7441() {
        assertEval("{ all(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_91a6f9d5d41dc450755861f6e318c869() {
        assertEval("{ all(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_b5c51ccc3f58394e01320c7b59736d24() {
        assertEval("{ all(TRUE,c(TRUE,TRUE),1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_e11f439dffd428996b1d680fede13a41() {
        assertEval("{ all(TRUE,c(TRUE,TRUE),1,0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_c3ac960fb2d31a1be58f5185a775cfb8() {
        assertEval("{ any(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_fa0f3c9198da2ce2ff160de0f43f69b2() {
        assertEval("{ any(TRUE, TRUE, TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_753d837e06d5b62df1a8801fbfdbcfc3() {
        assertEval("{ any(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_d3a630f40989cf201e89e2023a1b51b8() {
        assertEval("{ any(TRUE, TRUE, NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_2a881cee5349443e18159f9c3335a358() {
        assertEval("{ any() }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_a2e09a9cb158b5aa0aab3f18d121bd9a() {
        assertEval("{ any(logical(0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_77d354dde38110a48bac331d8fe9e433() {
        assertEval("{ any(FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_9a13ea66e606b5a717d8fb608d05a92e() {
        assertEval("{ any(NA, NA, NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_689c35b766fd3c46f31a3258cec01e39() {
        assertEval("{ any(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_69119abd2f9748e70a20ccdbf38fac18() {
        assertEval("{ any(TRUE, TRUE, NA,  na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_98b5442ddc22d31ab63d54d6c59a0e72() {
        assertEval("{ any(TRUE, FALSE, NA,  na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAny_24c97d9f007981eca6d7905e73991716() {
        assertEval("{ any(FALSE, NA,  na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_2de112af7c71033650fc4d92bdc9e0f1() {
        assertEval("{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), incomparables=FALSE,fromLast = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_892a1705a17e7c26c656d768c87cec80() {
        assertEval("{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), FALSE, TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_74334838edae48960a2520cc0858c2e8() {
        assertEval("{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), TRUE )}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_95984cde82b418c6bd6ccb49b7237eb0() {
        assertEval("{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), FALSE )}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_c84bdad11448d08e929982d905ef098c() {
        assertEval("{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_060c12cd8f984af7f71bf9e22c51493f() {
        assertEval("{ anyDuplicated(c(1L, 2L, 1L, 1L, 3L, 2L), incomparables = TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_7c2048e48cfa4b8a27e274503d2d28f2() {
        assertEval("{ anyDuplicated(c(1L, 2L, 3L, 4L, 2L, 3L), fromLast = TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_cb726c8352e193993857ad6c6c8738b4() {
        assertEval("{anyDuplicated(c(\"abc\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_5e9e5d3efe324ab9b4ee8238a3fd0777() {
        assertEval("{anyDuplicated(c(\"abc\", \"def\", \"abc\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_1c99437abcc657b91879d8b424d7e094() {
        assertEval("{anyDuplicated(c(\"abc\", \"def\", \"ghi\", \"jkl\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_489add3f7871fe928174c29e9ba3f2a5() {
        assertEval("{anyDuplicated(c(FALSE))}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_5f13ee2722a01f6c8b2fc3423da685c0() {
        assertEval("{anyDuplicated(c(FALSE, TRUE))}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_2ca2f1d34fa0c53294f79ed82e2aae1e() {
        assertEval("{anyDuplicated(c(FALSE, TRUE, FALSE))}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_22f1c7b36468592cd40beb3cbdeb6e75() {
        assertEval("{anyDuplicated(c(2+2i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_57a831eba3d0362f32ce7ec3f2e5e2fa() {
        assertEval("{anyDuplicated(c(2+2i, 3+3i, 2+2i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_4c969560f958b34f28ecfec9b023896d() {
        assertEval("{anyDuplicated(c(2+2i, 3+3i, 4+4i, 5+5i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_9554e7c083fc5c79e8515c7c0a268a38() {
        assertEval("{ anyDuplicated(c(27.2, 68.4, 94.3, 22.2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_c4dcc20d0a7b98273eeeb4201a17586d() {
        assertEval("{ anyDuplicated(c(1, 1, 4, 5, 4), TRUE, TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_cba8ffc73aae0b7d229aaf355cfe511b() {
        assertEval("{ anyDuplicated(c(1,2,1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_89f4c6b45dc5c5a079da346882bba123() {
        assertEval("{ anyDuplicated(c(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_b0dfc8d0fd3047c6105c0466a65665e0() {
        assertEval("{ anyDuplicated(c(1,2,3,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_6489c59270b8faca87af40e66bc8a370() {
        assertEval("{ anyDuplicated(list(76.5, 5L, 5L, 76.5, 5, 5), incomparables = c(5L, 76.5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_146e21c102bc8a276bd46af23443e881() {
        assertEval("{ anyDuplicated(c(TRUE, FALSE, TRUE), TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_d6a0750b81060dbb329df1ffd27647a1() {
        assertEval("{ anyDuplicated(c(TRUE, FALSE, TRUE), TRUE, fromLast = 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_79a0ba8900e434b0bf661454aa7b5ab0() {
        assertEval("{ anyDuplicated(c(\"abc\", \"good\", \"hello\", \"hello\", \"abc\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_ec6e1332099aca3a4213d0c4332141be() {
        assertEval("{ anyDuplicated(c(\"TRUE\", \"TRUE\", \"FALSE\", \"FALSE\"), FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_78a3aa89f8f7950df000a8ea10875d45() {
        assertEval("{ anyDuplicated(c(\"TRUE\", \"TRUE\", \"FALSE\", \"FALSE\"), TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_450c1bf0ed095e95ea01e4f5b78adc40() {
        assertEval("{ anyDuplicated(c(\"TRUE\", \"TRUE\", \"FALSE\", \"FALSE\"), 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_f5e342de0198beea453644948e99db62() {
        assertEval("{ anyDuplicated(c(1+0i, 6+7i, 1+0i), TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_0db979b32fc085e1a3fab7bdd3f98159() {
        assertEval("{ anyDuplicated(c(1+1i, 4-6i, 4-6i, 6+7i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicated_301f022ec929d2fc778cddf92286480a() {
        assertEval("{ anyDuplicated(c(1, 4+6i, 7+7i, 1), incomparables = c(1, 2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicatedIgnore_dcc2ba95aa8608d62368b2c9886bb0ba() {
        assertEval("{ anyDuplicated(c(1L, 2L, 1L, 1L, 3L, 2L), incomparables = \"cat\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyDuplicatedIgnore_58cdce8ea781c0cdf349b42069b16727() {
        assertEval("{ anyDuplicated(c(1,2,3,2), incomparables = c(2+6i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyIgnore_a5514afb3c27ad5fad71696cb1db96a9() {
        assertEval("{ any(FALSE, NA,  na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyIgnore_91043dd22cb7d3aab79a22019a52ea3f() {
        assertEvalWarning("{ any(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAnyIgnore_b0a96f7fb16a6bf50fba85a11a8da034() {
        assertEvalWarning("{ any(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_32f22c3030902475114c0fb4882d3ea0() {
        assertEval("{ a = array(1:4,c(2,2)); b = aperm(a); c(a[1,1] == b[1,1], a[1,2] == b[2,1], a[2,1] == b[1,2], a[2,2] == b[2,2]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_b8c345f580afff451e38c41a3a55ff01() {
        assertEval("{ a = array(1:24,c(2,3,4)); b = aperm(a); c(dim(b)[1],dim(b)[2],dim(b)[3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_a44dcb12a161c80753a826c8cc64162f() {
        assertEval("{ a = array(1:24,c(2,3,4)); b = aperm(a, c(3,2,1), resize=FALSE); c(dim(b)[1],dim(b)[2],dim(b)[3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_18e9d3c9755549c9b400b15ab8950c41() {
        assertEval("{ a = array(1:24,c(2,3,4)); b = aperm(a, c(2,3,1)); a[1,2,3] == b[2,3,1] }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_5c1fb0ab96b21921d05341372ae0aa2c() {
        assertEval("{ a = array(1:24,c(3,3,3)); b = aperm(a, c(2,3,1)); c(a[1,2,3] == b[2,3,1], a[2,3,1] == b[3,1,2], a[3,1,2] == b[1,2,3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_674dc3e594fa65d6d7e91a9911e91f02() {
        assertEval("{ a = array(1:24,c(3,3,3)); b = aperm(a, c(2,3,1), resize = FALSE); c(a[1,2,3] == b[2,3,1], a[2,3,1] == b[3,1,2], a[3,1,2] == b[1,2,3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_f0effd761c52fe6bf1a5d5c76ccc721f() {
        assertEval("{ a = array(1:24,c(2,3,4)); b = aperm(a, c(2,3,1), resize = FALSE); a[1,2,3] == b[2,1,2] }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_4add6598c117f23c8c1cb3d9b4563b83() {
        assertEval("{ a = array(1:24,c(2,3,4)); b = aperm(a,, resize=FALSE); c(dim(b)[1],dim(b)[2],dim(b)[3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_025f5f0ac98c21871856e4ccb8473fc6() {
        assertEval("{ aperm(array(c(TRUE, FALSE, TRUE, TRUE, FALSE), c(2, 5, 2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_93787a031ea4647e8f956a92e160120b() {
        assertEval("{ aperm(array(c('FASTR', 'IS', 'SO', 'FAST'), c(3,1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_f54817b85a2f5e115a2abb393bbfc271() {
        assertEval("{ aperm(array(c(3+2i, 5+0i, 1+3i, 5-3i), c(2,2,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_ced88e799f3281fae93e9a290dc0db54() {
        assertEvalError("{ aperm(array(1,c( 3,3,3)), c(1,2,1)); }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_d452fc9657b296292ea89b31c89a766b() {
        assertEvalError("{ aperm(array(1,c(3,3,3)), c(1,2,0)); }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_f663b80fd121c4a4b2fe9d966eb3db55() {
        assertEvalError("{ aperm(c(1,2,3)); }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_3d260fe7d682d16e5eabf013f369333f() {
        assertEvalError("{ aperm(c(c(2,3), c(4,5), c(6,7)), c(3,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_6a90b304900b2f56fb170f26490d9bca() {
        assertEvalError("{ aperm(array(1,c(3,3,3)), c(1,2)); }");
    }

    @Test
    public void TestSimpleBuiltins_testAperm_fc6d4e2ce3038c9b44e62938ed037b59() {
        assertEvalWarning("{ aperm(array(1:27,c(3,3,3)), c(1+1i,3+3i,2+2i))[1,2,3] == array(1:27,c(3,3,3))[1,3,2]; }");
    }

    @Test
    public void TestSimpleBuiltins_testApply_6f7db828eb780faac00d9679475a3b45() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6),2) ; apply(m,1,sum) }");
    }

    @Test
    public void TestSimpleBuiltins_testApply_daacf7caa38c333d8ac62cef2f4274dc() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6),2) ; apply(m,2,sum) }");
    }

    @Test
    public void TestSimpleBuiltins_testArrayConstructors_a1f8649b7e81e6553a6460a323f03e01() {
        assertEval("{ integer() }");
    }

    @Test
    public void TestSimpleBuiltins_testArrayConstructors_ace5c82d7decc06e96c0369d976451d2() {
        assertEval("{ double() }");
    }

    @Test
    public void TestSimpleBuiltins_testArrayConstructors_ba528faabde4ed03f8cd7e2670afd6e3() {
        assertEval("{ logical() }");
    }

    @Test
    public void TestSimpleBuiltins_testArrayConstructors_7bb1497dca1100dec4040cff37cad092() {
        assertEval("{ double(3) }");
    }

    @Test
    public void TestSimpleBuiltins_testArrayConstructors_2631ad38e678be34280bca77974845e2() {
        assertEval("{ logical(3L) }");
    }

    @Test
    public void TestSimpleBuiltins_testArrayConstructors_78cc4b45f71b765a08755e29487b9532() {
        assertEval("{ character(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testArrayConstructors_4f70837cd05e5ebf17439d46a9001540() {
        assertEval("{ raw() }");
    }

    @Test
    public void TestSimpleBuiltins_testArrayTypeCheck_6252aa167e83b0d09402ffe99c021238() {
        assertEval("{ is.array(as.array(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_a146c9552ca6af629baeecad4f1a8280() {
        assertEval("{ l <- list(f) ; as.call(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_416d4e402afeb99280218dc5422d548a() {
        assertEval("{ l <- list(f, 2, 3) ; as.call(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_32c1c7044302129cc38bee6c16ac321f() {
        assertEval("{ g <- function() 23 ; l <- list(f, g()) ; as.call(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_831f633f7a0f80b6ae9f8ad891ff39ff() {
        assertEval("{ f <- round ; g <- as.call(list(f, quote(A))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_cb2cb0dbdfec4b5b0aa76c70c3a87032() {
        assertEval("{ f <- function() 23 ; l <- list(f) ; cl <- as.call(l) ; eval(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_631bd9ab19b58b15fdd78fa6275cebd2() {
        assertEval("{ f <- function(a,b) a+b ; l <- list(f,2,3) ; cl <- as.call(l) ; eval(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_9c9b32311fb6d509e929e4a021dbcc56() {
        assertEval("{ f <- function(x) x+19 ; g <- function() 23 ; l <- list(f, g()) ; cl <- as.call(l) ; eval(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_8f770ac294b20702940b73eddb851281() {
        assertEval("{ f <- function(x) x ; l <- list(f, 42) ; cl <- as.call(l); typeof(cl[[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCall_e73068132fe0e5dbd044e7de543fd447() {
        assertEval("{ f <- function(x) x ; l <- list(f, 42) ; cl <- as.call(l); typeof(cl[[2]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacter_9a2f22325dbb9e10761ad0f6022bc8d7() {
        assertEval("{ as.character(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacter_25b198b6eccc28cd71e39846217a8d03() {
        assertEval("{ as.character(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacter_0d773d1535b54d9363bb7ba0d5232291() {
        assertEval("{ as.character(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacter_e53d031aa88b9012634d2a91d62da9ec() {
        assertEval("{ as.character(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacter_7d86b0dfc3ab7a8407636a972c50dc97() {
        assertEval("{ as.character(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_c803fc23a52fdc9950e5603f439b132f() {
        assertEval("{ as.character(list(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_03efd474c6b2ac63cfa1f6d497c9cf80() {
        assertEval("{ as.character(list(c(\"hello\", \"hi\"))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_2f45a0dc44e788e9eaea83ed3fc488ad() {
        assertEval("{ as.character(list(list(c(\"hello\", \"hi\")))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_f0e99f0b6485990390645c5a6f6b13c3() {
        assertEval("{ as.character(list(c(2L, 3L))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_2ef5afd90d532194c1e0775974b91525() {
        assertEval("{ as.character(list(c(2L, 3L, 5L))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_373710d7b4cc13cffadaba377dcce68c() {
        assertEval("{ as.complex(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_72a16c00ee2a54694ebcb7a89b07382a() {
        assertEval("{ as.complex(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_dab932848b730f42b5b3e008d32e8d56() {
        assertEval("{ as.complex(\"1+5i\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_640228a8826c3e8c6800e6add93cb103() {
        assertEval("{ as.complex(\"-1+5i\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_95c68dbb2a1de795b72eb00c995d0518() {
        assertEval("{ as.complex(\"-1-5i\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_3cb823e08080615aaacb8fd6a9706be2() {
        assertEval("{ as.complex(0/0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_6f38d3da5ad7372f6ad69d458aed759e() {
        assertEval("{ as.complex(c(0/0, 0/0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_b6b94ce72b18de1ff03ebe7feeb17554() {
        assertEval("{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, \"foo\")<-\"foo\"; y<-as.complex(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_8ffbf32e73519b2e78880c77bb680ced() {
        assertEval("{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, \"foo\")<-\"foo\"; y<-as.complex(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_1c161837613fc8eb032e82d2847d699a() {
        assertEval("{ as.complex(\"Inf\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_09a336b246204913af2ac217bb9c8a39() {
        assertEval("{ as.complex(\"NaN\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_a8ce6a3e28ddb6e5b3050aa2adb56f87() {
        assertEval("{ as.complex(\"0x42\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_a956418be2f92dc147b9880ee38a0baa() {
        assertEvalWarning("{ as.complex(c(\"1\",\"hello\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplex_0e40e701e12f7aaf40302968a93162c8() {
        assertEvalWarning("{ as.complex(\"TRUE\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplexIgnore_a234b535de865dc1374d86dc2a304cb0() {
        assertEval("{ as.complex(\"1e10+5i\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplexIgnore_f959c2432167aba7516572589c2a297b() {
        assertEval("{ as.complex(\"-.1e10+5i\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplexIgnore_4fff4d142baeef1724a393317f422bfe() {
        assertEval("{ as.complex(\"1e-2+3i\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplexIgnore_ca81945b0033de54e397d1df1719f69a() {
        assertEval("{ as.complex(\"+.1e+2-3i\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_63a91893e2c18baa68e6de1977cdefe8() {
        assertEval("{ as.double(\"1.27\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_091669465d2b034d5e6a55aa84b6e4b3() {
        assertEval("{ as.double(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_479fd1639fe2d6e0d67a0e816becabdc() {
        assertEval("{ as.double(as.raw(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_f8fef2e9f95f5b9cec473c1ae1ce5dc7() {
        assertEval("{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, \"foo\")<-\"foo\"; y<-as.double(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_bc1da27133d56768b192f56f13fb67a1() {
        assertEval("{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, \"foo\")<-\"foo\"; y<-as.double(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_82ae143056b783ea1c485d5aaaf8b2ef() {
        assertEvalWarning("{ as.double(c(\"1\",\"hello\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_6db9f2b7f030c3b545b6fb2f540cc502() {
        assertEvalWarning("{ as.double(\"TRUE\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_d5d5b6abc97079dc1d2d996282a4b4a3() {
        assertEvalWarning("{ as.double(10+2i) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsDouble_69e00247e301060254e0797e5f04251b() {
        assertEvalWarning("{ as.double(c(3+3i, 4+4i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_7141b813c63bfa1663f1f54d19e9a25e() {
        assertEval("{ as.integer(\"1\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_bf6db303a1a75a748a8b5b72f613bd2e() {
        assertEval("{ as.integer(c(\"1\",\"2\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_15edd2182c0f050e41ac2b7841afd707() {
        assertEval("{ as.integer(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_5239f66ec282ce2ec574f10eb3d9df81() {
        assertEval("{ as.integer(c(1.0,2.5,3.9)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_3275c4211593a568fc0d31983e0e22fc() {
        assertEval("{ as.integer(0/0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_359278f853e0c2b6a409d4461d6323cf() {
        assertEval("{ as.integer(-0/0) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_05effa6e651dbb52c7a57418a138aff6() {
        assertEval("{ as.integer(as.raw(c(1,2,3,4))) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_eeb551b51fdaffff49e0d2f647a3f7f3() {
        assertEval("{ as.integer(list(c(1),2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_2612b980873b522f030d35b28adc86cf() {
        assertEval("{ as.integer(list(integer(),2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_16e288aed648e941ebc2de58971828f5() {
        assertEval("{ as.integer(list(list(1),2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_efc9ab8511187da18c9d6555306dc68a() {
        assertEval("{ as.integer(list(1,2,3,list())) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_9e913fca8b29e8038c02e04e69e8db87() {
        assertEval("{ as.integer(as.raw(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_4ba2c45f945b7d8bfed6f912ba52a340() {
        assertEval("{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, \"foo\")<-\"foo\"; y<-as.integer(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_9c882e3c87b92d65d6ad743d230ec501() {
        assertEval("{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, \"foo\")<-\"foo\"; y<-as.integer(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_27316ea084f9b602e2ca9b7756c0b726() {
        assertEval("{ as.integer(1.1:5.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_bdee86802f4d5a14a501cbdf208e49b7() {
        assertEvalWarning("{ as.integer(10+2i) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_20c98748532ab2f9fba5f8f6e882a4b8() {
        assertEvalWarning("{ as.integer(c(3+3i, 4+4i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_61d2ee56099d039eff403fe24f12eaa5() {
        assertEvalWarning("{ as.integer(10000000000000) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_cd4b790d81dbb46f2e4bc1e8874e7f84() {
        assertEvalWarning("{ as.integer(10000000000) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_10ae2ab3382a5b5a08b3c994ff8af6a4() {
        assertEvalWarning("{ as.integer(-10000000000) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_3fd0c179095e1763a074173595c24e9b() {
        assertEvalWarning("{ as.integer(c(\"1\",\"hello\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsInteger_a6edcce0ad2597fc069f850f20117738() {
        assertEvalWarning("{ as.integer(\"TRUE\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_7c48b732e347c6a32529c0fc9828c898() {
        assertEval("{ as.logical(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_59751f85efb4b5185a40ce38344ed83a() {
        assertEval("{ as.logical(\"false\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_102dabbf6235c7777b4863d44c531a5c() {
        assertEval("{ as.logical(\"dummy\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_9d9f6468397bd0dc22331958628d3fce() {
        assertEval("{ x<-c(a=1.1, b=2.2); dim(x)<-c(1,2); attr(x, \"foo\")<-\"foo\"; y<-as.logical(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_32deb020cd94418c900ab70fb006b75d() {
        assertEval("{ x<-c(a=1L, b=2L); dim(x)<-c(1,2); attr(x, \"foo\")<-\"foo\"; y<-as.logical(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_0566cd14ef0633a31e86fdfec9ee3d68() {
        assertEval("{ as.logical(c(\"1\",\"hello\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_b51b2ababbc6661feaaec2f13a052999() {
        assertEval("{ as.logical(\"TRUE\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_0de6fee948230776fad55dbddab7a52f() {
        assertEval("{ as.logical(10+2i) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsLogical_23d0498579b5646b7c8ff983c9f82171() {
        assertEval("{ as.logical(c(3+3i, 4+4i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRaw_45e9a2f9092baa7b059e1d16b0a2dc36() {
        assertEval("{ as.raw(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRaw_8d9753300ecdc7e581bc47059d584961() {
        assertEval("{ as.raw(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRaw_7f0a3d068c37ad40d40740f9a712cc01() {
        assertEval("{ as.raw(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRaw_810e96ba01dde0b9203a17a350b5ca70() {
        assertEval("{ as.raw(1.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRaw_535958221e3ffa3f60a58fb378e2204b() {
        assertEval("{ as.raw(c(1, 2, 3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRaw_38735b88140ffffd266035fe836d4832() {
        assertEval("{ as.raw(c(1L, 2L, 3L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRaw_d2566bc3e1098609dd899369c2ab527d() {
        assertEval("{ as.raw(list(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRaw_a8a0e89246d5e8768b3ee2bf0ae77631() {
        assertEval("{ as.raw(list(\"1\", 2L, 3.4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_234cefc5ff95e036f3fa00ff5e0f2088() {
        assertEvalWarning("{ as.raw(1+1i) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_6cd26c8e6df8ead2edcbb6df45860698() {
        assertEvalWarning("{ as.raw(-1) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_b2f6c512a8b92fcc2861d16b643c77e8() {
        assertEvalWarning("{ as.raw(-1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_6e315b6de04235063bc8e0be93dc9780() {
        assertEvalWarning("{ as.raw(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_3dced2b189d4bc08910497a4c84f8eaf() {
        assertEvalWarning("{ as.raw(\"test\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_75c975b8a03a598a4af0a0a332d02b71() {
        assertEvalWarning("{ as.raw(c(1+3i, -2-1i, NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_747e8b9acbda8dd5dc02ce1274604e0c() {
        assertEvalWarning("{ as.raw(c(1, -2, 3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_ad6deee1d16519ee2ce790bb577709d2() {
        assertEvalWarning("{ as.raw(c(1,1000,NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_d799cae365e5f001ed4de47c2cbbff01() {
        assertEvalWarning("{ as.raw(c(1L, -2L, 3L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsRawIgnore_05185c7c12248d279730674e3b527d86() {
        assertEvalWarning("{ as.raw(c(1L, -2L, NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsSymbol_aca87179ddc66bf6ffd0cf9dda6f1b36() {
        assertEval("{ as.symbol(\"name\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsSymbol_164a2c36b5727656c46e5eb5fcafbf17() {
        assertEval("{ as.symbol(123) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsSymbol_26d263746bdf130a45fbd5505a64422e() {
        assertEval("{ as.symbol(as.symbol(123)) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_e84fd1b27fd6570ddd6a53234fde0ba0() {
        assertEval("{ as.vector(\"foo\", \"logical\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_cb0809ef1d3ab2fc8312585316b3ff3f() {
        assertEval("{ as.vector(\"foo\", \"character\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_ad178529ec6948277d4535f8ce4d1307() {
        assertEval("{ as.vector(\"foo\", \"list\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_715c056f5c63c0038099fb48bed34bad() {
        assertEval("{ as.vector(\"foo\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_8d0d1cdaff856d660d11866fa044397e() {
        assertEval("{ as.vector(\"foo\", \"bar\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_7df3d852bd307ec74005874e9e6b860a() {
        assertEval("x<-c(a=1.1, b=2.2); as.vector(x, \"raw\")");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_68bdfdc99e081735270c25dad5c6438c() {
        assertEval("x<-c(a=1L, b=2L); as.vector(x, \"complex\")");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_35065e6784253d5d096669f4fee13932() {
        assertEval("{ x<-c(a=FALSE, b=TRUE); attr(x, \"foo\")<-\"foo\"; y<-as.vector(x); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_5b09e05fda45f41d37a149696f95babb() {
        assertEval("{ x<-c(a=1, b=2); as.vector(x, \"list\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_824741c5ce8c39da5eb71c8a537981b6() {
        assertEval("{ x<-c(a=FALSE, b=TRUE); attr(x, \"foo\")<-\"foo\"; y<-as.vector(x, \"list\"); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_bfb16efc959f2032f3fd07f7282ad495() {
        assertEval("{ x<-1:4; dim(x)<-c(2, 2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\")); y<-as.vector(x, \"list\"); y }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_309f5443ca2e8165a26032b14015a075() {
        assertEval("{ as.vector(NULL, \"list\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_ac3c8e11251b190796fc31c6d7d2420e() {
        assertEval("{ as.vector(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_e20c6558cca6aea70251347229e52bf5() {
        assertEvalWarning("{ as.vector(\"foo\", \"integer\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_f66e36fa2296e57c288db82f5f8e9798() {
        assertEvalWarning("{ as.vector(\"foo\", \"double\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_0a44fb77142709976b0a7a4642abaf1f() {
        assertEvalWarning("{ as.vector(\"foo\", \"numeric\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_84c625ebcd4124d15ba6dbf9b32d8293() {
        assertEvalWarning("{ as.vector(\"foo\", \"raw\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAsVector_73bc292dddea0adb6832fc9f79b8d507() {
        assertEvalWarning("{ as.vector(c(\"foo\", \"bar\"), \"raw\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAtomicTypeCheck_76125284e6e9a5c57652540a885ee844() {
        assertEval("{ is.atomic(integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttach_000b04e3d397888dde95e4ec96036dd7() {
        assertEval("{ e <- new.env(); assign(\"x\", 1, e); attach(e, name = \"mine\"); x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttach_4141d168d111ce4878b9ccd7cc4529f9() {
        assertEval("{ e <- new.env(); assign(\"x\", \"abc\", e); attach(e, 2); x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttach_8c0f918123c720fbaca40263dcd8dd31() {
        assertEval("{ attach(.Platform, 2); file.sep }");
    }

    @Test
    public void TestSimpleBuiltins_testAttach_d5f345b8b41bb68b2e11ee167faea459() {
        assertEval("{ e <- new.env(); assign(\"x\", 1, e); attach(e, 2); x; detach(2) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttach_8518409cc7fc8955539226dded7e9a52() {
        assertEval("{ e <- new.env(); assign(\"x\", 1, e); attach(e, name = \"mine\"); x; detach(\"mine\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAttach_afb107e170beb063d3c1dc93f069993d() {
        assertEvalError("{ e <- new.env(); assign(\"x\", 1, e); attach(e, 2); x; detach(2); x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttach_701f9b8805800a510479dcee8df5fade() {
        assertEvalError("{ detach(\"missing\"); x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_7a7da0b52cfc6f6dbfdd195db4c141e9() {
        assertEval("{ x <- 1; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_e369cb73967dc353f1e0afd2e44f7f0e() {
        assertEval("{ x <- 1; names(x) <- \"hello\" ; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_d92b47e84d847dd681b283e9260b6526() {
        assertEval("{ x <- 1:3 ; attr(x, \"myatt\") <- 2:4 ; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_61b1d4303e650fa729c3fef02e0ae698() {
        assertEval("{ x <- 1:3 ; attr(x, \"myatt\") <- 2:4 ; attr(x, \"myatt1\") <- \"hello\" ; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_332b1db258467b26ab72c5056a2ca51d() {
        assertEval("{ x <- 1:3 ; attr(x, \"myatt\") <- 2:4 ; y <- x; attr(x, \"myatt1\") <- \"hello\" ; attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_bf9508421334e223031d350a516cd544() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"myatt\") <- 2:4 ; y <- x; attr(x, \"myatt1\") <- \"hello\" ; attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_3010b4e4b789d1b465016c6f7faaf08d() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"names\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_440a367f3e9cf09e1c582accf31d2692() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"na\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_36febdbf7b69f4e073c589f0f023cc4e() {
        assertEval("{ x <- c(a=1, b=2) ; attr(x, \"mya\") <- 1; attr(x, \"b\") <- 2; attr(x, \"m\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_d58f9574d72e4e4098e214fcc7e3ba00() {
        assertEval("{ x <- 1:2; attr(x, \"aa\") <- 1 ; attr(x, \"ab\") <- 2; attr(x, \"bb\") <- 3; attr(x, \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_eec7280497511f485c3a5d3aa0430188() {
        assertEval("{ z <- 1; attr(z,\"a\") <- 1; attr(z,\"b\") <- 2; attr(z,\"c\") <- 3 ; attr(z,\"b\") <- NULL ; z }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_34c4624d3b3ab86bc215536ac25578a1() {
        assertEval("{ x <- 1 ; attributes(x) <- list(hi=3, hello=2) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_0994903f7e11c4a54f386ac7d9019585() {
        assertEval("{ x <- 1 ; attributes(x) <- list(hi=3, names=\"name\") ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_87e2457fb1a9d6a7e176775eb6366980() {
        assertEval("{ x <- c(hello=1) ; attributes(x) <- list(names=NULL) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_43e8ba6d4f12efd38adf6b788556a34e() {
        assertEval("{ x <- 1; attributes(x) <- list(my = 1) ; y <- x; attributes(y) <- list(his = 2) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_43f74452c912404024bee6bbeb50f37d() {
        assertEval("{ x <- c(hello=1) ; attributes(x) <- list(hi=1) ;  attributes(x) <- NULL ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_762ced2b79ff52c63ed69b50c19aba14() {
        assertEval("{ x <- c(hello=1) ; attributes(x) <- list(hi=1, names=NULL, hello=3, hi=2, hello=NULL) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_91959c3aba2c22f7ce55fda369b2089e() {
        assertEval("{ x<-1; attributes(x)<-list(names=\"c\", dim=NULL); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_6389f590bfe766984916afeca9781c4a() {
        assertEvalError("{ x <- c(hello=1) ; attributes(x) <- list(hi = 1, 2) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_8c74e3ead6decbba9caf660787bd966b() {
        assertEvalError("{ x <- c(hello=1) ; attributes(x) <- list(1, hi = 2) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_52e1a1b5231a99ede49b8606c1abccb3() {
        assertEvalError("{ x <- c(hello=1) ; attributes(x) <- list(ho = 1, 2, 3) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_cf6f42b2d0b5931f4a325ab22e39f03a() {
        assertEvalError("{ x <- c(hello=1) ; attributes(x) <- list(1, hi = 2, 3) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testAttributes_25c4c05e4a7dcd010c688402b165d623() {
        assertEvalError("{ x <- c(hello=1) ; y<-list(1,2); names(y)<-c(\"hi\", \"\"); attributes(x)<-y; x }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_ff3dd65b96f1f8f99e851750a722434c() {
        assertEval("{ call(\"f\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_bf4b2930dd05154e155f0d37a803d3f7() {
        assertEval("{ call(\"f\", 2, 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_8dcceb78ba7a03e5f78e1611c042fd27() {
        assertEval("{ call(\"f\", quote(A)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_d17454fed609d8ff7d627ca705e4ada2() {
        assertEval("{ f <- \"f\" ; call(f, quote(A)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_e828c5a432d0321b06f3eb4ca2b6c4e2() {
        assertEval("{ f <- round ; call(f, quote(A)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_ff8e5acfb3e6e67f1acb79920529456a() {
        assertEval("{ f <- function() 23 ; cl <- call(\"f\") ; eval(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_7d3147e26292301cfabf8939c17af430() {
        assertEval("{ f <- function(a, b) { a + b } ; l <- call(\"f\", 2, 3) ; eval(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_ac5601b7f27d60cead4d93b849fd38ca() {
        assertEval("{ f <- function(a, b) { a + b } ; x <- 1 ; y <- 2 ; l <- call(\"f\", x, y) ; x <- 10 ; eval(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_0c34bda9558e830987bd9d0c3088034a() {
        assertEval("{ cl <- call(\"f\") ; typeof(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testCall_49e4276b5b967e1b9c64646af3e596b9() {
        assertEval("{ cl <- call(\"f\") ; class(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_54020b2a34bff2cae05e6014769467c3() {
        assertEval("{ as.complex(as.character(c(1+1i,1+1i))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_a9dc7f92ad5513354d7ffc4a01bf2515() {
        assertEval("{ as.complex(as.integer(c(1+1i,1+1i))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_cf9d84ba001a43404aab67fea70a7b30() {
        assertEval("{ as.complex(as.logical(c(1+1i,1+1i))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_a13729125ad49e4bd3a829df96d7d97d() {
        assertEval("{ as.double(as.logical(c(10,10))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_819f841f683284ba0d258ed83444bf8e() {
        assertEval("{ as.integer(as.logical(-1:1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_f6420f1f19e0a4c5f8b1f7741a12aece() {
        assertEval("{ as.raw(as.logical(as.raw(c(1,2)))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_f4ba0d0a8fe074cef6aed7850c3a269c() {
        assertEval("{ as.character(as.double(1:5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_3c5e393480880b499b521f7e64e16ede() {
        assertEval("{ as.character(as.complex(1:2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_ab34701fbf0da93227aaf2e275e5f53b() {
        assertEval("{ m<-matrix(1:6, nrow=3) ; as.integer(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_b102360ceadcc9e72d963d3292564c09() {
        assertEval("{ m<-matrix(1:6, nrow=3) ; as.vector(m, \"any\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_6bb5abf859bc98f1c437cd8ac62d8840() {
        assertEval("{ m<-matrix(1:6, nrow=3) ; as.vector(mode = \"integer\", x=m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_871c422239af2faa5f074e5af1bd7d88() {
        assertEval("{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = \"double\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_dc4e82fd153b9c51b36e38b143336be4() {
        assertEval("{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = \"numeric\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_1e5d34d601096f21c5ee66cf058475ec() {
        assertEval("{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_7cd17efc5cab7272ddef9006faff8304() {
        assertEval("{ m<-matrix(c(TRUE,FALSE,FALSE,TRUE), nrow=2) ; as.vector(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_35ebe2837247bbbe8a131689ab098393() {
        assertEval("{ m<-matrix(c(1+1i,2+2i,3-3i,4-4i), nrow=2) ; as.vector(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_aca53f11bd350624e752dc6ef16f988d() {
        assertEval("{ m<-matrix(c(\"a\",\"b\",\"c\",\"d\"), nrow=2) ; as.vector(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_cd7bcce839bb8157fcde70ac60d41569() {
        assertEval("{ m<-matrix(as.raw(c(1,2,3,4)), nrow=2) ; as.vector(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_93624a48c554db2f45fa8eab015805f1() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; as.double(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_ae4b3d8116361a498946ec4840c49f2c() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; as.integer(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_25d8dbb8ec109837dd9837a260fd8d63() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; as.logical(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_66d97bd9b62a7ceb6e86b15c223e2c0f() {
        assertEval("{ x <- c(0,2); names(x) <- c(\"hello\",\"hi\") ; as.logical(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_54e8a60a9ca2de801b9a9fabfbe913e6() {
        assertEval("{ x <- 1:2; names(x) <- c(\"hello\",\"hi\") ; as.double(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_b38b4200a82fdcbfd43868aede5564fb() {
        assertEval("{ x <- c(1,2); names(x) <- c(\"hello\",\"hi\") ; as.integer(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_97d4b6e51e8e88e14a04e0f452ea5159() {
        assertEval("{ m<-matrix(c(1,0,1,0), nrow=2) ; as.vector(m, mode = \"logical\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_5dd4341a59ca7d0e2ed6b0d084e792db() {
        assertEval("{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = \"complex\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_2313113d77f87db77406408465c55c7e() {
        assertEval("{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = \"character\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_b6184a32a36c6baf7d41451b40d049ba() {
        assertEval("{ m<-matrix(c(1,2,3,4), nrow=2) ; as.vector(m, mode = \"raw\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_5ecedc65b348c959e86222b948f34ce8() {
        assertEval("{ as.vector(list(1,2,3), mode=\"integer\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_63f3c5f285a5128c0781e57db7d90f4d() {
        assertEval("{ k <- as.list(3:6) ; l <- as.list(1) ; list(k,l) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_769ed9210ad0b045ab34ce853b3b973a() {
        assertEval("{ as.list(list(1,2,\"eep\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_d68d399b08fbed0e501c66049723e6e3() {
        assertEval("{ as.list(c(1,2,3,2,1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_99e069c3e73e7d68d3674c7b340148bb() {
        assertEval("{ as.list(3:6) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_bf55a9d7ec96d782af8d9529a2f38293() {
        assertEval("{ l <- list(1) ; attr(l, \"my\") <- 1; as.list(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_3491879b65e4aca7ee4eb07254dd1ba0() {
        assertEval("{ l <- 1 ; attr(l, \"my\") <- 1; as.list(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_f53133a962e1057652661353bb342c97() {
        assertEval("{ l <- c(x=1) ; as.list(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_6216cbd3e70f60262cfbaf9d43297450() {
        assertEval("{ x<-7; as.list(environment()) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_f43132a28a07c38222f028af147918e1() {
        assertEval("{ x<-7; .y<-42; as.list(environment()) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_20b9c84392efad524c545a53bb8dc115() {
        assertEval("{ x<-7; .y<-42; as.list(environment(), all.names=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_f3c1e86abe3c098506d80d45b9315d31() {
        assertEval("{ x<-7; f<-function() x<<-42; f_copy<-as.list(environment())[[\"f\"]]; f_copy(); x }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_fd41615e647202e9a7f994c633674ca4() {
        assertEval("{ as.matrix(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_c9e133e0d7fd2ee951acf79fd6d3f133() {
        assertEval("{ as.matrix(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_9887ea3892849f36e6cad0e4fc3793fa() {
        assertEval("{ x <- 1:3; z <- as.matrix(x); x }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_e446fc18e1ac80f3580fd22c9214d841() {
        assertEval("{ x <- 1:3 ; attr(x,\"my\") <- 10 ; attributes(as.matrix(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_a695ef4253fbba58b28a3e8cbcfb1987() {
        assertEval("{ as.complex(as.double(c(1+1i,1+1i))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCasts_1785fd6355c91d5f76f56cd5bd8eac86() {
        assertEval("{ as.complex(as.raw(c(1+1i,1+1i))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_605cce36686bb0b231fa1fd9e485b6c3() {
        assertEval("{ cat(rep(NA, 8), \"Hey\",\"Hey\",\"Goodbye\",\"\\n\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_75fb049558704ed597a4d49441bae349() {
        assertEvalNoNL("{ cat(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_5cd9f21c97025b5427f8244d0c0e0ffc() {
        assertEvalNoNL("{ cat(1, sep=\"\\n\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_f48953c23109705840adb64bc147151b() {
        assertEvalNoNL("{ cat(1,2,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_a81cf8070ed30384fb6e475357ba6ef8() {
        assertEvalNoNL("{ cat(\"a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_17b9c8977c744dc3a518927c5e2b3f09() {
        assertEvalNoNL("{ cat(\"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_eeff96fd8a6223eef32597eb5a8d122e() {
        assertEvalNoNL("{ cat(1, \"a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_7a2128db30707429040a36f92034b6cd() {
        assertEvalNoNL("{ cat(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_bddd79155851c51527a56d721c6a5ca7() {
        assertEvalNoNL("{ cat(c(\"a\",\"b\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_28b3773384f60d21783ce562b6af2054() {
        assertEvalNoNL("{ cat(c(1,2,3),c(\"a\",\"b\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_320c1a9bf7626562dbaa7c8df589911f() {
        assertEvalNoNL("{ cat(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_d0340760d75ec0574dcfb5f2911b8a76() {
        assertEvalNoNL("{ cat(TRUE, c(1,2,3), FALSE, 7, c(\"a\",\"b\"), \"x\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_aa0b2066d8aae3f345ec5228155c79c9() {
        assertEvalNoNL("{ cat(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_552441fae9eb3e1a0c1a2581f8262af5() {
        assertEvalNoNL("{ cat(\"hi\",1:3,\"hello\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_841a466346563a15e8a9bfafef0e2b8e() {
        assertEvalNoNL("{ cat(2.3) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_2b31ce579fc7c9f6166788e9922374af() {
        assertEvalNoNL("{ cat(1.2,3.4) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_d2dd302303cc1c2828fdb841e9329b7d() {
        assertEvalNoNL("{ cat(c(1.2,3.4),5.6) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_ce7de0a3b63f9b62750fcaeb0d4bb324() {
        assertEvalNoNL("{ cat(c(TRUE,FALSE), TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_f79a3c333c0aa46279a83870d12d4e38() {
        assertEvalNoNL("{ cat(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_d08462e99741a36b3646a6a147d53b1a() {
        assertEvalNoNL("{ cat(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_c5ec77152f3be07536df7806d49a1b49() {
        assertEvalNoNL("{ cat(1L, 2L, 3L) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_c46a1d13e87c8a06a425354c68780eae() {
        assertEvalNoNL("{ cat(c(1L, 2L, 3L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_8de12861bed933861dbbda4217d79576() {
        assertEvalNoNL("{ cat(1,2,sep=\".\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_8f49d4d29ce2ef92acf8dc9735d6ebde() {
        assertEvalNoNL("{ cat(\"hi\",1[2],\"hello\",sep=\"-\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_91de7df676b06ad665ce3584e334842c() {
        assertEvalNoNL("{ cat(\"hi\",1[2],\"hello\",sep=\"-\\n\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_1dcd33ce696ea60d54dd157e9d0dd76f() {
        assertEvalNoNL("{ m <- matrix(as.character(1:6), nrow=2) ; cat(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_a3f20135d23156229fddeb4a1f3b8cb0() {
        assertEvalNoNL("{ cat(sep=\" \", \"hello\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCat_c991c3c93c858a033c1e8f63f4994441() {
        assertEvalNoOutput("{ cat() }");
    }

    @Test
    public void TestSimpleBuiltins_testCatIgnore_01ac467ff40598b5a055378fc7882537() {
        assertEvalNoNL("{ cat(\"hi\",NULL,\"hello\",sep=\"-\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCatIgnore_4949a7df83738286ea025e86159c9cdc() {
        assertEvalNoNL("{ cat(\"hi\",integer(0),\"hello\",sep=\"-\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCatVarargs_ff51d78a6902080ce5f8721aa9bd9932() {
        assertEvalNoOutput("{ f <- function(...) {cat(...,sep=\"-\")}; f(\"a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCatVarargs_a217c0f15c1bc137c95929aaed1c51f2() {
        assertEvalNoOutput("{ f <- function(...) {cat(...,sep=\"-\\n\")}; f(\"a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCatVarargs_ca16199a5bf10ef8a2fccd05debcaf73() {
        assertEvalNoOutput("{ f <- function(...) {cat(...,sep=\"-\")}; f(\"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCatVarargs_782dd61fabc4402b2636903c37f05fe6() {
        assertEvalNoOutput("{ f <- function(...) {cat(...,sep=\"-\\n\")}; f(\"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCbind_b6d50b783340cfd840b5d0d1c478e85a() {
        assertEval("{ cbind() }");
    }

    @Test
    public void TestSimpleBuiltins_testCbind_9a0a0da1e5502a4f4fae56ffc4825c65() {
        assertEval("{ cbind(1:3,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCbind_268852e66f83c27413b9dec6a2e20fee() {
        assertEval("{ cbind(1:3,1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testCbind_e9c27c728aecbd97c38d9fd72b57fe59() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; cbind(11:12, m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCbindIgnore_c292a9a2047519d8fd24923adebb0ad2() {
        assertEval("{ cbind(list(1,2), TRUE, \"a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCbindIgnore_849d2f7200b6d113f749abbc67d41a7d() {
        assertEval("{ cbind(1:3,1:2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCbindIgnore_24a51282927ba915c3ebc8717b71c58a() {
        assertEval("{ cbind(2,3, complex(3,3,2));}");
    }

    @Test
    public void TestSimpleBuiltins_testCbindIgnore_f5b3db04fe961d7c6d80476d53ae45be() {
        assertEval("{ cbind(2,3, c(1,1,1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCbindIgnore_e8d1f5dd1ffd1a1a5ccb947fcc02b43f() {
        assertEval("{ cbind(2.1:10,32.2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCeiling_7283237f5a0aa7db1d95780ead2af87f() {
        assertEval("{ ceiling(c(0.2,-3.4,NA,0/0,1/0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_1bba70d3556f1331554d4f03dca61c41() {
        assertEval("{charmatch(\"abc\", \"deeee\",c(\"3\",\"4\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_0094ab49a5bda363eaad85209835c54e() {
        assertEval("{charmatch(\"abc\", \"deeee\")}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_aa4d03f99bdec59ec1f50b0a70ac6c09() {
        assertEval("{charmatch(\"abc\", \"deeeec\",c(\"3\",\"4\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_e64c0e6b21134ad4b4bb25db598da4af() {
        assertEval("{charmatch(\"\", \"\")}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_fdb6d0ffcfe49194fde4c3423560328f() {
        assertEval("{charmatch(\"m\",   c(\"mean\", \"median\", \"mode\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_e232da4885b2245ed024ccb31f179bf1() {
        assertEval("{charmatch(\"med\", c(\"mean\", \"median\", \"mode\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_c8501689286340c24bb7ffc00266a94f() {
        assertEval("{charmatch(matrix(c(9,3,1,6),2,2,byrow=T), \"hello\")}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_09f266662b65c3fbabb20e272502f6db() {
        assertEval("{charmatch(matrix(c('h',3,'e',6),2,2,byrow=T), \"hello\")}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_a9b47ef376ece2efac7e812eb75c4ed8() {
        assertEval("{charmatch(c(\"ole\",\"ab\"),c(\"ole\",\"ab\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_acfeae7272e175b2611328a0a10678c9() {
        assertEval("{charmatch(c(\"ole\",\"ab\"),c(\"ole\",\"ole\"))}");
    }

    @Test
    public void TestSimpleBuiltins_testCharMatch_00f8ee619ac45b21b733be77508b4be6() {
        assertEval("{charmatch(matrix(c('h','l','e',6),2,2,byrow=T), \"hello\")}");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtils_38efbb1cdef27318804e0719732d2be0() {
        assertEval("{ toupper(c(\"hello\",\"bye\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtils_e144f9dec05c311f45516e0c40097270() {
        assertEval("{ tolower(c(\"Hello\",\"ByE\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtils_b2d1b37847dd587ab6fcb56daf82d532() {
        assertEval("{ toupper(c()) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtils_55b97cb36ee6761df82efdad2c963afa() {
        assertEval("{ tolower(c()) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_864e89c688384c8cc67d1b4676ff314d() {
        assertEval("{ tolower(1E100) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_69433b6491feff8204434af6a79f9307() {
        assertEval("{ toupper(1E100) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_8f5f00293e9bfb6ac9aab0e3e6c88cf8() {
        assertEval("{ m <- matrix(\"hi\") ; toupper(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_e5ad5f71aaa8302b8bcddddde53fd68e() {
        assertEval("{ toupper(c(a=\"hi\", \"hello\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_ec31b79bc63b78f141adde800c2de5ab() {
        assertEval("{ tolower(c(a=\"HI\", \"HELlo\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_ddbafed30934d43a3a0e4862fb6bd0db() {
        assertEval("{ tolower(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_73009820a93846c10cb6c65b68e5b7fa() {
        assertEval("{ toupper(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testChol_0c871276d1ef0a12733f4763eca31305() {
        assertEval("{ chol(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testChol_56c7d9d1a9d02d3730de6ef5e4b085b8() {
        assertEval("{ round( chol(10), digits=5) }");
    }

    @Test
    public void TestSimpleBuiltins_testChol_7b9b9fe7c5e51dfc97d44dd7ce4cc95a() {
        assertEval("{ m <- matrix(c(5,1,1,3),2) ; round( chol(m), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testChol_887c0d3033dcb17c875cf7a89313563c() {
        assertEvalError("{ m <- matrix(c(5,-5,-5,3),2,2) ; chol(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testCol_96f5c5aecdd0b8a3d2888f918ea77f7f() {
        assertEval("{ ma <- matrix(1:12, 3, 4) ; col(ma) }");
    }

    @Test
    public void TestSimpleBuiltins_testCol_2aed206e17a5da2a3c6f617daeeacca0() {
        assertEval("{ ma <- cbind(x = 1:10, y = (-4:5)^2) ; col(ma) }");
    }

    @Test
    public void TestSimpleBuiltins_testColIgnore_8406be06fb724e25d072bc0cda3c46f9() {
        assertEval("{ col(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_e6a4306e7b057179d8d3f30f3161484e() {
        assertEval("{colMeans(matrix(c(3,4,2,5)))}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_14ce4441e99ba305cecdd1e0a71dd6de() {
        assertEval("{colMeans(matrix(c(3L,4L,2L,5L)))}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_df9fe483aea1907010644038834c2e30() {
        assertEval("{colMeans(matrix(c(TRUE,FALSE,FALSE,TRUE)))}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_94baee8524d82b9f9ce3301486b25be8() {
        assertEval("{colMeans(matrix(c(3+2i,4+5i,2+0i,5+10i)))}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_4f502985abc6b368fb40e92a6196db44() {
        assertEval("{colMeans(matrix(c(3,4,NaN,5),ncol=2,nrow=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_838f08debde5239b1f690c576d95f538() {
        assertEval("{colMeans(matrix(c(3,4,NaN,5),ncol=2,nrow=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_23651a8316ac598f347b2e0778199c36() {
        assertEval("{colMeans(matrix(c(3L,NaN,2L,5L),ncol=2,nrow=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_8338c83949966744a9a08c1315d3dbe2() {
        assertEval("{colMeans(matrix(c(3L,NA,2L,5L),ncol=2,nrow=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_3e283db9d8d7ac8f48c944d8d8d54244() {
        assertEval("{colMeans(matrix(c(3L,NaN,2L,5L),ncol=2,nrow=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_ef95a8b0eb9f0d3b69e4317f3598a6e7() {
        assertEval("{colMeans(matrix(c(3L,NA,2L,5L),ncol=2,nrow=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_c19134af9f3e9d7bf2235e4b98bbe30a() {
        assertEval("{colMeans(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_8fa6c1f0d1944545b223d61dfe3cfa7d() {
        assertEval("{colMeans(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_9f75e8d7a18fbf90c6ddb0f15d0cf059() {
        assertEval("{colMeans(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_c38e4ad4614850b479eb310c11c6a3d0() {
        assertEval("{colMeans(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_09cf117bea4e1ae3ce36ab7fce9bd703() {
        assertEval("{colMeans(matrix(c(NA,NaN,NaN,NA),ncol=2,nrow=2))}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeans_c3cb663c6b0453b8794a3c09110048f5() {
        assertEval("{ a = colSums(array(1:24,c(2,3,4))); colMeans(a)}");
    }

    @Test
    public void TestSimpleBuiltins_testColMeansIgnore_1e146b3cdde30114bb9bdd12bbfd4a51() {
        assertEval("{colMeans(matrix(c(NaN,4+5i,2+0i,5+10i),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testColSums_14e640ab8bfe09b1978ec5e7af8e398a() {
        assertEval("{ a = colSums(matrix(1:12,3,4)); dim(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testColSums_ec2ec8152ef861eccf1eac7113f091ae() {
        assertEval("{ a = colSums(matrix(1:12,3,4)); length(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testColSums_508a072dbdad283f34eec61f652bfcc1() {
        assertEval("{ colSums(matrix(1:12,3,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColSums_de0f9a9ff80104c9d0ef40a135515034() {
        assertEval("{ a = colSums(array(1:24,c(2,3,4))); d = dim(a); c(d[1],d[2]) }");
    }

    @Test
    public void TestSimpleBuiltins_testColSums_a30963b6dca5e14240a90e527026ee60() {
        assertEval("{ a = colSums(array(1:24,c(2,3,4))); length(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testColSums_582b93151f22d1875bb3d55b96a98b49() {
        assertEval("{ a = colSums(array(1:24,c(2,3,4))); c(a[1,1],a[2,2],a[3,3],a[3,4]) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStat_95ac91f94526d949beeb5afe58aea573() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; colSums(na.rm = FALSE, x = m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_8ca9d6c7f776a8e3441d264e1da328a6() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; colMeans(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_42f4dcf92af03ea106b9ee137d80a60b() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; rowMeans(x = m, na.rm = TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_f6e099a48acc0dc03f8df25fddeaa2ac() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; rowSums(x = m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_5a6a0c0306ea58dc330442a0ee35ac57() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; colMeans(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_9589a0af44218e0e9ffcf6a4ddb95ee3() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; rowMeans(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_27fd0c0df27edacc427f026c6f82c11e() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; colSums(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_7a7b23e72604196aca2933d8326855f8() {
        assertEval("{ m <- matrix(c(1,2,3,4,5,6), nrow=2) ; rowSums(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_6e3237bc98188617dc175a91480d9f8a() {
        assertEval("{ m <- matrix(c(NA,2,3,4,NA,6), nrow=2) ; rowSums(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_97ed75fc969a4330d9764e77572c5057() {
        assertEval("{ m <- matrix(c(NA,2,3,4,NA,6), nrow=2) ; rowSums(m, na.rm = TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_cf3ce4597e64537f5ed0c8e1c5bc2649() {
        assertEval("{ m <- matrix(c(NA,2,3,4,NA,6), nrow=2) ; rowMeans(m, na.rm = TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_9f1ea14f9baa5e49245d4f90538c3b1d() {
        assertEval("{ m <- matrix(c(NA,2,3,4,NA,6), nrow=2) ; colSums(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_cd2c57bffaff581a9e8b2107b3148b58() {
        assertEval("{ m <- matrix(c(NA,2,3,4,NA,6), nrow=2) ; colSums(na.rm = TRUE, m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_2b787e31b5232423c06c52f73e5df1c6() {
        assertEval("{ m <- matrix(c(NA,2,3,4,NA,6), nrow=2) ; colMeans(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_2f427a36497e0dc01a2611f5aa23ae7b() {
        assertEval("{ m <- matrix(c(NA,2,3,4,NA,6), nrow=2) ; colMeans(m, na.rm = TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_245eed182ce6e800317cc04ea2db8076() {
        assertEval("{ colMeans(matrix(as.complex(1:6), nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_c9f4a9f49a298a830f36751055417164() {
        assertEval("{ colMeans(matrix((1:6)*(1+1i), nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_e27a7ec7efc72290832ff500ab7fdbbd() {
        assertEval("{ rowSums(matrix(as.complex(1:6), nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_0222b72afb3af3984c867d68ee9c340f() {
        assertEval("{ rowSums(matrix((1:6)*(1+1i), nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_8214d8fc710c76862499f1c9b1a31121() {
        assertEval("{ rowMeans(matrix(as.complex(1:6), nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_15d9ab20e0f0df878fa345ad14ce4245() {
        assertEval("{ rowMeans(matrix((1:6)*(1+1i), nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_cfbfed37d84d4a557a3944e4001685a4() {
        assertEval("{ colSums(matrix(as.complex(1:6), nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_b62078f5eeef7282e5eff2a59a8d8cd8() {
        assertEval("{ colSums(matrix((1:6)*(1+1i), nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testColumnsRowsStatIgnore_ef0e18bdd086f0183fcc8fae77cc4d1a() {
        assertEval("{ o <- outer(1:3, 1:4, \"<\") ; colSums(o) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_4679dac350852eb34d83569a96012089() {
        assertEval("{ c(\"1.2\",\"3.4\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_c6f7dc76ba5fa1f637eecb11723c13a0() {
        assertEval("{ c(\"a\",\"b\",\"c\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_e06f9273374c0577eab20a6cbd4d5c4f() {
        assertEval("{ c(\"1\",\"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_6998254e94d79011615ad531ce0b348b() {
        assertEval("{ c(\"1.00\",\"2.00\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_1d6f227b61dac56df87f3b175086871e() {
        assertEval("{ c(\"1.00\",\"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_15dce62c5e8802c5ede59e518fc80c9b() {
        assertEval("{ c(1.0,1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_b9a129e37f54ab1e02b949c464018edc() {
        assertEval("{ c(1L,1.0) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_70904c2def982ddc01f28731f498ac6c() {
        assertEval("{ c( 1:3 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_4d6030bb18d60319e30fc9978f33d995() {
        assertEval("{ c( 1L:3L ) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_8f1b49d9999a5674cfa43db33241eb62() {
        assertEval("{ c( 100, 1:3, 200 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_44bf27c9efd32e4371deb4cf7486141a() {
        assertEval("{ c( 1:3, 7:9 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_900b65685fca6e3f75d94f967ac796a8() {
        assertEval("{ c( 1:3, 5, 7:9 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_2dac339219be7e5c27e52ab7afd2183a() {
        assertEval("{ c() }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_888cd37fcf41f94ec330c4c6e1437434() {
        assertEval("{ c(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_67e4f7b760f46f95f8cf42736d903a74() {
        assertEval("{ c(NULL,NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_407a249940a31d9ee13bb6551e031542() {
        assertEval("{ c(NULL,1,2,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_510bb72a4eb6a3b8ff4b6dccd90c1b9f() {
        assertEval("{ c(1+1i,2-3i,4+5i) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_cf50589d64f2913d49d7d13e24b4d83e() {
        assertEval("{ c(\"hello\", \"hi\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_26f9b7984b2dcdb98f08ecb71761478c() {
        assertEval("{ c(1+1i, as.raw(10)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_646f38533f47d8afa39894bb7343cdb0() {
        assertEval("{ c(as.raw(10), as.raw(20)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_8b8344b2898a55c8f0c4319ba2af7e6b() {
        assertEval("{ c(as.raw(10),  \"test\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_feb230bd981f6ac6443c3beef08747ff() {
        assertEval("{ f <- function(x,y) { c(x,y) } ; f(1,1) ; f(1, TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_3269dfb91b40928bc635cf8a9a1fdae8() {
        assertEval("{ f <- function(x,y) { c(x,y) } ; f(1,1) ; f(1, TRUE) ; f(NULL, NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_2bf3d334d5c1ccb0c45b0e70174bd811() {
        assertEval("{ x<-1:2; names(x)<-7:8; y<-3:4; names(y)<-9:10; z<-c(x, y); z }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_50be7932312ba8ddd9296f052a94a748() {
        assertEval("{ x<-1:2; names(x)<-7:8; y<-3:4; z<-c(x, y); z }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_42b96645e8ed42b9ae1143b9b2025dbb() {
        assertEval("{ x<-1:2; names(x)<-7:8;  z<-c(x, integer()); z }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_0d38307277cd787b400b4ba1d3b2b519() {
        assertEval("{ x<-1:2; names(x)<-7:8; z<-c(x, 3L); z }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_480d88aacc9bed2257b6f79d07e14e97() {
        assertEval("{ x<-1:2; names(x)<-7:8; z<-c(3L, x); z }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_24f0da921aa223cdbb332eb22fdf4bb5() {
        assertEval("{ x<-1:2; names(x)<-7:8; y<-double(0);  z<-c(x, y); z }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_ed26f444a6d549bbcc624907d89d818d() {
        assertEval("{ x<-1:2; names(x)<-7:8; z<-c(x, 3); z }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_646d29144d695579b808223b4e41f947() {
        assertEval("{ x<-1:2; names(x)<-7:8; z<-c(x, 3); attributes(z) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_7f52aecc0a51a4da55f41ee55124511e() {
        assertEval("{ c(a=42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_4d602f065b01e6da5073e7d6c689f36f() {
        assertEval("{ c(a=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_ecb45b5a72f81ae6b0a3efc7cfe1001f() {
        assertEval("{ c(a=as.raw(7)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_7d7e90c63365e635ef78d240f718d9b4() {
        assertEval("{ c(a=\"foo\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_81baea171d91ebdf7b9960d920aed296() {
        assertEval("{ c(a=7i) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_0873ce25c656bf498704798b5df469af() {
        assertEval("{ c(a=1, b=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_50a1711b0000a973e927e0ca379adf98() {
        assertEval("{ c(a=FALSE, b=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_3f9bbc68eb85eacd4c941c1a5bb19450() {
        assertEval("{ c(a=as.raw(1), b=as.raw(2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_dd15c8c6fba4c0de9d163da57323871a() {
        assertEval("{ c(a=\"bar\", b=\"baz\") }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_68296cef278a5edee664382c23786bf5() {
        assertEval("{ c(a=1, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_8ede4ba2623d5cac17b9b6a2b140259f() {
        assertEval("{ c(1, b=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_2261873dd0aeaaabf6c80211f2f4f6c0() {
        assertEval("{ c(a=1i, b=2i) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_cce7ad9d0ef24299d2073abf9f03872d() {
        assertEval("{ c(a=7i, a=1:2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_f72aa25c6812d1be9dbf46d114ebcba0() {
        assertEval("{ c(a=1:2, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_8203d2c7f110ab1f9005d249baf6e32b() {
        assertEval("{ c(a=1:2, b=c(42)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_dd6aa51d9b53b506e93d13ec70ef6953() {
        assertEval("{ c(a=1:2, b=double()) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_1121e53af3f01bdef30c961ff1520873() {
        assertEval("{ c(a=c(z=1), 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_814a40f41418b22f481e2bc21038ec8b() {
        assertEval("{ x<-c(z=1); names(x)=c(\"\"); c(a=x, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_1d410834d640b4e428b91dd3a3c82436() {
        assertEval("{ x<-c(y=1, z=2); names(x)=c(\"\", \"\"); c(a=x, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_0693bdd1317eff1a1f98cbec2a3cf001() {
        assertEval("{ x<-c(y=1, z=2);  c(a=x, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_40c213a64ad08362b605276223140a6d() {
        assertEval("{ x<-c(y=1);  c(x, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_57208318c28a1a11feb2626a14c85bb0() {
        assertEval("{ x<-c(1);  c(z=x, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_d54bd6f700b00abf14005fc1f709cc8e() {
        assertEval("{ x<-c(y=1, 2);  c(a=x, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_9e952ef7a4db9df7944aa490c4223d4a() {
        assertEval("{ c(TRUE,1L,1.0,list(3,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_35615a7ebae2fab48bfd016636b142d0() {
        assertEval("{ c(TRUE,1L,1.0,list(3,list(4,5))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_991b4e290db12070daca4ed96a3ffc63() {
        assertEval("{ c(x=1,y=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_500795124539a97439309c50c3a36290() {
        assertEval("{ c(x=1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_d78532c80490f1bd045d0fbedd9b9c87() {
        assertEval("{ x <- 1:2 ; names(x) <- c(\"A\",NA) ; c(x,test=x) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_dea889dee9bbedd803fa8a3c9437c69c() {
        assertEval("{ c(a=1,b=2:3,list(x=FALSE))  }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_3a952f6809176f161ea61dd876989666() {
        assertEval("{ c(1,z=list(1,b=22,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_b4f1d4583eed5adc7042a3bfd6d30011() {
        assertEval("{ is.matrix(c(matrix(1:4,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_5d2df4b1093736dd2edb9e14f9e0f785() {
        assertEval("{ x<-expression(1); c(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombine_2fb7e4cf7b10d42c878d5673aab16e3d() {
        assertEval("{ x<-expression(1); c(x,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testCombineBroken_d365e1ffe5f8c886f6d1911c69b3af00() {
        assertEval("{ c(1i,0/0) }");
    }

    @Test
    public void TestSimpleBuiltins_testComplex_d6b94943d1cf2559663d1f79fc832a8c() {
        assertEval("{ complex(real=1,imaginary=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testComplex_2fc2976e242e2e94a493842481f533d1() {
        assertEval("{ complex(real=1,imag=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testComplex_08afe9365f9ccc2563e2efdda7b69a89() {
        assertEval("{ complex(3) }");
    }

    @Test
    public void TestSimpleBuiltins_testComplexGroupDispatch_5ead400d0cd56aa4d43d6828a1d318e7() {
        assertEval("{x<--7+2i;class(x)<-\"foo\";Complex.foo<-function(z){1;};Im(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testComplexIgnore_6c296b051839b1865e7b24f04e0f89d5() {
        assertEval("{ x <- 1:2 ; attr(x,\"my\") <- 2 ; Im(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testComplexIgnore_ebb6e003d79ccc9419c0bbc4c4601d12() {
        assertEval("{ x <- c(1+2i,3-4i) ; attr(x,\"my\") <- 2 ; Im(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testComplexIgnore_0a640363497df7e0fff841acd48b8679() {
        assertEval("{ x <- 1:2 ; attr(x,\"my\") <- 2 ; Re(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testComplexIgnore_cd6019c801f0cbbb3b00ecbde91958c5() {
        assertEval("{ x <- c(1+2i,3-4i) ; attr(x,\"my\") <- 2 ; Re(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testCor_2e29cd851a9773fb62e305857a008c70() {
        assertEval("{ cor(c(1,2,3),c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCor_20cf0f6f873bbbda686866856b6118f9() {
        assertEval("{ as.integer(cor(c(1,2,3),c(1,2,5))*10000000) }");
    }

    @Test
    public void TestSimpleBuiltins_testCor_e6e285c7bf8e5a77aaa66ad1ee28352f() {
        assertEval("{ cor(cbind(c(3,2,1), c(1,2,3))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCor_eb299d07a9ea2621996c82b52b16f5e4() {
        assertEval("{ cor(cbind(c(1, 1, 1), c(1, 1, 1))) }");
    }

    @Test
    public void TestSimpleBuiltins_testCor_564c5ee2d2eea4a4b168dca5e6fa9e4f() {
        assertEval("{ cor(cbind(c(1:9,0/0), 101:110)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCorIgnore_13b78c66b0e72ebed23e724262a27546() {
        assertEval("{ round( cor(cbind(c(10,5,4,1), c(2,5,10,5))), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testCov_4b96d1c7c503defdec6ebab5b659625c() {
        assertEval("{ cov(c(1,2,3),c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCov_6367ba5338f445d4661af52ffdf77ae9() {
        assertEval("{ cov(c(1,2,3),c(1,2,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCov_eac366afae2ec8d25d978cf83e1549c9() {
        assertEval("{ cov(c(1,2,3),c(1,2,5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCrossprod_7f9549017d66ad3dd1583536fa7183d7() {
        assertEval("{ x <- 1:6 ; crossprod(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testCrossprod_1c6fdfbd19321f1f57a6f9260789424a() {
        assertEval("{ x <- 1:2 ; crossprod(t(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCrossprod_0ceb7477eceaa0684310f07ef6b6865c() {
        assertEval("{ crossprod(1:3, matrix(1:6, ncol=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCrossprod_57b1bcccff6a1f41d6a0c82a658a3c52() {
        assertEval("{ crossprod(t(1:2), 5) }");
    }

    @Test
    public void TestSimpleBuiltins_testCrossprod_2770157f2b02bfda92abe04278a245f8() {
        assertEval("{ crossprod(c(1,NA,2), matrix(1:6, ncol=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMax_f24679ed89ce0643bda3e9b915870973() {
        assertEval("{ cummax(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMax_519f991c3ba08aaf78ae189e36583e8c() {
        assertEval("{ cummax(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMax_3502e1000ebf8f134d70fe55079ea810() {
        assertEval("{ cummax(c(2000000000L, NA, 2000000000L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMax_a4f7c6fd3c3feea652005536d9813eeb() {
        assertEval("{ cummax(1:10) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMax_31f06e54d563cc95fdd8582cdc3b8337() {
        assertEval("{ cummax(c(TRUE,FALSE,TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMax_b555f028e659b112ae3b7cffcd3ed765() {
        assertEval("{ cummax(c(TRUE,FALSE,NA,TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMax_7b46aa2028adeb41fe4a1c6cfd7ac6f3() {
        assertEval("{ cummax(as.logical(-2:2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMaxIgnore_2f6f91ad8c5d7ca01467c196f33b080e() {
        assertEval("{ cummax(c(1+1i,2-3i,4+5i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMaxIgnore_80eddc53556e008ace29ab00e165f768() {
        assertEval("{ cummax(c(1+1i, NA, 2+3i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMin_f1d53f930c40c18fe500d8cbc4f78b90() {
        assertEval("{ cummin(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMin_8f65ef3b05e7bad7b317f7daeb0ec135() {
        assertEval("{ cummin(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMin_8c4fe0580a652be78ef2df3d386b3b70() {
        assertEval("{ cummin(1:10) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMin_de1f7703cfaec822eb7e695cd9706066() {
        assertEval("{ cummin(c(2000000000L, NA, 2000000000L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMin_b0d6b6beef9621696bddc26d20730249() {
        assertEval("{ cummin(c(TRUE,FALSE,TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMin_74183dc97edc4995dc889c1de366861a() {
        assertEval("{ cummin(c(TRUE,FALSE,NA,TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMin_a3c3fb503a43c4c8e5717da0d4923dbe() {
        assertEval("{ cummin(as.logical(-2:2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMinIgnore_b5b948bfcb858f80485301067b4a3cb5() {
        assertEval("{ cummin(c(1+1i,2-3i,4+5i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMinIgnore_9fe29fb5f8789df82d6740ac7b77830f() {
        assertEval("{ cummin(c(1+1i, NA, 2+3i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_6d835b5903b7c57c797726b1610f5359() {
        assertEval("{ cumsum(1:10) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_a28cda3a768d6f05f5d2b6c93446cf98() {
        assertEval("{ cumsum(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_4f9bfd33e4d3808722f87b4a09d674ea() {
        assertEval("{ cumsum(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_b9a240e4d368e0590ef25b3f2c9ca21d() {
        assertEval("{ cumsum(c(2000000000L, NA, 2000000000L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_9d140cee42a87f06883cfd5d1df13b45() {
        assertEval("{ cumsum(c(TRUE,FALSE,TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_8e8190ab2fbc12acd11d34299ca041fb() {
        assertEval("{ cumsum(c(TRUE,FALSE,NA,TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_f255d43a5e7f32ec7fca1e819e91c69c() {
        assertEval("{ cumsum(c(1+1i,2-3i,4+5i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_e3c4ed48fe0ed9ddd5e833febf410594() {
        assertEval("{ cumsum(c(1+1i, NA, 2+3i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSum_840a15e453fc2128a838a946e8941be5() {
        assertEval("{ cumsum(as.logical(-2:2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_29fdcc5a5db08a57fa538ba6ea36df62() {
        assertEval("{ cumsum(c(1,2,3,0/0,5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_c4e74421afc1541ec09c1258dd016111() {
        assertEval("{ cumsum(c(1,0/0,5+1i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_c798b06052d4528aca37769d38a0f9af() {
        assertEval("{ cumsum(as.raw(1:6)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_24579242149f490e91e8b1b7fc76f4e9() {
        assertEval("{ cumsum(rep(1e308, 3) ) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_9e68f6a2cfecca2814fd572d9d3dc519() {
        assertEval("{ cumsum(c(1e308, 1e308, NA, 1, 2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_e1af5bf2238f58b9e00ba5f815e46a59() {
        assertEval("{ cumsum(c(2000000000L, 2000000000L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_e41ac0de20a9dba0b5c5c897e46d2ddb() {
        assertEval("{ cumsum(c(-2147483647L, -1L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_598bb2dd748d2cd878a7312e7a0935c9() {
        assertEval("{ cumsum((1:6)*(1+1i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testDataFrameTypeCheck_4ad1a2b80cb3587837ab3d0eccd188e8() {
        assertEval("{ is.data.frame(as.data.frame(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testDateIgnore_dc2d15503c397a52d19f8f822448e08d() {
        assertEval("{date()}");
    }

    @Test
    public void TestSimpleBuiltins_testDefaultArgs_da411f3d8d8a722a471e77966e8e1135() {
        assertEval("{ length(array(dim=c(1,0,2,3))) }");
    }

    @Test
    public void TestSimpleBuiltins_testDefaultArgs_3cc1186607b6ef41bdbc0c66fc278b3a() {
        assertEval("{ dim(array(dim=c(2.1,2.9,3.1,4.7))) }");
    }

    @Test
    public void TestSimpleBuiltins_testDefaultArgs_62c7f6f4b6bf06a81284d05487afc849() {
        assertEvalError("{ array(dim=c(-2,2)); }");
    }

    @Test
    public void TestSimpleBuiltins_testDefaultArgs_6298ff4d222c7787e6c111563ac6a26a() {
        assertEvalError("{ array(dim=c(-2,-2)); }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_8ec95e38ecb3a999ffba3e7abc6ffb72() {
        assertEval("{ delayedAssign(\"x\", y); y <- 10; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_e828fbbef10258dab93aa4d7350c38f9() {
        assertEval("{ delayedAssign(\"x\", a+b); a <- 1 ; b <- 3 ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_cedc0d1753c9e0fc71d5868f5654e3ef() {
        assertEval("{ f <- function() { delayedAssign(\"x\", y); y <- 10; x  } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_018af82f24bd19556a876af608fef1e6() {
        assertEval("{ delayedAssign(\"x\", y); delayedAssign(\"y\", x) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_83064c7d347757ad66074441e8cfc90e() {
        assertEval("{ f <- function() { delayedAssign(\"x\", y); delayedAssign(\"y\", x) ; x } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_2650fc25df477fca9f65b4ae42030ddc() {
        assertEval("{ f <- function() { delayedAssign(\"x\", 3); delayedAssign(\"x\", 2); x } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_b0a8cc01cf8e5fc94f5e4084097107ad() {
        assertEval("{ f <- function(...) { delayedAssign(\"x\", ..1) ; y <<- x } ; f(10) ; y }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_87d161302160393963ba6b1003b818c8() {
        assertEval("{ f <- function() print (\"outer\");  g <- function() { delayedAssign(\"f\", 1); f() }; g()}");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_79fb1d399e2b39a496dac5a9749fb873() {
        assertEval("{ h <- new.env(parent=emptyenv()) ; delayedAssign(\"x\", y, h, h) ; assign(\"y\", 2, h) ; get(\"x\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_af327b1b6a16f6b664839a659452d6ff() {
        assertEval("{ h <- new.env(parent=emptyenv()) ; assign(\"x\", 1, h) ; delayedAssign(\"x\", y, h, h) ; assign(\"y\", 2, h) ; get(\"x\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_3286f74c945a289f7ebf4456a04e57c6() {
        assertEval("{ f <- function() { delayedAssign(\"x\",y); delayedAssign(\"y\",x); g(x, y)}; g <- function(x, y) { x + y }; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_381ebd5284bd59377d4fa449345a575b() {
        assertEval("{ f <- function() { delayedAssign(\"x\",y); delayedAssign(\"y\",x); list(x, y)}; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_ffe9395f2f843501d7365254e3b4524e() {
        assertEval("{ f <- function() { delayedAssign(\"x\",y); delayedAssign(\"y\",x); paste(x, y)}; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_646cd20eed11f6c2828c215baa6dbe58() {
        assertEval("{ f <- function() { delayedAssign(\"x\",y); delayedAssign(\"y\",x); print(x, y)}; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssign_6cfba29e9e2c88780f55688485ac3e50() {
        assertEval("{ f <- function() { p <- 0; for (i in 1:10) { if (i %% 2 == 0) { delayedAssign(\"a\", p + 1); } else { a <- p + 1; }; p <- a; }; p }; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssignIgnore_8c59e6c2915b2b15a962ae541292c0db() {
        assertEval("{ f <- function() { x <- 4 ; delayedAssign(\"x\", y); y <- 10; x  } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_ef725f41c79ba8d3467e98c79f71f4c3() {
        assertEval("{ deparse(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_90d426a1089750d7a313ba76569ba54a() {
        assertEval("{ deparse(c(T, F)) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_aaac85d498c379bdd8853dec7643a989() {
        assertEval("{ k <- 2 ; deparse(k) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_a489b13c0f468ae7e6f3587cf5c6abd6() {
        assertEval("{ deparse(round) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_d28b757104124865c681059f155437d9() {
        assertEval("{ x<-expression(1); deparse(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_14eea62c8be1bd99f73f7d2fd2273d2e() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; deparse(f(c(1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_411a9258a18af4a8ef9f57454d6ce99b() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; deparse(f(c(x=1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_1dc435ef27d6d10df26ec2271cb67316() {
        assertEval("{ f <- function(x) { deparse(substitute(x)) } ; f(a + b * (c - d)) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_1eedd480281ac304fc46f96e9b01e65a() {
        assertEval("{ f<-function(x) { deparse(x) }; l<-list(7); f(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_7d465fa7df237db4dfe3d217a554d421() {
        assertEval("{ f<-function(x) { deparse(x) }; l<-list(7, 42); f(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_32131066b372b81cfdb4c8c8917216d4() {
        assertEval("{ f<-function(x) { deparse(x) }; l<-list(7, list(42)); f(l) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparse_fc48a12f463aff2ccf839051c3218f8a() {
        assertEval("{ deparse(expression(a+b, c+d)) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparseIgnore_9e5a5fc2f13f5ca564f74ada29302b9d() {
        assertEval("{ f <- function() 23 ; deparse(f) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparseIgnore_ae0471e19b56e163c3b0f1d27722a535() {
        assertEval("{ deparse(nrow) }");
    }

    @Test
    public void TestSimpleBuiltins_testDeparseIgnore_dcfc3947162214c236e4caaf5dff89d7() {
        assertEval("{ e <- new.env(); assign(\"a\", 1, e); assign(\"b\", 2, e); le <- as.list(e); deparse(le)}");
    }

    @Test
    public void TestSimpleBuiltins_testDet_0119e3eeb33ab4a029ba7826ddc06536() {
        assertEval("{ det(matrix(c(1,2,4,5),nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testDet_5e1459250de6d93f03e5e5eaaccd1afc() {
        assertEval("{ det(matrix(c(1,-3,4,-5),nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testDet_9c562345cefeea163f138973f9d0f2a1() {
        assertEval("{ det(matrix(c(1,0,4,NA),nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiagnostics_f20f62c82be750e78cc720a71705d1f4() {
        assertEvalError("{ f <- function() { stop(\"hello\",\"world\") } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testDiagonal_6f217e9d92c383bc03ed5ed5cf2dcde8() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; diag(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiagonal_fed2e28fa5024509b954be36e263feca() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; diag(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiagonal_c5061263e37b75e26943e61e7efe44dd() {
        assertEval("{ m <- matrix(1:9, nrow=3) ; diag(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiagonal_9cb3220fb3faaad158f7abb0ae4e7182() {
        assertEval("{ diag(1, 7) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiagonal_0498e7222eaf7f5ed45106437bf388b8() {
        assertEval("{ diag(1, 7, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiagonal_a9bf06d5c912ac94c5cccba05d2f40ce() {
        assertEval("{ diag(1, 2, 7) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiff_f0ac3bed06cb4b5646da1f73e78291f8() {
        assertEval("{ diff(1:10, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiff_7b31177c1f34b8a05962fdbb5b777fde() {
        assertEval("{ diff(1:10, 2, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiff_3715f48e2640f2039090554c74f88ddc() {
        assertEval("{ x <- cumsum(cumsum(1:10)) ; diff(x, lag = 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testDiff_e72d1cda19e760416d19b9192a7a2321() {
        assertEval("{ x <- cumsum(cumsum(1:10)) ; diff(x, differences = 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_0c23ecb60a78eddaab4dced71193f975() {
        assertEval("{ dim(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_2247aafe5a53d13807d99953aa2e8775() {
        assertEval("{ dim(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_a496d196f4be0a6b7f284e7431d43aa3() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; dim(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_4aaa4f8353c6353b27748bad1e08f52c() {
        assertEval("{ nrow(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_76592ac69f51d70b7e6ad799518ac1ac() {
        assertEval("{ nrow(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_356aaad7eae5dcb2221bf5a5c23af694() {
        assertEval("{ NROW(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_87fea101f7b501c07c8067bab685c4f9() {
        assertEval("{ NROW(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_c918fa702b932ee7113b693471e5979b() {
        assertEval("{ ncol(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_fddbb4f43160793483577ef23b57631f() {
        assertEval("{ ncol(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_11a0cafbcadded1a1ca2d5acad69309f() {
        assertEval("{ NCOL(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_205ea4a4a5c3d1a4ffee3c0b76478d4e() {
        assertEval("{ NCOL(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_6bd405e828cf565728b9c5740e42aad2() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; nrow(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_2c126276c7789a1db820e62a53ef26e8() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; ncol(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_35f4a03ea02d8d59ff26883dc78874d1() {
        assertEval("{ z <- 1 ; dim(z) <- c(1,1) ; dim(z) <- NULL ; z }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_00ec03bd9099b945efb83d5b6cbedbf9() {
        assertEval("{ x <- 1:4 ; f <- function() { x <- 1:4 ; dim(x) <<- c(2,2) } ; f() ; dim(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_b402fcc65635b6378b385f8ef0355475() {
        assertEval("{ x<-1:12; dim(x)<-c(12); x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_823a9607b577b042cb434a1431fbd9dd() {
        assertEval("{ x<-1:12; dim(x)<-c(as.raw(12)); x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_6858c29517ef2e49d616e86364b6b1f9() {
        assertEval("{ x<-1:12; dim(x)<-c(\"12\"); x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_a1d80c23ad741e9b5f9d99b3ff58910c() {
        assertEval("{ x<-1:1; dim(x)<-c(TRUE); x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_e773d32308c488c1c74a3c8b8d190c38() {
        assertEval("{ x<-1:12; dim(x)<-c(3, 4); attr(x, \"dim\") }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_13776c8dbe738895cbc639890f5d29a5() {
        assertEval("{ x<-1:12; attr(x, \"dim\")<-c(3, 4); dim(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_aa9f516580fb8ea481089ee726918a90() {
        assertEval("{ x<-1:4; names(x)<-c(21:24); attr(x, \"foo\")<-\"foo\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_8d7416728846ceb5d0838a27cafcabbd() {
        assertEval("{ x<-list(1,2,3); names(x)<-c(21:23); attr(x, \"foo\")<-\"foo\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_8a0d7f4ac80c83acbb4aed468e5c2685() {
        assertEval("{ b <- c(a=1+2i,b=3+4i) ; attr(b,\"my\") <- 211 ; dim(b) <- c(2,1) ; names(b) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_fdbe4986bac1158671c6f3aacc8d5272() {
        assertEval("{ x<-1:4; dim(x)<-c(4); y<-101:104; dim(y)<-c(4); x > y }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_1e40426982ed3cd602392fea84959d07() {
        assertEval("{ x<-1:4; y<-101:104; dim(y)<-c(4); x > y }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_37cc6487daa17db41d5379a95c7a0931() {
        assertEval("{ x<-1:4; dim(x)<-c(4); y<-101:104; x > y }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_71d211060a30670c2bd2533d384a5b66() {
        assertEval("{ x<-c(1); dim(x)<-1; names(x)<-c(\"b\"); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_b4450bc51a534b462fb59d9b4be773f1() {
        assertEval("{ x<-c(1); dim(x)<-1; attr(x, \"dimnames\")<-list(\"b\"); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_783e8a89bd791ef131594b47abb113b5() {
        assertEval("{ x<-c(1); dim(x)<-1; attr(x, \"dimnames\")<-list(a=\"b\"); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_6593313ac00fa05af5824a01ca99a11a() {
        assertEval("{ x<-c(42); names(x)<-\"a\"; attr(x, \"dim\")<-1; names(x)<-\"z\"; dim(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_f8f916213524b6dd75b22b6ec0cd713e() {
        assertEval("{ x<-c(42); names(x)<-\"a\"; attr(x, \"dim\")<-1; names(x)<-\"z\"; attr(x, \"foo\")<-\"foo\"; attr(x, \"dim\")<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_43dce999c62da429818bb97ea3ef1042() {
        assertEval("{ x<-c(42); names(x)<-\"a\"; attr(x, \"dim\")<-1; names(x)<-\"z\"; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_a2c91fc7f072d37823a7a9d36c366ee1() {
        assertEval("{ x<-c(42); names(x)<-\"a\"; attr(x, \"dim\")<-1; names(x)<-\"z\"; names(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_715d2210067ec1dad08eaaf5c76bfa9d() {
        assertEval("{ x<-c(42); names(x)<-\"a\"; attr(x, \"dim\")<-1; names(x)<-\"z\"; names(x)<-NULL; attr(x, \"dimnames\")<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_8f2737bd9fb2a97748df329f43ee564b() {
        assertEval("{ x<-c(1); y<-c(1); dim(x)<-1; dim(y)<-1; attr(x, \"dimnames\")<-(attr(y, \"dimnames\")<-list(\"b\")); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_60ce105fa17b875756e65d14e8dff5c3() {
        assertEval("{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(NULL); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_a030ab7282df112d4d7c259076dd0aa6() {
        assertEval("{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c(\"a\", \"b\"), \"c\", c(\"d\", \"e\")); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_87dd54d946d76d249f6f1254077b043c() {
        assertEval("{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c(\"a\", \"b\"), 42, c(\"d\", \"e\")); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_fd5ee9595105a81c94947c2282870d1d() {
        assertEval("{ x<-42; y<-(dim(x)<-1); }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_8a4717c07b4ba285a522832a1e003583() {
        assertEval("{ x<-42; y<-(dim(x)<-1); y }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_2da0a517db75943da30c4605535fbb2d() {
        assertEval("{ x<-1:4; y<-c(2, 2); dim(x)<-y; y[1]=4; dim(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_9052cdec9a7a273338567d2da1661f63() {
        assertEval("{ x<-1; dim(x)=1; attr(x, \"foo\")<-\"foo\"; dim(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_854ca3d1bf7f4671087c9d572dbc362b() {
        assertEval("{ x<-1; dim(x)=1; attr(x, \"names\")<-\"a\"; dim(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_cd3f901cd902d2b36347911410ff1c10() {
        assertEval("{ x<-1; dim(x)=1; names(x)<-\"a\"; dim(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_ee8b09cfabdf83f3172abf96b044cf56() {
        assertEval("{ x<-1:2; dim(x)=c(1,2); names(x)<-c(\"a\", \"b\"); attr(x, \"foo\")<-\"foo\"; dim(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_441810163015f31111b53993eeb1438d() {
        assertEval("{ x<-1:4; names(x)<-c(21:24); attr(x, \"dim\")<-c(4); attr(x, \"foo\")<-\"foo\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_199f5567ac0eef76710b54785dc65cc0() {
        assertEval("{ x<-list(1,2,3); names(x)<-c(21:23); attr(x, \"dim\")<-c(3); attr(x, \"foo\")<-\"foo\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_23b7e792972c66f8f798088f2e2db517() {
        assertEval("{ x<-1; dimnames(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_25559c72545218e5904f029d31043341() {
        assertEval("{ dimnames(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_94c1f6362cb75ccb566992ddbb86b57f() {
        assertEval("{ dimnames(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_fa944f6fbbd53435e7ee6de00c6e156d() {
        assertEval("{ x<-1; dim(x)<-1; dimnames(x)<-list() }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_2979e5a89355ac34e701f6b1d6910468() {
        assertEval("{ x<-1; dim(x)<-1; dimnames(x)<-list(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_2dc914e1fb3582f18a062c4d58f30902() {
        assertEval("{ x<-1; dim(x)<-1; dimnames(x)<-list(\"a\"); dimnames(x); dimnames(x)<-list(); dimnames(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_e3fb5c3d5b9cce5f04b1cd8a5ce350e3() {
        assertEval("{ x <- 1:2 ; dim(x) <- c(1,2) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_67530941177a750a2f5c26ba31f07c5e() {
        assertEval("{ x <- 1:2 ; attr(x, \"dim\") <- c(2,1) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_9330de6c625acab5a7ea6c7f251cd834() {
        assertEval("{ n <- 17 ; fac <- factor(rep(1:3, length = n), levels = 1:5) ; y<-tapply(1:n, fac, sum); attributes(y) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_999f000321095e06ce4af15a0c503839() {
        assertEvalError("{ x <- 1:2 ; dim(x) <- c(1, 3) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_ee6c362ec748a941bc4907be29b94a57() {
        assertEvalError("{ x <- 1:2 ; dim(x) <- c(1, NA) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_7df10933f49ff5657ce8bb2409bf1b4f() {
        assertEvalError("{ x <- 1:2 ; dim(x) <- c(1, -1) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_05b0bd2fb44532eb640aff25aa284124() {
        assertEvalError("{ x <- 1:2 ; dim(x) <- integer() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_bb1b63d58ea745c7867a83c91240dafc() {
        assertEvalError("{ x<-1:4; dim(x)<-c(4); y<-101:104; dim(y)<-c(2,2); x > y }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_998e865c021b666c232e101ec968b9b2() {
        assertEvalError("{ x<-1:4; dim(x)<-c(4); y<-101:108; dim(y)<-c(8); x > y }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_6d0ffbecf470d274edf5b4f670120299() {
        assertEvalError("{ x<-1:4; attr(x, \"dimnames\") <- list(101, 102, 103, 104) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_c9bedc4b2a14651bb6845c1a86eab49b() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c(\"a\")); x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_77c69bd2baa9a218de392858593f66c3() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c(\"a\", \"b\"), NULL, c(\"d\")); x }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_3a25606029dde41e4de9340e8fbcd6d4() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c(\"a\", \"b\"), 42, c(\"d\", \"e\", \"f\")); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_3861861bd8a1425a307ed3da5dc375c4() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x) <- list(c(\"a\", \"b\"), \"c\", c(\"d\", \"e\"), 7); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_f8dd040ae16a25bb3f4113a243fb3869() {
        assertEvalError("{ x<-1; dim(x)<-1; dimnames(x) <- 1; dimnames(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_f00b649a080774da3e77fe66eb366f25() {
        assertEvalError("{ x<-1; dim(x)<-1; attr(x, \"dimnames\") <- 1 }");
    }

    @Test
    public void TestSimpleBuiltins_testDimensions_b5baee88565f3b36d5026bad6cc5e60a() {
        assertEvalWarning("{ x<-1:12; dim(x)<-c(12+10i); x }");
    }

    @Test
    public void TestSimpleBuiltins_testDoCall_db75f1deabd06cadfcbd91543ad7b5a9() {
        assertEval("{ x<-list(c(1,2)); do.call(\"as.matrix\", x) }");
    }

    @Test
    public void TestSimpleBuiltins_testDrop_9c4466ae3aad8bb14766359234733c90() {
        assertEval("{ x <- array(1:12, dim = c(1,3,1,1,2,1,2)); drop(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_5f76ba83937083ccca6e7d8fca5c8d43() {
        assertEval("{ r <- eigen(matrix(rep(1,4), nrow=2), only.values=FALSE) ; round( r$vectors, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_3a0973319dd9e19b5d218165db6c191e() {
        assertEval("{ r <- eigen(matrix(rep(1,4), nrow=2), only.values=FALSE) ; round( r$values, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_115e6b72c47df2b5d5700b273b70c533() {
        assertEval("{ eigen(10, only.values=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_0449327e2827cfc14c352f69bb2d6863() {
        assertEval("{ r <- eigen(matrix(c(1,2,2,3), nrow=2), only.values=FALSE); round( r$vectors, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_1807792fd12f35acb23589be46cf6b57() {
        assertEval("{ r <- eigen(matrix(c(1,2,2,3), nrow=2), only.values=FALSE); round( r$values, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_a7d1b10ab33353c276caf5c71013af50() {
        assertEval("{ r <- eigen(matrix(c(1,2,3,4), nrow=2), only.values=FALSE); round( r$vectors, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_83d97801023043df2de8fa2831ea80e5() {
        assertEval("{ r <- eigen(matrix(c(1,2,3,4), nrow=2), only.values=FALSE); round( r$values, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_e1ef8addd5b3fea26321432b42bf54e5() {
        assertEval("{ r <- eigen(matrix(c(3,-2,4,-1), nrow=2), only.values=FALSE); round( r$vectors, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_19ec900b70611f935fb95e980df000f3() {
        assertEval("{ r <- eigen(matrix(c(3,-2,4,-1), nrow=2), only.values=FALSE); round( r$values, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_64dc5c2696628cdb720e0c7a46206103() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = NA);}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_21dfcd8457ae5dcd5798242c74841401() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = NA, justify = \"centre\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_9c65634c650e621ee0a00d698b0ddea5() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = NA, justify = \"right\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_4d2988ca0a72e163a4d2c054d8603e43() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = NA, quote = \"'\", justify = \"right\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_5865a32f07c374e7976177f8e3d89d40() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 0, quote = \"'\", justify = \"right\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_49dfd2cf7a8ffdfee6919c919f9bcbd0() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 0, quote = \"\", justify = \"centre\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_d9ded73e5a611586563006cba361d28a() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 3, quote = \"'\", justify = \"centre\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_81bc360eb34a3d5c728e5ad533806083() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = NA, quote = \"'\", na.encode=FALSE, justify = \"right\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_bd3588ff059eb4a10f9c7a7ae2ec1c85() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 0, quote = \"'\", na.encode=FALSE, justify = \"right\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_537a4441936a3fceb35b46dba8688a30() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 3, quote = \"'\", na.encode=FALSE, justify = \"centre\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_30579aab64b22f9bbd65be465862c15a() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 2, quote = \"'\", na.encode=FALSE, justify = \"centre\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_f0418655aef5c3137bf53e43e5e9d63d() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 7, quote = \"\", na.encode=FALSE, justify = \"centre\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_f98aac7b2b1d6c6d04acad105ab9e158() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 7, quote = \"\", na.encode=TRUE, justify = \"centre\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEncodeString_9e4b5ef37cbff10f1a168024e2094b29() {
        assertEval("{x <- c(\"a\", \"ab\", \"abcde\", NA); encodeString(x, width = 3, quote = \"\", na.encode=TRUE, justify = \"centre\");}");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_1b8319a6952fc86b59ba9a33e6463213() {
        assertEval("{ h <- new.env() ; assign(\"abc\", \"yes\", h) ; exists(c(\"abc\", \"def\"), h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_400ebe1d63776a8123657672755b7146() {
        assertEval("{ h <- new.env() ; assign(\"abc\", \"yes\", h) ; exists(c(\"def\", \"abc\"), h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_7deda451aa6989868e186dfcaf61f6d4() {
        assertEval("{ h <- new.env() ; assign(c(\"a\"), 1, h) ; ls(h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_e122e6c7bd35b1065ede73e6288fe1cb() {
        assertEval("{ h <- new.env() ; assign(c(\"a\"), 1L, h) ; ls(h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_951aba917a8cc5eefa372ff08169c9a9() {
        assertEval("{ h <- new.env(parent=emptyenv()) ; assign(\"x\", 1, h) ; assign(\"y\", 2, h) ; ls(h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_b58f915b8ffcad4f39b069e781f79c8b() {
        assertEval("{ hh <- new.env() ; assign(\"z\", 3, hh) ; h <- new.env(parent=hh) ; assign(\"y\", 2, h) ; get(\"z\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_dc31d1344caca67f4916babcf9dc55de() {
        assertEval("{ e<-new.env() ; ls(e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_14e179c30aa8e043ec4eb7e3e6e62da8() {
        assertEval("{ e<-new.env() ; assign(\"x\",1,e) ; ls(e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_0552b3dcd8bebf3e5c9d397b809c6625() {
        assertEval("{ e<-new.env() ; assign(\"x\",1,e) ; get(\"x\",e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_b6cf99b9c601bf62f2aaede170a5610c() {
        assertEval("{ h <- new.env() ; assign(\"x\", 1, h) ; assign(\"x\", 1, h) ; get(\"x\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_83f71814b8fed725f660655faa735a9e() {
        assertEval("{ h <- new.env() ; assign(\"x\", 1, h) ; assign(\"x\", 2, h) ; get(\"x\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_03cb7bc0b0b620df9cedd9aa88c078f3() {
        assertEval("{ h <- new.env() ; u <- 1 ; assign(\"x\", u, h) ; assign(\"x\", u, h) ; get(\"x\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_cffc3cfc363df31801bc5b6fe5cb0f50() {
        assertEval("{ h <- new.env(parent=emptyenv()) ; assign(\"x\", 1, h) ; exists(\"x\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_3cc61e453ab189eef7b808e7bc4e4fac() {
        assertEval("{ h <- new.env(parent=emptyenv()) ; assign(\"x\", 1, h) ; exists(\"xx\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_836f4d03f7c80c2a96ae712476c28062() {
        assertEval("{ hh <- new.env() ; assign(\"z\", 3, hh) ; h <- new.env(parent=hh) ; assign(\"y\", 2, h) ; exists(\"z\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_bf653a1abe8a78d652f33fa094b8ded8() {
        assertEval("{ ph <- new.env() ; h <- new.env(parent=ph) ; assign(\"x\", 2, ph) ; assign(\"x\", 10, h, inherits=TRUE) ; get(\"x\", ph)}");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_9e2a6f71d6db27159d2decade3c9ba3d() {
        assertEval("{ globalenv() }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_f3ba3e5d35d964724cc7d40b83ce40d8() {
        assertEval("{ emptyenv() }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_4209dd6f0954b5bf18cdf4e5ef11ce2b() {
        assertEval("{ baseenv() }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_2ade89a2966be013ed043bfe3f3da7e7() {
        assertEval("{ ls() }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_158d5d1e9a2d6c61d8dac661de0e1a5e() {
        assertEval("{ f <- function(x, y) { ls() }; f(1, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_e3f6ba9f37472794e38c7ad678f810e3() {
        assertEval("{ x <- 1; ls(globalenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_35855ecba908e6027f9dc0a2580910bf() {
        assertEval("{ x <- 1; .y <- 2; ls(globalenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_4adda712c70fefdfd0544421b1063c36() {
        assertEval("{ is.environment(globalenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_ee00382b21f4a44fba3b55a71a042763() {
        assertEval("{ is.environment(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_8a26b290c7ede675e52cdbe4ac3b88b5() {
        assertEval("{ f <- function()  { as.environment(-1) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_2c96b7a4989b55bba289512b17fa40b4() {
        assertEval("{ as.environment(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_9ef27d8439d61318b0db2162cfc73474() {
        assertEval("{ as.environment(length(search())) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_fed6dc80140fa4f060c531f74dbbd8a7() {
        assertEval("{ as.environment(length(search()) + 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_d5339cb20f7ff6e01af46dfe67eb60a7() {
        assertEval("{ as.environment(\".GlobalEnv\") }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_285eb0ed975eee2bda3e2fb19417637b() {
        assertEval("{ as.environment(\"package:base\") }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_557a9faf503e7318f90b201e74850df7() {
        assertEval("{ identical(parent.env(baseenv()), emptyenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_39dce27a0b9a7269596592d1d23c6b20() {
        assertEval("{ e <- new.env(); `parent.env<-`(e, emptyenv()); identical(parent.env(e), emptyenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_5ae3e8f410ab5a9c4d8d6b31651a8bd2() {
        assertEval("{ environment() }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_dbf0f3e90a92de00cbc4faef09918256() {
        assertEval("{ environment(environment) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_7394d15ed01a61085d62175d9e69de66() {
        assertEval("{ environmentName(baseenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_943f70856f148035b3bfbdbdff0c2222() {
        assertEval("{ environmentName(globalenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_c7d3f6936e31e8863fb6663435e1593b() {
        assertEval("{ environmentName(emptyenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_4c7392e14b704a6b75055d48d5d5dc5f() {
        assertEval("{ environmentName(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_3602079d5fdc38d030056e67704d6461() {
        assertEval("{ e<-new.env(); environmentIsLocked(e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_4b733b3c8920f029f34b48ebacda5606() {
        assertEval("{ e<-new.env(); lockEnvironment(e); environmentIsLocked(e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_f3087d3aadebff13ac0e65ae3b77ccec() {
        assertEval("{ e<-new.env(); assign(\"a\", 1, e) ; lockEnvironment(e); assign(\"a\", 2, e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_804a9447db172c80fb207ca48b0de263() {
        assertEval("{ e<-new.env(); assign(\"a\", 1, e) ; lockEnvironment(e, TRUE); unlockBinding(\"a\", e); assign(\"a\", 2, e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_7e0380fcca98529bec6f3984c0f5f0d1() {
        assertEval("{ e<-new.env(); assign(\"a\", 1, e); bindingIsLocked(\"a\", e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_5f8448cc1a1e6ab105de27796ae2269b() {
        assertEval("{ e<-new.env(); assign(\"a\", 1, e); lockBinding(\"a\", e); bindingIsLocked(\"a\", e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_55690b9e7007c6c718afe28a4356ee75() {
        assertEval("{ e<-new.env(); assign(\"a\", 1, e) ; lockBinding(\"a\", e); rm(\"a\",envir = e); ls() }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_ecad558961e82bd73a386034c871ed68() {
        assertEval("{ e<-new.env(); assign(\"a\", 1, e) ; rm(\"a\",envir = e); ls() }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_ca04651afc834382c8dd7df7d55d8862() {
        assertEval("{ e<-new.env(); x<-1; get(\"x\", e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_1137907b5efe300e13b83d852b13db42() {
        assertEval("{ e<-new.env(); assign(\"x\", 1, e); get(\"x\", e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_f9bf2bff62b5ca445def1eed9808f98c() {
        assertEval("{ plus <- function(x) { function(y) x + y } ; plus_one <- plus(1) ; ls(environment(plus_one)) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_0902b89753b80fe43a8612bd6c00d063() {
        assertEval("{ ls(.GlobalEnv) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_5482bc17285fec304815fd90301c9e13() {
        assertEval("{ x <- 1 ; ls(.GlobalEnv) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_c29f313075292391e27de42119da385a() {
        assertEval("{ h <- new.env(parent=globalenv()) ; assign(\"x\", 10, h, inherits=TRUE) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_ce30ddfe4bd336aa1ca03e769de77455() {
        assertEval("{ ph <- new.env() ; h <- new.env(parent=ph) ; assign(\"x\", 10, h, inherits=TRUE) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_9da65acccab58ab951f83fcc62eb2a9d() {
        assertEvalAlt("{ h <- new.env(parent=emptyenv()) ; assign(\"y\", 1, h) ; assign(\"x\", 2, h) ; ls(h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_aa6736b0cb4026ec2d0e5ccfe392d192() {
        assertEvalError("{ as.environment(-1) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_7f18e387cfa483bb9e5d1ccf3f036cfc() {
        assertEvalError("{ as.environment(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_6659f77b69ee9ac64f532e27438f6a00() {
        assertEvalError("{ as.environment(length(search()) + 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_ce252c65c0262f6fbb8778c80f154db0() {
        assertEvalError("{ e<-new.env(); lockEnvironment(e); assign(\"a\", 1, e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_c70e2f98803cf9712a16f3c05963a400() {
        assertEvalError("{ e<-new.env(); assign(\"a\", 1, e) ; lockEnvironment(e, TRUE); assign(\"a\", 2, e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_9710d6ff5c3e123234468d4f0455fc7b() {
        assertEvalError("{ e<-new.env(); assign(\"a\", 1, e); lockBinding(\"a\", e); assign(\"a\", 2, e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_a066900fcbfdda8bef1990a02d8d21e7() {
        assertEvalError("{ rm(\"foo\", envir = baseenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_96f7f8ea59f79d0925519d113eed4fee() {
        assertEvalError("{ e<-new.env(); assign(\"a\", 1, e) ; lockEnvironment(e); rm(\"a\",envir = e); }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_7da93587d25bdae28c3a9f5eb37c27a5() {
        assertEvalError("{ e<-new.env(); get(\"x\", e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_fc01d2ee012ac0a5e709be2214a69320() {
        assertEvalError("{ e<-new.env(); x<-1; get(\"x\", e, inherits=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_ecd1935ae926eb5338e4af77d14276f3() {
        assertEvalError("{ e<-new.env(parent=emptyenv()); x<-1; get(\"x\", e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_c6a4f629877c5c26aa4a01b522eb2649() {
        assertEvalError("{ h <- new.env(parent=emptyenv()) ; assign(\"y\", 2, h) ; get(\"z\", h) }");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_067a1395bae2eadd465e38a5799ca76a() {
        assertEvalError("{ ph <- new.env(parent=emptyenv()) ; h <- new.env(parent=ph) ; assign(\"x\", 10, h, inherits=TRUE) ; get(\"x\", ph)}");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironment_60bf41382750ac0f4de965f761a2fcf7() {
        assertEvalError("{ ph <- new.env() ; h <- new.env(parent=ph) ; assign(\"x\", 2, h) ; assign(\"x\", 10, h, inherits=TRUE) ; get(\"x\", ph)}");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironmentIgnore_14d25c1c38347070f388d2f433245dab() {
        assertEvalError("{ as.environment(as.environment) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_62d7082404e34bddeb5e12c06a26534d() {
        assertEval("{ eval(2 ^ 2 ^ 3)}");
    }

    @Test
    public void TestSimpleBuiltins_testEval_920f5515f98fd5c10461346e2a805d15() {
        assertEval("{ a <- 1; eval(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_70c290279b8e4e173c5475c813a08ccf() {
        assertEval("{ a <- 1; eval(a + 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_a7934810753e30b16c1914a2b72ba6af() {
        assertEval("{ a <- 1; eval(expression(a + 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_f3aa723185ed6d8b5841272ed37617fb() {
        assertEval("{ f <- function(x) { eval(x) }; f(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_ee2b49685a936778137c42f4d4704c32() {
        assertEval("{ eval(x <- 1); ls() }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_986c43993435f0acec80a3ab9af828b4() {
        assertEval("{ ne <- new.env(); eval(x <- 1, ne); ls() }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_1b7023a1265b2b0e3e2a3be42e1b0835() {
        assertEval("{ ne <- new.env(); evalq(x <- 1, ne); ls(ne) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_60c900fd0d555cd006601ea5616f7146() {
        assertEval("{ ne <- new.env(); evalq(envir=ne, expr=x <- 1); ls(ne) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_18a57a80600eee4b234b2842bb7b149d() {
        assertEval("{ e1 <- new.env(); assign(\"x\", 100, e1); e2 <- new.env(parent = e1); evalq(x, e2) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_0cfcca8d1d0d9f4f9bb286adaf4da5ea() {
        assertEval("{ f <- function(z) {z}; e<-as.call(c(expression(f), 7)); eval(e) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_a4a0ccafd170f23c63cdfafe695a743f() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; eval(f(c(1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_e16aad7031bb1b7268f9b808f42b6905() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; x<-1; eval(f(c(x,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_c30b8cc3303d55cb52e74a9b5171b60f() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; eval(f(c(x=1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_28807060e395854605a0d31d78cacc8a() {
        assertEval("{ g<-function() { f<-function() { 42 }; substitute(f()) } ; eval(g()) }");
    }

    @Test
    public void TestSimpleBuiltins_testEval_a6ebba4db1f42998b89ca5dc35c79bd7() {
        assertEval("{ g<-function(y) { f<-function(x) { x }; substitute(f(y)) } ; eval(g(42)) }");
    }

    @Test
    public void TestSimpleBuiltins_testEvalIgnore_a2bb4f39d740a0564a45a2fa5a7f8259() {
        assertEval("{ eval({ xx <- pi; xx^2}) ; xx }");
    }

    @Test
    public void TestSimpleBuiltins_testExp_604f92586ff1b698d6b752cce3248f1e() {
        assertEval("{ round( exp(c(1+1i,-2-3i)), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testExp_615369efc779cc2d92f0f1998762dc35() {
        assertEval("{ round( exp(1+2i), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testExpression_c725f3ae8945293bd4021df600e55c64() {
        assertEval("{ f <- function(z) {z}; e<-c(expression(f), 7); eval(e) }");
    }

    @Test
    public void TestSimpleBuiltins_testExpression_81ca6b4afdeb3a75effd2f24d990bf21() {
        assertEval("{ f <- function(z) {z}; e<-expression(f); e2<-c(e, 7); eval(e2) }");
    }

    @Test
    public void TestSimpleBuiltins_testExpression_b4bf3bd356c1514a59ae2abc2dec89b0() {
        assertEval("{ x<-expression(1); y<-c(x,2); typeof(y[[2]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testExpression_55b0a3b3f40fe05748c0db073364e647() {
        assertEval("{ class(expression(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testExpression_7c253346f21d07a5774aff62ade64454() {
        assertEval("{ x<-expression(1); typeof(x[[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testExpression_357a5a41ce49c82ef427e204853b2983() {
        assertEval("{ x<-expression(a); typeof(x[[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testExpression_e583a43a1422cdc087574d462a1e517b() {
        assertEval("{ x<-expression(1); y<-c(x,2); typeof(y[[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testFFT_7d15c7af36066c109da585156e650924() {
        assertEval("{ fft(1:4) }");
    }

    @Test
    public void TestSimpleBuiltins_testFFT_f1ae7f45f01309beee55de626238e7c3() {
        assertEval("{ fft(1:4, inverse=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testFFT_29d449480364092bd0ea8a833767b31e() {
        assertEval("{ fft(10) }");
    }

    @Test
    public void TestSimpleBuiltins_testFFT_f64cc856ecf7295f8f5b1c98bf346710() {
        assertEval("{ fft(cbind(1:2,3:4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_cf2e7421db2753ba5a0fa31a9d732610() {
        assertEval("{data = c(1,2,2,3,1,2,3,3,1,2,3,3,1);fdata<-factor(data);fdata}");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_bbb2a6268371cf328708ecceab8a5b40() {
        assertEval("{data = c(1,2,2,3,1,2,3,3,1,2,3,3,1);rdata = factor(data,labels=c(\"I\",\"II\",\"III\"));rdata;}");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_e4488cf571aa9791a9532981678882f8() {
        assertEval("{data = c(1,2,2,3,1,2,3,3,1,2,3,3,1);fdata<-factor(data);levels(fdata) = c('I','II','III');fdata;}");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_6118896969c9412561227254bb3c82b5() {
        assertEval("{set.seed(124);l1 = factor(sample(letters,size=10,replace=TRUE));set.seed(124);l2 = factor(sample(letters,size=10,replace=TRUE));l12 = factor(c(levels(l1)[l1],levels(l2)[l2]));l12;}");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_0089456931384930ab1a0df22af4533f() {
        assertEval("{set.seed(124); schtyp <- sample(0:1, 20, replace = TRUE);schtyp.f <- factor(schtyp, labels = c(\"private\", \"public\")); schtyp.f;}");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_1e2057543d61234029778966ebbe7298() {
        assertEval("{ses <- c(\"low\", \"middle\", \"low\", \"low\", \"low\", \"low\", \"middle\", \"low\", \"middle\", \"middle\", \"middle\", \"middle\", \"middle\", \"high\", \"high\", \"low\", \"middle\", \"middle\", \"low\", \"high\"); ses.f.bad.order <- factor(ses); is.factor(ses.f.bad.order);levels(ses.f.bad.order);ses.f <- factor(ses, levels = c(\"low\", \"middle\", \"high\"));ses.order <- ordered(ses, levels = c(\"low\", \"middle\", \"high\"));ses.order; } ");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_6287c53e3c5f805807ac27e404a05595() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-NULL; as.character(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_6057e63e95871f7ed5c00eb75931ac57() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-character(); as.character(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_3bb84a0c7523be96b7f1e3285ad0de96() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(7L, 42L); x  }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_2411ded9e7199e0f6ee1955a0e01cbd2() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_10d97a2528ea0983f0dc97b94bb66588() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(FALSE, TRUE); x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_8d8d045d8b852b0806070ab877caa22e() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(7+7i, 42+42i); x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_696be2cb6d37235d8e5aa08b6de78b44() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); x == \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_a49942ab517527300294d2108a1326f2() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(+7L, +42L); x == 7 }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_cef7501b2a7bb2cf3d6882b30fa54722() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(+7, +42); x == 7 }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_7e90338830d57e7a1294c65be8c32485() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(+7+7i, +42+42i); x == 7+7i }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_14f852531f016994a9d38e675ea3e541() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(as.raw(7), as.raw(42)); x == as.raw(7) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_6b857dc0c28485c71e998f91ad719e79() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\", \"c\")); x == c(\"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_c6b2929aec56f236a9015269d6d5e6f0() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\"), ordered=TRUE); x > \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_e759d4fccb890277ccc9ddb8fcb0dec3() {
        assertEval("{ x<-c(1L, 2L, 1L); class(x)<-c(\"ordered\", \"factor\"); levels(x)<-c(\"a\", \"b\"); x > \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_9383599e2b32f549f5e46351c2e6bd9b() {
        assertEval("{ x<-factor(c(\"c\", \"b\", \"a\", \"c\")); y<-list(1); y[[1]]<-x; y }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_ef37cc56e92b1c4a3742f47b97df2525() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); x[1] }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_e1467f269d5a2fed20d121b42b6669e7() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); x[[1]] }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_49d94f4cc6d874fdd626f78a760dd79e() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); x[2] }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_b1b8488bfeafbcf09b786073c66c0a31() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); x[[2]] }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_9c518bdf01e419e3635b3da6dd82b34a() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); x[c(1,2)] }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_1d1ee9908bd60f3714927a245349a33e() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); x[c(1,2,3,4)] }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_fdae08cc3544f4e5c971d2303a796eeb() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); is.atomic(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_5302c7a50fda26503b5d1f681cec279c() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\"), ordered=TRUE); is.atomic(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_a8153cc5be539920818caa4f7d546190() {
        assertEval("{ as.logical(factor(c(\"a\", \"b\", \"a\"))) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_19ca5910d2b0103d936cfdd499387aa2() {
        assertEval("{ as.logical(factor(integer())) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_efa5f97d32564f78732db53e6862362e() {
        assertEval("{ x<-structure(c(1.1,2.2,1.1), .Label=c(\"a\", \"b\"), class = c('factor')); attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_d5fd844e772c2e96c1266f8c4e181e7a() {
        assertEval("{ x<-structure(c(1.1,2.2,1.1), .Label=c(\"a\", \"b\"), class = c('factor')); x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_69974a637dd01d933a0274513b334646() {
        assertEval("{ x<-structure(c(1.2,2.2,1.1), .Label=c(\"a\", \"b\"), class = c('factor')); x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_1d6da35b510c64fda496cd4d92b0b8dd() {
        assertEval("{ x<-structure(c(2.2,3.2,2.1), .Label=c(\"a\", \"b\"), class = c('factor')); as.integer(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_c97bd5071d6a70f07678a33414644e52() {
        assertEval("{ x<-structure(c(1,2,1), .Label=c(\"a\", \"b\"), class = c('factor'), .Names=c(\"111\",\"112\",\"113\")); y<-structure(c(1,2,1), .Label=c(\"a\", \"b\"), class = c('factor'), .Names=c(\"111\",\"112\",\"113\")); x==y }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_a87228cb9283d7ba484ab0b60059e1bf() {
        assertEval("{ x<-structure(factor(c(\"a\",\"b\",\"c\")), class=NULL); x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_44117023d8a3c9ae52a2b2a44213592d() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); levels(x)<-c(7,42); x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_cefc2bc719b3846bced78bc2d425b26e() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); levels(x)<-c(7,42); is.character(levels(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_4a929d5d886481531ac203d440467c7f() {
        assertEval("{ x <- factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(7L, 42L); is.integer(levels(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_bbc4f117fcd26797b1689982fb016c58() {
        assertEval("{ x <- factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(7, 42); is.double(levels(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_f3b37f260ede16550be1d4aee5c15662() {
        assertEval("{ x <- factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(FALSE, TRUE); is.logical(levels(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_ab9d5f3af49f458816ca60d63e5e2bb3() {
        assertEval("{ x <- factor(c(\"a\", \"b\", \"a\")); levels(x)<-c(7, 42); is.character(levels(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_74be9f8a876a080c6a2446c3e37f9ae7() {
        assertEval("{ x <- factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(7+7i, 42+42i); is.complex(levels(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_badfb42ece0bbc2d8d735f84f5223718() {
        assertEval("{ x <- factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(as.raw(7), as.raw(42)); is.raw(levels(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_2ef7de52def309425a9b70965111f004() {
        assertEvalError("{ x<-c(1,2,3); class(x)<-\"factor\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_7a9b1db57fd6e717cb6a5a4289638383() {
        assertEvalError("{ x<-c(\"1\",\"2\",\"3\"); class(x)<-\"factor\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_78f60bd3f5d980d4b71b67fa44964e85() {
        assertEvalError("{ x<-c(1L,2L,3L); class(x)<-\"factor\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_c40236caacabbda7f806d44c7348b666() {
        assertEvalError("{ x<-factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(as.raw(7), as.raw(42)); x }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_778d87ada7ac057126f8a27cfe882a81() {
        assertEvalError("{ x<-factor(c(\"c\", \"b\", \"a\", \"c\")); y<-c(1); y[[1]]<-x; y }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_8e866be378d6495f8d649996dcb5bb3c() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x > \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_cab09968ee0783bc157730e05358ed0c() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x + \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_61bfd366e4db68e9bda18fe2c3cc87f2() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x == c(\"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_7cd2b27121f6c77b417a436d60108819() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x > c(\"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_a34678ac5082e00e15dd97ecd53f0e12() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x + c(\"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_7b9d1da1c475fe180c3d19653a62003e() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\"), ordered=TRUE); x + \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_e1f4890b0e585468d589f92e64e8fe43() {
        assertEvalWarning("{ x<-c(1L, 2L, 1L); class(x)<-c(\"factor\", \"ordered\"); levels(x)<-c(\"a\", \"b\"); x > \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_442949c79222d476ad19ed8d25f6d67b() {
        assertEvalWarning("{ x<-c(1L, 2L, 1L); class(x)<-c(\"ordered\", \"factor\"); levels(x)<-c(\"a\", \"b\"); x + \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_b998c6b80f80df4ef39a60ff889bc0e4() {
        assertEvalWarning("{ x<-c(1L, 2L, 1L); class(x)<-c(\"factor\", \"ordered\"); levels(x)<-c(\"a\", \"b\"); x + \"a\" }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_9b48b1721b63ffee900121993a15bb82() {
        assertEvalWarning("{ x<-factor(c(\"c\", \"b\", \"a\", \"c\")); y<-list(1); y[1]<-x; y }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_ea50b4927f7021c815fba8b2628b3939() {
        assertEvalWarning("{ x<-factor(c(\"c\", \"b\", \"a\", \"c\")); y<-c(1); y[1]<-x; y }");
    }

    @Test
    public void TestSimpleBuiltins_testFactor_79abe62e1800fec0bdfb1ee89b43889b() {
        assertEvalWarning("{ x<-structure(c(1,2,1), .Label=c(\"a\", \"b\"), class = c('factor'), .Names=c(\"111\",\"112\",\"113\")); y<-structure(c(1,2,1), .Label=c(\"a\", \"b\"), class = c('factor'), .Names=c(\"111\",\"112\",\"113\")); x+y }");
    }

    @Test
    public void TestSimpleBuiltins_testFileListing_9646bfd3fb553824f1f54cc5d04b8219() {
        assertEval("{ list.files(\"test/r/simple/data/tree1\") }");
    }

    @Test
    public void TestSimpleBuiltins_testFileListing_c3407928ac3dcbd4ed94ca586c8fa3bd() {
        assertEval("{ list.files(\"test/r/simple/data/tree1\", recursive=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testFileListing_b71b321a5f8b4e1665e1e8c55dfc00f5() {
        assertEval("{ list.files(\"test/r/simple/data/tree1\", recursive=TRUE, pattern=\".*dummy.*\") }");
    }

    @Test
    public void TestSimpleBuiltins_testFileListing_b36b504faedcd110cf3480d0627a4990() {
        assertEval("{ list.files(\"test/r/simple/data/tree1\", recursive=TRUE, pattern=\"dummy\") }");
    }

    @Test
    public void TestSimpleBuiltins_testFileListing_de580ef8e4242ba05e2ab96a9e21d936() {
        assertEval("{ list.files(\"test/r/simple/data/tree1\", pattern=\"*.tx\") }");
    }

    @Test
    public void TestSimpleBuiltins_testFloor_f23ad70b9011c6a81c3301a3dfefb542() {
        assertEval("{ floor(c(0.2,-3.4,NA,0/0,1/0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testFormals_b00277bd752de09ce27cedfaebd1530d() {
        assertEval("{ f <- function(a) {}; formals(f) }");
    }

    @Test
    public void TestSimpleBuiltins_testFormals_cb854b722b2af75d7a05bb3df8691306() {
        assertEval("{ f <- function(a, b) {}; formals(f) }");
    }

    @Test
    public void TestSimpleBuiltins_testFormals_158ae1b63fe8f9cb5390ff8836eb157d() {
        assertEval("{ f <- function(a, b = c(1, 2)) {}; formals(f) }");
    }

    @Test
    public void TestSimpleBuiltins_testFrames_a43ce3b962648c0ad589424dca9b966d() {
        assertEval("{ t1 <- function() {  aa <- 1; t2 <- function() { cat(\"current frame is\", sys.nframe(), \"; \"); cat(\"parents are frame numbers\", sys.parents(), \"; \"); print(ls(envir = sys.frame(-1))) };  t2() }; t1() }");
    }

    @Test
    public void TestSimpleBuiltins_testGL_b29026222b62055c3650d8bd9996270e() {
        assertEval("{x<-gl(2, 8, labels = c(\"Control\", \"Treat\")); print(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGL_a3040a743553683871084a45e4fd932f() {
        assertEval("{x<-gl(2, 1, 20); print(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGL_2f49f5104027ee5f80f8e3140de074d8() {
        assertEval("{x<-gl(2, 2, 20); print(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGL_d821a80819d1b52f54bd312a5c895429() {
        assertEval("{ a <- gl(2, 4, 8) ; print(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testGL_2db3e43260651211be0babeb5de1ef64() {
        assertEval("{ b <- gl(2, 2, 8, labels = c(\"ctrl\", \"treat\")) ; print(b) }");
    }

    @Test
    public void TestSimpleBuiltins_testGet_17b5e1592125ebc43403174fb9611f19() {
        assertEval("{y<-function(){y<-2;get(\"y\",mode=\"integer\")};y();}");
    }

    @Test
    public void TestSimpleBuiltins_testGet_f4c68e22ab10a8f75c50c1b850306a99() {
        assertEval("{y<-function(){y<-2;get(\"y\",mode=\"closure\")};y();}");
    }

    @Test
    public void TestSimpleBuiltins_testGet_ad705be74a5aac60fbc5b60f1428ad54() {
        assertEval("{y<-function(){y<-2;get(\"y\",mode=\"integer\",inherits=FALSE);get(\"y\",mode=\"integer\",inherits=FALSE)};y();}");
    }

    @Test
    public void TestSimpleBuiltins_testGet_597a46246487040b4d1717d18b6dab16() {
        assertEval("{y<-function(){y<-2;get(\"y\",mode=\"double\")};y();}");
    }

    @Test
    public void TestSimpleBuiltins_testGet_374e182f1c02f32eea8630124198890b() {
        assertEval("{y<-function(){y<-2;get(\"y\",mode=\"double\",inherits=FALSE)};y();}");
    }

    @Test
    public void TestSimpleBuiltins_testGet_454f5be352adc770dd02ec79976ed693() {
        assertEval("{ get(\".Platform\", globalenv())$endian }");
    }

    @Test
    public void TestSimpleBuiltins_testGet_1360e7f9c659eacd7ee24ef5ca6b274c() {
        assertEval("{ get(\".Platform\")$endian }");
    }

    @Test
    public void TestSimpleBuiltins_testGet_f2c6b557e11aa719fe83073c7b60a966() {
        assertEvalError("{ get(\"dummy\") }");
    }

    @Test
    public void TestSimpleBuiltins_testGet_1087991be7b199d7a0645e3ba9553805() {
        assertEvalError("{ x <- 33 ; f <- function() { if (FALSE) { x <- 22  } ; get(\"x\", inherits = FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testGet_5159e1fa2f3c3b1e9e2819e18d1aaed4() {
        assertEvalError("{ x <- 33 ; f <- function() { get(\"x\", inherits = FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testGet_64afee6cadb778dda13b25a2f3f9ecef() {
        assertEvalError("{y<-function(){y<-2;get(\"y\",mode=\"closure\",inherits=FALSE);};y();}");
    }

    @Test
    public void TestSimpleBuiltins_testGetClass_50e9635bfb1e3eeed4dd1a14ca0c6d4f() {
        assertEval("{x<-1L;class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGetClass_af81637cccf11bc2161b1d4dedfea724() {
        assertEval("{x<-c(1L,2L,3L);class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGetClass_e61d45b963b2c7350460c3b02c35576e() {
        assertEval("{x<-seq(1L,10L);class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGetClass_dcaf905a90c1ecb53d1c1841d515e555() {
        assertEval("{x<-seq(1.1,10.1);class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGetClass_b4ae30b1b3b31b7f8bf83e725f98bcca() {
        assertEval("{x<-1;class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGetClass_a524770d8c4b8a5d06a826167443fed7() {
        assertEval("{x<-c(1,2,3);class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGetClass_1129b85c7f5e653b334e8eda2fa3d0f8() {
        assertEval("{ x<-1; oldClass(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testGetClassIgnore_04e1bbb35c3306f6feb801b5cce80b88() {
        assertEval("{x<-seq(1,10);class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testGrep_bd3d37228dd5044cbf31c75cfeae1918() {
        assertEval("{ txt<-c(\"arm\",\"foot\",\"lefroo\", \"bafoobar\"); grep(\"foo\", txt) }");
    }

    @Test
    public void TestSimpleBuiltins_testGrep_e93dcf0b953746b7f5578d07a9bea21d() {
        assertEval("{ txt<-c(\"is\", \"intended\", \"to\", \"guarantee\", \"your\", \"freedom\"); grep(\"[gu]\", txt) }");
    }

    @Test
    public void TestSimpleBuiltins_testGrep_87bc999e454a101cdcc2e5158443d54b() {
        assertEval("{ txt<-c(\"1+1i\", \"7\", \"42.1\", \"7+42i\"); grep(\"[0-9].*[-+][0-9].*i$\", txt) }");
    }

    @Test
    public void TestSimpleBuiltins_testGrep_463c5e470c47e103f39fd9d5086fa0b1() {
        assertEval("{ txt<-c(\"rai\", \"ira\", \"iri\"); grep(\"i$\", txt) }");
    }

    @Test
    public void TestSimpleBuiltins_testGrep_8acdaa9fa6a40c31da932b6ad729bdb3() {
        assertEval("{ txt<-c(\"arm\",\"foot\",\"lefroo\", \"bafoobar\"); grepl(\"foo\", txt) }");
    }

    @Test
    public void TestSimpleBuiltins_testHeadNTail_47da89726dc6890d94e2e887c535f7df() {
        assertEval("{head(letters)}");
    }

    @Test
    public void TestSimpleBuiltins_testHeadNTail_a7b15e7d7759ddc6e42a4cf8cb67188c() {
        assertEval("{head(letters, n = 10L)}");
    }

    @Test
    public void TestSimpleBuiltins_testHeadNTail_e267a1616eee8c34692f5a61e1128242() {
        assertEval("{head(letters, n = -6L)}");
    }

    @Test
    public void TestSimpleBuiltins_testHeadNTail_38c388571bb474d4aefbe0b8b96a6883() {
        assertEval("{tail(letters)}");
    }

    @Test
    public void TestSimpleBuiltins_testHeadNTail_158e11de318dc5f3df3b935efbcf775c() {
        assertEval("{tail(letters, n = 10L)}");
    }

    @Test
    public void TestSimpleBuiltins_testHeadNTail_4a9367f5792eea0da144abfb3263198e() {
        assertEval("{tail(letters, n = -6L)}");
    }

    @Test
    public void TestSimpleBuiltins_testHeadNTail_b41a7ed31568331322d49dd39cdb9415() {
        assertEval("{x<-matrix(c(1,2,3,4),2,2); tail(x,1);}");
    }

    @Test
    public void TestSimpleBuiltins_testHeadNTail_efb5e6e5b74e8be9ac59583fe906a9ed() {
        assertEval("{x<-matrix(c(1,2,3,4),2,2); head(x,1);}");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_c46eaf60fda944bdf1391b5fe9af0427() {
        assertEval("{ identical(1,1) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_53fdb3573317b847b951f1bb6b1d8ea0() {
        assertEval("{ identical(1L,1) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_959b063ad8742ea07448fc45ba8f9851() {
        assertEval("{ identical(1:3, c(1L,2L,3L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_0538458b54dce047351d6fe4728461d7() {
        assertEval("{ identical(0/0,1[2]) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_e9828bc94f4f46dc68f975a39942f654() {
        assertEval("{ identical(list(1, list(2)), list(list(1), 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_1bd4e6954bc44911ff58137eb71e3c2c() {
        assertEval("{ identical(list(1, list(2)), list(1, list(2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_3dd8c26fc61d38a1308e5199dfaeb876() {
        assertEval("{ x <- 1 ; attr(x, \"my\") <- 10; identical(x, 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_329bfbf3d8ef2c8dccff787144ebe4c5() {
        assertEval("{ x <- 1 ; attr(x, \"my\") <- 10; y <- 1 ; attr(y, \"my\") <- 10 ; identical(x,y) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_905c81c2be1d34a4bba411f19c71b4ae() {
        assertEval("{ x <- 1 ; attr(x, \"my\") <- 10; y <- 1 ; attr(y, \"my\") <- 11 ; identical(x,y) }");
    }

    @Test
    public void TestSimpleBuiltins_testIdentical_6c7bc412e522d929c5a5f2071ca26ec9() {
        assertEval("{ x <- 1 ; attr(x, \"hello\") <- 2 ; attr(x, \"my\") <- 10;  attr(x, \"hello\") <- NULL ; y <- 1 ; attr(y, \"my\") <- 10 ; identical(x,y) }");
    }

    @Test
    public void TestSimpleBuiltins_testIfelse_2c1658e39df5fae138d4782ff7283d0e() {
        assertEval("{ ifelse(TRUE,1,0) }");
    }

    @Test
    public void TestSimpleBuiltins_testIfelse_31f374a4ed587c448bc38112b9f44b9f() {
        assertEval("{ ifelse(FALSE,1,0) }");
    }

    @Test
    public void TestSimpleBuiltins_testIfelse_b80411713f72aff02d9beeb4116c484c() {
        assertEval("{ ifelse(NA,1,0) }");
    }

    @Test
    public void TestSimpleBuiltins_testIn_a6548512e6448e6d86b8d072a604a135() {
        assertEval("{ 2 %in% c(1,2,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testIn_ec8e3e43892fdc195b04d491cc3bdcaf() {
        assertEval("{ c(1,2,3,4,5) %in% c(1,2,1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testIn_b57b1dea7bbfaf83f8385a48613bc45b() {
        assertEval("{ \"hello\" %in% c(\"I\", \"say\", \"hello\", \"world\") }");
    }

    @Test
    public void TestSimpleBuiltins_testIn_382692b7b856b490f8d1c547d331d435() {
        assertEval("{ c(\"hello\", \"say\") %in% c(\"I\", \"say\", \"hello\", \"world\") }");
    }

    @Test
    public void TestSimpleBuiltins_testIn_e380183c1cd9aa0d725987a8c96350e7() {
        assertEval("{ `%in%`(2,c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_d44abdb71603cf4c3dd66f3e9be929e1() {
        assertEval("{x <- 10; inherits(x, \"a\") ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_dfd666ff99448757c43d859d60e8bfa4() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\"); inherits(x,\"a\") ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_c7ded27e57c1310a0844a7607f124b3f() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, \"a\", TRUE) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_1a1360b46e15fc2f2e213641e50470f5() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, c(\"a\", \"b\", \"c\"), TRUE) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_6e8f9ef4539db9f9a35e6d2a43fc9fc3() {
        assertEval("{x <- 10;class(x) <- c(\"a\");inherits(x, c(\"a\", \"b\", \"a\"), TRUE) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_0027ac15d1bcae36eaa7a69454d148c6() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, c(\"c\", \"q\", \"b\"), TRUE) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_b4eba1f1190198ceaa262614f59857b1() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, c(\"c\", \"q\", \"b\")) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_f90abf6cde0533d9ea8216062edbc944() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, \"a\", c(TRUE)) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_836249d31734a1237010e42b01dd40d1() {
        assertEval("{ inherits(NULL, \"try-error\") }");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_c3babb7ceea8dc93b0085895b3a09d12() {
        assertEval("{ inherits(new.env(), \"try-error\") }");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_04a77c3cfe28848e28a68ba564162427() {
        assertEval("{ x<-data.frame(c(1,2)); inherits(x, \"data.frame\") }");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_20d6545f67c653e20d3b612df41b64c2() {
        assertEval("{ x<-factor(\"a\", \"b\", \"a\"); inherits(x, \"factor\") }");
    }

    @Test
    public void TestSimpleBuiltins_testInherits_34ff95edf55241d7710a1123747655e8() {
        assertEval("{ inherits(textConnection(\"abc\"), \"connection\") }");
    }

    @Test
    public void TestSimpleBuiltins_testInheritsIgnore_d0dc6389c924878311546ba61d753a22() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, 2, c(TRUE)) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInheritsIgnore_89e7444d88aeaed136ad761742bfd5e4() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, \"a\", 1) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testInteraction_cc946aa5f7a0393338bf3a58fefb26a7() {
        assertEval("{ a <- gl(2, 4, 8) ; b <- gl(2, 2, 8, labels = c(\"ctrl\", \"treat\")) ; interaction(a, b) }");
    }

    @Test
    public void TestSimpleBuiltins_testInteraction_f0540e2d1f6d9ab64d558ef96133818f() {
        assertEval("{ a <- gl(2, 4, 8) ; b <- gl(2, 2, 8, labels = c(\"ctrl\", \"treat\")) ; s <- gl(2, 1, 8, labels = c(\"M\", \"F\")) ; interaction(a, b, s, sep = \":\") }");
    }

    @Test
    public void TestSimpleBuiltins_testInvisible_8469019c606ff78421cea952d395fa6b() {
        assertEval("{ f <- function() { invisible(23) } ; toString(f()) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvisible_7772bf3df913370ad529802bddebc179() {
        assertEval("{ f <- function(x, r) { if (x) invisible(r) else r }; f(FALSE, 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvisible_45ebb4beda7d951423729ceea489852e() {
        assertEvalNoOutput("{ f <- function() { invisible(23) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testInvisibleIgnore_d73dc3df8036b77c171c3b1e3e6abe2b() {
        assertEval("{ f <- function(x, r) { if (x) invisible(r) else r }; f(TRUE, 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocation_b8f6f536144543ff7b2ec4ab5ded07cd() {
        assertEval("{ g <- function(...) { max(...) } ; g(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocation_8fe10517039bb11c9728f8bef0db2cf0() {
        assertEval("{ f <- function(a, ...) { list(...) } ; f(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocation_fbbf7efb3099f10d62c7d48ff602ec5d() {
        assertEval("{ matrix(da=1:3,1) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocation_63ddef3dc00d9e13df700294b80f8e85() {
        assertEvalError("{ rnorm(n = 1, n = 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocation_bad37b65d3db46adac99edf64bcc7f15() {
        assertEvalError("{ rnorm(s = 1, s = 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocation_83cadcf7287a3b26f2cdad74757af875() {
        assertEvalError("{ matrix(1:4, n = 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_6024770f1412c264dd004f2fa8bc6fbf() {
        assertEval("{ round( rnorm(1,), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_dd3e0cc9f1a660be34f8d72900973743() {
        assertEval("{ f <- function(...) { l <- list(...) ; l[[1]] <- 10; ..1 } ; f(11,12,13) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_52f3eb5641c6781b78df1fadd9026fd4() {
        assertEval("{ g <- function(...) { length(list(...)) } ; f <- function(...) { g(..., ...) } ; f(z = 1, g = 31) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_1258dbcba01e5d764684be0e540347c1() {
        assertEval("{ g <- function(...) { `-`(...) } ; g(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_a3771a811b477ac7315bd35bcf519731() {
        assertEval("{ f <- function(...) { list(a=1,...) } ; f(b=2,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_a8ec33ddd003e2f4f13be2ec0d07b6d3() {
        assertEval("{ f <- function(...) { substitute(...) } ; f(x + z) } ");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_6c569ee5c59b68db9452d75369b05478() {
        assertEval("{ p <- function(prefix, ...) { cat(prefix, ..., \"\\n\") } ; p(\"INFO\", \"msg:\", \"Hello\", 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_d9a5cb384d79347b34d55b8293316a42() {
        assertEval("{ f <- function(...) { g <- function() { list(...)$a } ; g() } ; f(a=1) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_aa735a388a824b851e914305a0ee78ec() {
        assertEval("{ f <- function(...) { args <- list(...) ; args$name } ; f(name = 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_e7dd2cd652f2b8c1a31a90832603d4c5() {
        assertEvalError("{ matrix(x=1) }");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_53d1bf6a3bf98883a70a360da169055c() {
        assertEvalError("{ max(1,2,) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_2dc95edb23c6a5a7cd776acd9d8b0161() {
        assertEval("{ is.atomic(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_3519e4ab9adfd7f0f31e17cd790d60ef() {
        assertEval("{ is.atomic(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_8e32cfd92fe5419280f614af9bd8b7c5() {
        assertEval("{ is.atomic(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_98b4f52e672f1abec09834a0b1d70ef7() {
        assertEval("{ is.atomic(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_078ba04ee5202e6b9182e3ca89d99c09() {
        assertEval("{ is.atomic(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_c5aa836cf30d2bfbf49845464431e193() {
        assertEval("{ is.atomic(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_e20e6e0a0f334955a28fb3f440bc7100() {
        assertEval("{ is.atomic(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_a6e57d1b16ffb05d8352862ff5be69ba() {
        assertEval("{ !is.atomic(list()) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsAtomic_c5836be5597617c6d0b6f1ff8b620966() {
        assertEval("{ !is.atomic(function() {}) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsCall_2ebefdd1f4f8356a28f5bbc9f08cac88() {
        assertEval("{ cl <- call(\"f\") ; is.call(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsCall_2019f6a6debf161df39d04a29bdf5c1f() {
        assertEval("{ cl <- call(\"f\", 2, 3) ; is.call(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsCall_1647928521ba1a68a9d1bdc7d79c95e9() {
        assertEval("{ cl <- list(f, 2, 3) ; is.call(cl) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsCall_6b9cd0079625a2d108ef1167eb6a7171() {
        assertEval("{ is.call(call) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsFactor_35274bed495a47f012fd2924c121bc8c() {
        assertEval("{x<-1;class(x)<-\"foo\";is.factor(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testIsFactorIgnore_e43e62dca9f8a682efdd7d472154123e() {
        assertEval("{is.factor(1)}");
    }

    @Test
    public void TestSimpleBuiltins_testIsFactorIgnore_9b6189d7740f2b58ed5ac90834facc44() {
        assertEval("{x<-1;class(x)<-\"factor\";is.factor(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testIsFactorIgnore_f50a4cd1b0417c209953249fed637957() {
        assertEval("{is.factor(c)}");
    }

    @Test
    public void TestSimpleBuiltins_testIsNA_b8cf60154d61f3d4fb5896e670ddc520() {
        assertEval("{ is.na(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsNA_edaacabd596ade1ca61f9c8197938e57() {
        assertEval("{ is.na(c(NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsNA_5024ef11649883961aa523598dad360f() {
        assertEval("{ is.na(c(1,2,3,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsNA_324cc04c8c1b252aa5a25ec87ed592a6() {
        assertEval("{ is.na(c(1,2,NA,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsNA_0cbc25db85ed6a5941455678fdd166c2() {
        assertEval("{ is.na(1[10]) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsNA_19b0c24d7c5d403027bfb91f9e95c742() {
        assertEval("{ is.na(c(1[10],2[10],3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsNABroken_7215b0a22d4bed3645f9359539e607c8() {
        assertEval("{ is.na(list(1[10],1L[10],list(),integer())) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsObject_bf8900970d62fc778d5a113513a1f4f8() {
        assertEval("{ is.object(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsObject_b326b8b58745eb5babff2b83ac2cf9c5() {
        assertEval("{ is.object(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsObject_a29dac377f658c7f9518428cefd90410() {
        assertEval("{ is.object(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsObject_743f1640a136cc343f2fde63d5fdfdae() {
        assertEval("{ is.object(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsObject_f016e0d824b333e1fbead8d5a7e7baae() {
        assertEval("{ is.object(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsObject_d734f214980ce3573bfcf525d400afa6() {
        assertEval("{ is.object(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_377a05a3ae2344c6d22654f5352b5536() {
        assertEval("{ is.recursive(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_90047cbc67c1e2d84411a7cf3ab9e59e() {
        assertEval("{ is.recursive(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_9d7267fc157b80f504f819ad39271305() {
        assertEval("{ is.recursive(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_80bc5dca01765440f6a7cf78b3c5b9dd() {
        assertEval("{ is.recursive(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_c9ccafbdb3c587f10655c1f651b3e7c2() {
        assertEval("{ is.recursive(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_5d4babd30ae39f6694f96af9508316de() {
        assertEval("{ is.recursive(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_2eb608993f1d2411438175573176025d() {
        assertEval("{ is.recursive(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_d96fe1762b02584d65f100a94ef4c94d() {
        assertEval("{ !is.recursive(list()) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsRecursive_0ad462ffcad3ea5bad663b92e2388a63() {
        assertEval("{ !is.recursive(function() {}) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsTRUE_a8473f969e4f8b207e5f677194e23c40() {
        assertEval("{ isTRUE(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsTRUE_acbc975cbce8f2d6a8b5422c52a423d3() {
        assertEval("{ isTRUE(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsTRUE_914502371c8dda2fce5a0ab871b41cd7() {
        assertEval("{ isTRUE(FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsTRUE_0c8034c5be2cf8442cbe373537d1f7d0() {
        assertEval("{ isTRUE(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsTRUE_78f604c978973485d42c11bc4d70aaeb() {
        assertEval("{ isTRUE(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsTRUE_4510212fe57e0d1dc393efa4c05bfc0f() {
        assertEval("{ isTRUE(as.vector(TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsTRUE_a3b6592c79b5852ef853c585e0eff03d() {
        assertEval("{ isTRUE(as.vector(FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsTRUE_625a4bacb96d3aa1531e631190657a54() {
        assertEval("{ isTRUE(as.vector(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsUnsorted_3b7257dae08d22cc08ee94a46df33918() {
        assertEval("{ is.unsorted(c(1,2,3,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsUnsorted_82bae88571c23ab3537cf19d60233dde() {
        assertEval("{ is.unsorted(c(1,2,6,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_cb0db6a67f760c6ddb916a5329044870() {
        assertEval("{ is.vector(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_46dc006dec26cdddf0cd6237d43429b8() {
        assertEval("{ is.vector(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_aba850b02b8647e42263281fed544a73() {
        assertEval("{ is.vector(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_3c5878f346be3c8fbae71bdaae429e50() {
        assertEval("{ x<-c(1,3); is.vector(x, \"double\"); }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_f12b9a0268148c25d52aca64e8029b52() {
        assertEval("{ x<-c(1,3); is.vector(x, \"integer\"); }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_fd5ab9b0c0bd8a424837feb3ddab3875() {
        assertEval("{ x<-c(1:3); is.vector(x, \"double\"); }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_2b8ccc6bb6fec846f427ab5122886e81() {
        assertEval("{ x<-c(1:3); is.vector(x, \"integer\"); }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_4af94b914d916000a03419dbbfcfddd5() {
        assertEval("{ x<-c(1,3); is.vector(x, \"d\"); }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_5670028b1b0a31ebc36efa57826ba934() {
        assertEval("{ x<-list(1,3); }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_29131c8f041a5fe50296f44a05a8632a() {
        assertEval("{ x<-c(1); attr(x, \"foo\")<-\"foo\"; is.vector(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_ad663eb70f3fac562e069578c81f4835() {
        assertEval("{ x<-list(1); attr(x, \"foo\")<-\"foo\"; is.vector(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_e28de35b4efac4eede88c00878b3c19d() {
        assertEval("{is.vector(c(TRUE,FALSE),\"numeric\");}");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_a1e42f1027a4e93ef79a53f3ea4f8c30() {
        assertEval("{is.vector(c(TRUE,FALSE),\"logical\");}");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_c19fd840d51821ae37baccc517973110() {
        assertEval("{x<-1;class(x)<-\"a\";is.vector(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testIsVector_0dba5d0d6f4324e4a337b861b787adea() {
        assertEval("{x<-1;names(x)<-\"a\";is.vector(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_797cd316f3f859174c906d613c777e40() {
        assertEval("{ lapply(1:3, function(x) { 2*x }) }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_5ed0951d3e7363f21bc554e405102229() {
        assertEval("{ lapply(1:3, function(x,y) { x*y }, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_a1d2abd1c5cc46d6da1661aca2a1ae1f() {
        assertEval("{ x<-c(1,3,4);attr(x,\"names\")<-c(\"a\",\"b\",\"c\");lapply(x, function(x,y) { as.character(x*y) }, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_aad1bc65130fb0c42e2e3d991f1b3391() {
        assertEval("{ f <- function() { lapply(c(X=\"a\",Y=\"b\"), function(x) { c(a=x) })  } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_bb1b1b8299159a83c87fe6dc760e5b8b() {
        assertEval("{ lapply(1:3, function(x,y,z) { as.character(x*y+z) }, 2,7) }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_c76c85ff170375ed7ec190d889689933() {
        assertEval("{ f <- function(x) 2 * x ; lapply(1:3, f) }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_923a6f07dad0ed634e23cfd00b6923fd() {
        assertEval("{ f <- function(x, y) x * y ; lapply(1:3, f, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_8aa9fed48ff3245ec5301cee82cf7f37() {
        assertEval("{ lapply(1:3, sum) }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_04025bf54d7281f9b2993d29590f8eea() {
        assertEval("{ lapply(1:3, sum, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testLapply_d3277d29613178c818f69335eb032a43() {
        assertEval("{ x <- list(a=1:10, b=1:20) ; lapply(x, sum) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_31389093e21d303bed26828ab536576b() {
        assertEval("{ x <- 1:4 ; length(x) <- 2 ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_548e298d60c6cf79aede96d767748eea() {
        assertEval("{ x <- 1:2 ; length(x) <- 4 ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_0f085fe508c7e13bd8d44c9c226377fd() {
        assertEval("{ length(c(z=1:4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_fe015fb0ebc736db809aa71ec2873568() {
        assertEval("{ x <- 1 ; f <- function() { length(x) <<- 2 } ; f() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_de39589213b36483b01fbfd93b30cbe9() {
        assertEval("{ length(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_d58a76dd44eb0ab3495b642b5ac5e52b() {
        assertEval("{ length(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_8fe0624350dd66dc914610e9e3e473ff() {
        assertEval("{ length(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_9e576ee58a7485a487496efb447bc71e() {
        assertEval("{ length(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_15dd7cd7751d7f0ca49a90ffdd7adcd3() {
        assertEval("{ length(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_9aa44152c0aaa301d4e61860e8e3329e() {
        assertEval("{ length(1+1i) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_5f87030622796c8145f800bea19c5345() {
        assertEval("{ length(d<-dim(1:3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_269468e63a5cd6592dc8477ae86c43f7() {
        assertEval("{ length(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_e5f8864e4d2b6f979fc4290defe16267() {
        assertEval("{ x <- 1:2 ; z <- (length(x) <- 4) ; z }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_d456081defe1bac5ede62fe309160330() {
        assertEval("{ x<-c(a=7, b=42); length(x)<-4; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLength_e220727d80d0083f6b28a575dd62de95() {
        assertEval("{ x<-c(a=7, b=42); length(x)<-1; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_51c26a8220d13774c5325dc2085f1618() {
        assertEval("{ x <- 1 ; levels(x)<-\"a\"; levels(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_51f6cf406202bae702b29b921fe361b1() {
        assertEval("{ x <- 5 ; levels(x)<-\"catdog\"; levels(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_b564b429e63c911c91bc8db94aa89d0f() {
        assertEval("{ x <- 1 ; levels(x)<-NULL; levels(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_12df55f19c55d781ba430c8453f932c6() {
        assertEval("{ x <- 1 ; levels(x)<-1; levels(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_d0a86f43e4bb2b660b664bb3b6389dbe() {
        assertEval("{ x <- 1 ; levels(x)<-4.5; levels(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_43af0170cc4eea0fd0d0738181c5dc3a() {
        assertEval("{ x <- 1 ; levels(x)<-c(1); levels(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_feaabb001e0cb8df03f7be5848798557() {
        assertEval("{ x <- 5 ; levels(x)<-c(1,2,3); levels(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_8900e17291cec47d742595d19d66d169() {
        assertEval("{ x <- 1 ; levels(x)<-c(\"cat\", \"dog\"); levels(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_93213b1d33f245aacf5049287da65a3a() {
        assertEval("{ x <- 1 ; levels(x)<-c(3, \"cat\"); levels(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLevels_a57b41564aaaf1d0686f4d04c60eec94() {
        assertEval("{ x <- 1 ; levels(x)<-c(1, \"cat\", 4.5, \"3\"); levels(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testLgamma_c7dd497a27a1c37243146bb3d2b6c759() {
        assertEval("{ lgamma(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testLgamma_549f2a4a8f780a9799784dabf88b8c91() {
        assertEval("{ lgamma(100) }");
    }

    @Test
    public void TestSimpleBuiltins_testLgamma_0f90ac30eec12681e280449bd4c4da1a() {
        assertEval("{ lgamma(as.double(NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLgamma_e7cc74b6fb6ef781ed689d2c295a4f75() {
        assertEval("{ lgamma(c(100, 2.2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLgamma_fa33d65cccdd559d784d936af5f9d5db() {
        assertEval("{ lgamma(FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testLgamma_a60317b17368e8a7c062d785af03c4b5() {
        assertEvalError("{ lgamma(as.raw(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLgamma_ee1e46035160642c4b4b5a09c51ff6cf() {
        assertEvalError("{ lgamma(1+1i) }");
    }

    @Test
    public void TestSimpleBuiltins_testList_c74b9ee71e8970c28a28d0daff0eeb0f() {
        assertEval("{ list(a=1, b=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testList_905882aea8d1a0d06c1a7b1fa68efd42() {
        assertEval("{ list(a=1, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testList_3eccf067711ea3cc347de2d8588564af() {
        assertEval("{ list(1, b=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testList_253f9818561781cfb77cfc14ff3da5ba() {
        assertEval("{ x<-c(y=1, 2);  list(a=x, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testList_fe6c4308041539f9b779caa3c25fbfc7() {
        assertEval("{ x<-list(y=1, 2);  c(a=x, 42) }");
    }

    @Test
    public void TestSimpleBuiltins_testList_62081abc4c770e1bb51d360d37cadc94() {
        assertEval("{ x<-list(y=1, 2);  c(42, a=x) }");
    }

    @Test
    public void TestSimpleBuiltins_testList_9ac495270f3a395351229eb03a27261c() {
        assertEval("{ x<-list(y=1, 2);  c(a=x, c(z=7,42)) }");
    }

    @Test
    public void TestSimpleBuiltins_testList_7f6e35d21661c8d2607996e34b736525() {
        assertEval("{ x<-list(y=1, 2);  c(a=x, c(y=7,z=42)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLocal_d50a7019d4d1ef55e7a8b31373b29f6f() {
        assertEval("{ kk <- local({k <- function(x) {x*2}}); kk(8)}");
    }

    @Test
    public void TestSimpleBuiltins_testLocal_15b8e154cdc0ad21b82f8a6ca290dd48() {
        assertEval("{ ne <- new.env(); local(a <- 1, ne); ls(ne) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog_fd3ef6f859e8e0d8956abf0e2bec0c13() {
        assertEval("{ log(1) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLog_1b4ff97a47d0ed4a8f74c200941bb51d() {
        assertEval("{ log(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog_f5b2053e10cdc3ff7f3bbc2ded231629() {
        assertEval("{ log(c(0,1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog_19a1529b84641df8cd280fc3f04fdc83() {
        assertEval("{ round( log(10,), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog_11d410bde7960c23039008b176a8c6de() {
        assertEval("{ round( log(10,2), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog_55d1aea1ad49cb7388b91157708cc4fd() {
        assertEval("{ round( log(10,10), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog10_ecfc4b2a884388b0322382974493d08e() {
        assertEval("{ log10(1) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLog10_b15b2fca363331ef75efe46529aefb72() {
        assertEval("{ log10(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog10_7c91cb1360cfaaae3fa54a4bff915fc4() {
        assertEval("{ log10(c(0,1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog10_4d940d8c097ab0ad12ab89bcaec28f84() {
        assertEval("{ log10(10) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLog10_24fb260f9773853204641bd5f4dcdafb() {
        assertEval("{ log10(100) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLog10_a8854ea52706d8d97a82cc31318131e3() {
        assertEval("{ as.integer(log10(200)*100000) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLog2_cd2db08763e44c63bd85072193e4a7e5() {
        assertEval("{ log2(1) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLog2_9254be07c6ac1cad9d45feb8ec7459d6() {
        assertEval("{ log2(0) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog2_187e92c1da74959a70ddf63ed571ce27() {
        assertEval("{ log2(c(0,1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLog2_4ae6cbbe47ecaa53673148a96c985996() {
        assertEval("{ log2(2) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLog2_da7dbf3a647d0ad0dff364d19ed73536() {
        assertEval("{ log2(4) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLog2_1867c20d58519782db9911c7db59004e() {
        assertEval("{ as.integer(log2(6)*1000000) } ");
    }

    @Test
    public void TestSimpleBuiltins_testLogIgnore_052ed04e88403025c80c488866a0f346() {
        assertEval("{ m <- matrix(1:4, nrow=2) ; round( log10(m), digits=5 )  }");
    }

    @Test
    public void TestSimpleBuiltins_testLogIgnore_6568d70e4d076fc4b14b58158162a0ea() {
        assertEval("{ x <- c(a=1, b=10) ; round( c(log(x), log10(x), log2(x)), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_3a5345078701581c660c582e0464b9da() {
        assertEval("{ f <- function() { assign(\"x\", 1) ; x } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_39e78cb4d5d82c567efcfcc580f74363() {
        assertEval("{ f <- function() { x <- 2 ; g <- function() { x <- 3 ; assign(\"x\", 1, inherits=FALSE) ; x } ; g() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_548434da986ff8aa88f0f6a76e458833() {
        assertEval("{ f <- function() { x <- 2 ; g <- function() { assign(\"x\", 1, inherits=FALSE) } ; g() ; x } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_16e998e313fb51e237cac840df83519f() {
        assertEval("{ f <- function() { x <- 2 ; g <- function() { assign(\"x\", 1, inherits=TRUE) } ; g() ; x } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_9fb00dc9e429b3567af94555695cf89f() {
        assertEval("{ f <- function() {  g <- function() { assign(\"x\", 1, inherits=TRUE) } ; g() } ; f() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_0d33a9cf9cdcc65307f78d195cc549ef() {
        assertEval("{ x <- 3 ; g <- function() { x } ; f <- function() { assign(\"x\", 2) ; g() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_6a2bfceedc36d0b2ff994b5a30df433a() {
        assertEval("{ x <- 3 ; f <- function() { assign(\"x\", 2) ; g <- function() { x } ; g() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_3a86279a40eaa4f21960a2abfc0764dc() {
        assertEval("{ h <- function() { x <- 3 ; g <- function() { x } ; f <- function() { assign(\"x\", 2) ; g() } ; f() }  ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_5b652ae1ae9d60ef8850d5f3b3843f5a() {
        assertEval("{ h <- function() { x <- 3  ; f <- function() { assign(\"x\", 2) ; g <- function() { x } ; g() } ; f() }  ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_73733642fbadb8ac6edf05a8acf5d6de() {
        assertEval("{ x <- 3 ; h <- function() { g <- function() { x } ; f <- function() { assign(\"x\", 2, inherits=TRUE) } ; f() ; g() }  ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_2d61a18e5af79bced1a351870a9d514e() {
        assertEval("{ x <- 3 ; h <- function(s) { if (s == 2) { assign(\"x\", 2) } ; x }  ; h(1) ; h(2) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_492925abedef28fc7b3e0bfae9ba8a52() {
        assertEval("{ x <- 3 ; h <- function(s) { y <- x ; if (s == 2) { assign(\"x\", 2) } ; c(y,x) }  ; c(h(1),h(2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_0f7e2fdb465f6c47ae4b0a1085eea1b1() {
        assertEval("{ g <- function() { x <- 2 ; f <- function() { x ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_3780dc57c780fbb8cec9704dc7de17ed() {
        assertEval("{ g <- function() { f <- function() { if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_3ae3e1ea3a68f0a98203b1398c63a59c() {
        assertEval("{ g <- function() { f <- function() { if (FALSE) { x } ; assign(\"x\", 1) ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_1e7c2d8dd4c08474021c9e95ef2232ff() {
        assertEval("{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_1afe1fb2b81d78394742bc213196d303() {
        assertEval("{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; assign(\"x\", 2) ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_9bb2b5cc4a3c0540f6289c0c070aa49a() {
        assertEval("{ h <- function() { g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_daf243dde25f3873d1202df260bb3114() {
        assertEval("{ h <- function() { x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_5b0f9d198fb49e36c8af3be9834dabd1() {
        assertEval("{ f <- function(z) { exists(\"z\") } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_48b08b9590e75552578d0fb596c87287() {
        assertEval("{ f <- function() { x <- 3 ; exists(\"x\", inherits=FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_38aded252ff8f6a6c63dd7e8bbe684b1() {
        assertEval("{ f <- function() { z <- 3 ; exists(\"x\", inherits=FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_4ab259967887738519b4bf25c2ae70de() {
        assertEval("{ f <- function() { if (FALSE) { x <- 3 } ; exists(\"x\", inherits=FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_6a8e5da083d06d4e72430b9f3870fef2() {
        assertEval("{ f <- function() { assign(\"x\", 2) ; exists(\"x\", inherits=FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_1677e8dba1f8ac3830d985614e17644c() {
        assertEval("{ g <- function() { x <- 2 ; f <- function() { if (FALSE) { x <- 3 } ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_6aec41beabbda969b6aed4c316d4d445() {
        assertEval("{ g <- function() { x <- 2 ; f <- function() { x <- 5 ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_3a3976ee840d8ae83ac739ddc0f60bf6() {
        assertEval("{ g <- function() { f <- function() { assign(\"x\", 3) ; if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_c89981601d0bb40314d41b0df22de379() {
        assertEval("{ g <- function() { f <- function() { assign(\"z\", 3) ; if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_615e5eabb7122045650a11c6e8e1b14a() {
        assertEval("{ h <- function() { assign(\"x\", 1) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_4d5704d9f1b90efda2c59502caa0c315() {
        assertEval("{ h <- function() { assign(\"z\", 1) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_a7f5ec2e61d3f25ff85aeb7cf82b97f0() {
        assertEval("{ h <- function() { x <- 3 ; g <- function() { f <- function() { if (FALSE) { x } ; exists(\"x\") }  ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_56f22eb0a023e8f286f44ce532f7dd73() {
        assertEval("{ x <- 3 ; f <- function() { exists(\"x\") } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_6ee73db0e1b11e0b48199609cb7170b1() {
        assertEval("{ x <- 3 ; f <- function() { exists(\"x\", inherits=FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_1b704057d0a3b32717c4812143a5f57f() {
        assertEval("{ x <- 2 ; y <- 3 ; rm(\"y\") ; ls() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_5f9149f4bb0770f64df8392c8f0f1560() {
        assertEval("{ f <- function() { if (FALSE) { x <- 1 } ; y <- 2 ; ls() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_9f7ce37cec840951bd4c5c058fa11af0() {
        assertEval("{ f <- function() { for (i in rev(1:10)) { assign(as.character(i), i) } ; ls() } ; length(f()) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_6d315a9f02daf4ce58004586f3de768e() {
        assertEval("{ x <- 3 ; f <- function() { assign(\"x\", 4) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f2bb3dcedd62406c5e49354fc09e0aa8() {
        assertEval("{ x <- 3 ; f <- function() { assign(\"x\", 4) ; g <- function() { assign(\"y\", 3) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x } ; h() } ; g()  } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_18db76eaec1c42a5a710f01e49b79444() {
        assertEval("{ f <- function() { assign(\"x\", 2, inherits=TRUE) ; assign(\"x\", 1) ; h <- function() { x } ; h() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_30309b638e880e9d3cfbde105cc95686() {
        assertEval("{ x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x } ; h() } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_d83ca8b14b8ce96aab4d3c068cc01d37() {
        assertEval("{ x <- 3 ; gg <- function() {  g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x } ; h() } ; f() } ; g() } ; gg() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_78b53abedd804defaf12eb15b203d3c6() {
        assertEval("{ h <- function() { x <- 2 ; f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_324112969e78fa9f195b1551bbe8e4b2() {
        assertEval("{ f <- function() { assign(\"x\", 3) ; g <- function() { x } ; g() } ; x <- 10 ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_ae7740eaeaefe74759fbc829bade39e0() {
        assertEval("{ f <- function() { assign(\"x\", 3) ; h <- function() { assign(\"z\", 4) ; g <- function() { x } ; g() } ; h() } ; x <- 10 ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_75c39aaa83d4cde89f3f39d408e4504d() {
        assertEval("{ f <- function() { assign(\"x\", 3) ; h <- function() { g <- function() { x } ; g() } ; h() } ; x <- 10 ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f229f5696856e7d097d3e2b6cd84ad7e() {
        assertEval("{ f <- function() { assign(\"x\", 1) ; g <- function() { assign(\"z\", 2) ; x } ; g() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_d41ff44d767d83bfd35007621e1eac60() {
        assertEval("{ h <- function() { x <- 3 ; g <- function() { assign(\"z\", 2) ; x } ; f <- function() { assign(\"x\", 2) ; g() } ; f() }  ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_d966bf2f7931aa1107f571930d7c5741() {
        assertEval("{ h <- function() { x <- 3 ; g <- function() { assign(\"x\", 5) ; x } ; f <- function() { assign(\"x\", 2) ; g() } ; f() }  ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_e602c31474de55d9faf2ff34075b7cfb() {
        assertEval("{ x <- 10 ; g <- function() { x <- 100 ; z <- 2 ; f <- function() { assign(\"z\", 1); x <- x ; x } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f2d9a62ccea6f97320c4b9dcb3db8dcb() {
        assertEval("{ g <- function() { if (FALSE) { x <- 2 ; y <- 3} ; f <- function() { if (FALSE) { x } ; assign(\"y\", 2) ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_23d1c3aae3a7b25d923ab1a04acdcc5a() {
        assertEval("{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign(\"x\", 2) ; exists(\"x\") }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_c6c8e0f9c3bbb80af43935eacb608104() {
        assertEval("{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign(\"x\", 2) ; h <- function() { exists(\"x\") } ; h() }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_c5d265d6092f4dd023538cd02e7f1bc9() {
        assertEval("{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign(\"y\", 2) ; h <- function() { exists(\"x\") } ; h() }  ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_c0a2d99911ad04c0e8587f08a546f0fa() {
        assertEval("{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign(\"x\", 2) ; gg <- function() { h <- function() { exists(\"x\") } ; h() } ; gg() } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_e89d9d3f7ae96ba78c6773593f947412() {
        assertEval("{ x <- 3 ; f <- function(i) { if (i == 1) { assign(\"x\", 4) } ; function() { x } } ; f1 <- f(1) ; f2 <- f(2) ; f1() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_e1b77ad90ab35bc1e2c43c6082cc3eab() {
        assertEval("{ x <- 3 ; f <- function(i) { if (i == 1) { assign(\"x\", 4) } ; function() { x } } ; f1 <- f(1) ; f2 <- f(2) ; f2() ; f1() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_4e6bde1abd5de65801380cf42006b6cc() {
        assertEval("{ f <- function() { x <- 2 ; g <- function() { if (FALSE) { x <- 2 } ; assign(\"x\", 1, inherits=TRUE) } ; g() ; x } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_e1d9cbe74522cc75d4891616afca4c9d() {
        assertEval("{ h <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; g <- function() { assign(\"z\", 3) ; if (FALSE) { x <- 4 } ;  f <- function() { exists(\"x\") } ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_47089dcda7fca6ff9b671c7e318eb58f() {
        assertEval("{ f <- function(x) { assign(x, 23) ; exists(x) } ; c(f(\"a\"),f(\"b\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_60546b187f8a5219bf72536c8824dab6() {
        assertEval("{ f <- function() { x <- 2 ; get(\"x\") } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f6a5f0c10480af1d2547ce0768efd58f() {
        assertEval("{ x <- 3 ; f <- function() { get(\"x\") } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_81780ae1edf74a449351bc1cc7bf5e99() {
        assertEval("{ x <- 3 ; f <- function() { x <- 2 ; get(\"x\") } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_db082090d084c963d4553b4120231e83() {
        assertEval("{ x <- 3 ; f <- function() { x <- 2; h <- function() {  get(\"x\") }  ; h() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_339a4adbc575c5f1423bd5477c48e02b() {
        assertEval("{ f <- function() { g <- function() { get(\"x\", inherits=TRUE) } ; g() } ; x <- 3 ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_aaaf86fd401db53b800026b8eb4724ce() {
        assertEval("{ f <- function() { assign(\"z\", 2) ; g <- function() { get(\"x\", inherits=TRUE) } ; g() } ; x <- 3 ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_be81c769a08855b15887cc765467b5e5() {
        assertEval("{ f <- function() { x <- 22 ; get(\"x\", inherits=FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_5dd4780ce6e2667b02ccb16a838a7057() {
        assertEval("{ x <- 33 ; f <- function() { assign(\"x\", 44) ; get(\"x\", inherits=FALSE) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_ddb48b4bb7fa157390e03b1f4822a35b() {
        assertEval("{ g <- function() { if (FALSE) {y <- 3; x <- 2} ; f <- function() { assign(\"x\", 2) ; gg <- function() { h <- function() { get(\"x\") } ; h() } ; gg() } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_2d20392fa0238bebf581e87c3ae5e40b() {
        assertEval("{ x <- function(){3} ; f <- function() { assign(\"x\", function(){4}) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x() } ; h() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_a0d2460a2e8d29a01faad9f15a7300ac() {
        assertEval("{ f <- function() { assign(\"x\", function(){2}, inherits=TRUE) ; assign(\"x\", function(){1}) ; h <- function() { x() } ; h() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_2909415dd11417ff5c2c2f2d8c31723e() {
        assertEval("{ x <- function(){3} ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f7ec9350e3e49b28cda6909084c5230f() {
        assertEval("{ x <- function(){3} ; gg <- function() {  g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_45a53720348ebc4d67c11a38c334bfeb() {
        assertEval("{ h <- function() { x <- function(){2} ; f <- function() { if (FALSE) { x <- 1 } ; g <- function() { x } ; g() } ; f() } ; z <- h() ; z() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f47389c544ecea804ef4bbcdbdddd787() {
        assertEval("{ h <- function() { g <- function() {4} ; f <- function() { if (FALSE) { g <- 4 } ; g() } ; f() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f1b20896d2c392017c0654d07d5e398b() {
        assertEval("{ h <- function() { assign(\"f\", function() {4}) ; f() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_4eb6105ac5a6aed8ae0b1b7faf6d66c9() {
        assertEval("{ f <- function() { 4 } ; h <- function() { assign(\"f\", 5) ; f() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_52bac7c5c3cb46bc9622cbfc09f2bc6b() {
        assertEval("{ f <- function() { 4 } ; h <- function() { assign(\"z\", 5) ; f() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f7462e1b64e98cc4342dbd4bdba53a77() {
        assertEval("{ gg <- function() {  assign(\"x\", function(){11}) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_7ccbe91c968b460f891aa1e191584ae2() {
        assertEval("{ x <- function(){3} ; gg <- function() { assign(\"x\", 4) ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x() } ; h() } ; f() } ; g() } ; gg() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_87c7111434f45f87d7319f771a86725e() {
        assertEval("{ h <- function() { x <- function() {3} ; g <- function() { assign(\"z\", 2) ; x } ; f <- function() { assign(\"x\", 2) ; g() } ; f() }  ; z <- h() ; z() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_6091ece90f56a846f7bad3990789920d() {
        assertEval("{ h <- function() { x <- function() {3} ; g <- function() { assign(\"x\", function() {5} ) ; x() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_de6ad73e27aa42d2a1c28e095d312b61() {
        assertEval("{ h <- function() { z <- 3 ; x <- function() {3} ; g <- function() { x <- 1 ; assign(\"z\", 5) ; x() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_6ba1690b3bf1582ad21a41b4aa7cade9() {
        assertEval("{ h <- function() { x <- function() {3} ; gg <- function() { assign(\"x\", 5) ; g <- function() { x() } ; g() } ; gg() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_ac90cce2345fd5bf30230331ed0d7db5() {
        assertEval("{ h <- function() { z <- 2 ; x <- function() {3} ; gg <- function() { assign(\"z\", 5) ; g <- function() { x() } ; g() } ; gg() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_003c1247fa6a427b0135d9e892c80f28() {
        assertEval("{ h <- function() { x <- function() {3} ; g <- function() { assign(\"x\", function() {4}) ; x() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_111cf7d36f024022a02d162c42fc40bd() {
        assertEval("{ h <- function() { z <- 2 ; x <- function() {3} ; g <- function() { assign(\"z\", 1) ; x() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_53723d83f879f9403ce15de376c091eb() {
        assertEval("{ x <- function() { 3 } ; h <- function() { if (FALSE) { x <- 2 } ;  z <- 2  ; g <- function() { assign(\"z\", 1) ; x() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_d015a488b299b2257ba745357ad94008() {
        assertEval("{ x <- function() { 3 } ; h <- function() { g <- function() { f <- function() { x <- 1 ; x() } ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_d7019c82bbbda92b379335a1d2354896() {
        assertEval("{ h <- function() { myfunc <- function(i) { sum(i) } ; g <- function() { myfunc <- 2 ; f <- function() { myfunc(2) } ; f() } ; g() } ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_12172006720445a9282465095e950a98() {
        assertEval("{ x <- function() {11} ; g <- function() { f <- function() { assign(\"x\", 2) ; x() } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_a733251bb5b3310685899a2e93b53f4a() {
        assertEval("{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign(\"x\", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f1() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f3882a86c6251ac810356b60b0e51d56() {
        assertEval("{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign(\"x\", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f2() ; f1() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_5282ed3905bf098d2a7e10398d20b473() {
        assertEval("{ x <- function() {3} ; f <- function(i) { if (i == 1) { assign(\"x\", function() {4}) } ; function() { x() } } ; f1 <- f(1) ; f2 <- f(2) ; f1() ; f2() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_14f99f57844c42586b995c05bb9a1ea3() {
        assertEval("{ x <- 3 ; g <- function() { if (FALSE) { x <- 2 } ; f <- function() { h <- function() { x ; hh <- function() { x <<- 4 } ; hh() } ; h() } ; f() } ; g() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_786bcc90eafc890d1a4b6bed053ad73a() {
        assertEval("{ f <- function() { x <- 1 ; g <- function() { h <- function() { x <<- 2 } ; h() } ; g() ; x } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_8b36fb11373ffcb6297193370232ae16() {
        assertEval("{ g <- function() { if (FALSE) { x <- 2 } ; f <- function() { assign(\"x\", 4) ; x <<- 3 } ; f() } ; g() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_7e7c1d01be25a13c8d5699c87a856b60() {
        assertEval("{ g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { if (FALSE) { x <- 1 } ; assign(\"z\", 10) ; f <- function() { assign(\"x\", 4) ; x <<- 3 } ; f() } ; h() } ; g() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f0114d38bafb636ba6a61ca6429641fc() {
        assertEval("{ gg <- function() { assign(\"x\", 100) ; g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { if (FALSE) { x <- 1 } ; assign(\"z\", 10) ; f <- function() { assign(\"x\", 4) ; x <<- 3 } ; f() } ; h() } ; g() } ; x <- 10 ; gg() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_5426ebb4d5aeea5d12cbe2bdcf8e0dbe() {
        assertEval("{ gg <- function() { if (FALSE) { x <- 100 } ; g <- function() { if (FALSE) { x <- 100 } ; h <- function() { f <- function() { x <<- 3 } ; f() } ; h() } ; g() } ; x <- 10 ; gg() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_b831c18619a7befa072aec4032bd1dac() {
        assertEval("{ g <- function() { if (FALSE) { x <- 2 ; z <- 3 } ; h <- function() { assign(\"z\", 10) ; f <- function() { x <<- 3 } ; f() } ; h() } ; g() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_395e80de24e62b38db1e3d5060112adf() {
        assertEval("{ g <- function() { x <- 2 ; z <- 3 ; hh <- function() { assign(\"z\", 2) ; h <- function() { f <- function() { x <<- 3 } ; f() } ; h() } ; hh() } ; x <- 10 ; g() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_ffd862131767a28190fc8acc7a56c8ef() {
        assertEval("{ g <- function() { x <- 2 ; z <- 3 ; hh <- function() { assign(\"z\", 2) ; h <- function() { assign(\"x\", 1); f <- function() { x <<- 3 } ; f() } ; h() } ; hh() ; x } ; x <- 10 ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_550606f41244ab5b72ac0d403f76be03() {
        assertEval("{ x <- 3 ; f <- function(i) { if (i == 1) { assign(\"x\", 4) } ; function(v) { x <<- v} } ; f1 <- f(1) ; f2 <- f(2) ; f1(10) ; f2(11) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_6a487bd0ec6e3ba9cf00d0bfc3636608() {
        assertEval("{ x <- 3 ; f <- function(i) { if (i == 1) { assign(\"x\", 4) } ; function(v) { x <<- v} } ; f1 <- f(1) ; f2 <- f(2) ; f2(10) ; f1(11) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_2865497f22f615139b2590662d15a2cb() {
        assertEval("{ x <- 3 ; f <- function() { assign(\"x\", 4) ; h <- function(s=1) { if (s==2) { x <- 5 } ; x <<- 6 } ; h() ; get(\"x\") } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_25848b87f12bed3b5c48ec094616f48b() {
        assertEval("{ x <- 3 ; f <- function() { assign(\"x\", 4) ; hh <- function() { if (FALSE) { x <- 100 } ; h <- function() { x <<- 6 } ; h() } ; hh() ; get(\"x\") } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_fab0f3eded79eede99bca42c84977de5() {
        assertEval("{ assign(\"z\", 10, inherits=TRUE) ; z }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_2b36458da0b28ae1a46b3e3404e77bb2() {
        assertEval("{ exists(\"sum\", inherits = FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_1b9568eed30d48488f00c0eef8b9866f() {
        assertEval("{ x <- 1; exists(\"x\", inherits = FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_bf436a43a6caacd418317cd684d67d8e() {
        assertEvalAlt("{ f <- function() { assign(\"x\", 1) ; y <- 2 ; ls() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_23454b3e47dfe4aa28afa243683df359() {
        assertEvalAlt("{ f <- function() { x <- 1 ; y <- 2 ; ls() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_f5b6d5670ee3679c2214a7720ed4f5e9() {
        assertEvalAlt("{ f <- function() { assign(\"x\", 1) ; y <- 2 ; if (FALSE) { z <- 3 } ; ls() } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_3f6070106221293533a2b2c1eab24f36() {
        assertEvalAlt("{ fu <- function() { uu <<- 23 } ; fu() ; ls(globalenv()) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_d2b207ebaf757535786aa553fb1fe90a() {
        assertEvalError("{ x <- 2 ; rm(\"x\") ; get(\"x\") }");
    }

    @Test
    public void TestSimpleBuiltins_testLookup_72bcfb2ecee83734cf418b9ff1c34f8c() {
        assertEvalError("{ get(\"x\") }");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_7e5d40be5a03aac06880b44eefa7d94b() {
        assertEval("{ f <- function(z) { exists(\"z\") } ; f(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_7623faf4c356905dacd205a8b10eac15() {
        assertEval("{ g <- function() { assign(\"myfunc\", function(i) { sum(i) });  f <- function() { lapply(2, \"myfunc\") } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_2c371d6a6d4b74a871402788dbf16cf8() {
        assertEval("{ myfunc <- function(i) { sum(i) } ; g <- function() { assign(\"z\", 1);  f <- function() { lapply(2, \"myfunc\") } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_fc0e56627d1b08ab2d6c38875a68a1f0() {
        assertEval("{ g <- function() { f <- function() { assign(\"myfunc\", function(i) { sum(i) }); lapply(2, \"myfunc\") } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_2deae78feff592acd7d61159c8e39ea7() {
        assertEval("{ g <- function() { myfunc <- function(i) { i+i } ; f <- function() { lapply(2, \"myfunc\") } ; f() } ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_48d8f6c2d2586ee471cfa0421ea5b4ae() {
        assertEval("{ exists(\"sum\") }");
    }

    @Test
    public void TestSimpleBuiltins_testLowerTriangular_d0f253a7c6e1e06bb5cf39dbff9f01da() {
        assertEval("{ m <- matrix(1:6, nrow=2) ;  lower.tri(m, diag=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testLowerTriangular_0ba0d133686dd0481614017fbd5e5b41() {
        assertEval("{ m <- matrix(1:6, nrow=2) ;  lower.tri(m, diag=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testLowerTriangular_44ba325a12bc689011ed5350658dabb6() {
        assertEval("{ lower.tri(1:3, diag=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testLowerTriangular_29e7f74c119f3fd2dff006792c5fa9a1() {
        assertEval("{ lower.tri(1:3, diag=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testLsRegExp_ea6259b64ec7536a38aff447c4ac85cf() {
        assertEval("{ abc <- 1; ls(pattern=\"a.*\")}");
    }

    @Test
    public void TestSimpleBuiltins_testLsRegExp_bd83c230c6694eaca0a5f2ec59a37f01() {
        assertEval("{ .abc <- 1; ls(pattern=\"\\\\.a.*\")}");
    }

    @Test
    public void TestSimpleBuiltins_testLsRegExp_de069454f973c232710c2184078d0cf4() {
        assertEval("{ .abc <- 1; ls(all.names=TRUE, pattern=\"\\\\.a.*\")}");
    }

    @Test
    public void TestSimpleBuiltins_testLsRegExp_aa73d43ff12912fb7bbac53a3c60e4aa() {
        assertEval("{ abc <- 1; ls(pattern=\"[[:alpha:]]*\")}");
    }

    @Test
    public void TestSimpleBuiltins_testLsRegExp_b636b2bf5292cac1ed708fea3076eb38() {
        assertEval("{ f <- function(abc) { ls(pattern=\"[a-z]*\") }; f(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMGet_047f5d5f86d293c4633a1d1066be1389() {
        assertEval("{ a<- 1; b <- 2; mget(c(\"a\", \"b\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMGet_bcdb86b020d3b1e7e0ebac5b2f5dfb1a() {
        assertEval("{ a<- 1; b <- 2; f <- function() { mget(c(\"a\", \"b\"), inherits=TRUE)}; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMGet_de1e2a4964bedbbb1814ec8471b27a0a() {
        assertEval("{ a<- 1; mget(c(\"a\", \"b\"), ifnotfound=list(100)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMGet_4dbe3b9536c7d676d806e65cb763a9f6() {
        assertEval("{ b <- 2; f <- function() { mget(c(\"a\", \"b\"), ifnotfound=list(100), inherits=TRUE)}; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMGet_d36a9c0eb6e23682c42047e6f9bd96e4() {
        assertEval("{ mget(c(\"a\", \"b\"), ifnotfound=list(100, 200)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMGet_9680eb75dc23fcf5940df3082a80c48d() {
        assertEval("{ a<- 1; b <- 2; mget(c(\"a\", \"b\"), mode=\"numeric\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMGet_0a7ec86b13299e2a36613eaaa051747e() {
        assertEval("{ a<- 1; b <- \"2\"; mget(c(\"a\", \"b\"), mode=c(\"numeric\", \"character\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_991d7bbd65a2bc1ac3888d143e33b98c() {
        assertEval("{ make.names(7) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_d80e5076739f6e36138f72185af5577b() {
        assertEval("{ make.names(\"a_a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_501809726044c52876eebff1ac39dfd4() {
        assertEval("{ make.names(\"a a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_759bfb21adf8facabc541fae171e2d2f() {
        assertEval("{ make.names(\"a_a\", allow_=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_50dccfe38b217521d15b79e03b87c971() {
        assertEval("{ make.names(\"a_a\", allow_=7) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_1f668ec55e1e7c56226938606bbcdd9a() {
        assertEval("{ make.names(\"a_a\", allow_=c(7,42)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_84ac5f4e754f186a0e2ca5d70c23feb1() {
        assertEval("{ make.names(\"...7\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_0622f61c0d0e4aa0fe896b709b1cd390() {
        assertEval("{ make.names(\"..7\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_32dec57a873b0002305061ee8f9d2d9f() {
        assertEval("{ make.names(\".7\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_3204f2fcbf81ee713f96d9e6fcb3c8f2() {
        assertEval("{ make.names(\"7\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_0875b78af370740cc6c76c447724d39f() {
        assertEval("{ make.names(\"$\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_8dfc0f88f3ea6d6b1304f3f12af7806d() {
        assertEval("{ make.names(\"$_\", allow_=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_cdef042d3598eb37b7af97df950185af() {
        assertEval("{ make.names(\"else\")}");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_5762fb7449ccb927de95a94a605a7271() {
        assertEval("{ make.names(\"NA_integer_\", allow_=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_346ccadec78e9d845e08d211a0b65d78() {
        assertEvalError("{ make.names(\"a_a\", allow_=\"a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_df3cc27bd48b4cf1f30caeb6bf0b9562() {
        assertEvalError("{ make.names(\"a_a\", allow_=logical()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeNames_5a026d3e82301fdffb01cfdb35b04a52() {
        assertEvalError("{ make.names(\"a_a\", allow_=NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeUnique_62ac20f1454b37454233f3b4d05ecdb6() {
        assertEval("{ make.unique(\"a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeUnique_2872ed87ce979cb698e11275f2bce71f() {
        assertEval("{ make.unique(character()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeUnique_76ed69981fbc88dcbfe1260fc0d4a5cd() {
        assertEval("{ make.unique(c(\"a\", \"a\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeUnique_b6645e4fad590727d29c1b251836245d() {
        assertEval("{ make.unique(c(\"a\", \"a\", \"a\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeUnique_f98291a0d8c0379b4bd648241846e1b3() {
        assertEval("{ make.unique(c(\"a\", \"a\"), \"_\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeUnique_9c6ba926d8d7d398dc604d8921cd538b() {
        assertEvalError("{ make.unique(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeUnique_43631fc312aef5bc2704d8dfab5297c3() {
        assertEvalError("{ make.unique(\"a\", 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMakeUnique_086c856c69860f19c99ad95a4fb67875() {
        assertEvalError("{ make.unique(\"a\", character()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMult_c8d5c07bcbeefe8fbf58f325e98839ea() {
        assertEval("{ matrix(c(1,2,3,4), 2) %*% matrix(c(5,6,7,8), 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMult_bedda33e4997623d48c6fd5ea86d246b() {
        assertEval("{ matrix(c(3,1,2,0,1,2), 2) %*% matrix(c(1,0,4,2,1,0), 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMult_ec58a2e9592b539ca35489dc82886b98() {
        assertEval("{ c(1,2,3) %*% c(4,5,6) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMult_72c9ce920307ef19fc90624bd208d362() {
        assertEval("{ matrix(c(3,1,2,0,1,2),2) %*% c(1,0,4) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMult_65f058b7196ede745a341d316b0097a3() {
        assertEval("{ c(1,0,4) %*% matrix(c(3,1,2,0,1,2),3) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMult_54cb220edcef0e3e4aaea1e10c57a1e9() {
        assertEval("{ as.vector(c(1,2,3)) %*% t(as.vector(c(1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMultIgnore_e9ba9d6fa9abe7cec2ddbabcc73934ca() {
        assertEval("{ matrix(c(1+1i,2-2i,3+3i,4-4i), 2) %*% matrix(c(5+5i,6-6i,7+7i,8-8i), 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMultIgnore_864ab8a27b006789bddc33fbf08a681d() {
        assertEval("{ matrix(c(3+3i,1-1i,2+2i,0-0i,1+1i,2-2i), 2) %*% matrix(c(1+1i,0-0i,4+4i,2-2i,1+1i,0-0i), 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMultIgnore_2a28fb03fdd28d0687ea97640678c7c5() {
        assertEval("{ c(1+1i,2-2i,3+3i) %*% c(4-4i,5+5i,6-6i) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMultIgnore_500c9fe5e23232d488b23dea0ffe60e6() {
        assertEval("{ matrix(c(3+3i,1-1i,2+2i,0-0i,1+1i,2-2i),2) %*% c(1+1i,0-0i,4+4i) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatMultIgnore_bd7d1161309480785b4881fa0f001408() {
        assertEval("{ c(1+1i,0-0i,4+4i) %*% matrix(c(3+3i,1-1i,2+2i,0-0i,1+1i,2-2i),3) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatch_048ab83fbf746ab7b0de92f083754c50() {
        assertEval("{ match(2,c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatch_4b9c00763f8d3b8f32effe9cf00561c6() {
        assertEval("{ match(c(1,2,3,4,5),c(1,2,1,2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatch_939487ea836b5aac7a33fa6875c20339() {
        assertEval("{ match(\"hello\",c(\"I\", \"say\", \"hello\", \"world\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatch_354af2561e4e24ce3b2b61b15e126ce8() {
        assertEval("{ match(c(\"hello\", \"say\"),c(\"I\", \"say\", \"hello\", \"world\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatch_e99b3942dd461cd293910d613ffc1cd5() {
        assertEval("{ match(\"abc\", c(\"xyz\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatch_37d62ec656f066150fca5b9850d0ff44() {
        assertEval("{ match(\"abc\", c(\"xyz\"), nomatch=-1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatchCall_a0448ccc47d09e1ad95ea97342b088e9() {
        assertEval("{ f <- function() match.call() ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMatchCall_b16970ba5a0fdc6cac07900fcdcf214b() {
        assertEval("{ f <- function(x) match.call() ; f(2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatchFun_4dc251ff1db19e52f20841e136754b32() {
        assertEval("{ f <- match.fun(length) ; f(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatchFun_7b0c6121c55cb44b95fec61ca90379e6() {
        assertEval("{ f <- match.fun(\"length\") ; f(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatchFun_f0b1d6b8900072300d4205a1af315a5c() {
        assertEval("{ f <- function(x) { y <- match.fun(x) ; y(c(1,2,3)) } ; c(f(\"sum\"),f(\"cumsum\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatchFun_b060469f6289b6abdddbe023b5919310() {
        assertEval("{ f <- function(x) { y <- match.fun(x) ; y(3,4) } ; c(f(\"+\"),f(\"*\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMathGroupDispatch_57978187b149ddf9005b6c849344dd87() {
        assertEval("{x<--7;class(x)<-\"foo\";Math.foo<-function(z){x};abs(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testMathGroupDispatch_ad215960ccb58ec845be1e3c241ff6b5() {
        assertEval("{x<--7;class(x)<-\"foo\";Math.foo<-function(z){-z;};log(x);}");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_161cd1f480d4e35750cd366a097e5dc9() {
        assertEval("{ matrix(c(1,2,3,4),2,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_d1e196f6c31ca607820acf1269711ac2() {
        assertEval("{ matrix(as.double(NA),2,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_7da256d3445817db926f36c119414bde() {
        assertEval("{ matrix(\"a\",10,10) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_1ce1dab3390cacefa841400b37b0d20c() {
        assertEval("{ matrix(c(\"a\",NA),10,10) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_e23499bab4d503ddb354e5bd66c22e08() {
        assertEval("{ matrix(1:4, nrow=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_94213eef23a62612694d36caa8a534f2() {
        assertEval("{ matrix(c(1,2,3,4), nrow=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_186bd3d23aff9a5a2f99c0085331c535() {
        assertEval("{ matrix(c(1+1i,2+2i,3+3i,4+4i),2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_0eae53e6a046f7679e50f8660579fac4() {
        assertEval("{ matrix(nrow=2,ncol=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_f7e2a87a6677d6b7b701176c6c9e1036() {
        assertEval("{ matrix(1:4,2,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_a7247bc1f1726ae687962cfda709230e() {
        assertEval("{ matrix(1i,10,10) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_fa8d853982879fcc896086fe6addfb0f() {
        assertEval("{ matrix(c(1i,NA),10,10) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_9e26083c44caa7c52f4f651cad7b0af3() {
        assertEval("{ matrix(c(10+10i,5+5i,6+6i,20-20i),2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_cc0dd296841e5af699ac9efbf0121ed3() {
        assertEval("{ matrix(c(1i,100i),10,10) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_402033894bb2a2ce218b8a207b844de6() {
        assertEval("{ matrix(1:6, nrow=3,byrow=TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_9eb828b99a97c6eb2b7d11e197d6fff9() {
        assertEval("{ matrix(1:6, nrow=3,byrow=1)}");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_a93589446f5db7ac853a8e5bf7ea0c70() {
        assertEval("{ matrix(1:6, nrow=c(3,4,5),byrow=TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_26e45f663226ee97b00808f83f64d614() {
        assertEval("{ matrix(1:6)}");
    }

    @Test
    public void TestSimpleBuiltins_testMatrix_be6dc40411a553fedf564db70f76d78c() {
        assertEval("{ matrix(1:6, ncol=3:5,byrow=TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testMatrixIgnore_b8b7fe21147f05355c681ebdcad2082c() {
        assertEval("{ matrix(c(NaN,4+5i,2+0i,5+10i)} ");
    }

    @Test
    public void TestSimpleBuiltins_testMatrixIgnore_1fb1b5745bcee5d420963eac101e5666() {
        assertEval("{ matrix(TRUE,FALSE,FALSE,TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testMatrixIgnore_f5dba0a59ab80b80d211e6e6fee198de() {
        assertEvalWarning("{ matrix(c(1,2,3,4),3,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrixIgnore_8daf811c43e5de9f9027463997632ce6() {
        assertEvalWarning("{ matrix(1:4,3,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMatrixTypeCheck_4fd07ac0cbdac7dacc769f299c704ef6() {
        assertEval("{ is.matrix(as.matrix(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_6bbb1dbae8964defa9b0e785d0ac9cd5() {
        assertEval("{ max((-1):100) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_d580679bd9053630b2db6a60f993be5e() {
        assertEval("{ max(2L, 4L) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_fad6482964d100a864f0587674fff019() {
        assertEval("{ max(1:10, 100:200, c(4.0, 5.0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_67028ce1d012a29cd084587929b5357f() {
        assertEval("{ max(NA, 1.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_1401ab6880480bc0bfdfb16fd5a6cb03() {
        assertEval("{ max(0/0, 1.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_fa8a0ebb03805a91e975af1f47332f9e() {
        assertEval("{ max(0/0, 1.1, NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_ca8852af18d1f90e2800ccf2954b12d8() {
        assertEval("{ max(c(as.character(NA), \"foo\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_9669c97c2ea4e1d1253ad005c5ca32c9() {
        assertEval("{ max(1:10, 100:200, c(4.0, 5.0), c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_dc0861ab168a5dfb771bd75705f64484() {
        assertEval("{ max(c(\"hi\",\"abbey\",\"hello\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_05c8d18859b5c967c43445aa5d36985c() {
        assertEval("{ max(\"hi\",\"abbey\",\"hello\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_920b2f6dac1ade728c1ff9467f759a52() {
        assertEval("{ is.logical(max(TRUE, FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_3ab05fdc89f943d144728d7a542257f2() {
        assertEval("{ is.logical(max(TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_bc1bc0a527d332a102840917c9fb6c45() {
        assertEval("{ max(\"42\", \"7\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_e15a02fcf6c464e8c7b2a97349eb527f() {
        assertEval("{ max(as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_18015584876e133dd075b60a59902c63() {
        assertEval("{ max(as.double(NA), as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_2b36f1d9f9bea20709ef36f5bdb44786() {
        assertEval("{ max(as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_c856510c795f71b803f85b9d56ad211e() {
        assertEval("{ max(as.integer(NA), as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_07bcdc2f051c96b5500242cddb262b26() {
        assertEval("{ max(as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_193067b75eda0b417bae6194c6ca2be5() {
        assertEval("{ max(as.character(NA), as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_f10d3fb7a81a009eb7c9546d8f4df07b() {
        assertEval("{ max(42L, as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_2067c5f27b8858b4ab0da562b0d5541f() {
        assertEval("{ max(42L, as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_ee0de0e77cb666bcfa5000fddb01efb2() {
        assertEval("{ max(42, as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_4f3fc8bea1494255303f1b0c316d5d10() {
        assertEval("{ max(42, as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_009bf836d27a2876b8b1cd9842b67bf0() {
        assertEval("{ max(\"42\", as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_1618739767a9ce93cffd3d20947561ff() {
        assertEval("{ max(\"42\", as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_3edb817a778d13f6663cc6ecb8fcfc46() {
        assertEval("{ max(42L, as.integer(NA), 7L, na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_787076a058937b80f6366382978bbea5() {
        assertEval("{ max(42L, as.integer(NA), 7L, na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_5e9d127b016b30b46cd295fb11f298bd() {
        assertEval("{ max(42, as.double(NA), 7, na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_4167033431d14412d99fe30ba9df7cb3() {
        assertEval("{ max(42, as.double(NA), 7, na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_cf9fcbabaf666f8d2d2f7ffafc67ab62() {
        assertEval("{ max(\"42\", as.character(NA), \"7\", na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_0e398066f1ac666284d53043f4feb14e() {
        assertEval("{ max(\"42\", as.character(NA), \"7\", na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_5e6479a2a6452ee70ccf9c41cef980b1() {
        assertEval("{ max(as.character(NA), as.character(NA), \"42\", na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_ff3b6fdb41d5de0a5783d292d154bd0a() {
        assertEval("{ max(as.character(NA), as.character(NA), \"42\", \"7\", na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_f5adf3eb65411f16da79fcd519585f41() {
        assertEval("{ max(123, NA, TRUE, 12, FALSE, na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_e9c2a4fbc3eed59f75b571edfa22fd88() {
        assertEval("{ max(123, NA, TRUE, 12, FALSE, na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_e0b736d0d8c6f4e5b43783e862af2811() {
        assertEval("{ max(123, NA, TRUE, 12, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_fb36815b5b8996417de7e952ad295967() {
        assertEvalError("{ max(as.raw(42), as.raw(7)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_296967288f7219a5ce89ea1010d2e45f() {
        assertEvalError("{ max(42+42i, 7+7i) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_bc432220dfa79d23e7855e16bba7c766() {
        assertEvalWarning("{ max() }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_5bea1c9df35520b85854f4f77f84e5aa() {
        assertEvalWarning("{ max(character(0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_ef6fb93bd374b47058fa29f041ae199a() {
        assertEvalWarning("{ max(character()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_6949aa554e71a1d238acc326a274263d() {
        assertEvalWarning("{ max(integer(0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_4c556671577c0837cd5cc3cacb3ae650() {
        assertEvalWarning("{ max(integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_e615f23762c1c900caf39dae1bc79fa7() {
        assertEvalWarning("{ max(double(0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_549f14537efa9646314e576ef6b0662c() {
        assertEvalWarning("{ max(double()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_23aa639b4adc6f6f527d3865a6d1d9e4() {
        assertEvalWarning("{ max(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_05875616cdd99d66296e18f3c1479797() {
        assertEvalWarning("{ max(as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_b7c05126df11e142c0e794af9a2d7c1b() {
        assertEvalWarning("{ max(as.double(NA), as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_44d80d06febc50cb8a2f75e4a7cff700() {
        assertEvalWarning("{ max(as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_61f1b21a542fddfde846fcea3a827f75() {
        assertEvalWarning("{ max(as.integer(NA), as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_d974f643a331234bf69a1c457bfbe8e1() {
        assertEvalWarning("{ max(as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMaximum_f51cb5ac1cd4d565f05d38ee72d99b7d() {
        assertEvalWarning("{ max(as.character(NA), as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMean_e4e4a8783ee77120a7aa47998e394318() {
        assertEval("{ mean(c(5,5,5,5,5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMean_6dd208342193df93abc50817a746b98b() {
        assertEval("{ mean(c(1,2,3,4,5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMean_6973b0e92f4745b2f07972fb623fc6e4() {
        assertEval("{ mean(c(2,4))}");
    }

    @Test
    public void TestSimpleBuiltins_testMean_3c29919280a14ddcd2f9e0cdc9c7a661() {
        assertEval("{ mean(c(2L,4L,3L))}");
    }

    @Test
    public void TestSimpleBuiltins_testMean_1f89c033feee8717f84ae22310a88c26() {
        assertEval("{ mean(c(1,2,3,4,5))}");
    }

    @Test
    public void TestSimpleBuiltins_testMean_88ca788f002cdf382d282f2b3775b846() {
        assertEval("{ mean(c(1+2i))}");
    }

    @Test
    public void TestSimpleBuiltins_testMean_02915f7c08b5f12a210dcf33404da606() {
        assertEval("{ mean(c(1+2i, 2+3i))}");
    }

    @Test
    public void TestSimpleBuiltins_testMean_acf44b0ca5959d45cf2889ba1a71bc54() {
        assertEval("{ mean(c(1+2i,1+3i,1+45i))}");
    }

    @Test
    public void TestSimpleBuiltins_testMean_edb5b7f40c166b8d194f8c29109bfa31() {
        assertEval("{ mean(c(TRUE, TRUE))}");
    }

    @Test
    public void TestSimpleBuiltins_testMean_6387bc9a676ed239e07185cd4cdd2f56() {
        assertEval("{ mean(c(TRUE, FALSE))}");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_f34671823380d987d92590fce2e8011e() {
        assertEval("{ min((-1):100) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_8e3e0dab2b698155aac30656d1ba17d8() {
        assertEval("{ min(2L, 4L) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_05cb66d8b364489fa06362a12abd9749() {
        assertEval("{ min(c(1,2,0/0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_487ff8108e12a356f236d4c3ffedc067() {
        assertEval("{ max(c(1,2,0/0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_cafbdda915450ee379f661525d48e422() {
        assertEval("{ min(1:10, 100:200, c(4.0, -5.0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_775bae819fb47460de15eb9585df8620() {
        assertEval("{ min(NA, 1.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_6716d33c6f50beaaf095225c12750669() {
        assertEval("{ min(0/0, 1.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_0830803757703e7fe9a88003bd24311b() {
        assertEval("{ min(0/0, 1.1, NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_819f7a970f841a3de036903b00d810e1() {
        assertEval("{ min(c(as.character(NA), \"foo\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_439b91bb3000e058b9736056b15556a1() {
        assertEval("{ min(1:10, 100:200, c(4.0, 5.0), c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_6ff5d3958c466ce8176bc44372e64494() {
        assertEval("{ min(c(\"hi\",\"abbey\",\"hello\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_c38784d03f763b9b7ba319a4e709ad53() {
        assertEval("{ min(\"hi\",\"abbey\",\"hello\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_e8d15c4a706047697bad794ac2370a27() {
        assertEval("{ min(\"hi\",100) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_49b63733dee703226dd7633ad3f1323f() {
        assertEval("{ is.logical(min(TRUE, FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_989f95def8f14b36ad111b4509fa8701() {
        assertEval("{ is.logical(min(TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_4811b7a08e06ec8b8467557b634099c6() {
        assertEval("{ min(\"42\", \"7\") }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_424d1486e2630195e77444770c363329() {
        assertEval("{ min(as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_9be42c59ec69c8e378c9283689f1bd8b() {
        assertEval("{ min(as.double(NA), as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_7ff21f7936595b5f5ccc5e57a79765e5() {
        assertEval("{ min(as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_98eb5dd38bb1db8422ffd5108f6a2abb() {
        assertEval("{ min(as.integer(NA), as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_4ab26aac60eaace281c5c249c6a15b47() {
        assertEval("{ min(as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_0bf63e6b9e736602b203c35a5e6eecdf() {
        assertEval("{ min(as.character(NA), as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_e32fdea1382f0343c37998c0065acbec() {
        assertEval("{ min(42L, as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_49002036c730fe7fb2b517e73307b054() {
        assertEval("{ min(42L, as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_3f5e3070945b7ba833014ee6172803f5() {
        assertEval("{ min(42, as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_167fe215141456c2be6470cf28c7cba2() {
        assertEval("{ min(42, as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_afeafad4659f9d952fc6cbf818b6a8e6() {
        assertEval("{ min(\"42\", as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_396ef28576f51cebba94fa7589d3ac7d() {
        assertEval("{ min(\"42\", as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_e03ecb8d8ab3700c6755b390af8808c4() {
        assertEval("{ min(42L, as.integer(NA), 7L, na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_3da6156fb94493f7a48434b7269bae1d() {
        assertEval("{ min(42L, as.integer(NA), 7L, na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_116b87fc966aed204d54962895060671() {
        assertEval("{ min(42, as.double(NA), 7, na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_3f4cff1d00d33d26e58f004b471688d5() {
        assertEval("{ min(42, as.double(NA), 7, na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_ee98d3ac1972a0151fbef0c4b0c50bb2() {
        assertEval("{ min(\"42\", as.character(NA), \"7\", na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_87ea1c0c5132cbfcdbd8e89759d89ed0() {
        assertEval("{ min(\"42\", as.character(NA), \"7\", na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_2a6e5142002ceb92b7184020d31302e0() {
        assertEvalError("{ min(as.raw(42), as.raw(7)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_360b52645169d7abc8acbfa6c1b20e80() {
        assertEvalError("{ min(42+42i, 7+7i) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_2cc02ae7579e178d45b0fbe3c78005ec() {
        assertEvalWarning("{ min() }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_3d531bbdc1a81fa66af922bb3e9bb05d() {
        assertEvalWarning("{ min(character(0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_3047d67c474b83b6dfd5a5de9ea770bb() {
        assertEvalWarning("{ min(character()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_8657f15ba9ca8a6db9876e679ba52a7c() {
        assertEvalWarning("{ min(integer(0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_27b511ed06580b3c406a710a7b26d1c3() {
        assertEvalWarning("{ min(integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_6355fbbf5bd01cee695011f0f2871bfa() {
        assertEvalWarning("{ min(double(0)) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_8030934d98b6c238d6521e26910d3212() {
        assertEvalWarning("{ min(double()) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_713f789575d36f92139d4df2c3515237() {
        assertEvalWarning("{ min(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_ae9919d9f356b70b302307c2dfbbf996() {
        assertEvalWarning("{ min(as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_f2ecf49d168de8bdb6520911002c63d2() {
        assertEvalWarning("{ min(as.double(NA), as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_c11c23df5b476bd65352912994813106() {
        assertEvalWarning("{ min(as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_c6e05761f19dab9ecf49c0118e262786() {
        assertEvalWarning("{ min(as.integer(NA), as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_8aa50b4d9464c2f7c09a4c5849f6f193() {
        assertEvalWarning("{ min(as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMinimum_635ceb88e7b986329ea6b5654b48e13c() {
        assertEvalWarning("{ min(as.character(NA), as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_0d49cd1806a44cd64801786e75fdacdb() {
        assertEval("{ f <- function(a) { g(a) } ;  g <- function(b) { missing(b) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_b4f6edfaffe32ea586f59a695242264f() {
        assertEval("{ f <- function(a = 2) { g(a) } ; g <- function(b) { missing(b) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_3d2cb98b5a49a1cd30375bff59a5a970() {
        assertEval("{ f <- function(a,b,c) { missing(b) } ; f(1,,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_5358c8df917d174350d62aa79b336a60() {
        assertEval("{ g <- function(a, b, c) { b } ; f <- function(a,b,c) { g(a,b=2,c) } ; f(1,,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_5152d66ad69bdcdf15713cbf7cea93de() {
        assertEval("{ f <- function(x) {print(missing(x)); g(x)}; g <- function(y=2) {print(missing(y)); y}; f(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_0dba5660c734cc84ae82ab76a954bb59() {
        assertEval("{ k <- function(x=2,y) { xx <- x; yy <- y; print(missing(x)); print(missing(xx)); print(missing(yy)); print(missing(yy))}; k(y=1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_cf62337ead8caecb2e4db39b971a6823() {
        assertEval("{ f <- function(a = 2 + 3) { missing(a) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_e3ec4820900994d734d0199b41a505ab() {
        assertEval("{ f <- function(a = z) { missing(a) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_14a03fde115ece14b0e877fd4bf28ad0() {
        assertEval("{ f <- function(a = 2 + 3) { a;  missing(a) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_0da52004f0b9453ad6deab5e0b49a111() {
        assertEval("{ f <- function(a = z) {  g(a) } ; g <- function(b) { missing(b) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_fc5302d7e40c71c48b09f7e6fcf1df6d() {
        assertEval("{ f <- function(x) { missing(x) } ; f(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_20756d2c3aaa3afd4ad6f87416f461ea() {
        assertEval("{ f <- function(a) { g <- function(b) { before <- missing(b) ; a <<- 2 ; after <- missing(b) ; c(before, after) } ; g(a) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_2c7389435b7285c22a1e276db60a1c8e() {
        assertEval("{ f <- function(...) { g(...) } ;  g <- function(b=2) { missing(b) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_4d4ddff49525509727252465a38b7dab() {
        assertEval("{ f <- function(x) { print(missing(x)); g(x) }; g <- function(y=3) { print(missing(y)); k(y) }; k <- function(l=4) { print(missing(l)); l }; f(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_77e99ff6cfb53e3c7d569e2a3ec713fd() {
        assertEval("{ k <- function(x=2,y) { xx <- x; yy <- y; print(missing(x)); print(missing(xx)); print(missing(yy)); print(missing(yy))}; k() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_3b1c18d77df4f57cd223b95c8c205d89() {
        assertEval("{ f <- function(a = z, z) {  g(a) } ; g <- function(b) { missing(b) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_12f97d45e336adc392898885f48afa76() {
        assertEval("{ f <- function(a) { g(a) } ; g <- function(b=2) { missing(b) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_a96249c626958ddb13c95b4628e7f318() {
        assertEval("{ f <- function(x = y, y = x) { g(x, y) } ; g <- function(x, y) { missing(x) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_7a7476796aa855e4eef288a9fa74b80f() {
        assertEval("{ f <- function(...) { missing(..2) } ; f(x + z, a * b) }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_72acc1b3617e48b2fa82bb26c3766005() {
        assertEval("{ f <- function(x) {print(missing(x)); g(x)}; g <- function(y=2) {print(missing(y)); y}; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_32e4fa660fad3f0468fe84a74a8ee913() {
        assertEval("{ f <- function(x) { print(missing(x)); g(x) }; g <- function(y=3) { print(missing(y)); k(y) }; k <- function(l=4) { print(missing(l)); l }; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMissing_c6c7ca5b1c15e6206546dac9ba1c9206() {
        assertEval("{ f <- function(x) { print(missing(x)) ; g(x) } ; g <- function(y=1) { print(missing(y)) ; h(y) } ; h <- function(z) { print(missing(z)) ; z } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testMod_9e8ae1303f27834ae87665ed2c4ae12c() {
        assertEval("{ round(Mod(1+1i)*10000) }");
    }

    @Test
    public void TestSimpleBuiltins_testNArgsIgnore_ee082d552ee9efa22803929c01c73692() {
        assertEval("{  f <- function (a, b, c) { nargs() }; f(,,a) }");
    }

    @Test
    public void TestSimpleBuiltins_testNChar_495a7fd2d648682e65ccfb8cf57e8805() {
        assertEval("{ nchar(c(\"hello\", \"hi\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testNChar_1193ed9b71174082c92be71c70d698e0() {
        assertEval("{ nchar(c(\"hello\", \"hi\", 10, 130)) }");
    }

    @Test
    public void TestSimpleBuiltins_testNChar_2b2b116c81ddc47069b1a784ec550a25() {
        assertEval("{ nchar(c(10,130)) }");
    }

    @Test
    public void TestSimpleBuiltins_testNames_2859794d8c84c5c8a0e0d527e99ea979() {
        assertEval("{ x<-c(1,2,3); dim(x)<-3; dimnames(x)<-list(c(11,12,13)); names(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testNargs_93bea7d7244cdc6667541bda6d5c21eb() {
        assertEval("{  f <- function (a, b, c) { nargs() }; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testNargs_87f5ad668b5b7c3c9c33b69b1ff0b07b() {
        assertEval("{  f <- function (a, b, c) { nargs() }; f(1, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testNargs_af51626dde51926d69ba3aaa35c2e468() {
        assertEval("{  f <- function (a, b=TRUE, c=FALSE) { nargs() }; f(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testNargs_22cf010cf5a8e031ea484a39f140b100() {
        assertEval("{  f <- function (a, b=TRUE, c=FALSE) { nargs() }; f(1, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testNextMethod_4a05151b190f59933e5693d3e3fba9f1() {
        assertEval("{g<-function(){ x<-1; class(x)<-c(\"a\",\"b\",\"c\"); f<-function(x){UseMethod(\"f\")}; f.a<-function(x){cat(\"a\");NextMethod(\"f\",x)}; f.b<-function(x){cat(\"b\")}; f(x); }; g();}");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_fe6113744bbbaa2a19f45847a5a4a46a() {
        assertEval("{ ngettext(1, \"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_251329dd5a504b24bf9ed856f9f187d8() {
        assertEval("{ ngettext(0, \"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_f47efba03fb200532ff5f812a878998a() {
        assertEval("{ ngettext(42, \"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_669f76caf6bf7e8879e56da9d06160fb() {
        assertEval("{ ngettext(1, c(\"a\"), \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_32f1890624481b32142f33218e825477() {
        assertEval("{ ngettext(1, \"a\", c(\"b\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_90a8ef32dc2ddcfa0c5b3676fd7b4285() {
        assertEval("{ ngettext(c(1), \"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_2c58035eae2b96861342ff2a2e93d37b() {
        assertEval("{ ngettext(c(1,2), \"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_2362e3013d4b98836781db2e99804c0e() {
        assertEvalError("{ ngettext(1, NULL, \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_e5ca380a51b71d39fcc2f73c29db2b99() {
        assertEvalError("{ ngettext(1, \"a\", NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_765fbbedb97d7208ebfab5825272f7f6() {
        assertEvalError("{ ngettext(1, NULL, NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_2e9a85cc3fe3c07a4d8ce51bc34cc61c() {
        assertEvalError("{ ngettext(1, c(\"a\", \"c\"), \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_331cf073d0c9d4579084a406f7ed8065() {
        assertEvalError("{ ngettext(1, \"a\", c(\"b\", \"c\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_5eb89f5bd5b4f42f1aa9693627ba4379() {
        assertEvalError("{ ngettext(1, c(1), \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_1f55a518b23c797d6026651f8a888c2d() {
        assertEvalError("{ ngettext(1, \"a\", c(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_1b899ec841c0db1db2e8c88aaa3e02aa() {
        assertEvalError("{ ngettext(-1, \"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNgettext_ce3ce2ba3594588e16cd0812ff6bcdd5() {
        assertEvalWarning("{ ngettext(1+1i, \"a\", \"b\") }");
    }

    @Test
    public void TestSimpleBuiltins_testNumericTypeCheck_e995598058224a724580da7326908239() {
        assertEval("{ is.numeric(1:6) }");
    }

    @Test
    public void TestSimpleBuiltins_testObjectTypeCheck_dce6b262887cd8e546eeebc607cac329() {
        assertEval("{ e <- expression(x + 1); class(e) <- \"foo\"; is.object(e) }");
    }

    @Test
    public void TestSimpleBuiltins_testOnExit_990c2fa703195a7a1632c8253766e9d4() {
        assertEval("n = function() { on.exit(print(\"test\")); print(\"some\") }; n()");
    }

    @Test
    public void TestSimpleBuiltins_testOnExit_44ae6a4df3702409b2dd9147a69ff0a6() {
        assertEval("n = function() { on.exit(print(\"test\", TRUE)); print(\"some\") }; n()");
    }

    @Test
    public void TestSimpleBuiltins_testOnExit_22580aebd0c9efb8f36899248e95778f() {
        assertEval("n = function() { on.exit(print(\"test\")); on.exit(); print(\"some\") }; n()");
    }

    @Test
    public void TestSimpleBuiltins_testOnExit_465f518445ab25801b602e138ad4ccfd() {
        assertEval("n = function() { on.exit(print(\"test\")); on.exit(print(\"test2\", TRUE)); print(\"some\") }; n()");
    }

    @Test
    public void TestSimpleBuiltins_testOnExit_319addbc62ee2707798ce80d93ac944a() {
        assertEval("n = function() { on.exit(print(\"test\")); on.exit(print(\"test2\")); print(\"some\") }; n()");
    }

    @Test
    public void TestSimpleBuiltins_testOnExit_ae307577808ed87e2d1790ba777d501a() {
        assertEval("n = function() { on.exit(print(\"test\", TRUE)); on.exit(print(\"test2\")); print(\"some\") }; n()");
    }

    @Test
    public void TestSimpleBuiltins_testOnExit_c48820b6fa534d84474ff03fbde43fdb() {
        assertEval("n = function() { on.exit(print(\"test\")); on.exit(print(\"test2\")); print(\"some\"); on.exit() }; n()");
    }

    @Test
    public void TestSimpleBuiltins_testOnExit_bafd79cb6d84db2565a75ccd03f04f85() {
        assertEval("n = function() { on.exit() }; n()");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_d4e3be6301b8298150f0b9769e6d59f0() {
        assertEval("{ `+`(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_29fad4bdb25ec4ad05904614767be93a() {
        assertEval("{ `-`(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_b7bb9b7e55f90000cde0e368058599c6() {
        assertEval("{ `*`(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_9b2c8c03180166b9b962e8644e793655() {
        assertEval("{ `/`(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_bb752e04b1a583c8690124ab6b074151() {
        assertEval("{ `%/%`(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_f98b8748159a426ff7f60fa6e3e3e0ec() {
        assertEval("{ `%%`(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_c192dfdc78da49170c40df3c430cab0e() {
        assertEval("{ `^`(1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_d525ac6f3b3c989891117eb4b1915b5b() {
        assertEval("{ `!`(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_f8ce660041adff1e80a0dd4f3f04ee25() {
        assertEval("{ `%o%`(3,5) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_109142944819af0e25f3edd907f8bfd2() {
        assertEval("{ x <- `+` ; x(2,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_6fccbf01084abe36fe62eb4661f555f6() {
        assertEval("{ x <- `+` ; f <- function() { x <- 1 ; x(2,3) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_7780439e622de4f4c21350b3490528f0() {
        assertEval("{ `||`(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_7bcce4c1c2000a4ea4f3d20bd208ef75() {
        assertEval("{ `&&`(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_924edb8accf499458ef16a93acd8ecc6() {
        assertEval("{ `|`(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperators_852f1f1b4259b28b146c661cadb6dbaf() {
        assertEval("{ `&`(TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOperatorsIgnore_dd8820aada824b55da8fce1b2069a4a8() {
        assertEval("{ `%*%`(3,5) }");
    }

    @Test
    public void TestSimpleBuiltins_testOpsGroupDispatch_50876647443e693874803c2e58e0d2d9() {
        assertEval("{x<-1;y<-7;class(x)<-\"foo\";class(y)<-\"foo\";\"*.foo\"<-function(e1,e2){min(e1,e2)};x*y}");
    }

    @Test
    public void TestSimpleBuiltins_testOpsGroupDispatch_e08d258b954d54e118cb6fb482db2213() {
        assertEval("{x<-1;y<-7;class(x)<-\"foo\";class(y)<-\"fooX\";\"*.foo\"<-function(e1,e2){min(e1,e2)};x*y}");
    }

    @Test
    public void TestSimpleBuiltins_testOpsGroupDispatch_a1badd549cfaeaba65bea94edd4520fe() {
        assertEval("{x<-1;y<-7;class(x)<-\"fooX\";class(y)<-\"foo\";\"*.foo\"<-function(e1,e2){min(e1,e2)};x*y}");
    }

    @Test
    public void TestSimpleBuiltins_testOpsGroupDispatch_a6527cd3b5a144a58f32c6979e04748d() {
        assertEval("{x<-1;y<-7;class(x)<-\"fooX\";class(y)<-\"fooX\";\"*.foo\"<-function(e1,e2){min(e1,e2)};x*y}");
    }

    @Test
    public void TestSimpleBuiltins_testOpsGroupDispatch_74dc97f4a15ca9248f75542001789ecf() {
        assertEval("{x<-1;y<-7;class(x)<-\"foo\";class(y)<-\"foo\";\"^.foo\"<-function(e1,e2){e1+e2};x^y}");
    }

    @Test
    public void TestSimpleBuiltins_testOpsGroupDispatch_6d12455c14061853a453ebbf4b5d845c() {
        assertEval("{x<-1;class(x)<-\"foo\";\"!.foo\"<-function(e1,e2){x};!x}");
    }

    @Test
    public void TestSimpleBuiltins_testOpsGroupDispatchLs_2b92f252b506f74c3dd61aa019e285ed() {
        assertEval("{x<-1;y<-7;class(x)<-\"foo\";class(y)<-\"foo\";\"*.foo\"<-function(e1,e2){min(e1,e2)}; ls()}");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_b3e9fa38e57708b98e592be54724d7ef() {
        assertEval("{ order(c(\"a\",\"c\",\"b\",\"d\",\"e\",\"f\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_862b6133d7b052ce64cfad4a4a67e84e() {
        assertEval("{ order(c(5,2,2,1,7,4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_f59e8d989847e099cd830b09c1811eb1() {
        assertEval("{ order(c(5,2,2,1,7,4),c(\"a\",\"c\",\"b\",\"d\",\"e\",\"f\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_852a49414fd348ee2ac43d573ec918d0() {
        assertEval("{ order(c(1,1,1,1),c(4,3,2,1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_1876c32edccfa36eaa58c7526d847258() {
        assertEval("{ order(c(1,1,1,1),c(\"d\",\"c\",\"b\",\"a\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_1d5e3a5008dd094bbe4be90041eabf23() {
        assertEval("{ order(c(1i,2i,3i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_17cb2322c76b3aa7266fcd225ceb80e8() {
        assertEval("{ order(c(3i,1i,2i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_5a2099b87624b74542d57376cb6a459d() {
        assertEval("{ order(c(3+1i,2+2i,1+3i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_d01c233922d6266e1680d69aaab531ee() {
        assertEval("{ order(c(3+1i,2+3i,2+2i,1+3i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_4c3803cc90ae96baaceb31dff9d35880() {
        assertEval("{ order(7) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_99663477341c7f5256cca2b070dd3ca9() {
        assertEval("{ order(FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrder_f27adcb88b731598a1bbccef9b12a8ee() {
        assertEval("{ order(character()) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_9d9e462e8a8cc7dbbf92366b9602bf39() {
        assertEval("{ order(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_ea195becea5e63c0bc6efd17b21ed503() {
        assertEval("{ order(3:1) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_05f671b27b0512bcbf1a2e113be7890a() {
        assertEval("{ order(c(1,1,1), 3:1) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_00ba7b7a2cb7b8ec3054739ef0c56f0e() {
        assertEval("{ order(c(1,1,1), 3:1, decreasing=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_0aee4193d1ed56df561c1905296ddca9() {
        assertEval("{ order(c(1,1,1), 3:1, decreasing=TRUE, na.last=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_87d0b85ae402b237e6eea7524e6ebfe2() {
        assertEval("{ order(c(1,1,1), 3:1, decreasing=TRUE, na.last=NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_63382528759189343899c7eaad048f33() {
        assertEval("{ order(c(1,1,1), 3:1, decreasing=TRUE, na.last=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_8b055d570492191af8f8acd6bca6b6ad() {
        assertEval("{ order() }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_233b9224709438d6239a02a3cbca1d6f() {
        assertEval("{ order(c(NA,NA,1), c(2,1,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_0d31ec524c63c01a9d36ce580dd87b76() {
        assertEval("{ order(c(NA,NA,1), c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_4b6ee44c315ce2abafeeff55be3bda6a() {
        assertEval("{ order(c(1,2,3,NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_e08023e645a2200f800f52383def050b() {
        assertEval("{ order(c(1,2,3,NA), na.last=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_5b504932f266176135d80d1de4c180a6() {
        assertEval("{ order(c(1,2,3,NA), na.last=FALSE, decreasing=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_1b4cf21da630e25cd59c951bbff7a050() {
        assertEval("{ order(c(0/0, -1/0, 2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testOrderIgnore_e63709ad10dd0c536abd53f59d2cfdf8() {
        assertEval("{ order(c(0/0, -1/0, 2), na.last=NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testOther_9e779b291a3f7b361680c2b1177496d2() {
        assertEval("{ rev.mine <- function(x) { if (length(x)) x[length(x):1L] else x } ; rev.mine(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testOuter_f0494514b9b654d66482f6b88889f616() {
        assertEval("{ outer(c(1,2,3),c(1,2),\"-\") }");
    }

    @Test
    public void TestSimpleBuiltins_testOuter_7bf5e09a3cc82b43764d2fb0d857765b() {
        assertEval("{ outer(c(1,2,3),c(1,2),\"*\") }");
    }

    @Test
    public void TestSimpleBuiltins_testOuter_a3cacf25df5ce992f10a406a31e690f2() {
        assertEval("{ outer(1, 3, \"-\") }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_da963cbde1784128a50d0bb2220f4a09() {
        assertEval("{ foo <- function (x,y) { x + y * 1i } ; outer(3,3,foo) }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_fa7bab756255d002e9b280b544ccabdb() {
        assertEval("{ foo <- function (x,y) { x + y * 1i } ; outer(3,3,\"foo\") }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_4a115174070896c785016a9d9d5d665e() {
        assertEval("{ foo <- function (x,y) { x + y * 1i } ; outer(1:3,1:3,foo) }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_e5c558a0c7a7981c18d26924fb310194() {
        assertEval("{ outer(c(1,2,3),c(1,2),\"+\") }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_5182ad090b959b44000d6c63b2bf223b() {
        assertEval("{ outer(1:3,1:2) }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_2d96437a7e8bbf4c84f39c87f3822203() {
        assertEval("{ outer(1:3,1:2,\"*\") }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_6dc2cca210d082a9eafba79e161f0d8f() {
        assertEval("{ outer(1:3,1:2, function(x,y,z) { x*y*z }, 10) }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_9eece79caddd6ebf500a83a675d56b84() {
        assertEval("{ outer(1:2, 1:3, \"<\") }");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_9260b477fa0c0eacb1851e4c1227c63d() {
        assertEval("{ outer(1:2, 1:3, '<') }");
    }

    @Test
    public void TestSimpleBuiltins_testOverride_de3b22c9cf36f0c894eb0b6d14a77142() {
        assertEval("{ sub <- function(x,y) { x - y }; sub(10,5) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_28878c7ab3c008eb284872ac9ac2c212() {
        assertEval("{ pmax(c(1L, 7L), c(42L, 1L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_f240be5532dba049aa584e758dd074d9() {
        assertEval("{ pmax(c(1L, 7L), integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_7014448980c02c19e73ca9f3ec62df70() {
        assertEval("{ pmax(c(1L, 7L), c(42L, as.integer(NA))) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_e233c3479f47b5ef9a65e84886b8f12c() {
        assertEval("{ pmax(c(1L, 7L), c(42L, as.integer(NA)), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_f33bf601a10480a6e655abf7d6a3112b() {
        assertEval("{ pmax(c(1, 7), c(42, 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_5f0f039f7cf3678730f38cae08115270() {
        assertEval("{ pmax(c(1, 7), double()) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_27887b238c7347a566f62b0dc0341d63() {
        assertEval("{ pmax(c(1, 7), c(42, as.double(NA))) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_ccb94250caabbc466bf26bc413df52f2() {
        assertEval("{ pmax(c(1, 7), c(42, as.double(NA)), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_0ad681abd0347fc3f329a5de4446750e() {
        assertEval("{ pmax(c(\"1\", \"7\"), c(\"42\", \"1\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_b03d9fc7b1b74e088e80e50d516b1e27() {
        assertEval("{ pmax(c(\"1\", \"7\"), character()) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_280f0aa34b8a627b370c19b2685fcdef() {
        assertEval("{ pmax(c(\"1\", \"7\"), c(\"42\", as.character(NA))) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_bad8ae5eb0c03b007b5430b14b0d1c96() {
        assertEval("{ pmax(c(\"1\", \"7\"), c(\"42\", as.character(NA)), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_4a39be88715bd7849ef8a84628a2bfbd() {
        assertEval("{ pmax(c(\"1\", as.character(NA)), c(\"42\", \"1\"), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_ef454dbb5881c936173763ac86ab6816() {
        assertEval("{ pmax(c(\"1\", as.character(NA)), c(as.character(NA), as.character(NA)), c(\"42\", \"1\"), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_835849fdf0d1b6da7aa2e34dd879e955() {
        assertEval("{ pmax(c(FALSE, TRUE), c(TRUE, FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_3c38a3f6e96af8fe90c48e43cb48df9e() {
        assertEval("{ pmax(c(FALSE, TRUE), logical()) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_c5b01367f4559f73c34b5185cb339362() {
        assertEval("{ pmax(c(FALSE, TRUE), c(FALSE, NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_1b53a79efcf345b2e339fd5276917b84() {
        assertEvalError("{ pmax(as.raw(42)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_f9f505d06b5b5710a5792a1b3d87310c() {
        assertEvalError("{ pmax(7+42i) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_b44d9bd77af44fb8ec306d6dd45edbb7() {
        assertEvalWarning("{ pmax(c(1L, 7L, 8L), c(1L), c(42L, 1L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_5b6514495dda7f5c846db63966b35078() {
        assertEvalWarning("{ pmax(c(1, 7, 8), c(1), c(42, 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMax_7e7482b7816a663ffb8ae05e759fc8c2() {
        assertEvalWarning("{ pmax(c(\"1\", \"7\", \"8\"), c(\"1\"), c(\"42\", \"1\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_ed673aa55e7a1c2a8d40c87bcb4e1ada() {
        assertEval("{ pmin(c(1L, 7L), c(42L, 1L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_ce791be426daa039470041d07067797b() {
        assertEval("{ pmin(c(1L, 7L), integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_d39070dc303a04d03283e41346f67caf() {
        assertEval("{ pmin(c(1L, 7L), c(42L, as.integer(NA))) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_b1bf8ca40cf792c053045f94490e5328() {
        assertEval("{ pmin(c(1L, 7L), c(42L, as.integer(NA)), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_2b0595ae24223d21815439788e98914f() {
        assertEval("{ pmin(c(1, 7), c(42, 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_537706f25472d8295893631620a432e6() {
        assertEval("{ pmin(c(1, 7), double()) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_6a80a3a6cb8256891d7ef0f0fc04023c() {
        assertEval("{ pmin(c(1, 7), c(42, as.double(NA))) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_0b795946ca6ecafba05ed310a0c217a8() {
        assertEval("{ pmin(c(1, 7), c(42, as.double(NA)), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_cba510383b0da53141c20db44e4130cb() {
        assertEval("{ pmin(c(\"1\", \"7\"), c(\"42\", \"1\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_6c548f27b81ae28280508da7fb1d59d0() {
        assertEval("{ pmin(c(\"1\", \"7\"), character()) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_80e247d9adaff94718babba7fd798c59() {
        assertEval("{ pmin(c(\"1\", \"7\"), c(\"42\", as.character(NA))) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_9370e766db410333698ba931ad44da9b() {
        assertEval("{ pmin(c(\"1\", \"7\"), c(\"42\", as.character(NA)), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_9f6669bbf3ddb91ddbbb94b07b857347() {
        assertEval("{ pmin(c(\"1\", as.character(NA)), c(\"42\", \"1\"), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_046977a3522a36099d402b3c7dd515cd() {
        assertEval("{ pmin(c(\"1\", as.character(NA)), c(as.character(NA), as.character(NA)), c(\"42\", \"1\"), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_af8dffea1ee168a9cdae131b7ac14b57() {
        assertEval("{ pmin(c(FALSE, TRUE), c(TRUE, FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_cd786630b9cadd4013fcfb2acd3ad77c() {
        assertEval("{ pmin(c(FALSE, TRUE), logical()) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_7da52f855355a21884666c59cc4b7cb9() {
        assertEval("{ pmin(c(FALSE, TRUE), c(FALSE, NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_f7db7c0c8aef9eeb520e7da787cc1481() {
        assertEvalError("{ pmin(as.raw(42)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_592dc1a3816b77de1800bfae51ac9e4f() {
        assertEvalError("{ pmin(7+42i) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_9b2de90b2ad152649c797b5f352655af() {
        assertEvalWarning("{ pmin(c(1L, 7L, 8L), c(1L), c(42L, 1L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_ae7a9ca78626d59cc87b728d3052c103() {
        assertEvalWarning("{ pmin(c(1, 7, 8), c(1), c(42, 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testPMin_c56e1872347158ba0ec8a2002fec7de9() {
        assertEvalWarning("{ pmin(c(\"1\", \"7\", \"8\"), c(\"1\"), c(\"42\", \"1\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testParen_499acebd19ac76555ed92ca7ecc3ec53() {
        assertEval("{ a = array(1,c(3,3,3)); (a[1,2,3] = 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testPaste_23188ccb2641c8c48c9812a88fe004f5() {
        assertEval("{ paste() }");
    }

    @Test
    public void TestSimpleBuiltins_testPaste_c2d17803bc72097f3a44e9d017be92ba() {
        assertEval("{ a <- as.raw(200) ; b <- as.raw(255) ; paste(a, b) }");
    }

    @Test
    public void TestSimpleBuiltins_testPaste_fa650154a20cffdacccbb8ba12d16452() {
        assertEval("{ paste(character(0),31415) }");
    }

    @Test
    public void TestSimpleBuiltins_testPaste_52b59d2a84691d7cad337a574eaf5d67() {
        assertEval("{ paste(1:2, 1:3, FALSE, collapse=NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testPaste_8aadd2296b0752c162a22f4f975cfafc() {
        assertEval("{ paste(sep=\"\") }");
    }

    @Test
    public void TestSimpleBuiltins_testPaste_b55d294d8dba8cde76019bf8f4828089() {
        assertEval("{ paste(1:2, 1:3, FALSE, collapse=\"-\", sep=\"+\") }");
    }

    @Test
    public void TestSimpleBuiltins_testPasteIgnore_1a3c1e77838670e434c0da99950c8e2c() {
        assertEval("{ file.path(\"a\", \"b\", c(\"d\",\"e\",\"f\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testPasteIgnore_3408303a6c99992f74f43cb72bc7fa75() {
        assertEval("{ file.path() }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_71b73b9cd97a190f54e9c03ce59b3097() {
        assertEval("{ print(23) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_1d0e188cebf7d69abfec849cae6b5c22() {
        assertEval("{ print(1:3,quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_b49113896cb654fa0f7d071bd5656ecb() {
        assertEval("{ print(list(1,2,3),quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_517288ba7ba2a59947686a21315372dc() {
        assertEval("{ x<-c(1,2); names(x)=c(\"a\", \"b\"); print(x,quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_9111c16923f90f16c33e33b477a9bb81() {
        assertEval("{ x<-c(1, 2:20, 21); n<-\"a\"; n[21]=\"b\"; names(x)<-n; print(x,quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_5ee607b63487aa6507cb885185f5decc() {
        assertEval("{ x<-c(10000000, 10000:10007, 21000000); n<-\"a\"; n[10]=\"b\"; names(x)<-n; print(x,quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_a7a49f857113d94682b0d32371d90537() {
        assertEval("{ x<-c(\"11\", \"7\", \"2222\", \"7\", \"33\"); print(x,quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_cec2504ae7c227bbbfb23ddc95b52bd8() {
        assertEval("{  x<-c(11, 7, 2222, 7, 33); print(x,quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_3cfba7b23e684a80d3122e6f30dce185() {
        assertEval("{ x<-c(\"11\", \"7\", \"2222\", \"7\", \"33\"); names(x)<-1:5; print(x,quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_0e102f3e6674b8a7b2a3111826105910() {
        assertEval("{ x<-c(11, 7, 2222, 7, 33); names(x)<-1:5; print(x,quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_b50b907028df27bcb01a72ff9825c205() {
        assertEval("{ print(list(list(list(1,2),list(3)),list(list(4),list(5,6))),quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_2a217959db928d613ecba5a64029ef84() {
        assertEval("{ print(c(1.1,2.34567),quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_178681bfdbcf262d9e3b798e5b969c0a() {
        assertEval("{ print(c(1,2.34567),quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_f990c0ca344a16932cb77f605a73a70c() {
        assertEval("{ print(c(11.1,2.34567),quote=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_d533407490d83279c14c5df7beeef140() {
        assertEval("{ nql <- noquote(letters); print(nql)}");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_54c354f2b0e62a78485d22660a89b762() {
        assertEval("{ nql <- noquote(letters); nql[1:4] <- \"oh\"; print(nql)}");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_083f0fab46a59ac7d1ec2d7453602a94() {
        assertEval("{ print(c(\"foo\"),quote=FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_5db55423b8cf17dfc150d8747c2cf348() {
        assertEval("{ x<-matrix(c(\"a\",\"b\",\"c\",\"d\"),nrow=2);print(x,quote=FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_1e84c6bf83c3f2aa72f71298af011c89() {
        assertEval("{ y<-c(\"a\",\"b\",\"c\",\"d\");dim(y)<-c(1,2,2);print(y,quote=FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testPrint_a58cce800ee46c197ef0f7c4fa61b641() {
        assertEval("{ n <- 17 ; fac <- factor(rep(1:3, length = n), levels = 1:5) ; y<-tapply(1:n, fac, sum); y }");
    }

    @Test
    public void TestSimpleBuiltins_testPrintIgnore_1b704b3de3fb726ef00328841b29f629() {
        assertEval("{ nql <- noquote(letters); nql}");
    }

    @Test
    public void TestSimpleBuiltins_testProd_160d6aefde4702e2ffa7f11c502f5227() {
        assertEval("{prod(c(2,4))}");
    }

    @Test
    public void TestSimpleBuiltins_testProd_3ab5d9dca755980c77f4585e358f8765() {
        assertEval("{prod(c(2,4,3))}");
    }

    @Test
    public void TestSimpleBuiltins_testProd_d045fa238bf1d02f199b49b92598f05c() {
        assertEval("{prod(c(1,2,3,4,5))}");
    }

    @Test
    public void TestSimpleBuiltins_testProd_c11c8f468861db8a61696b40d7e9acc4() {
        assertEval("{prod(c(1+2i))}");
    }

    @Test
    public void TestSimpleBuiltins_testProd_b1d0af42058b76ffa0347dca0eec039a() {
        assertEval("{prod(c(1+2i, 2+3i))}");
    }

    @Test
    public void TestSimpleBuiltins_testProd_9e3e73ab458232ad25facf66f5d4c99f() {
        assertEval("{prod(c(1+2i,1+3i,1+45i))}");
    }

    @Test
    public void TestSimpleBuiltins_testProd_d4adea1f6778da414ba58fb9971995d5() {
        assertEval("{prod(c(TRUE, TRUE))}");
    }

    @Test
    public void TestSimpleBuiltins_testProd_d9c411f099493c4010fbd403dd1ed4ad() {
        assertEval("{prod(c(TRUE, FALSE))}");
    }

    @Test
    public void TestSimpleBuiltins_testProdNa_75349670d382cb12b8cdbbfa32158e8a() {
        assertEval("{prod(c(2,4,NA))}");
    }

    @Test
    public void TestSimpleBuiltins_testProdNa_568e8381169ab3f99f187e83583f8455() {
        assertEval("{prod(c(2,4,3,NA),TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testProdNa_9bbd7d1d1e4ccf2057fefdbf93dd46a4() {
        assertEval("{prod(c(1,2,3,4,5,NA),FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testQgamma_408d54fa3a7e07ce4ca337fe4b999eb2() {
        assertEval("{ qgamma(0.5, shape=1) }");
    }

    @Test
    public void TestSimpleBuiltins_testQgamma_8e44fc720f31811bb05ad77796935981() {
        assertEval("{ p <- (1:9)/10 ; qgamma(p, shape=1) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_4c61546a62c6441af95effa50e76e062() {
        assertEval(" { x <- qr(cbind(1:10,2:11), LAPACK=TRUE) ; round( qr.coef(x, 1:10), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_abe3bd72b9a9dc9279dace1511a3fac8() {
        assertEval("{ qr(10, LAPACK=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_2e522fbe7c114da3cb368c5f7274cf12() {
        assertEval("{ round( qr(matrix(1:6,nrow=2), LAPACK=TRUE)$qr, digits=5) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_98faff4fc32371fae174496695a3a35b() {
        assertEval("{ qr(matrix(1:6,nrow=2), LAPACK=FALSE)$pivot }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_251a3e0804d5e1ec4ba95cabe5851fea() {
        assertEval("{ qr(matrix(1:6,nrow=2), LAPACK=FALSE)$rank }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_17317e26aa90dc9f21710b9567daa0c0() {
        assertEval("{ round( qr(matrix(1:6,nrow=2), LAPACK=FALSE)$qraux, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_637b00e95199b0d802bfd6e4c98184a6() {
        assertEval("{ round( qr(matrix(c(3,2,-3,-4),nrow=2), LAPACK=FALSE)$qr, digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_0cb51ae181bc178bf223d49001723552() {
        assertEval("{ x <- qr(t(cbind(1:10,2:11)), LAPACK=TRUE) ; qr.coef(x, 1:2) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_eb7d6b94998592915901ccdc876f3e5e() {
        assertEval("{ x <- qr(c(3,1,2), LAPACK=TRUE) ; round( qr.coef(x, c(1,3,2)), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_b833c099f54f44df2488c463c5977c69() {
        assertEval("{ x <- qr(t(cbind(1:10,2:11)), LAPACK=FALSE) ; qr.coef(x, 1:2) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_faacf8177a822d44074aa43fd81139d5() {
        assertEval("{ x <- qr(c(3,1,2), LAPACK=FALSE) ; round( qr.coef(x, c(1,3,2)), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_17cad1cc6779f137acbded3e743990f8() {
        assertEval("{ m <- matrix(c(1,0,0,0,1,0,0,0,1),nrow=3) ; x <- qr(m, LAPACK=FALSE) ; qr.coef(x, 1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_1cd6ad9cf8d11508e422eae128c0fa58() {
        assertEval("{ x <- qr(cbind(1:3,2:4), LAPACK=FALSE) ; round( qr.coef(x, 1:3), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_e2d68b4592f13f68f031a68d95f80d75() {
        assertEval("{ round( qr.solve(qr(c(1,3,4,2)), c(1,2,3,4)), digits=5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_46728c69e8381944b3e3b0272b971935() {
        assertEval("{ round( qr.solve(c(1,3,4,2), c(1,2,3,4)), digits=5) }");
    }

    @Test
    public void TestSimpleBuiltins_testQr_cb5a4156797fb35468b2a52c03675858() {
        assertEvalError("{ x <- qr(cbind(1:10,2:11), LAPACK=TRUE) ; qr.coef(x, 1:2) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_b0c9c56afaa693b70b7fb241f261ccdf() {
        assertEval("{ quote(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_d923d4706ce70a51172ab598e55e9341() {
        assertEval("{ quote(list(1, 2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_339002b066f4349faeef982ea5860293() {
        assertEval("{ typeof(quote(1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_d8393f64864243ce76e46a2bb07637b2() {
        assertEval("{ typeof(quote(x + y)) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_64a8db1b3bb16f12c25587fd60776125() {
        assertEval("{ class(quote(x + y)) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_1432cddeb5bf4a998479a4e9ba2b2832() {
        assertEval("{ mode(quote(x + y)) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_eaa15a84f93a695765ea01e47e3d6d29() {
        assertEval("{ is.call(quote(x + y)) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_0b4f01ed9d7275da794434ee3b6f8d45() {
        assertEval("{ quote(x <- x + 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_0ce6b058e6a459207f7154ded3d856cb() {
        assertEval("{ typeof(quote(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_e61120d917bf2901af3855b76706bcf1() {
        assertEvalError("{ l <- quote(a[3] <- 4) ; f <- function() { eval(l) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testQuote_d285d13bbf9697578c2b60d4e8305cdd() {
        assertEvalError("{ l <- quote(a[3] <- 4) ; eval(l) ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testQuoteIgnore_2ce345e0f74c01976ac35948bfab5a71() {
        assertEval("{ l <- quote(x[1,1] <- 10) ; f <- function() { eval(l) } ; x <- matrix(1:4,nrow=2) ; f() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testQuoteIgnore_409341bfbb82606d75eb0c1700c98952() {
        assertEval("{ l <- quote(x[1] <- 1) ; f <- function() { eval(l) } ; x <- 10 ; f() ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testQuoteIgnore_b8cacd46656e5a810809ba31bd8af586() {
        assertEval("{ l <- quote(x[1] <- 1) ; f <- function() { eval(l) ; x <<- 10 ; get(\"x\") } ; x <- 20 ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_8068ce5f1f326c99391d2b1930c15a32() {
        assertEval("{ set.seed(4357, \"default\"); sum(runif(10)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_1c2839ee28718f20253cca197bd42e09() {
        assertEval("{ set.seed(4336, \"default\"); sum(runif(10000)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_435d05756f103607132e7f8703553a6c() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); sum(runif(100)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_dc977e323c2273125e313a31a84c55ce() {
        assertEval("{ set.seed(4357, \"default\"); round( rnorm(3), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_6c476dd76e83146c418f2439e2bd6219() {
        assertEval("{ set.seed(7); runif(10) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_624282265c8adb6241f4b69fa2160e21() {
        assertEval("{ set.seed(7); runif(100) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_fe496af2360fbd78bf7391e70687d745() {
        assertEval("{ set.seed(7); runif(25*25) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_7da22faba8a9b80894d3a372d6832411() {
        assertEval("{ set.seed(7); rnorm(10) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_6ec5a8eb2a2164460eedcb849646bdfa() {
        assertEval("{ set.seed(7); rnorm(100) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_a542864c69d194d642a099dfb1614171() {
        assertEval("{ set.seed(7); rnorm(25*25) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_df978c7c4ae2f1a5807af2e7b94c56af() {
        assertEval("{ set.seed(7); matrix(rnorm(10), ncol=5) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_e560dc13b1f1b306ad6fa1b2fce918dc() {
        assertEval("{ set.seed(7); matrix(rnorm(100), ncol=10) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandom_0a8ca2987a86633f17d5c51210c07507() {
        assertEval("{ set.seed(7); matrix(rnorm(25*25), ncol=25) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_4f7a7feadb0afd594a6252de0817b40f() {
        assertEval("{ set.seed(4357, \"default\"); round( rnorm(3,1000,10), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_784f02d69de0bfc6b26f80cc27b3eaf0() {
        assertEval("{ round( rnorm(3,c(1000,2,3),c(10,11)), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_b2e35c06b054d504b83a29fdc0f2c77a() {
        assertEval("{ round( runif(3), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_38f6214fa41def07b060c01b29004277() {
        assertEval("{ round( runif(3,1,10), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_f1a576fe16d8967d5d94472745eb8757() {
        assertEval("{ round( runif(3,1:3,3:2), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_b1cb39289a32d016a5e4d8fd0369a06b() {
        assertEval("{ round( rgamma(3,1), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_98b47b95df69a17bd9bfaf2a24c9cffd() {
        assertEval("{ round( rgamma(3,0.5,scale=1:3), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_fd28dcd349e0cca475812e380ef658bf() {
        assertEval("{ round( rgamma(3,0.5,rate=1:3), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_e0ebcb975feabfb978612a64a771116e() {
        assertEval("{ round( rbinom(3,3,0.9), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_8c7daa50068479e536d478513c940605() {
        assertEval("{ round( rbinom(3,10,(1:5)/5), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_7d00e32e71b1e734a6bf82d8e5ad1e59() {
        assertEval("{ round( rlnorm(3), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_b35e5af9e87e8a17b87bad6537a48322() {
        assertEval("{ round( rlnorm(3,sdlog=c(10,3,0.5)), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_9e1f8a6e4a70c5688947e9205b449a9e() {
        assertEval("{ round( rcauchy(3), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRandomIgnore_df5e70f5779809e68123bd1f1474d2de() {
        assertEval("{ round( rcauchy(3, scale=4, location=1:3), digits = 5 ) }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_ac4677bb60d34cb54b0855ff9af216fe() {
        assertEval("{ rank(c(10,100,100,1000)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_b661e996c8bab94a49a1b912170e269c() {
        assertEval("{ rank(c(1000,100,100,100, 10)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_8119ffd7c473890dd5a8fb4bb4eb27dd() {
        assertEval("{ rank(c(a=2,b=1,c=3,40)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_79652345882c62a61705a5fc72b80f6c() {
        assertEval("{ rank(c(a=2,b=1,c=3,d=NA,e=40), na.last=NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_d933b8b9599a925bdbfc61565085f049() {
        assertEval("{ rank(c(a=2,b=1,c=3,d=NA,e=40), na.last=\"keep\") }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_920ad82c4f789e0f160e9bec2592a796() {
        assertEval("{ rank(c(a=2,b=1,c=3,d=NA,e=40), na.last=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_71d5d62deb1ac8f050666be28cc69770() {
        assertEval("{ rank(c(a=2,b=1,c=3,d=NA,e=40), na.last=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_25cc554304f5043b71318c6e7db78796() {
        assertEval("{ rank(c(a=1,b=1,c=3,d=NA,e=3), na.last=FALSE, ties.method=\"max\") }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_71c5bf762cec2ebaac51f86364fad786() {
        assertEval("{ rank(c(a=1,b=1,c=3,d=NA,e=3), na.last=NA, ties.method=\"min\") }");
    }

    @Test
    public void TestSimpleBuiltins_testRank_4b9cea01de60a8694a6b5606f91cf6e5() {
        assertEval("{ rank(c(1000, 100, 100, NA, 1, 20), ties.method=\"first\") }");
    }

    @Test
    public void TestSimpleBuiltins_testRbind_903e21f7160e1b75b925c546a71f2382() {
        assertEval("{ rbind(1.1:3.3,1.1:3.3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRbind_9db2e0a7ec8f0f38c9fc70e39ba19ea1() {
        assertEval("{ rbind() }");
    }

    @Test
    public void TestSimpleBuiltins_testRbind_877ba8a0c82ea0e1806b1b3a8989a6a6() {
        assertEval("{ rbind(1:3,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRbind_49055fb7dacb9a5ce0cca004d1b2c7cb() {
        assertEval("{ rbind(1:3,1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRbind_638277b823e65af7e856ecf66594c63e() {
        assertEval("{ m <- matrix(1:6, ncol=2) ; rbind(m, 11:12) }");
    }

    @Test
    public void TestSimpleBuiltins_testRbind_ad842ae6e75484f537190b0005164a2c() {
        assertEval("{ m <- matrix(1:6, ncol=2) ; rbind(11:12, m) }");
    }

    @Test
    public void TestSimpleBuiltins_testRbind_be158803468f8099cec173e61a9c21e2() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; rbind(11:12, m) }");
    }

    @Test
    public void TestSimpleBuiltins_testRbindIgnore_53509c8f581c1a9947804e87f0a3580f() {
        assertEval("{ info <- c(\"print\", \"AES\", \"print.AES\") ; ns <- integer(0) ; rbind(info, ns) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_95c6a5bfa6a3c21a1c0b96172569dae5() {
        assertEval("{ Re(1+1i) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_9ae67abaa867a65f6296a0c6492969f1() {
        assertEval("{ Im(1+1i) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_37988dec2f27d6109524ff49342aafb4() {
        assertEval("{ Re(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_74bde8d3265cea27201f771a32aa6820() {
        assertEval("{ Im(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_b51e9bf13edb27292ec723545da8014c() {
        assertEval("{ Re(c(1+1i,2-2i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_695e20e4675aae861985bf62be5c3dc2() {
        assertEval("{ Im(c(1+1i,2-2i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_710eccf642f88fe5b36e243eb0f50bf7() {
        assertEval("{ Re(c(1,2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_b4fc1b0b3a0a6825795dc057bdeb88d2() {
        assertEval("{ Im(c(1,2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_0b578f8709fd8650c76e4e966bfcf875() {
        assertEval("{ Re(as.double(NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_c471bf142d67a893551ed73c5005c67e() {
        assertEval("{ Im(as.double(NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_52ea9dd247c8e1ffe482ae528e37dc4f() {
        assertEval("{ Re(c(1,NA,2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_4f1f76d4ead8a97e2f5b391916ae7863() {
        assertEval("{ Im(c(1,NA,2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_5d8952605ab5cec9b014901812842ee7() {
        assertEval("{ Re(NA+2i) }");
    }

    @Test
    public void TestSimpleBuiltins_testReIm_ae55c54aa1488eae5687b14ae08b2008() {
        assertEval("{ Im(NA+2i) }");
    }

    @Test
    public void TestSimpleBuiltins_testRecall_ab1f19a0b3e459827e17703fdb01ae66() {
        assertEval("{ f<-function(i) { if(i<=1) 1 else i*Recall(i-1) } ; f(10) }");
    }

    @Test
    public void TestSimpleBuiltins_testRecall_0ba837fe54245bf403e44681adc101c6() {
        assertEval("{ f<-function(i) { if(i<=1) 1 else i*Recall(i-1) } ; g <- f ; f <- sum ; g(10) }");
    }

    @Test
    public void TestSimpleBuiltins_testRecall_c03f6fc45c4259fc4e69c35929eaece2() {
        assertEval("{ f<-function(i) { if (i==1) { 1 } else if (i==2) { 1 } else { Recall(i-1) + Recall(i-2) } } ; f(10) }");
    }

    @Test
    public void TestSimpleBuiltins_testRecall_9302e913fa9118c296d229ba8f6d2b1c() {
        assertEval("{ f <- function(tarDepth,curDepth) { if (tarDepth == curDepth) {curDepth} else {Recall(tarDepth,curDepth+1)}}; f(3,0) }");
    }

    @Test
    public void TestSimpleBuiltins_testRecall_7c29fb4f1a8750978976ebb307ddc9c8() {
        assertEvalError("{ Recall(10) }");
    }

    @Test
    public void TestSimpleBuiltins_testRegExprComplex_2fca97d9886cab7c0e522032fbfaa9c4() {
        assertEval("gregexpr(\"(a)[^a]\\\\1\", c(\"andrea apart\", \"amadeus\", NA))");
    }

    @Test
    public void TestSimpleBuiltins_testRegExprComplex_57c9bddc6da7a895a2d9c30bdf47b906() {
        assertEval("regexpr(\"(a)[^a]\\\\1\", c(\"andrea apart\", \"amadeus\", NA))");
    }

    @Test
    public void TestSimpleBuiltins_testRegExprIgnore_72408e09ac9c484ede969026b2eec870() {
        assertEval("regexpr(\"e\",c(\"arm\",\"foot\",\"lefroo\", \"bafoobar\"))");
    }

    @Test
    public void TestSimpleBuiltins_testRegExprIgnore_aed64085f066f3404115215e0fded1c4() {
        assertEval("gregexpr(\"e\",c(\"arm\",\"foot\",\"lefroo\", \"bafoobar\"))");
    }

    @Test
    public void TestSimpleBuiltins_testRep_d3b22cd966ba62bdefd363c5ad17c845() {
        assertEval("{ rep(1,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_fa2060c27d1216733fd09d08d594e4f5() {
        assertEval("{ rep(1:3,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_8c65cba8388301ff747dcfc6f6f37c90() {
        assertEval("{ rep(c(1,2),0) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_5f00249719b216513619a29b3d41fd07() {
        assertEval("{ rep(as.raw(14), 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_ad161db74641fdf279304ce82b348006() {
        assertEval("{ rep(1:3, length.out=4) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_a4d795c5d590995b4351345df5bcada9() {
        assertEval("{ rep(\"hello\", 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_1304ebded16b81c3bf627d5d6636af76() {
        assertEval("{ rep(c(1,2),c(3,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_8f05cab9d6b7794dd663a1b127caed75() {
        assertEval("{ rep(NA,8) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_1173238b1181a24badd0c5e5a847007a() {
        assertEval("{ rep(TRUE,8) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_f5295de8fec47c85c0ebb8273aaffe5e() {
        assertEval("{ rep(1:3, length.out=NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_37bcda27c57e6918291616b0f69bf3b6() {
        assertEval("{ x <- as.raw(11) ; names(x) <- c(\"X\") ; rep(x, 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_5b82141af1888c35e442c79c94ee046f() {
        assertEval("{ x <- as.raw(c(11,12)) ; names(x) <- c(\"X\",\"Y\") ; rep(x, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_2df9727ae253abdb9c0ea3a4055d1563() {
        assertEval("{ x <- c(TRUE,NA) ; names(x) <- c(\"X\",NA) ; rep(x, length.out=3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_41febe11e7d8ee67ae1a3c96176e6758() {
        assertEval("{ x <- 1L ; names(x) <- c(\"X\") ; rep(x, times=2) } ");
    }

    @Test
    public void TestSimpleBuiltins_testRep_4d2f602803b6746348def3b076ff4129() {
        assertEval("{ x <- 1 ; names(x) <- c(\"X\") ; rep(x, times=0) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_e8422af202641451dc9547b331356e3f() {
        assertEval("{ x <- 1+1i ; names(x) <- c(\"X\") ; rep(x, times=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_109091b6f9625b204bc0e053084ffef6() {
        assertEval("{ x <- c(1+1i,1+2i) ; names(x) <- c(\"X\") ; rep(x, times=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_5e2e382a5ebec41881dd1cac8e3dc177() {
        assertEval("{ x <- c(\"A\",\"B\") ; names(x) <- c(\"X\") ; rep(x, length.out=3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_22a733041501c35c7d97a6acd643f991() {
        assertEval("{ x<-c(1,2); names(x)<-c(\"X\", \"Y\"); rep(x, c(3,2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_281d10e359dc48f13431b09e01271833() {
        assertEval("{ rep(c(1, 2), each = 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_78860088eb872d017d6b7ba5fbdd6596() {
        assertEval("{ rep(c(1, 2), each = 2, length.out = 5) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_8d38408da739ee804613c73085cc1173() {
        assertEval("{ rep(c(1, 2), each = 2, length.out = 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_eadbfd6270a37af31fcdc43c6f0b7d4e() {
        assertEval("{ rep(c(1, 2), times = 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_ce92a8929168b5a8416e52dc227fe457() {
        assertEval("{ rep(c(1, 2), times = c(2, 3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_e08a497002e162d00f7e17895214317f() {
        assertEval("{ rep(c(1, 2), times = c(1, 2, 3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRep_cb3f88c9bfe5eebaa8ec50c300ed2ac5() {
        assertEval("{ rep(c(1, 2), times = c(2, 3), each = 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_4ccfb2f0d566a28b506a769bb45eaa31() {
        assertEval("{ rep.int(1,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_cfb2bd1a99d10fc97720eb038c036552() {
        assertEval("{ rep.int(1:3,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_2b2fb39de1b0018c90020a32fa7ed961() {
        assertEval("{ rep.int(c(1,2),0) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_4cc9c756f99cfd498d9f4c782df45f2b() {
        assertEval("{ rep.int(c(1,2),2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_48d3cf910b1d3a2a8ce4a2bb4354b19b() {
        assertEval("{ rep.int(as.raw(14), 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_85e972ec6a5a837de34d002db49ab2d2() {
        assertEval("{ rep.int(1L,3L) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_25dc3c5afcc02fec6b3cc41d5fbc3e7e() {
        assertEval("{ rep.int(\"a\",3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_264b7f55b69c74b5d7608d79fd8af72a() {
        assertEval("{ rep.int(c(1,2,3),c(2,8,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepInt_558756f9955358fcfc571fde7c1505dd() {
        assertEval("{ rep.int(seq_len(2), rep.int(8, 2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepIntIgnore_c27e773981d2951d5ec60b9e681b20f9() {
        assertEval("{ rep.int(c(1,2,3),c(2,8)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_1e2944bdccf7b834c200a495c2ed8b8c() {
        assertEval("{ rep_len(1, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_b9d08d63b74bbd0aefc44dbbe5978d1f() {
        assertEval("{ rep_len(3.14159, 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_7d3ff4e42e34159cda8990221b46466c() {
        assertEval("{ rep_len(\"RepeatTest\", 5) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_b036379806a33dc79973ab7e745ad73e() {
        assertEval("{ rep_len(2+6i, 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_4550656fefb8ff3b24b5835af4fbf72b() {
        assertEval("{ rep_len(TRUE, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_33547fe05740e9582db00a8b57af6199() {
        assertEval("{ x<-as.raw(16); rep_len(x, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_250740578ca7d04b67028c2cc6eb3e19() {
        assertEval("{ rep_len(1:4, 10) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_11516442170dae4ad3a3529f82c8fb67() {
        assertEval("{ rep_len(1:4, 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_56dad484fa4e0c5dff1b1946656da020() {
        assertEval("{ rep_len(1:4, 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_50e734b6c06233be95f2a255cd1ebdc6() {
        assertEval("{ rep_len(c(3.1415, 0.8), 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_cd26d2d81526a8ed20194f6a5a94fc64() {
        assertEval("{ rep_len(c(2i+3, 4+2i), 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_1f8358482acddfecc54bb97e1c4256a3() {
        assertEval("{ x<-as.raw(16); y<-as.raw(5); rep_len(c(x, y), 5) }");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_2d75960a0879f6b5bad8acd1d670df2e() {
        assertEval("{rep_len(x=1:2, length.out=4)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_615a14781b0b272254da32c2e2bb047b() {
        assertEval("{rep_len(length.out=4, x=1:2)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_7606c064d12ac132685ea29891054c80() {
        assertEval("{rep_len(length.out=4, \"text\")}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_857e2661dad694ab0dc9ffef1bdb7421() {
        assertEval("{rep_len(4, x=\"text\")}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_06f8d5f8c326a62b911640af72d8768c() {
        assertEval("{x<-\"text\"; length.out<-4; rep_len(x=x, length.out=length.out)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_a6ff9fee0ce1bbf6517ab8ff300cc3b7() {
        assertEval("{x<-\"text\"; length.out<-4; rep_len(length.out=length.out, x=x)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_8429224a33cc26907ae3f0e002b3d7a9() {
        assertEval("{rep_len(c(\"abcd\", \"efg\"), 7)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_81b03b50821133ffb87b06692b01665e() {
        assertEval("{rep_len(c(\"abcd\", \"efg\"), 14)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_3adbca74b8af3c026793e1946f29b25f() {
        assertEval("{rep_len(c(\"abcd\", \"efg\"), 8)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_36703236ce021537228fca985495233a() {
        assertEval("{rep_len(c(\"abcd\", \"efg\"), 0)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_384cd1468eadfe80fc5c51793f3b2b35() {
        assertEval("{rep_len(c(\"abcd\", \"efg\"), 1)}");
    }

    @Test
    public void TestSimpleBuiltins_testRepLen_5b20f822b44b9833616610e8b91bf41b() {
        assertEval("{rep_len(c(\"abcd\", \"efg\"), 2)}");
    }

    @Test
    public void TestSimpleBuiltins_testRev_4d0b89f7d5b9601a90230cf009915fc3() {
        assertEval("{ rev(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testRev_fad7bbf7a1b8ce343cbb228baf5ae77a() {
        assertEval("{ rev(c(1+1i, 2+2i)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRound_33dc93cb0d4989bdf0b386cebae13f9d() {
        assertEval("{ round(0.4) }");
    }

    @Test
    public void TestSimpleBuiltins_testRound_d4361bb15b45e1b2f7425b3a26561a87() {
        assertEval("{ round(0.5) }");
    }

    @Test
    public void TestSimpleBuiltins_testRound_06c33514c24463e163687c2382f27715() {
        assertEval("{ round(0.6) }");
    }

    @Test
    public void TestSimpleBuiltins_testRound_f194a1b4b1019dd99327b6cfa143234f() {
        assertEval("{ round(1.5) }");
    }

    @Test
    public void TestSimpleBuiltins_testRound_226302ca4a1143b69b70bf41dc906765() {
        assertEval("{ round(-1.5) }");
    }

    @Test
    public void TestSimpleBuiltins_testRound_0b1e3418feeb75dce8ac55176403caa4() {
        assertEval("{ round(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testRound_63d9dc3dcde6510b4d0eaa1feb47039b() {
        assertEval("{ round(1/0) }");
    }

    @Test
    public void TestSimpleBuiltins_testRound_c9f80053d1763fbdf554f07bf0d3efbc() {
        assertEval("{ round(c(0,0.2,0.4,0.6,0.8,1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRoundIgnore_bb594f5dd03efc19fa1dbee51b5324da() {
        assertEval("{ round(1.123456,digit=2.8) }");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_a9d2ae014a395633e667ee280920f95c() {
        assertEval("{rowMeans(matrix(c(3,4,2,5)))}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_9ca18f7870cbb920dee99385fac80db5() {
        assertEval("{rowMeans(matrix(c(3L,4L,2L,5L)))}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_ef3d540c7e588cf7b68c15fd2ff870f0() {
        assertEval("{rowMeans(matrix(c(TRUE,FALSE,FALSE,TRUE)))}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_37c19d85d7fb7a36939c658b2a9ff5d5() {
        assertEval("{rowMeans(matrix(c(3+2i,4+5i,2+0i,5+10i)))}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_5686edb3785b505afbcd157770d5d9c8() {
        assertEval("{rowMeans(matrix(c(3,4,NaN,5),ncol=2,nrow=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_b26019def290c72bfa2e503480fb26d1() {
        assertEval("{rowMeans(matrix(c(3,4,NaN,5),ncol=2,nrow=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_6988222e88914a3575927c6c5cc88f15() {
        assertEval("{rowMeans(matrix(c(3L,NaN,2L,5L),ncol=2,nrow=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_5f97043471aa58607a9627e8a8881260() {
        assertEval("{rowMeans(matrix(c(3L,NA,2L,5L),ncol=2,nrow=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_51d85950f9bd81a169bdb5492b51e5cb() {
        assertEval("{rowMeans(matrix(c(3L,NaN,2L,5L),ncol=2,nrow=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_60a4f27def2bea97cbe90a4d635e4716() {
        assertEval("{rowMeans(matrix(c(3L,NA,2L,5L),ncol=2,nrow=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_bd154e80e3eeeeb1defa8b8ef3705c34() {
        assertEval("{rowMeans(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_97cdd7c5d45554ff955f27dd786ae741() {
        assertEval("{rowMeans(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_abeb57d056650016301c16dca94884c8() {
        assertEval("{rowMeans(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_81a50a6f78a5a0e400c8193d427d0d34() {
        assertEval("{rowMeans(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_73dc275b91786b952014453cbb8ccad5() {
        assertEval("{rowMeans(matrix(c(NaN,4+5i,2+0i,5+10i),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeans_1971a7088774446d1515bc3b3ddeed3f() {
        assertEval("{rowMeans(matrix(c(NA,NaN,NaN,NA),ncol=2,nrow=2))}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeansIgnore_ee1961081fcfca53ea506fa81009d5b5() {
        assertEval("{rowMeans(matrix(c(NaN,4+5i,2+0i,5+10i),nrow=2,ncol=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeansIgnore_1d83557bfc6a9792419b6f87c844133e() {
        assertEval("{rowMeans(matrix(NA,NA,NA),TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeansIgnore_80aaaab0a28cbb6472de7b973b40187b() {
        assertEval("{x<-matrix(c(\"1\",\"2\",\"3\",\"4\"),ncol=2);rowMeans(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_2aea5a368dd96ae78cf6c291d8093825() {
        assertEval("{x<-cbind(1:3, 4:6, 7:9); rowSums(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_3b556305d409bf0cfabab83c2c7e761e() {
        assertEval("{x<-cbind(1:3, NA, 7:9); rowSums(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_b0f5834a4107dbbf8e8322bfda9f68dd() {
        assertEval("{x<-cbind(1:3, NaN, 7:9); rowSums(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_44bc0cb66b10b0f886929a3edbeaeb4a() {
        assertEval("{x<-cbind(1:3, NaN, 7:9, 10:12); rowSums(x, na.rm=TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_c1d457fbbed5c20ef15bba61cd56e2ec() {
        assertEval("{x<-cbind(1:4, NA, NaN, 9:12); rowSums(x, na.rm=TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_bfdfa47f89b869065d5be0c9ecb14d68() {
        assertEval("{x<-cbind(2L:10L,3L); rowSums(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_fab758908c0caaa7339d786e9c1684d6() {
        assertEval("{rowSums(matrix(c(3+2i,4+5i,2+0i,5+10i)))}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_c4911f49ac6d6625bda6cdb02478550a() {
        assertEval("{rowSums(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_c4e44dabe0b8241e5771ad2794ba4d8a() {
        assertEval("{rowSums(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_90a13b885dadb5366d7d7cfd3cbe1b34() {
        assertEval("{rowSums(matrix(c(TRUE,FALSE,FALSE,NaN),nrow=2,ncol=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_31878f9d587862187bdbcccf0a40a3b7() {
        assertEval("{rowSums(matrix(c(TRUE,FALSE,FALSE,NA),nrow=2,ncol=2), na.rm = FALSE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_4968490fa6e0d47210c915d5913c82cf() {
        assertEval("{rowSums(matrix(c(NaN,4+5i,2+0i,5+10i),nrow=2,ncol=2), na.rm = TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_13c6b7a0732e5265c2a6dbdb261ccea7() {
        assertEval("{rowSums(matrix(c(NA,NaN,NaN,NA),ncol=2,nrow=2))}");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_80140817c8e933718f596cc1e3fbdfd6() {
        assertEval("{ a = rowSums(matrix(1:12,3,4)); is.null(dim(a)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_4d8e03379ba609c667ba75b44ee74af9() {
        assertEval("{ a = rowSums(matrix(1:12,3,4)); length(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_8da03b857598bdb3f6318c67e59d362c() {
        assertEval("{ a = rowSums(matrix(1:12,3,4)); c(a[1],a[2],a[3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_c5f4c7d13c735e2fa65c4f607b63518b() {
        assertEval("{ a = rowSums(array(1:24,c(2,3,4))); is.null(dim(a)) }");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_06049a7dceb10c804f2b283437a7e06a() {
        assertEval("{ a = rowSums(array(1:24,c(2,3,4))); length(a) }");
    }

    @Test
    public void TestSimpleBuiltins_testRowSums_0963abebe9629587b68d742c268c67e5() {
        assertEval("{ a = rowSums(array(1:24,c(2,3,4))); c(a[1],a[2]) }");
    }

    @Test
    public void TestSimpleBuiltins_testRowSumsIgnore_fc993b3be8ff0e09bc78bbb22bcf0aec() {
        assertEval("{x<-matrix(c(\"1\",\"2\",\"3\",\"4\"),ncol=2);rowSums(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_4ff6bda9510551be806260a91f29d66a() {
        assertEval("{  set.seed(4357, \"default\"); x <- 5 ; sample(x, 5, TRUE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_7d15c43b3d043034eab7b73140e1cf37() {
        assertEval("{  set.seed(4357, \"default\"); x <- 5 ; sample(x, 5, FALSE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_dcc747e817ac6dfb48a4cfe58ab530a1() {
        assertEval("{ set.seed(4357, \"default\");  x <- c(5, \"cat\"); sample(x, 2, TRUE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_5db44efede9eccb3844c2a664fdfb613() {
        assertEval("{ set.seed(4357, \"default\"); x <- c(5, \"cat\"); sample(x, 2, FALSE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_ae46a6860ad161f9d1b365edd6733b48() {
        assertEval("{ set.seed(4357, \"default\"); x <- c(5, \"cat\"); sample(x, 3, TRUE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_e9e71c268121741bbebdc93fe3aeeca2() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- 5; sample(x, 5, TRUE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_380de40128e214239e48bd8a9582f2b3() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- 5; sample(x, 5, FALSE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_4151d2a38fea7d8e89b9294821bf801d() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- c(5, \"cat\") ; sample(x, 2, TRUE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_f9a3a95a8ce4b1634718d2bdadf55059() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- c(5, \"cat\") ; sample(x, 2, FALSE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_95f2b8b4b242402b0e8a215e80f0901f() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- c(5, \"cat\") ; sample(x, 3, TRUE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSample_ec1b2a0d90f3dfaa4954b34e9f0eb188() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- 5 ; prob <- c(.1, .2, .3, .2, .1) ; sample(x, 10, TRUE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSample_baf0f9fc33df9324c96b03a18647b595() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- 5 ; prob <- c(.5, .5, .5, .5, .5) ; sample(x, 5, FALSE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSample_b37922d5b3d4e6177f75c6ccd3a7fd56() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- 5 ; prob <- c(.2, .2, .2, .2, .2 ) ; sample(x, 5, FALSE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSample_756246d0e7c35e8aa71be5fb6307cb72() {
        assertEval("{ set.seed(4357, \"default\"); x <- c(\"Heads\", \"Tails\"); prob <- c(.3, .7) ; sample(x, 10, TRUE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSample_537b4f38f3640bbfa1b50ae75f90263c() {
        assertEval("{ set.seed(4357, \"default\"); x <- 5 ; prob <- c(.1, .2, .3, .2, .1); sample(x, 10, TRUE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSample_23c57d8cc4f196725a722d2b6727e522() {
        assertEval("{ set.seed(4357, \"default\"); x <- 5 ; prob <- c(.5, .5, .5, .5, .5); sample(x, 5, FALSE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSample_d02968add548f0fe4e773d609cb0ffea() {
        assertEval("{ set.seed(4357, \"default\"); x <- 5 ; prob <- c(.2, .2, .2, .2, .2 ); sample(x, 5, FALSE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_ff42abcbf4f968c27e32a7dd28eda044() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\");x <- c(5) ; prob <- c(1, 2, 3, 4, 5) ; sample(x, 5, TRUE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_c0abb95d78ba54d518dba3716e78f683() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\");x <- c(5) ; prob <- c(1, 2, 3, 4, 5) ; sample(x, 5, FALSE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_b703c1a90d66f9baf7ccbe08919f69d1() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\");x <- c(\"Heads\", \"Tails\") ; prob <- c(.3, .7) ; sample(x, 10, TRUE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_c90feee3f3b3a20606e1b43eab8afb31() {
        assertEval("{ set.seed(4357, \"default\"); x <- c(5) ; prob <- c(1, 2, 3, 4, 5) ; sample(x, 5, TRUE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_18482bc15a1e30cd46e5be81317a3374() {
        assertEval("{ set.seed(4357, \"default\"); x <- c(5) ; prob <- c(1, 2, 3, 4, 5) ; sample(x, 5, FALSE, prob) ; }");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_38b963b6f50f4a4d9e1250d1df321b43() {
        assertEval("{ set.seed(4357, \"default\"); x <- 5 ; sample(x, 6, FALSE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_2935bb73d988381d4ae52f265101577a() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- 5 ; sample(x, 6, FALSE, NULL) ;}");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_d1488c6ad2fa1184247d106e5336622c() {
        assertEval("{ f <- function() { sapply(1:3,function(x){x*2L}) }; f() + f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_064143bb552ca8892a7483cf88daa85c() {
        assertEval("{ f <- function() { sapply(c(1,2,3),function(x){x*2}) }; f() + f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_caee58efeb733b5717f0de91b4d20756() {
        assertEval("{ h <- new.env() ; assign(\"a\",1,h) ; assign(\"b\",2,h) ; sa <- sapply(ls(h), function(k) get(k,h,inherits=FALSE)) ; names(sa) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_bf5deeac7ad8a02e0a8f0670b694c2a5() {
        assertEval("{ sapply(1:3, function(x) { if (x==1) { list(1) } else if (x==2) { list(NULL) } else { list() } }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_6f9651f5a0cd6b702fe7b1d763478038() {
        assertEval("{ f<-function(g) { sapply(1:3, g) } ; f(function(x) { x*2 }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_7a12a0c33bfc6b4de9d80979df389588() {
        assertEval("{ f<-function() { x<-2 ; sapply(1, function(i) { x }) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_2eba6aa90b9d5b807306d4d68ef8b26d() {
        assertEval("{ sapply(1:3,function(x){x*2L}) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_1cbe85169b8580a19e21f8d802e27042() {
        assertEval("{ sapply(c(1,2,3),function(x){x*2}) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_2f7f99dcbb19562b3d6f17b94ee73fcb() {
        assertEval("{ sapply(1:3, length) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_676fc88e5b4a020d243c4c5db88ae38e() {
        assertEval("{ f<-length; sapply(1:3, f) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_2fcfbb48a94218b02477a08b3c2ea9e6() {
        assertEval("{ sapply(list(1,2,3),function(x){x*2}) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_2af813149c865c375985a936ebdb0b4a() {
        assertEval("{ sapply(1:3, function(x) { if (x==1) { 1 } else if (x==2) { integer() } else { TRUE } }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_e30b8dbeaaac291438d9893765622dcc() {
        assertEval("{ f<-function(g) { sapply(1:3, g) } ; f(function(x) { x*2 }) ; f(function(x) { TRUE }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_d1e677fbd4330542e55296a85de7a560() {
        assertEval("{ sapply(1:2, function(i) { if (i==1) { as.raw(0) } else { 5+10i } }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_3348bfd05e16974ee51fd002aa21a7c4() {
        assertEval("{ sapply(1:2, function(i) { if (i==1) { as.raw(0) } else { as.raw(10) } }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_a1f12546a0709e269e55fdf2ce6796a1() {
        assertEval("{ sapply(1:2, function(i) { if (i==1) { as.raw(0) } else { \"hello\" }} ) } ");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_64d9e8edd48f17d106de20e6c9502df6() {
        assertEval("{ sapply(1:3, function(x) { if (x==1) { list(1) } else if (x==2) { list(NULL) } else { list(2) } }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_567fb751fa9228a98594254d6b9f8f06() {
        assertEval("{ sapply(1:3, `-`, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_9ad66c18d0dee6188d50055a969a5721() {
        assertEval("{ sapply(1:3, \"-\", 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_2be6b7c9102a07fc7019e3f281e0ee77() {
        assertEval("{ sapply(1:3, function(i) { list(1,2) }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_e47eef80479600898e0643dc204df376() {
        assertEval("{ sapply(1:3, function(i) { if (i < 3) { list(1,2) } else { c(11,12) } }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_90910a59f9c7641649fafc606ad82fbe() {
        assertEval("{ sapply(1:3, function(i) { if (i < 3) { c(1+1i,2) } else { c(11,12) } }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_2cf7378fd6b712f0b62c0f76b237c08c() {
        assertEval("{ (sapply(1:3, function(i) { if (i < 3) { list(xxx=1) } else {list(zzz=2)} })) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_91913713ed1196f2c80dc3bdd44320fe() {
        assertEval("{ (sapply(1:3, function(i) { list(xxx=1:i) } )) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_142908c5c8b7910e9934f2f41b1aa41a() {
        assertEval("{ sapply(1:3, function(i) { if (i < 3) { list(xxx=1) } else {list(2)} }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_2304de70341b6e2e641140ace2ce7f15() {
        assertEval("{ (sapply(1:3, function(i) { if (i < 3) { c(xxx=1) } else {c(2)} })) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_5a1e2c136a6c7890d7d240bbf2b24fd5() {
        assertEval("{ f <- function() { sapply(c(1,2), function(x) { c(a=x) })  } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_c113767d2df4d2f9f537c1fcd5cc62c2() {
        assertEval("{ f <- function() { sapply(c(X=1,Y=2), function(x) { c(a=x) })  } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_a5b2fb168341e693b49bdbf8260ea50a() {
        assertEval("{ f <- function() { sapply(c(\"a\",\"b\"), function(x) { c(a=x) })  } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_5024f503e2bdd48f3b32408e0c8c3e1c() {
        assertEval("{ f <- function() { sapply(c(X=\"a\",Y=\"b\"), function(x) { c(a=x) })  } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_c2167cd4565e9253a6b834237b6772a6() {
        assertEval("{ sapply(c(\"a\",\"b\",\"c\"), function(x) { x }) }");
    }

    @Test
    public void TestSimpleBuiltins_testSapply_ffe24cf837a4127ce35a5ae2989f5295() {
        assertEval("{ f <- function(v) { sapply(1:3, function(k) v)}; f(1); f(2) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_6ce38938957aa74ca8c5a4af6de949db() {
        assertEval("{ con<-textConnection(c(\"TITLE extra line\", \"2 3 5 7\", \"11 13 17\")); scan(con, skip = 1, quiet = TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_9aa8e52d2ad98511843283b9753e7e32() {
        assertEval("{ con<-textConnection(c(\"TITLE extra line\", \"2 3 5 7\", \"11 13 17\")); scan(con, skip = 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_32beb8f339456101965440adf07bc70a() {
        assertEval("{ con<-textConnection(c(\"TITLE extra line\", \"2 3 5 7\", \"11 13 17\")); scan(con, skip = 1, nlines = 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_88780f5fd3419951c50990b70fda4a21() {
        assertEval("{ con<-textConnection(c(\"TITLE extra line\", \"2 3 5 7\", \"11 13 17\")); scan(con, what = list(\"\",\"\",\"\"), flush=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_d797ae7c9d316b0e407c0192790da03b() {
        assertEval("{ con<-textConnection(c(\"HEADER\", \"7 2 3\", \"4 5 42\")); scan(con, skip = 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_a990cb0285fdcb5edcc64519b5a6673b() {
        assertEval("{ con<-textConnection(c(\"HEADER\", \"7 2 3\", \"4 5 42\")); scan(con, skip = 1, quiet=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_7cdf357f0dd6e86ad8f7f92579bea613() {
        assertEval("{ con<-textConnection(c(\"HEADER\", \"7 2 3\", \"4 5 42\")); scan(con, skip = 1, nlines = 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_c1f51db80a9fbe167afc07873c64dd31() {
        assertEval("{ con<-textConnection(c(\"HEADER\", \"7 2 3\", \"4 5 42\")); scan(con, what = list(\"\",\"\",\"\"), fill=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_49c07224e8b945a3e96a35a0f8667b5d() {
        assertEval("{ con<-textConnection(c(\"HEADER\", \"7 2 3\", \"4 5 42\")); scan(con, what = list(\"\",\"\",\"\"), fill=TRUE, multi.line=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_0ff821104ddd08c3fa7cb745e8e56b56() {
        assertEval("{ con<-textConnection(c(\"\\\"2\\\"\", \"\\\"11\\\"\")); scan(con, what=list(\"\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_371f0a86c95441f2e6869739e303757d() {
        assertEval("{ con<-textConnection(c(\"2 3 5\", \"\", \"11 13 17\")); scan(con, what=list(\"\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_bfddbe9a3576d1b07d6937944054b2ef() {
        assertEval("{ con<-textConnection(c(\"2 3 5\", \"\", \"11 13 17\")); scan(con, what=list(\"\"), blank.lines.skip=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_3e9be5b7630237bf05b9207280782cd6() {
        assertEval("{ con<-textConnection(c(\"2 3 5\", \"\", \"11 13 17\")); scan(con, what=list(integer()), blank.lines.skip=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_b8f3b1d9a56e8007f88901ad2eb60b2b() {
        assertEval("{ con<-textConnection(c(\"foo faz\", \"\\\"bar\\\" \\\"baz\\\"\")); scan(con, what=list(\"\", \"\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_c3fa154225600cf3eb4f22771ad5faf4() {
        assertEval("{ con<-textConnection(c(\"foo faz\", \"bar \\\"baz\\\"\")); scan(con, what=list(\"\", \"\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_18238bac432cdfe34e2933d2a5ede19f() {
        assertEval("{ con<-textConnection(c(\"foo, faz\", \"bar, baz\")); scan(con, what=list(\"\", \"\"), sep=\",\") }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_1a9f4a5c02250dbe595746a1b0656d70() {
        assertEvalError("{ con<-textConnection(c(\"HEADER\", \"7 2 3\", \"4 5 42\")); scan(con, what = list(\"\",\"\",\"\"), multi.line=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_072fc8a68eec1fb75f74adbdcc842c0e() {
        assertEvalWarning("{ con<-textConnection(c(\"TITLE extra line\", \"2 3 5 7\", \"11 13 17\")); scan(con, what = list(\"\",\"\",\"\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testScan_4c29af300371631d72632f9e65625add() {
        assertEvalWarning("{ con<-textConnection(c(\"HEADER\", \"7 2 3\", \"4 5 42\")); scan(con, what = list(\"\",\"\",\"\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testSd_a7e5475bbc1990b7bf61f291042c9dc4() {
        assertEval("{ round(100*sd(c(1,2))^2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSeqLen_9a7e2f05aea68278b395c8a236791663() {
        assertEval("{ seq_len(10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSeqLen_6f9e27c3c8f37710b7ba1c01381930cf() {
        assertEval("{ seq_len(5L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSeqLen_d97f2e2af09702e2a3be97b239cb2187() {
        assertEval("{ seq_len(1:2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSeqLen_91c5e4e4c0e406ba0750d17d6f4f019d() {
        assertEval("{ seq_len(integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_521e4a932cff700b625d2bfa8bbdcf0f() {
        assertEval("{ 5L:10L }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_d79bd620eece5b7d4d7a6df0156d438f() {
        assertEval("{ 5L:(0L-5L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_e1f9fc3029ece649eda55d230825b611() {
        assertEval("{ 1:10 }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_82184fedd2ad890a017bfb4d43a592ae() {
        assertEval("{ 1:(0-10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_69c90807f8ff216d25b73a6826054e8b() {
        assertEval("{ 1L:(0-10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_ffc04a18b2cdc358ba766fe986158dd4() {
        assertEval("{ 1:(0L-10L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_f0d36c1d41525fa15e938cbb14e8152a() {
        assertEval("{ (0-12):1.5 }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_dd29b7a979c708238b10d3bfdadfd1f0() {
        assertEval("{ 1.5:(0-12) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_3b4f0d9fdad10f80a40cbf25c5a0c70a() {
        assertEval("{ (0-1.5):(0-12) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_739d2e57eb05e3ca6a2c8182f854a3ad() {
        assertEval("{ 10:1 }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_75ce42236f5c48ebe0a94226935498bc() {
        assertEval("{ (0-5):(0-9) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequence_05358d747ae7f4d160ef82b11ff90f30() {
        assertEval("{ 1.1:5.1 }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_f0ced7ecdfec4e76074a7f2580e91928() {
        assertEval("{ seq(1L,10L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_f4512de25e264ad92db2680e06133608() {
        assertEval("{ seq(10L,1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_d6e5e8fee79605724f232197ef045064() {
        assertEval("{ seq(1L,4L,2L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_7267f495fcb0457ba0bbd81da84d4e56() {
        assertEval("{ seq(1,-4,-2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_481327faf16e125d88a6117b46c8706b() {
        assertEval("{ seq(0,0,0) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_e78a38503650451989dfc4d88cf8c9c8() {
        assertEval("{ seq(0,0) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_f3adf9a03ea03b3ba5667bc1d8604d4b() {
        assertEval("{ seq(0L,0L,0L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_f76c10e4607e09b91b9101204f360dfa() {
        assertEval("{ seq(0L,0L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_437ed7508d9c762a7c8e464ff6bff52d() {
        assertEval("{ seq(0,0,1i) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_058f5a09a22c77b4421a6a2610838e18() {
        assertEval("{ seq(integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_dea4be53b087a0c12fb86db7de2333e8() {
        assertEval("{ seq(double()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_b940a1279877f01f5357ef57c949a8de() {
        assertEvalError("{ seq(integer(), 7) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_784211c4794312cf9de4332b21284e1a() {
        assertEvalError("{ seq(c(1,2), 7) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_3b53bae7d8fef5a75a6e7078ccf5ffd8() {
        assertEvalError("{ seq(7, integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatement_c16f183220096a8e3416e90afca5b4e3() {
        assertEvalError("{ seq(7, c(41,42)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementIgnore_6e0da5f0115b849917bed14234134dd1() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10), seq(2L,4L,2L),c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementIgnore_0eb86a4dc13ce0ad3244974ab0baef64() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.double(1:5), seq(7L,1L,-3L),c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementIgnore_94d11f5198379c03b6e2a20a174ae13b() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.logical(-3:3),seq(1L,7L,3L),c(TRUE,NA,FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementIgnore_74f98be1aeeaf4ffef6fb7da1d0df304() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.character(-3:3),seq(1L,7L,3L),c(\"A\",\"a\",\"XX\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementIgnore_7689ae968008d949c0ab6cd0ffaff400() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(1:8, seq(1L,7L,3L), c(10,100,1000)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementIgnore_62d05e6f950604222ac778f81a04c118() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; z <- f(1:8, seq(1L,7L,3L), list(10,100,1000)) ; sum(as.double(z)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParams_18694bb5ccdf385e6887a516efe02fe8() {
        assertEval("{ seq(from=1,to=3) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParams_1efbcccae5859c6dec6f4f14658bc0af() {
        assertEval("{ seq(length.out=1) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParams_831618fbb7e8dff236e5ed2dadc222b6() {
        assertEval("{ seq(from=1.4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParams_602bfdaca1ca57ba5a79e4ad6757b4eb() {
        assertEval("{ seq(from=1.7) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParams_a45c47e7c8d03a35171e9ea681aeb669() {
        assertEval("{ seq(from=1,to=3,by=1) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParams_953b69f5c8ebbd510614bbb5fd97b426() {
        assertEval("{ seq(from=-10,to=-5,by=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParams_017c83d5285ef470e086c8cdcf688948() {
        assertEval("{ seq(length.out=0) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_1251c8e4910f8fd3c34d302f4dedd4e3() {
        assertEval("{ seq(to=-1,from=-10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_e098431abfadfb039b6df6aff8256b5e() {
        assertEval("{ seq(length.out=13.4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_4d45a903e77e66f73e8e8dc46c0f6295() {
        assertEval("{ seq(along.with=10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_8f03e56bf879ae85769df875ba64193f() {
        assertEval("{ seq(along.with=NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_260fc64c52f6c6a0f229523992fc18b8() {
        assertEval("{ seq(along.with=1:10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_6da980d127281bc30e3ee84c77da9350() {
        assertEval("{ seq(along.with=-3:-5) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_9e0234d61f5fcd67663f569045ba0f06() {
        assertEval("{ seq(from=10:12) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_90194674658adf75d59119916718fc06() {
        assertEval("{ seq(from=c(TRUE, FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_06d793d38a0809d898a5bc0678f47dd2() {
        assertEval("{ seq(from=TRUE, to=TRUE, length.out=0) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_252700236c9eb870fbf263c1aacd182e() {
        assertEval("{ round(seq(from=10.5, to=15.4, length.out=4), digits=5) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_34a207f39c5269d9972a5c0adda240b1() {
        assertEval("{ seq(from=11, to=12, length.out=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_2b815d4518fb10efc18eb377b3111cbc() {
        assertEval("{ seq(from=-10.4,to=-5.8,by=2.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_57722e8323d481afeb0dc6bc8ef818e9() {
        assertEval("{ round(seq(from=3L,to=-2L,by=-4.2), digits=5) }");
    }

    @Test
    public void TestSimpleBuiltins_testSequenceStatementNamedParamsIgnore_6e790dfb1de4a070282c353b0be255bd() {
        assertEval("{ seq(along=c(10,11,12)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSetAttr_4c035922fa30fd65161fe53e1af97368() {
        assertEval("{ x <- NULL; levels(x)<-\"dog\"; levels(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testSetAttr_d3a803a8bcf4ca34f3f28cc87c530aef() {
        assertEval("{ x <- 1 ; levels(x)<-NULL; levels(notx)}");
    }

    @Test
    public void TestSimpleBuiltins_testSimpleRm_ca7a9f28edcdd3c7bf66a0b3735a11dc() {
        assertEval("{ x <- 200 ; rm(\"x\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSimpleRm_7c0682fb8c9a86ff5b94ead1d97dbab6() {
        assertEvalError("{ x <- 200 ; rm(\"x\") ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSimpleRm_8662a5030633d2cb14450cd771888e2b() {
        assertEvalError("{ x<-200; y<-100; rm(\"x\", \"y\"); x }");
    }

    @Test
    public void TestSimpleBuiltins_testSimpleRm_9f23e805abd852e0d37f62b2941a1ed5() {
        assertEvalError("{ x<-200; y<-100; rm(\"x\", \"y\"); y }");
    }

    @Test
    public void TestSimpleBuiltins_testSimpleRm_638fe08c6d320c8475e37234929ca562() {
        assertEvalWarning("{ rm(\"ieps\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSort_284b7e7d187c6ab2e4fa9e4409153a7b() {
        assertEval("{ sort(c(1L,10L,2L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSort_1fd4d093837b7d126d0ef7530e43c343() {
        assertEval("{ sort(c(3,10,2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_6a592c6f57c71c5d15a2ca0155fee884() {
        assertEval("{ sort(c(1,2,0/0,NA)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_5aa86dc4ae1bb25c682d61e872e9b040() {
        assertEval("{ sort(c(2,1,0/0,NA), na.last=NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_6a7ec5187507fa97abda94b64f5a079d() {
        assertEval("{ sort(c(3,0/0,2,NA), na.last=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_b5d4d0684b5f7ae93abbd963d09e2547() {
        assertEval("{ sort(c(3,NA,0/0,2), na.last=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_ccb733ea6a05ce0344a90278f6b60239() {
        assertEval("{ sort(c(3L,NA,2L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_894104e630b40ec41f7a3242c9dd48bb() {
        assertEval("{ sort(c(3L,NA,-2L), na.last=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_7371476317ce19939f96f4a8546a66ca() {
        assertEval("{ sort(c(3L,NA,-2L), na.last=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_b2088bf4f79792e07aeb1878814c42dd() {
        assertEval("{ sort(c(a=NA,b=NA,c=3,d=1),na.last=TRUE, decreasing=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_7cfdc805071697201c562b5f50ebd539() {
        assertEval("{ sort(c(a=NA,b=NA,c=3,d=1),na.last=FALSE, decreasing=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_ac8a4c1d13606a72e3e1b8c439efda29() {
        assertEval("{ sort(c(a=0/0,b=1/0,c=3,d=NA),na.last=TRUE, decreasing=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_519a0465d477a73e1db30d78e8776c1b() {
        assertEval("{ sort(double()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_df4ed76c79e6d77ac09a69738271e1fd() {
        assertEval("{ sort(c(a=NA,b=NA,c=3L,d=-1L),na.last=TRUE, decreasing=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_2ce0809f50d42943354aa60d00cd1a90() {
        assertEval("{ sort(c(3,NA,1,d=10), decreasing=FALSE, index.return=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSortIgnore_9f37df375d06bb45b37c5fe0fb3d1b54() {
        assertEval("{ sort(3:1, index.return=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSource_5c17b4de1a98b4e6a8cfa7815d97f7e4() {
        assertEval("{ source(\"test/r/simple/data/tree2/setx.r\") ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSource_d4a38dfd161547e3c0a27bad69e1cbf8() {
        assertEval("{ source(\"test/r/simple/data/tree2/setx.r\", local=TRUE) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSource_be101f4a7d5eb393d6100a7da3b04018() {
        assertEval("{ x <- 1; f <- function() { source(\"test/r/simple/data/tree2/setx.r\", local=TRUE) ; x } ; c(f(), x) }");
    }

    @Test
    public void TestSimpleBuiltins_testSource_f8c23fa44e5be57cccce50c2c2c77af6() {
        assertEval("{ x <- 1; f <- function() { source(\"test/r/simple/data/tree2/setx.r\", local=FALSE) ; x } ; c(f(), x) }");
    }

    @Test
    public void TestSimpleBuiltins_testSource_47529aa6f5e299a286137b552e7163dc() {
        assertEval("{ x <- 1; f <- function() { source(\"test/r/simple/data/tree2/incx.r\", local=FALSE) ; x } ; c(f(), x) }");
    }

    @Test
    public void TestSimpleBuiltins_testSource_e52eebdb86410e47576dc1c11b4690b0() {
        assertEval("{ x <- 1; f <- function() { source(\"test/r/simple/data/tree2/incx.r\", local=TRUE) ; x } ; c(f(), x) }");
    }

    @Test
    public void TestSimpleBuiltins_testSplit_54724c7a16d9d337779ddd57f66b9fe9() {
        assertEval("{ split(1:10, 1:2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSplit_fe14a6d85fd278368fa7d655f817309e() {
        assertEval("{ ma <- cbind(x = 1:10, y = (-4:5)^2) ; split(ma, col(ma)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSplit_3209000db7f5918307889e642d7e1e57() {
        assertEval("{ fu <- c(1,2,2,1,2,2,1,2,2,1,2,2,1,2,2,1,2,2,1,1) ; split(1:20,fu) }");
    }

    @Test
    public void TestSimpleBuiltins_testSplit_4e3d6c8535597da99914e35ab11a6947() {
        assertEval("{ fu <- c(\"a\",\"b\") ; split(1:8,fu) }");
    }

    @Test
    public void TestSimpleBuiltins_testSplit_bb711f5c27cbd7b60881617bc02fb801() {
        assertEval("{ g <- factor(round(c(0.4,1.3,0.6,1.8,2.5,4.1,2.2,1.0))) ; x <- c(0.1,3.2,1,0.6,1.9,3.3,1.6,1.7) + sqrt(as.numeric(g)) ; xg <- split(x, g) ; xg }");
    }

    @Test
    public void TestSimpleBuiltins_testSplit_a09a71c5f34dc078764ba7ce37e38a49() {
        assertEval("{ x <- factor(c(\"a\", \"b\", \"a\")); attr(x, \"levels\")<-c(7L, 42L) ; split(1:3, x) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_1e77471269b0c978614b8f4d37953714() {
        assertEval("{ sprintf(\"0x%x\",1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_0c2d0dec16af0183539be3efb36ecbb5() {
        assertEval("{ sprintf(\"0x%x\",10L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_19208d4eb50ba8bf7b46fac21b957c8a() {
        assertEval("{ sprintf(\"%d%d\",1L,2L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_5f5a0f4fe58cd9e38c2a22cc3dca0530() {
        assertEval("{ sprintf(\"0x%x\",1) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_ea84b3ed172129efec318c5ea6363096() {
        assertEval("{ sprintf(\"0x%x\",10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_321bdd0da74c24ea895c36cb34c2ac92() {
        assertEval("{ sprintf(\"%d\", 10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_1c0e42acf7e20e55541505d674246fa2() {
        assertEval("{ sprintf(\"%7.3f\", 10.1) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_f8293e298efeca08ef7f2f7b3a347d9b() {
        assertEval("{ sprintf(\"%03d\", 1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_369ea53e7642159df80f8e0496151883() {
        assertEval("{ sprintf(\"%3d\", 1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_712a0a6e450c44801885e6158758ccd0() {
        assertEval("{ sprintf(\"%4X\", 26) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_aed9d9245ae2af5ba420e569133aa594() {
        assertEval("{ sprintf(\"%04X\", 26) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_2f5377dc3237afcaf3f4b0fa24d32d56() {
        assertEval("{ sprintf(\"Hello %*d\", 3, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_2b763de8de8629771e185b2aa8e8c72f() {
        assertEval("{ sprintf(\"Hello %*2$d\", 3, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSprintf_632e911896ba628e751fb0a5d3deb81f() {
        assertEval("{ sprintf(\"Hello %2$*2$d\", 3, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrt_acb3c0dd030fef9fd12d71b3b967f349() {
        assertEval("{ sqrt(9) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrt_1ff8a1f5462ee5f4aa4288cca6d73598() {
        assertEval("{ sqrt(9L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrt_39f0b9fb3b4e0a9c9ec5e8b165ed4ce3() {
        assertEval("{ sqrt(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrt_28aebbd3eaef748411bfac3b51dc4c13() {
        assertEval("{ sqrt(c(1,4,9,16)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrt_ae452a6abb71b18f117df33e4ff8c8ad() {
        assertEval("{ sqrt(c(1,4,NA,16)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrtBroken_dda9ccdc11f9f5afbe9854145501c5e5() {
        assertEval("{ sqrt(c(a=9,b=81)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrtBroken_a2489c7a22d5ac414a9587cbff9b6c64() {
        assertEval("{ sqrt(1:5) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrtBroken_cae4a927d1bb1f88b88550ba795899f5() {
        assertEval("{ sqrt(-1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSqrtBroken_d1949f3b9fbc81f7fe02ad4b8719bcaa() {
        assertEval("{ sqrt(-1) }");
    }

    @Test
    public void TestSimpleBuiltins_testStorageMode_5aba5dbdf7b172ee81df983c9ad3f4c9() {
        assertEval("{storage.mode(1)}");
    }

    @Test
    public void TestSimpleBuiltins_testStorageMode_d9601d4d4c30c0c176f40f768b85b0b2() {
        assertEval("{storage.mode(c)}");
    }

    @Test
    public void TestSimpleBuiltins_testStorageMode_11622ef118df18dc5aea3f73fe48dea6() {
        assertEval("{storage.mode(f<-function(){1})}");
    }

    @Test
    public void TestSimpleBuiltins_testStorageMode_8304399d60482172632702b36d661e69() {
        assertEval("{storage.mode(c(1,2,3))}");
    }

    @Test
    public void TestSimpleBuiltins_testStorageMode_54a9c734e1f1ff35da1a5a8ece212353() {
        assertEval("{x<-1;storage.mode(x)<-\"character\"}");
    }

    @Test
    public void TestSimpleBuiltins_testStorageMode_86010dce9517f70282cf376104fbe12e() {
        assertEval("{x<-1;storage.mode(x)<-\"logical\";x}");
    }

    @Test
    public void TestSimpleBuiltins_testStrSplit_ffcd71cd9d0efa22e370a386fc0fb6ee() {
        assertEval("{ strsplit(\"helloh\", \"h\", fixed=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testStrSplit_e31b13fe2147045f4dec8805d20a3bd7() {
        assertEval("{ strsplit( c(\"helloh\", \"hi\"), c(\"h\",\"\"), fixed=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testStrSplit_b203e36d815b8d814f4a996c64fd7752() {
        assertEval("{ strsplit(\"helloh\", \"\", fixed=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testStrSplit_78caedc9313c6f8b03c8ee7e1711c675() {
        assertEval("{ strsplit(\"helloh\", \"h\") }");
    }

    @Test
    public void TestSimpleBuiltins_testStrSplit_da73161b8b5923748e2f85186e43a9d6() {
        assertEval("{ strsplit( c(\"helloh\", \"hi\"), c(\"h\",\"\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testStrSplit_46d4b4f12ca8e8fb947be03344b9b554() {
        assertEval("{ strsplit(\"ahoj\", split=\"\") [[c(1,2)]] }");
    }

    @Test
    public void TestSimpleBuiltins_testSub_290740a46fa19cc21606f434466273ad() {
        assertEval("{ gsub(\"a\",\"aa\", \"prague alley\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSub_b5f6b4aa456065a871e9f43cb28752b0() {
        assertEval("{ sub(\"a\",\"aa\", \"prague alley\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSub_fdf4e3e911b000282bd785289762680f() {
        assertEval("{ gsub(\"a\",\"aa\", \"prAgue alley\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_0902579a0dce5fa8d7a808155b8c09b0() {
        assertEval("{ gsub(\"a\",\"aa\", \"prague alley\", fixed=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_fa9e3d4d6577b70532d26a56fc343b17() {
        assertEval("{ sub(\"a\",\"aa\", \"prague alley\", fixed=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_dca0ae0449dfa1c58f334818a4b87673() {
        assertEval("{ gsub(\"a\",\"aa\", \"prAgue alley\", fixed=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_3d79a5bb75bf60e95350618f5485daa6() {
        assertEval("{ gsub(\"a\",\"aa\", \"prAgue alley\", fixed=TRUE, ignore.case=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_d1977e782dbbd1ca4da912d5f56d63ed() {
        assertEval("{ gsub(\"a\",\"aa\", \"prAgue alley\", ignore.case=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_fec73fb8a79be7e6b705d46bbc16a617() {
        assertEval("{ gsub(\"([a-e])\",\"\\\\1\\\\1\", \"prague alley\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_8df24d5d1e0149a6b232c373b6057aa7() {
        assertEval("{ gsub(\"h\",\"\", c(\"hello\", \"hi\", \"bye\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_42529469f0a7019b2a56e1e5312e0577() {
        assertEval("{ gsub(\"h\",\"\", c(\"hello\", \"hi\", \"bye\"), fixed=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_69aeec67da0ee58f71a5a4244df69a7c() {
        assertEval("{ f <- function(expr) { substitute(expr) } ; f(a * b) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_4c1a0e897f6f8dcba279129803430c82() {
        assertEval("{ f <- function() { delayedAssign(\"expr\", a * b) ; substitute(expr) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_f82a54616cf2b4be6f752e5c66c635c9() {
        assertEval("{ f <- function() { delayedAssign(\"expr\", a * b) ; substitute(dummy) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_587cbbd25dcab3e16f1b360e583c7db5() {
        assertEval("{ delayedAssign(\"expr\", a * b) ; substitute(expr) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_dc45366e3a931d33e1c7ea987435cdd1() {
        assertEval("{ f <- function(expr) { expr ; substitute(expr) } ; a <- 10; b <- 2; f(a * b) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_5f9847b1be03c329f3c41d8883684dc2() {
        assertEval("{ f <- function(y) { substitute(y) } ; typeof(f()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_ed595bec7a9b5a15c7109e2804bf45c4() {
        assertEval("{ f <- function(y) { as.character(substitute(y)) } ; f(\"a\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_a8173ff3145e5caeadfe0a38e28a2a09() {
        assertEval("{ f <- function(x) { g <- function() { substitute(x) } ; g() } ;  f(a * b) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_89798b3d8963d8d31c6b22ed6bc05491() {
        assertEval("{ substitute(a, list(a = quote(x + y), x = 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_3e4cc116e9a592c28b2159c6e8365bfa() {
        assertEval("{ f <- function(x = y, y = x) { substitute(x) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_1bcbef75639b8b543cc72a07279a2203() {
        assertEval("{ f <- function(a, b=a, c=b, d=c) { substitute(d) } ; f(x + y) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_844fb1f54ddd6fb3cb03e5a9d632edda() {
        assertEval("{ f <- function(x) { substitute(x, list(a=1,b=2)) } ; f(a + b) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_fc2154960706a9f7207993aa89aaca50() {
        assertEval("{ f <- function(...) { substitute(list(a=1,b=2,...,3,...)) } ; f(x + z, a * b) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_b6449119b833609315c063f2a2c5a363() {
        assertEval("{ f <- function(...) { substitute(list(...)) } ; f(x + z, a * b) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_1afd7096f29a5802dd58c6f939da35d4() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; is.language(f(c(1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_17d338bb527ba3b913aab6a2b5ebf941() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; length(f(c(1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_88c8b7c8f5c0fcddbf54d24e60e1875f() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; is.symbol(f(c(x=1,2))[[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_7c92a6efbe34930f417d81e8d6f1e9f1() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; is.language(f(c(x=1,2))[[2]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_ce2bc68ff37b6d7d58a6dc6aa7592f4a() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; typeof(f(c(1,2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_7308b6fdc29cc37e6d3885f09aed6ed8() {
        assertEval("{ g<-function() { f<-function() { 42 }; substitute(f()) } ; typeof(g()[[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_20f021d1d41a594161afb2473c5075b5() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; is.symbol(f(c(x=1,2))[[2]][[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_3faa9d4c1d87b6641b46796a806e690d() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; is.double(f(c(x=1,2))[[2]][[2]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_8b21e0ecb7d6143dab8b63c68608f906() {
        assertEval("{ f <- function() { substitute(list(a=1,b=2,...,3,...)) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_6da555da9a31bfb212efe33b45c838d7() {
        assertEval("{ f <- function(...) { substitute(list(a=1,b=2,...,3,...)) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_dcda7433c118d9ecb4b91548f0d40c2c() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; f(c(1,2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_d0ab6188ca2103f260aa3f0f988db899() {
        assertEval("{ f<-function(...) { substitute(list(...)) }; f(c(x=1, 2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_ba8b61c2d3fa9c76a2c14d5e96138f4b() {
        assertEval("{ env <- new.env() ; z <- 0 ; delayedAssign(\"var\", z+2, assign.env=env) ; substitute(var, env=env) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_91aaa32f72b8dab4c7856c1e7e89ed54() {
        assertEval("{ env <- new.env() ; z <- 0 ; delayedAssign(\"var\", z+2, assign.env=env) ; z <- 10 ; substitute(var, env=env) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_b728de23a3c96c7d1c7e179ba0cf22c8() {
        assertEval("{ substitute(if(a) { x } else { x * a }, list(a = quote(x + y), x = 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_0083a2f370b2d901d6617b52259cd8ef() {
        assertEval("{ f <- function() { substitute(x(1:10), list(x=quote(sum))) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_4d6f07ded5992a096c046ebead59dfd0() {
        assertEval("{ substitute(x + y, list(x=1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstitute_61078b0c4da1266fe57918a4361362dd() {
        assertEval("{ f <- function(expra, exprb) { substitute(expra + exprb) } ; f(a * b, a + b) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_d84d47dddb7bd0bf96bf16437eadd619() {
        assertEval("{ f <- function(y) { substitute(y) } ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_8308ab3830982170f12169a348ea89e8() {
        assertEval("{ f <- function(z) { g <- function(y) { substitute(y)  } ; g(z) } ; f(a + d) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_b9b9e1994091af7e565e035d8c87b9ef() {
        assertEval("{ substitute(function(x, a) { x + a }, list(a = quote(x + y), x = 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_9d646fcf10648fbae8e8087bb65a9bd6() {
        assertEval("{ substitute(a[x], list(a = quote(x + y), x = 1)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_c46aeeda682d7d02536ec492e776a43a() {
        assertEval("{ substitute(x <- x + 1, list(x = 1) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_2d9423471db74f12008f85fe7ea76b68() {
        assertEval("{ substr(\"123456\", 2L, 4L) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_bc36931aed8ceaa1bd23d0e49cd13344() {
        assertEval("{ substr(\"123456\", 2, 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_383a1341ed3de2ff3823a5843a8290ac() {
        assertEval("{ substr(\"123456\", 4, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_a0f17645511412460b64ea030631170b() {
        assertEval("{ substr(\"123456\", 7, 8) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_0ce02680f0c46cb48841f9cea3fb3952() {
        assertEval("{ substr(\"123456\", 4, 8) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_b6957e3b9199fc6d1f01f3ac1d04655f() {
        assertEval("{ substr(\"123456\", -1, 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_1bc11f33f0e9cd3c08af5a326104b40c() {
        assertEval("{ substr(\"123456\", -5, -1) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_a50efb9f7b7a89f591f5e8475e7fba3c() {
        assertEval("{ substr(\"123456\", -20, -100) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_479502d919102eefedeeec2f2f7c685d() {
        assertEval("{ substr(\"123456\", 2.8, 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_730b2eccd2850ac226982a44541673a0() {
        assertEval("{ substr(c(\"hello\", \"bye\"), 1, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_f97efd130a5093d9607458edc51de2df() {
        assertEval("{ substr(c(\"hello\", \"bye\"), c(1,2,3), 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_f282f7d91016707e704e961a510a072a() {
        assertEval("{ substr(c(\"hello\", \"bye\"), 1, c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_9e86b7cfe9a9503ac28b0cf1c1c2e930() {
        assertEval("{ substr(c(\"hello\", \"bye\"), c(1,2), c(2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_a4a55f807c6b0f7a2532159e2bade082() {
        assertEval("{ substr(1234L,2,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_03162f5f8ad707a1ae6adcef91e208bc() {
        assertEval("{ substr(1234,2,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_2765ec88cd5af3461354f18ca811b329() {
        assertEval("{ substr(\"abcdef\",c(1,2),c(3L,5L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_823c17a8b96f9c94cba9400e32bddbf1() {
        assertEval("{ substr(character(), integer(), integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_1c9501bd0c6ae99c312be46ec414ca44() {
        assertEval("{ substr(c(\"abcdef\", \"aa\"), NA, 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_c11f255dc54f88a2dc1de1b6a24806ec() {
        assertEval("{ substr(c(\"abcdef\", \"aa\"), 3, NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_84a66e0f1648a8e1752633ea50df2633() {
        assertEval("{ substr(c(\"abcdef\", \"aa\"), c(NA,8), 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_213a2a8ea2f9d5cd312016dedc507402() {
        assertEval("{ substr(c(\"abcdef\", \"aa\"), c(1,NA), 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_221901876479773561663a589e4c633b() {
        assertEval("{ substr(NA,1,2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_d6fcea25fcf0ab63be67b287b1d36d91() {
        assertEval("{ substr(\"fastr\", NA, 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_b67af38ded736620a9005880de5731e0() {
        assertEval("{ substr(\"fastr\", 1, NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_c4a62c8f07e7621ca475d76a48c73844() {
        assertEval("{ x<-\"abcdef\"; substr(x,1,4)<-\"0000\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_074c2375e3686756397120e7b040b0fc() {
        assertEval("{ x<-\"abcdef\"; substr(x,1,3)<-\"0000\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_de511c1d2398630b8f1d1829cc1e67fd() {
        assertEval("{ x<-\"abcdef\"; substr(x,1,3)<-\"0\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_b8c28298d84f773c39448d5398e1bb79() {
        assertEval("{ x<-\"abcdef\"; substr(x,NA,3)<-\"0\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_b995c42381f49e4d06126527673b1f35() {
        assertEval("{ x<-\"abcdef\"; substr(x,1,NA)<-\"0\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_7d0044bb1bbc108367b273b8c1271b5a() {
        assertEval("{ x<-character(); substr(x,1,3)<-\"0\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_eede564bcb60679cb33408d3d8451a0a() {
        assertEval("{ x<-c(\"abcdef\", \"ghijklm\"); substr(x, c(1,NA), 4)<-\"0\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_f24df3fb69a8b894ad90ea7203cc7e1e() {
        assertEval("{ x<-character(); substr(x,1,3)<-0; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_72ca4589b6b71f0b02caeb358562c89c() {
        assertEval("{ x<-character(); substr(x,1,3)<-NULL; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_f4245170554adb43abee3a7833710df5() {
        assertEval("{ x<-character(); substr(x,integer(),3)<-NULL; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_ccad57b43ec1e9b7e77e7d6337e2b6c6() {
        assertEval("{ x<-c(\"abcdef\"); substr(x[1], 2, 3)<-\"0\"; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_a06032ac4164820a440a5bd94b6f3b2a() {
        assertEvalError("{ substr(c(\"abcdef\", \"aa\"), integer(), 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_fdd273e2854ec3b5967c14198144e0e5() {
        assertEvalError("{ substr(c(\"abcdef\", \"aa\"), 2, integer()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_0569de1b1e739e8247d06e6c1804662a() {
        assertEvalError("{ x<-\"abcdef\"; substr(x,3,1)<-0; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_0ecd8fac84661607b27a25d34853fafb() {
        assertEvalError("{ x<-\"abcdef\"; substr(x,1,3)<-character(); x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_26ff19fb94bbd19ab92d02cfd29a182e() {
        assertEvalError("{ x<-\"abcdef\"; substr(x,1,3)<-NULL; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstring_21a24d02ea5b537e125bc298b8f62bb4() {
        assertEvalError("{ x<-\"abcdef\"; substr(x,integer(),3)<-NULL; x }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstringIgnore_41302c9bd877c3627e699cd303bfef78() {
        assertEval("{ substring(\"123456\", first=2, last=4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstringIgnore_747b32e2b791c976fc9b634a5aef6b23() {
        assertEval("{ substring(\"123456\", first=2.8, last=4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstringIgnore_8ce15f4973c2ddb4ca609ef2c4836ab5() {
        assertEval("{ substring(c(\"hello\", \"bye\"), first=c(1,2,3), last=4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSubstringIgnore_6dd56114a5d7ba502c449ca3c03308ae() {
        assertEval("{ substring(\"fastr\", first=NA, last=2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_6af75be035eaee127d9548c29f6808da() {
        assertEval("{ sum() }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_d31dace7ded3b759ec0f726e7fd05511() {
        assertEval("{ sum(0, 1, 2, 3) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_0a122e7ae784861891bdedaa8e2715c3() {
        assertEval("{ sum(c(0, 1, 2, 3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_39dd13a4d223573962016c0b73d385b8() {
        assertEval("{ sum(c(0, 1, 2, 3), 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_9b7f57c2bd4927c31c0f8ce1cb161938() {
        assertEval("{ sum(1:6, 3, 4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_64559a1ed3a336ad0145b7e61e1c6459() {
        assertEval("{ sum(1:6, 3L, TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_7324adc5a5f1b8a978ff297c7cc86279() {
        assertEval("{ `sum`(1:10) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_2c8403bf4699bb7d77a5cc1a5e7cf099() {
        assertEval("{ x<-c(FALSE, FALSE); is.double(sum(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_17b5c1eee2de2427b9a9473d6187fd28() {
        assertEval("{ x<-c(FALSE, FALSE); is.integer(sum(x)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_47da0e729877bc7b9ebaae084255f557() {
        assertEval("{ is.logical(sum(TRUE, FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_5e8466f95daf339f55e5bc2f380fc181() {
        assertEval("{ is.logical(sum(TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_833b18f9fd68d4ed0bd8e9c6b34555bf() {
        assertEval("{ sum(42+42i, 7+7i) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_aca81d73a5587762d85391d3f279d527() {
        assertEval("{ sum(as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_bec2c02a7f502b2833748ddbbdab8483() {
        assertEval("{ sum(as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_126cc52d08016ab97a6c1fd344e0a7ae() {
        assertEval("{ sum(as.double(NA), as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_cdb6003a4d43023fafdbc2d8a0e07894() {
        assertEval("{ sum(as.double(NA), as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_f3cd592f4a919ac6a5b645f25ec9a591() {
        assertEval("{ sum(as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_b83d1fc238d3b634a77e751ab2260a6e() {
        assertEval("{ sum(as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_956e22ff2935a379a76def5b3f51cd30() {
        assertEval("{ sum(as.integer(NA), as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_60a1402de0149560f88f1bc6f384d913() {
        assertEval("{ sum(as.integer(NA), as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_e1af0a8bce868add507346a9eb8b642b() {
        assertEval("{ sum(42L, as.integer(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_d721a81fb9599ecbfec9cc443251be9a() {
        assertEval("{ sum(42L, as.integer(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_a4017d41644eb9f8edbdb00f57529a27() {
        assertEval("{ sum(42, as.double(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_2fd9de42f24ec5463866cd8b2807e963() {
        assertEval("{ sum(42, as.double(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_17fbb9c360548d814ddd791a13bd9c4d() {
        assertEval("{ sum(42L, as.integer(NA), 7L, na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_90f70fbf04ba7326ae1b54488cf35950() {
        assertEval("{ sum(42L, as.integer(NA), 7L, na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_2a01531d11a755ee202064eefb7ce543() {
        assertEval("{ sum(42, as.double(NA), 7, na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_c4f6b307b4988457553fed5bae276e43() {
        assertEval("{ sum(42, as.double(NA), 7, na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_512304594d55f1330efacd6cc594cf7a() {
        assertEval("{ sum(0, 1[3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_b579f0fccb80261d02dd8e36a1c21977() {
        assertEval("{ sum(na.rm=FALSE, 0, 1[3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_71b125cd0c9f2fe015befa381709e1a6() {
        assertEval("{ sum(0, na.rm=FALSE, 1[3]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_d6658778aa6ef9490e87eee1748c00b1() {
        assertEval("{ sum(0, 1[3], na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_d8048d7927bb3ae55032b224e19caf66() {
        assertEval("{ sum(0, 1[3], na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_79d5da5603083c8a7cd4e867a99de305() {
        assertEval("{ sum(1+1i,2,NA, na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_d3eeae41362589157918ed1d85a19a51() {
        assertEvalError("{ sum(as.raw(42), as.raw(7)) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_775c3e4483bc3d03410b703c79f4662e() {
        assertEvalError("{ sum(\"42\", \"7\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_c41089de7f0871700f11650de9663042() {
        assertEvalError("{ sum(as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_c1430f6f8056d0ea937f173d1bf7ae54() {
        assertEvalError("{ sum(as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_2c4aa4f867874e7ba913079f1b0deafd() {
        assertEvalError("{ sum(as.character(NA), as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_4d9d07f576fd993a8f8f65d86df87e64() {
        assertEvalError("{ sum(as.character(NA), as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_f6962d9da1f0239a1328ef0959597028() {
        assertEvalError("{ sum(\"42\", as.character(NA), na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_050ae755823d72e24c2ccabaf81ca0f9() {
        assertEvalError("{ sum(\"42\", as.character(NA), na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_1bc592da7aa03357bd67a2ab654bc784() {
        assertEvalError("{ sum(\"42\", as.character(NA), \"7\", na.rm=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSum_801b1d35aaf5b5ea058da849e4513508() {
        assertEvalError("{ sum(\"42\", as.character(NA), \"7\", na.rm=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSummaryGroupDispatch_fa5ada787778986401f8455c405ff4b0() {
        assertEval("{x<-c(1,2,3);class(x)<-\"foo\";Summary.foo<-function(x,...){\"summary\"};max(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testSummaryGroupDispatch_532d6e513e93379a9b51e999f9c6ed5a() {
        assertEval("{x<-c(1,2,3);class(x)<-\"foo\";Summary.foo<-function(x,...){\"summary\"};min(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testSummaryGroupDispatch_1add1e53036028f45221fe54086344be() {
        assertEval("{x<-c(1,2,3);class(x)<-\"foo\";min.foo<-function(x,...){\"summary\"};min(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testSweep_e24a1c4daaefe50141a40faf1a62fb5e() {
        assertEval("{ sweep(array(1:24, dim = 4:2), 1, 5) }");
    }

    @Test
    public void TestSimpleBuiltins_testSweep_9e8a6ff0f6a0d04d2fcf91df2159b428() {
        assertEval("{ sweep(array(1:24, dim = 4:2), 1, 1:4) }");
    }

    @Test
    public void TestSimpleBuiltins_testSweepBroken_922919324a346071a3eb17872bd65bfd() {
        assertEval("{ sweep(array(1:24, dim = 4:2), 1:2, 5) }");
    }

    @Test
    public void TestSimpleBuiltins_testSweepBroken_764897cc4d4562a31c107658a96cc3b2() {
        assertEval("{ A <- matrix(1:15, ncol=5); sweep(A, 2, colSums(A), \"/\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSweepBroken_403bf44c1ac2aaf3d8cdb91d68b2345d() {
        assertEval("{ A <- matrix(1:50, nrow=4); sweep(A, 1, 5, '-') }");
    }

    @Test
    public void TestSimpleBuiltins_testSweepBroken_542d39a4358474b0ed5e7284b7652493() {
        assertEval("{ A <- matrix(7:1, nrow=5); sweep(A, 1, -1, '*') }");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_0ef1267c5231c8f77c6c70a3be60a626() {
        assertEval("{ test1 <- function(type) { switch(type, mean = 1, median = 2, trimmed = 3) };test1(\"median\")}");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_7c33f70cf9c16d9f1ed756e6168a6115() {
        assertEval("{switch(3,1,2,3)}");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_ec64887b0a4fff0d4d59cae801f6345d() {
        assertEval("{switch(4,1,2,3)}");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_1b7168f6bb9903b01c133144d277290a() {
        assertEval("{ test1 <- function(type) { switch(type, mean = mean(c(1,2,3,4)), median = 2, trimmed = 3) };test1(\"mean\")}");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_292eca19c367237d5008b2f5eed070a0() {
        assertEval("{ u <- \"uiui\" ; switch(u, \"iuiu\" = \"ieps\", \"uiui\" = \"miep\") }");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_13cd706e2bd1788c59598e6bfc323ca5() {
        assertEval("{ answer<-\"no\";switch(as.character(answer), yes=, YES=1, no=, NO=2,3) }");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_d4faea251b8a58212027618ddf8607ae() {
        assertEval("{ x <- \"<\"; v <- switch(x, \"<=\" =, \"<\" =, \">\" = TRUE, FALSE); v }");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_097323ef6ceeb6c2265f2899249c7836() {
        assertEval("{ x <- \"<\"; switch(x, \"<=\" =, \"<\" =, \">\" = TRUE, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSwitch_ee2f25f8f83e08a229c342819daf69b5() {
        assertEval("{ x <- \"<\"; switch(x, \"<=\" =, \"<\" =, \">\" =, FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCall_ffdd075dd1a47fd18359279945ca339a() {
        assertEval("{ f <- function() sys.call() ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCall_72545e399dae6c0c4c65872bc895c67a() {
        assertEval("{ f <- function(x) sys.call() ; f(x = 2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCall_76d487db1e13401e8bbda4051cbde274() {
        assertEval("{ f <- function() sys.call(1) ; g <- function() f() ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCall_b4ebfc9e173ed89b438a7e37cb5f8a72() {
        assertEval("{ f <- function() sys.call(2) ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCall_544d5ca4664ba29997c00bc9a140b437() {
        assertEval("{ f <- function() sys.call(1) ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCall_9fc3c28d0a49c807eb48a438ef51ee29() {
        assertEval("{ f <- function() sys.call(-1) ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCall_6dbe794f5aa172280648eb7cbbc565ab() {
        assertEval("{ f <- function() sys.call(-2) ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCall_3ad24bf5ef2ddd4a5ce2bb9e20fc412d() {
        assertEval("{ f <- function() sys.call() ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_f44ee9a6ea3efb3dd3af1c314ae8b266() {
        assertEval("{ (function() sys.call())() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_7cbf9b612d6ed31bbb101daf73e590f7() {
        assertEval("{ f <- function(x) sys.call() ; f(2) }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_13208aaa10f5c6ede2ca1043542e65d3() {
        assertEval("{ f <- function(x) sys.call() ; g <- function() 23 ; f(g()) }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_27098193cb36cf8c763bc06a7cc91a50() {
        assertEval("{ f <- function() sys.call() ; typeof(f()[[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_8572e1ef4a32293f18c6393bf5fb9d3e() {
        assertEval("{ f <- function(x) sys.call() ; typeof(f(x = 2)[[1]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_1ca2e752432d9ae3306babfa58185261() {
        assertEval("{ f <- function(x) sys.call() ; typeof(f(x = 2)[[2]]) }");
    }

    @Test
    public void TestSimpleBuiltins_testSysNFrame_c3d97dfd45908c32f8cfe394553f4c63() {
        assertEval("{ sys.nframe() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysNFrame_30dedef8a0698bff34b4b97a34fdb72e() {
        assertEval("{ f <- function() sys.nframe() ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysNFrame_2cd412ff707741932dc44f80b9b7b17a() {
        assertEval("{ f <- function() sys.nframe() ; g <- function() f() ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysNFrame_7f96e07123460e87bc11864977426026() {
        assertEval("{ f <- function() sys.nframe() ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysNFrame_5eaf283d4cade78ea655f788c8520f1b() {
        assertEval("{ f <- function(x=sys.nframe()) x ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysNFrame_53dab62970d1a3ec43b1f0ba50f70ed0() {
        assertEval("{ f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=sys.nframe()) g(z) ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysNFrameIgnore_17d834568c640b6a0227e3d10a88da86() {
        assertEval("{ u <- function() sys.nframe() ; f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=u()) g(z) ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParent_dc8281a71f0743a334066df460d5d250() {
        assertEval("{ sys.parent() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParent_2a69faf7b4cb3ed979d37dcebbba2b5d() {
        assertEval("{ f <- function() sys.parent() ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParent_10ef67d132292ca00886e996eade9514() {
        assertEval("{ f <- function() sys.parent() ; g <- function() f() ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParent_addd9a102d0607d5468ae286159e9926() {
        assertEval("{ f <- function() sys.parent() ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParent_ec8486194fe801b1b55426331942e705() {
        assertEval("{ f <- function(x=sys.parent()) x ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParent_8f717f04a5ba89c5cf2ffeeeab21de0b() {
        assertEval("{ f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=sys.parent()) g(z) ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParent_daad3815e7f45995c349db50245808a5() {
        assertEval("{ u <- function() sys.parent() ; f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=u()) g(z) ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParents_8a154bf595446ee38981490446bf3dd2() {
        assertEval("{ sys.parents() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParents_87513796edf8bb11cbebe94457b9803e() {
        assertEval("{ f <- function() sys.parents() ; f() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParents_01cb12e566a9cfb00b0c8d620dfae646() {
        assertEval("{ f <- function() sys.parents() ; g <- function() f() ; g() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParents_23a33f023d6a23983b4bca3668923720() {
        assertEval("{ f <- function() sys.parents() ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParents_5f3be8dcfca25bcda8b29ff546f7d82c() {
        assertEval("{ f <- function(x=sys.parents()) x ; g <- function() f() ; h <- function() g() ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParents_845cdff1d9da4ed2264439f90ae7789c() {
        assertEval("{ f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=sys.parents()) g(z) ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testSysParentsIgnore_6117cb26d3f09dce59533ba94919f49a() {
        assertEval("{ u <- function() sys.parents() ; f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=u()) g(z) ; h() }");
    }

    @Test
    public void TestSimpleBuiltins_testTable_e6efb6b86abe525fe0fa7b37a41a3588() {
        assertEval("{ a<-c(\"a\", \"b\", \"c\");  t<-table(a, sample(a)); dimnames(t) }");
    }

    @Test
    public void TestSimpleBuiltins_testTabulate_4b7b5ec3ddf837f6040cf4105e954f88() {
        assertEval("{tabulate(c(2,3,5))}");
    }

    @Test
    public void TestSimpleBuiltins_testTabulate_fec0be8a7184c603e90d5b540e990fc8() {
        assertEval("{tabulate(c(2,3,3,5), nbins = 10)}");
    }

    @Test
    public void TestSimpleBuiltins_testTabulate_140894fd7adda3975501091bc4f6e08f() {
        assertEval("{tabulate(c(-2,0,2,3,3,5))}");
    }

    @Test
    public void TestSimpleBuiltins_testTabulate_7a9d2766e5ee6691e8120d07526d8630() {
        assertEval("{tabulate(c(-2,0,2,3,3,5), nbins = 3)}");
    }

    @Test
    public void TestSimpleBuiltins_testTabulate_0a6ec06d77c3ae8bad08fcaf7dbbb6ba() {
        assertEval("{tabulate(factor(letters[1:10]))}");
    }

    @Test
    public void TestSimpleBuiltins_testTapply_8a748021dace19980a947a07fde93a96() {
        assertEval("{ ind <- list(c(1, 2, 2), c(\"A\", \"A\", \"B\")) ; tapply(1:3, ind) }");
    }

    @Test
    public void TestSimpleBuiltins_testTapply_627b7381fd149984429a34289adeba8f() {
        assertEval("{ n <- 17 ; fac <- factor(rep(1:3, length = n), levels = 1:5) ; tapply(1:n, fac, sum) }");
    }

    @Test
    public void TestSimpleBuiltins_testTapply_56d04575049cc5fb09d7e8f4abbc6879() {
        assertEval("{ ind <- list(c(1, 2, 2), c(\"A\", \"A\", \"B\")) ; tapply(1:3, ind, sum) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_6e1d2dd0ef9ac4c3dbae8a1bc755d657() {
        assertEval("{ m <- matrix(1:49, nrow=7) ; sum(m * t(m)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_dd94bafdef407bdc3e73264698eb5b5a() {
        assertEval("{ m <- matrix(1:81, nrow=9) ; sum(m * t(m)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_209de10a7856180c428e9816d06d1a43() {
        assertEval("{ m <- matrix(-5000:4999, nrow=100) ; sum(m * t(m)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_fa1a12b9e0728d5f5374903976e090f4() {
        assertEval("{ m <- matrix(c(rep(1:10,100200),100L), nrow=1001) ; sum(m * t(m)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_23b14b1abdbbcc6ee0ba28e66b2dc0b3() {
        assertEval("{ m <- double() ; dim(m) <- c(0,4) ; t(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_0f10beb0082312c346b7a524e0232269() {
        assertEval("{ t(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_8c3760da6589e7f75a2c2e7f69f79d92() {
        assertEval("{ t(t(t(1:3))) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_0282fba864025d02c3c4e8ebd7541e68() {
        assertEval("{ t(matrix(1:6, nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_db2d13e94432cc5797b041c97f0d18a3() {
        assertEval("{ t(t(matrix(1:6, nrow=2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_fef54622909a3d0c5407fc40bf43e478() {
        assertEval("{ t(matrix(1:4, nrow=2)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTranspose_2934c6176efb21ea0d9a503c7ec5b175() {
        assertEval("{ t(t(matrix(1:4, nrow=2))) }");
    }

    @Test
    public void TestSimpleBuiltins_testTriangular_41ca685d92138926005a9f7fb6ca8478() {
        assertEval("{ m <- { matrix( as.character(1:6), nrow=2 ) } ; diag(m) <- c(1,2) ; m }");
    }

    @Test
    public void TestSimpleBuiltins_testTriangular_f1776e942214f71194d5c31b1a80996e() {
        assertEval("{ m <- { matrix( (1:6) * (1+3i), nrow=2 ) } ; diag(m) <- c(1,2) ; m }");
    }

    @Test
    public void TestSimpleBuiltins_testTriangular_e3c989be96bfd58a83c33b08e911de62() {
        assertEval("{ m <- { matrix( as.raw(11:16), nrow=2 ) } ; diag(m) <- c(as.raw(1),as.raw(2)) ; m }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_c108278e514b9ed8a00cbd68552b9ff8() {
        assertEval("{ sin(1.2) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_26d9ff045fb3440140bd465daab22dd1() {
        assertEval("{ cos(1.2) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_7db08e5e33be9135cdf669ce4b81d9e9() {
        assertEval("{ tan(1.2) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_2437bf63c89c4c8109e29977906ff727() {
        assertEval("{ asin(0.4) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_32df23fef04f7c6b99a008e2472b63cb() {
        assertEval("{ acos(0.4) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_937c7239f43a1aadd0048c177959493c() {
        assertEval("{ atan(0.4) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_7d54e97bf6c027b6a74856cc7c924155() {
        assertEval("{ atan2(0.4, 0.8) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_10e241162a6b271038a20226ec225060() {
        assertEval("{ exp(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_18a7663dda05c396a3c351eaf4f88b18() {
        assertEval("{ expm1(2) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_fe6a2192baca384c87d60a36205f6438() {
        assertEval("{ sin(c(0.3,0.6,0.9)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_8ccac45d989dfc74b271fe0b763633ce() {
        assertEval("{ cos(c(0.3,0.6,0.9)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_069915fb689f2c3a35cd159247627bd4() {
        assertEval("{ tan(c(0.3,0.6,0.9)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_34f6866b6b79a4fedbf505fcef44fc89() {
        assertEval("{ asin(c(0.3,0.6,0.9)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_f32dbba2beca420d7beb0d300b9cdcce() {
        assertEval("{ acos(c(0.3,0.6,0.9)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_ce6004c25a4a647cd4c97a0e8e894b16() {
        assertEval("{ atan(c(0.3,0.6,0.9)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_d5f0ca1753a2115f05ca6d9a4538ad06() {
        assertEval("{ atan2(c(0.3,0.6,0.9), 0.4) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_1e4d625d31bd5f841d410a171428af7c() {
        assertEval("{ atan2(0.4, c(0.3,0.6,0.9)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_4c1a633ef655db3a926790608cfe48c8() {
        assertEval("{ atan2(c(0.3,0.6,0.9), c(0.4, 0.3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_20156dc8a2a3218578f76e932cd74880() {
        assertEval("{ exp(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_4642bfd15b056d3bbca0f496062a75e5() {
        assertEval("{ expm1(c(1,2,3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_56b5b4fe335d3771955cb82f2a95929b() {
        assertEvalError("{ sin() }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_9b96edc1c3bca3035e7758942114bac2() {
        assertEvalError("{ cos() }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_22f49210445415285d4ffe3c2cf34dbd() {
        assertEvalError("{ tan() }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_031db49e2bef369b2fe66ca6e232586e() {
        assertEvalError("{ asin() }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_4665bb5977712c91144e62e67540b35b() {
        assertEvalError("{ acos() }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_5889b2a738989bcf545002a68028ec01() {
        assertEvalError("{ atan() }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_3d8e186632e1d79ad07d466cdfb9b048() {
        assertEvalError("{ atan2() }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_e27407ac309c29d47b0441edbcfb2033() {
        assertEvalError("{ atan2(0.7) }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_54444b220e69a72359bd15fc0f6ea8d8() {
        assertEvalError("{ exp() }");
    }

    @Test
    public void TestSimpleBuiltins_testTrigExp_c21e1bbe274eb5d2f64ce8c7350fd2a6() {
        assertEvalError("{ expm1() }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_f23b57132b2f7a3dd4b957c584b7746b() {
        assertEval("{ typeof(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_1f33f5956306e18e68d3c5cc52303074() {
        assertEval("{ typeof(1L) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_7169b22f93ac5461a6c1da2aeaf9e372() {
        assertEval("{ typeof(function(){}) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_0ab75cc04f8de691d716ed2cafebe0a6() {
        assertEval("{ typeof(\"hi\") }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_3d3698b481587c6638dce1b558e3ccaa() {
        assertEval("{ typeof(sum) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_0d8b1d0664b1b51d65d5f5ef5fd1a2c1() {
        assertEval("{ typeof(NULL) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_de9301cc97b392acab5934faa8a3298d() {
        assertEval("{ typeof(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_21b618c3d8c7e0223f9ab0489d0abcac() {
        assertEval("{ typeof(\"test\") }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_7375a099f1bea64b22645d6754bed891() {
        assertEval("{ typeof(c(1, 2, 3)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_2d0a9dca70c2018ed9d7e4d630e1f63c() {
        assertEval("{ typeof(c(1L, 2L, 3L)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_af61fcd2481200b529fd2affd9372344() {
        assertEval("{ typeof(1:3) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_75ed2f1fd8f51f28e63396c01050a4a1() {
        assertEval("{ typeof(c(TRUE, TRUE, FALSE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_4db9864824bbc26c451ce251404a653f() {
        assertEval("{ typeof(typeof(NULL)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_8155b6f4e306fc6ae858a8160e770221() {
        assertEval("{ length(typeof(NULL)) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_6832941989a6faf780031672b354dfe5() {
        assertEval("{ typeof(length(typeof(NULL))) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_1de3a4164cf41b122d24ef4b2b34a19b() {
        assertEval("{ f <- function(...) typeof(...); f(1)}");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_c537f1365e53eb43493595b75527a433() {
        assertEval("{ f <- function(...) typeof(...); f(1, 2)}");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_513845523076f97abcef340cb66c8ddf() {
        assertEval("{ f <- function(...) typeof(...); f(1, 2, 3)}");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_1675c9457b46c8dc92e10c262f429ca0() {
        assertEval("{ f <- function(...) typeof(...); f(1, 2, 3, 4)}");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_d63eb623f4c13b74dc9704bb857ca416() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); typeof(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOf_4b90c824616e773167165340b6cfea37() {
        assertEval("{ x<-data.frame(c(\"a\", \"b\", \"a\")); typeof(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testTypeOfIgnore_847d333bfb40729281acd0b949d4c097() {
        assertEval("{ f <- function(...) typeof(...); f()}");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_52964c4cb43a47670c1f4d283abd1e1d() {
        assertEval("{ unlist(list(\"hello\", \"hi\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_f35b6e0161ac852251f29fe1bc8a7f0c() {
        assertEval("{ unlist(list(a=\"hello\", b=\"hi\")) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_0e497d9170f54c56c46d71f9c2a7b065() {
        assertEval("{ x <- list(a=1,b=2:3,list(x=FALSE)) ; unlist(x, recursive=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_053bfeb29189c57f2c388a6015092e27() {
        assertEval("{ x <- list(1,z=list(1,b=22,3)) ; unlist(x, recursive=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_566f28a4c86058a48ce00c31c2d3032c() {
        assertEval("{ x <- list(1,z=list(1,b=22,3)) ; unlist(x, recursive=FALSE, use.names=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_f877e922531cbfc866df3db839d13a6e() {
        assertEval("{ x <- list(a=1,b=c(x=2, z=3),list(x=FALSE)) ; unlist(x, recursive=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_f3b14be29f97ff4cda6fcb8aa24d324a() {
        assertEval("{ y<-c(2, 3); names(y)<-c(\"z\", NA); x <- list(a=1,b=y,list(x=FALSE)) ; unlist(x, recursive=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_02984fba623e3a9b414c977505af1729() {
        assertEval("{ x <- list(a=1,b=c(x=2, 3),list(x=FALSE)) ; unlist(x, recursive=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_967fbc2f020a38dae918eda9227fe296() {
        assertEval("{ unlist(list(a=1, c(b=2,c=3))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_c29973a0bc652cd104bfce49a03386c0() {
        assertEval("{ unlist(list(a=1, c(2,3))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_2fcb06c73a1dc8e17fe119434dffe856() {
        assertEval("{ unlist(list(a=1, c(2,3), d=4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_f561d54761acef16e1d441cc33707f33() {
        assertEval("{ unlist(list(a=1, c(2,3), 4)) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_89a293d8df5137410000cd360a92d6b7() {
        assertEval("{ unlist(list(1+1i, c(7+7i,42+42i))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_c7f707f76d54212012df4c81aeda8658() {
        assertEval("{ unlist(list(1+1i, list(7+7i,42+42i)), recursive=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_23db868a1c8b59181c8be4cb9383187b() {
        assertEval("{ unlist(list(1+1i, c(7,42))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_73c11a9496af4a1b05a48c6b92cf4c87() {
        assertEval("{ unlist(list(1+1i, list(7,42)), recursive=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_7e91527f9d24eaba36ae341308785ed3() {
        assertEval("{ unlist(list(a=1,b=2, c=list(d=3,e=list(f=7))), recursive=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_200ea0b453bc469bb9dc98695723f142() {
        assertEval("{ unlist(list(a=1,b=2, c=list(d=3,list(f=7)))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_f0fbeb5a8fe07368a625119ecb75ed88() {
        assertEval("{ x <- list(list(\"1\",\"2\",b=\"3\",\"4\")) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_2cdaf5241d101f3ce4f53bc7254d1ce1() {
        assertEval("{ x <- list(a=list(\"1\",\"2\",list(\"3\", \"4\"),\"5\")) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_86b20ffcf8f88b8502d3da0218b3327c() {
        assertEval("{ x <- list(a=list(\"1\",\"2\",b=list(\"3\"))) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_b9b2dab9e1d0f58c34770af3dbd7b121() {
        assertEval("{ x <- list(a=list(\"1\",\"2\",b=list(\"3\", \"4\"))) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_7cffddf25eeb62015664ca7f85ed5965() {
        assertEval("{ x <- list(a=list(\"1\",\"2\",b=list(\"3\", \"4\"),\"5\")) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_28ae5952510f7971c21ca96ef089e72f() {
        assertEval("{ x <- list(a=list(\"1\",\"2\",b=c(\"3\", \"4\"),\"5\")) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_f0599fb3eb5cad601b044217327d6fe7() {
        assertEval("{ x <- list(a=list(\"1\",\"2\",b=list(\"3\", list(\"10\"), \"4\"),\"5\")) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_00e6a4789e7ed62002d33268eee76fb4() {
        assertEval("{ x <- list(a=list(\"1\",\"2\",b=list(\"3\", list(\"10\", \"11\"), \"4\"),\"5\")) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_67ccdd736ff2171b1a2a7b809b79fc45() {
        assertEval("{ names(unlist(list(list(list(\"1\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_567e15cc2cf85ec93cab50489cc50f12() {
        assertEval("{ names(unlist(list(a=list(list(\"1\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_57fa6a1283f6daa6af9e477c5976ad81() {
        assertEval("{ names(unlist(list(a=list(list(\"1\",\"2\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_8142e7305b9071e289fbf89bee8fce2e() {
        assertEval("{ unlist(list(a=list(\"0\", list(\"1\")))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_c86c4ceb51249e7a778b39c250a033f9() {
        assertEval("{ unlist(list(a=list(b=list(\"1\")))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_c9d05cf98d66813328c388b3c9bb31f7() {
        assertEval("{ unlist(list(a=list(\"0\", b=list(\"1\")))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_254c4d3b5d2dc41871ba5a8ae7cd2e10() {
        assertEval("{ unlist(list(a=list(b=list(\"1\"), \"2\"))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_1b9c72b12a246cd34f7b1f2eb76f6cb2() {
        assertEval("{ unlist(list(a=list(\"0\", b=list(\"1\"), \"2\"))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_bb29972617e7ccf8d50809ac736d280f() {
        assertEval("{ unlist(list(a=list(\"0\", list(b=list(\"1\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_36f16a6a74f0a6ad95300e173430934e() {
        assertEval("{ unlist(list(a=list(\"-1\", \"0\", b=list(\"1\")))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_b92f066abae984a81c0c735c084b2518() {
        assertEval("{ unlist(list(a=list(b=list(\"1\"), \"2\", \"3\"))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_5d50eac6453e06aa2202a22ef8f4936f() {
        assertEval("{ names(unlist(list(list(b=list(\"1\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_eab23bbaf2b189009d3d45cf66b03f0a() {
        assertEval("{ names(unlist(list(a=list(b=list(\"1\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_0f4a3258daae0ec2efcdcbbb0335ef7a() {
        assertEval("{ names(unlist(list(a=list(b=list(\"1\", \"2\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_91bbb5c09fe94850102810f9abfa747d() {
        assertEval("{ names(unlist(list(list(list(c=\"1\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_91054ae0ca6f80291241efc44b425824() {
        assertEval("{ names(unlist(list(a=list(list(c=\"1\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_fd671e9077f293859777ed36dada4fc2() {
        assertEval("{ names(unlist(list(a=list(list(c=\"1\", d=\"2\"))))) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlist_b40cd0f8a1c8b274de8c0f661786bfc9() {
        assertEval("{ unlist(list()) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlistIgnore_a698318202ba9d48899d816aaf045170() {
        assertEval("{ x <- list(\"a\", c(\"b\", \"c\"), list(\"d\", list(\"e\"))) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlistIgnore_f28bf5269d48ccb8325f37a8fda65a1d() {
        assertEval("{ x <- list(NULL, list(\"d\", list(), character())) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlistIgnore_1d0087eeeb15e56b4081ebf242c3ee4c() {
        assertEval("{ x <- list(a=list(\"1\",\"2\",b=\"3\",\"4\")) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlistIgnore_ca79e22b108545ebb9086587d6a71e2f() {
        assertEval("{ x <- list(a=list(1,FALSE,b=list(2:4))) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlistIgnore_ab3eb16aa022ed4457c69d88e7e3ce68() {
        assertEval("{ x <- list(a=list(\"1\",FALSE,b=list(2:4))) ; unlist(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUnlistIgnore_7c2d3aec2785e5d94b9cad216a3ba4f9() {
        assertEval("{ x <- list(1,list(2,3),4) ; z <- list(x,x) ; u <- list(z,z) ; u[[c(2,2,3)]] <- 6 ; unlist(u) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_b026dd671e5d00aa004905d5c6045e7e() {
        assertEval("{x=1; class(x)<-\"first\"; x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_552769ad36db8589fb70fb1b41993e41() {
        assertEval("{ x=1;class(x)<-\"character\"; x}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_8a441adef27997e1e1532772e5a9e286() {
        assertEval("{x<-1; class(x)<-\"logical\"; x;  class(x)<-c(1,2,3); x; class(x)<-NULL; x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_526b2561673ee2a69337f4788254a5eb() {
        assertEval("{x<-1;class(x)<-c(1,2,3);class(x)<-c(); x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_d03db72108886a98c46295a164ed4d85() {
        assertEval("{x<-1;class(x)<-c(1,2,3); x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_776a79e57b4a962db7bcd05dfa5ce8d1() {
        assertEval("{x<-1;class(x)<-c(TRUE,FALSE); x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_d038930d8b6c578f3bb46297f75874ca() {
        assertEval("{x<-1;class(x)<-c(2+3i,4+5i); x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_048feec8f0e66e4525a8d8ed08d363c2() {
        assertEval("{x<-1;class(x)<-c(1,2,3);class(x)<-NULL; x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_463192aaee84feb9609362e07c0be76a() {
        assertEval("{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x)<-\"array\"; x; class(x)<-\"matrix\"; x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_e8351001b47001baafd3504bb524c875() {
        assertEval("{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_fe6405456a75e70bd76c070552f35d60() {
        assertEval("{x<-c(1,2,3,4); dim(x)<-c(2,2); class(x);dim(x)<-c(2,2,1);class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_c9e0b14e171ef8219401c574023d3708() {
        assertEval("{x<-c(1,2,3,4); dim(x)<-c(2,2,1); class(x)}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_49cf6b6a29e324e3eab3a030e50c26a3() {
        assertEval("{x<-1;class(x)<-c(1,2,3);y<-unclass(x);x;y}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_ec3513da84f6f670f7d4a57912d6a339() {
        assertEval("{x<-1;class(x)<-\"a\";x}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_da3101183d77d64cb95eff24c3850c92() {
        assertEval("{x<-1;class(x)<-\"a\";class(x)<-\"numeric\";x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_73236b353b738acb3cdbd9c14f9c65df() {
        assertEval("{x<-TRUE;class(x)<-\"a\";class(x)<-\"logical\";x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_22ecd3611e61cf5e9eaeb1af64df9713() {
        assertEval("{x<-2+3i;class(x)<-\"a\";class(x)<-\"complex\";x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_6baf58e27ad47ba371aca29e93048efd() {
        assertEval("{x<-c(1,2);class(x)<-\"a\";class(x)<-\"list\";x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_2b0b627305ea65b93c2163d63403c0de() {
        assertEval("{x<-\"abc\";class(x)<-\"a\";class(x)<-\"character\";x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_f8c35e459e547ef07df2f112d6ac592d() {
        assertEval("{x<-c(2+3i,4+5i);class(x)<-\"a\";class(x)<-\"complex\";x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_a4af9cf22b0a25e13f9738dcc3fdaa78() {
        assertEval("{x<-1;attr(x,\"class\")<-c(\"a\",\"b\");x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_72ba9bfd00d92c6921a9f9eeb295663b() {
        assertEval("{x<-1;attr(x,\"class\")<-c(\"a\",\"b\");attr(x,\"class\")<-\"numeric\";x}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_df40771873a47544ab7bbff308f8277f() {
        assertEval("{x<-1;attr(x,\"class\")<-\"b\";x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_d6b803bf6147aa8341ca32569078ae88() {
        assertEval("{x<-1;y<-\"b\";attr(x,\"class\")<-y;x;}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_5507a2f23d9bd7277c5ecd5f442d5629() {
        assertEval("{ x<-1; oldClass(x)<-\"foo\"; class(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_9602b77c4b264a86c03286c619dcb5c7() {
        assertEval("{ x<-1; oldClass(x)<-\"foo\"; oldClass(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_ecd0f33424bda622ee0e39fb8e1fb913() {
        assertEval("{ x<-1; oldClass(x)<-\"integer\"; class(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_de592deb872ad28063ea5056506030b1() {
        assertEval("{ x<-1; oldClass(x)<-\"integer\"; oldClass(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_eed27f11a63f1d0b0e2161cc2dd1ac80() {
        assertEval("{ x<-1; oldClass(x)<-\"integer\"; class(x)<-\"integer\"; class(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_9980d815c4dff18b4560739311fdec2a() {
        assertEval("{ x<-1; oldClass(x)<-\"integer\"; class(x)<-\"integer\"; oldClass(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_0b1304fdbea5cf9ec20fd7aa09a2b1f3() {
        assertEval("{ x <- new.env(); class(x); class(x)<-\"abc\"; class(x); class(x)<-NULL; class(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_09a6255019410bff97b90186550dd534() {
        assertEval("{ x <- new.env(); class(x); class(x)<-c(\"abc\", \"xyz\"); class(x); class(x)<-NULL; class(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_a6db2349ae67467e59f38db5682872bb() {
        assertEval("{ x <- function() { }; class(x); class(x)<-\"abc\"; class(x); class(x)<-NULL; class(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClass_f405cf1a6f053ba521f8be9a07b64929() {
        assertEval("{ x <- function() { }; class(x); class(x)<-c(\"abc\", \"xyz\"); class(x); class(x)<-NULL; class(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClassIgnore_de2b6cfc60c31afa53dbd74ec10d3136() {
        assertEval("{x<-c(1,2,3,4); class(x)<-\"array\"; class(x)<-\"matrix\";}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClassIgnore_dfbd07abb7b6feb1f2afd25c4ad019ef() {
        assertEval("{x<-1;attr(x,\"class\")<-c(1,2,3);}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_22adf63c895e0643c07b11286c2701ff() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1,2) ; m }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_927e9b7da432914a51553ea8963fd3b0() {
        assertEval("{ m <- matrix(1:6, nrow=3); y<-m+42; diag(y) <- c(1,2); y }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_36bfcdec38ec4f6e82eac4495b9b385e() {
        assertEval("{ m <- matrix(1:6, nrow=3) ;  attr(m, \"foo\")<-\"foo\"; diag(m) <- c(1,2); attributes(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_7c8f4662acfa9913ff8d6b9d25042c7f() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1.1,2.2); m }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_f4a7c352af2d5f2b21300e141f70bfa6() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1.1,2); m }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_0c9c209deab9bdd4a4dc6d6c967f9050() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; diag(m) <- c(1,2.2); m }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_73173fb5b0b7dbaec878c9af7ea0272e() {
        assertEval("{ m <- matrix(1:6, nrow=3) ;  attr(m, \"foo\")<-\"foo\"; diag(m) <- c(1.1,2.2); attributes(m) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_bc599977512a7c0c3a2e02240001e906() {
        assertEval("{ x <- (m <- matrix(1:6, nrow=3)) ; diag(m) <- c(1,2) ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateDiagonal_09e39a7080c61e974aa17b123966ca64() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; f <- function() { diag(m) <- c(100,200) } ; f() ; m }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_e198a69acefc7b109fc57f84d1e4961c() {
        assertEval("{ x <- c(1,2) ; names(x) <- c(\"hello\", \"hi\"); names(x) } ");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_c74908428b530eea5e0fb376164ff012() {
        assertEval("{ x <- 1:2 ; names(x) <- c(\"hello\", \"hi\"); names(x) } ");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_9fc9d2a738d2134caf4cfc5b75e89e92() {
        assertEval("{ x<-c(1, 2); attr(x, \"names\")<-c(\"a\", \"b\"); x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_bde2dc504616ae4d0796a69cb583b448() {
        assertEval("{ x<-c(1, 2); attr(x, \"names\")<-c(\"a\", \"b\"); names(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_443ef98bbe06c2638ba2231400b6a805() {
        assertEval("{ x<-c(1, 2); names(x)<-c(\"a\", \"b\"); attr(x, \"names\")<-NULL; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_45f921bf4e27f1472bf75c92265dc212() {
        assertEval("{ x<-c(1, 2); names(x)<-42; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_e61e3b6ebd70f1ffe0e3f4a16aa19c2c() {
        assertEval("{ x<-c(1, 2); names(x)<-c(TRUE, FALSE); x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_2e95d15b0b7d46db216765456c26f277() {
        assertEval("{ x<-list(1,2); names(x)<-c(\"a\",NA); x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_7a672acb012dedae00306ed4769b3bfd() {
        assertEval("{ x<-list(1,2); names(x)<-c(\"a\",\"$\"); x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_5bcbc88a4622b78bcef8ebb2a020f0ae() {
        assertEval("{ x<-list(1,2); names(x)<-c(\"a\",\"b\"); x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_e393ef7225640d92615b82181a5a5ca6() {
        assertEval("{ x<-list(1,2); names(x)<-42:43; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_58dd20f93d768e0d40bd3bef178d405b() {
        assertEval("{ x<-7; attr(x, \"foo\")<-\"a\"; attr(x, \"bar\")<-42; attributes(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_19d40aeb38c31829ea680c7fd52a2681() {
        assertEval("{ x<-c(\"a\", \"\", \"bbb\", \"\", \"c\"); names(x)<-1:4; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_193ad5f0e7b508124e52bd4a28c93cc8() {
        assertEval("{ x <- c(1,2); names(x) <- c(\"hello\", \"hi\") ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_3736e14863f8a138edd27c060ef9fb20() {
        assertEval("{ x <- 1:2; names(x) <- c(\"hello\", \"hi\") ; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_82002890e9d84bebe018a87938817c57() {
        assertEval("{ x <- c(1,9); names(x) <- c(\"hello\",\"hi\") ; sqrt(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_2c7554239072a265b828a13cdc0ae57d() {
        assertEval("{ x <- c(1,9); names(x) <- c(\"hello\",\"hi\") ; is.na(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_63fdd9e50620f24ff3163d5bfe4f6216() {
        assertEval("{ x <- c(1,NA); names(x) <- c(\"hello\",\"hi\") ; cumsum(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_0e37a2d5d706cfbb0f2a7b710fc11c0e() {
        assertEval("{ x <- c(1,NA); names(x) <- c(NA,\"hi\") ; cumsum(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_ae2d3abcd724826738d2516eab9dedd5() {
        assertEval("{ x <- 1:2; names(x) <- c(\"A\", \"B\") ; abs(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_fd0f00f1f70705698f7d0e7dfa3ab447() {
        assertEval("{ z <- c(a=1, b=2) ; names(z) <- NULL ; z }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_d946b1680854335d34946599b5e36868() {
        assertEval("{ x <- c(1,2) ; names(x) <- c(\"hello\"); names(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_5627f064a2be6910a4b02b2972ecdbc0() {
        assertEval("{ x <- 1:2 ; names(x) <- c(\"hello\"); names(x) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_a3ee0f7d402245158d533aae17ce0a22() {
        assertEvalError("{ x<-c(1,2); names(x) <- 42:44; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNames_65bdea328aa309d0db153a1c72cd7e3e() {
        assertEvalError("{ x<-c(1,2); attr(x, \"names\") <- 42:45; x }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNamesIgnore_2cffdfa878b18bbad7b6a53d7e4932ae() {
        assertEval("{ x <- c(1,2); names(x) <- c(\"A\", \"B\") ; x + 1 }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateNamesIgnore_d40e4da2cc65cb7648581165a629d52a() {
        assertEval("{ x <- 1:2; names(x) <- c(\"A\", \"B\") ; y <- c(1,2,3,4) ; names(y) <- c(\"X\", \"Y\", \"Z\") ; x + y }");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateStorageMode_33228de9c28bb602b6f7c8b9217e5f80() {
        assertEval("{ x <- c(1L, 2L); storage.mode(x) <- \"double\"}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateStorageMode_15e6d85f22cea8cf26ac980ef46d818f() {
        assertEval("{ x <- c(1L, 2L); dim(x)<-c(1,2); storage.mode(x) <- \"double\"; x}");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateStorageMode_71eee9c23d388e1ee01b1077629133d6() {
        assertEvalError("{ x <- c(1L, 2L); storage.mode(x) <- \"not.double\"}");
    }

    @Test
    public void TestSimpleBuiltins_testUpperTriangular_59ec3ba9a936ceaa71459f89969b9373() {
        assertEval("{ m <- matrix(1:6, nrow=2) ;  upper.tri(m, diag=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpperTriangular_7a2a681e328cbddd6fcb0be530c10f59() {
        assertEval("{ m <- matrix(1:6, nrow=2) ;  upper.tri(m, diag=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpperTriangular_9f58ca08d0fb67c7c4b4a2fb2dc4770b() {
        assertEval("{ upper.tri(1:3, diag=TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUpperTriangular_c5229e5f6220d8ffaf6059b74988078e() {
        assertEval("{ upper.tri(1:3, diag=FALSE) }");
    }

    @Test
    public void TestSimpleBuiltins_testUseMethodEnclFuncArgs_c699286a5e7dd6ca4c46b1245a1f633e() {
        assertEval("{f <- function(x,y,z){ UseMethod(\"f\"); }; f.second <- function(x,y,z){cat(\"f second\",x,y,z)}; obj <-1; attr(obj,\"class\") <- \"second\"; arg2=2; arg3=3; f(obj,arg2,arg3);}");
    }

    @Test
    public void TestSimpleBuiltins_testUseMethodLocalVars_cd724107886a7c9d25ae3b6aad713cb6() {
        assertEval("{f <- function(x){ y<-2;locFun <- function(){cat(\"local\")}; UseMethod(\"f\"); }; f.second <- function(x){cat(\"f second\",x);locFun();}; obj <-1; attr(obj,\"class\")  <- \"second\"; f(obj);}");
    }

    @Test
    public void TestSimpleBuiltins_testUseMethodNested_d689820491ffcbc9ddb83012801bd243() {
        assertEval("{f <- function(x){g<- function(x){ h<- function(x){ UseMethod(\"f\");}; h(x)}; g(x) }; f.second <- function(x){cat(\"f second\",x);}; obj <-1; attr(obj,\"class\")  <- \"second\"; f(obj);}");
    }

    @Test
    public void TestSimpleBuiltins_testUseMethodOneArg_8bf84b00a22cc5bb15b74ae0b3384ade() {
        assertEval("{f <- function(x){ UseMethod(\"f\"); };f.first <- function(x){cat(\"f first\",x)}; f.second <- function(x){cat(\"f second\",x)}; obj <-1; attr(obj,\"class\")  <- \"first\"; f(obj); attr(obj,\"class\")  <- \"second\";}");
    }

    @Test
    public void TestSimpleBuiltins_testUseMethodReturn_1af23cb23456744d7e6a4cb93888e9a3() {
        assertEval("{f <- function(x){ UseMethod(\"f\");cat(\"This should not be executed\"); }; f.second <- function(x){cat(\"f second\",x);}; obj <-1; attr(obj,\"class\")  <- \"second\"; f(obj);}");
    }

    @Test
    public void TestSimpleBuiltins_testUseMethodSimple_3daab073549d57abf4b3cece0fae9dd2() {
        assertEval("{f <- function(x){ UseMethod(\"f\",x); };f.first <- function(x){cat(\"f first\",x)};f.second <- function(x){cat(\"f second\",x)};obj <-1;attr(obj,\"class\")  <- \"first\";f(obj);attr(obj,\"class\")  <- \"second\";}");
    }

    @Test
    public void TestSimpleBuiltins_testUseMethodSimple_24e4b6579385856080f94ac48ee5406f() {
        assertEval("{f<-function(x){UseMethod(\"f\")};f.logical<-function(x){print(\"logical\")};f(TRUE)}");
    }

    @Test
    public void TestSimpleBuiltins_testVectorConstructor_629fc5f98d9d6659735740d0b0894210() {
        assertEval("{ vector() }");
    }

    @Test
    public void TestSimpleBuiltins_testVectorConstructor_2e5c4cbba72ce650f6121a120e852297() {
        assertEval("{ vector(\"integer\") }");
    }

    @Test
    public void TestSimpleBuiltins_testVectorConstructor_57cd36b68776561d2902b2e76a15bd6b() {
        assertEval("{ vector(\"numeric\") }");
    }

    @Test
    public void TestSimpleBuiltins_testVectorConstructor_d015a194b16ec70f1861f3e0a5e36ece() {
        assertEval("{ vector(\"numeric\", length=4) }");
    }

    @Test
    public void TestSimpleBuiltins_testVectorConstructor_4c533a47811eec5d654d8bc9cada841a() {
        assertEval("{ vector(length=3) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhich_abb40fde89cc0dfbb69ec73c399e9ee0() {
        assertEval("{ which(c(TRUE, FALSE, NA, TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhich_910e4cd5226a6cd85c417d837cfe28d5() {
        assertEval("{ which(logical()) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhich_8f506264fbe3c31e05ec5899f79cd57f() {
        assertEval("{ which(TRUE) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhich_b95f6167ca109bbbc1efbebb292937cc() {
        assertEval("{ which(NA) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhichIgnore_6d01b8ef11e5cdf979ca7122cd3de717() {
        assertEval("{ which(c(a=TRUE,b=FALSE,c=TRUE)) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_7db7baf5bb7b07d9a952bd4d92839b62() {
        assertEval("{ which.max(c(5,5,5,5,5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_395b3181e1e888f5f9f723df4e685815() {
        assertEval("{ which.max(c(1,2,3,4,5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_368b8a4e21646faf483e5186552089f1() {
        assertEval("{ which.max(c(2,4))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_3fe8dc1e4356d8c9ffbba152456bd254() {
        assertEval("{ which.max(c(2L,4L,3L))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_aed39bea21bfa73c2eef8aae2296c14b() {
        assertEval("{ which.max(c(1,2,3,4,5))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_8db87fee646d61478fa1718a9277c98f() {
        assertEval("{ which.max(c(TRUE, TRUE))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_fd99873a02afd42e6b380105fdb23bcb() {
        assertEval("{ which.max(c(TRUE, FALSE))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_9fc6dc47123a669ba64ffcfcf77b5a09() {
        assertEval("{ which.max(c(1:5))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_13ba7765db74c74c7e4bd060e2ddfd1a() {
        assertEval("{ which.max(c(5:1))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMax_13a1927e283f2dfe14a806e924cae40d() {
        assertEval("{ which.max(c(1:10000))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_76a5b3ba7baf9cb98946c5902a6f8e82() {
        assertEval("{ which.min(c(5,5,5,5,5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_97a8a085840cc35b17e9418c994e8833() {
        assertEval("{ which.min(c(1,2,3,4,5)) }");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_d79850789a4d89facd9aa604a87c19fc() {
        assertEval("{ which.min(c(2,4))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_7cef81f197fa13b8dc28417bbc1030e0() {
        assertEval("{ which.min(c(2L,4L,3L))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_a6394b13dc31280d94344dd6fbee1f6c() {
        assertEval("{ which.min(c(1,2,3,4,5))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_7644885f51fdab3d8b28dc34974d5360() {
        assertEval("{ which.min(c(TRUE, TRUE))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_6df054375ec2a31de3e7ebbce5a180e9() {
        assertEval("{ which.min(c(TRUE, FALSE))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_60195966c26d0f48df3087e6557039af() {
        assertEval("{ which.min(c(1:5))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_3dda4cb7a3ec7b8736662cae3d837a99() {
        assertEval("{ which.min(c(5:1))}");
    }

    @Test
    public void TestSimpleBuiltins_testWhichMin_df988ad6c12f57152c53f9141f9ddbfd() {
        assertEval("{ which.min(c(1:10000))}");
    }

    @Test
    public void TestSimpleBuiltins_testWorkingDirectory_4dea13731bbc2e14f050d3a8c9270396() {
        assertEval("{ cur <- getwd(); cur1 <- setwd(getwd()) ; cur2 <- getwd() ; cur == cur1 && cur == cur2 }");
    }

    @Test
    public void TestSimpleBuiltins_testWorkingDirectory_4158e8f80f9f54af9ceaf07aaacc8395() {
        assertEval("{ cur <- getwd(); cur1 <- setwd(c(cur, \"dummy\")) ; cur2 <- getwd() ; cur == cur1  }");
    }

    @Test
    public void TestSimpleBuiltins_testWorkingDirectory_b06c73943c7300d6a0af95bb6d4140c3() {
        assertEvalError("{ setwd(1) }");
    }

    @Test
    public void TestSimpleBuiltins_testWorkingDirectory_d4bb5261e83943081702a1fb0f063135() {
        assertEvalError("{ setwd(character()) }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_43e8804bc516ad5a6ddc0d408d8c9913() {
        assertEval("{ x<-1:4; names(x)<-101:104; x < 7 }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_55604a8c1b8ed77407219b71acf218a7() {
        assertEval("{ x<-1:4; names(x)<-101:104; y<-21:24; names(y)<-121:124; x < y }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_acc0a10d9af45ef9c8f80f3a8090c44d() {
        assertEval("{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128; x < y }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_ec1ec490aaa95ff5d15c4df04eb16052() {
        assertEval("{ x<-1:4; names(x)<-101:104; attr(x, \"foo\")<-\"foo\"; attributes(x < 7) }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_d9a40d1f533bc1a4d492ed3b321e8cc6() {
        assertEval("{ x<-1:4; names(x)<-101:104; attr(x, \"foo\")<-\"foo\"; y<-21:24; names(y)<-121:124; attributes(x < y) }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_86ec5ccaff37802e5e9eecaff9bdccbd() {
        assertEval("{ x<-1:4; y<-21:24; names(y)<-121:124; attributes(x > y) }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_72884c59bcf48691861df94fcde4ede4() {
        assertEval("{ x<-1:4; names(x)<-101:104; y<-21:28; names(y)<-121:128;  attributes(y > x) }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_290da18d0f64bf5efc43d773015bf354() {
        assertEval("{ x<-1:4; names(x)<-101:104; y<-21:28; attributes(x > y) }");
    }

    @Test
    public void TestSimpleComparison_testAttributes_12d97a2c216dbef22bd74a1060756b30() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); y<-21:28; x > y }");
    }

    @Test
    public void TestSimpleComparison_testMatrices_eb091ba085dda60b02299905b6603cba() {
        assertEval("{ matrix(1) > matrix(2) }");
    }

    @Test
    public void TestSimpleComparison_testMatrices_e08838ffe9812e3d1cb041aaddec856a() {
        assertEval("{ matrix(1) > NA }");
    }

    @Test
    public void TestSimpleComparison_testMatrices_6e89d79b793dfb2076088167e168c6e0() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m > c(1,2,3) }");
    }

    @Test
    public void TestSimpleComparison_testScalars_c57b3960b9bc1110a87a7aefe679dc2e() {
        assertEval("{ 1==1 }");
    }

    @Test
    public void TestSimpleComparison_testScalars_62c8da2c4151930a77bd1c3ae7840070() {
        assertEval("{ 2==1 }");
    }

    @Test
    public void TestSimpleComparison_testScalars_f7d6800fb1216ab82bd54f7711fc12a4() {
        assertEval("{ 1L<=1 }");
    }

    @Test
    public void TestSimpleComparison_testScalars_4580017a02ca6b0682acbb490f1ca329() {
        assertEval("{ 1<=0L }");
    }

    @Test
    public void TestSimpleComparison_testScalars_9361da3b54a706f3099267596285d0d6() {
        assertEval("{ x<-2; f<-function(z=x) { if (z<=x) {z} else {x} } ; f(1.4)}");
    }

    @Test
    public void TestSimpleComparison_testScalars_c3ffcceee1f4c9fdeb43c11560b6369f() {
        assertEval("{ 1L==1 }");
    }

    @Test
    public void TestSimpleComparison_testScalars_baae6eb76e3e6105da77704a11ce7a72() {
        assertEval("{ TRUE==1 }");
    }

    @Test
    public void TestSimpleComparison_testScalars_ec050a6f818956b64a61a809c498549e() {
        assertEval("{ TRUE==1L }");
    }

    @Test
    public void TestSimpleComparison_testScalars_8711a9c57987677525115f4e22798f1f() {
        assertEval("{ 2L==TRUE }");
    }

    @Test
    public void TestSimpleComparison_testScalars_650eda6fa64d3e5c362d4357b26db222() {
        assertEval("{ TRUE==FALSE }");
    }

    @Test
    public void TestSimpleComparison_testScalars_86ad3e49f2dc79c55e14862ac3fd438c() {
        assertEval("{ FALSE<=TRUE }");
    }

    @Test
    public void TestSimpleComparison_testScalars_2ab47f400d51cbbbd10b95e5b7a4dd4b() {
        assertEval("{ FALSE<TRUE }");
    }

    @Test
    public void TestSimpleComparison_testScalars_c6f9be6be9538032c49c5d95d09cbbd8() {
        assertEval("{ TRUE>FALSE }");
    }

    @Test
    public void TestSimpleComparison_testScalars_5edef2d93f42c0909076c653c4ad7eb5() {
        assertEval("{ TRUE>=FALSE }");
    }

    @Test
    public void TestSimpleComparison_testScalars_0c8d72da028d42199fb944c364c553d9() {
        assertEval("{ TRUE!=FALSE }");
    }

    @Test
    public void TestSimpleComparison_testScalars_29907cc9eed21ce410248b8be48dfbd1() {
        assertEval("{ 2L==NA }");
    }

    @Test
    public void TestSimpleComparison_testScalars_cf07dc5b7b65e07deb74eaeb7bb9531f() {
        assertEval("{ NA==2L }");
    }

    @Test
    public void TestSimpleComparison_testScalars_1da0f6d4e09bace87d9266ce02b7ede7() {
        assertEval("{ 1==NULL }");
    }

    @Test
    public void TestSimpleComparison_testScalars_8bb2a07a7b73c039598160a4bd77a9cc() {
        assertEval("{ 2L==as.double(NA) }");
    }

    @Test
    public void TestSimpleComparison_testScalars_bf458c846f319a88d5cc395eab547fb0() {
        assertEval("{ as.double(NA)==2L }");
    }

    @Test
    public void TestSimpleComparison_testScalars_a523d441174f5067f5e7ecc64668761b() {
        assertEval("{ 0/0 <= 2 }");
    }

    @Test
    public void TestSimpleComparison_testScalars_24db53f2006747c190b7ced9648169a5() {
        assertEval("{ 1+1i == TRUE }");
    }

    @Test
    public void TestSimpleComparison_testScalars_a1bed396542abb86df5d5a39a87ce157() {
        assertEval("{ 1+1i == 1 }");
    }

    @Test
    public void TestSimpleComparison_testScalars_95443d797f8d9a84bad1be61f05c9f96() {
        assertEval("{ 1+0i == 1 }");
    }

    @Test
    public void TestSimpleComparison_testScalars_2c52a57bde1b6efe85a533df5821cc9c() {
        assertEval("{ \"-1+1i\" > \"1+1i\" }");
    }

    @Test
    public void TestSimpleComparison_testScalars_68f2b0b612cbf7c62b177793a372d2c3() {
        assertEval("{ \"-1+1i\" > 1+1i }");
    }

    @Test
    public void TestSimpleComparison_testScalars_62c53267190fa608a7b2fa53628ae8bc() {
        assertEval("{ \"+1+1i\" > 1+1i }");
    }

    @Test
    public void TestSimpleComparison_testScalars_d40fbf45aa8c96f39511e95058101a5f() {
        assertEval("{ \"1+2i\" > 1+1i }");
    }

    @Test
    public void TestSimpleComparison_testScalars_6c7471ecde9943bc49336a0aab793962() {
        assertEval("{ \"1+1.1i\" == 1+1.1i }");
    }

    @Test
    public void TestSimpleComparison_testScalars_65b6edd6dbb64a0ba00c85ceae430efe() {
        assertEval("{ \"1+1.100i\" == 1+1.100i }");
    }

    @Test
    public void TestSimpleComparison_testScalars_9c105a4ac408d983b6d0e86e8565fdc0() {
        assertEvalError("{ x<-1+1i; x > FALSE }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_ea932904f46d5ab6e8f4c341c9e4900f() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_30260787eea963c4b167a97727856b3d() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1,2L) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_118cb009842442742a8af01e8efc9cbd() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1L,2L) ; f(1,2) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_c2d59702269fb2dc016be012d4109162() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1L,2L) ; f(1L,2) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_1abe98ee86dfe375a378e6ee87f1c231() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1L,2) ; f(1,2) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_7f348d188fb89cab8e4fcc797ed5ce81() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1L,2) ; f(1L,2L) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_c6b70d6a700575f9f6685a428176393e() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2L) ; f(1,2) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_a8c40fd4aa5f122323341a249772d459() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2L) ; f(1L,2L) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_70d3713cb0644c59c00e290f9b7610fe() {
        assertEval("{ f <- function(a,b) { a > b } ; f(TRUE,FALSE) ; f(TRUE,2) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_3239e355a8c583acccdad510f5ed99e3() {
        assertEval("{ f <- function(a,b) { a > b } ; f(TRUE,FALSE) ; f(1L,2L) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_88e2bf2a44a83d8b87b9b6d0539f11b8() {
        assertEval("{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(FALSE,2) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_fdc0fe6a512c2693d94dbb4660445ceb() {
        assertEval("{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(0L,2L) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_d56011fcc535a45680ee58c0443a441b() {
        assertEval("{ f <- function(a,b) { a > b } ; f(0L,TRUE) ; f(2L,TRUE) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_fbcba5d1da9fe3f0451728150a013f62() {
        assertEval("{ f <- function(a,b) { a > b } ; f(TRUE,2L) ; f(FALSE,2) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsAsFunction_a731a517b15410c7d3a548640c6944f5() {
        assertEval("{ f <- function(a,b) { a > b } ; f(TRUE,2L) ; f(0L,2L) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsComplex_460261d3121f9bd5e133e31b24dfcd7c() {
        assertEval("{ 1+1i == 1-1i }");
    }

    @Test
    public void TestSimpleComparison_testScalarsComplex_a5bcb421bda8809d72505b38996276fb() {
        assertEval("{ 1+1i == 1+1i }");
    }

    @Test
    public void TestSimpleComparison_testScalarsComplex_b748817aa0c4dce43cae298e11ab2422() {
        assertEval("{ 1+1i == 2+1i }");
    }

    @Test
    public void TestSimpleComparison_testScalarsComplex_723a7acf9b656144d2ebed9838df2e62() {
        assertEval("{ 1+1i != 1+1i }");
    }

    @Test
    public void TestSimpleComparison_testScalarsComplex_287627257ace98bea5f95da723b85689() {
        assertEval("{ 1+1i != 1-1i }");
    }

    @Test
    public void TestSimpleComparison_testScalarsComplex_432f5a35da7b91d3b17e3c5747664156() {
        assertEval("{ 1+1i != 2+1i }");
    }

    @Test
    public void TestSimpleComparison_testScalarsIgnore_7a6557e91f8f198b6c11c29c4e572f57() {
        assertEval("{ z <- TRUE; dim(z) <- c(1) ; dim(z == TRUE) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsIgnore_6f066c83dbb9ff430a0d5056100fbb50() {
        assertEvalError("{ z <- TRUE; dim(z) <- c(1) ; u <- 1:3 ; dim(u) <- 3 ; u == z }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_6f86e642ea4cd41169f92247190536c9() {
        assertEval("{ a <- 1L ; b <- a[2] ; a == b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_b3cd9df88a78f5b775407d666abd4751() {
        assertEval("{ a <- 1L ; b <- a[2] ; b > a }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_09b840f7af956531110609efb16473a9() {
        assertEval("{ a <- 1L ; b <- 1[2] ; a == b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_948a2d658fc84c47fac00fa7031bee2a() {
        assertEval("{ a <- 1L[2] ; b <- 1 ; a == b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_f55ceacfd2124bc2037aec01ca352ece() {
        assertEval("{ a <- 1L[2] ; b <- 1 ; b > a }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_6fa34b9cf225f42bad64051b48591319() {
        assertEval("{ a <- 1 ; b <- 1L[2] ; a == b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_e1fd2c4d514fe0b6965eb3744a6ccf32() {
        assertEval("{ a <- 1[2] ; b <- 1L ; b > a }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_d68d193e8d7def6b0ce9d4eda9bfe2e0() {
        assertEval("{ a <- 1L[2] ; b <- TRUE ; a != b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_d77950c0fdd260db632e7af4972b6419() {
        assertEval("{ a <- TRUE ; b <- 1L[2] ; a > b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_6484d2c61759ff69ec6ec85822ea29c5() {
        assertEval("{ a <- 1 ; b <- a[2] ; a == b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_c0ffd4204ace47b2bee2b81b1460336f() {
        assertEval("{ a <- 1 ; b <- a[2] ; b > a }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_5d82706c2baa41a30419736895aecb0c() {
        assertEval("{ a <- 1L ; b <- TRUE[2] ; a == b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNA_6617a42ac54ed9cdf434eee9b0c67e30() {
        assertEval("{ a <- TRUE[2] ; b <- 1L ; a == b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunction_1a5c9371d7fafab23d6dfd01ba9ddc6e() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2, 1L[2]) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunction_39fc333bd0a2a4bf9d7b8ebbade7ce8b() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2[2], 1L) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunction_71f97d59e0e728318cfeee50a6547ff3() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L, 1[2]) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunction_613d54c4780f3499cdd6b61409d8dac7() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L[2], 1) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunction_5e0bed2ee593f7831a040ae01a0e5845() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L, 1L[2]) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunction_c51baa904ffc0e6d77744cb835910692() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2L[2], 1L) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunction_677dd5f0f60307ba054080d43ad8c070() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2, 1[2]) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunction_4a4d07e745eb0f450e82004e044e8708() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(2[2], 1) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunctionIgnore_0a500b31b16f008e4a1dc5b5630344c8() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(\"hello\", \"hi\"[2]) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsNAAsFunctionIgnore_c803d5d2a05362ff97b2237e3502ac08() {
        assertEval("{ f <- function(a,b) { a > b } ; f(1,2) ; f(1L,2) ; f(\"hello\"[2], \"hi\") }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_745754e97e9a262cbcb578df6ea5a597() {
        assertEval("{ as.raw(15) > as.raw(10) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_67344179521653c0f000fe3687292695() {
        assertEval("{ as.raw(15) < as.raw(10) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_70adf7ed9b21dad0f12c1699269f3d14() {
        assertEval("{ as.raw(15) >= as.raw(10) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_8051d65b72fa2f4f5f9959d8f778b907() {
        assertEval("{ as.raw(15) <= as.raw(10) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_c5d8b8eaa8f0804851dc74720412a3aa() {
        assertEval("{ as.raw(10) >= as.raw(15) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_858d4f893aa1f9d75d2d798de4c5d0c8() {
        assertEval("{ as.raw(10) <= as.raw(15) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_9690af70422eec5d5628a43e0579b499() {
        assertEval("{ as.raw(15) == as.raw(10) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_185702e534b9cc50a42fd1423fb8731a() {
        assertEval("{ as.raw(15) != as.raw(10) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_5a43eaa94d30a62670d9c4f9508eda0a() {
        assertEval("{ as.raw(15) == as.raw(15) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_c9f5c2ed289315961f63160e31ddaee3() {
        assertEval("{ as.raw(15) != as.raw(15) }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_e15accefdfe5ecee7e42890714068769() {
        assertEval("{ a <- as.raw(1) ; b <- as.raw(2) ; a < b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_2e2b707984fb012a41b81c30e2cb7fdc() {
        assertEval("{ a <- as.raw(1) ; b <- as.raw(2) ; a > b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_454ac1889ae1618d4a40944efeb90395() {
        assertEval("{ a <- as.raw(1) ; b <- as.raw(2) ; a == b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_bb5c978a513f7370356299239e540488() {
        assertEval("{ a <- as.raw(1) ; b <- as.raw(200) ; a < b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsRaw_ea123daf7376398e349f8a4f3963c5a0() {
        assertEval("{ a <- as.raw(200) ; b <- as.raw(255) ; a < b }");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_660e099f7d35223cab2c47f270f3ca51() {
        assertEval("\"hello\" != \"hello\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_ab62d59883f3a31429aeff772acabfbb() {
        assertEval("\"hello\" == \"hello\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_5b44b63b0db8a62cbe38a38028208533() {
        assertEval("\"hello\" >= \"hi\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_2b9ce8be720704511b1cd5e85417cc6e() {
        assertEval("\"hello\" <= \"hi\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_f7f5db7faf46a83d61dd071c1d993750() {
        assertEval("\"hi\" != \"hello\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_e553b723480e788fb4dcf1223fd05135() {
        assertEval("\"hi\" == \"hello\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_0a4890140fcfc7a6776a53014a11f094() {
        assertEval("\"hi\" > \"hello\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_49acb7b74f41c6b00fe740305275999e() {
        assertEval("\"hi\" < \"hello\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_8e0c6a770076a82aec26ca391a6102c7() {
        assertEval("\"hi\" >= \"hello\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_ae5fdca13d6ab9f3b21b6d019f765fe6() {
        assertEval("\"hi\" <= \"hello\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_068141bfb17a29f139d636b51c0f04e1() {
        assertEval("\"hello\" > \"hi\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_2f86f96eeb15e4417370c5adb99bc243() {
        assertEval("\"hello\" < \"hi\"");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_84c518c6d75c33f1ade9e8abc02aa89b() {
        assertEval("{ \"a\" <= \"b\" }");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_ffa57e69466e00ed8b5d03c71c9c1754() {
        assertEval("{ \"a\" > \"b\" }");
    }

    @Test
    public void TestSimpleComparison_testScalarsStrings_c2f69fa84ec0de7f5027924adc60e333() {
        assertEval("{ \"2.0\" == 2 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_06addc50d40cb6d3f37355ccf3a3308b() {
        assertEval("{ x<-c(1,2,3,4);y<-2.5; x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_b08d83b7ee9e50867f4804b554e0f3b1() {
        assertEval("{ x<-c(1L,2L,3L,4L);y<-1.5; x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_1f559fcd37aff5a2e4a201d844fcad76() {
        assertEval("{ c(1:3,4,5)==1:5 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_bcf7f061ed0734abf33e39700f98e0df() {
        assertEval("{ 3 != 1:2 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_96ea43b843b9051fa554615a1dbaf2cb() {
        assertEval("{ b <- 1:3 ; z <- FALSE ; b[2==2] }");
    }

    @Test
    public void TestSimpleComparison_testVectors_3ab069b54b0715af8f86b7241b226e7d() {
        assertEval("{ c(1,2,NA,4) != 2 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_5a549c10c86b94e63cf90ab2224191d7() {
        assertEval("{ c(1,2,NA,4) == 2 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_37fb84a8772716ea44a0777ddfddb361() {
        assertEval("{ x<-c(FALSE,TRUE);y<-c(TRUE,FALSE); x<y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_aefd0cf2c9c4e4a7573f1c892547923c() {
        assertEval("{ x<-c(FALSE,TRUE, FALSE, FALSE);y<-c(TRUE,FALSE); x<y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_1b694b3d6e6aa70144fed0c9f897552d() {
        assertEval("{ x<-c(\"0\",\"1\");y<-c(\"a\",\"-1\"); x<y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_d6bb13211cfd38d94f46e84ddc403f07() {
        assertEval("{ x<-c(\"0\",\"1\",\"-1\", \"2\");y<-c(\"a\",\"-1\", \"0\", \"2\"); x<y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_80c345536ca058a10cd69852aa174300() {
        assertEval("{ x<-c(10,3);y<-c(10,2); x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_ae14786274e66f83b38b9cb4c4ffdd2d() {
        assertEval("{ x<-c(10L,3L);y<-c(10L,2L); x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_92cb905f8c166a0bed29234ec978a7f9() {
        assertEval("{ x<-c(10L,3L);y<-c(10,2); x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_a2fe3477f345d727ca7098d3afa55c0a() {
        assertEval("{ x<-c(10,3);y<-c(10L,2L); x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_929f2b89efd8cd95c4db8a235fd3cffe() {
        assertEval("{ x<-c(1,2,3,4);y<-c(10,2); x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_ac182f5f2fafd01f7d36101b7f4d3d66() {
        assertEval("{ x<-c(1,2,3,4);y<-c(2.5+NA,2.5); x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_26398ba64d396ff0ade552b9c316f669() {
        assertEval("{ x<-c(1L,2L,3L,4L);y<-c(2.5+NA,2.5); x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_facbf15afbc39c4f340b08afb938e1e2() {
        assertEval("{ x<-c(10,1,3);y<-4:6; x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_d0676decfc816c03f51a10a6530837aa() {
        assertEval("{ x<-5;y<-4:6; x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_d7751c91e8041d0015d2e40e10378aea() {
        assertEval("{ x<-c(1L,2L,3L,4L);y<-c(TRUE,FALSE); x<=y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_d47055aa7714ecd836723624dd73a502() {
        assertEval("{ 0/0 == c(1,2,3,4) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_e8136d0f5638ef6ebfa22f19ed4a1334() {
        assertEval("{ 1:3 == TRUE }");
    }

    @Test
    public void TestSimpleComparison_testVectors_18016242b408fe8ec7beefcee04f5018() {
        assertEval("{ TRUE == 1:3 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_fa567fef5fdaed2dd27153ccf630f33e() {
        assertEval("{ as.raw(c(2,1,4)) < raw() }");
    }

    @Test
    public void TestSimpleComparison_testVectors_11ec07553cf71700cb1a8f707bfddb92() {
        assertEval("{ raw() < as.raw(c(2,1,4)) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_c41baf7b846c132da2591ede447edeae() {
        assertEval("{ 1:3 < integer() }");
    }

    @Test
    public void TestSimpleComparison_testVectors_b95bfd72dda63254f757ebb8492496d1() {
        assertEval("{ integer() < 1:3 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_28f05a590ae0a94a9110a220f3c4ed63() {
        assertEval("{ c(1,2,3) < double() }");
    }

    @Test
    public void TestSimpleComparison_testVectors_fd8355b848459af41a03e5cf89dec4e2() {
        assertEval("{ double() == c(1,2,3) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_5c773c380167f898e4838b1c36605e30() {
        assertEval("{ c(TRUE,FALSE) < logical() }");
    }

    @Test
    public void TestSimpleComparison_testVectors_a22e9601def027ac547c27a444bee966() {
        assertEval("{ logical() == c(FALSE, FALSE) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_c0076b59d10b4a09bc162d10532d0d71() {
        assertEval("{ c(1+2i, 3+4i) == (1+2i)[0] }");
    }

    @Test
    public void TestSimpleComparison_testVectors_075a24f57f0a69aeba347ea5f27703e7() {
        assertEval("{ (1+2i)[0] == c(2+3i, 4+1i) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_0d662e1dcf736eab888ecc52e1cd0823() {
        assertEval("{ c(\"hello\", \"hi\") == character() }");
    }

    @Test
    public void TestSimpleComparison_testVectors_aa19364c3d04eea6d264fb980d5950b5() {
        assertEval("{ character() > c(\"hello\", \"hi\") }");
    }

    @Test
    public void TestSimpleComparison_testVectors_f535cf744b7d506781970ea853b33ee2() {
        assertEval("{ integer() == 2L }");
    }

    @Test
    public void TestSimpleComparison_testVectors_73469418cc9d716326fee1a4b716ba46() {
        assertEval("{ c(1,2,3,4) != c(1,NA) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_519adec753671e6cbe5d3f3c829ec02d() {
        assertEval("{ 2 != c(1,2,NA,4) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_45d3490c976cc101365b950afbf065cd() {
        assertEval("{ 2 == c(1,2,NA,4) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_573719cc9ca5b09f01e86276ea3bd833() {
        assertEval("{ c(\"hello\", NA) < c(\"hi\", NA) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_11c9ba034db1638c86f7a6dd27191408() {
        assertEval("{ c(\"hello\", NA) >= \"hi\" }");
    }

    @Test
    public void TestSimpleComparison_testVectors_d4682649aa1b019290b0395440473db1() {
        assertEval("{ \"hi\" > c(\"hello\", NA)  }");
    }

    @Test
    public void TestSimpleComparison_testVectors_b4d2b07844982ad15ddd24338c044ae0() {
        assertEval("{ c(\"hello\", NA) > c(NA, \"hi\") }");
    }

    @Test
    public void TestSimpleComparison_testVectors_6ac047f42d4e2b7211727c90257e2373() {
        assertEval("{ c(1L, NA) > c(NA, 2L) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_d33264b98a8149fcfd01997e6e956257() {
        assertEval("{ c(TRUE, NA) > c(NA, FALSE) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_4e09b8381d61556f547367705278185f() {
        assertEval("{ \"hi\" > c(\"hello\", \"hi\")  }");
    }

    @Test
    public void TestSimpleComparison_testVectors_af056939709daaaacd6a1decb84f44b6() {
        assertEval("{ NA > c(\"hello\", \"hi\") }");
    }

    @Test
    public void TestSimpleComparison_testVectors_2592ae7a5f7dba232b37a87d9bcb1039() {
        assertEval("{ c(\"hello\", \"hi\") < NA }");
    }

    @Test
    public void TestSimpleComparison_testVectors_04ea379fa8e275629d352b23e9f10eac() {
        assertEval("{ 1:3 < NA }");
    }

    @Test
    public void TestSimpleComparison_testVectors_e1ed5b7a55773862f2bec1cf4250523b() {
        assertEval("{ NA > 1:3 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_0d650e306165b88997184cd42bc774b5() {
        assertEval("{ 2L > c(1L,NA,2L) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_21855af7e2e3cbdb1b4f6fe92c2f12f7() {
        assertEval("{ c(1L,NA,2L) < 2L }");
    }

    @Test
    public void TestSimpleComparison_testVectors_ecd5170aa87a7130b6146c5c2d8052f4() {
        assertEval("{ c(0/0+1i,2+1i) == c(1+1i,2+1i) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_402395e1e90c3ea2885d3ab1963eadfb() {
        assertEval("{ c(1+1i,2+1i) == c(0/0+1i,2+1i) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_b929bf25036bce4293cfa56b6600fc9e() {
        assertEvalError("{ x<-1+1i; y<-2+2i; x > y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_75fcc56085ac7c2bf42f270fcbb6da70() {
        assertEvalError("{ x<-1+1i; y<-2+2i; x < y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_b7c5f6b2b2a224b3f7a4bd82e9dcad9c() {
        assertEvalError("{ x<-1+1i; y<-2+2i; x >= y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_e2dd732681cca7234782698db46a4381() {
        assertEvalError("{ x<-1+1i; y<-2+2i; x <= y }");
    }

    @Test
    public void TestSimpleComparison_testVectors_9ad8bb825e6c5d11db011ae03b0c67c1() {
        assertEvalError("{ m <- matrix(nrow=2, ncol=2, 1:4) ; m == 1:16 }");
    }

    @Test
    public void TestSimpleComparison_testVectors_a8b2d39c5994d50c5b3f2d1cd68d8f00() {
        assertEvalWarning("{ c(1,2) < c(2,1,4) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_d71565099234436b145d5c2f09387ec2() {
        assertEvalWarning("{ c(2,1,4) < c(1,2) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_4a230ac666979515c5cb2ab9b9ecc81e() {
        assertEvalWarning("{ c(1L,2L) < c(2L,1L,4L) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_e3a5091cb1c14ec735a5122c14b23373() {
        assertEvalWarning("{ c(2L,1L,4L) < c(1L,2L) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_a14b99637db3d415c001a1a1d8a01b49() {
        assertEvalWarning("{ c(TRUE,FALSE,FALSE) < c(TRUE,TRUE) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_0cf4453ac9ebe713972ae3540ba0b699() {
        assertEvalWarning("{ c(TRUE,TRUE) == c(TRUE,FALSE,FALSE) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_670388c4d33ea967f5b646ab377d4721() {
        assertEvalWarning("{ as.raw(c(1,2)) < as.raw(c(2,1,4)) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_e04b9cbf42f4808ea119480a4aef6c8f() {
        assertEvalWarning("{ as.raw(c(2,1,4)) < as.raw(c(1,2)) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_6b045b9386eec4c7715468037361cb80() {
        assertEvalWarning("{ c(\"hi\",\"hello\",\"bye\") > c(\"cau\", \"ahoj\") }");
    }

    @Test
    public void TestSimpleComparison_testVectors_8888b6b7fbc963f99246b5d9dc32cb32() {
        assertEvalWarning("{ c(\"cau\", \"ahoj\") != c(\"hi\",\"hello\",\"bye\") }");
    }

    @Test
    public void TestSimpleComparison_testVectors_7464bb8d120f9d68e3c643e1f30c92f0() {
        assertEvalWarning("{ c(1+1i,2+2i) == c(2+1i,1+2i,1+1i) }");
    }

    @Test
    public void TestSimpleComparison_testVectors_2d97edfc3c6f35bfdf51f33bf24e90e4() {
        assertEvalWarning("{ c(2+1i,1+2i,1+1i) == c(1+1i, 2+2i) }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_566f65764c7f000d0c5ab2da64d936d9() {
        assertEval("{ x<-list(7,42); class(x)<-\"data.frame\"; row.names(x)<-\"r1\"; x[[1]] }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_9beb2cd2f5ca48a9340798ab10f23fc8() {
        assertEval("{ x<-c(7,42); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); y[[1]] }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_f81b2ec376f6d3741941c58da49f6468() {
        assertEval("{ x<-data.frame(a=c(1,2), b=c(11,12)); x[[1,2]] }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_af7da5f5bad77c38c1891740e723bba0() {
        assertEval("{ x<-data.frame(a=c(1,2), b=c(11,12)); x[1,2] }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_1c5a7f63ea4401ffa3217f253cd5a481() {
        assertEval("{ x<-data.frame(a=list(1,2), b=list(11,12)); x[[1,2]] }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_bca92f3ab80c7b72fbb577092302102e() {
        assertEval("{ x<-data.frame(a=list(1,2), b=list(11,12)); x[1,2] }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_023461f3b848ea06b727493936ab0e49() {
        assertEval("{ x<-data.frame(a=c(1,2), b=c(11,12)); x[c(1,2),2] }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_37e9715976a8a8b4201d6226000994c6() {
        assertEval("{ x<-data.frame(a=c(1,2), b=c(3,4)); attr(x, \"foo\")<-\"foo\"; x[1, c(1,2)] }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_7a3520b335504239e1a23ba08b018ad6() {
        assertEval("{ x<-data.frame(a=c(1,2), b=c(3,4)); attr(x, \"foo\")<-\"foo\"; attributes(x[1, c(1,2)]) }");
    }

    @Test
    public void TestSimpleDataFrames_testAccess_3c751253c42329c6652cb02b6c064aa2() {
        assertEvalError("{ x<-data.frame(a=c(1,2), b=c(11,12)); x[[c(1,2),2]] }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_425ea5f0ee3136cc38c973a338b83071() {
        assertEval("{ x<-list(1,2); class(x)<-\"data.frame\"; row.names(x)<-\"r1\"; y<-as.data.frame(x, \"r2\"); attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_d5ecdee9d1474837e7a108f1a622ff3c() {
        assertEval("{ x<-list(1,2); class(x)<-\"data.frame\"; row.names(x)<-\"r1\"; y<-as.data.frame(x, \"r2\"); attributes(y) }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_08dceaed07e4cc4bcc5ca7d890bd36a8() {
        assertEval("{ x<-c(7L,42L); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_20131aee82fc8e9485961d7803591362() {
        assertEval("{ x<-as.double(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_e16d5e89bcde28504f2d00d16d441ddf() {
        assertEval("{ x<-as.logical(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_2ee3b7f49cda32465d70d1c50650a1b5() {
        assertEval("{ x<-as.character(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_95dc2bef15fa23c36342c5ceccaaac32() {
        assertEval("{ x<-as.complex(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_135fb4499c43047e3ef3995e44461c79() {
        assertEval("{ x<-as.raw(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_a3830f603762abcc6c5f172c3548b69d() {
        assertEval("{ x<-c(7L,42L); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); is.data.frame(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_3c48c12e0e9b9666a43162856aefbc94() {
        assertEval("{ x<-as.double(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); is.data.frame(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_c068a2e61149e44a158400adc00a049c() {
        assertEval("{ x<-as.logical(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); is.data.frame(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_fdae269ccebf53df08bd11940567474d() {
        assertEval("{ x<-as.character(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); is.data.frame(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_4c5e3d4678da34d24104e3dcda3dc9e8() {
        assertEval("{ x<-as.complex(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); is.data.frame(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_10a04d16d555f670715decc99e2a04d9() {
        assertEval("{ x<-as.raw(c(7L,42L)); y<-as.data.frame(x, row.names=NULL, nm=\"x\"); is.data.frame(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_d3b040ed290ec04700549bf39c0f2646() {
        assertEval("{ x<-c(7L,42L); y<-as.data.frame(x, row.names=\"r1\", nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_e76008f320f1d8ce0c0b51c3e29bc781() {
        assertEval("{ x<-c(7L,42L); y<-as.data.frame(x, row.names=c(\"r1\", \"r2\"), nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_0d212802fe8708d8972162e8dc0a11df() {
        assertEval("{ x<-c(7L,42L); y<-as.data.frame(x, row.names=c(\"r1\", \"r2\", \"r3\"), nm=\"x\"); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_ae7e136bf9bea5f5e3f42bb31458c3f9() {
        assertEval("{ x<-matrix(c(1,2,3,4), nrow=2); y<-as.data.frame(x, row.names=NULL, optional=FALSE); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_dcb0b00a2f2ec72187adf92269dbd74d() {
        assertEval("{ x<-matrix(c(1,2,3,4), nrow=2); y<-as.data.frame(x, row.names=\"r1\", optional=FALSE); attributes(y); }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrame_bf5e0ec924e5d9b3c6ccdc1662b0a781() {
        assertEvalError("{ x<-list(1,2); class(x)<-\"data.frame\"; row.names(x)<-\"r1\"; y<-as.data.frame(x, c(\"r1\", \"r2\")); attributes(y) }");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrameIgnore_0f990604bed45f9a868ddd4f5616f9ee() {
        assertEvalError("{ x<-1; class(x)<-\"foo\"; y<-as.data.frame(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testDataFrame_43228704ec40ab584d0ad4a6bfd5a2b1() {
        assertEval("{ x<-c(7,42); y<-data.frame(x); is.data.frame(y) }");
    }

    @Test
    public void TestSimpleDataFrames_testDataFrame_5cc191f01769a1065bca90250e27a21d() {
        assertEval("{ data.frame(c(1,2)) }");
    }

    @Test
    public void TestSimpleDataFrames_testDataFrame_51b7d3e9fae558140b224fabd14429d6() {
        assertEval("{ data.frame(c(1,2), c(11,12)) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_d6c0af441e754a72f4efaea8bfe20102() {
        assertEval("{ is.data.frame(1) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_82fc13405212968cd9531f9e5ced03fe() {
        assertEval("{ is.data.frame(NULL) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_a8f60bccd30980e73df06d83a450851a() {
        assertEval("{ x<-c(1,2); is.data.frame(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_6944cabe4ceeba8bcabe0c187bb9b820() {
        assertEval("{ x<-list(1,2); is.data.frame(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_142ebfa4f64e1520a17e3a114cea8669() {
        assertEval("{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-\"data.frame\"; is.data.frame(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_402b4679d94a6d9082df746260ec79b2() {
        assertEval("{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-\"data.frame\"; is.vector(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_b486f776086a50f4da7b9043a8326c58() {
        assertEval("{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-\"data.frame\"; is.list(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_077329d9b6cf5c363274db4a0dd8998d() {
        assertEval("{ x<-list(c(7,42),c(1+1i, 2+2i)); class(x)<-c(\"foo\", \"data.frame\", \"bar\"); is.data.frame(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_76c81a9e8e155cd8e038f55164e2d5b2() {
        assertEval("{ x<-c(7,42); class(x)<-\"data.frame\"; is.data.frame(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_172058a41cbbf0e450dd69171a0a3c9e() {
        assertEval("{ x<-c(7,42); class(x)<-\"data.frame\"; is.vector(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_33e3d083499f9e7147f564efd22b35e0() {
        assertEval("{ x<-c(7,42); class(x)<-\"data.frame\"; is.list(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_cc6d76d2bfca7352726f45d78aea9dea() {
        assertEval("{ x<-c(7,42); class(x)<-c(\"foo\", \"data.frame\", \"bar\"); is.data.frame(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_50bf6458c4fb786682d6253a9b73c68a() {
        assertEval("{ x<-c(7,42); class(x)<-\"data.frame\"; class(x)<-NULL; is.vector(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testIsDataFrame_cd257cee4570b2637211bb4a2f7f61d8() {
        assertEval("{ x<-c(7,42); class(x)<-\"data.frame\"; attr(x, \"foo\")<-\"foo\"; class(x)<-NULL;  attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testLapply_55bc0d568d00ad30f7aace6b015a4fcd() {
        assertEval("{ x <- c(1, 2, 3); xa <- as.data.frame(x); lapply(xa, function(x) x > 1) }");
    }

    @Test
    public void TestSimpleDataFrames_testMisc_19e026dd42148710ae11cdde5dc3b73e() {
        assertEval("{ n = c(2, 3, 5); s = c(\"aa\", \"bb\", \"cc\"); df = data.frame(n, s); df[[1]] <- c(22,33,55); df }");
    }

    @Test
    public void TestSimpleDataFrames_testMisc_e52a62b09e6557563b89aed7622a090f() {
        assertEval("{ y<-data.frame(7); as.logical(y) }");
    }

    @Test
    public void TestSimpleDataFrames_testMisc_41c31f4873ee11a67409c7646ea787b9() {
        assertEval("{ y<-data.frame(integer()); as.logical(y) }");
    }

    @Test
    public void TestSimpleDataFrames_testMisc_12f47d995e267400d26b5f5b04f037f7() {
        assertEval("{ y<-data.frame(c(1,2,3)); length(y) }");
    }

    @Test
    public void TestSimpleDataFrames_testMisc_526983ed080a1f64591401d75eba5c80() {
        assertEvalError("{ y<-data.frame(c(1,2,3)); as.logical(y) }");
    }

    @Test
    public void TestSimpleDataFrames_testPrint_da9c92f6582f469a3303b14bf936c77e() {
        assertEval("{x<-c(1,2); class(x)<-\"data.frame\"; x}");
    }

    @Test
    public void TestSimpleDataFrames_testPrint_0399d7a5f29abb9be5fadc14d1e84910() {
        assertEval("{ x<-integer(); class(x)<-\"data.frame\"; x }");
    }

    @Test
    public void TestSimpleDataFrames_testPrint_ad5c9ea91bca434c54333d0435b9122a() {
        assertEval("{ x<-c(1,2); class(x)<-\"data.frame\"; row.names(x)<-integer(); x }");
    }

    @Test
    public void TestSimpleDataFrames_testPrint_8412386a229178014292595a9cca6de0() {
        assertEval("{ x<-c(1,2); y<-data.frame(x); y }");
    }

    @Test
    public void TestSimpleDataFrames_testPrint_212d66e12053c185fdfd484eb6156160() {
        assertEval("{ x<-c(7,42); y<-data.frame(x); y }");
    }

    @Test
    public void TestSimpleDataFrames_testPrint_674621fc7276825fddf39eadfa8b8e45() {
        assertEval("{ n = c(2, 3, 5); s = c(TRUE, FALSE, TRUE); df = data.frame(n, s); df }");
    }

    @Test
    public void TestSimpleDataFrames_testPrint_a7771c300d3a272d55b6385a70e8b9b5() {
        assertEval("{ x<-data.frame(n=c(\"2\", \"3\", \"5\"), s=c(\"TRUE\", \"FALSE\", \"TRUE\"), check.names=FALSE, row.names=c(\"1\", \"2\", \"3\")); x }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_a3af62479ea621f4e185c40355da07ce() {
        assertEval("{ x<-c(1,2); row.names(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_41f0460307290e851ba9b4488ba67a39() {
        assertEval("{ x<-c(1,2); dim(x)<-2; row.names(x)<-c(7, 42); attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_a57a59fd9d097e1f3c6560e7c6434341() {
        assertEval("{ x<-c(1,2); dim(x)<-2; row.names(x)<-c(7, 42); row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_b4283058b421d1b560722cb9b91c413f() {
        assertEval("{ x<-c(1,2); dim(x)<-2; row.names(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_f23892f7f8527eb3e04bab3ee227e1ca() {
        assertEval("{ x<-c(1,2); dim(x)<-2; row.names(x)<-NULL; row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_6dde8999e6e039548f2cddb35dc920a9() {
        assertEval("{ x<-c(1,2); dim(x)<-2; row.names(x)<-logical(); attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_115ec09c56dc2ee60961bd928f5bfb2c() {
        assertEval("{ x<-c(1,2); dim(x)<-2; row.names(x)<-logical(); row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_d1eec2e905b8f0e89428830a0c65f07f() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-7; attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_6d0eb3d4d4c9a6e46e528f5901db417f() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-7; row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_be5bdb373337dc5e05a9ff034589aaed() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-NULL; attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_4d2fff3c22fe2049dc71c3b4b1193d8b() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-NULL; row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_bf5e3c393fcdfec5052131927d4f24cc() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-logical(); attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_c978e73a87192a2ca7540a1d72d36f76() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); row.names(x)<-logical(); row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_e01f55b653adccbdd0b6acc29b829ef2() {
        assertEval("{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-c(7, 42); attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_184e011e02eba1d48f60f431bd31be63() {
        assertEval("{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-c(7, 42); row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_e4fa209702fa53c2df95a06d8e53236c() {
        assertEval("{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-\"data.frame\"; row.names(z)<-NULL; attributes(z) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_764d1660bd53e94f66fb610552d50d7c() {
        assertEval("{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-\"data.frame\"; row.names(z)<-c(\"a\", \"b\"); row.names(z)<-NULL; attributes(z) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_ba334d174b8f21ed6a8da86e760f0790() {
        assertEval("{ x<-c(1,2,3); y<-c(4,5); z<-list(x, y); class(z)<-\"data.frame\"; row.names(z)<-c(\"a\", \"b\", \"c\"); row.names(z)<-NULL; attributes(z) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_b26c1e94c9931acbbe0245799720a609() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); class(x)<-\"data.frame\"; row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_14542f6e3a07e0c00e412c455c72b719() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(1.1, c(2.2, 3.3)); class(x)<-\"data.frame\"; row.names(x)<-\"r1\"; row.names(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_20762235f05c4531c0e009ee91dadfca() {
        assertEvalError("{ x<-c(1,2); row.names(x)<-c(7, 42); attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_3a63f20ca3546417b6d5aeb37b93239b() {
        assertEvalError("{ x<-c(1,2); row.names(x)<-logical(); attributes(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_4312f7a06665cf28ded33cfcf5808381() {
        assertEvalError("{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-7; attributess(x) }");
    }

    @Test
    public void TestSimpleDataFrames_testRowNames_617a4bc79c4c6a2d2d1bfc03b84edde6() {
        assertEvalError("{ x<-c(1,2); dim(x)<-c(2,1); dimnames(x)<-list(c(2.2, 3.3), 1.1); row.names(x)<-7; row.names(x) }");
    }

    @Test
    public void TestSimpleErrorHandling_testError_abc272087d29377db6fb27d931f3c662() {
        assertEval("{ options(error=quote(cat(23,'\\n'))) ; v }");
    }

    @Test
    public void TestSimpleErrorHandling_testError_23f373ba907401cfba5351a25b6f3eb9() {
        assertEval("{ x <- 2 ; options(error=quote(cat(x,'\\n'))) ; v }");
    }

    @Test
    public void TestSimpleErrorHandling_testError_53dc91b25224feb844f5c6f33bf16d2e() {
        assertEval("{ nonExistentVariable }");
    }

    @Test
    public void TestSimpleFormulae_testCreation_d6caf1a9c57ca6d9122b4228102f7a0f() {
        assertEval("{ typeof(a~b) }");
    }

    @Test
    public void TestSimpleFormulae_testCreation_910cbc81b9bfab583f5c654f652b5340() {
        assertEval("{ class(a~b) }");
    }

    @Test
    public void TestSimpleFunctions_testArgs_88c2c495f154230921998b06b16d441c() {
        assertEval("{ f<-function(x, row.names = NULL, optional = FALSE, ...) {print(optional)}; f(c(7,42), row.names=NULL, nm=\"x\") }");
    }

    @Test
    public void TestSimpleFunctions_testArgs_4f0bba29449d73452b8aeb86b93aafb5() {
        assertEval("{ f<-function(x, row.names = NULL, optional = FALSE, ...) {print(optional); for (i in list(...)) {print(i)} }; f(c(7,42), row.names=NULL, nm=\"x\") }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_08912db0fc81d6f3582a954d1f9c1fa5() {
        assertEval("{ myapp <- function(f, x, y) { f(x,y) } ; myapp(function(x,y) { x + y }, 1, 2) ; myapp(sum, 1, 2) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_fc01e818513a47ce3fa39da117b9ac28() {
        assertEval("{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_fecf4504d25618313f1c52088b7c198b() {
        assertEval("{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = c, y = 10, x = 3) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_90e51346b1d54ff0902be55151d21579() {
        assertEval("{ myapp <- function(f, x, y) { f(x,y) } ; myapp(f = function(x,y) { x + y }, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = function(x,y) { x - y }, y = 10, x = 3) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_4be58635cffea4322af94a94aed6a1e2() {
        assertEval("{ myapp <- function(f, x, y) { f(x,y) } ; g <- function(x,y) { x + y } ; myapp(f = g, y = 1, x = 2) ; myapp(f = sum, x = 1, y = 2) ; myapp(f = g, y = 10, x = 3) ;  myapp(f = g, y = 11, x = 2) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_2e492f8c676e04888266ff99773b4d55() {
        assertEval("{ f <- function(i) { if (i==2) { c <- sum }; c(1,2) } ; f(1) ; f(2) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_085f773e2b6a619cfea783e918127454() {
        assertEval("{ f <- function(i) { if (i==2) { assign(\"c\", sum) }; c(1,2) } ; f(1) ; f(2) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_9ac77652c1f4231a6a7f8b32c14b091f() {
        assertEval("{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_1f9d9445f99a6c0120c6576de385fc65() {
        assertEval("{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) ; f(length,1:3) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_033ab51f0cc168f7755dcc1684fa33f4() {
        assertEval("{ f <- function(func, arg) { func(arg) } ; f(sum, c(3,2)) ; f(length, 1:4) ; f(function(i) {3}, 1) ; f(length,1:3) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_62f4a159f7cdfcf03b705626884a0c4e() {
        assertEval("{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; f(function(x) {TRUE}, 5) ; f(is.na, 4) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_0e3d8f0fa257cca99b618d85b34167e3() {
        assertEval("{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_5c7a9b0c548ba8536d1a8c68ef5825e1() {
        assertEval("{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; h <- function(x) { x == x } ; f(h, 3) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_cdbac40d8e88176d59018301c37f8033() {
        assertEval("{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(is.na, 10) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_eca2b3ed40faa194e24d49a5e73091cd() {
        assertEval("{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(c, 10) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_ae9fc4bbb36c93e16fd0bf5b3b69c916() {
        assertEval("{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 3) ; f(function(x) { 3+4i }, 10) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_846251aa0ea36e2caaa7d914b2992c6b() {
        assertEval("{ f <- function(func, a) { if (func(a)) { 1 } else { 2 } } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(is.na, 10) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_c4c514929f311524620fb77a5f5d793f() {
        assertEval("{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4)  }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_b8b2c96096e38661cd275762856ada88() {
        assertEval("{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(is.na, 10) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_9238eb5438c84da7ae30d5542700fd1f() {
        assertEval("{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(length, 10) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_9d33cb3f2800c2e34da552fa52b5e4ac() {
        assertEval("{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(g, 10) ; f(is.na,5) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_821e4b79662133a431605809bcd39ab5() {
        assertEval("{ f <- function(func, a) { func(a) && TRUE } ; g <- function(x) {TRUE} ; f(g, 5) ; f(is.na, 4) ; f(function(x) { x + x }, 10) }");
    }

    @Test
    public void TestSimpleFunctions_testBinding_46add31adae2b550c93bf2c7341733e3() {
        assertEval("{ f <- function(i) { c(1,2) } ; f(1) ; c <- sum ; f(2) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitions_28852cbbe8f6c77e4be232ae01c765cb() {
        assertEval("{ \"%plus%\" <- function(a,b) a+b ; 3 %plus% 4 }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitions_89e6dcd864857f47904a713f9b399e89() {
        assertEval("{ \"-\"(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitions_db43873d538745b7f440bea9a72e5ba8() {
        assertEval("x<-function(){1};x");
    }

    @Test
    public void TestSimpleFunctions_testDefinitions_0b5fd9af93b3e73346e7f4de73d898be() {
        assertEval("{ 'my<-' <- function(x, value) { attr(x, \"myattr\") <- value ; x } ; z <- 1; my(z) <- \"hello\" ; z }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_b8d75a017c31d73d6dbf7c6a93953d67() {
        assertEval("{ x <- function(a,b) { a^b } ; f <- function() { x <- \"sum\" ; sapply(1, x, 2) } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_dfa24cb65db3a6a592617aa583ec1aaa() {
        assertEval("{ x <- function(a,b) { a^b } ; g <- function() { x <- \"sum\" ; f <- function() { sapply(1, x, 2) } ; f() }  ; g() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_6ff99329ff4c5405259dd094d456df82() {
        assertEval("{ x <- function(a,b) { a^b } ; f <- function() { x <- 211 ; sapply(1, x, 2) } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_90214c174a4cd064fcdf43a64bba6f73() {
        assertEval("{ x <- function(a,b) { a^b } ; dummy <- sum ; f <- function() { x <- \"dummy\" ; sapply(1, x, 2) } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_ba4a8d210d2bcdac8ede803b28c13172() {
        assertEval("{ x <- function(a,b) { a^b } ; dummy <- sum ; f <- function() { x <- \"dummy\" ; dummy <- 200 ; sapply(1, x, 2) } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_8ef4913016fe9a78ae79cb9f48e3c5ae() {
        assertEval("{ foo <- function (x) { x } ; foo() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_1c3efc0657001d0ce5000a68b2e7b18d() {
        assertEval("{ foo <- function (x) { x } ; foo(1,2,3) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_c3181fa02422dff5e566ca113c4fb5b3() {
        assertEval("{ f<-function(a=1,b=2,c=3) {TRUE} ; f(,,) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_6f9b2854817a6afe9e8484d3fdc1c6b5() {
        assertEval("{ f<-function(x=2) {x} ; f() } ");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_0a240c8a4628af4cbded7b97a76ef2c1() {
        assertEval("{ f<-function(a,b,c=2,d) {c} ; f(1,2,c=4,d=4) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_6b39acec458c90722f8a5b2d73de7e69() {
        assertEval("{ f<-function(a,b,c=2,d) {c} ; f(1,2,d=8,c=1) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_6fb997cfc0d7415bb13941f5b3325c2d() {
        assertEval("{ f<-function(a,b,c=2,d) {c} ; f(1,d=8,2,c=1) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_db248b3017f463ba0f9184e28f7e909d() {
        assertEval("{ f<-function(a,b,c=2,d) {c} ; f(d=8,1,2,c=1) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_99f69a3d1bd5795378ad4efee45c9e6e() {
        assertEval("{ f<-function(a,b,c=2,d) {c} ; f(d=8,c=1,2,3) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_f687688558cd8e81ce3a0da702a239e6() {
        assertEval("{ f<-function(a=10,b,c=20,d=20) {c} ; f(4,3,5,1) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_196f59348e26e1e26858b778b32590d3() {
        assertEval("{ x<-1 ; z<-TRUE ; f<-function(y=x,a=z,b) { if (z) {y} else {z}} ; f(b=2) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_92eeefbdd71e59f91e6f685e96f800a1() {
        assertEval("{ x<-1 ; z<-TRUE ; f<-function(y=x,a=z,b) { if (z) {y} else {z}} ; f(2) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_79e963e740ed06baa2bf676e9785d34e() {
        assertEval("{ x<-1 ; f<-function(x=x) { x } ; f(x=x) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_c1a3b13a147c1000562a39c3fc4f20cc() {
        assertEval("{ f<-function(z, x=if (z) 2 else 3) {x} ; f(FALSE) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_f36bc89f7c525704b677993e0d982761() {
        assertEval("{f<-function(a,b,c=2,d) {c} ; g <- function() f(d=8,c=1,2,3) ; g() ; g() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_7b2dd380d3089ef7fca14a021ba1dbf8() {
        assertEval("{ x <- function(y) { sum(y) } ; f <- function() { x <- 1 ; x(1:10) } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsNamedAndDefault_d88ed35c4b95c84585a13f058691c6c2() {
        assertEval("{ f <- sum ; f(1:10) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_a64a6c5d250c94e619b66abb83c3124f() {
        assertEval("{ x<-function(z){z} ; x(TRUE) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_a2ddc77ba805631e3bf24e4e39c0e69e() {
        assertEval("{ x<-1 ; f<-function(){x} ; x<-2 ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_6e9e1b64b6e294b6c70bd8297039f421() {
        assertEval("{ x<-1 ; f<-function(x){x} ; f(TRUE) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_6c47634aa11865bfb57c4b695c8fe32e() {
        assertEval("{ x<-1 ; f<-function(x){a<-1;b<-2;x} ; f(TRUE) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_ec536961ada0e354bbb9db3b6a2d7ce4() {
        assertEval("{ f<-function(x){g<-function(x) {x} ; g(x) } ; f(TRUE) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_6ef962720f2144b54149f7afb2b974da() {
        assertEval("{ x<-1 ; f<-function(x){a<-1; b<-2; g<-function(x) {b<-3;x} ; g(b) } ; f(TRUE) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_d5d454ec4274116056c0ffc6d7e4a38e() {
        assertEval("{ x<-1 ; f<-function(z) { if (z) { x<-2 } ; x } ; x<-3 ; f(FALSE) }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_cde91319452e62e67af3a1b5538b8a11() {
        assertEval("{ f<-function() {z} ; z<-2 ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_c287fa0cc254895e34869a17606ea495() {
        assertEval("{ x<-1 ; g<-function() { x<-12 ; f<-function(z) { if (z) { x<-2 } ; x } ; x<-3 ; f(FALSE) } ; g() }");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsWorking_90da246bb50ef4e1ebdae0087f361a7f() {
        assertEval("{ x<-function() { z<-211 ; function(a) { if (a) { z } else { 200 } } } ; f<-x() ; z<-1000 ; f(TRUE) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_4dcf8d99f0c73ad065c2a74676a7ab2e() {
        assertEval("{ f <- function(a, b) { a - b } ; g <- function(...) { f(1, ...) } ; g(b = 2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_45ef2f9c49a54fcc7a262d8ccd06f11b() {
        assertEval("{ f <- function(...) { g(...) } ;  g <- function(b=2) { b } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_8f61493e777085cb94d56683285bf0fe() {
        assertEval("{ f <- function(a, barg) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(b=2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_a570f75f485e65c7bd8cb5ba1a42b33e() {
        assertEval("{ f <- function(a, b) { a * b } ; g <- function(...) { f(...,...) } ; g(3) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_cfd4e15d62829d53a1ff023619659bcb() {
        assertEval("{ g <- function(...) { c(...,...) } ; g(3) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_019b3e19030e9bdefe37fc9a5e3b2aca() {
        assertEval("{ f <- function(...) cat(..., \"\\n\") ; f(\"Hello\", \"world\") }");
    }

    @Test
    public void TestSimpleFunctions_testDots_3bda530df1cb70e5e7cd02a33fe016a9() {
        assertEval("{ f <- function(a=1,...) a ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_a1cb3470922356d8b17b303e086fe3c2() {
        assertEval("{ f<-function(x, y) { print(missing(y)); } ; f(42) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_cfc74f82dbc53749f5879ea6ea52e317() {
        assertEval("{ g<-function(nm, x) { print(c(nm, x)); } ; f<-function(x, ...) { g(x, ...) }; f(x=1, nm=42) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_8e8b4b9d534876d4b15da024f9dd620b() {
        assertEval("{ f.numeric<-function(x, row.names = NULL, optional = FALSE, ..., nm = NULL) { print(optional); print(nm) }; f<-function(x, row.names = NULL, optional = FALSE, ...) { UseMethod(\"f\") }; f(c(1,2), row.names = \"r1\", nm=\"bar\") }");
    }

    @Test
    public void TestSimpleFunctions_testDots_7446d28918c6fad1e668949ab385526f() {
        assertEval("{ fn1 <- function (a, b) a + b; fn2 <- function (a, b, ...) fn1(a, b, ...); fn2(1, 1) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_a97bc8dfceb8099abc213eb3ab356309() {
        assertEval("{ asdf <- function(x,...) UseMethod(\"asdf\",x); asdf.numeric <- function(x, ...) print(paste(\"num:\", x, ...)); asdf(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_e620898284cbe5e1d40bfe326c77804e() {
        assertEval("{ f <- function(...) { ..1 } ;  f(10) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_ab19b9b703d36ea0149b6950305344b1() {
        assertEval("{ f <- function(...) { ..1 ; x <<- 10 ; ..1 } ; x <- 1 ; f(x) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_46356a32a158c79de398dd64974058fc() {
        assertEval("{ f <- function(...) { g <- function() { ..1 } ; g() } ; f(a=2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_569ec3ad103b4dcd2b7e7af1202dd26f() {
        assertEval("{ f <- function(...) { ..1 <- 2 ; ..1 } ; f(z = 1) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_89d7b6bc5def8fa561e6f75a17aa7298() {
        assertEval("{ f <- function(...) { ..1 <- 2 ; get(\"..1\") } ; f(1,2,3,4) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_a29c54a3c8cd1ee3e35a2aea432951cb() {
        assertEval("{ g <- function(a,b) { a + b } ; f <- function(...) { g(...) }  ; f(1,2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_82b39f3b671e13554b9f70c67b51d9bc() {
        assertEval("{ g <- function(a,b,x) { a + b * x } ; f <- function(...) { g(...,x=4) }  ; f(b=1,a=2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_44ffe8a1375fa81b1531c8e8a3c876ee() {
        assertEval("{ g <- function(a,b,x) { a + b * x } ; f <- function(...) { g(x=4, ...) }  ; f(b=1,a=2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_1d94abf5afd9989c20c9e7713f15aa3a() {
        assertEval("{ g <- function(a,b,x) { a + b * x } ; f <- function(...) { g(x=4, ..., 10) }  ; f(b=1) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_b7c1eb65db6a2cb8b5f3401383477104() {
        assertEval("{ g <- function(a,b,aa,bb) { a ; x <<- 10 ; aa ; c(a, aa) } ; f <- function(...) {  g(..., ...) } ; x <- 1; y <- 2; f(x, y) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_f869c81e19bebe1d0b508f3152867860() {
        assertEval("{ f <- function(a, b) { a - b } ; g <- function(...) { f(1, ...) } ; g(a = 2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_30b478f9a7f62680adb64c9c36c9ab71() {
        assertEval("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(1,2,3) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_ba5a64f80ce3db2ca6ec2bc574c2b011() {
        assertEval("{ f <- function(...,d) { ..1 + ..2 } ; f(1,d=4,2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_ccfd3930d86a89add4a6dbc2941c216e() {
        assertEval("{ f <- function(...,d) { ..1 + ..2 } ; f(1,2,d=4) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_63ce765cd1f689e6c9b84cc46fc09e5f() {
        assertEval("{ f<-function(...) print(attributes(list(...))); f(a=7) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_f1e9c4a0ce879ba441333308a4c6a419() {
        assertEval("{ f<-function(...) print(attributes(list(...))); f(a=7, b=42) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_a8e7323fa1a949f877214637cf0a91b1() {
        assertEval("{ f <- function(...) { x <<- 10 ; ..1 } ; x <- 1 ; f(x) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_a52d7c73079437ca5443652b7f20f2ef() {
        assertEval("{ f <- function(...) { ..1 ; x <<- 10 ; ..2 } ; x <- 1 ; f(100,x) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_fc05b96d7c209b4b11d3c1597a4f5d95() {
        assertEval("{ f <- function(...) { ..2 ; x <<- 10 ; ..1 } ; x <- 1 ; f(x,100) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_d6e84b6c4d84ca15395f370802824ec0() {
        assertEval("{ g <- function(...) { 0 } ; f <- function(...) { g(...) ; x <<- 10 ; ..1 } ; x <- 1 ; f(x) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_8c619123210a09423d8fcbc211f475b3() {
        assertEval("{ x<-7; y<-42; f<-function(...) { substitute(g(...)) }; is.language(f(x,y)) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_2db2f298f9591fc863d46b2337031365() {
        assertEval("{ x<-7; y<-42; f<-function(...) { substitute(g(...)) }; typeof(f(x,y)) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_d266ad072a43522cdf323bfec4bb824d() {
        assertEval("{ x<-7; y<-42; f<-function(...) { as.list(substitute(g(...))) }; f(x,y) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_57010b4070ecc385e43774678ea99340() {
        assertEval("{ f <- function(...) g(...); g <- function(a,b) { print(a); print(b) }; f(1,2); f(a=3,b=4); f(a=5,b=6) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_168904965e7c99fe53738eba7ef80c6e() {
        assertEval("{ f <- function(a, barg, ...) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(b=2,3) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_446276723386c4e17ee775d34b52759a() {
        assertEval("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(be=2,du=3, 3) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_a44322c82f1c8b92ed8b32dc0841d9d3() {
        assertEval("{ f<-function(x, ...) { sum(x, ...) }; f(7) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_f6e7b7067ca509c5ee12be99b77e453f() {
        assertEval("{ h<-function(x,...) f(x,...); f<-function(x, ...) { sum(x, ...) }; h(7) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_d0edba6b313cda53895fe203f3a80a55() {
        assertEval("{ g <- function(x, ...) c(x, ...); g(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_509bf0a028dfdc20113e605f5b2c83ec() {
        assertEval("{ g <- function(x, ...) f(x,...); f <-function(x,...) c(x, ...); g(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_2a99369402e3625a074eafef17085ffa() {
        assertEvalError("{ f <- function(x) { ..1 } ;  f(10) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_affd9e814dfe7c1912794059804308fd() {
        assertEvalError("{ f <- function(...) { ..1 } ;  f() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_2ef740db3071df8b2c8b5452ac5beea4() {
        assertEvalError("{ f <- function(...) { get(\"..1\") } ; f(1,2,3,4) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_67eac84ba5b2dac0c1bc9214053b228c() {
        assertEvalError("{ f <- function(...) { ..3 } ; f(1,2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_452f05dd561690c47f4f03db94d54b6b() {
        assertEvalError("{ f <- function() { dummy() } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_20c4c3aa63da2253e51ef2c5ba9d4a1b() {
        assertEvalError("{ f <- function() { if (FALSE) { dummy <- 2 } ; dummy() } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_8645241807f4b8810f69603e0858ef16() {
        assertEvalError("{ f <- function() { if (FALSE) { dummy <- 2 } ; g <- function() { dummy() } ; g() } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_edee5dc6f81e51ce659c0f3a2fb21571() {
        assertEvalError("{ f <- function() { dummy <- 2 ; g <- function() { dummy() } ; g() } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_c3c566ad3a1f22872c3f310db5ae8933() {
        assertEvalError("{ f <- function() { dummy() } ; dummy <- 2 ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_5606499974e8a959bd2e5a755f7832c8() {
        assertEvalError("{ dummy <- 2 ; dummy() }");
    }

    @Test
    public void TestSimpleFunctions_testDots_27d8843efbecef3fd6ae84611b61cdff() {
        assertEvalError("{ f <- function(a, b) { a + b } ; g <- function(...) { f(a=1, ...) } ; g(a=2) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_7f8c80886bf192821872b6edd793baf2() {
        assertEvalError("{ f <- function(a, barg, bextra) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(b=2,3) }");
    }

    @Test
    public void TestSimpleFunctions_testDots_997c167046500987d88720745d0018c2() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ...) } ; g(be=2,bex=3, 3) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_581191e3ee585752a4393b1dd5c20af3() {
        assertEval("{ f <- function(...) { substitute(..1) } ;  f(x+y) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_a3678db1544ef8395deec4ed02acdb3d() {
        assertEvalError("{ g <- function(a,b,x) { a + b * x } ; f <- function(...) { g(x=4, ..., 10) }  ; f(b=1,a=2) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_76837b302e412d60cdec11289bac184b() {
        assertEvalError("{ lapply(1:3, \"dummy\") }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_601a671e48fcffae9a23e5b3466aa324() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ..., x=2) } ; g(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_c42cdbf8980cb24618b0e81c71c76f87() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ..., x=2,z=3) } ; g(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_673e885ab1ad8a737dbc0b05d6a34eed() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ..., xxx=2) } ; g(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_4ef97fc6760900dfba4abef33ebb3620() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, xxx=2, ...) } ; g(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_3df181a7e78ef23b092f1aba322bbfa1() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ...,,,) } ; g(1) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_abcc928e40684f62d0ad26ee2f35b057() {
        assertEvalError("{ f <- function(...) { ..2 + ..2 } ; f(1,,2) }");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_408a647f1319d8f5216323761b223a47() {
        assertEvalError("{ f <- function(...) { ..1 + ..2 } ; f(1,,3) }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_97c1046334e0c7a03ba92803615fccd6() {
        assertEvalError("{ x<-function(){1} ; x(y=1) }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_e45fc91400caff4d8a5596ec8cd2edfc() {
        assertEvalError("{ x<-function(y, b){1} ; x(y=1, 2, 3, z = 5) }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_e8fd77ad56a4fc8e254f827faed5c973() {
        assertEvalError("{ x<-function(){1} ; x(1) }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_9c686da74e6a9bfda861ec6e834613e8() {
        assertEvalError("{ x<-function(a){1} ; x(1,) }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_423440c018b8f580500bc17469c52cb8() {
        assertEvalError("{ x<-function(){1} ; x(y=sum(1:10)) }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_483a6566dbfd75258c3c09b229efb70b() {
        assertEvalError("{ f <- function(x) { x } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_da6b1096c4e55e8bb4ac7400d7e63552() {
        assertEvalError("{ x<-function(y,b){1} ; x(y=1,y=3,4) }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_3e920d36beba426178bb6e2c548151b7() {
        assertEvalError("{ x<-function(foo,bar){foo*bar} ; x(fo=10,f=1,2) }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_1f3190100b071debf5b11ed7f2fae959() {
        assertEvalError("{ f <- function(a,a) {1} }");
    }

    @Test
    public void TestSimpleFunctions_testErrors_bf29c1dae99e04f8cd11a340f54e1287() {
        assertEvalError("{ f <- function(a,b,c,d) { a + b } ; f(1,x=1,2,3,4) }");
    }

    @Test
    public void TestSimpleFunctions_testFunctionPrinting_728ef0b1b46d1cef1d301cb8ac4ac8b0() {
        assertEval("{ foo <- function(x) x; foo }");
    }

    @Test
    public void TestSimpleFunctions_testFunctionPrinting_58dab500ef1398af5301dd59ee700728() {
        assertEval("{ sum }");
    }

    @Test
    public void TestSimpleFunctions_testFunctionPrintingIgnore_ce0b9f76f47f6752297f2228240d69f9() {
        assertEval("{ exists }");
    }

    @Test
    public void TestSimpleFunctions_testInvokeIndirectly_249a400b35f2f0c3cc210c2719eadf10() {
        assertEval("{ f <- function(x) x+1 ; g <- function(x) x+2 ; h <- function(v) if (v==1) f else g ; h(1)(1) }");
    }

    @Test
    public void TestSimpleFunctions_testInvokeIndirectly_eba1980fa779ba82a6d33dd930b37480() {
        assertEval("{ f <- function(x) x+1 ; g <- function(x) x+2 ; h <- function(v) if (v==1) f else g ; h(2)(1) }");
    }

    @Test
    public void TestSimpleFunctions_testInvokeIndirectly_c69f1367fbb3330e6e446038532361d0() {
        assertEval("{ f <- function(x) x+1 ; g <- function(x) x+2 ; v <- 1 ; (if (v==1) f else g)(1) }");
    }

    @Test
    public void TestSimpleFunctions_testInvokeIndirectly_0426e7a36eb62ebaece970a5f8adb8c3() {
        assertEval("{ f <- function(x) x+1 ; g <- function(x) x+2 ; v <- 2 ; (if (v==1) f else g)(1) }");
    }

    @Test
    public void TestSimpleFunctions_testInvokeIndirectly_6b4d9a5443d0ef4f0adb1985be5be697() {
        assertEval("{ f <- function(x) x+1 ; g <- function(x) x+2 ; funs <- list(f,g) ; funs[[1]](1) }");
    }

    @Test
    public void TestSimpleFunctions_testInvokeIndirectly_70237bb41c7522a4a2a4a4bab29d79a6() {
        assertEval("{ f <- function(x) x+1 ; g <- function(x) x+2 ; funs <- list(f,g) ; funs[[2]](1) }");
    }

    @Test
    public void TestSimpleFunctions_testIsPrimitive_3cf4ca3ad9258e033b55b8f6c1da7f07() {
        assertEval("{ is.primitive(is.primitive) }");
    }

    @Test
    public void TestSimpleFunctions_testIsPrimitive_b1b1f9f533e9a2493ada5e42f6dd53b6() {
        assertEval("{ is.primitive(is.function) }");
    }

    @Test
    public void TestSimpleFunctions_testMatching_c272d90b4e2480f9f6fc9b6bfcc79e74() {
        assertEval("{ x<-function(foo,bar){foo*bar} ; x(f=10,2) }");
    }

    @Test
    public void TestSimpleFunctions_testMatching_7945ff12693520f14035e534231ca1a5() {
        assertEval("{ x<-function(foo,bar){foo*bar} ; x(fo=10, bar=2) }");
    }

    @Test
    public void TestSimpleFunctions_testMatching_3044cf7c3e46ee0ed1d82185d7fa28f8() {
        assertEval("{ f<-function(..., val=1) { c(list(...), val) }; f(v=7, 2) }");
    }

    @Test
    public void TestSimpleFunctions_testMatching_a44e5e17d1cee7de52a7be40ceccc694() {
        assertEval("{ f<-function(er=1, ..., val=1) { c(list(...), val, er) }; f(v=7, 2, e=8) }");
    }

    @Test
    public void TestSimpleFunctions_testMatching_7c113e0683905a2c65072aebc1cf14dc() {
        assertEvalError("{ f <- function(hello, hi) { hello + hi } ; f(h = 1) }");
    }

    @Test
    public void TestSimpleFunctions_testMatching_1bd6b789e14102f4d5c84c2e1cd0b3cd() {
        assertEvalError("{ f <- function(hello, hi) { hello + hi } ; f(hello = 1, bye = 3) }");
    }

    @Test
    public void TestSimpleFunctions_testMatching_b27e201723ae1ff4db0c5bcbe14b18b6() {
        assertEvalError("{ f <- function(a) { a } ; f(1,2) }");
    }

    @Test
    public void TestSimpleFunctions_testPromises_4a3b20e85c61edf3c36e662bdc63d53d() {
        assertEval("{ z <- 1 ; f <- function(c = z) { c(1,2) ; z <- z + 1 ; c  } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testPromises_b6fbb8465490b39a24121d9c2576252a() {
        assertEval("{ f <- function(x) { for (i in 1:10) { x <- g(x,i) }; x }; g <- function(x,i) { x + i }; f(2) }");
    }

    @Test
    public void TestSimpleFunctions_testPromises_c7558b8584a0a8c1dff6c7ee5575ab52() {
        assertEval("{ f <- function(x = z) { z = 1 ; x } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testPromises_b817867bec89270f00c9820b107edd80() {
        assertEval("{ z <- 1 ; f <- function(c = z) {  z <- z + 1 ; c  } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testPromises_0782b9c8b5990e31ca5d45f3d355ad83() {
        assertEval("{ f <- function(a) { g <- function(b) { x <<- 2; b } ; g(a) } ; x <- 1 ; f(x) }");
    }

    @Test
    public void TestSimpleFunctions_testPromises_9a98faefce072c525121fc846528b144() {
        assertEval("{ f <- function(a) { g <- function(b) { a <<- 3; b } ; g(a) } ; x <- 1 ; f(x) }");
    }

    @Test
    public void TestSimpleFunctions_testPromises_f502212c6a9fc0404104e3f44f29d926() {
        assertEval("{ f <- function(x) { function() {x} } ; a <- 1 ; b <- f(a) ; a <- 10 ; b() }");
    }

    @Test
    public void TestSimpleFunctions_testPromises_1d4e596e32ad6ce14263c2861138bb44() {
        assertEvalError("{ f <- function(x = y, y = x) { y } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testRecursion_788b8f353f8f02e3fa76469c56859e2e() {
        assertEval("{ f<-function(i) { if(i==1) { 1 } else { j<-i-1 ; f(j) } } ; f(10) }");
    }

    @Test
    public void TestSimpleFunctions_testRecursion_53ff93949493b468da6dd721627f97c3() {
        assertEval("{ f<-function(i) { if(i==1) { 1 } else { f(i-1) } } ; f(10) }");
    }

    @Test
    public void TestSimpleFunctions_testRecursion_2327d5e8fe9efc6208aad1417470eebc() {
        assertEval("{ f<-function(i) { if(i<=1) 1 else i*f(i-1) } ; f(10) }");
    }

    @Test
    public void TestSimpleFunctions_testRecursion_b8ff015ccc9e2f9833f93f4683f1e6c1() {
        assertEval("{ f<-function(i) { if(i<=1L) 1L else i*f(i-1L) } ; f(10L) }");
    }

    @Test
    public void TestSimpleFunctions_testRecursion_2fa0d885e0c0c4715e94b7eb7ff0ba08() {
        assertEval("{ f<-function(i) { if(i<=1) 1 else i*f(i-1) } ; g<-function(n, f, a) { if (n==1) { f(a) } else { f(a) ; g(n-1, f, a) } } ; g(100,f,120) }");
    }

    @Test
    public void TestSimpleFunctions_testRecursion_b491d61408b15d700753b3576d392510() {
        assertEval("{ f<-function(i) { if (i==1) { 1 } else if (i==2) { 1 } else { f(i-1) + f(i-2) } } ; f(10) }");
    }

    @Test
    public void TestSimpleFunctions_testRecursion_bafa0822c2c0e4bb58abe1a7501bc9a7() {
        assertEval("{ f<-function(i) { if (i==1L) { 1L } else if (i==2L) { 1L } else { f(i-1L) + f(i-2L) } } ; f(10L) }");
    }

    @Test
    public void TestSimpleFunctions_testReturn_3a43f178980409e80374fdf37840b6cd() {
        assertEval("{ f<-function() { return() } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testReturn_8d446d0c309684cf52c2cff0d3d9efdd() {
        assertEval("{ f<-function() { return(2) ; 3 } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testReturnIgnore_ea86042d5ec0a9de6c14aabc98049cf0() {
        assertEval("{ f<-function() { return(invisible(2)) } ; f() }");
    }

    @Test
    public void TestSimpleFunctions_testUnusedArgumentErrors_0cbdc150cd6e4db7f1004c14f912a5a5() {
        assertEval("{ foo <- function(x) x; foo(1, 2, 3) }");
    }

    @Test
    public void TestSimpleFunctions_testUnusedArgumentErrors_750a30256b5db1960c52679f4d9e5e84() {
        assertEval("{ foo <- function(x) x; foo() }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_9199af29689a0510d0f2b7657d6f9656() {
        assertEvalError("{ if (integer()) { TRUE } }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_9759a28257afd267f562c056ecb21bc3() {
        assertEvalError("{ if (1[2:1]) { TRUE } }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_16ad47e3aae858392d62ccd5199242c9() {
        assertEvalError("{ if (c(1L[2],0L,0L)) { TRUE } else { 2 } }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_bda065a78031d440e536225f68fb6c2c() {
        assertEvalError("{ f <- function(cond) { if (cond) { TRUE } else { 2 }  } ; f(logical()) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_82982f95ffe974f98ccba036dfa8744e() {
        assertEvalWarning("{ f <- function(a) { if (is.na(a)) { 1 } else { 2 } } ; f(5) ; f(1:3)}");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_0db47653499ad8ead6375d84cb54b7f9() {
        assertEvalWarning("{ if (1:3) { TRUE } }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_099b8bdf35d655c86519abbffda1ce8d() {
        assertEvalWarning("{ if (c(0,0,0)) { TRUE } else { 2 } }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_813778d331bc4877ff5907cb5b3c7f3c() {
        assertEvalWarning("{ if (c(1L,0L,0L)) { TRUE } else { 2 } }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_3e2b75fc9ef406c71f3e29e6b3d99c78() {
        assertEvalWarning("{ if (c(0L,0L,0L)) { TRUE } else { 2 } }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_7fc18aa80c865a84fa5e33de006f8ccd() {
        assertEvalWarning("{ f <- function(cond) { if (cond) { TRUE } else { 2 } } ; f(1:3) ; f(2) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_54e42c6c4429a21b131e545c9dc37dbe() {
        assertEvalWarning("{ f <- function(cond) { if (cond) { TRUE } else { 2 }  } ; f(c(TRUE,FALSE)) ; f(FALSE) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testCast_f221f10e3f4b7d00f239da0a0f88304f() {
        assertEvalWarning("{ f <- function(cond) { if (cond) { TRUE } else { 2 }  } ; f(c(TRUE,FALSE)) ; f(1) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_7b33c311264b2e52d4b7a20a7b757e37() {
        assertEval("{ x <- 2 ; if (1==x) TRUE else 2 }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_e966a84324c8008c95cf9b99088ae120() {
        assertEval("{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_678b56ea12921bdd8a913afb486b9867() {
        assertEval("{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(FALSE) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_bc3c097b9dd55e8f7434f1a865633ff3() {
        assertEval("{ if (TRUE==FALSE) TRUE else FALSE }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_c070b3457c7ce4ac612978aa99bad9e1() {
        assertEval("{ if (FALSE==TRUE) TRUE else FALSE }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_368d985d896df8d658b28399a8c3ae8e() {
        assertEval("{ if (FALSE==1) TRUE else FALSE }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_342f4f9212dd0d7f6d241317e70c48ff() {
        assertEval("{ f <- function(v) { if (FALSE==v) TRUE else FALSE } ; f(TRUE) ; f(1) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_174fdf04199a4eba4db1c05dbec06db9() {
        assertEvalError("{ x <- 2 ; if (NA) x <- 3 ; x }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_45ac51977c099e844e9cb00ebb02366e() {
        assertEvalError("{ f <- function(x) { if (x) 1 else 2 } ; f(NA)  }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_c737c8946144235d827f68135ecd67b8() {
        assertEvalError("{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(NA) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_d3f8558892544cd36de71a744cf8d3b7() {
        assertEvalError("{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(\"hello\") }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_a3db4b937859f822db002f66720a2330() {
        assertEvalError("{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(logical()) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_1176ca756067ae8389a73912701118f3() {
        assertEvalError("{ f <- function(x) { if (x == 2) 1 else 2 } ; f(1) ; f(NA) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_614b57fd3bef21349d7e3e718d39f8de() {
        assertEvalError("{ if (NA == TRUE) TRUE else FALSE }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf_bb9be8d2a69b78e30de31042055ecfb5() {
        assertEvalError("{ if (TRUE == NA) TRUE else FALSE }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf2_5692fd60cc98a5ce0d954993e427bb59() {
        assertEval("if(TRUE) 1 else 2");
    }

    @Test
    public void TestSimpleIfEvaluator_testIf2_77782ac181f98640f0259537469a459f() {
        assertEval("if(FALSE) 1 else 2");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfDanglingElse_7a306dba6d14aca43d5045c2db42e702() {
        assertEval("if(TRUE) if (FALSE) 1 else 2");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfDanglingElseIgnore_d73be7d76c1d5f7720c73594824df7ea() {
        assertEvalNoOutput("if(FALSE) if (FALSE) 1 else 2");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfIgnore_e44614f9767a91b8721567cbaab6aa97() {
        assertEvalWarning("{ f <- function(x) { if (x) 1 else 2 } ; f(1) ; f(1:3) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfNot1_a2e2a550ed5c85989fee041136f4cddd() {
        assertEval("if(!FALSE) 1 else 2");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfNot1_51683f5dc6a8c118b35fc5ca9f2c398c() {
        assertEval("if(!TRUE) 1 else 2");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfVisibility_07acb3cdcfdc3844caac0cb79b621b8b() {
        assertEval("{ if (FALSE) 23 }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfVisibility_70d9ecadfc761871d8016ac1968c6f75() {
        assertEval("{ if (FALSE) 23 else NULL }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfVisibility_623c4f9534806a63158804e058d093cb() {
        assertEval("{ if (TRUE) invisible(23) else 23 }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfVisibility_39dd9ca187b36acefd2b7bb24fbf9873() {
        assertEval("{ if (TRUE) invisible(23) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfVisibility_01427999a084605da3b7f52f6cccf2d1() {
        assertEval("{ if (FALSE) 23 else invisible(23) }");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfWithoutElse_fda700832dfd7d9e6c06cb66fd9e25c8() {
        assertEval("if(TRUE) 1");
    }

    @Test
    public void TestSimpleIfEvaluator_testIfWithoutElseIgnore_a1e01cf7b16f44e54f53f0bd7b7d4712() {
        assertEvalNoOutput("if(FALSE) 1");
    }

    @Test
    public void TestSimpleLists_testListAccess_18f9fc63a2e08aff74f0ff462ce83db4() {
        assertEval("{ l <- list(c(1,2,3),\"eep\") ; l[[1]] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_5c6155b65246519eee382c04fd74fc56() {
        assertEval("{ l <- list(c(1,2,3),\"eep\") ; l[[2]] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_53a797f0d6470ad9ec52827e37b2d7c7() {
        assertEval("{ l <- list(1,2,3) ; l[5] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_9d31ef76615e6556bfc4edf6ec869e25() {
        assertEval("{ l <- list(1,2,3) ; typeof(l[5]) }");
    }

    @Test
    public void TestSimpleLists_testListAccess_91fe05887df6c77e161e4527b18cc6a0() {
        assertEval("{ l <- list(1,2,3) ; l[0] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_3a4538aac7e564692ec0865701cf4f38() {
        assertEval("{ l <- list(1,2,3) ; l[[NA]] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_ab60c92a5348c5c3af12f60fda3c2cf9() {
        assertEval("{ l <- list(1,2,3) ; typeof(l[[NA]]) }");
    }

    @Test
    public void TestSimpleLists_testListAccess_9cec59e77b03e6dad551210e799ef068() {
        assertEval("{ l <- list(1,2,3) ; l[NA] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_875d88d54a98324fd9b20ec65f92717c() {
        assertEval("{ l <- list(1,2,3) ; typeof(l[NA]) }");
    }

    @Test
    public void TestSimpleLists_testListAccess_86d81009828e37036c672e2d0bcc92d2() {
        assertEval("{ l <- list(1,2,3) ; l[-2] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_c7b7784cf8c0f1b69f7c1f718456ed58() {
        assertEval("{ l <- list(1,2,3) ; typeof(l[-2]) }");
    }

    @Test
    public void TestSimpleLists_testListAccess_3c3b7a46d2860e3da58a221107bb0847() {
        assertEval("{ l <- list(1,2,3) ; l[-5] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_62a1913ad8084caa2140ffb8faf43b5d() {
        assertEval("{ a <- list(1,NULL,list()) ; a[3] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_ac7d1818b5b74aeec142dec729bf8538() {
        assertEval("{ a <- list(1,NULL,list()) ; a[[3]] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_e812d415728b4d67419d55af93a40176() {
        assertEval("{ a <- list(1,NULL,list()) ; typeof(a[3]) }");
    }

    @Test
    public void TestSimpleLists_testListAccess_a2eb5f7e77e0c397af70c404f3c26162() {
        assertEval("{ a <- list(1,NULL,list()) ; typeof(a[[3]]) }");
    }

    @Test
    public void TestSimpleLists_testListAccess_d96acf7acd87b203fb663abeb53bf98c() {
        assertEval("{ a <- list(1,2,3) ; x <- integer() ; a[x] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_f50556c729cd8f8fb891ec8e2ff7be57() {
        assertEvalError("{ l <- list(1,2,3) ; l[[5]] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_7c18c20f645e4c331fba77e5f4e9d13c() {
        assertEvalError("{ l <- list(1,2,3) ; l[[0]] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_4a1c095b6af64ee84a88ba1a3e3bf6dc() {
        assertEvalError("{ l <- list(1,2,3) ; l[[-2]] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_34a7d57c315887ff314aaf437954874c() {
        assertEvalError("{ l <- list(1,2,3) ; l[[-5]] }");
    }

    @Test
    public void TestSimpleLists_testListAccess_f2688f64a0fd99d51f3d5123888afffb() {
        assertEvalError("{ a <- list(1,2,3) ; x <- integer() ; a[[x]] }");
    }

    @Test
    public void TestSimpleLists_testListArgumentEvaluation_f62339e36ed620e527abf492790cea00() {
        assertEval("{ a <- c(0,0,0) ; f <- function() { g <- function() { a[2] <<- 9 } ; g() } ; u <- function() { a <- c(1,1,1) ; f() ; a } ; list(a,u()) }");
    }

    @Test
    public void TestSimpleLists_testListCombine_315689503dbaa314b803e0b6ced2181f() {
        assertEval("{ a <- c(list(1)) ; typeof(a) }");
    }

    @Test
    public void TestSimpleLists_testListCombine_031786c1ea90d2d2e9ec699f794b4afd() {
        assertEval("{ a <- c(list(1)) ; typeof(a[1]) }");
    }

    @Test
    public void TestSimpleLists_testListCombine_964f72f495ac4c5188cd2fb4bbf6fa55() {
        assertEval("{ a <- c(list(1)) ; typeof(a[[1]]) }");
    }

    @Test
    public void TestSimpleLists_testListCombine_201fcbdb0ecf34cc4ff2f1f723b2a53a() {
        assertEval("{ a <- c(1,2,list(3,4),5) ; a }");
    }

    @Test
    public void TestSimpleLists_testListCombine_467698077b5b2ff1e3e7785bbf9677c7() {
        assertEval("{ a <- c(1,2,list(3,4),5) ; typeof(a) }");
    }

    @Test
    public void TestSimpleLists_testListCombine_c2ea15d71c33bb87608041117c9e2891() {
        assertEval("{ a <- c(1,2,list(3,4),5) ; a[3] }");
    }

    @Test
    public void TestSimpleLists_testListCombine_232d71f34559999310e6a53914651f9d() {
        assertEval("{ a <- c(1,2,list(3,4),5) ; typeof(a[3]) }");
    }

    @Test
    public void TestSimpleLists_testListCombine_4ee7b61f01251cf293c28bb420e4e87c() {
        assertEval("{ a <- c(1,2,list(3,4),5) ; a[[3]] }");
    }

    @Test
    public void TestSimpleLists_testListCombine_be373b0c9592e9c0ec3670a4d7a740d6() {
        assertEval("{ a <- c(1,2,list(3,4),5) ; typeof(a[[3]]) }");
    }

    @Test
    public void TestSimpleLists_testListCreation_c503a581b4392d103b701db574cadae8() {
        assertEval("{ list() }");
    }

    @Test
    public void TestSimpleLists_testListCreation_7931cfc2ce818a71b64fdf1cf5e413ed() {
        assertEval("{ list(list(),list()) }");
    }

    @Test
    public void TestSimpleLists_testListCreation_a90919f9121c46fed48bc8590db8c055() {
        assertEval("{ list(1,NULL,list()) }");
    }

    @Test
    public void TestSimpleLists_testListUpdate_df8998751433c2a2773cbb812fae67f2() {
        assertEval("{ l <- list(c(1,2,3),c(4,5,6)) ; l[[1]] <- c(7,8,9) ; l[[1]] }");
    }

    @Test
    public void TestSimpleLoop_testDynamic_f61782f946510fe4afa8081fcbdd8fb1() {
        assertEval("{ l <- quote({x <- 0 ; for(i in 1:10) { x <- x + i } ; x}) ; f <- function() { eval(l) } ; x <<- 10 ; f() }");
    }

    @Test
    public void TestSimpleLoop_testFactorial_980dc7a40991e6f049592919e6e49549() {
        assertEval("{ f<-function(i) { if (i<=1) {1} else {r<-i; for(j in 2:(i-1)) {r=r*j}; r} }; f(10) }");
    }

    @Test
    public void TestSimpleLoop_testFibonacci_e824e7493537a5d548e4c8cc8b81672e() {
        assertEval("{ f<-function(i) { x<-integer(i); x[1]<-1; x[2]<-1; if (i>2) { for(j in 3:i) { x[j]<-x[j-1]+x[j-2] } }; x[i] } ; f(32) }");
    }

    @Test
    public void TestSimpleLoop_testForSequenceDescending_994e6351e728280d7ba88e09fc7a11d1() {
        assertEval("{ sum <- 0; for (i in 3:1) { sum <- sum + i; }; sum; }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_bce9a3951514a3066661f5ca1a2441bd() {
        assertEval("{ x<-210 ; repeat { x <- x + 1 ; break } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_ae888ff43ea51dddf513e8b8df7d9d3f() {
        assertEval("{ x<-1 ; repeat { x <- x + 1 ; if (x > 11) { break } } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_0c89718b6eb747702f0f5d00b8079cc3() {
        assertEval("{ x<-1 ; repeat { x <- x + 1 ; if (x <= 11) { next } else { break } ; x <- 1024 } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_34699c5e1e3644780a5432cf084c15c2() {
        assertEval("{ x<-1 ; while(TRUE) { x <- x + 1 ; if (x > 11) { break } } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_f70a46760861e5ab800206007d2255b7() {
        assertEval("{ x<-1 ; while(x <= 10) { x<-x+1 } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_1d936a3900cebedb6509c9a54f315836() {
        assertEval("{ x<-1 ; for(i in 1:10) { x<-x+1 } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_57326daec626f7534170f16514601151() {
        assertEval("{ for(i in c(1,2)) { x <- i } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_b34270c17d2d7bc4cc52ebd278b531c7() {
        assertEval("{ f<-function(r) { x<-0 ; for(i in r) { x<-x+i } ; x } ; f(1:10) ; f(c(1,2,3,4,5)) }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_f6c2d39e2b4af11d41385c29b4e8b362() {
        assertEval("{ f<-function(r) { x<-0 ; for(i in r) { x<-x+i } ; x } ; f(c(1,2,3,4,5)) ; f(1:10) }");
    }

    @Test
    public void TestSimpleLoop_testLoops1_95ad9d671942b4704417971ed44409ba() {
        assertEval("{ r <- \"\" ; for (s in c(\"Hello\", \"world\")) r <- paste(r, s) ; r }");
    }

    @Test
    public void TestSimpleLoop_testLoops3_e52a6f4007d0a090db2f28b255bf413a() {
        assertEval("{ l <- quote({for(i in c(1,2)) { x <- i } ; x }) ; f <- function() { eval(l) } ; f() }");
    }

    @Test
    public void TestSimpleLoop_testLoops3_6548e4ec40613c3fef7af0ad99e9633e() {
        assertEval("{ l <- quote(for(i in s) { x <- i }) ; s <- 1:3 ; eval(l) ; s <- 2:1 ; eval(l) ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops3_46a097a0af4ffe6e8077dcbe5e4430e0() {
        assertEval("{ l <- quote({for(i in c(2,1)) { x <- i } ; x }) ; f <- function() { if (FALSE) i <- 2 ; eval(l) } ; f() }");
    }

    @Test
    public void TestSimpleLoop_testLoops3_569178ca1ef4a4eb52481f6da3753a5a() {
        assertEval("{ l <- quote(for(i in s) { x <- i }) ; s <- 1:3 ; eval(l) ; s <- NULL ; eval(l) ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoops3_05c2bfcd5008d009fec146738755dac8() {
        assertEval("{ l <- quote({ for(i in c(1,2,3,4)) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }) ; f <- function() { eval(l) } ; f()  }");
    }

    @Test
    public void TestSimpleLoop_testLoops3_ea11d8de89669a91c43b8a2985aaf4a0() {
        assertEval("{ l <- quote({ for(i in 1:4) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }) ; f <- function() { eval(l) } ; f()  }");
    }

    @Test
    public void TestSimpleLoop_testLoopsBreakNext_91e30f3e9fb9cb4abe44cb85b9b1af13() {
        assertEval("{ for(i in c(1,2,3,4)) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoopsBreakNext_74ae7e11b70da5938e55907d13cfd552() {
        assertEval("{ f <- function() { for(i in c(1,2,3,4)) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f()  }");
    }

    @Test
    public void TestSimpleLoop_testLoopsBreakNext_a91816fd9403d310cc046b69cdc2bf25() {
        assertEval("{ f <- function() { for(i in 1:4) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f() }");
    }

    @Test
    public void TestSimpleLoop_testLoopsBreakNext_7d1ff3638747f862f33de8e36ab422f0() {
        assertEval("{ for(i in 1:4) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoopsBreakNext_c57020b4e0d4bfbdb7cb345d761dc311() {
        assertEval("{ i <- 0L ; while(i < 3L) { i <- i + 1 ; if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoopsBreakNext_e6d103c7fe97d1e1aec5f43f1fb495d2() {
        assertEval("{ f <- function(s) { for(i in s) { if (i == 1) { next } ; if (i==3) { break } ; x <- i ; if (i==4) { x <- 10 } } ; x } ; f(2:1) ; f(c(1,2,3,4)) }");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrors_30290bc6eef9629f585deca4eb7fb0a3() {
        assertEvalError("{ while (1 < NA) { 1 } }");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrors_bc6b5c193e92175abc33e62c6b4cb66c() {
        assertEvalError("{ break; }");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrors_4e8d19b7c3269b63639652234d8164f8() {
        assertEvalError("{ next; }");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrorsIgnore_f394e8f19fc73574a5c55ba7f8e03973() {
        assertEvalError("{ l <- quote(for(i in s) { x <- i }) ; s <- 1:3 ; eval(l) ; s <- function(){} ; eval(l) ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrorsIgnore_2b1a508671083a1b18d0ddb3fe0979c2() {
        assertEvalError("{ l <- function(s) { for(i in s) { x <- i } ; x } ; l(1:3) ; s <- function(){} ; l(s) ; x }");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrorsIgnore_eb72a8fa37e3e5c2ac10481c6173a724() {
        assertEvalError("{ l <- quote({ for(i in s) { x <- i } ; x }) ; f <- function(s) { eval(l) } ; f(1:3) ; s <- function(){} ; f(s) ; x }");
    }

    @Test
    public void TestSimpleLoop_testOneIterationLoops_2b49e8a8d835c688af57e7939698d86a() {
        assertEvalNoNL("{ for (a in 1) cat(a) }");
    }

    @Test
    public void TestSimpleLoop_testOneIterationLoops_d16fcada6748f3bb2cf6eb7647ccd86f() {
        assertEvalNoNL("{ for (a in 1L) cat(a) }");
    }

    @Test
    public void TestSimpleLoop_testOneIterationLoops_133be12813e36ebfe9c2af618ab288c8() {
        assertEvalNoNL("{ for (a in \"xyz\") cat(a) }");
    }

    @Test
    public void TestSimpleMatrix_testAccessDim_6470f97c7d301cf55ea6f422824b2554() {
        assertEval("{ x<-1:10; dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testAccessDim_8a790ee2171c7ec67230d47fd5a93685() {
        assertEval("{ x<-FALSE; dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testAccessDim_0fe6a0202e78f96226b6c78220c9019f() {
        assertEval("{ x<-TRUE; dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testAccessDim_bade8af98bcb15586125f1cf4f6cd17f() {
        assertEval("{ x<-1; dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testAccessDim_a0e6820bb5b00f15a2e0d421d3328356() {
        assertEval("{ x<-1L; dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testAccessDim_8a5794c7c3350416ffe145dfd29ebaf2() {
        assertEval("{ x<-c(1L, 2L, 3L); dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testAccessDim_ca5043dcd46d0a5670096a1c1d54e212() {
        assertEval("{ x<-c(1, 2, 3); dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_23871025be785d91a8713ca885390f83() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2,3); x[1,2] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_b970d364e61f5cab20df21ddb613d69c() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L); dim(x) <- c(2,5); x[2,4] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_94fdc60f4cebbc0434c623cc82fd0f35() {
        assertEval("{ x<-c(1, 2, 3, 4); dim(x)<-c(2, 2); x[1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_e4c95f3a7a97a99a6fd32061257e6e0b() {
        assertEval("{ x<-c(1+1i, 2+2i, 3+3i, 4+4i); dim(x)<-c(2, 2); x[1, 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_300ef4163de9cd7969bf3979f4f471f3() {
        assertEval("{ x<-c(FALSE, TRUE, TRUE, FALSE); dim(x)<-c(2, 2); x[1, 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_bc4958b450b2bfdf1383f35fb17cfb3a() {
        assertEval("{ x<-c(\"a\", \"b\", \"c\", \"d\"); dim(x)<-c(2, 2); x[1, 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_38338d5474331aa6eeff230e7b5ba879() {
        assertEval("{ x<-1:8; dim(x)<-c(2,4);  x[1, TRUE] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_db156d54bea8cb65414cbc93089ecf17() {
        assertEval("{ x<-1:8; dim(x)<-c(2,4);  x[1, FALSE] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_1c896ed27494abd74b02ac6f757b9ac0() {
        assertEval("{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE, FALSE)] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_dd0a5fa1d3a35144101e702bc966c97d() {
        assertEval("{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE)] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_0cfe5fa46c26e276668996e57b232f40() {
        assertEval("{ x<-(1:8); dim(x)<-c(2,4); x[1, c(NA, NA)] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_3c49481cdcb36b7f447b368f80f306fb() {
        assertEval("{ x<-(1:8); dim(x)<-c(2,4); x[1, c(1, NA)] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_877ed90ef0b07fff954fea3ad5704fc9() {
        assertEval("{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\")); x[1, NA] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_6c11754386b4cea4b3b5e02ba04b74c7() {
        assertEval("{ x<-(1:4); dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"c\", \"d\")); x[NA, 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_f283c238b6f4173d639057369fa0fd31() {
        assertEval("{ x<-1:16; dim(x)<-c(4,4); x[-1,-2] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_48402becb93ba8b2f5691f90dc26bd2d() {
        assertEval("{ x<-1:16; dim(x)<-c(4,4); x[-1,c(1,1,2,3)] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_90132b2a193dad2d92381b594de9b112() {
        assertEval("{ x<-1:4; dim(x)<-c(4,1); dimnames(x)<-list(c(\"a\", \"b\", \"c\", \"d\"), \"z\"); x[, 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_6681aef9db0540fe03ac4a1bad8d0e82() {
        assertEval("{ x<-1:4; dim(x)<-c(4,1); dimnames(x)<-list(c(\"a\", \"b\", \"c\", \"d\"), \"z\"); x[c(2,4), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_12eb5030bb09607d1eb6a514959ea2a3() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[1, 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_fd66aadc9f2fd9aa7ca6e3df54185524() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[c(1,1), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_4f67e9f39a7503fb10d7a531ae2951f4() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[c(1,2), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_6cc4cb472cb00d5ef8a561c3d5637de9() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[c(1,2,1), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_b5888200ddf246d4ac8dd86539184029() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[\"b\", 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_908d675bd2ddd444451a0355ec9bf7d4() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[c(\"b\"), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_0f5bc7e7bccfed6ec5321b68c044f1ae() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[c(\"a\", \"b\"), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_1ba7fe23ec0a449c904545570200ccb1() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[c(\"a\", \"a\"), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_4c376b0ccf37c503c4a44dc5f78132cf() {
        assertEval("{ x<-1:2; dim(x)<-c(1:2); dimnames(x)<-list(\"z\", c(\"a\", \"b\")); x[\"z\", 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_eafc095b1d9c3d14a07a0158b746e3b8() {
        assertEval("{ x<-1:2; dim(x)<-c(1:2); dimnames(x)<-list(\"z\", c(\"a\", \"b\")); x[c(\"z\", \"z\"), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_736aa1170a184e51af6878c1e0fdf353() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); x[1, 2] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_80e3d4ff9a7a919485b1b1696a77db9a() {
        assertEvalError("{ x<-1:8; x[1, 2] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_7a671d6881d9d33742413c97ae2a3660() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[1,3] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_64a62a50d06389f6a1a7d3c61caa35c3() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2, 4); x[c(-1, -2),c(5)] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_112ecfdbb435356eb1b836e9064960f2() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,4);  x[1, c(TRUE, FALSE, TRUE, TRUE, TRUE)] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_02ed4a00e7024d8a0dece052620f9251() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[\"d\", 1] }");
    }

    @Test
    public void TestSimpleMatrix_testAccessScalarIndex_901876df0956efc91604b2151ff8de01() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); dimnames(x)<-list(c(\"a\", \"b\"), c(\"d\", \"e\")); x[as.character(NA), 1] }");
    }

    @Test
    public void TestSimpleMatrix_testMatrixAccessWithScalarAndVector_f7e6d694531cccdce652b564fa32a0d5() {
        assertEval("{ i <- c(1L,3L,5L) ; m <- 1:10 ; dim(m) <- c(2,5) ; m[2,i] }");
    }

    @Test
    public void TestSimpleMatrix_testMatrixAccessWithScalarAndVector_5296fa0b525cb2b63cc0e89f623ed76a() {
        assertEval("{ i <- c(1L,3L,5L) ; m <- c(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\") ; dim(m) <- c(2,5) ; m[2,i] }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateDim_e8436aea143b529d58eaf56176937b43() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2.1,3.9); dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateDim_980308d6cdf53f1640b22a8a93311cf9() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2L,3L); dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateDim_2e069f5ecd8acf85a869c1fc37aa3234() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2L,3L); dim(x) <- NULL; dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateDim_e8b11f590e8d94f01d81c721517e6853() {
        assertEval("{ x<-c(1,2,3,4,5,6); dim(x) <- c(2L,3L); dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateDim_487c47c990819a887cf65b58c290bbb1() {
        assertEval("{ x<-c(1,2,3,4,5,6); dim(x) <- c(2L,3L); dim(x) <- NULL; dim(x) }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_bd3cb031dca50b8f2f57d0c4933ce350() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L,6L); dim(x) <- c(2,3); x[1,2] <- 100L; x[1,2] }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_4b8ac2caeaba39b5b1ac28be9587e4ed() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L,6L,7L,8L,9L,10L); dim(x) <- c(2,5); x[2,4] <- 100L; x[2,4] }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_d9165729b589596d2e2a7dbb2f0d60f5() {
        assertEval("{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[, c(1)] }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_ba4a52b20ed7345ef31cf3e659a87dbc() {
        assertEval("{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(1), ] }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_8c47572d02e22a37037f2be7f2be3d98() {
        assertEval("{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[, c(1,2)] }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_ec328e4169bc19f5fa0381aed577f9a4() {
        assertEval("{ x<-c(1.1, 2.2, 3.3, 4.4); dim(x)<-c(2,2); x[c(1,2), ] }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_31ebd8e266314975219ed84586986401() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[,][1]<-42; x }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_4967f8b2cc2f04f762ff05e4f74b9bc0() {
        assertEval("{  x<-c(1,2,3,4); dim(x)<-c(2,2); x[3][1]<-42; x }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_b527449d0f1c203e299497a4644b6af8() {
        assertEval("{  x<-c(1,2,3,4); dim(x)<-c(2,2); x[3][1][1]<-42; x }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_6c7cbcb2bab50d0736a5bbe09c042585() {
        assertEval("{ x<-c(1L,2L,3L,4L); dim(x)<-c(2,2); f<-function() { x[3][1]<-42; x }; f() }");
    }

    @Test
    public void TestSimpleMatrix_testUpdateScalarIndex_8e4e377c0dcf0307b5bc7a010993e859() {
        assertEval("{ x<-c(1L,2L,3L,4L); dim(x)<-c(2,2); f<-function() { x[3][1]<-42; }; f(); x }");
    }

    @Test
    public void TestSimpleParsing_testIncorrectInput_6666cd76f96956469e7be39d750cc7d9() {
        assertEval("/");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_a0aafd2380a76f7e9301d729381845b6() {
        assertEval("{ 1:3 }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_7d1f7dfd0be44d74a8f958186dda4ba0() {
        assertEval("{ 1.1:3.1 }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_64d3f25fe0104d28e16a65f7d75666ee() {
        assertEval("{ 3:1 }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_596f23a8951f029774b4cbcc718adb2c() {
        assertEval("{ 3.1:1 }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_4a3fda323bd5d386396bd5cde0af5bbc() {
        assertEval("{ 1:NA }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_12c6e3de14f03107388664219b87d221() {
        assertEval("{ NA:1 }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_5f30aa49a0dad803b9ef79c3852ccda7() {
        assertEval("{ NA:NA }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_b9324a4b0cb6cce5fbe2323872e18705() {
        assertEvalWarning("{ (1:3):3 }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_21f0e4d9f66324fb97f8a0e9ca64bb19() {
        assertEvalWarning("{ 1:(1:3) }");
    }

    @Test
    public void TestSimpleSequences_testSequenceConstruction_0bdc2a5212b5125502d20aa9b6d7012e() {
        assertEvalWarning("{ (1:3):(1:3) }");
    }

    @Test
    public void TestSimpleTruffle_test1_6aea9de6256435933f7fdbcf714437f6() {
        assertEval("{ f<-function(i) {i} ; f(1) ; f(2) }");
    }

    @Test
    public void TestSimpleTruffle_test1_9c209cc63f0ba403b98a12e725a0840e() {
        assertEval("{ f<-function() { 1:5 } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_test1_1a9c20179d7fdabeca2834e247e89657() {
        assertEval("{ f<-function() { length(c(1,2)) } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_test1_14a85cdf35cdf823f3ef3432e5c514a5() {
        assertEval("{ f<-function() { if (1) TRUE } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_test1_6c330d6ee67a88e8ab3d19a27f7b25c9() {
        assertEval("{ f<-function() { if (if (1) {TRUE} else {FALSE} ) 1 } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_test1_3047b379721539858289b2d629cd80d9() {
        assertEval("{ f<-function() { logical(0) } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_test1_75c1d4c5363750b1faffef11b163de15() {
        assertEval("{ f<-function(i) { if (TRUE) { i } } ; f(2) ; f(1) }");
    }

    @Test
    public void TestSimpleTruffle_test1_577fdaa937e0a2e6b789d4dffdf817a3() {
        assertEval("{ f<-function(i) { i ; if (FALSE) { 1 } else { i } } ; f(2) ; f(1) }");
    }

    @Test
    public void TestSimpleTruffle_test1_695c9df18decfa589f194a19fadf5d2d() {
        assertEval("{ f<-function(i) { i ; if (TRUE) { 1 } else { i } } ; f(2) ; f(1) }");
    }

    @Test
    public void TestSimpleTruffle_test1_e1d337c8b8c2cc8b40b2751269edfeb3() {
        assertEval("{ f<-function(i) { if(i==1) { 1 } else { i } } ; f(2) ; f(2) }");
    }

    @Test
    public void TestSimpleTruffle_test1_5d52ffc510a53dc67eacd6159998f57c() {
        assertEval("{ f<-function(i) { if(i==1) { 1 } else { i } } ; f(2) ; f(1) }");
    }

    @Test
    public void TestSimpleTruffle_test1Ignore_3ec182256a363ba8d70350f6d949593b() {
        assertEvalNoOutput("{ f<-function(i) { if(i==1) { i } } ; f(1) ; f(2) }");
    }

    @Test
    public void TestSimpleTruffle_test1Ignore_6b932d60711336223d0b7667e5e39f6d() {
        assertEvalNoOutput("{ f<-function() { if (!1) TRUE } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_test1Ignore_97edc61479ed325f8e463f75a53a34d4() {
        assertEvalNoOutput("{ f<-function() { if (!TRUE) 1 } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_test1Ignore_71c46963de35ffad054f0a585f749a4f() {
        assertEvalNoOutput("{ f<-function(i) { if (FALSE) { i } } ; f(2) ; f(1) }");
    }

    @Test
    public void TestSimpleTruffle_testLoop_58312576d302ffbb45436397fb9f8815() {
        assertEval("{ f<-function() { x<-210 ; repeat { x <- x + 1 ; break } ; x } ; f() ; f() }");
    }

    @Test
    public void TestSimpleTruffle_testLoop_e4803a48856bde5db424c421caa03d91() {
        assertEval("{ f<-function() { x<-1 ; repeat { x <- x + 1 ; if (x > 11) { break } } ; x } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_testLoop_3fec88aa0477aeda520abced9da93648() {
        assertEval("{ f<-function() { x<-1 ; repeat { x <- x + 1 ; if (x <= 11) { next } else { break } ; x <- 1024 } ; x } ; f() ; f() }");
    }

    @Test
    public void TestSimpleTruffle_testLoop_f02918e1bdf7b940e14719d4952bdeea() {
        assertEval("{ f<-function() { x<-1 ; while(TRUE) { x <- x + 1 ; if (x > 11) { break } } ; x } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_testLoop_d7967d49723aa632df85db9a5820b2cc() {
        assertEval("{ f<-function() { x<-1 ; while(x <= 10) { x<-x+1 } ; x } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_testLoop_d2fd7b9921214141f5bf38d20a6074b4() {
        assertEval("{ f<-function() { x<-1 ; for(i in 1:10) { x<-x+1 } ; x } ; f(); f() }");
    }

    @Test
    public void TestSimpleTruffle_testWarningsAndErrors_3bcccdb6b89f944c76928e4d11276b6e() {
        assertEvalErrorWarning("{ 1i > (c(1, 2) < c(1, 2, 3)) }");
    }

    @Test
    public void TestSimpleTruffle_testWarningsAndErrors_f2097159b99fe87d699d53500008dc0c() {
        assertEvalErrorWarning("{ 1i > ((c(1, 2) < c(1, 2, 3)) ==  (c(1, 2) < c(1, 3, 4))) }");
    }

    @Test
    public void TestSimpleTruffle_testWarningsAndErrors_9eb71b5a95179d81a82d0dda30c88935() {
        assertEvalWarning("{ (c(1, 2) < c(1, 2, 3)) ==  (c(1, 2) < c(1, 3, 4)) }");
    }

    @Test
    public void TestSimpleValues_testBinaryArithmetic_beaa81d2bea3ff575e89078614aadfbd() {
        assertEval("FALSE^(-3)");
    }

    @Test
    public void TestSimpleValues_testComplex_65fd146574282acbbc892c088995981c() {
        assertEval("{ 1i }");
    }

    @Test
    public void TestSimpleValues_testDefaultVariables_71c55934e32576774664d7bc1d063085() {
        assertEval("{ .Platform$endian }");
    }

    @Test
    public void TestSimpleValues_testFunctionLookup_e8b4104d29ef2cf2fa36109e2b8627fc() {
        assertEval("{ f<-1; f() }");
    }

    @Test
    public void TestSimpleValues_testFunctionLookup_0d1be9fb2e00cf791b7253965e44463c() {
        assertEval("{ abs }");
    }

    @Test
    public void TestSimpleValues_testSpecial_14f67f9b7533cb499c464ac21d9aba7c() {
        assertEval("{ NULL }");
    }

    @Test
    public void TestSimpleValues_testSpecial_656dd8da1a29a8f3fa13b9cab79deafa() {
        assertEval("{ NA }");
    }

    @Test
    public void TestSimpleValues_testSpecial_042432b01c6b0643a6e3dfce4ec8b2e8() {
        assertEval("{ Inf }");
    }

    @Test
    public void TestSimpleValues_testSpecial_bc23ab8b0106790ae54939bd98dceed3() {
        assertEval("{ NaN }");
    }

    @Test
    public void TestSimpleValues_testStrings_0cb9c0de703a15078809ec0dde49d18a() {
        assertEval("{ \"hello\" }");
    }

    @Test
    public void TestSimpleValues_testTranspose_626830f106140278db741cbf7d867b2e() {
        assertEval("x <- c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L); dim(x) <- c(2L,5L); x <- t(x); dim(x) <- NULL; x");
    }

    @Test
    public void TestSimpleValues_testTranspose_128d8ff03ef139c1383b2606113feae5() {
        assertEval("x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); dim(x) <- c(2L,5L); x <- t(x); dim(x) <- NULL; x");
    }

    @Test
    public void TestSimpleValues_testUnlist_7910f1cb1969ab32f4c20dc7220459c3() {
        assertEval("x <- list(1, 2, 3); unlist(x);");
    }

    @Test
    public void TestSimpleValues_testUnlist_1a84ff13e0d90d02a6911bebf5de33e5() {
        assertEval("x <- list(1, TRUE, 3); unlist(x);");
    }

    @Test
    public void TestSimpleValues_testUnlist_6c58fdbd0cb3b0b023373dc2bdc09904() {
        assertEval("x <- list(1, 2, NA); unlist(x);");
    }

    @Test
    public void TestSimpleValues_testUnlist_7da334f70d826adc51596947eb731890() {
        assertEval("x <- list(1L, 2L, 3L); unlist(x);");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_5f6081387a97951664aa429ac452e60e() {
        assertEval("x <- NULL; x[c(\"A\", \"A\", \"B\")] <- 1; names(x)");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_67fc3d00f106a64c9a45ad01471b862d() {
        assertEval("y <- NULL; y[c(\"A\", \"A\", \"B\")] <- 1; y <- NULL; names(y)");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_3948ba3c355ea9a2c8f8d9600ebfb821() {
        assertEval("x <- NULL; names(x)");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_b25c5965153c0024deca1da999c633ef() {
        assertEval("x <- NULL; x[c(\"A\", \"A\", \"B\")] <- \"x\"; names(x[\"A\"])");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_c37b003dc8f16f1f7174a12876d3355c() {
        assertEval("x <- NULL; x[c(\"A\", \"A\", \"B\")] <- \"x\"; as.vector(x[\"A\"])");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_9cf80bbd67cd7ea0d0cf7e204b0c8e9c() {
        assertEval("x <- NULL; x[c(\"A\", \"B\", \"C\")] <- c(\"x\", \"y\", \"z\"); as.vector(x[\"B\"])");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_c4a83ac0c23d99f51ca7d805b3858b94() {
        assertEval("x <- NULL; x[c(\"A\", \"B\", \"C\")] <- c(\"x\", \"y\", \"z\"); as.vector(x[\"C\"])");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_2310c9bf86ab7260cb19f0bf091bc4cb() {
        assertEval("x <- NULL; codes <- c(\"A\", \"C\", \"G\"); complements <- c(\"T\", \"G\", \"C\"); x[codes] <- complements; as.vector(x);");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_d7f8eefef5cff7b032219f2be8488e9d() {
        assertEval("x <- NULL; codes <- c(\"A\", \"C\", \"G\"); complements <- c(\"T\", \"G\", \"C\"); x[codes] <- complements; names(x);");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_f1417e2cdd7b64b082f9e55141370e04() {
        assertEval("x <- NULL; codes <- c(\"A\", \"C\", \"G\"); complements <- c(\"T\", \"G\", \"C\"); x[codes] <- complements; x[tolower(codes)] <- complements; as.vector(x);");
    }

    @Test
    public void TestSimpleValues_testVectorStringAccess_5ef9b34206654d1379338a048a887bac() {
        assertEval("x <- NULL; codes <- c(\"A\", \"C\", \"G\"); complements <- c(\"T\", \"G\", \"C\"); x[codes] <- complements; x[tolower(codes)] <- complements; names(x);");
    }

    @Test
    public void TestSimpleValues_testVectorUpdate_16fea05cc3e31435537b282fa267f339() {
        assertEval("x <- c(1, 2, 3); y <- x; x[1] <- 100; y;");
    }

    @Test
    public void TestSimpleValues_testVectorUpdate_4b9b71e942c9f564851d13050899c9fc() {
        assertEval("x <- 1:10; for (i in 1:2) { x[[1]] <- x[[1]]; x <- c(1, 2, 3) }; x");
    }

    @Test
    public void TestSimpleValues_testVectorUpdate_fe1341f09775a2455f14c247cbe19c77() {
        assertEval("v <- double(5) ; v[[3]] <- c(1) ; v");
    }

    @Test
    public void TestSimpleValues_testVectorUpdate_1efe5b039f98e22ce9bc3c7d633a13b4() {
        assertEval("v <- double(5) ; v[[3]] <- matrix(c(1)) ; v");
    }

    @Test
    public void TestSimpleVectors_testAccessSequence_b23232af20650b7393e2c15e3ca3b55c() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L); x[1:4][1:3][1:2][1:1] }");
    }

    @Test
    public void TestSimpleVectors_testAccessSequence_0ece2dd5789d068dcec4ff52cad23b72() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L); x[2:5][2:4][2:3][2:2] }");
    }

    @Test
    public void TestSimpleVectors_testAccessSequence_27cfcb44c738956a6c44a21bd39cf11b() {
        assertEval("{ x<-c(1L,2L,3L,4L,5L); x[1:5][2:5][2:4][2:2] }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_3d4a76fec7a23b7ff8340e0340c2e2bd() {
        assertEvalError("{ x<-c(1,2,3,4); x[[1+1i]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_c5f49b4eae0bcbd5f26fa10250903111() {
        assertEvalError("{ x<-c(1,2,3,4); x[[1+1i]]<-c(1) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_116bc6c97888dd6cdcce82454df4afd7() {
        assertEvalError("{ x<-c(1,2,3,4); x[[1+1i]]<-c(1,2) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_8c381d82f56994f32ee69603b383ee1a() {
        assertEvalError("{ x<-c(1,2,3,4); x[[1+1i]]<-c(1,2,3) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_d0f7d3edc331ccc8abc4d45088abef7b() {
        assertEvalError("{ x<-c(1,2,3,4); x[1+1i]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_39bc3029b9c503a6fd96085d1b37eca7() {
        assertEvalError("{ x<-c(1,2,3,4); x[1+1i]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_7647bd3b3d337c0002821f3cf1da3aa3() {
        assertEvalError("{ x<-c(1,2,3,4); x[1+1i]<-c(1) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_db0e0410e78c3e7b9ab69e2dad484845() {
        assertEvalError("{ x<-c(1,2,3,4); x[1+1i]<-c(1,2) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_eb3fc341164793178876282a47027609() {
        assertEvalError("{ x<-c(1,2,3,4); x[1+1i]<-c(1,2,3) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_07d9c32173a18ab35324fa68859484db() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_1d6beddcd2ffd5a190aa0ce657098c90() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_bc55c375f0b6cd015e4f04b63e384ff6() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_18b832d8d859441034bd24f9ce629b94() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_708e4de14faa63ebd9b07800e95f5fed() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_f142c76654eb3c3c8ed6a77b31f4fa04() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_6d7678ac353d3842368eb9da8e1940c2() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_6e542fed54f4bb8212c1b12a7416e3da() {
        assertEvalError("{ x<-list(1,2,3,4); x[[1+1i]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_736a14e9b3876d23852221cf2f6fd1fa() {
        assertEvalError("{ x<-list(1,2,3,4); x[[1+1i]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_5857ee3d94208819ee56416c253cb4f8() {
        assertEvalError("{ x<-list(1,2,3,4); x[[1+1i]]<-c(1) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_cab3a5462c1f4a646d9b05430b647243() {
        assertEvalError("{ x<-list(1,2,3,4); x[[1+1i]]<-c(1,2) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_fece54bdd5b7adf09af707281e962312() {
        assertEvalError("{ x<-list(1,2,3,4); x[[1+1i]]<-c(1,2,3) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_fc831fb8f6046690f77aca8715c2e8a7() {
        assertEvalError("{ x<-list(1,2,3,4); x[1+1i]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_e24817ee41f5719318391002ff9d5368() {
        assertEvalError("{ x<-list(1,2,3,4); x[1+1i]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_cc035d3220b222138fb5b1c0e4e4db21() {
        assertEvalError("{ x<-list(1,2,3,4); x[1+1i]<-c(1) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_23836013fd6cc50e7d752204c1a53d91() {
        assertEvalError("{ x<-list(1,2,3,4); x[1+1i]<-c(1,2) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_99255e686e151be77725a86bf9bebe27() {
        assertEvalError("{ x<-list(1,2,3,4); x[1+1i]<-c(1,2,3) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_83b47829ea13c5371abf13b44b86e706() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_6ea65f29dafe6f59c2fa33154520ecae() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_8a2c948579b6d626c4f66b38e8344fad() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_c2f32e5c2361eab45aa5c20f3bad48c5() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_3778652c6b249df7e5af933d33ffdd5d() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_1ef5a3e53276329564aea8f19ffbef10() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_a9c3bcd09ea404fc12d16b441254b3d5() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndex_132fc955aa21b60500d415ee91e8b66b() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1+1i, 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndexIgnored_ee8c1f9af263214be7bfa6591824f335() {
        assertEvalError("{ x<-c(1,2,3,4); x[[1+1i]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testComplexIndexIgnored_593fc8e31f28867ca49ec0bbe21bbc5f() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1+1i, 1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testEmptyUpdate_92f308555b0238f4ae92a11deaa25a29() {
        assertEval("{ a <- list(); a$a = 6; a; }");
    }

    @Test
    public void TestSimpleVectors_testEmptyUpdate_13ac19cb49e0756177e01a71af7bf72f() {
        assertEval("{ a <- list(); a[['b']] = 6; a; }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_d9784857aabbc17e8cb0685a883e7e4d() {
        assertEval("{ a <- list(a = 1, b = 2); a$a; }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_a6caada15cce0052850c3e16ac54a160() {
        assertEval("{ a <- list(a = 1, b = 2); a$b; }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_dcfb33dfab6ee6defa00678a6ff24c02() {
        assertEval("{ a <- list(a = 1, b = 2); a$c; }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_9909c36bdb9435c94745a47b0cb316fa() {
        assertEval("{ a <- list(a = 1, b = 2); a$a <- 67; a; }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_b8cd0394c85574bf293c492bc0d370fc() {
        assertEval("{ a <- list(a = 1, b = 2); a$b <- 67; a; }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_6f69ae8c4902d61b3baa35e8fe2bf13b() {
        assertEval("{ a <- list(a = 1, b = 2); a$c <- 67; a; }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_8a94c753a099dfe3b5b5e2a65f3ffd69() {
        assertEval("{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$aa }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_3c609a8b3cd6dbb3e719975ef0a5a888() {
        assertEval("{ x <- list(1, 2) ; x$b }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_466525eabb17d6e7a344f57792ae4ceb() {
        assertEval("{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; f(x) }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_9bb19d29b9ddbc7882974c31817e5826() {
        assertEval("{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; x <- list(c=2,b=10) ; f(x) }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_1370c1274b369491f7dba97204c3b139() {
        assertEval("{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$x }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_49275e7a0dd60b3f1a9ab26f6a0e3cbc() {
        assertEval("{ v <- list(xb=1, b=2, aa=3, aa=4) ; v$a }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_13f39dfa58ec5e47b5715397b61c8c15() {
        assertEval("{ f <- function(v) { v$x } ; f(list(xa=1, xb=2, hello=3)) ; f(list(y=2,x=3)) }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_844d753a53a599ab792b7c02eccfc524() {
        assertEval("{ f <- function(v) { v$x } ; f(list(xa=1, xb=2, hello=3)) ; l <- list(y=2,x=3) ; f(l) ; l[[2]] <- 4 ; f(l) }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_c4d56667f58ee4170ef99e31cc81ca13() {
        assertEval("{ x<-data.frame(a=list(1,2)); y<-list(bb=x, c=NULL); y$b$a.1 }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_b636b36007783ed1d56ac9a7b512d721() {
        assertEval("{ x<-data.frame(a=list(1,2)); y<-list(bb=x, c=NULL); y$b$a.2 }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_a81bb4b69ece4ce2f037203158ffb0eb() {
        assertEval("{ x<-list(list(a=7), NULL); x[[1]]$a<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_62c26169224b454b2b2ec33711c551e7() {
        assertEval("{ x<-list(a=list(b=7)); x$a$b<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_da61b86eadc3490615eccc8f5a79e0c4() {
        assertEval("{ x<-list(a=list(b=7)); x[[\"a\"]]$b<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_187f49c0f59c0658dd2b0298c277c0c2() {
        assertEval("{ x<-list(a=list(b=7)); x$a[[\"b\"]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_3d97f0dea241faa7a09b8359a7d8a500() {
        assertEval("{ e <- list(a=2) ; e$a }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_4f80d2663a65fd52751e9db100786199() {
        assertEval("{ e <- list(a=2) ; e$\"a\" }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_5323930bd315d7a9d640f80f09658876() {
        assertEvalError("{ x <- list(a=1, b=2) ; f <- function(x) { x$b } ; f(x) ; f(1:3) }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_1bd3fbb975d1db4afe5805404942c275() {
        assertEvalError("{ a <- c(a=1,b=2); a$a; }");
    }

    @Test
    public void TestSimpleVectors_testFieldAccess_904541d16c10de1380f167ea3efaab85() {
        assertEvalWarning("{ a <- c(1,2); a$a = 3; a; }");
    }

    @Test
    public void TestSimpleVectors_testGenericUpdate_c628a46d95cf59bdaa3de23cb6ced1a4() {
        assertEval("{ a <- TRUE; a[[2]] <- FALSE; a; }");
    }

    @Test
    public void TestSimpleVectors_testIn_a575a95504a8b9280fc337e0f735d634() {
        assertEval("{ 1:3 %in% 1:10 }");
    }

    @Test
    public void TestSimpleVectors_testIn_077d02af633cc7d5756753065e754d6d() {
        assertEval("{ 1 %in% 1:10 }");
    }

    @Test
    public void TestSimpleVectors_testIn_b43c35d3772d1b2e31423b82d6bf6e4a() {
        assertEval("{ c(\"1L\",\"hello\") %in% 1:10 }");
    }

    @Test
    public void TestSimpleVectors_testIn_67ef0a883a816cec9a48a28785af9373() {
        assertEval("{ (1 + 2i) %in% c(1+10i, 1+4i, 2+2i, 1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testIn_b0b384b8b31a8578c66c54d6ee04f7fa() {
        assertEval("{ as.logical(-1:1) %in% TRUE }");
    }

    @Test
    public void TestSimpleVectors_testIn_81d66358a8fad9bfb170460b17b75f0a() {
        assertEvalError("{ x <- function(){1} ; x %in% TRUE }");
    }

    @Test
    public void TestSimpleVectors_testLengthUpdate_3d08abbfb62473ff04cb81d987d154fe() {
        assertEval("{ k <- c(1,2,3) ; length(k) <- 5 ; k }");
    }

    @Test
    public void TestSimpleVectors_testLengthUpdate_131bae9878b726d906186a1726be20ff() {
        assertEval("{ k <- c(1,2,3,4,5,6,7,8,9) ; length(k) <- 4 ; k }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_cbc4e659bc8dc93a3030d3ae4c6d73f8() {
        assertEval("{ l<-list(1,2L,TRUE) ; l[[2]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_96d469bdfd0291a85e5d3f783e8429b1() {
        assertEval("{ l<-list(1,2L,TRUE) ; l[c(FALSE,FALSE,TRUE)] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_5af03987ea65d7b69c26634a159af3d9() {
        assertEval("{ l<-list(1,2L,TRUE) ; l[FALSE] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_b5b5a722bd1d6524a93ce5399df0f76d() {
        assertEval("{ l<-list(1,2L,TRUE) ; l[-2] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_da17959911ade0de97a32a89b4c80383() {
        assertEval("{ l<-list(1,2L,TRUE) ; l[NA] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_49bca1ef9300fb52319083ea27bcb8b7() {
        assertEval("{ l<-list(1,2,3) ; l[c(1,2)] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_d7d2b20a394ec6d75e5c13568e81e100() {
        assertEval("{ l<-list(1,2,3) ; l[c(2)] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_76681ec4fe36b4775bb4f82a987b495a() {
        assertEval("{ x<-list(1,2L,TRUE,FALSE,5) ; x[2:4] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_665594f5014067898ca0c7a188c5b6ea() {
        assertEval("{ x<-list(1,2L,TRUE,FALSE,5) ; x[4:2] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_3e21060c054b07f532a7185e7aba9220() {
        assertEval("{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(-2,-3)] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_dfb237cb2f4e3c844f1b038b7d650a64() {
        assertEval("{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(-2,-3,-4,0,0,0)] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_42abb55b72f43f2729de9c5a43d9398f() {
        assertEval("{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(2,5,4,3,3,3,0)] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_9b84421c057421cfe3c1fb077b5051fc() {
        assertEval("{ x<-list(1,2L,TRUE,FALSE,5) ; x[c(2L,5L,4L,3L,3L,3L,0L)] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_c838bd31779c5561e124ef5e65c1f324() {
        assertEval("{ m<-list(1,2) ; m[NULL] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_67e903425a325a03ec6df2ed88371941() {
        assertEval("{ f<-function(x, i) { x[i] } ; f(list(1,2,3),3:1) ; f(list(1L,2L,3L,4L,5L),c(0,0,0,0-2)) }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_abbedda69bca73ce055c366d78adaa64() {
        assertEval("{ x<-list(1,2,3,4,5) ; x[c(TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,NA)] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_9ccdc251d03ea549e09a7febf33531d6() {
        assertEval("{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1) ; f(1L) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_1735f3742a12bb4ce51cdd3b2dfd83f7() {
        assertEval("{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1) ; f(TRUE) ; f(1L)  }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_e8af0e4df210e541e1942a6f95547b08() {
        assertEval("{ f<-function(i) { x<-list(1L,2L,3L,4L,5L) ; x[i] } ; f(1) ; f(TRUE) ; f(c(3,2))  }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_87353e70931c518879ba90596f228582() {
        assertEval("{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(1)  ; f(3:4) }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_082588944220a73fd0b7bcf232d59937() {
        assertEval("{ f<-function(i) { x<-list(1,2,3,4,5) ; x[i] } ; f(c(TRUE,FALSE))  ; f(3:4) }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_b8916741c65922be43af18eb013d0b98() {
        assertEval("{ l<-(list(list(1,2),list(3,4))); l[[c(1,2)]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_79318e1bccdf5b463fa0c42b5fa4ecde() {
        assertEval("{ l<-(list(list(1,2),list(3,4))); l[[c(1,-2)]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_7431245306ae936fe705d6a1b9d20da0() {
        assertEval("{ l<-(list(list(1,2),list(3,4))); l[[c(1,-1)]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_afc0def74a7aeecff2f45eacb1cd39ab() {
        assertEval("{ l<-(list(list(1,2),list(3,4))); l[[c(1,TRUE)]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_404b3f1ce68370313607ae5cbba2a612() {
        assertEval("{ l<-(list(list(1,2),c(3,4))); l[[c(2,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_3658c17582c284601a8e88f5f21fe4db() {
        assertEval("{ l <- list(a=1,b=2,c=list(d=3,e=list(f=4))) ; l[[c(3,2)]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_afaab4fa419f9c85c8961fbf3837d893() {
        assertEval("{ l <- list(a=1,b=2,c=list(d=3,e=list(f=4))) ; l[[c(3,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_3099f08c81cb2f1f6a81dac123cf7027() {
        assertEval("{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c(\"c\",\"e\")]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_37ef0e19f732e07940389915d8b28b9b() {
        assertEval("{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c(\"c\",\"e\", \"f\")]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_584deab8c6d8454c71e7bbf9c35e1715() {
        assertEval("{ l <- list(c=list(d=3,e=c(f=4)), b=2, a=3) ; l[[c(\"c\")]] }");
    }

    @Test
    public void TestSimpleVectors_testListAccess_03080fa7bfc88ddc1cb2919ce4931b68() {
        assertEval("{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(1:3,2,2) ; f(1:3,\"X\",2) ; f(list(1,list(2)),c(2,1),4) }");
    }

    @Test
    public void TestSimpleVectors_testListDefinitions_a993d22d8e1140932dcc58196f3b02f8() {
        assertEval("{ list(1:4) }");
    }

    @Test
    public void TestSimpleVectors_testListDefinitions_efa5263d92e550f2d29597d1f2a0a9af() {
        assertEval("{ list(1,list(2,list(3,4))) }");
    }

    @Test
    public void TestSimpleVectors_testListDefinitions_acc4be6455c6572947cc9686743e559c() {
        assertEval("{ list(1,b=list(2,3)) }");
    }

    @Test
    public void TestSimpleVectors_testListDefinitions_73d482d5eae6ecb8e2bc332445d7d6e1() {
        assertEval("{ list(1,b=list(c=2,3)) }");
    }

    @Test
    public void TestSimpleVectors_testListDefinitions_76827bae891c4de50e821493d6bfa7b1() {
        assertEval("{ list(list(c=2)) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_62900648a6ddc74ec71cdffdd941b677() {
        assertEvalError("{ z<-1:4; z[list()]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_3c73f537980be0ad1aff4671449bf0ce() {
        assertEvalError("{ z<-1:4; z[list(1)]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_5fd6f1292ddf7ecb2e45e293c60dcb35() {
        assertEvalError("{ z<-1:4; z[list(1,2)]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_bc82eb8661debda6055f355c630f4a3b() {
        assertEvalError("{ z<-1:4; z[list(1,2,3)]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_04eb71b04464e58a6e6194bc118c490f() {
        assertEvalError("{ z<-1:4; z[list()]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_021d3f0a6dc2553e61910554d768d7ce() {
        assertEvalError("{ z<-1:4; z[list(1)]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f7b28479f4d6c6b052715dcc2c952437() {
        assertEvalError("{ z<-1:4; z[list(1,2)]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_b89087d4148d1b0a133bd3e979ed1a15() {
        assertEvalError("{ z<-1:4; z[list(1,2,3)]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_4cc3fb7172d6eeaa9da9ca63f98877c6() {
        assertEvalError("{ z<-1:4; z[list()]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_78fda1f486dc4793e895fecc117ee366() {
        assertEvalError("{ z<-1:4; z[list(1)]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_60b46cd481fe7a50b6d32a8910984e12() {
        assertEvalError("{ z<-1:4; z[list(1,2)]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_71d805380372eaf80cc5c624cd0f48cc() {
        assertEvalError("{ z<-1:4; z[list(1,2,3)]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_cadd985c22720009d73c4f2888608c3b() {
        assertEvalError("{ z<-1:4; z[[list()]]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_84ae4e387e05559c9985148f1b6b59e8() {
        assertEvalError("{ z<-1:4; z[[list(1)]]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_abc93d0d72b8d64275944e04a64082ec() {
        assertEvalError("{ z<-1:4; z[[list(1,2)]]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_b48fee2960eded7f4c4301f8b10f90a0() {
        assertEvalError("{ z<-1:4; z[[list(1,2,3)]]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_d54db43170fb921445c80ea76aa2fb8d() {
        assertEvalError("{ z<-1:4; z[[list()]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_d931b308c6698bad69395ef90819b352() {
        assertEvalError("{ z<-1:4; z[[list(1)]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f6ab26dd7463b89fa4e25f82a1c3192a() {
        assertEvalError("{ z<-1:4; z[[list(1,2)]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_a9a24148db437e505cd7951b68cd3e6d() {
        assertEvalError("{ z<-1:4; z[[list(1,2,3)]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_2856013d57376f52f235d42dbf5472cd() {
        assertEvalError("{ z<-1:4; z[[list(1)]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_33380d6e067ece6c4cfde428eaf27617() {
        assertEvalError("{ z<-1:4; z[[list(1,2)]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_ca976d07fb8869d83d5ff629eb83705d() {
        assertEvalError("{ z<-1:4; z[[list(1,2,3)]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_75a9767a9276c0bd7308496a627858d0() {
        assertEvalError("{ z<-list(1,2,3,4); z[list()]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_9f8bef0c4de4e2b4d005c770ed8ff575() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1)]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_b084a9315c4a485d178a1b6b234c5925() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1,2)]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_5bea88f27650b4d3739d7e3280ea3787() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1,2,3)]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_288170ea9c554d6f62392228dbfb66d2() {
        assertEvalError("{ z<-list(1,2,3,4); z[list()]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_cdb52695336c3ddd04a1592230c1ecff() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1)]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_55d80976c411acaa14e05eab43ab7c6d() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1,2)]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_114975e0c2cb95ca00ce595f65d06b18() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1,2,3)]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_9672c2cd92039341777e92906a37c716() {
        assertEvalError("{ z<-list(1,2,3,4); z[list()]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_ea7ab1f26bc227dc131656349412a512() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1)]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_1b64f1e78919e40fb4862e7d5cbb787b() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1,2)]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_70268df56805a9cce50d64de154372af() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1,2,3)]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_9840576d5623f1f65f25e0408dc4606e() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list()]]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_afc1fb17ccd18e4a0d7723a68ae35f1d() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1)]]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_e7f9a12b97532a4a8504c876c33663e2() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1,2)]]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_1b8f01c8c4f6e00f8eb34b3ac3d4839d() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-42 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_642558e8ce2d56930456300bb4defae8() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list()]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_aeddab98f9743dd8223b126ee07a8f10() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1)]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_feab7717de1ee92b5d29e29220b48f71() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1,2)]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_1c90e53e30bd8adabff955d90ac795c9() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_1c58533e0162cfc4a7d0b8213041c84e() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list()]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f9635083f8a0b70845e7d644ae6ea282() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1)]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_12867b37eeb74d2d3b8aa762d2db2184() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1,2)]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_bdc30dc8329a493fa36375da2ba069f0() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1,2,3)]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_06ea91f2dcc9297a5e9f0899e28844fa() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_717ae5ce656be40b9360d35975183518() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_dc39833e520d1e67f8525c090703e740() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_d6d35c02bf2d9e3769b72fda0f7a2d59() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_656a2c14c95543bd63d0bb687a275f67() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_5375e4b4d49e0b6b10f14ab2f997a4b2() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_16625d65019dfc5bde882918b7f218d4() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_69a4c6fed750ae51a05f5029146a818a() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_0d60d161cc14b344317f40cee89b15fd() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_5a0d5c845686831e327f9457bdccd3a5() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_e066e9cc1508a26ff15f1c6234e4b925() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_9703de6a78dbb2901fc5afb503093bd8() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_8efeca0fade3c53be178130cebe3695a() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_e52ea8359c4ab512f0bfac1ee5c21afb() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_5b0d6475d703cabef0b069e254e3c1b6() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_a3d41d98ebf6cd77c41db84e4b3ac36c() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_78a520793fa40c45fbf86a1939ced7e2() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f2148f9cec8b5565463ca78f0ae59005() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_3955adab9e694f8faf61db7ab321be9d() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_d252d7a077ce045da325a5124705738d() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f2de9bcdf61358da78de57b24b845850() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_c672485831450faa2e3f2f9c3808bccd() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_1942a5e56ab9f97abd6c4d05d51a1702() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_ce09bb8b399554dccc9f1e1486c01c52() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_dedff0e279d3d0cb9ba10ed582fa3152() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_fd1d80f7670eef4ac171bfb734a53c1b() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_d3e219c57e5a07b2f57556e45477097d() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_b7179a3214e97a1f5f3048d3c4ca041d() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_8d65d2ef25faa6cd217c797139a40601() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_74bc6720206f5c4510a967d5869ace25() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_b6645ec751feafcc2a0ab6c338018d36() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_01ab1779e20386bcac2c2f439552aecb() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f37849cda758f0b210634e33940f4250() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f9765afaeaff0c1f2d7cf22ee80244a7() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_308bc4bf8d49f49148cc26ab9b56294e() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_2aa96a5b66f100367be104c1eed1f53d() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_2c61cae0fce93f129c9d027cb0556f72() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_4e2403844d7481cbf3fab673ea14165b() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_1c372cd74c16d924956b2927d57b8f49() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_bdd91872a3af544ed9ffe0761d7ba87e() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2,3), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_98fec56e4f3b22ff9cf15381e61855c6() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_eec4128492fad3e345b07152a9263c0b() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f3dd5b77fe0463c4b792435514e3f8a1() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_92368132eb8d2aa468c9a26e3b5a860e() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_5be4b07baeef02540de1d78befe86dbb() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_6b8536e0e74eca54af6618e90d2f3ffa() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_6323ef4998bcca5a97a4138231693c72() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_9bad4c65246379e164507b496f375613() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_e26a7e1237100dcedee81b108effc2ec() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_bad7d96c7d63e25aeaa9fab6284afed5() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_65e5557e141c503cbeda6e2560e64a1d() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_cd0e33fe6fc95a3eecd46dd8fbb0915a() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_d6ea0ead3cd93cc1d462acee3bed2f99() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_febbc7cc54b9dd05cf298c934132348e() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_01b8d8931d537d293d55d05f1541d1a2() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_57b48b6e0fe839b99294fc3914dae7a3() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2,3), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_7619ccc2f2374dec7e6f38f163ca4379() {
        assertEvalError("{ z<-1:4; z[list()] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_468995f820f92bdd80a41e84055e8bbd() {
        assertEvalError("{ z<-1:4; z[list(1)] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_e9a2501e8a06a3604ae9f73a25d65002() {
        assertEvalError("{ z<-1:4; z[list(1,2)] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_a4a62179951720e4620361c1574b84a4() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(), 1] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_4af73b0e9ea727493a5eb23b9aa666dc() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1), 1] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_dbea30e80931fe5df84ad6281b20b458() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2), 1] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_cb06bc90af8f04b74d74e73bd46a3b01() {
        assertEvalError("{ z<-1:4; z[[list()]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_38375c7621db26335021b49684553ea4() {
        assertEvalError("{ z<-1:4; z[[list(1)]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_10d56d85f2dff3f66644d5cca5e40ca3() {
        assertEvalError("{ z<-1:4; z[[list(1,2)]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_2a15e1846757a931b553c9e2afa084a0() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(), 1]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_eeea14d73825be5efcfd57af5a3ddd56() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1), 1]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_117b4af98479d816d153fe37d818dc22() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2), 1]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_4120c3bdf8109f8c113a30d29e298e59() {
        assertEvalError("{ z<-list(1,2,3,4); z[list()] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_518f41095d2dbfff54cd44a0f6d1c550() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1)] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_f6197d4249c0fa2b3b0df4ea4d7049aa() {
        assertEvalError("{ z<-list(1,2,3,4); z[list(1,2)] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_852d62386ef7bf8f4201d24fbeeaae97() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(), 1] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_4096a6a10355a1ed51ccb6606a68a209() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1), 1] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_db679cc1376157176eb9355a8b3d15cd() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[list(1,2), 1] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_052cc49770dd619bbf133018ba027ea0() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list()]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_df918b754fb1832830148b59037ad491() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1)]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_5a7eeda0b9fad4b4c28da8f31016622d() {
        assertEvalError("{ z<-list(1,2,3,4); z[[list(1,2)]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_9437dbd41533b3e33625d50b26cde216() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(), 1]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_180591b5c3d9454728d407ac6f7c42ae() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1), 1]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndex_975899f5a12f723c3b87c767c491e6d4() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[list(1,2), 1]] }");
    }

    @Test
    public void TestSimpleVectors_testListIndexIgnore_2223add8510c9d9c0c26ffc36fbf858e() {
        assertEvalError("{ z<-1:4; z[[list()]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_e4cc13b3d845341d0bbe02830ff3054d() {
        assertEval(" { f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(list(a=1,b=c(a=2)),c(TRUE,TRUE),3) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_6cfdfeec466a18abc1ef39eeb59b3890() {
        assertEval("{ x<-c(1,2,3) ; y<-x ; x[2]<-100 ; y }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_69e5cb49024ff3c4e1865e0b5aa09827() {
        assertEval("{ x <-2L ; y <- x; x[1] <- 211L ; y }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_9af53ea24a50f5fc0dfbc17eb78d222f() {
        assertEval("{ l <- matrix(list(1,2)) ; l[3] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_f651c7af8aa82bc05a51faa6b02f67c9() {
        assertEval("{ l <- matrix(list(1,2)) ; l[4] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_049e1c6a5d2b23ebf9ac92a6b90755dd() {
        assertEval("{ l<-list(1,2L,TRUE) ; l[[2]]<-100 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_2ba4f81ad74701a020200cb052072962() {
        assertEval("{ l<-list(1,2L,TRUE) ; l[[5]]<-100 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_0bef32accaeca45783f1d9c6a1934106() {
        assertEval("{ l<-list(1,2L,TRUE) ; l[[3]]<-list(100) ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_c7b1df58bb3dc64812dac2f228d881a2() {
        assertEval("{ v<-1:3 ; v[2] <- list(100) ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_f0f773700693ec2ee5168ecab33d279a() {
        assertEval("{ v<-1:3 ; v[[2]] <- list(100) ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_2e2c96717b4fe7735b6b4ee43ca2740e() {
        assertEval("{ l <- list() ; l[[1]] <-2 ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_f3504202d22ef90762e108fb17310415() {
        assertEval("{ l<-list() ; x <- 1:3 ; l[[1]] <- x  ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_ab04e59f8bf6164452564b4df0d4403f() {
        assertEval("{ l <- list(1,2,3) ; l[2] <- list(100) ; l[2] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_38cd2f6e7d811f6b5f82ceadb42e2b93() {
        assertEval("{ l <- list(1,2,3) ; l[[2]] <- list(100) ; l[2] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_3e76797bb9cc275eb87fdfdfe5d629d7() {
        assertEval("{ m<-list(1,2) ; m[TRUE] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_5fb3879628fe8aa1c87a0ab7e8de00f3() {
        assertEval("{ m<-list(1,2) ; m[[TRUE]] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_acd8b867416da2dc3d62e6858ff40cfe() {
        assertEval("{ m<-list(1,2) ; m[[1]] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_3f35cc1ec75d690a220917b2211ea1ab() {
        assertEval("{ m<-list(1,2) ; m[[-1]] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_e701b971bdf0c357bfaa570a581a18f3() {
        assertEval("{ m<-list(1,2) ; m[[-2]] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_29a43d2d262ecff91ad9d6c0c22e1e5d() {
        assertEval("{ l <- list(a=1,b=2,c=3) ; l[1] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_1dfc27c06619fa9e95132334bd1002f9() {
        assertEval("{ l <- list(a=1,b=2,c=3) ; l[3] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_2da0dfbc881010d9330ad379fa41589f() {
        assertEval("{ l <- list(a=1,b=2,c=3) ; l[5] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_fa8ec30358c8fe3e6aba336797890ea7() {
        assertEval("{ l <- list(a=1,b=2,c=3) ; l[4] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_9d865157f881c2e5e9614fe0dab33070() {
        assertEval("{ l <- list(a=1,b=2,c=3) ; l[[5]] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_417ed4eedca1ebfc460de6952cb8a02e() {
        assertEval("{ l <- list(a=1,b=2,c=3) ; l[[4]] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_ebb58f885bceb97268ae070e7564311e() {
        assertEval("{ l <- list(1,2); l[0] <- NULL; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_ab03f072c05c1f8c291eb9fe76e9ec98() {
        assertEval("{ l <- list(1,2,3) ; l[c(2,3)] <- c(20,30) ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_247ef3f2a76dab27a26505a21c6a9f67() {
        assertEval("{ l <- list(1,2,3) ; l[c(2:3)] <- c(20,30) ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_7807e8ecc86a34567e8dc7385693bb4e() {
        assertEval("{ l <- list(1,2,3) ; l[-1] <- c(20,30) ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_7019c7ad5dc70ebf1468c32821e0d9ab() {
        assertEval("{ l <- list(1,2,3) ; l[-1L] <- c(20,30) ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_d2b9b5ddbcde8a2533abb711ef562ebd() {
        assertEval("{ l <- list(1,2,3) ; l[c(FALSE,TRUE,TRUE)] <- c(20,30) ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_9d469add0487923fb41250af3826b347() {
        assertEval("{ l <- list() ; l[c(TRUE,TRUE)] <-2 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_750d6189787169e361ae35560e0c0327() {
        assertEval("{ x <- 1:3 ; l <- list(1) ; l[[TRUE]] <- x ; l[[1]] } ");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_21abb39393289aed2fd1d7146f916ec7() {
        assertEval("{ x<-list(1,2,3,4,5); x[3:4]<-c(300L,400L); x }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_2fe869eb0999f96cc326202e725636c6() {
        assertEval("{ x<-list(1,2,3,4,5); x[4:3]<-c(300L,400L); x }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_7e7d53d2b674c8db4b1ae742f4336eb8() {
        assertEval("{ x<-list(1,2L,TRUE,TRUE,FALSE); x[c(-2,-3,-3,-100,0)]<-256; x }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_bfcd30bc0ad198478ba4a3aacc3abc50() {
        assertEval("{ x<-list(1,2L,list(3,list(4)),list(5)) ; x[c(4,2,3)]<-list(256L,257L,258L); x }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_2c1efbaa2d407059a4b07561fa137e27() {
        assertEval("{ x<-list(FALSE,NULL,3L,4L,5.5); x[c(TRUE,FALSE)] <- 1000; x }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_b0aeed0aaee6e2741579449b582ac68a() {
        assertEval("{ x<-list(11,10,9) ; x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_bae116ddbf2ce289006665c06b6d928e() {
        assertEval("{ l <- list(1,2,3) ; x <- list(100) ; y <- x; l[1:1] <- x ; l[[1]] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_d72fc9e57496b3b629857408183195d3() {
        assertEval("{ l <- list(1,2,3) ; x <- list(100) ; y <- x; l[[1:1]] <- x ; l[[1]] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_f451130c194bdfe116d208d878ee9122() {
        assertEval("{ v<-list(1,2,3) ; v[c(2,3,NA,7,0)] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_a2fd3c6abfeec863743dd99823e1844e() {
        assertEval("{ v<-list(1,2,3) ; v[c(2,3,4)] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_c28ffe769650b652389b669bd9f0209e() {
        assertEval("{ v<-list(1,2,3) ; v[c(-1,-2,-6)] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_248ed5f84bf3b769ac858dd79c96f55b() {
        assertEval("{ v<-list(1,2,3) ; v[c(TRUE,FALSE,TRUE)] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_0070bdd6671ea7c1b6726a9bb991a567() {
        assertEval("{ v<-list(1,2,3) ; v[c()] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_2d00753aaaa85580ffbc76afc074f267() {
        assertEval("{ v<-list(1,2,3) ; v[integer()] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_564c4e02950c33852d1c458d7dba257f() {
        assertEval("{ v<-list(1,2,3) ; v[double()] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_6ad374dd0da2e0e8c6a15c2a8fe1aeaf() {
        assertEval("{ v<-list(1,2,3) ; v[logical()] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_0a992a6f686043a23612d0cad7b2f4fe() {
        assertEval("{ v<-list(1,2,3) ; v[c(TRUE,FALSE)] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_be55228ae4359663671c14daf453e65b() {
        assertEval("{ v<-list(1,2,3) ; v[c(TRUE,FALSE,FALSE,FALSE,FALSE,TRUE)] <- NULL ; v }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_f6a401e5d08cdb3baadb4b7671f23ea8() {
        assertEval("{ l<-list(a=1,b=2,c=3,d=4); l[c(-1,-3)] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_d5d91db31eb54707478850e4834df484() {
        assertEval("{ l<-list(a=1,b=2,c=3,d=4); l[c(-1,-10)] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_883638aa57a8ea03fd0532282765aa32() {
        assertEval("{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3)] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_b3ea05b8eef0db5165d29658023d0c52() {
        assertEval("{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3,5)] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_cfe6a90c97052d7bce56b5d13c77e2a8() {
        assertEval("{ l<-list(a=1,b=2,c=3,d=4); l[c(2,3,6)] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_68d48f797198406b6fb3cafb886ca21c() {
        assertEval("{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,TRUE,FALSE,TRUE)] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_3fb3e75e72acddde0fa4ab047a784692() {
        assertEval("{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,FALSE)] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_5fe9642b771fea0bfd44e30f7e27a400() {
        assertEval("{ l<-list(a=1,b=2,c=3,d=4); l[c(TRUE,FALSE,FALSE,TRUE,FALSE,NA,TRUE,TRUE)] <- NULL ; l}");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_fbdfc169c90e95ee6079a8e3b4165933() {
        assertEval("{ l <- list(a=1,b=2,c=3) ; l[[\"b\"]] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_f25647486f0eb83581434a82445b053a() {
        assertEval("{ l <- list(1,list(2,c(3))) ; l[[c(2,2)]] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_7f536d0f039ede0f23f33e1e7762c55b() {
        assertEval("{ l <- list(1,list(2,c(3))) ; l[[c(2,2)]] <- 4 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_69d9b9f43fe1e0b54916a9cdbbab8847() {
        assertEval("{ l <- list(1,list(2,list(3))) ; l[[1]] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_5328d841dfeeb211c1f1e83cc0c42d83() {
        assertEval("{ l <- list(1,list(2,list(3))) ; l[[1]] <- 5 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_29f7a4bc377ec163981f54784bba532f() {
        assertEval("{ l<-list(a=1,b=2,list(c=3,d=4,list(e=5:6,f=100))) ; l[[c(3,3,1)]] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_848be28a30435fce4756c5b62bf78e16() {
        assertEval("{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c(\"c\",\"f\",\"zz\")]] <- 100 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_20e266b984045b07d64928d07561bfd4() {
        assertEval("{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c(\"c\",\"f\",\"z\")]] <- 100 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_995668d5dd8a67a9a972f24731eef976() {
        assertEval("{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c(\"c\",\"f\")]] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_d670c6f8714ce5fcacb94ae57562db87() {
        assertEval("{ l<-list(a=1,b=2,c=3) ; l[c(\"a\",\"a\",\"a\",\"c\")] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_a589b01ba7a4063ae97660096b1ee75f() {
        assertEval("{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c(\"c\",\"f\",\"zz\")]] <- 100L ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_7763f920c8c2a47663328e24ec8d6ef3() {
        assertEval("{ l<-list(a=TRUE,b=FALSE,c=list(d=TRUE,e=FALSE,f=c(x=TRUE,y=FALSE,z=TRUE))) ; l[[c(\"c\",\"f\",\"zz\")]] <- TRUE ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_4b1b6ac81cff5bed3cb070cf3523e1ad() {
        assertEval("{ l<-list(a=\"a\",b=\"b\",c=list(d=\"cd\",e=\"ce\",f=c(x=\"cfx\",y=\"cfy\",z=\"cfz\"))) ; l[[c(\"c\",\"f\",\"zz\")]] <- \"cfzz\" ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_ef789f75ea9b0ed5b35b15360f6e6845() {
        assertEval("{ l<-list(a=1,b=2,c=list(d=1,e=2,f=c(x=1,y=2,z=3))) ; l[[c(\"c\",\"f\",\"zz\")]] <- list(100) ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_065977b548c71b24999b617291e5fddc() {
        assertEval("{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c(\"c\",\"f\")]] <- 100L ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_9db6af8d8cb76682b5c762fb7d11243b() {
        assertEval("{ l<-list(a=1L,b=2L,c=list(d=1L,e=2L,f=c(x=1L,y=2L,z=3L))) ; l[[c(\"c\",\"f\")]] <- list(haha=\"gaga\") ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_29583140ec90135bb63f82ca6ff7f50a() {
        assertEval("{ l<-list() ; x <- 1:3 ; l[[1]] <- x; x[2] <- 100L; l[[1]] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_8b4beca3b47cd90ad3878f989f90c27f() {
        assertEval("{ l <- list(1, list(2)) ;  m <- l ; l[[c(2,1)]] <- 3 ; m[[2]][[1]] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_717a2af5c5e6ba6eff57dde5e202dd47() {
        assertEval("{ l <- list(1, list(2,3,4)) ;  m <- l ; l[[c(2,1)]] <- 3 ; m[[2]][[1]] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_72633999c42a077e4d11682c86a41e05() {
        assertEval("{ x <- c(1L,2L,3L) ; l <- list(1) ; l[[1]] <- x ; x[2] <- 100L ; l[[1]] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_7b00a78326db1d40bf645ed57d2305a6() {
        assertEval("{ l <- list(100) ; f <- function() { l[[1]] <- 2 } ; f() ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_7f36ff7d9774f5db47a11b004f95f31a() {
        assertEval("{ l <- list(100,200,300,400,500) ; f <- function() { l[[3]] <- 2 } ; f() ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_d21089ac73615bdcbe12c669a94c6c45() {
        assertEval("{ f <- function() { l[1:2] <- x ; x[1] <- 211L  ; l[1] } ; l <- 1:3 ; x <- 10L ; f() }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_a509d62c5b1008a9154837389c9af6aa() {
        assertEval("{ x <- list(1,list(2,3),4) ; x[[c(2,3)]] <- 3 ; x }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_e6ded06b4f4788520dc88118b27cfa89() {
        assertEval("{ x <- list(1,list(2,3),4) ; z <- x[[2]] ; x[[c(2,3)]] <- 3 ; z }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_70d9a3d4707057a593a7b7fbf64efb07() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(1,2,3), 2L, NULL) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_fa65794f16acb025e1a3662f876ea6a9() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(1,2,3), 2L, 3) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_ba2b0194283c852fe6eba3a4d4c4124a() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), \"hello\", 2) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_8804523a64abfe471cb05900a0b642d5() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(x=3)),c(\"b\",\"x\"),10) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_a8a63ac6c2a9750cc77a0b24a66636b6() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=c(x=3)),c(\"b\",\"x\"),10) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_d5a16d4b481e67db350fc3344cb401b2() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(c(1,2,b=c(x=3)),c(\"b\"),10) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_036b36ec3bbc27080a33bedad3745355() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(a=list(x=1,y=2),3),4),c(\"b\",\"a\",\"x\"),10) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_d4d23ecf1c341646080e677a3605d193() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(list(a=1,b=2),\"b\",NULL) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_9f9899b299cc13f4545955a7432a28cb() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(list(a=1,b=list(2)),\"b\",double()) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_ce127c26577ca03a4e65e6dda2526e73() {
        assertEval("{ l <- list(a=1,b=2,cd=list(c=3,d=4)) ; x <- list(l,xy=list(x=l,y=l)) ; x[[c(2,2,3,2)]] <- 10 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_304e0c334c8d62c7a75d96c112a98bef() {
        assertEval("{ l <- list(a=1,b=2,cd=list(c=3,d=4)) ; x <- list(l,xy=list(x=l,y=l)) ; x[[c(\"xy\",\"y\",\"cd\",\"d\")]] <- 10 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_c3be18201db91f403f7708060107126a() {
        assertEval("{ l <- matrix(list(1,2)) ; l[[3]] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_0b04b217ba7d7f72bfb22fcad66db620() {
        assertEval("{ l <- matrix(list(1,2)) ; l[[4]] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_ad4f324c267f9fd378c1ebb5db6be131() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(x=3)),character(),10) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_8d60c82c47cee679eaec904ac070b844() {
        assertEvalError("{ l <- list(1,2); l[[0]] }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_f3069de7f4e2a93ed52633d59eb9a0c0() {
        assertEvalError("{ l <- list(list(1,2),2) ; l[[c(1,1,2,3,4,3)]] <- 10 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_e632c1b958f6dfc38b8945d2ac0fefec() {
        assertEvalError("{ l <- list(1,2) ; l[[c(1,1,2,3,4,3)]] <- 10 ; l }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_58816dd55e5cfa866c3d22cb27e753e6() {
        assertEvalError("{ l <- as.list(1:3) ; l[[0]] <- 2 }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_21ae327fc9760aa93f399aa2b8a1a064() {
        assertEvalError("{ x <- as.list(1:3) ; x[[integer()]] <- 3 }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_a65c7eee2c68039154deb31fada0ae4d() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(list(f,f), c(1,1), 3) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_3483bab6aa975bf40077db52d4c99fb9() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), 2L, 1:2) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_46d267d73b5b19292f799c55c5c8b655() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), f, 2) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_5038483431f78dfe82dd044060a16939() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(c(1,2,b=c(x=3)),c(\"b\",\"x\"),10) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_69e9cbe8a47a5eb9ba1011da9572c3fc() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2, list(3)),c(\"b\",\"x\"),10) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_0366c87bfe791402269374ef9e91eda5() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,b=list(3)),c(\"a\",\"x\"),10) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_9a74a47b76d187307b5920f6f5cfa904() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(list(a=1,b=f),c(\"b\",\"x\"),3) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_c8d3f68defd80945f76c00b35a0084c3() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(list(a=1,b=c(a=2)),c(\"b\",\"a\"),1:3) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_3d615bb9b102533bc5d3c80d111a2207() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(list(a=1,b=c(a=2)),1+2i,1:3) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_3dd5886f537002149bc7703a3e52f68f() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(f,TRUE,3) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_d8dc2d36066fedc78a8e52042a31c205() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(c(a=1,b=2),\"b\",as.raw(12)) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdate_2b3c661f87fd977f839d5864781c66d0() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(c(a=1,b=2),c(1+2i,3+4i),as.raw(12)) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdateIgnore_942201d73db7111f1ae9c68deaed4964() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), 2L, NULL) }");
    }

    @Test
    public void TestSimpleVectors_testListUpdateIgnore_b0c34f83e997bfdf47a82b1531934031() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(c(a=1,b=2),\"b\",NULL) }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_159dc4e42d0e70ec782df4eaf5c147f6() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[1,2] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_96a64263f53176fd81256212c3f59f68() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[1,] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_8e4e1f45ab171ee18506015ebfad7055() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,1] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_470d31a477bc58d722149f6df9636298() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(1,c(1,2)) }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_5d4eee20540197cba2587dc184ff8343() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] } ; f(1,1) }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_1a04362748f5618213615f5d3e662ec2() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(1,c(-1,0,-1,-10)) }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_b5e03849227fcc357dc809a521111e19() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; x<-2 ; m[[1,x]] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_161c14887933887986cd6a867d939312() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[[1,2]] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_dddc9a38ee5fd88c062cf63a1692c162() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[1:2,2:3] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_39da798df6610ce77c1d3ec2b90f8492() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[1:2,-1] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_557cdc287421eba8181ab08c798dcc25() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,c(-1,0,0,-1)] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_9529f83d6bcc992c61b29fcb2c2e4179() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,c(1,NA,1,NA)] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_4f1f4879a924745096888234d96426c7() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,c(NA,1,0)] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_66278cd0804d9e330cfac5d2f26c3cc0() {
        assertEval("{ m <- matrix(1:6, nrow=3) ; f <- function(i,j) { m[i,j] } ; f(c(TRUE),c(FALSE,TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_d441f95e86126fc14455080e15b4caa7() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; f <- function(i,j) { m[i,j] } ; f(1,1:3) }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_33c43f2c126872dd7288128b23496109() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[1:2,0:1] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_061aa796abc51ab677aa26edfa505d3e() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[1:2,0:1] ; m[1:2,1:1] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_a7c369d05a1e240ff0d87267d6ecd712() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_5b59b84f9c147a0a912e1f5686e3e6ba() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,-1] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_5a71bcac492a57a25e26b81bbb3ad94b() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[1,,drop=FALSE] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_38b22553c0c24a00f3c4bad9eae849bd() {
        assertEval("{ m <- matrix(1:6, nrow=2) ; m[,1[2],drop=FALSE] }");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_4373d3f5d55838252424c60f13dda0ca() {
        assertEval("{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE,FALSE),c(FALSE,NA), drop=FALSE]}");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_ffc5261d4800d15145553df574ee4dbc() {
        assertEval("{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE),c(FALSE,TRUE), drop=TRUE]}");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_bee953bbf9ed7ccb9274ad6c43b8ad50() {
        assertEval("{ m <- matrix(1:16, nrow=8) ; m[c(TRUE,FALSE,FALSE),c(FALSE,TRUE), drop=TRUE]}");
    }

    @Test
    public void TestSimpleVectors_testMatrixIndex_11e269d5bd5b39a80cbdec0fffb111dd() {
        assertEval("{ m <- matrix(1:4, nrow=2) ; m[[2,1,drop=FALSE]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_560325de4dcc9cbe5871d5282250635b() {
        assertEval("{ x<-NULL; x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_31f74d7bf828e5ad2abc2dfb151f5ded() {
        assertEval("{ x<-NULL; x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_7d443bafdcaede0017b46a9668cae8b9() {
        assertEval("{ x<-NULL; x[3L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_2572360550bcbde36eb5a4c4676bba40() {
        assertEval("{ x<-1.1:3.1; x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_04e188323e6391e15f534953a76157c7() {
        assertEval("{ x<-1.1:3.1; x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_e54c41553738cb8ef9a9e59de67e625c() {
        assertEval("{ x<-1.1:3.1; x[3L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_2f8da7085a857f4a0d35c61ef4f642c0() {
        assertEval("{ x<-3.1:1; x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_81d208fc210f87ff3417873c997156d1() {
        assertEval("{ x<-3.1:1; x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectors_ac44cc6bb4bb06c219c96380f11f10f6() {
        assertEval("{ x<-3.1:1; x[3L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_93ba9dd747c7379e9e2c84ec7231640e() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_044b9e85a74f8578c3a768dca065355e() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8e3f96d4a82935b012bfdb246addabf9() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[3L] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c48e6329ed532b7234c8ab581a577f0e() {
        assertEval("{ x<-c(1,2); x[c(\"a\")] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e3df6e4c26c764d90548afb7cdbcf7b7() {
        assertEval("{ x<-c(1,2); dim(x)<-c(1,2); x[c(\"a\")] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6ff2a31a140c7a0889dc23eeb2d56374() {
        assertEval("{ x<-c(1,2); x[c(\"a\", \"b\")] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_bff8151fb7d577bb95bfb938a2b8373f() {
        assertEval("{ x<-1:2; x[c(TRUE, TRUE)] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e10fbecc1be59e4cd657ede639c7276b() {
        assertEval("{ x<-2; x[NULL] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d7af0282e04e5d12217d962be3adf901() {
        assertEval("{ x<-1; x[] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1e14968a7fffebe47f5d4396f6de4949() {
        assertEval("{ x<-1:2; dim(x)=c(1,2); x[,] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b739daf21732bf5db826f96032d57134() {
        assertEval("{ x<-1:2; dim(x)=c(1,2); x[,1] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1751d9cb480d29a8b87c6f1f44bc5194() {
        assertEval("{ x<-c(a=1, b=2); x[c(\"z\", \"x\")] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_5b3510facf519429db532983c68b755b() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[0,0]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b6d10d849eaa43304b1bb758053cfab9() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[-1,0]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9ba59633f2d06b04c5a0f6ada35c29a8() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[0,-1]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_2fbc15e8c5a8f6128faf1456c09093ab() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[-5,0]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_281f6f5ad2104c73b3d1f549807aaa26() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[0,-5]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_027dfea87b9027c9264e1ef4e5df1177() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[-1] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8d129b13dbd02cec4c9ff2a773f68ea2() {
        assertEval("{ x<-list(1); x[[c(1, 1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_895c174db876e845a32c9b5b395911cf() {
        assertEval("{ x<-list(list(1,42)); x[[c(1, 2)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_194a0110ab2e99fdc8313a47dfea9af1() {
        assertEval("{ x<-list(list(1,list(42))); x[[c(1, 2)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_02f1c2992d279c06774eb0d904d8c6ed() {
        assertEval("{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 2)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_abc5322be544b3fcba9dfd4674f304dd() {
        assertEval("{ x<-list(1); x[[c(TRUE, TRUE)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e035619bcbbd3f9bce8a888843042049() {
        assertEval("{ x<-list(1); x[[NA]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_674a5352d4926d08e2f1a47f65d38ab6() {
        assertEval("{ x<-list(1); x[[c(NA)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_3bf516f6868e5f2180d89713d7b92d82() {
        assertEval("{ x<-list(1); x[[as.integer(NA)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_83252c4bc0173a6fe39524ec3c9ffa23() {
        assertEval("{ x<-list(42,2,3); x[[c(NULL,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_74ade69deb64efb2234d28178ff2ed2c() {
        assertEval("{ x<-list(42,2,3); x[[c(NULL, NULL,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_dd7ef07d8adf80c3e7836f3ff9d81f58() {
        assertEval("{ x<-list(42,2,3); x[[c(NULL, 2,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_abf9db339ae4c33fa0df21e6a303d4e3() {
        assertEval("{ x<-c(a=1, b=2); x[1] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_2a8a12d1a4f78b4aff180eaec1f01555() {
        assertEval("{ x<-c(a=1, b=2); x[[1]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_faf449da955be06ba06f19ef29c01f92() {
        assertEval("{ x<-list(1); x[\"y\"] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ba5840077277f2e7e5bdcba95eabb985() {
        assertEval("{ x<-list(1); x[[\"y\"]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_58c8faa612c00fa5f48f6567d21e52a4() {
        assertEval("{ x<-list(a=42); x[\"b\"] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ccb9c77dcb25926986055394dd2f891d() {
        assertEval("{ x<-list(a=42); x[[\"b\"]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4f60ba9ce036cc41dbd660290a7f9d4d() {
        assertEval("{ x<-list(a=42); x[\"a\"] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_89f8ec5eb3f4840a588ead03b3213ab5() {
        assertEval("{ x<-list(a=42); x[[\"a\"]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ed698d132f7811727d6e0405fc1173a1() {
        assertEval("{ x<-list(a=list(42)); x[[c(\"a\", \"y\")]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_eda4ee811f875757d3664d3a22336477() {
        assertEval("{ x<-list(a=list(b=42)); x[[c(\"a\", \"b\")]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8c99590764a83f983d9fd4af25755b15() {
        assertEval("{ l<-list(1,2,3,4); l[[c(2,1)]]<-7; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8bcbe335d7a1878c5771f33eb774d5d6() {
        assertEval("{ l<-list(1,2,3,4); l[c(2,1)]<-7; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_88a0ba292059d1acf6986685d3cdf6d7() {
        assertEval("{ x<-1; x[0]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_68568fd3ee518dd4c6596a397a2360c5() {
        assertEval("{ x<-1; x[]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_215478542f0b66592dac8d1a21953047() {
        assertEval("{ x<-7; x[NA]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_197b78e693f00688299473daebc73b19() {
        assertEval("{ x<-7; x[NULL]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6374ecc92aca47b6d9c557df6e75d5af() {
        assertEval("{ x<-7; x[0]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4fa8baa005d68aba113f16f8600cc456() {
        assertEval("{ x<-1:4;  x[c(1, 0)]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d7c709fd74b5f6ecbb9dddcce35ca1a7() {
        assertEval("{ x<-1:4;  x[c(0, 1)]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_2e91e5794cc865d99276d98f9ba0eef0() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[NULL]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_5ac2a690b2b91232081e1e0be7270309() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[NA]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_5d2b74ba21d72dd200bb20c841b8cc6f() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[0]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_cc0267fdeb07843c1e62d2ab7e9d75ad() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(1,4)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_87592c81cfaba6f155729635583ec95b() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(1,1,0)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b5b1ba9bc43a6c264c0e86d9d9456a42() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(0,1,1)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9ee2e6aa7d9ed695fc792ec5f013e59d() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(0,0)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8ffe36d4de29230e074c24bd49486086() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(0,0,0)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_77c736a6c4cd4e7364356c486977dcb4() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[-1]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_23de3ea27d3f2f6bc2798a094cae3390() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[-5]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_73c2a56b1d4e148bc167865ae9a5db4c() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(-1, -2)]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_84a5d8fde238008943dedef5bb04a204() {
        assertEval("{ l <- list(1,2,3) ; l[c(1,3)] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8f173e6c9429270bbf6ce80048a9787a() {
        assertEval("{ l <- list(1,2,3) ; l[c(1,3)] <- c(NULL, 42) ; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_cdfe5e94399c2263120560e973463f1e() {
        assertEval("{ l <- list(1,2,3) ; l[c(1,3)] <- c(NULL, NULL) ; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_09ced80f6614e27da58ea713313539f5() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_51c02efcd353b844c578a8267190eafb() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_437e4d7f2837d403512ddc04b07f95bc() {
        assertEval("{ x<-1:4; x[0]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1e07b5f4a5833ead113bb3a97506dd0d() {
        assertEval("{ n<-1; n[7]<-42; n }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ba496589b6e2157d6f327a94259a813d() {
        assertEval("{ n<-1; n[[7]]<-42; n }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c3358f70336e8bedd9884ac14b85155a() {
        assertEval("{ n<-1; n[c(7,8)]<-c(42,43); n }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_66ff3c78e1c0c1bdd02c91a780f1f856() {
        assertEval("{ x<-NULL; x[1]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1e5241694f6bd4c4ed352fa97484a11d() {
        assertEval("{ x<-NULL; x[1]<-42+7i; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_af25ec66ede55ff79eb1cb16be10a388() {
        assertEval("{ x<-NULL; x[7]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_79892af0b66074eae7db278a1944bf0b() {
        assertEval("{ x<-NULL; x[1,1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ae929ae5d06a8c37a041f37d39b0beeb() {
        assertEval("{ x<-c(a=1); x[\"b\"]<-2; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_01b1453beb8f932c92276a81cff16755() {
        assertEval("{ x<-c(a=1); x[c(\"a\",\"b\")]<-c(7,42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f05039b2bfc8b504f6930aeba9c35c18() {
        assertEval("{ x<-c(a=1); x[c(\"a\",\"b\",\"b\")]<-c(7,42,100); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_17b647743be7e4e02cc7a515c2441ac7() {
        assertEval("{ x<-NULL; x[c(\"a\", \"b\")]<-42L; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_75fa7156e5a5c7e311d917a928bfc204() {
        assertEval("{ x<-c(1,2); dim(x)<-2; attr(x, \"foo\")<-\"foo\"; x[\"a\"]<-42; attributes(x) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f46c03ce3faf0d1cd2c7b9fbcfe77972() {
        assertEval("{ x<-c(1,2); dim(x)<-2; attr(x, \"foo\")<-\"foo\"; x[1]<-42; attributes(x) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_72cb8c41c1f91cf5cc5e3399ce4a2bda() {
        assertEval("{ x <- NULL; x[c(\"a\", as.character(NA))] <- 7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b7089a4d72fdff3453ebf281883962ef() {
        assertEval("{ x <- NULL; x[c(\"a\", as.character(NA), as.character(NA))] <- 7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ab4d2db7b9105ec951a2dd9302f737cc() {
        assertEval("{ b<-3:5; dim(b) <- c(1,3) ; b[] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_928a7fb171cb379cdf5c1db998f4a841() {
        assertEval("{ b<-3:5; dim(b) <- c(1,3) ; b[c(FALSE, FALSE, FALSE)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f1490cc8d0fd15fdbd26c85b3a0847d4() {
        assertEval("{ b<-3:5; dim(b) <- c(1,3) ; b[0] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_5c55e6278eb67cd52fcbebe24a7c28cc() {
        assertEval("{ l<-list(1,2,3,4); l[1]<-NULL; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6e5e00b5f895b5c856d1db0dbb02fd1d() {
        assertEval("{ l<-list(1,2,3,4); l[4]<-NULL; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9d404382f5c38b3e268a152ee71f03e8() {
        assertEval("{ l<-list(1,2,3,4); l[5]<-NULL; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f7109f17d6d2380070cb094490a01206() {
        assertEval("{ l<-list(1,2,3,4); l[7]<-NULL; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_999267c3cc2ced88aab05561c153f358() {
        assertEval("{ l<-list(1); l[1]<-NULL; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_90db04b7eaf5dac15c1af0e5dcf2241f() {
        assertEval("{ x<-list(list(1,list(42))); x[[c(1, 2)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ba5c0a816efdcb0ebfb07371ae87873e() {
        assertEval("{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 2)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d13b161a7c39a96099ab95a178aa030d() {
        assertEval("{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 7)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_2c24533ee8c4dc58f8d4c115a87f8594() {
        assertEval("{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, 2, 2, 1)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f83813a00871826e6340b24a97e46f56() {
        assertEval("{ x<-list(1, list(42, 1)); x[[c(-1, -2)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_654cff711af9f940bc8b3349aafc1866() {
        assertEval("{ x<-list(1, list(42)); x[[c(-1, 1)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6dee791876ffc675e915a26e1d4a5895() {
        assertEval("{ x<-list(1, list(42)); x[[c(2, 5)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_12b6b8631f2d98575baab0c016e42323() {
        assertEval("{ x<-list(1, list(42)); x[c(2, 5)]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_2467c2da125cd598c66cfcdd43a52def() {
        assertEval("{ x<-list(1, list(42)); dim(x)<-c(1,2); x[[c(2, 5)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f8eeb432057857da02737da734b4eee0() {
        assertEval("{ x<-list(1, list(42)); dim(x)<-c(1,2); x[c(2, 5)]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c84608271bf18ed6403361a730ddaaed() {
        assertEval("{ y<-list(42,7); dim(y)<-c(1:2); attr(y, \"foo\")<-\"foo\"; x<-list(1, y); dim(x)<-c(1,2); x[[c(2, 1)]]<-7; x[2] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1ab2fc7ae1c1ce3637c7d64994fa6b38() {
        assertEval("{ l<-list(1,2,3,4); l[c(1,3)]<-list(NULL); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_29bace176839c7b8128eba298c105af2() {
        assertEval("{ x<-list(1, list(42)); x[[c(2, 1)]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d4a35c7149f0abdba9f06e9e1ff8ecaa() {
        assertEval("{ x<-list(1, list(42)); x[[c(2, 5)]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_950f207a8c6eb4f4bb6aa6d80db0d99e() {
        assertEval("{ x<-list(1, list(42)); x[[c(-1, 1)]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ab29b7072a95630f7dd0ba6f2e47d80c() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,7)] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b62c6c7cc5100030efeadf49c991b585() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,8)] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4eed5e15c0cd1f02407d79681aa5dad2() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,7)] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1ed930df0955322c7a50aa7123397d30() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,8)] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_a1b1dbb99042ce4a6c2e5abfbcca94da() {
        assertEval("{ m <- matrix(list(1,2,3,4,5,6), nrow=3) ; m[c(2,3,6,8,9)] <- NULL ; m }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_0a0c66f7f493e765a508f1481cab7c1a() {
        assertEval("{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_884003e5a5cbcd8c36fece04d00d9eb9() {
        assertEval("{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[NULL] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_24b0f34219c8db8be64cc7e478db5793() {
        assertEval("{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[c(1,2)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_cff260d84aab9ee039a27df2a8f5b0c7() {
        assertEval("{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[c(1)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c3bbc73cfffafc3c7f1739b6e6f887e4() {
        assertEval("{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[c(1)]] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_133c86809f35720b10f52aeab2dcef62() {
        assertEval("{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[0] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_24a56d50cabeb817c4a0b9c887b44909() {
        assertEval("{ l <- list(a=1,b=2) ; attr(l, \"foo\")<-\"foo\"; l[1] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ddad35e4aa1e259b94b54e0511c155f6() {
        assertEval("{ l <- list(a=1,b=2) ; attr(l, \"foo\")<-\"foo\"; l[[1]] <- NULL ; l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_eedb0842754877a220476dda916bfa12() {
        assertEval("{ l <- matrix(list(a=1,b=2,c=3,d=4)) ; attr(l, \"foo\")<-\"foo\"; l[1] <- NULL ; attributes(l) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d4f881825653fb51729fc65d499b45b2() {
        assertEval("{ l <- matrix(list(a=1,b=2,c=3,d=4)) ; attr(l, \"foo\")<-\"foo\"; l[[1]] <- NULL ; attributes(l) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9a9412f98a1c8133fbce96001917936a() {
        assertEval("{ l <- list(1,2) ; names(l)<-c(\"a\", \"b\"); attr(l, \"foo\")<-\"foo\"; l[1] <- NULL ; attributes(l) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4e6189023ce3267eb2085d45a0c4607a() {
        assertEval("{ l <- list(1,2) ;  attr(l, \"foo\")<-\"foo\"; names(l)<-c(\"a\", \"b\"); l[1] <- NULL ; attributes(l) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1e3c027fef1c3ffe555f75ae1e091490() {
        assertEval("{ l <- c(1,2) ; names(l)<-c(\"a\", \"b\"); attr(l, \"foo\")<-\"foo\"; l[1] <- 7 ; attributes(l) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f4668962bb161304f9fabc3b9f909aa1() {
        assertEval("{ l <- c(1,2) ;  attr(l, \"foo\")<-\"foo\"; names(l)<-c(\"a\", \"b\"); l[1] <- 7 ; attributes(l) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1e74830104a0415f597dc77fb35eefc8() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(1, NA), 2]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_80bbf2457e4503a7e67cdc09e1c24f4c() {
        assertEval("{ x<-1:4; x[c(1, NA)]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_0ba7832d1151c1f13a885edef388f0c5() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(1, NA)]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_dfd6482632647b3dd9427a1560bf0d3a() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2);  x[NA, NA]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8696a766063b6ab8173a6e7efa9e3e5d() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(NA, NA),1]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6195cd6ac53f9f62c9cde2bcbca0cdce() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); x[c(NA, 1),1]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9dd9f68bb1727db5941a3f4cc4779480() {
        assertEval("{ x<-c(5,10); names(x)<-c(101, 102); names(x)[1]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f9a60d725b1b60a2a0095a6e55c11473() {
        assertEval("{ x<-c(1, 2); dim(x)<-c(2,1); dimnames(x)<-list(c(\"b\", \"c\"), NULL); x[1,] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b2261b9a127cd2b0dee55ba1a51fa84e() {
        assertEval("{ x<-c(1, 2); dim(x)<-c(2,1); dimnames(x)<-list(c(\"b\", \"c\"), \"d\"); x[1,] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7146d90e749b9663f30ec430b7f38880() {
        assertEval("{ x<-c(1, 2); dim(x)<-c(1,2); dimnames(x)<-list(NULL, c(\"b\", \"c\")); x[,1] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d2a4c6489da922032421ddeadfd06fc0() {
        assertEval("{ x<-c(1, 2); dim(x)<-c(1,2); dimnames(x)<-list(\"a\", c(\"b\", \"c\")); x[,1] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8d2566234121ea82bd9e125642f9b2c0() {
        assertEval("{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c(\"b\", \"c\"), \"a\", NULL); x[1,,] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b1b07b78431620412aeb29e97fad589c() {
        assertEval("{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c(\"b\", \"c\"), NULL, \"a\"); x[1,,] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8f2642f1ea54a41c0a1ed48542a00e69() {
        assertEval("{ x<-c(1, 2); dim(x)<-c(2,1,1); dimnames(x)<-list(c(\"b\", \"c\"), NULL, NULL); x[1,,] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d0dea4eb2381280371b9da9003fad5ae() {
        assertEval("{ x <- c(\"a\", \"b\"); y<-NULL; y[integer()]<-x[integer()]; y }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_730ebd913a8fe72719fac23f4898793e() {
        assertEval("{ x <- c(\"a\", \"b\"); y<-c(\"c\",\"d\"); y[integer()]<-x[integer()]; y}");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c898a1db9a39fc0bb17348530e813559() {
        assertEval("{ x<-c(1,2); y<-list(a=x); names(y[1])<-\"c\"; names(y[1]) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e7b9c328eab1e9a9ce555eb72cda0e73() {
        assertEval("{ x<-c(1,2); y<-list(a=x); names(y[1])<-\"c\"; names(y[[1]]) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7380a1c12d0947c93f6fe17f699f47ef() {
        assertEval("{ x<-c(1,2); y<-list(a=x); names(y[[1]])<-\"c\"; names(y[1]) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_0dbab0e6cc14b37e5e232dc8e2139b9b() {
        assertEval("{ x<-c(1,2); y<-list(a=x); names(y[[1]])<-\"c\"; names(y[[1]]) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7d22c81f66c115bf9e0b5ba86a0e501f() {
        assertEval("{ x<-c(1,2); y<-list(a=x); names(y$a)<-\"c\"; names(y$a) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_155af36dde16ef9207a23abbb5a74bd5() {
        assertEval("{ v <- c(1,2,3,4,5,6,7,8,9); f <- function(k) v[k]; f(2:5); f(-1:-2) }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_23e220f9c43711417c97b6024e96b424() {
        assertEvalError("{ x<-c(1,2); x[[c(\"a\")]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e176ff384390f53eb9bf045388e4f6c0() {
        assertEvalError("{ x<-c(1,2); dim(x)<-c(1,2); x[[c(\"a\")]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_217d7ae9da117b0d370b04e663c7590d() {
        assertEvalError("{ x<-c(1,2); dim(x)<-c(1,2); x[\"a\", \"b\"] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c6629576c5b02cba4a8abff42f3f6eaf() {
        assertEvalError("{ x<-c(1,2); dim(x)<-c(1,2); x[[\"a\", \"b\"]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_018c4131eb9bf538bce5302d577cb481() {
        assertEvalError("{ x<-c(1,2); x[[c(\"a\", \"b\")]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_39efab523ad0459683e78ccca8cb8ace() {
        assertEvalError("{ x<-1:2; x[[c(TRUE, TRUE)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9001b0057551988e2eeaffbd28c61983() {
        assertEvalError("{ x<-1:2; dim(x)<-c(1,2); x[2+2i, 2+2i] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6522a2ad1052e08e9af2845bac99d000() {
        assertEvalError("{ x<-1:2; dim(x)<-c(1,2); u<-2+2i; x[[u, u]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f9d1e352fb09ee37390927e2bbc9df13() {
        assertEvalError("{ x<-2; x[[NULL]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_3b0d0ebcdd207346be89a5baa67c1f1a() {
        assertEvalError("{ x<-1; x[[]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_02f5eed076c04322e6fb328987195cbe() {
        assertEvalError("{ x<-1:2; dim(x)=c(1,2); x[[, ]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6576b9f60b34c296d3d792fdfb47aa07() {
        assertEvalError("{ x<-1:2; dim(x)=c(1,2); x[[, 1]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c1cf11147e5b0f1d3daedeed31fe2b1b() {
        assertEvalError("{ x<-1:2; dim(x)=c(1,2); x[[1, ]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_3c02f94bd25c41e872d4fa4f6bab0a9c() {
        assertEvalError("{ x<-1:2; dim(x)=c(1,1,2); x[[1, , 1]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c54b4533430e6e346c3a7c71efeabfa1() {
        assertEvalError("{ x<-1:2; dim(x)=c(1,1,2); x[[, , 1]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8e00cb54b880e1b152cd846a4833354f() {
        assertEvalError("{ x<-1:2; dim(x)=c(1,1,2); x[[1, , ]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6dcc10478f68a120a80bb3d0346ad506() {
        assertEvalError("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(\"a\", c(\"b\", \"c\")); x[\"z\", \"x\"] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_24793b17b3c0ea9d535fb8354a550aee() {
        assertEvalError("{ x<-c(1,2); dim(x)<-c(1,2); dimnames(x)<-list(\"a\", c(\"b\", \"c\")); x[[\"z\", \"x\"]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_0eccf7799fcc08024179091319dc3238() {
        assertEvalError("{ x<-c(a=1, b=2); x[[c(\"z\", \"x\")]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c3caa8615256f828d614b1b121e8d528() {
        assertEvalError("{ x<-as.integer(1:4); x[[as.integer(NA)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7882cdfb769a9c138fe1b9eb2d740c53() {
        assertEvalError("{ x<-as.integer(1:4); dim(x)<-c(2,2); x[[as.integer(NA)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d5020554c570ba6ec99bc6041684052c() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[0, 0]] <- integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b872d088f6c3cbf6c8ab57c51df9800c() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[-1, 0]] <- integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c26e1ed227232092068a7745823f1f4b() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[0, -1]] <- integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6c6eac65db6c337372945e0f61d1127d() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[-5, 0]] <- integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6aeb45ed82ab80f912d9d13958b2e442() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[0, -5]] <- integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_62dd1389fce7f08bcc30a38040f79087() {
        assertEvalError("{ x<-list(1); x[[c(1, 2)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_29f31365b5fbcc4c9ea1af59336b109d() {
        assertEvalError("{ x<-1; x[[c(1, 1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_beab803554d0c967967ad76b4426c218() {
        assertEvalError("{ x<-list(1); x[[c(1, 1, 1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_18dfb18fd0a6724aabf0a4aa54b57358() {
        assertEvalError("{ x<-list(1); x[[c(1, 2, 0)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_66c905d2a2121fba66923e543973102f() {
        assertEvalError("{ x<-list(1); x[[c(1, 0)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_60724dddd2ff1994aaa8268b606f344b() {
        assertEvalError("{ x<-list(1); x[[c(1, NA)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ca176d2dcd2b1e992f2045f89b99f6ff() {
        assertEvalError("{ x<-list(1); x[[c(TRUE, FALSE)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_23fdd759e65b9a6577800575f0566221() {
        assertEvalError("{ x<-c(1); x[[NA]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_0762365d9263410d2140da754b8bf401() {
        assertEvalError("{ x<-list(1); x[[NULL]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_bfe22aa12f4a2ec609defc4248d94521() {
        assertEvalError("{ x<-list(1); x[[c(NULL)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_32f8ef4eed2c72eabc2817b0e490e3d7() {
        assertEvalError("{ x<-list(1); x[[0]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8f6f05767e7e126cdebc3289dbce59f1() {
        assertEvalError("{ x<-list(1); x[[c(0)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ac581ed6e9d9bf2c203dd4de260ed72e() {
        assertEvalError("{ x<-list(1); x[[-1]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_45215232ebd54fc2bc10e30252dfb8da() {
        assertEvalError("{ x<-list(1,2,3); x[[-1]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1c1fdeb874dcab7bd9fac094bcfd9c98() {
        assertEvalError("{ x<-list(1,2,3); x[[-5]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_3c1a4923d96fea1f421192a99483e461() {
        assertEvalError("{ x<-list(42,2,3); x[[c(NA, 1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ebd2fed75eb9213d6bf5b81b2fab2dd1() {
        assertEvalError("{ x<-list(42,2,3); x[[c(0, 1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e91389214f815f56315d1d6d3a770121() {
        assertEvalError("{ x<-list(42,2,3); x[[c(1, -1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7bdf9c192d7e05d8e91b1a45e8846606() {
        assertEvalError("{ x<-list(42,2,3); x[[c(-1, 1)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_038a34e2644ecc8f403869f290bf58d3() {
        assertEvalError("{ x<-list(42,2,3); x[[c(1, NULL, 2)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_34d72ddc694e32ae6a989ab0e3b83082() {
        assertEvalError("{ x<-list(42,2,3); x[[c(1, 2)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_dce54ff351f23f5b44fea07866a19e28() {
        assertEvalError("{ x<-list(42,2,3); x[[c(NULL, 2, 1, 3)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4b203c2e2f3deac872700cb5379e37bd() {
        assertEvalError("{ x<-list(42,2,3); x[[c(NULL, 2, NULL, 1, 3)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_070596d797cf4ec75971677dd13a08e3() {
        assertEvalError("{ x<-list(42,2,3); x[[c(2, 1, 3)]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_3afe3afeda75dd2fc1484d3bb526e1de() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); x[[-3, 1, 1]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_641e88efadea1dc614e810e498270dc9() {
        assertEvalError("{ x<-list(a=42); x[[c(\"a\", \"y\")]] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_db7d6b2348d086b68e1b702eba57c185() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(NA,1)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6bcb89680f1e94b680b25d5a5096b70e() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(1,NA)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_a09322b92ec816b47437681de5e70d05() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(7,1)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_220b5e0ad05034470735a930bb394211() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(NA)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_cbc317a1501e2f0933abad37cdbeb28d() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(NA,1)]]<-c(-1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9290ef2d56b023ee73121144e33b3087() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(-1)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_11b9d0165c0406999453d86f05274783() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(-1,1)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b0999c4077d6414b1fde9376454b8d47() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(0)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_5f51e2624674520079f8b2fabc9cce90() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(0,1)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_bbf8d3f63872869e2a919ed15261557b() {
        assertEvalError("{ l<-list(1,2,3,4); l[[c(1,1,1)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9e239e75e9c3fcca9c98188411c31971() {
        assertEvalError("{ l<-list(list(1),2,3,4); l[[c(1,1,NA)]]<-c(1); l }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_a8880813618f5e6d2e38495e75f6958f() {
        assertEvalError("{ x<-1:4; x[[1]]<-c(1,1); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_a4524653d0e4625f9a320c553ee13f4f() {
        assertEvalError("{ x<-1; x[[0]]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7aacc03e28c232195908535ffc28a37e() {
        assertEvalError("{ x<-1; x[1]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_abe91c4902cf1f15eb0d5ba865101fbb() {
        assertEvalError("{ x<-1; x[[]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_eb4e0875f0c085f6e32467d80ef82ee5() {
        assertEvalError("{ x<-7; x[NA]<-c(42, 7); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_187bc52f2a55d71bfb61f62bd1daced8() {
        assertEvalError("{ x<-7; x[[NA]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b8a22eab16cc69d4718d97591279cf53() {
        assertEvalError("{ x<-7; x[[NA]]<-c(42, 7); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_84ff95b327c70ec303c4b9f3405f0d8a() {
        assertEvalError("{ x<-7; x[[NULL]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7eeb9ba184b0c3bab9b9af3a2a212ae6() {
        assertEvalError("{ x<-7; x[[0]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_742f575fd8be7af0531308e766e83348() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(1,4)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1b82f4f1751a57f055cebbc4e83f513c() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(1,NA)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7fc506271b8fe81fc07dc74a34a5ec61() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(NA,1)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9246e0ea5eeaf5137fc28e783e875f6d() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(1,0)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_df586fa72a24f11c1a0096bbd1a56e84() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(1,0,0)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_50122aa69a9095e68504dd5b14fffcaf() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(1,1,0)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_42ede1e07b91b73a80514a29b0bb2f06() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(0,1)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_0c13f7f058762cbcca92f64a7b788c19() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,1)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_884863e30908d1f87946572407965125() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(0,1,1)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_17c4985e036906526f4c692cf73aa7ca() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f97a9898cd6695fe05bdf4b0f647e395() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,0)]]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1cb851b978ddad132613a2bb05a063c6() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(FALSE,TRUE)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_661021a4962239ad4c19295097119aab() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(FALSE,TRUE,TRUE)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_87e16bc4899197eaa5cc40f70838534d() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[complex()]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6b1152d7009932999e9a8dc2dc529f62() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_02be4c4213a9ec9e14b696616703933e() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-c(42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6e773c8219c54df7a058e2265f008920() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9b177421dba0231044c9c987b2a905cc() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(1+1i,42+7i,3+3i)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4cadd28e21376a1cb9b8fb943f6c8d3e() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(0,42+7i)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9562e45f72ec5f8431cc4751734ae0c8() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c14298020b2a344b2af9e738646c5352() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-c(42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8d06122dd1ef3483cad67937e0b6629b() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[complex()]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_18dd63ca47bf47e3f9e6fee0db3f5636() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i)]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c1611848b539a92a6fd7e36736ba5b32() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(1+1i,42+7i,3+3i)]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_94a3483a582c8315956edf7c2050483b() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(0,42+7i)]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4c40449e6fbd94e06857aee1f1a9cb4b() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(0,0,42+71)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_952e5ee59ac0b97579eb867f63ee4d45() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(integer()))]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_55c6b6d048655801c1f34b30e90b5c3c() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f46dc6001bd816937f87d50ed7067887() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-c(43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_addc8bb3e4c764cfe79e0ed3bbfc436f() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42))]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f97f06303d96170386df679074599e41() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42), as.raw(7))]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d8d8d99c60ce5b7d2ce505f012e4a8cf() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(as.raw(42), as.raw(7), as.raw(1))]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_fdbc1b3c1492a9396638a586ba7aabd0() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(integer()))]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_43133c58860d72478a6821dcc15dadd2() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6f041632744bd2d1b114761530d052cb() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-c(43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ab6d9983b3931acafdca21e802becdac() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42))]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_eb7323c02302e184ad7b58e3e477baa7() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42), as.raw(7))]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6a67a9c7aac51e68812fc0419f8a0116() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(as.raw(42), as.raw(7), as.raw(1))]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e466f76e85fe42d2a39a8a7d5c47b40c() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7c53695c9c52822d2157515898f815c6() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-c(42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_c4eec1f267974213c4a6d6d9c673f8dd() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list()]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8aa1ed922f38b7c9e40b2fcd3b5a1946() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_101a74bb31894c4f42ffa41a3c35873d() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-c(42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e98301a9bc81b7e03fcf9be2b19a4730() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_129276f9c14ce0e386be1e2c849e712e() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_625e995d3d9be2f5f97d0d8946c82cd1() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[list(1,2,3)]]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_18c269d06eedd840cd35b93f6fac08ba() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list()]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9ec5a6a88d3cf47306ce903b11db63a1() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list()]<-c(42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8a0350fc3cc62848956542b42d97870b() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list()]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_427595a8f7dbfa52e2c56bbe7b757542() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-integer(); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_3887d58f49abca5fe7478a655f1590e1() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-c(42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_32febab0c9929ff347462e30b4eca24f() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1)]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f52f81c7a4c8c73174ed9247bcb482c2() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2)]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f3ece60814fac7397bf38d4274eb7605() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[list(1,2,3)]<-c(42,43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ed129f03de5dfece4ba8fa2a68a37faa() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[[c(-1, -2)]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_0ca370d3cce01e249f32b9ccdfc2d12a() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1,1]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_035f43c2fd1a69e8f3bab5ab54761b64() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1,1]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f6f5b126455c0d4ba3e5dee006e01c48() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1,1]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_27d35661168c4e6b3bed381c312a2bc7() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1,1]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_870dedec5f6380a0125faeb675762994() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_1acdfdc91d57454ef82b08797212fa73() {
        assertEvalError("{ x<-1:4; x[1]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_2188231eaf197b390e1b65567eb6c3da() {
        assertEvalError("{ n<-1; n[[c(7,8)]]<-c(42,43); n }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_98e45afe06f34cb156e3a8c4e470661c() {
        assertEvalError("{ x<-NULL; x[1,1]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_5dd1752daaee791916e2eea59e6b3816() {
        assertEvalError("{ x<-NULL; x[[1,1]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_811c38fd0ea4276c256f3e2d53a7ee5f() {
        assertEvalError("{ x<-NULL; x[1,1,1]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_139a97034bdefea13a9e5e527f385837() {
        assertEvalError("{ x<-NULL; x[[1,1,1]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_564f32e683589596f081a21c9134751f() {
        assertEvalError("{ x<-1; x[1,1]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6db5c49a1df1f6c77bfc6c323469abf2() {
        assertEvalError("{ x<-1; x[[1,1]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_2ce483fdd6de8250f0923775c7d456cd() {
        assertEvalError("{ x<-1; x[1,1,1]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4c56d8fdea5af593593cd6d73b25b3b3() {
        assertEvalError("{ x<-1; x[[1,1,1]]<-42; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_738deeef72f0e97b329aa4cc97252bab() {
        assertEvalError("{ b<-3:5; dim(b) <- c(1,3) ; b[[c(1,2)]] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_7d0a5295979444e5d678e06f69346920() {
        assertEvalError("{ b<-3:5; dim(b) <- c(1,3) ; b[c(1,2)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e5cacb60fe96b1017cc955151435f132() {
        assertEvalError("{ b<-3:5; dim(b) <- c(1,3) ; b[c(1)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_692f518fc549d8fb0a730108e8bef736() {
        assertEvalError("{ x<-list(list(1,list(42,list(143)))); x[[c(1, 2, 7, 7)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_398598eb055d0381910904833fcdc253() {
        assertEvalError("{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, NA, 2, 1)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9b95c8210b23d53828c2bb42cb6d8350() {
        assertEvalError("{ x<-list(list(1,list(42,list(list(143))))); x[[c(1, 2, 2, NA)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_8233ee52bbe594da451369ab3d789d39() {
        assertEvalError("{ x<-list(1, list(42)); x[[c(-3, 1)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_b463205a19eb54f89e73dbb219aa3359() {
        assertEvalError("{ x<-list(1, 2, list(42)); x[[c(-1, 1)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_db6a47288f08e9ad879f15b57ae5ee46() {
        assertEvalError("{ x<-list(1, list(42, 1)); x[[c(-1, -3)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_0cb958e4a80f9d06b7dd456d0dc54c1d() {
        assertEvalError("{ x<-list(1, list(42, 1, 2)); x[[c(-1, -2)]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_9f9196de1851d669b74b2f60a2963de1() {
        assertEvalError("{ x <- list() ; x[[NA]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_64e2ad04b3bc06d21a804f2d05bc2e77() {
        assertEvalError("{ x <- list(1) ; x[[NA]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_325ccb7760ed51594ea6bb1880c6063c() {
        assertEvalError("{ x <- list(1,2) ; x[[NA]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_4fa8f7bd90d598c3ec2bdd45a1da11b7() {
        assertEvalError("{ x <- list(1,2,3) ; x[[NA]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f0678151c819bc4f3eb4dae6db644bec() {
        assertEvalError("{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[c(1,2)]] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_dda366aaec278dbc5223a2f7cc60646d() {
        assertEvalError("{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[0]] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ec58c8d651cf401cc31aa8a731080f42() {
        assertEvalError("{ x<-1:4; x[c(1, NA)]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6fdb20b8d158008062e243a4325bd6c5() {
        assertEvalError("{ x<-1:4; dim(x)<-c(2,2); x[c(NA, 1),1]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_93c3d8d129ec1960c034ca95932b108d() {
        assertEvalError("{ x<-c(1); x[[-4]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_bfc881280fe371d3c90f164a4eff917b() {
        assertEvalError("{ x<-list(1); x[[-4]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_6367f29b9be5e09105fd47109eb9f25a() {
        assertEvalError("{ x<-c(1,2,3); x[[-4]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_3b2b326bb29b921bac7f0169f8dc2411() {
        assertEvalError("{ x<-list(1,2,3); x[[-4]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_a338599f5990914a216512af38ecff12() {
        assertEvalError("{ x<-c(1,2,3); x[[-1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_70dcba37b8de50fa12a7de0f4a5a8abb() {
        assertEvalError("{ x<-list(1,2,3); x[[-1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_99fdfa6b74f507f1bee2ca5fb4390b23() {
        assertEvalError("{ x<-list(1); x[[-4]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_5aef7d4499818ad9eb2d54802279c67c() {
        assertEvalError("{ x<-c(1,2,3); x[[-4]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_65335c69df951fe1e9433f651b8d9a21() {
        assertEvalError("{ x<-list(1,2,3); x[[-4]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_74c9929fc75d004bdc650475dbabe040() {
        assertEvalError("{ x<-list(1,2,3); x[[-1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_a9f6d3f602cd6ea1fbff7d8502ee26db() {
        assertEvalError("{ x<-c(\"a\", \"b\"); dim(x)<-c(2,1); dimnames(x)<-list(c(\"Z\", \"X\"), NULL); x[, \"Z\"] }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_f40e760b22c190582d7b76bb4cfc1734() {
        assertEvalWarning("{ x<-1:4; x[1]<-c(1,1); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_234f3fc09448b5cc0ef68d84f0d0a987() {
        assertEvalWarning("{ x<-1:4;  x[c(1, 0)]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d5b74507ecdf19e11bfd18dae806dc48() {
        assertEvalWarning("{ x<-1:4;  x[c(0, 1)]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_d96313c3423d43c62a89814f11ae7370() {
        assertEvalWarning("{ x<-1:4; dim(x)<-c(2,2); x[c(1,0)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_e0bcad7194383e1687078d57a3d125e2() {
        assertEvalWarning("{ x<-1:4; dim(x)<-c(2,2); x[c(1,0,0)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_ec4f591fac449579997fa4b050f9cb45() {
        assertEvalWarning("{ x<-1:4; dim(x)<-c(2,2); x[c(0,1)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOther_887cf433e6cbe81983f8c3c10b81f71c() {
        assertEvalWarning("{ x<-1:4; dim(x)<-c(2,2); x[c(0,0,1)]<-c(42, 43); x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_7ee80d10536234dea050bd3a45a963b1() {
        assertEval("{ x <- c(1); x[[-4]] <- NULL }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_c24d10e5b756a7869655b4f8f0960bd4() {
        assertEval("{ x <- c(1,2,3); x[[-1]] <- NULL }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_461a050f655ae44ddfc5d11f6a011e93() {
        assertEvalError("{ x<-1:4; x[[1]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_5a63039e693f0bcdb40f33a133932ebd() {
        assertEvalError("{ x<-1:4; x[[0]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_3b27f8602ed093e9302f1ed670a155cf() {
        assertEvalError("{ b<-3:5; dim(b) <- c(1,3) ; b[[c(1)]] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_4b570d690c92236829b8974bae01fe3e() {
        assertEvalError("{ b<-3:5; dim(b) <- c(1,3) ; b[[0]] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_fe5461bdd4035e24804d4c684b9bb20f() {
        assertEvalError("{ x <- integer() ; x[[NA]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_f09061c93f11ca4a2ec5ecd4f85f7548() {
        assertEvalError("{ x <- c(1) ; x[[NA]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_4eea10efa7dfc459fce3420e5cf8d9fc() {
        assertEvalError("{ x <- c(1,2) ; x[[NA]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_ad453b3eec6a2d91d42ea4c78a0c9356() {
        assertEvalError("{ x <- c(1,2,3) ; x[[NA]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_d5bbba1f1bb5b771dbc80175679415c5() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1]]<-NULL; x }");
    }

    @Test
    public void TestSimpleVectors_testMultiDimScalarIndex_e271a023f22f29d8c4fce3e063eff2ed() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dim(x[1,0,]) }");
    }

    @Test
    public void TestSimpleVectors_testMultiDimScalarIndex_a2f6edb8e0d5c28047cf3bc9d5248153() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dim(x[,0,]) }");
    }

    @Test
    public void TestSimpleVectors_testMultiDimScalarIndex_ab373a6624fc24e51f8841e0bb6ad24e() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); x[-1,0,] }");
    }

    @Test
    public void TestSimpleVectors_testMultiDimScalarIndex_3b7826a50f5dbda64f3f83e1ccd997d1() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); x[-1,-1, 0] }");
    }

    @Test
    public void TestSimpleVectors_testMultiDimScalarIndex_a60e4b233bad14985256417c6e26b137() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,2,0]) }");
    }

    @Test
    public void TestSimpleVectors_testMultiDimScalarIndex_5014b99635cd3154e0582da781d7b010() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,-1,0]) }");
    }

    @Test
    public void TestSimpleVectors_testMultiDimScalarIndex_116b4c2b304c439efeb7ba43dcc2d63a() {
        assertEvalError("{ x<-1:8; dim(x)<-c(2,2,2); dim(x[0,3,0]) }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_88bdd0aba70235fdd509aa36d30468a8() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_4bd040fabab030cabd42d57c3e8596a0() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_98e484c24bacfdf3962fe27ad98eaeca() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_dc6ff4b4c230e0eca9fec694745c704e() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_c8bc2526a6b211e4b98a88db1b41c44c() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_be9619338d494975ec0c3c8edff1e639() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_649f7174126e1d84f6e3c7a130eb84ad() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_bf042c216dafa00a1b00f5dfd15f9440() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_8c1e37c45a928881fc33c003d854c59f() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_463aafb1a140d36408d75ed2cb102b27() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_42a3021c2f2e66e612baceca1683c729() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_4bb849a6b461652f0efbead88ff515c1() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_5c99ebde54a21079e792820b45033d0f() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_4a7808e00db6310d0e78bd963f064700() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_3c57246a343459dfc517cfec1e4101fc() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_88040eeee8e4bee69800daf1a0c740e1() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_5bb56005dc3807414ba4e2c0ff77a1c6() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_f6e69b3a69da199c4199f7a28b5b8ef5() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_44fd0d635d95786c5f413ab73386d718() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_94e8c398203a3967c9d5a4a3f13d7125() {
        assertEval("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_4b43b790bcc7230c2ccfd08e2cf245ab() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_db1a55a57d305b03b4d5266407eeb7df() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_355f8f8cfe3e97f12f1af848759f6161() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_af68885e1502ebfbcac7065f69bceedc() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]] }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_65b4ffa267e203e075e146250466fa85() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_ae5be5a43350faac41d14329de8bb637() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7,42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_99faa119cbbc7399131787b31939b3cd() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_71fc6410bcd22b879035fa6dc99a1ca4() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_d310fb001637b82d27a15fa53d44cb40() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_420d5a8458aff14012bd745527efb221() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_a4d4206b87450d745a4aec39fa55f58c() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7,42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_669f12e08ce2551a35fe68a07d210d78() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_ab4e4df539b94132b248f86c1804c3cc() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_009f1c486f3566bac6a793a83a32d3bd() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA]]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_a707e8901efdd62ad28ac35f9dbdf900() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_08b1811917e507fa97b3b0804c5f6fff() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_27c99e25445b65fc972f1747db49b02d() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_845ed8e3e168f535edd6da1ec7986f9e() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_35945265760e132e37037a2cf03a6c3c() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_e808a1f52d68577b8b4e1cd1b8c4ca20() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_10a2e68f826deb0c600e1d9008a2e7af() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_30877ff9ad2e8932a7e9fa0c8bce1bdd() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_e5a8fb94d20089a554162e5d81ccf498() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_ed92b3caefbef0f121777794669ae00d() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_d8e39a930b8aa9301fe9666e637d98c7() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_4fba73c61f6a5f54eaf026bf14e82e2b() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_4da5935d823c4867eee597685afe49a7() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_4a85dd2028ad9849d3fe8fe38a6d0431() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_bac9d76d02abd665847316b7784ca495() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_a159c2c54dda5d1b9392ae6565c396ba() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, NA]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_1e931defd7f89cb92497ddd3dab69dbe() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[1, NA]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_df0b69a4383c5263ac2aefa0c7548086() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[NA, 1]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_183e60afce2f03d6679ed016cd821a12() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_a75aae871e4d604148627e9af510f148() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_f037c13cd4c259bcaca86ba4b8813961() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-7; x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_476d3491607676520619a031d8362964() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_0c2d756e5c21dafb303812fd75c5f762() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_762158160086b86cfc2b2b5ec27367df() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_f2dc5f70329a5146cf11d544b31ed567() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, NA]]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_ff27c0f64271de055e0be419558958d4() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[1, NA]]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testNAIndex_f363b0173ad1642aed3ebaa183130944() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[NA, 1]]<-c(7, 42, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_ac880bff260f234821af9ee036453e82() {
        assertEval("{ x<-1:8; dim(x)<-c(2, 4); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_2353b26f5025b3b887c97eb5ea65e808() {
        assertEval("{ x<-c(1,2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }");
    }

    @Test
    public void TestSimpleVectors_testPrint_34a2f0bd885192caa54b4be1b01723ec() {
        assertEval("{ x<-integer(0); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }");
    }

    @Test
    public void TestSimpleVectors_testPrint_bfbd6edbd45d39e41eaf37228d3b3689() {
        assertEval("{ x<-character(0); y<-list(x, 1+1i, 2+2i, 3+3i); dim(y)<-c(2, 2); y }");
    }

    @Test
    public void TestSimpleVectors_testPrint_f2b9166399f84a17b55468507202f20b() {
        assertEval("{ x<-list(1,2,3,4); dim(x)<-c(2, 2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }");
    }

    @Test
    public void TestSimpleVectors_testPrint_3c7a1a57f283a35aabc3e72823f6d702() {
        assertEval("{ z<-list(1,2,3,4); dim(z)<-c(2,2); x<-list(z,2,3,42); dim(x)<-c(2, 2); y<-list(x, 1, 2, 3); dim(y)<-c(2, 2); y }");
    }

    @Test
    public void TestSimpleVectors_testPrint_9a48692a3c1cb930aaa111a6670344d0() {
        assertEval("{ x<-1:8; dim(x)<-c(2, 4); toString(x) }");
    }

    @Test
    public void TestSimpleVectors_testPrint_9fa337312d75fdd276af0a5c0c591b91() {
        assertEval("{ x<-list(1, 2, 3, 4); dim(x)<-c(2, 2); toString(x) }");
    }

    @Test
    public void TestSimpleVectors_testPrint_c227b9929334bb2fd8e85a7fc27a0a62() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_cbf1decbcd38dea9aaf593c96b7ddec9() {
        assertEval("{ x<-list(1,2,3,4,5,6,7,8); dim(x)<-c(2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_652efb0e3d197644eaf862f8a8358274() {
        assertEval("{ x<-1:16; dim(x)<-c(2,2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_33625f228f215e90dca785f18ae6d1db() {
        assertEval("{ x<-1:32; dim(x)<-c(2,2,2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_17457869fdb86ec6e041e20ba496a7c2() {
        assertEval("{ x<-1:64; dim(x)<-c(2,2,2,2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_c7ff2bd7fba8e216c7350673ace9901a() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), NULL, NULL); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_0b4cdccccc0a6a09fb8816311a87493b() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(103, 104), NULL); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_88d879760a1d4d6d70c163f6b101551b() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(103, 104), c(105, 106)); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_8e23d61b4a3ecc43d7a3b32a02a365e7() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), c(105, 106)); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_e5a4975280a8bb37b70d51826cfb83e2() {
        assertEval("{ x<-1:8; dim(x)<-c(2,2,2); dimnames(x)<-list(c(101, 102), NULL, c(105, 106)); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_01b5961257e84363c7f3e1e197091c4d() {
        assertEval("{ x<-1:4; dim(x)<-c(2,1,2); dimnames(x)<-list(c(\"a\", \"b\"), \"c\", c(\"d\", \"e\")); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_6c779ed900c8e2abe428d228b96e9319() {
        assertEval("{ x<-101:108; dim(x)<-c(2,2,2); dimnames(x)<-list(c(1, 2), c(3, 4), c(5, 6)); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_48685b68f49fd142b40c17c34b686a03() {
        assertEval("{ x<-10001:10008; dim(x)<-c(2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_efbf44179f1ba5857a1edbf332e10fb5() {
        assertEval("{ x<-c(1:2, 100003:100004,10005:10008); dim(x)<-c(2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_30107f4e77c1473f22795431639c8c2c() {
        assertEval("{ x<-c(1:4,10005:10008); dim(x)<-c(2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_1b6f7c0c459865d98873e1e045c36e0b() {
        assertEval("{ x<-1:16; dim(x)<-c(2,4,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_c3b8c4e50d796d4d3a3e54bbd92c0b13() {
        assertEval("{ x<-1:32; dim(x)<-c(4,2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_6973675d621590a897682c6943e0e97f() {
        assertEval("{ x<-1:32; dim(x)<-c(2,4,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_1ac72e8058e1e4e3cbcc3c819e1cea22() {
        assertEval("{ x<-1:32; dim(x)<-c(2,2,4,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_e6805e12f0418d16fbbacf74b58a4667() {
        assertEval("{ x<-1:32; dim(x)<-c(2,2,2,4); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_3e24af09eb7d8f00b2e3972fdde9b773() {
        assertEval("{ x<-1:64; dim(x)<-c(4,4,4); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_f8456a1d3fda495af109147a4dd0cef2() {
        assertEval("{ x<-1:256; dim(x)<-c(4,4,4,4); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_38265eb3763a6030a7d2c9f0a0b051dd() {
        assertEval("{ x<-1:64; dim(x)<-c(2,2,2,4,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_3bed41bb0850feb512afc7fc8c6005a1() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2,1); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_cabfc5cdcbfb67d9ec4d395095ee8635() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2,1,1); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_d171a6dc0219f3a8476f11bc9ec328ec() {
        assertEval("{ x<-1:4; dim(x)<-c(1,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_f3603e1eb847493e36900b208b7c1631() {
        assertEval("{ x<-1:4; dim(x)<-c(2,1,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_321ba23e5d16334b4702673e50a96713() {
        assertEval("{ x<-integer(0); dim(x)<-c(1, 0); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_93df6beaff71e9a0bb81b9e6bcbfb3a7() {
        assertEval("{ x<-integer(0); dim(x)<-c(0, 1); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_ec822f9f915e8646ffee62f21606488c() {
        assertEval("{ x<-integer(0); dim(x)<-c(0, 3); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_a80b8568c326ac40a73df657af0f8294() {
        assertEval("{ x<-integer(0); dim(x)<-c(3, 0); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_0668e8929bc74bb62489658186b50c3d() {
        assertEval("{ x<-integer(0); dim(x)<-c(0, 0); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_0e433b2de3c0036902a31d07cafbcf7f() {
        assertEval("{ x<-integer(0); dim(x)<-c(1, 0, 2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_b1ef0cd726b2e1bf660a0ac0b22d286a() {
        assertEval("{ x<-integer(0); dim(x)<-c(1, 0, 0); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_f243da63b36970c02751fdd43edddaf2() {
        assertEval("{ x<-integer(0); dim(x)<-c(1, 0, 0, 2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_a63d26bd9cd67a7fdda67ceb13c3be23() {
        assertEval("{ x<-integer(0); dim(x)<-c(1, 0, 2, 0, 2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_d8ce68a23a7e5c9b8ce56d5d227268c7() {
        assertEval("{ x<-integer(0); dim(x)<-c(0, 0, 2, 2, 2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_b2dcfc5e9ef8a00fdec843dcca184100() {
        assertEval("{ x<-integer(0); dim(x)<-c(1, 0); dimnames(x)<-list(\"a\"); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_ad0b42209217f883b4bb99a32d80291c() {
        assertEval("{ x<-integer(0); dim(x)<-c(0, 1); dimnames(x)<-list(NULL, \"a\"); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_ad373fb8a0cb534670056e6cfff084c3() {
        assertEval("{ x<-integer(0); dim(x)<-c(1, 0, 2, 2, 2); dimnames(x)<-list(\"a\", NULL, c(\"b\", \"c\"), c(\"d\", \"e\"), c(\"f\", \"g\")); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_26c4856d8152edfdee732b70242e88a8() {
        assertEval("{ x<-integer(0); dim(x)<-c(0, 4); dimnames(x)<-list(NULL, c(\"a\", \"bbbbbbbbbbbb\", \"c\", \"d\")); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_d7db3c40a9f1dd6b5ee5c23bbabec53d() {
        assertEval("{ x<-c(3+2i, 5+0i, 1+3i, 5+3i, 2-4i, 5-2i, 6-7i, 5-0i); dim(x)<-c(2,2,2); x }");
    }

    @Test
    public void TestSimpleVectors_testPrint_25b8238c8e0bf0ee6c406a1051d57b0e() {
        assertEval("{ mp<-getOption(\"max.print\"); options(max.print=3); x<-c(1,2,3,4,5); print(x); options(max.print=mp) }");
    }

    @Test
    public void TestSimpleVectors_testPrint_c13b3c1c07be618ade31a2d3d3bd2eaf() {
        assertEval("{ mp<-getOption(\"max.print\"); options(max.print=3); x<-c(1,2,3,4,5); attr(x, \"foo\")<-\"foo\"; print(x); options(max.print=mp) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_56015d7e5db9ea79ba00565c74ba9e61() {
        assertEvalError("{ x<-c(1,2,3,4); x[[as.raw(1)]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_31a7d00e5fbca894f44096cd2ef1fd7a() {
        assertEvalError("{ x<-c(1,2,3,4); x[[as.raw(1)]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_94eca145a76900bfca147708ee56d326() {
        assertEvalError("{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_6415c49d64ab2b5e5d87106b2ac2012e() {
        assertEvalError("{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1,2) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_e1c20720f1f67b5d5c8bfe73241b1cc6() {
        assertEvalError("{ x<-c(1,2,3,4); x[[as.raw(1)]]<-c(1,2,3) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_09307db9933d177f0d8a6d08963a7eb0() {
        assertEvalError("{ x<-c(1,2,3,4); x[as.raw(1)]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_cd083dc6b55bdfada462ba12362642af() {
        assertEvalError("{ x<-c(1,2,3,4); x[as.raw(1)]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_ca020137a9c55adda8557f974a5b7334() {
        assertEvalError("{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_6021df17bfe80c01d5bb31c5aae6cdb9() {
        assertEvalError("{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1,2) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_edc0145fd6f48d5360c39f7ca6a9ab75() {
        assertEvalError("{ x<-c(1,2,3,4); x[as.raw(1)]<-c(1,2,3) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_bca1724c712508f88f83bf6d4187daee() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_46dca8a606a60d006561b3be80897666() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_b8def2f548261cd8846e5fd0b6f75f64() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_06b655e90d18fae055bcde9e519ef0d4() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_03dcdf09fbb9a072ae8ff13d531bd792() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_cf04268d305540a545c49ecf3dbf9d2b() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_6ec24131ae122c869cc540836c1ae072() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_325ef28a15192581f5c07bb95eb4abb8() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_c84bd1ebd989fcb437f5939ed982943a() {
        assertEvalError("{ x<-list(1,2,3,4); x[[as.raw(1)]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_a38b27a0e2b411826d35b8f8e6318272() {
        assertEvalError("{ x<-list(1,2,3,4); x[[as.raw(1)]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_ba751d66d8c56e02da25ae78b31f9a2e() {
        assertEvalError("{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_e5b1925a05bdac2865786cff65acaa90() {
        assertEvalError("{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1,2) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_5af361e92cb132d1a7ed9e21447a2f78() {
        assertEvalError("{ x<-list(1,2,3,4); x[[as.raw(1)]]<-c(1,2,3) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_00ba5a51eb97d6fa540d6a8cb60dc66d() {
        assertEvalError("{ x<-list(1,2,3,4); x[as.raw(1)]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_0e4f83e08191f9c295aeb26359692ad0() {
        assertEvalError("{ x<-list(1,2,3,4); x[as.raw(1)]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_5e5e7de6a50cd2f733bda827f1226b23() {
        assertEvalError("{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_830618155452aa717128938776c1fbf0() {
        assertEvalError("{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1,2) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_b9b456f619e8650700bbc4508c448a96() {
        assertEvalError("{ x<-list(1,2,3,4); x[as.raw(1)]<-c(1,2,3) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_2030830bd507d4ea57fcfc3e662d10ea() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_05f29f0ba9791b744a49f35538f0ba61() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_1fedcf7c75a0a1edf85ca9bab4f3b90b() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_338e6099652d449b58f0aced90c4b717() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_9a82fee67cc276e7689ecdf9ad54bca1() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-NULL }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_43702e9cfda16ed6e768aff809c59719() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-integer() }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_665cd227aa7166cea62eabf1a75a0053() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-7 }");
    }

    @Test
    public void TestSimpleVectors_testRawIndex_93380e8a169f7145d2f15c685a4d6a92() {
        assertEvalError("{ x<-list(1,2,3,4); dim(x)<-c(2,2); x[as.raw(1), 1]<-c(7,42) }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleAsVector_9acec1f4b64be4651d8f6034c161155e() {
        assertEval("{ x<-1; x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleAsVector_635c5063dc8660d2298231970fbed713() {
        assertEval("{ x<-1; x[0L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleAsVector_21b031587b7ab0b2ed2b61959d0a1826() {
        assertEval("{ x<-1; x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleAsVector_ae22a68aa4d57a4bbabd4766671a846c() {
        assertEval("{ x<-1; x[-1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleAsVector_39bcf0b5d8f41037a855c8fec44b6b16() {
        assertEval("{ x<-1; x[-2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleAsVector_d5e8bebf56bee74425637af69273aab0() {
        assertEval("{ x<-1; x[TRUE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleAsVector_3e06984f14f8b8f7c14725bee49dff46() {
        assertEval("{ x<-1; x[FALSE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleAsVector_5061ec4e36179fcff31e62f8392979e9() {
        assertEval("{ x<-1; x[NA] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_ecd7c9ce7bd37b9ec57fe278a4650734() {
        assertEval("{ x<-c(1,2,3); x[1.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_f067fef618f8c78cd46223ffb7d8b153() {
        assertEval("{ x<-c(1,2,3); x[2.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_1996d36ecb97925e13a09f32c3b2c5b8() {
        assertEval("{ x<-c(1,2,3); x[3.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_f9ef4c254cf41225b518eb71d95aefce() {
        assertEval("{ x<-c(1L,2L,3L); x[1.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_1f561260223163d441744d1eca65c707() {
        assertEval("{ x<-c(1L,2L,3L); x[2.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_29a37c4cd9639a6c4406bd404db1e312() {
        assertEval("{ x<-c(1L,2L,3L); x[3.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_20bde038708c24440a16b851d1c47519() {
        assertEval("{ x<-1:3; x[1.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_a86c4a05cfab8b9b22b033e4c34bedb0() {
        assertEval("{ x<-1:3; x[2.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_49f286dc47ccf90e117bb4ff9adc3113() {
        assertEval("{ x<-1:3; x[3.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_9feec00670f96e13614acd7fff1c3cdc() {
        assertEval("{ x<-3:1; x[1.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_719f026d0185bacdf6a860df8d80cf07() {
        assertEval("{ x<-3:1; x[2.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleIndexOnVector_391ea7065057fb421adb200ef190bad5() {
        assertEval("{ x<-3:1; x[3.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_2832f2f47d06c8d21133ed6586418161() {
        assertEval("{ x<-c(1,2,3); x[-1.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_3a99cbd1cb38e509d752835a51a8c990() {
        assertEval("{ x<-c(1,2,3); x[-2.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_0dbeca2649fa8c7964b48ad61097bf25() {
        assertEval("{ x<-c(1L,2L,3L); x[-1.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_d72c20471a99f88cded2d0cc05461232() {
        assertEval("{ x<-c(1L,2L,3L); x[-2.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_a027a32be8ce0360fd9f3c47dbd5a737() {
        assertEval("{ x<-1:3; x[-1.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_72fe27930bcb517266ac57b826f39d3f() {
        assertEval("{ x<-1:3; x[-2.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_f34402d4b730f3b7deca9d3b511a348f() {
        assertEval("{ x<-c(1,2,3); x[-3.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_17da8d08be7a27df72cb116919fadf6c() {
        assertEval("{ x<-c(1L,2L,3L); x[-3.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarDoubleNegativeIndexOnVector_83e0ed4534446b2dd7c33513d9f3881a() {
        assertEval("{ x<-1:3; x[-3.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_43f52e129be75662fc39ffb1722d08fe() {
        assertEval("{ x <- c(a=1, b=2, c=3) ; x[[2]] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_2cc04adcf513ac5c67d258d8ff29be6e() {
        assertEval("{ x<-5:1 ; y <- 6L;  x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_796557b3804f91e5c923ad74d3bac050() {
        assertEval("{ x<-5:1 ; y <- 2L;  x[[y]] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_13ddc436eddecadeccd03456e2fe2b30() {
        assertEval("{ x <- c(1,4) ; y <- -1L ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_9174300cde75228773dadbeca24f5afb() {
        assertEval("{ x <- c(1,4) ; y <- 10L ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_cab9e8d57efb4307f149584817c9dd2e() {
        assertEval("{ x <- c(1,4) ; y <- -1 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_028b2de6b6ef9736af601517476005ea() {
        assertEval("{ x <- c(1,4) ; y <- 10 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_cf2a63483a6199389e3c1c532f230daf() {
        assertEval("{ x <- 1:4 ; y <- -1 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_a9965767c78568255e78f55a9f5fba9c() {
        assertEval("{ x <- 1:4 ; y <- 10 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_e6079d71ec408f0249cebbc96ce7b8fc() {
        assertEval("{ x <- list(1,2,3,4) ; y <- 3 ; x[[y]] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_2a7e56049ad8a25299c6be4cd3b61b61() {
        assertEval("{ x <- c(as.raw(10), as.raw(11), as.raw(12)) ; x[-2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_50f8d5d633f8f248cb1651a0304290ba() {
        assertEval("{ x<-as.list(5:1) ; y <- 2L;  x[[y]] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_942a9f166109273f1444551c2ae8ade1() {
        assertEval("{ x <- as.list(1:2) ; f <- function(i) { x[i] <- NULL ; x } ; f(1) ; f(NULL) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_432032e9368dd1cc8df079e75b453970() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[0-2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_bdfb9982f2125589fde80bb9bf92be8b() {
        assertEval("{ x <- c(a=1, b=2, c=3) ; x[2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_5a9f024ee5b02de5e8cb27fde97002b3() {
        assertEval("{ x <- c(a=\"A\", b=\"B\", c=\"C\") ; x[-2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_3aa6b5291198d73ce11db7713ead3af6() {
        assertEval("{ x <- c(a=1+2i, b=2+3i, c=3) ; x[-2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_8a8d2a503f522b4e5caaaae8f46dfc80() {
        assertEval("{ x <- c(a=1, b=2, c=3) ; x[-2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_bec8cb40ff51054173db1fd6ac0d9b8f() {
        assertEval("{ x <- c(a=1L, b=2L, c=3L) ; x[-2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_c66136c48e96dac7d20a2c3321cb1f5c() {
        assertEval("{ x <- c(a=TRUE, b=FALSE, c=NA) ; x[-2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_d6bd87ca45c836c7514a6ce27e611d84() {
        assertEval("{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[-2] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_f189a29dfb77ee9077e643cc16e61823() {
        assertEval("{ x <- c(a=1L, b=2L, c=3L) ; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_5058b6240987ebc70b4cbca75923d5c6() {
        assertEval("{ x <- c(a=1L, b=2L, c=3L) ; x[10] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_570d8d05b4cc3299253475df80b8e95c() {
        assertEval("{ x <- c(a=TRUE, b=FALSE, c=NA) ; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_661f9176f30bb012e4f838c8e6b85af1() {
        assertEval("{ x <- c(TRUE, FALSE, NA) ; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_08cb14acafbcb589e6182b35681a3933() {
        assertEval("{ x <- list(1L, 2L, 3L) ; x[10] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_699296d14feb7eef24d9250d0ad1b78f() {
        assertEval("{ x <- list(a=1L, b=2L, c=3L) ; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_5364e294f38fde7c99eabcc1655f8066() {
        assertEval("{ x <- c(a=\"A\", b=\"B\", c=\"C\") ; x[10] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_d99732fcab7d1c4728968ffc7bde82f3() {
        assertEval("{ x <- c(a=\"A\", b=\"B\", c=\"C\") ; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_55c8d58d0fe2bbc46822b71af31b099b() {
        assertEval("{ x <- c(a=1+1i, b=2+2i, c=3+3i) ; x[10] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_8148cce9d18d5e93bcd2ec3586b0b25a() {
        assertEval("{ x <- c(a=1+1i, b=2+2i, c=3+3i) ; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_0e8d05b2b61989e0a3145800263b809f() {
        assertEval("{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[10] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_646d60d1e08899b093bf881cb8106719() {
        assertEval("{ x <- c(a=as.raw(10), b=as.raw(11), c=as.raw(12)) ; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_c5919f4596d35961d03d7da5169f43df() {
        assertEval("{ x <- c(a=1, b=2, c=3) ; x[10] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_f5cc3235b42a4f6759b44430a61bdc48() {
        assertEval("{ x <- c(a=1, b=2, c=3) ; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_438ac759f0ef9677e4325e53f2f88571() {
        assertEval("{ x <- c(a=1,b=2,c=3,d=4) ; x[\"b\"] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_3edfb967bbf1c6ed47f0470f63740ab0() {
        assertEval("{ x <- c(a=1,b=2,c=3,d=4) ; x[\"d\"] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_f4e366fb9b4d13fc763c576039600e5b() {
        assertEval("{ x <- 1 ; attr(x, \"hi\") <- 2; x[2] <- 2; attr(x, \"hi\") }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_e99ef17d48648c7759a934be8425ab7f() {
        assertEval("{ x<-5:1 ; y <- -1L;  x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_f46eea254cc6c35426449d4583dab803() {
        assertEval("{ x <- c(a=1,b=2) ; y <- 2L ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_da2f6b7225ab17876651e3fb5da37be2() {
        assertEval("{ x <- c(a=1,b=2) ; y <- 2 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_ec2a04b9eb613d5cb3040e66734d161f() {
        assertEval("{ x <- list(1,2,3,4) ; y <- 3 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_bd897ddbbd064762af377c1bff05745b() {
        assertEval("{ x <- list(1,4) ; y <- -1 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_22dd8c09df9879fbc4d4a3742dd51571() {
        assertEval("{ x <- list(1,4) ; y <- 4 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_bece80ce29b2be5b8d8837537d10d7f5() {
        assertEval("{ x <- list(a=1,b=4) ; y <- 2 ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_029ccf40f09e0e332c6db1681c979aae() {
        assertEval("{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,\"a\") }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_e44f7131ee8502655892ea1ca391f5ef() {
        assertEval("{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,\"a\") ; f(x,2) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_84f499fe90cb617221f716b44d9ca0bb() {
        assertEval("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(list(1,2),TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_e181002aae9746a49ea6f292b0c67e12() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(list(), NA) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_d76f6b9afcf2439ef6c19b0fb89cc081() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(integer(), NA) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_7c8b7fed0e62f126f17bdcabc2ee77ac() {
        assertEval("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:2,-1) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_992c15149e4299d850d909f75a53ef80() {
        assertEval("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:2,-2) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_6cf2e47e8ec04a371dade56dec783807() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:2,NA) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_f64d547e1bfac72b81d6bbc7f6abb7a0() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:2,-4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_6d6385a6ce007265ccf607c07ca538f4() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(a=1L,b=2L),0) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_b43e3d67178e70653b93443ea03d88bb() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:2,0) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_60424b7883978b896905584f87a372da() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:2,-2) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_d476116d6dedebea0e585e316329d53d() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(TRUE,FALSE),NA) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_0eddef67dea4fbf5d930ce89934dd3fc() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(TRUE,FALSE),-4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_87978a95ff46685552fdaba914a68865() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(TRUE,FALSE),0) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_1f0ca732efd80c0832cd49ac24b579b4() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(a=TRUE,b=FALSE),0) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_6f2a0591d57fd7c8c778b4a5bfd74096() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(TRUE,FALSE),-2) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_286f7780cb2131f6a5316b45a69b4b72() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(TRUE,FALSE),4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_c67abd9557f37d4a7ce84ba9798f3a56() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(a=TRUE,b=FALSE),4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_0199f93899548b8d24184d366f94e720() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(list(1,2),-4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_9ebb2291da2c7ae213595b3877227f76() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(list(1,2),4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_0a70ee0a0323e5c7bc1a4e5247c84aa3() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(list(a=1,b=2),4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_ee840e859861608e3ee028e844fd6109() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(\"a\",\"b\"),4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_2029832d44f2e40ee352a2c942c79f38() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(\"a\",\"b\"),NA) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_3329a999908ae3e3c3f6841ee86a62f5() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(\"a\",\"b\"),-4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_d36c373afe1d7e908ed1ab2c556717a9() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(\"a\",\"b\"),0) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_3d964a3f74217999a7ba05a8c6b686be() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(a=\"a\",b=\"b\"),0) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_21266169e46726b5c0421f44a4967a51() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(1+2i,3+4i),NA) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_479e6f35e1d04cfae75e3690a0fc48c4() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(1+2i,3+4i),-4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_da63e8a9bf21482888f09b934989ab90() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(1+2i,3+4i),4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_8f97852319952dc49dfc6a16bb728403() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(c(a=1+2i,b=3+4i),4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_a2f2a08fd2b2971138c187d55922002e() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(as.raw(c(10,11)),-4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_8ced45a533c71d5d820add8c4a108310() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(as.raw(c(10,11)),0) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_cac5b26455790bdac250e8b2929f0b7f() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(as.raw(c(10,11)),4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_d301f6c139e4f63d8f74382c7cc6482a() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; z <- c(1+2i,3+4i) ; attr(z, \"my\") <- 1 ; f(z,-10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_b048e75762e1c565b2617a8c5abf25bf() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; z <- c(1,3) ; attr(z, \"my\") <- 1 ; f(z,-10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_a544054267a50bb9db780958f1aa5b7a() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; z <- c(1L,3L) ; attr(z, \"my\") <- 1 ; f(z,-10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_5e58f5282047ec68c090ed7822deaa07() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; z <- c(TRUE,FALSE) ; attr(z, \"my\") <- 1 ; f(z,-10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_d8db2a2f3f116442da496d752b517bc3() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; z <- c(a=\"a\",b=\"b\") ; attr(z, \"my\") <- 1 ; f(z,-10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_415aade7ef2c80206d6b6a4b14520701() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; z <- c(a=as.raw(10),b=as.raw(11)) ; attr(z, \"my\") <- 1 ; f(z,-10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_302bb092ce335272b1dcfa49f9a5982e() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:3,c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_5f22c8ae5cc529428a95d0f3a7153e95() {
        assertEval("{ f <- function(x,i) { x[i] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:3,c(1,2)) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_e2e0914debca71a826c67a51628d953f() {
        assertEval("{ x <- 1:3 ; x[TRUE] <- 10 ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_8b2d8fd122c6f4fe211a09d8631a1f47() {
        assertEval("{ x <- 1:3 ; x[[TRUE]] <- 10 ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_0ca792ef5f55f83be583edb1f96fa47f() {
        assertEval("{ b <- c(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[1] <- 3+1i ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_888cc5df646aba9a374c2b19cae9c037() {
        assertEval("{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[\"hello\"] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_be1593d8cc3ee8434648bdcce749f404() {
        assertEval("{ x<-1:4; x[c(-1.5)] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_ef5bc4f2a725e0a67adf0f7152b65e14() {
        assertEval("{ x<-1:4; x[c(1.4,1.8)] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_6c76043f65f6afe7dd9830e157c67576() {
        assertEvalError(" { x <- 1:3 ; x[[NULL]] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_1f6ce2b65db60583a32fce6d86fc7f09() {
        assertEvalError("{ x<-function() {1} ; y <- 2;  x[y] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_1b15b6a7007e3d7c3862c4f21ccc98a2() {
        assertEvalError("{ x<-function() {1} ; y <- 2;  y[x] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_efe356c278dd12174231ff0470cda9d1() {
        assertEvalError("{ x<-as.list(5:1) ; y <- 1:2;  x[[y]] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_3067eaf57f43cdbbd66dd3acf805b418() {
        assertEvalError("{ x<-function() {1} ; x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_7862196f55b49b9da907b833239b820e() {
        assertEvalError("{ x <- function(){3} ; y <- 3 ; x[[y]] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_83e479d4d7d9677c4e220736c0fc24bc() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(list(1,2),FALSE) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_8c0cb442854c3a41aa613a71bce4d9f3() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(list(1,2),1+0i) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_8dd32115d7a04762e93b6d8a96bc74df() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:3,4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_e08be2ea57354a31be34e233a88794cf() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:3,NA) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_40bec1554fa960e5ebff9975b39be7fa() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:3,-1) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_0d075f0c7cb3b2b12ee909f8a20e36ce() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(2,-2) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_5e4851b8ee44b0424147f0a84cb0c00d() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(2,-3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_fad12749ab58f520b228eca5883a85fd() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:4,-3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_38022471c8a556dfcd31377bf221d3fd() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:2,-3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_719828ffe9d432cdd7b936bdef2d4d81() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:3,c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_b7f1b6c224c905e03542543ff6522ddb() {
        assertEvalError("{ f <- function(x,i) { x[[i]] } ; f(1:4, 2L) ; f(c(a=1), \"a\") ; f(1:3,c(3,3)) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_e521b7f64369a52c90a4bf4e1d7a2fde() {
        assertEvalError("{ x <- as.list(1:2) ; f <- function(i) { x[[i]] <- NULL ; x } ; f(1) ; f(as.raw(10)) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_43e4d916c58c831fff9e543d385b70e7() {
        assertEvalError("{ x <- 1:3 ; x[2] <- integer() }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_6a2c1f530cc3053597f9bd84d7f93336() {
        assertEvalError("{ x <- 1:3 ; x[[TRUE]] <- 1:2 }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_8b4991ee77dc76e754dc6a94b1b02903() {
        assertEvalError("{ x <- 1:3 ; x[[FALSE]] <- 10 ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_93f3864842c5903beb5fac9b0e6d1546() {
        assertEvalError("{ x <- 1:3 ; x[[NA]] <- 10 ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_b58da1932910c8d41d641a044fcb656a() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), \"hello\", TRUE) ; f(1:2, list(1), 3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_137a9d4cff52a8deae82bb51fa5be019() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), \"hello\", TRUE) ; f(1:2, list(), 3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_506b655ea1254a74b6ab8009d14deed3() {
        assertEvalError("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), \"hello\", TRUE) ; f(1:2, 1+2i, 3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_a65b12faaf8797cc763f2c479d2ed6c3() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), \"hello\", TRUE) ; f(1:2, 1, 3:4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_f922b6ea0e26cd2c018dcf7fe32f0fff() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:3, 1L, 10) ; f(c(1,2), \"hello\", TRUE) ; f(1:2, as.integer(NA), 3:4) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_c907d752426a67f3307085caee70a245() {
        assertEvalError("{ x <- 1:2 ; x[as.integer(NA)] <- 3:4 }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_e779aeb90d80a1638b7a5cde7d6df3e8() {
        assertEvalError("{ f <- function(x,i) { x[[i]]} ; f(list(1,2,3,4), 3); f(f,2) }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndex_23d48d08709d0c790853d982cc773a44() {
        assertEvalError("{ f <- function(x,i) { x[i] } ; x <- c(a=1,b=2) ; f(x,\"a\") ; f(function(){3},\"b\") }");
    }

    @Test
    public void TestSimpleVectors_testScalarIndexIgnored_c5bf8fe63f55705b2cb57df329d3fc2d() {
        assertEval("{ x<-1:4; x[c(-0.5)] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntAsVector_c8a9f5db23840e357b39daccd0c8b7ff() {
        assertEval("{ x<-1L; x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntAsVector_8690eb653b2a591ae61aa45ebce9207a() {
        assertEval("{ x<-1L; x[0L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntAsVector_ef72b2cff00b178752cd9b35411f531a() {
        assertEval("{ x<-1L; x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntAsVector_08f9c323b0fc669fbf6504ff8f38ec7d() {
        assertEval("{ x<-1L; x[-1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntAsVector_adf08ecfbee113433ec11f9d7e90f8b1() {
        assertEval("{ x<-1L; x[-2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntAsVector_b2d92b69ed2aaea8e8cb73e0ce65f058() {
        assertEval("{ x<-1L; x[TRUE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntAsVector_c14c53842e186837694f03fc36d200f2() {
        assertEval("{ x<-1L; x[FALSE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntAsVector_19512e25003805afb8fcdc6959520df6() {
        assertEval("{ x<-1L; x[NA] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_21f34345010dad6027118fe57895dc09() {
        assertEval("{ x<-c(1,2,3); x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_1a2cc86f6af315c71d5d6933ee26282d() {
        assertEval("{ x<-c(1,2,3); x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_03da652d4a8bcd8e47ba05a2c9189562() {
        assertEval("{ x<-c(1,2,3); x[3L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_e856ea222f8154d363ff0ffac44db78f() {
        assertEval("{ x<-c(1L,2L,3L); x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_2a832aed8b21e3a9e3c4608c8aa4f134() {
        assertEval("{ x<-c(1L,2L,3L); x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_b312038e39c5d2bf1d3140a34626e123() {
        assertEval("{ x<-c(1L,2L,3L); x[3L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_071a2cb316dc9ab506271e9856674c18() {
        assertEval("{ x<-1:3; x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_293c100ffc39c403d5cbfa2f2b4a44c5() {
        assertEval("{ x<-1:3; x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_42358daa3ccb17d1dc9555fb5d7bbaa5() {
        assertEval("{ x<-1:3; x[3L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_97fc17be8cc6aa4bb47c2fac12b9899b() {
        assertEval("{ x<-3:1; x[1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_c71ae3b6d1c7cfb6e7e6c08846826d3c() {
        assertEval("{ x<-3:1; x[2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexOnVector_ae2e64fea8687ae2cdd2dbf2c12a05b7() {
        assertEval("{ x<-3:1; x[3L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_24e0839678ff53184f13aac451f05d9b() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- FALSE; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_a768babe3834eb353f8bdbbc5dcb1853() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100L; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_19b22b1bd2dc875eeb3c45d8ae271ab5() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_8d19ad3ebde707a8a24afea2988831d2() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- \"hello\"; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_cb49ea237c8dfc5727aa20681a099848() {
        assertEval("{ x<-c(1L,2L,3L); x[2.3] <- FALSE; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_b0554046fc7b94376cda9158ed1f3ac7() {
        assertEval("{ x<-c(1L,2L,3L); x[2.3] <- 100L; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_ae075ca47374f0c1291ae79fa63d23af() {
        assertEval("{ x<-c(1L,2L,3L); x[2.3] <- 100; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_566b518d7467e4e5873b29132e3f0c4c() {
        assertEval("{ x<-c(1L,2L,3L); x[2.3] <- \"hello\"; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_406a86bbb59de3b836f0e8054a53c744() {
        assertEval("{ x<-c(1,2,3); x[2.3] <- FALSE; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_9436648794460458f137cbdb901a7364() {
        assertEval("{ x<-c(1,2,3); x[2.3] <- 100; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_3e1e4804ea0724943d89e1bc342f2533() {
        assertEval("{ x<-c(1,2,3); x[2.3] <- \"hello\"; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_220169f25a36557f83281221a95ac9d2() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[2.3] <- 100i; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_2e1228f822c8d764370a029ce6b1a96b() {
        assertEval("{ x<-c(1L,2L,3L); x[2.3] <- 100i; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntIndexScalarValueUpdateOnVector_5a2883f80da612378c68a1d156b8d82c() {
        assertEval("{ x<-c(1,2,3); x[2.3] <- 100i; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_d987b0bab057b91dc4dbb9d288e29700() {
        assertEval("{ x<-c(1,2,3); x[-1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_f61b0c694f2a1c64952b4805dc619511() {
        assertEval("{ x<-c(1,2,3); x[-2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_06fdfb25cb463a4982ff81b0ddd646bc() {
        assertEval("{ x<-c(1,2,3); x[-3L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_bdad54fe3eb57cfce34fcb17a305c38c() {
        assertEval("{ x<-c(1L,2L,3L); x[-1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_31bc86d012c2528420c95c9699c76291() {
        assertEval("{ x<-c(1L,2L,3L); x[-2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_2bb7c3b1c0a2756bfdfb047835cfa4dd() {
        assertEval("{ x<-c(1L,2L,3L); x[-3L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_914dbe76b1363b3a653ab03de1b7397e() {
        assertEval("{ x<-1:3; x[-1L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_93b2394f16a362022f712ae941a156da() {
        assertEval("{ x<-1:3; x[-2L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarIntNegativeIndexOnVector_46b1fd34b88de39ac3fec36ebc39c502() {
        assertEval("{ x<-1:3; x[-3L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarLogicOnVector_b97bd3a5c660cddec13778b5a553beca() {
        assertEval("{ x<-c(1,2,3); x[FALSE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarLogicOnVector_770e1bec79da857f0818a7365a9e89c6() {
        assertEval("{ x<-c(1L,2L,3L); x[FALSE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarLogicOnVector_e794493dd1e120a2abbf837dd8704647() {
        assertEval("{ x<-1:3; x[FALSE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarLogicOnVector_c06fc37264eb0d1633a026d1d351b23d() {
        assertEval("{ x<-c(1,2,3); x[TRUE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarLogicOnVector_91059a82ec22d29ecd4bb8b4bf08c536() {
        assertEval("{ x<-c(1L,2L,3L); x[TRUE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarLogicOnVector_ce3de4f7efd43fde26962b2a8de9959c() {
        assertEval("{ x<-1:3; x[TRUE] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_4420fc80abd284a5b9cbbad99963af9a() {
        assertEval("{ x<-c(1,2,3); x[4L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_a093536f6faf2479bf44a7dd699642de() {
        assertEval("{ x<-c(1L,2L,3L); x[4L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_a7602d9a3f27e02bf044bdba9058003d() {
        assertEval("{ x<-1:3; x[4L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_eb6224c3036acec85302edeb40886296() {
        assertEval("{ x<-c(1,2,3); x[4.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_be48270b11aac6ae4e2bd1232a97ad10() {
        assertEval("{ x<-c(1L,2L,3L); x[4.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_9df76bc045f001d3ec10bdce9cbf8cdc() {
        assertEval("{ x<-1:3; x[4.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_c9ad4d81c2417019d4e5dd006a72580c() {
        assertEval("{ x<-c(1,2,3); x[-4L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_795e72c64aead8314a02da48d7807453() {
        assertEval("{ x<-c(1L,2L,3L); x[-4L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_e4c1ea49d9240af294a5334442d0bd34() {
        assertEval("{ x<-1:3; x[-4L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_43b94939f91be20839b11997f0dce845() {
        assertEval("{ x<-c(1,2,3); x[-4.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_d7557382a0a6347e3a263cea223f7381() {
        assertEval("{ x<-c(1L,2L,3L); x[-4.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_efd65d1f3f6d9db2dda269891418e826() {
        assertEval("{ x<-1:3; x[-4.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_fde25c81ef6f8bd6861131419fc22203() {
        assertEval("{ x<-c(1,2,3); x[0L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_54697558d510d2dbb7dca189d04d6f0e() {
        assertEval("{ x<-c(1L,2L,3L); x[0L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_43fde9d2583dc6645bc9f6c8ac50c64c() {
        assertEval("{ x<-1:3; x[0L] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_328c772c04586c56fc2c68a6e28e5853() {
        assertEval("{ x<-c(1,2,3); x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_a7d0261a56f578ca3d0007440c5ce812() {
        assertEval("{ x<-c(1L,2L,3L); x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_0b40f5c092d26309b1d31f0ca31489d9() {
        assertEval("{ x<-1:3; x[0] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_420f33f679daef81a817ed8717324b1a() {
        assertEval("{ x<-c(1,2,3); x[0.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_01272ec62fc2558b3401639bb9d40f14() {
        assertEval("{ x<-c(1L,2L,3L); x[0.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_6c8062c1cfbf7385a786c2748bb41163() {
        assertEval("{ x<-1:3; x[0.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_dbe5deb75b10df713e178073410dcabe() {
        assertEval("{ x<-c(1,2,3); x[NA] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_51dbbfadc930910bb0da1fed33478580() {
        assertEval("{ x<-c(1L,2L,3L); x[NA] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_7dbceeef7aee4ecf90cc31c836880f57() {
        assertEval("{ x<-1:3; x[NA] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_6a116b7dade13ccf6643d7f4c625aeb8() {
        assertEval("{ x<-c(1,2,3); typeof(x[NA]) }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_92b56baa0bb296f5ff5e37ec79a227dc() {
        assertEval("{ x<-c(1L,2L,3L); typeof(x[NA]) }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVector_22a98a1e98696029f5ca586c5101bb8f() {
        assertEval("{ x<-1:3; typeof(x[NA]) }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_56fb30c1f1e1c458babb43d54682aec0() {
        assertEval("{ x<-c(1,2,3); x[-0.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_75ebae7c0fbc6f076571ecc1eca34950() {
        assertEval("{ x<-c(1L,2L,3L); x[-0.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_824bad7757ef4527e818848c9a152ddb() {
        assertEval("{ x<-1:3; x[-0.1] }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_8e6e0905d3f18466c5942fc8ac2ecced() {
        assertEval(" { b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(1:3,13L) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_8b6fc13522cdf6f4d0cf02d060680d02() {
        assertEval("{ x<-1:3; x[1]<-100L; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_5b16e1e09bd196857ca7c2673438f0e0() {
        assertEval("{ x<-c(1,2,3); x[2L]<-100L; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_879d3e3ceda731159cee890b49f830e6() {
        assertEval("{ x<-c(1,2,3); x[2L]<-100; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_5fdd8f957047c5dacce9b716e9ae18c9() {
        assertEval("{ x<-c(1,2,3); x[2]<-FALSE; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_fd9c948d30950bbb61277a17a58c8d83() {
        assertEval("{ x<-1:5; x[2]<-1000; x[3] <- TRUE; x[8]<-3L; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_6513522fc24e58e165174df166e98c09() {
        assertEval("{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,3L) ; f(c(1L,2L),2,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_760eb6b0a0b89ef61c253e1533ee7ba6() {
        assertEval("{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,3L) ; f(c(1L,2L),8,3L) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_68b1c256617f52f412e1466781237d28() {
        assertEval("{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,FALSE) ; f(c(1L,2L),2,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_f7817b4e6d655ebaf416cb9a071a3447() {
        assertEval("{ f<-function(x,i,v) { x<-1:5; x[i]<-v; x} ; f(c(1L,2L),1,FALSE) ; f(c(1L,2L),8,TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_7b38ae1d6c4a011824dd9c615bfa1624() {
        assertEval("{ a <- c(1L,2L,3L); a <- 1:5; a[3] <- TRUE; a }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_4397b431ed996a335efba93a5bcea3cf() {
        assertEval("{ x <- 1:3 ; x[2] <- \"hi\"; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_fb705c5bb52949c2dfc486179b2a713b() {
        assertEval("{ x <- c(1,2,3) ; x[2] <- \"hi\"; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_3d0735e377d3d00945d302612e4f56a5() {
        assertEval("{ x <- c(TRUE,FALSE,FALSE) ; x[2] <- \"hi\"; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_b7f6891dc23ee9f7543c6403cf232b2d() {
        assertEval("{ x <- c(2,3,4) ; x[1] <- 3+4i ; x  }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e5c7558b98bec106ac8ee91a38ae0d84() {
        assertEval("{ b <- c(1,2) ; x <- b ; b[2L] <- 3 ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e5867bd3dce69dc31863b7187efaf73f() {
        assertEval("{ b <- c(1,2) ; b[0L] <- 3 ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_acef3bdc5a6faf81b8009957db79db47() {
        assertEval("{ b <- c(1,2) ; b[0] <- 1+2i ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_5697bde9aa22e4e870849fff9779ebbd() {
        assertEval("{ b <- c(1,2) ; b[5L] <- 3 ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_89c7c10578d5301a452dc16dfb765f71() {
        assertEval("{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),10L) ; f(1,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_f2fbba873f55c58be65c8d58cbee3dec() {
        assertEval("{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),10L) ; f(1L,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_c4076ef7a883ee64afbba80254e35651() {
        assertEval("{ b <- c(1L,2L) ; b[3] <- 13L ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_6ce654f0fb037b297ec15fcc196bf6f0() {
        assertEval("{ b <- c(1L,2L) ; b[0] <- 13L ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_5fea1ce98ca0924f92aad90d3fd81802() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; b <- c(10L,2L) ; b[0] <- TRUE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_35b0cfe096f82dc1fdb1ca2650fbf8d5() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; b <- c(10L,2L) ; b[3] <- TRUE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_7c686858796637d0a128061ced0c51f1() {
        assertEval("{ b <- c(1L,2L) ; b[2] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e230fdc11f0de83c2e748e60d926bdec() {
        assertEval("{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),TRUE) ; f(1L,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_07091220ff11d9a7f376b45f537abcb0() {
        assertEval("{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1L,2L),TRUE) ; f(10,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_cacdee90b945c44d9599ab91c38be195() {
        assertEval("{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(b,13L) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_b6611afefa3e055c7dfae7f0348e480b() {
        assertEval("{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10) ; f(c(1,2),10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_36d886d2e40df6e6584f35829fdec975() {
        assertEval("{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10L) ; f(1:3,13L) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_ec59637bcec790f7073d0f30fc78e3bf() {
        assertEval("{ b <- c(1,2) ; x <- b ; f <- function(b,v) { b[2L] <- v ; b } ; f(b,10L) ; f(b,13) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_ed85c76612c3c039db326f7d457747ff() {
        assertEval("{ b <- c(1,2) ; z <- b ; b[3L] <- 3L ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_cff4502766410612f5722a773f57b7bd() {
        assertEval("{ b <- c(1,2) ; z <- b ; b[3L] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e4465b9a2e0c53f4a7e9babcc83520b7() {
        assertEval("{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1,2),FALSE) ; f(10L,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e6475151cea360d7a874b96ea142dc0a() {
        assertEval("{ f <- function(b,v) { b[2] <- v ; b } ; f(c(1,2),FALSE) ; f(10,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_db28f6d6dc433008570130fc134fcf7f() {
        assertEval("{ f <- function(b,v) { b[2] <- v ; b } ; f(c(TRUE,NA),FALSE) ; f(c(FALSE,TRUE),3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_0a3546a3da8a6df496529dc38a8d46e0() {
        assertEval("{ f <- function(b,v) { b[2] <- v ; b } ; f(c(TRUE,NA),FALSE) ; f(3,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_77b051a5b0630662ff0917a0f02b7010() {
        assertEval("{ f <- function(b,v) { b[[2]] <- v ; b } ; f(c(\"a\",\"b\"),\"d\") ; f(1:3,\"x\") }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_c437f31d077e4f162746db775e1eae68() {
        assertEval("{ b <- c(\"a\",\"b\") ; z <- b ; b[[3L]] <- \"xx\" ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_09adda5c97bee3d85cb1bc08ce20a710() {
        assertEval("{ x <- as.list(1:2) ; x[[\"z\"]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_1516ce41d7ffe7190bcb5b25ead6f4ee() {
        assertEval("{ x<-5:1; x[0-2]<-1000; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_fba39d3c63512edc6a7cf0378160d969() {
        assertEval("{ x<-c(); x[[TRUE]] <- 2; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_0cd0b0064b782821b8c7c39a236dbc93() {
        assertEval("{ x<-1:2; x[[0-2]]<-100; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_bfc98a1a775330f146d70efdf98155e4() {
        assertEval("{ b <- c(1,2) ; z <- b ; b[-2] <- 3L ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_98bbfef0763d8f1cab8e43f53d326c93() {
        assertEval("{ b <- c(1,2) ; z <- b ; b[-10L] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_95e0f2b02375bec15818d8b352eff125() {
        assertEval("{ b <- c(TRUE,NA) ; z <- b ; b[-10L] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_d3162fe4be286e1955bafb743e92b7ab() {
        assertEval("{ b <- c(TRUE,NA) ; z <- b ; b[4L] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e851812a13785b522177bf6f8eaed4b2() {
        assertEval("{ b <- list(TRUE,NA) ; z <- b ; b[[4L]] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_7e535f1fe8c0e3025eb48b2d6b3b2166() {
        assertEval("{ b <- list(TRUE,NA) ; z <- b ; b[[-1L]] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_287f44db28e43d6a19fd4203e8578546() {
        assertEval("{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(3,3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_ed0b6d40724bc9d00c060097f577deaa() {
        assertEval("{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(list(3),NULL) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_d7243a02eb759376db48acb9c7495355() {
        assertEval("{ f <- function(b,v) { b[[2]] <- v ; b } ; f(list(TRUE,NA),FALSE) ; f(list(),NULL) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_41f085cedcfebff98ca2a5d2bab855f4() {
        assertEval("{ b <- c(\"a\",\"b\") ; z <- b ; b[[-1L]] <- \"xx\" ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_eae903d16764c465fae7c81ca0349474() {
        assertEval("{ b <- c(1,2) ; b[3] <- 2+3i ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_2b6757962f461360d90b42355bab4b21() {
        assertEval("{ b <- c(1+2i,3+4i) ; b[3] <- 2 ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_a9edb417f38dc2568a4fdcce3bfd6ee3() {
        assertEval("{ b <- c(TRUE,NA) ; b[3] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_068ba6690f99b629bbe682042335907b() {
        assertEval("{ b <- as.raw(c(1,2)) ; b[3] <- as.raw(13) ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_59d1b91c04f4ca4f67683ed08e843ae7() {
        assertEval("{ b <- as.raw(c(1,2)) ; b[as.double(NA)] <- as.raw(13) ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_1ffb8c5e883b8bf91aa538a5f4d220bb() {
        assertEval("{ b <- as.raw(c(1,2)) ; b[[-2]] <- as.raw(13) ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_cd23a14fa39c5a10a6e36a79db1fe61c() {
        assertEval("{ b <- as.raw(c(1,2)) ; b[[-1]] <- as.raw(13) ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_b92849ae98b7565295dea93b8d4793c0() {
        assertEval("{ x <- c(a=1+2i, b=3+4i) ; x[\"a\"] <- 10 ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_9813b046264cd033c8c326524b01e8d2() {
        assertEval("{ x <- as.raw(c(10,11)) ; x[\"a\"] <- as.raw(13) ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_a3706cf0ecf4156cb325186f3ba447b5() {
        assertEval("{ x <- 1:2 ; x[\"a\"] <- 10+3i ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_0916411a0792e5905ebd846ea5400c29() {
        assertEval("{ x <- c(a=1+2i, b=3+4i) ; x[\"a\"] <- \"hi\" ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_2d98f6458019419db8ccdd71ceeab7e1() {
        assertEval("{ x <- 1:2 ; x[\"a\"] <- 10 ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_700d0e26aef40368482e1a14d19b54e0() {
        assertEval("{ x <- c(a=1,a=2) ; x[\"a\"] <- 10L ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e2ae7fb13556e39f9289216c5fbe79b1() {
        assertEval("{ x <- 1:2 ; x[\"a\"] <- FALSE ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_6fc1510cfd7c006e8a912e1671971dc2() {
        assertEval("{ x <- c(aa=TRUE,b=FALSE) ; x[\"a\"] <- 2L ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_6058b61140ee06ea8ee2227d1624bff0() {
        assertEval("{ x <- c(aa=TRUE) ; x[[\"a\"]] <- list(2L) ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_6381a2f9c4009355ab756e7b6fd00f27() {
        assertEval("{ x <- c(aa=TRUE) ; x[\"a\"] <- list(2L) ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_6fda0f6224a3768ce6c4528a028d876f() {
        assertEval("{ x <- c(b=2,a=3) ; z <- x ; x[\"a\"] <- 1 ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_96747cf328bcda8d480b4933f3fbd06d() {
        assertEval("{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[[3]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_85c6524b9cd048047d9459b2ee4162a9() {
        assertEval("{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[3] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_fa7d79194cee9353e9a1c5ed0fd99030() {
        assertEval("{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[2] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e16c530517ace801566b228f09c05555() {
        assertEval("{ x <- list(1,2) ; dim(x) <- c(2,1) ; x[[2]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_88cd04f30ca7f57580810d3b38e87a56() {
        assertEval("{ x <- list(1,2) ; x[0] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e326e218c4a0ad4809bbb03d95f99d3f() {
        assertEval("{ x <- list(1,2) ; x[NA] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_c8b80e30ebc723cc1687b326c0dbd714() {
        assertEval("{ x <- list(1,2) ; x[as.integer(NA)] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_07ddaa1b0bef9cb2f000e823cc10cd64() {
        assertEval("{ x <- list(1,2) ; x[-1] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_73b3ef0cadcf0155e0fa48188e105238() {
        assertEval("{ x <- list(3,4) ; x[[-1]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_5d3b89a0e736ebb6b3ede5606165db2c() {
        assertEval("{ x <- list(3,4) ; x[[-2]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_f490d19ba1685f69c0f8cf16f5c576cf() {
        assertEval("{ x <- list(a=3,b=4) ; x[[\"a\"]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_360c2b664487b9e657393bf83af15aab() {
        assertEval("{ x <- list(a=3,b=4) ; x[\"z\"] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_b1fc14cec6fb9378d456bd97fa340ad0() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:2,\"hi\",3L) ; f(1:2,-2,10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_d7c0586ebe0e3e94c6d0a9ab113c2899() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(1:2,\"hi\",3L) ; f(1:2,2,10) ; f(1:2,as.integer(NA), 10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_01f92837efb935610413a74c701011e7() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,\"hi\",3L) ; f(1:2,c(2),10) ; f(1:2,2, 10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_69b9e2ceb3a5b23bf18f03992b4e33d8() {
        assertEval("{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[3] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_86242473cde6cae942caf5e96cfdc0ed() {
        assertEvalError(" { x <- as.raw(c(10,11)) ; x[\"a\"] <- NA ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_11bbf13cd150265efe922bf333149e5e() {
        assertEvalError(" { x <- c(a=1+2i, b=3+4i) ; x[\"a\"] <- as.raw(13) ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_e477ca2490aca17f6d679ee10e03ceb4() {
        assertEvalError("{ x[3] <<- 10 }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_d3c3a8bf3f8f61cc3da1a605c1ae2a75() {
        assertEvalError("{ f <- function() { a[3] <- 4 } ; f() }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_f2c88bbd64008e434cf221d0733b708b() {
        assertEvalError("{ b <- as.raw(c(1,2)) ; b[3] <- 3 ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_bc0b56938a5819cdc8609b3c13b03771() {
        assertEvalError("{ b <- c(1,2) ; b[3] <- as.raw(13) ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_72fad591b0bc7a6459c56705eb534968() {
        assertEvalError("{ b <- as.raw(c(1,2)) ; b[[-3]] <- as.raw(13) ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_71d20d0b5ed6ecc4c7593baac455d304() {
        assertEvalError("{ b <- as.raw(1) ; b[[-3]] <- as.raw(13) ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_8a2006e6c8daf17fed16797f2942035e() {
        assertEvalError("{ b <- as.raw(c(1,2,3)) ; b[[-2]] <- as.raw(13) ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_2699c4ed4193ac15a24a972c48bf1ca4() {
        assertEvalError("{ f <- function(b,i) { b[i] <- 1 } ; f(1:3,2) ; f(f, 3) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_6260b86ea2fc061ba85e805105874a62() {
        assertEvalError("{ f <- function(b,i) { b[i] <- 1 } ; f(1:3,2) ; f(1:2, f) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_5f45d32b5b8d5cf5e353115ccb5d396c() {
        assertEvalError("{ f <- function(b,v) { b[2] <- v } ; f(1:3,2) ; f(1:2, f) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_97b15de22e1d258a8ef36b1003b3b24f() {
        assertEvalError("{ x <- list(1,2) ; x[[0]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_d4d9108a48aa07b8b546b6c17db77782() {
        assertEvalError("{ x <- list(1,2,3) ; x[[-1]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_fb459b7a5e9ab9b6f13b0d3867ca38a5() {
        assertEvalError("{ x <- list(1,2,3) ; x[[-5]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_ca9e562efaeaee4ea3ec5bb77022a370() {
        assertEvalError("{ x <- list(1) ; x[[-2]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_7f268186425145a348dae1bd433fb1f6() {
        assertEvalError("{ x <- list(1) ; x[[-1]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_2478e3df555252e501a817519339308e() {
        assertEvalError("{ x <- list(3,4) ; x[[-10]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_1ed0262879c8fed775c33cc17879dfef() {
        assertEvalError("{ x <- 1:2; x[[as.integer(NA)]] <- 10 ; x }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_7646c2822df116ef3b7f44412b9bb139() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; v } ; f(1:2,\"hi\",3L) ; f(1:2,c(2),10) ; f(1:2,as.integer(NA), 10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_4e6c90f74e044e44e246aefb64415b9f() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,\"hi\",3L) ; f(1:2,c(2),10) ; f(1:2,0, 10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_47685573f1e5dbe725ec41ce2f33415e() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,\"hi\",3L) ; f(1:2,2,10) ; f(1:2,1:3, 10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_ad5342fcc8975e60a34efea30e8babeb() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,\"hi\",3L) ; f(1:2,2,10) ; f(as.list(1:2),1:3, 10) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdate_800f4af3f0feda75c8b259ad846f4937() {
        assertEvalWarning("{ b <- c(1,2) ; z <- c(10,11) ; attr(z,\"my\") <- 4 ; b[2] <- z ; b }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdateIgnore_ea7d1aaf03e73608bdd0d9114c96e3a8() {
        assertEvalError("{ f <- function(b,v) { b[[2]] <- v ; b } ; f(c(\"a\",\"b\"),\"d\") ; f(c(\"a\",\"b\"),NULL) }");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdateIgnore_5d198ef5c0421165963dc6da0d622857() {
        assertEvalError("{ x <- 4:10 ; x[[\"z\"]] <- NULL ; x }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_f87f94af38ac07f3ec7eeef63f9e6c5b() {
        assertEval("{ x<-c(1L,2L,3L); x[1:3] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_72a246974ad03d0631cdfcec7fa15812() {
        assertEval("{ x<-c(1L,2L,3L); x[1:2] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_a5c7528e0c93b870a0ebf43e500f1f5c() {
        assertEval("{ x<-c(1L,2L,3L); x[2:3] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_6059427aca51482301c13e3d036252ac() {
        assertEval("{ x<-c(1L,2L,3L); x[1:1] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_3af98990dca78bc5cbd813c711e3031e() {
        assertEval("{ x<-c(1L,2L,3L); x[0:3] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_0c72fe749ea5f7a9af012e00b32e92b4() {
        assertEval("{ x<-c(1,2,3); x[1:3] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_b664ec8d1c5d0b69173e9cd6f31c6d61() {
        assertEval("{ x<-c(1,2,3); x[1:2] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_cf37af8bafe041e6819b0a77b2858cfb() {
        assertEval("{ x<-c(1,2,3); x[2:3] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_d36a31b65d4fe2351d9413634e8a68db() {
        assertEval("{ x<-c(1,2,3); x[1:1] }");
    }

    @Test
    public void TestSimpleVectors_testSequenceIntIndexOnVector_542954c947aa234e6f838c1d464d4b2b() {
        assertEval("{ x<-c(1,2,3); x[0:3] }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_04dd040eb2169fe380ffccd8c938f936() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(1:3,\"a\",4) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_f21a624532eed1d675234ce25aaa2bd4() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(NULL,\"a\",4) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_bafd686b1681f29b7d44db9d25af274c() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(NULL,c(\"a\",\"X\"),4:5) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_defc66b21c157803ff71db40d58d2d9d() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(double(),c(\"a\",\"X\"),4:5) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_29ce0ae561f19f3d09c4dc651d2970f1() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(double(),c(\"a\",\"X\"),list(3,TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_dac9b308751c7c38199bc8bf25ac93b5() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(11:13),c(\"a\",\"X\"),list(3,TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_f965bd09034ad4389fa52695a15e6b01() {
        assertEval("{ b <- c(11,12) ; b[\"\"] <- 100 ; b }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_d9917231155acd7416cc8a85cc717000() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(1,a=2),c(\"a\",\"X\",\"a\"),list(3,TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_f11755d762e9ef159acc635ed47dd77f() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c(\"a\",\"X\",\"a\"),list(3,TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_b83220dcfa819d5242db01ba3fecf03e() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),as.character(NA),as.complex(23)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_919b1dc44ca6a21451268dfaf228c669() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),character(),as.complex(23)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_9be8133d1385917a65d1536ed7c04e05() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),c(\"\",\"\",\"\"),as.complex(23)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_58f1ce6bdefdfa1e82ae52d5251a3642() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.complex(c(13,14)),c(\"\",\"\",NA),as.complex(23)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_726ca56243c5b31dc6353d6283f93dd4() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(c(13,14)),c(\"a\",\"X\",\"a\"),as.raw(23)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_4bdda40e8292b1ec15f0a7ea8da3e1b2() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c(\"X\",\"b\",NA),list(3,TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_b6c9fb4353a2d30421ea074892567475() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c(\"X\",\"b\",NA),as.complex(10)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_67de1a7f667ccbe9df399b861d8a7778() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c(\"X\",\"b\",NA),1:3) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_d5f7bf583d66c76ff0eb584d1095b89d() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1L,a=2L),c(\"X\",\"b\",NA),c(TRUE,NA,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_2f20afd1c787c8770cdf17eba8351445() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(list(X=1L,a=2L),c(\"X\",\"b\",NA),NULL) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_67cbb94b38b7c299bdf566625150d25d() {
        assertEval("{ b <- c(a=1+2i,b=3+4i) ; dim(b) <- c(2,1) ; b[c(\"a\",\"b\")] <- 3+1i ; b }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_288c45431beb53217738e85c6810b820() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(1L,2L) ; attr(b,\"my\") <- 21 ; f(b,c(\"X\",\"b\",NA),NULL) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_b9dd3e19248b0a0f6bd00be0c36a0f61() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(b=1L,2L) ; attr(b,\"my\") <- 21 ; f(b,c(\"X\",\"b\",NA),NULL) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_759b06ffb7b2d1a031772f2245984863() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; b <- list(b=1L,2L) ; attr(b,\"my\") <- 21 ; f(b,c(\"ZZ\",\"ZZ\",NA),NULL) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_2c73425a8453c9bcad083b8f33ae6591() {
        assertEval("{ b <- list(1+2i,3+4i) ; dim(b) <- c(2,1) ; b[c(\"hello\",\"hi\")] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_dff56fd25747041574656cf30f3969a0() {
        assertEval("{ a <- 'hello'; a[[5]] <- 'done'; a[[3]] <- 'muhuhu'; a; }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_6318de4011edc9ab9ad909c87f47357e() {
        assertEval("{ a <- 'hello'; a[[5]] <- 'done'; b <- a; b[[3]] <- 'muhuhu'; b; }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_a3c4465b74a83763136b074639150397() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(as.raw(c(13,14)),c(\"a\",\"X\",\"a\"),c(3,TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_1fc4ff687d23d0ada3a07d3cae6350bd() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c(\"X\",\"b\",NA),as.raw(10)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_a0768f399d4477f4a763b9d1273171e2() {
        assertEvalError("{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1L,a=2L),c(\"X\",\"b\",NA),NULL) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_5c20aceeb6e5236ec88efed5c1fec386() {
        assertEvalWarning("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,3:1,4:6) ; f(c(X=1,a=2),c(\"a\",\"X\",\"a\",\"b\"),list(3,TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testStringUpdate_8f118953ceadc684e87681bfe249ef23() {
        assertEvalWarning("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1+2i,3:1,4:6) ; f(c(X=1,a=2),c(\"X\",\"b\",NA),c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testSuperUpdate_74f7675230b3e29fa70ac5e28d9db039() {
        assertEval("{ x <- 1:3 ; f <- function() { x[2] <<- 100 } ; f() ; x }");
    }

    @Test
    public void TestSimpleVectors_testSuperUpdate_10ce79326af7e07dc8525793ffb4c8bc() {
        assertEval("{ x <- 1:3 ; f <- function() { x[2] <- 10 ; x[2] <<- 100 ; x[2] <- 1000 } ; f() ; x }");
    }

    @Test
    public void TestSimpleVectors_testUpdateOther_8f47617a6b12ce7fa5b41d5ce455b89e() {
        assertEval("{ x<-c(1,2); f<-function() { x<-c(100, 200); x[1]<-4; print(x) } ; f(); x }");
    }

    @Test
    public void TestSimpleVectors_testUpdateOther_2a527d7409757c6f8ae809606cf60294() {
        assertEval("{ x<-c(1,2); f<-function() { x<-c(100, 200); x[1]<<-4; print(x) } ; f(); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_1d6d1e8273a075727e7f7ee39bf9060e() {
        assertEval(" { f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_89bfe7fcf10b4e29a54200e286cfc35b() {
        assertEval("{ x<-1:5 ; x[3:4] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_038f8130e57e9b029bf4b9be8f223309() {
        assertEval("{ x<-1:5 ; x[4:3] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_c5f21663e9b4358771bc856b2e954943() {
        assertEval("{ x<-c(1,2,3,4,5) ; x[4:3] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_6294aa6aa11da33aad4542c1b41e75a8() {
        assertEval("{ (1:5)[3:4] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_e159bad694b11a98bd87ecab70cb33d2() {
        assertEval("{ x<-(1:5)[2:4] ; x[2:1] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_b134fcba1bb5376ea04f0c07c5440557() {
        assertEval("{ x<-1:5;x[c(0-2,0-3)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_9a24c680cb03f7fc0a65c45c58c35b90() {
        assertEval("{ x<-1:5;x[c(0-2,0-3,0,0,0)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_69262108a14f4dd23aa3534682e10a09() {
        assertEval("{ x<-1:5;x[c(2,5,4,3,3,3,0)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_77654a46937a1e3d1c705d9e9f24ad23() {
        assertEval("{ x<-1:5;x[c(2L,5L,4L,3L,3L,3L,0L)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0f8f9d829a0a4aa8696219c8234d12ff() {
        assertEval("{ f<-function(x, i) { x[i] } ; f(1:3,3:1) ; f(1:5,c(0,0,0,0-2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_6563f81f22a1a2f3a1bcd43790ae540b() {
        assertEval("{ f<-function(x, i) { x[i] } ; f(1:3,0-3) ; f(1:5,c(0,0,0,0-2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_7841d50376f3b003ba259a909d9f9d89() {
        assertEval("{ f<-function(x, i) { x[i] } ; f(1:3,0L-3L) ; f(1:5,c(0,0,0,0-2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_8f9eb3b677a98fcca4093568fd2f6806() {
        assertEval("{ x<-1:5 ; x[c(TRUE,FALSE)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_fe16cd33ba64644aa58087446523a555() {
        assertEval("{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(1L) ; f(TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_7194d998da3cc9c3b40f1de1bdff1038() {
        assertEval("{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(TRUE) ; f(1L)  }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_59f7f0ba74c9a57502cccbe94a6ae0eb() {
        assertEval("{ f<-function(i) { x<-1:5 ; x[i] } ; f(1) ; f(TRUE) ; f(c(3,2))  }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_131179270ce4f6c5bc33e965bc0dd1f8() {
        assertEval("{ f<-function(i) { x<-1:5 ; x[i] } ; f(1)  ; f(3:4) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_fa8b22ee08dda896a304f531518829d5() {
        assertEval("{ f<-function(i) { x<-1:5 ; x[i] } ; f(c(TRUE,FALSE))  ; f(3:4) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_c10170c362d9184b48bcd3d2191d5aa9() {
        assertEval("{ x <- 1;  y<-c(1,1) ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_19cbce3cfec49b2bbdeabf71b3e750d8() {
        assertEval("{ x <- 1L;  y<-c(1,1) ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_e8b5e6259ff56e2e9090a309cb4c42db() {
        assertEval("{ x <- c(1,2,3,2) ; x[x==2] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_c656fe910ffd3c52bc68e9c72a7f8c34() {
        assertEval("{ x <- c(1,2,3,2) ; x[c(3,4,2)==2] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0af9433d33250581cf2ced5feb7ed146() {
        assertEval("{ x <- c(as.double(1:2000)) ; x[c(1,3,3,3,1:1996)==3] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_95c002a0ab074a3e60bb9ac1c84d9cef() {
        assertEval("{ x <- c(as.double(1:2000)) ; sum(x[rep(3, 2000)==3]) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_3edc24d04fed3fc7d8f955bc1fc5d003() {
        assertEval("{ x <- c(1,2,3,2) ; x[c(3,4,2,NA)==2] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_9f5ad5b66c3181749fc3d13839ba5b15() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(1:3,3:1) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_bb3a6b5ff8f80d80d3c2ce954ecc989b() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_54bd55084aee7eae8dbb8fddcf0560a6() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,NULL) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_afb5f2d66fc95a3a31b530cf041c2ed6() {
        assertEval("{ x <- \"hi\";  y<-c(1,1) ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_735c444595fe843fd5efb95ee1f0a3bd() {
        assertEval("{ l <- list(1,function(){3}) ; f <- function(i) { l[[i]] } ; f(c(2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_7a6d17fe063a5585f7aa59e7f27b18bf() {
        assertEval("{ a <- c(1,2,3) ; x <- integer() ; a[x] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_1f99c587df8881ae8bb4134fbb911f66() {
        assertEval("{ f <- function(i) { l[[i]] } ; l <- list(1, as.list(1:3)) ; f(c(2,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_643519b0c5955f38e43859fb87074617() {
        assertEval("{ x<-1:5 ; x[c(TRUE,TRUE,TRUE,NA)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_faa1957919a5c0f09bb51d732dce723a() {
        assertEval("{ x<-1:5 ; x[c(TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,NA)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_eb8919c4f7927219c30b474aa7e88581() {
        assertEval("{ x<-as.complex(c(1,2,3,4)) ; x[2:4] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_82df4ecb0270888e2f978c9dd14d807c() {
        assertEval("{ x<-as.raw(c(1,2,3,4)) ; x[2:4] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_c643b834c198e654256294f03e0def64() {
        assertEval("{ x<-c(1,2,3,4) ; names(x) <- c(\"a\",\"b\",\"c\",\"d\") ; x[c(10,2,3,0)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0b905d5671476c428b89d1f53a9ff957() {
        assertEval("{ x<-c(1,2,3,4) ; names(x) <- c(\"a\",\"b\",\"c\",\"d\") ; x[c(10,2,3)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_5893865439ae18e5e702e6c6ee21e280() {
        assertEval("{ x<-c(1,2,3,4) ; names(x) <- c(\"a\",\"b\",\"c\",\"d\") ; x[c(-2,-4,0)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_4125235d5782f62ad9c991f92f40e9b6() {
        assertEval("{ x<-c(1,2) ; names(x) <- c(\"a\",\"b\") ; x[c(FALSE,TRUE,NA,FALSE)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_52b22acb2389bb8429f984c35c1909c4() {
        assertEval("{ x<-c(1,2) ; names(x) <- c(\"a\",\"b\") ; x[c(FALSE,TRUE)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_3f82bbe7484aff9273391843a15be6b0() {
        assertEval("{ x <- c(a=1,b=2,c=3,d=4) ; x[character()] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0065b5b7400cf013c14e5a52edae7c26() {
        assertEval("{ x <- c(a=1,b=2,c=3,d=4) ; x[c(\"b\",\"b\",\"d\",\"a\",\"a\")] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_31bb531d3fe326a293bcc0d468cddd90() {
        assertEval("{ x <- c(a=as.raw(10),b=as.raw(11),c=as.raw(12),d=as.raw(13)) ; f <- function(s) { x[s] } ; f(TRUE) ; f(1L) ; f(as.character(NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_a27e0679014fc2205b2185697e43c02d() {
        assertEval("{ x <- c(a=1,b=2,c=3,d=4) ; f <- function(s) { x[s] } ; f(TRUE) ; f(1L) ; f(\"b\") }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_3241bcf9c83bf8c4462688c1ff8b6612() {
        assertEval("{ x <- c(a=as.raw(10),b=as.raw(11),c=as.raw(12),d=as.raw(13)) ; f <- function(s) { x[c(s,s)] } ; f(TRUE) ; f(1L) ; f(as.character(NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_f0c931241c541153b0b5b028b1fe5e02() {
        assertEval("{ x <- c(a=1,b=2,c=3,d=4) ; f <- function(s) { x[c(s,s)] } ; f(TRUE) ; f(1L) ; f(\"b\") }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_b4259fbeeaa0bfc21bc675e1b5cea0bd() {
        assertEval("{ x <- TRUE;  y<-c(1,1) ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_14daed4b8b79de4293a49f88a9919501() {
        assertEval("{ x <- 1+2i;  y<-c(1,2) ; x[y] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_cac9c05f0cc2b26b012547de6b90f3b4() {
        assertEval("{ f<-function(x,l) { x[l == 3] } ; f(c(1,2,3), c(1,2,3)) ; f(c(1,2,3), 1:3) ; f(1:3, c(3,3,2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_44308cd20aba8b285780210d692923db() {
        assertEval("{ x <- c(TRUE,FALSE,TRUE) ; x[2:3] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_f820e4fafb91b266952b6857e18db781() {
        assertEval("{ x <- c(1+2i,3+4i,5+6i) ; x[2:3] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_2eeb14b57745c41d034b9f732f972faf() {
        assertEval("{ x <- c(1+2i,3+4i,5+6i) ; x[c(2,3,NA)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_cfc3eda027a4daae92cd3b1403344c9e() {
        assertEval("{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_54938dbc2f6c8729cd244697eab1c0b5() {
        assertEval("{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5,-5)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_bd8b72e0a38ef6459ea655c69b7ff87e() {
        assertEval("{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,-4,-5,-2)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_8ed99a09915af3df44584ef575c99794() {
        assertEval("{ x <- c(TRUE,FALSE,TRUE) ; x[integer()] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_63e58b086646f4c3a054f7d87a3a616f() {
        assertEval("{ x <- c(a=1,x=2,b=3,y=2) ; x[c(3,4,2)==2] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_65b28532c10612a4bb2f96f94801105c() {
        assertEval("{ x <- c(a=1,x=2,b=3,y=2) ; x[c(3,4,2,1)==2] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_69dac9a3e48d65b697721b9c6bcfb717() {
        assertEval("{ x <- c(as.double(1:2000)) ; x[c(NA,3,3,NA,1:1996)==3] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_1e261da4e69f779d9c82578ed77f39a7() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(c(a=1,b=2,c=3),3:1) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_a7b7afc04413ecc554d9183e260e2e41() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_9d5e7084ede07e2d50f2300a5ccb322c() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,NA,NA,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_1b5511da875e829853723e757b2f6da3() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), c(TRUE,NA,FALSE,FALSE,TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_eb5090ef54b605e24be46e92eef4d3bb() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(1:3, logical()) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_a62770e869d141739eb075b2b6addee1() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(c(a=1L,b=2L,c=3L), logical()) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_9ee97bff55e650fb561b0d22c4b5422f() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(c(a=1,b=2,c=3), character()) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_ee23eb8ee388a34f219353f2c7414939() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(c(1,2,3), character()) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_7fc57744e5dd22496ea5f0e4df11c9e0() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(c(1,2,3), c(\"hello\",\"hi\")) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_bb136bd4d4bf0afb476b89ab443ad8b3() {
        assertEval("{ f <- function(b,i) { b[i] } ; f(1:3, c(\"h\",\"hi\")) ; f(1:3,TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_c81b30fb22fb65b68927dd94af59416c() {
        assertEval("{ x <- list(1,2,list(3)) ; x[[c(3,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_bbfbf9712df6115c37def0342db7c966() {
        assertEval("{ x <- list(1,2,list(3)) ; x[[c(3,NA)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_17482c2faac21387879ad6743e11ecc6() {
        assertEval("{ x <- list(1,list(3)) ; x[[c(-1,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_e5cba9fa5b94fb314f5ea0d3270cd1fb() {
        assertEval("{ l <- list(1,list(2)) ; f <- function(i) { l[[i]] } ; f(c(2,1)) ; f(1) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0d8ef2c07f8ababba9bd39e38e6a6ff2() {
        assertEval("{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-1)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_e95d94c457262de899bbeb0481bad9dc() {
        assertEval("{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_de2c32e732c7d63bb027111d547305f8() {
        assertEval("{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c(\"d\",\"x\")]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_96b89e028115903f0bc864c81c62ad56() {
        assertEval("{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c(\"d\",NA)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_88d69a07809ca2dc7bb20b2f7d783391() {
        assertEval("{ x <- list(a=1,b=2,d=list(x=3)) ; f <- function(i) { x[[i]] } ; f(c(\"d\",\"x\")) ; f(\"b\") }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_c2871393cc9204f0b163a30c9426d95a() {
        assertEvalError("{ a <- c(1,2,3) ; x <- integer() ; a[[x]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_581ec67c581f25855da44378c8c9b077() {
        assertEvalError("{ x <- function(){3} ; x[3:2] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_4bfcc3740bcd67bbb835a0da19a68128() {
        assertEvalError("{ x <- c(1,2,3) ; x[-1:2] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_5ae4c806c752b28de4a87cfb64d2c215() {
        assertEvalError("{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,3,NA)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_e85cd675b20437c2b3c42ef5a701c6aa() {
        assertEvalError("{ x <- c(1+2i,3+4i,5+6i) ; x[c(-2,-3,NA)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_3206fa39bd2d947d5c47594c6ba5230c() {
        assertEvalError("{ f <- function(b,i) { b[i] } ; x <- c(1+2i,3+4i,5+6i) ; f(x,c(1,2)) ; f(x,c(1+2i)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_937b553693e061e2659bfa8c8cce00f4() {
        assertEvalError("{ x <- list(1,2,list(3)) ; x[[c(4,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_be992a2209eb4108599af0e01753e57f() {
        assertEvalError("{ x <- list(1,2,list(3)) ; x[[c(NA,1)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_14109cd35e7f11e5dadece496ccfe9d2() {
        assertEvalError("{ l <- list(1,list(2)) ; l[[integer()]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_38d87c248daa2317107b01e6401055b7() {
        assertEvalError("{ l <- list(1,NULL) ; f <- function(i) { l[[i]] } ; f(c(2,1)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_2f6239337e763cea6b37f55978bcd5b0() {
        assertEvalError("{ f <- function(i) { l[[i]] } ; l <- list(1, 1:3) ; f(c(2,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_48f81853d07173ea86329d48f6502165() {
        assertEvalError("{ f <- function(i) { l[[i]] } ; l <- list(1, 1:3) ; f(c(2,-4)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_79a6931134d204e038e8a9165254f361() {
        assertEvalError("{ f <- function(i) { l[[i]] } ; l <- list(1, 2) ; f(c(2,-1)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0e83dcb18a9ab495b9068641d3bdac70() {
        assertEvalError("{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,-4)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0c12312d7bb73f882fa41607af3894dd() {
        assertEvalError("{ f <- function(i) { l[[i]] } ; l <- list(1, c(2,3)) ; f(c(2,0)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_155a3df70f3fa7baa994ed5d784ff331() {
        assertEvalError("{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c(\"z\",\"x\")]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_a64710a5ce41a31720020179bd49c369() {
        assertEvalError("{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c(\"z\",NA)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_548faeb03e49dca38cd7c1c87b9509d9() {
        assertEvalError("{ x <- list(a=1,b=2,d=list(x=3)) ; x[[c(NA,\"x\")]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_98751d056799576e09fef87ea4e41612() {
        assertEvalError("{ x <- list(a=1,b=2,d=list(x=3)) ; x[[character()]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_f47a43ac796ee5aff9bfd960d2752d3e() {
        assertEvalError("{ x <- c(a=1,b=2) ; x[[c(\"a\",\"a\")]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_1cfa555a6e4539e74b584e0e4a2cc41e() {
        assertEvalError("{ x <- list(1,2) ; x[[c(\"a\",\"a\")]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_5712dd96758146fe2cea795860a7179c() {
        assertEvalError("{ x <- list(a=1,b=1:3) ; x[[c(\"b\",\"a\")]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_42764d14cd8f86e1e754496ce6edbce9() {
        assertEvalError("{ x <- list(a=1,b=1:3) ; x[[2+3i]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_00f7760c3670c4fb3c64fe8037e366fd() {
        assertEvalError("{ x <- list(a=1,b=1:3) ; f <- function(i) { x[[i]] } ; f(c(2,2)) ; f(2+3i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_72b52a394176ae2a8269b374f9a704ab() {
        assertEvalError("{ x <- 1:3; x[list(2,3)] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0a19d077b896c90a40db6876574efacd() {
        assertEvalError("{ x <- 1:3; x[function(){3}] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_959c720b9a9af388413220debc100a6e() {
        assertEvalError("{ x <- 1:2; x[[list()]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_ab60e544ad965d3efeeeb62b50846f55() {
        assertEvalError("{ x <- 1:2; x[[list(-0,-1)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_5760451f35992103d657f61892e571b7() {
        assertEvalError("{ x <- 1:2; x[[list(0)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_1c06ce49529ccdcf03d647c455cca8c8() {
        assertEvalError("{ f <- function(b,i) { b[[i]] } ; f(list(1,list(2)),c(2,1)) ; f(1:3,list(1)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_a5e5ece2c7207c07bb19205c9a14d9e4() {
        assertEvalError("{ f <- function(b,i) { b[i] } ; f(1:3,c(2,1)) ; f(1:3,as.raw(c(10,11))) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_51b0ed6271015b73d982d933a45bce21() {
        assertEvalError("{ l <- list(1,2) ; l[[c(1,1,2,3,4,3)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_37d698bcf08fa46b31d198a2e2a7f095() {
        assertEvalError("{ l <- list(list(1,2),2) ; l[[c(1,1,2,3,4,3)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_3bc7f294454f97d9cb11d6e1b5558c0c() {
        assertEvalError("{ f <- function(b) { b[integer()] } ; f(c(TRUE,FALSE,TRUE)) ; f(f) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_9d704c58dc70d171339e0ed2af90602f() {
        assertEvalError("{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE,TRUE)) ; f(function(){2},3:1) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_6ebbd3a2fad58c0c250e5c792d87ebb8() {
        assertEvalError("{ f <- function(b,i) { b[i] } ; f(1:3, c(TRUE,FALSE)) ; f(f, c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_94102136bcc491dd4cef2d68b5ab0304() {
        assertEvalError("{ f <- function(b,i) { b[i] } ; f(1:3, c(\"h\",\"hi\")) ; f(function(){3},\"hi\") }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_0969e3058322c4ae7f7a03d5dd02e033() {
        assertEvalError("{ f <- function(i) { l[[i]] } ; l <- list(1, f) ; f(c(2,1)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_2d2bb6829bd147ff70ac0628fe64b80e() {
        assertEvalError("{ x <- list(a=1,b=function(){3},d=list(x=3)) ; x[[c(2,10)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_41b05c97e57278ac385535fb4f47222f() {
        assertEvalError("{ x <- list(a=1,b=function(){3},d=list(x=3)) ; x[[c(2,-3)]] }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_f18bf8d7ed8664f5b3cd440109c89865() {
        assertEvalError("{ x <- list(a=1,b=function(){3},d=list(x=3)) ; f <- function(i) { x[[i]] } ; f(c(\"d\",\"x\")) ; f(c(\"b\",\"z\")) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_1cad751e84ef65887eda84669bd42192() {
        assertEvalError("{ x <- list(a=1,b=1:3) ; f <- function(i) { x[[i]] } ; f(c(2,2)) ; x <- f ; f(2+3i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorIndex_3a122572c4f5c947c4e9b5e44bd356cc() {
        assertEvalNoOutput("{ f<-function(x,l) { x[l == 3] <- 4 } ; f(c(1,2,3), c(1,2,3)) ; f(c(1,2,3), 1:3) ; f(1:3, c(3,3,2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_bb72cebb9ade33a16898fc1ebad1393e() {
        assertEval(" { f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), c(NA,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_836c2ee0ab2a0bdce3b0cb4206188056() {
        assertEval("{ a <- c(1,2,3) ; b <- a; a[1] <- 4L; a }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0c90a0cd3cdbe747fa8e8651d600561e() {
        assertEval("{ a <- c(1,2,3) ; b <- a; a[2] <- 4L; a }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ca9b64cebab92450c44508734162b2be() {
        assertEval("{ a <- c(1,2,3) ; b <- a; a[3] <- 4L; a }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_11f4c9a22b48ae0883cf48c801875c7f() {
        assertEval("{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[1]] <- FALSE; a }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ff4f870ac3bb59c34b24f140bc6f36c5() {
        assertEval("{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[2]] <- FALSE; a }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9926f6f34a94735722c159957ebdd31b() {
        assertEval("{ a <- c(TRUE,TRUE,TRUE); b <- a; a[[3]] <- FALSE; a }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_49d9cc48eeed827ce882b487539908d0() {
        assertEval("{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(1,1) ; f(1L,TRUE) ; f(2,TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_049ea7335b1b6af038bc7b10410fcf20() {
        assertEval("{ f<-function(i,v) { x<-1:5 ; x[[i]]<-v ; x } ; f(1,1) ; f(1L,TRUE) ; f(2,TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d9262d7cc29729af3921cc43149f689d() {
        assertEval("{ buf <- integer() ; buf[[1]] <- 4L ; buf }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_335605cb2a0db85fcf9b011b4c73e31d() {
        assertEval("{ buf <- double() ; buf[[1]] <- 23 ; buf }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_474b23368347af90731af13b04ada475() {
        assertEval("{ inds <- 1:4 ; m <- 2:3 ; inds[m] <- inds[m] + 1L ; inds }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a79a0da05705f4da5811fe8003a50889() {
        assertEval("{ inds <- 1:4 ; m <- c(2L,3L) ; inds[m] <- inds[m] + 1L ; inds }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8529636fed75da10e0e35990d55d29bf() {
        assertEval("{ inds <- 1:4 ; m <- 2:3 ; inds[m] <- inds[m] + 1L ; m <- 1:2 ; inds[m] <- inds[m] + 1L ; inds }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f3104bbdcca5088508626c8667827749() {
        assertEval("{ inds <- 1:4 ; m <- 2L ; inds[m] <- inds[m] + 1L ; m <- c(1L,2L) ; inds[m] <- inds[m] + 1L ; inds }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_2db8808221622144ce2ccabdfb674f36() {
        assertEval("{ x <- c(1) ; f <- function() { x[[1]] <<- x[[1]] + 1 ; x } ; a <- f() ; b <- f() ; c(a,b) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d25c41a22a663b7717b8ae7a6e516917() {
        assertEval("{ x<-c(1,2,3,4,5); x[3:4]<-c(300,400); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c6a8a884d1152fce0d1c6fac344933cc() {
        assertEval("{ x<-c(1,2,3,4,5); x[4:3]<-c(300L,400L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ad7386379162230e3c4bc6d0fa4ebc00() {
        assertEval("{ x<-1:5; x[4:3]<-c(300L,400L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_777ed1f3ca38d860b871d26019fc605c() {
        assertEval("{ x<-5:1; x[3:4]<-c(300L,400L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_cbc180f9feb71681af8038f30aaa85e0() {
        assertEval("{ x<-5:1; x[3:4]<-c(300,400); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_219f3ab34c2d4e8cea5bb43df1083b5d() {
        assertEval("{ x<-1:5; x[c(4,2,3)]<-c(256L,257L,258L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_de884f4cf8a60e7ff49de5ceb57c4f6c() {
        assertEval("{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(3:2,1) ; f(1L,TRUE) ; f(2:4,4:2) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ebde27167622450b586c27d4845f7338() {
        assertEval("{ f<-function(i,v) { x<-1:5 ; x[i]<-v ; x } ; f(c(3,2),1) ; f(1L,TRUE) ; f(2:4,c(4,3,2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f52178e093d81c4ddbd1260af4542025() {
        assertEval("{ b <- 1:3 ; b[integer()] <- 3:5 ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_68872cf7ac79fb04821c3a961b6aef82() {
        assertEval("{ b <- as.list(3:6) ; dim(b) <- c(4,1) ; b[c(TRUE,FALSE)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_94da93241a73ec6cec883f3a8a1067f9() {
        assertEval("{ b <- as.list(3:6) ; names(b) <- c(\"X\",\"Y\",\"Z\",\"Q\") ; b[c(TRUE,FALSE)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_98098d0ab4b0f25322f799edc9ce5bbc() {
        assertEval("{ b <- as.list(3:6) ; names(b) <- c(\"X\",\"Y\",\"Z\",\"Q\") ; b[c(FALSE,FALSE)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d4fc37b15d1d32e379d3bf1b64ef139a() {
        assertEval("{ b <- as.list(3:6) ; dim(b) <- c(1,4) ; b[c(FALSE,FALSE)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_79937a987764abbf160fdfd26173b4cd() {
        assertEval("{ b <- as.list(3:6) ; dim(b) <- c(1,4) ; b[c(FALSE,FALSE,TRUE)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ea864b5e5eb945f5125e4d30e33da13b() {
        assertEval("{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[c(FALSE,FALSE,FALSE)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_482cc3f8f70802c19aa313810aa28702() {
        assertEval("{ b <- as.list(3:5) ; dim(b) <- c(1,3) ; b[c(FALSE,TRUE,NA)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_947dff76330e2ec4dd0880d07524dbf2() {
        assertEval("{ x<-1:5; x[c(0-2,0-3,0-3,0-100,0)]<-256; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0ac3a51afcc0841b4e737788188044e5() {
        assertEval("{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE)] <- 1000; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f5c63c967b015544ab9683ea89fc8298() {
        assertEval("{ x<-c(1,2,3,4,5,6); x[c(TRUE,TRUE,FALSE)] <- c(1000L,2000L) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_35e12d011e9b1a62307009d31fe66b06() {
        assertEval("{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE,TRUE,TRUE,FALSE)] <- c(1000,2000,3000); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_3e3fa83e51c9a8ee6b2a5927885180f0() {
        assertEval("{ x<-c(1,2,3,4,5); x[c(TRUE,FALSE,TRUE,TRUE,0)] <- c(1000,2000,3000); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_73303394623b5437766a5c5cf7fad458() {
        assertEval("{ x<-1:3; x[c(TRUE, FALSE, TRUE)] <- c(TRUE,FALSE); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_370c386ee46591f450fce2008d0ea8e1() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[c(TRUE, FALSE, TRUE)] <- c(FALSE,TRUE); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7726b39b3fab26722ba47c7ef5031811() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE); x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_28bf53749d58cbea70887d5df691fe88() {
        assertEval("{ x<-11:9 ; x[c(TRUE, FALSE, TRUE)] <- c(1000,2000); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_27964f4fdfc886149a1d0f4836c3653e() {
        assertEval("{ l <- double() ; l[c(TRUE,TRUE)] <-2 ; l}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_5c7f6472bbb6b5783a68cdfdf29fc7a6() {
        assertEval("{ l <- double() ; l[c(FALSE,TRUE)] <-2 ; l}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_cc802a4e153da853db95a40945072400() {
        assertEval("{ a<- c('a','b','c','d'); a[3:4] <- c(4,5); a}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_558b5d2f32bc719b5b978d1c39b16086() {
        assertEval("{ a<- c('a','b','c','d'); a[3:4] <- c(4L,5L); a}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_cc13f28fd2bc91020c68f04c884947b7() {
        assertEval("{ a<- c('a','b','c','d'); a[3:4] <- c(TRUE,FALSE); a}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c3f494c18d43c31e70ce4305a592d09c() {
        assertEval("{ f<-function(b,i,v) { b[i]<-v ; b } ; f(1:4,4:1,TRUE) ; f(c(3,2,1),8,10) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f9a3474319d08685e8d866cf757ed3e8() {
        assertEval("{ f<-function(b,i,v) { b[i]<-v ; b } ; f(1:4,4:1,TRUE) ; f(c(3,2,1),8,10) ; f(c(TRUE,FALSE),TRUE,FALSE) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4615758516ee6e1475a81a9bda64266e() {
        assertEval("{ x<-c(TRUE,TRUE,FALSE,TRUE) ; x[3:2] <- TRUE; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4045ae3981b8569c73c607e327b2ae8e() {
        assertEval("{ x<-1:3 ; y<-(x[2]<-100) ; y }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c4aea29b2ed1e37217b54f60760aec97() {
        assertEval("{ x<-1:5 ; x[3] <- (x[4]<-100) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7fa208fb556661e762dcbd7c4cd5e3d5() {
        assertEval("{ x<-5:1 ; x[x[2]<-2] <- (x[3]<-50) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_93ef2e6ce2424349ab27e3e1549d7ac8() {
        assertEval("{ v<-1:3 ; v[TRUE] <- 100 ; v }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_6b617d9cf7f8d096b45b6189e8c6a547() {
        assertEval("{ v<-1:3 ; v[-1] <- c(100,101) ; v }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ee0f602f9d7da5b108a194b992483f45() {
        assertEval("{ v<-1:3 ; v[TRUE] <- c(100,101,102) ; v }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0605a930c389eaec5690049f668bb62a() {
        assertEval("{ x <- c(a=1,b=2,c=3) ; x[2]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_2a50638b5648c8fec2f534cf0ed23808() {
        assertEval("{ x <- c(a=1,b=2,c=3) ; x[2:3]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7600b4a7dd905c83280d8d593a4250f8() {
        assertEval("{ x <- c(a=1,b=2,c=3) ; x[c(2,3)]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_240ff56461bc744a8acc7ceac8bccf7d() {
        assertEval("{ x <- c(a=1,b=2,c=3) ; x[c(TRUE,TRUE,FALSE)]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_48f6fefe507618711482944059f9f4cb() {
        assertEval("{ x <- c(a=1,b=2) ; x[2:3]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_dd1cb95b07cedb656bd32742a492a6c5() {
        assertEval("{ x <- c(a=1,b=2) ; x[c(2,3)]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ab486e9fc5aa7f34c093a0edc73f4a04() {
        assertEval("{ x <- c(a=1,b=2) ; x[3]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_86c9f1941727b98abf25b554b7bdfe12() {
        assertEval("{ x <- matrix(1:2) ; x[c(FALSE,FALSE,TRUE)]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_12430fe386cd14932232672aeaedd053() {
        assertEval("{ x <- 1:2 ; x[c(FALSE,FALSE,TRUE)]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d33bf1188541d3d2e1a2ec327bfab3af() {
        assertEval("{ x <- c(a=1,b=2) ; x[c(FALSE,FALSE,TRUE)]<-10; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d96e02fc371cf967564fd6ff0de21f7b() {
        assertEval("{ x<-c(a=1,b=2,c=3) ; x[[\"b\"]]<-200; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_206c09ca7dfee016619959d68e46ec41() {
        assertEval("{ x<-c(a=1,b=2,c=3) ; x[[\"d\"]]<-200; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_b2f9318c7fa42f64c5cdad19d5f7f14c() {
        assertEval("{ x<-c() ; x[c(\"a\",\"b\",\"c\",\"d\")]<-c(1,2); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_17f724769f9da361f4441c34d22aae90() {
        assertEval("{ x<-c(a=1,b=2,c=3) ; x[\"d\"]<-4 ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_de469943f5b34820b838db7480e5cb55() {
        assertEval("{ x<-c(a=1,b=2,c=3) ; x[c(\"d\",\"e\")]<-c(4,5) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4761cf2e6a831e4f8b5355b65695846f() {
        assertEval("{ x<-c(a=1,b=2,c=3) ; x[c(\"d\",\"a\",\"d\",\"a\")]<-c(4,5) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_b275a7e32ba77937cf4ea8e76e015af5() {
        assertEval("{ a = c(1, 2); a[['a']] = 67; a; }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_307fa4d76e5f482fb617038f1e1dbecf() {
        assertEval("{ a = c(a=1,2,3); a[['x']] = 67; a; }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_6a5d180337cb9d51b2da67888c8538e8() {
        assertEval("{ x <- c(TRUE,TRUE,TRUE,TRUE); x[2:3] <- c(FALSE,FALSE); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_dfaa32bf58291f9062a35992af2d21d8() {
        assertEval("{ x <- c(TRUE,TRUE,TRUE,TRUE); x[3:2] <- c(FALSE,TRUE); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9aa149d56494fb64808d6c930e2ddf11() {
        assertEval("{ x <- c('a','b','c','d'); x[2:3] <- 'x'; x}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4ddf55d30cc51e3380d89ea699843a71() {
        assertEval("{ x <- c('a','b','c','d'); x[2:3] <- c('x','y'); x}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ea653ed4f255c92c158447750b21be68() {
        assertEval("{ x <- c('a','b','c','d'); x[3:2] <- c('x','y'); x}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4b8cd2b49c4c12124ae1bdceb06feea8() {
        assertEval("{ x <- c('a','b','c','d'); x[c(TRUE,FALSE,TRUE)] <- c('x','y','z'); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f8f2f3e6e86075509decf9ed473a419b() {
        assertEval("{ x <- c(TRUE,TRUE,TRUE,TRUE); x[c(TRUE,TRUE,FALSE)] <- c(10L,20L,30L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c819f5198a670e81b910231b25b2afa0() {
        assertEval("{ x <- c(1L,1L,1L,1L); x[c(TRUE,TRUE,FALSE)] <- c('a','b','c'); x}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_2641d7b587fa84d8c3b00cac8ebbf207() {
        assertEval("{ x <- c(TRUE,TRUE,TRUE,TRUE); x[c(TRUE,TRUE,FALSE)] <- list(10L,20L,30L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9916df8073b6a64a40f09884b8f79c35() {
        assertEval("{ x <- c(); x[c('a','b')] <- c(1L,2L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_801feec5ca948a343f5925349c3c7833() {
        assertEval("{ x <- c(); x[c('a','b')] <- c(TRUE,FALSE); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1b0d29df6cf2e39a9f74fb31cb3bbf8b() {
        assertEval("{ x <- c(); x[c('a','b')] <- c('a','b'); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_2e120823aef2745c283d8131c46c5cd7() {
        assertEval("{ x <- list(); x[c('a','b')] <- c('a','b'); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4fb4ee0e2f241b96768679529e0b9a4c() {
        assertEval("{ x <- list(); x[c('a','b')] <- list('a','b'); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e8df833a4c496550621107dc2914c994() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, 10) ; f(1:2, 1:2, 11) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_77a8a9b8f093e1344544a94a6a90d992() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9361c6731e182046b3eff2a1a53d5658() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, 11L) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_feee61d15ee2f56858042c74b5a658c3() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) ;  f(list(1,2), 1:2, as.raw(10))}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_19ed4f74ee8c0230509908ff54e87f2b() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), 1:2, c(1+2i,3+4i))}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4a719d61e876dab746d1975ef1629e1d() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, 1:2, c(10,5))}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7e868e5e6dae7381963f76d52e0bac83() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), 1:3, c(2,10,5)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4b2bf42c6fbd7e4da6ef9c74fa4e9a09() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2,3,4,5), 4:3, c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_986c42b1579ac9f899e35c6209375846() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2,3,4), seq(1L,4L,2L), c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1802b0c50469f3f3b2a28a4de43034e2() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,3:4) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_905ab5b831e870f8a835f4b03fca0ded() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,c(4,3)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_08b000f160654ffaa989fd255a1c641b() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2),1:2,c(1+2i,3+2i)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_beaf000005391ba41cebe98a07e5fb7b() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c9029fe04d1a89f4e6cfe48475f5bb6b() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(3,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8aa1a3436347f6c01a9bcbc77e64aa7d() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(3L,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c647a26b0d806ce4b76dd661e7915671() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_45ebcdef526fb5ca8a45775cc099884a() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) ; f(c(10L,4L), 2:1, 1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_fbbf3fd14f07aa726d92040eb172b6bc() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),-1:0,c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_319bb269e7cf04d5cc3d7adaaf17cc57() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10), c(2L,4L),c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_dba3120ad6625c60f65ac14a9106d1ba() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.double(1:5), seq(1L,6L,2L),c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_510c629da6ee43d24fbc8fce94d8882d() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.double(1:5), c(7L,4L,1L),c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f5f3e9548a6093ad0ff76f31db6acb12() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e0839946250fe44c56860cd181d71b76() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,c(3,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1992456fe5c261ea4d09de3fc7e97859() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),2:1,c(3L,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a9b6f8d4813c301bae4ddd795d929fc6() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_72d1d07f35dc2bec1cf59eb0b5b33d2f() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) ; f(c(10,4), 2:1, 1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9269ca11e1804ff49bdc1fdcc321a4ca() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:5, seq(1L,6L,2L),c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_eb0a02069d44a0a6df0bbc4877108acd() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2, seq(1L,6L,2L),c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_507c63597b251da28999081d44027a76() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,NA),2:1,1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d849ff7b1e8afa4c315a33bd7dbde5fa() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),2:1,c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a819511fafcc2b50f1c541d94cfb8960() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),2:0,c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8ea985ca76f50405d981d36e2c003ffd() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,NA,FALSE),3:4,c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_92732392a83d52c15ebd0fb9266a29b4() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.logical(-3:3),c(1L,4L,7L),c(TRUE,NA,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7b45dcae2c1f4a09c0da964e192f493a() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE),2:1,c(NA,NA)) ; f(c(TRUE,FALSE),1:2,3:4) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a6a1ed8957882b01ccbc4e555c6a6a6a() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(TRUE,FALSE),2:1,c(NA,NA)) ; f(10:11,1:2,c(NA,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_572a7913eb9c1364a1a59dda9530bece() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(\"a\",\"b\"),2:1,1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_5e995c837c7dec66f0864b6711bf7665() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.character(-3:3),c(1L,4L,7L),c(\"A\",\"a\",\"XX\")) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_22db0a920c1a7e3b75d0839cf04b72ad() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(\"hello\",\"hi\",\"X\"), -1:-2, \"ZZ\") }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_51fa07f2c9cb467127e868ba8248d2c2() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(\"hello\",\"hi\",\"X\"), 3:4, \"ZZ\") }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_85f898bbc2eed319c2841d61a707f37d() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(\"hello\",\"hi\",\"X\"), 1:2, c(\"ZZ\",\"xx\")) ; f(1:4,1:2,NA) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9a688ce959e6ec2c973c70b044551921() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(\"hello\",\"hi\",\"X\"), 1:2, c(\"ZZ\",\"xx\")) ; f(as.character(1:2),1:2,NA) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_b4b48a701ddc299bbd0f12583d1d18ac() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1+2i,2+3i), 1:2, c(10+1i,2+4i)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a859f9b5971b1dbd9f3495002dfb9aea() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.raw(1:3), 1:2, as.raw(40:41)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_21b263beb0757b816b6c15ba2b81ff0a() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, c(0,0), c(1+2i,3+4i))}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e75179143a7aa1c318c269c65a01d6f1() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, 3:4); f(c(TRUE,FALSE), 2:1, 1:2) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_baa0311b65f430aeaff56cc290d52000() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, 3:4); f(3:4, 2:1, c(NA,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_b2d4e7578bb4a749df4b15e62273e905() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(TRUE,FALSE,NA), 1:2, c(FALSE,TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a0c9291997249240a6d4f15f0dea4b87() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4), 1:2, c(NA,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_dac4854c0956b452d591adac1b597a5c() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4), 1:2, c(\"hello\",\"hi\")) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_bfdb30c609c9e13b1d54709d78fab3d4() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), 1:2, list(3,TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1b27eb090083541df2fc04916f01e661() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(l, 1:2, list(3,TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f8b03e351ea5373cf6cbecb8401437bf() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(list(3,TRUE), 1:2, l) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_18018913b3160fc9ec761cc6b384b590() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- c(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; f(l, 1:2, c(3,TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_3ed2d9714ee83cc4e3ca1074ed05524e() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); l <- list(3,5L) ; dim(l) <- c(2,1) ; f(5:6,1:2,c(3,4)) ; m <- c(3,TRUE) ; dim(m) <- c(1,2) ; f(m, 1:2, l) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_721b193a8364200819ba05e585ee7e53() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), -1:-2, 10) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ba134d7acf5eb58ed65fc09ac53d3d08() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(c(3,4,8), 3:4, 10) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_891f7c4d2f3913f51f0f053fc15f666b() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; f(1:8, c(1L,4L,7L), c(10,100,1000)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0e5b200f21a52e167b8cbb6861f449c1() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(1:2,1:2,c(3,4)) ; z <- f(1:8, c(1L,4L,7L), list(10,100,1000)) ; sum(as.double(z)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_2094abcb6c6845d312d6e70f28748492() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; x <- list(1,2) ; attr(x,\"my\") <- 10 ; f(x, 1:2, c(10,11)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0a53538cb9f1207c10b158e583576189() {
        assertEval("{ b <- 1:3 ; b[c(3,2)] <- list(TRUE,10) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_514979cc585ad79bd98a03ff6a9dde08() {
        assertEval("{ b <- as.raw(11:13) ; b[c(3,2)] <- list(2) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_62a16cfa81bd89d1988dcdca4986a619() {
        assertEval("{ b <- as.raw(11:13) ; b[c(3,2)] <- as.raw(2) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_808643e827973d74893756954f54c0b9() {
        assertEval("{ b <- c(TRUE,NA,FALSE) ; b[c(3,2)] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d5d58868d5204394a7747432f58a4e06() {
        assertEval("{ b <- 1:4 ; b[c(3,2)] <- c(NA,NA) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_29588bdf008718726d4db302fef5eb03() {
        assertEval("{ b <- c(TRUE,FALSE) ; b[c(3,2)] <- 5:6 ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1bbbaf4c6c7a62eb4500e40a589f7d0c() {
        assertEval("{ b <- c(1+2i,3+4i) ; b[c(3,2)] <- 5:6 ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_cd49b4517ef0090a71b58c8d7527e8aa() {
        assertEval("{ b <- 3:4 ; b[c(3,2)] <- c(1+2i,3+4i) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4c5655573c140bda8bb7c1503b5ee33d() {
        assertEval("{ b <- c(\"hello\",\"hi\") ; b[c(3,2)] <- c(2,3) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4dcb747c4539130f224c7e2c068135f8() {
        assertEval("{ b <- 3:4 ; b[c(3,2)] <- c(\"X\",\"xx\") ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_04b0da6da7c236b1a7934ffdd79a1d12() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, as.integer(NA), 2) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ff33f1bfcf09c29ef0a40909e374ab40() {
        assertEval("{ b <- c(1,4,5) ; x <- c(2,8,2) ; b[x==2] <- c(10,11) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f7cebd823e4d00669301b23ce179c8ed() {
        assertEval("{ b <- c(1,4,5) ; z <- b ; x <- c(2,8,2) ; b[x==2] <- c(10,11) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_81d4578e5191d0cc0f08e3513aa80dcd() {
        assertEval("{ b <- c(1,2,5) ;  x <- as.double(NA) ; attr(x,\"my\") <- 2 ; b[c(1,NA,2)==2] <- x ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_01c07d42792435ffedd27bf04768ec7e() {
        assertEval("{ b <- c(1,2,5) ; b[integer()] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1ccee66027fcbfedebefef451667aa73() {
        assertEval("{ b <- c(1,2,5) ; attr(b,\"my\") <- 10 ; b[integer()] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0a16096baa322fca5eb39b523692ae18() {
        assertEval("{ b <- list(1,2,5) ; b[c(1,1,5)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_5cb57134a94edae0f9577f618faec3d0() {
        assertEval("{ b <- list(1,2,5) ; b[c(-1,-4,-5,-1,-5)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_243ca6174ee1349662605aa677f48f3c() {
        assertEval("{ b <- list(1,2,5) ; b[c(1,1,0,NA,5,5,7)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c1bc6afe36b0a1284d861dd8f302c834() {
        assertEval("{ b <- list(1,2,5) ; b[c(0,-1)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_3110467de84ed8e6d31e68893a986e73() {
        assertEval("{ b <- list(1,2,5) ; b[c(1,NA)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0840d0e6a93329b5c2e938b07e82f73d() {
        assertEval("{ b <- list(x=1,y=2,z=5) ; b[c(0,-1)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e3a7160879f5a23db6158c61a595605d() {
        assertEval("{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,-1)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1cdd2191a3b3aeaa9be625165388ecc7() {
        assertEval("{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,0)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_749996670b3b45bd325ca2c6b9bfbc01() {
        assertEval("{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(-10,-20,0)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4284cc4632ffb47203c0eb0af9f42ec9() {
        assertEval("{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,0,-1,-2,-3)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d6d11cd0277d98539a9c119acc1c6740() {
        assertEval("{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(0,3,5)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7bda41b83cbd0ed9acee5773fc2119f7() {
        assertEval("{ b <- c(1,2,5) ; b[logical()] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ca7b86168b422f7c3e7e163045bdf8b4() {
        assertEval("{ b <- c(1,2,5) ; b[c(TRUE,FALSE,TRUE)] <- list(TRUE,1+2i) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9e71307601e2e4f71969523fe8dfd3f7() {
        assertEval("{ b <- list(1,2,5) ; dim(b) <- c(1,3) ; b[c(TRUE,FALSE,TRUE)] <- list(TRUE,1+2i) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_561c6b0953e03082995115b0900fda70() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- list(1,2,5) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), list(TRUE,1+2i)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_18c151c50ac33985757a479842d1c272() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- as.raw(10:12) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), as.raw(21:22)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1bcec74e0ab0a4eecaa377ba316aa9f4() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(\"a\",\"XX\",\"b\"), c(FALSE,TRUE,TRUE), 21:22) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_57e9c7c29969f984085f75b90d864bf1() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(10,12,3), c(FALSE,TRUE,TRUE), c(\"hi\",NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_6b439574e27b2b9e9935590eccba4001() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(10,12,3), c(FALSE,TRUE,TRUE), c(1+2i,10)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_91bdc2a5ea9dc5173d3ba0a18591c93b() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(3+4i,5+6i), c(FALSE,TRUE,TRUE), c(\"hi\",NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_2b358f4ee693ef2dd14035c1dbb595c2() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(3+4i,5+6i), c(FALSE,TRUE,TRUE), c(NA,1+10i)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a6ee47087c1d0a792517befacb8b0431() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(TRUE,FALSE), c(FALSE,TRUE,TRUE), c(NA,2L)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1a5a53e6b1b89c30db9fbd870639f297() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), c(NA,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c2aad70d9a500f1f7cdd83bcafebcea4() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(c(TRUE,TRUE,FALSE), c(FALSE,TRUE,TRUE), c(TRUE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8ae152de2f49dddfbdc77eb3575fc29d() {
        assertEval("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_55f7c54b72babf89ed4e4be97e372ee6() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0ca13d70dac830967b511a33c0722256() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(1:2, c(TRUE,FALSE), list(TRUE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1820b8463bc95bbba230b771b3c50fe7() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), TRUE) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e2acaf658d9b35311c87164e5836d400() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_72cf9369679ae9645fef0ab72cc46454() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 10) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c3cee32a9b398de85865a1699fc72112() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,FALSE), list(1+2i)) ; f(as.list(1:2), c(TRUE,FALSE), 10L) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a006c8fcc65ff68707056410ddcf4d68() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), list(1+2i)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_efd77557074bdbd7952fbd0ae09af682() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), 10) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_5086166a34e895ba299d42057b497887() {
        assertEval("{ x <- list(1,0) ; x[is.na(x)] <- c(10,11); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d987862e9f4c682e9554eeebb35ecb6b() {
        assertEval("{ x <- list(1,0) ; x[is.na(x)] <- c(10L,11L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7ac73694f078007429a70eca10a81593() {
        assertEval("{ x <- list(1,0) ; x[c(TRUE,TRUE)] <- c(TRUE,NA); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1f2b360e7b919ea60d3a023243dec0ed() {
        assertEval("{ x <- list(1,0) ; x[logical()] <- c(TRUE,NA); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_736f1dbe7dce28e5769e3f0010047538() {
        assertEval("{ x <- c(1,0) ; x[c(TRUE,TRUE)] <- c(TRUE,NA); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_b27ef401104dadce30911a80b69155a3() {
        assertEval("{ x <- c(1,0) ; x[c(TRUE,TRUE)] <- 3:4; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_3a56349b3f388b58f85f37eddcba3ee1() {
        assertEval("{ x <- c(1,0) ; x[logical()] <- 3:4; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8dc98d5bb2876b02234752e4e00693a2() {
        assertEval("{ x <- c(1,0) ; attr(x,\"my\") <- 1 ; x[c(TRUE,TRUE)] <- c(NA,TRUE); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_da690a387313b4d1eeb994282a552cff() {
        assertEval("{ x <- c(1,0) ; z <- x ; x[c(NA,TRUE)] <- TRUE; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e8e0a9ac960351cccfc65b9b1aa06fa6() {
        assertEval("{ x <- c(1,0)  ; x[is.na(x)] <- TRUE; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_99792d88bcb34ba805f9a719adfe909e() {
        assertEval("{ x <- c(1,0)  ; x[c(TRUE,TRUE)] <- rev(x) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_284dcca2e7561afbc78306b6820c477a() {
        assertEval("{ x <- c(1,0) ; f <- function(v) { x[c(TRUE,TRUE)] <- v ; x } ; f(1:2) ; f(c(1,2)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_61ba543b7a27378fb1acab7deee88b5f() {
        assertEval("{ x <- c(1,0) ; f <- function(v) { x[c(TRUE,TRUE)] <- v ; x } ; f(1:2) ; f(1+2i) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0eb8e841bca0a35325a966a4df68e9d1() {
        assertEval("{ b <- list(1,2,3) ; attr(b,\"my\") <- 12; b[2] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_fe8087a9570fb2b7bd3347f706a59b02() {
        assertEval("{ b <- list(1,2,3) ; attr(b,\"my\") <- 12; b[2:3] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_349fad6f3191d63d12d86fc6036942b9() {
        assertEval("{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,TRUE)] <- 3:4 ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_bcf990e6803a080bf59657506961807f() {
        assertEval("{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,NA)] <- 3L ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7d5442af0676f3459df6bacf4748f7ec() {
        assertEval("{ x <- 1:2 ; x[c(TRUE,NA)] <- 3L ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4c3500d7bb1654364dc88b70a09ffec7() {
        assertEval("{ x <- c(1L,2L) ; x[c(TRUE,FALSE)] <- 3L ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_178e213d88d9ecabf5139faf44ce3495() {
        assertEval("{ x <- c(1L,2L) ; x[c(TRUE,NA)] <- 3L ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_077acb1eb2741cbc88f14d9893ebb4d1() {
        assertEval("{ x <- c(1L,2L) ; x[TRUE] <- 3L ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_54a82aca11611038888ee2a4a863e4ff() {
        assertEval("{ x <- c(1L,2L,3L,4L) ; x[c(TRUE,FALSE)] <- 5:6 ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9cfa99205c05f66dcf1c61b5f5b620f2() {
        assertEval("{ x <- c(1L,2L,3L,4L) ; attr(x,\"my\") <- 0 ;  x[c(TRUE,FALSE)] <- 5:6 ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_49405ab84d73286dbfca2bdae5fd2434() {
        assertEval("{ x <- c(1L,2L,3L,4L) ;  x[is.na(x)] <- 5:6 ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_780927c96ae7b7279affdf82d663a41c() {
        assertEval("{ x <- c(1L,2L) ; x[logical()] <- 3L ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_edb715a1f317bd245f095853fdbbc2f1() {
        assertEval("{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE)] <- c(FALSE,NA) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_29b3e3bb8ff95bb465a10e4b9e949206() {
        assertEval("{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,FALSE)] <- c(FALSE,NA) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1efb93bd2ac08f91a20f86a4f356d8b2() {
        assertEval("{ b <- c(TRUE,NA,FALSE) ; b[c(TRUE,FALSE,TRUE,TRUE)] <- c(FALSE,NA,NA) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f59e145c5005d9a9d9914a01da69883a() {
        assertEval("{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_03caeed238fa9bee6868d6b4092c0863() {
        assertEval("{ b <- c(TRUE,NA,FALSE,TRUE) ; z <- b ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_35aaf36af73ee5e0e927843d71041f23() {
        assertEval("{ b <- c(TRUE,NA,FALSE,TRUE) ; attr(b,\"my\") <- 10 ; b[c(TRUE,FALSE,TRUE,NA)] <- FALSE ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4ee14db6d1ffb63ef753328faed88fcf() {
        assertEval("{ b <- c(TRUE,FALSE,FALSE,TRUE) ; b[b] <- c(TRUE,FALSE) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_36635424013a8ecc3f29abf529f696c8() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,FALSE,TRUE),c(TRUE,FALSE), NA) ; f(1:4, c(TRUE,TRUE), NA) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_aecdc5097d509904b70ba0f16224b9cc() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(TRUE,FALSE,FALSE,TRUE),c(TRUE,FALSE), NA) ; f(c(FALSE,FALSE,TRUE), c(TRUE,TRUE), c(1,2,3)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f894c1423eb4fa0dc94d73132242acc4() {
        assertEval("{ b <- c(TRUE,NA,FALSE,TRUE) ; b[logical()] <- c(FALSE,NA) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_52a1c00a75337a9d79f1f2c7a3bb82ea() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; b[c(TRUE,FALSE)] <- \"X\" ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c6ac333f104ca780ace60947941054d3() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; b[c(TRUE,FALSE,TRUE,TRUE)] <- \"X\" ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c90304ceb916a44dcf44273f1af82634() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; b[c(TRUE,FALSE,TRUE,NA)] <- \"X\" ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8fe9812b56d54ff628a362b4335ba4e9() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; b[c(TRUE,FALSE,NA)] <- \"X\" ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a7524a2a68d00af71359ca634b039b0c() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; b[logical()] <- \"X\" ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_2d5bef31e49c9c8bcc26712257bea630() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; x <- b ; b[c(FALSE,TRUE,TRUE)] <- c(\"X\",\"z\") ; b } ");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d68e495685933470f833459c15263bd4() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; b[is.na(b)] <- c(\"X\",\"z\") ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9dc16b77cca1a509af5604152475f8eb() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; attr(b,\"my\") <- 211 ; b[c(FALSE,TRUE)] <- c(\"X\") ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8c7ed53b9615065c50648f0811febb7c() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; b[c(TRUE,TRUE,TRUE)] <- rev(as.character(b)) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_75b0be4ad480d9a3ddc6c51bed4d034e() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(\"a\",\"b\",\"c\"),c(TRUE,FALSE),c(\"A\",\"X\")) ; f(1:3,c(TRUE,FALSE),4) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ddbd80fececb99bdbf65aef32ff7fe08() {
        assertEval("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(\"a\",\"b\",\"c\"),c(TRUE,FALSE),c(\"A\",\"X\")) ; f(c(\"A\",\"X\"),c(TRUE,FALSE),4) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_40f03dd7fe695ec7ed62913af59f2d05() {
        assertEval("{ b <- c(\"a\",\"b\",\"c\") ; b[c(TRUE,FALSE,TRUE)] <- c(1+2i,3+4i) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_940c463a3edf6a809a6569e9b87b2957() {
        assertEval("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(1:2,\"hi\",3L) ; f(1:2,c(2),10) ; f(1:2, -1, 10) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_acc8c20adb5724497365dcdfece54c4c() {
        assertEval("{ x <- c(); f <- function(i, v) { x[i] <- v ; x } ; f(1:2,3:4); f(c(1,2),c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_99033dd01b36ab699ee558eb6c25ad95() {
        assertEval("{ x <- c(); f <- function(i, v) { x[i] <- v ; x } ; f(1:2,3:4); f(c(\"a\",\"b\"),c(TRUE,FALSE)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_3546a414baf8592d3baa06286a49fe1b() {
        assertEval("{ a <- c(2.1,2.2,2.3); b <- a; a[[2]] <- TRUE; a }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_eaa66a4f1687c7b78b2c424bce826ddd() {
        assertEval("{ a <- c(2.1,2.2,2.3); b <- a; a[[3]] <- TRUE; a }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1716a6e7a088561f56e2e983c136558b() {
        assertEval("{ buf <- character() ; buf[[1]] <- \"hello\" ; buf[[3]] <- \"world\" ; buf }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f3cc1a0ddc64b0c6465d81b9276416e5() {
        assertEval("{ b <- 1:3 ; dim(b) <- c(1,3) ;  b[integer()] <- 3:5 ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_235ffdf66bd349381d4161c9dd783c93() {
        assertEvalError(" { f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3, 1:2, f) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c02e3c87f352b7aa2279fc7c86d13c48() {
        assertEvalError("{ x <- (0:4); x[c(NA, NA, NA)] <- c(200L, 300L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ac61aa83946cdf6705c4d3a216f78726() {
        assertEvalError("{ x <- c(1L, 2L, 3L, 4L, 5L); x[c(NA, 2, 10)] <- c(400L, 500L, 600L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_498a118268ef03337afa85005080b622() {
        assertEvalError("{ x <- c(1L, 2L, 3L, 4L, 5L); x[c(NA, 0, NA)] <- c(400L, 500L, 600L); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_cd9a123825ac30d925ba4f06786fd330() {
        assertEvalError("{ x <- 1:3 ; x[c(-2, 1)] <- 10 }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7dc6183c066a3aa5631873b0c3afd6d7() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(1:2, c(0,0), as.raw(c(11,23)))}");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_34c541197c3a5c6da0f8478529ca7cb4() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, TRUE) ;  f(list(1,2), -1:1, c(2,10,5)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7b6a4b5649f9afce5f484fbc1a2a8532() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(list(1,2), 1:2, c(TRUE,NA)) ;  f(list(1,2), -10:10, 1:3) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_b4365954ec04292549c048e9bdd9e0e7() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,3,10),1:2,c(TRUE,FALSE)) ; f(c(10,4), 2:1, as.raw(10)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_0d2d81d1e208887a264391ce62397203() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1L,3L,10L),1:2,c(TRUE,FALSE)) ; f(c(10L,4L), 2:1, as.raw(10)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ce22402c878077447e589c74a61cd106() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2, seq(1L,-8L,-2L),c(TRUE,FALSE,NA)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8802b9ad2b9764a0c8798a929e85439f() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1+2i,2+3i), 1:2, as.raw(10:11)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_af530c3fdcf59601f383aa955d7e000a() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(as.raw(10:11), 1:2, c(10+1i, 11)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_d76af362feb34bdeea2b124e308c6233() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:2,1:2,3:4); f(f, 1:2, 1:3) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8e6aa5e5bc9818c1ec743ee3809f6df8() {
        assertEvalError("{ b <- as.raw(11:13) ; b[c(3,2)] <- 2 ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f756772538e94a8d1283d1bfc0398dc7() {
        assertEvalError("{ b <- 3:4 ; b[c(NA)] <- c(2,7) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_168097517c6715bd9db20c8470827fe9() {
        assertEvalError("{ b <- 3:4 ; b[c(NA,1)] <- c(2,10) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_617c920ebea7b4a8ed625e36c7b6214d() {
        assertEvalError("{ b <- 3:4 ; b[[c(NA,1)]] <- c(2,10) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a405f9bde73906238394a303daf9c927() {
        assertEvalError("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, c(1,-1), 2) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9475d4acda9c79520d36c472566b071c() {
        assertEvalError("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(3:4, c(1,2), c(10,11)) ; f(4:5, c(NA,-1), 2) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_876cb9920f5d76cb75f44607f771d629() {
        assertEvalError("{ b <- c(1,2,5) ;  x <- c(2,2,NA) ; b[x==2] <- c(10,11,3) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_1f8c30b75941df6258075e829cf216da() {
        assertEvalError("{ b <- c(1,2,5) ; b[c(1)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e6d9ec36d849ac7cbd743386a60aad28() {
        assertEvalError("{ b <- list(1,2,5) ; b[c(-1,NA)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_a8334cce07074c5d410ed764b2f30ca4() {
        assertEvalError("{ b <- list(1,2,5) ; b[c(-1,1)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4d1fc7122f2e0b401d0183eb6f503081() {
        assertEvalError("{ b <- c(1,2,5) ; b[c(0,3,5)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_78a0c90c546b3beda12ba9adda7b4fb7() {
        assertEvalError("{ b <- c(1,2,5) ; b[c(TRUE,FALSE,FALSE)] <- NULL ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_6bb70c47dd4d8881d05b964af9a407b8() {
        assertEvalError("{ b <- c(1,2,5) ; b[c(TRUE,NA,TRUE)] <- list(TRUE,1+2i) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ce653fc6e2a85e6ba53458269c91b7fa() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- as.raw(10:12) ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), 21:22) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_db4f9546f2f459cff51de789ad57369f() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; x <- 10:12 ; dim(x) <- c(1,3) ; f(x, c(FALSE,TRUE,TRUE), as.raw(21:22)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_bc58b6771bea567e086c374b44e7450d() {
        assertEvalError("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4:5) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_68e654c466179ff78d07f17a1a52c5f6() {
        assertEvalError("{ f <- function(b, i, v) { b[[i]] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,NA), 4:5) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e1e15ba02ca24634ca6cbfa12d72a278() {
        assertEvalError("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(list(1,2), c(TRUE,NA), c(10,11)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f6ddff82f85b4d4631af50b5ddef1c23() {
        assertEvalError("{ f <- function(b,i,v) { b[i] <- v ; b } ; x <- list(1,2) ; z <- x ; f(x, c(TRUE,NA), c(10,11)) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_034502c4f8d8021a64f39aca2dfd45ac() {
        assertEvalError("{ x <- c(1,0) ; x[c(NA,TRUE)] <- c(NA,TRUE); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_7e84107a03a0010556d6679c74bc22e6() {
        assertEvalError("{ x <- c(1,0) ; z <- x ; x[c(NA,TRUE)] <- c(NA,TRUE); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9416b61cf8e60f8eb859150bf76390c7() {
        assertEvalError("{ x <- 1:2 ; x[c(TRUE,FALSE,FALSE,NA)] <- 3:4 ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_854efa7776408f5045b11cd152e731fc() {
        assertEvalError("{ x <- 1:2 ; x[c(TRUE,NA)] <- 2:3 ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_5f647476b04b5fe89ef534d88732deaf() {
        assertEvalError("{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,NA)] <- c(FALSE,NA) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_8cf4b3ccbc0930eea19f786724868feb() {
        assertEvalError("{ b <- c(\"a\",\"b\",\"c\") ; b[c(FALSE,NA,NA)] <- c(\"X\",\"y\") ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_3f5eea3da14fd77de9d1f8c79f62867e() {
        assertEvalError("{ b <- c(\"a\",\"b\",\"c\") ; x <- b ; b[c(FALSE,TRUE,NA)] <- c(\"X\",\"z\") ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_f8debc7b4a996e1d0bf11c357424da6a() {
        assertEvalError("{ b <- as.raw(1:5) ; b[c(TRUE,FALSE,TRUE)] <- c(1+2i,3+4i) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_fa02b626ba765599e92b84e529acc289() {
        assertEvalError("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(\"a\",\"b\",\"c\"),c(TRUE,FALSE),c(\"A\",\"X\")) ; f(f,c(TRUE,FALSE),4) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_102409e6b0727bf9ae3c6b5f85250f15() {
        assertEvalError("{ f <- function(b,i,v) { b[i] <- v ; b } ; f(c(\"a\",\"b\",\"c\"),c(TRUE,FALSE),c(\"A\",\"X\")) ; f(c(\"A\",\"X\"),c(TRUE,FALSE),f) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e0700f33df67d725164c5adf2abcf5a2() {
        assertEvalWarning("{ x = c(1,2,3,4); x[x %% 2 == 0] <- c(1,2,3,4); }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ee68c47a1480b236e9656cf681266a18() {
        assertEvalWarning("{ b <- 3:4 ; b[c(0,1)] <- c(2,10,11) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_77be9e8866755ba716bf330867f8fcec() {
        assertEvalWarning("{ b <- c(1,4,5) ;  x <- c(2,2) ; b[x==2] <- c(10,11) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_3bc28b0b8b8d4e40c893e54433158cc1() {
        assertEvalWarning("{ b <- c(1,2,5) ;  x <- c(2,2,-1) ; b[x==2] <- c(10,11,5) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_5be95e7eb2db99a4d7e364a238cf4f3d() {
        assertEvalWarning("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(1:3,c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), 4:6) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ed4b2d98242785def5e20ed168038dc9() {
        assertEvalWarning("{ f <- function(b, i, v) { b[i] <- v ; b } ; f(c(1,2,3),c(TRUE,FALSE,TRUE),5:6) ; f(3:5, c(FALSE,TRUE,TRUE), 4:6) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_bd1d82de226b4c57972a852d20945cb7() {
        assertEvalWarning("{ x <- list(1,2) ; attr(x,\"my\") <- 10; x[c(TRUE,TRUE)] <- c(10,11,12); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_ca005e60b8c09e5b783617851441f9a4() {
        assertEvalWarning("{ x <- list(1,0) ; x[as.logical(x)] <- c(10,11); x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_c725f3cf9807665fe40ee54aaf029dad() {
        assertEvalWarning("{ x <- list(1,0) ; x[c(TRUE,FALSE)] <- x[2:1] ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_e028057d1a5d675b0546ccfd95edb159() {
        assertEvalWarning("{ x <- list(1,0) ; attr(x,\"my\") <- 20 ; x[c(TRUE,FALSE)] <- c(11,12) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_31f762c52dd500a5f5161809ed2c569f() {
        assertEvalWarning("{ x <- c(1L,2L,3L,4L) ; x[c(TRUE,FALSE)] <- rev(x) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_620dd2f602dbc673070b2083f33a3863() {
        assertEvalWarning("{ b <- c(TRUE,NA,FALSE) ; b[c(TRUE,TRUE)] <- c(FALSE,NA) ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_9da74cec3da34244abc43a491df1fcaf() {
        assertEvalWarning("{ b <- c(TRUE,NA,FALSE,TRUE) ; b[c(TRUE,FALSE,TRUE,FALSE)] <- b ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_4cd33b0b1b1f590d66d75c78f9127a5d() {
        assertEvalWarning("{ f <- function(b,i,v) { b[b] <- b ; b } ; f(c(TRUE,FALSE,FALSE,TRUE)) ; f(1:3) }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdate_15ebd8d51186d749607ef9ee65e27b37() {
        assertEvalWarning("{ b <- c(\"a\",\"b\",\"c\") ; b[c(FALSE,TRUE,TRUE)] <- c(\"X\",\"y\",\"z\") ; b }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdateIgnore_4bb6389721e2adbd8f6b69aa42e80569() {
        assertEval("{ x<-1:5 ; x[x[4]<-2] <- (x[4]<-100) ; x }");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdateIgnore_09e16a78eb04d58e35b4c9045cbc0acb() {
        assertEval("{ x<-5:1 ; x[x[2]<-2] }");
    }

    @Test
    public void TestrGenBuiltinArg_testArg1_53fffbb7c52c1ba577a8291133bbfdf8() {
        assertEval("argv <- list(1+2i);Arg(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinArg_testArg2_e284f15d362634951ccd75fb1038bb02() {
        assertEval("argv <- list(c(1554.86976865791+337.57296578684i, 1953.0195914094+434.16395869265i, 2020.8001333202+267.40279521531i, 12019.4947666225+397.6223289386i, 40989.2104557418+1079.1450107273i, 59779.5384921205+1460.5074297272i, 40703.4141691824+1049.8100128697i, 12234.4562968499+469.0052365648i, 2311.58538965355+142.56529231224i, 2158.93441543181+94.80017111005i, 2768.79882180339+256.05759156168i, 3234.20673958634+282.64174433659i, 2796.76248579155+64.23534085425i, 2030.22757739534-164.56566766766i, 1522.09271008314-273.51503749101i, 1109.23177636373-215.24298332377i, 714.154122222449-75.284630456206i, 509.684427096512-24.577531288476i, 628.214718823948+42.431050163574i, 1053.2295477549+190.4802567974i, 1388.73708931304+133.04405268816i, 1213.97041311196-135.67196064028i, 790.469479873384-232.737914916798i, 503.424076694357-99.275737105817i, 430.214847703846+45.250156289826i, 640.795334515383+121.961327286573i, 794.927869993865+100.643091831764i, 554.394621183915-15.753680159958i, 286.476583987294-104.634488576316i, 232.82067569803-92.469328935268i, 229.472155078088-54.85406188579i, 253.438957119958-65.123390974834i, 285.141954428461-79.653095359009i, 257.168942241366-34.332533775171i, 214.215071612655+18.001149572355i, 199.882436088191+0i));Arg(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinArg_testArg3_62ab5a71bf6d7347d372dc295ef3ea2e() {
        assertEval("argv <- list(c(-12.561836573133-726.935211685406i, -19.15961591777-1315.40822424617i, -666.84872452586-2013.90899841237i, -5775.9038598237-11495.8986046958i, -19052.0606820086-36788.5714510618i, -27954.209922899-52600.8398855356i, -19930.6456597181-35739.3494902644i, -7168.9170917163-10787.9325286278i, -2331.00733468417-1545.77448035635i, -1953.77845230855-212.90200115993i, -1953.60071030304+1420.43983282655i, -1700.4015174326+2765.31423009739i, -862.10275212019+2693.95914108523i, 163.24691179114+1837.1971341258i, 824.29498680332+1155.03126302727i, 939.495937605926+679.549172893055i, 686.101881005818+305.166761591578i, 460.339323160381-14.067413050801i, 533.688543397269-293.997358985575i, 773.041200043657-698.096300485637i, 716.84959340189-1127.39175172066i, 226.23728166311-1110.40349894929i, -203.687633095422-740.924670781257i, -271.865544904439-437.858153233594i, -316.769706633022-279.671035520361i, -624.842102639273-228.211019456587i, -806.31350008813-164.912647906911i, -506.559675826232+24.376187336594i, -142.784303570554+217.087547410547i, -44.704338624059+260.225831716256i, 10.565037460572+219.942519605707i, 143.643627814428+218.823069474359i, 232.58540850813+214.905815487636i, 223.286482103748+175.139821578561i, 185.008902762186+116.519845434485i, 171.150234739785-0i));Arg(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinArg_testArg4_8dbce6d8ad11f5abcb022249c52f3481() {
        assertEval("argv <- list(logical(0));Arg(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinArg_testArg5_574cfd79b8ec434d34dc4153642208da() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));Arg(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinArg_testArg6_3e9e9b79224b0ce45e5adea9e0fe0b47() {
        assertEval("argv <- list(FALSE);Arg(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinArg_testArg8_ae3990f745d5b058fb01f72a63bb18a8() {
        assertEval("argv <- list(-1);do.call('Arg', argv)");
    }

    @Test
    public void TestrGenBuiltinConj_testConj1_0e5548c50179ddefd1a7e46fa4ae32e0() {
        assertEval("argv <- list(NA_complex_);Conj(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinConj_testConj2_0a6659c9b1a639ebb84ae75d70f6cbca() {
        assertEval("argv <- list(c(-1.18540307978262+0i, 1.21560120163195-1.53371687180917i, 2.77616253887119+2.49241439707552i, -0.34590612779948+5.91601304866405i, -4.79620377219434-5.1021793804514i, -0.76948538129694-3.75787028288235i, 7.35246399396265+3.06008718716048i, 3.29255418488526-1.70891939683671i, -4.06380659430245+3.06999922353505i, -3.09223641978001-1.96417605896538i, -0.92141308753853+1.40901240924205i, -2.00249720671212-2.68610936520658i, -0.36243789137685+2.82396143864819i, 0.970540333825845-0.827296527575657i, -0.71012351273056-1.58808368514905i, 0.65264999887605-1.47950735242131i, 2.37634963276553+0.56734038764123i, 1.07643410940103-0.27130380644466i, -0.75915222215558-1.26274988364837i, 0.27719717365392+1.892240358725i, -0.486365810527362+0.32331047458147i, 0.458815916572034+0.775988009981045i, -1.62795265860628+1.25968253919881i, -0.31369767965175+2.67392540646143i, 1.35480053490252+0i, -0.31369767965175-2.67392540646143i, -1.62795265860628-1.25968253919881i, 0.458815916572035-0.775988009981044i, -0.486365810527364-0.323310474581469i, 0.27719717365392-1.892240358725i, -0.75915222215558+1.26274988364837i, 1.07643410940103+0.27130380644466i, 2.37634963276553-0.56734038764123i, 0.65264999887605+1.47950735242131i, -0.71012351273056+1.58808368514905i, 0.970540333825845+0.827296527575658i, -0.36243789137685-2.82396143864819i, -2.00249720671212+2.68610936520658i, -0.92141308753853-1.40901240924205i, -3.09223641978001+1.96417605896538i, -4.06380659430245-3.06999922353505i, 3.29255418488526+1.70891939683671i, 7.35246399396266-3.06008718716047i, -0.76948538129694+3.75787028288235i, -4.79620377219434+5.10217938045139i, -0.34590612779948-5.91601304866405i, 2.77616253887119-2.49241439707552i, 1.21560120163195+1.53371687180917i));Conj(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinConj_testConj3_3475858a17219d350c90b79dbb2f17da() {
        assertEval("argv <- list(structure(c(0.087699990825051-0.22507396943778i, 0.543948655831334+0.33174688242063i, 0.162724647304311-0.15004931295852i, 0.433366361691124+0.22116458828042i, 0.237749303783571-0.07502465647926i, 0.322784067550914+0.11058229414021i, 0.312773960262831+0i, 0.212201773410704-0i, 0.387798616742091+0.07502465647926i, 0.101619479270494-0.11058229414021i, 0.462823273221351+0.15004931295852i, -0.008962814869716-0.22116458828042i, 0.537847929700611+0.22507396943778i, -0.119545109009926-0.33174688242063i), .Dim = c(2L, 7L)));Conj(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinConj_testConj4_9a3bc737541cebcaf3921b9495bbbe3d() {
        assertEval("argv <- list(c(1+0i, 0.985449458355365-0.138495889434283i, 0.942642872008266-0.270298493966801i, 0.874055380411015-0.389154527907249i, 0.783616834775482-0.489658143691394i, 0.676434265976222-0.567595743096322i, 0.558433187362516-0.620202886580765i, 0.435944803381395-0.646314749919218i, 0.315270204563124-0.646399711551264i, 0.202254248593737-0.622474571220695i, 0.101900933636988-0.577908912337521i, 0.018058735786294-0.517134531945579i, -0.046801131817278-0.445283024979697i, -0.091697846014566-0.367779972441526i, -0.117138246792619-0.289927334668645i, -0.125-0.21650635094611i, -0.118311211562746-0.151431445234362i, -0.1009450259937-0.097481478474725i, -0.0772542485937368-0.0561284970724482i, -0.0516755705617768-0.027476388254185i, -0.0283351996132097-0.0103131692411995i, -0.0106874359562526-0.0022716846399295i, -1.21500794451954e-03-8.496163204619e-05i, -1.21500794451956e-03+8.49616320463e-05i, -0.0106874359562525+0.0022716846399297i, -0.0283351996132096+0.0103131692411996i, -0.0516755705617767+0.0274763882541851i, -0.0772542485937367+0.0561284970724481i, -0.1009450259937+0.097481478474725i, -0.118311211562746+0.151431445234362i, -0.125+0.21650635094611i, -0.117138246792619+0.289927334668644i, -0.091697846014566+0.367779972441526i, -0.046801131817278+0.445283024979697i, 0.018058735786294+0.517134531945579i, 0.101900933636988+0.577908912337521i, 0.202254248593737+0.622474571220695i, 0.315270204563124+0.646399711551264i, 0.435944803381395+0.646314749919218i, 0.558433187362516+0.620202886580765i, 0.676434265976221+0.567595743096322i, 0.783616834775482+0.489658143691394i, 0.874055380411015+0.389154527907249i, 0.942642872008266+0.270298493966801i, 0.985449458355365+0.138495889434283i));Conj(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinConj_testConj5_2cc5e68e85d29c1e311ea6502b53f7e4() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));Conj(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinConj_testConj6_d9a4ab8140d0d1b613eeee859a91a41c() {
        assertEval("argv <- list(FALSE);Conj(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt1_e9d67dbb4cf514bd8b9c18cbb53d29e8() {
        assertEval("argv <- list(structure(c(14712, 14712), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt2_9c0e3f153c5ad4d97a73eaa87acfb627() {
        assertEval("argv <- list(structure(c(11323, NA, NA, 12717), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt3_fba12ed33293983225e078b7d44deba6() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt4_bd639259bea77fad892d6d0e1b0a673b() {
        assertEval("argv <- list(structure(c(FALSE, FALSE), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt5_ceb868684ad3d7c1310ffae6d5c30066() {
        assertEval("argv <- list(NULL); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt6_b11d7825ea46ea0b0e7cacbd478097bd() {
        assertEval("argv <- list(character(0)); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt7_1259bfd5708bd7f10a45556efcdc34f9() {
        assertEval("argv <- list(structure(11323.9154302836, class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt8_9bc49dc939b9ace7d99616800b8d1cc0() {
        assertEval("argv <- list(structure(c(-21915, -21550, -21185, -20819, -20454, -20089, -19724, -19358, -18993, -18628, -18263, -17897, -17532, -17167, -16802, -16436, -16071, -15706, -15341, -14975, -14610, -14245, -13880, -13514, -13149, -12784, -12419, -12053, -11688, -11323, -10958, -10592, -10227, -9862, -9497, -9131, -8766, -8401, -8036, -7670, -7305, -6940, -6575, -6209, -5844, -5479, -5114, -4748, -4383, -4018, -3653, -3287, -2922, -2557, -2192, -1826, -1461, -1096, -731, -365, 0, 365, 730, 1096, 1461, 1826, 2191, 2557, 2922, 3287, 3652, 4018, 4383, 4748, 5113, 5479, 5844, 6209, 6574, 6940, 7305, 7670, 8035, 8401, 8766, 9131, 9496, 9862, 10227, 10592), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt9_bf3dde227e3258e44e9b499785adf609() {
        assertEval("argv <- list(structure(c(11354, 11382, 11413), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding1_4467cf1f6dabf42a77c4a7a6cf7d7bc7() {
        assertEval("argv <- list('Byte Code Compiler'); .Internal(Encoding(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding2_4e78ef1b1b4588f13ca257df54d0dca6() {
        assertEval("argv <- list(c('\\n', '\\n', '## These cannot be run by examples() but should be OK when pasted\\n', '## into an interactive R session with the tcltk package loaded\\n', '\\n', 'tt <- tktoplevel()\\n', 'tkpack(txt.w <- tktext(tt))\\n', 'tkinsert(txt.w, \\'0.0\\', \\'plot(1:10)\\')\\n', '\\n', '# callback function\\n', 'eval.txt <- function()\\n', '   eval(parse(text = tclvalue(tkget(txt.w, \\'0.0\\', \\'end\\'))))\\n', 'tkpack(but.w <- tkbutton(tt, text = \\'Submit\\', command = eval.txt))\\n', '\\n', '## Try pressing the button, edit the text and when finished:\\n', '\\n', 'tkdestroy(tt)\\n', '\\n', '\\n')); .Internal(Encoding(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding3_5992647ba797230372a412e39cfdd0e8() {
        assertEval("argv <- list('detaching ‘package:nlme’, ‘package:splines’'); .Internal(Encoding(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding4_e733dc96477d1f79666b1666b3c4fd4e() {
        assertEval("argv <- list(structure(character(0), class = 'check_code_usage_in_package')); .Internal(Encoding(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding5_90f446f75e96e650fee7029603e82cf5() {
        assertEval("argv <- list(structure('Type 'demo(PKG::FOO)' to run demonstration 'PKG::FOO'.', .Names = 'demo')); .Internal(Encoding(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding6_7449fff508d037d2046c2d4efb7fa810() {
        assertEval("argv <- list('A shell of class documentation has been written to the file './myTst2/man/DocLink-class.Rd'.\\n'); .Internal(Encoding(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding7_4d932eb25388709f0291f720f54a9c70() {
        assertEval("argv <- list(c('* Edit the help file skeletons in 'man', possibly combining help files for multiple functions.', '* Edit the exports in 'NAMESPACE', and add necessary imports.', '* Put any C/C++/Fortran code in 'src'.', '* If you have compiled code, add a useDynLib() directive to 'NAMESPACE'.', '* Run R CMD build to build the package tarball.', '* Run R CMD check to check the package tarball.', '', 'Read \\'Writing R Extensions\\' for more information.')); .Internal(Encoding(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding9_319db9824e5c4511b17d5729ea8df27d() {
        assertEval("argv <- structure(list(x = 'abc'), .Names = 'x');do.call('Encoding', argv)");
    }

    @Test
    public void TestrGenBuiltinEncodingassign__testEncodingassign_1_d9e73901a0a16c5e8e711375a3a2c926() {
        assertEval("argv <- structure(list(x = 'abc', value = 'UTF-8'), .Names = c('x',     'value'));do.call('Encoding<-', argv)");
    }

    @Test
    public void TestrGenBuiltinISOdatetime_testISOdatetime1_b2aba79edae5b1cd517e9ac6cce5d98e() {
        assertEval("argv <- structure(list(year = 1970, month = 1, day = 1, hour = 0,     min = 0, sec = 0, tz = 'GMT'), .Names = c('year', 'month',     'day', 'hour', 'min', 'sec', 'tz'));do.call('ISOdatetime', argv)");
    }

    @Test
    public void TestrGenBuiltinISOdatetime_testISOdatetime2_ad1225dee2d59d669dce212d20b07cc1() {
        assertEval("argv <- structure(list(year = 2002, month = 6, day = 24, hour = 0,     min = 0, sec = 10), .Names = c('year', 'month', 'day', 'hour',     'min', 'sec'));do.call('ISOdatetime', argv)");
    }

    @Test
    public void TestrGenBuiltinIm_testIm1_5dcbe9036ad8f0dbc0aac39f00ee94a2() {
        assertEval("argv <- list(c(0.117646597100126-0.573973479297987i, -0.740437474899139-0.482946826369552i, -0.333166449062945-0.753763230370951i, -0.256092192198247+0.707588353835588i, 0.522033838837248+0.102958580568997i, -0.651949901695459+0.059749937384601i, 0.235386572284857-0.70459646368007i, 0.077960849563711-0.71721816157401i, -0.563222209454641-0.518013590538404i, -0.068796124369349+0.97981641556181i, 0.244428915757284-0.330850507052219i, 0.451504053079215-0.090319593965852i, 0.04123292199294+0.214538826629216i, -0.422496832339625-0.738527704739573i, -0.451685375030484+0.126357395265016i, 0.375304016677864+0.436900190874168i, -0.674059300339186+0.084416799015191i, 0.739947510877334+0.418982404924464i, 0.509114684244823-0.086484623694157i, -0.535642839219739+0.289927561259502i, 0.629727249341749+0.707648659913726i, -0.262197489402468-0.502198718342861i, -0.333800277698424-0.317646103980588i, -0.422186107911717+0.317002735170286i, -0.616692335171505+0.068946145379939i, -0.136100485502624-0.487679764177213i, -0.68086000613138+0.047032323152903i, 0.296209908189768+0.585533462557103i, 0.43280012844045+0.136998748692477i, -0.680205941942733-0.256569497284745i, 0.787738847475178-0.375602871669773i, 0.76904224100091-0.561876363549783i, 0.332202578950118-0.343917234128459i, -0.983769553611346-0.088288289740869i, -0.046488672133508-0.622109071207677i, -0.280395335170247-0.088565112138884i, 0.379095891586975-0.727769566649926i, -0.372438756103829+0.630754115650567i, 0.976973386685621-0.113639895506141i, -0.150428076228347+0.615598727377677i, 0.762964492726935+0.377685645913312i, -0.7825325866026+0.365371705974346i, -0.792443423040311-0.029652870362208i, 0.265771060547393-0.106618612674382i, -0.076741350022367-0.422144111460857i, 0.120061986786934-0.623033085890884i, 0.636569674033849-0.133150964328944i, -0.145741981978782+0.529165019069452i, 0.516862044313609-0.388779864071743i, 0.368964527385086+0.089207223073295i, -0.215380507641693+0.845013004067436i, 0.065293033525315+0.962527968484271i, -0.034067253738464+0.684309429416465i, 0.328611964770906+0.215416587846774i, -0.583053183540166-0.668235480667835i, -0.782507286391418+0.318827979750013i, 0.037788399171079+0.174802700161256i, 0.310480749443137+0.074551177173735i, 0.436523478910183+0.428166764970505i, -0.458365332711106+0.02467498282614i, -0.271871452223431+0.426340387811162i, 0.590808184713385-0.344468770084509i, -0.349650387953555+0.386026568349676i, -0.865512862653374-0.265651625278222i, -0.236279568941097+0.118144511046681i, -0.197175894348552+0.134038645368463i, 0.866602113481861-0.172567291859327i, 0.031389337713892-0.607820631329035i, 0.754053785184521-0.219050378933476i, -0.499292017172261+0.168065383884658i, 0.151969488085021-0.827990593142535i, -0.266853748421854-0.866413193943766i, 0.071623062591495-0.867246686843546i, -0.788765741891382+0.508717463380604i, -0.228835546857432-0.349587041980114i, 0.500139791176978-0.016703152458872i, 0.15619107374708-0.485402548890295i, -0.369039310626083+0.398423724273751i, -0.611165916680421+0.020983586354237i, -0.399467692630093-0.421179989556223i, 0.411274074028001+0.133781691724871i, 0.573364366690245+0.328833257005489i, -0.265145056696353-0.938538703606894i, 0.387209171815106+0.750271083217101i, -0.41433994791886-0.437159533180399i, -0.476246894615578+0.331179172958982i, -0.168543113030619+0.43048451175239i, -0.594617267459511+0.211980433372292i, 0.388005062566602-0.290649953587954i, -0.013004326537709-0.490434895455784i, 0.069845221019376-0.762134635168809i, 0.243687429599092+0.756774763795962i, 0.27384734040072+0.383667165938905i, -0.51606383094478-0.601506708006782i, -0.894951082455532+0.317442909372288i, 0.5073401683933-0.213001485168032i, -0.441163216905286-0.105671334003774i, -0.343169835663372+0.597359384628839i, -0.283179001991236-0.385834501657171i, -0.517794900198098-0.36732932802092i));Im(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinIm_testIm2_166a0fbf32802990f21c015412732aeb() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));Im(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinIm_testIm3_d27ce0f974803d2f8fd0655b08226bc7() {
        assertEval("argv <- list(FALSE);Im(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinIm_testIm4_47291608eaebbbf6c91122907828a4ae() {
        assertEval("argv <- list(c(0+0i, 0.01-0i, 0.02-0i, 0.03-0i, 0.04-0i, 0.05-0i, 0.06-0i, 0.07-0i, 0.08-0i, 0.09-0i, 0.1-0i, 0.11-0i, 0.12-0i, 0.13-0i, 0.14-0i, 0.15-0i, 0.16-0i, 0.17-0i, 0.18-0i, 0.19-0i, 0.2-0i, 0.21-0i, 0.22-0i, 0.23-0i, 0.24-0i, 0.25-0i, 0.26-0i, 0.27-0i, 0.28-0i, 0.29-0i, 0.3-0i, 0.31-0i, 0.32-0i, 0.33-0i, 0.34-0i, 0.35-0i, 0.36-0i, 0.37-0i, 0.38-0i, 0.39-0i, 0.4-0i, 0.41-0i, 0.42-0i, 0.43-0i, 0.44-0i, 0.45-0i, 0.46-0i, 0.47-0i, 0.48-0i, 0.49-0i, 0.5-0i, 0.51-0i, 0.52-0i, 0.53-0i, 0.54-0i, 0.55-0i, 0.56-0i, 0.57-0i, 0.58-0i, 0.59-0i, 0.6-0i, 0.61-0i, 0.62-0i, 0.63-0i, 0.64-0i, 0.65-0i, 0.66-0i, 0.67-0i, 0.68-0i, 0.69-0i, 0.7-0i, 0.71-0i, 0.72-0i, 0.73-0i, 0.74-0i, 0.75-0i, 0.76-0i, 0.77-0i, 0.78-0i, 0.79-0i, 0.8-0i, 0.81-0i, 0.82-0i, 0.83-0i, 0.84-0i, 0.85-0i, 0.86-0i, 0.87-0i, 0.88-0i, 0.89-0i, 0.9-0i, 0.91-0i, 0.92-0i, 0.93-0i, 0.94-0i, 0.95-0i, 0.96-0i, 0.97-0i, 0.98-0i, 0.99-0i, 1-0i));Im(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinIm_testIm5_daa6f6a7561f0e16ca1b0adc0888bd87() {
        assertEval("argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))));Im(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinIm_testIm6_ceaffdfb48f484191e3c465d7d171154() {
        assertEval("argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i));Im(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinLa_testLa1_a2aefe263aade4050c793d072b09f428() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0), .Dim = c(18L, 7L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18'), c('(Intercept)', 'Rail2', 'Rail5', 'Rail1', 'Rail6', 'Rail3', 'Rail4')))); .Internal(La_qr(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinLa_testLa2_82030ef6446bf50aaa3b9b6f8b894e03() {
        assertEval("argv <- list(structure(c(-4.47213595499958, 0, -6.70820393249937, 2.23606797749979), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Intercept', 'X'))), structure(c(1, 0, 0, 1), .Dim = c(2L, 2L)), 2.22044604925031e-16); .Internal(La_solve(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinLa_testLa3_eeae722616d628fd6eb05793b1e3c58f() {
        assertEval("argv <- list(structure(c(-21.2222451396881, 306.936914624821, 0, 0, 0, -101.353437863947, -21.2222451396881, 0, 0, 0, 45.8768670002026, 63.2672432400162, -11.7486843755171, 0, 0, 65.1621918666428, 125.787781278037, -111.869521123473, 61.0965873274467, -54.389932439947, -26.0785375270079, -209.347244886481, 112.817924425406, 108.385517228532, 61.0965873274467), .Dim = c(5L, 5L), .Dimnames = list(NULL, NULL)), FALSE); .Internal(La_rg(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinLa_testLa4_93e4ac1f4bb285b0ed312b1d5e9813a1() {
        assertEval("argv <- list('S', structure(c(1, 0, 0, 0, 0, 1.4142135623731, 0, 0, 0, 0, 1.73205080756888, 0, 0, 0, 0, 2), .Dim = c(4L, 4L), Dimnames = list(character(0), character(0))), c(2, 1.73205080756888, 1.4142135623731, 1), structure(c(0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0), .Dim = c(4L, 4L)), structure(c(0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0), .Dim = c(4L, 4L))); .Internal(La_svd(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinLa_testLa5_10537d2a8b634e27f7aa11ddfa10a5c6() {
        assertEval("argv <- list(structure(c(0.842723988615538, 1, 0, 1, 0.636010690700881, 1, 0, 1, 0.842723988615537), .Dim = c(3L, 3L)), FALSE); .Internal(La_rs(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinLa_testLa6_02451222db08157c94b3c22f03639c30() {
        assertEval("argv <- list('S', structure(c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(5L, 5L)), c(3.37916576339493, 1.53572230863579, 1.41421356237309, 0.472012430194285, 3.04287016253022e-18), structure(c(-0.38209344041777, -0.441911867608196, -0.441911867608196, -0.563415484445979, -0.38209344041777, -0.594200765232569, 0.307687929858406, 0.307687929858405, 0.32327569786942, -0.594200765232566, 0.499999999999999, -0.5, 0.500000000000001, 7.42461647718073e-16, -0.500000000000001, 0.0304967766615352, 0.45830343560406, 0.458303435604061, -0.760299819185526, 0.0304967766615352, -0.5, -0.5, 0.5, -1.11022302462516e-16, 0.5), .Dim = c(5L, 5L)), structure(c(-0.41058086214689, 0.0239384830763564, -0.707106781186547, -0.575195883735897, 0, -0.428282990831553, 0.611211774620929, 9.15933995315754e-16, 0.331150287627506, 0.577350269189626, -0.41058086214689, 0.0239384830763538, 0.707106781186548, -0.575195883735897, 5.55111512312578e-17, -0.226146609649533, -0.773838814336698, -1.55431223447522e-15, 0.129220226886747, 0.577350269189625, -0.654429600481086, -0.162627039715767, -5.27355936696949e-16, 0.460370514514253, -0.577350269189626), .Dim = c(5L, 5L))); .Internal(La_svd(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinLa_testLa7_b81d60ca77e69ea47558506a09873227() {
        assertEval("argv <- list(structure(c(1, 1, 3, 3), .Dim = c(2L, 2L)), 'O'); .Internal(La_dgecon(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinLa_testLa8_6b7d703bb8b3674554638959f10ddc63() {
        assertEval("argv <- list('N', structure(c(-4, 0, 0, 0, 0, 0, 0, -406.725, 41.7955066364795, 0, 0, 0, 0, 0, -1550.79375, 381.717151319926, 49.8228991342168, 0, 0, 0, 0, -1277.325, 224.617432123818, -31.1858918860748, -282.060212912726, 0, 0, 0, -1042.675, 125.261805546114, -29.9849484767744, 164.425554254677, -170.353263600129, 0, 0, -469.696, 26.3795103523805, 4.19691803785862, -3.18974110831568, 0.0462484557378925, 1.46320172717486, 0, -7818, 18.2758880432689, 1.77525956575195, -1.45298766739792, -0.449176219307484, -0.281900648530911, -0.669305080560524), .Dim = c(7L, 7L), .Dimnames = list(c('1947', '1948', '1949', '1950', '1951', '1952', '1953'), c('(Intercept)', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'))), c(8164.12940108939, 457.24498274114, 324.584423503013, 134.312174464868, 4.95553195929945, 1.41954832076337, 0.000342370904183799), structure(0, .Dim = c(1L, 1L)), structure(0, .Dim = c(1L, 1L))); .Internal(La_svd(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinLa_testLa9_c611268ab5b6a208a3f74df32460fb07() {
        assertEval("argv <- list(structure(c(-9.64365076099295, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, -29634.0055320061, -5658.08855789941, 0.0595010632288954, 0.0648032071760975, 0.106336668095848, -0.0279843118999398, 0.0762911857283688, 0.188519899277481, 0.0807096390177039, 0.102801905464379, 0.158474416910002, -0.0969121832135675, -0.0447744343994132, 0.0356414154664858, 0.0276881995456826, -5.08106330417909, 3.14280306547868, 3.64768208463163, 0.0962151262827947, -0.216651778533863, -0.0914289830351174, 0.0855052819309283, -0.0191216590449975, 0.0813861110263642, 0.0607902565035442, 0.00888870310603775, -0.027169916923919, -0.0757761335977742, 0.123401654252917, -0.143330536432624, -0.207390338946085, -0.18719988871654, -0.127596387499216, 1.38045811630541, 0.0118370110620473, 0.00504893180870276, 0.0281684584122627, 0.0338400772620966, 0.0283917504929648, 0.0295082108964754, 0.0323216911133222, 0.00156557534974961, 0.00420042190203468, 0.0261141712698031, 0.00786241202554953, -3.21455025366432, -2.66432733346907, -2.18217405946767, -1.0459324747522, 2.77707906967759, -0.000588115022584812, -0.0784367740030637, -0.0437014732535189, -0.0770692424774911, 0.28985899050302, 0.307089887725235, -0.0219216068215179, -0.00578473481976082, -0.0910180640383319, 0.0166427821996303, -0.725866186311298, -0.943724610301472, -0.197997366006898, -0.255325765345392, -1.99736582726463, 1.22009740929232, -0.000660179745382102, 0.118090770461339, 0.00401505451472504, -0.265276591063721, -0.206368639386371, -0.0413572976755921, 0.0138104665936721, -0.0436723349383677, 0.0904843084594291, -0.103695169473043, 0.0314422837299137, -0.171533212490836, -0.0271695331685966, -0.234884785308008, -0.455412006973628, -0.833981960018826, -0.0497205266764892, -0.00169048456815939, 0.0359873442560765, 0.0111849454624309, 0.0174129325629219, -0.00581471075176227, 0.0183876477886015, -0.0380971980704758, -1.14064686420347, -1.21031412747477, -0.546078284372325, -0.385964209884133, -0.535335872363138, 0.617909299639904, 0.034437791264286, -2.66782912116871, -0.0707120154460491, 0.170259689757997, -0.200116024334743, -0.0120487035676503, -0.00787104751465206, -0.0743232096613527, -0.00206481367828156, -2.28129372840694, -1.27183039972242, -0.162921372163874, 0.194143545128708, 0.405329624202872, -0.0239884453210967, 0.161826508366356, 1.47283157923894, -3.57122150532158, 0.0184573285734211, 0.0768346205272587, -0.00300367200170235, -0.047539037475449, -0.0955077077363865, 0.170580587807138, -2.17759855893389, 2.82091161681306, -0.529126651121425, 0.00648102843720064, -0.227590137804697, 0.429332016819553, 0.315382802791974, -0.0921680424483324, 0.358484158960907, 2.74734594573339, -0.00180797874108619, 0.211048746835586, 0.146553774483952, 0.0892496085418831, 0.02104367339158, -1.4517323726226, 0.428703993666521, -0.198393471445493, -0.178300389025286, -0.0518091667043893, 0.133208332446864, -1.01393441911662, 0.520772381447608, 0.936102434059857, -1.6420319436063, 2.59716822825227, 0.194828402482676, 0.15057424104202, -0.232155536267878, -0.0298159890277092, -0.933256525257383, -1.20515451427884, 0.0125087156504907, 0.421920000319943, 0.452875082015975, -0.655679104390575, 0.284781968418535, 0.643096539054797, 1.38165893036928, 0.447700892848835, -0.482856979100538, 1.73960015308741, 0.115853953901054, 0.107343556163412, -0.0385322695831968, -25.7267715462619, -8.40853040573162, -1.45105839286435, -1.58984152452525, -1.59606771970776, 2.79428919380473, 0.596892611732863, -1.03839368638655, -0.0376487500979583, -0.507302835476536, 0.184174590388395, -0.70905481454677, -3.32884312972433, 0.134236291836065, -0.0993249017707237, -6.94757635469386, 1.58613921242054, 0.195741168102286, 0.638223445194413, 1.07571321411184, 0.659104584950073, 0.199707908602043, -0.565980943574209, -0.967985377031296, -0.112927393875596, -0.934672543429794, 0.198159847509218, 0.275086401661377, 3.44668029704689, -0.05066048099299, -1.65912271156868, -1.17593571026872, -0.20132598039105, -0.42732880950559, -1.20727437557593, 0.102943259109259, -0.697974199306205, 0.103630431164098, -0.0620963660266192, -0.16978912837867, 0.739571733406047, -0.872308493604205, -0.757980967070979, -2.00985526447536, -1.92891236077264), .Dim = c(15L, 15L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'), c('(Intercept)', 'Weight', 'Cylinders4', 'Cylinders5', 'Cylinders6', 'Cylinders8', 'Cylindersrotary', 'TypeLarge', 'TypeMidsize', 'TypeSmall', 'TypeSporty', 'TypeVan', 'EngineSize', 'DriveTrainFront', 'DriveTrainRear'))), 15L); .Internal(La_chol2inv(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinMod_testMod1_fb3b185716d13b0bfe23a137e50488a1() {
        assertEval("argv <- list(c(0+0i, 0-1.70620776722167e-16i, 0+3.59617031290993e-17i, 3.33066907387547e-16-8.7147236198461e-17i, 3.33066907387547e-16-4.4517026198843e-17i, 5.55111512312578e-16-1.81766397811914e-16i, -2.22044604925031e-16+3.76574595498641e-16i, 3.33066907387547e-16+2.8373545612348e-17i, -6.66133814775094e-16-1.98666621484541e-16i, 1.11022302462516e-15+1.3900988495185e-16i, 0+0i, 1.11022302462516e-16+0i, 0-4.88556439671224e-17i, 1.4432899320127e-15+5.4401706444201e-16i, -6.66133814775094e-16+4.18075097302204e-16i, -1.11022302462516e-15-3.7758383211069e-16i, 1.11022302462516e-16+1.21021749072872e-16i, 5.55111512312578e-16-9.7601012134884e-17i, 0+3.64949907708171e-17i, 2.99760216648792e-15-3.2254749723992e-16i));Mod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinMod_testMod2_dc96f0723575f35d2789efa269c5f470() {
        assertEval("argv <- list(c(1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000));Mod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinMod_testMod3_489e9c3eb0124d4f71c85c0c2a88d0c2() {
        assertEval("argv <- list(structure(c(-0.00275201701154004+0i, 0.73267342182576+1.53432836384434i, 1.19603180664097+2.58954103250214i, -1.78551995785074+3.6927974843213i, -0.21286727655171-2.24663622584203i, 1.71166744547715-2.14519629896288i, -1.56293209739181+1.57166915011841i, -1.58375104473686+3.6829699402818i, -2.00504145581753-1.3546174582843i, 0.683574008984187+0.815530349018154i, -1.53010401343571-2.36562392372444i, 0.99061039704013+3.53936165201907i, 1.67472443120722-1.95559489480179i, -0.68341618370449-2.47704044044817i, 1.48062655483323-1.57686725056915i, 2.87299425968444+2.35949377337065i, 1.8028932379829+0.54336001329155i, 0.8410445275115-2.79377726088858i, -0.85630340738898+1.95000905938152i, -0.070268282309003-0.407774647142381i, 0.87904100084727+1.42913449570069i, -0.5398835286832-1.49689799587001i, -4.20150499254585-1.17770608296304i, -4.20150499254585+1.17770608296304i, -0.5398835286832+1.49689799587001i, 0.87904100084727-1.42913449570068i, -0.070268282309002+0.407774647142381i, -0.85630340738898-1.95000905938152i, 0.8410445275115+2.79377726088858i, 1.8028932379829-0.54336001329155i, 2.87299425968444-2.35949377337065i, 1.48062655483323+1.57686725056915i, -0.68341618370449+2.47704044044817i, 1.67472443120722+1.95559489480179i, 0.99061039704013-3.53936165201907i, -1.53010401343571+2.36562392372443i, 0.683574008984187-0.815530349018153i, -2.00504145581753+1.3546174582843i, -1.58375104473686-3.6829699402818i, -1.56293209739181-1.57166915011841i, 1.71166744547714+2.14519629896288i, -0.21286727655171+2.24663622584203i, -1.78551995785073-3.6927974843213i, 1.19603180664097-2.58954103250214i, 0.73267342182576-1.53432836384434i), .Dim = c(45L, 1L), '`scaled:center`' = -0.00488570008479763));Mod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinMod_testMod4_011e96e22fc7f31b107ddaf032dd099c() {
        assertEval("argv <- list(logical(0));Mod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinMod_testMod5_2b50c65c21649a39ef945c735a7f9b8c() {
        assertEval("argv <- list(c(1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1.12400072777761e+21, 2.5852016738885e+22, 6.20448401733239e+23, 1.5511210043331e+25, 4.03291461126606e+26, 1.08888694504184e+28, 3.04888344611714e+29, 8.8417619937397e+30, 2.65252859812191e+32, 8.22283865417792e+33, 2.63130836933694e+35, 8.68331761881189e+36, 2.95232799039604e+38, 1.03331479663861e+40, 3.71993326789901e+41, 1.37637530912263e+43, 5.23022617466601e+44, 2.03978820811974e+46, 8.15915283247898e+47, 3.34525266131638e+49, 1.40500611775288e+51, 6.04152630633738e+52, 2.65827157478845e+54, 1.1962222086548e+56, 5.50262215981209e+57, 2.58623241511168e+59, 1.24139155925361e+61, 6.08281864034268e+62, 3.04140932017134e+64, 1.55111875328738e+66, 8.06581751709439e+67, 4.27488328406003e+69, 2.30843697339241e+71, 1.26964033536583e+73, 7.10998587804863e+74, 4.05269195048772e+76, 2.35056133128288e+78, 1.3868311854569e+80, 8.32098711274139e+81, 5.07580213877225e+83, 3.14699732603879e+85, 1.98260831540444e+87, 1.26886932185884e+89, 8.24765059208247e+90, 5.44344939077443e+92, 3.64711109181887e+94, 2.48003554243683e+96, 1.71122452428141e+98, 1.19785716699699e+100, 8.50478588567862e+101, 6.12344583768861e+103, 4.47011546151268e+105, 3.30788544151939e+107, 2.48091408113954e+109, 1.88549470166605e+111, 1.45183092028286e+113, 1.13242811782063e+115, 8.94618213078298e+116, 7.15694570462638e+118, 5.79712602074737e+120, 4.75364333701284e+122, 3.94552396972066e+124, 3.31424013456535e+126, 2.81710411438055e+128, 2.42270953836727e+130, 2.10775729837953e+132, 1.85482642257398e+134, 1.65079551609085e+136, 1.48571596448176e+138, 1.3520015276784e+140, 1.24384140546413e+142, 1.15677250708164e+144, 1.08736615665674e+146, 1.03299784882391e+148, 9.9167793487095e+149, 9.61927596824821e+151, 9.42689044888325e+153, 9.33262154439442e+155, 9.33262154439442e+157, 9.42594775983836e+159, 9.61446671503513e+161, 9.90290071648618e+163, 1.02990167451456e+166, 1.08139675824029e+168, 1.14628056373471e+170, 1.22652020319614e+172, 1.32464181945183e+174, 1.44385958320249e+176, 1.58824554152274e+178, 1.76295255109024e+180, 1.97450685722107e+182, 2.23119274865981e+184, 2.54355973347219e+186, 2.92509369349302e+188, 3.3931086844519e+190, 3.96993716080872e+192, 4.68452584975429e+194, 5.57458576120761e+196));Mod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date1_c82ebe1758603c6cfc0331e7dfb6b681() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), mday = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), mon = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), year = c(37L, 16L, 13L, 27L, 47L, 13L, 17L, 23L, 21L, 26L, 20L, 15L, 14L, 14L, 14L, 19L, 48L, 11L, 9L, 13L, 25L, 26L, 10L, 17L, 36L, 38L, 60L, 15L, 19L, 24L, 14L, 5L, 21L, 29L, 26L, 21L, 8L, 28L, 19L, 21L, 25L, 34L, 27L, 28L, 34L, 22L, 23L, 15L, 34L, 25L, 22L, 30L, 24L, 23L, 19L, 32L, 30L, 23L, 30L, 22L, 19L, 32L, 39L, 23L, 20L, 19L, 52L, 27L, 24L, 19L, 25L, 45L, 16L, 43L, 20L, 20L, 31L, 24L, 19L, 26L, 20L, 42L, 19L, 30L, 25L, 24L, 26L, 18L, 22L, 21L, 25L, 28L, 25L, 29L, 33L, 47L, 50L, 45L, 24L, 39L, 24L, 33L, 28L), wday = c(5L, 6L, 3L, 6L, 3L, 3L, 1L, 1L, 6L, 5L, 4L, 5L, 4L, 4L, 4L, 3L, 4L, 0L, 5L, 3L, 4L, 5L, 6L, 1L, 3L, 6L, 5L, 5L, 3L, 2L, 4L, 0L, 6L, 2L, 5L, 6L, 3L, 0L, 3L, 6L, 4L, 1L, 6L, 0L, 1L, 0L, 1L, 5L, 1L, 4L, 0L, 3L, 2L, 1L, 3L, 5L, 3L, 1L, 3L, 0L, 3L, 5L, 0L, 1L, 4L, 3L, 2L, 6L, 2L, 3L, 4L, 1L, 6L, 5L, 4L, 4L, 4L, 2L, 3L, 5L, 4L, 4L, 3L, 3L, 4L, 2L, 5L, 2L, 0L, 6L, 4L, 0L, 4L, 2L, 0L, 3L, 0L, 1L, 2L, 0L, 2L, 0L, 0L), yday = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), isdst = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date10_e6077f7ea345f94f07782d6b962053d5() {
        assertEval("argv <- list(structure(list(sec = 33.1798663139343, min = 47L, hour = 14L, mday = 17L, mon = 2L, year = 114L, wday = 1L, yday = 75L, isdst = 1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT'))); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date2_9b70b097891341078c7ac3dab244742d() {
        assertEval("argv <- list(structure(list(sec = c(0, NA), min = c(0L, NA), hour = c(0L, NA), mday = c(6L, NA), mon = c(10L, NA), year = c(107L, NA), wday = c(2L, NA), yday = c(309L, NA), isdst = c(0L, -1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date3_740afb98118f8d74dd5e20cb76d838f2() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date4_9e105e2633d2cea3f6fa583eed648af4() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 79L, wday = 1L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date5_cf0f678e09dfe011d52de2e8ed0d8a51() {
        assertEval("argv <- list(structure(list(sec = c(0, NA, NA, 0), min = c(0L, NA, NA, 0L), hour = c(0L, NA, NA, 0L), mday = c(1L, NA, NA, 26L), mon = c(0L, NA, NA, 9L), year = c(101L, NA, NA, 104L), wday = c(1L, NA, NA, 2L), yday = c(0L, NA, NA, 299L), isdst = c(0L, -1L, -1L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT')); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date6_b7ab6b6f393888cd0b7c5ce50c88e360() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = c(0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36), year = 100L, wday = 6L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC')); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date7_f57cfa661d06a99778abe1215030336d() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), mday = 1, mon = c(0, 0.5, 1, 1.5, 2, 2.5, 3), year = c(101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102), wday = c(3L, 0L, 6L, 4L, 2L, 0L, 5L, 3L, 1L, 6L, 4L), yday = c(9L, 111L, 12L, 24L, 36L, 48L, 60L, 72L, 84L, 96L, 108L), isdst = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC')); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date8_9ce4b6ff85a11e255209b4e564736888() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 109L, wday = 4L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date9_8f6981305a5c0c94ba02cd526c71a6db() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L), mday = 22:26, mon = c(3L, 3L, 3L, 3L, 3L), year = c(108L, 108L, 108L, 108L, 108L), wday = 2:6, yday = 112:116, isdst = c(-1L, -1L, -1L, -1L, -1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT')); .Internal(POSIXlt2Date(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinPrimitive_testPrimitive1_5059794090fe569a9f6b92a2a4a81997() {
        assertEval("argv <- list('c');.Primitive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinRe_testRe1_8ac7f13814d8bda52b735f34ddb58f40() {
        assertEval("argv <- list(c(0.997564050259824+0.069756473744125i, 0.987588409757226+0.069058909006684i, 0.977612769254628+0.068361344269243i, 0.96763712875203+0.067663779531802i, 0.957661488249431+0.06696621479436i, 0.947685847746833+0.066268650056919i, 0.937710207244235+0.065571085319478i, 0.927734566741637+0.064873520582037i, 0.917758926239038+0.064175955844595i, 0.90778328573644+0.063478391107154i, 0.897807645233842+0.062780826369713i, 0.887832004731244+0.062083261632272i, 0.877856364228645+0.06138569689483i, 0.867880723726047+0.060688132157389i, 0.857905083223449+0.059990567419948i, 0.847929442720851+0.059293002682507i, 0.837953802218252+0.058595437945065i, 0.827978161715654+0.057897873207624i, 0.818002521213056+0.057200308470183i, 0.808026880710458+0.056502743732742i, 0.79805124020786+0.0558051789953i, 0.788075599705261+0.055107614257859i, 0.778099959202663+0.054410049520418i, 0.768124318700065+0.053712484782976i, 0.758148678197466+0.053014920045535i, 0.748173037694868+0.052317355308094i, 0.73819739719227+0.051619790570653i, 0.728221756689672+0.050922225833211i, 0.718246116187073+0.05022466109577i, 0.708270475684475+0.049527096358329i, 0.698294835181877+0.048829531620888i, 0.688319194679279+0.048131966883446i, 0.67834355417668+0.047434402146005i, 0.668367913674082+0.046736837408564i, 0.658392273171484+0.046039272671123i, 0.648416632668886+0.045341707933681i, 0.638440992166287+0.04464414319624i, 0.628465351663689+0.043946578458799i, 0.618489711161091+0.043249013721358i, 0.608514070658493+0.042551448983916i, 0.598538430155894+0.041853884246475i, 0.588562789653296+0.041156319509034i, 0.578587149150698+0.040458754771593i, 0.5686115086481+0.039761190034151i, 0.558635868145502+0.03906362529671i, 0.548660227642903+0.038366060559269i, 0.538684587140305+0.037668495821828i, 0.528708946637707+0.036970931084386i, 0.518733306135109+0.036273366346945i, 0.50875766563251+0.035575801609504i, 0.498782025129912+0.034878236872063i, 0.488806384627314+0.034180672134621i, 0.478830744124716+0.03348310739718i, 0.468855103622117+0.032785542659739i, 0.458879463119519+0.032087977922298i, 0.448903822616921+0.031390413184856i, 0.438928182114323+0.030692848447415i, 0.428952541611724+0.029995283709974i, 0.418976901109126+0.029297718972533i, 0.409001260606528+0.028600154235091i, 0.39902562010393+0.02790258949765i, 0.389049979601331+0.027205024760209i, 0.379074339098733+0.026507460022768i, 0.369098698596135+0.025809895285326i, 0.359123058093537+0.025112330547885i, 0.349147417590938+0.024414765810444i, 0.33917177708834+0.023717201073003i, 0.329196136585742+0.023019636335561i, 0.319220496083144+0.02232207159812i, 0.309244855580545+0.021624506860679i, 0.299269215077947+0.020926942123238i, 0.289293574575349+0.020229377385796i, 0.279317934072751+0.019531812648355i, 0.269342293570153+0.018834247910914i, 0.259366653067554+0.018136683173473i, 0.249391012564956+0.017439118436031i, 0.239415372062358+0.01674155369859i, 0.22943973155976+0.016043988961149i, 0.219464091057161+0.015346424223708i, 0.209488450554563+0.014648859486266i, 0.199512810051965+0.013951294748825i, 0.189537169549367+0.013253730011384i, 0.179561529046768+0.012556165273943i, 0.16958588854417+0.011858600536501i, 0.159610248041572+0.01116103579906i, 0.149634607538974+0.010463471061619i, 0.139658967036375+0.009765906324178i, 0.129683326533777+0.009068341586736i, 0.119707686031179+0.008370776849295i, 0.109732045528581+0.007673212111854i, 0.0997564050259824+0.0069756473744125i, 0.0897807645233842+0.0062780826369713i, 0.0798051240207859+0.00558051789953i, 0.0698294835181877+0.0048829531620888i, 0.0598538430155895+0.0041853884246475i, 0.0498782025129912+0.0034878236872063i, 0.039902562010393+0.002790258949765i, 0.0299269215077947+0.0020926942123238i, 0.0199512810051965+0.0013951294748825i, 0.00997564050259824+0.00069756473744125i, 0+0i));Re(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinRe_testRe2_9a7ed4d21d9aba632838b9e48f6bb172() {
        assertEval("argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))));Re(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinRe_testRe3_d5bef85efc5d2d6ee5a3e5254e7c5db7() {
        assertEval("argv <- list(c(-0.1-0.9i, -0.2-0.8i, -0.3-0.7i, -0.4-0.6i, -0.1-0.5i, -0.2-0.4i, -0.3-0.3i, -0.4-0.2i, -0.1-0.1i));Re(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinRe_testRe4_b28c6570823c222bbecec308cf7070cc() {
        assertEval("argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i));Re(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinRe_testRe5_d4d00a88b6ce482ef8691821fa66e1bd() {
        assertEval("argv <- list(logical(0));Re(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinRe_testRe6_cf742d40ae39c895c4709acd08d93023() {
        assertEval("argv <- list(FALSE);Re(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinRe_testRe7_404a31d5c5aa9929874204c17998a968() {
        assertEval("argv <- list(c(0.00086580086580088+0i, 0.00259740259740261+0i, 0.00519480519480521+0i, 0.00865800865800867+0i, 0.012987012987013+0i, 0.0181818181818182+0i, 0.0242424242424242+0i, 0.0303030303030303+0i, 0.0363636363636363+0i, 0.0424242424242424+0i, 0.0484848484848484+0i, 0.0536796536796536+0i, 0.058008658008658+0i, 0.0614718614718614+0i, 0.064069264069264+0i, 0.0649350649350649+0i, 0.064069264069264+0i, 0.0614718614718614+0i, 0.058008658008658+0i, 0.0536796536796536+0i, 0.0484848484848485+0i, 0.0424242424242424+0i, 0.0363636363636363+0i, 0.0303030303030303+0i, 0.0242424242424242+0i, 0.0181818181818182+0i, 0.012987012987013+0i, 0.00865800865800867+0i, 0.00519480519480521+0i, 0.00259740259740261+0i, 0.000865800865800882+0i));Re(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinReduce_testReduce1_c625550da029520d4fafd5b5027e5da0() {
        assertEval("argv <- structure(list(f = '+', x = 1:7, accumulate = TRUE),     .Names = c('f', 'x', 'accumulate'));do.call('Reduce', argv)");
    }

    @Test
    public void TestrGenBuiltinReduce_testReduce2_68d707d9c4b93d3fb0e16facc6d179cb() {
        assertEval("argv <- structure(list(f = function(f, ...) f(...), x = list(.Primitive('log'),     .Primitive('exp'), .Primitive('acos'), .Primitive('cos')),     init = 0, right = TRUE), .Names = c('f', 'x', 'init', 'right'));do.call('Reduce', argv)");
    }

    @Test
    public void TestrGenBuiltinSyschmod_testSyschmod1_40f07fd2d60a448a3cc4d6f3f7b28367() {
        assertEval("argv <- list(character(0), structure(integer(0), class = 'octmode'), TRUE); .Internal(Sys.chmod(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinSysgetenv_testSysgetenv1_3d26373139ce17678ed43e72c0d74835() {
        assertEval("argv <- list('EDITOR', ''); .Internal(Sys.getenv(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinSysgetenv_testSysgetenv2_7f58d5144c6e451bb7b430ea84a62cbf() {
        assertEval("argv <- list('SWEAVE_OPTIONS', NA_character_); .Internal(Sys.getenv(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinSysglob_testSysglob1_fc87be3ca00889f3e32af348c28c2351() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/src/library/utils/man/unix/*.rd', FALSE); .Internal(Sys.glob(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinSysreadlink_testSysreadlink1_9113b003b8aef1306ce1a5cee13e047c() {
        assertEval("argv <- list(character(0)); .Internal(Sys.readlink(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinSyssetenv_testSyssetenv1_d65915a4f194756781adf4ae91003f30() {
        assertEval("argv <- list('_R_NS_LOAD_', 'Matrix'); .Internal(Sys.setenv(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinSyssetenv_testSyssetenv2_ae39e9c51d2b3ad4538841bf2aa0dac9() {
        assertEval("argv <- list('_R_NS_LOAD_', 'methods'); .Internal(Sys.setenv(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinSyssetenv_testSyssetenv3_c83106efda39d2bc13cd2e78ce92bd9d() {
        assertEval("argv <- list(c('BIBINPUTS', 'add'), c('.:.:/home/lzhao/hg/r-instrumented/share/texmf/bibtex/bib::/home/lzhao/hg/r-instrumented/share/texmf/bibtex/bib:', 'TRUE')); .Internal(Sys.setenv(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinSyssetenv_testSyssetenv5_3946419a55d36a5cbafa78eac9d8a1d3() {
        assertEval("argv <- structure(list(TZ = 'EST5EDT'), .Names = 'TZ');do.call('Sys.setenv', argv)");
    }

    @Test
    public void TestrGenBuiltinSyssetlocale_testSyssetlocale1_ace760dcc6919d504aaeee687218bd42() {
        assertEval("argv <- list(3L, 'C'); .Internal(Sys.setlocale(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinSyssetlocale_testSyssetlocale3_90c86b0a13d6d106a6b4423b54bd2ee0() {
        assertEval("argv <- structure(list(category = 'LC_TIME', locale = 'C'), .Names = c('category',     'locale'));do.call('Sys.setlocale', argv)");
    }

    @Test
    public void TestrGenBuiltinSyssleep_testSyssleep1_f57bc3a0d3b5ebea6f471c007877a609() {
        assertEval("argv <- list(0.5); .Internal(Sys.sleep(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinSyssleep_testSyssleep2_095aa5ae488fb09a47367d68bd6461ac() {
        assertEval("argv <- list(FALSE); .Internal(Sys.sleep(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinSysunsetenv_testSysunsetenv1_ce54c1613ddcccac859ad16f260d079a() {
        assertEval("argv <- list('_R_NS_LOAD_'); .Internal(Sys.unsetenv(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinSysunsetenv_testSysunsetenv3_aa503b4de73e8d108e2f067e5b8e7b6c() {
        assertEval("argv <- list(character(0)); .Internal(Sys.unsetenv(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate1_3f8f60358d2852dd79ac261204d4a455() {
        assertEval("argv <- list('text', 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate10_a13dd2733dd648acb226104e63710036() {
        assertEval("argv <- list('filled.contour', 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate11_b298483fb0dea97de75b038946c13bfe() {
        assertEval("argv <- list(c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), 5, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate12_0cedf2b34efe78f02041ea02771fef5f() {
        assertEval("argv <- list('dtrMatrix-class', 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate2_8ef2508350d61e869159fb1bced52268() {
        assertEval("argv <- list(c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), 3, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate3_580ddff10a0a301ebe71f2a52baf10b6() {
        assertEval("argv <- list('glm', 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate4_a56b774e334eb18474503a585fce66c3() {
        assertEval("argv <- list(c('(Intercept)', 'sin(2 * pi * Time)', 'cos(2 * pi * Time)'), 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate5_0af714c5ca5e93f532f86ce88af44784() {
        assertEval("argv <- list(c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), 4L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate6_6a1b4d9720b96acb1c54dbca06ea0759() {
        assertEval("argv <- list(c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), 3L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate7_fd5f0f39da664491433b226014651c8f() {
        assertEval("argv <- list(c('1_', 'Weight', 'Cylinders4', 'Cylinders5', 'Cylinders6', 'Cylinders8', 'Cylindersrotary', 'TypeLarge', 'TypeMidsize', 'TypeSmall', 'TypeSporty', 'TypeVan', 'EngineSize', 'DriveTrainFront', 'DriveTrainRear'), 4L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate8_74442740ebecb8edfdbcd6b7b8b9c6e8() {
        assertEval("argv <- list(c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), 1L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate9_dd51a4be360dd74734620aa055df07b4() {
        assertEval("argv <- list(character(0), 4L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinabs_testabs1_333a26866cfa971725d2b5d766a7fc29() {
        assertEval("argv <- list(c(0.9, 0.1, 0.3, 0.5, 0.7, 0.9, 0.1, 0.3, 0.5));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs10_08b98ef9f06bcf064f86f944e67fee55() {
        assertEval("argv <- list(structure(c(-7.38958333333333, NA, 1.69041666666667, -16.5495833333333, 8.82041666666667, 8.84041666666667, -2.24958333333333, 9.15041666666667, 0.950416666666669, -12.5095833333333, NA, 8.86041666666667, 1.05041666666667, 3.80041666666667, 5.92041666666667, 16.1404166666667, 3.45041666666667, -32.1695833333333, 12.7504166666667, 1.18041666666667, -6.72958333333333, 14.4804166666667, 1.89041666666667, -37.9795833333333, -0.299583333333331, 2.49041666666667, 7.31041666666667, 0.66041666666667, 2.78041666666667, 3.89041666666667, 3.13041666666667, -6.08958333333333, -1.00958333333333, -1.07958333333333, 9.01041666666667, 7.84041666666667, 8.30041666666668, 9.36041666666667, -6.32958333333333, -47.3395833333333, 4.30041666666667, -2.11958333333333, -4.10958333333333, -2.29958333333333, 11.0004166666667, -1.96958333333333, 11.1804166666667, 2.55041666666667, -2.35958333333333, 7.80041666666667), .Names = c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming')));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs11_8f6bbf9b3aaf42bdc6650dbf16c6166a() {
        assertEval("argv <- list(c(NA, 1L));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs12_89bc29cab4456ce9ffd4baf8e12b985a() {
        assertEval("argv <- list(structure(c(1.47191076131574, 0.586694550701453, NA, 0.258706725324317, 0.948371836939988, 0.396080061109718, NA, 0.350912037541581), .Dim = c(4L, 2L), .Dimnames = list(c('(Intercept)', 'x1', 'x2', 'x3'), c('Estimate', 'Std. Error'))));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs13_db24a189fbd39592132561de9fb97d4a() {
        assertEval("argv <- list(structure(c(0.839669286317987, -1.37400428670216, 0.22900071445036, 0.305334285933814, 0.34350107167554, -0.0763335714834533, -0.877836072059713, 0.610668571867626, 0.763335714834533, -0.763335714834533, -0.763335714834533, 0.763335714834533, -0.45800142890072, 0.80150250057626, -0.22900071445036, -0.11450035722518, -0.34350107167554, 1.03050321502662, -1.03050321502662, 0.34350107167554, 0.11450035722518, -0.152667142966907, -0.0381667857417267, 0.0763335714834533, 0.496168214642447, -0.725168929092807, -0.0381667857417268, 0.267167500192087, 0.954169643543167, -1.52667142966907, 0.190833928708633, 0.381667857417267, 0.610668571867627, -2.78617535914605, 3.74034500268921, -1.56483821541079, 0.190833928708633, -0.572501786125899, 0.5725017861259, -0.190833928708634, 0.267167500192087, -0.229000714450361, -0.34350107167554, 0.305334285933814, 0.190833928708632, 0.190833928708634, -0.954169643543166, 0.572501786125899, -1.06867000076835, 1.67933857263597, -0.152667142966906, -0.45800142890072, -0.610668571867627, 0.877836072059714, 0.0763335714834535, -0.34350107167554, 0.381667857417267, -0.190833928708634, -0.763335714834533, 0.5725017861259, 0.496168214642447, -0.725168929092807, -0.0381667857417268, 0.267167500192087, 0.5725017861259, -0.763335714834533, -0.190833928708633, 0.381667857417267, 0.305334285933813, -0.534335000384173, 0.152667142966907, 0.076333571483453, -0.534335000384172, 0.839669286317985, -0.0763335714834534, -0.22900071445036, 0.0381667857417273, 0.0763335714834524, -0.267167500192087, 0.152667142966907, -0.22900071445036, 0.496168214642446, -0.305334285933813, 0.0381667857417267, 0, 0.190833928708633, -0.381667857417267, 0.190833928708633, 0.11450035722518, 0.0381667857417268, -0.419834643158993, 0.267167500192087, 0.11450035722518, -0.152667142966907, -0.0381667857417267, 0.0763335714834533, -0.22900071445036, 0.11450035722518, 0.45800142890072, -0.34350107167554, -0.496168214642447, 0.725168929092807, 0.0381667857417269, -0.267167500192087, 0.11450035722518, -0.534335000384173, 0.725168929092806, -0.305334285933813), .Names = c('M01', 'M01', 'M01', 'M01', 'M02', 'M02', 'M02', 'M02', 'M03', 'M03', 'M03', 'M03', 'M04', 'M04', 'M04', 'M04', 'M05', 'M05', 'M05', 'M05', 'M06', 'M06', 'M06', 'M06', 'M07', 'M07', 'M07', 'M07', 'M08', 'M08', 'M08', 'M08', 'M09', 'M09', 'M09', 'M09', 'M10', 'M10', 'M10', 'M10', 'M11', 'M11', 'M11', 'M11', 'M12', 'M12', 'M12', 'M12', 'M13', 'M13', 'M13', 'M13', 'M14', 'M14', 'M14', 'M14', 'M15', 'M15', 'M15', 'M15', 'M16', 'M16', 'M16', 'M16', 'F01', 'F01', 'F01', 'F01', 'F02', 'F02', 'F02', 'F02', 'F03', 'F03', 'F03', 'F03', 'F04', 'F04', 'F04', 'F04', 'F05', 'F05', 'F05', 'F05', 'F06', 'F06', 'F06', 'F06', 'F07', 'F07', 'F07', 'F07', 'F08', 'F08', 'F08', 'F08', 'F09', 'F09', 'F09', 'F09', 'F10', 'F10', 'F10', 'F10', 'F11', 'F11', 'F11', 'F11'), label = 'Standardized residuals'));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs14_be387f0615d6322246a8037f862354b5() {
        assertEval("argv <- list(numeric(0));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs15_42e368ad587471ee7343923834e662fd() {
        assertEval("argv <- list(structure(c(NA, NA), .Dim = 1:2, .Dimnames = list('x', c('Estimate', 'Std. Error'))));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs16_24080b327fd1cbc078975d14c69b4b04() {
        assertEval("argv <- list(-3.31827701955945e-05);abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs17_bdcf9ff077797a5d82eb52c705fcc9e7() {
        assertEval("argv <- list(structure(c(-1.36919169254062, -0.210726311672344, 0.00840470379579385, 0.0843659249699204, 0.552921941721332), .Names = c('0%', '25%', '50%', '75%', '100%')));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs18_89a19797216cf436f5dc8cd2d8c25ef9() {
        assertEval("argv <- list(structure(c(8, 7, 6, 5, 4, 3, 2, 1, 0, -1), .Tsp = c(2, 11, 1), class = 'ts'));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs19_c952fb073a27780d3b57a7ff7bd14f88() {
        assertEval("argv <- list(-32L);abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs2_ff85ac93d5b691cfc0d4ce73ed062f62() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE, TRUE));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs20_6da8d62d68c62f9a305a71448507fb36() {
        assertEval("argv <- list(structure(c(-0.233156370250776, -0.239412071306507, -0.467754722340573, -0.313136244157115, 0.165043251865522, -0.32096970624939, -0.383377620527381, -0.709110442848008, -0.235393959061767, 0.141653176746209, -0.522836600482894, -0.313130619764979, -0.127866584288678, -0.443661331439424, -0.272181655694344, -0.267312459146771, -0.421687966603442, -0.489456667260012, -1.09136324227316, -0.365563936224476, -0.19497185571599, -0.355887223690607, -0.284861760091765, 0.10349461735987, -0.29203835454261, -0.437137381511441, -0.283258760238879, -0.864706923796918, -0.28069027865338, -0.328236303967812, -0.413280526174513, 0.353631921283964, -0.170574581087077, -0.350164611041975, -0.35509309393052, 0.371846787851152, 0.0662214922636754, -0.38267166577059, -0.76433272993872, 0.337925286731474, -0.316383144846009, 0.872120012008955, -0.1910867580222, -0.27268759462975, 0.561668608501795, -0.414426404256215, 0.306241460697781, -0.475011430441313, -0.18104902231566, -0.313137168940244, -0.162511371099967, -0.332715804582844, -0.264583655672922, -0.27403739912759, 0.292926038918646, -0.0266469304789678, NaN, 0.246014195648949, -0.384306495215891, -0.0754669363487819, -0.19187230661589, -0.28069027865338, -0.310267174936681, -0.218229559122572, -0.132431123435626, -0.632568727580371, -0.025524040198577, -0.208280705060531, -0.339307274267833, -0.267312459146771, -0.38337762052738, -0.527937499202165, -0.0708139839175417, -0.249126729136488, -0.443661331439424, -0.282353670058315, -0.383117955201771, 0.465652476582142, -0.257667111448151, -0.923882106624253, -0.527902200672803, -0.106397317438703, -0.882784314083567, -0.171789859931029, -0.134719406450945, -0.334299917870866, -0.59592895672967, 0.0477670768238039, -1.67777307729147, 0.0145330024207598, 0.465392111094536, -0.188401359782389, -1.67777307729147), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs21_c8f67db4b1012da2b88cce063f8df68b() {
        assertEval("argv <- list(structure(c(2671, 6.026e+77, 3.161e+152, 3.501e+299, 2.409e+227, 1.529e+302), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs3_61a9e748aec4fab2ea5137b170509030() {
        assertEval("argv <- list(c(-0.510763209393394, Inf, 1, 1, Inf, 1, 0, -1.95785440613009, -48.49854545454, -Inf, 1, 1, 0.342969776609699, 0.00707175387211123));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs4_f91888988f43bddc96c668cab13e929b() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs5_95c806ccdfc50e56c5599677ea5257e7() {
        assertEval("argv <- list(structure(c(-7.0990260398094, -6.52913885777653, -3.11767063409183, -18.6913646342089), .Dim = c(4L, 1L)));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs6_3bc89c2550f27d0855af5dc0db5feb91() {
        assertEval("argv <- list(structure(c(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149), .Tsp = c(4, 153, 1), class = 'ts'));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs7_25211be9b225f212b2c567aa23f96ae0() {
        assertEval("argv <- list(structure(c(3.5527136788005e-15+2.4168586625265e-16i, 2.4980018054066e-16-2.28189378671807e-16i, 0-6.89814774385614e-17i, 0-1.77454768520688e-17i), .Dim = c(2L, 2L)));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs8_9a62d3bd8e4044a39df40e320957aacb() {
        assertEval("argv <- list(1e+07);abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinabs_testabs9_c51f8b5e2b9ab2909e26c0abdecd1518() {
        assertEval("argv <- list(structure(c(56.8666666666667, 52.8833333333333), .Dim = 2L, .Dimnames = structure(list(K = c('0', '1')), .Names = 'K')));abs(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacos_testacos1_dca730e2e59bcd0e606ec7502fe61a31() {
        assertEval("argv <- list(c(0.999950000416665, 0.999800006666578, 0.999550033748988, 0.999200106660978, 0.998750260394966, 0.998200539935204, 0.99755100025328, 0.996801706302619, 0.995952733011994, 0.995004165278026, 0.993956097956697, 0.992808635853866, 0.991561893714788, 0.990215996212637, 0.988771077936042, 0.987227283375627, 0.985584766909561, 0.983843692788121, 0.98200423511727, 0.980066577841242, 0.978030914724148, 0.975897449330606, 0.973666395005375, 0.97133797485203, 0.968912421710645, 0.966389978134513, 0.963770896365891, 0.961055438310771, 0.958243875512697, 0.955336489125606, 0.952333569885713, 0.949235418082441, 0.946042343528387, 0.942754665528346, 0.939372712847379, 0.935896823677935, 0.932327345606034, 0.92866463557651, 0.924909059857313, 0.921060994002885, 0.917120822816605, 0.913088940312308, 0.908965749674885, 0.904751663219963, 0.900447102352677, 0.896052497525525, 0.891568288195329, 0.886994922779284, 0.882332858610121, 0.877582561890373, 0.872744507645751, 0.86781917967765, 0.862807070514761, 0.857708681363824, 0.852524522059506, 0.847255111013416, 0.841900975162269, 0.836462649915187, 0.830940679100164, 0.825335614909678, 0.819648017845479, 0.813878456662534, 0.808027508312152, 0.802095757884293, 0.796083798549056, 0.789992231497365, 0.783821665880849, 0.777572718750928, 0.771246014997107, 0.764842187284488, 0.758361875990508, 0.751805729140895, 0.74517440234487, 0.738468558729588, 0.731688868873821, 0.724836010740905, 0.717910669610943, 0.710913538012277, 0.703845315652236, 0.696706709347165, 0.689498432951747, 0.682221207287614, 0.674875760071267, 0.667462825841308, 0.659983145884982, 0.652437468164052, 0.644826547240001, 0.63715114419858, 0.629412026573697, 0.621609968270664, 0.613745749488812, 0.605820156643463, 0.597833982287298, 0.589788025031098, 0.581683089463884, 0.573519986072457, 0.565299531160354, 0.557022546766217, 0.548689860581588));acos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacos_testacos2_c1f5aef3c39bb3074ce27fda997574df() {
        assertEval("argv <- list(1.54308063481524+0i);acos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacos_testacos3_8836442fa650e9d601a948339bcfce62() {
        assertEval("argv <- list(c(-0.7104065636993+1i, 0.25688370915653+1i, -0.24669187846237+1i, -0.34754259939773+1i, -0.95161856726502+1i, -0.04502772480892+1i, -0.78490446945708+1i, -1.66794193658814+1i, -0.38022652028776+1i, 0.91899660906077+1i, -0.57534696260839+1i, 0.60796432222503+1i, -1.61788270828916+1i, -0.05556196552454+1i, 0.51940720394346+1i, 0.30115336216671+1i, 0.10567619414894+1i, -0.64070600830538+1i, -0.84970434603358+1i, -1.02412879060491+1i, 0.11764659710013+1i, -0.9474746141848+1i, -0.49055744370067+1i, -0.25609219219825+1i, 1.84386200523221+1i, -0.65194990169546+1i, 0.23538657228486+1i, 0.07796084956371+1i, -0.96185663413013+1i, -0.0713080861236+1i, 1.44455085842335+1i, 0.45150405307921+1i, 0.04123292199294+1i, -0.42249683233962+1i, -2.05324722154052+1i, 1.13133721341418+1i, -1.46064007092482+1i, 0.73994751087733+1i, 1.90910356921748+1i, -1.4438931609718+1i, 0.70178433537471+1i, -0.26219748940247+1i, -1.57214415914549+1i, -1.51466765378175+1i, -1.60153617357459+1i, -0.5309065221703+1i, -1.4617555849959+1i, 0.68791677297583+1i, 2.10010894052567+1i, -1.28703047603518+1i, 0.78773884747518+1i, 0.76904224100091+1i, 0.33220257895012+1i, -1.00837660827701+1i, -0.11945260663066+1i, -0.28039533517025+1i, 0.56298953322048+1i, -0.37243875610383+1i, 0.97697338668562+1i, -0.37458085776701+1i, 1.05271146557933+1i, -1.04917700666607+1i, -1.26015524475811+1i, 3.2410399349424+1i, -0.41685758816043+1i, 0.29822759154072+1i, 0.63656967403385+1i, -0.48378062570874+1i, 0.51686204431361+1i, 0.36896452738509+1i, -0.21538050764169+1i, 0.06529303352532+1i, -0.03406725373846+1i, 2.12845189901618+1i, -0.74133609627283+1i, -1.09599626707466+1i, 0.03778839917108+1i, 0.31048074944314+1i, 0.43652347891018+1i, -0.45836533271111+1i, -1.06332613397119+1i, 1.26318517608949+1i, -0.34965038795355+1i, -0.86551286265337+1i, -0.2362795689411+1i, -0.19717589434855+1i, 1.10992028971364+1i, 0.0847372921972+1i, 0.75405378518452+1i, -0.49929201717226+1i, 0.2144453095816+1i, -0.32468591149083+1i, 0.09458352817357+1i, -0.89536335797754+1i, -1.31080153332797+1i, 1.99721338474797+1i, 0.60070882367242+1i, -1.25127136162494+1i, -0.61116591668042+1i, -1.18548008459731+1i));acos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacos_testacos4_1e8250c2066169e674352f3bf441b007() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));acos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh1_6417e4c770e5dd9138567c123e915f2c() {
        assertEval("argv <- list(FALSE);acosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh2_34cde32b8509e28f6d93d1c99ffa1b12() {
        assertEval("argv <- list(logical(0));acosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh3_1812134e9fa54f36f09013a65afa2c65() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));acosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh4_b350d6aea0039cca836edd272bf1a418() {
        assertEval("argv <- list(c(0+2i, 0.0001+2i, 0-2i, 0-2.0001i));acosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh5_c0722300f2990f4da52ef2da956f429b() {
        assertEval("argv <- list(c(10.0676619957778, 9.77014619112734, 9.48151278613522, 9.20149937354487, 8.92985138285227, 8.66632184886646, 8.41067118718443, 8.16266697637608, 7.92208374668136, 7.68870277502741, 7.46231188617936, 7.242705259844, 7.02968324355098, 6.82305217114139, 6.62262418669875, 6.42821707376226, 6.23965408966708, 6.05676380486112, 5.87937994705209, 5.70734125004322, 5.54049130712027, 5.37867842885638, 5.22175550520566, 5.06957987175999, 4.92201318004762, 4.77892127175541, 4.64017405676061, 4.50564539486112, 4.3752129810968, 4.24875823455752, 4.12616619057689, 4.00732539621364, 3.89212780892567, 3.78046869834458, 3.67224655106143, 3.56736297833717, 3.46572262665382, 3.36723309102506, 3.27180483098748, 3.17935108919603, 3.0897878125497, 3.00303357577581, 2.91900950740325, 2.83763921805753, 2.75884873101238, 2.68256641493482, 2.60872291876243, 2.53725110865378, 2.46808600695458, 2.40116473312406, 2.33642644656803, 2.27381229132637, 2.21326534256499, 2.1547305548233, 2.09815471197041, 2.04348637882435, 1.99067585439045, 1.93967512667636, 1.89043782904258, 1.84291919804882, 1.7970760327579, 1.75286665546022, 1.71025087378301, 1.66918994414995, 1.62964653655797, 1.59158470063915, 1.55496983297695, 1.51976864564695, 1.48594913595357, 1.45348055733525, 1.42233339141161, 1.39247932114721, 1.36389120510748, 1.33654305278346, 1.31041000096287, 1.28546829112601, 1.26169524784609, 1.23906925817407, 1.21756975198963, 1.19717718330002, 1.17787301247016, 1.15963968936754, 1.14246063740672, 1.12632023847902, 1.11120381875343, 1.09709763533618, 1.0839888637765, 1.07186558640748, 1.06071678151125, 1.05053231329877, 1.04130292269496, 1.033020218921, 1.02567667186589, 1.01926560524059, 1.01378119050839, 1.00921844158588, 1.00557321031002, 1.00284218266684, 1.00102287577853, 1.00011363564622, 1.00011363564622, 1.00102287577853, 1.00284218266684, 1.00557321031002, 1.00921844158588, 1.01378119050839, 1.01926560524059, 1.02567667186589, 1.033020218921, 1.04130292269496, 1.05053231329877, 1.06071678151125, 1.07186558640748, 1.0839888637765, 1.09709763533618, 1.11120381875343, 1.12632023847902, 1.14246063740672, 1.15963968936754, 1.17787301247016, 1.19717718330002, 1.21756975198963, 1.23906925817407, 1.26169524784609, 1.28546829112601, 1.31041000096287, 1.33654305278346, 1.36389120510748, 1.39247932114721, 1.42233339141161, 1.45348055733525, 1.48594913595357, 1.51976864564695, 1.55496983297695, 1.59158470063915, 1.62964653655796, 1.66918994414995, 1.71025087378301, 1.75286665546022, 1.7970760327579, 1.84291919804882, 1.89043782904258, 1.93967512667636, 1.99067585439045, 2.04348637882435, 2.09815471197041, 2.1547305548233, 2.21326534256499, 2.27381229132637, 2.33642644656803, 2.40116473312406, 2.46808600695458, 2.53725110865378, 2.60872291876243, 2.68256641493482, 2.75884873101238, 2.83763921805753, 2.91900950740325, 3.00303357577581, 3.0897878125497, 3.17935108919602, 3.27180483098748, 3.36723309102506, 3.46572262665381, 3.56736297833717, 3.67224655106143, 3.78046869834458, 3.89212780892567, 4.00732539621364, 4.12616619057689, 4.24875823455752, 4.3752129810968, 4.50564539486111, 4.64017405676061, 4.77892127175541, 4.92201318004762, 5.06957987175999, 5.22175550520565, 5.37867842885638, 5.54049130712027, 5.70734125004322, 5.87937994705209, 6.05676380486112, 6.23965408966708, 6.42821707376226, 6.62262418669875, 6.82305217114139, 7.02968324355097, 7.242705259844, 7.46231188617936, 7.68870277502741, 7.92208374668136, 8.16266697637608, 8.41067118718443, 8.66632184886646, 8.92985138285226, 9.20149937354487, 9.48151278613522, 9.77014619112734, 10.0676619957778));acosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinadist_testadist1_20f330e1a3c56749a78545125e8a8d9c() {
        assertEval("argv <- list(list(c(107L, 105L, 116L, 116L, 101L, 110L)), list(c(115L, 105L, 116L, 116L, 105L, 110L, 103L)), structure(c(1, 1, 1), .Names = c('insertions', 'deletions', 'substitutions')), FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(adist(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinadist_testadist2_01d983ea87a1f9111ebf0d1d90692dc2() {
        assertEval("argv <- list(list(c(107L, 105L, 116L, 116L, 101L, 110L), c(115L, 105L, 116L, 116L, 105L, 110L, 103L)), list(c(107L, 105L, 116L, 116L, 101L, 110L), c(115L, 105L, 116L, 116L, 105L, 110L, 103L)), structure(c(1, 1, 1), .Names = c('insertions', 'deletions', 'substitutions')), TRUE, TRUE, FALSE, FALSE, FALSE); .Internal(adist(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinadist_testadist3_80e43d8a43e882613fad25fd88d3d6e1() {
        assertEval("argv <- list('lasy', '1 lazy 2', c(1L, 1L, 1L), FALSE, TRUE, TRUE, FALSE, FALSE); .Internal(adist(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinadist_testadist4_5cb4c371cce1ef3c985da481867d9904() {
        assertEval("argv <- list(list(), list(), structure(c(1, 1, 1), .Names = c('insertions', 'deletions', 'substitutions')), FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(adist(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinagrep_testagrep1_522aae7611e04f2ba59151cf01e45992() {
        assertEval("argv <- list('x86_64-linux-gnu', 'x86_64-linux-gnu', FALSE, FALSE, c(1L, 1L, 1L), c(0.1, NA, NA, NA, NA), FALSE, TRUE); .Internal(agrep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinagrep_testagrep3_33d528b314749f42953d0f4bac45d56b() {
        assertEval("argv <- list('lasy', c(' 1 lazy 2', '1 lasy 2'), FALSE, FALSE, c(1L, 1L, 1L), structure(c(NA, 0.1, 0.1, 0, 0.1), .Names = c('cost', 'insertions', 'deletions', 'substitutions', 'all')), FALSE, TRUE); .Internal(agrep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinagrep_testagrep4_380a2fc13b70e43d0e289a5420f8149c() {
        assertEval("argv <- list('laysy', c('1 lazy', '1', '1 LAZY'), FALSE, TRUE, c(1L, 1L, 1L), c(2, NA, NA, NA, NA), FALSE, TRUE); .Internal(agrep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinagrep_testagrep5_9c364500a91a276278593a8605406fea() {
        assertEval("argv <- list('laysy', c('1 lazy', '1', '1 LAZY'), TRUE, FALSE, c(1L, 1L, 1L), c(2, NA, NA, NA, NA), FALSE, TRUE); .Internal(agrep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinall_testall1_d4e03f5f091e43597610c779529a0edb() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall10_79f23cea4ff6a272d5b2c805c8c4a052() {
        assertEval("argv <- list(structure(1L, .Names = 'show'));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall11_4577ed9b738ee615b4b69a89f8ee9956() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = 2:3, .Dimnames = list(NULL, c('a', 'b', 'c'))));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall12_56c73c6592eeba0cc82875049fbd8c9f() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, FALSE, TRUE, TRUE), .Tsp = c(1, 5, 1), class = 'ts'));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall14_7aecc62d73f562a89c09e0cb1097e506() {
        assertEval("argv <- list(NA);all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall15_cd49f151b42f0ead5e1182e4f311d78d() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall16_78f8b30c90f50734209903a06fa6d9d0() {
        assertEval("argv <- list(cdo.call('all', argv)");
    }

    @Test
    public void TestrGenBuiltinall_testall17_62cf830e597d426a69597d7f755b483d() {
        assertEval("argv <- structure(list(c(NA, TRUE), na.rm = FALSE), .Names = c('',     'na.rm'));do.call('all', argv)");
    }

    @Test
    public void TestrGenBuiltinall_testall2_f8a73045232379b15a229692f8ba934d() {
        assertEval("argv <- list(structure(c(FALSE, FALSE), .Names = c('x', 'value')));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall3_4230759bcd3e2b5fecbe340fe103917a() {
        assertEval("argv <- list(c(1, 1, 3, 1, 1, 3, 3, 3, 3), FALSE, NULL);all(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall4_2f46bb1732b004009986f99a5653f807() {
        assertEval("argv <- list(structure(c(0, 0, 3, 0, 0, 0, 1, 0, 0, 2, 2, 3.2, -1, 1, 3.2, 4, 3, 0, 0, 0, 0, 3.2, 0, 0, 3.2, 0, 202, 0, 0, 0, 241, 0, 243, 0, 0), .Dim = c(5L, 7L), .Dimnames = list(c('r1', 'r2', 'r3', 'r4', 'r5'), c('c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7'))));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall5_517faf97469b46d6f2993c8b902575db() {
        assertEval("argv <- list(logical(0));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall6_e6f79c66dc28cd91fd895839af406517() {
        assertEval("all( );");
    }

    @Test
    public void TestrGenBuiltinall_testall7_81aaf5aaf8ce3b4a323e3d92c139dd66() {
        assertEval("argv <- list(structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts'));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall8_2fd08035a058aae1cdb885c0b407b9bf() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, FALSE), .Tsp = c(-1, 3, 1), class = 'ts'));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinall_testall9_d211f0e61ee6fef8feaee7d9b9ebe314() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE), .Names = c('+ Temp', '<none>', '+ Soft', '- M.user')));all(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinallequal_testallequal1_378843054a0c5742d31a97c32686cd20() {
        assertEval("argv <- structure(list(target = 0.261799387799149, current = 6.54498469497874),     .Names = c('target', 'current'));do.call('all.equal', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalPOSIXt_testallequalPOSIXt1_7794d4288c2e86a1333c51371fee2e39() {
        assertEval("argv <- structure(list(target = structure(1412833061.16639, class = c('POSIXct',     'POSIXt')), current = structure(1412833061.16839, class = c('POSIXct',     'POSIXt'))), .Names = c('target', 'current'));do.call('all.equal.POSIXt', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalPOSIXt_testallequalPOSIXt2_01a0f550f6faaf9ef6896423d050ba55() {
        assertEval("argv <- structure(list(target = structure(1412833061.16639, class = c('POSIXct',     'POSIXt')), current = structure(list(sec = 41.1663863658905,     min = 37L, hour = 1L, mday = 9L, mon = 9L, year = 114L, wday = 4L,     yday = 281L, isdst = 1L, zone = 'EDT', gmtoff = -14400L),     .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday',         'yday', 'isdst', 'zone', 'gmtoff'), class = c('POSIXlt',         'POSIXt'), tzone = c('', 'EST', 'EDT'))), .Names = c('target',     'current'));do.call('all.equal.POSIXt', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalcharacter_testallequalcharacter1_1d6ae0908921b65db3fa81440e4a621a() {
        assertEval("argv <- structure(list(target = structure(c('A', 'E', 'I', 'M',     'Q', 'U', 'B', 'F', 'J', 'N', 'R', 'V', 'C', 'G', 'K', 'O',     'S', 'W', 'D', 'H', 'L', 'P', 'T', 'X'), .Dim = c(6L, 4L)),     current = structure(c('A', 'E', 'I', 'M', 'Q', 'U', 'B',         'F', 'J', 'N', 'R', 'V', 'C', 'G', 'K', 'O', 'S', 'W',         'D', 'H', 'L', 'P', 'T', 'X'), .Dim = c(6L, 4L))), .Names = c('target',     'current'));do.call('all.equal.character', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalfactor_testallequalfactor1_b2458111773a805367c3689c3f07da95() {
        assertEval("argv <- structure(list(target = structure(c(4L, 5L, 1L, 5L, 3L,     4L, 5L, 3L, 2L, 4L), .Label = c('a', 'c', 'i', 's', 't'),     class = 'factor', contrasts = structure(c(1, 0, 0, 0, -1,         0, 1, 0, 0, -1, -0.247125681008604, -0.247125681008604,         -0.149872105789645, 0.891249148815458, -0.247125681008604,         0.268816352031209, 0.268816352031209, -0.881781351530059,         0.0753322954364324, 0.268816352031209), .Dim = c(5L,         4L), .Dimnames = list(c('a', 'c', 'i', 's', 't'), NULL))),     current = structure(c(4L, 5L, 1L, 5L, 3L, 4L, 5L, 3L, 2L,         4L), .Label = c('a', 'c', 'i', 's', 't'), class = 'factor',         contrasts = structure(c(1, 0, 0, 0, -1, 0, 1, 0, 0, -1,             -0.247125681008604, -0.247125681008604, -0.149872105789645,             0.891249148815458, -0.247125681008604, 0.268816352031209,             0.268816352031209, -0.881781351530059, 0.0753322954364324,             0.268816352031209), .Dim = c(5L, 4L), .Dimnames = list(c('a',             'c', 'i', 's', 't'), NULL)))), .Names = c('target',     'current'));do.call('all.equal.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalnumeric_testallequalnumeric1_25f77d7ac0528f16e53aa2447435a18e() {
        assertEval("argv <- structure(list(target = -13.053274367453, current = -13.053274367453,     tolerance = 8e-16), .Names = c('target', 'current', 'tolerance'));do.call('all.equal.numeric', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalnumeric_testallequalnumeric2_1b39a56fb5bfa73d778be23d1e4e4bda() {
        assertEval("argv <- structure(list(target = c(0, 8, 8, 9, 10, 10, 10, 10,     10, 10, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,     14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16,     16, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 20, 20, 20, 20,     21, 21, 21, 21, 22, 24, 24, 24, 24, 25, 27, 28, 28, 29, 29,     29, 29, 30, 31, 32, 32, 33, 33, 36, 36, 36, 37, 37, 39, 39,     40, 40, 41, 41, 42, 42, 42, 42, 44, 44, 46, 46, 47, 48, 48,     48, 49, 49, 51, 51, 52, 52, 52, 52, 53, 55, 57, 57, 57, 57,     57, 60, 60, 60, 60, 60, 61, 61, 61, 61, 62, 63, 66, 68, 69,     69, 69, 71, 71, 71, 72, 73, 73, 74, 74, 75, 75, 75, 76, 76,     77, 77, 77, 77, 77, 79, 79, 79, 79, 80, 80, 80, 80, 81, 82,     82, 83, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,     85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86,     86, 86, 86, 86, 86, 86, 86, 87, 87, 88, 88, 88, 88, 88, 100,     1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,     18, 19, 20, 21, 22, 24, 24, 25, 27, 27, 28, 29, 30, 31, 32,     33, 34, 36, 36, 37, 39, 39, 40, 41, 42, 43, 44, 46, 46, 47,     48, 49, 51, 51, 52, 53, 54, 55, 57, 57, 59, 59, 60, 61, 62,     63, 64, 66, 66, 68, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,     79, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,     93, 94, 95, 96, 97, 98, 99, 100), current = c(0L, 8L, 8L,     9L, 10L, 10L, 10L, 10L, 10L, 10L, 12L, 12L, 12L, 13L, 13L,     13L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L,     15L, 15L, 15L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 16L,     16L, 16L, 16L, 17L, 17L, 17L, 18L, 18L, 19L, 19L, 20L, 20L,     20L, 20L, 21L, 21L, 21L, 21L, 22L, 24L, 24L, 24L, 24L, 25L,     27L, 28L, 28L, 29L, 29L, 29L, 29L, 30L, 31L, 32L, 32L, 33L,     33L, 36L, 36L, 36L, 37L, 37L, 39L, 39L, 40L, 40L, 41L, 41L,     42L, 42L, 42L, 42L, 44L, 44L, 46L, 46L, 47L, 48L, 48L, 48L,     49L, 49L, 51L, 51L, 52L, 52L, 52L, 52L, 53L, 55L, 57L, 57L,     57L, 57L, 57L, 60L, 60L, 60L, 60L, 60L, 61L, 61L, 61L, 61L,     62L, 63L, 66L, 68L, 69L, 69L, 69L, 71L, 71L, 71L, 72L, 73L,     73L, 74L, 74L, 75L, 75L, 75L, 76L, 76L, 77L, 77L, 77L, 77L,     77L, 79L, 79L, 79L, 79L, 80L, 80L, 80L, 80L, 81L, 82L, 82L,     83L, 84L, 85L, 85L, 85L, 85L, 85L, 85L, 85L, 85L, 85L, 85L,     85L, 85L, 85L, 85L, 85L, 85L, 85L, 85L, 85L, 85L, 85L, 85L,     86L, 86L, 86L, 86L, 86L, 86L, 86L, 86L, 86L, 86L, 86L, 86L,     87L, 87L, 88L, 88L, 88L, 88L, 88L, 100L, 1L, 2L, 3L, 4L,     5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L,     18L, 19L, 20L, 21L, 22L, 24L, 24L, 25L, 27L, 27L, 28L, 29L,     30L, 31L, 32L, 33L, 34L, 36L, 36L, 37L, 39L, 39L, 40L, 41L,     42L, 43L, 44L, 46L, 46L, 47L, 48L, 49L, 51L, 51L, 52L, 53L,     54L, 55L, 57L, 57L, 59L, 59L, 60L, 61L, 62L, 63L, 64L, 66L,     66L, 68L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L,     79L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L,     90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L),     tolerance = 2.22044604925031e-14), .Names = c('target', 'current',     'tolerance'));do.call('all.equal.numeric', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalnumeric_testallequalnumeric3_069fb40b5133cb1beafcda787971a301() {
        assertEval("argv <- structure(list(target = structure(c(1L, 2L, 3L, 4L, 5L,     6L, 7L, 8L, 9L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 3L,     4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 4L, 5L, 6L, 7L, 8L, 9L,     10L, 11L, 12L), .Dim = c(9L, 4L), .Dimnames = list(c('c.1',     'c.2', 'c.3', 'c.4', 'c.5', 'c.6', 'c.7', 'c.8', 'c.9'),     c('A', 'B', 'C', 'D'))), current = structure(c(1, 2, 3, 4,     5, 6, 7, 8, 9, 2.00000000000001, 3, 4, 5, 6, 7, 8, 9, 10,     3.00000000000001, 4, 5, 6, 7, 8, 9, 10, 11, 4.00000000000001,     5, 6, 7, 8, 9, 10, 11, 12), .Dim = c(9L, 4L), .Dimnames = list(c('c.1',     'c.2', 'c.3', 'c.4', 'c.5', 'c.6', 'c.7', 'c.8', 'c.9'),     c('A', 'B', 'C', 'D'))), tolerance = 1e-12), .Names = c('target',     'current', 'tolerance'));do.call('all.equal.numeric', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalnumeric_testallequalnumeric4_ed712e129dac7edc2f86a174951ea404() {
        assertEval("argv <- structure(list(target = 3.18309886183776e-301, current = 3.18309886183791e-301,     tolerance = 1e-15), .Names = c('target', 'current', 'tolerance'));do.call('all.equal.numeric', argv)");
    }

    @Test
    public void TestrGenBuiltinallequalraw_testallequalraw1_9c75cf3a85e31eaacbbbe079cd5c9347() {
        assertEval("argv <- structure(list(target = as.raw(c(1, 2, 3)), current = as.raw(c(1,     2, 3))), .Names = c('target', 'current'));do.call('all.equal.raw', argv)");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames1_91d2bc6274a765dc9039b8316f7baaa7() {
        assertEval("argv <- list(quote(y ~ ((g1) * exp((log(g2/g1)) * (1 - exp(-k * (x - Ta)))/(1 - exp(-k * (Tb - Ta)))))), FALSE, -1L, TRUE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames2_37e29563eceee41b9f93dab8ef411e65() {
        assertEval("argv <- list(logical(0), logical(0), -1L, TRUE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames3_a741436ee90e9dc24d0f9b448e681420() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), TRUE, -1L, FALSE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames4_8502c9c9f94dcf67fc2422000a687a70() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), -1L, FALSE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames5_b7e1ba66ca7346427de4997ca58ae852() {
        assertEval("argv <- list(0.1, FALSE, -1L, TRUE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinallvars_testallvars1_639b4c2ec17d95b654fedb05e999dbab() {
        assertEval("argv <- structure(list(expr = expression(quote(temp[1, ] ~ 3))),     .Names = 'expr');do.call('all.vars', argv)");
    }

    @Test
    public void TestrGenBuiltinand_octmode_testand_octmode1_4a7df79937a53ae14143411150f6cf7c() {
        assertEval("argv <- structure(list(a = structure(integer(0), class = 'octmode'),     b = '400'), .Names = c('a', 'b'));do.call('&.octmode', argv)");
    }

    @Test
    public void TestrGenBuiltinany_testany1_9dff5f5381db45447427434206acf0c5() {
        assertEval("argv <- list(structure(csp = c(1, 101, 1), class = 'ts'));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany10_e804db49f5ce242caeb1084c9bbd4305() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = '')));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany11_a84244cd31d5e70e7655de7bb332969f() {
        assertEval("argv <- list(logical(0));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany12_3a9a8ae5da75e95339616b69c3fd0fc2() {
        assertEval("argv <- list(structure(FALSE, .Dim = c(1L, 1L)));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany13_a2f43c0e0dab43170afe57feb1fdbbb6() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L)));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany14_07c8fc8a98e515b17d11efb665121835() {
        assertEval("argv <- list(c(FALSE, TRUE, FALSE));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany15_17d1ea906d0917c8fb76ff7f15b3baa6() {
        assertEval("argv <- list(structure(c(NA, NA, NA, NA, NA, NA, NA, NA), .Names = c('base', 'utils', 'methods', 'grDevices', 'graphics', 'stats', 'lapack', 'R_X11')));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany17_58be436b003b48508d76dfe0ba27580a() {
        assertEval("argv <- list('NA');do.call('any', argv)");
    }

    @Test
    public void TestrGenBuiltinany_testany2_85d5ac038620bcc76ae08d56e4d9046f() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE), .Dim = 3L, .Dimnames = list(c('A', 'B', 'C'))));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany3_e713cc6fd53e8de21071410ca9506724() {
        assertEval("argv <- list(structure(csp = c(1949, 1960.91666666667, 12), class = 'ts'));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany4_536f2c741ba0f7e276790c10f5315f85() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE), .Names = c('1', '2', '3', '4', '5'), .Dim = 5L, .Dimnames = list(c('1', '2', '3', '4', '5'))));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany5_34add2b2779dda21f8751fdf1b5df823() {
        assertEval("argv <- list(structure(c(14, 2, 0, 2, -7, 0), .Dim = c(3L, 2L)));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany6_be999532b3b9e0ef7e597b08d4584662() {
        assertEval("any( );");
    }

    @Test
    public void TestrGenBuiltinany_testany7_5dcc6c174ae2a9f73a94ef0033afc0fc() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = 3:4, .Dimnames = structure(list(x1 = c('a', 'b', 'c'), x2 = c('a', 'b', 'c', NA)), .Names = c('x1', 'x2'))));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany8_ae2c6f3aa133dd43f68d8e197f8c6329() {
        assertEval("argv <- list(structure(c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = c(4L, 3L), .Dimnames = list(c('<none>', 'Hair:Eye', 'Hair:Sex', 'Eye:Sex'), c('Df', 'Deviance', 'AIC'))));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinany_testany9_76fe26b149a33c833befa948073b34a7() {
        assertEval("argv <- list(c(1L, 1L, 1L, 1L, 1L));any(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated1_3111d28a39edb29becc03b5cccbd6ccd() {
        assertEval("argv <- list(c('U', 'V'), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated10_577cb8bb232d56673692a181b4c1fe62() {
        assertEval("argv <- list(c(12784, 12874, 12965, 13057, 13149, 13239, 13330, 13422, 13514, 13604, 13695, 13787, 13879, 13970, 14061, 14153, 14245, 14335), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated11_87522c74d0a74712e3925c82acf53d84() {
        assertEval("argv <- list(structure(c('A', NA), .Names = c('1', '3')), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated12_38cf3ea7b69177bcec6434c5ae1bb7a0() {
        assertEval("argv <- list(c('A', NA), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated13_3aef2a79ecc1875175c05b31a80d3d60() {
        assertEval("argv <- list(c(12784, 13149, 13514, 13879, 14245, 14610), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated14_9f24db37f658b1b16e06ccc66c618359() {
        assertEval("argv <- list(character(0), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated15_7594414cedee69465e753bf3fdeaa387() {
        assertEval("argv <- list(c(1L, 1L, 1L, 1L, 1L), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated16_58537887c64549359a8a9eb3340717e7() {
        assertEval("argv <- list(c('1', '4', '6', '9', '11', NA, '15', '16', '17', '20', '21', '23', '29', '41', '45', '48', '55', '62', '63', '65', '70', '74', '82', '83', '85', '86', '92', '93', '97', '98', '99', '103', '104', '106', '108', '109', '112', '113', '120', '126', '127', '128', '132', '139', '142', '145', '148', '151', '159', '164', '165', '169', '171', '173', '175', '189', '191', '193', '194', '195', '198', '200', '202', '209', '212', '213', '215', '216', '221', '223', '224', '227'), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated18_930a4b7780b08bcf243f2950eab883b1() {
        assertEval("argv <- structure(list(x = structure(c(3, 2, 7, 2, 6, 2, 7, 2),     .Dim = c(4L, 2L), .Dimnames = list(c('A', 'B', 'C', 'D'),         c('M', 'F'))), MARGIN = 0), .Names = c('x', 'MARGIN'));do.call('anyDuplicated', argv)");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated19_f736432320c5727fb7fef9c141d541d6() {
        assertEval("argv <- structure(list(x = c(1, NA, 3, NA, 3), incomparables = c(3,     NA)), .Names = c('x', 'incomparables'));do.call('anyDuplicated', argv)");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated2_3116dc305c8bed111494aaa7bfb96764() {
        assertEval("argv <- list(c('refClassA', 'envRefClass', '.environment', 'refClass', 'environment', 'refObject'), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated3_da2bc2448e445f5261ef4b6bc38bfcc8() {
        assertEval("argv <- list(c(0, 0.00165722279589047, 0.00331444559178095, 0.00497166838767142, 0.00662889118356189, 0.00828611397945236, 0.00994333677534284, 0.0116005595712333, 0.0132577823671238, 0.0149150051630143, 0.0165722279589047, 0.0182294507547952, 0.0198866735506857, 0.0215438963465761, 0.0232011191424666, 0.0248583419383571, 0.0265155647342476, 0.028172787530138, 0.0298300103260285, 0.031487233121919, 0.0331444559178094, 0.0348016787136999, 0.0364589015095904, 0.0381161243054809, 0.0397733471013713, 0.0414305698972618, 0.0430877926931523, 0.0447450154890428, 0.0464022382849332, 0.0480594610808237, 0.0497166838767142, 0.0513739066726046, 0.0530311294684951, 0.0546883522643856, 0.0563455750602761, 0.0580027978561665, 0.059660020652057, 0.0613172434479475, 0.062974466243838, 0.0646316890397284, 0.0662889118356189, 0.0679461346315094, 0.0696033574273998, 0.0712605802232903, 0.0729178030191808, 0.0745750258150713, 0.0762322486109617, 0.0778894714068522, 0.0795466942027427, 0.0812039169986331, 0.0828611397945236, 0.0845183625904141, 0.0861755853863046, 0.087832808182195, 0.0894900309780855, 0.091147253773976, 0.0928044765698665, 0.0944616993657569, 0.0961189221616474, 0.0977761449575379, 0.0994333677534284, 0.101090590549319, 0.102747813345209, 0.1044050361411, 0.10606225893699, 0.107719481732881, 0.109376704528771, 0.111033927324662, 0.112691150120552, 0.114348372916443, 0.116005595712333, 0.117662818508224, 0.119320041304114, 0.120977264100004, 0.122634486895895, 0.124291709691785, 0.125948932487676, 0.127606155283566, 0.129263378079457, 0.130920600875347, 0.132577823671238, 0.134235046467128, 0.135892269263019, 0.137549492058909, 0.1392067148548, 0.14086393765069, 0.142521160446581, 0.144178383242471, 0.145835606038362, 0.147492828834252, 0.149150051630143, 0.150807274426033, 0.152464497221923, 0.154121720017814, 0.155778942813704, 0.157436165609595, 0.159093388405485, 0.160750611201376, 0.162407833997266, 0.164065056793157, 0.165722279589047, 0.167379502384938, 0.169036725180828, 0.170693947976719, 0.172351170772609, 0.1740083935685, 0.17566561636439, 0.177322839160281, 0.178980061956171, 0.180637284752062, 0.182294507547952, 0.183951730343842, 0.185608953139733, 0.187266175935623, 0.188923398731514, 0.190580621527404, 0.192237844323295, 0.193895067119185, 0.195552289915076, 0.197209512710966, 0.198866735506857, 0.200523958302747, 0.202181181098638, 0.203838403894528, 0.205495626690419, 0.207152849486309, 0.2088100722822, 0.21046729507809, 0.21212451787398, 0.213781740669871, 0.215438963465761, 0.217096186261652, 0.218753409057542, 0.220410631853433, 0.222067854649323, 0.223725077445214, 0.225382300241104, 0.227039523036995, 0.228696745832885, 0.230353968628776, 0.232011191424666, 0.233668414220557, 0.235325637016447, 0.236982859812338, 0.238640082608228, 0.240297305404119, 0.241954528200009, 0.243611750995899, 0.24526897379179, 0.24692619658768, 0.248583419383571, 0.250240642179461, 0.251897864975352, 0.253555087771242, 0.255212310567133, 0.256869533363023, 0.258526756158914, 0.260183978954804, 0.261841201750695, 0.263498424546585, 0.265155647342476, 0.266812870138366, 0.268470092934257, 0.270127315730147, 0.271784538526038, 0.273441761321928, 0.275098984117818, 0.276756206913709, 0.278413429709599, 0.28007065250549, 0.28172787530138, 0.283385098097271, 0.285042320893161, 0.286699543689052, 0.288356766484942, 0.290013989280833, 0.291671212076723, 0.293328434872614, 0.294985657668504, 0.296642880464395, 0.298300103260285, 0.299957326056176, 0.301614548852066, 0.303271771647956, 0.304928994443847, 0.306586217239737, 0.308243440035628, 0.309900662831518, 0.311557885627409, 0.313215108423299, 0.31487233121919, 0.31652955401508, 0.318186776810971, 0.319843999606861, 0.321501222402752, 0.323158445198642, 0.324815667994533, 0.326472890790423, 0.328130113586314, 0.329787336382204, 0.331444559178095, 0.333101781973985, 0.334759004769875, 0.336416227565766, 0.338073450361656, 0.339730673157547, 0.341387895953437, 0.343045118749328, 0.344702341545218, 0.346359564341109, 0.348016787136999, 0.34967400993289, 0.35133123272878, 0.352988455524671, 0.354645678320561, 0.356302901116452, 0.357960123912342, 0.359617346708233, 0.361274569504123, 0.362931792300013, 0.364589015095904, 0.366246237891794, 0.367903460687685, 0.369560683483575, 0.371217906279466, 0.372875129075356, 0.374532351871247, 0.376189574667137, 0.377846797463028, 0.379504020258918, 0.381161243054809, 0.382818465850699, 0.38447568864659, 0.38613291144248, 0.387790134238371, 0.389447357034261, 0.391104579830152, 0.392761802626042, 0.394419025421932, 0.396076248217823, 0.397733471013713, 0.399390693809604, 0.401047916605494, 0.402705139401385, 0.404362362197275, 0.406019584993166, 0.407676807789056, 0.409334030584947, 0.410991253380837, 0.412648476176728, 0.414305698972618, 0.415962921768509, 0.417620144564399, 0.41927736736029, 0.42093459015618, 0.42259181295207, 0.424249035747961), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated4_8d7d2d2f2c78051f1411781cfd0ea8a5() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated5_9492f43b8698c19b9518f1d84c729c41() {
        assertEval("argv <- list(c(NA, 9L, 13L), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated6_f06782ec4eec57cc0f858324c59d824d() {
        assertEval("argv <- list(structure(c('5.1\\r3.5\\r1.4\\r0.2', '4.9\\r3\\r1.4\\r0.2', '4.7\\r3.2\\r1.3\\r0.2', '4.6\\r3.1\\r1.5\\r0.2', '5\\r3.6\\r1.4\\r0.2', '5.4\\r3.9\\r1.7\\r0.4', '4.6\\r3.4\\r1.4\\r0.3', '5\\r3.4\\r1.5\\r0.2', '4.4\\r2.9\\r1.4\\r0.2', '4.9\\r3.1\\r1.5\\r0.1', '5.4\\r3.7\\r1.5\\r0.2', '4.8\\r3.4\\r1.6\\r0.2', '4.8\\r3\\r1.4\\r0.1', '4.3\\r3\\r1.1\\r0.1', '5.8\\r4\\r1.2\\r0.2', '5.7\\r4.4\\r1.5\\r0.4', '5.4\\r3.9\\r1.3\\r0.4', '5.1\\r3.5\\r1.4\\r0.3', '5.7\\r3.8\\r1.7\\r0.3', '5.1\\r3.8\\r1.5\\r0.3', '5.4\\r3.4\\r1.7\\r0.2', '5.1\\r3.7\\r1.5\\r0.4', '4.6\\r3.6\\r1\\r0.2', '5.1\\r3.3\\r1.7\\r0.5', '4.8\\r3.4\\r1.9\\r0.2', '5\\r3\\r1.6\\r0.2', '5\\r3.4\\r1.6\\r0.4', '5.2\\r3.5\\r1.5\\r0.2', '5.2\\r3.4\\r1.4\\r0.2', '4.7\\r3.2\\r1.6\\r0.2', '4.8\\r3.1\\r1.6\\r0.2', '5.4\\r3.4\\r1.5\\r0.4', '5.2\\r4.1\\r1.5\\r0.1', '5.5\\r4.2\\r1.4\\r0.2', '4.9\\r3.1\\r1.5\\r0.2', '5\\r3.2\\r1.2\\r0.2', '5.5\\r3.5\\r1.3\\r0.2', '4.9\\r3.6\\r1.4\\r0.1', '4.4\\r3\\r1.3\\r0.2', '5.1\\r3.4\\r1.5\\r0.2', '5\\r3.5\\r1.3\\r0.3', '4.5\\r2.3\\r1.3\\r0.3', '4.4\\r3.2\\r1.3\\r0.2', '5\\r3.5\\r1.6\\r0.6', '5.1\\r3.8\\r1.9\\r0.4', '4.8\\r3\\r1.4\\r0.3', '5.1\\r3.8\\r1.6\\r0.2', '4.6\\r3.2\\r1.4\\r0.2', '5.3\\r3.7\\r1.5\\r0.2', '5\\r3.3\\r1.4\\r0.2', '7\\r3.2\\r4.7\\r1.4', '6.4\\r3.2\\r4.5\\r1.5', '6.9\\r3.1\\r4.9\\r1.5', '5.5\\r2.3\\r4\\r1.3', '6.5\\r2.8\\r4.6\\r1.5', '5.7\\r2.8\\r4.5\\r1.3', '6.3\\r3.3\\r4.7\\r1.6', '4.9\\r2.4\\r3.3\\r1', '6.6\\r2.9\\r4.6\\r1.3', '5.2\\r2.7\\r3.9\\r1.4', '5\\r2\\r3.5\\r1', '5.9\\r3\\r4.2\\r1.5', '6\\r2.2\\r4\\r1', '6.1\\r2.9\\r4.7\\r1.4', '5.6\\r2.9\\r3.6\\r1.3', '6.7\\r3.1\\r4.4\\r1.4', '5.6\\r3\\r4.5\\r1.5', '5.8\\r2.7\\r4.1\\r1', '6.2\\r2.2\\r4.5\\r1.5', '5.6\\r2.5\\r3.9\\r1.1', '5.9\\r3.2\\r4.8\\r1.8', '6.1\\r2.8\\r4\\r1.3', '6.3\\r2.5\\r4.9\\r1.5', '6.1\\r2.8\\r4.7\\r1.2', '6.4\\r2.9\\r4.3\\r1.3', '6.6\\r3\\r4.4\\r1.4', '6.8\\r2.8\\r4.8\\r1.4', '6.7\\r3\\r5\\r1.7', '6\\r2.9\\r4.5\\r1.5', '5.7\\r2.6\\r3.5\\r1', '5.5\\r2.4\\r3.8\\r1.1', '5.5\\r2.4\\r3.7\\r1', '5.8\\r2.7\\r3.9\\r1.2', '6\\r2.7\\r5.1\\r1.6', '5.4\\r3\\r4.5\\r1.5', '6\\r3.4\\r4.5\\r1.6', '6.7\\r3.1\\r4.7\\r1.5', '6.3\\r2.3\\r4.4\\r1.3', '5.6\\r3\\r4.1\\r1.3', '5.5\\r2.5\\r4\\r1.3', '5.5\\r2.6\\r4.4\\r1.2', '6.1\\r3\\r4.6\\r1.4', '5.8\\r2.6\\r4\\r1.2', '5\\r2.3\\r3.3\\r1', '5.6\\r2.7\\r4.2\\r1.3', '5.7\\r3\\r4.2\\r1.2', '5.7\\r2.9\\r4.2\\r1.3', '6.2\\r2.9\\r4.3\\r1.3', '5.1\\r2.5\\r3\\r1.1', '5.7\\r2.8\\r4.1\\r1.3', '6.3\\r3.3\\r6\\r2.5', '5.8\\r2.7\\r5.1\\r1.9', '7.1\\r3\\r5.9\\r2.1', '6.3\\r2.9\\r5.6\\r1.8', '6.5\\r3\\r5.8\\r2.2', '7.6\\r3\\r6.6\\r2.1', '4.9\\r2.5\\r4.5\\r1.7', '7.3\\r2.9\\r6.3\\r1.8', '6.7\\r2.5\\r5.8\\r1.8', '7.2\\r3.6\\r6.1\\r2.5', '6.5\\r3.2\\r5.1\\r2', '6.4\\r2.7\\r5.3\\r1.9', '6.8\\r3\\r5.5\\r2.1', '5.7\\r2.5\\r5\\r2', '5.8\\r2.8\\r5.1\\r2.4', '6.4\\r3.2\\r5.3\\r2.3', '6.5\\r3\\r5.5\\r1.8', '7.7\\r3.8\\r6.7\\r2.2', '7.7\\r2.6\\r6.9\\r2.3', '6\\r2.2\\r5\\r1.5', '6.9\\r3.2\\r5.7\\r2.3', '5.6\\r2.8\\r4.9\\r2', '7.7\\r2.8\\r6.7\\r2', '6.3\\r2.7\\r4.9\\r1.8', '6.7\\r3.3\\r5.7\\r2.1', '7.2\\r3.2\\r6\\r1.8', '6.2\\r2.8\\r4.8\\r1.8', '6.1\\r3\\r4.9\\r1.8', '6.4\\r2.8\\r5.6\\r2.1', '7.2\\r3\\r5.8\\r1.6', '7.4\\r2.8\\r6.1\\r1.9', '7.9\\r3.8\\r6.4\\r2', '6.4\\r2.8\\r5.6\\r2.2', '6.3\\r2.8\\r5.1\\r1.5', '6.1\\r2.6\\r5.6\\r1.4', '7.7\\r3\\r6.1\\r2.3', '6.3\\r3.4\\r5.6\\r2.4', '6.4\\r3.1\\r5.5\\r1.8', '6\\r3\\r4.8\\r1.8', '6.9\\r3.1\\r5.4\\r2.1', '6.7\\r3.1\\r5.6\\r2.4', '6.9\\r3.1\\r5.1\\r2.3', '5.8\\r2.7\\r5.1\\r1.9', '6.8\\r3.2\\r5.9\\r2.3', '6.7\\r3.3\\r5.7\\r2.5', '6.7\\r3\\r5.2\\r2.3', '6.3\\r2.5\\r5\\r1.9', '6.5\\r3\\r5.2\\r2', '6.2\\r3.4\\r5.4\\r2.3', '5.9\\r3\\r5.1\\r1.8'), .Dim = c(50L, 3L), .Dimnames = list(NULL, c('Setosa', 'Versicolor', 'Virginica'))), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated7_5eff61780593c0765e281b2683906553() {
        assertEval("argv <- list(c(-6, -3, 0, 3, 6, 9, 12, 15), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated8_a89c6f7b004baed832ea9b696d33e29b() {
        assertEval("argv <- list(c(9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 1L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L), FALSE, TRUE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated9_65fcf4553f84fc3ebcf556ac8c264fa4() {
        assertEval("argv <- list(c(-1.001, -1, -0.999), FALSE, FALSE); .Internal(anyDuplicated(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinanyDuplicateddefault_testanyDuplicateddefault1_b4b7b07f0ac3344979f7a20a2d747941() {
        assertEval("argv <- structure(list(x = c(1, NA, 3, NA, 3), incomparables = c(3,     NA)), .Names = c('x', 'incomparables'));do.call('anyDuplicated.default', argv)");
    }

    @Test
    public void TestrGenBuiltinanyDuplicatedmatrix_testanyDuplicatedmatrix1_1bad66c68c3401eb999d5cdd3b1e96d5() {
        assertEval("argv <- structure(list(x = structure(c(3, 2, 7, 2, 6, 2, 7, 2),     .Dim = c(4L, 2L), .Dimnames = list(c('A', 'B', 'C', 'D'),         c('M', 'F'))), MARGIN = 0), .Names = c('x', 'MARGIN'));do.call('anyDuplicated.matrix', argv)");
    }

    @Test
    public void TestrGenBuiltinanyNA_testanyNA1_4f6302c594507f9a5055e414e8204e2f() {
        assertEval("argv <- list(c(1.81566026854212e-304, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0));do.call('anyNA', argv)");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm1_96b2cdeb00518e3fe3eaa70cb032ccd8() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = c(5L, 14L), .Dimnames = list(c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'), NULL)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm10_37e09863e2671c0d1f8ec9eff515bfb0() {
        assertEval("argv <- list(structure(c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8), .Dim = c(4L, 4L, 2L), .Dimnames = structure(list(Hair = c('Black', 'Brown', 'Red', 'Blond'), Eye = c('Brown', 'Blue', 'Hazel', 'Green'), Sex = c('Male', 'Female')), .Names = c('Hair', 'Eye', 'Sex')), class = 'table'), c(3L, 1L, 2L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm11_3868cd8d06b2ea879d5f457703462036() {
        assertEval("argv <- list(structure(list(3, 3, 3, 3, 3, 'fred'), .Dim = 2:3), NULL, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm12_341884e85b3bb1579dbfe444c4f1e3c3() {
        assertEval("argv <- list(structure(c(1, 0, -1, 0.5, -0.5, NA, NA, NA, 0), .Dim = c(3L, 3L)), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm13_e391bcfbff0caf4cbdeb67dd49b34c1e() {
        assertEval("argv <- list(structure(c('    Null deviance:', 'Residual deviance:', '3.118557', '0.012672', ' on', ' on', '8', '7', ' degrees of freedom\\n', ' degrees of freedom\\n'), .Dim = c(2L, 5L), .Dimnames = list(c('null.deviance', 'deviance'), NULL)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm14_59178f949f0d55e4cc68c4644ac6d9ed() {
        assertEval("argv <- list(structure(character(0), .Dim = c(3L, 0L, 2L)), 1:3, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm15_cef9555938417a65760cac0c3cb61fe6() {
        assertEval("argv <- list(structure(cim = c(5L, 20L), .Dimnames = list(c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'), NULL)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm16_a579fb8cc6bd8d6e2935c7b4d1d100e4() {
        assertEval("argv <- list(structure(c(0.537261763078809+0i, 0.305061935059249+0.040985454461732i, 0.320062315956695-0.375563080684187i, 0.339383913939873+0.23302799386284i, -0.286918674221019+0.348301421162371i, 0.333809303929022+0i, -0.026432475532662-0.117484096686937i, 0.337897321317337+0.476009430788475i, -0.104431629205049-0.683873316213355i, -0.076600108155357+0.221030150757328i, 0.0283375771475593+0i, -0.439625821284244+0.725562264268455i, -0.093252555843956-0.328135936730845i, 0.099659684890077-0.362886081139892i, -0.146024566266657+0.013219412797458i, 0.437826208287688+0i, -0.047393587739568+0.297523229473226i, 0.053640336864496+0.244704251340016i, 0.189395328272566+0.197948900656662i, 0.744900728861518-0.157648587806964i, -0.63829956885596+0i, 0.190923866036828+0.209348060979014i, 0.478761262752136+0.086103851005322i, 0.365383456834977-0.041833555661111i, 0.222902888615007+0.301211043305794i), .Dim = c(5L, 5L)), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm17_629b4828c12fca35fa61c9b12e115f3f() {
        assertEval("argv <- list(structure(c('add1', 'anova', 'coef', 'confint', 'drop1', 'extractAIC', 'logLik', 'model.frame', 'predict', 'print', 'print', 'summary', 'vcov', 'coef', 'predict', 'print', 'print', 'summary', 'nnet', 'nnet', 'multinom', 'multinom', 'multinom', 'multinom', 'multinom', 'multinom', 'multinom', 'multinom', 'multinom', 'multinom', 'summary.multinom', 'multinom', 'multinom', 'nnet', 'nnet', 'nnet', 'summary.nnet', 'nnet', 'default', 'formula', NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = c(20L, 3L)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm18_3bf1ef1ff1b7463e6e4cd88abb5cca21() {
        assertEval("argv <- list(structure(c(NA, NA, NA), .Dim = 3L), 1L, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm19_04dc84bdcf3d22a59a3ef718a56bbb0f() {
        assertEval("argv <- list(structure(c(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 4000, 8000, 12000, 16000, 20000, 24000, 28000, 32000, 36000, 40000, 44000, 48000, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 8000, 16000, 24000, 32000, 40000, 48000, 56000, 64000, 72000, 80000, 88000, 96000, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 12000, 24000, 36000, 48000, 60000, 72000, 84000, 96000, 108000, 120000, 132000, 144000, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 16000, 32000, 48000, 64000, 80000, 96000, 112000, 128000, 144000, 160000, 176000, 192000, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 20000, 40000, 60000, 80000, 1e+05, 120000, 140000, 160000, 180000, 2e+05, 220000, 240000, 24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 24000, 48000, 72000, 96000, 120000, 144000, 168000, 192000, 216000, 240000, 264000, 288000, 28, 56, 84, 112, 140, 168, 196, 224, 252, 280, 308, 336, 28000, 56000, 84000, 112000, 140000, 168000, 196000, 224000, 252000, 280000, 308000, 336000, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 32000, 64000, 96000, 128000, 160000, 192000, 224000, 256000, 288000, 320000, 352000, 384000, 36, 72, 108, 144, 180, 216, 252, 288, 324, 360, 396, 432, 36000, 72000, 108000, 144000, 180000, 216000, 252000, 288000, 324000, 360000, 396000, 432000, 40, 80, 120, 160, 200, 240, 280, 320, 360, 400, 440, 480, 40000, 80000, 120000, 160000, 2e+05, 240000, 280000, 320000, 360000, 4e+05, 440000, 480000, 44, 88, 132, 176, 220, 264, 308, 352, 396, 440, 484, 528, 44000, 88000, 132000, 176000, 220000, 264000, 308000, 352000, 396000, 440000, 484000, 528000, 48, 96, 144, 192, 240, 288, 336, 384, 432, 480, 528, 576, 48000, 96000, 144000, 192000, 240000, 288000, 336000, 384000, 432000, 480000, 528000, 576000, 52, 104, 156, 208, 260, 312, 364, 416, 468, 520, 572, 624, 52000, 104000, 156000, 208000, 260000, 312000, 364000, 416000, 468000, 520000, 572000, 624000, 56, 112, 168, 224, 280, 336, 392, 448, 504, 560, 616, 672, 56000, 112000, 168000, 224000, 280000, 336000, 392000, 448000, 504000, 560000, 616000, 672000, 60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 60000, 120000, 180000, 240000, 3e+05, 360000, 420000, 480000, 540000, 6e+05, 660000, 720000, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 64000, 128000, 192000, 256000, 320000, 384000, 448000, 512000, 576000, 640000, 704000, 768000, 68, 136, 204, 272, 340, 408, 476, 544, 612, 680, 748, 816, 68000, 136000, 204000, 272000, 340000, 408000, 476000, 544000, 612000, 680000, 748000, 816000, 72, 144, 216, 288, 360, 432, 504, 576, 648, 720, 792, 864, 72000, 144000, 216000, 288000, 360000, 432000, 504000, 576000, 648000, 720000, 792000, 864000, 76, 152, 228, 304, 380, 456, 532, 608, 684, 760, 836, 912, 76000, 152000, 228000, 304000, 380000, 456000, 532000, 608000, 684000, 760000, 836000, 912000, 80, 160, 240, 320, 400, 480, 560, 640, 720, 800, 880, 960, 80000, 160000, 240000, 320000, 4e+05, 480000, 560000, 640000, 720000, 8e+05, 880000, 960000, 84, 168, 252, 336, 420, 504, 588, 672, 756, 840, 924, 1008, 84000, 168000, 252000, 336000, 420000, 504000, 588000, 672000, 756000, 840000, 924000, 1008000, 88, 176, 264, 352, 440, 528, 616, 704, 792, 880, 968, 1056, 88000, 176000, 264000, 352000, 440000, 528000, 616000, 704000, 792000, 880000, 968000, 1056000, 92, 184, 276, 368, 460, 552, 644, 736, 828, 920, 1012, 1104, 92000, 184000, 276000, 368000, 460000, 552000, 644000, 736000, 828000, 920000, 1012000, 1104000, 96, 192, 288, 384, 480, 576, 672, 768, 864, 960, 1056, 1152, 96000, 192000, 288000, 384000, 480000, 576000, 672000, 768000, 864000, 960000, 1056000, 1152000), .Dim = c(3L, 4L, 2L, 3L, 4L, 2L), .Dimnames = list(c('A', 'B', 'C'), c('D', 'E', 'F', 'G'), c('frequentist', 'bayesian'), NULL, NULL, c('happy', 'sad'))), c(4L, 1L, 5L, 2L, 6L, 3L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm2_08085d9607b7ef91bc0914acf581e31f() {
        assertEval("argv <- list(structure(c('[', 'as.data.frame', 'plot', 'print', 'summary', 'as.character', 'print', 'print', 'plot', 'update', 'dim', 'dimnames', 'dimnames<-', '[', 't', 'summary', 'print', 'barchart', 'barchart', 'barchart', 'barchart', 'barchart', 'barchart', 'bwplot', 'bwplot', 'densityplot', 'densityplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'histogram', 'histogram', 'histogram', 'qqmath', 'qqmath', 'stripplot', 'stripplot', 'qq', 'xyplot', 'xyplot', 'levelplot', 'levelplot', 'levelplot', 'levelplot', 'contourplot', 'contourplot', 'contourplot', 'contourplot', 'cloud', 'cloud', 'cloud', 'wireframe', 'wireframe', 'splom', 'splom', 'splom', 'parallelplot', 'parallelplot', 'parallelplot', 'parallel', 'parallel', 'parallel', 'tmd', 'tmd', 'llines', 'ltext', 'lpoints', 'shingle', 'shingle', 'shingle', 'shingle', 'shingle', 'shingleLevel', 'shingleLevel', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'summary.trellis', 'formula', 'array', 'default', 'matrix', 'numeric', 'table', 'formula', 'numeric', 'formula', 'numeric', 'formula', 'array', 'default', 'matrix', 'numeric', 'table', 'formula', 'factor', 'numeric', 'formula', 'numeric', 'formula', 'numeric', 'formula', 'formula', 'ts', 'formula', 'table', 'array', 'matrix', 'formula', 'table', 'array', 'matrix', 'formula', 'matrix', 'table', 'formula', 'matrix', 'formula', 'matrix', 'data.frame', 'formula', 'matrix', 'data.frame', 'formula', 'matrix', 'data.frame', 'formula', 'trellis', 'default', 'default', 'default', NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = c(70L, 3L)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm20_a60260052b25fde56101fe8dbd0e68d8() {
        assertEval("argv <- list(structure(1:24, .Dim = c(4L, 6L), .Dimnames = structure(list(happy = c('a', 'b', 'c', 'd'), sad = c('A', 'B', 'C', 'D', 'E', 'F')), .Names = c('happy', 'sad'))), c(2, 1), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm21_ce4c8e2814e108f6506868be605410c5() {
        assertEval("argv <- list(structure(1:120, .Dim = 2:5, .Dimnames = list(NULL, c('a', 'b', 'c'), NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))), 1:4, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm22_64d5bebb43aff8cefa15f42e5f425cb4() {
        assertEval("argv <- list(structure(c('    Null deviance:', 'Residual deviance:', '67.5316', ' 4.5512', ' on', ' on', '9', '7', ' degrees of freedom\\n', ' degrees of freedom\\n'), .Dim = c(2L, 5L), .Dimnames = list(c('null.deviance', 'deviance'), NULL)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm23_612171dd55066ba36fe3cbfe213cb44b() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE), .Dim = c(3L, 1L)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm24_bbec9b3d0b9ac37bc11289bead4a9a49() {
        assertEval("argv <- list(structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5), .Dim = c(8L, 2L), .Dimnames = list(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), c('x1', 'x2'))), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm25_1c60d8417af5ed2e2eb30ec63ebc0415() {
        assertEval("argv <- list(structure(c(0, 1.23517986278748, 1.95771376416406, 2.47035972557496, 2.86799882564536, 3.19289362695154, 3.46758826742286, 3.70553958836244, 3.91542752832811, 4.10317868843284, 4.27302027203108, 4.42807348973901, 4.57070862330685, 4.70276813021034, 4.82571258980942, 4.94071945114991, 5.04875179140451, 5.15060739111559, 5.2469545231864, 5.33835855122032, 5.42530203158692, 5.50820013481856, 5.58741263619316, 5.66325335252649, 5.73599765129073, 5.80588848609433, 5.87314129249217, 5.93794799299782, 6.00048029898585, 6.0608924525969, 6.11932351888589, 6.17589931393739, 6.23073403619514, 6.28393165419199, 6.33558709306823, 6.38578725390307, 6.43461189335533, 6.48213438597388, 6.52842238747091, 6.5735384140078, 6.61754034994095, 6.6604818943744, 6.70241295516147, 6.74337999760604, 6.78342635397348, 6.82259249898064, 6.86091629565604, 6.89843321531397, 6.93517653484573, 6.97117751407821, 7.00646555556857, 7.04106834888181, 7.07501200112497, 7.10832115527965, 7.14101909767645, 7.1731278557853, 7.20466828735046, 7.23566016177333, 7.26612223453848, 7.29607231538438, 7.3255273308395, 7.35450338167337, 7.38301579575098, 7.41107917672487, 7.43870744895221, 7.46591389898262, 7.49271121392624, 7.51911151697947, 7.54512640035722, 7.57076695585571, 7.59604380324749, 7.62096711669055, 7.64554664931599, 7.66979175614282, 7.69371141545478, 7.71731424876136, 7.74060853945395, 7.76360225025839, 7.78630303957574, 7.80871827679528, 7.83085505665623, 7.85272021272842, 7.87432033007586, 7.89566175716188, 7.91675061704988, 7.93759281794895, 7.95819406314991, 7.97855986039352, 7.99869553070936, 8.01860621676096, 8.03829689072971, 8.05777236176812, 8.07703728304995, 8.09609615844352, 8.11495334883177, 8.13361307810145, 8.15207943882202, 8.17035639763321, 8.1884478003592, 8.20635737686569, 5.76558893216369, 5.5342688729893, 5.69366159038267, 6.17674775070929, 6.08762735966107, 6.68653280779044, 6.70253591217234, 6.32938323618963, 6.81735284786279, 6.64835766778347, 6.91213030655848, 7.1496842781073, 7.25682341590407, 7.46164094256645, 7.37149913131863, 7.56470707593246, 7.71334191900841, 7.71375128844693, 7.82793409372511, 7.90749319121623, 7.96255733207686, 8.11381187364273, 8.21211505208663, 8.18427543602736, 8.29133399017863, 8.31295002652197, 8.345677476918, 8.39053879616249, 8.40857122007675, 8.48086068897741, 8.7064475146364, 8.66563269607315, 8.79435721712053, 8.7996087849725, 8.82443395257555, 8.91314507957224, 8.8999544270272, 8.96760168103462, 8.93548690078514, 9.01332239000153, 9.07083338712431, 9.15422051683385, 9.20109302097792, 9.2062218972166, 9.31170984199071, 9.30909253379462, 9.35447695163181, 9.45333740615033, 9.41458248768079, 9.46983861007334, 9.51652628670815, 9.5301888386762, 9.59497468213833, 9.61268143770055, 9.64141492393412, 9.68857453461133, 9.77580537125637, 9.79816256416163, 9.79128849346381, 9.80699184934282, 9.91833626833319, 9.95487179604373, 9.88086373278725, 9.93505313047982, 9.97034080826287, 9.97752630228797, 10.1165750634827, 10.0977558023188, 10.1414502841663, 10.129071787117, 10.166774063688, 10.1792762662323, 10.2172491181904, 10.2670710204409, 10.2742314938915, 10.287876622612, 10.3447249333494, 10.4075370351282, 10.3465199067119, 10.4404223214255, 10.422301774768, 10.4739543513507, 10.5314461891317, 10.4813429169605, 10.5097541699286, 10.5389544549716, 10.5752633644781, 10.6133054015308, 10.6776080133421, 10.6266190058322, 10.6657950921482, 10.7067723709738, 10.7424707425861, 10.7418659657784, 10.7335163259687, 10.780101845273, 10.8334343829096, 10.8616735406708, 10.8535694508523, 10.8900668188725), .Dim = c(100L, 2L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'), c('log(x)', 'log(z)'))), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm27_2ca8f90aa0f603db60de31becde6f5da() {
        assertEval("argv <- structure(list(a = structure(c(0.124248979591837, 0.266432653061224,     0.404342857142857, 0.0992163265306122, 0.0851836734693878,     0.0937632653061225, 0.0163551020408163, 0.182897959183673,     0.303289795918367, 0.010330612244898, 0.0557795918367347,     0.0490938775510204, 0.0992163265306122, 0.0851836734693878,     0.0937632653061225, 0.143689795918367, 0.098469387755102,     0.104004081632653, 0.0116979591836735, 0.0826530612244898,     0.0713795918367347, 0.00929795918367347, 0.0412040816326531,     0.0476285714285714, 0.0163551020408163, 0.182897959183673,     0.303289795918367, 0.0116979591836735, 0.0826530612244898,     0.0713795918367347, 0.0301591836734694, 0.220816326530612,     0.304587755102041, 0.00606938775510204, 0.0731020408163265,     0.0488244897959184, 0.010330612244898, 0.0557795918367347,     0.0490938775510204, 0.00929795918367347, 0.0412040816326531,     0.0476285714285714, 0.00606938775510204, 0.0731020408163265,     0.0488244897959184, 0.0111061224489796, 0.0391061224489796,     0.0754326530612245), .Dim = c(3L, 4L, 4L), .Dimnames = structure(list(Species = c('setosa',     'versicolor', 'virginica'), c('Sepal.Length', 'Sepal.Width',     'Petal.Length', 'Petal.Width'), c('Sepal.Length', 'Sepal.Width',     'Petal.Length', 'Petal.Width')), .Names = c('Species', '',     ''))), perm = c(2, 3, 1)), .Names = c('a', 'perm'));do.call('aperm', argv)");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm3_f17586cf0eb015a2ca039df0ea6abad8() {
        assertEval("argv <- list(structure(c(0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667), .Dim = c(1L, 9L)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm4_52333812e34adc3069f9ed6ff713dc9f() {
        assertEval("argv <- list(structure(c(0L, 0L, 0L, 1L, 0L, 1L, 1L, 1L), .Dim = c(1L, 8L), .Dimnames = list('strata(enum)', c('rx', 'size', 'number', 'strata(enum)', 'cluster(id)', 'rx:strata(enum)', 'size:strata(enum)', 'number:strata(enum)'))), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm5_ebefdb50f4875645f072968aa04168d8() {
        assertEval("argv <- list(structure(c(9.2319289524956, -0.470372045488369, 186.857050189827), .Dim = c(1L, 3L), .Dimnames = list('118', c('age', 'sex', 'meal.cal'))), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm6_6e6d59a35e60fbcb22d33282bbe6caa3() {
        assertEval("argv <- list(structure(c(414L, 439L, 382L, 388L, 383L, 364L, 364L, 363L, 349L, 371L, 102L, 388L, 388L, 363L, 367L, 365L, 382L, 362L, 373L, 385L, 376L, 360L, 306L, 160L, 316L, 316L, 315L, 357L, 360L, 347L, 353L, 308L, 327L, 329L, 343L, 251L, 318L, 304L, 316L, 335L, 365L, 336L, 350L, 356L, 339L, 301L, 330L, 300L, 300L, 312L, 334L, 270L, 347L, 293L, 303L, 337L, 287L, 293L, 293L, 318L, 359L, 351L, 322L, 343L, 269L, 286L, 286L, 273L, 297L, 273L, 273L, 273L, 294L, 303L, 281L, 273L, 255L, 269L, 270L, 270L, 276L, 264L, 245L, 261L, 270L, 273L, 306L, 274L, 279L, 278L, 278L, 284L, 276L, 265L, 294L, 277L, 259L, 287L, 263L, 240L, 217L, 271L, 252L, 331L, 255L, 271L, 254L, 185L, 213L, 210L, 203L, 288L, 269L, 269L, 91L, 91L, 192L, 199L, 195L, 198L, 207L, 200L, 197L, 243L, 203L, 197L, 227L, 227L, 219L, 8L, NA, NA, 246L, NA, 292L, NA, 294L, NA, 19L, 373L, NA, 211L, 82L, NA, 334L, 18L, NA, 280L, NA, NA, NA, NA, 146L, NA, NA, NA, 267L, 206L, 175L, NA, NA, NA, NA, 118L, NA, NA, NA, NA, 274L, NA, NA, 187L, NA, 6L, NA, NA, 146L, 304L, NA, 52L, 67L, NA, 265L, NA, 91L, NA, NA, NA, 318L, 57L, 226L, 65L, NA, 264L, NA, NA, NA, 236L, NA, 207L, NA, NA, NA, NA, NA, NA, 23L, NA, NA, NA, NA, NA, NA, 113L, 99L, NA, NA, 14L, NA, NA, NA, NA, NA, NA, NA, 4L, NA, 167L, NA, NA, NA, NA, NA, NA, NA, NA, NA, 165L, NA, NA, NA, NA, NA, NA, NA, NA, 11L, NA, NA, 168L, NA, NA, 120L, NA, 104L, NA, 373L, 26L, NA, NA, 253L, NA, NA, NA, NA, NA, NA, NA, NA, 260L, 114L, NA, 370L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 280L, NA, NA, NA, NA, 240L, NA, NA, NA, NA, 361L, NA, NA, NA, NA, NA, NA, NA, 188L, NA, NA, 65L, 248L, NA, NA, NA, 121L, NA, NA, NA, NA, 121L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 306L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 159L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 22L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 152L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 265L, 337L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 255L, 250L, NA, NA, NA, 203L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 213L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 169L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 241L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 269L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 284L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 249L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 307L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 322L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 350L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = c(128L, 8L), .Dimnames = list(    NULL, c('futime', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7'))), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm7_7a814cd9669074fa8ca705072433a446() {
        assertEval("argv <- list(structure(c(0, -10, 0, -10, -10, 0, NA, NA, 0, 0, 0, 0, 0, 150, 0, 170, 180, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 0, 330, 340, 0, 0, 350, 0, 370, 380, 0), .Dim = c(6L, 8L), .Dimnames = list(NULL, NULL)), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm8_4f2fd1ab6e0cf58806847f2f810ba2b9() {
        assertEval("argv <- list(structure(c(544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 1539.44739946315, 1548.66655077773, 1557.88570209231, 1566.45228027983, 1575.01885846735, 1583.14083472285, 1591.26281097836, 1599.26100149451, 1607.25919201066, 1611.39689466313, 1615.5345973156, 1612.61129444623, 1609.68799157686, 1603.44643859537, 1597.20488561388, 1588.73002343463, 1580.25516125537, 1570.86127478964, 1561.46738832392, 1549.89535441445, 1538.32332050498, 1524.62526591843, 1510.92721133189, 1499.65830819836, 1488.38940506483, 1479.31388700637, 1470.23836894792, 1460.03887936132, 1449.83938977473, 1441.27547309544, 1432.71155641615, 1432.51830671501, 1432.32505701387, 1433.15763708544, 1433.99021715701, 1434.96142536256, 1435.9326335681, 1435.47421580154, 1435.01579803498, 1433.4368629411, 1431.85792784722, 1430.85617066215, 1429.85441347709, 1432.59097206397, 1435.32753065085, 1440.49425642708, 1445.66098220331, 1448.76676550395, 1451.87254880459, 1452.9163236715, 1453.96009853841, 1454.6961768366, 1455.43225513478, 1452.22362902495, 1449.01500291512, 1442.43484036078, 1435.85467780644, 1426.50159512644, 1417.14851244644, 1409.58997614642, 1402.0314398464, 1397.59624058751, 1393.16104132862, 1386.64426440334, 1380.12748747807, 1371.71107833433, 1363.2946691906, 1354.59002807904, 1345.88538696748, 1336.94914699242, 1328.01290701735, 1318.64960669271, 49.7622186359663, -84.1535032467218, -121.764781099341, 37.2870304782966, 82.528433600382, -44.2319392670254, 25.3010406627996, -34.7698782399993, 48.5709781995188, 110.301655093951, -1.96962838525201, -3.7990131710535, -51.4783734777507, 135.066608935635, 114.916035379091, -28.990712676497, -11.7078691876363, 7.04762066618673, -38.9035366827579, 16.5957688400649, -38.4931502947952, 52.0732838386475, 26.6377575984557, 329.153973076816, -13.1797869657194, 872.199160524634, 371.882552045056, -254.299568603192, -95.2920977069916, 8.63342236039193, 16.852295225008, -29.0271834604991, 13.5051131963112, 4.54091267164154, 25.5747517733375, 386.850855912621, 259.276984531009, -199.961168270532, -153.894877042003, 94.302447817031, -20.3106357794875, 21.0527247936745, -6.29056183593116, 13.9001511905426, -29.4973604406664, -31.7957066699985, -224.096013272965, -30.9544842287708, 22.3370692945275, 432.596723859509, 47.1608224545594, -304.956866078466, 50.1150369329559, 24.6852664308792, -14.4511512739648, -4.94371710626865, -19.024507596255, -56.8030453693573, -314.583543516094, 165.222305128756, 316.17817825271, 23.9168069434991, 11.9598796643579, -128.904953645213, 0.419804589665318, -6.80218287850425, 29.2691824505584, 53.9010951754703, 40.9447832426993, -26.2505972353374, -41.4479380870087, -214.837325417531, 2134, 1863, 1877, 1877, 1492, 1249, 1280, 1131, 1209, 1492, 1621, 1846, 2103, 2137, 2153, 1833, 1403, 1288, 1186, 1133, 1053, 1347, 1545, 2066, 2020, 2750, 2283, 1479, 1189, 1160, 1113, 970, 999, 1208, 1467, 2059, 2240, 1634, 1722, 1801, 1246, 1162, 1087, 1013, 959, 1179, 1229, 1655, 2019, 2284, 1942, 1423, 1340, 1187, 1098, 1004, 970, 1140, 1110, 1812, 2263, 1820, 1846, 1531, 1215, 1075, 1056, 975, 940, 1081, 1294, 1341), .Dim = c(72L, 4L), .Dimnames = list(NULL, c('STL.seasonal', 'STL.trend', 'STL.remainder', 'data')), .Tsp = c(1974, 1979.91666666667, 12), class = c('mts', 'ts', 'matrix')), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm9_24f3176a36b0c1834e883156b6faf749() {
        assertEval("argv <- list(structure(c(0.36376697930799, 0.252815298286177, 0.144820268657847, 0.059950033165656, 0.0137701755391906, 0.00220408917547991, 6.22489401973083e-05, -0.36376697846279, -0.252815298708777, -0.144820267390048, -0.0599500327958813, -0.0137701747732286, -0.00220408987788688, -6.22486118855004e-05), .Dim = c(7L, 2L, 1L)), 1:3, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinappend_testappend1_88044ff0906016f8294b3bc2e7230739() {
        assertEval("argv <- structure(list(x = 1:5, values = 0:1, after = 3), .Names = c('x',     'values', 'after'));do.call('append', argv)");
    }

    @Test
    public void TestrGenBuiltinaregexec_testaregexec1_2f4a7b39aaa55c7bd0f4dd1ce1c70f08() {
        assertEval("argv <- list('FALSE', 'FALSE', c(0.1, NA, NA, NA, NA), c(1L, 1L, 1L), FALSE, FALSE, FALSE); .Internal(aregexec(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinaregexec_testaregexec2_6fdabd1a68055d50c3fb04be336568e7() {
        assertEval("argv <- list('(lay)(sy)', c('1 lazy', '1', '1 LAZY'), c(2, NA, NA, NA, NA), c(1L, 1L, 1L), FALSE, FALSE, FALSE); .Internal(aregexec(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinargs_testargs1_e228d257beb7a361c2a9328dbcdafdb4() {
        assertEval("argv <- list(NULL); .Internal(args(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinargs_testargs2_295551fb8ac5be183e6f303f793009ac() {
        assertEval("argv <- list(character(0)); .Internal(args(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinargs_testargs3_1afbe22821276d1edad56f8b6ad497c8() {
        assertEval("argv <- list(.Primitive(':')); .Internal(args(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinargs_testargs4_05dbfbc92e6317a2709ef399d70b3076() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame')); .Internal(args(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinargs_testargs5_898f905532808c83c90d31d0b8d82dd4() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(args(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray1_a1de33c4f6f10bac0607e47de645a30b() {
        assertEval("argv <- list(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L), 59L, structure(list(dr = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59.5')), .Names = 'dr')); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray10_4c587381aa04d4159bcaf425098f91df() {
        assertEval("argv <- list(cc(5L, 16L), list(c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray11_fc08ff0006f401ec4eba037c38fe4082() {
        assertEval("argv <- list(list(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL), 8L, list(c('1', '2', '3', '4', '5', '6', '7', '8'))); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray12_2595909c5219d3b538eb8ff98f62df10() {
        assertEval("argv <- list(c(-Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 3, 5, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1.5, 3.2, 4.9, Inf, Inf, Inf, -Inf, -Inf, 0.300000000000001, 2, 3.7, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 2, 3.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.4, 2, 3.6, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.266666666666667, 2, 3.73333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.275, 2, 3.725, Inf, Inf, Inf, Inf), c(9L, 9L), list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray13_d42dcb8c47dba787b7b37eb7c7d1131f() {
        assertEval("argv <- list(NA, 1L, list('1')); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray14_dc6255464eaec909d36c5b0c27830892() {
        assertEval("argv <- list(logical(0), 0L, NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray15_18f6ac9c3f4ae260a2c3467ea13f820a() {
        assertEval("argv <- list(structure(c(-5.3088868291531, 5.2393213877113, -5.301817110509, 5.29234872074472), .Names = c('5%', '95%', '5%', '95%')), c(2, 2), list(c('5%', '95%'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray16_f502898424bd642a8c883c6cb7ebd14a() {
        assertEval("argv <- list(c(1L, 0L), 2L, structure(list(object = c('FALSE', NA)), .Names = 'object')); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray17_8dee3182d471f899140d91ec7fb448ff() {
        assertEval("argv <- list(c('', '', ''), c(3, 1), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray18_13a1b2231ebaeaed22083e9841b6eb2d() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), 0L, NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray19_7ed10b153596c00ee4ab46e0d5cc5c8f() {
        assertEval("argv <- list(structure(c(31.9166666666667, -5.77777777777778, -10.4101831674686, -2.63888888888889, NA), .Names = c('(Intercept)', 'woolB', 'tens.L', 'tensionM', 'tensionH')), c(5L, 1L), list(c('(Intercept)', 'woolB', 'tens.L', 'tensionM', 'tensionH'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray2_bb91d6a60a5b5541626d911e46859f23() {
        assertEval("argv <- list(FALSE, FALSE, NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray20_db0e867b3dfd32fd0467655e85128c59() {
        assertEval("argv <- list(c(0.92317305817397+0i, 0.160449395256071+0.220125597679977i, 0.40353715410585+2.39063261466203i, -3.64092275386503+3.51619480964107i, -0.30877433127864+1.37503901638266i, -0.5590368753986+2.95994484328048i, 2.07117052177259-1.58552086053907i, 5.12796916272868+5.50114308371867i, 0.71791019962021-4.36295436036464i, 3.6182846955548+0.01693946731429i, 5.86560669896785+3.41674024963709i, 7.14153164455803+0i, 5.86560669896785-3.41674024963709i, 3.6182846955548-0.01693946731429i, 0.71791019962021+4.36295436036464i, 5.12796916272868-5.50114308371867i, 2.07117052177259+1.58552086053907i, -0.5590368753986-2.95994484328048i, -0.30877433127864-1.37503901638266i, -3.64092275386503-3.51619480964107i, 0.40353715410585-2.39063261466203i, 0.160449395256071-0.220125597679976i, 0.994686860835215+0i, -0.711636086238366+0.034977366507257i, -3.47255638259391-3.00654729467177i, -1.61617641806619-2.52564108817258i, -1.83729841635945+1.24025696654912i, -0.05940773912914+1.99807537840182i, 2.14861624215501+1.14547234755584i, -0.18935885218927+5.11711397439959i, 3.55025883223277-3.01463113510177i, 0.37587194655463-4.62160286369829i, -0.57999032040714+3.57394816552023i, -3.22078701201057+0i, -0.57999032040714-3.57394816552023i, 0.37587194655463+4.62160286369829i, 3.55025883223277+3.01463113510177i, -0.18935885218927-5.11711397439959i, 2.14861624215501-1.14547234755584i, -0.05940773912914-1.99807537840182i, -1.83729841635945-1.24025696654912i, -1.61617641806619+2.52564108817258i, -3.47255638259391+3.00654729467177i, -0.711636086238366-0.034977366507256i, -0.376031201145236+0i, 0.36561036190112-2.94822783523588i, 2.53378536984825+1.14599403212998i, -0.59345500414631-1.46249091231517i, -5.47371957596241-2.40983118775265i, 0.994698295196402+0.827012883372647i, 4.88614691865207-0.66440097322583i, -1.22869446246947-1.85036568311679i, 4.54719422944744-1.7507307644741i, -1.25805718969215-0.46461775748286i, -6.6950163960079-1.32606545879492i, -1.8510470181104-0i, -6.6950163960079+1.32606545879492i, -1.25805718969215+0.46461775748286i, 4.54719422944744+1.7507307644741i, -1.22869446246947+1.85036568311679i, 4.88614691865207+0.66440097322583i, 0.994698295196402-0.827012883372647i, -5.47371957596241+2.40983118775265i, -0.59345500414631+1.46249091231517i, 2.53378536984825-1.14599403212998i, 0.36561036190112+2.94822783523588i, 1.86949363581639+0i, 3.2510927680528+3.7297126359622i, 5.77117909703734-0.58113122596059i, -2.73489323319193-2.03739778844743i, 1.59256247378073-3.23882870600546i, -2.21652163259476+3.70287191787544i, -6.80966667821261-4.74346958471693i, -0.48551953206469-3.42445496113818i, -4.95350216815663-1.60107509096991i, -0.651322462114205+0.588393022429161i, 3.32067078328635+3.75999833207777i, -1.35013798358527+0i, 3.32067078328635-3.75999833207777i, -0.651322462114205-0.588393022429161i, -4.95350216815663+1.60107509096991i, -0.48551953206469+3.42445496113818i, -6.80966667821261+4.74346958471693i, -2.21652163259476-3.70287191787544i, 1.59256247378073+3.23882870600546i, -2.73489323319193+2.03739778844743i, 5.77117909703734+0.58113122596059i, 3.2510927680528-3.7297126359622i, -3.90806827793786+0i, -4.10078155861753-4.25996878161911i, -0.63461032994351-2.08074582601136i, -0.10593736514835-3.82022652091785i, 6.14817602783479+2.33657685886581i, 0.64431546852762-1.776774088028i, 3.43771282488202-3.00904523977379i, -3.6812061457129+3.53944567666635i, 3.07722382691467+4.5373840425762i, 3.3679046040028+7.20820407858926i, 7.47003475089893-0.4463480891006i, 13.9322715624418-0i, 7.47003475089893+0.4463480891006i, 3.3679046040028-7.20820407858926i, 3.07722382691467-4.5373840425762i, -3.6812061457129-3.53944567666635i, 3.43771282488202+3.00904523977379i, 0.64431546852762+1.776774088028i, 6.14817602783479-2.33657685886581i, -0.10593736514835+3.82022652091785i, -0.63461032994351+2.08074582601136i, -4.10078155861753+4.25996878161911i), c(22, 5), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray21_90629862c2120909e55b516dd705790b() {
        assertEval("argv <- list(NA, c(1, 4), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray22_47f919ec469babdf3ac7b6a1547c0baa() {
        assertEval("argv <- list(structure(c(-0.350406242534262, -0.350406242534262, -3.35040624253426, 0.649593757465738, 1.64959375746574, 17.755677101477, 7.755677101477, -11.3171453341876, 5.68285466581244, -11.3171453341876, -2.31714533418756, 6.68285466581244, -16.3171453341876, 8.38722300809366, 42.3872230080937, 13.3872230080937, 27.8866653386156, -25.1133346613844, 7.88666533861561, -21.1133346613844, 9.71094990017841, 5.71094990017841, 26.7109499001784, -7.28905009982159, 21.7109499001784, -20.2890500998216, 6.226070726676, -15.773929273324, -28.773929273324, 14.226070726676, -14.773929273324, 21.226070726676, 6.226070726676, 29.226070726676, 13.226070726676, -1.18678877265756, 15.8132112273424, 1.81321122734244, 25.8132112273424, -0.186788772657565, 3.81321122734244, -10.1867887726576, 15.8132112273424, 9.81321122734244, 9.81321122734244, -35.0551967576179, 14.9448032423821, 13.9448032423821, -17.0551967576179, -6.05519675761792, -17.7296046985831, 14.9139035439664), gradient = structure(c(0, 0, 0, 0, 0, 56.989995924654, 56.989995924654, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 109.608811230383, 109.608811230383, 109.608811230383, 107.478028232287, 107.478028232287, 107.478028232287, 107.478028232287, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 10.7055301785859, 0, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 0.914597467778369, 0.914597467778369, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.599195286063472, 0.599195286063472, 0.599195286063472, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0202635232425103, 2.60032456603692e-08, 0, 0, 0, 0, 0, 0.165626203544259, 0.165626203544259, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.503396799290371, 0.503396799290371, 0.503396799290371, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.984387422945875, 0.999999996451695), .Dim = c(52L, 3L))), c(52L, 1L), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray23_4f99c09a2eb948557496cb06b9c93143() {
        assertEval("argv <- list(c(1L, 2L, 1L), 3L, structure(list(c('1', '2', NA)), .Names = '')); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray24_e525a38fb98eafddfb77134676d1590b() {
        assertEval("argv <- list(c(4L, 10L, 16L, 22L, 28L, 34L, 40L, 46L, 52L, 58L, 64L, 70L, 76L, 82L, 88L, 94L, 100L, 106L, 112L, 118L), 4:5, list(NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray25_49e01334a43728305198bcc26ef5e133() {
        assertEval("argv <- list(c(1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120), c(5, 2, 3, 4, 5), list(NULL, NULL, c('a', 'b', 'c'), NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray26_e6384f5348746531ce21c68a02f3b857() {
        assertEval("argv <- list('', c(4L, 3L), list(c('<none>', 'Hair:Eye', 'Hair:Sex', 'Eye:Sex'), c('Df', 'Deviance', 'AIC'))); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray27_f1a8e39e186023ba01b00b56b52f7318() {
        assertEval("argv <- list(-1, c(3L, 2L), list(c('a', 'b', 'c'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray3_de32a339b0dc2af9cf47144c650e041b() {
        assertEval("argv <- list(2.10239639473973e-05, c(1L, 1L), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray4_8b677d3b59ed9d33c04042e304f91cca() {
        assertEval("argv <- list(0, c(105L, 1L), list(NULL, structure('d', .Names = 'CURVE'))); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray5_3e426c5821c83699fa2f43bfa0339c27() {
        assertEval("argv <- list(structure(list(`1` = structure(list(lower = 13.2743449189798, est. = 24.8054653131966, upper = 46.3534067526313), .Names = c('lower', 'est.', 'upper'), row.names = 'reStruct.Rail.sd((Intercept))', class = 'data.frame')), .Names = '1'), c(1L, 1L), list('1', NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray6_cbbc1b10e34aa6fcf55862a2a00c6bc5() {
        assertEval("argv <- list(0, 61, NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray7_a97bb51db6a4ceaec74f44e9243dc584() {
        assertEval("argv <- list(c(10L, 10L, 11L, 10L, 12L, 11L, 13L, 12L, 14L, 13L, 15L, 14L, 16L, 15L, 17L, 16L, 18L, 17L, 19L, 18L, 20L, 19L, 21L, 20L, 22L, 21L, 23L, 22L, 24L, 23L, 25L, 24L, 26L, 25L, 27L, 26L, 28L, 27L, 29L, 28L, 30L, 29L, 31L, 30L, 32L, 31L, 33L, 32L, 34L, 33L, 35L, 34L, 36L, 35L, 37L, 36L, 38L, 36L, 39L, 38L, 40L, 39L), c(2L, 31L), list(c('target', 'actual'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray8_851e5847b336faa4e7284352602c9b57() {
        assertEval("argv <- list(c(NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), c(30L, 1L), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinarray_testarray9_f29da9896c8c017d472961825e98baf2() {
        assertEval("argv <- list(integer(0), c(1L, 0L), structure(list('1', NULL), .Names = c('', ''))); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinasDatecharacter_testasDatecharacter1_1de334b367b7edc0cbcf4352ec6d771b() {
        assertEval("argv <- structure(list(x = c('2007-11-06', NA)), .Names = 'x');do.call('as.Date.character', argv)");
    }

    @Test
    public void TestrGenBuiltinasDatedefault_testasDatedefault1_41308bdbae914222f7d0c43f4166e5ea() {
        assertEval("argv <- structure(list(x = logical(0)), .Names = 'x');do.call('as.Date.default', argv)");
    }

    @Test
    public void TestrGenBuiltinasDatefactor_testasDatefactor1_d7bfae7382ad614d33004cb7269d93e7() {
        assertEval("argv <- structure(list(x = structure(1L, .Label = '2000-01-02',     class = 'factor')), .Names = 'x');do.call('as.Date.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinasDatenumeric_testasDatenumeric1_3a9c06e6f03b657208314ce67770e778() {
        assertEval("argv <- structure(list(x = 0.5, origin = '1969-12-31'), .Names = c('x',     'origin'));do.call('as.Date.numeric', argv)");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct1_1c500c86dface041952a145584c63c2e() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 109L, wday = 4L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), 'UTC'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct10_6dfad3439678f8b9925922d32bd6d5e2() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1, mon = 1L, year = 109L, wday = 0L, yday = 31L, isdst = -1), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), 'UTC'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct11_c7c8157329310d8d280f066b7ff799a9() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), year = 105L, wday = 6L, yday = 0L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), 'UTC'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct12_a6fc18d74036edb3971879e59186fe09() {
        assertEval("argv <- list(structure(list(sec = 0, min = 2L, hour = 2L, mday = 2L, mon = 1L, year = c(102L, 1102L), wday = 6L, yday = 32L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), ''); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct13_bb025be8ae52c06488f607f8c080f413() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = c(2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L, 24L, 26L, 28L, 30L, 32L), mon = 1L, year = 102L, wday = 6L, yday = 32L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), ''); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct2_b62827b33dc8c91662f48606de611b14() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1, mon = c(11, 12, 13, 14), year = 100L, wday = 0L, yday = 365L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct3_0d65533602d92caa782bd7c735504cab() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = -3L, mon = 1L, year = 102L, wday = 6L, yday = 32L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), ''); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct4_48bf2e027fc478152fffa7cd3cc4df32() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 12L, mday = 1L, mon = 0L, year = c(70L, 75L, 80L, 85L, 90L, 95L, 100L, 105L, 110L, 115L), wday = 4L, yday = 0L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct5_fa3202990ad8785e47e61c5b7d40f715() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt')), ''); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct6_e1bce99d059a06199c61fbdd45f53300() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = -5L, wday = 2L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct7_31b4a35e00fc72a0fd76538e2d5731cd() {
        assertEval("argv <- list(structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_, mday = NA_integer_, mon = NA_integer_, year = NA_integer_, wday = NA_integer_, yday = NA_integer_, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct8_3bdcede3f03657e1f6ba172f3757d99f() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 70L, wday = 4L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct9_6fc3b32d94b37559931f24ab21576d10() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 22:27, mon = 3L, year = 108L, wday = 2L, yday = 112L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt1_00f4e9d0e427a431044a5950735dc978() {
        assertEval("argv <- list(structure(c(2147483648.4, 2147483648.8), class = c('POSIXct', 'POSIXt'), tzone = ''), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt10_9ffeb4cfe131ce48ac5ffaf8ea44d725() {
        assertEval("argv <- list(character(0), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt11_ac0307df91add091731446ecf15395cc() {
        assertEval("argv <- list(NULL, ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt2_e4eb7330a95043a34482b38f18f977ee() {
        assertEval("argv <- list(structure(c(FALSE, FALSE), class = c('POSIXct', 'POSIXt')), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt3_191ee8bdf9c2eaadb31bbb9b1fc300d1() {
        assertEval("argv <- list(structure(1041324768, class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt4_194e051794fdbd53a792e13196afa3ed() {
        assertEval("argv <- list(structure(c(1208865600, 1208952000, 1209038400, 1209124800, 1209211200), tzone = 'GMT', class = c('POSIXct', 'POSIXt')), 'GMT'); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt5_8ae3a1410937f690b8025d898298c6ab() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt6_05e50fdeac8692aeef0965c86952a8c3() {
        assertEval("argv <- list(structure(32569542120, class = c('POSIXct', 'POSIXt')), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt7_26776a81744f30b28265ad599ddd1405() {
        assertEval("argv <- list(structure(c(1012798800, 1013403600, 1014008400, 1014613200), class = c('POSIXct', 'POSIXt'), tzone = ''), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt8_53bbe098ec0b9a7e3c85e948f405f103() {
        assertEval("argv <- list(structure(c(-1893412800, -1861876800, -1830340800, -1798718400, -1767182400, -1735646400, -1704110400, -1672488000, -1640952000, -1609416000, -1577880000, -1546257600, -1514721600, -1483185600, -1451649600, -1420027200, -1388491200, -1356955200, -1325419200, -1293796800, -1262260800, -1230724800, -1199188800, -1167566400, -1136030400, -1104494400, -1072958400, -1041336000, -1009800000, -978264000, -946728000, -915105600, -883569600, -852033600, -820497600, -788875200, -757339200, -725803200, -694267200, -662644800, -631108800, -599572800, -568036800, -536414400, -504878400, -473342400, -441806400, -410184000, -378648000, -347112000, -315576000, -283953600, -252417600, -220881600, -189345600, -157723200, -126187200, -94651200, -63115200, -31492800, 43200, 31579200, 63115200, 94737600, 126273600, 157809600, 189345600, 220968000, 252504000, 284040000, 315576000, 347198400, 378734400, 410270400, 441806400, 473428800, 504964800, 536500800, 568036800, 599659200, 631195200, 662731200, 694267200, 725889600, 757425600, 788961600, 820497600, 852120000, 883656000, 915192000), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt9_f67f755c24187b6eedba0e4de4d7a058() {
        assertEval("argv <- list(list(), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasS4_testasS41_ce9331c055f36be6f839c584d1afc2ca() {
        assertEval("argv <- structure(list(object = structure(NA, .Dim = c(1L, 1L))),     .Names = 'object');do.call('asS4', argv)");
    }

    @Test
    public void TestrGenBuiltinasarray_testasarray1_585b6d6fdd50b7f3f514ff17330bd39f() {
        assertEval("argv <- structure(list(x = 1:3), .Names = 'x');do.call('as.array', argv)");
    }

    @Test
    public void TestrGenBuiltinasarraydefault_testasarraydefault1_cfd0b3d7e447f190cd3efb8730cb294a() {
        assertEval("argv <- structure(list(x = structure(c(1, 2), .Dim = 2L, .Dimnames = list(c('a',     'b')))), .Names = 'x');do.call('as.array.default', argv)");
    }

    @Test
    public void TestrGenBuiltinascall_testascall1_75dad11a1d07a7a5fd405091a76cfe2d() {
        assertEval("argv <- list(list(quote(quote), c(0.568, 1.432, -1.08, 1.08)));as.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascall_testascall2_449d54ebb2b0ae08e77ca684b2cbd4ae() {
        assertEval("argv <- list(list(quote(quote), FALSE));as.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascall_testascall3_576f6deb6494b95f0406b343929fc8a4() {
        assertEval("argv <- list(list(quote(quote), list(NULL, c('time', 'status'))));as.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascall_testascall4_a24d7b5f23702c8c1511b88087dd6969() {
        assertEval("argv <- list(structure(expression(data.frame, check.names = TRUE, stringsAsFactors = TRUE), .Names = c('', 'check.names', 'stringsAsFactors')));as.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascall_testascall5_051693b1bebf4f33d3241d651c72f4d3() {
        assertEval("argv <- list(list(quote(quote), 80L));as.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascall_testascall6_a95ff22c9ef3ec6e77ee48b0335377c7() {
        assertEval("argv <- list(list(quote(quote), NA));as.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter1_eb69a7cc1268d0c212505c08d770cbc4() {
        assertEval("argv <- list('bessel_y(2,nu=181.2): precision lost in result');as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter10_08071ea6b6634642349c781aef4fef38() {
        assertEval("argv <- list(structure(character(0), package = character(0), class = structure('ObjectsWithPackage', package = 'methods')));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter11_f25c9dde31b138f9617740679ea10483() {
        assertEval("argv <- list(c(FALSE, TRUE));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter12_8063ac3b5f6f110091ffdb86859d36cc() {
        assertEval("argv <- list(structure(1:4, .Dim = c(1L, 4L)));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter13_dcbea80759180295bf754fc304b8847b() {
        assertEval("argv <- list(structure('1', .Tsp = c(1, 1, 1), class = 'ts'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter14_b618dc1d6e4030d027f9e589707f3220() {
        assertEval("argv <- list(structure('Estimates a probability density function,  \\n', Rd_tag = 'TEXT'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter15_1fc55ece8504953a234dcd3e84978d9a() {
        assertEval("argv <- list(c(2L, 1L, 3L, NA, 4L));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter16_768a231ba5495283935e93ca485b4d82() {
        assertEval("argv <- list(structure(-841, class = 'Date'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter17_5e4050134c816b4b48d5edcd7a65f1e3() {
        assertEval("argv <- list(structure(list(list(structure('x', Rd_tag = 'TEXT')), list(structure('an R object representing a hierarchical clustering.\\n', Rd_tag = 'TEXT'), structure('    For the default method, an object of class ', Rd_tag = 'TEXT'), structure(list(structure('\\'', Rd_tag = 'RCODE'), structure(list(structure('hclust', Rd_tag = 'TEXT')), Rd_tag = '\\\\link'), structure('\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' or\\n', Rd_tag = 'TEXT'), structure('    with a method for ', Rd_tag = 'TEXT'), structure(list(    structure(list(structure('as.hclust', Rd_tag = 'TEXT')), Rd_tag = '\\\\link'), structure('()', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' such as\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(structure('\\'', Rd_tag = 'RCODE'), structure(list(structure('agnes', Rd_tag = 'TEXT')), Rd_tag = '\\\\link', Rd_option = structure('cluster', Rd_tag = 'TEXT')), structure('\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' in package ', Rd_tag = 'TEXT'), structure(c('\\\\href{http://CRAN.R-project.org/package=#1}{\\\\pkg{#1}}', 'cluster'), Rd_tag = 'USERMACRO'), structure(list(list(structure('http://CRAN.R-project.org/package=cluster', Rd_tag = 'VERB')), list(structure(list(structure('cluster', Rd_tag = 'TEXT')), Rd_tag = '\\\\pkg'))), Rd_tag = '\\\\href'), structure('.', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter18_dcdfc842ff66734c6f72fd5ef017a0cd() {
        assertEval("argv <- list(list(epsilon = 1e-08, maxit = 25, trace = FALSE));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter19_dc0a0964223c6be5f65112cd869cf0e0() {
        assertEval("argv <- list(structure(list(structure(list(given = c('George', 'E.', 'P.'), family = 'Box', role = NULL, email = NULL, comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment')), structure(list(given = c('David', 'R.'), family = 'Cox', role = NULL, email = NULL, comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment'))), class = 'person'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter2_d0d9d9f37ecbe7234fc7edee2ef45a8c() {
        assertEval("argv <- list(structure(c(12784, 12874, 12965, 13057, 13149, 13239, 13330, 13422, 13514, 13604, 13695, 13787, 13879, 13970, 14061, 14153, 14245), class = 'Date'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter20_d79960a6ddad66b405918a3fdffda8de() {
        assertEval("argv <- list(structure(list(structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure('coerce', Rd_tag = 'TEXT')), list(structure(list(structure('signature(from = \\'dgCMatrix\\', to =\\n', Rd_tag = 'RCODE'), structure('\\t\\'ngCMatrix\\')', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', and many similar ones; typically you should\\n', Rd_tag = 'TEXT'), structure('      coerce to ', Rd_tag = 'TEXT'), structure(list(structure('\\'nsparseMatrix\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'),     structure(' (or ', Rd_tag = 'TEXT'), structure(list(structure('\\'nMatrix\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(').  Note that\\n', Rd_tag = 'TEXT'), structure('      coercion to a sparse pattern matrix records all the potential\\n', Rd_tag = 'TEXT'), structure('      non-zero entries, i.e., explicit (', Rd_tag = 'TEXT'), structure(list(structure('non-structural', Rd_tag = 'TEXT')), Rd_tag = '\\\\dQuote'), structure(') zeroes\\n', Rd_tag = 'TEXT'), structure('      are coerced to ', Rd_tag = 'TEXT'),     structure(list(structure('TRUE', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', not ', Rd_tag = 'TEXT'), structure(list(structure('FALSE', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', see the example.\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure('t', Rd_tag = 'TEXT')), list(structure(list(structure('signature(x = \\'ngCMatrix\\')', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'),     structure(': returns the transpose\\n', Rd_tag = 'TEXT'), structure('      of ', Rd_tag = 'TEXT'), structure(list(structure('x', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure('which', Rd_tag = 'TEXT')), list(structure(list(structure('signature(x = \\'lsparseMatrix\\')', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', semantically\\n', Rd_tag = 'TEXT'),     structure('      equivalent to ', Rd_tag = 'TEXT'), structure(list(structure('base', Rd_tag = 'TEXT')), Rd_tag = '\\\\pkg'), structure(' function ', Rd_tag = 'TEXT'), structure(list(structure(list(structure('which', Rd_tag = 'TEXT')), Rd_tag = '\\\\link'), structure('(x, arr.ind)', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(';\\n', Rd_tag = 'TEXT'), structure('      for details, see the ', Rd_tag = 'TEXT'), structure(list(structure(list(structure('lMatrix', Rd_tag = 'TEXT')), Rd_tag = '\\\\linkS4class')), Rd_tag = '\\\\code'),     structure(' class documentation.', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT')), Rd_tag = '\\\\describe'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter21_c59e7643dd52315ba5744cc5d8a551da() {
        assertEval("argv <- list(c(3, 3, NA, NA, NA, NA, 4, 3, 4, NA, NA, 2, 3, 3, NA, NA, 2, 4, NA, 2, 5, 2, 2, 4, 3, NA, 2, NA, 3, 3));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter22_57067e2c0d6c38282b57535adb101e14() {
        assertEval("argv <- list(structure(list(structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure(list(structure('languageEl', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(':', Rd_tag = 'TEXT')), list(structure('\\n', Rd_tag = 'TEXT'), structure('      extract an element of a language object, consistently for\\n', Rd_tag = 'TEXT'), structure('      different kinds of objects.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The 1st., etc. elements of a function are the corresponding formal\\n', Rd_tag = 'TEXT'),     structure('      arguments, with the default expression if any as value.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The first element of a call is the name or the function object\\n', Rd_tag = 'TEXT'), structure('      being called.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The 2nd, 3rd, etc. elements are the 1st, 2nd, etc. arguments\\n', Rd_tag = 'TEXT'), structure('      expressions.  Note that the form of the extracted name is\\n', Rd_tag = 'TEXT'),     structure('      different for R and S-Plus.  When the name (the first element) of\\n', Rd_tag = 'TEXT'), structure('      a call is replaced, the languageEl replacement function coerces a\\n', Rd_tag = 'TEXT'), structure('      character string to the internal form for each system.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The 1st, 2nd, 3rd elements of an ', Rd_tag = 'TEXT'), structure(list(structure('if', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' expression are the\\n', Rd_tag = 'TEXT'),     structure('      test, first, and second branch.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The 1st element of a ', Rd_tag = 'TEXT'), structure(list(structure('for', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' object is the name (symbol) being\\n', Rd_tag = 'TEXT'), structure('      used in the loop, the second is the expression for the range of\\n', Rd_tag = 'TEXT'), structure('      the loop, the third is the body of the loop.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'),     structure('      The first element of a ', Rd_tag = 'TEXT'), structure(list(structure('while', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' object is the loop test, and\\n', Rd_tag = 'TEXT'), structure('      the second the body of the loop.\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure(list(structure('isGrammarSymbol', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'),     structure(':', Rd_tag = 'TEXT')), list(structure('\\n', Rd_tag = 'TEXT'), structure('      Checks whether the symbol is part of the grammar.\\n', Rd_tag = 'TEXT'), structure('      Don't use this function directly.\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT')), Rd_tag = '\\\\describe'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter23_6fdb82bf5b240f3a1554fd9742383ce3() {
        assertEval("argv <- list(structure(c(1L, 2L, 2L, 3L, 3L, 1L, NA), .Label = c('Australia', 'UK', 'US'), class = 'factor'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter24_fa6e2ffc98f3b422be091992652cc063() {
        assertEval("argv <- list(structure(list(4L), class = c('package_version', 'numeric_version')));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter25_4a278ee360572b2fc186c42a35da6cd7() {
        assertEval("argv <- list(c(-Inf, NaN, Inf));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter26_efcb7ac4d7336a1aa5a21bb154aba5b5() {
        assertEval("argv <- list(FALSE, useSource = TRUE);as.character(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter27_29b6d978153d83e41e226b193226d861() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, NA, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, NA, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, NA, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, NA, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c('0', '1'), class = 'factor'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter28_be987cc5e86462dab4ec1574a5c96efd() {
        assertEval("argv <- list(structure(c(11323, 11330, 11337, 11344, 11351, 11358, 11365, 11372, 11379, 11386), class = 'Date'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter29_bef30abe3ae49c76141fa6440f842332() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Dim = c(10L, 2L)));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter3_a18dffd524006e4bec7eeedd1e8f3007() {
        assertEval("argv <- list(c(2L, 1L, NA));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter30_c6f35b7d77599542ab3ee21bb75f4098() {
        assertEval("argv <- list(cas.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter31_af72e6e6773af7dbdd47e72d67d32db7() {
        assertEval("argv <- list(structure(c(1338523200, 1338609600, 1338696000, 1338782400, 1338868800, 1338955200, 1339041600), class = c('POSIXct', 'POSIXt'), tzone = ''));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter32_a11a635f4f38ef064bbb2362dbb2872f() {
        assertEval("argv <- list(structure(1:4, class = 'roman'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter33_bfd40d27cb62313f8a4f594b48fbffbf() {
        assertEval("argv <- list(logical(0));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter34_a673b801889dbc1428aae9fe0b85dbfc() {
        assertEval("argv <- list(structure(c(1104537600, 1107216000, 1109635200, 1112313600, 1114905600, 1117584000, 1120176000, 1122854400, 1125532800, 1128124800, 1130803200, 1133395200, 1136073600, 1138752000, 1141171200, 1143849600, 1146441600, 1149120000, 1151712000, 1154390400, 1157068800, 1159660800, 1162339200, 1164931200, 1167609600, 1170288000, 1172707200, 1175385600, 1177977600, 1180656000, 1183248000, 1185926400, 1188604800, 1191196800, 1193875200, 1196467200, 1199145600, 1201824000, 1204329600, 1207008000, 1209600000, 1212278400, 1214870400, 1217548800, 1220227200, 1222819200, 1225497600, 1228089600, 1230768000), class = c('POSIXct', 'POSIXt'), tzone = 'UTC'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter35_21d5a7a977e1f65845bfc91cde2fecbf() {
        assertEval("argv <- list(c(-4, 4, 3.99, -1, -3.01));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter36_d62bef6853e53de40aaca7bd0f19cdef() {
        assertEval("argv <- list(list(exit.code = 0L, send = NULL));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter37_cdb05678b20bc43ff1a5edf88e96310d() {
        assertEval("argv <- list(c(34L, -45L));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter38_945a289b35a64af860b30dc13577f0f7() {
        assertEval("argv <- list(structure(c(978307200, 978912000, 979516800, 980121600, 980726400, 981331200, 981936000, 982540800, 983145600, 983750400), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter39_d18e175683c639c331c42f4c7a5a5aed() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));as.character(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter4_b0efabdea893c5e3c24e0d077282fc6b() {
        assertEval("argv <- list(c('### Encoding: UTF-8', '', '### Name: text', '### Title: Add Text to a Plot', '### Aliases: text text.default', '### Keywords: aplot', '', '### ** Examples', '', 'plot(-1:1, -1:1, type = \\'n\\', xlab = \\'Re\\', ylab = \\'Im\\')', 'K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)', '', '## The following two examples use latin1 characters: these may not', '## appear correctly (or be omitted entirely).', 'plot(1:10, 1:10, main = \\'text(...) examples\\\\n~~~~~~~~~~~~~~\\',', '     sub = \\'R is GNU ©, but not ® ...\\')', 'mtext(\\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\\', side = 3)', 'points(c(6,2), c(2,1), pch = 3, cex = 4, col = \\'red\\')', 'text(6, 2, \\'the text is CENTERED around (x,y) = (6,2) by default\\',', '     cex = .8)', 'text(2, 1, \\'or Left/Bottom - JUSTIFIED at (2,1) by 'adj = c(0,0)'\\',', '     adj = c(0,0))', 'text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))', 'text(4, 8.4, \\'expression(hat(beta) == (X^t * X)^{-1} * X^t * y)\\',', '     cex = .75)', 'text(4, 7, expression(bar(x) == sum(frac(x[i], n), i==1, n)))', '', '## Two more latin1 examples', 'text(5, 10.2,', '     \\'Le français, c'est façile: Règles, Liberté, Egalité, Fraternité...\\')', 'text(5, 9.8,', '     \\'Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)\\')', '', '', ''));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter40_2b19c43c5220d4933e35afa1bcc7236c() {
        assertEval("argv <- list(structure(list(), class = 'numeric_version'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter41_38f994ae887dde2f849bad979235dc68() {
        assertEval("argv <- list(structure(list(c0 = structure(character(0), class = 'AsIs')), .Names = 'c0', row.names = character(0), class = 'data.frame'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter42_4cd3aed711e78cfcab749a3f20dca4ba() {
        assertEval("argv <- list(structure(c(12784, 13879), class = 'Date'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter43_19ac265a3caa759bd74a6699ecb410a4() {
        assertEval("argv <- list(NaN);as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter44_859da2fa62a78157d7c6b7ef4fbcb1e2() {
        assertEval("argv <- list(Inf);as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter45_08810f19c1e797ff549ac40bac3e0089() {
        assertEval("argv <- list(c('class', 'names', 'package'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter46_82ba430b0bf2481d1fa0aaf7e48236f6() {
        assertEval("argv <- list(c(59.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59.5));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter5_2c93fd2ee5e7cb09eb618554731299b9() {
        assertEval("argv <- list(structure(1395082040.29392, class = c('POSIXct', 'POSIXt')));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter6_3a74fb61513825dd5b604943899cea85() {
        assertEval("argv <- list(structure(2:3, .Label = c('C', 'A', 'B'), class = 'factor'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter7_6150141ca1078d6dd7c0351363c301ea() {
        assertEval("argv <- list(structure(1:255, class = 'octmode'));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter8_34c41c61de16c936dde0a40e462a5503() {
        assertEval("argv <- list(c(Inf, -Inf, NaN, NA));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter9_790206fdb6bf153d4d3de9d9511867e2() {
        assertEval("argv <- list(c(1, 2, NA, 2));as.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascharacterfactor_testascharacterfactor1_206beb600cb39a501cb7aa968e4cfe33() {
        assertEval("argv <- structure(list(x = structure(c(1L, 2L, NA), .Label = c('AB',     'CD'), class = 'factor')), .Names = 'x');do.call('as.character.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex1_02046701d30d830c5bd81ccfe06a0f63() {
        assertEval("argv <- list(logical(0), logical(0));as.complex(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex10_30e49ba1acb87ff4056fe35381a55a76() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a'));as.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex11_1f940f219e8455931a1dc705ad720aea() {
        assertEval("argv <- list(NULL, NULL);as.complex(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex2_66b0341a1e8ff24f50aa73250d2f5cd9() {
        assertEval("argv <- list(FALSE, FALSE);as.complex(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex3_6b1a5856287e1b6f81d7fb7816559fd8() {
        assertEval("argv <- list(' ');as.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex4_6b7f43ff80f5b6bce19734fce23ab66e() {
        assertEval("argv <- list(structure(c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492, -0.305388387156356, 1.51178116845085, 0.389843236411431, -0.621240580541804, -2.2146998871775, 1.12493091814311, -0.0449336090152309, -0.0161902630989461, 0.943836210685299, 0.821221195098089, 0.593901321217509, 0.918977371608218, 0.782136300731067, 0.0745649833651906, -1.98935169586337, 0.61982574789471), .Dim = c(5L, 5L), .Dimnames = list(c('1', '2', '3', '4', '5'), c('a', 'b', 'c', 'd', 'e'))));as.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex5_1614ad635ca864e4c18f7cb7eead4039() {
        assertEval("argv <- list('1.3');as.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex6_6fba59c292c0f19676b228cbf4c35773() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));as.complex(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex7_5fe78ce599bd28e6b314c3eca83c918e() {
        assertEval("argv <- list(NA_complex_);as.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex8_172d9473e99bfa0f9d8ce85f102b5109() {
        assertEval("argv <- list(integer(0));as.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex9_e58b153afa386b954fc50944b2612096() {
        assertEval("argv <- list(1L);as.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdataframe_testasdataframe1_bebc302835b4c03c49e66afd22e53df8() {
        assertEval("argv <- structure(list(x = structure(c(3.5, 2, 1.7, 0.40625,     0.5, 0.882, 4, 2, 2, 4, 2, 3, 0.625, 0.5, 0.444444444444444,     0, 0, 0.333333333333333, 0.833333333333333, 1, 0.333333333333333,     0.5, 0.666666666666667, 0.666666666666667, 0.166666666666667,     0, 0.5), .Dim = c(3L, 9L), .Dimnames = list(c('q1.csv', 'q2.csv',     'q3.csv'), c('effsize', 'constraint', 'outdegree', 'indegree',     'efficiency', 'hierarchy', 'centralization', 'gden', 'ego.gden')))),     .Names = 'x');do.call('as.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltinasdataframetable_testasdataframetable1_8bbd665649f9d07a7c2d6f8392d71df8() {
        assertEval("argv <- structure(list(x = structure(integer(0), .Dim = 0L, .Dimnames = structure(list(NULL),     .Names = ''), class = 'table')), .Names = 'x');do.call('as.data.frame.table', argv)");
    }

    @Test
    public void TestrGenBuiltinasdifftime_testasdifftime1_de9e4a13c6f3d916ecf80e65f68b46be() {
        assertEval("argv <- structure(list(tim = c('0:3:20', '11:23:15')), .Names = 'tim');do.call('as.difftime', argv)");
    }

    @Test
    public void TestrGenBuiltinasdifftime_testasdifftime2_a14825c4254594b901790d1ee37c6d5c() {
        assertEval("argv <- structure(list(tim = c('3:20', '23:15', '2:'), format = '%H:%M'),     .Names = c('tim', 'format'));do.call('as.difftime', argv)");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble1_949937c9a3cc24a49a7010d9421437f7() {
        assertEval("argv <- list(c(3.14159265358979, 3.14159265358981, 3.14159265358981, 3.14159265358981, 3.14159265358978, 3.1415926535898, 3.1415926535898, 3.14159265358978, 3.14159265358981, 3.14159265358979, 3.14159265358979, 3.14159265358978, 3.14159265358979, 3.14159265358981, 3.1415926535898, 3.14159265358978, 3.14159265358978, 3.14159265358978, 3.14159265358978, 3.14159265358981, 3.14159265358981, 3.14159265358978, 3.14159265358979, 3.14159265358978, 3.14159265358978, 3.14159265358978, 3.1415926535898, 3.14159265358977, 3.14159265358979, 3.14159265358979, 3.1415926535898, 3.14159265358979, 3.1415926535898, 3.14159265358979, 3.14159265358979, 3.14159265358981, 3.14159265358978, 3.1415926535898, 3.14159265358979, 3.14159265358981, 3.1415926535898, 3.14159265358981, 3.14159265358978, 3.1415926535898, 3.14159265358981, 3.1415926535898, 3.14159265358978, 3.14159265358979, 3.14159265358978, 3.14159265358979, 3.1415926535898, 3.14159265358981, 3.14159265358978, 3.1415926535898, 3.14159265358979, 3.1415926535898, 3.14159265358978, 3.1415926535898, 3.14159265358978, 3.14159265358979, 3.1415926535898, 3.14159265358978, 3.1415926535898, 3.14159265358981, 3.14159265358977, 3.14159265358981, 3.14159265358978, 3.14159265358978, 3.14159265358981, 3.14159265358979, 3.14159265358977, 3.14159265358978, 3.14159265358981, 3.14159265358979, 3.14159265358981, 3.1415926535898, 3.14159265358979, 3.14159265358979, 3.1415926535898, 3.14159265358979, 3.14159265358981, 3.14159265358979, 3.14159265358979, 3.14159265358981, 3.14159265358977, 3.1415926535898, 3.14159265358979, 3.1415926535898, 3.14159265358979, 3.1415926535898, 3.1415926535898, 3.1415926535898, 3.14159265358978, 3.1415926535898, 3.1415926535898, 3.1415926535898, 3.14159265358981, 3.14159265358979, 3.14159265358978, 3.14159265358981, 3.14159265358981));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble10_ad3f790c5ef90bf74aed796c4698b54a() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 0, 7, 8, 9, 10, 11, 12), .Dim = c(4L, 3L)));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble11_888f0cba047d3b8e1059f6862b221d2e() {
        assertEval("argv <- list(c(NA, '0.0021'));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble12_53be43f336b689fd606ea6761c3b1241() {
        assertEval("argv <- list(character(0));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble13_57b195a68ee0874096e034c3f79b52e4() {
        assertEval("argv <- list(structure(c(21, 16.4, 18.7, 16.8, 17.8, 10.9, 14, 3.5, 4.3, 3.5, 2.7, 6, 14, 2.3), .Dim = c(7L, 2L), .Dimnames = list(c('L', 'NL', 'D', 'B', 'F', 'IRL', 'UK'), c('x', 'y'))));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble14_70b49c2c7ddf9261cf5c8025bb4af88f() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707712e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.96881154539801e-173, 0, 8.23599653846971e-150, 0, 0, 0, 0, 6.51733217171342e-10, 0, 2.36840184577368e-67, 0, 9.43484083575241e-307, 0, 1.59959906013772e-89, 0, 8.73836857865035e-286, 7.09716190970993e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044552e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.07028772732371e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.75227273320951e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble15_ca6daf04b74655fa737fbef3ebb42f5f() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('WinF', 'WinNF', 'Veh', 'Con', 'Tabl', 'Head'), class = 'factor'));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble16_aecc96e5426db7d2f179d188c23f236c() {
        assertEval("argv <- list(structure(28, units = 'days', class = 'difftime'), units = 'secs');as.double(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble17_771eab2b1b80232360bbc5fc57912329() {
        assertEval("argv <- list(structure(c(0, 0.000202660677936876, 0.00241803309686265, 0.00307283986031733, 0.00265711006681184, 0.00284334291579362, 0.00328411981940272, 0.00355926216704063, 0.00344761438149018, 0.00289210744006633, 0.00204225708046235, 0.00178504641867207, 0.00172572372502035, 0.00159946455058003, 0.00194868716238274, 0.00230753595074067, 0.00246954915831488, 0.00290833971278575, 0.00337412960419987, 0.00358181270769781, 0.00354428559372645, 0.00326334045783046, 0.00298117073292367, 0.00293436142844913, 0.0029459867318606, 0.00298412396438805, 0.00320781989229225, 0.00342867445796099, 0.00405369787195761, 0.00417753179826535, 0.00414267894375602, 0.00407024400729904, 0.00393965520892809, 0.00385238230694322, 0.00383595140804293, 0.00378781523717584, 0.0037736404476557, 0.00382248725149436, 0.00381326514145668, 0.0038973026728862, 0.00395676065396717, 0.00431861015154494, 0.00443079015716877, 0.00450544753584657, 0.00439372971759073, 0.00433442297069524, 0.00429954456230782, 0.00426944313801568, 0.00423795462806802, 0.00417472474765742, 0.0042795282659813, 0.00454163385850258, 0.00473601380444899, 0.00466407336984038, 0.00462392764582444, 0.00456056187379283, 0.0045055003087985, 0.00442670076624794, 0.00431121205766447, 0.00421990442925801, 0.00416971729251421, 0.00407853686842565, 0.00409133004830999, 0.0041364805798209, 0.00427208054940612, 0.0044573146303062, 0.00463786827882152, 0.00462599613024964, 0.00456902544608922, 0.00448500474247415, 0.00443631355776013, 0.0043987926301962, 0.00439976139365821, 0.00444739366229557, 0.00441357461857941, 0.00445091952164202, 0.00450346393728121, 0.00462169457996522, 0.004734024297345, 0.00475873200245829, 0.00475253573403064, 0.00471631526131182, 0.00465515282727091, 0.00464698887217466, 0.00462685789718263, 0.00462996361305565, 0.00464191147874474, 0.00464879307071608, 0.00469113571839472, 0.00476270873398438, 0.00477314235918783, 0.00479544142345609, 0.0047737904084596, 0.00471999826644103, 0.00469372169840419, 0.0046463488677134, 0.00461799759453906, 0.00458947682120691, 0.00460912357592989, 0.00463333675159159, 0.00466732307616235, 0.00471231441093801, 0.00474022677208645, 0.00477297287765633, 0.00476766819213148, 0.00473849505147981, 0.00469782534032621, 0.00463861048753855, 0.00457840111456501, 0.00452291229235016, 0.00446341204452307, 0.00442002128896248, 0.00442991931450486, 0.00446688166198173, 0.00452411449686222, 0.00458536543416883, 0.00454175859707822, 0.00450829288322652, 0.00445725707512455, 0.00439091360820385, 0.00437267387139272, 0.00436951404759565, 0.00439586780117785, 0.00443132731253063, 0.00447997483459774, 0.00446916178054371, 0.00448357738281654, 0.00448976052744213, 0.00450610513067692, 0.00449385388080097, 0.00448875792730345, 0.00450025038413588, 0.00448200635475038, 0.00445933490412089, 0.00437269614488144, 0.00441152247400175, 0.00444283816260407, 0.00446748686328766, 0.00448539598299297, 0.00445924890176085, 0.00444386385593038, 0.00445984197910477, 0.00443574296742794, 0.00440036042966077), .Tsp = c(1949, 1960.91666666667, 12), class = 'ts'));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble18_c5d23a4a19328f2300a28b0ea088a129() {
        assertEval("argv <- list(c(0.0099, 0.099, 0.99, 9.9, 99, 990, 9900, 99000, 990000, 9900000, 9.9e+07, 9.9e+08, 9.9e+09, 9.9e+10));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble19_1c0639528f35ceceb26fe3eac156aa8a() {
        assertEval("argv <- list(structure(180.958333333333, units = 'days', class = 'difftime'), units = 'secs');as.double(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble2_0bfae9e14e6f29807a45929a9d755a1e() {
        assertEval("argv <- list(c('10', '2.7404', '0.27404', ''));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble20_f01381c0a139dfa3415ded1996828da5() {
        assertEval("argv <- list(NULL);as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble21_5a423bbbaa3b3d9af3d1b35ac7725497() {
        assertEval("argv <- list(structure(list(foo = 5L, Species = 2L), .Names = c('foo', 'Species'), out.attrs = structure(list(dim = structure(c(6L, 3L), .Names = c('foo', 'Species')), dimnames = structure(list(foo = c('foo=1', 'foo=2', 'foo=3', 'foo=4', 'foo=5', 'foo=6'), Species = c('Species=1', 'Species=2', 'Species=3')), .Names = c('foo', 'Species'))), .Names = c('dim', 'dimnames')), row.names = 11L, class = 'data.frame'));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble22_340fd104c77c03ffa28a68ba601797c8() {
        assertEval("argv <- list(c(TRUE, FALSE, TRUE));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble23_602314a508c3f3d98485e5b8e4f2c076() {
        assertEval("argv <- list(c(TRUE, TRUE, FALSE));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble24_9141429e3f0ddd5b3066f5a9d68a6a39() {
        assertEval("argv <- list(c(NA, NA, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble25_248e4823271ed0c04360f034b891a11c() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L), .Label = c('Rural Male', 'Rural Female', 'Urban Male', 'Urban Female'), class = 'factor', .Dim = c(5L, 4L)));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble26_a6bb7c79ffe4e8b071f239d5f3350fa6() {
        assertEval("argv <- list(c(NaN, 9.51350769866873, 4.5908437119988, 2.99156898768759, 2.21815954375769, 1.77245385090552, 1.48919224881282, 1.29805533264756, 1.1642297137253, 1.06862870211932, 1));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble27_e25eeefaa5bce829117c2999a4888583() {
        assertEval("argv <- list(structure(3:5, .Tsp = c(1, 3, 1), class = 'ts'));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble28_8b20b7f87545be17d40c139f2792c87d() {
        assertEval("argv <- list('Inf');as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble29_485ef8d9b4e59421979c627b3fcd6067() {
        assertEval("argv <- list(c(' 9', ' 3', ' 3', '  6.761', '156.678', ' 18.327', ' 11.764', '191.64', '323.56', '197.21', '190.64'));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble3_989f5b7197ccb6c5baa05f4684e7374e() {
        assertEval("argv <- list(structure(4, tzone = 'GMT', units = 'days', class = 'difftime'), units = 'secs');as.double(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble30_a6e78218be9b105b6012ef1fe4c411d0() {
        assertEval("argv <- list(structure(c(NA, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L), .Tsp = c(1, 101, 1), class = 'ts'));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble32_08629fb50dd2251c79d25091dbf7e19b() {
        assertEval("argv <- list(NA);do.call('as.double', argv)");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble4_a0950698284ee64d6608a2e5bdb92b83() {
        assertEval("argv <- list('NaN');as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble5_f91f88d89ebae824397bdeb8c2389759() {
        assertEval("argv <- list(structure(c(1.97479242156194, 1.71068206679967, 1.52241456554483), .Names = c('Bens of Jura', 'Knock Hill', 'Lairig Ghru')));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble6_752d38d8a75436778dc2a1a3f8ecca88() {
        assertEval("argv <- list(c(856722023.658297, 302896976.260735, 107090252.958018, 37862122.0336249, 13386281.6212132, 4732765.25626924, 1673285.20557359, 591595.661165903, 209160.656540579, 73949.4659102332, 26145.0937553316, 9243.69976775411, 3268.16009484595, 1155.49552841673, 408.56675987247, 144.503039869403, 51.1642500846007, 18.1945635811076, 6.57944169516568, 2.52146555042134, 1.10249557516018, 0.395623281358704, -0.367112032460934, 0.27396220835345, -0.0693674921217567, 0.0814543296800769, 0.0923699793060252, 0.0504684833914985, -0.0498360425475413, 0.00273531641447061, -0.00392881268836618));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble7_4d29d409a409fed21c1bda98325ac766() {
        assertEval("argv <- list(c(1.90069420068965e+68, 1.85614668036113e+65, 1.81264324254072e+62, 1.77015941654582e+59, 1.72867130522891e+56, 1.68815557154536e+53, 1.64858942546521e+50, 1.60995061130567e+47, 1.57221739580551e+44, 1.53536855821758e+41, 1.49938338742443e+38, 1.46424170564914e+35, 1.42992399523352e+32, 1.39641192722393e+29, 1.36369045875401e+26, 1.33175605805513e+23, 1.30064886911081e+20, 127057845771019376, 124241617095379, 121963623349.57, 121618014.278689, 129184.542208039, 178.330555907964, 0.906701004569228, -0.0905266041439205, 0.141777480680994, 0.0921442943441807, 0.0658533118803105, -0.0402995417166551, 0.0244881559995369, -0.0194680918617461));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble8_8eade01b937fb096c73488398e8454f4() {
        assertEval("argv <- list(c(3.69420518444359e+25, 2.30887824027777e+24, 1.44304890017492e+23, 9.01905562612606e+21, 5.63690976641081e+20, 35230686042118275072, 2201917878145066496, 137619867512235136, 8601241751556820, 537577617482832, 33598603095309.8, 2099913194115.17, 131244699796.888, 8202825028.58974, 512684387.219832, 32044730.0464007, 2003284.70114408, 125327.674230857, 7863.68742857025, 499.272560819512, 33.2784230289721, 2.7659432263306, 0.488936768533843, -0.282943224311172, 7.32218543045282e-05, -0.00636442868227041, -0.0483709204009262, -0.0704795507649514, 0.0349437746169591, -0.0264830837608839, 0.0200901469411759));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble9_8cb69151782f373c8be02b95f356324b() {
        assertEval("argv <- list(c('-.1', ' 2.7 ', 'B'));as.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasdoubledifftime_testasdoubledifftime1_2f442f4b40bf7b7ec96499b8c71bca24() {
        assertEval("argv <- structure(list(x = structure(16351.8259046444, units = 'days',     class = 'difftime', origin = structure(0, class = c('POSIXct',         'POSIXt'), tzone = 'GMT'))), .Names = 'x');do.call('as.double.difftime', argv)");
    }

    @Test
    public void TestrGenBuiltinasexpression_testasexpression1_1499661bb1ffd7c03bac2871ee6bb897() {
        assertEval("argv <- structure(list(x = 1), .Names = 'x');do.call('as.expression', argv)");
    }

    @Test
    public void TestrGenBuiltinasin_testasin1_434240b01001b58f44151dc8bf0198f6() {
        assertEval("argv <- list(c(0.185157057377868, 0.15968866445196, 0.190428414477965, 0.0799378829516562, 0.043979457119882, 0.0348843282121068, 0.0484793103572122, 0.109221220908651, 0.264364324223884, 0.211999913632203, 0.141157385938914, 0.143099951254224, 0.193270515700824, 0.217573738375349, 0.216954681783302, 0.291716047319384, 0.387858840434923, 0.461666520261029, 0.49992310387409, 0.421641232345205, 0.419256648241403, 0.442116045838704, 0.375354272383531, 0.416333612927645, 0.506835005179142, 0.408511923588378, 0.442160540547329, 0.59649385178332, 0.729919018318794, 0.811421169963513, 0.896290688103034, 0.752346465072037, 0.654905104838795, 0.821242494513718, 0.91715624670646, 0.885960209053628));asin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasin_testasin2_491c4b3e1cb2ac77763d88264422d3f4() {
        assertEval("argv <- list(c(2+0i, 2-0.0001i, -2+0i, -2+0.0001i));asin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasin_testasin3_4b79981613e436caf0aa2740956b68dd() {
        assertEval("argv <- list(logical(0));asin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasin_testasin4_eac36778e49b62a2cdadde00d617dd3d() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));asin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinh_testasinh1_17b231c174eb6826c7a3339e6d3a6538() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));asinh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinh_testasinh2_16feec78b53e130c27fcea5ecdaf5fed() {
        assertEval("argv <- list(FALSE);asinh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinh_testasinh3_fd62a29e7b6704ee7f1c2825c236b191() {
        assertEval("argv <- list(c(-10.0178749274099, -9.71883514604503, -9.428631115578, -9.14699900083883, -8.87368275970178, -8.60843391030797, -8.35101130516145, -8.10118091189307, -7.85871560049306, -7.62339493681878, -7.39500498218993, -7.17333809888897, -6.95819276139009, -6.74937337314489, -6.54669008875839, -6.34995864139355, -6.15900017524753, -5.9736410829473, -5.79371284771676, -5.61905189017195, -5.44949941960501, -5.28490128962169, -5.12510785800119, -4.96997385065093, -4.81935822953248, -4.67312406443873, -4.53113840850555, -4.39327217734495, -4.25940003168967, -4.12940026344266, -4.00315468502777, -3.88054852194104, -3.76147030840502, -3.64581178603109, -3.53346780539777, -3.42433623045557, -3.31831784567124, -3.21531626582739, -3.11523784839505, -3.01799160839986, -2.92348913570423, -2.83164451463048, -2.74237424585168, -2.65559717047939, -2.57123439627907, -2.48920922594631, -2.40944708737842, -2.33187546587824, -2.25642383822831, -2.18302360857567, -2.1116080460688, -2.04211222419016, -1.97447296172911, -1.90862876534153, -1.84451977364398, -1.78208770279149, -1.72127579348957, -1.66202875939226, -1.60429273683927, -1.54801523588655, -1.49314509258573, -1.43963242246912, -1.38742857519786, -1.33648609033215, -1.2867586541832, -1.23820105770775, -1.19076915540686, -1.1444198251916, -1.0991109291792, -1.05480127538394, -1.01145058026799, -0.969019432118151, -0.927469255215247, -0.886762274763496, -0.84686148254806, -0.807730603289509, -0.769334061664634, -0.731636949963607, -0.6946049963541, -0.658204533723497, -0.622402469070884, -0.587166253420983, -0.55246385223268, -0.518263716275245, -0.484534752945762, -0.451246298001703, -0.41836808768293, -0.385870231197804, -0.353723183548358, -0.321897718669858, -0.290364902860306, -0.25909606847575, -0.22806278786747, -0.19723684753736, -0.166590222487993, -0.13609505074407, -0.105723608022064, -0.0754482825250618, -0.0452415498398571, -0.0150759479134945, 0.015075947913494, 0.0452415498398571, 0.0754482825250618, 0.105723608022064, 0.136095050744069, 0.166590222487993, 0.19723684753736, 0.22806278786747, 0.259096068475749, 0.290364902860306, 0.321897718669858, 0.353723183548358, 0.385870231197804, 0.41836808768293, 0.451246298001702, 0.484534752945762, 0.518263716275245, 0.55246385223268, 0.587166253420983, 0.622402469070883, 0.658204533723497, 0.6946049963541, 0.731636949963607, 0.769334061664634, 0.807730603289509, 0.84686148254806, 0.886762274763496, 0.927469255215247, 0.96901943211815, 1.01145058026799, 1.05480127538394, 1.0991109291792, 1.1444198251916, 1.19076915540686, 1.23820105770775, 1.2867586541832, 1.33648609033215, 1.38742857519786, 1.43963242246912, 1.49314509258573, 1.54801523588655, 1.60429273683927, 1.66202875939226, 1.72127579348957, 1.78208770279149, 1.84451977364398, 1.90862876534153, 1.97447296172911, 2.04211222419016, 2.1116080460688, 2.18302360857567, 2.25642383822831, 2.33187546587824, 2.40944708737842, 2.48920922594631, 2.57123439627907, 2.65559717047939, 2.74237424585168, 2.83164451463048, 2.92348913570423, 3.01799160839985, 3.11523784839505, 3.21531626582738, 3.31831784567124, 3.42433623045557, 3.53346780539777, 3.64581178603109, 3.76147030840502, 3.88054852194104, 4.00315468502777, 4.12940026344266, 4.25940003168967, 4.39327217734494, 4.53113840850555, 4.67312406443873, 4.81935822953248, 4.96997385065093, 5.12510785800119, 5.28490128962168, 5.44949941960501, 5.61905189017195, 5.79371284771676, 5.9736410829473, 6.15900017524753, 6.34995864139355, 6.54669008875838, 6.74937337314489, 6.95819276139008, 7.17333809888896, 7.39500498218993, 7.62339493681878, 7.85871560049306, 8.10118091189307, 8.35101130516145, 8.60843391030797, 8.87368275970177, 9.14699900083883, 9.428631115578, 9.71883514604503, 10.0178749274099));asinh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinh_testasinh4_b3a04ee92591d9476b3e306bb9ba5957() {
        assertEval("argv <- list(c(0+2i, 0.0001+2i, 0-2i, 0-2.0001i));asinh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger1_61bd60c145c6c93f455382050495eff4() {
        assertEval("argv <- list(structure(c(4L, 5L, 3L, 2L, 2L, 1L, 6L), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables', 'R Core'), class = 'factor'));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger10_1339eee6cc2fbd993df70a1fa8c5959d() {
        assertEval("argv <- list(c('1', NA, '0'));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger11_ba3f5ab0028149747c7aeb88e4a1f518() {
        assertEval("argv <- list(c('3', '14159265358979'));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger12_418363e802e121c503e8906e489c1d04() {
        assertEval("argv <- list(TRUE);as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger13_f9e6d4250375d8906cff5260556cf143() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0), .Dim = c(13L, 1L), .Dimnames = list(c('59', '115', '156', '268', '329', '431', '448', '477', '638', '803', '855', '1040', '1106'), NULL)));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger14_f2134d83fdf785cd1aeeec020c349b0b() {
        assertEval("argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger15_d9368baa187d86d4d3ac59544b8f63c3() {
        assertEval("argv <- list(character(0));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger16_c17be30e286ea45d7ce7f22d4bd2b90c() {
        assertEval("argv <- list(4999.0000000001);as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger17_b642a15a779bdcbfaf08ebd6b26a6dc7() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger18_07cdcb20bfcc60428de54cbff5734ad7() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 2L), .Label = c('1', '2', NA), class = 'factor'));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger19_b1ac2856065182429238cea650e2e6f3() {
        assertEval("argv <- list(structure(c(NA, 1L, NA, 2L, 1L, NA, NA, 1L, 4L, 1L, NA, 4L, 1L, 3L, NA, 4L, 2L, 2L, NA, 4L, 4L, 2L, 4L, 4L, 2L, 1L, 4L, 4L, 3L, 1L, 1L, 4L, 1L, 4L, NA, 1L, 4L, 4L, 2L, 2L, 4L, 4L, 3L, 4L, 2L, 2L, 3L, 3L, 4L, 1L, 1L, 1L, 4L, 1L, 4L, 4L, 4L, 4L, NA, 4L, 4L, 4L, NA, 1L, 2L, 3L, 4L, 3L, 4L, 2L, 4L, 4L, 1L, 4L, 1L, 4L, NA, 4L, 2L, 1L, 4L, 1L, 1L, 1L, 4L, 4L, 2L, 4L, 1L, 1L, 1L, 4L, 1L, 1L, 1L, 4L, 3L, 1L, 4L, 3L, 2L, 4L, 3L, 1L, 4L, 2L, 4L, NA, 4L, 4L, 4L, 2L, 1L, 4L, 4L, NA, 2L, 4L, 4L, 1L, 1L, 1L, 1L, 4L, 1L, 2L, 3L, 2L, 1L, 4L, 4L, 4L, 1L, NA, 4L, 2L, 2L, 2L, 4L, 4L, 3L, 3L, 4L, 2L, 4L, 3L, 1L, 1L, 4L, 2L, 4L, 3L, 1L, 4L, 3L, 4L, 4L, 1L, 1L, 4L, 4L, 3L, 1L, 1L, 2L, 1L, 3L, 4L, 2L, 2L, 2L, 4L, 4L, 3L, 2L, 1L, 1L, 4L, 1L, 1L, 2L, NA, 2L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 4L, 4L, 4L, 4L, 4L, 4L, 2L, 2L, 1L, 4L, 1L, 4L, 3L, 4L, 2L, 3L, 1L, 3L, 1L, 4L, 1L, 4L, 1L, 4L, 3L, 3L, 4L, 4L, 1L, NA, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 4L, 3L, 4L, 2L, 4L, 4L, 1L, 2L, NA, 4L, 4L, 4L, 4L, 1L, 2L, 1L, 1L, 2L, 1L, 4L, 2L, 3L, 1L, 4L, 4L, 4L, 1L, 2L, 1L, 4L, 2L, 1L, 3L, 1L, 2L, 2L, 1L, 2L, 1L, NA, 3L, 2L, 2L, 4L, 1L, 4L, 4L, 2L, 4L, 4L, 4L, 2L, 1L, 4L, 2L, 4L, 4L, 4L, 4L, 4L, 1L, 3L, 4L, 3L, 4L, 1L, NA, 4L, NA, 1L, 1L, 1L, 4L, 4L, 4L, 4L, 2L, 4L, 3L, 2L, NA, 1L, 4L, 4L, 3L, 4L, 4L, 4L, 2L, 4L, 2L, 1L, 4L, 4L, NA, 4L, 4L, 3L, 3L, 4L, 2L, 2L, 4L, 1L, 4L, 4L, 4L, 3L, 4L, 4L, 4L, 3L, 2L, 1L, 3L, 1L, 4L, 1L, 4L, 2L, NA, 1L, 4L, 4L, 3L, 1L, 4L, 1L, 4L, 1L, 4L, 4L, 1L, 2L, 2L, 1L, 4L, 1L, 1L, 4L, NA, 4L, NA, 4L, 4L, 4L, 1L, 4L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 1L, 2L, 1L, 4L, 2L, 3L, 3L, 1L, 3L, 1L, 4L, 1L, 3L, 2L, 2L, 4L, 1L, NA, 3L, 4L, 2L, 4L, 4L, 4L, 4L, 4L, 4L, 3L, 4L, 4L, 3L, 2L, 1L, 4L, 4L, 2L, 4L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 4L, 4L, 1L, 1L, 4L, 1L, 4L, 4L, 4L, 1L, 1L, NA, 3L, 2L, 4L, 4L, 4L, 4L, 2L, 3L, 3L, 2L, NA, 4L, 2L, 4L, 4L, 1L, 1L, 4L, 4L, 1L, 1L, 4L, 1L, 2L, 2L, 2L, 2L, 1L, 4L, 4L, 1L, 2L, 2L, 2L, 3L, 4L, 4L, 3L, 4L, 1L, 1L, 4L, 4L, NA, 4L, 1L, 4L, 4L, 4L, 1L, 4L, 4L, 1L, 2L, 4L, 4L, 4L, 4L, 1L, 2L, 4L, 4L, 2L, 1L, 4L, 2L, 4L, 2L, 2L, 4L, 1L, 3L, 3L, 2L, 4L, 1L, 4L, 4L, 4L, 1L, NA, 4L, 4L, 2L, 4L, 4L, 4L, 4L, 4L, 2L, NA, 4L, 2L, 4L, 3L, 1L, 4L, 4L, 3L, 4L, 2L, 4L, 4L, 1L, 2L, 1L, 4L, 1L, 3L, 3L, 1L, 4L, 4L, 2L, 4L, 4L, 4L, 4L, 3L, 2L, 3L, 3L, 2L, NA, 3L, 4L, 4L, 3L, 3L, 4L, 4L, 4L, 1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 2L, 4L, 2L, 3L, 4L, 1L, 3L, 1L, NA, 4L, 1L, 2L, 2L, 1L, 4L, 3L, 3L, 4L, 1L, 1L, 3L), .Label = c('(1) Approve STRONGLY', '(2) Approve SOMEWHAT', '(3) Disapprove SOMEWHAT', '(4) Disapprove STRONGLY'), class = 'factor'));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger2_09af24ca667cda5ae39d663dacb91980() {
        assertEval("argv <- list(c('   33', '   34', '   35', '   36', '   37', '   38', '   18', '   19', '   20', '   21', '   22', '   23', '   36', '   37', '   38', '   39'));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger20_6907bfa086f56b4b0f8b7ecb0f04c55b() {
        assertEval("argv <- list(39);as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger3_d1dff7e5bb6c4e0191e64cd0294206c7() {
        assertEval("argv <- list(c(-Inf, -8.5, -2.83333333333333, -1.41666666666667, -0.85, -0.566666666666666, -0.404761904761905, -0.303571428571428, -0.236111111111111, -0.188888888888889));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger4_f8a1a69864f19497f02d86f874cd7f4d() {
        assertEval("argv <- list(c(0, 1, NA, NA, 1, 1, -1, 1, 3, -2, -2, 7, -1, -1, -1, -1, -1, -1, -1, -1, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger6_9241a3e961e96c317b2a424da76bbe22() {
        assertEval("argv <- list(2e+05);as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger7_9e449efb52d7355d0d205d0c066c6d01() {
        assertEval("argv <- list(NULL);as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger8_0fc8ebea4e4a414c745c201818141791() {
        assertEval("argv <- list(list(7L, 20, 0L, 1));as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger9_60181beb9941783cf99ef25b1f74514e() {
        assertEval("argv <- list('-1');as.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslist_testaslist1_4d627984eb6d295e1c07448a0a58a8ee() {
        assertEval("argv <- structure(list(x = structure(c(9.83610941897737, 1.76740501065812,     3.23822416444495, -2.66666666666667, -10, 28), .Names = c('X',     'Y', 'Z', 'a', 'b', 'c'))), .Names = 'x');do.call('as.list', argv)");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical1_db22a08a36cc3398d59595d65f1c2673() {
        assertEval("argv <- list(structure(c(0L, 0L, 0L, 1L), .Names = c('Y', 'B', 'V', 'N')));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical10_82c48118607a4d0b0109d4516127715d() {
        assertEval("argv <- list(NULL);as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical11_fe372f4f9308ccf7e3676261783bb6bb() {
        assertEval("argv <- list(structure('TRUE', .Names = '.registration'));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical12_3a053d4fd625950f88f85e74bb3111d6() {
        assertEval("argv <- list(structure(c(0, 1, 2, 2), .Dim = c(4L, 1L), .Dimnames = list(c('Y', 'B', 'V', 'N'), NULL)));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical13_0af68fbfe51f44019fcf470e6e0b8099() {
        assertEval("argv <- list(c(TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical14_f7cb81cd22d66b840d9d21bbba02c134() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a'));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical15_d702969df611248c2be15a889c43c53f() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical17_8d0cd115f4748f037e55cc3823aa375a() {
        assertEval("argv <- list(c(1, 2, 3, 4, 5, NA, NA, 2, 3, 4, 5, 6));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical2_0ecbdfa2e3d3b676fe6f0be863c09ff1() {
        assertEval("argv <- list(structure(c(-4, 1), .Names = c('', '')));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical3_609e53332f07b15660433b05d3b50e23() {
        assertEval("argv <- list(structure(c(1L, 0L, 0L, 0L, 0L), .Names = c('bibtype', NA, NA, NA, NA)));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical4_0f4ba0b664b6395924b3911f3ab25052() {
        assertEval("argv <- list(c(1L, NA, 0L));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical7_c77989ba2a3af391b7cc15b93efc3b78() {
        assertEval("argv <- list('FALSE');as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical8_2b82034983d46d45f4fc032acd4cacc6() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogical_testaslogical9_72b3bddf97bf1e574efee440de8b2e87() {
        assertEval("argv <- list(c(3.74165738677394, 0, 8.55235974119758, 1.96396101212393));as.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinaslogicalfactor_testaslogicalfactor1_6ad0da0763dffb244bb82a5a262815c0() {
        assertEval("argv <- structure(list(x = structure(1:2, .Label = c('FALSE',     'TRUE'), class = 'factor')), .Names = 'x');do.call('as.logical.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinasmatrix_testasmatrix1_efa60229c22450b251e84a99a533d258() {
        assertEval("argv <- structure(list(x = structure(c(9L, 27L, 27L, 27L, 27L,     3L, 3L, 3L, 3L, 9L, 9L, 9L, 9L, 9L, 9L), .Names = c('Blocks',     'A', 'B', 'C', 'D', 'Blocks:A', 'Blocks:B', 'Blocks:C', 'Blocks:D',     'A:B', 'A:C', 'A:D', 'B:C', 'B:D', 'C:D'))), .Names = 'x');do.call('as.matrix', argv)");
    }

    @Test
    public void TestrGenBuiltinasoctmode_testasoctmode1_765af30307636783765a89a2c93a904a() {
        assertEval("argv <- structure(list(x = 1:255), .Names = 'x');do.call('as.octmode', argv)");
    }

    @Test
    public void TestrGenBuiltinasraw_testasraw1_fc4732e89db2323c2a805ac2fb6ef44b() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));as.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasraw_testasraw2_fafdfef8c5b6a2548a2cff566c2fc296() {
        assertEval("argv <- list(integer(0));as.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasraw_testasraw3_0790103721baab75f5e1c92ec78041f5() {
        assertEval("argv <- list(logical(0));as.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasraw_testasraw4_8f105bcf5fdc6297c4fd59528275141b() {
        assertEval("argv <- list(character(0));as.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasraw_testasraw5_3d93896369b4932ff20e59e5e151dabc() {
        assertEval("argv <- list(NULL);as.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinasraw_testasraw6_53b22009affe8cd6d2010006cffad0cf() {
        assertEval("argv <- list(list());as.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinassign_testassign1_710a228737353f7309f4d64edd85871f() {
        assertEval("argv <- structure(list(x = '`', value = TRUE), .Names = c('x',     'value'));do.call('assign', argv)");
    }

    @Test
    public void TestrGenBuiltinassingle_testassingle1_f3325d4b8305a46b7975c9d16e7cf9e8() {
        assertEval("argv <- structure(list(x = 1), .Names = 'x');do.call('as.single', argv)");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector1_6eb97db791064648aa3ddea1d8913575() {
        assertEval("argv <- list('ylog', 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector10_f8e3e47b82d7e67d88c162d66d6c5ed2() {
        assertEval("argv <- list(structure(cames = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render', '#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector11_d827720825cadd44936157d0200afa8a() {
        assertEval("argv <- list(structure(c(0.00290239468554411, 0.00140705152597282, 0.00182415100508824, 0.000171517300342798, 0.0747454613066297, 0.00103234723292905, 0.000179983318697139, 0.035258608446556, 0.00336847595628205, 0.0640696486471418, 0.0132108002751951, 0.00194778778741288, 0.00351950115137134, 0.00070046832029645, 0.00252844357734999, 0.014372012195495, 0.00923422554274329, 7.64817786749709e-06, 0.00387339857745524, 0.00121246491006704, 0.00624917129689857, 0.00187753034805145, 0.000103002251547081, 0.0136703020254034, 0.000349542811339765, 0.00120367047056318, 0.00194205014408536, 0.00462815827742801, 0.000149291834133955, 0.00193441236645678, 9.00084520363788e-05, 0.0160915134527436, 0.00346675958538611, 0.00481936427422656, 3.13343033856204e-05, 0.0564685345533007, 0.00929771993193244, 0.0103876340982415, 0.0133005891226512, 0.0325989357511189, 0.00228122925969392, 0.0460976655088242, 0.00300363745967821, 0.000271060875811077, 0.0301696315261026, 4.72002631048228e-05, 0.0262321004865233, 0.00594174673473013, 0.00288915040856096, 0.00635277836091399, 0.00569342819072193, 0.0163907345734163, 0.000360581939026215, 0.00023772587191537, 0.0164062036225435, 0.0238391417439454, NaN, 0.0421542087325977, 0.00133954856768466, 0.0113421570571088, 0.0081824228772913, 0.000149291834133955, 0.00162069399881579, 0.0018026229128858, 0.0043164627226381, 0.000407784303899559, 0.00876301280354452, 0.00179253664026376, 0.000416739394150718, 0.014372012195495, 0.000179983318697139, 0.00115986529332945, 0.00377736311314377, 0.00219491136307178, 0.00070046832029645, 0.000522557531637993, 9.86336244510646e-05, 0.0216346027446621, 0.000659639144027202, 0.0137501462695058, 5.91425796335962e-08, 0.0279425064631674, 0.000170828237014775, 0.0042454690355613, 0.0114879015536739, 0.000173346990819198, 0.00138111062254461, 0.00772582941114727, 0.0277947034678616, 0.00892024547056825, 0.0618577709874562, 0.0125790610228498, 0.0277947034678616), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector12_8c045543b2c27854107e4c12f57d7721() {
        assertEval("argv <- list(structure(c(0.164593338447767, 0.182090654313858, NA, 0.484947927602608), .Names = c('(Intercept)', 'x1', 'x2', 'x3')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector13_6e7b2cdcf0c9e1f08df457ed8da0e8ad() {
        assertEval("argv <- list('', 'double'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector14_4022388d9ee34b35dc4cc07a6f404e35() {
        assertEval("argv <- list(structure(c('myTst', 'Package', 'What the package does (short line)', '1.0', '2014-03-17', 'Who wrote it', 'Who to complain to <yourfault@somewhere.net>', 'More about what it does (maybe more than one line)', 'What license is it under?', 'methods'), .Names = c('Package', 'Type', 'Title', 'Version', 'Date', 'Author', 'Maintainer', 'Description', 'License', 'Depends')), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector15_641808a599c15d882621332b563c020b() {
        assertEval("argv <- list(quote(sqrt(abs(`Standardized residuals`))), 'expression'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector16_38dd9022074f812abbf876d00b70ac6f() {
        assertEval("argv <- list(1, 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector17_bce9cbaab33ec90e3982ca66cb3d44cf() {
        assertEval("argv <- list(quote(list(X[[2L]])), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector18_68aec88466f314cf128c4b6d90509e48() {
        assertEval("argv <- list(NA, 'logical'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector19_f43e9760a94a58c683196032eac74b60() {
        assertEval("argv <- list(NULL, 'double'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector2_1c58eef4103f7807e22a56957e97c571() {
        assertEval("argv <- list(structure(character(0), package = character(0), class = structure('ObjectsWithPackage', package = 'methods')), 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector20_f05fa7e354e24d68f1be267ef2a34300() {
        assertEval("argv <- list(quote(list(x = c(1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 11, 12), y = c(73, 73, 70, 74, 75, 115, 105, 107, 124, 107, 116, 125, 102, 144, 178, 149, 177, 124, 157, 128, 169, 165, 186, 152, 181, 139, 173, 151, 138, 181, 152, 188, 173, 196, 180, 171, 188, 174, 198, 172, 176, 162, 188, 182, 182, 141, 191, 190, 159, 170, 163, 197), weight = c(1, rep(0.1, 51)))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector21_02e138c727ac2284c29f7c70e86a3c53() {
        assertEval("argv <- list(NULL, 'integer'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector22_e9af305dace4ba5bc12445ad28babd2b() {
        assertEval("argv <- list(quote(list(ff <- factor(c(1:2, NA, 2), exclude = NULL))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector23_69e3566cb8ac3cb8973858822c4e853d() {
        assertEval("argv <- list(c(-1, 3, 1, 1, 5, 1), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector24_5cdc1fcda32283ce36a502b78d38340d() {
        assertEval("argv <- list(quote(list(y, x1, x2)), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector25_53f65c13af95098541e96e79952cf6f7() {
        assertEval("argv <- list(structure(c(0.005, 50, 550), .Names = c('k', 'g1', 'g2')), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector26_fc2120753af46a7f80df4f69719e978b() {
        assertEval("argv <- list(quote(list(V1 = c('a', 'd e', 'h'), V2 = c('b'', 'f', 'i'), V3 = c('c', 'g', 'j\\nk l m'))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector27_969430d539bc517c7feaf08be0cd11e6() {
        assertEval("argv <- list(NA, 'integer'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector28_9733605b0aff3cd718b2cba7a04819ad() {
        assertEval("argv <- list(c(NA, NaN), 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector29_0b61a2dd41ea5b282f9596b916e435c6() {
        assertEval("argv <- list(c(NA, NaN), 'integer'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector3_7b639093518aafa976e5da469a309b55() {
        assertEval("argv <- list(quote(list(ya, x[rep.int(NA_integer_, nyy), nm.x, drop = FALSE])), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector30_148f0bdece4c46d21a45243cfb1720b3() {
        assertEval("argv <- list(list('a', 'b', 'c'), 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector31_96a7c70d636f9588595c2abd058cb032() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4, .Dimnames = list(c('A', 'B', 'C'), c('D', 'E', 'F', 'G'))), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector32_a21d54f394149e88a72b425a3c0d3e13() {
        assertEval("argv <- list(quote(list(x = c(2:3, NA), y = c(3:4, NA))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector33_7f02cce69ded51871ea4562243a768b3() {
        assertEval("argv <- list(quote(list(cut(Dtimes, '3 months'))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector34_39b5fdb7e9ed8b85f87931734024b0f0() {
        assertEval("argv <- list(quote(list(a = I('abc'), b = I('def\\'gh'))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector35_bad463b7583ef0fb9a4c4165281adf20() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a'), 'double'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector36_e54a44e0e1fb2ab67543ab4e6beb0dda() {
        assertEval("argv <- list(structure(c(0, 0.0123079727211562, 0.00970882237374837, 0.62883302403078, 0.689843718945119, 0.689843718944881, 0.672453157851573, 0.534493702379921, 0.171039529097608, 0.17103952909345, 0.50219835346871, 0.530975095958163, 0.0050966004562048, 0.0106639382954144, 0.811192712625201, 0.0957932531337699), .Names = c('(Intercept)', 'M.userY', 'TempHigh', 'M.userY:TempHigh', 'SoftMedium', 'SoftSoft', 'M.userY:SoftMedium', 'M.userY:SoftSoft', 'TempHigh:SoftMedium', 'TempHigh:SoftSoft', 'M.userY:TempHigh:SoftMedium', 'M.userY:TempHigh:SoftSoft', 'BrandM', 'M.userY:BrandM', 'TempHigh:BrandM', 'M.userY:TempHigh:BrandM')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector37_66d000b2ee4b760692b42fc6e776b031() {
        assertEval("argv <- list(c(-2, -1.95959595959596, -1.91919191919192, -1.87878787878788, -1.83838383838384, -1.7979797979798, -1.75757575757576, -1.71717171717172, -1.67676767676768, -1.63636363636364, -1.5959595959596, -1.55555555555556, -1.51515151515152, -1.47474747474747, -1.43434343434343, -1.39393939393939, -1.35353535353535, -1.31313131313131, -1.27272727272727, -1.23232323232323, -1.19191919191919, -1.15151515151515, -1.11111111111111, -1.07070707070707, -1.03030303030303, -0.98989898989899, -0.949494949494949, -0.909090909090909, -0.868686868686869, -0.828282828282828, -0.787878787878788, -0.747474747474747, -0.707070707070707, -0.666666666666667, -0.626262626262626, -0.585858585858586, -0.545454545454545, -0.505050505050505, -0.464646464646465, -0.424242424242424, -0.383838383838384, -0.343434343434343, -0.303030303030303, -0.262626262626263, -0.222222222222222, -0.181818181818182, -0.141414141414141, -0.101010101010101, -0.0606060606060606, -0.0202020202020201, 0.0202020202020203, 0.060606060606061, 0.101010101010101, 0.141414141414141, 0.181818181818182, 0.222222222222222, 0.262626262626263, 0.303030303030303, 0.343434343434343, 0.383838383838384, 0.424242424242424, 0.464646464646465, 0.505050505050505, 0.545454545454546, 0.585858585858586, 0.626262626262626, 0.666666666666667, 0.707070707070707, 0.747474747474748, 0.787878787878788, 0.828282828282829, 0.868686868686869, 0.909090909090909, 0.94949494949495, 0.98989898989899, 1.03030303030303, 1.07070707070707, 1.11111111111111, 1.15151515151515, 1.19191919191919, 1.23232323232323, 1.27272727272727, 1.31313131313131, 1.35353535353535, 1.39393939393939, 1.43434343434343, 1.47474747474747, 1.51515151515152, 1.55555555555556, 1.5959595959596, 1.63636363636364, 1.67676767676768, 1.71717171717172, 1.75757575757576, 1.7979797979798, 1.83838383838384, 1.87878787878788, 1.91919191919192, 1.95959595959596, 2), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector38_7aaa2111f301458b947f5f450287e0ae() {
        assertEval("argv <- list(integer(0), 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector39_b3ad0403d18d614374f90f68040f352a() {
        assertEval("argv <- list(structure('lightblue', .Names = 'bg'), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector4_940e4f58ea71be465ddf4fb01f636ab6() {
        assertEval("argv <- list(NA_character_, 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector40_54eb0c6e97d2cacbe99e0af5d062ddc3() {
        assertEval("argv <- list(c(NA, NaN), 'logical'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector41_4f49b0ae20115ed8d685c3d0265a7d0e() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'), 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector42_d3e632bb94b088e676d3ac8136508336() {
        assertEval("argv <- list(NA, 'double'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector43_92a9d1327d200ede7313eb484607b72d() {
        assertEval("argv <- list(list('GRID.VP.12'), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector44_9283e342c57c7060c14e47b1c11a79d7() {
        assertEval("argv <- list(NULL, 'logical'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector45_1d7987070272b9d072c0ef406d5adea8() {
        assertEval("argv <- list(structure(1:20, .Tsp = c(1, 20, 1), class = 'ts'), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector47_0e424a3b072d8ed4d28e86484131c778() {
        assertEval("argv <- list(structure(c(0.1, 0.8, 1, 0.5, 0.8, 1, 0, 0.5, 1), .Dim = c(3L, 3L), .Dimnames = list(c('(3.59,4.5]', '(4.5,5.4]', '(5.4,6.31]'), c('ctrl', 'trt1', 'trt2'))), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector48_31dfc011fe7d3700ecda3e636a41e697() {
        assertEval("argv <- list(integer(0), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector49_99dc571063da15ba4a58ca35ec97d1f3() {
        assertEval("argv <- list(structure(c(1L, 1L), .Label = 'registered S3method for $', class = 'factor'), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector5_6d566c7b1dd7159a7bb04b7fefe16017() {
        assertEval("argv <- list(structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector50_a6fe38d94c1c662bac7214b53af52c2e() {
        assertEval("argv <- list('1.3', 'double'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector51_a366816320be8412865ca8de315759d6() {
        assertEval("argv <- list(c(8L, 11L, 14L, 16L, 19L, 4L, 6L, 9L, 15L, NA, 7L, 10L, 20L), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector52_8054ead9a6d6b3bd61e8e2db369f50eb() {
        assertEval("argv <- list(structure(c(5.4278733372119e-07, 0.000257866433233453, NA), .Names = c('x', 'm', 'Residuals')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector53_d69fd12a90e8e09f1c201c45d26054e6() {
        assertEval("argv <- list('1.3', 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector54_c4f9125801103a20de2ccf57a275b64b() {
        assertEval("argv <- list(1L, 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector55_4667174f615debc01d28cb91e017152c() {
        assertEval("argv <- list(NULL, 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector56_ff7eee66728f5134d1531ae9e5151258() {
        assertEval("argv <- list(quote(list(expand.grid(Hair = lab$Hair, Eye = lab$Eye, Sex = lab$Sex, stringsAsFactors = TRUE), Fr = as.vector(HairEyeColor))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector57_74bb53e8b04fa97bfe2d982e1e8feee8() {
        assertEval("argv <- list(FALSE, 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector59_9511156e20adbcb6e12a269c51acf406() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'), 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector6_5c207f02b985422e1ff0f8f2ace0a1fa() {
        assertEval("argv <- list(structure(list(a1 = 1:3, a2 = 4:6, a3 = 3.14159265358979, a4 = c('a', 'b', 'c')), .Names = c('a1', 'a2', 'a3', 'a4')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector60_434430ee49ebd64f992ffda10a16e064() {
        assertEval("argv <- list(1L, 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector61_f2fcfcf4db960a5ba9838cbb61e8e2f7() {
        assertEval("argv <- list(c('The C and R code has been reformatted for legibility.', 'The old compatibility function rpconvert() has been removed.', 'The cross-validation functions allow for user interrupt at the end\\nof evaluating each split.', 'Variable Reliability in data set car90 is corrected to be an\\nordered factor, as documented.', 'Surrogate splits are now considered only if they send two or more\\ncases _with non-zero weight_ each way.  For numeric/ordinal\\nvariables the restriction to non-zero weights is new: for\\ncategorical variables this is a new restriction.', 'Surrogate splits which improve only by rounding error over the\\ndefault split are no longer returned.  Where weights and missing\\nvalues are present, the splits component for some of these was not\\nreturned correctly.', 'A fit of class \\'rpart\\' now contains a component for variable\\n‘importance’, which is reported by the summary() method.', 'The text() method gains a minlength argument, like the labels()\\nmethod.  This adds finer control: the default remains pretty =\\nNULL, minlength = 1L.', 'The handling of fits with zero and fractional weights has been\\ncorrected: the results may be slightly different (or even\\nsubstantially different when the proportion of zero weights is\\nlarge).', 'Some memory leaks have been plugged.', 'There is a second vignette, longintro.Rnw, a version of the\\noriginal Mayo Tecnical Report on rpart.', 'Added dataset car90, a corrected version of the S-PLUS dataset\\ncar.all (used with permission).', 'This version does not use paste0{} and so works with R 2.14.x.', 'Merged in a set of Splus code changes that had accumulated at Mayo\\nover the course of a decade. The primary one is a change in how\\nindexing is done in the underlying C code, which leads to a major\\nspeed increase for large data sets.  Essentially, for the lower\\nleaves all our time used to be eaten up by bookkeeping, and this\\nwas replaced by a different approach.  The primary routine also\\nuses .Call{} so as to be more memory efficient.', 'The other major change was an error for asymmetric loss matrices,\\nprompted by a user query.  With L=loss asymmetric, the altered\\npriors were computed incorrectly - they were using L' instead of L.\\nUpshot - the tree would not not necessarily choose optimal splits\\nfor the given loss matrix.  Once chosen, splits were evaluated\\ncorrectly.  The printed “improvement” values are of course the\\nwrong ones as well.  It is interesting that for my little test\\ncase, with L quite asymmetric, the early splits in the tree are\\nunchanged - a good split still looks good.', 'Add the return.all argument to xpred.rpart().', 'Added a set of formal tests, i.e., cases with known answers to\\nwhich we can compare.', 'Add a usercode vignette, explaining how to add user defined\\nsplitting functions.', 'The class method now also returns the node probability.', 'Add the stagec data set, used in some tests.', 'The plot.rpart routine needs to store a value that will be visible\\nto the rpartco routine at a later time.  This is now done in an\\nenvironment in the namespace.', 'Force use of registered symbols in R >= 2.16.0', 'Update Polish translations.', 'Work on message formats.', 'Add Polish translations', 'rpart, rpart.matrix: allow backticks in formulae.', 'tests/backtick.R: regession test', 'src/xval.c: ensure unused code is not compiled in.', 'Change description of margin in ?plot.rpart as suggested by Bill\\nVenables.'), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector63_8cfe187b3c710ba9e405c37af5d5825d() {
        assertEval("argv <- list(2, 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector64_eed65ad16c886bf6e267c8cd02185c19() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector66_adb214adde85e83927d547331de5e0cd() {
        assertEval("argv <- list(3.18309886183776e-301, 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector67_76929df5f8f314aff439af51175fb2c0() {
        assertEval("argv <- list(quote(list(a = 1:3, b = letters[1:3])), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector68_2e3ecb8a7fad3ad42219fb4c3c515f1b() {
        assertEval("argv <- list(NA, 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector69_0013804c7331698e824c0b96b8f4ea76() {
        assertEval("argv <- list(c(200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 1e+05, 2e+05, 5e+05), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector7_e28d9fbf78037c44d738f3d43d251045() {
        assertEval("argv <- list(quote(list(ii = 1:10, xx = pi * -3:6)), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector70_61c460361f3764e904cc6b61551e05b6() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L)), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector71_9db988c90976aaa6a4b78d004a0bd5a5() {
        assertEval("argv <- list(structure(c(2.2250738585072e-308, 1.79769313486232e+308), .Names = c('double.xmin', 'double.xmax')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector72_fdae4e4aff642ddda6cf53a710312b63() {
        assertEval("argv <- list(structure(1.6, class = 'object_size'), 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector73_faf54fb5fd22ae70e95ee6c7d865dba7() {
        assertEval("argv <- list(structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor'), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector74_2396d18cb6c4e78082edadd5eeb8d5cd() {
        assertEval("argv <- list(FALSE, 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector75_8404b961cc1eef89fae8a8981a56db6b() {
        assertEval("argv <- list(3.14159265358979, 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector76_82c4e8b63b58404186231e6e216abf15() {
        assertEval("argv <- list(structure(list(c0 = structure(character(0), class = 'AsIs')), .Names = 'c0', row.names = character(0), class = 'data.frame'), 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector77_b27cf581d306a8c0554aa3b25343464c() {
        assertEval("argv <- list(structure(list(), .Dim = 0L), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector8_42df723da958cee355c79b31755bc315() {
        assertEval("argv <- list(c(-1L, -2L), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector80_bf5b8d780adfa735092f285288f86e91() {
        assertEval("argv <- list(structure('1', .Tsp = c(1, 1, 1), class = 'ts'), 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector81_791159cf6f1ff1daba0c82380eb9822e() {
        assertEval("argv <- list('diff', 'symbol'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector9_7676f2a631f4a36e921e0abfa4f463f7() {
        assertEval("argv <- list(quote(list(x = 1:100, z = 1:100 + rnorm(100, 10))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinatan_testatan1_859319dc80e97d602300e4b86640c26f() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Names = catan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatan_testatan2_7b436c5948dbb30843be0e1a403ddeba() {
        assertEval("argv <- list(c(-Inf, Inf));atan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatan_testatan3_12cb5a85d0e92250b0e18fc3b3776819() {
        assertEval("argv <- list(c(0+2i, 0.0001+2i, 0-2i, 0-2.0001i));atan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatan_testatan4_dec9b325a2c6f8f20a957e2b505d0878() {
        assertEval("argv <- list(c(1.24374261655622, 0.0991858914142951, -2.20142053912221, 2.32991997369528, -1.81371893641746, -2.23549697963848, 1.2062731926336, 0.766855355229013, 2.22205301460314, 3.00826513920171, 2.93956891545304, -0.947558891656842, -1.25682397176386, -0.535715772527751, 3.41845348048775, -0.760770219081429, -1.17237584279591, 5.89658401779422, 4.83929989447739, 1.29127425323328, 5.07843950370286, -0.812083060727, 0.688022442899665, 0.51448669913956, -0.286066209156396, -0.571116279122374, 3.99296063466557, 0.543926802451157, 10.5876703046153, -0.012750328000196, 8.35693622233428, -0.357306991432726, 4.27528487251696, 6.30217771913028, 3.89678155886045, -1.57897283794064, -2.06992463735805, 4.67986125893053, -1.26868871126894, 0.0676543743900469, 3.24354507548999, 0.242170808041476, 3.39848727561001, -0.616002138333813, 4.61847372836275, 1.27216752717472, -0.280512588403515, -0.898619929521427, -1.39985243813315, -1.28443284360156, 2.63389613373223, 6.30217771913028, 1.87342709084826, -1.09797072834446, 5.71334116764491, 13.1134896151196, 3.66949044715118, -1.08958378903637, 0.8976473859976, 0.169792654329705, 2.15662832698598, 2.85593682526588, 5.94427279099212, 3.06088249587567, 5.71334116764491, 2.35752884553298, -1.60367725265451, 0.275679954649422, 2.06745683332381, -1.66968494417226, 1.25318650417107, 10.8387072712787, 3.66949044715118, 2.11807401040277, 0.289193352142719, -1.16420273509137, 0.750915507554624, 10.8387072712787, 2.83949743554363, -1.49627880689407, 4.61847372836275, 2.52897165841403, 2.99093712861336, -1.55047774121799, 1.45900279946893, -0.889632055927773, 3.35896467002158, -1.30399295303346, 3.06088249587567, -0.951966998076272, 1.9567142584347, 4.83929989447739, 1.88517906265842, -0.640640247845954, 7.94407524992589, 2.7907339351624, 1.2062731926336, -0.037046093389687, 3.00826513920171, -0.49471891801084, 0.131065830042764, 0.742978487169905, 4.27528487251696, 2.82315118733936, 3.18752185714054, -0.335573516981329, 10.8387072712787, 0.26894691754398, 0.847902962488109, 9.94387770885966, 2.75867688212949, 1.46917954755241, 2.4562951432938, -0.308174402320662, 10.3567386812681, 2.30257280126274, -0.308174402320662, 1.41865102155398, 0.750915507554624, 0.182817981601453, 2.48514643462545, -0.447890214901362, 6.24824895102907, -0.489553106263216, 2.37143299336077, 4.71105188801319, 5.94427279099212, -0.453131097523732, -0.410935024130492, 1.36899222090483, 2.44197697450093, 0.831510275829206, -0.235694520704707, 1.6370875838366, -0.235694520704707, 0.688022442899665, 0.56620571694393, 0.0865319014350673, 0.965336240640277, 2.4562951432938, 0.442174515567164, 2.16959511326347, 5.84967070625675, 0.0802256582898436, 0.807094572229046, 0.831510275829206, 3.06088249587567, 7.84947316519051, 0.939766456519272, 2.08002811722361, 0.169792654329705, 1.16011052636907, 2.74278094610367, 3.18752185714054, 1.03465140856114, 0.742978487169905, 1.38875329192844, 2.7907339351624, 0.649399307990452, 0.588658009946432, 1.62630213168625, 1.37885583765837, 3.4588052584027, 0.378607817368726, 1.64791350682152, 2.55856273925465, 1.11467486151704, 2.75867688212949, 1.44886182210277, 1.29127425323328, 0.872667965105639, 2.51428915807333, 0.603723867107512, 1.27216752717472, 1.33960210165592, 2.77466088473214, 2.68005879999676, 3.39848727561001, 1.61555684891069, 1.30087527736898, 1.45900279946893, 0.856134366332116, 1.58355905227488, 1.37885583765837, 1.00846268026794, 1.44886182210277, 1.72485420222661, 4.19550729872178, 1.43875636487019, 1.60485143740593, 5.07843950370286, 3.69143051554687, 2.13086828897653, 1.61555684891069, 2.13086828897653, 1.90882759744288, 1.51024935267055, 1.54143998175321, 3.6046538963397, 5.15057088795887, 5.99276309359934, 1.94466787312459, 2.44197697450093, 2.00540917116861, 4.32972243262905, 2.14371955784334, 1.9567142584347, 1.98095898169889, 2.88909931785647, 1.80390312212468, 2.18262044053522, 2.69561196483408, 4.71105188801319, 10.3567386812681, 2.16959511326347, 2.5884604688802, 2.72697211153424, 2.31621398549464, 2.85593682526588, 2.51428915807333, 2.42772951300254, 4.04227987136562, 2.64920176692422, 2.60352632604128, 4.32972243262905, 2.87247042403941, 2.82315118733936));atan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatan_testatan5_651c120ccad79f109880b18b818c9be0() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));atan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatan_testatan6_e949562583eb064fc97cceca512f8ed4() {
        assertEval("argv <- list(-1.46941282670977e-16);atan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan21_ae2e63ba01b311a54346821d48b14d33() {
        assertEval("argv <- list(structure(0.142857142857143, .Names = 'Var2'), structure(1.75510204081633, .Names = 'Var1')); .Internal(atan2(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan22_68106313fd1758e602266636ed644cf6() {
        assertEval("argv <- list(structure(-0.224489795918367, .Names = 'Var2'), structure(-0.816326530612245, .Names = 'Var1')); .Internal(atan2(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan23_1691a85681428b29f2b8e93909606e43() {
        assertEval("argv <- list(c(-1.95681154249341, -2.88854075894443, -2.84850921846233, -2.14635417317387, -1.72790445779804, -0.92649412488672, -0.261537463816701, 0.948205247045638, 1.0990096500205, 2.09024037060933, 2.90928417418961, 4.00425294069879, 1.70515935701163), c(-3.2406391957027, -2.61163262017643, -0.21977838696678, 1.24931893031091, 1.6032898858835, 2.16902716372255, 2.15792786802985, 2.10075226013806, 2.04989923648162, 1.49269068253165, 0.515893014329757, -2.61745072267338, -4.64929811590859)); .Internal(atan2(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan24_c446d53bd8c4c893f98362165043ce44() {
        assertEval("argv <- list(0+1i, 0+0i); .Internal(atan2(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan25_e61d7a90cbac83910e9739b5f4bce322() {
        assertEval("argv <- list(2.43782895752771e-05, 0.999996523206508); .Internal(atan2(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan26_2faa23c0efa0572ba47394d813dd43b3() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(atan2(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinatanh_testatanh1_b6e397b36295a6744d6d5a94d225288e() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));atanh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatanh_testatanh2_2c9a509396fa6fd1bf0c79240856d8f7() {
        assertEval("argv <- list(c(0.667355731370168, 0.757545006911892, 0.835315653735585, 0.984260691393257, 0.997724361757832, 0.998320334761744, 0.995857200407461, 0.978447456936914, 0.924289918318784, 0.794303899816803, 0.772144244057747, 0.886598050753707, 0.927287003572071, 0.862971883028345, 0.864426227271356, 0.927240697865085, 0.892356439729065, 0.753876685479294, 0.834371238466667, 0.856663357154979, 0.836217049107607, 0.820080611345367, 0.881122397467922, 0.964328668319385, 0.870112695225674, 0.897689370465451, 0.872889563044137, 0.716354206299899, 0.634385015212608, 0.77586178284932, 0.639202570327528, 0.710504816816848, 0.825388608284517, 0.812993921221196, 0.705406278672692, 0.577944207218662));atanh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatanh_testatanh3_4d272f9885ca71b427cfa2ef95e1a057() {
        assertEval("argv <- list(-0.133190890463189);atanh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinatanh_testatanh4_654a64df970645a5797c9f8d6ac2db07() {
        assertEval("argv <- list(c(2+0i, 2-0.0001i, -2+0i, -2+0.0001i));atanh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr1_61ca8f753c19cebfd2d66dd0acc21339() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1), .Dim = c(32L, 23L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32'), c('(Intercept)', 'HairBrown', 'HairRed', 'HairBlond', 'EyeBlue', 'EyeHazel', 'EyeGreen', 'SexFemale', 'HairBrown:EyeBlue', 'HairRed:EyeBlue', 'HairBlond:EyeBlue', 'HairBrown:EyeHazel', 'HairRed:EyeHazel', 'HairBlond:EyeHazel', 'HairBrown:EyeGreen', 'HairRed:EyeGreen', 'HairBlond:EyeGreen', 'HairBrown:SexFemale', 'HairRed:SexFemale', 'HairBlond:SexFemale', 'EyeBlue:SexFemale', 'EyeHazel:SexFemale', 'EyeGreen:SexFemale')), assign = c(0L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L), contrasts = structure(list(Hair = 'contr.treatment',     Eye = 'contr.treatment', Sex = 'contr.treatment'), .Names = c('Hair', 'Eye', 'Sex'))), 'assign');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr10_acf8f061727bb70d2da211edd7c1edcd() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), terms = quote(Employed ~ GNP.deflator + GNP + Unemployed +     Armed.Forces + Population + Year), row.names = 1947:1962, class = 'data.frame'), 'terms');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr11_e0efaef4423810ebcfa8e87aceb80628() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0), .Dim = c(12L, 3L), .Dimnames = list(c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), c('(Intercept)', 'M.userY', 'TempLow')), assign = 0:2, contrasts = structure(list(M.user = 'contr.treatment', Temp = 'contr.treatment'), .Names = c('M.user', 'Temp'))), 'contrasts');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr12_0bb3a57aa4ea7975cc40cd2e2eb42209() {
        assertEval("argv <- list(structure(list(`1000/MPG.city` = c(40, 55.5555555555556, 50, 52.6315789473684, 45.4545454545455, 45.4545454545455, 52.6315789473684, 62.5, 52.6315789473684, 62.5, 62.5, 40, 40, 52.6315789473684, 47.6190476190476, 55.5555555555556, 66.6666666666667, 58.8235294117647, 58.8235294117647, 50, 43.4782608695652, 50, 34.4827586206897, 43.4782608695652, 45.4545454545455, 58.8235294117647, 47.6190476190476, 55.5555555555556, 34.4827586206897, 50, 32.258064516129, 43.4782608695652, 45.4545454545455, 45.4545454545455, 41.6666666666667, 66.6666666666667, 47.6190476190476, 55.5555555555556, 21.7391304347826, 33.3333333333333, 41.6666666666667, 23.8095238095238, 41.6666666666667, 34.4827586206897, 45.4545454545455, 38.4615384615385, 50, 58.8235294117647, 55.5555555555556, 55.5555555555556, 58.8235294117647, 55.5555555555556, 34.4827586206897, 35.7142857142857, 38.4615384615385, 55.5555555555556, 58.8235294117647, 50, 52.6315789473684, 43.4782608695652, 52.6315789473684, 34.4827586206897, 55.5555555555556, 34.4827586206897, 41.6666666666667, 58.8235294117647, 47.6190476190476, 41.6666666666667, 43.4782608695652, 55.5555555555556, 52.6315789473684, 43.4782608695652, 32.258064516129, 43.4782608695652, 52.6315789473684, 52.6315789473684, 52.6315789473684, 50, 35.7142857142857, 30.3030303030303, 40, 43.4782608695652, 25.6410256410256, 31.25, 40, 45.4545454545455, 55.5555555555556, 40, 58.8235294117647, 47.6190476190476, 55.5555555555556, 47.6190476190476, 50), Weight = c(2705L, 3560L, 3375L, 3405L, 3640L, 2880L, 3470L, 4105L, 3495L, 3620L, 3935L, 2490L, 2785L, 3240L, 3195L, 3715L, 4025L, 3910L, 3380L, 3515L, 3085L, 3570L, 2270L, 2670L, 2970L, 3705L, 3080L, 3805L, 2295L, 3490L, 1845L, 2530L, 2690L, 2850L, 2710L, 3735L, 3325L, 3950L, 1695L, 2475L, 2865L, 2350L, 3040L, 2345L, 2620L, 2285L, 2885L, 4000L, 3510L, 3515L, 3695L, 4055L, 2325L, 2440L, 2970L, 3735L, 2895L, 2920L, 3525L, 2450L, 3610L, 2295L, 3730L, 2545L, 3050L, 4100L, 3200L, 2910L, 2890L, 3715L, 3470L, 2640L, 2350L, 2575L, 3240L, 3450L, 3495L, 2775L, 2495L, 2045L, 2490L, 3085L, 1965L, 2055L, 2950L, 3030L, 3785L, 2240L, 3960L, 2985L, 2810L, 2985L, 3245L), Cylinders = structure(c(2L, 4L, 4L, 4L, 2L, 2L, 4L, 4L, 4L, 5L, 5L, 2L, 2L, 4L, 2L, 4L, 4L, 5L, 5L, 4L, 2L, 4L, 2L, 2L, 2L, 4L, 2L, 4L, 2L, 4L, 2L, 2L, 2L, 2L, 2L, 4L, 4L, 5L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 5L, 4L, 4L, 4L, 5L, 2L, 2L, 2L, 4L, 6L, 2L, 4L, 2L, 4L, 2L, 4L, 2L, 2L, 4L, 4L, 2L, 2L, 4L, 4L, 2L, 2L, 2L, 4L, 4L, 4L, 2L, 2L, 1L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 4L, 2L, 3L), .Label = c('3', '4', '5', '6', '8', 'rotary'), class = 'factor'), Type = structure(c(4L, 3L, 1L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 3L, 1L, 1L, 5L, 3L, 6L, 6L, 2L, 5L, 2L, 1L, 2L, 4L, 4L, 1L, 6L, 3L, 5L, 4L, 2L, 4L, 4L, 1L, 5L, 5L, 6L, 3L, 2L, 4L, 5L, 5L, 4L, 1L, 4L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 2L, 4L, 4L, 1L, 6L, 5L, 1L, 3L, 5L, 3L, 4L, 3L, 4L, 1L, 6L, 3L, 1L, 3L, 6L, 2L, 5L, 4L, 1L, 5L, 3L, 2L, 1L, 4L, 4L, 4L, 1L, 4L, 4L, 5L, 3L, 6L, 4L, 6L, 1L, 5L, 1L, 3L), .Label = c('Compact', 'Large', 'Midsize', 'Small', 'Sporty', 'Van'), class = 'factor'), EngineSize = c(1.8, 3.2, 2.8, 2.8, 3.5, 2.2, 3.8, 5.7, 3.8, 4.9, 4.6, 2.2, 2.2, 3.4, 2.2, 3.8, 4.3, 5, 5.7, 3.3, 3, 3.3, 1.5, 2.2, 2.5, 3, 2.5, 3, 1.5, 3.5, 1.3, 1.8, 2.3, 2.3, 2, 3, 3, 4.6, 1, 1.6, 2.3, 1.5, 2.2, 1.5, 1.8, 1.5, 2, 4.5, 3, 3, 3.8, 4.6, 1.6, 1.8, 2.5, 3, 1.3, 2.3, 3.2, 1.6, 3.8, 1.5, 3, 1.6, 2.4, 3, 3, 2.3, 2.2, 3.8, 3.8, 1.8, 1.6, 2, 3.4, 3.4, 3.8, 2.1, 1.9, 1.2, 1.8, 2.2, 1.3, 1.5, 2.2, 2.2, 2.4, 1.8, 2.5, 2, 2.8, 2.3, 2.4), DriveTrain = structure(c(2L, 2L, 2L, 2L, 3L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 1L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 1L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 3L, 2L, 3L, 2L, 2L, 2L, 1L, 3L, 3L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 3L, 2L), .Label = c('4WD', 'Front', 'Rear'), class = 'factor')), .Names = c('1000/MPG.city', 'Weight', 'Cylinders', 'Type', 'EngineSize', 'DriveTrain'), terms = quote(1000/MPG.city ~ Weight + Cylinders + Type + EngineSize + DriveTrain), row.names = c(NA, 93L), class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr13_89046959ae7c784cffcbd22083886607() {
        assertEval("argv <- list(quote(cbind(X, M) ~ 1), 'term.labels');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr14_f2c4bd8ded4ad8b9bea31309ac90e32f() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), 'levels');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr15_82470dd8b292872e1b00a1b9a37b732b() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1), Deviance = c(5.65604443125997, 8.44399377410362), AIC = c(71.3540021461976, 72.1419514890413)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user:Temp'), class = c('anova', 'data.frame'), heading = c('Single term deletions', '\\nModel:', 'cbind(X, M) ~ M.user + Temp + M.user:Temp')), 'row.names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr16_dfdbb5ce8c73fb27f16b81d13908d945() {
        assertEval("argv <- list(structure(list(`1000/MPG.city` = c(40, 55.5555555555556, 50, 52.6315789473684, 45.4545454545455, 45.4545454545455, 52.6315789473684, 62.5, 52.6315789473684, 62.5, 62.5, 40, 40, 52.6315789473684, 47.6190476190476, 55.5555555555556, 66.6666666666667, 58.8235294117647, 58.8235294117647, 50, 43.4782608695652, 50, 34.4827586206897, 43.4782608695652, 45.4545454545455, 58.8235294117647, 47.6190476190476, 55.5555555555556, 34.4827586206897, 50, 32.258064516129, 43.4782608695652, 45.4545454545455, 45.4545454545455, 41.6666666666667, 66.6666666666667, 47.6190476190476, 55.5555555555556, 21.7391304347826, 33.3333333333333, 41.6666666666667, 23.8095238095238, 41.6666666666667, 34.4827586206897, 45.4545454545455, 38.4615384615385, 50, 58.8235294117647, 55.5555555555556, 55.5555555555556, 58.8235294117647, 55.5555555555556, 34.4827586206897, 35.7142857142857, 38.4615384615385, 55.5555555555556, 58.8235294117647, 50, 52.6315789473684, 43.4782608695652, 52.6315789473684, 34.4827586206897, 55.5555555555556, 34.4827586206897, 41.6666666666667, 58.8235294117647, 47.6190476190476, 41.6666666666667, 43.4782608695652, 55.5555555555556, 52.6315789473684, 43.4782608695652, 32.258064516129, 43.4782608695652, 52.6315789473684, 52.6315789473684, 52.6315789473684, 50, 35.7142857142857, 30.3030303030303, 40, 43.4782608695652, 25.6410256410256, 31.25, 40, 45.4545454545455, 55.5555555555556, 40, 58.8235294117647, 47.6190476190476, 55.5555555555556, 47.6190476190476, 50), Weight = c(2705L, 3560L, 3375L, 3405L, 3640L, 2880L, 3470L, 4105L, 3495L, 3620L, 3935L, 2490L, 2785L, 3240L, 3195L, 3715L, 4025L, 3910L, 3380L, 3515L, 3085L, 3570L, 2270L, 2670L, 2970L, 3705L, 3080L, 3805L, 2295L, 3490L, 1845L, 2530L, 2690L, 2850L, 2710L, 3735L, 3325L, 3950L, 1695L, 2475L, 2865L, 2350L, 3040L, 2345L, 2620L, 2285L, 2885L, 4000L, 3510L, 3515L, 3695L, 4055L, 2325L, 2440L, 2970L, 3735L, 2895L, 2920L, 3525L, 2450L, 3610L, 2295L, 3730L, 2545L, 3050L, 4100L, 3200L, 2910L, 2890L, 3715L, 3470L, 2640L, 2350L, 2575L, 3240L, 3450L, 3495L, 2775L, 2495L, 2045L, 2490L, 3085L, 1965L, 2055L, 2950L, 3030L, 3785L, 2240L, 3960L, 2985L, 2810L, 2985L, 3245L), Cylinders = structure(c(2L, 4L, 4L, 4L, 2L, 2L, 4L, 4L, 4L, 5L, 5L, 2L, 2L, 4L, 2L, 4L, 4L, 5L, 5L, 4L, 2L, 4L, 2L, 2L, 2L, 4L, 2L, 4L, 2L, 4L, 2L, 2L, 2L, 2L, 2L, 4L, 4L, 5L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 5L, 4L, 4L, 4L, 5L, 2L, 2L, 2L, 4L, 6L, 2L, 4L, 2L, 4L, 2L, 4L, 2L, 2L, 4L, 4L, 2L, 2L, 4L, 4L, 2L, 2L, 2L, 4L, 4L, 4L, 2L, 2L, 1L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 4L, 2L, 3L), .Label = c('3', '4', '5', '6', '8', 'rotary'), class = 'factor'), Type = structure(c(4L, 3L, 1L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 3L, 1L, 1L, 5L, 3L, 6L, 6L, 2L, 5L, 2L, 1L, 2L, 4L, 4L, 1L, 6L, 3L, 5L, 4L, 2L, 4L, 4L, 1L, 5L, 5L, 6L, 3L, 2L, 4L, 5L, 5L, 4L, 1L, 4L, 4L, 5L, 3L, 3L, 3L, 3L, 3L, 2L, 4L, 4L, 1L, 6L, 5L, 1L, 3L, 5L, 3L, 4L, 3L, 4L, 1L, 6L, 3L, 1L, 3L, 6L, 2L, 5L, 4L, 1L, 5L, 3L, 2L, 1L, 4L, 4L, 4L, 1L, 4L, 4L, 5L, 3L, 6L, 4L, 6L, 1L, 5L, 1L, 3L), .Label = c('Compact', 'Large', 'Midsize', 'Small', 'Sporty', 'Van'), class = 'factor'), EngineSize = c(1.8, 3.2, 2.8, 2.8, 3.5, 2.2, 3.8, 5.7, 3.8, 4.9, 4.6, 2.2, 2.2, 3.4, 2.2, 3.8, 4.3, 5, 5.7, 3.3, 3, 3.3, 1.5, 2.2, 2.5, 3, 2.5, 3, 1.5, 3.5, 1.3, 1.8, 2.3, 2.3, 2, 3, 3, 4.6, 1, 1.6, 2.3, 1.5, 2.2, 1.5, 1.8, 1.5, 2, 4.5, 3, 3, 3.8, 4.6, 1.6, 1.8, 2.5, 3, 1.3, 2.3, 3.2, 1.6, 3.8, 1.5, 3, 1.6, 2.4, 3, 3, 2.3, 2.2, 3.8, 3.8, 1.8, 1.6, 2, 3.4, 3.4, 3.8, 2.1, 1.9, 1.2, 1.8, 2.2, 1.3, 1.5, 2.2, 2.2, 2.4, 1.8, 2.5, 2, 2.8, 2.3, 2.4), DriveTrain = structure(c(2L, 2L, 2L, 2L, 3L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 1L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 1L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 3L, 2L, 3L, 2L, 2L, 2L, 1L, 3L, 3L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 3L, 2L), .Label = c('4WD', 'Front', 'Rear'), class = 'factor')), .Names = c('1000/MPG.city', 'Weight', 'Cylinders', 'Type', 'EngineSize', 'DriveTrain'), terms = quote(1000/MPG.city ~ Weight + Cylinders + Type + EngineSize + DriveTrain), row.names = c(NA, 93L), class = 'data.frame'), 'na.action');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr17_23228c504a51c4f2373362d0208d59f4() {
        assertEval("argv <- list(structure(c(0.5, 0.5, 0.5, 0.5), gradient = structure(c(NaN, NaN, NaN, NaN), .Dim = c(4L, 1L), .Dimnames = list(NULL, 'L75'))), 'gradient');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr18_87f28ccdb8c7cc7904ecda02b723f8c3() {
        assertEval("argv <- list(c(NA, NA, '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/histogram.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/histogram.R'), 'levels');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr19_cae0191a553e35fa24cc8fd4b62bbfad() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats'), frow = c(2418L, 2418L, 2418L, 2421L, 2422L, 2424L), lrow = c(2418L, 2418L, 2418L, 2421L, 2426L, 2424L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 6L), class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr2_46b9f3dc9082f361cfacf2980af26745() {
        assertEval("argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'), Soft = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L), .Label = c('Hard', 'Medium', 'Soft'), class = 'factor')), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), terms = quote(cbind(X, M) ~ M.user + Temp + Soft), row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), class = 'data.frame'), 'terms');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr20_7e3bce56da8d276dd0bba39ef696d0d5() {
        assertEval("argv <- list(structure(c('[[.bibentry', '[[.data.frame', '[[.Date', '[[.dendrogram', '[[.factor', '[[.numeric_version', '[[.pdf_doc', '[[.person', '[[.POSIXct'), class = 'MethodsFunction', info = structure(list(visible = c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE), from = structure(c(9L, 2L, 2L, 9L, 2L, 2L, 9L, 9L, 2L), .Label = c('CheckExEnv', 'package:base', 'package:datasets', 'package:graphics', 'package:grDevices', 'package:methods', 'package:stats', 'package:utils', 'registered S3method for [['), class = 'factor')), .Names = c('visible', 'from'), row.names = c('[[.bibentry', '[[.data.frame', '[[.Date', '[[.dendrogram', '[[.factor', '[[.numeric_version', '[[.pdf_doc', '[[.person', '[[.POSIXct'), class = 'data.frame')), 'info');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr21_568d1ba9ce0fcabda4b713dcf9088740() {
        assertEval("argv <- list(structure(list(ID = c(63L, 63L, 63L, 63L, 63L), Age = c(30L, 30L, 30L, 30L, 30L), OME = structure(c(3L, 3L, 3L, 3L, 3L), .Label = c('N/A', 'high', 'low'), class = 'factor'), Loud = c(35L, 40L, 45L, 50L, 55L), Noise = structure(c(2L, 2L, 2L, 2L, 2L), .Label = c('coherent', 'incoherent'), class = 'factor'), Correct = c(1L, 1L, 1L, 3L, 1L), Trials = c(2L, 1L, 1L, 3L, 1L), UID = c(67L, 67L, 67L, 67L, 67L), UIDn = c(67.1, 67.1, 67.1, 67.1, 67.1)), .Names = c('ID', 'Age', 'OME', 'Loud', 'Noise', 'Correct', 'Trials', 'UID', 'UIDn'), row.names = c(635L, 639L, 643L, 647L, 651L), class = 'data.frame'), 'na.action');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr22_fac97e9b6b1519c4963ce01d2437a0b5() {
        assertEval("argv <- list(structure(c(0, 3, 3, 0), .Dim = c(2L, 2L), counts = structure(c(0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 2L, 2L, 0L), .Dim = c(2L, 2L, 3L), .Dimnames = list(NULL, NULL, c('ins', 'del', 'sub'))), trafos = structure(c('MMMMMM', 'SMMMSMD', 'SMMMSMI', 'MMMMMMM'), .Dim = c(2L, 2L))), 'trafos');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr23_6c484ce28a8ca024d92e01f591414c95() {
        assertEval("argv <- list(structure(list(y = c(73, 73, 70, 74, 75, 115, 105, 107, 124, 107, 116, 125, 102, 144, 178, 149, 177, 124, 157, 128, 169, 165, 186, 152, 181, 139, 173, 151, 138, 181, 152, 188, 173, 196, 180, 171, 188, 174, 198, 172, 176, 162, 188, 182, 182, 141, 191, 190, 159, 170, 163, 197), x = c(1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 11, 12), Ta = 1, Tb = 12), .Names = c('y', 'x', 'Ta', 'Tb'), terms = quote(~y +     x)), 'terms');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr24_d5d39bccda301a2077ee2742a6caed29() {
        assertEval("argv <- list(structure(c(804.851443135267, 3.3994157758076, 28.3699038266834, 1.84375046462573), .Dim = c(2L, 2L), .Dimnames = list(c('(Intercept)', 'day'), c('Variance', 'StdDev')), formStr = 'pdLogChol(day)', corr = structure(c('(Intr)', '-0.555'), .Dim = c(2L, 1L), .Dimnames = list(c('(Intercept)', 'day'), 'Corr'))), which = 'corr');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr25_3d3e3a9a8bcf64b85fbaabfa62398a2b() {
        assertEval("argv <- list(structure(c(0.0319339476375948, 0.0319339476375948, 0.114405269727263, 0.114405269727263, 0.211060625790557, 0.211060625790557, 0.375868556643391, 0.375868556643391, 0.631987388405009, 0.631987388405009, 0.977771587733117, 0.977771587733117, 1.3655287091085, 1.3655287091085, 1.71941659701549, 1.71941659701549), gradient = structure(c(0.013379193963099, 0.013379193963099, 0.0479317593757097, 0.0479317593757097, 0.0884269330704518, 0.0884269330704518, 0.157475623779182, 0.157475623779182, 0.264780350605592, 0.264780350605592, 0.409651693312349, 0.409651693312349, 0.572108204994814, 0.572108204994814, 0.720374706438093, 0.720374706438093, -0.0298119721009501, -0.0298119721009501, -0.103062799493893, -0.103062799493893, -0.182048260790464, -0.182048260790464, -0.299644491810901, -0.299644491810901, -0.439656344689613, -0.439656344689613, -0.546177195068236, -0.546177195068236, -0.552869486814534, -0.552869486814534, -0.454930857067767, -0.454930857067767), .Dim = c(16L, 2L), .Dimnames = list(NULL, c('Asym', 'xmid')))), 'gradient');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr26_e37faddf4364d19525c0ff77d3b56d9a() {
        assertEval("argv <- list(structure(list(structure(list(structure('Update varFunc Object', Rd_tag = 'TEXT')), Rd_tag = '\\\\title'), structure(list(structure('update.varFunc', Rd_tag = 'VERB')), Rd_tag = '\\\\name'), structure(list(structure('update.varExp', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('update.varFunc', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('update.varComb', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('update.varConstPower', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('update.varExpon', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('update.varPower', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('models', Rd_tag = 'TEXT')), Rd_tag = '\\\\keyword'), structure(list(structure('\\n', Rd_tag = 'TEXT'), structure('  If the ', Rd_tag = 'TEXT'), structure(list(structure('formula(object)', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' includes a ', Rd_tag = 'TEXT'), structure(list(structure('\\'.\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'),         structure(' term, representing\\n', Rd_tag = 'TEXT'), structure('  a fitted object, the variance covariate needs to be updated upon\\n', Rd_tag = 'TEXT'), structure('  completion of an optimization cycle (in which the variance function\\n', Rd_tag = 'TEXT'), structure('  weights are kept fixed). This method function allows a reevaluation of\\n', Rd_tag = 'TEXT'), structure('  the variance covariate using the current fitted object and,\\n', Rd_tag = 'TEXT'), structure('  optionally, other variables in the original data.\\n', Rd_tag = 'TEXT')), Rd_tag = '\\\\description'),     structure(list(structure('\\n', Rd_tag = 'RCODE'), structure(list(list(structure('update', Rd_tag = 'TEXT')), list(structure('varFunc', Rd_tag = 'TEXT'))), Rd_tag = '\\\\method'), structure('(object, data, ', Rd_tag = 'RCODE'), structure(list(), Rd_tag = '\\\\dots'), structure(')\\n', Rd_tag = 'RCODE')), Rd_tag = '\\\\usage'), structure(list(structure('\\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT'), structure(list(list(structure('object', Rd_tag = 'TEXT')), list(structure('an object inheriting from class ', Rd_tag = 'TEXT'),         structure(list(structure('varFunc', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(',\\n', Rd_tag = 'TEXT'), structure('    representing a variance function structure.', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure(' \\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT'), structure(list(list(structure('data', Rd_tag = 'TEXT')), list(structure('a list with a component named ', Rd_tag = 'TEXT'), structure(list(structure('\\'.\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' with the current\\n', Rd_tag = 'TEXT'),         structure('    version of the fitted object (from which fitted values, coefficients,\\n', Rd_tag = 'TEXT'), structure('    and residuals can be extracted) and, if necessary, other variables\\n', Rd_tag = 'TEXT'), structure('    used to evaluate the variance covariate(s).', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure(' ', Rd_tag = 'TEXT'), structure(list(list(structure(list(), Rd_tag = '\\\\dots')), list(structure('some methods for this generic require additional\\n', Rd_tag = 'TEXT'),         structure('    arguments.  None are used in this method.', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure(' \\n', Rd_tag = 'TEXT')), Rd_tag = '\\\\arguments'), structure(list(structure('\\n', Rd_tag = 'TEXT'), structure('  if ', Rd_tag = 'TEXT'), structure(list(structure('formula(object)', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' includes a ', Rd_tag = 'TEXT'), structure(list(structure('\\'.\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' term, an\\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT'),         structure(list(structure('varFunc', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' object similar to ', Rd_tag = 'TEXT'), structure(list(structure('object', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', but with the \\n', Rd_tag = 'TEXT'), structure('  variance covariate reevaluated at the current fitted object value;\\n', Rd_tag = 'TEXT'), structure('  else ', Rd_tag = 'TEXT'), structure(list(structure('object', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' is returned unchanged.\\n', Rd_tag = 'TEXT')), Rd_tag = '\\\\value'),     structure(list(structure('José Pinheiro and Douglas Bates ', Rd_tag = 'TEXT'), structure(list(structure('bates@stat.wisc.edu', Rd_tag = 'TEXT')), Rd_tag = '\\\\email')), Rd_tag = '\\\\author'), structure(list(structure(list(structure(list(structure('needUpdate', Rd_tag = 'TEXT')), Rd_tag = '\\\\link')), Rd_tag = '\\\\code'), structure(',\\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT'), structure(list(structure(list(structure('covariate<-.varFunc', Rd_tag = 'TEXT')), Rd_tag = '\\\\link')), Rd_tag = '\\\\code'),         structure('\\n', Rd_tag = 'TEXT')), Rd_tag = '\\\\seealso')), Rdfile = '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/man/update.varFunc.Rd', class = 'Rd', meta = structure(list(docType = character(0)), .Names = 'docType'), prepared = 3L), 'prepared');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr27_f6a3b4b2fd3c913f1b96d56b284fa748() {
        assertEval("argv <- list(structure(list(structure(list(structure('Print a varFunc Object', Rd_tag = 'TEXT')), Rd_tag = '\\\\title'), structure(list(structure('print.varFunc', Rd_tag = 'VERB')), Rd_tag = '\\\\name'), structure(list(structure('print.varFunc', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('print.varComb', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('models', Rd_tag = 'TEXT')), Rd_tag = '\\\\keyword'), structure(list(structure('\\n', Rd_tag = 'TEXT'), structure('  The class and the coefficients associated with ', Rd_tag = 'TEXT'),     structure(list(structure('x', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' are printed.\\n', Rd_tag = 'TEXT')), Rd_tag = '\\\\description'), structure(list(structure('\\n', Rd_tag = 'RCODE'), structure(list(list(structure('print', Rd_tag = 'TEXT')), list(structure('varFunc', Rd_tag = 'TEXT'))), Rd_tag = '\\\\method'), structure('(x, ', Rd_tag = 'RCODE'), structure(list(), Rd_tag = '\\\\dots'), structure(')\\n', Rd_tag = 'RCODE')), Rd_tag = '\\\\usage'), structure(list(structure('\\n', Rd_tag = 'TEXT'),     structure(' ', Rd_tag = 'TEXT'), structure(list(list(structure('x', Rd_tag = 'TEXT')), list(structure('an object inheriting from class ', Rd_tag = 'TEXT'), structure(list(structure('varFunc', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', representing a\\n', Rd_tag = 'TEXT'), structure(' variance function structure.', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure(' ', Rd_tag = 'TEXT'), structure(list(list(structure(list(), Rd_tag = '\\\\dots')), list(structure('optional arguments passed to ', Rd_tag = 'TEXT'),         structure(list(structure('print.default', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure('; see\\n', Rd_tag = 'TEXT'), structure('   the documentation on that method function.', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT')), Rd_tag = '\\\\arguments'), structure(list(structure('Jos<U+00E9> Pinheiro and Douglas Bates ', Rd_tag = 'TEXT'), structure(list(structure('bates@stat.wisc.edu', Rd_tag = 'TEXT')), Rd_tag = '\\\\email')), Rd_tag = '\\\\author'), structure(list(structure(list(    structure(list(structure('summary.varFunc', Rd_tag = 'TEXT')), Rd_tag = '\\\\link')), Rd_tag = '\\\\code')), Rd_tag = '\\\\seealso'), structure(list(structure('\\n', Rd_tag = 'RCODE'), structure('vf1 <- varPower(0.3, form = ~age)\\n', Rd_tag = 'RCODE'), structure('vf1 <- Initialize(vf1, Orthodont)\\n', Rd_tag = 'RCODE'), structure('print(vf1)\\n', Rd_tag = 'RCODE')), Rd_tag = '\\\\examples')), Rdfile = '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/man/print.varFunc.Rd', class = 'Rd', meta = structure(list(    docType = character(0)), .Names = 'docType'), prepared = 3L), 'meta');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr28_26f8327ca16c924b0f515a72bbc03498() {
        assertEval("argv <- list(structure(list(variable1 = c(1, 2, 2), variable2 = c(1, 1, 3)), .Names = c('variable1', 'variable2'), row.names = c(NA, -3L), class = 'data.frame', variable.labels = structure(c('variable1', 'variable2'), .Names = c('variable1', 'variable2')), codepage = 20127L), 'variable.labels');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr29_1b404dab287a7ea4b9927330c38a575c() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 'row.names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr30_d39ac6bcaab0a1a137730a666a99b340() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/graphics/R/graphics', '/home/lzhao/hg/r-instrumented/library/graphics/R/graphics'), frow = 4262:4263, lrow = 4262:4263), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr31_ce0ae9f124b7d41e2d09db2f5f16032b() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = c('ordered', 'factor')), 'levels');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr32_812e0a38ea6db8eef66392b6b41b0392() {
        assertEval("argv <- list(structure(1:10, date = structure(200171400, class = c('POSIXct', 'POSIXt'), tzone = ''), class = 'stamped'), 'date');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr33_dd71b0c6a4afc978f0636908363b1fd5() {
        assertEval("argv <- list(structure(c(49.9, 52.3, 49.4, 51.1, 49.4, 47.9, 49.8, 50.9, 49.3, 51.9, 50.8, 49.6, 49.3, 50.6, 48.4, 50.7, 50.9, 50.6, 51.5, 52.8, 51.8, 51.1, 49.8, 50.2, 50.4, 51.6, 51.8, 50.9, 48.8, 51.7, 51, 50.6, 51.7, 51.5, 52.1, 51.3, 51, 54, 51.4, 52.7, 53.1, 54.6, 52, 52, 50.9, 52.6, 50.2, 52.6, 51.6, 51.9, 50.5, 50.9, 51.7), .Tsp = c(1, 53, 1)), 'tsp');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr34_0e5ae5f2320f15fd31b8f57c4a654167() {
        assertEval("argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x * z)), 'row.names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr35_f8facb8f29eeeb6c79e6e742b34cacfe() {
        assertEval("argv <- list(structure(c(123.48457192908, 239.059434652297, 290.055338401838, 18.397281603467, 6.57585722655537, 0.670931786731845, 0.178466148156965, 0.245410750178149, 0.363167328274208, 0.194808268742596, 2172.67583033103, 8.91763605923317e+38), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), 'class');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr36_4bbde63d429df160015074b3aa026bbc() {
        assertEval("argv <- list(structure(c(8.85169533448293e-238, 2.77884205079773e-237, 8.5330427463164e-242, 7.89244209468013e-215, 6.74732964729372e-231, 1.30818670504849e-217, 1.39113376416096e-208, 1.35683278955814e-215, 7.74002099666521e-219, 3.64254537730231e-220, 6.75916981442421e-296, 0), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), 'class');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr37_084a9068e43c75c0b820cb9680664ec0() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 1.90299264808673e-318, 0, 0, 0, 0, 0), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), 'class');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr38_0f9bf89cd8e65f53d90d4b32800ab066() {
        assertEval("argv <- list(list(c(57, 95, 8, 69, 92, 90, 15, 2, 84, 6, 127, 36, 51, 2, 69, 71, 87, 72, 5, 39, 22, 16, 72, 4, 130, 4, 114, 9, 20, 24, 10, 51, 43, 28, 60, 5, 17, 7, 81, 71, 12, 29, 44, 77, 4, 27, 47, 76, 8, 72, 13, 57, 4, 81, 20, 61, 80, 114, 39, 14, 86, 55, 3, 19)), 'names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr39_e24cad64c93baee9ea0fd9d1b9b5e4c2() {
        assertEval("argv <- list(structure(list(coef = c(0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099, 0.0099009900990099), m = 50L), .Names = c('coef', 'm'), name = 'Daniell(50)', class = 'tskernel'), 'name');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr4_129074db1d9dc619344683a3a2b8447a() {
        assertEval("argv <- list(structure(list(`cbind(w = weight, w2 = weight^2)` = structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), terms = quote(cbind(w = weight, w2 = weight^2) ~ group), row.names = c(NA, 20L), class = 'data.frame'), 'terms');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr40_d7646c4b3d85a96ee8173efc064ddfa9() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.0519265581680438, 0.0688412118115477, 0.0907383424760159, 0.11871257874736, 0.153851867351129, 0.197066627437879, 0.248849916275927, 0.309003712276245, 0.376411716520019, 0.448970177554117, 0.523767544415284, 0.560977234455458), .Dim = c(12L, 2L), gradient = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00738389705040961, -0.00961449255414965, -0.0123746759217436, -0.0156916432890164, -0.0195255505224529, -0.0237326760503604, -0.0280361473696848, -0.032025323792521, -0.035205879677649, -0.0371062207595128, -0.0374120660881388, -0.0369391076611127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.142994094104604, 0.166962078687643, 0.190145150639427, 0.209729276540067, 0.221920901693929, 0.222272332097609, 0.206504915766748, 0.17183720786829, 0.11849125053358, 0.0506747206505475, -0.0237317230350864, -0.0603708169587119), .Dim = c(12L, 2L, 2L))), 'gradient');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr41_915c9a81816541343b105fd761a2fe64() {
        assertEval("argv <- list(structure(list(A = 0:10, B = 10:20, `NA` = 20:30), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr42_ea8116af3526e58a9c17575e5f3f0945() {
        assertEval("argv <- list(structure(list(coef = c(0.1, 0.1, 0.1, 0.1, 0.1, 0.05), m = 5L), .Names = c('coef', 'm'), name = 'mDaniell(5)', class = 'tskernel'), 'name');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr43_ff60f9ec231b32bf4671907e2241564d() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Dim = c(10L, 2L), .Dimnames = list(NULL, c('tt', 'tt + 1')), .Tsp = c(1920.5, 1921.25, 12), class = c('mts', 'ts', 'matrix')), 'tsp');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr44_0f33471db81e18094b7c6b6c54a26198() {
        assertEval("argv <- list(structure(c(2L, NA, NA, 4L, 3L, 2L, 1L, 5L, 5L, 6L), .Label = c('NA', 'a', 'b', 'c', 'd', NA), class = 'factor'), 'levels');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr45_b9bc812ef30319730806f0880bb0d94d() {
        assertEval("argv <- list(c(35.2589338684655, 59.5005803666983, 12.4529321610302, 2.53579570262684, 10.370198579714, 42.0067149618146, 8.14319638132861, 34.0508943233725, 7.78517191057496, 26.9998965458032, 6.70435391953205, 3.62502215105156, 2.59277105754344, 14.4998960151485, 6.70435391953205, 5.8000097831969, 32.741875696675, 59.5015090627504, 13.5512565366133, 4.46460764999704, 9.62989278443572, 42.0073706103832, 8.86141045052292, 59.9511558158597, 7.22940551532861, 27.0003179651772, 7.29566488446303, 6.38233656214029, 2.40767880256155, 14.5001223322046, 7.29566488446303, 10.2116933242272), 'dim');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr5_ae75e342a79dc0f8c76efbfeadc5b247() {
        assertEval("argv <- list(structure(list(title = structure(1L, .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(2L, .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = 1L, class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr6_5abb2a8a9a1bcf68065a89ec00e47ada() {
        assertEval("argv <- list(structure(list(Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L), B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor')), .Names = c('Y', 'B', 'V', 'N'), terms = quote(Y ~ B + V + N + V:N), row.names = 2:72, class = 'data.frame'), 'na.action');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr7_908827ef1f376e647013bfb898c9f66c() {
        assertEval("argv <- list(structure('mtext(\\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\\', side = 3)\\n', Rd_tag = 'RCODE'), 'Rd_tag');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr8_9eba0a5cb6d4ad7791f92bc24a39d8f3() {
        assertEval("argv <- list(structure(c(72.8922646699554, 72.8922646699554, 72.8922646699554, 72.8922646699554, 72.8922646699554, 99.6344113579063, 99.6344113579063, 122.561298550713, 122.561298550713, 122.561298550713, 122.561298550713, 122.561298550713, 122.561298550713, 140.590935258431, 140.590935258431, 140.590935258431, 153.976908924618, 153.976908924618, 153.976908924618, 153.976908924618, 163.542360717164, 163.542360717164, 163.542360717164, 163.542360717164, 163.542360717164, 163.542360717164, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 177.863643456281, 177.863643456281, 177.863643456281, 177.863643456281, 177.863643456281, 181.334266157228, 182.262171017221), gradient = structure(c(0, 0, 0, 0, 0, 57.4245712142609, 57.4245712142609, 92.0663000396056, 92.0663000396056, 92.0663000396056, 92.0663000396056, 92.0663000396056, 92.0663000396056, 102.603355837019, 102.603355837019, 102.603355837019, 96.1864486469068, 96.1864486469068, 96.1864486469068, 96.1864486469068, 80.9127637202515, 80.9127637202515, 80.9127637202515, 80.9127637202515, 80.9127637202515, 80.9127637202515, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 29.9327435335998, 29.9327435335998, 29.9327435335998, 29.9327435335998, 29.9327435335998, 7.54853144661603, 0, 0.999999995832131, 0.999999995832131, 0.999999995832131, 0.999999995832131, 0.999999995832131, 0.900752404767751, 0.900752404767751, 0.72805882604922, 0.72805882604922, 0.72805882604922, 0.72805882604922, 0.72805882604922, 0.72805882604922, 0.546325339398677, 0.546325339398677, 0.546325339398677, 0.388712482407919, 0.388712482407919, 0.388712482407919, 0.388712482407919, 0.265313345750221, 0.265313345750221, 0.265313345750221, 0.265313345750221, 0.265313345750221, 0.265313345750221, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.0650421524858363, 0.0650421524858363, 0.0650421524858363, 0.0650421524858363, 0.0650421524858363, 0.0138547080588812, -2.61666809427403e-08, 0, 0, 0, 0, 0, 0.186415683651876, 0.186415683651876, 0.381271875735367, 0.381271875735367, 0.381271875735367, 0.381271875735367, 0.381271875735367, 0.381271875735367, 0.552874143045278, 0.552874143045278, 0.552874143045278, 0.689351882872836, 0.689351882872836, 0.689351882872836, 0.689351882872836, 0.791184856858009, 0.791184856858009, 0.791184856858009, 0.791184856858009, 0.791184856858009, 0.791184856858009, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.949854646587551, 0.949854646587551, 0.949854646587551, 0.949854646587551, 0.949854646587551, 0.989368022459573, 0.999999988297389), .Dim = c(52L, 3L))), 'gradient');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattr_testattr9_f1186a22414cef9e8b67270a3c27223e() {
        assertEval("argv <- list(structure(list(Fr = c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8), Hair = structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('Black', 'Brown', 'Red', 'Blond'), class = 'factor'), Eye = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('Fr', 'Hair', 'Eye', 'Sex'), terms = quote(Fr ~ (Hair + Eye + Sex)^2), row.names = c(NA, 32L), class = 'data.frame'), 'terms');attr(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign1_04d2ca7126ca8b16489fda461b4053f0() {
        assertEval("argv <- list(structure(1, foo = structure(list(a = 'a'), .Names = 'a')), 'foo', value = structure(list(a = 'a'), .Names = 'a'));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign10_ea8fa32ae9b5f46cc52903a11c737421() {
        assertEval("argv <- list(structure(list(a = 1:3, b = structure(1:3, .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('a', 'b'), row.names = c(NA, -3L), class = 'data.frame', foo = 10), 'foo', value = 10);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign11_7f441a46a01ebba5aa1acb7d3c4ee512() {
        assertEval("argv <- list(structure(c(50.566057038188, 50.566057038188, 102.811023011144, 102.811023011144, 134.361651733496, 134.361651733496, 164.684698598908, 164.684698598908, 190.832887571642, 190.832887571642, 200.968775266774, 200.968775266774), gradient = structure(c(0.237752464043283, 0.237752464043283, 0.483398854556726, 0.483398854556726, 0.631744210319564, 0.631744210319564, 0.774317697987532, 0.774317697987532, 0.897261758147131, 0.897261758147131, 0.944918870762493, 0.944918870762493, -601.11023288912, -601.11023288912, -828.312179323201, -828.312179323201, -771.656323378267, -771.656323378267, -579.628530513078, -579.628530513078, -305.762593240759, -305.762593240759, -172.635625621456, -172.635625621456), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('Vm', 'K')))), 'gradient', value = structure(c(0.237752464043283, 0.237752464043283, 0.483398854556726, 0.483398854556726, 0.631744210319564, 0.631744210319564, 0.774317697987532, 0.774317697987532, 0.897261758147131, 0.897261758147131, 0.944918870762493, 0.944918870762493, -601.11023288912, -601.11023288912, -828.312179323201, -828.312179323201, -771.656323378267, -771.656323378267, -579.628530513078, -579.628530513078, -305.762593240759, -305.762593240759, -172.635625621456, -172.635625621456), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('Vm', 'K'))));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign12_eebb5dc99978390f979913f24736360e() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 20L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign13_161227039b81862755943625a1ee3a7d() {
        assertEval("argv <- list(structure(cim = c(19L, 22L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign14_5d3a70529bb7c719fd0ba7d907306e43() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 20L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign15_e7a94642f8935e6167fccae31b9ee078() {
        assertEval("argv <- list(structure(c('8189464 kB', '52252 kB', '237240 kB', '6704452 kB', '5868 kB', '3947300 kB', '3641700 kB', '521488 kB', '126264 kB', '3425812 kB', '3515436 kB', '0 kB', '0 kB', '20603324 kB', '20546156 kB', '1964 kB', '0 kB', '645292 kB', '12420 kB', '76 kB', '343696 kB', '303404 kB', '40292 kB', '2344 kB', '8464 kB', '0 kB', '0 kB', '0 kB', '24698056 kB', '1053308 kB', '34359738367 kB', '301080 kB', '34359386948 kB', '0 kB', '0', '0', '0', '0', '2048 kB', '7488 kB', '8376320 kB'), .Names = c('MemTotal', 'MemFree', 'Buffers', 'Cached', 'SwapCached', 'Active', 'Inactive', 'Active(anon)', 'Inactive(anon)', 'Active(file)', 'Inactive(file)', 'Unevictable', 'Mlocked', 'SwapTotal', 'SwapFree', 'Dirty', 'Writeback', 'AnonPages', 'Mapped', 'Shmem', 'Slab', 'SReclaimable', 'SUnreclaim', 'KernelStack', 'PageTables', 'NFS_Unstable', 'Bounce', 'WritebackTmp', 'CommitLimit', 'Committed_AS', 'VmallocTotal', 'VmallocUsed', 'VmallocChunk', 'HardwareCorrupted', 'HugePages_Total', 'HugePages_Free', 'HugePages_Rsvd', 'HugePages_Surp', 'Hugepagesize', 'DirectMap4k', 'DirectMap2M'), Name = '/proc/meminfo'), 'Name', value = '/proc/meminfo');`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign16_48ce7a0a9b50187eae4cada4d3353f3a() {
        assertEval("argv <- list(structure(c(0, -187, -34, 0, 165, 0, -95, 121, 107, 0, 41, 0, 0, 93, 0), .Dim = c(5L, 3L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign2_abd86ae29ccfc9b40b4737b8e494dfa8() {
        assertEval("argv <- list(structure(c(-99, 123, 0, -27, 0, 136, 3.5527136788005e-14, 0, -89, -59, 54.9999999999999, -260, 30, 47, 0), .Dim = c(5L, 3L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign3_1a9c2fe875d816a85f2166d16f0fa5b6() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, NA, 1, 0, 0, 0, 7, 1, 0, 3, 0, 0, 1), .Dim = c(4L, 4L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign4_b98acf7c3923b80e14228ab644b0a8cc() {
        assertEval("argv <- list(structure(c(51.4483279898675, 51.4483279898675, 103.874299440142, 103.874299440142, 135.181084465022, 135.181084465022, 165.022949241512, 165.022949241512, 190.564205234787, 190.564205234787, 200.417426252912, 200.417426252912), gradient = structure(c(0.242941154845256, 0.242941154845256, 0.490498782967253, 0.490498782967253, 0.638330730196604, 0.638330730196604, 0.779245262792577, 0.779245262792577, 0.899852140987463, 0.899852140987463, 0.946379462411014, 0.946379462411014, -624.945810835795, -624.945810835795, -849.17029094943, -849.17029094943, -784.456730502965, -784.456730502965, -584.515233856856, -584.515233856856, -306.213585850174, -306.213585850174, -172.428123740936, -172.428123740936), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('Vm', 'K'))), hessian = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.95102023587733, -2.95102023587733, -4.00981760153928, -4.00981760153928, -3.70423746466663, -3.70423746466663, -2.76010536174851, -2.76010536174851, -1.44595334935665, -1.44595334935665, -0.814212806248508, -0.814212806248508, -2.95102023587733, -2.95102023587733, -4.00981760153928, -4.00981760153928, -3.70423746466663, -3.70423746466663, -2.76010536174851, -2.76010536174851, -1.44595334935665, -1.44595334935665, -0.814212806248508, -0.814212806248508, 15182.5057000153, 15182.5057000153, 13883.8998080881, 13883.8998080881, 9104.41522890179, 9104.41522890179, 4140.73388193682, 4140.73388193682, 984.096252952598, 984.096252952598, 296.69533645543, 296.69533645543), .Dim = c(12L, 2L, 2L), .Dimnames = list(NULL, c('Vm', 'K'), c('Vm', 'K')))), 'hessian', value = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.95102023587733, -2.95102023587733, -4.00981760153928, -4.00981760153928, -3.70423746466663, -3.70423746466663, -2.76010536174851, -2.76010536174851, -1.44595334935665, -1.44595334935665, -0.814212806248508, -0.814212806248508, -2.95102023587733, -2.95102023587733, -4.00981760153928, -4.00981760153928, -3.70423746466663, -3.70423746466663, -2.76010536174851, -2.76010536174851, -1.44595334935665, -1.44595334935665, -0.814212806248508, -0.814212806248508, 15182.5057000153, 15182.5057000153, 13883.8998080881, 13883.8998080881, 9104.41522890179, 9104.41522890179, 4140.73388193682, 4140.73388193682, 984.096252952598, 984.096252952598, 296.69533645543, 296.69533645543), .Dim = c(12L, 2L, 2L), .Dimnames = list(NULL, c('Vm', 'K'), c('Vm', 'K'))));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign5_ea7b8da877cef1d0bb9be5bbed138167() {
        assertEval("argv <- list(structure(c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = 3:4), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign6_a42c0b9527192cfdaa1d529d11fbcda1() {
        assertEval("argv <- list(structure(c('o', 'p', 'v', 'i', 'r', 'w', 'b', 'm', 'f', 's'), date = structure(1224086400, class = c('POSIXct', 'POSIXt'), tzone = '')), 'date', value = structure(1224086400, class = c('POSIXct', 'POSIXt'), tzone = ''));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign7_bd847e61e37d7f5dcfbd609c2cec37e4() {
        assertEval("argv <- list(structure(list(structure(list(structure(13L, label = 'Illinois', members = 1L, height = 0, leaf = TRUE), structure(32L, label = 'New York', members = 1L, height = 0, leaf = TRUE)), members = 2L, midpoint = 0.5, height = 6.23698645180507), structure(list(structure(22L, label = 'Michigan', members = 1L, height = 0, leaf = TRUE), structure(28L, label = 'Nevada', members = 1L, height = 0, leaf = TRUE)), members = 2L, midpoint = 0.5, height = 13.2973681606549)), members = 4L, midpoint = 1.5, height = 18.4173313943456, class = 'dendrogram', edgePar = structure(list(    p.col = 'plum'), .Names = 'p.col'), edgetext = '4 members'), 'edgetext', value = '4 members');`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign8_7f59cde2ae97f9157ae509f2c9eeba78() {
        assertEval("argv <- list(structure(4, '`Object created`' = 'Sat Dec  7 00:26:20 2013'), 'Object created', value = 'Sat Dec  7 00:26:20 2013');`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign9_c350d08c3f819e62094d9790f710eb94() {
        assertEval("argv <- list(structure(1:3, .Names = c('a', 'b', 'c')), 'names', value = list('a', 'b', 'c'));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes1_543e183665b9265ca82b36475781b18f() {
        assertEval("argv <- list(structure(c(5.79821692617331, 1.82341879820553, 2.78390295547843, 5.76851897647876, 1.96728131351224, 1.64012180629841, 0.76150764829566, 8.78324957466388, 0.711713280005232, 0.0432245134694077, 0.484038236738706, 2.2604286525194), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes10_83450759c0d30e3aad0c208bf50bef19() {
        assertEval("argv <- list(structure(list(zi.si. = c(-2.73014251717135, -2.16787987308811, -1.61026765290054, -1.06093652746977, -0.523224065200069, 0, 0.506450782357207, 0.994479058519472, 1.46306067722175, 1.91173866627745, 2.34053598638487, 2.74985599456053)), .Names = 'zi.si.', row.names = c(NA, -12L), class = 'data.frame'));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes11_ce8131cc90c422c0b246f4d9189e67ef() {
        assertEval("argv <- list(structure(c(4L, 5L, 1L, 5L, 3L, 4L, 5L, 3L, 2L, 4L), .Label = c('a', 'c', 'i', 's', 't'), class = 'factor', contrasts = structure(c(1, 0, 0, 0, -1, 0, 1, 0, 0, -1, -0.247125681008604, -0.247125681008604, -0.149872105789645, 0.891249148815458, -0.247125681008604, 0.268816352031209, 0.268816352031209, -0.881781351530059, 0.0753322954364324, 0.268816352031209), .Dim = c(5L, 4L), .Dimnames = list(c('a', 'c', 'i', 's', 't'), NULL))));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes12_5e42d6b658bd9e762e38c93cd90c45f1() {
        assertEval("argv <- list(structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes13_cfc305b302708bd95f256935c31be9b0() {
        assertEval("argv <- list(c(FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes14_3240dfa329b15a375585e5317272aa1b() {
        assertEval("argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes15_0b0f228a0f510416c5c8798caf630428() {
        assertEval("argv <- list(structure(c(1L, NA, 3L), .Label = c('1', '2', NA)));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes16_e5a457258bf54c3f1a74d0709c0dd52a() {
        assertEval("argv <- list(structure(1, .Dim = c(1L, 1L), a = c(NA, 3, -1, 2), class = structure('B', package = '.GlobalEnv')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes17_970081fe154ebc5ac8f25f250898a0bc() {
        assertEval("argv <- list(structure(list(L = structure(c('Min.   :14.00  ', '1st Qu.:26.00  ', 'Median :29.50  ', 'Mean   :36.39  ', '3rd Qu.:49.25  ', 'Max.   :70.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool')), class = 'table'), M = structure(c('Min.   :12.00  ', '1st Qu.:18.25  ', 'Median :27.00  ', 'Mean   :26.39  ', '3rd Qu.:33.75  ', 'Max.   :42.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool')), class = 'table'), H = structure(c('Min.   :10.00  ', '1st Qu.:15.25  ', 'Median :20.50  ', 'Mean   :21.67  ', '3rd Qu.:25.50  ', 'Max.   :43.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool')), class = 'table')), .Dim = 3L, .Dimnames = structure(list(`warpbreaks[, 'tension']` = c('L', 'M', 'H')), .Names = 'warpbreaks[, \\'tension\\']')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes18_fdf0fb6f1408fbe0b47df75c329040a2() {
        assertEval("argv <- list(structure(3.14159265358979, comment = 'Start with pi'));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes19_f12dc253c2a847b9dc5e8127b263c64c() {
        assertEval("argv <- list(structure(list(school = c(1L, 1L, 2L, 2L, 3L, 3L), class = c(9L, 10L, 9L, 10L, 9L, 10L), score.1 = c(0.487429052428485, 0.738324705129217, 1.51178116845085, 0.389843236411431, 1.12493091814311, -0.0449336090152309), score.2 = c(0.575781351653492, -0.305388387156356, -0.621240580541804, -2.2146998871775, -0.0161902630989461, 0.943836210685299)), .Names = c('school', 'class', 'score.1', 'score.2'), row.names = c(1L, 2L, 5L, 6L, 9L, 10L), class = 'data.frame', reshapeWide = structure(list(v.names = NULL,     timevar = 'time', idvar = c('school', 'class'), times = c(1, 2), varying = structure(c('score.1', 'score.2'), .Dim = 1:2)), .Names = c('v.names', 'timevar', 'idvar', 'times', 'varying'))));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes2_dbd74592cc2cfc09c267e3f318ca4c0f() {
        assertEval("argv <- list(1386518010.66723);attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes20_15c0bda1f1e62ec9ad81a15e3f7adade() {
        assertEval("argv <- list(structure(c(-0.927486533732408, -0.13045118082262, -1.45825662858798, -1.81793776180039, -1.62313249921887, 1.26834845395072, -0.994859212587552, -0.60437576902456, -1.06120404454492, 0.877124074149983, 0.824787552890982, 0.704014030529726, -0.702775741558964, 0.544818578451748, 1.48964468805446, 0.13432541283722, -0.128923575804159, -0.354052007275421, 1.0711307633823, -1.33461699082502, 0.380875114294515, -1.07786690183251, 0.810306659502442, -2.17501201437322, -0.407604875801864, -0.462999392844433, 0.194880873045067, 2.65407152575046, 0.564656783773942, 0.906337761254496, -0.631531096896236, -1.27819755429098, -0.538330333636237, 1.00231821330914, -0.286364553583536, 0.469006850788945, 1.05885815169124, 1.21503113231427, 1.44216953152086, 0.486588338054406, 0.268701510628534, -0.463411907566429, 1.02436199321322, -1.39004777906874, 0.999688613035661, -0.916808034628566, -0.502852003923634, 0.212379391073633, -0.0134736853666567, 1.31736970279298, -0.0944249611837457, 0.806746464646202, 0.315038937675493, -1.17340599897154, 0.482494016048211, -0.791050343541626, 0.808325470742601, 0.588652339988029, 1.10512245024341, 1.12322151831428, 0.208749082415184, -0.357070741737234, 0.572101015785145, -0.533738015097777, -0.360034768896796, 0.0342776735716719, -1.99368868442296, 2.04525110526828, 0.854582964377424, -0.292897401378698, -1.18433316855268, -0.376789959833897, -0.538288068463758, -0.232305057346106, -0.375870899318979, -0.359017335348666, -0.741816586737615, -0.269774297924449, -0.796951579131833, 0.0323594165086663, 0.439067375500569, 0.466080486767734, -1.49275492910805, 0.947406234969688, 0.182071046143441, 0.445836300099003, 2.02477378068589, -1.70432399838533, -0.440962927710655, 0.831168740087201, 2.13610340066555, -1.8137969168688, 1.22501979912183, 0.795942206968001, 1.87235555725712, -1.26557065145048, 0.378275537740316, 0.789728084675539, 0.99886763527649, 2.29736830042939, -0.00228198643744461, 0.161544616498807, -1.14848457105275, -1.08025155036982, -1.03819987128219, -0.856130938839897, 1.0042164519591, -0.843667376942675, -1.21154108350058, 0.460882948229546, -0.468389916732288, -0.946568852822378, 1.17783540515932, -0.973911234750034, -0.0639785174878419, -1.1045450251553, 0.442020873295079, 0.0831991221894004, 0.269053190969569, 0.901338595939942, -0.086250034518703, 0.478492308026563, -0.925167039266549, -0.658186865278783, 1.0337884593443, -0.434569632901449, 2.038954875659, 0.202381377518746, 0.484762177881311, -0.360074615793248, -0.129300783906607, 0.651643789311553, 0.934922268235395, -0.0934722501709123, -0.0103213567459648, 1.61917070438612, -1.06268414268298, 0.696244014590397, 0.992388229201836, 0.697363816464206, 0.250252166543902, -0.557960198745092, 0.221087284404152, 0.10961920608307, 0.259174711435693, -0.70162900779778, 1.92431317758909, -0.578758205883074, 1.59171854092147, 0.902876390823624, 0.840275033814991, 1.77586917630517, 0.403033282757909, 0.0539091417299491, -1.26615014148617, 0.0148781649233171, 0.256100494565364, -1.01942222514274, 0.549839939376835, -0.724728578424903, 0.151976282801212, 0.326791648750199, 0.748909789058061, -1.85444018168148, 0.0869984536340467, 1.25350587157032, 0.962041461790638, 0.120578653081864, -0.11935793490114, 0.6951267107979, -1.39729724662012, 1.03310979193329, -0.619324332563388, 0.60759513170927, 0.665670243263983, 1.34746787641065, 0.213814029897928, -0.43608749915348, -0.196912890515945, -0.474024803180795, -0.0932220458288109, -0.739450980689706, -0.299196422560384, -0.765918956807232, -0.374980670595253, 0.65328744055362, -0.552631311606602, -1.24532249102801, 1.50941913047883, -1.79189867145273, -0.892183862327233, 1.20950581962313, 0.454528744013934, 0.266817155028672, 1.65771215541012, 1.00893183514602, 0.761621316769915, 0.262896620317128, -0.128241496594234, 0.980274347240293), .Label = structure(list(c(-2.17503193782145, -0.474004879732569), c(-0.97393115819826, -0.0932021223805848), c(-0.468409840180514, 0.266837078476898), c(-0.086269957966929, 0.696263938038623), c(0.268681587180308, 1.02438191666144), c(0.697343893015979, 2.65409144919869)), class = 'shingleLevel'), class = 'shingle'));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes21_49593ab52328f6b14283dbbfef5b6328() {
        assertEval("argv <- list(structure(c(82, 82, 82, 75, 63, 50, 43, 35, 35, 54, 54, 54, 39, 36, 0, 0, 57, 57, 57, 51, 45, 45, 39, 39, 36, 32, 25, 25, 25, 25, 32, 32, 59, 74, 74, 71, 71, 71, 71, 71, 71, 71, 73, 73, 73, 71, 71, 75, 75, 63, 62, 60, 57, 49, 49, 52, 57, 61, 62, 66, 66, 62, 61, 61, 72, 72, 78, 78, 78, 71, 71, 74, 74, 64, 62, 62, 73, 73, 69, 69, 69, 69, 64, 63, 62, 56, 46, 44, 44, 44, 44, 44, 44, 44, 44, 44, 59, 65, 65, 65, 61, 56, 53, 52, 51, 51, 49, 49, 49, 49, 0, 0, 44, 44, 40, 28, 27, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts'));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes22_f44454beb8bccd957653004a6a8241d9() {
        assertEval("argv <- list(c(1000, 1e+07, 1));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes23_a0a64aefea633b3e370519ba743289ce() {
        assertEval("argv <- list(structure(list(), .Names = character(0), arguments = structure('object', simpleOnly = TRUE), signatures = list(), generic = structure(function (object) standardGeneric('show'), generic = structure('show', package = 'methods'), package = 'methods', group = list(), valueClass = character(0), signature = structure('object', simpleOnly = TRUE), default = structure(function (object) showDefault(object, FALSE), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), generic = structure('show', package = 'methods'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (object) showDefault(object, FALSE))(object)), class = structure('standardGeneric', package = 'methods')), class = structure('listOfMethods', package = 'methods')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes24_61bebe3b9387503ee89a04416423eaf2() {
        assertEval("argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, -10L), class = 'data.frame'));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes25_70c7fa9725d3bf916c0aec236ba4b67b() {
        assertEval("argv <- list(structure(character(0), package = character(0), class = structure('ObjectsWithPackage', package = 'methods')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes26_237c738df174d934dd9b974e323a6920() {
        assertEval("argv <- list(structure(list(qr = structure(c(-561841.166008647, 1.48748911573234e-06, 1.62250974987379e-06, 1.29819733159371e-06, 1.3199650315892e-06, 1.59089005368605e-06, 3.38370366592718e-06, 1.54037267089339e-06, 1.26888887472893e-06, 1.66561998324397e-06, 2.71299853206351e-06, 1.82740883826792e-06, 1.69185183297085e-06, 1.36523405858032e-06, 1.55319864307643e-06, 1.56902110896583e-06, 1.3906190700334e-06, 1.2997165800148e-06, 1.56369334788134e-06, 1.43353743471477e-06, 1.74457009494164e-06, 2.03022219956374e-06, 1.73363224357496e-06, 1.47177180858703e-06, 4.47621920517122e-06, 1.45868913292866e-06, 1.67531329485535e-06, 1.56635043280177e-06, 1.90866628223014e-06, 1.54802991445627e-06, 1.60217310325092e-06, 2.68573152311995e-06, 1.55319864307643e-06, 1.65295348775885e-06, 1.41747488364731e-06, 0.999999999831096, 1.61369967706714e-06, 1.31520838537442e-06, 2.44157411192876e-06, 5.1686927260975e-06, 1.81484917852149e-06, 1.50372096623665e-06, 1.91837965937479e-06, 1.68517783522785e-06, 1.65295348775885e-06, 1.58810634192319e-06, 1.77478134630985e-06, 1.66883236806679e-06, 2.2002369936867e-06, 1.56635043280177e-06, 1.31520838537442e-06, 1.23229813671524e-06, 1.69185183297085e-06, 1.77091892313243e-06, 1.92329229138616e-06, 1.33290617468824e-06, 1.64672765212343e-06, 2.17841592228372e-06, 2.07828144894252e-06, 1.72289757538629e-06, 1.92824285888419e-06, 1.81484917852149e-06, 2.01304088471671e-06, 1.47621155263461e-06, 1.91350448082172e-06, 1.47177180858703e-06, 1.60217310325092e-06, 1.53282794306286e-06, 1.53282794306286e-06, 2.24592152723567e-06, 1.3564992660355e-06, 1.61662040285441e-06, 1.78652203450807e-06, 1.84456798315616e-06, 1.83165369610876e-06, 2.34653452685434e-06, 2.12325719919593e-06, 1.37956761746782e-06, 1.32156208605305e-06, 1.77478134630985e-06, 1.66242607813213e-06, 1.88501398961327e-06, 1.75571762111387e-06, 1.71936342279218e-06, 2.15723147161546e-06, 1.48294715363101e-06, 1.94332712676627e-06, 1.26606598163328e-06, 1.70544122262692e-06, 1.72289757538629e-06, 1.44385821185109e-06, 1.53533052096275e-06, 1.35133818480092e-06, 1.72645361131692e-06, 1.82319335667127e-06, 1.32963523435973e-06, 1.41158914936576e-06, 2.12325719919593e-06, 1.47844654491007e-06, 1.44385821185109e-06, 1472023.85454144, -24.6606754318977, 0.101285140222523, 0.12658801819228, 0.124500435606533, 0.103298237275271, 0.0485666635912155, 0.106685971539808, 0.129511920733888, 0.0986636292980589, 0.0605734308209414, 0.0899284547245126, 0.0971338624854, 0.120372186413924, 0.105804979598362, 0.104738008044408, 0.118174850871225, 0.126440048191751, 0.105094868834514, 0.114636830861078, 0.0941986135491651, 0.0809448199785816, 0.0947929347785712, 0.111658733889352, 0.0367127444946359, 0.11266018033215, 0.0980927625103667, 0.104916590166795, 0.0860999235367981, 0.106158253725478, 0.102570773477205, 0.06118841105676, 0.105804979598362, 0.0994196861729652, 0.115935876650863, -0.105466791174436, 0.101838113293825, 0.124950710904606, 0.0673073062385254, 0.0317940330935366, 0.0905508070559734, 0.109286343932539, 0.0856639697119484, 0.0975185539657231, 0.0994196861729652, 0.103479304149645, 0.0925951094262163, 0.0984737080806255, 0.0746900879658086, 0.104916590166795, 0.124950710904606, 0.13335753753099, 0.0971338624854, 0.0927970627378338, 0.0854451586907835, 0.123291662172605, 0.099795566659867, 0.075438259057915, 0.0790730002999382, 0.0953835529495729, 0.0852257858900505, 0.0905508070559734, 0.0816356880948164, 0.111322916452723, 0.085882223247457, 0.111658733889352, 0.102570773477205, 0.10721109183635, 0.10721109183635, 0.0731707992415186, 0.121147290839092, 0.101654123163447, 0.0919865892416036, 0.0890918891744519, 0.0897200446166977, 0.0700334141981384, 0.0773980324983756, 0.119121529360296, 0.124349981516283, 0.0925951094262163, 0.0988531856309209, 0.0871802709827442, 0.093600518723111, 0.095579614648734, 0.0761790825557647, 0.110817282218029, 0.0845642530341719, 0.129800688512867, 0.096359872295819, 0.0953835529495729, 0.113817398381304, 0.107036337986806, 0.121609982184857, 0.0951870874129862, 0.0901363829552483, 0.123594963843665, 0.116419281840054, 0.0773980324983756, 0.111154627274007, 0.113817398381304), .Dim = c(100L, 2L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'), c('(Intercept)', 'x'))), rank = 2L, qraux = c(1.00000155841949, 1.11047890709071), pivot = 1:2, tol = 1e-11), .Names = c('qr', 'rank', 'qraux', 'pivot', 'tol')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes27_3a6023514a31dc623c83dcc716a56459() {
        assertEval("argv <- list(structure(list(message = 'NAs produced', call = quote(rnorm(2, numeric()))), .Names = c('message', 'call')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes28_5731e7033a3dab769f197bfd21194cbc() {
        assertEval("argv <- list(structure(c(7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 8L, 8L, 8L, 8L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 27L, 27L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 22L, 22L, 22L, 22L, 22L, 22L, 22L, 22L, 22L, 22L, 22L, 22L, 22L, 23L, 23L, 23L, 23L, 23L, 23L, 23L, 23L, 23L, 23L, 23L, 23L, 23L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 26L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 24L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 17L, 17L, 17L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 14L, 14L, 14L, 14L, 14L, 14L, 14L, 14L, 14L), .Label = structure(c('9', '8', '7', '4', '2', '10', '1', '3', '5', '6', '21', '22', '24', '27', '26', '25', '23', '17', '11', '14', '13', '15', '16', '20', '19', '18', '12'), .Names = c('Control1', 'Control2', 'Control3', 'Control4', 'Control5', 'Control6', 'Control7', 'Control8', 'Control9', 'Control10', 'High1', 'High2', 'High3', 'High4', 'High5', 'High6', 'High7', 'Low1', 'Low2', 'Low3', 'Low4', 'Low5', 'Low6', 'Low7', 'Low8', 'Low9', 'Low10')), class = c('ordered', 'factor')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes29_9b16d51d2d501b2ebc100e63dc9684ba() {
        assertEval("argv <- list(structure(list(tau = c(-0.704193760852047, 0, 1.5847914530377, 2.07658624888165, 2.62779840842982, 3.16900609499152, 3.70430313207003), par.vals = structure(c(1.19410356771918, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 0.0145810141529953, 0.24263452560295, 0.470688037052905, 0.562956252821107, 0.683253495496408, 0.823187854524599, 0.98897386701965), .Dim = c(7L, 2L), .Dimnames = list(NULL, c('a', 'b')))), .Names = c('tau', 'par.vals')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes3_1aa430145ddb87a453eaf87d3c82ac11() {
        assertEval("argv <- list(structure(list(x = c(55, 55.4, 55.8, 56.2, 56.6, 57, 57.4, 57.8, 58.2, 58.6, 59, 59.4, 59.8, 60.2, 60.6, 61, 61.4, 61.8, 62.2, 62.6, 63, 63.4, 63.8, 64.2, 64.6, 65, 65.4, 65.8, 66.2, 66.6, 67, 67.4, 67.8, 68.2, 68.6, 69, 69.4, 69.8, 70.2, 70.6, 71, 71.4, 71.8, 72.2, 72.6, 73, 73.4, 73.8, 74.2, 74.6, 75), y = c(NA, NA, NA, NA, NA, NA, NA, NA, 115.348528272371, 116.097056544742, 117, 118.121358638144, 119.369358638144, 120.616754451341, 121.816150264538, 123, 124.196077478756, 125.399549206385, 126.598034046405, 127.793047158796, 129, 130.223726064439, 131.424330251242, 132.555722198323, 133.686509958601, 135, 136.60008742339, 138.253074310999, 139.654076730115, 140.802092261622, 142, 143.481497863021, 145.150710102743, 146.833352023286, 148.446781704108, 150, 151.524882658905, 153.128867127397, 154.93285159589, 156.93285159589, 159, 161.026859361644, 163.013429680822, NA, NA, NA, NA, NA, NA, NA, NA)), .Names = c('x', 'y')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes4_f93386493f4a5f6a28697a0256f47990() {
        assertEval("argv <- list(structure(c(1+1i, 2+1.4142135623731i, 3+1.73205080756888i, 4+2i, 5+2.23606797749979i, 6+2.44948974278318i, 7+2.64575131106459i, 8+2.82842712474619i, 9+3i, 10+3.1622776601684i), id = character(0), class = structure('withId', package = '.GlobalEnv')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes5_5324182e13fb719c21932cc844773123() {
        assertEval("argv <- list(structure(c('o', 'p', 'v', 'i', 'r', 'w', 'b', 'm', 'f', 's'), date = structure(1224086400, class = c('POSIXct', 'POSIXt'), tzone = ''), .S3Class = 'stamped', class = structure('stamped', package = '.GlobalEnv')));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes6_b5da0ca104f0b408b19ff0596419356e() {
        assertEval("argv <- list(structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08, it = 898L, maxit = 5000,     ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes7_e20ed84eef25740977ac77c9dc39ffc5() {
        assertEval("argv <- list(NULL);attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes8_0e1e15d3653f9f90a9220581adc5dc77() {
        assertEval("argv <- list('Error in setClass(\\'class3\\', representation(\\'class1\\', \\'class2\\')) : \\n  error in contained classes (\\'class2\\') for class “class3”; class definition removed from ‘.GlobalEnv’\\n');attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes9_686be18f5d20113a553fdb6fd3e8d8cc() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), .S3Class = 'data.frame', extra = character(0)));attributes(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign1_99fdb96ba57d4a61390aecd2dd80e91a() {
        assertEval("argv <- list(NULL, NULL);`attributes<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign2_dd6c0c71d97a9e1c13c4c26816cc6cd8() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`attributes<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign3_fb43af51dd5ca868167e7ca42f1d90f4() {
        assertEval("argv <- list(NA, value = NULL);`attributes<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign4_bf2b722bef5b6a3b671dee345f89e8ba() {
        assertEval("argv <- list(1:6, value = NULL);`attributes<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign5_d63d100b6eef343732550c12ce558b17() {
        assertEval("argv <- list(c(2.63548374681491, 2.5910646070265, 2.66370092538965, 2.70586371228392, 2.78247262416629, 2.79379038469082, 2.72835378202123, 2.67394199863409, 2.66370092538965, 2.6222140229663, 2.59217675739587, 2.62013605497376, 2.60745502321467, 2.55870857053317, 2.60959440922522, 2.66558099101795, 2.74741180788642, 2.73878055848437, 2.67394199863409, 2.6232492903979, 2.59769518592551, 2.60852603357719, 2.53402610605613, 2.55630250076729, 2.52762990087134, 2.49136169383427, 2.55509444857832, 2.60638136511061, 2.70329137811866, 2.69108149212297, 2.63848925695464, 2.55990662503611, 2.54157924394658, 2.55870857053317, 2.50242711998443, 2.53147891704225, 2.52633927738984, 2.48429983934679, 2.54032947479087, 2.60638136511061, 2.66931688056611, 2.66745295288995, 2.62531245096167, 2.55022835305509, 2.54157924394658, 2.55144999797288, 2.47856649559384, 2.4983105537896, 2.48572142648158, 2.43296929087441, 2.48572142648158, 2.55022835305509, 2.60745502321467, 2.6159500516564, 2.57287160220048, 2.50242711998443, 2.49554433754645, 2.50105926221775, 2.44247976906445, 2.45331834004704, 2.44404479591808, 2.3747483460101, 2.43775056282039, 2.49415459401844, 2.54032947479087, 2.56110138364906, 2.4983105537896, 2.43136376415899, 2.42975228000241, 2.42651126136458, 2.36735592102602, 2.38381536598043, 2.35983548233989, 2.30749603791321, 2.35983548233989, 2.41329976408125, 2.46686762035411, 2.48000694295715, 2.42160392686983, 2.36921585741014, 2.35602585719312, 2.37106786227174, 2.27415784926368, 2.3096301674259, 2.30319605742049, 2.25527250510331, 2.32428245529769, 2.3747483460101, 2.4345689040342, 2.42160392686983, 2.38560627359831, 2.35983548233989, 2.37106786227174, 2.37291200297011, 2.29225607135648, 2.29225607135648, 2.28780172993023, 2.23552844690755, 2.28103336724773, 2.32014628611105, 2.38381536598043, 2.36172783601759, 2.3384564936046, 2.26245108973043, 2.25767857486918, 2.28555730900777, 2.25527250510331, 2.23299611039215, 2.22010808804005, 2.16435285578444, 2.20951501454263, 2.26481782300954, 2.29885307640971, 2.29885307640971, 2.25042000230889, 2.23552844690755, 2.21218760440396, 2.25042000230889, 2.17609125905568, 2.16136800223497, 2.14612803567824, 2.05690485133647, 2.12385164096709, 2.19865708695442, 2.23044892137827, 2.23044892137827, 2.17318626841227, 2.09691001300806, 2.13033376849501, 2.14921911265538, 2.10037054511756, 2.06069784035361, 2.07188200730613, 2.01703333929878, 2.07554696139253, 2.13353890837022, 2.17026171539496, 2.17026171539496, 2.13033376849501, 2.08278537031645, 2.11058971029925, 2.12057393120585, 2.07188200730613, 2.04921802267018), value = structure(list(tsp = c(1949, 1960.91666666667, 12), class = 'ts'), .Names = c('tsp', 'class')));`attributes<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign6_867b0f1e8d3971e8dbde6e10fdab6fc0() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 2, 3), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('I', 'a')), foo = 'bar', class = 'matrix'), value = structure(list(class = 'matrix', foo = 'bar', dimnames = list(NULL, c('I', 'a')), dim = c(3L, 2L)), .Names = c('class', 'foo', 'dimnames', 'dim')));`attributes<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinattributesassign__testattributesassign_1_22a4cf353cdd2268046d1d2d5d7191eb() {
        assertEval("argv <- structure(list(structure(list(), class = structure('L',     package = '.GlobalEnv')), value = NULL), .Names = c('', 'value'));do.call('attributes<-', argv)");
    }

    @Test
    public void TestrGenBuiltinbacksolve_testbacksolve1_5ee3505c4c1ea73736916d63ec9ac952() {
        assertEval("argv <- list(structure(c(-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0421675318334475, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0421675318334475, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.445407110781343, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510819156714975, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510819156714975, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510819156714975, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592753100948471, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.428419619610855, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.252201198430086, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.428419619610855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510819156714975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592753100948472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592753100948472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, -0.252201198430086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, -0.252201198430086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, -0.0421675318334475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, -0.0421675318334475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, -0.0486697428190666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, -0.0486697428190666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, -0.0486697428190666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, -0.0486697428190666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.935285871700694), .Dim = c(22L, 22L), .Dimnames = list(c('StripS01', 'StripS02', 'StripS03', 'StripS04', 'StripS05', 'StripS06', 'StripS07', 'StripS08', 'StripS09', 'StripS10', 'StripS11', 'StripS12', 'StripS13', 'StripS14', 'StripS15', 'StripS16', 'StripS17', 'StripS18', 'StripS19', 'StripS20', 'StripS21', ''), c('3', '4', '5', '6', '9', '10', '11', '12', '13', '14', '15', '16', '19', '20', '21', '25', '26', '27', '31', '32', '33', '39'))), structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00019677474442243), .Dim = c(22L, 1L)), 22L, FALSE, FALSE); .Internal(backsolve(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinbacksolve_testbacksolve2_3893cbdf564a0850304c651909a2e046() {
        assertEval("argv <- list(structure(c(-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0421590411210753, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0421590411210753, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.445373554228914, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510781706167877, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510781706167877, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510781706167877, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592635069735823, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.428392065749892, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.252172670570357, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.428392065749892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510781706167877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592635069735823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592635069735823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, -0.252172670570357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, -0.252172670570357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, -0.0421590411210753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, -0.0421590411210753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, -0.0486599542810648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, -0.0486599542810647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, -0.0486599542810648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, -0.0486599542810648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.935253697073914), .Dim = c(22L, 22L), .Dimnames = list(c('StripS01', 'StripS02', 'StripS03', 'StripS04', 'StripS05', 'StripS06', 'StripS07', 'StripS08', 'StripS09', 'StripS10', 'StripS11', 'StripS12', 'StripS13', 'StripS14', 'StripS15', 'StripS16', 'StripS17', 'StripS18', 'StripS19', 'StripS20', 'StripS21', ''), c('3', '4', '5', '6', '9', '10', '11', '12', '13', '14', '15', '16', '19', '20', '21', '25', '26', '27', '31', '32', '33', '39'))), structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.20033559004316e-05), .Dim = c(22L, 1L)), 22L, FALSE, FALSE); .Internal(backsolve(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinbacksolve_testbacksolve3_693d57e0a462d771e6a8554ddcc2183a() {
        assertEval("argv <- list(structure(c(-0.91092349872819, -1.26769315823132, 0, -1.11965595698793), .Dim = c(2L, 2L)), structure(c(-0.000210872744086474, 0.000210873298561107), .Dim = c(2L, 1L)), 2L, FALSE, FALSE); .Internal(backsolve(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinbasename_testbasename1_b0e9f4ccb9f444e50250d5e015d631b4() {
        assertEval("argv <- list('/home/roman/r-instrumented/library/base/help/DateTimeClasses'); .Internal(basename(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbasename_testbasename2_35c475ed272bb37ab934ec1d731ac883() {
        assertEval("argv <- list(structure('myTst', .Names = '')); .Internal(basename(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbasename_testbasename3_e6c86391f62d1c46d448e4d77b5da234() {
        assertEval("argv <- list(c('file55711ba85492.R', '/file55711ba85492.R')); .Internal(basename(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbasename_testbasename4_985d5562280f6fa4c859c4f1de2ce238() {
        assertEval("argv <- list(character(0)); .Internal(basename(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbasename_testbasename5_ee1c249cadc9005aac1e41985aac5156() {
        assertEval("argv <- list(structure('/home/lzhao/hg/r-instrumented/library/utils', .Names = 'Dir')); .Internal(basename(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbasename_testbasename6_d3f4384d0456172037d60db03cb9894a() {
        assertEval("argv <- list('tk_messageBox.Rd'); .Internal(basename(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbasename_testbasename7_d49399c80a66452a6e31418f3c99ff89() {
        assertEval("argv <- list(cdata', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'data', 'inst', 'inst', 'inst/doc', 'inst/doc', 'inst/doc', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'man', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb/figures', 'noweb/figures', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb/rates', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'noweb', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'src', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'tests', 'vignettes', 'vignettes', 'vignettes')); .Internal(basename(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbasename_testbasename9_7768e8815e35952ffb16e4ac1fb52c77() {
        assertEval("argv <- structure(list(path = 'myTst'), .Names = 'path');do.call('basename', argv)");
    }

    @Test
    public void TestrGenBuiltinbcVersion_testbcVersion1_729bb985e45c4d519860190fb06be4f8() {
        assertEval(" .Internal(bcVersion())");
    }

    @Test
    public void TestrGenBuiltinbesselI_testbesselI1_c5436c69ddc343ef1a18f4a59c2ba9be() {
        assertEval("argv <- list(FALSE, FALSE, 1); .Internal(besselI(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinbesselI_testbesselI2_56930bf6e5bb6a9cab80491083105b87() {
        assertEval("argv <- list(logical(0), logical(0), 1); .Internal(besselI(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinbesselJ_testbesselJ1_8bea88bac4fe5a1faffa80aa611e7ac7() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(besselJ(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbesselJ_testbesselJ2_f6dd8d79d9f0e261e4301bacbcb9ba3e() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(besselJ(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbesselJ_testbesselJ3_09686dced4665337d6e44904ca794b90() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), 2.5); .Internal(besselJ(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbesselK_testbesselK1_4ffe35847579aa54f93d6f2f4ffcecca() {
        assertEval("argv <- list(FALSE, FALSE, 1); .Internal(besselK(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinbesselK_testbesselK2_f0b03c5877b9cab6dc1769f67437773e() {
        assertEval("argv <- list(logical(0), logical(0), 1); .Internal(besselK(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinbesselK_testbesselK3_f5a232be0559e3c6e7bf8beb20e9c397() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), 3, 1); .Internal(besselK(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinbesselK_testbesselK4_c8f80482f9b97234e6627d284f49d204() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), 3.5, 1); .Internal(besselK(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinbesselY_testbesselY1_2549a2d2eb9b4979431ff63fd45c822c() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), 20.5); .Internal(besselY(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbesselY_testbesselY2_342040860b9d1b3bd1d5accfa4eb4519() {
        assertEval("argv <- list(2, c(3, 8.94, 14.88, 20.82, 26.76, 32.7, 38.64, 44.58, 50.52, 56.46, 62.4, 68.34, 74.28, 80.22, 86.16, 92.1, 98.04, 103.98, 109.92, 115.86, 121.8, 127.74, 133.68, 139.62, 145.56, 151.5, 157.44, 163.38, 169.32, 175.26, 181.2, 187.14, 193.08, 199.02, 204.96, 210.9, 216.84, 222.78, 228.72, 234.66, 240.6, 246.54, 252.48, 258.42, 264.36, 270.3, 276.24, 282.18, 288.12, 294.06, 300)); .Internal(besselY(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbesselY_testbesselY3_921e6908d967f09d63ec52e6a52145f7() {
        assertEval("argv <- list(c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10), -0.2); .Internal(besselY(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbesselY_testbesselY4_89fd2343995ff9367e3bad0f94f0c0cc() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(besselY(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbeta_testbeta1_198092df6f4981dfea50a44b5128f572() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(beta(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbeta_testbeta2_b1b30c00bfaa20461c510f1709b9e6e6() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(beta(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbeta_testbeta4_25e19750b10a7810737253cbf8c38dda() {
        assertEval("argv <- structure(list(a = 0.01, b = 171), .Names = c('a', 'b'));do.call('beta', argv)");
    }

    @Test
    public void TestrGenBuiltinbeta_testbeta5_63f4fae1f746b3b5fa05418759f95209() {
        assertEval("argv <- structure(list(a = 1e-200, b = 1e-200), .Names = c('a',     'b'));do.call('beta', argv)");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode1_e436ea1d3aaab4fefa12e74d662f7f1e() {
        assertEval("argv <- list(c(-1, -1, -1, -1, -1), c(-1.001, -1, -0.999), TRUE, FALSE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode2_b6b741af966ede0491e114e53bae64a0() {
        assertEval("argv <- list(c(8.70599232813489e-06, 7.24187268717448e-10, 7.84878459581784e-14), c(0, 0.001, 0.01, 0.05, 0.1, 1), TRUE, TRUE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode3_abc0e4f9c61cf542638957a3c2d9769d() {
        assertEval("argv <- list(c(0.00316901674455053, 0.000313731190323184, 2.12051012154177e-05, 0.000158772845963692), c(0, 0.001, 0.01, 0.05, 0.1, 1), TRUE, TRUE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode4_7763740072b90c291fec944f5de861a4() {
        assertEval("argv <- list(c(NA, 0.0654707112145736, 0.999999999999999), c(0, 0.001, 0.01, 0.05, 0.1, 1), TRUE, TRUE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode5_3c74b1204b51b8fcc56aa5910ae2c82b() {
        assertEval("argv <- list(structure(c(3.00863041155973, 0.411191886071604, -0.690490615408105, -4.08011169113016, -1.74096111020938, 0.149871643848704, -0.617403399223794, 1.77225991336381, 0.70873696276922, 0.831384833755618, 0.760421822835713, -1.43576852408133, -1.06684579764157, 0.112230570314199, 1.7784773190779, 0.601241755061942, 3.2084694607557, 1.30812378137844, 0.548795030131126, -4.19457515085108, -2.57754314942853, -2.82255910587143, -1.79648698551886, 8.02186933983834, -1.32562596449111, 1.07620193452922, 0.454145574974766, -1.70834615344098, -1.67960999025708, -0.580565722061994, 1.46027792034151, 0.274978829340024), class = 'table', .Dim = c(4L, 4L, 2L), .Dimnames = structure(list(Hair = c('Black', 'Brown', 'Red', 'Blond'), Eye = c('Brown', 'Blue', 'Hazel', 'Green'), Sex = c('Male', 'Female')), .Names = c('Hair', 'Eye', 'Sex'))), c(-Inf, -4, -2, 0, 2, 4, Inf), TRUE, FALSE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode6_6f46fc965845d88d707b390d6d15afbb() {
        assertEval("argv <- list(c(4L, 8L, 7L, 4L, 8L, 7L, NA, 7L, 6L, 7L, 7L, 8L, 8L, 6L, 7L, 8L, 5L, 4L, 8L, 7L, 5L, 6L, 5L, 6L, 5L, 6L, 7L, 6L, 5L, 7L, 4L, 6L, 6L, 5L, 7L, 5L, 5L, 6L, 6L, 6L, 5L, 7L, 5L, 7L, 5L, 3L, 7L, 6L, 5L, 5L, 6L, 5L, 5L, 6L, 10L, 10L, 6L, 3L, 5L, 8L, 7L, 5L, 6L, 5L, 5L, 5L, 6L, 5L, 6L, 5L, 5L, 6L, 7L, 7L, 6L, 7L, 7L, 8L, 9L, 7L, 8L, 6L, 4L, 7L, 7L, 6L, NA, 8L, 5L, 7L, 6L, 5L, NA, 7L, 6L, 7L, 7L, 9L, 5L, 8L, 6L, 8L, 9L, 6L, 6L, 7L, 8L, 8L, 8L, 7L, 8L, 7L, 6L, 6L, 9L, 7L, 6L, 8L, 5L, 7L, 8L, 8L, 7L, 7L, 7L, 8L, 5L, 6L, 6L, 5L, 7L, 5L, 7L, 7L, 4L, 5L, 8L, 5L, 5L, 6L, 7L, 5L, 9L, 5L, 6L, 7L), c(2, 5.5, 10), TRUE, FALSE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinbindtextdomain_testbindtextdomain1_bcf59789c1abf6ce64eef4f6f8a0b970() {
        assertEval("argv <- list('splines', '/home/roman/r-instrumented/library/translations'); .Internal(bindtextdomain(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbindtextdomain_testbindtextdomain2_8961295a914ee0581df6a90cb6841dd6() {
        assertEval("argv <- list('utils', '/home/lzhao/hg/r-instrumented/library/translations'); .Internal(bindtextdomain(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbitwiseAnd_testbitwiseAnd1_aa2f5a12e5456739afbe05df58e66002() {
        assertEval("argv <- list(structure(cclass = 'octmode'), structure(256L, class = 'octmode')); .Internal(bitwiseAnd(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbitwiseAnd_testbitwiseAnd2_8337f9a47e6be7ee56fb9e4048479be1() {
        assertEval("argv <- list(structure(integer(0), class = 'hexmode'), structure(integer(0), class = 'hexmode')); .Internal(bitwiseAnd(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbitwiseNot_testbitwiseNot1_6f4621a85f41aeed410087846823e620() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(bitwiseNot(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbitwiseOr_testbitwiseOr1_2fc068352a4607103b67148f6f3ad61c() {
        assertEval("argv <- list(15L, 7L); .Internal(bitwiseOr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbitwiseShiftR_testbitwiseShiftR1_ca7b2aa43f08bec7efe9c8fed9d5d0b7() {
        assertEval("argv <- list(-1, 1:31); .Internal(bitwiseShiftR(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbitwiseXor_testbitwiseXor1_67d355fb00ab2f9ad9cb963a329fe194() {
        assertEval("argv <- list(-1L, 1L); .Internal(bitwiseXor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinbody_testbody1_10aef9003d5613516e7b26cc2253360b() {
        assertEval("argv <- list(function (x, y) {    c(x, y)}); .Internal(body(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbody_testbody2_a717bfb76f7c264fe48c9545caa714cb() {
        assertEval("argv <- list(function (object) TRUE); .Internal(body(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbody_testbody3_0411bf3456f1132e57c60df35346ad29() {
        assertEval("argv <- list(function (from, strict = TRUE) from); .Internal(body(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbody_testbody4_b7e309a14448bf6e2de664cba5aa149e() {
        assertEval("argv <- list(.Primitive('/')); .Internal(body(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbody_testbody5_92c7242ae7caa2e085ae9b673fca3e9e() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame')); .Internal(body(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinbody_testbody6_48c67548bbabd5fee445f7c4e3598da6() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(body(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinc_testc1_13cfabacc8bd29f58d0bc467e1990b21() {
        assertEval("argv <- list(character(0), 'myLib/myTst');c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc10_3698492e4eab2b3a3a2db687ff216bec() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'supply both 'x' and 'y' or a matrix-like 'x'', call = quote(cor(rnorm(10), NULL))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc11_18e746bcf752350618eea6b9c4c7a53d() {
        assertEval("argv <- list(`(Intercept)` = '(Intercept)', structure(list(B = 'B', V = 'V', N = 'N', `V:N` = c('V', 'N'), Residuals = c('B', 'V', 'N', 'Within')), .Names = c('B', 'V', 'N', 'V:N', 'Residuals')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc12_893306f4fa3242de50b85b43428340ed() {
        assertEval("argv <- list(structure(c(512, 313, 89, 19, 353, 207, 17, 8, 120, 205, 202, 391, 138, 279, 131, 244, 53, 138, 94, 299, 22, 351, 24, 317), .Dim = c(2L, 2L, 6L), .Dimnames = structure(list(Admit = c('Admitted', 'Rejected'), Gender = c('Male', 'Female'), Dept = c('A', 'B', 'C', 'D', 'E', 'F')), .Names = c('Admit', 'Gender', 'Dept')), class = 'table'));c(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc13_7e670b990ae67b0f24254abc7119fa3c() {
        assertEval("argv <- list(structure(1208822400, class = c('POSIXct', 'POSIXt')), structure(1209168000, class = c('POSIXct', 'POSIXt')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc14_506a02475a8de3228c830a64becefd5c() {
        assertEval("argv <- list(`Grand mean` = structure(103.87323943662, class = 'mtable'), structure(list(N = structure(c(78.7365206866197, 98.5088731171753, 113.842206450509, 123.008873117175), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'), class = 'mtable'), `V:N` = structure(c(79.5323303457107, 86.1989970123773, 69.7732394366197, 98.0323303457106, 108.032330345711, 89.1989970123773, 114.198997012377, 116.698997012377, 110.365663679044, 124.365663679044, 126.365663679044, 118.032330345711), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')), class = 'mtable')), .Names = c('N', 'V:N')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc15_d681f80055f55318ccbe86713f7dbd71() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rexp(2, numeric()))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc16_cd54788a659f2aca50dc077592d10374() {
        assertEval("argv <- list(NULL, structure(list(other = structure(1:3, .Label = c('A', 'B', 'C'), class = 'factor')), .Names = 'other'));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc17_f979dcbdb473f6307110c9317151fe3b() {
        assertEval("argv <- list(logical(0), structure(1:10, .Tsp = c(1920.5, 1921.25, 12), class = 'ts'), logical(0));c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc18_19851a01de6938ae0a9873f9fa8a09ee() {
        assertEval("argv <- list(structure(list(V1 = c(1L, 1L, 2L, 3L), V2 = structure(c(1L, 1L, 2L, 3L), .Label = c('A', 'D', 'E'), class = 'factor'), V3 = c(6, 6, 9, 10)), .Names = c('V1', 'V2', 'V3'), row.names = c(NA, 4L), class = 'data.frame'), sep = '\\r');c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc19_2e8d0282a0a7bbf02c3a617d2e01bb12() {
        assertEval("argv <- list(10L, NULL, 10);c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc2_89de936e2b3fdf73e2ca207e161dcab3() {
        assertEval("argv <- list(structure(list(names = c('x', 'z')), .Names = 'names'), structure(list(class = 'data.frame', row.names = c(NA, 10L)), .Names = c('class', 'row.names')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc20_9d3caf528f6a98a69bf26725a8ebc298() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'non-numeric argument to mathematical function', call = quote(log('a'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc21_45e9d2fc217e3ac6ce4f45742d3e75e0() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = ''x' is empty', call = quote(cor(Z[, FALSE], use = 'pairwise.complete.obs', method = 'kendall'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc22_55e3dd5f98ae0d4f5b719e08fbb043f4() {
        assertEval("argv <- list(structure(list(N = structure(c(17, 18, 18, 18), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'))), .Names = 'N'), structure(list(`V:N` = structure(c(6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')))), .Names = 'V:N'));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc23_ebe18420191ea2a9cfe95c94ce2daf01() {
        assertEval("argv <- list(list(NULL), list(NULL, c('a', 'b', 'c'), NULL, c('V5', 'V6', 'V7', 'V8', 'V9')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc24_60d55ae1b0437e9ee8d5ce03bfda13c5() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'undefined columns selected', call = quote(`[.data.frame`(dd, , 'C'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc25_b0de35f7a0b133ecefc289a9555804c4() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'line 1 did not have 4 elements', call = quote(scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, flush, fill, strip.white, quiet, blank.lines.skip, multi.line, comment.char, allowEscapes, encoding))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc26_3eba3e0f23b04fef5933a6407aeed831() {
        assertEval("argv <- list(0, c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc27_19251159fdd9844c75a3c7bc69d316b4() {
        assertEval("argv <- list(character(0));c(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc28_273f26b579648467b0e4eb9c9ecab497() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc29_3d344ae004452d07033b1fa656a9b7b6() {
        assertEval("argv <- list(1944, 1944.75, 4);c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc3_5439a00c192768df623645c6942391d2() {
        assertEval("argv <- list(0.1, 1e+60);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc30_f7132b514812013e2045b7d520186ae2() {
        assertEval("argv <- list(structure(c(2.8709968773466e-06, -0.000158359165766342, 0.00727428858396739, -0.000819679205658397, -0.000777694946526408, -0.00356554678621684, 0.000131355545630207, 0.0114265093267527, -0.000158359165766342, 5.43254707707774e-06, -0.000158630865337517, 9.73709585506688e-05, 0.000111529300368063, 5.13485783500411e-05, -6.33871099330885e-05, -0.000383481109923256, 0.00727428858396739, -0.000158630865337517, -1.56486391901245e-05, -0.00236056684784514, -0.00652700637569598, 0.00050199030070891, 0.00218994696407579, 0.0203300594009954, -0.000819679205658397, 9.73709585506688e-05, -0.00236056684784514, 7.93209373295412e-07, 0.00187235412049774, 0.00143329638746881, -3.6749249077872e-05, -0.0118829190788863, -0.000777694946526408, 0.000111529300368063, -0.00652700637569598, 0.00187235412049774, 4.25289264915918e-06, 0.00235407805712873, -0.000833270910443051, -0.00229252218256459, -0.00356554678621684, 5.13485783500411e-05, 0.00050199030070891, 0.00143329638746881, 0.00235407805712873, -3.00860514170775e-05, -0.00105162168837414, -0.00640852176345075, 0.000131355545630207, -6.33871099330885e-05, 0.00218994696407579, -3.6749249077872e-05, -0.000833270910443051, -0.00105162168837414, 2.63610545947479e-06, 0.00637158302982355, 0.0114265093267527, -0.000383481109923256, 0.0203300594009954, -0.0118829190788863, -0.00229252218256459, -0.00640852176345075, 0.00637158302982355, -9.55643771360926e-05), .Dim = c(8L, 8L), .Dimnames = list(c('height', 'arm.span', 'forearm', 'lower.leg', 'weight', 'bitro.diameter', 'chest.girth', 'chest.width'), c('height', 'arm.span', 'forearm', 'lower.leg', 'weight', 'bitro.diameter', 'chest.girth', 'chest.width'))));c(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc31_1e2061d029a9a9798a1c732e6f59bdfe() {
        assertEval("argv <- list(c(-Inf, 2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, Inf), c(NaN, NA));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc32_19414b3d9b13941cbdfc7060dde57232() {
        assertEval("argv <- list(list(structure(list(Ozone = c(NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), Solar.R = c(286L, 287L, 242L, 186L, 220L, 264L, 127L, 273L, 291L, 323L, 259L, 250L, 148L, 332L, 322L, 191L, 284L, 37L, 120L, 137L, 150L, 59L, 91L, 250L, 135L, 127L, 47L, 98L, 31L, 138L), Wind = c(8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8), Temp = c(78L, 74L, 67L, 84L, 85L, 79L, 82L, 87L, 90L, 87L, 93L, 92L, 82L, 80L, 79L, 77L, 72L, 65L, 73L, 76L, 77L, 76L, 76L, 76L, 75L, 78L, 73L, 80L, 77L, 83L), Month = c(6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), Day = 1:30), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day'), row.names = 32:61, class = 'data.frame')), structure(list(Oz.Z = structure(c(NA, NA, NA, NA, NA, NA, -0.0244094233987339, NA, 2.28228108778162, 0.52480260307278, NA, NA, -0.353936639281642, NA, NA, -0.463779044575945, 0.414960197778477, -0.518700247223096, -0.958069868400307, -0.903148665753156, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = c(30L, 1L), '`scaled:center`' = 29.4444444444444, '`scaled:scale`' = 18.2079042664931)), .Names = 'Oz.Z'));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc33_a6db28e5d98589dc140cdbda8dcd24d2() {
        assertEval("argv <- list(list('*', ' ', 'skipping installation test', '\\n'), sep = '');c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc34_6bcf95c4824c94b3fc52cca45fff89d1() {
        assertEval("argv <- list('exNSS4', 'myLib', structure(c('1.0', NA, 'methods', NA, NA, NA, NA, 'GPL (>= 2)', NA, NA, NA, NA, NA, NA, '3.0.1'), .Names = c('Version', NA, 'Depends', NA, NA, NA, NA, 'License', NA, NA, NA, NA, NA, NA, 'Built')));c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc35_567fe3a2d0c2420533a1e239f41ba3cf() {
        assertEval("argv <- list(c('‘?’ for shortcuts to help topics.', '', '  ‘help.search()’ or ‘??’ for finding help pages', '  on a vague topic;', '  ‘help.start()’ which opens the HTML version of the R', '  help pages;', '  ‘library()’ for listing available packages and the', '  help objects they contain;', '  ‘data()’ for listing available data sets;', '  ‘methods()’.', '', '  Use ‘prompt'), character(0));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc36_a3da20c87d79ce1832a2dd3463ab8e78() {
        assertEval("argv <- list(-1, 0+1i);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc37_4cf3f505662cdb08290f624bf14b15ff() {
        assertEval("argv <- list(c(0, 1, 1.3, 1.8, 2.4), 4.6, NULL);c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc38_c6e0f3056b83a22a71c0ff698798f73e() {
        assertEval("argv <- list(raw(0), 61);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc39_c59c5db7a032e1ed28c2c178902823e9() {
        assertEval("argv <- list(structure(list(c(1L, 2L, 4L), 1:3, c(2L, 1L)), class = c('package_version', 'numeric_version')));c(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc4_3468a5495f4d4cd88cde14736d1044c1() {
        assertEval("argv <- list(1, 1, 1, 1, NA);c(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc40_60e271cb617f781421be07103c224874() {
        assertEval("argv <- list(structure(list(A = 1, c = 'C'), .Names = c('A', 'c')), d = 1:3);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc41_c4b3650a24121cf377e32a42c7b605bf() {
        assertEval("argv <- list(structure(list(1:3), class = c('package_version', 'numeric_version')), structure(list(c(2L, 1L)), class = c('package_version', 'numeric_version')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc42_9f902e92152903b224f13251c0b10562() {
        assertEval("argv <- list(structure(list(Ozone = c(41L, 36L, 12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L, 14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L, 45L, 115L, 37L, NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 135L, 49L, 32L, NA, 64L, 40L, 77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L, 79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L, 59L, 39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA, 44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA, 45L, 168L, 73L, NA, 76L, 118L, 84L, 85L, 96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L), Solar.R = c(190L, 118L, 149L, 313L, NA, NA, 299L, 99L, 19L, 194L, NA, 256L, 290L, 274L, 65L, 334L, 307L, 78L, 322L, 44L, 8L, 320L, 25L, 92L, 66L, 266L, NA, 13L, 252L, 223L, 279L, 286L, 287L, 242L, 186L, 220L, 264L, 127L, 273L, 291L, 323L, 259L, 250L, 148L, 332L, 322L, 191L, 284L, 37L, 120L, 137L, 150L, 59L, 91L, 250L, 135L, 127L, 47L, 98L, 31L, 138L, 269L, 248L, 236L, 101L, 175L, 314L, 276L, 267L, 272L, 175L, 139L, 264L, 175L, 291L, 48L, 260L, 274L, 285L, 187L, 220L, 7L, 258L, 295L, 294L, 223L, 81L, 82L, 213L, 275L, 253L, 254L, 83L, 24L, 77L, NA, NA, NA, 255L, 229L, 207L, 222L, 137L, 192L, 273L, 157L, 64L, 71L, 51L, 115L, 244L, 190L, 259L, 36L, 255L, 212L, 238L, 215L, 153L, 203L, 225L, 237L, 188L, 167L, 197L, 183L, 189L, 95L, 92L, 252L, 220L, 230L, 259L, 236L, 259L, 238L, 24L, 112L, 237L, 224L, 27L, 238L, 201L, 238L, 14L, 139L, 49L, 20L, 193L, 145L, 191L, 131L, 223L), Wind = c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5, 9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4, 8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8, 4.1, 9.2, 9.2, 10.9, 4.6, 10.9, 5.1, 6.3, 5.7, 7.4, 8.6, 14.3, 14.9, 14.9, 14.3, 6.9, 10.3, 6.3, 5.1, 11.5, 6.9, 9.7, 11.5, 8.6, 8, 8.6, 12, 7.4, 7.4, 7.4, 9.2, 6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3, 8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9, 10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3, 6.3, 6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7, 14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6, 9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), Temp = c(67L, 72L, 74L, 62L, 56L, 66L, 65L, 59L, 61L, 69L, 74L, 69L, 66L, 68L, 58L, 64L, 66L, 57L, 68L, 62L, 59L, 73L, 61L, 61L, 57L, 58L, 57L, 67L, 81L, 79L, 76L, 78L, 74L, 67L, 84L, 85L, 79L, 82L, 87L, 90L, 87L, 93L, 92L, 82L, 80L, 79L, 77L, 72L, 65L, 73L, 76L, 77L, 76L, 76L, 76L, 75L, 78L, 73L, 80L, 77L, 83L, 84L, 85L, 81L, 84L, 83L, 83L, 88L, 92L, 92L, 89L, 82L, 73L, 81L, 91L, 80L, 81L, 82L, 84L, 87L, 85L, 74L, 81L, 82L, 86L, 85L, 82L, 86L, 88L, 86L, 83L, 81L, 81L, 81L, 82L, 86L, 85L, 87L, 89L, 90L, 90L, 92L, 86L, 86L, 82L, 80L, 79L, 77L, 79L, 76L, 78L, 78L, 77L, 72L, 75L, 79L, 81L, 86L, 88L, 97L, 94L, 96L, 94L, 91L, 92L, 93L, 93L, 87L, 84L, 80L, 78L, 75L, 73L, 81L, 76L, 77L, 71L, 71L, 78L, 67L, 76L, 68L, 82L, 64L, 71L, 81L, 69L, 63L, 70L, 77L, 75L, 76L, 68L), Month = c(5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L), Day = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L)), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day'), row.names = c(NA, -153L)), list(NULL, NULL));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc43_d815967bd21a32cecae15d8138588d5e() {
        assertEval("argv <- list(list(structure(list(u = c(5, 10, 15, 20, 30, 40, 60, 80, 100), lot1 = c(118, 58, 42, 35, 27, 25, 21, 19, 18), lot2 = c(69, 35, 26, 21, 18, 16, 13, 12, 12)), .Names = c('u', 'lot1', 'lot2'), row.names = c(NA, -9L), class = 'data.frame')), structure(list(max.level = 0, give.attr = FALSE, digits = 3), .Names = c('max.level', 'give.attr', 'digits')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc44_241c155db6e02bde18e0d42fda6000db() {
        assertEval("argv <- list(list(structure(list(structure('vpl1', class = c('vpListing', 'gridVectorListing', 'gridListing')), structure('1', class = c('vpUpListing', 'gridVectorListing', 'gridListing'))), class = c('gridListListing', 'gridListing'))), list(structure('vpl2', class = c('vpListing', 'gridVectorListing', 'gridListing'))));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc45_a7053499cff365625c19f72d0a95cb06() {
        assertEval("argv <- list(1, c(2, 3, 4, 6, 7, 8, 9, 10, 11), c(3, 4, 5, 7, 8, 9, 10, 11), 11L);c(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc46_9dfeee2c774468fd357e08f782bd5ecf() {
        assertEval("argv <- list(TRUE, NULL);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc47_511cd66c3787d8fd558056bdeccd99e1() {
        assertEval("argv <- list(NULL, structure(list(names = structure('stats', .Names = 'name')), .Names = 'names'));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc48_4853cf805bc044ab020c2920dccc4fb7() {
        assertEval("argv <- list(list(c('foo', 'bar'), FALSE, structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), 0+1i, list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), c(1, 2, 3, 4, 5), 1, structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), structure(c(1, 3, 2, 4), .Dim = c(2L, 2L))), list(structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc49_f69e518ac26a9bd750cefa243054199a() {
        assertEval("argv <- list(cstructure(c(3.3032627879465, 3.28768675817403, 3.28198500972868, 3.26064954685429, 3.28230636466286, 3.29427556805693, 3.28140319515598, 3.31501132729969, 3.29996451963546, 3.3405648068776, 3.3615463372345, 3.37238152179651, 3.32652089130696, 3.31449399159178, 3.31051950313397, 3.29704421073007, 3.31063284281209, 3.31814807478072, 3.3100622663054, 3.33117177869743, 3.32172069914554, 3.34722215914612, 3.36040087649739, 3.36720656884446), .Tsp = c(1983, 1984.91666666667, 12), class = 'ts'), logical(0));c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc5_b887175dd6869fa3dff94a8556d5412b() {
        assertEval("argv <- list(`difference in location` = -30);c(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc50_51796413bfa878aeb051e63ebcfa741c() {
        assertEval("argv <- list(1, 1, 1, list());c(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc51_fb4a174c4ea6283b35ecc00d37667108() {
        assertEval("argv <- list(list('1: In matrix(1:7, 3, 4) :\\n  data length [7] is not a sub-multiple or multiple of the number of rows [3]'), list(), fill = TRUE);c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc52_fcc9c300ec65b3e4f07bcdf63f232eea() {
        assertEval("argv <- list(structure(list(names = c('freq', 'score')), .Names = 'names'), structure(list(class = 'data.frame', row.names = integer(0)), .Names = c('class', 'row.names')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc53_1a42cd3ad426a1d642bbe6fa20891a69() {
        assertEval("argv <- list(1, FALSE, c(0, 0));c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc54_f4bae288fc7fe03624de7ec4a21e4653() {
        assertEval("argv <- list(structure(list(x = structure(1:8, .Dim = structure(8L, .Names = 'voice.part'))), .Names = 'x'), list(4));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc55_3c62d89c46bca1326a5d310b28821c2e() {
        assertEval("argv <- list(c(1L, 2L, 3L, NA), c(-1, 0, 1, NA));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc56_54a85870042357920fc143339f08944b() {
        assertEval("argv <- list(369.430769230769, 4.99999999999983);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc57_d343b21f361fd447fcf56deba09d9d4d() {
        assertEval("argv <- list(structure(list(structure(list(title = 'boot: Bootstrap R (S-PLUS) Functions', author = structure(list(structure(list(given = 'Angelo', family = 'Canty', role = 'aut', email = NULL, comment = 'S original'), .Names = c('given', 'family', 'role', 'email', 'comment')), structure(list(given = c('Brian', 'D.'), family = 'Ripley', role = c('aut', 'trl', 'cre'), email = 'ripley@stats.ox.ac.uk', comment = 'R port, author of parallel support'), .Names = c('given', 'family', 'role', 'email', 'comment'))), class = 'person'),     year = '2012', note = 'R package version 1.3-4', url = 'http://CRAN.R-project.org/package=boot'), .Names = c('title', 'author', 'year', 'note', 'url'), bibtype = 'Manual', key = 'boot-package')), class = 'bibentry'), structure(list(structure(list(title = 'Bootstrap Methods and Their Applications', author = structure(list(structure(list(given = c('Anthony', 'C.'), family = 'Davison', role = 'aut', email = NULL, comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment')), structure(list(    given = c('David', 'V.'), family = 'Hinkley', role = 'aut', email = NULL, comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment'))), class = 'person'), year = '1997', publisher = 'Cambridge University Press', address = 'Cambridge', isbn = '0-521-57391-2', url = 'http://statwww.epfl.ch/davison/BMA/'), .Names = c('title', 'author', 'year', 'publisher', 'address', 'isbn', 'url'), bibtype = 'Book', key = 'boot-book')), class = 'bibentry'));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc58_ec41b36f831777a5bfba1046ce677d54() {
        assertEval("argv <- list(FALSE, 'More testing :', 12321, 'B2');c(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc59_3ceb19f8e0a0e07c75cb452291b640e1() {
        assertEval("argv <- list(1:10, 1+1i, TRUE);c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc6_47528a867859be6d38e0248c312e4a49() {
        assertEval("argv <- list(TRUE, TRUE, NA);c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc60_bac10ed91f2d379457d8681c2f5cb7cd() {
        assertEval("argv <- list('ArgMethod', 1.10714871779409);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc61_2dc91c47b53879aa7acf309eb1a19905() {
        assertEval("argv <- list(structure(list(`ANY#ANY` = .Primitive('==')), .Names = 'ANY#ANY'), list());c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc62_4d5c64f82c088f7a9e8890c4de4d4ba6() {
        assertEval("argv <- list(list(), list());c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc63_6019f3287e9a3c9ebd97981881fcad29() {
        assertEval("argv <- list(recursive = TRUE);c(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc64_33cd5cddf08f0b34a933c44cf32ac58a() {
        assertEval("argv <- list(structure(1386393974.25184, class = c('POSIXct', 'POSIXt')), structure(1386393974.25184, class = c('POSIXct', 'POSIXt')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc65_c46ca5c243b7191eb1a8cf838f2a7243() {
        assertEval("argv <- list('BiocInstaller', '/home/lzhao/R/x86_64-unknown-linux-gnu-library/3.0', structure(c('1.12.0', NA, 'R (>= 3.0.0)', NA, NA, 'RUnit, BiocGenerics', NA, 'Artistic-2.0', NA, NA, NA, NA, NA, NA, '3.0.1'), .Names = c('Version', NA, 'Depends', NA, NA, 'Suggests', NA, 'License', NA, NA, NA, NA, NA, NA, 'Built')));c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc66_3fe042b74973c25d18eb57fb1df2e6c1() {
        assertEval("argv <- list(NA, 1+2i);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc67_6490c980148fcca0cf688502481f5377() {
        assertEval("argv <- list(structure(c(0.06, 0.32, 0.63), .Names = c('0%', '25%', '50%')), 909.591818181818, structure(c(0.905, 10000), .Names = c('75%', '100%')));c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc68_22e89a3f186018b9dbeccbebe1a88eea() {
        assertEval("argv <- list(structure(list(ctrl = c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14), trt1 = c(4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69), trt2 = c(6.31, 5.12, 5.54, 5.5, 5.37, 5.29, 4.92, 6.15, 5.8, 5.26)), .Dim = 3L, .Dimnames = list(c('ctrl', 'trt1', 'trt2'))));c(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc69_263623649920155074b6af0ed973bd50() {
        assertEval("argv <- list(list(NA, FALSE), structure(list(na.rm = TRUE), .Names = 'na.rm'));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc7_2d2083d26d4150b2a7c49acd853790e1() {
        assertEval("argv <- list(expression(data.frame), list(), check.names = TRUE, stringsAsFactors = TRUE);c(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc70_bf9e648e6ae102f91db275af3e6de5a1() {
        assertEval("argv <- list(structure(list(Topic = character(0), File = character(0)), .Names = c('Topic', 'File'), class = 'data.frame', row.names = integer(0)), sep = '\\r');c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc71_1da295315d7894b55682648e0b474e3e() {
        assertEval("argv <- list(structure(list(Subject = structure(c(1L, 3L, 6L, 2L, 4L, 5L), .Label = c('1', '4', '2', '5', '6', '3'), class = c('ordered', 'factor')), conc.0.25 = c(1.5, 2.03, 2.72, 1.85, 2.05, 2.31), conc.0.5 = c(0.94, 1.63, 1.49, 1.39, 1.04, 1.44), conc.0.75 = c(0.78, 0.71, 1.16, 1.02, 0.81, 1.03), conc.1 = c(0.48, 0.7, 0.8, 0.89, 0.39, 0.84), conc.1.25 = c(0.37, 0.64, 0.8, 0.59, 0.3, 0.64), conc.2 = c(0.19, 0.36, 0.39, 0.4, 0.23, 0.42)), row.names = c(1L, 12L, 23L, 34L, 45L, 56L), .Names = c('Subject', 'conc.0.25', 'conc.0.5', 'conc.0.75', 'conc.1', 'conc.1.25', 'conc.2')), list(NULL));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc72_2a6782ea4aeb0791c02a3fb8ec21aac6() {
        assertEval("argv <- list(structure(list(x.limits = c(-2.46408176011189, 2.92512533057276), y.limits = structure(c(1386479490.57927, 1387608090.57927), class = c('POSIXct', 'POSIXt')), x.used.at = NULL, y.used.at = NULL, x.num.limit = NULL, y.num.limit = NULL, aspect.ratio = 1, prepanel.default = 'prepanel.default.xyplot', prepanel = NULL), .Names = c('x.limits', 'y.limits', 'x.used.at', 'y.used.at', 'x.num.limit', 'y.num.limit', 'aspect.ratio', 'prepanel.default', 'prepanel')), structure(list(index.cond = list(1:3),     perm.cond = 1L), .Names = c('index.cond', 'perm.cond')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc73_7c9d27f7d87d43feb9c87a478f41573f() {
        assertEval("argv <- list(structure(list(coefficients = structure(c(-0.0529307911108286, -0.200175675120066), .Names = c('(Intercept)', 'xTRUE')), residuals = structure(c(0.196977726701894, -0.102864715594501, -1.21764591766838, -0.425219263997792, 0.671048026430597, 1.41161034263987, 0.150318738887899, 0.440602402670198, 0.19930142564799, -1.32412876571778), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), effects = structure(c(0.483887391035467, -0.316505532770654, -1.29088865053614, -0.430233412486575, 0.597805293562832, 1.40659619415109, 0.0770760060201344, 0.435588254181415, 0.126058692780225, -1.32914291420656), .Names = c('(Intercept)', 'xTRUE', '', '', '', '', '', '', '', '')), rank = 2L), .Names = c('coefficients', 'residuals', 'effects', 'rank')), structure(list(fitted.values = structure(c(-0.253106466230895, -0.0529307911108286, -0.253106466230895, -0.0529307911108285, -0.253106466230895, -0.0529307911108285, -0.253106466230895, -0.0529307911108285, -0.253106466230895, -0.0529307911108285), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), assign = 0:1, qr = structure(list(qr = structure(c(-3.16227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, -1.58113883008419, 1.58113883008419, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634), .Dim = c(10L, 2L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), c('(Intercept)', 'xTRUE')), assign = 0:1, contrasts = structure(list(x = 'contr.treatment'), .Names = 'x')), qraux = c(1.31622776601684, 1.39220245868163), pivot = 1:2, tol = 1e-07, rank = 2L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 8L), .Names = c('fitted.values', 'assign', 'qr', 'df.residual')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc74_daacdfe4d9d32355603ed5db03b02fe2() {
        assertEval("argv <- list(structure(list(object = c('time', 'status')), .Names = 'object'), structure(list(max.level = NA, vec.len = 4, digits.d = 3, nchar.max = 128, give.attr = TRUE, give.head = TRUE, width = 80L, envir = NULL, strict.width = 'no', formatNum = function (x, ...) format(x, trim = TRUE, drop0trailing = TRUE, ...), list.len = 99), .Names = c('max.level', 'vec.len', 'digits.d', 'nchar.max', 'give.attr', 'give.head', 'width', 'envir', 'strict.width', 'formatNum', 'list.len')), structure(list(give.length = TRUE, nest.lev = 2, indent.str = '  .. ..'), .Names = c('give.length', 'nest.lev', 'indent.str')));c(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc8_ac82461a6043ed6d050bae486d8448ae() {
        assertEval("argv <- list(-0.1, 0.1);c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinc_testc9_877d21ddde2b9e653bd8ff400df9eba1() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'more columns than column names', call = quote(read.table('foo6', header = TRUE))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltincache_testcache1_45dfd711de8f6014b6f7c2c8b1f1385a() {
        assertEval("argv <- list('ddenseMatrix', c('ddenseMatrix', 'dMatrix', 'denseMatrix', 'Matrix', 'mMatrix'));.cache_class(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltincache_testcache2_4f69f78c4dae96b1c05ec2c77be1a3da() {
        assertEval("argv <- list('numeric', c('numeric', 'vector', 'atomicVector'));.cache_class(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltincat_testcat1_306cc2734e72e9455bfa21cbebcac406() {
        assertEval("argv <- list('head\\n', 1:2, '\\n', 3:4, file = 'foo4');cat(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
    }

    @Test
    public void TestrGenBuiltincat_testcat2_d47e73fbfd0eaf8d20a64590d67e2d4f() {
        assertEval("argv <- list(list('Loading required package: splines\\n'), structure(2L, class = c('terminal', 'connection')), '', FALSE, NULL, FALSE); .Internal(cat(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltincat_testcat3_2daf24cd1768f9b283a7379fbcfdde22() {
        assertEval("argv <- list('%comment\\n\\n%another\\n%\\n%\\n', 'C1\\tC2\\tC3\\n\\'Panel\\'\\t\\'Area Examined\\'\\t\\'% Blemishes\\'\\n', '\\'1\\'\\t\\'0.8\\'\\t\\'3\\'\\n', '\\'2\\'\\t\\'0.6\\'\\t\\'2\\'\\n', '\\'3\\'\\t\\'0.8\\'\\t\\'3\\'\\n', file = 'test.dat', sep = '');cat(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);");
    }

    @Test
    public void TestrGenBuiltincat_testcat4_51a87530100951af31c86d0dac89a405() {
        assertEval("argv <- list('#comment\\n\\n#another\\n#\\n#\\n', 'C1\\tC2\\tC3\\n\\'Panel\\'\\t\\'Area Examined\\'\\t\\'# Blemishes\\'\\n', '\\'1\\'\\t\\'0.8\\'\\t\\'3\\'\\n', '\\'2\\'\\t\\'0.6\\'\\t\\'2\\'\\n', '\\'3\\'\\t\\'0.8\\'\\t\\'3\\'\\n', file = 'test.dat', sep = '');cat(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);");
    }

    @Test
    public void TestrGenBuiltincat_testcat5_c70d82512f0f47ba2578a265d455089e() {
        assertEval("argv <- list('head\\n', file = 'foo2');cat(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltincbind_testcbind1_14f0fbc4597daa27ebc8cd24acfbf0ee() {
        assertEval("argv <- list(748L, c(5.08759633523238, 4.0943445622221, 5.66642668811243,     3.43398720448515), c(1L, 1L, 1L, 1L), 1L, c(FALSE, TRUE,     TRUE, TRUE), c(0, 1, 0, 1), c(0, 1, 1, 1), c(0, 1, 0, 1),     c(FALSE, FALSE, TRUE, FALSE), c(FALSE, FALSE, FALSE, TRUE));do.call('cbind', argv)");
    }

    @Test
    public void TestrGenBuiltincbind_testcbind2_13b893ae2b3e6a52c37c9032ca637942() {
        assertEval("argv <- list(structure(c(-0.0296690260968828, 0.200337918547016,     -0.38901358729166, 0.076054310915896, -0.5953576286578, 1.55058467328697,     -0.189955959788191, -1.31965097077132, 0.596281133731208,     1.22982396127581), .Dim = c(10L, 1L), .Dimnames = list(NULL,     'runif.10...pi.2..pi.2.'), circularp = structure(list(type = 'angles',     units = 'radians', template = 'none', modulo = 'asis', zero = 0,     rotation = 'counter'), .Names = c('type', 'units', 'template',     'modulo', 'zero', 'rotation')), class = c('circular', 'matrix')),     structure(c(-0.0296690260968828, 0.200337918547016, -0.38901358729166,         0.076054310915896, -0.5953576286578, 1.55058467328697,         -0.189955959788191, -1.31965097077132, 0.596281133731208,         1.22982396127581), .Dim = c(10L, 1L), .Dimnames = list(NULL,         'runif.10...pi.2..pi.2.'), circularp = structure(list(type = 'angles',         units = 'radians', template = 'none', modulo = 'asis',         zero = 0, rotation = 'counter'), .Names = c('type', 'units',         'template', 'modulo', 'zero', 'rotation')), class = c('circular',         'matrix')));do.call('cbind', argv)");
    }

    @Test
    public void TestrGenBuiltincbind_testcbind3_134aa28aef43cd61bcc182508df21979() {
        assertEval("argv <- list(structure(c(3L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L,     2L, 1L, 2L, 2L, 1L, 2L, 3L, 3L, 2L, 2L, 2L, 2L, 4L, 4L, 3L,     1L, 2L, 2L, 1L, 2L, 3L, 1L, 1L, 1L, 4L, 2L, 2L, 2L, 2L, 1L,     1L, 2L, 1L, 3L, 3L, 2L, 2L, 3L, 2L, 2L, 1L, 2L, 2L, 2L, 2L,     1L, 1L, 4L, 2L, 3L, 2L, 1L, 3L, 2L, 3L, 1L, 2L, 3L, 4L, 2L,     4L, 2L, 3L, 1L, 1L, 3L, 4L, 3L, 1L, 2L, 2L, 1L, 2L, 3L, 1L,     2L, 2L, 2L, 2L, 4L, 2L, 2L, 2L, 3L, 1L, 1L, 1L, 2L, 2L, 4L,     1L, 1L, 1L, 1L, 2L, 4L, 3L, 2L, 3L, 3L, 2L, 2L, 2L, 2L, 2L,     1L, 2L, 2L, 2L, 2L, 2L, 4L, 2L, 2L, 1L, 3L, 2L, 2L, 1L, 4L,     1L, 3L, 2L, 2L, 3L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 3L,     2L, 1L, 3L, 1L, 3L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 3L, 1L, 2L,     1L, 2L, 2L, 4L, 2L, 2L, 2L, 2L, 1L, 3L, 1L, 1L, 1L, 2L, 2L,     3L, 2L, 4L, 3L, 3L, 4L, 1L, 3L, 2L, 2L, 4L, 2L, 1L, 2L, 2L,     2L, 3L, 2L, 2L, 1L, 2L, 3L, 2L, 1L, 2L, 2L), .Label = c('1 Extremely well',     '2 Quite well', '3 Not too well', '4 Not well at all'), class = 'factor'),     structure(c(1L, 2L, 2L, 4L, 2L, 2L, 1L, 2L, 2L, 3L, 2L, 3L,         3L, 1L, 2L, 3L, 3L, 2L, 1L, 4L, 2L, 3L, 1L, 3L, 1L, 4L,         1L, 1L, 3L, 4L, 2L, 1L, 2L, 3L, 2L, 3L, 4L, 4L, 1L, 4L,         3L, 1L, 3L, 3L, 2L, 3L, 2L, 2L, 3L, 1L, 2L, 2L, 2L, 3L,         2L, 1L, 4L, 2L, 3L, 4L, 1L, 3L, 2L, 3L, 1L, 2L, 2L, 4L,         2L, 4L, 2L, 3L, 1L, 1L, 4L, 4L, 3L, 2L, 3L, 2L, 3L, 3L,         3L, 2L, 3L, 2L, 2L, 3L, 4L, 2L, 4L, 2L, 3L, 1L, 1L, 1L,         2L, 3L, 4L, 3L, 2L, 1L, 2L, 1L, 4L, 3L, 1L, 2L, 2L, 2L,         2L, 2L, 3L, 4L, 2L, 3L, 2L, 1L, 3L, 2L, 3L, 3L, 3L, 1L,         2L, 2L, 3L, 2L, 4L, 1L, 3L, 3L, 4L, 3L, 2L, 2L, 3L, 2L,         4L, 4L, 2L, 1L, 4L, 3L, 2L, 4L, 3L, 4L, 2L, 2L, 1L, 2L,         3L, 1L, 2L, 3L, 2L, 1L, 4L, 3L, 2L, 3L, 3L, 2L, 2L, 1L,         4L, 2L, 3L, 2L, 2L, 2L, 4L, 2L, 4L, 2L, 3L, 3L, 4L, 4L,         1L, 3L, 4L, 3L, 4L, 2L, 1L, 2L, 2L, 2L, 2L, 3L, 2L, 2L,         2L, 3L, 3L, 2L, 3L, 2L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'), structure(c(2L, 2L, 2L, 2L, 2L, 2L,         1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L,         1L, 3L, 1L, 2L, 1L, 3L, 2L, 2L, 3L, 2L, 2L, 3L, 2L, 1L,         2L, 2L, 3L, 4L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 3L, 1L,         2L, 3L, 2L, 1L, 1L, 3L, 2L, 2L, 4L, 2L, 2L, 2L, 4L, 2L,         2L, 2L, 3L, 3L, 3L, 4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L,         2L, 1L, 1L, 2L, 1L, 2L, 3L, 2L, 3L, 2L, 2L, 4L, 3L, 2L,         2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L,         4L, 3L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L,         2L, 2L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 3L, 2L, 2L, 2L,         2L, 3L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 2L, 2L, 3L,         2L, 2L, 3L, 1L, 1L, 4L, 2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L,         2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 3L, 1L, 1L, 2L, 3L, 1L,         3L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 3L, 2L, 1L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'), structure(c(1L, 2L, 2L, 1L, 3L, 2L,         2L, 3L, 2L, 2L, 3L, 2L, 2L, 4L, 1L, 4L, 2L, 4L, 3L, 2L,         3L, 2L, 3L, 1L, 1L, 1L, 3L, 1L, 2L, 2L, 2L, 2L, 2L, 2L,         3L, 2L, 1L, 1L, 4L, 3L, 1L, 4L, 3L, 1L, 2L, 2L, 2L, 2L,         1L, 1L, 2L, 2L, 3L, 2L, 1L, 3L, 4L, 2L, 1L, 2L, 2L, 2L,         2L, 1L, 2L, 2L, 1L, 2L, 2L, 1L, 3L, 1L, 4L, 2L, 2L, 4L,         2L, 2L, 2L, 3L, 4L, 2L, 2L, 1L, 1L, 3L, 2L, 1L, 2L, 4L,         2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 3L, 3L, 2L,         1L, 1L, 2L, 3L, 1L, 2L, 2L, 3L, 2L, 2L, 3L, 2L, 3L, 3L,         2L, 3L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 1L, 2L, 4L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 1L, 3L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 4L, 2L, 2L, 1L,         2L, 2L, 2L, 2L, 2L, 1L, 3L, 2L, 2L, 1L, 3L, 2L, 4L, 3L,         2L, 2L, 1L, 1L, 3L, 2L, 2L, 1L, 2L, 2L, 2L, 3L, 1L, 2L,         2L, 2L, 3L, 2L, 2L, 3L, 2L, 2L, 1L, 2L, 2L, 1L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'), structure(c(1L, 2L, 3L, 1L, 4L, 3L,         4L, 2L, 2L, 4L, 2L, 2L, 2L, 4L, 2L, 3L, 2L, 4L, 4L, 4L,         3L, 2L, 3L, 3L, 1L, 1L, 3L, 2L, 3L, 2L, 2L, 2L, 2L, 1L,         3L, 2L, 1L, 1L, 4L, 4L, 1L, 1L, 3L, 2L, 4L, 3L, 2L, 3L,         1L, 1L, 3L, 3L, 4L, 2L, 1L, 4L, 4L, 4L, 2L, 3L, 2L, 2L,         3L, 2L, 4L, 3L, 1L, 2L, 3L, 1L, 3L, 2L, 3L, 4L, 2L, 4L,         2L, 3L, 3L, 3L, 4L, 1L, 2L, 2L, 2L, 4L, 2L, 3L, 2L, 4L,         2L, 2L, 2L, 3L, 3L, 3L, 1L, 3L, 2L, 2L, 3L, 4L, 4L, 3L,         2L, 1L, 3L, 2L, 2L, 2L, 3L, 1L, 2L, 2L, 2L, 2L, 4L, 3L,         3L, 3L, 2L, 4L, 2L, 3L, 2L, 2L, 3L, 3L, 3L, 3L, 2L, 3L,         2L, 2L, 3L, 3L, 2L, 2L, 4L, 3L, 3L, 3L, 3L, 2L, 3L, 2L,         2L, 2L, 3L, 4L, 3L, 2L, 2L, 3L, 2L, 1L, 4L, 3L, 2L, 1L,         3L, 3L, 3L, 3L, 2L, 1L, 3L, 2L, 2L, 4L, 3L, 4L, 4L, 3L,         2L, 2L, 1L, 2L, 3L, 2L, 3L, 2L, 2L, 3L, 3L, 4L, 3L, 3L,         2L, 4L, 4L, 2L, 2L, 4L, 3L, 1L, 2L, 2L, 2L, 2L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'), structure(c(2L, 2L, 2L, 2L, 4L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 2L, 2L, 2L, 4L, 2L, 4L,         3L, 2L, 3L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L,         2L, 2L, 1L, 1L, 3L, 3L, 2L, 4L, 2L, 2L, 2L, 2L, 2L, 2L,         1L, 1L, 3L, 4L, 1L, 2L, 1L, 2L, 4L, 4L, 2L, 1L, 2L, 2L,         2L, 1L, 2L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 4L, 2L, 3L, 2L, 2L, 3L, 2L, 2L, 2L, 4L,         2L, 2L, 2L, 2L, 3L, 2L, 1L, 2L, 1L, 1L, 2L, 2L, 3L, 2L,         2L, 1L, 3L, 3L, 2L, 3L, 2L, 1L, 2L, 3L, 3L, 2L, 2L, 4L,         2L, 4L, 3L, 3L, 3L, 3L, 2L, 2L, 3L, 2L, 3L, 2L, 3L, 2L,         1L, 2L, 3L, 3L, 1L, 2L, 2L, 2L, 2L, 3L, 1L, 2L, 3L, 1L,         2L, 2L, 2L, 4L, 1L, 2L, 2L, 3L, 2L, 2L, 3L, 4L, 1L, 1L,         2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 4L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 3L, 3L, 2L, 2L,         2L, 3L, 3L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L), .Label = c('1 Extremely well',         '2 Quite well', '3 Not too well', '4 Not well at all'),         class = 'factor'));do.call('cbind', argv)");
    }

    @Test
    public void TestrGenBuiltincbind_testcbind4_8dbbb8aa377716fcc0f0266d5c335cb1() {
        assertEval("argv <- list(structure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6,     5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4,     5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7,     4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4,     5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7,     6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2,     5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5,     5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5,     5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6,     4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7,     7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2,     7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9,     5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9), Sepal.Width = c(4,     3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4,     3, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 4, 3, 3, 4, 4, 3,     3, 4, 2, 3, 4, 4, 3, 4, 3, 4, 3, 3, 3, 3, 2, 3, 3, 3, 2,     3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 3,     3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 3, 2, 3, 3,     3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 4, 3, 3, 3, 2, 3,     3, 3, 4, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3,     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3), Petal.Length = c(1.4,     1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4,     1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9,     1.6, 1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3,     1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5,     1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5,     4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7,     4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5,     4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3,     4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1,     5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9,     5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1,     5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9, 5.7, 5.2, 5, 5.2,     5.4, 5.1), Petal.Width = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4,     0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3,     0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2,     0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3,     0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3,     1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5,     1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5,     1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4,     1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8,     2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4, 2.3, 1.8,     2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6,     1.9, 2, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3,     1.9, 2.3, 2.5, 2.3, 1.9, 2, 2.3, 1.8), Species = structure(c(1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L),     .Label = c('setosa', 'versicolor', 'virginica'), class = 'factor')),     .Names = c('Sepal.Length', 'Sepal.Width', 'Petal.Length',         'Petal.Width', 'Species'), row.names = c(NA, -150L),     class = 'data.frame'), structure(c(3, 2, 2, 2, 3, 3, 2, 2,     2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 2, 2,     3, 2, 2, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 1, 2, 3, 3, 2,     3, 2, 3, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2,     2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2,     2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2,     2, 2, 2, 1, 2, 1, 3, 2, 2, 2, 1, 2, 2, 2, 3, 2, 1, 2, 2,     2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2,     2, 2, 2, 2, 2, 1, 2, 2, 2), .Names = c('4', '3', '3', '3',     '4', '4', '3', '3', '3', '3', '4', '3', '3', '3', '4', '4',     '4', '4', '4', '4', '3', '4', '4', '3', '3', '3', '3', '4',     '3', '3', '3', '3', '4', '4', '3', '3', '4', '4', '3', '3',     '4', '2', '3', '4', '4', '3', '4', '3', '4', '3', '3', '3',     '3', '2', '3', '3', '3', '2', '3', '3', '2', '3', '2', '3',     '3', '3', '3', '3', '2', '2', '3', '3', '2', '3', '3', '3',     '3', '3', '3', '3', '2', '2', '3', '3', '3', '3', '3', '2',     '3', '2', '3', '3', '3', '2', '3', '3', '3', '3', '2', '3',     '3', '3', '3', '3', '3', '3', '2', '3', '2', '4', '3', '3',     '3', '2', '3', '3', '3', '4', '3', '2', '3', '3', '3', '3',     '3', '3', '3', '3', '3', '3', '3', '4', '3', '3', '3', '3',     '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '2', '3',     '3', '3')));do.call('cbind', argv)");
    }

    @Test
    public void TestrGenBuiltincbind_testcbind5_b955bb59f04b53d47b45583a5cabee52() {
        assertEval("argv <- list(structure(c(1, 223, 312, 712, 889, 1201, 1467),     .Names = c('', '1th break', '2th break', '3th break', '4th break',         '5th break', '6th break')), structure(c(222, 311, 711,     888, 1200, 1466, 1600), .Names = c('1th break', '2th break',     '3th break', '4th break', '5th break', '6th break', '7th break')));do.call('cbind', argv)");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling1_67c5a4fea666b55fc077d2db523f5371() {
        assertEval("argv <- list(1001);ceiling(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling2_f9e5154f2ade7492aca1d04ee70cf8aa() {
        assertEval("argv <- list(13990.84);ceiling(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling3_7f4d4d43975fb78b52c4d190493b3c1d() {
        assertEval("argv <- list(c(1, 4.5, 8, 11.5, 15));ceiling(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling4_5680f88c1fe433bfbac8b092b2274376() {
        assertEval("argv <- list(c(1, 5.5, 10.5, 15.5, 20));ceiling(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling5_fadc7933ff1bd1a97c8ba3d322d1f624() {
        assertEval("argv <- list(-0.698970004336019);ceiling(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling6_95605b294cc537ec6d27a57bc1f90104() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));ceiling(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling7_2fb13b9335b8e0692e5224868afa548b() {
        assertEval("argv <- list(1e+05);ceiling(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling9_dcaae0ea15d8c9c7f14757076d6870e9() {
        assertEval("argv <- list(c(-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3,     3.5, 4));do.call('ceiling', argv)");
    }

    @Test
    public void TestrGenBuiltincharToRaw_testcharToRaw1_f6ac05ee10c8b34d9c24558aed17abd0() {
        assertEval("argv <- list(''); .Internal(charToRaw(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltincharacter_testcharacter1_3499e6f914030f376c9f5050442a53b3() {
        assertEval("argv <- structure(list(length = 0L), .Names = 'length');do.call('character', argv)");
    }

    @Test
    public void TestrGenBuiltincharmatch_testcharmatch1_592336a33e8b20eb04d56e99f31eb9e3() {
        assertEval("argv <- list(c('x', 'y', 'z'), c('row.names', 'x', 'y', 'z'), 0L); .Internal(charmatch(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincharmatch_testcharmatch2_3fed2375b93bb5c2f01e0e9735c087b2() {
        assertEval("argv <- list(character(0), c('row.names', 'height', 'weight'), 0L); .Internal(charmatch(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincharmatch_testcharmatch3_0ee63848773a0524ddc63d996edf54a3() {
        assertEval("argv <- list('package:methods', c('.GlobalEnv', 'CheckExEnv', 'package:stats', 'package:graphics', 'package:grDevices', 'package:utils', 'package:datasets', 'package:methods', 'Autoloads', 'package:base'), NA_integer_); .Internal(charmatch(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincharmatch_testcharmatch4_8c6ebed5cb294d4ba570f479750ef5e0() {
        assertEval("argv <- list('package:methods', c('.GlobalEnv', 'package:graphics', 'package:stats', 'Autoloads', 'package:base'), NA_integer_); .Internal(charmatch(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincharmatch_testcharmatch5_30c07d1ab246e9df0acadf7f38437532() {
        assertEval("argv <- list(c('0', '1'), c('0', '1'), 0); .Internal(charmatch(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincharmatch_testcharmatch6_c905ef74c53eb6a8b9a55f980e35743d() {
        assertEval("argv <- list(c('m', 'f'), c('male', 'female'), NA_integer_); .Internal(charmatch(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincharmatch_testcharmatch7_6c3fdec3d6eaaf2e114300dc865abdcc() {
        assertEval("argv <- list('me', c('mean', 'median', 'mode'), NA_integer_); .Internal(charmatch(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincharmatch_testcharmatch8_60a534fcf3ca2630b7910eaab577fde6() {
        assertEval("argv <- list(character(0), c('semiTransparency', 'transparentBackground', 'rasterImage', 'capture', 'locator', 'events'), 0L); .Internal(charmatch(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr1_9279f1e8c0c7e17436b2b5348cb0e604() {
        assertEval("argv <- list('.', '.', c('0.02', '0.06', '0.11', '0.22', '0.56', '1.1')); .Internal(chartr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr2_6b8cc756870f6234be361a5a2c033e15() {
        assertEval("argv <- list('iXs', 'why', 'MiXeD cAsE 123'); .Internal(chartr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr3_d9509ba59c460fd40fd43ef3dec4924f() {
        assertEval("argv <- list('a-cX', 'D-Fw', 'MiXeD cAsE 123'); .Internal(chartr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr4_f13328602f093d30f684732048aa532f() {
        assertEval("argv <- list('.', '.', character(0)); .Internal(chartr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr6_2f6b10c422bc7dedf0c97e06b6142980() {
        assertEval("argv <- structure(list(old = 'NA', new = 'na', x = c('NA', NA,     'BANANA')), .Names = c('old', 'new', 'x'));do.call('chartr', argv)");
    }

    @Test
    public void TestrGenBuiltinchol_testchol1_e12f4a9ee34c78d44e31100959f5751a() {
        assertEval("argv <- structure(list(x = structure(c(1.66666666666667, -1.33333333333333,     1, -0.666666666666667, 0.333333333333333, -1.33333333333333,     2.66666666666667, -2, 1.33333333333333, -0.666666666666667,     1, -2, 3, -2, 1, -0.666666666666667, 1.33333333333333, -2,     2.66666666666667, -1.33333333333333, 0.333333333333333, -0.666666666666667,     1, -1.33333333333333, 1.66666666666667), .Dim = c(5L, 5L))),     .Names = 'x');do.call('chol', argv)");
    }

    @Test
    public void TestrGenBuiltinchoose_testchoose1_44e127902a215294ccfeae0cb5b8aa75() {
        assertEval("argv <- list(-1, 3); .Internal(choose(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinchoose_testchoose2_671ebdf57cc92ec28ded2847d0ecde16() {
        assertEval("argv <- list(9L, c(-14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)); .Internal(choose(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinchoose_testchoose3_079022733e336ef3136461b44fec0f89() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(choose(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinchoose_testchoose4_59bd8875f1d732ab6e0a9ffe3ec36a41() {
        assertEval("argv <- list(0.5, 0:10); .Internal(choose(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinclass_testclass1_d5e1922da90ab1236e08268a69a020ce() {
        assertEval("argv <- list(structure(function (x) standardGeneric('exp', .Primitive('exp')), generic = structure('exp', package = 'base'), package = 'base', group = list('Math'), valueClass = character(0), signature = 'x', default = .Primitive('exp'), skeleton = quote(.Primitive('exp')(x)), class = structure('standardGeneric', package = 'methods')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass10_4a41e5c9f81b3cd21b2b843b615bb5c9() {
        assertEval("argv <- list(structure(list(time = 1:10, y = c(1, 1.4142135623731, 1.73205080756888, 2, 2.23606797749979, 2.44948974278318, 2.64575131106459, 2.82842712474619, 3, 3.16227766016838)), .Names = c('time', 'y'), row.names = c(NA, 10L), .S3Class = 'data.frame', date = structure(16045, class = 'Date'), class = structure('dataFrameD', package = '.GlobalEnv')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass11_e6c20a2bccad55c70d4362733847121e() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), .S3Class = 'data.frame', class = structure('data.frame', package = 'methods')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass12_c23f9e29277c3c4eb8c491f9c088cf07() {
        assertEval("argv <- list(structure(function (qr, y) .Call(sparseQR_resid_fitted, qr, y, TRUE), target = structure(c('sparseQR', 'ddenseMatrix'), .Names = c('qr', 'y'), package = c('Matrix', 'Matrix'), class = structure('signature', package = 'methods')), defined = structure(c('sparseQR', 'ddenseMatrix'), .Names = c('qr', 'y'), package = c('Matrix', 'Matrix'), class = structure('signature', package = 'methods')), generic = structure('qr.resid', package = 'base'), class = structure('MethodDefinition', package = 'methods')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass13_dc9e81366aff5703cfd8a39c9b439296() {
        assertEval("argv <- list(structure(c(3.1, 6.695, 8.14, 7.50090909091, 8.95, 9.26), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = c('summaryDefault', 'table')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass14_745770bcee31d27cb7a65a9a5c43909f() {
        assertEval("argv <- list(complex(0));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass15_1acbf9456bfe834e69b0ea44662022bc() {
        assertEval("argv <- list(structure(c(-0.00225540511921, -0.00045867962383, -8.86739505379e-06, -1.96554854754e-06, 0.000402346479421, 0.00193962597167), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = c('summaryDefault', 'table')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass16_67d0e8dbe0df521da8e9d69b2e759754() {
        assertEval("argv <- list(c(FALSE, FALSE, FALSE, NA, NA, TRUE, TRUE, TRUE, NA, NA, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass17_6b159092139faf96d245b4c4a17c8b52() {
        assertEval("argv <- list(c(-10, -10, -10, NA, NA, 150, 170, 180, NA, NA, 310, 330, 340, 350, 370, 380));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass18_0994d077e69b51e5a997bd716f08e8a6() {
        assertEval("argv <- list(structure(numeric(0), .Dim = 0L));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass19_378bc375686344254cb41d8b549be1f0() {
        assertEval("argv <- list(structure(c(0.5, 0, 0.5, 0, 0, 0.5, 0, 0, 0.0740740740740741, 0, 0, 0.5, 1, 0, 0, 0.5, 1, 0.5), unit = c('char', 'grobheight', 'char', 'grobheight', 'grobheight', 'char', 'mm', 'lines', 'null', 'mm', 'mm', 'char', 'grobheight', 'char', 'grobheight', 'char', 'grobheight', 'char'), valid.unit = c(18L, 22L, 18L, 22L, 22L, 18L, 7L, 3L, 5L, 7L, 7L, 18L, 22L, 18L, 22L, 18L, 22L, 18L), data = list(NULL, structure(list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'),     just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'GRID.text.1', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL, structure(list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL, vjust = NULL,     rot = 0, check.overlap = FALSE, name = 'GRID.text.2', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), structure(list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'GRID.text.3',     gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL, NULL, NULL, NULL, NULL, NULL, NULL, structure(list(label = 'Column', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'plot_01.xlab',     gp = structure(list(fontface = 1, alpha = 1, cex = 1, col = '#000000', lineheight = 1, font = 1L), .Names = c('fontface', 'alpha', 'cex', 'col', 'lineheight', 'font'), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL, structure(list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'),     just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'GRID.text.5', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL, structure(list(label = 'Dimensions: 4 x 54', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL,     vjust = NULL, rot = 0, check.overlap = FALSE, name = 'plot_01.sub', gp = structure(list(fontface = 2, alpha = 1, cex = 1, col = '#000000', lineheight = 1, font = 2L), .Names = c('fontface', 'alpha', 'cex', 'col', 'lineheight', 'font'), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc')), NULL), class = 'unit'));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass2_d07d73484fec37ed72c49e88ef46e8b5() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, 1, 0, 0, 0, 1), .Dim = c(3L, 3L), class = structure('mmat2', package = '.GlobalEnv')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass20_4754e06a72e20ff5539b877984997756() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(24L, 13L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'), c('(Intercept)', 'block2', 'block3', 'block4', 'block5', 'block6', 'N1', 'P1', 'K1', 'N1:P1', 'N1:K1', 'P1:K1', 'N1:P1:K1')), assign = c(0L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L), contrasts = structure(list(block = 'contr.treatment', N = 'contr.treatment', P = 'contr.treatment', K = 'contr.treatment'), .Names = c('block', 'N', 'P', 'K'))));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass21_e7e777ce32be8efe2035b119d5bcd3db() {
        assertEval("argv <- list(.Primitive('dimnames<-'));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass22_e40da0501cf603e9efe571d23474a1d2() {
        assertEval("argv <- list(c(17, 289, 4913, 83521, 1419857, 24137569, 410338673, 6975757441, 118587876497, 2015993900449, 34271896307633, 582622237229761, 9904578032905936, 168377826559400928, 2862423051509815808, 48661191875666870272, 8.27240261886337e+20, 1.40630844520677e+22, 2.39072435685151e+23, 4.06423140664757e+24, 6.90919339130087e+25, 1.17456287652115e+27, 1.99675689008595e+28, 3.39448671314612e+29, 5.7706274123484e+30, 9.81006660099228e+31, 1.66771132216869e+33, 2.83510924768677e+34, 4.81968572106751e+35, 8.19346572581477e+36, 1.39288917338851e+38, 2.36791159476047e+39, 4.02544971109279e+40, 6.84326450885775e+41, 1.16335496650582e+43, 1.97770344305989e+44, 3.36209585320181e+45, 5.71556295044308e+46, 9.71645701575324e+47, 1.65179769267805e+49, 2.80805607755269e+50, 4.77369533183957e+51, 8.11528206412726e+52, 1.37959795090163e+54, 2.34531651653278e+55, 3.98703807810572e+56, 6.77796473277973e+57, 1.15225400457255e+59, 1.95883180777334e+60, 3.33001407321468e+61, 5.66102392446496e+62, 9.62374067159043e+63, 1.63603591417037e+65, 2.78126105408963e+66, 4.72814379195238e+67, 8.03784444631904e+68, 1.36643355587424e+70, 2.3229370449862e+71, 3.94899297647655e+72, 6.71328806001013e+73, 1.14125897020172e+75, 1.94014024934293e+76, 3.29823842388298e+77, 5.60700532060106e+78, 9.5319090450218e+79, 1.62042453765371e+81, 2.7547217140113e+82, 4.68302691381921e+83, 7.96114575349266e+84, 1.35339477809375e+86, 2.30077112275938e+87, 3.91131090869094e+88, 6.6492285447746e+89, 1.13036885261168e+91, 1.92162704943986e+92, 3.26676598404776e+93, 5.5535021728812e+94, 9.44095369389803e+95, 1.60496212796267e+97, 2.72843561753653e+98, 4.6383405498121e+99, 7.88517893468058e+100, 1.3404804188957e+102, 2.27881671212269e+103, 3.87398841060857e+104, 6.58578029803456e+105, 1.11958265066588e+107, 1.90329050613199e+108, 3.23559386042438e+109, 5.50050956272145e+110, 9.35086625662646e+111, 1.5896472636265e+113, 2.70240034816505e+114, 4.59408059188058e+115, 7.80993700619699e+116, 1.32768929105349e+118, 2.25707179479093e+119, 3.83702205114458e+120, 6.52293748694579e+121, 1.10889937278078e+123, 5.5535021728812e+94, 3.33001407321468e+61, 1.95883180777334e+60, 1.15225400457255e+59, 6.77796473277973e+57, 3.98703807810572e+56, 2.34531651653278e+55, 1.37959795090163e+54, 8.11528206412726e+52, 4.77369533183957e+51, 2.80805607755269e+50, 1.65179769267805e+49, 2015993900449));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass23_0821b526eb4132338803c209df9fe70a() {
        assertEval("argv <- list(structure(function (a, b, ...) standardGeneric('solve'), generic = structure('solve', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = c('a', 'b'), default = structure(function (a, b, ...) UseMethod('solve'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'a', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'a', package = 'methods'), generic = structure('solve', package = 'base'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (a, b, ...) UseMethod('solve'))(a, b, ...)), class = structure('standardGeneric', package = 'methods')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass24_19f8ef72f89f5b1612b8d080e67bd9e8() {
        assertEval("argv <- list(c(-0.31833672642477-1.38507061859438i, 1.42379885362755+0.0383231810219i, 0.405090858049187-0.763030162361974i, -0.995386565684023+0.212306135525839i, -0.95881778764026+1.42553796686779i, -0.918087896319951+0.744479822333976i, 0.15096960188161+0.70022940298623i, 1.2230687888662-0.22935461345173i, 0.868824288637794+0.197093861895352i, 1.04248536490429+1.20715377387226i));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass25_e9d559b4affb116e734cf903b2e517e1() {
        assertEval("argv <- list(structure(function (x, type, ...) .Call(dgeMatrix_norm, as(x, 'dgeMatrix'), type), target = structure(c('matrix', 'character'), .Names = c('x', 'type'), package = c('methods', 'methods'), class = structure('signature', package = 'methods')), defined = structure(c('matrix', 'character'), .Names = c('x', 'type'), package = c('methods', 'methods'), class = structure('signature', package = 'methods')), generic = structure('norm', package = 'base'), class = structure('MethodDefinition', package = 'methods')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass26_f1880f9b154b8ebdd15f843d5e7aca15() {
        assertEval("argv <- list(structure(function (x, mode = 'any') .Internal(as.vector(x, mode)), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass27_0a25331c90c4cf31686b5d1179bcbd91() {
        assertEval("argv <- list(structure(function (x, uplo) {    if (uplo == x@uplo) x else t(x)}, target = structure(c('nsCMatrix', 'character'), .Names = c('x', 'uplo'), package = c('Matrix', 'methods'), class = structure('signature', package = 'methods')), defined = structure(c('nsCMatrix', 'character'), .Names = c('x', 'uplo'), package = c('Matrix', 'methods'), class = structure('signature', package = 'methods')), generic = structure('forceSymmetric', package = 'Matrix'), class = structure('MethodDefinition', package = 'methods')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass28_6ca57b63b30ffee1d60a1a0654d85987() {
        assertEval("argv <- list(c(1.1+0i, NA, 3+0i));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass29_4c7878007c55310af8683251257665f3() {
        assertEval("argv <- list(structure(1:10, .Tsp = c(1959.25, 1961.5, 4), class = 'ts'));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass3_b2fecd2e69f3c0a0e09c74d1d15c298c() {
        assertEval("argv <- list(structure(3.14159265358979, comment = 'Start with pi', class = structure('num1', package = '.GlobalEnv')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass31_b9fe4da11779382e933a8175c012080b() {
        assertEval("argv <- list(c(71.128, 69.70625, 70.9566666666667, 71.7, 71.435,     72.5766666666667, 70.6916666666667));do.call('class', argv)");
    }

    @Test
    public void TestrGenBuiltinclass_testclass32_394f89a5c14788aed92a6f85c29311cc() {
        assertEval("argv <- list(structure(c(0.909297426825682, 0.141120008059867,     -0.756802495307928), class = c('foo', 'bar')));do.call('class', argv)");
    }

    @Test
    public void TestrGenBuiltinclass_testclass4_4330c00e794713c0207b510ea963bae6() {
        assertEval("argv <- list(structure(c(1+1i, 2+1.4142135623731i, 3+1.73205080756888i, 4+2i, 5+2.23606797749979i, 6+2.44948974278318i, 7+2.64575131106459i, 8+2.82842712474619i, 9+3i, 10+3.1622776601684i), id = character(0), class = structure('withId', package = '.GlobalEnv')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass5_47597cdbf9ba6db858bb11105f1d333c() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass6_2f95bbbd109424d953a4bcd486bf00b6() {
        assertEval("argv <- list(structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = TRUE, xscale = c(-15.89, 356.89), yscale = c(0.683750615306643, 5.8340977374556), angle = 0, layout = NULL, layout.pos.row = c(21L, 21L), layout.pos.col = c(17L, 17L), valid.just = c(0.5, 0.5), valid.pos.row = c(21L, 21L), valid.pos.col = c(17L, 17L), name = 'plot_01.panel.3.1.vp'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport'));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass7_763a4e5c78aa02e0558c6f54e42a8ad9() {
        assertEval("argv <- list(c(NA, '2', '3'));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass8_7b25cd0a8baf7afb8578b49763aae61c() {
        assertEval("argv <- list(c(325, 257, 303, 315, 380, 153, 263, 242, 206, 344, 258));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclass_testclass9_5b6a21b67e76eea69dee1b739e52deae() {
        assertEval("argv <- list(structure(list(message = 'Choosing method ‘sparseMatrix#ANY’ from 2 ambiguous possibilities', call = NULL), .Names = c('message', 'call'), class = c('simpleCondition', 'condition')));class(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign1_de061a60340f3f539d6ca430bc12a4ac() {
        assertEval("argv <- list(structure(function (x, mode = 'any') .Internal(as.vector(x, mode)), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign10_198eeb8cea17bbf0690d6e8f4ea6ba5f() {
        assertEval("argv <- list(structure(c('o', 'p', 'v', 'i', 'r', 'w', 'b', 'm', 'f', 's'), date = structure(1224086400, class = c('POSIXct', 'POSIXt'), tzone = ''), class = 'stamped'), value = 'stamped');`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign11_94e6631dce59f50b35fa383e95ded7f5() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')), structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign12_a8ba5c78bb75d4172a3cee15d02ddf55() {
        assertEval("argv <- list(structure(1, class = 'bar'), value = 'bar');`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign13_0b8b3c700a1c7295f81b886f1731ccae() {
        assertEval("argv <- list(structure(function (qr, y, k = qr$rank) standardGeneric('qr.fitted'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'qr', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'qr', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign14_d32f4beaf1ef3258805491fdc2b58d1d() {
        assertEval("argv <- list(structure(function (x = 1, nrow, ncol) standardGeneric('diag'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign15_814f8d61bca34c17950b5c7007ee60cc() {
        assertEval("argv <- list(structure(1:6, class = 'A'), value = 'A');`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign16_302fecacff77ed8b1433b4987b90b1bd() {
        assertEval("argv <- list(structure(function (x, y, ...) standardGeneric('plot'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign17_2b608d746bee2050e015f9471e882173() {
        assertEval("argv <- list(structure(function (x, logarithm = TRUE, ...) UseMethod('determinant'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign18_c9916c88ca1c01ca81cf81fac2ea6a5f() {
        assertEval("argv <- list(structure(function (x, y = NULL) .Internal(crossprod(x, y)), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign19_546f785b6e71e56b9e145ee91803d75b() {
        assertEval("argv <- list(structure(function (obj, force = FALSE) standardGeneric('unname'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'obj', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'obj', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign2_edd86ab610b77aec088ad3ae7fca2183() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign3_fcbc53d984c1659787a065a92cbe81fa() {
        assertEval("argv <- list(character(0), character(0));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign4_aaffa3461fa67667672c3ae599414f9c() {
        assertEval("argv <- list(structure(c(8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14), class = 'anyC'), value = 'anyC');`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign5_28413f4a48f41766956da855b9e8c3b0() {
        assertEval("argv <- list(structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), value = structure('signature', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign6_83ed6f05a87f720078d5b5c90223159d() {
        assertEval("argv <- list(structure(list(par = 5.5, loglik = 0.970661978016996), .Names = c('par', 'loglik'), class = 'pfit'), value = 'pfit');`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign7_b76b84a3a4f3835e50d98dee7a32178a() {
        assertEval("argv <- list(structure(FALSE, class = 'FALSE'), FALSE);`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign8_9934325af052743d0fcb67710c021259() {
        assertEval("argv <- list(1:3, value = 'numeric');`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign9_d2c3b1b6171abd4b6d56ad38962c3c96() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, 1, 0, 0, 0, 1), .Dim = c(3L, 3L), class = structure('mmat2', package = '.GlobalEnv')), value = structure('mmat2', package = '.GlobalEnv'));`class<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinclearPushBack_testclearPushBack1_60dce03e9c3d4232985f47a71bf13e03() {
        assertEval("argv <- list(FALSE); .Internal(clearPushBack(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltincnoquote_testcnoquote1_00254251aa7367b2c69432c596e00186() {
        assertEval("argv <- structure(list(structure(c('.', '.', '|', '.', '.', '|',     '.', '.'), .Dim = c(2L, 4L), .Dimnames = list(NULL, c('',     '', '', '')), class = 'noquote')), .Names = '');do.call('c.noquote', argv)");
    }

    @Test
    public void TestrGenBuiltincol_testcol1_63f49fefadf7f7ed0a9f08b7977a237e() {
        assertEval("argv <- list(c(2L, 2L)); .Internal(col(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltincol_testcol3_34fb537a27f9cf5d70c97961115fb97f() {
        assertEval("argv <- list(c(1L, 0L)); .Internal(col(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans1_76dd57a81d530cabad65f41bb19675d0() {
        assertEval("argv <- list(structure(1:5, .Dim = c(5L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5'), 'a')), 5, 1, FALSE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans10_eaa4ece5285fc47d6ee6e502482147a3() {
        assertEval("argv <- list(structure(c(NA, 30.6929824561403, 25.6929824561403, 18.6929824561403, 6.69298245614035, -6.30701754385965, -13.3070175438597, -24.3070175438597, -21.3070175438597, 3.69298245614035, -2.30701754385965, -1.30701754385965, -20.3070175438597, -17.3070175438597, NA, NA, 12.6929824561403, 0.692982456140349, 0.692982456140349, -5.30701754385965, -11.3070175438597, -19.3070175438597, -10.3070175438597, -17.3070175438597, -20.3070175438597, -32.3070175438597, -24.3070175438597, -33.3070175438597, -31.3070175438597, -24.3070175438597, NA, -24.3070175438597, 2.69298245614035, 17.6929824561403, 18.6929824561403, 3.69298245614035, 14.6929824561403, 4.69298245614035, 14.6929824561403, 0.692982456140349, 14.6929824561403, 11.6929824561403, 22.6929824561403, 16.6929824561403, 19.6929824561403, 14.6929824561403, 10.6929824561403, 18.6929824561403, 22.6929824561403, 5.69298245614035, 6.69298245614035, 0.692982456140349, 3.69298245614035, -7.30701754385965, -8.30701754385965, -4.30701754385965, 0.692982456140349, 5.69298245614035, 4.69298245614035, 9.69298245614035, 14.6929824561403, 5.69298245614035, 4.69298245614035, 0.692982456140349, 15.6929824561403, 26.6929824561403, 14.6929824561403, 21.6929824561403, 22.6929824561403, 14.6929824561403, 5.69298245614035, 17.6929824561403, 19.6929824561403, 7.69298245614035, 5.69298245614035, 0.692982456140349, 23.6929824561403, 16.6929824561403, 12.6929824561403, 12.6929824561403, 14.6929824561403, 7.69298245614035, 12.6929824561403, 5.69298245614035, 6.69298245614035, -10.3070175438597, -0.307017543859651, -12.3070175438597, -12.3070175438597, -4.30701754385965, -18.3070175438597, -10.3070175438597, -20.3070175438597, -7.30701754385965, -21.3070175438597, -12.3070175438597, 2.69298245614035, 8.69298245614035, 8.69298245614035, -0.307017543859651, 9.69298245614035, -3.30701754385965, 4.69298245614035, -4.30701754385965, -5.30701754385965, -8.30701754385965, -2.30701754385965, -7.30701754385965, -7.30701754385965, 4.69298245614035, NA, NA, 11.6929824561403, -12.3070175438597, -16.3070175438597, -29.3070175438597, -28.3070175438597, -31.3070175438597, -32.3070175438597, -32.3070175438597), .Dim = c(120L, 1L), '`scaled:center`' = 56.3070175438597, .Dimnames = list(NULL, 'Series 1'), .Tsp = c(1, 120, 1), class = 'ts'), 120, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans12_9bf5384f1708c1d1c1ee78c33a81a926() {
        assertEval("argv <- structure(list(x = structure(list(a = 1:5), .Names = 'a',     row.names = c(NA, 5L), class = 'data.frame')), .Names = 'x');do.call('colMeans', argv)");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans13_d853d0ba724d9c5e65822827db29937e() {
        assertEval("argv <- structure(list(x = structure(list(a = 6:10), .Names = 'a',     row.names = 6:10, class = 'data.frame')), .Names = 'x');do.call('colMeans', argv)");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans2_b0b077a2a8f75855aa334d4f3f6ecc00() {
        assertEval("argv <- list(structure(c(135L, 49L, 32L, NA, 64L, 40L, 77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L, 79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L, 59L), .Dim = c(31L, 1L)), 31, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans3_bc49e9cbcc14eab9656604c9f9b60bb0() {
        assertEval("argv <- list(structure(c(2, 1, 0, 1, 0, NA, NA, NA, 0), .Dim = c(3L, 3L)), 3, 3, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans4_7860bec326f5d132177ef3e3858758bc() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), 0, 0, FALSE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans5_dfc0af973a3a554def7a53fa21e8147d() {
        assertEval("argv <- list(structure(c(3, 3, NA, 3, 3, 3, 3, 3, 4, 3, NA, NA, 2, 3, 4, 5), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))), 8, 2, FALSE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans6_9b08b355fabf73bf3c9e15fd9f3efdec() {
        assertEval("argv <- list(structure(c(2.72365184362824, -0.796449881281511, 0.796148249055565, 2.02271745300814, 1.2802770548002, 1.337056204255, 2.6107240701292, 2.10828628469836, 1.43875587381801, 0.595316954266145, 3.49563715531476, 1.48558049063486, 1.41226464164167, 2.44508400241911, 2.57984360481665, -1.20772288776711, 2.43688378444644, 0.533076425061003, 1.3034273968671, 3.70362282204711, 0.608593870458723, 0.953140512120224, 0.386257122548769, 3.75339780206139, 3.42482460204159, 0.619548124388308, 3.14887764228466, 0.751148471471006, 1.87137783412956, 1.62046400462005, 0.94345287218966, 1.64506447351138, 1.30606946576658, 2.45886447346843, 2.03431588373773, -0.338520676288604, 2.03487908340323, 1.29252851374035, 1.2267540180234, 2.05222753374982, 2.83569182599169, 3.48408642621763, 2.39258208808217, 1.92637187747015, 1.9464722888473, 0.936987622444041, -0.457825141151114, 0.770998483524033, 1.80682914026242, 0.916590155958594, 2.78096073652237, 1.55750387883765, 3.3880545417157, 3.65182127019008, 1.46303726963845, 2.58757002961928, 2.44326477189276, 0.94225036142597, 1.29219317072567, 2.94893881867, 1.24384829814308, 1.84885702049451, 1.32523566412607, 1.28973308890195, 0.395997063065922, 1.22892077218378, 1.7220093913143, 0.805646559888977, 1.01315020534677, 1.31726023805076, 1.72638291442835, 1.7933922500199, 1.62417301864782, 2.84632954278294, 1.06390349068226, 0.393286798351562, 2.85644316208756, 1.17640470313741, 0.528983054741685, 1.96126284937392, 0.917057889286139, 2.45214192885654, 2.46901056075969, 0.964752028993787, 1.15564656732576, 1.8050377493702, 3.92150679994132, 1.89242778597682, 1.79539660063946, 3.11975967552643, 3.60233448863085, 1.28811938153997, 2.49044833125605, 2.82723855540917, 0.488353198794268), .Dim = c(95L, 1L)), 95, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans7_79edec34f9e369f245cd9514e9e77508() {
        assertEval("argv <- list(structure(FALSE, .Dim = c(1L, 1L)), 1, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans8_02a9f5d93f6a558022b5b467a1ff2724() {
        assertEval("argv <- list(structure(c(234.505586749024, 30.477338238484, 110.520869124744, 10.8182256360112, 147.313169560589, 97.6285379622695, 176.128082322087, 47.2454421006426, 1.90674769458181e-15, 30.477338238484, 416.975499504725, 31.7861370189749, 190.703952476833, 120.117506711705, 442.506661969244, 239.889830502368, 22.2127533877541, 8.96469890623342e-16, 110.520869124744, 31.7861370189749, 1515.40698347813, 93.4417828515041, 178.042033105564, 210.514489336906, 228.304319294085, 24.2402628282532, 9.78296809359315e-16, 10.8182256360112, 190.703952476833, 93.4417828515041, 1736.17011782569, 171.990208955525, 616.163154757563, 314.295577560061, 190.513839846008, 7.68882264110221e-15, 147.313169560589, 120.117506711705, 178.042033105564, 171.990208955525, 4391.22673539453, 270.845832643245, 258.906125067947, 151.459157745218, 6.11264043711995e-15, 97.6285379622695, 442.506661969244, 210.514489336906, 616.163154757563, 270.845832643245, 3843.51687278644, 444.735756817902, 537.305365376654, 2.16847535162432e-14, 176.128082322087, 239.889830502368, 228.304319294085, 314.295577560062, 258.906125067947, 444.735756817902, 5767.34674134268, 307.533224133396, 1.24115309340219e-14, 47.2454421006426, 22.2127533877541, 24.2402628282532, 190.513839846008, 151.459157745218, 537.305365376655, 307.533224133396, 264.760049944031, 1.06852765558369e-14, 1.90674769458181e-15, 8.96469890623341e-16, 9.78296809359316e-16, 7.6888226411022e-15, 6.11264043711995e-15, 2.16847535162432e-14, 1.24115309340219e-14, 1.06852765558369e-14, 4.31240042063952e-31), .Dim = c(9L, 9L)), 9, 9, FALSE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans9_ee6367d1a136a79f9991f4a0f54174a7() {
        assertEval("argv <- list(structure(c(NA, 17.4716236802524, 0.424429400003, -2.45474630431729, -8.6855922903657, -11.7956139807344, -8.08147081196715, -13.3123167980156, -1.24650334752019, 21.281002075072, -5.32311940332657, 0.621869751489083, -19.2022951076469, -0.543162784063959, NA, NA, 15.344649382745, -9.74060313555005, 0.149375174081257, -5.85062482591874, -6.90563567110309, -9.96064651628744, 5.6326723568001, -8.78481137542338, -6.01565736147178, -15.543162784064, 2.34681552556734, -13.2465033475202, -3.82901961529671, 1.5226506664314, NA, -5.9777558474085, 22.7534966524798, 15.5010454558094, 4.13857256877024, -11.6855922903657, 11.6768805966734, -7.38893285382193, 10.8527157375375, -11.3889328538219, 14.1493751740813, -0.388932853821931, 13.0835617235859, -1.98225172690947, 5.96273742790618, -1.50975714950164, -1.38893285382193, 9.90772658272184, 7.3144077096343, -12.9822517269095, 2.02855087840155, -4.7956139807344, 3.14937517408126, -10.3231194033266, -2.25730595283121, 2.56685890630474, 4.27019946976097, 5.14937517408126, 0.0285508784015471, 5.85271573753749, 6.73189144185778, -6.38893285382193, 0.0285508784015471, -3.14728426246251, 15.1493751740813, 13.7869022870421, -7.27891116345324, 9.61106714617807, 4.84191313222647, -3.98225172690947, -6.38893285382193, 13.0285508784015, 5.13857256877024, -8.50975714950164, -0.619778839870337, -3.97144912159845, 23.1493751740813, -2.80641658604541, -1.03726257209382, 2.25939686444995, 4.25939686444995, -4.38893285382193, 6.38022116012966, -4.74060313555005, 2.02855087840155, -15.7956139807344, 8.21518862457662, -12.0264599667828, -2.1364816571515, 5.8635183428485, -14.729800530239, 4.80850749766416, -11.7848113754234, 9.45683721593604, -15.2573059528312, 5.28100207507198, 12.8635183428485, 6.50104545580937, 1.55605630099372, -7.44394369900628, 9.9735400332172, -11.2681085581422, 7.44603461062503, -8.14728426246251, -1.72980053023903, -3.90563567110309, 4.56685890630474, -5.37813024851092, -1.25730595283121, 10.7426940471688, NA, NA, 6.24343998511081, -21.9164382764141, -6.1364816571515, -15.8398222206077, -4.12567905184048, -7.94984391097642, -6.4773493335686, -5.65318447443266), .Dim = c(120L, 1L)), 120, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums1_9b9818ee0ebdd4ff2d780c6b86b2b005() {
        assertEval("argv <- list(structure(c(365, 365, 365, 366, 1, 0), .Dim = c(3L, 2L)), 3, 2, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums2_9928787590dd7d6e134b1cb157d33511() {
        assertEval("argv <- list(structure(c(1L, 0L, 0L, 0L, 2L, 0L, 0L, 0L, 3L), .Dim = c(3L, 3L)), 3, 3, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums3_b8c4ff6ebe2e86f7f7dcd4ed6925d2b3() {
        assertEval("argv <- list(structure(c(5, 29, 14, 16, 15, 54, 14, 10, 20, 84, 17, 94, 68, 119, 26, 7), .Dim = c(4L, 4L), .Dimnames = structure(list(Hair = c('Black', 'Brown', 'Red', 'Blond'), Eye = c('Green', 'Hazel', 'Blue', 'Brown')), .Names = c('Hair', 'Eye'))), 4, 4, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums4_1f10566ecabfeb829d69a5054bd80868() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, TRUE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums5_abfa4854c2263a06b1a04fc1782e520f() {
        assertEval("argv <- list(structure(cim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums6_4b2312face2b669c6d665b57501f1fa1() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), 0, 0, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums7_e4d186b078b2fe26b3b24325db350af8() {
        assertEval("argv <- list(structure(c(-7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, -421.875, -274.625, -166.375, -91.125, -42.875, -15.625, -3.375, -0.125, 0.125, 3.375, 15.625, 42.875, 91.125, 166.375, 274.625, 421.875, -9187.5, -2866.5, -445.499999999999, -4.5, -283.5, -562.5, -541.5, -220.5, 220.5, 541.5, 562.5, 283.5, 4.49999999999999, 445.5, 2866.5, 9187.5, -139741.875, -4844.38499999995, -10122.255, -28872.045, -28539.315, -15800.625, -4325.535, -178.605, 178.605, 4325.535, 15800.625, 28539.315, 28872.045, 10122.255, 4844.38500000001, 139741.875), .Dim = c(16L, 4L)), 16, 4, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums8_a09a5bea37c62032b087b79f7d709c3b() {
        assertEval("argv <- list(structure(0:1, .Dim = 1:2, .Dimnames = list('strata(grp)', c('x', 'strata(grp)'))), 1, 2, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums9_f9a10b1b29d881aad9fc61b4ab7c66bf() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, -1.43884556914512e-134, 0, 0, 0, -7.95468296571581e-252, 1.76099882882167e-260, 0, -9.38724727098368e-323, -0.738228974836154, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.84657791618065e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.05931985100232e-174, 0, -3.41789378681991e-150, 0, 0, 0, 0, -1.07225492686949e-10, 0, 1.65068934474523e-67, 0, -6.49830035279282e-307, 0, 5.83184963977238e-90, 0, -9.81722610183938e-287, 6.25336419454196e-54, 0, 0, 0, -1.72840591500382e-274, 1.22894687952101e-13, 0.660132850077566, 0, 0, 7.79918925397516e-200, -2.73162827952857e-178, 1.32195942051179e-41, 0, 0, 0, 0, 2.036057023761e-45, -3.40425060445074e-186, 1.59974269220388e-26, 0, 6.67054294775317e-124, 0.158503117506202, 0, 0, 0, 0, 0, 0, 3.42455724859116e-97, 0, 0, -2.70246891320217e-272, 0, 0, -3.50562438899045e-06, 0, 0, 1.35101732326608e-274, 0, 0, 0, 0, 0, 0, 0, 7.24580295957621e-65, 0, -3.54887341172294e-149, 0, 0, 0, 0, 0, 0, 0, 0, 1.77584594753563e-133, 0, 0, 0, 2.88385135688311e-250, 1.44299633616158e-259, 0, 1.56124744085834e-321, 1.63995835868977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.01050064173383e-122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.64868196850938e-172, 0, 6.28699823828692e-149, 0, 0, 0, 0, 5.0552295590188e-09, 0, 2.30420733561404e-66, 0, 7.0823279075443e-306, 0, 2.05009901740696e-88, 0, 7.41800724282869e-285, 7.18347043784483e-53, 0, 0, 0, 1.04251223075649e-273, 9.75816316577433e-13, 4.29519957592147, 0, 0, 1.33541454912682e-198, 2.34606233784019e-176, 8.38236726536896e-41, 0, 0, 0, 0, 1.35710537434521e-43, 1.15710503176511e-185, 1.25601735272233e-25, 0, 4.46811655846376e-123, 4.4196641795634, 0, 0, 0, 0, 0, 0, 3.74179015251531e-93, 0, 0, 3.62662047836582e-271, 0, 0, 1.26220330674453e-05, 0, 0, 1.72715562657338e-273, 0, 0, 0, 0, 0, 0, 0, 5.46372806810809e-64, 0, 2.47081972486962e-148, 0, 0, 0), .Dim = c(100L, 2L)), 100, 2, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltincolnames_testcolnames1_b532ac7a405a2e0af106c93516d1b6d8() {
        assertEval("argv <- structure(list(x = structure(c(1.00000000000001, 2, 3,     4, 5, 6, 7, 8, 9, 10, 0.999999999999998, 4, 9, 16, 25, 36,     49, 64, 81, 100, 5.39416105805496e-14, 2, 6, 12, 20, 30,     42, 56, 72, 90, 1, 0.999999999999999, 1, 1, 1, 1, 1, 1, 1,     1), .Dim = c(10L, 4L), .Dimnames = list(NULL, c('', 'B',     'C', 'D')))), .Names = 'x');do.call('colnames', argv)");
    }

    @Test
    public void TestrGenBuiltincolnames_testcolnames2_2df6fb7149a94bdb5ede321e6a495c67() {
        assertEval("argv <- structure(list(x = structure(list(x = 1:6, CC = 11:16,     f = structure(c(1L, 1L, 2L, 2L, 3L, 3L), .Label = c('1',         '2', '3'), class = 'factor')), .Names = c('x', 'CC',     'f'), row.names = c(NA, -6L), class = 'data.frame')), .Names = 'x');do.call('colnames', argv)");
    }

    @Test
    public void TestrGenBuiltincolnamesassign__testcolnamesassign_1_ac51d916fae0df57031a71e8af71524a() {
        assertEval("argv <- structure(list(x = structure(c(0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0), .Dim = c(200L, 5L)), value = c('X1', 'X2', 'X3',     'X4', 'X5')), .Names = c('x', 'value'));do.call('colnames<-', argv)");
    }

    @Test
    public void TestrGenBuiltincomment_testcomment1_c77b95f769037774163181fe113edc3d() {
        assertEval("argv <- list(NULL); .Internal(comment(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltincomment_testcomment2_c728dc42f3f20134f999f56ab33d24ce() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0'))); .Internal(comment(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltincomment_testcomment3_ba1b2dbce7f2b9ab05cb3baf2da79e07() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(comment(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltincomment_testcomment4_8cdd9bed472bd6b60605081bf8a10a7b() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4, comment = c('This is my very important data from experiment #0234', 'Jun 5, 1998'))); .Internal(comment(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltincommentassign_testcommentassign1_451988423f92f80e38c9ce01b33e468e() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4, comment = c('This is my very important data from experiment #0234', 'Jun 5, 1998')), c('This is my very important data from experiment #0234', 'Jun 5, 1998')); .Internal(`comment<-`(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincommentassign_testcommentassign2_6bff4e1a724433a88f03217bd665d0d1() {
        assertEval("argv <- list(character(0), NULL); .Internal(`comment<-`(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincommentassign_testcommentassign3_b5cccdd811618e3b3b05560c13209f25() {
        assertEval("argv <- list(logical(0), NULL); .Internal(`comment<-`(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex1_c8e64b9db6042406775a809244fb45e7() {
        assertEval("argv <- list(0, numeric(0), numeric(0)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex2_ba0f6ed54256cdb17391e415f3b76e2d() {
        assertEval("argv <- list(FALSE, FALSE, numeric(0)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex3_b283041a4c005998f8ef9050e5986b9f() {
        assertEval("argv <- list(0L, 1:10, c(1, 1.4142135623731, 1.73205080756888, 2, 2.23606797749979, 2.44948974278318, 2.64575131106459, 2.82842712474619, 3, 3.16227766016838)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex4_afe1ce19bc7c7ccb959feb4a6ae6045c() {
        assertEval("argv <- list(0L, NA_real_, NA_real_); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex5_0b2b7428e26e9fb5ca8cf36b981a6159() {
        assertEval("argv <- list(0L, c(-0.560475646552213, -0.23017748948328, 1.55870831414912, 0.070508391424576, 0.129287735160946, 1.71506498688328, 0.460916205989202, -1.26506123460653, -0.686852851893526, -0.445661970099958, 1.22408179743946, 0.359813827057364, 0.400771450594052, 0.11068271594512, -0.555841134754075, 1.78691313680308, 0.497850478229239, -1.96661715662964, 0.701355901563686, -0.472791407727934, -1.06782370598685, -0.217974914658295, -1.02600444830724, -0.72889122929114, -0.625039267849257, -1.68669331074241, 0.837787044494525, 0.153373117836515, -1.13813693701195, 1.25381492106993, 0.426464221476814, -0.295071482992271, 0.895125661045022, 0.878133487533042, 0.821581081637487, 0.688640254100091, 0.553917653537589, -0.0619117105767217, -0.305962663739917, -0.380471001012383, -0.694706978920513, -0.207917278019599, -1.26539635156826, 2.16895596533851, 1.20796199830499, -1.12310858320335, -0.402884835299076, -0.466655353623219, 0.779965118336318, -0.0833690664718293, 0.253318513994755, -0.028546755348703, -0.0428704572913161, 1.36860228401446, -0.225770985659268, 1.51647060442954, -1.54875280423022, 0.584613749636069, 0.123854243844614, 0.215941568743973, 0.379639482759882, -0.502323453109302, -0.33320738366942, -1.01857538310709, -1.07179122647558, 0.303528641404258, 0.448209778629426, 0.0530042267305041, 0.922267467879738, 2.05008468562714, -0.491031166056535, -2.30916887564081, 1.00573852446226, -0.709200762582393, -0.688008616467358, 1.0255713696967, -0.284773007051009, -1.22071771225454, 0.18130347974915, -0.138891362439045, 0.00576418589988693, 0.38528040112633, -0.370660031792409, 0.644376548518833, -0.220486561818751, 0.331781963915697, 1.09683901314935, 0.435181490833803, -0.325931585531227, 1.14880761845109, 0.993503855962119, 0.54839695950807, 0.238731735111441, -0.627906076039371, 1.36065244853001, -0.600259587147127, 2.18733299301658, 1.53261062618519, -0.235700359100477, -1.02642090030678), c(-0.710406563699301, 0.25688370915653, -0.246691878462374, -0.347542599397733, -0.951618567265016, -0.0450277248089203, -0.784904469457076, -1.66794193658814, -0.380226520287762, 0.918996609060766, -0.575346962608392, 0.607964322225033, -1.61788270828916, -0.0555619655245394, 0.519407203943462, 0.301153362166714, 0.105676194148943, -0.640706008305376, -0.849704346033582, -1.02412879060491, 0.117646597100126, -0.947474614184802, -0.490557443700668, -0.256092192198247, 1.84386200523221, -0.651949901695459, 0.235386572284857, 0.0779608495637108, -0.961856634130129, -0.0713080861235987, 1.44455085842335, 0.451504053079215, 0.0412329219929399, -0.422496832339625, -2.05324722154052, 1.13133721341418, -1.46064007092482, 0.739947510877334, 1.90910356921748, -1.4438931609718, 0.701784335374711, -0.262197489402468, -1.57214415914549, -1.51466765378175, -1.60153617357459, -0.530906522170303, -1.4617555849959, 0.687916772975828, 2.10010894052567, -1.28703047603518, 0.787738847475178, 0.76904224100091, 0.332202578950118, -1.00837660827701, -0.119452606630659, -0.280395335170247, 0.56298953322048, -0.372438756103829, 0.976973386685621, -0.374580857767014, 1.05271146557933, -1.04917700666607, -1.26015524475811, 3.2410399349424, -0.416857588160432, 0.298227591540715, 0.636569674033849, -0.483780625708744, 0.516862044313609, 0.368964527385086, -0.215380507641693, 0.0652930335253153, -0.034067253738464, 2.12845189901618, -0.741336096272828, -1.09599626707466, 0.0377883991710788, 0.310480749443137, 0.436523478910183, -0.458365332711106, -1.06332613397119, 1.26318517608949, -0.349650387953555, -0.865512862653374, -0.236279568941097, -0.197175894348552, 1.10992028971364, 0.0847372921971965, 0.754053785184521, -0.499292017172261, 0.214445309581601, -0.324685911490835, 0.0945835281735714, -0.895363357977542, -1.31080153332797, 1.99721338474797, 0.600708823672418, -1.25127136162494, -0.611165916680421, -1.18548008459731)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex6_87ca22aeafd32c40e7138de5daa874e8() {
        assertEval("argv <- list(0L, numeric(0), numeric(0)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex7_4ebf0fe01af6e2020d0ae9aebe00e041() {
        assertEval("argv <- list(0L, NULL, numeric(0)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr1_6170987cc326ac86d91c4c762cf3c51e() {
        assertEval("argv <- list(structure(list(size = 1056, isdir = FALSE, mode = structure(420L, class = 'octmode'), mtime = structure(1395082115.08988, class = c('POSIXct', 'POSIXt')), ctime = structure(1395082122.18188, class = c('POSIXct', 'POSIXt')), atime = structure(1395082175.70988, class = c('POSIXct', 'POSIXt')), uid = 1001L, gid = 1001L, uname = 'roman', grname = 'roman'), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = '/home/roman/r-instrumented/tests/myLib/pkgA/R/pkgA'), structure(list(    size = NULL, isdir = NULL, mode = NULL, mtime = NULL, ctime = NULL, atime = NULL, uid = NULL, gid = NULL, uname = NULL, grname = NULL), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = '/home/roman/r-instrumented/tests/myLib/pkgA/R/pkgA')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr10_01391651584ab36a196be5f448299419() {
        assertEval("argv <- list(structure(list(Df = c(1, 1, 1, 1, 16), `Sum Sq` = c(309.6845, 0.420500000000001, 4.90050000000001, 3.9605, 64.924), `Mean Sq` = c(309.6845, 0.420500000000001, 4.90050000000001, 3.9605, 4.05775), `F value` = c(76.3192656028586, 0.103628858357464, 1.20768899020393, 0.976033516111146, NA), `Pr(>F)` = c(1.73825946976405e-07, 0.751685166772039, 0.288052080502172, 0.337885793589305, NA)), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), class = c('anova', 'data.frame'), row.names = c('(Intercept)  ', 'rate         ', 'additive     ', 'rate:additive', 'Residuals    ')), structure(list(Df = NULL, `Sum Sq` = NULL, `Mean Sq` = NULL, `F value` = NULL, `Pr(>F)` = NULL), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), class = c('anova', 'data.frame'), row.names = c('(Intercept)  ', 'rate         ', 'additive     ', 'rate:additive', 'Residuals    '))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr11_6c5242f61b0eb0b91cfb6dd7132dc6f3() {
        assertEval("argv <- list(structure(list(srcfile = c(NA, '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats'), frow = c(NA, 2228L, 2369L, 2379L), lrow = c(NA, 2228L, 2369L, 2380L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 4L), class = 'data.frame'), structure(list(srcfile = NULL, frow = NULL, lrow = NULL), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 4L), class = 'data.frame')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr12_03c64cb8758a9289891e9d90cfba4daa() {
        assertEval("argv <- list(structure(list(y = c(73, 73, 70, 74, 75, 115, 105, 107, 124, 107, 116, 125, 102, 144, 178, 149, 177, 124, 157, 128, 169, 165, 186, 152, 181, 139, 173, 151, 138, 181, 152, 188, 173, 196, 180, 171, 188, 174, 198, 172, 176, 162, 188, 182, 182, 141, 191, 190, 159, 170, 163, 197), x = c(1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 11, 12)), .Names = c('y', 'x'), class = 'data.frame', row.names = c(NA, 52L), terms = quote(~y + x)), structure(list(y = NULL, x = NULL), .Names = c('y', 'x'), class = 'data.frame', row.names = c(NA, 52L), terms = quote(~y + x))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr13_c47695dfcfef753f96549dfb4237a266() {
        assertEval("argv <- list(structure(list(x = 1:10, y = c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492, -0.305388387156356), z = structure(c(9L, 3L, 6L, 2L, 10L, 5L, 1L, 4L, 8L, 7L), .Label = c('a', 'c', 'f', 'h', 'i', 'p', 'v', 'x', 'y', 'z'), class = 'factor')), .Names = c('x', 'y', 'z'), row.names = c(NA, 10L), .S3Class = 'data.frame', timestamps = structure(1386392033.84327, class = c('POSIXct', 'POSIXt')), class = structure('myFrame', package = '.GlobalEnv')), structure(list(x = NULL, y = NULL, z = NULL), .Names = c('x', 'y', 'z'), row.names = c(NA, 10L), .S3Class = 'data.frame', timestamps = structure(1386392033.84327, class = c('POSIXct', 'POSIXt')), class = structure('myFrame', package = '.GlobalEnv'))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr14_7f10f9cbbedfd4ce1ef44c09b43a58ed() {
        assertEval("argv <- list(structure(list(y = c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434)), .Names = 'y', class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ 0)), structure(list(y = NULL), .Names = 'y', class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ 0))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr15_dab7fd2b52400b1ed6d86c6df3465550() {
        assertEval("argv <- list(structure(list(`cbind(w = weight, w2 = weight^2)` = structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), class = 'data.frame', row.names = c(NA, 20L), terms = quote(cbind(w = weight, w2 = weight^2) ~ group)), structure(list(`cbind(w = weight, w2 = weight^2)` = NULL, group = NULL), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), class = 'data.frame', row.names = c(NA, 20L), terms = quote(cbind(w = weight, w2 = weight^2) ~ group))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr16_696badc92940bd654fb9a3360cff004a() {
        assertEval("argv <- list(structure(list(Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L), B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor')), .Names = c('Y', 'B', 'V', 'N'), terms = quote(Y ~ B + V + N + V:N), row.names = 2:72, class = 'data.frame'), structure(list(Y = NULL, B = NULL, V = NULL, N = NULL), .Names = c('Y', 'B', 'V', 'N'), terms = quote(Y ~ B + V + N + V:N), row.names = 2:72, class = 'data.frame')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr17_1ffdce0a2aeb8529b4bf0b2f95854194() {
        assertEval("argv <- list(structure(list(Fr = c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8), Hair = structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('Black', 'Brown', 'Red', 'Blond'), class = 'factor'), Eye = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('Fr', 'Hair', 'Eye', 'Sex'), class = 'data.frame', row.names = c(NA, 32L), terms = quote(Fr ~ (Hair + Eye + Sex)^2)), structure(list(Fr = NULL, Hair = NULL, Eye = NULL, Sex = NULL), .Names = c('Fr', 'Hair', 'Eye', 'Sex'), class = 'data.frame', row.names = c(NA, 32L), terms = quote(Fr ~ (Hair + Eye + Sex)^2))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr18_ed93cd98b2b1d54aa877c66fdd18a7b7() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), class = 'data.frame', row.names = 1947:1962, terms = quote(Employed ~     GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year)), structure(list(Employed = NULL, GNP.deflator = NULL, GNP = NULL, Unemployed = NULL, Armed.Forces = NULL, Population = NULL, Year = NULL), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), class = 'data.frame', row.names = 1947:1962, terms = quote(Employed ~ GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr19_ca805d6f8e051ad3465e8daa8f4c1797() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 1, 2), Deviance = c(12.2441566485997, 32.825622681839, 8.44399377410362, 11.9670615295804), AIC = c(73.9421143635373, 92.5235803967766, 72.1419514890412, 77.665019244518)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user', '+ Temp', '+ Soft'), class = c('anova', 'data.frame')), structure(list(Df = NULL, Deviance = NULL, AIC = NULL), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user', '+ Temp', '+ Soft'), class = c('anova', 'data.frame'))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr2_8303d0877782ef9729ca639780a1a257() {
        assertEval("argv <- list(structure(list(y = c(2.30923841792462, 3.23011719303818, 2.9161246695212, 3.35931329373059, 5.3777049208621, 5.63518136825043, 7.37725908636056, 7.75621985157329, 10.1175871700049, 8.86877085545769), x1 = 1:10, x2 = 1:10, x3 = c(0.1, 0.4, 0.9, 1.6, 2.5, 3.6, 4.9, 6.4, 8.1, 10)), .Names = c('y', 'x1', 'x2', 'x3'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x1 + x2 + x3)), structure(list(y = NULL, x1 = NULL, x2 = NULL, x3 = NULL), .Names = c('y', 'x1', 'x2', 'x3'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x1 + x2 + x3))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr20_bc61b11b3c96b333a959060f4d8bc936() {
        assertEval("argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'), Soft = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L), .Label = c('Hard', 'Medium', 'Soft'), class = 'factor')), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), class = 'data.frame', row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), terms = quote(cbind(X, M) ~ M.user + Temp + Soft)), structure(list(`cbind(X, M)` = NULL, M.user = NULL, Temp = NULL, Soft = NULL), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), class = 'data.frame', row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), terms = quote(cbind(X,     M) ~ M.user + Temp + Soft))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr3_d96137928fe2c219335c64bc0b1f4069() {
        assertEval("argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x * z)), structure(list(y = NULL, x = NULL, z = NULL), .Names = c('y', 'x', 'z'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x * z))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr4_9edcdd7bb4b882c051133c2c8048df4b() {
        assertEval("argv <- list(structure(list(surname = structure(integer(0), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(integer(0), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(integer(0), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = integer(0), class = 'data.frame'), structure(list(surname = NULL, nationality = NULL, deceased = NULL), .Names = c('surname', 'nationality', 'deceased'), row.names = integer(0), class = 'data.frame')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr5_790637be127d2d13ea042e4385752121() {
        assertEval("argv <- list(structure(list(A = 0:10, B = 10:20, `NA` = 20:30), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame'), structure(list(A = NULL, B = NULL, `NA` = NULL), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr6_fccb37a8a88d55fe4891481dbdf37b3d() {
        assertEval("argv <- list(structure(list(`Surv(stop, status * as.numeric(event), type = 'mstate')` = structure(c(760, 2160, 5441, 277, 1815, 2587, 547, 1125, 2010, 2422, 6155, 1767, 61, 60, 7807, 7732, 6126, 7921, 3590, 5231, 5384, 5934, 6415, 6789, 6778, 3561, 4505, 3987, 4726, 5550, 5216, 5757, 2345, 6931, 6760, 5796, 4810, 5143, 3091, 3316, 700, 1706, 5088, 944, 2466, 1706, 7364, 1857, 9510, 9603, 31, 7479, 2006, 2588, 2983, 8761, 3932, 4201, 5293, 273, 2223, 4249, 5308, 8327, 499, 5789, 7417, 3242, 3275, 10359, 10852, 362, 9993, 1795, 3562, 4139, 4840, 4959, 547, 4119, 8308, 1674, 2953, 3776, 1369, 7911, 7519, 9318, 4370, 7301, 1642, 4169, 7417, 6117, 4536, 7235, 6723, 7397, 7428, 2084, 4066, 1673, 2860, 0, 3773, 4810, 4206, 2314, 4065, 8961, 6143, 517, 3837, 7498, 2815, 8806, 7668, 12457, 8600, 7003, 2435, 1826, 2403, 3805, 4901, 365, 6642, 3318, 3012, 1431, 2223, 4962, 5982, 638, 3346, 4996, 6800, 7454, 8887, 5024, 2833, 4232, 5238, 3186, 3380, 3382, 8100, 1766, 7184, 8059, 6008, 5047, 2236, 8165, 4224, 2844, 6256, 7370, 3560, 4939, 4941, 2230, 3068, 152, 10122, 3226, 3943, 518, 8569, 845, 2099, 8006, 8052, 9560, 0, 7965, 7470, 8133, 809, 153, 1851, 3010, 2121, 7085, 5068, 7093, 5930, 6878, 8080, 791, 6626, 3962, 1116, 1249, 9257, 1077, 566, 174, 4627, 5022, 2070, 3012, 1625, 6607, 8381, 8389, 1005, 3895, 4236, 6970, 8497, 2861, 8487, 3227, 8030, 8023, 31, 2435, 518, 4758, 7958, 7884, 4453, 6349, 7862, 1392, 3167, 6025, 4656, 1767, 7736, 2678, 2191, 3658, 7758, 8009, 2556, 3511, 7954, 822, 4321, 5151, 7545, 7576, 32, 7875, 5236, 7106, 2802, 7898, 3014, 7867, 5354, 2989, 7555, 6089, 8697, 6479, 1826, 5917, 792, 1431, 1434, 4763, 2910, 6209, 5824, 2400, 1400, 3027, 7198, 7247, 2557, 3855, 61, 7410, 1492, 7160, 7899, 5181, 7280, 3448, 7381, 2434, 6763, 7065, 1218, 1554, 7533, 7288, 2922, 5988, 2495, 5234, 9598, 2953, 2961, 4539, 3775, 6524, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 1, 2, 2, 0, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 2, 2, 0, 2, 1, 2, 2, 0, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 0, 0, 2, 0, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 1, 2, 1, 2, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 1, 2, 0, 0, 1, 2, 1, 2, 0, 1, 2, 2, 1, 2), .Dim = c(300L, 2L), .Dimnames = list(NULL, c('time', 'status')), type = 'mright', states = c('1', '2'), class = 'Surv')), .Names = 'Surv(stop, status * as.numeric(event), type = \\'mstate\\')', class = 'data.frame', row.names = c(NA, 300L)), structure(list(`Surv(stop, status * as.numeric(event), type = 'mstate')` = NULL), .Names = 'Surv(stop, status * as.numeric(event), type = \\'mstate\\')', class = 'data.frame', row.names = c(NA, 300L))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr7_4f405d4a6fd6c582c696add897152fa5() {
        assertEval("argv <- list(structure(list(size = 284, isdir = FALSE, mode = structure(436L, class = 'octmode'), mtime = structure(1386397148.36693, class = c('POSIXct', 'POSIXt')), ctime = structure(1386397148.36693, class = c('POSIXct', 'POSIXt')), atime = structure(1386397148.36793, class = c('POSIXct', 'POSIXt')), uid = 501L, gid = 501L, uname = 'lzhao', grname = 'lzhao'), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = '/home/lzhao/tmp/RtmpvWhahC/Rex4eb8743f75cc'), structure(list(    size = NULL, isdir = NULL, mode = NULL, mtime = NULL, ctime = NULL, atime = NULL, uid = NULL, gid = NULL, uname = NULL, grname = NULL), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = '/home/lzhao/tmp/RtmpvWhahC/Rex4eb8743f75cc')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr8_45b5b65223e2bf4b5b7a7f5ba29377d8() {
        assertEval("argv <- list(structure(list(File = character(0), Title = character(0), PDF = character(0), Depends = list(), Keywords = list()), .Names = c('File', 'Title', 'PDF', 'Depends', 'Keywords'), row.names = integer(0), class = 'data.frame'), structure(list(File = NULL, Title = NULL, PDF = NULL, Depends = NULL, Keywords = NULL), .Names = c('File', 'Title', 'PDF', 'Depends', 'Keywords'), row.names = integer(0), class = 'data.frame')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr9_7ba67d8fea5f18da8b43b712312b01b5() {
        assertEval("argv <- list(structure(list(Version = c('2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0'), Date = c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), Category = c('BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES'), Text = c('Using with(), eval() etc with a list with some unnamed elements now\\n works.  (PR#14035)', 'cor(A, B) where A is n x 1 and B a 1-dimensional array segfaulted or\\n gave an internal error.  (The case cor(B, A) was PR#7116.)', 'cut.POSIXt() applied to a start value after the DST transition on a\\n DST-change day could give the wrong time for argument breaks in\\n units of days or longer.  (PR#14208)', 'do_par() UNPROTECTed too early (PR#14214)', 'Subassignment x[[....]] <- y didn't check for a zero-length right\\n hand side, and inserted a rubbish value.  (PR#14217)', 'Extreme tail behavior of, pbeta() {and hence pf()}, e.g., pbeta(x,\\n 3, 2200, lower.tail=FALSE, log.p=TRUE) now returns finite values\\n instead of jumping to -Inf too early.  (PR#14230).', 'read.fwf() misread multi-line records when n was specified.\\n (PR#14241)', 'gzcon( <textConnection> ), an error, no longer damages the\\n connection (in a way to have it segfault).  (PR#14237)', 'If xy[z].coords (used internally by many graphics functions) are\\n given a list as x, they now check that the list has suitable names\\n and give a more informative error message.  (PR#13936)')), .Names = c('Version', 'Date', 'Category', 'Text'), bad = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), package = 'R', row.names = c(1473L, 1483L, 1484L, 1485L, 1486L, 1493L, 1499L, 1503L, 1505L), class = c('news_db_from_Rd', 'news_db', 'data.frame')), structure(list(Version = NULL, Date = NULL, Category = NULL, Text = NULL), .Names = c('Version', 'Date', 'Category', 'Text'), bad = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), package = 'R', row.names = c(1473L, 1483L, 1484L, 1485L, 1486L, 1493L, 1499L, 1503L, 1505L), class = c('news_db_from_Rd', 'news_db', 'data.frame'))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincos_testcos1_bf4698ad3ab0a3b8360d7770383b6471() {
        assertEval("argv <- list(c(-6.28318530717959, -6.1261056745001, -5.96902604182061, -5.81194640914112, -5.65486677646163, -5.49778714378214, -5.34070751110265, -5.18362787842316, -5.02654824574367, -4.86946861306418, -4.71238898038469, -4.5553093477052, -4.39822971502571, -4.24115008234622, -4.08407044966673, -3.92699081698724, -3.76991118430775, -3.61283155162826, -3.45575191894877, -3.29867228626928, -3.14159265358979, -2.9845130209103, -2.82743338823081, -2.67035375555132, -2.51327412287183, -2.35619449019234, -2.19911485751286, -2.04203522483337, -1.88495559215388, -1.72787595947439, -1.5707963267949, -1.41371669411541, -1.25663706143592, -1.09955742875643, -0.942477796076938, -0.785398163397448, -0.628318530717959, -0.471238898038469, -0.314159265358979, -0.15707963267949, 0, 0.15707963267949, 0.314159265358979, 0.471238898038469, 0.628318530717959, 0.785398163397448, 0.942477796076938, 1.09955742875643, 1.25663706143592, 1.41371669411541, 1.5707963267949, 1.72787595947439, 1.88495559215388, 2.04203522483337, 2.19911485751286, 2.35619449019234, 2.51327412287183, 2.67035375555133, 2.82743338823081, 2.9845130209103, 3.14159265358979, 3.29867228626928, 3.45575191894877, 3.61283155162826, 3.76991118430775, 3.92699081698724, 4.08407044966673, 4.24115008234622, 4.39822971502571, 4.5553093477052, 4.71238898038469, 4.86946861306418, 5.02654824574367, 5.18362787842316, 5.34070751110265, 5.49778714378214, 5.65486677646163, 5.81194640914112, 5.96902604182061, 6.1261056745001, 6.28318530717959, 6.44026493985908, 6.59734457253857, 6.75442420521805, 6.91150383789754, 7.06858347057704, 7.22566310325652, 7.38274273593601, 7.5398223686155, 7.69690200129499, 7.85398163397448, 8.01106126665397, 8.16814089933346, 8.32522053201295, 8.48230016469244, 8.63937979737193, 8.79645943005142, 8.95353906273091, 9.1106186954104, 9.26769832808989, 9.42477796076938));cos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincos_testcos2_339a77b6e10125d7528921979c37ab17() {
        assertEval("argv <- list(c(0-3i, 0-2.96984924623116i, 0-2.93969849246231i, 0-2.90954773869347i, 0-2.87939698492462i, 0-2.84924623115578i, 0-2.81909547738693i, 0-2.78894472361809i, 0-2.75879396984925i, 0-2.7286432160804i, 0-2.69849246231156i, 0-2.66834170854271i, 0-2.63819095477387i, 0-2.60804020100502i, 0-2.57788944723618i, 0-2.54773869346734i, 0-2.51758793969849i, 0-2.48743718592965i, 0-2.4572864321608i, 0-2.42713567839196i, 0-2.39698492462312i, 0-2.36683417085427i, 0-2.33668341708543i, 0-2.30653266331658i, 0-2.27638190954774i, 0-2.24623115577889i, 0-2.21608040201005i, 0-2.18592964824121i, 0-2.15577889447236i, 0-2.12562814070352i, 0-2.09547738693467i, 0-2.06532663316583i, 0-2.03517587939699i, 0-2.00502512562814i, 0-1.9748743718593i, 0-1.94472361809045i, 0-1.91457286432161i, 0-1.88442211055276i, 0-1.85427135678392i, 0-1.82412060301508i, 0-1.79396984924623i, 0-1.76381909547739i, 0-1.73366834170854i, 0-1.7035175879397i, 0-1.67336683417085i, 0-1.64321608040201i, 0-1.61306532663317i, 0-1.58291457286432i, 0-1.55276381909548i, 0-1.52261306532663i, 0-1.49246231155779i, 0-1.46231155778894i, 0-1.4321608040201i, 0-1.40201005025126i, 0-1.37185929648241i, 0-1.34170854271357i, 0-1.31155778894472i, 0-1.28140703517588i, 0-1.25125628140704i, 0-1.22110552763819i, 0-1.19095477386935i, 0-1.1608040201005i, 0-1.13065326633166i, 0-1.10050251256281i, 0-1.07035175879397i, 0-1.04020100502513i, 0-1.01005025125628i, 0-0.979899497487437i, 0-0.949748743718593i, 0-0.919597989949749i, 0-0.889447236180905i, 0-0.859296482412061i, 0-0.829145728643216i, 0-0.798994974874372i, 0-0.768844221105528i, 0-0.738693467336684i, 0-0.70854271356784i, 0-0.678391959798995i, 0-0.648241206030151i, 0-0.618090452261307i, 0-0.587939698492463i, 0-0.557788944723618i, 0-0.527638190954774i, 0-0.49748743718593i, 0-0.467336683417086i, 0-0.437185929648241i, 0-0.407035175879397i, 0-0.376884422110553i, 0-0.346733668341709i, 0-0.316582914572864i, 0-0.28643216080402i, 0-0.256281407035176i, 0-0.226130653266332i, 0-0.195979899497488i, 0-0.165829145728643i, 0-0.135678391959799i, 0-0.105527638190955i, 0-0.0753768844221105i, 0-0.0452261306532664i, 0-0.0150753768844223i, 0+0.0150753768844218i, 0+0.0452261306532664i, 0+0.0753768844221105i, 0+0.105527638190955i, 0+0.135678391959799i, 0+0.165829145728643i, 0+0.195979899497488i, 0+0.226130653266332i, 0+0.256281407035176i, 0+0.28643216080402i, 0+0.316582914572864i, 0+0.346733668341709i, 0+0.376884422110553i, 0+0.407035175879397i, 0+0.437185929648241i, 0+0.467336683417085i, 0+0.49748743718593i, 0+0.527638190954774i, 0+0.557788944723618i, 0+0.587939698492462i, 0+0.618090452261306i, 0+0.648241206030151i, 0+0.678391959798995i, 0+0.708542713567839i, 0+0.738693467336683i, 0+0.768844221105527i, 0+0.798994974874372i, 0+0.829145728643216i, 0+0.85929648241206i, 0+0.889447236180904i, 0+0.919597989949748i, 0+0.949748743718593i, 0+0.979899497487437i, 0+1.01005025125628i, 0+1.04020100502513i, 0+1.07035175879397i, 0+1.10050251256281i, 0+1.13065326633166i, 0+1.1608040201005i, 0+1.19095477386935i, 0+1.22110552763819i, 0+1.25125628140704i, 0+1.28140703517588i, 0+1.31155778894472i, 0+1.34170854271357i, 0+1.37185929648241i, 0+1.40201005025126i, 0+1.4321608040201i, 0+1.46231155778894i, 0+1.49246231155779i, 0+1.52261306532663i, 0+1.55276381909548i, 0+1.58291457286432i, 0+1.61306532663317i, 0+1.64321608040201i, 0+1.67336683417085i, 0+1.7035175879397i, 0+1.73366834170854i, 0+1.76381909547739i, 0+1.79396984924623i, 0+1.82412060301507i, 0+1.85427135678392i, 0+1.88442211055276i, 0+1.91457286432161i, 0+1.94472361809045i, 0+1.9748743718593i, 0+2.00502512562814i, 0+2.03517587939698i, 0+2.06532663316583i, 0+2.09547738693467i, 0+2.12562814070352i, 0+2.15577889447236i, 0+2.18592964824121i, 0+2.21608040201005i, 0+2.24623115577889i, 0+2.27638190954774i, 0+2.30653266331658i, 0+2.33668341708543i, 0+2.36683417085427i, 0+2.39698492462312i, 0+2.42713567839196i, 0+2.4572864321608i, 0+2.48743718592965i, 0+2.51758793969849i, 0+2.54773869346734i, 0+2.57788944723618i, 0+2.60804020100502i, 0+2.63819095477387i, 0+2.66834170854271i, 0+2.69849246231156i, 0+2.7286432160804i, 0+2.75879396984925i, 0+2.78894472361809i, 0+2.81909547738693i, 0+2.84924623115578i, 0+2.87939698492462i, 0+2.90954773869347i, 0+2.93969849246231i, 0+2.96984924623116i, 0+3i));cos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincos_testcos3_bc9e503f08a0258f02e22e558a5b5b0f() {
        assertEval("argv <- list(structure(c(2, 3, 4, 5, 6, 2, 5, 10, 17, 26, 5, 15, 31, 53, 81), .Dim = c(5L, 3L)));cos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincos_testcos4_cd1e0548b716bf3adea131c4306fe8e6() {
        assertEval("argv <- list(Inf);cos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincos_testcos5_03fe7fa09a10338ab1ba2184765ea57b() {
        assertEval("argv <- list(c(3.14159265358979, 6.28318530717959, 1.5707963267949, 3.14159265358979, 4.71238898038469, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 0.785398163397448, 1.5707963267949, 2.35619449019234, 3.14159265358979, 3.92699081698724, 4.71238898038469, 5.49778714378214, 6.28318530717959, 2.0943951023932, 4.18879020478639, 6.28318530717959, 3.14159265358979, 6.28318530717959, 0.897597901025655, 1.79519580205131, 2.69279370307697, 3.59039160410262, 4.48798950512828, 5.38558740615393, 6.28318530717959, 2.0943951023932, 4.18879020478639, 6.28318530717959, 1.25663706143592, 2.51327412287183, 3.76991118430775, 5.02654824574367, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 2.0943951023932, 4.18879020478639, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 1.25663706143592, 2.51327412287183, 3.76991118430775, 5.02654824574367, 6.28318530717959, 3.14159265358979, 6.28318530717959, 2.0943951023932, 4.18879020478639, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959));cos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincos_testcos6_08b6658fe8d63c9a74d13b67013518d0() {
        assertEval("argv <- list(logical(0));cos(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincosh_testcosh1_20ccc954af21fb9b8111f1f0f1137b1c() {
        assertEval("argv <- list(logical(0));cosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincosh_testcosh2_984508ed4a4b936c7642567475ef5555() {
        assertEval("argv <- list(FALSE);cosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincosh_testcosh3_755ab1bec442f9e66324f126ef1547ba() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));cosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincosh_testcosh4_d597223fb0b3486e140eaabfe5036fd2() {
        assertEval("argv <- list(c(-3, -2.96984924623116, -2.93969849246231, -2.90954773869347, -2.87939698492462, -2.84924623115578, -2.81909547738693, -2.78894472361809, -2.75879396984925, -2.7286432160804, -2.69849246231156, -2.66834170854271, -2.63819095477387, -2.60804020100502, -2.57788944723618, -2.54773869346734, -2.51758793969849, -2.48743718592965, -2.4572864321608, -2.42713567839196, -2.39698492462312, -2.36683417085427, -2.33668341708543, -2.30653266331658, -2.27638190954774, -2.24623115577889, -2.21608040201005, -2.18592964824121, -2.15577889447236, -2.12562814070352, -2.09547738693467, -2.06532663316583, -2.03517587939699, -2.00502512562814, -1.9748743718593, -1.94472361809045, -1.91457286432161, -1.88442211055276, -1.85427135678392, -1.82412060301508, -1.79396984924623, -1.76381909547739, -1.73366834170854, -1.7035175879397, -1.67336683417085, -1.64321608040201, -1.61306532663317, -1.58291457286432, -1.55276381909548, -1.52261306532663, -1.49246231155779, -1.46231155778894, -1.4321608040201, -1.40201005025126, -1.37185929648241, -1.34170854271357, -1.31155778894472, -1.28140703517588, -1.25125628140704, -1.22110552763819, -1.19095477386935, -1.1608040201005, -1.13065326633166, -1.10050251256281, -1.07035175879397, -1.04020100502513, -1.01005025125628, -0.979899497487437, -0.949748743718593, -0.919597989949749, -0.889447236180905, -0.859296482412061, -0.829145728643216, -0.798994974874372, -0.768844221105528, -0.738693467336684, -0.708542713567839, -0.678391959798995, -0.648241206030151, -0.618090452261307, -0.587939698492463, -0.557788944723618, -0.527638190954774, -0.49748743718593, -0.467336683417086, -0.437185929648241, -0.407035175879397, -0.376884422110553, -0.346733668341709, -0.316582914572864, -0.28643216080402, -0.256281407035176, -0.226130653266332, -0.195979899497488, -0.165829145728643, -0.135678391959799, -0.105527638190955, -0.0753768844221105, -0.0452261306532664, -0.0150753768844223, 0.0150753768844218, 0.0452261306532664, 0.0753768844221105, 0.105527638190955, 0.135678391959799, 0.165829145728643, 0.195979899497488, 0.226130653266332, 0.256281407035176, 0.28643216080402, 0.316582914572864, 0.346733668341709, 0.376884422110553, 0.407035175879397, 0.437185929648241, 0.467336683417085, 0.49748743718593, 0.527638190954774, 0.557788944723618, 0.587939698492462, 0.618090452261306, 0.648241206030151, 0.678391959798995, 0.708542713567839, 0.738693467336683, 0.768844221105527, 0.798994974874372, 0.829145728643216, 0.85929648241206, 0.889447236180904, 0.919597989949748, 0.949748743718593, 0.979899497487437, 1.01005025125628, 1.04020100502513, 1.07035175879397, 1.10050251256281, 1.13065326633166, 1.1608040201005, 1.19095477386935, 1.22110552763819, 1.25125628140704, 1.28140703517588, 1.31155778894472, 1.34170854271357, 1.37185929648241, 1.40201005025126, 1.4321608040201, 1.46231155778894, 1.49246231155779, 1.52261306532663, 1.55276381909548, 1.58291457286432, 1.61306532663317, 1.64321608040201, 1.67336683417085, 1.7035175879397, 1.73366834170854, 1.76381909547739, 1.79396984924623, 1.82412060301507, 1.85427135678392, 1.88442211055276, 1.91457286432161, 1.94472361809045, 1.9748743718593, 2.00502512562814, 2.03517587939698, 2.06532663316583, 2.09547738693467, 2.12562814070352, 2.15577889447236, 2.18592964824121, 2.21608040201005, 2.24623115577889, 2.27638190954774, 2.30653266331658, 2.33668341708543, 2.36683417085427, 2.39698492462312, 2.42713567839196, 2.4572864321608, 2.48743718592965, 2.51758793969849, 2.54773869346734, 2.57788944723618, 2.60804020100502, 2.63819095477387, 2.66834170854271, 2.69849246231156, 2.7286432160804, 2.75879396984925, 2.78894472361809, 2.81909547738693, 2.84924623115578, 2.87939698492462, 2.90954773869347, 2.93969849246231, 2.96984924623116, 3));cosh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod1_496feac2c05adaac7abc87ed0989191c() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), .Dim = c(60L, 5L)), structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), .Dim = c(60L, 6L))); .Internal(crossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod2_edbdbf76aa8a1d0221e1c34b76704969() {
        assertEval("argv <- list(numeric(0), numeric(0)); .Internal(crossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod3_8f42f69e42d50b3ceb4c5ffa207d4765() {
        assertEval("argv <- list(c(1.078125, 0.603125, -0.90625, 0.984375, 1.359375, -2.21875, -0.5, 1.2, 0.5), c(3.1859635002998, 2.5309880107589, 0.0716489644728567, 1.23651898905887, 1.28393932315826, -0.671528370670039, 0.873486219199556, 1.05088299688189, 0.0536562654335257)); .Internal(crossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod4_a4adca0a8360d553e862ca4526e74f3d() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6), .Dim = 2:3), c(2, 1)); .Internal(crossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod5_eeb03f4aa2de2e8b22b83059dc82f95a() {
        assertEval("argv <- list(c(1, 2, 3), structure(c(1, 3, 5, 2, 4, 6), .Dim = c(3L, 2L))); .Internal(crossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod6_0cca3fb331bcfa11fff2875dc5b1c263() {
        assertEval("argv <- list(structure(c(0, 0, 1, 0), .Dim = c(2L, 2L), .Dimnames = list(NULL, NULL)), c(2, 3)); .Internal(crossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod7_b4528343aba7117da1739a5a98fa7f82() {
        assertEval("argv <- list(structure(c(-0.409148064492827, 0, 0.486127240746069, 0.000757379686646223), .Dim = c(2L, 2L), .Dimnames = list(c('Vm', 'K'), NULL)), structure(c(0, 6.20800822278518, 6.20800822278518, -25013.7571686415), .Dim = c(2L, 2L))); .Internal(crossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod8_6cd3666a64d15a75044342b441f542b2() {
        assertEval("argv <- list(structure(c(-0.0972759604917099, -0.0972759604917099, -0.197781705719934, -0.197781705719934, -0.258476920906799, -0.258476920906799, -0.31681058743414, -0.31681058743414, -0.36711291168933, -0.36711291168933, -0.386611727075222, -0.386611727075222, -0.339690730499459, -0.33969073049946, -0.392353467475584, -0.392353467475584, -0.277328754578855, -0.277328754578855, -0.062581948827679, -0.062581948827679, 0.204605005658209, 0.204605005658209, 0.32860008733551, 0.32860008733551, 0.504748197638673, 0.504748197638673, 0.0398546163039329, 0.039854616303933, -0.269613788250837, -0.269613788250837, -0.312096598983548, -0.312096598983548, 0.0190548270250438, 0.0190548270250438, 0.270521530002251, 0.270521530002251), .Dim = c(12L, 3L)), structure(c(-2.82631170793264, -2.82631170793264, -3.89457420977924, -3.89457420977924, -3.62818861156626, -3.62818861156626, -2.72530862462141, -2.72530862462141, -1.437640468988, -1.437640468988, -0.811701520293695, -0.811701520293695, 14291.543903102, 14291.543903102, 13346.8386233407, 13346.8386233407, 8863.44390274002, 8863.44390274002, 4080.15117667984, 4080.15117667984, 979.818149952962, 979.818149952962, 296.593928028368, 296.593928028368), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('Vm', 'K')))); .Internal(crossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax1_393519eff86db4fd40fc81955350b2eb() {
        assertEval("argv <- list(c(3L, 2L, 1L, 2L, 1L, 0L, 4L, 3L, 2L));cummax(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax2_e88327f3ca38d52e61049f7c03f9d9b6() {
        assertEval("argv <- list(c(1.4124321047876e-05, 0.00123993824202733, 0.00149456828694326, 0.00559442649445619, 0.00589461369451042, 0.00682814400910408, 0.00716033530387356, 0.00831306755655091, 0.0117236981036592, 0.0193564395772821, 0.0305747157670471, 0.0790837327244679, 0.158516621910594, 0.166302063477173, 0.240901842706431, 0.30743590191449, 0.310605928993035, 0.378620529843491, 0.394843673266257, 0.463217214123843, 0.846006725553553, 1.91986719718639, 2.30025314520167, 2.31702860292334, 2.66225504155806, 2.89838614884136, 2.93533263484596, 3.92915929103845, 6.05054801269533, 6.38133071205875, 6.62764115953293, 8.28240123423701, 8.53690564463391, 12.5838414070157, 12.5601043160765, 12.3043865122123, 12.7666868655065, 13.228566067383, 12.7230281716064, 12.9903781159995, 12.727240095027, 12.2523157614464, 11.8051459071199, 11.7060028009859, 11.5037817968679, 12.2693077958414, 11.5842811936712, 11.6626896867753, 10.9424154292091, 10.3816792396216));cummax(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax3_5020287ebc0d6f79ae90f4c53533f49b() {
        assertEval("argv <- list(list());cummax(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax4_e4554d10246899a05ed0db6a6901b063() {
        assertEval("argv <- list(FALSE);cummax(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax5_f778a9778b592554044e72e9dea8c595() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));cummax(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax6_9af39ec7776a8c7b39a3e651c5d2f951() {
        assertEval("argv <- list(NULL);cummax(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax7_ad5b5b276fe8ff3b170420c1844e6649() {
        assertEval("argv <- list(character(0));cummax(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax8_22ebd9e10da90fc68829e323c0d06ba1() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));cummax(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin1_be92de38e3657e3c71152b2d0bfedc94() {
        assertEval("argv <- list(c(3L, 2L, 1L, 2L, 1L, 0L, 4L, 3L, 2L));cummin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin2_c8fb106e3bdea040b6736d80089e0599() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));cummin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin3_8b2324730fcf1be9dc471d6c1a45386b() {
        assertEval("argv <- list(c(0.943789021783783, 0.931269398230562, 0.936135627032134, 0.76691878645786, 0.751187345517812, 0.732102071759373, 0.736981399184748, 0.745009176294265, 0.742307320914255, 0.711777799810146, 0.726511637567943, 0.690091181919273, 0.656233947317988, 0.662510996891949, 0.657978635660952, 0.44347561790306, 0.428400063839846, 0.342071801782345, 0.329359004493355, 0.312959379967, 0.204112170963036, 0.153481444959266, 0.152881906752072, 0.141986935549763, 0.125244789347208, 0.126329692184989, 0.107405157884553, 0.0483432414602031, 0.0271151539974933, 0.0237499953844365, 0.0234803429360305, 0.0199319312722803, 0.0204957267942993, 0.0167583890578386, 0.0121314575180917, 0.0121935863008149, 0.00645581491628309, 0.00266833883057866, 0.00182178254845008, 0.00120243057473427, 0.000941101987534066, 0.000909248927476008, 0.000993184583142412, 0.00101050520477321, 0.00117777399883288, 0.000412294699846418, 0.000504381657773829, 1.12994568383008e-05));cummin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin4_4af18cddd7d30ef6ff6b608feba77782() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));cummin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin5_5046057aaf673e398ea07866d9018f1d() {
        assertEval("argv <- list(logical(0));cummin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin6_aa92d67fba07ba69fc3802b31648d35f() {
        assertEval("argv <- list(character(0));cummin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin7_d0e6506a3d5fcc64094c04e797bafde6() {
        assertEval("argv <- list(NULL);cummin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin8_d301ee1f064e011d4e4f123cea8c48d2() {
        assertEval("argv <- list(FALSE);cummin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod1_f6452c6d48f5a47b78ef112147b731b3() {
        assertEval("argv <- list(structure(c(1, 60, 60, 24, 7), .Names = c('secs', 'mins', 'hours', 'days', 'weeks')));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod10_16049ecdebe48c8193d945f4d2dbeb8d() {
        assertEval("argv <- list(c(0.982149602642989, 0.91866776738084, 0.859369083800704, 0.921182928974104));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod2_d026178a9359de54125a8dc9c8322a6f() {
        assertEval("argv <- list(c(0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod3_527c41663c53321801df6929cd09354c() {
        assertEval("argv <- list(c(1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod4_641317eb0e68dcb1aea937a320fcefc6() {
        assertEval("argv <- list(structure(0L, .Names = 'l0'));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod5_3934815317abc9da531aa6bc50d4ade1() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod6_9580c6c2cf854436aa9008a9fa22b5ba() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod7_ac2f65845ff68f5ea676d359f6291667() {
        assertEval("argv <- list(structure(list(), .Names = character(0)));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod8_29a226c1ef3f74cd0525a361e76d00ca() {
        assertEval("argv <- list(NULL);cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod9_2d74d9a74cbd64b2d2acf43351ecd709() {
        assertEval("argv <- list(character(0));cumprod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum1_082932f0ddabd17575a8de00f2185ab9() {
        assertEval("argv <- list(c(9L, 5L, 13L));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum10_c380a82970eeeafd83a538b1acb116c1() {
        assertEval("argv <- list(structure(c(-0.233567190135781, 1.27766471142225), .Names = c('Low|Medium', 'Medium|High')));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum11_067ca75243f1d9e8659f9e95a35080e1() {
        assertEval("argv <- list(c(8L, 2L, 12L, 6L, 4L, 5L, 13L));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum12_e5bd6800c0788e69ec647359ff76fce6() {
        assertEval("argv <- list(c(0.535137960496205, -0.371944875163495, -1.02554224849711, -0.582401674605252, 0.342888392897331, -0.450934647056651, 0.51423012023069, -0.334338052169782, -0.105559908794475, -0.730509672807828, 1.9050435849087, 0.332621731470394, 0.230633640499451, -1.69186241488407, 0.659791899549327, -1.02362358887971, -0.891521574354298, 0.918341171021649, -0.45270064650823, -1.74837228000318, 1.76990410988936, -2.37740692539252, 0.572811529859585, 1.01724924908461, -0.630967866660535, 0.444287051411554, 0.439130388388555, 1.04062315291451, 0.484099387952522, -0.244883779092525, 0.915992057940211, 0.800622356509766, -0.936569034135793, -1.40078743399573, 0.160277539993178, -0.273962374775183, -0.985539112562296, 0.0839306795150329, -1.31999652648691, 0.161226351326199, -0.62492838754192, 0.957164274192481, 2.42448914116153, -0.915979243686792, 1.05766417094298, 0.825149727768283, -0.0701942243053587, -0.453646374057015, 1.57530770683748, -2.00545781823625, -0.643194791593663, -1.43684344365778, 1.39531343894608, -0.190703432644857, -0.524671199469671, 3.18404447406633, -0.0500372678876282, -0.443749311866524, 0.299865250136145, -1.56842462075497, 0.490302642672068, -0.0961632010799668, 0.468525122530146, -0.982370635937854, -1.02298384214794, -0.693414663276185, -0.767989573092782, 1.29904996668359, 1.57914556180809, -0.156891953039067, -0.35893656058468, -0.329038830421669, 0.0692364778530165, 0.0969042337010548, 0.290034387765571, -0.746678941046256, -0.846896388820319, 1.19707766374608, -0.548627361103323, 0.303045695225451, -0.056970533803332, -0.957849392150669, 0.591061909411507, 0.173104873492955, 1.39978335621251, 0.117459584626988, -0.331545758200853, 0.278294913305364, -1.18559164903534, -0.835894053393597, 0.510273251139431, -0.333120901223949, -0.0659609463524635, -0.11522170942195, -0.650512618774529, -2.01868865908242, 0.348834970176592, 0.761639507646859, -1.28871623535013, 1.48240271845861));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum13_0298b864c44c0a081b772effed45a904() {
        assertEval("argv <- list(c(23L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, -7L, 15L, 15L, 15L, 15L, 15L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, -4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, -9L, -9L, -9L, -9L, -9L, -9L, -9L, -9L, -9L, -9L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -6L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, NA, NA, 3L, 3L, 3L, -19L, -19L, -19L, -19L, -19L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum14_64af9ace40950ef3dffee02764812756() {
        assertEval("argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum15_e97c74140b2b113cbc3c2864c9b9db27() {
        assertEval("argv <- list(character(0));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum2_be86846a919ba81fefaabd5a6528d0f7() {
        assertEval("argv <- list(structure(c(15L, 14L), .Names = c('bibentry', NA)));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum3_aecce4763dc43e0b775a6f4803029558() {
        assertEval("argv <- list(structure(c(79.3831968838961, 8.55983483385341e+101), .Names = c('', '')));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum4_7727124ea7142cc5308a437e1929385d() {
        assertEval("argv <- list(structure(c(-191.999930599838, 7.71626352011359e-309), .Names = c('', '')));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum5_6ea15d6d7d928dc01be41f5c71bae0d6() {
        assertEval("argv <- list(NULL);cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum6_202374fac271db11bbfd1306a466d7c8() {
        assertEval("argv <- list(structure(c(5L, 8L, 4L, 19L, 26L, 18L, 41L, 42L, 51L, 90L, 97L, 95L, 122L, 134L, 195L, 215L, 225L, 237L, 274L, 291L, 305L, 333L, 353L, 330L, 363L, 376L, 365L, 393L, 409L, 407L, 376L, 371L, 366L, 337L, 307L, 333L, 290L, 244L, 224L, 218L, 209L, 144L, 147L, 112L, 91L, 79L, 69L, 58L, 54L, 38L, 27L, 17L, 30L, 10L, 7L, 19L), .Dim = 56L, .Dimnames = structure(list(c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55')), .Names = ''), class = 'table'));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum7_5f3ec5a67c3c5a2950029dfb8aea181a() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum8_e940d652057a9d8c00d5e999cb20d7e0() {
        assertEval("argv <- list(c(6, 6, 5));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum9_fa751c69135f64f00362025e64e38311() {
        assertEval("argv <- list(structure(c(7, 7, 7, 7), .Dim = 4L, .Dimnames = list(c('Urban Female', 'Urban Male', 'Rural Female', 'Rural Male'))));cumsum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltincut_testcut1_bc0f1bf353ddcc07862b52ddaf70175e() {
        assertEval("argv <- structure(list(x = c(1.0346112150611, 0.0440203704340609,     -1.18549563351614, 0.649014015685885, -0.790829522519262,     1.17598399721214, 0.983434156282803, 0.541081558957578, -0.192970091592294,     -0.606426057996866, -0.548929268331095, 0.063509821468168,     -0.0758711318520365, -0.587354948512591, 0.68016119925159,     -0.00101371953355839, -2.04690635406766, -1.15419169868302,     1.57552198814761, -1.2826021432906, -0.0106456026122299,     -1.45914938013444, -0.0877132204592902, 0.644476581366902,     -0.174036946316013, 0.70686472456958, -0.800624461731312,     0.708086372571733, -0.297996173821721, 0.0138099804238364,     0.380733372967531, 0.128771481990839, 0.323047326927391,     -0.311589835954256, 0.12558341704142, -0.298476619409494,     -0.102902974277467, -1.68917669167977, -1.42657554846613,     -0.833840095454306, 0.0781210754813429, 0.0966440325613869,     0.471427686648137, -0.755241646713195, -1.09526706499915,     0.226011761333169, -2.00335228166377, 0.871788133884678,     -0.17604759041044, -0.392043928011201, 1.52493115014745,     0.696042602954131, 0.929759768084036, -0.937385053991658,     -0.505487042445614, 0.658795125401, -0.530682170997639, 1.35048133622788,     1.1503422698982, -1.03530396801882, 0.222351695228838, -0.439226819350318,     0.829770867923565, -0.843987984792906, 0.634088156420345,     0.940832655747169, -0.0115852787804222, -0.410726945127659,     -0.0645734442095184, -0.285424906860716, -0.132298134315469,     2.015980478747, -0.49752866007857, 0.461543245850607, 0.372715664260582,     0.911907622481186, 1.75893179717408, -0.111357338665413,     0.390438066934087, -0.15682295730562, 0.249796941030751,     -0.986665869092954, 0.342284950759752, 0.814635047060746,     -0.0433704725852363, 0.0953296428157898, -0.710060187690398,     0.0162693336595326, 0.406214045314364, -0.85345069761213,     0.294458010294818, -0.381515531303645, -0.341521027080523,     0.221675587474675, -1.33867071234436, 0.807929975242687,     -0.126382937192597, -0.0352338330882248, -1.4928897757059,     -0.235586522320615), breaks = structure(c(-2.04690635406766,     -0.511785824583621, -0.0234095559343235, 0.488841154725497,     2.015980478747), .Names = c('0%', '25%', '50%', '75%', '100%')),     labels = FALSE), .Names = c('x', 'breaks', 'labels'));do.call('cut', argv)");
    }

    @Test
    public void TestrGenBuiltincut_testcut2_697bcd874f03a13aa87864e907dc4a93() {
        assertEval("argv <- structure(list(x = structure(c(50, 47, 37, 71, 62, 53,     49, 56, 50, 47, 30, 20, 44, 33, 34, 39, 54, 40, 35, 33, 31,     47, 37, 27, 66, 44, 73, 26, 40, 61, 27, 77, 50, 31, 23, 72,     90, 46, 56, 43, 62, 59, 69, 30, 55, 39, 55, 59, 54, 47, 32,     72, 22, 43, 62, 52, 59, 26, 59, 22, 77, 60, 41, 77, 42, 81,     40, 70, 47, 77, 23, 39, 33, 56, 45, 42, 28, 53, 39, 51, 26,     18, 55, 64, 42, 71, 43, 68, 72, 74, 55, 53, 67, 47, 28, 32,     38, 42, 38, 64, 44, 18, 61, 67, 75, 70, 27, 42, 45, 62, 47,     27, 28, 58, 34, 42, 24, 43, 43, 72, 22, 73, 61, 55, 43, 25,     21, 19, 45, 62, 52, 51, 20, 24, 88, 32, 66, 73, 21, 63, 77,     77, 26, 52, 67, 68, 47, 46, 64, 51, 46, 23, 39, 22, 28, 74,     68, 23, 29, 80, 43, 58, 55, 78, 58, 45, 49, 29, 58, 27, 40,     34, 23, 62, 18, 19, 66, 81, 25, 53, 28, 36, 47, 44, 37, 63,     37, 71, 47, 38, 56, 44, 64, 59, 55, 35, 31, 47, 21, 76, 62,     86, 43, 56, 20, 34, 23, 45, 58, 19, 53, 24, 30, 50, 63, 47,     73, 41, 62, 82, 21, 38, 50, 66, 59, 63, 25, 38, 28, 67, 60,     62, 48, 44, 59, 39, 82, 61, 54, 51, 35, 54, 58, 27, 58, 40,     22, 19, 68, 65, 76, 69, 25, 65, 56, 39, 82, 77, 23, 51, 40,     78, 48, 46, 73, 51, 50, 37, 56, 46, 20, 30, 25, 65, 31, 70,     52, 22, 38, 53, 48, 29, 52, 60, 80, 57, 63, 61, 36, 23, 78,     28, 26, 35, 66, 50, 34, 60, 50, 45, 54, 42, 25, 31, 30, 41,     55, 62, 74, 47, 41, 48, 71, 38, 39, 61, 73, 41, 41, 41, 24,     28, 49, 58, 27, 57, 52, 54, 35, 53, 45, 19, 37, 38, 78, 57,     55, 32, 24, 47, 46, 22, 51, 39, 46, 38, 20, 53, 82, 33, 62,     72, 44, 76, 31, 24, 78, 70, 28, 70, 69, 56, 32, 35, 53, 79,     83, 63, 28, 44, 38, 24, 41, 46, 39, 62, 63, 33, 54, 27, 27,     75, 42, 88, 52, 46, 25, 49, 58, 28, 27, 50, 74, 59, 49, 41,     33, 51, 50, 72, 65, 55, 51, 88, 52, 48, 25, 62, 34, 25, 77,     65, 48, 33, 58, 46, 34, 55, 75, 24, 73, 65, 50, 63, 24, 52,     72, 31, 53, 51, 26, 42, 29, 25, 58, 34, 46, 64, 28, 57, 45,     33, 39, 68, 76, 41, 23, 45, 28, 66, 57, 64, 48, 38, 43, 68,     62, 32, 56, 55, 58, 24, 26, 81, 33, 73, 36, 65, 69, 19, 67,     40, 46, 35, 23, 79, 32, 58, 59, 53, 43, 31, 32, 28, 23, 35,     75, 22, 63, 25, 39, 24, 24, 67, 52, 56, 34, 54, 29, 56, 37,     46, 24, 35, 65, 20, 24, 35, 82, 29, 53, 45, 40, 51, 46, 60,     65, 75, 22, 49, 29, 29, 43, 43, 45, 76, 39, 58, 49, 51, 40,     41, 44, 43, 62, 48, 65, 23, 48, 52, 63, 69, 49, 58, 19, 79,     28, 25, 43, 76, 44, 29, 65, 20, 41, 35, 37, 38, 28, 56, 38,     57, 57, 52, 72, 70, 58, 67, 77, 42, 46, 31, 55, 28, 41, 18,     49, 56, 51, 21, 56, 47, 61, 83, 36, 63, 66, 56, 19, 34, 30,     55, 70, 48, 62, 67, 44, 48, 26, 20, 35, 63, 38, 83, 56, 56,     57, 40, 64, 57, 31, 34, 38, 27, 64, 56, 48, 57, 25, 62, 35,     63, 50, 33, 52, 84, 38, 82, 44, 22, 70, 57, 47, 56, 74, 53,     57, 27, 21, 45, 68, 22, 61, 18, 30, 64, 31, 23, 74, 54, 21,     69, 38, 33, 27, 48, 58, 62, 64, 41, 41, 23, 48, 31, 46, 84,     21, 45, 21, 78, 41, 33, 21, 37, 44, 47, 23, 36, 39, 61, 25,     27, 27, 57, 26, 46, 40, 31, 42, 42, 71, 60, 19, 49, 40, 52,     58, 61, 25, 60, 77, 63, 26, 27, 45, 56, 36, 19, 26, 61, 56,     19, 38, 48, 45, 36, 83, 65, 35, 63, 63, 29, 81, 26, 19, 25,     26, 78, 47, 57, 23, 28, 20, 19, 50, 49, 25, 44, 60, 55, 51,     41, 46, 57, 43, 49, 62, 25, 37, 31, 41, 50, 39, 60, 45, 30,     49, 58, 23, 30, 46, 36, 76, 41, 77, 45, 70, 45, 47, 39, 29,     36, 66, 31, 54, 24, 22, 31, 35, 62, 37, 33, 37, 87, 28, 42,     27, 60, 65, 32, 42, 36, 65, 39, 57, 51, 68, 33, 33, 23, 61,     50, 55, 53, 22, 67, 74, 36, 26, 42, 66, 48, 46, 55, 49, 48,     58, 39, 61, 82, 59, 29, 46, 81, 57, 85, 64, 59, 19, 42, 76,     38, 29, 27, 48, 53, 35, 60, 53, 52, 77, 52, 57, 64, 56, 44,     77, 52, 84, 58, 74, 52, 51, 74, 28, 43, 64, 64, 34, 63, 55,     54, 18, 46, 29, 88, 29, 22, 53, 35, 86, 48, 29, 41, 46, 79,     69, 34, 43, 50, 45, 31, 39, 56, 32, 80, 46, 49, 20, 57, 44,     76, 24, 32, 45, 62, 65, 61, 61, 39, 63, 54, 64, 75, 53, 60,     63, 36, 47, 46, 35, 52, 43, 52, 77, 40, 63, 29, 61, 65, 55,     28, 19, 75, 34, 51, 69, 41, 40, 74, 62, 86, 19, 63, 29, 52,     68, 50, 64, 43, 27, 66, 23, 40, 41, 39, 28, 48, 37, 29, 58,     65, 51, 27, 67, 83, 35, 73, 38, 66, 18, 47, 71, 49, 68, 71,     18, 59, 19, 37, 22, 71, 20, 40, 30, 44, 28, 29, 52, 20, 40,     23, 64, 38, 57, 52, 44, 35, 37, 32, 37, 38, 69, 19, 30, 77,     58, 31, 80, 29, 79, 57, 42, 20, 33, 28, 49, 65, 48, 90, 57,     43, 51, 32, 60, 73, 50, 23, 57, 38, 24, 65, 51, 28, 33, 56,     26, 61, 51, 45, 64, 41, 33, 34, 39, 31, 22, 55, 59, 54, 66,     40, 72, 45, 79, 46, 21, 82, 67, 52, 24, 57, 30, 57, 63, 50,     33, 56, 53, 67, 54, 67, 43, 51, 22, 53, 45, 21, 47, 63, 44,     51, 25, 57, 56, 21, 28, 23, 54, 20, 63, 65, 53, 54, 82, 66,     54, 68, 55, 31, 31, 36, 61, 25, 31, 36, 77, 39, 49, 55, 30,     51, 34, 44, 36, 35, 24, 23, 45, 30, 35, 20, 25, 66, 36, 41,     69, 19, 75, 50, 29, 49, 33, 20, 19, 52, 54, 53, 67, 51, 48,     82, 34, 45, 36, 41, 34, 32, 48, 49, 86, 63, 61, 40, 50, 63,     49, 25, 44, 25, 64, 64, 78, 58, 23, 61, 41, 76, 44, 54, 70,     39, 44, 64, 19, 56, 28, 39, 26, 33, 29, 34, 49, 46, 30, 59,     48, 21, 33, 44, 21, 49, 31, 20, 84, 55, 24, 50, 26, 63, 50,     44, 65, 28, 24, 22, 55, 42, 26, 44, 22, 35, 71, 66, 23, 42,     50, 24, 56, 66, 47, 50), value.labels = structure(c(99, 98,     0), .Names = c('89. RF', '88. DK', '00. NA'))), c(0, 25,     35, 45, 55, 65, 99)), .Names = c('x', ''));do.call('cut', argv)");
    }

    @Test
    public void TestrGenBuiltindQuote_testdQuote1_bde448ffff03753a77534111a61aa090() {
        assertEval("argv <- structure(list(x = character(0)), .Names = 'x');do.call('dQuote', argv)");
    }

    @Test
    public void TestrGenBuiltindataclass_testdataclass1_9b086882756ae4dc02befe39a97fbe02() {
        assertEval("argv <- structure(list(x = c('A', 'B', 'C', NA)), .Names = 'x');do.call('data.class', argv)");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse1_7ae61a4f4be1c4b4d86e1415251bd2c3() {
        assertEval("argv <- list(quote(rsp), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse10_cd1e1bc0422783123d12c2c80f3815b6() {
        assertEval("argv <- list(quote(1:10), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse11_9b2a35fa73423a17a2fcab54b586ea7a() {
        assertEval("argv <- list(quote(x[[i]]), 500L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse12_30845a3b9b1112ca17301586dad021df() {
        assertEval("argv <- list(quote(t1 - 4), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse13_8fc268a320fcdf031fb33102b081cd81() {
        assertEval("argv <- list(quote(read.table('foo1')), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse14_4970db23380dafd3acfcca4c3eaaca24() {
        assertEval("argv <- list(quote(`[.data.frame`(dd, , 'x')), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse15_2c2f3aaf0b6c48f604ea265d681bb53f() {
        assertEval("argv <- list(1e-07, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse16_e45cc6e67e33cce70ced05c64e86f1b3() {
        assertEval("argv <- list('coef.corStruct', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse17_75fe9d57f9b240c0000903c5a1d4617d() {
        assertEval("argv <- list('Version of 'graph' is too old --- no tests done here!\\n', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse18_44481931a91fff22b73921a5e9604597() {
        assertEval("argv <- list(Inf, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse19_0cae08a0b7588af95925c4c8427c1e79() {
        assertEval("argv <- list(structure(list(Sex = structure(c(2L, 2L, 1L, 1L, 2L, 2L), .Label = c('Female', 'Male'), class = 'factor'), age = c(15, 20, 10, 12, 2, 4), Subject = structure(c(2L, 2L, 1L, 1L, 3L, 3L), .Label = c('F30', 'M01', 'M04'), class = 'factor')), .Names = c('Sex', 'age', 'Subject'), row.names = c(NA, -6L), class = 'data.frame'), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse2_a87859f9f0b6057892823c6b6438da57() {
        assertEval("argv <- list(quote(rnorm(1, sd = Inf)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse20_432130c3fbc28e0a271e9be3923336dd() {
        assertEval("argv <- list(TRUE, 500L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse21_1155a0796d6a6f3294123cd8e56fa45a() {
        assertEval("argv <- list(.Primitive('interactive'), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse22_33ac29ab628e9983ded5b0f946c3edd5() {
        assertEval("argv <- list(0+1i, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse23_488a683b049d80acbbf7c29ad0a0f5a1() {
        assertEval("argv <- list(quote(cor(Z[, FALSE], use = 'pairwise.complete.obs', method = 'kendall')), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse24_e198632176b3a427c25dcedc82e12ef4() {
        assertEval("argv <- list(c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5, 9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4, 8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8, 6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3, 8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9, 10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3, 6.3, 6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7, 14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6, 9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse25_779fcd632c0ec46a745ee45c21b0b48f() {
        assertEval("argv <- list(1e+05, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse26_f484f6617e69cdfc523d02a61c2dc7c9() {
        assertEval("argv <- list(structure(list(distance = c(26, 25, 29, 31, 21.5, 22.5), age = c(8, 10, 12, 14, 8, 10), Subject = structure(c(2L, 2L, 2L, 2L, 1L, 1L), .Label = c('M02', 'M01'), class = c('ordered', 'factor')), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('distance', 'age', 'Subject', 'Sex'), row.names = c('1', '2', '3', '4', '5', '6'), class = 'data.frame'), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse27_b48753672f4d4a49a099f4e47444a113() {
        assertEval("argv <- list('\\t *ERROR* !!\\n', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse28_48e26f281df241471bea409e949990bc() {
        assertEval("argv <- list('\\n\\f\\n', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse29_a2aadf67ecca2bab00d0b5c251d4afbc() {
        assertEval("argv <- list(' +\\\\.', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse3_754683fb01ea52f4cb99fe7aab211dcc() {
        assertEval("argv <- list(quote(rnorm(2, c(1, NA))), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse30_bd96596fb124b6dcb823a4c9189d02a2() {
        assertEval("argv <- list(structure(FALSE, .Dim = 1L), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse31_4196bfc79e33f9f637ef031e9b2b1319() {
        assertEval("argv <- list(c(0, 0.587785252292473, 0.951056516295154, 0.951056516295154, 0.587785252292473, 1.22464679914735e-16, -0.587785252292473, -0.951056516295154, -0.951056516295154, -0.587785252292473, -2.44929359829471e-16, 0.587785252292473, 0.951056516295154), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse32_ab009b68cd09e62904ae4bf32cb60d9d() {
        assertEval("argv <- list(structure(c(39.384847580955, 40.3469409309138, 42.6018205723052, 46.6665176252597, 51.3438205965467, 60.0069972599329, 64.6480892875058, 62.5709232928432, 57.679739382496, 49.5060394945433, 43.474726406114, 39.8236314289602, 38.361391396627, 37.9275637097922, 43.6868952734483, 45.1919846859641, 51.722520194987, 59.3399821539983, 61.9345241730145, 62.1515308754468, 57.6561604617486, 49.2849925780811, 42.606775772378, 39.6394677676018, 38.6328048791077, 38.4418602988203, 43.1520834957543, 45.6551746936999, 51.7999631155049, 59.5021948495759, 62.9217123388139, 62.0751910659837, 57.8048619656866, 49.5091658164884, 42.8045075272742, 40.2515159054665), .Tsp = c(1937, 1939.91666666667, 12), class = 'ts'), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse33_dfb17cc2d1b6d1a8b29fa1a9f290952b() {
        assertEval("argv <- list(NA_real_, 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse34_baf9120031c9a91b15009eb0ee6cb37e() {
        assertEval("argv <- list(quote(lm(formula = y ~ x1 + x2 + x3)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse35_42f0244360834a25e6cc46affd79ffa2() {
        assertEval("argv <- list(structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166, 171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194, 196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201, 204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 229, 242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 419.147602949539, 391.474665943444, 435.919286153217, 443.935203034261, 455.023399013445, 517.28707821144, 589.71337277669, 582.999919227301, 484.573388713116, 428.878182738437, 368.526582998452, 406.728709993152, 415.660571294428, 388.716535970235, 433.006017658935, 440.885684396326, 451.651900136866, 513.051252429496, 584.327164324967, 577.055407135124, 479.076505013118, 423.494870357491, 363.43932958967, 400.592058645117, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 484.030717075782, 462.954959541421, 526.353307750503, 546.165638262644, 569.502470928676, 657.838443307596, 761.241730163307, 763.280655335144, 642.989004951864, 576.423799567567, 501.429012064338, 559.981301364233, 591.700754553767, 565.210772316967, 642.377841008703, 666.682421047093, 695.547100430962, 804.065022775202, 931.340589597203, 934.837830059897, 788.422986194072, 707.666678543854, 616.37838266375, 689.250456425465), .Dim = c(168L, 3L), .Dimnames = list(NULL, c('structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, ', 'structure(c(419.147602949539, 391.474665943444, 435.919286153217, ', 'structure(c(484.030717075782, 462.954959541421, 526.353307750503, ')), .Tsp = c(1949, 1962.91666666667, 12), class = c('mts', 'ts', 'matrix')), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse36_46119f0ae8d107bff03cbcc039babfa1() {
        assertEval("argv <- list(numeric(0), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse37_178005eb5188b54c4b7cf6a85b8a7e1d() {
        assertEval("argv <- list(0:12, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse38_4cf9485403d3449b436689e452490705() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse39_b0de79fadb65a2d071f9580391c84ae6() {
        assertEval("argv <- list(NA, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse4_fa0bbfe31a2db219d167908688741736() {
        assertEval("argv <- list(quote(unclass(x)), 500, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse40_25b2d5f06b44a03edaa3ec556d624994() {
        assertEval("argv <- list(logical(0), logical(0), FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse41_9228c5da5749430b9ce5b6d95bfcbcef() {
        assertEval("argv <- list(FALSE, 50L, FALSE, 69, 2L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse42_d3e2f069e992239a91955b159fcf315f() {
        assertEval("argv <- list(c(FALSE, FALSE), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse43_41753e19f3646fae0856097348637c85() {
        assertEval("argv <- list(quote(glm(formula = y ~ x, family = poisson(identity), start = c(1, 0))), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse44_20082db53bb6d9abd9e399d7757394fa() {
        assertEval("argv <- list(quote(lm(formula = 1000/MPG.city ~ Weight + Cylinders + Type + EngineSize + DriveTrain, data = Cars93)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse45_79171d035d8ae6785f1ed3270c07d236() {
        assertEval("argv <- list(0.333333333333333, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse46_13d24ad485cf5ef61c563fd1e619f790() {
        assertEval("argv <- list(quote(Fr ~ (Hair + Eye + Sex)^2), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse47_f647df210f1d05f3d2ec0885eae4a457() {
        assertEval("argv <- list(quote(glm(formula = cbind(X, M) ~ M.user + Temp + M.user:Temp, family = binomial, data = detg1)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse5_6e7ee541c99dcc23234ca7fb3c6be010() {
        assertEval("argv <- list(quote(cor(rnorm(10), NULL)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse6_e88fa87223f550b4600b60d4249b9219() {
        assertEval("argv <- list(quote(5 * exp(-x)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse7_6e9ac472093e9b62411a594d4785594b() {
        assertEval("argv <- list(quote(y ~ ((g1) * exp((log(g2/g1)) * (1 - exp(-k * (x - Ta)))/(1 - exp(-k * (Tb - Ta)))))), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse8_206a5412e5a18813064a97da71237bc1() {
        assertEval("argv <- list(quote(tt <- table(c(rep(0, 7), rep(1, 4), rep(5, 3)))), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse9_c38fd230efc5fbeef93dba49f21bd19e() {
        assertEval("argv <- list(quote(utils::str), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltindet_testdet1_a27f74f97071a95b0cc464c97b5af70f() {
        assertEval("argv <- list(structure(c(FALSE, TRUE, TRUE, FALSE), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))), TRUE); .Internal(det_ge_real(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindet_testdet2_93f9a336427be46ee880f88e91d8e7e9() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))), TRUE); .Internal(det_ge_real(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindet_testdet3_0cdaab5297f5d77bcece794dee4ccb32() {
        assertEval("argv <- list(structure(c(2, 1, 1, 2), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))), TRUE); .Internal(det_ge_real(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindet_testdet5_806af52c714345a50efaabc235e19c9e() {
        assertEval("argv <- structure(list(x = structure(c(0, 0, 0, 0, 0, 0, NA,     0, 0, NA, NA, 0, 0, 0, 0, 1), .Dim = c(4L, 4L))), .Names = 'x');do.call('det', argv)");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn1_f1697fb2af517deb029200b5c9d556ae() {
        assertEval("argv <- list(''f' is deprecated.\\nUse 'convertY' instead.\\nSee help(\\'Deprecated\\')', NULL); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn10_496ced09b4bc31ecb0004845fe98b8af() {
        assertEval("argv <- list(''x' is neither a vector nor a matrix: using as.numeric(x)', quote(dotchart(table(infert$education)))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn11_d9723c64de09d287610ec58014e8b2b8() {
        assertEval("argv <- list('Invalid file name(s) for R code in ./myTst/R:\\n  'file55711ba85492'\\n are now renamed to 'z<name>.R'', quote(package.skeleton('myTst', code_files = tmp))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn12_0d266dfcfa18dea174b0cf2c2651b847() {
        assertEval("argv <- list('incomplete final line found by readTableHeader on 'foo4'', quote(read.table('foo4', header = TRUE))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn2_1c1c654619fed5304352eb9a6edb4c1f() {
        assertEval("argv <- list('bessel_y(2,nu=288.12): precision lost in result', quote(besselY(2, nu = nu <- seq(3, 300, len = 51)))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn3_f8a16d1072620ab00a1a523d135e9be1() {
        assertEval("argv <- list('glm.fit: algorithm stopped at boundary value', NULL); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn4_70190ede9f79f44b95547557bcb59d52() {
        assertEval("argv <- list('header and 'col.names' are of different lengths', quote(read.table('foo3', header = TRUE, col.names = letters[1:4]))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn5_7650df3f6fd1bca4622fc4f01a7de0b6() {
        assertEval("argv <- list('‘graphics’ namespace cannot be unloaded:\\n  namespace ‘graphics’ is imported by ‘stats’ so cannot be unloaded', NULL); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn6_76e512cadea250843b7d50181d84701c() {
        assertEval("argv <- list('NaNs produced', quote(log(ifelse(y == 0, 1, y/mu)))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn7_54c04621103e396452234ead834cb506() {
        assertEval("argv <- list(''drop' argument will be ignored', quote(`[.data.frame`(women, 'height', drop = FALSE))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn8_3da9fa8d645a6d1c3b36e05705a8f985() {
        assertEval("argv <- list('prediction from a rank-deficient fit may be misleading', quote(predict.lm(object, newdata, se.fit, scale = residual.scale, type = ifelse(type == 'link', 'response', type), terms = terms, na.action = na.action))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn9_b5132a898a7b9fe484376a1938df66d5() {
        assertEval("argv <- list('1 y value <= 0 omitted from logarithmic plot', quote(xy.coords(x, NULL, log = log))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag1_2cf53a7b80c10d00d3e9d568fa60f11e() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 4L, 1L), .Dim = 5L), 5L, 5L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag10_6936852e307afa7eb18ec9f64aa19841() {
        assertEval("argv <- list(structure(c(-268.831499270454, 5.6415423423032, 14.3443760756611, -6.07661158322081, -7.61383061715105, 3.28804653251744, 13.7579673886322, 2.89856286229343, -9.75713414208632, 4.61320568224165), .Names = c('(Intercept)', 'block2', 'block3', 'block4', 'block5', 'block6', 'N1', 'P1', 'K1', 'N1:P1')), 24L, 10L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag11_fb2b9ee0e9ec83629adcc07220610963() {
        assertEval("argv <- list(structure(c(0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285), .Dim = 10L, .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))), 10L, 10L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag12_e5201367e1710a44426acb3e705dbb58() {
        assertEval("argv <- list(list(1, 1, 1), 3L, 3L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag13_f65d784ab56b6f9ec814137fc2e420e2() {
        assertEval("argv <- list(list(), 0L, 0L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag14_a9a938a94b31748f71849e3ce0d47f26() {
        assertEval("argv <- list(character(0), 0L, 0L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag16_22bea56fe4e0be79699b2ba54f28f82f() {
        assertEval("argv <- structure(list(x = structure(c(25707905.8534307, -1396341.94003231,     107590.673887047, 1282255.68405509, 990152.618275206, -1396341.94003231,     23207928.6679172, -602948.854263649, -750498.277752946, -97557.914173682,     107590.673887047, -602948.854263649, 25224155.0868383, -1446668.75346658,     3085225.85187065, 1282255.68405509, -750498.277752946, -1446668.75346658,     22221045.9258222, -1069907.07413189, 990152.618275206, -97557.914173682,     3085225.85187065, -1069907.07413189, 27302989.4318488), .Dim = c(5L,     5L))), .Names = 'x');do.call('diag', argv)");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag2_1c9b37b819d68b346b4c55be76ce2c25() {
        assertEval("argv <- list(NULL, 0L, 0L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag3_2b525912e9ac50630dc47425ecf6c99e() {
        assertEval("argv <- list(structure(c(0.00258017518312032, 0.00371592854270272, 4.74358130918145e-05, 0.00490111130607204, 0.000101990092933588, 0.00674107947251412, 0.000239828967315095, 0.00980847069198632, 0.000617541923597065, 0.0155189333862593, 0.00178497855501229, 0.0281274123275302, 0.00633033372222146, 0.0642581517771313, 0.0351608933185668, 0.151097171670205, 0.967636582993474, 0.0809667077153405), .Names = c('Xr1', 'Xr2', 'Xr3', 'Xr4', 'Xr5', 'Xr6', 'Xr7', 'Xr8', 'Xr9', 'Xr10', 'Xr11', 'Xr12', 'Xr13', 'Xr14', 'Xr15', 'Xr16', 'Xr17', 'Xr18')), 18L, 18L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag4_0dea8eecba555ce5748bf6bce5e066fb() {
        assertEval("argv <- list(c(FALSE, TRUE, TRUE, TRUE), 4L, 4L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag5_f123c582c1ff3d8b1fddd02682c8af84() {
        assertEval("argv <- list(c(-2.80063713410797-0i, 2.40432724210166-0i, -1.40502612938985+0i, 1.39344241164891+0i, 0.785422253492721+0i), 5L, 5L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag6_5989b4cdb499e5cca58c45e3e7681a2d() {
        assertEval("argv <- list(structure(c(0.662193594830517, 0.883082096514931, 0.80211645621425, 0.806993241239092, 0.593615611337433, 0.55837479933202, 0.531727869384763, 0.696607367099979, 0.506321785494117, 0.489681023915914, 0.742249020738322, 0.65965217395585, 0.700437655250271, 0.80388520340336, 0.834325796707322, 0.741083805719802, 0.77320911661894, 0.76968452857621, 0.872531808824412, 0.769100148773066, 0.763385216756006, 0.775173380089108, 0.705125971098107, 0.706916424657676), .Names = c('VisualPerception', 'Cubes', 'PaperFormBoard', 'Flags', 'GeneralInformation', 'PargraphComprehension', 'SentenceCompletion', 'WordClassification', 'WordMeaning', 'Addition', 'Code', 'CountingDots', 'StraightCurvedCapitals', 'WordRecognition', 'NumberRecognition', 'FigureRecognition', 'ObjectNumber', 'NumberFigure', 'FigureWord', 'Deduction', 'NumericalPuzzles', 'ProblemReasoning', 'SeriesCompletion', 'ArithmeticProblems')), 24L, 24L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag7_a2bfe1c42bd44e520df419a87fba51e1() {
        assertEval("argv <- list(1, 0L, 0L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag8_75c15ca9b4479ad1ad1d9365178ff7f9() {
        assertEval("argv <- list(structure(c(0.553622032575332, 1.83583330034692, 0.540309168173204, 0.347171956892285), .Names = c('A', 'B', 'C', 'D')), 4L, 4L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag9_9a54cc1fac7d63b62cf56fea77305c8f() {
        assertEval("argv <- list(structure(c(-875.251472917967, 12.8319913648351, -28.2155558559225, -27.6015982680416, -70.4377976184188, -98.9293825275015, 32.8291346503008, -20.6544753576079, 26.3486263439148, -42.5376299218819, -131.164911564755, -12.7775395276621, 3.34207338870892, -6.39516049903921, 5.97199502480298, 9.16451921253422, 4.70193189358059), .Names = c('(Intercept)', 'BII', 'BIII', 'BIV', 'BV', 'BVI', 'VMarvellous', 'VVictory', 'N0.2cwt', 'N0.4cwt', 'N0.6cwt', 'VMarvellous:N0.2cwt', 'VVictory:N0.2cwt', 'VMarvellous:N0.4cwt', 'VVictory:N0.4cwt', 'VMarvellous:N0.6cwt', 'VVictory:N0.6cwt')), 71L, 17L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindiagassign__testdiagassign_1_eb4a1fd1bfc4dabc0f48e829cd2ba3cc() {
        assertEval("argv <- structure(list(x = structure(numeric(0), .Dim = c(0L,     4L)), value = numeric(0)), .Names = c('x', 'value'));do.call('diag<-', argv)");
    }

    @Test
    public void TestrGenBuiltindiagassign__testdiagassign_3_ffed8bed15c8d532e7c88d196cc8b9c6() {
        assertEval("argv <- structure(list(x = structure(c(0, 0, 0, 0, 0, 0, 0.215098376664487,     0, 0, 0, -1.65637081299852, 0, 0, 0, 0, 0, -0.414332953459613,     0, 0, -1.40806198482254, 0, 0, 0, 0, 0, 0, 0, 0, -0.856525152312943,     0, 0, 0, 0, 0, 0, 0, 0, -0.0763379828255197, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0.566886579526715, 0, 0, 0, 0, 0, 0.6662762965807,     -1.0108032000459, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.27827012429586,     0, 0, 0, 0, 0, 2.58429591514953, 0, 0, 2.11417636787577,     -0.433540727336897, 0, -1.2168073873217, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, -0.739899226286947, 0, 1.63831140634344, 0.940796284653334,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.27827012429586, 0, 0,     0, -1.53221105110478, 0, 0.0842634801991399, 0, 0, 0, 0,     0, 0, 0, 0.46436714586526, 0, 0, 0.215098376664487, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.20702771149749, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, -1.53221105110478, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0.797128455296496, 0, 0, -0.856525152312943,     0.566886579526715, 0, -0.739899226286947, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, -0.53717285365944, 0, 0, -1.78309634885893,     0, 0, 0, 0, 0, 0.0842634801991399, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0.0654058852501743, 0, 0, 0, -1.65637081299852, 0,     0, 0, 1.63831140634344, 0, 0, 0, 0, 0, 0, -0.211859819992765,     1.70777682244235, 0, 0, 0.899304333370124, 0, 0, 0.696790958441438,     0, 0, 0, 0, 2.58429591514953, 0.940796284653334, 0, 0, 0,     0, 0, -0.211859819992765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 1.70777682244235, 0, 0, 0, 0, 0,     0, 2.70925832108517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, -0.218019634714546, 0, 0, 0.6662762965807,     2.11417636787577, 0, 0, 1.20702771149749, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, -0.431663950618028, 0, 0, 0, -1.0108032000459,     -0.433540727336897, 0, 0, 0, 0, 0, 0, 0.899304333370124,     0, 0, 0, 0, 0, 1.84823959064644, 0, 0, 0, -0.414332953459613,     0, 0, 0, 0, 0, 0, 0, -0.53717285365944, 0.0654058852501743,     0, 0, 0, 0, 0, 1.84823959064644, 0.487718131057368, 0, 0,     0, 0, -0.0763379828255197, 0, -1.2168073873217, 0, 0.46436714586526,     0, 0, 0, 0, 0, 0, 2.70925832108517, 0, 0, 0, 0, 0, 0, 0.89955019874646,     0, 0, 0, 0, 0, 0, 0, 0.797128455296496, 0, 0, 0.696790958441438,     0, 0, 0, -0.431663950618028, 0, 0, 0, 0, 0, -1.40806198482254,     0, 0, 0, 0, 0, 0, 0, -1.78309634885893, 0, 0, 0, 0, -0.218019634714546,     0, 0, 0, 0.89955019874646, 0, 0), .Dim = c(20L, 20L)), value = 1),     .Names = c('x', 'value'));do.call('diag<-', argv)");
    }

    @Test
    public void TestrGenBuiltindiff_testdiff1_bebf99e7deeceb4561bf8430dd0a02f6() {
        assertEval("argv <- structure(list(x = c(0.467590032349108, 0.560407538764412)),     .Names = 'x');do.call('diff', argv)");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma1_e32f802ab40f75a90f63bcc0b243b64f() {
        assertEval("argv <- list(structure(c(3.80516394437114, 12.8051639443711, 15.8051639443711, 6.80516394437114, 6.80516394437114, 14.8051639443711, 21.8051639443711, 23.8051639443711, 7.80516394437114, 7.80516394437114, 16.8051639443711, 8.80516394437114, 15.8051639443711, 7.80516394437114, 33.8051639443711, 54.8051639443711, 58.8051639443711, 15.8051639443711, 17.8051639443711, 17.8051639443711, 18.8051639443711, 41.8051639443711, 44.8051639443711, 47.8051639443711, 9.80516394437114, 24.8051639443711, 24.8051639443711, 29.8051639443711, 35.8051639443711, 37.8051639443711, 39.8051639443711, 4.80516394437114, 6.80516394437114, 12.8051639443711, 25.8051639443711, 46.8051639443711, 6.80516394437114, 7.80516394437114, 7.80516394437114, 10.8051639443711, 14.8051639443711, 24.8051639443711, 26.8051639443711, 33.8051639443711, 54.8051639443711, 55.8051639443711, 6.80516394437114, 6.80516394437114, 12.8051639443711, 18.8051639443711, 20.8051639443711, 9.80516394437114, 14.8051639443711, 15.8051639443711, 21.8051639443711, 48.8051639443711, 49.8051639443711, 61.8051639443711, 82.8051639443711, 3.80516394437114, 1.80516394437114, 3.80516394437114, 4.80516394437114, 6.80516394437114, 11.8051639443711, 15.8051639443711, 22.8051639443711, 37.8051639443711, 41.8051639443711, 7.80516394437114, 18.8051639443711, 68.8051639443711, 1.80516394437114, 1.80516394437114, 3.80516394437114, 8.80516394437114, 12.8051639443711, 13.8051639443711, 1.80516394437114, 1.80516394437114, 6.80516394437114, 6.80516394437114, 6.80516394437114, 12.8051639443711, 18.8051639443711, 4.80516394437114, 5.80516394437114, 23.8051639443711, 31.8051639443711, 37.8051639443711, 9.80516394437114, 1.80516394437114, 2.80516394437114, 6.80516394437114, 8.80516394437114, 17.8051639443711, 28.8051639443711, 1.80516394437114, 31.8051639443711, 11.8051639443711, 15.8051639443711, 28.8051639443711, 42.8051639443711, 70.8051639443711, 26.8051639443711, 11.8051639443711, 12.8051639443711, 21.8051639443711, 34.8051639443711, 6.80516394437114, 8.80516394437114, 1.80516394437114, 2.80516394437114, 6.80516394437114, 6.80516394437114, 6.80516394437114, 6.80516394437114, 8.80516394437114, 12.8051639443711, 16.8051639443711, 6.80516394437114, 15.8051639443711, 7.80516394437114, 7.80516394437114, 8.80516394437114, 29.8051639443711, 1.80516394437114, 6.80516394437114, 15.8051639443711, 3.80516394437114, 3.80516394437114, 4.80516394437114, 9.80516394437114, 11.8051639443711, 13.8051639443711, 2.80516394437114, 2.80516394437114, 10.8051639443711, 23.8051639443711, 4.80516394437114, 4.80516394437114, 6.80516394437114, 16.8051639443711, 19.8051639443711, 23.8051639443711, 38.8051639443711), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146')));digamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma2_38076dd6fdca87ce2c2023a9c5f4acae() {
        assertEval("argv <- list(structure(c(9.16602330897621, 9.16602330897621, 1.16602330897621, 1.16602330897621, 3.16602330897621, 3.16602330897621, 6.16602330897621, 6.16602330897621, 6.16602330897621, 6.16602330897621, 2.16602330897621, 2.16602330897621, 8.16602330897621, 8.16602330897621, 1.16602330897621, 1.16602330897621, 7.16602330897621, 7.16602330897621, 19.1660233089762, 19.1660233089762, 2.16602330897621, 2.16602330897621), .Names = c('1', '1.1', '2', '2.1', '3', '3.1', '4', '4.1', '5', '5.1', '6', '6.1', '7', '7.1', '8', '8.1', '9', '9.1', '10', '10.1', '11', '11.1')));digamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma3_35bc2b429287d7c3663bca301962ffee() {
        assertEval("argv <- list(FALSE);digamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma4_cf92788d674cba9c1ad909bfdf8fed1c() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));digamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma5_34b5cce1c3064786a8ccf95dc13ed751() {
        assertEval("argv <- list(c(1e+30, 1e+60, 1e+90, 1e+120, 1e+150, 1e+180, 1e+210, 1e+240, 1e+270, 1e+300));digamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim1_5189b26d80f89098cd36096788640eb9() {
        assertEval("argv <- list(structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5), .Dim = c(8L, 2L), .Dimnames = list(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), c('x1', 'x2'))));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim10_6d6e0b0145f9f546997903f0937acfa0() {
        assertEval("argv <- list(structure(c(93.3042409622253, 72.8638419893434, 65.9708818502055, 74.2809886424684, 79.8889070755712, 100.233809580112, 104.965351919781, 83.86798597082, 105.795365211341, 108.580858711588, 95.3646703714076, 98.1558192431132, 5.58314117171466, 29.7542740978848, 32.2224082035474, 27.8665232792916, 25.046508702598, 23.5818201384803, 35.0327999599812, 33.2751275770215, 43.2947043117474, 39.1828378794408, 11.7874053171943, 57.3766532219607), .Dim = c(12L, 2L)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim11_e3e9e2b1621dab33179912e2c8f2f3a9() {
        assertEval("argv <- list(structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim12_8c5f373eb9a0adf77827b91707b83af5() {
        assertEval("argv <- list(structure(list(height = numeric(0), weight = numeric(0)), .Names = c('height', 'weight'), class = 'data.frame', row.names = integer(0)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim13_c4781b1b96f373f822c9c8ec8439a31d() {
        assertEval("argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim14_f85569c867ee43a9db482cf22af2c862() {
        assertEval("argv <- list(c(99, 1, 2, -3, 4, 3, NA));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim15_353ff3a5bff7c9cd6c55178d8418b3d2() {
        assertEval("argv <- list(structure(c('‘[,1]’', '‘[,2]’', '‘height’', '‘weight’', 'numeric', 'numeric', 'Height (in) ', 'Weight (lbs)'), .Dim = c(2L, 4L)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim16_823a3b782507d6e2c2fd62a1d3434af9() {
        assertEval("argv <- list(structure(list(V1 = c(0.497699242085218, 0.991906094830483), V2 = c(0.668466738192365, 0.107943625887856), V3 = c(0.0994661601725966, 0.518634263193235), V4 = c(0.892198335845023, 0.389989543473348), V5 = c(0.79730882588774, 0.410084082046524)), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(16L, 18L), class = 'data.frame'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim17_66a7e6b72979d9c5ccb503d9d4a5da2e() {
        assertEval("argv <- list(structure(cim = c(5L, 21L), .Dimnames = list(c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'), NULL)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim18_d7be8c4dcecf3ccd33bae6aae6592035() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, -1.43884556914512e-134, 0, 0, 0, -7.95468296571581e-252, 1.76099882882167e-260, 0, -9.38724727098368e-323, -0.738228974836154, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.84657791618065e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.05931985100232e-174, 0, -3.41789378681991e-150, 0, 0, 0, 0, -1.07225492686949e-10, 0, 1.65068934474523e-67, 0, -6.49830035279282e-307, 0, 5.83184963977238e-90, 0, -9.81722610183938e-287, 6.25336419454196e-54, 0, 0, 0, -1.72840591500382e-274, 1.22894687952101e-13, 0.660132850077566, 0, 0, 7.79918925397516e-200, -2.73162827952857e-178, 1.32195942051179e-41, 0, 0, 0, 0, 2.036057023761e-45, -3.40425060445074e-186, 1.59974269220388e-26, 0, 6.67054294775317e-124, 0.158503117506202, 0, 0, 0, 0, 0, 0, 3.42455724859116e-97, 0, 0, -2.70246891320217e-272, 0, 0, -3.50562438899045e-06, 0, 0, 1.35101732326608e-274, 0, 0, 0, 0, 0, 0, 0, 7.24580295957621e-65, 0, -3.54887341172294e-149, 0, 0, 0, 0, 0, 0, 0, 0, 1.77584594753563e-133, 0, 0, 0, 2.88385135688311e-250, 1.44299633616158e-259, 0, 1.56124744085834e-321, 1.63995835868977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.01050064173383e-122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.64868196850938e-172, 0, 6.28699823828692e-149, 0, 0, 0, 0, 5.0552295590188e-09, 0, 2.30420733561404e-66, 0, 7.0823279075443e-306, 0, 2.05009901740696e-88, 0, 7.41800724282869e-285, 7.18347043784483e-53, 0, 0, 0, 1.04251223075649e-273, 9.75816316577433e-13, 4.29519957592147, 0, 0, 1.33541454912682e-198, 2.34606233784019e-176, 8.38236726536896e-41, 0, 0, 0, 0, 1.35710537434521e-43, 1.15710503176511e-185, 1.25601735272233e-25, 0, 4.46811655846376e-123, 4.4196641795634, 0, 0, 0, 0, 0, 0, 3.74179015251531e-93, 0, 0, 3.62662047836582e-271, 0, 0, 1.26220330674453e-05, 0, 0, 1.72715562657338e-273, 0, 0, 0, 0, 0, 0, 0, 5.46372806810809e-64, 0, 2.47081972486962e-148, 0, 0, 0), .Dim = c(100L, 2L)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim19_49c89bad8da52cdae9df4ea7f708c728() {
        assertEval("argv <- list(structure(c(0, 87, 82, 75, 63, 50, 43, 32, 35, 60, 54, 55, 36, 39, 0, 0, 69, 57, 57, 51, 45, 37, 46, 39, 36, 24, 32, 23, 25, 32, 0, 32, 59, 74, 75, 60, 71, 61, 71, 57, 71, 68, 79, 73, 76, 71, 67, 75, 79, 62, 63, 57, 60, 49, 48, 52, 57, 62, 61, 66, 71, 62, 61, 57, 72, 83, 71, 78, 79, 71, 62, 74, 76, 64, 62, 57, 80, 73, 69, 69, 71, 64, 69, 62, 63, 46, 56, 44, 44, 52, 38, 46, 36, 49, 35, 44, 59, 65, 65, 56, 66, 53, 61, 52, 51, 48, 54, 49, 49, 61, 0, 0, 68, 44, 40, 27, 28, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim2_8c07afdb6d64b9d681737c4d38598a28() {
        assertEval("argv <- list(structure(list(surname = structure(1:5, .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(c(1L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(NA_integer_, NA_integer_, NA_integer_, NA_integer_, NA_integer_), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA_integer_, NA_integer_, NA_integer_, NA_integer_, NA_integer_), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c(5L, 4L, 3L, 1L, 2L), class = 'data.frame'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim20_e218a0ea14e6739e72863341b51e0df7() {
        assertEval("argv <- list(structure(raw(0), .Dim = c(0L, 0L)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim21_675c54ade8e5e786fb5862512ec2c896() {
        assertEval("argv <- list(c(0, 1, 131072, 129140163, 17179869184, 762939453125, 16926659444736, 232630513987207, 2251799813685248, 16677181699666568, 1e+17));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim22_dbd536e4dcbb0dcd157f463ab19cdefb() {
        assertEval("argv <- list(structure(1:20, .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim23_7d6bfc802870e148e3bc1b9d6b4ed77a() {
        assertEval("argv <- list(structure(c(1, 0, -1, 0.5, -0.5, NA, NA, NA, 0), .Dim = c(3L, 3L)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim24_2b8314a447ee0c197c0bdf4c104be2ad() {
        assertEval("argv <- list(c(NA, NA, NA, NA, NA, 'Ripley', 'Venables & Smith'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim25_8b62b4ee036d5eb0d569d7aad04ad2c4() {
        assertEval("argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim26_d8acbcb0723d186f3891661bc92487f2() {
        assertEval("argv <- list(structure(c(31.9624451639742, -0.0105001367774998, 0.669596455370805, 5.14945152173688, 4.36500574231155, 6.30517873115649, 2.15562516502081, 1.77361974340981, 1.31721464996217, -6.23951992881235, -3.14333173153233, 3.7074414096456, 0.619951366669834, -3.31636282291298, -1.38277940327151, -0.0105001367774998, 4.92314051157491e-06, -0.00208176000671443, -0.00393685976143421, -0.00306114840585819, -0.00304239831702958, -0.00360485387426285, -0.000776863531985863, -0.000930425548039592, 0.00177325947012459, 0.000873478088813267, -0.00222133591240768, -0.0010997058222662, 0.000971542840761233, 0.000408638350886089, 0.669596455370805, -0.00208176000671443, 6.25966104941131, 7.27107350691908, 7.1568051334171, 7.69164996000523, 6.38546846168565, 0.584255359868468, 0.425893553320666, -0.302152926219182, -0.539719353375365, 0.767832198930969, -0.0339253942409593, -0.954875198336619, -0.44454733172958, 5.14945152173688, -0.00393685976143421, 7.27107350691908, 16.9287891082998, 9.68170957680298, 10.1927925852141, 8.31848730773964, 0.0225771728679827, -0.13423885912137, -0.952279072677042, -1.28303151957048, -0.309366054071832, 0.277949783704086, -1.95357808926458, -1.1490330193693, 4.36500574231155, -0.00306114840585819, 7.1568051334171, 9.68170957680298, 10.6200372990959, 12.0025058084698, 7.09661626032293, 0.00831356355794886, -0.18522684338686, -1.13540989802495, -1.33382692805767, 0.308573868840132, -0.809762853334073, -1.09668270906855, -0.213078730283059, 6.30517873115649, -0.00304239831702958, 7.69164996000523, 10.1927925852141, 12.0025058084698, 17.4522685874698, 6.92295996047857, -0.125541819250371, -0.215552520930932, -1.84365094178865, -1.59654434238815, 0.684384781199279, -1.93856751571012, -1.02265709591595, -0.303713451023131, 2.15562516502081, -0.00360485387426285, 6.38546846168565, 8.31848730773964, 7.09661626032293, 6.92295996047857, 23.2114402831465, -0.28786423278137, 0.360665125986693, -0.292516552346824, -1.61368872459996, 0.400045448449001, 1.49305046916227, -1.52595532739395, -2.45569084011985, 1.77361974340981, -0.000776863531985863, 0.584255359868468, 0.0225771728679827, 0.00831356355794886, -0.125541819250371, -0.28786423278137, 3.63382138185307, 1.73220942447866, 0.201523343362283, 0.961824629517822, 2.18512927857691, -0.299291412368627, -0.222951433523371, 0.190518621032026, 1.31721464996217, -0.000930425548039592, 0.425893553320666, -0.13423885912137, -0.18522684338686, -0.215552520930932, 0.360665125986693, 1.73220942447866, 2.07264968016672, 0.409359459121014, 0.882002960805309, 1.87214770160952, 0.189008347036503, -0.266586895155729, -0.112011626327013, -6.23951992881235, 0.00177325947012459, -0.302152926219182, -0.952279072677042, -1.13540989802495, -1.84365094178865, -0.292516552346824, 0.201523343362283, 0.409359459121014, 2.48234483048294, 1.19369459724506, -0.189893084140488, 0.16622651987368, 0.28664359918476, -0.0113387579323685, -3.14333173153233, 0.000873478088813267, -0.539719353375365, -1.28303151957048, -1.33382692805767, -1.59654434238815, -1.61368872459996, 0.961824629517822, 0.882002960805309, 1.19369459724506, 2.16828149626507, 0.76585533428598, 0.0326711935947258, 0.375684864300291, 0.0175473410796721, 3.7074414096456, -0.00222133591240768, 0.767832198930969, -0.309366054071832, 0.308573868840132, 0.684384781199279, 0.400045448449001, 2.18512927857691, 1.87214770160952, -0.189893084140488, 0.76585533428598, 4.87998635701286, 0.240260053826388, 0.639583107689077, 1.24508720406537, 0.619951366669834, -0.0010997058222662, -0.0339253942409593, 0.277949783704086, -0.809762853334073, -1.93856751571012, 1.49305046916227, -0.299291412368627, 0.189008347036503, 0.16622651987368, 0.0326711935947258, 0.240260053826388, 1.27358692244222, -0.271133086074816, -0.61768767314107, -3.31636282291298, 0.000971542840761233, -0.954875198336619, -1.95357808926458, -1.09668270906855, -1.02265709591595, -1.52595532739395, -0.222951433523371, -0.266586895155729, 0.28664359918476, 0.375684864300291, 0.639583107689077, -0.271133086074816, 2.24773578295184, 2.00648977390012, -1.38277940327151, 0.000408638350886089, -0.44454733172958, -1.1490330193693, -0.213078730283059, -0.303713451023131, -2.45569084011985, 0.190518621032026, -0.112011626327013, -0.0113387579323685, 0.0175473410796721, 1.24508720406537, -0.61768767314107, 2.00648977390012, 3.44090885157986), .Dim = c(15L, 15L), .Dimnames = list(c('(Intercept)', 'Weight', 'Cylinders4', 'Cylinders5', 'Cylinders6', 'Cylinders8', 'Cylindersrotary', 'TypeLarge', 'TypeMidsize', 'TypeSmall', 'TypeSporty', 'TypeVan', 'EngineSize', 'DriveTrainFront', 'DriveTrainRear'), c('(Intercept)', 'Weight', 'Cylinders4', 'Cylinders5', 'Cylinders6', 'Cylinders8', 'Cylindersrotary', 'TypeLarge', 'TypeMidsize', 'TypeSmall', 'TypeSporty', 'TypeVan', 'EngineSize', 'DriveTrainFront', 'DriveTrainRear'))));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim27_d62086d348302132de1d2c85ee171e62() {
        assertEval("argv <- list(structure(c(-3.001e+155, -1.067e+107, -1.976e+62, -9.961e+152, -2.059e+23, 1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = 'table'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim28_0f4bb02c9c34a1cda7dae0ffcb48a97c() {
        assertEval("argv <- list(structure(1395082220.91387, class = c('POSIXct', 'POSIXt')));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim3_ede012d5bf21a72ae7446f0b9c30f51d() {
        assertEval("argv <- list(structure(c(0.100837939896365, 0.100837939896365, -2.89916206010363, 1.10083793989637, 2.10083793989637, 15.3663689601092, 5.36636896010918, -15.5557367724452, 1.44426322755481, -15.5557367724452, -6.55573677244519, 2.44426322755481, -20.5557367724452, 3.41611550389052, 37.4161155038905, 8.41611550389052, 23.0292477138695, -29.9707522861305, 3.02924771386952, -25.9707522861305, 5.46163181127829, 1.46163181127829, 22.4616318112783, -11.5383681887217, 17.4616318112783, -24.5383681887217, 2.79509291794369, -19.2049070820563, -32.2049070820563, 10.7950929179437, -18.2049070820563, 17.7950929179437, 2.79509291794369, 25.7950929179437, 9.79509291794369, -3.77239539978251, 13.2276046002175, -0.772395399782511, 23.2276046002175, -2.77239539978251, 1.22760460021749, -12.7723953997825, 13.2276046002175, 7.22760460021749, 7.22760460021749, -36.8669529292102, 13.1330470707898, 12.1330470707898, -18.8669529292102, -7.86695292921016, -18.3408059382389, 14.7301967628363), .Dim = c(52L, 1L)));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim30_ca6f40f800752a8bb7709896b0bd41bb() {
        assertEval("argv <- list(structure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6,     5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4,     5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7,     4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4,     5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7,     6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2,     5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5,     5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5,     5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6,     4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7,     7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2,     7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9,     6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9), Sepal.Width = c(3.5,     3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3, 3,     4, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3, 3.4,     3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3,     3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2,     3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9,     2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8,     3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5,     2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3,     2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2,     3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3, 2.8,     3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1, 3, 3.1, 3.1, 3.1,     3.2, 3.3, 3, 2.5, 3, 3.4, 3), Petal.Length = c(1.4, 1.4,     1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1,     1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6,     1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4,     1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4,     4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2,     4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3,     4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7,     4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1,     6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3,     5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7,     6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6,     5.5, 4.8, 5.4, 5.6, 5.1, 5.9, 5.7, 5.2, 5, 5.2, 5.4, 5.1),     Petal.Width = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2,         0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3,         0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2,         0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3,         0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5,         1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3,         1.4, 1.5, 1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4,         1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3,         1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1,         1.3, 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5,         2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2,         2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5,         1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 2.3, 2.5, 2.3,         1.9, 2, 2.3, 1.8), Species = structure(c(1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L), .Label = c('setosa', 'versicolor',         'virginica'), class = 'factor')), .Names = c('Sepal.Length',     'Sepal.Width', 'Petal.Length', 'Petal.Width', 'Species'),     row.names = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L,         12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L,         23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L,         34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L,         45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L,         56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L,         67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L,         78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L,         89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L,         100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L, 108L,         109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L,         118L, 119L, 120L, 121L, 122L, 123L, 124L, 125L, 126L,         127L, 128L, 129L, 130L, 131L, 132L, 133L, 134L, 135L,         136L, 137L, 138L, 139L, 140L, 141L, 142L, 144L, 145L,         146L, 147L, 148L, 149L, 150L), class = 'data.frame'));do.call('dim', argv)");
    }

    @Test
    public void TestrGenBuiltindim_testdim4_2339d5d8c715d2be6265e7cbaf617cb8() {
        assertEval("argv <- list(structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor', contrasts = 'contr.treatment'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim5_ba5af3063254b246de00069ef5275c48() {
        assertEval("argv <- list(structure(list(df = 10L, ss = 2.74035772634541, ms = 0.274035772634541, f = NA_real_, P = NA_real_), .Names = c('df', 'ss', 'ms', 'f', 'P'), row.names = c(NA, -1L), class = 'data.frame'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim6_0ae19243562a055ec33747e2a211c538() {
        assertEval("argv <- list(structure(list(File = c('GOusage.Rnw', 'annotate.Rnw', 'chromLoc.Rnw', 'prettyOutput.Rnw', 'query.Rnw', 'useDataPkgs.Rnw', 'useHomology.Rnw', 'useProbeInfo.Rnw'), Title = c('Basic GO Usage', 'Annotation Overview', 'HowTo: use chromosomal information', 'HowTo: Get HTML Output', 'HOWTO: Use the online query tools', 'Using Data Packages', 'Using the homology package', 'Using Affymetrix Probe Level Data'), PDF = c('GOusage.pdf', 'annotate.pdf', 'chromLoc.pdf', 'prettyOutput.pdf', 'query.pdf', 'useDataPkgs.pdf', 'useHomology.pdf', 'useProbeInfo.pdf'), Depends = list(c('GO.db', 'hgu95av2.db', 'Biobase'), c('Biobase', 'genefilter', 'annotate', 'hgu95av2.db'), c('annotate', 'hgu95av2.db'), c('annotate', 'hgu95av2.db'), c('annotate', 'hgu95av2.db'), c('hgu95av2.db', 'GO.db'), 'hom.Hs.inp.db', c('hgu95av2.db', 'rae230a.db', 'rae230aprobe', 'Biostrings')), Keywords = list(c('GO', 'ontology'), c('Expression Analysis', 'Annotation'), c('Expression Analysis', 'Annotation'), c('Expression Analysis', 'Annotation'),     c('Expression Analysis', 'Annotation'), 'Annotation', 'Annotation', 'Annotation'), R = c('GOusage.R', 'annotate.R', 'chromLoc.R', 'prettyOutput.R', 'query.R', 'useDataPkgs.R', 'useHomology.R', 'useProbeInfo.R')), .Names = c('File', 'Title', 'PDF', 'Depends', 'Keywords', 'R'), row.names = c(NA, -8L), class = 'data.frame'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim7_74c1ebb8d5d4a9c15d4b284551c0e68e() {
        assertEval("argv <- list(c(2832L, 2836L, 2836L, 2833L, 2833L));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim8_d094ebb71c2f525a747f39dd7ef4d547() {
        assertEval("argv <- list(structure(list(day = structure(1:6, .Label = c('2012-06-01', '2012-06-02', '2012-06-03', '2012-06-04', '2012-06-05', '2012-06-06', '2012-06-07'), class = 'factor')), .Names = 'day', row.names = c(1L, 5L, 9L, 13L, 17L, 21L), class = 'data.frame'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindim_testdim9_9c9fcfe145be7317323510b1c1895def() {
        assertEval("argv <- list(c(NA, NA, '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R'));dim(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign1_3eead01e130c9d1d0b1ec749a83e79c2() {
        assertEval("argv <- list(structure(c(300, 3000, 400, 4000), .Dim = c(2L, 2L, 1L)), value = c(2, 2, 1));`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign10_f061f5e4e077d48fa7f9fcb163102022() {
        assertEval("argv <- list(structure(c(1, 0.870865388077469, -0.224541709419829, -0.331803324650025, -0.493630926048296, -0.413999601257247, 0.00943216495885559, -0.569185666759019, 0.183501080823027, -0.658299946719611, -0.563901271084431, -0.104454834691276, 0.715158727414282, -0.0805825981616209, -0.773816895694757, -0.253034783981378, -0.783775136777695, -0.439357063536005, -0.941680494841322, 0.227158249206389, -0.50752863656701, -0.0658964161620369, -0.0689244902651806, 0.185611518464636, 0.378167766177418, -0.0629003710494349, 0.487507055153686, -0.148876486655171), .Dim = c(1L, 28L)), value = c(1, 28));`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign11_70bfb5d8e830bdd4b6b23b9e8f39a2eb() {
        assertEval("argv <- list(structure(NA, .Dim = c(1L, 1L)), value = c(1L, 1L));`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign2_179396ed607465d5099dd6183bdfe3a5() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L)), value = c(0L, 0L));`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign3_23de6f8b26a12ea0166df91fdae43298() {
        assertEval("argv <- list(structure(1:12, .Dim = 12L), value = 12L);`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign4_c28644b1576feb38f0fb71ea8b49996c() {
        assertEval("argv <- list(structure(list(1:3, 4:6, 3.14159265358979, c('a', 'b', 'c')), .Dim = c(2L, 2L)), value = c(2, 2));`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign5_1e03916cb62f6bb0e9d7b2d2f163c66f() {
        assertEval("argv <- list(structure(list(NULL, NULL, NULL, NULL, NULL, NULL), .Dim = 2:3), value = c(2, 3));`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign6_eecec1df4c04a202c8ed7f2c0b42d49c() {
        assertEval("argv <- list(structure(list(1L, 3.14159265358979, 3+5i, 'testit', TRUE, structure(1L, .Label = 'foo', class = 'factor')), .Dim = c(1L, 6L)), value = c(1, 6));`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign7_1583db6ffa1027613c4879b74aa827a7() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4), value = 3:4);`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign8_6a4f2e50c1edf9a2e317a8810f1618b7() {
        assertEval("argv <- list(NULL, NULL);`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign9_4c2875c3873ef5256c0b15362aec5209() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 1L, 2L, 3L, 4L, 5L, 6L, 7L), .Dim = c(3L, 4L, 2L)), value = c(3, 4, 2));`dim<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimdataframe_testdimdataframe1_f924902049add9427bea159e65df0ad2() {
        assertEval("argv <- structure(list(x = structure(list(c..1....4....7.. = structure(1:3,     .Label = c('1', '4', '7'), class = 'factor'), c..2....5....8.. = structure(1:3,     .Label = c('2', '5', '8'), class = 'factor'), c..3....6....9.. = structure(1:3,     .Label = c('3', '6', '9'), class = 'factor')), .Names = c('c..1....4....7..',     'c..2....5....8..', 'c..3....6....9..'), row.names = c(NA,     -3L), class = 'data.frame')), .Names = 'x');do.call('dim.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltindimdataframe_testdimdataframe2_5088049b149f3d4e4d9027a8e9e5602d() {
        assertEval("argv <- structure(list(x = structure(list(Sepal.Length = c(5.1,     4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3,     5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5,     5, 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4,     5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4,     6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6,     6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8,     6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5,     5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8,     7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7,     5.8, 6.4, 6.5, 7.7, 7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2,     6.2, 6.1, 6.4, 7.2, 7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4,     6, 6.9, 6.7, 6.9, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9), Sepal.Width = c(3.5,     3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3, 3,     4, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3, 3.4,     3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3,     3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2,     3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9,     2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8,     3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5,     2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3,     2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2,     3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3, 2.8,     3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1, 3, 3.1, 3.1, 3.1,     3.2, 3.3, 3, 2.5, 3, 3.4, 3), Petal.Length = c(1.4, 1.4,     1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1,     1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6,     1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4,     1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4,     4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2,     4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3,     4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7,     4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1,     6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3,     5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7,     6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6,     5.5, 4.8, 5.4, 5.6, 5.1, 5.9, 5.7, 5.2, 5, 5.2, 5.4, 5.1),     Petal.Width = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2,         0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3,         0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2,         0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3,         0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5,         1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3,         1.4, 1.5, 1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4,         1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3,         1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1,         1.3, 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5,         2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2,         2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5,         1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 2.3, 2.5, 2.3,         1.9, 2, 2.3, 1.8), Species = structure(c(1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L), .Label = c('setosa', 'versicolor',         'virginica'), class = 'factor')), .Names = c('Sepal.Length',     'Sepal.Width', 'Petal.Length', 'Petal.Width', 'Species'),     row.names = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L,         12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L,         23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L,         34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L,         45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L,         56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L,         67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L,         78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L,         89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L,         100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L, 108L,         109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L,         118L, 119L, 120L, 121L, 122L, 123L, 124L, 125L, 126L,         127L, 128L, 129L, 130L, 131L, 132L, 133L, 134L, 135L,         136L, 137L, 138L, 139L, 140L, 141L, 142L, 144L, 145L,         146L, 147L, 148L, 149L, 150L), class = 'data.frame')),     .Names = 'x');do.call('dim.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames1_ac4c6d82d6be6eadd7ea07b592d0882d() {
        assertEval("argv <- list(structure(c(4L, 3L, 2L, 1L, 2L), .Label = c('0.6', '0.8', 'Area Examined', 'C2'), class = 'factor'));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames10_da41734c9ce715711b88d9e542001083() {
        assertEval("argv <- list(structure(list(Ozone = c(41L, 36L, 12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L, 14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L, 45L, 115L, 37L), Solar.R = c(190L, 118L, 149L, 313L, NA, NA, 299L, 99L, 19L, 194L, NA, 256L, 290L, 274L, 65L, 334L, 307L, 78L, 322L, 44L, 8L, 320L, 25L, 92L, 66L, 266L, NA, 13L, 252L, 223L, 279L), Wind = c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5, 9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4), Temp = c(67L, 72L, 74L, 62L, 56L, 66L, 65L, 59L, 61L, 69L, 74L, 69L, 66L, 68L, 58L, 64L, 66L, 57L, 68L, 62L, 59L, 73L, 61L, 61L, 57L, 58L, 57L, 67L, 81L, 79L, 76L), Month = c(5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L), Day = 1:31, Oz.Z = c(0.782229292792786, 0.557251841325834, -0.522639925715534, -0.252666983955192, NA, 0.197287918978711, -0.0276895324882403, -0.207671493661802, -0.702621886889095, NA, -0.747617377182486, -0.342657964541973, -0.567635416008924, -0.432648945128753, -0.252666983955192, -0.432648945128753, 0.467260860739053, -0.792612867475876, 0.287278899565492, -0.567635416008924, -1.01759031894283, -0.567635416008924, -0.882603848062657, 0.377269880152273, NA, NA, NA, -0.0276895324882403, 0.962211253966347, 4.11189557450367, 0.602247331619224)), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day', 'Oz.Z'), row.names = c(NA, 31L), class = 'data.frame'));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames11_f44840df0061cd2baa8b1ca6f6ae5e28() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames12_8b6d7112561e7cdfaf4fd26ab613c1b3() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 4L), .Dimnames = list(NULL, c('Estimate', 'Std. Error', 't value', 'Pr(>|t|)'))));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames13_5294693d3ce3c30011a963b4169ac0e8() {
        assertEval("argv <- list(structure(c(1.00000000141919, 1.00000000141919, 1.00000000141919, 1.00000000141919, 1.00000000141919, 1.00000003943081, 0.999999963407572, 1.00000003943081, 0.999999887384338, 0.999999887384338, 1.00000110375608, 0.999998671012596, 1.00000353649956, 0.999993805525628, 1.0000132674735, 0.999993805525628, 0.999954881629886, 1.00003272942137, 1.00018842500434, 1.00018842500434, 0.998942860340576, 0.998942860340576, 1.00143398966811, 1.00641624832317, 0.996451731013043, 0.996451731013043, 0.996451731013043, 0.956593661772521, 1.11602593873461, 0.956593661772521, 0.637729107848348, 1.2754582156967, 0, 5.10183286278678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.94013552497596, 3.76412613616612, 7.30291496677768, 14.1686451539795, 27.4890922070583, 53.3325661305982, 103.472408672272, 200.750502109581, 389.483191189237, 755.650202381997, 1466.06384193569, 2844.36258373045, 5518.44906703615, 10706.5393765913, 20772.1380196383, 40300.7636161042, 78188.9463884664, 151697.155845212, 294313.049942543, 571007.218374244, 1107831.42112573, 2149343.17429151, 4170017.13104157, 8090398.61389002, 15696470.311059, 30453280.1141634, 59083492.559312, 114629985.805561, 222397713.850125, 431481718.951103, 837133036.93017, 1624151587.48205, 3151074263.75394, 6113511302.83196, 11861040827.0204, 23012027206.5324, 44646452442.3573, 86620170794.9288, 168054874821.487, 326049245490.904, 632579733498.458, 1227290450360.24, 2381109863489.76, 4619676014664.61, 8962797733853.2, 17389042711398.3, 33737100912048.4, 65454549040847.5, 126990699928896, 246379175201939, 478009006423530, 927402279739830, 1799286146937082, 3490859083252747, 6772739936266967, 13140033736528760, 25493446790450148, 49460743386475336, 95960547120913696, 186176471759588736, 361207596842468544, 700791709787994368, 1359630936550262016, 2637868362903399936, 5117822236182886400, 9929268960054196224, 19264127970060791808, 37375020125774807040, 72512606973297393664, 1.40684287014036e+20, 2.7294659047997e+20, 5.29553390729944e+20, 1.02740538360686e+21, 1.99330573047582e+21, 3.86728338996836e+21, 7.50305404171627e+21, 1.45569421000466e+22, 2.82424412804067e+22, 5.47941653460064e+22, 1.06308109216746e+23, 2.06252146205912e+23, 4.00157124688985e+23, 7.76359070435321e+23, 1.50624186823988e+24, 2.9223134410489e+24, 5.66968428254813e+24, 1.09999562078627e+25, 2.13414063286361e+25, 4.14052220754691e+25, 8.03317433205064e+25, 1.55854473744651e+26, 3.02378808245954e+26, 5.8665589378512e+26, 1.1381919629553e+27, 2.20824672789753e+27, 4.28429802210817e+27, 8.31211904202342e+27, 1.6126637849175e+28, 3.12878639712715e+28, 6.07026977774323e+28, -1.69869203952449, -6.59138547321901, -19.1822720729097, -49.6216113971901, -120.340815686727, -280.172995242172, -634.16918707159, -1406.14196698717, -3069.11929954479, -6616.11942037001, -14119.7855095835, -29884.6887074354, -62812.0433183954, -131238.022320374, -272806.670597037, -564567.387887297, -1163795.8381508, -2390740.65186453, -4896047.65118829, -9998943.37840444, -20369271.0188994, -41401011.400719, -83974646.5467737, -170005771.46876, -343577337.860415, -693250079.585253, -1396729874.79437, -2810209917.82931, -5646909305.11788, -11333554766.2687, -22721587164.2141, -45504990439.9914, -91044782407.2254, -181991924578.337, -363473977210.141, -725337050553.89, -1446342551648.47, -2881941162160.65, -5738497521398.03, -11418936575319.8, -22708142164275.2, -45131432245311.6, -89645884346409.8, -177969941625094, -353133219287688, -700351348689777, -1388315183960579, -2750828581307066, -5448167546359572, -10785901526178346, -21344633431230288, -42223472396959864, -83494631109252016, -165047335865753888, -326144099824872960, -644268556323104896, -1272289222665704960, -2511719077288045568, -4957094068295422976, -9780441891046391808, -1.9291639356539e+19, -38041976425069862912, -74997019625717596160, -1.47813980522732e+20, -2.91260085798056e+20, -5.73777646929122e+20, -1.13007319819804e+21, -2.22521899361014e+21, -4.38071519248462e+21, -8.62235781974388e+21, -1.69675222834625e+22, -3.33829458816692e+22, -6.56669878434099e+22, -1.2914810481395e+23, -2.53950840681221e+23, -4.99268379737403e+23, -9.81393715458217e+23, -1.92876460684381e+24, -3.79004004348997e+24, -7.44626980645141e+24, -1.46273574426805e+25, -2.87294154406129e+25, -5.64187042306716e+25, -1.10778729236262e+26, -2.1748439290622e+26, -4.26913311245721e+26, -8.37900750248964e+26, -1.64432657900359e+27, -3.22646894393502e+27, -6.33012184999843e+27, -1.24177532894999e+28, -2.4356873672908e+28, -4.77692848222753e+28, -9.36754365223252e+28, -1.83676481719521e+29, -3.60108404728876e+29, -7.05936824038065e+29, -1.38373288587828e+30, -2.71202352823357e+30, -5.31484173040654e+30), .Dim = c(100L, 3L)));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames14_b6a8bb5d4f6e9806cd71dda17a40f422() {
        assertEval("argv <- list(structure(c(0.0267062896727757, 0.0288568829806391, 0.0492797675063702, -0.0572758706635325, 0.0323212080834915, 0.0153959090462038, -0.0926263811460125, 0.063635852899097, -0.0487298690847772, 0.0550557154550753, -0.0198673280094324, -0.0926263811460125, 0.0140766975562449, 0.0582283948223117, 0.00131213541438663, 0.091788691086849, -0.047804624481445, 0.0620410336020094, -0.0572622511611348, 0.0287132484691924, -0.083909175260886, -0.078402304235417, 0.0355405280997754, 0.0717493130601819, -0.0215453924782896, 0.0433187167027035, -0.0391463972547204, 0.0355405280997753, -0.101433295142967, -0.0534964348088565, -0.0100532600167173, 0.115085165377514), .Dim = c(16L, 2L), .Dimnames = list(structure(c('M1', 'M2', 'M4', 'M5', 'BF', 'HF', 'NM', 'SF', 'U1', 'U2', 'U3', 'C0', 'C1', 'C2', 'C3', 'C4'), .Names = c('Mois1', 'Mois2', 'Mois3', 'Mois4', 'Manag1', 'Manag2', 'Manag3', 'Manag4', 'Use1', 'Use2', 'Use3', 'Manure1', 'Manure2', 'Manure3', 'Manure4', 'Manure5')), c('1', '2'))));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames15_39cfa2c447c2aa8ff0cdf28a265261f1() {
        assertEval("argv <- list(structure('foo', .Dim = c(1L, 1L), .Dimnames = list(NULL, structure('object', simpleOnly = TRUE))));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames16_d637972cb33388cff355751ef752ceac() {
        assertEval("argv <- list(structure(c('4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.0-3', '4.0-3', '4.0-3', '4.0-3', '4.0-3', '4.0-2', '4.0-2', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '3.1-55', '3.1-55', '3.1-55', '3.1-54', '3.1-53', '3.1-53', '3.1-52', '3.1-51', NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 'The C and R code has been reformatted for legibility.', 'The old compatibility function rpconvert() has been removed.', 'The cross-validation functions allow for user interrupt at the end\\nof evaluating each split.', 'Variable Reliability in data set car90 is corrected to be an\\nordered factor, as documented.', 'Surrogate splits are now considered only if they send two or more\\ncases _with non-zero weight_ each way.  For numeric/ordinal\\nvariables the restriction to non-zero weights is new: for\\ncategorical variables this is a new restriction.', 'Surrogate splits which improve only by rounding error over the\\ndefault split are no longer returned.  Where weights and missing\\nvalues are present, the splits component for some of these was not\\nreturned correctly.', 'A fit of class \\'rpart\\' now contains a component for variable\\n‘importance’, which is reported by the summary() method.', 'The text() method gains a minlength argument, like the labels()\\nmethod.  This adds finer control: the default remains pretty =\\nNULL, minlength = 1L.', 'The handling of fits with zero and fractional weights has been\\ncorrected: the results may be slightly different (or even\\nsubstantially different when the proportion of zero weights is\\nlarge).', 'Some memory leaks have been plugged.', 'There is a second vignette, longintro.Rnw, a version of the\\noriginal Mayo Tecnical Report on rpart.', 'Added dataset car90, a corrected version of the S-PLUS dataset\\ncar.all (used with permission).', 'This version does not use paste0{} and so works with R 2.14.x.', 'Merged in a set of Splus code changes that had accumulated at Mayo\\nover the course of a decade. The primary one is a change in how\\nindexing is done in the underlying C code, which leads to a major\\nspeed increase for large data sets.  Essentially, for the lower\\nleaves all our time used to be eaten up by bookkeeping, and this\\nwas replaced by a different approach.  The primary routine also\\nuses .Call{} so as to be more memory efficient.', 'The other major change was an error for asymmetric loss matrices,\\nprompted by a user query.  With L=loss asymmetric, the altered\\npriors were computed incorrectly - they were using L' instead of L.\\nUpshot - the tree would not not necessarily choose optimal splits\\nfor the given loss matrix.  Once chosen, splits were evaluated\\ncorrectly.  The printed “improvement” values are of course the\\nwrong ones as well.  It is interesting that for my little test\\ncase, with L quite asymmetric, the early splits in the tree are\\nunchanged - a good split still looks good.', 'Add the return.all argument to xpred.rpart().', 'Added a set of formal tests, i.e., cases with known answers to\\nwhich we can compare.', 'Add a usercode vignette, explaining how to add user defined\\nsplitting functions.', 'The class method now also returns the node probability.', 'Add the stagec data set, used in some tests.', 'The plot.rpart routine needs to store a value that will be visible\\nto the rpartco routine at a later time.  This is now done in an\\nenvironment in the namespace.', 'Force use of registered symbols in R >= 2.16.0', 'Update Polish translations.', 'Work on message formats.', 'Add Polish translations', 'rpart, rpart.matrix: allow backticks in formulae.', 'tests/backtick.R: regession test', 'src/xval.c: ensure unused code is not compiled in.', 'Change description of margin in ?plot.rpart as suggested by Bill\\nVenables.'), .Dim = c(29L, 4L)));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames17_8f0c8cf3ab42a2546f5981ddaaef2141() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, -1.43884556914512e-134, 0, 0, 0, -7.95468296571581e-252, 1.76099882882167e-260, 0, -9.38724727098368e-323, -0.738228974836154, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.84657791618065e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.05931985100232e-174, 0, -3.41789378681991e-150, 0, 0, 0, 0, -1.07225492686949e-10, 0, 1.65068934474523e-67, 0, -6.49830035279282e-307, 0, 5.83184963977238e-90, 0, -9.81722610183938e-287, 6.25336419454196e-54, 0, 0, 0, -1.72840591500382e-274, 1.22894687952101e-13, 0.660132850077566, 0, 0, 7.79918925397516e-200, -2.73162827952857e-178, 1.32195942051179e-41, 0, 0, 0, 0, 2.036057023761e-45, -3.40425060445074e-186, 1.59974269220388e-26, 0, 6.67054294775317e-124, 0.158503117506202, 0, 0, 0, 0, 0, 0, 3.42455724859116e-97, 0, 0, -2.70246891320217e-272, 0, 0, -3.50562438899045e-06, 0, 0, 1.35101732326608e-274, 0, 0, 0, 0, 0, 0, 0, 7.24580295957621e-65, 0, -3.54887341172294e-149, 0, 0, 0, 0, 0, 0, 0, 0, 1.77584594753563e-133, 0, 0, 0, 2.88385135688311e-250, 1.44299633616158e-259, 0, 1.56124744085834e-321, 1.63995835868977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.01050064173383e-122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.64868196850938e-172, 0, 6.28699823828692e-149, 0, 0, 0, 0, 5.0552295590188e-09, 0, 2.30420733561404e-66, 0, 7.0823279075443e-306, 0, 2.05009901740696e-88, 0, 7.41800724282869e-285, 7.18347043784483e-53, 0, 0, 0, 1.04251223075649e-273, 9.75816316577433e-13, 4.29519957592147, 0, 0, 1.33541454912682e-198, 2.34606233784019e-176, 8.38236726536896e-41, 0, 0, 0, 0, 1.35710537434521e-43, 1.15710503176511e-185, 1.25601735272233e-25, 0, 4.46811655846376e-123, 4.4196641795634, 0, 0, 0, 0, 0, 0, 3.74179015251531e-93, 0, 0, 3.62662047836582e-271, 0, 0, 1.26220330674453e-05, 0, 0, 1.72715562657338e-273, 0, 0, 0, 0, 0, 0, 0, 5.46372806810809e-64, 0, 2.47081972486962e-148, 0, 0, 0), .Dim = c(100L, 2L)));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames18_04ea7e0965e5d50325e7f2cb47d24b91() {
        assertEval("argv <- list(structure(list(Ozone = c(39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA, 44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA, 45L, 168L, 73L, NA, 76L, 118L, 84L, 85L), Solar.R = c(83L, 24L, 77L, NA, NA, NA, 255L, 229L, 207L, 222L, 137L, 192L, 273L, 157L, 64L, 71L, 51L, 115L, 244L, 190L, 259L, 36L, 255L, 212L, 238L, 215L, 153L, 203L, 225L, 237L, 188L), Wind = c(6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3, 8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9, 10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3, 6.3), Temp = c(81L, 81L, 82L, 86L, 85L, 87L, 89L, 90L, 90L, 92L, 86L, 86L, 82L, 80L, 79L, 77L, 79L, 76L, 78L, 78L, 77L, 72L, 75L, 79L, 81L, 86L, 88L, 97L, 94L, 96L, 94L), Month = c(8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L), Day = 1:31, Oz.Z = c(-0.528248463997741, -1.28427378861836, -1.10786787954022, 0.454584458009066, -0.629051840613824, 0.152174328160817, 1.56342160078598, 0.731793743703293, 1.26101147093773, NA, NA, -0.402244243227638, -0.805457749691969, 0.126973484006797, NA, -0.956662814616093, -0.0242315809173275, -0.931461970462072, -0.729855217229907, -0.402244243227638, -0.981863658770114, -1.28427378861836, NA, -0.377043399073617, 2.72266043187093, 0.328580237238962, NA, 0.404182769701024, 1.46261822416989, 0.60578952293319, 0.63099036708721)), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day', 'Oz.Z'), row.names = 93:123, class = 'data.frame'));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames19_779659f57349d1262608b25317f10391() {
        assertEval("argv <- list(structure(c(28L, 138L, 16L), .Dim = 3L, .Dimnames = structure(list(object = c('FALSE', 'TRUE', NA)), .Names = 'object'), class = 'table'));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames2_528bb8f75bffaf611d9b24a4e9226dc5() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 56.989995924654, 56.989995924654, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 109.608811230383, 109.608811230383, 109.608811230383, 107.478028232287, 107.478028232287, 107.478028232287, 107.478028232287, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 10.7055301785859, 0, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 0.914597467778369, 0.914597467778369, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.599195286063472, 0.599195286063472, 0.599195286063472, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0202635232425103, 2.60032456603692e-08, 0, 0, 0, 0, 0, 0.165626203544259, 0.165626203544259, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.503396799290371, 0.503396799290371, 0.503396799290371, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.984387422945875, 0.999999996451695), .Dim = c(52L, 3L)));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames20_1573415146735e089dae921ddf40c88f() {
        assertEval("argv <- list(structure(c('myTst', 'myLib', '1.0', NA, 'methods', NA, NA, NA, NA, 'What license is it under?', NA, NA, NA, NA, NA, NA, '3.0.1'), .Dim = c(1L, 17L), .Dimnames = list('ret0', c('Package', 'LibPath', 'Version', 'Priority', 'Depends', 'Imports', 'LinkingTo', 'Suggests', 'Enhances', 'License', 'License_is_FOSS', 'License_restricts_use', 'OS_type', 'Archs', 'MD5sum', 'NeedsCompilation', 'Built'))));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames21_c04fd9b9915522614a7bfc6b06ffd8f2() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 1, 2), Deviance = c(12.2441566485997, 32.825622681839, 8.44399377410362, 11.9670615295804), AIC = c(73.9421143635373, 92.5235803967766, 72.1419514890412, 77.665019244518)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user', '+ Temp', '+ Soft'), class = c('anova', 'data.frame')));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames22_b1374989046d10e736aafe896ba59c94() {
        assertEval("argv <- list(structure(c(1L, 2L, 1L), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = ''), class = 'table'));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames23_9993a9a887ae4731beb68f1275e4127b() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Dim = c(10L, 2L), .Dimnames = list(NULL, c('tt', 'tt + 1')), .Tsp = c(1920.5, 1921.25, 12), class = c('mts', 'ts', 'matrix')));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames24_352a6cb0fa893c457c3141a4e1621e96() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 2L, 1L, NA), .Label = c('no', 'yes'), class = 'factor'));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames26_8daa46dd266ca3124ee14488675413db() {
        assertEval("argv <- list(structure(c(-15.7095066647243, 0.26727943386171, 0.297238382214578, 0.257897591876632, 0.340108731286838, 0.236310380889319, 0.317311605722827, 0.262866287094154, 0.338086383499512, 0.234905236792884, 0.325336667185977, 0.218927692395608, -7.51574917378772, 7.84743436370915, -0.381048703752012, -0.330615253498497, 0.244844953659604, 0.170120314286586, -0.406781840034597, -0.336984938523255, 0.243389061455961, 0.169108748250409, -0.417069674483433, -0.280657271719851, -5.36168424071406, 0.204399594459056, 7.44580265802875, 0.18731755950565, -0.56882795084156, -0.395226400731518, -0.439007571789656, -0.363681278343691, 0.147865047400615, 0.10273786720867, 0.236300269698257, 0.159012733501467, -5.07819471343419, -0.0276453301370831, -3.65602301353979, 6.37342950130462, 0.0099206539914638, 0.0068929530698134, 0.118301269982087, 0.0980027677458417, -0.620575419067553, -0.431180972906935, -0.48536920518568, -0.326617841666301), .Dim = c(12L, 4L), .Dimnames = list(c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), c('(Intercept)', 'M.userY', 'SoftMedium', 'SoftSoft'))));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames3_18d9ddea3bae17f431f776f1a5921678() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE), .Dim = c(3L, 1L)));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames4_8f24676d18287d5905f7a39929d537bc() {
        assertEval("argv <- list(structure(c(NA, 1, 2, 5.65604443125997, 8.44399377410362, 5.49523049516867, 71.3540021461976, 72.1419514890413, 75.1931882101063), .Dim = c(3L, 3L), .Dimnames = list(c('<none>', '- M.user:Temp', '+ Soft'), c('Df', 'Deviance', 'AIC'))));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames5_bc4751c067ac8fd0cbb06c71788dedff() {
        assertEval("argv <- list(structure(c(0.0495149735282523, -0.108383943640066, 0.077846206317523, -0.0237949779538032, 0.00481774174809338, -0.108383943640066, 0.280303242453237, -0.276080245636638, 0.130604235856321, -0.0264432890328551, 0.077846206317523, -0.276080245636638, 0.443183251704797, -0.364557026828347, 0.119607814442664, -0.0237949779538032, 0.130604235856321, -0.364557026828347, 0.44886505191838, -0.191117282992552, 0.00481774174809338, -0.0264432890328551, 0.119607814442664, -0.191117282992552, 0.0931350158346494), .Dim = c(5L, 5L)));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames6_b57e2b4318ce1f3796fcaec016ccd382() {
        assertEval("argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames7_cae169d9a5ebf5191a1dd46561c4679a() {
        assertEval("argv <- list(structure(c(13.0879058831551, -0.0481782079188499, 0.0648397936975344, -0.0703016880559154, -0.433062454113996, -0.000149473169823967, -16.3229386445345, -0.0481782079188499, 1.42936577525521, 0.00346026862477374, 0.000168722552167122, -0.00850959684180395, -9.2926002743558e-06, -1.44812039916227, 0.0648397936975344, 0.00346026862477374, 0.0649221455479854, 1.50206888047831e-06, 0.0303152177308945, -5.59890220792902e-06, -0.238079760031664, -0.0703016880559154, 0.000168722552167122, 1.50206888047831e-06, 0.00876007504795771, 0.000744776618395879, -6.15610217329725e-06, -0.0811419414051802, -0.433062454113996, -0.00850959684180395, 0.0303152177308945, 0.000744776618395879, 10.728754385628, -6.46786616103191e-05, -11.116657381748, -0.000149473169823967, -9.2926002743558e-06, -5.59890220792902e-06, -6.15610217329725e-06, -6.46786616103191e-05, 0.00193527894824396, -0.000812297378584339, -16.3229386445345, -1.44812039916227, -0.238079760031664, -0.0811419414051802, -11.116657381748, -0.000812297378584339, 249.99918229946), .Dim = c(7L, 7L)));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames8_28f564b6e9cdfd539566df046ae8ab02() {
        assertEval("argv <- list(structure(list(visible = c(TRUE, TRUE, TRUE, TRUE, TRUE), from = structure(c(2L, 2L, 2L, 2L, 2L), .Label = c('CheckExEnv', 'package:base', 'package:datasets', 'package:graphics', 'package:grDevices', 'package:methods', 'package:stats', 'package:utils'), class = 'factor')), .Names = c('visible', 'from'), row.names = c('[[.data.frame', '[[.Date', '[[.factor', '[[.numeric_version', '[[.POSIXct'), class = 'data.frame'));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames9_2c360797a364c449c337f5e3bff63e90() {
        assertEval("argv <- list(structure(c(-0.148741651280925, -0.200659450546418, -0.0705810742857073, -0.356547323513813, -0.214670164989233, -0.161150909262745, -0.0362121726544447, -0.259637310505756, -0.142667503568732, -0.113509274827518, -0.0362121726544447, -0.221848749616356, -0.0809219076239261, -0.0969100130080564, 0, -0.113509274827518, -0.0362121726544447, 0, 0.0934216851622351, 0, 0.0644579892269184, 0.113943352306837, 0.161368002234975, 0.0969100130080564, 0.100370545117563, 0.139879086401236, 0.269512944217916, 0.193124598354462, 0.184691430817599, 0.201397124320452, 0.262451089730429, 0.269512944217916, 0.184691430817599, 0.315970345456918, 0.369215857410143, 0.352182518111362, 0.334453751150931, 0.385606273598312, 0.431363764158987, 0.352182518111362, 0.445604203273598, 0.534026106056135, 0.56702636615906, 0.556302500767287, 0.556302500767287, 0.635483746814912, 0.635483746814912, 0.607455023214668, 0.686636269262293, 0.702430536445525, 0.702430536445525, 0.644438589467839, 0.746634198937579, 0.76715586608218, 0.817565369559781, 0.725094521081469, 0.780317312140151, 0.8055008581584, 0.840733234611807, 0.76715586608218, 0.840733234611807, 0.888740960682893, 0.893761762057943, 0.786751422145561, 0.888740960682893, 0.949877704036875, 0.91803033678488, 0.835056101720116, 0.979548374704095, 1.0111473607758, 0.979548374704095, 0.94101424370557, 1.07481644064517, 1.08134730780413, 1.08457627793433, 0.949877704036875, 1.14736710779379, 1.11260500153457, 1.17172645365323, 0.999565488225982, 1.20951501454263, 1.16643011384328, 1.20466251174822, 1.06483221973857, -0.159187512164844, -0.175393808396786, -0.187687755757946, -0.207642507026642, -0.198621515607727, -0.176754605786408, -0.158836651491979, -0.149428697683695, -0.140952828307713, -0.131024527567456, -0.123872539048553, -0.114280817787828, -0.0994047163123464, -0.087368495856282, -0.0695543741081212, -0.0471907302590792, -0.0252858368758202, -0.00046875732235226, 0.0256791224090317, 0.0513817320777501, 0.0766209131410961, 0.0968522890603896, 0.10926580806596, 0.12423159770419, 0.140017729684574, 0.160995251972733, 0.186207523410629, 0.20145502677125, 0.212779940301236, 0.218492043424262, 0.230096897140732, 0.249642407137453, 0.267032743986859, 0.296832600908836, 0.324482776968729, 0.34857076887723, 0.365213423984069, 0.378158595546285, 0.395931013687348, 0.419646007489754, 0.460582747648703, 0.501139500862399, 0.536421474743013, 0.565667794936187, 0.583727648968917, 0.604807814936374, 0.625205889668605, 0.647621016647276, 0.667938096838737, 0.680279300032779, 0.691704012845436, 0.70875844749856, 0.731043761734682, 0.751082618736354, 0.768818358528044, 0.778037539482349, 0.783883770017724, 0.793567437831882, 0.808497952330164, 0.824527436015885, 0.837662628092942, 0.850394585087975, 0.86126020516377, 0.869685339227116, 0.881257746828503, 0.896341202762879, 0.909788792806972, 0.926007182864941, 0.946255773007512, 0.966071629523008, 0.986442844639348, 1.01212132840619, 1.03013203323943, 1.04537749097574, 1.05767268306294, 1.06939407179363, 1.08529788756315, 1.10060754122045, 1.11720247611807, 1.12845012932749, 1.1415063364534, 1.15405124613828, 1.16739846403236, 1.18260472251233, -0.500829194148537, -0.52138894326571, -0.395290556425639, -0.612473674589852, -0.501276350125614, -0.491690167245187, -0.390354415846618, -0.612811414694937, -0.50108691493379, -0.487593021259144, -0.410519772822145, -0.60198159752223, -0.486883827608277, -0.503288363976579, -0.42574385459525, -0.568147157695982, -0.507959098850015, -0.498398837847198, -0.433186387433784, -0.55201418458838, -0.518671455596172, -0.493155285150245, -0.444313944722341, -0.526234257426627, -0.532725645126928, -0.515368327315997, -0.429924874711845, -0.513474228757053, -0.535827355681639, -0.509755301472591, -0.457834384119355, -0.484020307382735, -0.566550518367581, -0.484439669223823, -0.460465869949124, -0.506741194861463, -0.536243725945176, -0.486859832443798, -0.457576573769744, -0.545126578784142, -0.515794992319117, -0.47384137864798, -0.476642594236321, -0.523341985476231, -0.522293038769951, -0.469249989654994, -0.486003635866052, -0.541938916235621, -0.49102139505142, -0.478259440132195, -0.481086490677911, -0.556698657805247, -0.48671796302777, -0.486157330493723, -0.461848039861244, -0.556823945253764, -0.498054862552783, -0.480860984756722, -0.4661755221955, -0.561135228990277, -0.497359948541683, -0.46413941340098, -0.470914891619888, -0.579021563367855, -0.488243746349874, -0.449175409103654, -0.488562751281115, -0.586017616755797, -0.467647247160106, -0.454360847750584, -0.499693656171344, -0.581118529375087, -0.458579410956407, -0.467570268776559, -0.473550583747953, -0.613665700345632, -0.438534120752666, -0.486034341320657, -0.452438304433326, -0.626272401483727, -0.43259461595065, -0.48652221719006, -0.460246994058915, -0.618889869869875), .Dim = c(84L, 3L), .Dimnames = list(NULL, c('JJ', 'sm[, 1]', 'sm[, 3] - 0.5')), .Tsp = c(1960, 1980.75, 4), class = c('mts', 'ts', 'matrix')));dimnames(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign1_85a4bcd14ac2f0302bbcd5b6ee789a64() {
        assertEval("argv <- list(structure(c(300, 3000, 400, 4000), .Dim = c(2L, 2L, 1L), .Dimnames = list(c('happy', 'sad'), NULL, '')), value = list(c('happy', 'sad'), NULL, ''));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign10_fecdd3f25422c943a3c93559f1d67428() {
        assertEval("argv <- list(structure(1:9, .Dim = c(3L, 3L), .Dimnames = list(c('x', 'y', NA), c('1', NA, '3'))), value = list(c('x', 'y', NA), c('1', NA, '3')));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign11_195379d284b3534b1d8ca733a2a27f13() {
        assertEval("argv <- list(structure(c(0-0.5i, 0-0.577350269189626i, 0-0.707106781186548i, 0-1i, Inf+0i, 1+0i, 0.707106781186548+0i, 0.577350269189626+0i, 0.5+0i, 0.447213595499958+0i, 0.408248290463863+0i, 0.377964473009227+0i, 0.353553390593274+0i, 0.333333333333333+0i, 0.316227766016838+0i, 0.301511344577764+0i, 0.288675134594813+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 0+2i, 0+1.73205080756888i, 0+1.41421356237309i, 0+1i, 0+0i, 1+0i, 1.41421356237309+0i, 1.73205080756888+0i, 2+0i, 2.23606797749979+0i, 2.44948974278318+0i, 2.64575131106459+0i, 2.82842712474619+0i, 3+0i, 3.16227766016838+0i, 3.3166247903554+0i, 3.46410161513775+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, 0-8i, 0-5.19615242270663i, 0-2.82842712474619i, 0-1i, 0+0i, 1+0i, 2.82842712474619+0i, 5.19615242270663+0i, 8+0i, 11.1803398874989+0i, 14.6969384566991+0i, 18.5202591774521+0i, 22.6274169979695+0i, 27+0i, 31.6227766016838+0i, 36.4828726939094+0i, 41.5692193816531+0i, 16+0i, 9+0i, 4+0i, 1+0i, 0+0i, 1+0i, 4+0i, 9+0i, 16+0i, 25+0i, 36+0i, 49+0i, 64+0i, 81+0i, 100+0i, 121+0i, 144+0i), .Dim = c(17L, 6L), .Dimnames = structure(list(c('-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'), `^` = c('-0.5', '0', '0.5', '1', '1.5', '2')), .Names = c('', '^'))), value = structure(list(c('-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'), `^` = c('-0.5', '0', '0.5', '1', '1.5', '2')), .Names = c('', '^')));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign12_320da4e5ed35221c7e08dc50b8d5848d() {
        assertEval("argv <- list(structure(list(fair = c(326L, 688L, 343L, 98L), red = c(38L, 116L, 84L, 48L), medium = c(241L, 584L, 909L, 403L), dark = c(110L, 188L, 412L, 681L), black = c(3L, 4L, 26L, 85L)), .Names = c('fair', 'red', 'medium', 'dark', 'black'), class = 'data.frame', row.names = c('blue', 'light', 'medium', 'dark')), value = list(c('blue', 'light', 'medium', 'dark'), c('F', 'R', 'M', 'D', 'B')));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign13_a76c2982657b5ba62c5d7b8b5e1726a1() {
        assertEval("argv <- list(structure(c(4L, 96L, 0L, 99L, 0L, 1L, 91L, 0L, 9L, 99L, 0L, 1L, 4L, 0L, 96L, 82L, 18L, 0L, 87L, 13L, 0L, 92L, 0L, 8L, 2L, 1L, 97L, 81L, 19L, 0L, 44L, 56L, 0L, 12L, 88L, 0L, 22L, 78L, 0L, 5L, 95L, 0L, 1L, 99L, 0L, 57L, 43L, 0L, 24L, 76L, 0L, 1L, 99L, 0L, 13L, 87L, 0L, 2L, 0L, 98L, 4L, 0L, 96L, 4L, 0L, 96L, 8L, 0L, 92L, 2L, 0L, 98L), .Dim = c(3L, 24L), .Dimnames = structure(list(cluster = c('1', '2', '3'), obs = c('  30', ' 243', ' 245', ' 309', ' 562', ' 610', ' 708', ' 727', ' 770', '1038', '1081', '1120', '1248', '1289', '1430', '1610', '1644', '1683', '1922', '2070', '2380', '2662', '2821', '2983')), .Names = c('cluster', 'obs'))), value = structure(list(cluster = c('1', '2', '3'), obs = c('  30', ' 243', ' 245', ' 309', ' 562', ' 610', ' 708', ' 727', ' 770', '1038', '1081', '1120', '1248', '1289', '1430', '1610', '1644', '1683', '1922', '2070', '2380', '2662', '2821', '2983')), .Names = c('cluster', 'obs')));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign14_79176686a8205a5b942a062a6f6cdf29() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('A', 'B'))), value = list(NULL, c('A', 'B')));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign15_2fec4a61520a7cdef28d061f2124d41e() {
        assertEval("argv <- list(structure(c('NULL', 'double', 'integer', 'complex', 'list', 'list', 'pairlist', 'builtin', 'closure', 'symbol', 'symbol', 'language', 'language', 'symbol', 'symbol', 'NULL', 'double', 'integer', 'complex', 'list', 'list', 'pairlist', 'function', 'function', 'symbol', 'symbol', 'language', 'language', 'symbol', 'symbol', 'NULL', 'numeric', 'numeric', 'complex', 'list', 'list', 'pairlist', 'function', 'function', 'name', 'name', 'call', '(', 'name', 'name'), .Dim = c(15L, 3L), .Dimnames = list(    c('NULL', '1', '1:1', '1i', 'list(1)', 'data.frame(x = 1)', 'pairlist(pi)', 'c', 'lm', 'formals(lm)[[1]]', 'formals(lm)[[2]]', 'y ~ x', 'expression((1))[[1]]', '(y ~ x)[[1]]', 'expression(x <- pi)[[1]][[1]]'), c('typeof(.)', 'storage.mode(.)', 'mode(.)'))), value = list(c('NULL', '1', '1:1', '1i', 'list(1)', 'data.frame(x = 1)', 'pairlist(pi)', 'c', 'lm', 'formals(lm)[[1]]', 'formals(lm)[[2]]', 'y ~ x', 'expression((1))[[1]]', '(y ~ x)[[1]]', 'expression(x <- pi)[[1]][[1]]'), c('typeof(.)', 'storage.mode(.)', 'mode(.)')));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign2_4251a701e45fc2053b85ce4a2fc3b2f2() {
        assertEval("argv <- list(structure(1:24, .Dim = 2:4, .Dimnames = list(c('A', 'B'), NULL, NULL)), value = list(c('A', 'B'), NULL, NULL));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign3_bcc5c5fefc9508adde5f97b51ea68153() {
        assertEval("argv <- list(structure(c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = 3:4), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign4_999d9b3fdc47c06993e12bafb99a00e0() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 20L)), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign5_f8344ff7cf66a126932cf5f9a6e8e30b() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 25, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 38, 39, 0, 0, 0, 0, 0, 86, 0, 0, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 114, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 128, 129, 0, 0, 132, 133, 0, 0, 0, 0, 138, 0, 0, 141, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 187, 0, 1, 0, 0, 0, 193, 0, 0, 196, 0, 0, 0, 1, 1, 202, 0, 0, 3, 0, 208, 0, 2, 0, 212, 0, 0, 0, 0, 0, 218, 0, 220, 1, 0, 0, 0, 0, 226, 227, 0, 2, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 250, 251, 0, 0, 0, 255, 256, 257, 0, 0, 0, 261, 262, 0, 264, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 275, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 287, 0, 0, 290, 0, 292, 293, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0, 0, 324, 0, 0, 0, 328, 329, 0, 0, 0, 0, 0, 335, 0, 0, 0, 339, 340, 0, 0, 343, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 354, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 379, 0, 0, 0, 0, 0, 385, 0, 387, 0, 389, 0, 391, 0, 393, 394, 395, 396, 0, 0, 399, 0, 0, 0, 0, 405, 1, 407, 408, 0, 2, 0, 0, 0, 414, 415, 0, 417, 0, 0, 0, 0, 0, 0, 424, 0, 0, 0, 428, 1, 0, 431, 0, 433, 0, 435, 0, 0, 0, 439, 1, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 452, 0, 0, 0, 0, 457, 0, 0, 0, 461, 0, 463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 473, 474, 475, 0, 477, 0, 0, 0, 0, 482, 484, 0, 0, 487, 0, 0, 490, 491, 492, 0, 0, 0, 0, 0, 0, 499, 0, 501, 502, 0, 0, 0, 0, 0, 0, 0, 510, 0, 0, 0, 0, 515, 516, 0, 0, 519, 0, 0, 522, 524, 0, 0, 527, 528, 529, 530, 0, 532, 533, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 548, 0, 0, 0, 0, 553, 0, 555, 0, 0, 0, 0, 560, 561, 0, 564, 0, 566, 0, 568, 0, 570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 580, 0, 0, 0, 0, 0, 586, 0, 0, 589, 0, 0, 592, 593, 594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 608, 0, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 625, 626, 0, 628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 645, 1, 0, 648, 0, 0, 0, 0, 653, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 0, 0, 670, 671, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 695, 0, 697, 0, 0, 700, 0, 702, 0, 0, 0, 0, 0, 708, 0, 710, 711, 0, 0, 0, 0, 716, 0, 718, 0, 0, 0, 722, 0, 0, 0, 727, 728, 729, 0, 731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 745, 0, 747, 0, 0, 750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 0, 0, 764, 0, 2, 0, 0, 0, 0, 0, 772, 0, 0, 0, 776, 777, 0, 0, 0, 1, 0, 0, 784, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 1), .Dim = c(39L, 19L)), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign6_cb86439752d354feeda3bd68427a8c76() {
        assertEval("argv <- list(structure(c(-75, 0, 103, 0, 124, -1, 0, -2.77555756156289e-17, 0, -1.66533453693773e-16, 0, 0, 0, 178, 0), .Dim = c(5L, 3L)), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign7_47b50de393c11c26b384b2e6d037878c() {
        assertEval("argv <- list(structure(c(-0.0124410638457178, NA, 0.00669768951701377, NA, 0.00669754897238661, NA, 3.45036480545864, 2.52673085623929, 1, 2.64771226663238, 0.0632378108418818, 0.404928794321981), .Dim = c(2L, 6L), .Dimnames = list(c('linear', 'nonlin'), NULL)), value = list(c('linear', 'nonlin'), NULL));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign8_e437904b8ed2d74ac08e0e359881eb80() {
        assertEval("argv <- list(structure(c(300, 3000, 400, 4000), .Dim = c(2L, 2L)), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign9_26f351722c791bca85c2f501f0768985() {
        assertEval("argv <- list(structure(c(1259, 1360, 845, 1053, 719, 774, 390, 413), .Dim = c(2L, 4L), .Dimnames = list(c('a', 'b'), NULL)), value = list(c('a', 'b')));`dimnames<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltindir_testdir1_1ac0962c74720bfc328a94da894c1c34() {
        assertEval("argv <- structure(list(path = '.', pattern = 'myTst_.*tar\\.gz$'),     .Names = c('path', 'pattern'));do.call('dir', argv)");
    }

    @Test
    public void TestrGenBuiltindircreate_testdircreate1_330a42e830fe7a29c1ad63a7b51eb8d2() {
        assertEval("argv <- list('/home/lzhao/tmp/RtmptS6o2G/translations', FALSE, FALSE, structure(511L, class = 'octmode')); .Internal(dir.create(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltindirname_testdirname1_b188a0e26d83fc9ecb63d673701490b9() {
        assertEval("argv <- list('/home/roman/r-instrumented/library/graphics'); .Internal(dirname(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindirname_testdirname2_b05651976b5873328367d421007b779b() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/tests/Packages/survival/inst/CITATION'); .Internal(dirname(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindirname_testdirname3_b6d378933dc0d5b022c5c8ee4469cf96() {
        assertEval("argv <- list(character(0)); .Internal(dirname(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindirname_testdirname4_ff3263428c608fd317fde2029f463c35() {
        assertEval("argv <- list(c('ChangeLog', 'DESCRIPTION', 'INDEX', 'MD5', 'NAMESPACE', 'PORTING', 'R/0aaa.R', 'R/agnes.q', 'R/clara.q', 'R/clusGap.R', 'R/coef.R', 'R/daisy.q', 'R/diana.q', 'R/ellipsoidhull.R', 'R/fanny.q', 'R/internal.R', 'R/mona.q', 'R/pam.q', 'R/plothier.q', 'R/plotpart.q', 'R/silhouette.R', 'R/zzz.R', 'README', 'data/agriculture.tab', 'data/animals.tab', 'data/chorSub.rda', 'data/flower.R', 'data/plantTraits.rda', 'data/pluton.tab', 'data/ruspini.tab', 'data/votes.repub.tab', 'data/xclara.rda', 'inst/CITATION', 'inst/po/de/LC_MESSAGES/R-cluster.mo', 'inst/po/en@quot/LC_MESSAGES/R-cluster.mo', 'inst/po/pl/LC_MESSAGES/R-cluster.mo', 'man/agnes.Rd', 'man/agnes.object.Rd', 'man/agriculture.Rd', 'man/animals.Rd', 'man/bannerplot.Rd', 'man/chorSub.Rd', 'man/clara.Rd', 'man/clara.object.Rd', 'man/clusGap.Rd', 'man/clusplot.default.Rd', 'man/clusplot.partition.Rd', 'man/cluster-internal.Rd', 'man/coef.hclust.Rd', 'man/daisy.Rd', 'man/diana.Rd', 'man/dissimilarity.object.Rd', 'man/ellipsoidhull.Rd', 'man/fanny.Rd', 'man/fanny.object.Rd', 'man/flower.Rd', 'man/lower.to.upper.tri.inds.Rd', 'man/mona.Rd', 'man/mona.object.Rd', 'man/pam.Rd', 'man/pam.object.Rd', 'man/partition.object.Rd', 'man/plantTraits.Rd', 'man/plot.agnes.Rd', 'man/plot.diana.Rd', 'man/plot.mona.Rd', 'man/plot.partition.Rd', 'man/pltree.Rd', 'man/pltree.twins.Rd', 'man/pluton.Rd', 'man/predict.ellipsoid.Rd', 'man/print.agnes.Rd', 'man/print.clara.Rd', 'man/print.diana.Rd', 'man/print.dissimilarity.Rd', 'man/print.fanny.Rd', 'man/print.mona.Rd', 'man/print.pam.Rd', 'man/ruspini.Rd', 'man/silhouette.Rd', 'man/sizeDiss.Rd', 'man/summary.agnes.Rd', 'man/summary.clara.Rd', 'man/summary.diana.Rd', 'man/summary.mona.Rd', 'man/summary.pam.Rd', 'man/twins.object.Rd', 'man/volume.ellipsoid.Rd', 'man/votes.repub.Rd', 'man/xclara.Rd', 'po/R-cluster.pot', 'po/R-de.po', 'po/R-en@quot.po', 'po/R-pl.po', 'po/update-me.sh', 'src/clara.c', 'src/cluster.h', 'src/daisy.f', 'src/dysta.f', 'src/fanny.c', 'src/ind_2.h', 'src/init.c', 'src/mona.f', 'src/pam.c', 'src/sildist.c', 'src/spannel.c', 'src/twins.c', 'tests/agnes-ex.R', 'tests/agnes-ex.Rout.save', 'tests/clara-NAs.R', 'tests/clara-NAs.Rout.save', 'tests/clara-ex.R', 'tests/clara.R', 'tests/clara.Rout.save', 'tests/clusplot-out.R', 'tests/clusplot-out.Rout.save', 'tests/daisy-ex.R', 'tests/daisy-ex.Rout.save', 'tests/diana-boots.R', 'tests/diana-ex.R', 'tests/diana-ex.Rout.save', 'tests/ellipsoid-ex.R', 'tests/ellipsoid-ex.Rout.save', 'tests/fanny-ex.R', 'tests/mona.R', 'tests/mona.Rout.save', 'tests/pam.R', 'tests/pam.Rout.save', 'tests/silhouette-default.R', 'tests/silhouette-default.Rout.save', 'tests/sweep-ex.R')); .Internal(dirname(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindirname_testdirname5_ce4b69b7bd7834a6303e4e791aa6c051() {
        assertEval("argv <- list(structure('/home/lzhao/hg/r-instrumented/library/utils', .Names = 'Dir')); .Internal(dirname(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindirname_testdirname7_b9a5d93f885ebf0771fdf41340ba4861() {
        assertEval("argv <- structure(list(path = character(0)), .Names = 'path');do.call('dirname', argv)");
    }

    @Test
    public void TestrGenBuiltindoTrace_testdoTrace1_ddcd3f64b9f15a9d7ab031d4fd632472() {
        assertEval("argv <- list(c(1, 1, 2));.doTrace(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltindoTrace_testdoTrace3_6b8a56a41d2daff624a3b8ffe219753f() {
        assertEval("argv <- structure(list(expr = expression(quote(x <- c(1, x)))),     .Names = 'expr');do.call('.doTrace', argv)");
    }

    @Test
    public void TestrGenBuiltindouble_testdouble1_64bf06594a2711d91ef171c740179440() {
        assertEval("argv <- list();do.call('double', argv)");
    }

    @Test
    public void TestrGenBuiltindput_testdput1_13e57556ea92b275460a4cf536a7c6fa() {
        assertEval("argv <- list(logical(0), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindput_testdput2_49535106681b131c08bed169ad6eee4b() {
        assertEval("argv <- list(structure(1, .Dim = 1L), structure(1L, class = c('terminal', 'connection')), 95); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindput_testdput3_09fa7b5e74174c70851c49ad93ae7635() {
        assertEval("argv <- list(character(0), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindput_testdput4_f7a75e3bfd9049b64077a13f2659cd55() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindput_testdput5_73817a9226702e69b6277c05bec3ae8d() {
        assertEval("argv <- list(NULL, structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindput_testdput6_79110d5bdc310dc7e12d4ca11f48da06() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindput_testdput7_de1647a0d34feff88308694be2816ac6() {
        assertEval("argv <- list(FALSE, structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindput_testdput8_06ac0c8f01e2f86cb8f043b347b3a042() {
        assertEval("argv <- list(c(0.00508571428571428, 0.876285714285715), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop1_435233a57444df0f45863f7b8b1b6ad6() {
        assertEval("argv <- list(structure(c(1.50117937791368, 1.64775918264914, 1.38492642933039, 2.16331573723593, 2.09255307288088, 1.44052566560935, 0.318431987979291, 1.53656071009121, 2.26440525774314, 1.31416376497534, 0.495338648866914, 1.09176681985947, 1.27372795677245, 1.95608222019614, 1.5112883299644, 1.48096147381224, 1.88531955584109, 2.15826126121057, 1.49107042586296, 1.77412108328316, 1.19791081639204, 0.884533302819684, 1.21307424446813, 1.68314051482667, 0.181961135294554, 1.71346737097883, 1.29900033689926, 1.4860159498376, 1.00078625140298, 1.52139728201513, 1.42030776150791, 0.505447600917635, 1.5112883299644, 1.33438166907678, 1.81455689148604, -1.61842961254877e-09, 1.40008985740647, 2.10771650095696, 0.611591597450209, 0.136470851066308, 1.10693024793555, 1.61237785047162, 0.990677299352257, 1.28383690882317, 1.33438166907678, 1.44558014163472, 1.15747500818916, 1.30910928894998, 0.753116926160307, 1.4860159498376, 2.10771650095696, 2.40087611042788, 1.27372795677245, 1.16252948421452, 0.985622823326897, 2.05211726467799, 1.3444906211275, 0.768280354236389, 0.844097494616799, 1.22823767254421, 0.980568347301536, 1.10693024793555, 0.899696730895766, 1.67303156277594, 0.995731775377618, 1.68314051482667, 1.42030776150791, 1.55172413816729, 1.55172413816729, 0.722790070008143, 1.98135460032294, 1.39503538138111, 1.14231158011308, 1.07154891575803, 1.08671234383411, 0.662136357703815, 0.808716162439274, 1.91564641199326, 2.08749859685552, 1.15747500818916, 1.3192182410007, 1.02605863152978, 1.18274738831596, 1.23329214856957, 0.783443782312471, 1.65786813469986, 0.965404919225454, 2.27451420979386, 1.25351005267101, 1.22823767254421, 1.74884870315635, 1.54666966214193, 1.99651802839903, 1.22318319651885, 1.09682129588483, 2.06222621672871, 1.82972031956212, 0.808716162439274, 1.66797708675058, 1.74884870315635), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop10_b2d97f724d1dfde490e0b550e91dc5bf() {
        assertEval("argv <- list(structure(c(-2.12168716972669e-05, 7.51519194600216e-05, -6.21732236176711e-06), .Dim = c(3L, 1L))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop11_dd679b9a609f4fb003b37d3b053c3905() {
        assertEval("argv <- list(structure(c(' 16', ' 16', '144', ' 16', ' 16', '128', ' 16', ' 16', '112', ' 16'), .Dim = 10L, .Dimnames = structure(list(c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22')), .Names = ''))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop13_9338d3f86998c6b6852e73136835f41f() {
        assertEval("argv <- structure(list(x = structure(c(8, 4, 2), .Dim = c(3L,     1L))), .Names = 'x');do.call('drop', argv)");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop2_639fdca1d0b5d22b4845f579ecb2fa9d() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE), .Dim = c(40L, 1L), .Dimnames = list(c('r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15', 'r16', 'r17', 'r18', 'r19', 'r20', 'r21', 'r22', 'r23', 'r24', 'r25', 'r26', 'r27', 'r28', 'r29', 'r30', 'r31', 'r32', 'r33', 'r34', 'r35', 'r36', 'r37', 'r38', 'r39', 'r40'), 'c1'))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop3_48afea2c0db4a591b2689306fa2b2014() {
        assertEval("argv <- list(structure(c(-0.146170181357627, 24.3243243243243, NA, 84.2105263157895, 2.13784643479304), .Dim = c(5L, 1L))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop4_d4365e445536d969a0e444bcc82d14fd() {
        assertEval("argv <- list(structure(1, .Dim = c(1L, 1L))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop5_c1e1cfd2a3a4207e864c703843d7784b() {
        assertEval("argv <- list(structure(1:4, .Dim = c(4L, 1L), .Dimnames = list(c('a', 'b', 'c', 'd'), NULL))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop6_a6b5e8feda8f1ba92b7dc96d419b63c9() {
        assertEval("argv <- list(structure(c(0.0394556761478965, 0.0353930191803619, 0.0421772348795039, 0.0302920451103359, 0.0377457762283076, 0.0338591835815583, 0.0403493901288877, 0.0289792716248635, 0.0342125137383397, 0.0306897327119817, 0.0365724115929804, 0.0262666138482847, 0.0422657427158027, 0.0379137398889158, 0.0451811331581029, 0.032449470138841), .Dim = c(1L, 4L, 4L), .Dimnames = list('1', c('DAX', 'SMI', 'CAC', 'FTSE'), c('DAX', 'SMI', 'CAC', 'FTSE')))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop7_b9790c234e422b9e1e9c75d711fc8586() {
        assertEval("argv <- list(c(10.8924449093617, 19.1956646477802, 5.83862354833301, 8.94491073999977, 10.0151293814506)); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop8_8ba3a8cad6f3b271481cc8936dd99036() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0'))); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop9_1e829615fd7d3b3e88a407a5ee0c79c6() {
        assertEval("argv <- list(structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts')); .Internal(drop(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated1_ebbff31c5b633382ddc43f32a68390ba() {
        assertEval("argv <- list(c('methods', 'base'), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated10_4978231584e6d9c3e467766333acb8d3() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated11_628721fe9585771ab8c5464adbfa0a29() {
        assertEval("argv <- list(c('\\\\title', '\\\\name', '\\\\alias', '\\\\alias', '\\\\keyword', '\\\\keyword', '\\\\description', '\\\\usage', '\\\\arguments', '\\\\details', '\\\\value', '\\\\section', '\\\\section', '\\\\seealso', '\\\\examples'), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated12_f6bc49e7c5d274babebbdfd75ec6701b() {
        assertEval("argv <- list(structure(c(-0.838428742794102, 0.838428742794102, 0.838428742794102, 0.838428742794102, -0.838428742794102, -0.838428742794102), .Dim = c(6L, 1L), .Dimnames = list(c('1', '3', '4', '5', '6', '7'), NULL)), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated13_3f0e75f1a33167fc0f02129bd32c813b() {
        assertEval("argv <- list(c(-1628571, -1628571, -1200000, -1200000, -1057143, -914286, -771429, -771429, -771429, -628571, -628571, -485714, -485714, -485714, -485714, -342857, -342857, -342857, -342857, -2e+05, -2e+05, -2e+05, -2e+05, -57143, -57143, -57143, 85714, 85714, 228571, 228571, 228571, 371429, 371429, 371429, 371429, 514286, 514286, 514286, 657143, 657143, 657143, 657143, 657143, 942857, 1085714, 1228571, 1228571, 1228571, 1228571, 1371429), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated14_455550a693986066ccba4f1532c78dc2() {
        assertEval("argv <- list(c(1, 0.778249191273129, 0.65570344192776, 0.65570344192776, 0.105668080308148, 0.0451091129154675, 0.0451091129154675, 1.49604383156071e-06, 8.3976239365668e-11, 2.13195391672632e-15, 1.4298180954663e-20, 1.47541167362595e-26, 1.09353648287987e-33, 1.6858825926109e-42, 1.6858825926109e-42, 1.6858825926109e-42), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated2_f45b04e1ebbfd66578da13d0f9208ad4() {
        assertEval("argv <- list(list('!', '%%', '%*%', '%/%', '&', '*', '+', '-', '/', 'Arith', 'BunchKaufman', 'Cholesky', 'Compare', 'Logic', 'Math2', 'Math', 'Ops', 'Schur', 'Summary', '[', '[<-', '^', 'all.equal', 'all', 'any', 'as.array', 'as.integer', 'as.logical', 'as.matrix', 'as.numeric', 'as.vector', 'band', 'cbind2', 'chol2inv', 'chol', 'coerce', 'coerce<-', 'colMeans', 'colSums', 'cov2cor', 'crossprod', 'determinant', 'diag', 'diag<-', 'diff', 'dim', 'dim<-', 'dimnames', 'dimnames<-', 'drop', 'expand', 'expm',     'facmul', 'forceSymmetric', 'format', 'head', 'image', 'initialize', 'is.finite', 'is.infinite', 'is.na', 'isDiagonal', 'isSymmetric', 'isTriangular', 'kronecker', 'length', 'lu', 'mean', 'nnzero', 'norm', 'pack', 'print', 'prod', 'qr.Q', 'qr.R', 'qr.coef', 'qr.fitted', 'qr.qty', 'qr.qy', 'qr.resid', 'qr', 'rbind2', 'rcond', 'rep', 'rowMeans', 'rowSums', 'show', 'skewpart', 'solve', 'sum', 'summary', 'symmpart', 't', 'tail', 'tcrossprod', 'toeplitz', 'tril', 'triu', 'unname', 'unpack', 'update',     'updown', 'which', 'writeMM', 'zapsmall', 'Ops', '[', 'Math'), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated3_220c131e8e0d0ca88a0473048f8fa866() {
        assertEval("argv <- list(c(3L, 8L, 18L), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated4_f613a3f31b44df89aed8b7b372f2dd1f() {
        assertEval("argv <- list(c(0, 0.700492869640978, NA), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated5_fbcc5b30556eb2be228dc3340d32a072() {
        assertEval("argv <- list(1L, FALSE, TRUE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated6_fb0cbc2fd8d70e762e57c4b8115526b7() {
        assertEval("argv <- list(character(0), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated7_cf71ecdaebaaf336de9c408760d9b969() {
        assertEval("argv <- list(list('plot', 'Ops', '[', 'Math'), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinduplicated_testduplicated8_b2e3eb12bea436f4da7ee9ea9d66aa29() {
        assertEval("argv <- list(structure('lattice', .Names = ''), FALSE, FALSE, NA); .Internal(duplicated(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinenc2native_testenc2native1_a6da7a9fef635308ebd71b543b33fbf5() {
        assertEval("argv <- list(character(0));enc2native(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinenc2native_testenc2native3_4f2b48aeefda7af6afa824204677a599() {
        assertEval("argv <- list(structure(character(0), .Names = character(0)));enc2native(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinenc2native_testenc2native4_e57d82a06016614422ffb0154b4bbd51() {
        assertEval("argv <- list('José Pinheiro [aut] (S version)');enc2native(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf81_eab3b90f52ba25877d127108892fb87f() {
        assertEval("argv <- list('Add Text to a Plot');enc2utf8(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf82_cf0b7dd72652f6d19f39f30bff83d0ec() {
        assertEval("argv <- list('Modes');enc2utf8(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf83_910f21599e1a260c1ed408534d623827() {
        assertEval("argv <- list(c('', '(De)compress I/O Through Connections'));enc2utf8(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf84_0675cbb9c58edf63fe728dd3932430f7() {
        assertEval("argv <- list(character(0));enc2utf8(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf86_ab404304f65f3deabd8f2ca91e8168c5() {
        assertEval("argv <- list(NA_character_);do.call('enc2utf8', argv)");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString1_165276435e63a6cea841c7a230553669() {
        assertEval("argv <- list(c('1', '2', NA), 0L, '\\'', 0L, FALSE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString10_f20b8b448850faf4a0e67af782ad3288() {
        assertEval("argv <- list('\\'class\\' is a reserved slot name and cannot be redefined', 0L, '\\'', 0L, FALSE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString11_a186848248673e940f898376211d6f40() {
        assertEval("argv <- list(structure(character(0), .Dim = c(0L, 0L)), 0L, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString12_eb815ee5980af6899684228ad9431e6e() {
        assertEval("argv <- list(character(0), logical(0), '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString13_a9d38a032220f760686d7c3cb8761b7c() {
        assertEval("argv <- list(structure('integer(0)', .Names = 'c0', row.names = character(0)), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString3_9624c56f6e6d4dd46aa2b2de59c39af9() {
        assertEval("argv <- list(c('a', 'ab', 'abcde'), NA, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString4_67c14cb555c78b46df7bb1b92577933b() {
        assertEval("argv <- list(c('a', 'ab', 'abcde'), NA, '', 1L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString6_f03c0de881c17e3ebc0c8c95eb2e9ef2() {
        assertEval("argv <- list(c('NA', 'a', 'b', 'c', 'd', NA), 0L, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString7_41925f2c48f3be3975a935c14068f397() {
        assertEval("argv <- list('ab\\bc\\ndef', 0L, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString8_4e3c870248142ce48a8f7df557408d15() {
        assertEval("argv <- list(c('FALSE', NA), 0L, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString9_402192e57b16c2e06288758280cb1ec9() {
        assertEval("argv <- list(structure('integer(0)', .Names = 'c0', row.names = character(0)), 0L, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinenvironment_testenvironment1_b876a8115264bd157cd5359f11e3ab8b() {
        assertEval("argv <- list(quote(cbind(X, M) ~ M.user + Temp + M.user:Temp + Soft)); .Internal(environment(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinenvironment_testenvironment2_166e181a90361c68e69e4c67b89423b1() {
        assertEval("argv <- list(FALSE); .Internal(environment(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinenvironment_testenvironment3_ba12eb7692db76bfb5f96ba74bc20d4c() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(environment(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinenvironment_testenvironment4_274795dc375cc18448d42b62af76d266() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0'))); .Internal(environment(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinenvironmentName_testenvironmentName1_f71ee3e9fc58793f3350e648b315a7d0() {
        assertEval("argv <- list(FALSE); .Internal(environmentName(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinenvironmentName_testenvironmentName2_10b35a4db0372364b078b61e81e2f330() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0'))); .Internal(environmentName(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinenvironmentName_testenvironmentName3_efde5de9e7f1716ed84af42dbe2f7efa() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(environmentName(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinenvironmentassign_testenvironmentassign1_e7d1897ac0f6b1cd0f4b3d8d7187eec3() {
        assertEval("argv <- list(NULL, NULL);`environment<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinexists_testexists1_f048c8e191a9ca92fa7722dee8ade8e2() {
        assertEval("argv <- structure(list(x = '.Device'), .Names = 'x');do.call('exists', argv)");
    }

    @Test
    public void TestrGenBuiltinexp_testexp1_8815fef99ba42aa35942a1b0cffd8c22() {
        assertEval("argv <- list(-3.99290891786396);exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp10_37d07ab33adb8aa318383f2302accf5f() {
        assertEval("argv <- list(c(47.5645940356179, -6.38155741912049, -4.72835558025993, -9.12276173822938, 16.7269898773273, 1.72738845624351, 2.57214256243276, -6.38155741912049, 54.3235157345705, -1.01577550708815, 1.03229146110395, -7.85550713095368, -0.907238963715769, -0.92327375484205, -4.72835558025993, -1.01577550708815, 46.5450612116912, 4.59443066488959, -2.69397762349353, -13.3238428844397, -4.89920529326131, -9.12276173822938, 1.03229146110395, 4.59443066488959, 47.7416929123262, -3.84567249122941, -9.99434616922533, -0.0518296900644576, 16.7269898773273, -7.85550713095368, -2.69397762349353, -3.84567249122941, 49.4381847193856, 8.76151535039852, 0.371991514317358, 1.72738845624351, -0.907238963715769, -13.3238428844397, -9.99434616922533, 8.76151535039852, 50.1823716395239, -1.41801229530673, 2.57214256243276, -0.92327375484205, -4.89920529326131, -0.0518296900644576, 0.371991514317358, -1.41801229530673, 44.6019728197531));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp11_8bfb5fb384aa724444aeb2b3f699aa64() {
        assertEval("argv <- list(c(-745, -744, -743, -742, -741, -740, -730, -720, -710, -709, -708, -707, -706, -705));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp2_41a840cb78df971739449cb9646270c1() {
        assertEval("argv <- list(structure(3.3059560902335, .Names = 'lymax'));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp3_526113e4ff81742afe10d844db202818() {
        assertEval("argv <- list(structure(c(-0.00324566582797463, -0.0174366299092001, -0.0697465196367962, -0.00678668749718479, -0.0364599944879883, -0.145839977951944, -0.014190964081224, -0.0762378512927396, -0.304951405170939, -0.0296733069908004, -0.159413352946301, -0.637653411785165, -0.0620468872115091, -0.333333333333361, -1.33333333333336, -0.129740045955487, -0.697000025766712, -2.78800010306667, -0.271286446121824, -1.45742710775627, -5.8297084310247, -0.567259979811165, -3.04748019497741, -12.1899207799089, -1.18614066163432, -6.37228132326786, -25.4891252930698), .Dim = c(3L, 9L), .Dimnames = list(c('x', 'x', ''), NULL)));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp4_01c9e67c1ef9e8c84e1badf8a42dd514() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 0.312525079410893, 0.312525079410893, 0.519628781161469, 0.519628781161469, 0.519628781161469, 0.519628781161469, 0.519628781161469, 0.519628781161469, 0.656871985321733, 0.656871985321733, 0.656871985321733, 0.747820128348458, 0.747820128348458, 0.747820128348458, 0.747820128348458, 0.808089522163767, 0.808089522163767, 0.808089522163767, 0.808089522163767, 0.808089522163767, 0.808089522163767, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.848028763471832, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.874495646499593, 0.892034685155886, 0.892034685155886, 0.892034685155886, 0.892034685155886, 0.892034685155886, 0.911359578074335, 0.916463626041527));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp5_8f48399be0133d423dce07c8c94b08f2() {
        assertEval("argv <- list(c(0+0.392699081698724i, 0+0.785398163397448i, 0+1.17809724509617i, 0+1.5707963267949i, 0+1.96349540849362i, 0+2.35619449019234i, 0+2.74889357189107i, 0+3.14159265358979i, 0+3.53429173528852i, 0+3.92699081698724i, 0+4.31968989868597i, 0+4.71238898038469i, 0+5.10508806208341i, 0+5.49778714378214i, 0+5.89048622548086i, 0+6.28318530717959i));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp6_dd0f0e60e688b17f8f079377818c4449() {
        assertEval("argv <- list(c(-0.1, -3.16227766016838, -100));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp8_47ea460679ebf012ce9bd2a35e00dc81() {
        assertEval("argv <- list(logical(0));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexp_testexp9_ad858b8f053cccbae0b12905af7b0962() {
        assertEval("argv <- list(c(4.92585186838819, 4.80249477012754, 4.18570927882429, 4.06235218056364, 3.81563798404234, 3.32220959099974, 3.19885249273909, 2.95213829621779, 2.45870990317518, 2.33535280491453, 2.08863860839323, 1.59521021535063, 1.47185311708998, 1.34849601882933, 0.608353429265429, 0.361639232744128, -0.131789160298473, -0.255146258559123, -1.11864594638368, -1.24200304464433, -1.85878853594758, -1.98214563420823, -2.84564532203278, -3.09235951855408, -3.70914500985733));exp(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexpm1_testexpm11_eec24e73f02be80ff61911e98a7373b3() {
        assertEval("argv <- list(-0.518798300715899);expm1(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexpm1_testexpm12_2ba9235989f7f326def41dca4adc1ff8() {
        assertEval("argv <- list(-1.5314339531682e-113);expm1(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexpm1_testexpm13_441a22fbf6b1ac9945d36bc193eca8e1() {
        assertEval("argv <- list(structure(c(-0.0996985539253204, -0.208486018303182, -0.412624920187971, -0.781459230080118, -1.41933833538431, -2.49413413365086, -4.24041092023363, -7.0213317713299), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')));expm1(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexpm1_testexpm14_037d8ddcf55f9ef5e60e1cb0e06f13c5() {
        assertEval("argv <- list(logical(0));expm1(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinexpm1_testexpm15_c34e4628d1d9ea43404c7d952da1b6e2() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));expm1(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinextract_dollar_assign_dataframe_testextract_dollar_assign_dataframe1_0fd543517e542dd7c19e0b3ad8c2d103() {
        assertEval("argv <- structure(list(x = structure(list(hours = c(216.27793530786,     14.3454081012111, 16.2639155548331, 77.062914516272, 42.3463070611469,     8.07456175870417, 42.818290162948, 84.9982217741369, 6.97921341420927,     143.155918813582, 16.0908251257365, 214.204015006233)), .Names = 'hours',     row.names = c('1', '2', '3', '4', '5', '6', '7', '8', '9',         '10', '11', '12'), class = 'data.frame'), name = 'hours',     value = c(216.27793530786, 14.3454081012111, 16.2639155548331,         77.062914516272, 42.3463070611469, 8.07456175870417,         42.818290162948, 84.9982217741369, 6.97921341420927,         143.155918813582, 16.0908251257365, 214.204015006233)),     .Names = c('x', 'name', 'value'));do.call('$<-.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_dollar_assign_dataframe_testextract_dollar_assign_dataframe2_38574d9996d636120d0be02718b49368() {
        assertEval("argv <- structure(list(x = structure(list(distance = c(26, 25,     29, 31, 21.5, 22.5, 23, 26.5, 23, 22.5, 24, 27.5, 25.5, 27.5,     26.5, 27, 20, 23.5, 22.5, 26, 24.5, 25.5, 27, 28.5, 22, 22,     24.5, 26.5, 24, 21.5, 24.5, 25.5, 23, 20.5, 31, 26, 27.5,     28, 31, 31.5, 23, 23, 23.5, 25, 21.5, 23.5, 24, 28, 17, 24.5,     26, 29.5, 22.5, 25.5, 25.5, 26, 23, 24.5, 26, 30, 22, 21.5,     23.5, 25, 21, 20, 21.5, 23, 21, 21.5, 24, 25.5, 20.5, 24,     24.5, 26, 23.5, 24.5, 25, 26.5, 21.5, 23, 22.5, 23.5, 20,     21, 21, 22.5, 21.5, 22.5, 23, 25, 23, 23, 23.5, 24, 20, 21,     22, 21.5, 16.5, 19, 19, 19.5, 24.5, 25, 28, 28), age = c(8,     10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14), Subject = structure(c(15L,     15L, 15L, 15L, 3L, 3L, 3L, 3L, 7L, 7L, 7L, 7L, 14L, 14L,     14L, 14L, 2L, 2L, 2L, 2L, 13L, 13L, 13L, 13L, 5L, 5L, 5L,     5L, 6L, 6L, 6L, 6L, 11L, 11L, 11L, 11L, 16L, 16L, 16L, 16L,     4L, 4L, 4L, 4L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L,     10L, 10L, 12L, 12L, 12L, 12L, 1L, 1L, 1L, 1L, 20L, 20L, 20L,     20L, 23L, 23L, 23L, 23L, 25L, 25L, 25L, 25L, 26L, 26L, 26L,     26L, 21L, 21L, 21L, 21L, 19L, 19L, 19L, 19L, 22L, 22L, 22L,     22L, 24L, 24L, 24L, 24L, 18L, 18L, 18L, 18L, 17L, 17L, 17L,     17L, 27L, 27L, 27L, 27L), .Label = c('M16', 'M05', 'M02',     'M11', 'M07', 'M08', 'M03', 'M12', 'M13', 'M14', 'M09', 'M15',     'M06', 'M04', 'M01', 'M10', 'F10', 'F09', 'F06', 'F01', 'F05',     'F07', 'F02', 'F08', 'F03', 'F04', 'F11'), class = c('ordered',     'factor')), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male',     'Female'), class = 'factor'), newAge = c(-3, -1, 1, 3, -3,     -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,     1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1,     3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3,     -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3,     -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,     1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1,     3)), .Names = c('distance', 'age', 'Subject', 'Sex', 'newAge'),     row.names = c('1', '2', '3', '4', '5', '6', '7', '8', '9',         '10', '11', '12', '13', '14', '15', '16', '17', '18',         '19', '20', '21', '22', '23', '24', '25', '26', '27',         '28', '29', '30', '31', '32', '33', '34', '35', '36',         '37', '38', '39', '40', '41', '42', '43', '44', '45',         '46', '47', '48', '49', '50', '51', '52', '53', '54',         '55', '56', '57', '58', '59', '60', '61', '62', '63',         '64', '65', '66', '67', '68', '69', '70', '71', '72',         '73', '74', '75', '76', '77', '78', '79', '80', '81',         '82', '83', '84', '85', '86', '87', '88', '89', '90',         '91', '92', '93', '94', '95', '96', '97', '98', '99',         '100', '101', '102', '103', '104', '105', '106', '107',         '108'), outer = ~Sex, formula = distance ~ age | Subject,     labels = structure(list(x = 'Age', y = 'Distance from pituitary to pterygomaxillary fissure'),         .Names = c('x', 'y')), units = structure(list(x = '(yr)',         y = '(mm)'), .Names = c('x', 'y')), FUN = function(x) max(x,         na.rm = TRUE), order.groups = TRUE, class = c('nfnGroupedData',         'nfGroupedData', 'groupedData', 'data.frame')), name = 'newAge',     value = c(-3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3)), .Names = c('x',     'name', 'value'));do.call('$<-.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_dollar_dataframe_testextract_dollar_dataframe1_6ca2c6109777747a59181ad8bdb3293c() {
        assertEval("argv <- structure(list(x = structure(list(distance = c(26, 25,     29, 31, 21.5, 22.5, 23, 26.5, 23, 22.5, 24, 27.5, 25.5, 27.5,     26.5, 27, 20, 23.5, 22.5, 26, 24.5, 25.5, 27, 28.5, 22, 22,     24.5, 26.5, 24, 21.5, 24.5, 25.5, 23, 20.5, 31, 26, 27.5,     28, 31, 31.5, 23, 23, 23.5, 25, 21.5, 23.5, 24, 28, 17, 24.5,     26, 29.5, 22.5, 25.5, 25.5, 26, 23, 24.5, 26, 30, 22, 21.5,     23.5, 25, 21, 20, 21.5, 23, 21, 21.5, 24, 25.5, 20.5, 24,     24.5, 26, 23.5, 24.5, 25, 26.5, 21.5, 23, 22.5, 23.5, 20,     21, 21, 22.5, 21.5, 22.5, 23, 25, 23, 23, 23.5, 24, 20, 21,     22, 21.5, 16.5, 19, 19, 19.5, 24.5, 25, 28, 28), age = c(8,     10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14), Subject = structure(c(15L,     15L, 15L, 15L, 3L, 3L, 3L, 3L, 7L, 7L, 7L, 7L, 14L, 14L,     14L, 14L, 2L, 2L, 2L, 2L, 13L, 13L, 13L, 13L, 5L, 5L, 5L,     5L, 6L, 6L, 6L, 6L, 11L, 11L, 11L, 11L, 16L, 16L, 16L, 16L,     4L, 4L, 4L, 4L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L,     10L, 10L, 12L, 12L, 12L, 12L, 1L, 1L, 1L, 1L, 20L, 20L, 20L,     20L, 23L, 23L, 23L, 23L, 25L, 25L, 25L, 25L, 26L, 26L, 26L,     26L, 21L, 21L, 21L, 21L, 19L, 19L, 19L, 19L, 22L, 22L, 22L,     22L, 24L, 24L, 24L, 24L, 18L, 18L, 18L, 18L, 17L, 17L, 17L,     17L, 27L, 27L, 27L, 27L), .Label = c('M16', 'M05', 'M02',     'M11', 'M07', 'M08', 'M03', 'M12', 'M13', 'M14', 'M09', 'M15',     'M06', 'M04', 'M01', 'M10', 'F10', 'F09', 'F06', 'F01', 'F05',     'F07', 'F02', 'F08', 'F03', 'F04', 'F11'), class = c('ordered',     'factor')), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male',     'Female'), class = 'factor')), .Names = c('distance', 'age',     'Subject', 'Sex'), row.names = c('1', '2', '3', '4', '5',     '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16',     '17', '18', '19', '20', '21', '22', '23', '24', '25', '26',     '27', '28', '29', '30', '31', '32', '33', '34', '35', '36',     '37', '38', '39', '40', '41', '42', '43', '44', '45', '46',     '47', '48', '49', '50', '51', '52', '53', '54', '55', '56',     '57', '58', '59', '60', '61', '62', '63', '64', '65', '66',     '67', '68', '69', '70', '71', '72', '73', '74', '75', '76',     '77', '78', '79', '80', '81', '82', '83', '84', '85', '86',     '87', '88', '89', '90', '91', '92', '93', '94', '95', '96',     '97', '98', '99', '100', '101', '102', '103', '104', '105',     '106', '107', '108'), outer = ~Sex, class = c('nfnGroupedData',     'nfGroupedData', 'groupedData', 'data.frame'), formula = distance ~     age | Subject, labels = structure(list(x = 'Age', y = 'Distance from pituitary to pterygomaxillary fissure'),     .Names = c('x', 'y')), units = structure(list(x = '(yr)',     y = '(mm)'), .Names = c('x', 'y')), FUN = function(x) max(x,     na.rm = TRUE), order.groups = TRUE), name = 'age'), .Names = c('x',     'name'));do.call('$.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_Date_testextract_parentasis_Date1_677d86047a9393cde9cd22b1445e80b5() {
        assertEval("argv <- structure(list(x = structure(c(14579, 14580), class = 'Date'),     2), .Names = c('x', ''));do.call('[.Date', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_assign_factor_testextract_parentasis_assign_factor1_6ab7f28cbfdde795b5454d7c3e767116() {
        assertEval("argv <- structure(list(x = structure(c(4L, 1L, 4L, 4L, 6L, 4L,     5L, 5L, 4L, 6L, 6L, 2L, 3L, 6L, 4L, 2L, 1L, 6L, 1L, 3L, 3L,     5L, 2L, 2L, 2L, 5L, 3L, 3L, 1L, 2L, 5L, 6L, 6L, 6L, 6L, 2L,     6L, 1L, 5L, 1L, 2L, 4L, 4L, 6L, 5L, 5L, 2L, 6L, 4L, 6L, 5L,     1L, 2L, 5L, 1L, 1L, 4L, 3L, 3L, 4L, 4L, 2L, 5L, 3L, 4L, 5L,     4L, 6L, 4L, 5L, 2L, 6L, 2L, 4L, 2L, 2L, 4L, 4L, 1L, 6L, 2L,     1L, 5L, 3L, 5L, 1L, 2L, 2L, 4L, 2L, 4L, 2L, 5L, 6L, 5L, 6L,     3L, 1L, 2L, 4L, 6L, 6L, 3L, 3L, 2L, 6L, 2L, 5L, 3L, 4L, 3L,     4L, 6L, 3L, 4L, 2L, 3L, 1L, 6L, 2L, 4L, 4L, 1L, 3L, 4L, 3L,     4L, 1L, 4L, 1L, 3L, 5L, 5L, 5L, 4L, 4L, 6L, 2L, 6L, 3L, 2L,     1L, 1L, 6L, 2L, 2L, 5L, 1L, 5L, 3L, 2L, 2L, 5L, 1L, 6L, 3L,     6L, 4L, 2L, 2L, 5L, 6L, 6L, 1L, 1L, 6L, 6L, 5L, 2L, 5L, 6L,     5L, 4L, 6L, 2L, 5L, 4L, 3L, 5L, 1L, 3L, 4L, 4L, 3L, 1L, 1L,     5L, 4L, 1L, 3L, 5L, 4L, 5L, 4L, 6L, 6L, 2L, 4L, 3L, 3L),     .Label = c('a', 'b', 'c', 'd', 'e', 'f'), class = 'factor'),     c(189L, 84L, 154L, 9L, 130L, 44L, 137L, 12L, 50L, 1L, 42L,         174L, 194L, 131L, 157L, 101L, 37L, 128L, 117L, 181L,         51L, 109L, 110L, 67L, 69L, 124L, 192L, 65L, 171L, 168L),     value = NA), .Names = c('x', '', 'value'));do.call('[<-.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_dataframe_testextract_parentasis_dataframe1_b62183b96921d7174a56f16f6dc89057() {
        assertEval("argv <- structure(list(x = structure(list(ID = c(13, 41, 121,     202, 247, 292, 415, 492), Location = c(0.15998329123474,     0.533277637449134, 1.5998329123474, 2.6797201281819, 3.27965747031217,     3.87959481244245, 5.51942354759854, 6.54598299968812), Peak_Value = c(0.997547264684804,     0.949162789397664, 0.990440013891923, 0.973478735915337,     0.93861267739627, 0.957347289323235, 0.924803043529451, 0.968307855031101)),     .Names = c('ID', 'Location', 'Peak_Value'), row.names = c(NA,         -8L), class = 'data.frame'), i = 2), .Names = c('x',     'i'));do.call('[.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_dataframe_testextract_parentasis_dataframe2_5a2ab0c147f4f04db1c0405c273b36bf() {
        assertEval("argv <- structure(list(x = structure(list(Satellites = c(8L,     0L, 9L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 11L, 0L, 14L,     8L, 1L, 1L, 0L, 5L, 4L, 3L, 1L, 2L, 3L, 0L, 3L, 5L, 0L, 0L,     4L, 0L, 0L, 8L, 5L, 0L, 0L, 6L, 0L, 6L, 3L, 5L, 6L, 5L, 9L,     4L, 6L, 4L, 3L, 3L, 5L, 5L, 6L, 4L, 5L, 15L, 3L, 3L, 0L,     0L, 0L, 5L, 3L, 5L, 1L, 8L, 10L, 0L, 0L, 3L, 7L, 1L, 0L,     6L, 0L, 0L, 3L, 4L, 0L, 5L, 0L, 0L, 0L, 4L, 0L, 3L, 0L, 0L,     0L, 0L, 5L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,     4L, 1L, 1L, 1L, 1L, 2L, 4L, 3L, 6L, 0L, 2L, 2L, 0L, 12L,     0L, 5L, 6L, 6L, 2L, 0L, 2L, 3L, 0L, 3L, 4L, 2L, 6L, 6L, 0L,     4L, 10L, 7L, 0L, 5L, 5L, 6L, 6L, 7L, 3L, 3L, 0L, 0L, 8L,     4L, 4L, 10L, 9L, 4L, 0L, 0L, 0L, 0L, 4L, 0L, 2L, 0L, 4L,     4L, 3L, 8L, 0L, 7L, 0L, 0L, 2L, 3L, 4L, 0L, 0L, 0L), Width = c(28.3,     22.5, 26, 24.8, 26, 23.8, 26.5, 24.7, 23.7, 25.6, 24.3, 25.8,     28.2, 21, 26, 27.1, 25.2, 29, 24.7, 27.4, 23.2, 25, 22.5,     26.7, 25.8, 26.2, 28.7, 26.8, 27.5, 24.9, 29.3, 25.8, 25.7,     25.7, 26.7, 23.7, 26.8, 27.5, 23.4, 27.9, 27.5, 26.1, 27.7,     30, 28.5, 28.9, 28.2, 25, 28.5, 30.3, 24.7, 27.7, 27.4, 22.9,     25.7, 28.3, 27.2, 26.2, 27.8, 25.5, 27.1, 24.5, 27, 26, 28,     30, 29, 26.2, 26.5, 26.2, 25.6, 23, 23, 25.4, 24.2, 22.9,     26, 25.4, 25.7, 25.1, 24.5, 27.5, 23.1, 25.9, 25.8, 27, 28.5,     25.5, 23.5, 24, 29.7, 26.8, 26.7, 28.7, 23.1, 29, 25.5, 26.5,     24.5, 28.5, 28.2, 24.5, 27.5, 24.7, 25.2, 27.3, 26.3, 29,     25.3, 26.5, 27.8, 27, 25.7, 25, 31.9, 23.7, 29.3, 22, 25,     27, 23.8, 30.2, 26.2, 24.2, 27.4, 25.4, 28.4, 22.5, 26.2,     24.9, 24.5, 25.1, 28, 25.8, 27.9, 24.9, 28.4, 27.2, 25, 27.5,     33.5, 30.5, 29, 24.3, 25.8, 25, 31.7, 29.5, 24, 30, 27.6,     26.2, 23.1, 22.9, 24.5, 24.7, 28.3, 23.9, 23.8, 29.8, 26.5,     26, 28.2, 25.7, 26.5, 25.8, 24.1, 26.2, 26.1, 29, 28, 27,     24.5), Dark = structure(c(1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L,     1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L,     2L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L,     2L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L,     2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 2L,     2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,     1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 2L,     1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L,     1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L,     2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 1L),     .Label = c('no', 'yes'), class = 'factor'), GoodSpine = structure(c(1L,     1L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,     1L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L,     1L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 1L,     1L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L,     1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,     2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L,     2L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L,     2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L,     1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 1L, 2L), .Label = c('no', 'yes'), class = 'factor'),     Rep1 = c(2, 4, 5, 6, 6, 8, 9, 9, 10, 10, 11, 11, 13, 15,         15, 15, 15, 15, 17, 18, 19, 19, 19, 20, 20, 21, 21, 22,         23, 25, 25, 26, 27, 27, 28, 29, 29, 31, 33, 33, 36, 39,         40, 40, 41, 42, 43, 44, 45, 45, 49, 50, 51, 53, 55, 55,         56, 56, 56, 58, 59, 59, 60, 60, 62, 63, 64, 64, 64, 65,         66, 66, 67, 68, 70, 70, 71, 74, 75, 76, 76, 77, 79, 79,         79, 80, 80, 81, 82, 83, 83, 84, 87, 88, 88, 91, 92, 95,         97, 97, 97, 98, 98, 99, 100, 100, 101, 101, 103, 103,         103, 106, 107, 107, 111, 112, 112, 113, 113, 116, 116,         117, 117, 120, 122, 122, 122, 124, 125, 126, 127, 128,         128, 129, 130, 131, 133, 134, 134, 135, 141, 144, 146,         147, 147, 153, 153, 154, 154, 155, 155, 155, 156, 157,         157, 161, 163, 163, 164, 164, 164, 165, 167, 168, 168,         169, 170, 170, 170, 171, 171, 173, 173), Rep2 = c(2,         5, 6, 6, 8, 8, 9, 11, 12, 13, 13, 15, 15, 15, 16, 17,         17, 18, 19, 20, 23, 24, 24, 24, 25, 25, 26, 26, 27, 28,         29, 30, 30, 32, 33, 34, 38, 39, 39, 41, 42, 47, 48, 49,         49, 51, 54, 55, 55, 56, 57, 59, 59, 62, 63, 65, 67, 68,         69, 69, 70, 73, 75, 76, 76, 77, 78, 79, 81, 82, 83, 84,         85, 85, 85, 86, 87, 88, 89, 91, 92, 92, 92, 92, 96, 98,         98, 99, 100, 101, 101, 102, 103, 104, 104, 104, 105,         107, 107, 107, 108, 109, 109, 110, 111, 111, 111, 112,         112, 112, 113, 113, 115, 116, 117, 120, 122, 123, 123,         124, 124, 125, 125, 126, 128, 130, 131, 131, 131, 131,         132, 133, 133, 134, 134, 136, 137, 138, 139, 139, 141,         143, 144, 144, 145, 145, 150, 150, 150, 152, 152, 153,         154, 155, 155, 156, 157, 157, 158, 159, 160, 161, 163,         163, 166, 167, 169, 170, 172, 173, 173, 173, 173)), .Names = c('Satellites',     'Width', 'Dark', 'GoodSpine', 'Rep1', 'Rep2'), row.names = c(NA,     -173L), class = 'data.frame'), i = c(2, 4, 5, 6, 6, 8, 9,     9, 10, 10, 11, 11, 13, 15, 15, 15, 15, 15, 17, 18, 19, 19,     19, 20, 20, 21, 21, 22, 23, 25, 25, 26, 27, 27, 28, 29, 29,     31, 33, 33, 36, 39, 40, 40, 41, 42, 43, 44, 45, 45, 49, 50,     51, 53, 55, 55, 56, 56, 56, 58, 59, 59, 60, 60, 62, 63, 64,     64, 64, 65, 66, 66, 67, 68, 70, 70, 71, 74, 75, 76, 76, 77,     79, 79, 79, 80, 80, 81, 82, 83, 83, 84, 87, 88, 88, 91, 92,     95, 97, 97, 97, 98, 98, 99, 100, 100, 101, 101, 103, 103,     103, 106, 107, 107, 111, 112, 112, 113, 113, 116, 116, 117,     117, 120, 122, 122, 122, 124, 125, 126, 127, 128, 128, 129,     130, 131, 133, 134, 134, 135, 141, 144, 146, 147, 147, 153,     153, 154, 154, 155, 155, 155, 156, 157, 157, 161, 163, 163,     164, 164, 164, 165, 167, 168, 168, 169, 170, 170, 170, 171,     171, 173, 173), j = c(-5L, -6L)), .Names = c('x', 'i', 'j'));do.call('[.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_extract_parentasis_assign_factor_testextract_parentasis_extract_parentasis_assign_factor1_5605f01dadc0e5f8b00b150f5ce0d8fd() {
        assertEval("argv <- structure(list(x = structure(c(2L, 2L, 3L), .Label = c('One',     'Two', 'Three'), class = 'factor'), 2, value = 'One'), .Names = c('x',     '', 'value'));do.call('[[<-.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_extract_parentasis_factor_testextract_parentasis_extract_parentasis_factor1_5fced93c42220fd5b3326690c2f82d6b() {
        assertEval("argv <- structure(list(x = structure(2:4, .Label = c('A', 'B',     'C', 'D', 'E'), class = 'factor'), 2), .Names = c('x', ''));do.call('[[.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_factor_testextract_parentasis_factor1_3ede514eacaf473da1f649221ef7a410() {
        assertEval("argv <- structure(list(x = structure(c(111L, 88L, 93L, 74L, 138L,     103L, 46L, 114L, 112L, 24L, 99L, 97L, 57L, 40L, 86L, 37L,     124L, 9L, 20L, 54L, 145L, 3L, 7L, 134L, 98L, 143L, 131L,     47L, 128L, 116L, 137L, 5L, 132L, 21L, 81L, 58L, 108L, 17L,     107L, 126L, 2L, 18L, 75L, 4L, 63L, 121L, 84L, 101L, 123L,     102L, 36L, 48L, 12L, 105L, 100L, 90L, 34L, 55L, 68L, 10L,     52L, 91L, 146L, 127L, 1L, 29L, 106L, 26L, 115L, 118L, 25L,     82L, 16L, 45L, 95L, 69L, 72L, 15L, 120L, 104L, 125L, 6L,     140L, 65L, 62L, 39L, 35L, 38L, 83L, 117L, 42L, 13L, 87L,     22L, 53L, 41L, 113L, 73L, 133L, 23L, 80L, 8L, 19L, 78L, 60L,     31L, 33L, 147L, 139L, 56L, 130L, 64L, 71L, 43L, 136L, 89L,     94L, 96L, 70L, 59L, 129L, 27L, 92L, 51L, 77L, 50L, 66L, 119L,     135L, 110L, 144L, 109L, 67L, 44L, 32L, 141L, 76L, 79L, 49L,     142L, 30L, 14L, 85L, 28L, 11L, 61L, 122L), .Label = c('1415787_at',     '1415904_at', '1415993_at', '1416164_at', '1416181_at', '1416221_at',     '1416481_s_at', '1416812_at', '1416855_at', '1416949_s_at',     '1417129_a_at', '1417425_at', '1417447_at', '1417466_at',     '1417572_at', '1417624_at', '1417667_a_at', '1417964_at',     '1418084_at', '1418382_at', '1418424_at', '1418471_at', '1418479_at',     '1418486_at', '1418516_at', '1418560_at', '1418649_at', '1418835_at',     '1419361_at', '1419430_at', '1419686_at', '1419833_s_at',     '1420011_s_at', '1420643_at', '1420886_a_at', '1421045_at',     '1421180_at', '1421773_at', '1422018_at', '1422557_s_at',     '1422671_s_at', '1422809_at', '1422850_at', '1422979_at',     '1423095_s_at', '1423110_at', '1423123_at', '1423124_x_at',     '1423176_at', '1423319_at', '1423852_at', '1423924_s_at',     '1424107_at', '1424186_at', '1424212_at', '1424243_at', '1424474_a_at',     '1424749_at', '1425494_s_at', '1425534_at', '1425779_a_at',     '1426083_a_at', '1426295_at', '1426371_at', '1426485_at',     '1426510_at', '1426628_at', '1426845_at', '1427120_at', '1427208_at',     '1427256_at', '1427314_at', '1427672_a_at', '1428922_at',     '1428942_at', '1429177_x_at', '1429514_at', '1429859_a_at',     '1431830_at', '1433512_at', '1434326_x_at', '1434485_a_at',     '1434831_a_at', '1434920_a_at', '1435129_at', '1435327_at',     '1435357_at', '1436392_s_at', '1436528_at', '1436886_x_at',     '1437163_x_at', '1437223_s_at', '1437434_a_at', '1437455_a_at',     '1438312_s_at', '1438651_a_at', '1439148_a_at', '1439373_x_at',     '1439381_x_at', '1439962_at', '1448131_at', '1448143_at',     '1448147_at', '1448259_at', '1448269_a_at', '1448466_at',     '1448601_s_at', '1448630_a_at', '1448823_at', '1448943_at',     '1448995_at', '1449059_a_at', '1449376_at', '1449623_at',     '1449630_s_at', '1449697_s_at', '1449699_s_at', '1449755_at',     '1449773_s_at', '1449885_at', '1450070_s_at', '1450723_at',     '1450846_at', '1450857_a_at', '1450941_at', '1451103_at',     '1451266_at', '1451317_at', '1451332_at', '1451415_at', '1451418_a_at',     '1451532_s_at', '1451536_at', '1452003_at', '1452110_at',     '1452183_a_at', '1452665_at', '1452671_s_at', '1452869_at',     '1453030_at', '1455056_at', '1455517_at', '1456174_x_at',     '1456393_at', '1456434_x_at', '1460260_s_at', '1460359_at'),     class = 'factor'), 1:25), .Names = c('x', ''));do.call('[.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinfactor_testfactor1_607065096242a17117dcce89724e8294() {
        assertEval("argv <- structure(list(x = c(1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,     0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 0L,     0L, 1L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L,     0L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L,     1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L,     0L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L,     1L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L,     1L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L,     0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L,     0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L,     0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L,     1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L,     1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L,     0L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L,     1L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L,     1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L,     0L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L,     1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 1L, 1L,     1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L,     0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L,     0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 1L,     1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L,     0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L,     0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 1L,     1L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 0L,     1L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L,     0L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L,     0L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 1L,     1L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,     1L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 1L,     0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L,     0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 0L,     0L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L,     0L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L,     0L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 1L,     0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L,     0L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L,     1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L,     1L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L,     0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 0L,     0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 1L,     0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L,     1L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L,     0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 0L,     0L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L,     1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 0L,     1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 1L,     0L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,     0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 0L,     0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 0L,     1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L,     0L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L,     0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 0L,     1L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 1L, 0L,     0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L,     0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 1L, 0L,     0L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L,     0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 1L,     1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 1L,     0L, 1L)), .Names = 'x');do.call('factor', argv)");
    }

    @Test
    public void TestrGenBuiltinfileaccess_testfileaccess1_a68a2b3dafefd9bbb0b07782040a2c5e() {
        assertEval("argv <- list(character(0), 0); .Internal(file.access(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfileaccess_testfileaccess2_fdc65135c7d9f00afb7df74d52a77230() {
        assertEval("argv <- list('/home/lzhao/R/x86_64-unknown-linux-gnu-library/3.0/FALSE', 5); .Internal(file.access(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfilecreate_testfilecreate1_20acc30661eb48496a511d1af73eca26() {
        assertEval("argv <- list('codetools-manual.log', TRUE); .Internal(file.create(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfilecreate_testfilecreate2_a1a3ab4024228627e7c5a1aa6971c649() {
        assertEval("argv <- list(character(0), TRUE); .Internal(file.create(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfilecreate_testfilecreate4_2dec9b19ff94d61505ec116ec46a0fa6() {
        assertEval("argv <- structure(list('foo1'), .Names = '');do.call('file.create', argv)");
    }

    @Test
    public void TestrGenBuiltinfileexists_testfileexists1_af5295e67dcc3eeeb4188c86026ce6cd() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/library/methods/data/Rdata.rdb'); .Internal(file.exists(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinfileexists_testfileexists2_c22a2da0472718210847b4f2dd0713bf() {
        assertEval("argv <- list(c('src/Makevars', 'src/Makevars.in')); .Internal(file.exists(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinfileexists_testfileexists3_1ad91518d248221e5c51860a89bbafe6() {
        assertEval("argv <- list(character(0)); .Internal(file.exists(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinfileinfo_testfileinfo1_a99b095a177ec7e9005fb967dfaec9a9() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/library/codetools/data'); .Internal(file.info(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinfileinfo_testfileinfo2_708c61ffc98b05b30ad963c97d62ca84() {
        assertEval("argv <- list(character(0)); .Internal(file.info(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinfilepath_testfilepath1_4891bfe76b5039bb7d713b8b97a6d90b() {
        assertEval("argv <- list(list('/home/lzhao/hg/r-instrumented/tests/Packages/rpart/R', 'summary.rpart.R'), '/'); .Internal(file.path(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfilepath_testfilepath2_8dc49591cce79c3379317ea44b20ce7f() {
        assertEval("argv <- list(list('/home/lzhao/hg/r-instrumented/src/library/parallel/R/unix', c('forkCluster.R', 'mcfork.R', 'mclapply.R', 'mcmapply.R', 'mcparallel.R', 'pvec.R')), '/'); .Internal(file.path(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfilepath_testfilepath3_51d61b5343bbd639bb542130edb19827() {
        assertEval("argv <- list(list('/home/lzhao/hg/r-instrumented/tests/tcltk.Rcheck', structure('tcltk', .Names = 'Package'), 'help'), '/'); .Internal(file.path(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfilepath_testfilepath4_a21c2e0517b16ea6baf221c7fc9a0cbc() {
        assertEval("argv <- list(list(character(0), 'DESCRIPTION'), '/'); .Internal(file.path(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfilepath_testfilepath5_f7ea14b938d3877211be03b90f7f73cc() {
        assertEval("argv <- list(list(structure(character(0), .Dim = c(0L, 0L))), '/'); .Internal(file.path(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfilepath_testfilepath7_1c5963ded72aa85b7a7e1be0778619fc() {
        assertEval("argv <- structure(list('.', 'Pkgs'), .Names = c('', ''));do.call('file.path', argv)");
    }

    @Test
    public void TestrGenBuiltinfileremove_testfileremove1_c4820e8d8e834d15a4b1027c78194762() {
        assertEval("argv <- list(character(0)); .Internal(file.remove(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinfilerename_testfilerename1_06452042fc3fa93b87998ff944a9b2c6() {
        assertEval("argv <- list(character(0), character(0)); .Internal(file.rename(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinfindInterval_testfindInterval1_e0dec5063cbb7dee5518f5e2ec455b18() {
        assertEval("argv <- list(c(1, 2, 3, 4, 5, 6, 7, 8, 9), c(3, 3.25, 3.5, 3.75, 4, 4.25, 4.5, 4.75, 5, 5.25, 5.5, 5.75, 6), FALSE, FALSE); .Internal(findInterval(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinfindInterval_testfindInterval2_07ddf6b4673e54fe2d0a9931982938ad() {
        assertEval("argv <- list(NA_real_, NA_real_, FALSE, FALSE); .Internal(findInterval(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinfindInterval_testfindInterval3_ef2bb28755527226b38a27050a632fc6() {
        assertEval("argv <- list(numeric(0), numeric(0), FALSE, FALSE); .Internal(findInterval(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinfindInterval_testfindInterval4_8b524104567c383bbd58f9bb60e35690() {
        assertEval("argv <- list(c(5, 10, 15), c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), FALSE, FALSE); .Internal(findInterval(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor1_a7a8b94b8b11a3044e5d0063d8fb9ad7() {
        assertEval("argv <- list(c(2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 11));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor2_232439c78517613667452a41e21ea610() {
        assertEval("argv <- list(structure(c(12784, 13149, 13514, 13879, 14245, 14610), tzone = 'UTC'));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor3_f255bfbe788c20ff2f52b22c9a785660() {
        assertEval("argv <- list(c(-0.783587745879035, -0.739712343519063, -0.314304892261569));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor4_f528a920e5b4dfa2c269af223cfeafd6() {
        assertEval("argv <- list(structure(c(1920.5, 1920.5833, 1920.6667, 1920.75, 1920.8333, 1920.9167, 1921, 1921.0833, 1921.1667, 1921.25), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor5_ba571b7dc68783c4eed3c6b22fe5a324() {
        assertEval("argv <- list(c(-1.94786705265839, 0.813844117537122));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor6_5d0419e1d9f4dedfd47750bc1624dfb5() {
        assertEval("argv <- list(structure(c(0.555857947411444, 2.74659181662125, NA, 6.01634386021798, 3.26975214359673, 2.19073396920981, 2.74659181662125, NA, 0.555857947411444, 3.82560999100817, 0.555857947411444, 2.19073396920981, 2.74659181662125, 2.74659181662125, 1.07901827438692, 4.38146783841962, 1.11171579482289, 1e-07, 7.09536203460491, 11.9999901, 4.93732568583106, 5.46048601280654), .Dim = c(22L, 1L)));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor7_d9dabc6a6507a3c055b48d3f34ba68be() {
        assertEval("argv <- list(structure(c(3.08577921002324, 0.531033162063639, 1.47434325842442, 5.64214292692797, 6.21994378924106, 2.27200744902353, 11.9999901, 0.424434048635841, 0.549397569660826, 0.973929660925175, 1e-07, 3.54172739357752, 11.9999901, 2.27200744902353, 4.47284349010678, 6.43648940805496, 7.50963843787849, 7.11757579203344, 11.9999901, 3.54172739357752, 6.21994378924106, 5.1224060214714, 6.89175397596987, 6.52603528890926, 11.9999901, 7.11757579203344, 1e-07, 5.64214292692797, 6.00414304408873, 9.63018799510384, 11.9999901, 6.52603528890926, 7.50963843787849, 0.973929660925175, 1.47434325842442, 4.2100341139702, 11.9999901, 9.63018799510384, 6.89175397596987, 6.43648940805496, 0.549397569660826, 0.531033162063639, 11.9999901, 4.2100341139702, 6.00414304408873, 5.1224060214714, 4.47284349010678, 0.424434048635841, 3.08577921002324), .Dim = c(7L, 7L), .Dimnames = list(c('privileges', 'rating', 'complaints', 'learning', 'raises', 'critical', 'advance'), c('advance', 'critical', 'raises', 'learning', 'complaints', 'rating', 'privileges'))));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor8_7b7dd783ca8b1592a2ce4332b6f92e94() {
        assertEval("argv <- list(structure(c(1976, 1976.0833, 1976.1667, 1976.25, 1976.3333, 1976.4167, 1976.5, 1976.5833, 1976.6667, 1976.75, 1976.8333, 1976.9167, 1977, 1977.0833, 1977.1667, 1977.25, 1977.3333, 1977.4167, 1977.5, 1977.5833, 1977.6667, 1977.75, 1977.8333, 1977.9167, 1978), .Tsp = c(1976, 1978, 12), class = 'ts'));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor9_e3dc151195686912a99ef5cdb618d0bd() {
        assertEval("argv <- list(logical(0));floor(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinflush_testflush1_62a79a5a829dfd705d4a2fce830b5f61() {
        assertEval("argv <- list(structure(1L, class = c('terminal', 'connection'))); .Internal(flush(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinflush_testflush2_da52d0b7accd547c69fae6d1a7d265e2() {
        assertEval("argv <- list(structure(2L, class = c('terminal', 'connection'))); .Internal(flush(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinformals_testformals1_414d0aa292b8fe651fd894cc27d91a2a() {
        assertEval("argv <- list(.Primitive('length<-')); .Internal(formals(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinformals_testformals2_8a64ee0c4211f679fdf6007427609b58() {
        assertEval("argv <- list(logical(0)); .Internal(formals(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinformals_testformals3_6ccf46eb1cfc68ddb502cbc6507ddbd1() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(formals(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinformals_testformals4_fb0e228a262455d61c48088dda3fa8a3() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame')); .Internal(formals(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat1_a6c317e3ccc98d283572f1fc7c06f4db() {
        assertEval("argv <- list(structure(c(0, 72.7, 56.4, 72.7, 0, 63.3, 56.4, 63.3, 0), .Dim = c(3L, 3L), .Dimnames = list(c('Girth', 'Height', 'Volume'), c('Girth', 'Height', 'Volume'))), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat10_530fd3e454bd612504e946d9a09c4c8f() {
        assertEval("argv <- list(c(FALSE, NA, TRUE), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat11_66856e3cd12ec5a5a3141bc567dd660a() {
        assertEval("argv <- list(structure(c(1L, 2L, 1L), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = '')), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat12_34233dd4aa9e3cc90ae4208b0dd61975() {
        assertEval("argv <- list(c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), FALSE, NULL, 0L, NULL, 0L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat13_91e3260aec96210d97891e48280ff207() {
        assertEval("argv <- list(c(1L, 2L, 3L, 4L, 5L, -1L, -2L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat14_4f62576bac9db986d57e08b6dee333b3() {
        assertEval("argv <- list(structure(c(NA, 1, 1, 1), .Names = c('<none>', '- x4', '- x2', '- x1')), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat15_8dc93a27f7955ed280c983fb98764a4f() {
        assertEval("argv <- list(2.22044604925031e-16, FALSE, 1, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat16_cfd43f3d744099a8a88014de0200a6ec() {
        assertEval("argv <- list(structure(c(1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat17_7006548c9195832e9fc9b74506ebaab4() {
        assertEval("argv <- list(c(2.3e-05, 4.5e-06), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat18_8cbb0da79c547f78740b05138e91ac3a() {
        assertEval("argv <- list(c(2L, 4L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat19_f9a5159dea617c3d4acdd63caea2d418() {
        assertEval("argv <- list(c(1L, NA, 1L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat2_f6ef8361fee0499b29434699fee374f9() {
        assertEval("argv <- list('\\\\ab\\\\c', FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat20_99f36a1aec1fb60cf061c0bf64134fa1() {
        assertEval("argv <- list(c('abc', NA, 'def'), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat23_02f91866c8ca2d894b4c94302ce7c0a1() {
        assertEval("argv <- list(c(NA, 2L, 4L, 7L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat24_2edaeb1fc36007ae10c643e105f90fc7() {
        assertEval("argv <- list(c(1.1+0i, NA, 3+0i), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat25_9dfce0e9dc2b41e8d9f4e713f5c6911d() {
        assertEval("argv <- list(c('  9 ', ' 13 ', ' 13+', ' 18 ', ' 23 ', ' 28+', ' 31 ', ' 34 ', ' 45+', ' 48 '), TRUE, NULL, 0L, NULL, 0L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat26_6c9940be88163a7cf41458afe1234418() {
        assertEval("argv <- list(c(172, 88, 88, 55, 92, 92, 72, 72, 63, 63), TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat27_1cc79e9dc7f5f26a2892efc843d3453c() {
        assertEval("argv <- list(structure(c(142L, 104L, 71L, 250L), .Dim = 4L, .Dimnames = structure(list(c('(1) Approve STRONGLY', '(2) Approve SOMEWHAT', '(3) Disapprove SOMEWHAT', '(4) Disapprove STRONGLY')), .Names = '')), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat28_461389e9acea0b8a68568773e9048049() {
        assertEval("argv <- list(structure(c('***', '*', ' ', ' ', ' '), legend = '0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1', class = 'noquote'), FALSE, NULL, 0L, NULL, 0L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat29_9452d2b344aba593e81f244ee327e204() {
        assertEval("argv <- list(structure(c(0, 5, 118, 57, 0, 1, 4, 140, 0, 11, 154, 14, 0, 13, 13, 80, 35, 13, 387, 75, 17, 14, 89, 76, 0, 0, 670, 192, 0, 0, 3, 20), .Dim = c(1L, 32L), row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(Class = c('1st', '2nd', '3rd', 'Crew'), Sex = c('Male', 'Female'), Age = c('Child', 'Adult'), Survived = c('No', 'Yes')), .Names = c('Class', 'Sex', 'Age', 'Survived'))), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat3_99a2a6623dbee8b0d0b4ae8ba99d4aca() {
        assertEval("argv <- list(c('Inf', '-Inf', 'NaN', 'NA'), FALSE, NULL, 0L, 4, 1L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat30_a2e67ed543a241e9635a898e228c3615() {
        assertEval("argv <- list(c('', '', '\\'Adult\\'', '\\'No\\'', '', '387'), FALSE, NULL, 0L, NULL, 1L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat31_e679c52ca84336f14651365b9e8b0ecf() {
        assertEval("argv <- list(2.2250738585072e-308, TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat32_564f3f0835c39663b9863ed7cecdd68f() {
        assertEval("argv <- list(c(-0.318309886183791+0i, 0-0.564189583547756i, 1+0i, 0+1.77245385090552i, -3.14159265358979+0i), TRUE, 2, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat33_a51c14c289f8d5aba09e63def94da3db() {
        assertEval("argv <- list(0+1i, TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat34_a3f66c5a92c04bf290549711f083c8b0() {
        assertEval("argv <- list(structure(c(-Inf, -Inf, -2.248e+263, -Inf, -3.777e+116, -1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat35_923e224325d2647e54c3448654a51f6e() {
        assertEval("argv <- list(c(-41L, -36L, -12L, -18L, NA, -28L, -23L, -19L, -8L, NA, -7L, -16L, -11L, -14L, -18L, -14L, -34L, -6L, -30L, -11L, -1L, -11L, -4L, -32L, NA, NA, NA, -23L, -45L, -115L, -37L, NA, NA, NA, NA, NA, NA, -29L, NA, -71L, -39L, NA, NA, -23L, NA, NA, -21L, -37L, -20L, -12L, -13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, -135L, -49L, -32L, NA, -64L, -40L, -77L, -97L, -97L, -85L, NA, -10L, -27L, NA, -7L, -48L, -35L, -61L, -79L, -63L, -16L, NA, NA, -80L, -108L, -20L, -52L, -82L, -50L, -64L, -59L, -39L, -9L, -16L, -78L, -35L, -66L, -122L, -89L, -110L, NA, NA, -44L, -28L, -65L, NA, -22L, -59L, -23L, -31L, -44L, -21L, -9L, NA, -45L, -168L, -73L, NA, -76L, -118L, -84L, -85L, -96L, -78L, -73L, -91L, -47L, -32L, -20L, -23L, -21L, -24L, -44L, -21L, -28L, -9L, -13L, -46L, -18L, -13L, -24L, -16L, -13L, -23L, -36L, -7L, -14L, -30L, NA, -14L, -18L, -20L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat36_eb59ebdf73f9e3f49367702d00c98afb() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), TRUE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat37_16d5c15cfad16e060ba5e6dad2ba14b4() {
        assertEval("argv <- list(structure(c(213198964, 652424.52183908), .Names = c('null.deviance', 'deviance')), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat38_738c71770669352f00cac777676b9c79() {
        assertEval("argv <- list(structure(integer(0), .Dim = c(1L, 0L), row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(df0 = NULL), .Names = 'df0')), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat39_74fb008552c9bf121a5c4122bfe370e3() {
        assertEval("argv <- list(FALSE, FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat4_acdd5e79e5a4aa0b40e0b9ba902f8854() {
        assertEval("argv <- list(structure(c('axx', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), .Dim = c(2L, 4L)), FALSE, NULL, 0L, NULL, 1L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat40_441455babedf9f5c230fbad6f959658b() {
        assertEval("argv <- list(1e-07, TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat41_a2b92dcfe960670655b754686fa96c9c() {
        assertEval("argv <- list(structure(c(3035, 2552, 2704, 2554, 2014, 1655, 1721, 1524, 1596, 2074, 2199, 2512, 2933, 2889, 2938, 2497, 1870, 1726, 1607, 1545, 1396, 1787, 2076, 2837, 2787, 3891, 3179, 2011, 1636, 1580, 1489, 1300, 1356, 1653, 2013, 2823, 3102, 2294, 2385, 2444, 1748, 1554, 1498, 1361, 1346, 1564, 1640, 2293, 2815, 3137, 2679, 1969, 1870, 1633, 1529, 1366, 1357, 1570, 1535, 2491, 3084, 2605, 2573, 2143, 1693, 1504, 1461, 1354, 1333, 1492, 1781, 1915), .Tsp = c(1973, 1978.91666666667, 12), class = 'ts'), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat42_cd88964f0ad50b515c252a3b9cbf9858() {
        assertEval("argv <- list(c(2.5, 97.5), TRUE, 3, 0L, NULL, 3L, TRUE, FALSE); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat43_14c58c1e783fcf23dc375364b7800428() {
        assertEval("argv <- list(structure(c(9.4, 10.2, 9.2, 4.4, 3.5, 2.7), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('Estimate', 'Std.Err'))), FALSE, 2, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat44_37b05269abb1c3a9279c669279747530() {
        assertEval("argv <- list(95, 2, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat46_4e6148de5c1f2f3182f9d30560610a34() {
        assertEval("argv <- list(1.2e+07, FALSE, NULL, 9L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat47_f701b122cac00dd351c59fea448dd861() {
        assertEval("argv <- list(-0.01234+3.14159265358979i, FALSE, NULL, 14L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat48_17f0718b7395ff4eef2da8c980a7759d() {
        assertEval("argv <- list(c(TRUE, FALSE, TRUE, FALSE, FALSE, FALSE), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat49_e5b8308012067f5e6258700142a2f70f() {
        assertEval("argv <- list(3.141, FALSE, NULL, 13L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat50_9261d1984d2b7978032f7f6e44f5c60e() {
        assertEval("argv <- list(c(Inf, -Inf), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat51_824eb64b80a9cd5f4c92000f270e70e2() {
        assertEval("argv <- list(structure(c(2, NA), .Names = c('N:P:K', 'Residuals')), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat52_acf7177d968484917ff6e4593e61618d() {
        assertEval("argv <- list(structure('def\\'gh', class = 'AsIs'), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat53_c357713a88a6ac7b1ec719afd9459389() {
        assertEval("argv <- list(structure(4:9, .Dim = c(3L, 2L), .Dimnames = list(NULL, c('a', 'b'))), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat54_7687d00d72c2971e729b6ebe0f39bfb7() {
        assertEval("argv <- list(c(NA, NA, NA, NA, NA, 'Ripley', 'Venables & Smith'), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat55_5aa9cd93366d2ef32c58e7447d7fc8ea() {
        assertEval("argv <- list(1e-11, FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat56_3fc16590fe746a7d2228f762c3c79ad2() {
        assertEval("argv <- structure(list(x = 0.04, digits = 3, nsmall = 3), .Names = c('x',     'digits', 'nsmall'));do.call('format', argv)");
    }

    @Test
    public void TestrGenBuiltinformat_testformat6_231ca0602afea092e4fe9c9dac9c4150() {
        assertEval("argv <- list(structure(c(47.97, 57.9, 74.76, 868.88), .Names = c('<none>', '- x4', '- x2', '- x1')), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat7_a6d605b0310b67e55c4c0a58ab3f4d3b() {
        assertEval("argv <- list(c('a', 'NA', NA, 'b'), FALSE, NULL, 0L, NULL, 0L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat8_304270986a3de2993a3e66f0cdccaee3() {
        assertEval("argv <- list(NA_real_, FALSE, 4L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformat_testformat9_bb40b3e92eba1eeee00292ef79c2657e() {
        assertEval("argv <- list(integer(0), TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinformatAsIs_testformatAsIs1_7f23d1d50c9810d00aed7bd4e5573773() {
        assertEval("argv <- structure(list(x = structure(integer(0), class = 'AsIs')),     .Names = 'x');do.call('format.AsIs', argv)");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC1_bd7a557060cd5a3ab0f34b0aad496b22() {
        assertEval("argv <- list(c(3.14159265358979, 3.1415926535898, 1), 'double', 10, 4L, 'g', '', c(12L, 12L, 12L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC10_7e2f803907747c949ea546a5221ff168() {
        assertEval("argv <- list(c(20, 30, 40, 50, 60, 70, 80, 90, 100), 'double', 1, 7L, 'fg', '', c(15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC11_ccf0cdc249847f056ed1a264c6007359() {
        assertEval("argv <- list(c(0, 25, 50, 75, 100), 'double', 1, 6L, 'fg', '', c(14L, 13L, 13L, 13L, 13L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC12_9e9819c4a2fb3e09fbad617bd26a77f7() {
        assertEval("argv <- list(5L, 'integer', 2, 2L, 'd', '', 10L); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC13_03a2dec900d7d715899c39a38a87425f() {
        assertEval("argv <- list(c(3.14159265358979e-05, 0.000314159265358979, 0.00314159265358979, 0.0314159265358979, 0.314159265358979, 3.14159265358979, 31.4159265358979, 314.159265358979, 3141.59265358979, 31415.9265358979), 'double', 5, 4, 'fg', '', c(15, 14, 13, 12, 11, 10, 9, 9, 9, 9)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC14_21bbac62acd44703aba6b8805e56d60c() {
        assertEval("argv <- list(structure(c(1962.25, 1962.5, 1962.75, 1963, 1963.25, 1963.5, 1963.75, 1964, 1964.25, 1964.5, 1964.75, 1965, 1965.25, 1965.5, 1965.75, 1966, 1966.25, 1966.5, 1966.75, 1967, 1967.25, 1967.5, 1967.75, 1968, 1968.25, 1968.5, 1968.75, 1969, 1969.25, 1969.5, 1969.75, 1970, 1970.25, 1970.5, 1970.75, 1971, 1971.25, 1971.5, 1971.75), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), 'double', 1, 4L, 'g', '', c(12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC2_678523811eba4bed56c354e38f6e583a() {
        assertEval("argv <- list(1, 'double', 8, 5, 'g', '-', 13); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC3_ece303f2ddc7cc7c6df4e68a3feb63b8() {
        assertEval("argv <- list(structure(c(1.5, 13.3414265412268, 1e-15, 8, 1, 500, 28), .Dim = c(7L, 1L), .Dimnames = list(c('m.ship.expon.', 'objective', 'tolerance', 'iterations', 'converged', 'maxit', 'n'), ' ')), 'double', 8L, 7L, 'g', '', c(15L, 15L, 15L, 15L, 15L, 15L, 15L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC4_4c0260136615fc31af18166e8e089291() {
        assertEval("argv <- list(c(1000, 1e+07, 1), 'double', 5, 4L, 'g', '', c(12L, 12L, 12L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC5_68e13fb70e755f43ae4bbdeaf7e8d947() {
        assertEval("argv <- list(c(-3, -2, -1, 0, 1, 2, 3), 'double', 1L, 4L, 'g', '', c(12L, 12L, 12L, 12L, 12L, 12L, 12L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC6_6fa2892fcd8f80bdaf44016d691b096c() {
        assertEval("argv <- list(3L, 'integer', 3, 2L, 'd', '0', 10L); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC7_ec7629c2ed63f2159f58d6029355d607() {
        assertEval("argv <- list(c(0, 25, 50, 75, 100), 'double', 1, 7L, 'fg', '', c(16L, 15L, 15L, 15L, 15L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC8_6e81ff5de54c57eeb8f785702db441c6() {
        assertEval("argv <- list(structure(48.4333681840033, .Names = 'value'), 'double', 5L, 4L, 'g', '', 12L); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC9_fd98253fa4006b6a866a101a837e2996() {
        assertEval("argv <- list(c(0.0599, 0.00599, 0.000599, 5.99e-05, 5.99e-06, 5.99e-07), 'double', 3, -2, 'fg', '#', c(10, 11, 12, 13, 14, 15)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt1_7cc49787e49d64ce0c328250ee3df4c8() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L), mday = c(1L, 1L, 1L, 1L, 1L), mon = c(0L, 0L, 0L, 0L, 0L), year = 105:109, wday = c(6L, 0L, 1L, 2L, 4L), yday = c(0L, 0L, 0L, 0L, 0L), isdst = c(0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), '%Y-%m-%d', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt2_618d6b93f0d6301c0ac99d428c9613e2() {
        assertEval("argv <- list(structure(list(sec = 10.7712235450745, min = 48L, hour = 14L, mday = 17L, mon = 2L, year = 114L, wday = 1L, yday = 75L, isdst = 1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), '%Y-%m-%d', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt3_8220b474a017ef4be8079adff0ad19f1() {
        assertEval("argv <- list(structure(list(sec = 59.7693939208984, min = 47L, hour = 18L, mday = 17L, mon = 2L, year = 114L, wday = 1L, yday = 75L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), '%Y-%m-%d %H:%M:%S', TRUE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt4_a8c206210ddaf4f613af4d98541d8d13() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L), mday = c(30L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 30L, 30L, 30L, 31L, 30L, 31L, 31L, 31L, 30L), mon = c(5L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 5L, 5L, 5L, 5L, 11L, 11L, 11L, 5L, 5L, 5L, 11L, 5L, 11L, 11L, 11L, 5L), year = c(72L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 81L, 82L, 83L, 85L, 87L, 89L, 90L, 92L, 93L, 94L, 95L, 97L, 98L, 105L, 108L, 112L), wday = c(5L, 0L, 1L, 2L, 3L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 0L, 4L, 0L, 1L, 2L, 3L, 4L, 0L, 1L, 4L, 6L, 3L, 6L), yday = c(181L, 365L, 364L, 364L, 364L, 365L, 364L, 364L, 364L, 180L, 180L, 180L, 180L, 364L, 364L, 364L, 181L, 180L, 180L, 364L, 180L, 364L, 364L, 365L, 181L), isdst = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), '%Y-%m-%d %H:%M:%S', TRUE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt5_b1f3c5b53e70df36d35f99e0a12b13eb() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 19L, mday = 31L, mon = 11L, year = 69L, wday = 3L, yday = 364L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), '%Y-%m-%d %H:%M:%S', TRUE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt6_e1345bc5ba72d75ef3c8389d8fe46f93() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L, 0L), mday = 6:11, mon = 0:5, year = -10:-5, wday = c(1L, 6L, 2L, 0L, 4L, 2L), yday = c(5L, 37L, 67L, 98L, 129L, 161L), isdst = c(0L, 0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), '%Y', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt7_2376a795a93f62dbddd2e9af32a51ceb() {
        assertEval("argv <- list(structure(list(sec = c(0, NA, NA, 0), min = c(0L, NA, NA, 0L), hour = c(0L, NA, NA, 0L), mday = c(1L, NA, NA, 26L), mon = c(0L, NA, NA, 9L), year = c(101L, NA, NA, 104L), wday = c(1L, NA, NA, 2L), yday = c(0L, NA, NA, 299L), isdst = c(0L, -1L, -1L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), '%Y-%m-%d', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt8_75cd49d9918e433136df2406ca59410f() {
        assertEval("argv <- list(structure(list(sec = 11.3034093379974, min = 37L, hour = 7L, mday = 7L, mon = 11L, year = 113L, wday = 6L, yday = 340L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), '%H:%M:%OS3', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt9_513125df94e8f7e95e17d9524967da07() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), '%Y-%m-%d', TRUE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatdifftime_testformatdifftime1_b67b6a7d49df06d569ab1cab65dc1c58() {
        assertEval("argv <- structure(list(x = structure(c(0, 30, 60), units = 'mins',     class = 'difftime')), .Names = 'x');do.call('format.difftime', argv)");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo1_b142f7c9c7c086832b3e99225b1af15c() {
        assertEval("argv <- list(c(0.099999994, 0.2), 7L, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo10_519a6135aa7ce22f4afbcd865d83853b() {
        assertEval("argv <- list(structure(c(2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 6, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y')), NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo11_344b2c8629595ce4b6c1507a40fa3d9c() {
        assertEval("argv <- list(structure(c(-3.14159265358979e-05, 3.14159265358979e-05, -0.000314159265358979, 0.000314159265358979, -0.00314159265358979, 0.00314159265358979, -0.0314159265358979, 0.0314159265358979, -0.314159265358979, 0.314159265358979, -3.14159265358979, 3.14159265358979, -31.4159265358979, 31.4159265358979, -314.159265358979, 314.159265358979, -3141.59265358979, 3141.59265358979, -31415.9265358979, 31415.9265358979, -314159.265358979, 314159.265358979, -1e-05, 1e-05, -1e-04, 1e-04, -0.001, 0.001, -0.01, 0.01, -0.1, 0.1), .Dim = c(2L, 16L)), NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo12_caced8cffbf9008b9f5dd456065219cb() {
        assertEval("argv <- list(c(NaN, NA), NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo14_8df26dc259817ed8acd961107e3688ec() {
        assertEval("argv <- structure(list(x = complex(real = Inf, imaginary = Inf)),     .Names = 'x');do.call('format.info', argv)");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo15_efe64083370d69ab19e80502bd855c0c() {
        assertEval("argv <- structure(list(x = c(complex(real = NaN, imaginary = NaN),     NA)), .Names = 'x');do.call('format.info', argv)");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo2_af31558d035f21b11bccaf076d2fe46a() {
        assertEval("argv <- list(c(0.099999994, 0.2), 6L, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo3_7a660d51fdfb66339a935a5ce4255565() {
        assertEval("argv <- list(c(Inf, -Inf), NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo4_d06e86184a351c9455b2d0edf9470128() {
        assertEval("argv <- list(FALSE, NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo5_39c34bd94eed85a62a7912525f2379e9() {
        assertEval("argv <- list(3.14159265358979e-10, NULL, 8); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo6_e1c61760a0e144328bce2c3d8c1e734f() {
        assertEval("argv <- list(1e+08, NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo7_b33a6a563f156588908896e0152f8ead() {
        assertEval("argv <- list(1e+222, NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo8_1c612fbf884c7c00a586bf1517c3a5e3() {
        assertEval("argv <- list(31.4159265358979, NULL, 8); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo9_d7a265e3dcfdde1e1a8705246eba6e24() {
        assertEval("argv <- list(712L, NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinformatpval_testformatpval1_8dfd94d6174890d833b7fa604cc1010c() {
        assertEval("argv <- structure(list(pv = 0.200965994008331, digits = 3), .Names = c('pv',     'digits'));do.call('format.pval', argv)");
    }

    @Test
    public void TestrGenBuilting_testg1_69fdaadd6caf1b78953c6456e5338881() {
        assertEval("argv <- list(1);g(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma1_4473df9bd72c23be2ed976ce0c151278() {
        assertEval("argv <- list(c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1));gamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma2_3c1e6c332ebaf637fa5a376412ad2e4f() {
        assertEval("argv <- list(FALSE);gamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma3_c8855947f731e45b12c1022a76d9fc34() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));gamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma5_7e0de8863fa730bf16f1a456f762a037() {
        assertEval("argv <- list(101);gamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma6_18d2777c36611ccc829aaa07cf7944a7() {
        assertEval("argv <- list(c(-3.000001, -3, -3, -2.999999, -2.965, -2.93, -2.895, -2.86, -2.825, -2.79, -2.755, -2.72, -2.685, -2.65, -2.615, -2.58, -2.545, -2.51, -2.475, -2.44, -2.405, -2.37, -2.335, -2.3, -2.265, -2.23, -2.195, -2.16, -2.125, -2.09, -2.055, -2.02, -2.000001, -2, -1.999999, -1.985, -1.95, -1.915, -1.88, -1.845, -1.81, -1.775, -1.74, -1.705, -1.67, -1.635, -1.6, -1.565, -1.53, -1.495, -1.46, -1.425, -1.39, -1.355, -1.32, -1.285, -1.25, -1.215, -1.18, -1.145, -1.11, -1.075, -1.04, -1.005, -1.000001, -1, -0.999999, -0.97, -0.935, -0.9, -0.865, -0.83, -0.795, -0.76, -0.725, -0.69, -0.655, -0.62, -0.585, -0.55, -0.515, -0.48, -0.445, -0.41, -0.375, -0.34, -0.305, -0.27, -0.235, -0.2, -0.165, -0.13, -0.0949999999999998, -0.0599999999999996, -0.0249999999999999, -1e-06, 0, 1e-06, 0.0100000000000002, 0.0450000000000004, 0.0800000000000001, 0.115, 0.15, 0.185, 0.22, 0.255, 0.29, 0.325, 0.36, 0.395, 0.43, 0.465, 0.5, 0.535, 0.57, 0.605, 0.640000000000001, 0.675, 0.71, 0.745000000000001, 0.78, 0.815, 0.850000000000001, 0.885, 0.92, 0.955000000000001, 0.99, 1.025, 1.06, 1.095, 1.13, 1.165, 1.2, 1.235, 1.27, 1.305, 1.34, 1.375, 1.41, 1.445, 1.48, 1.515, 1.55, 1.585, 1.62, 1.655, 1.69, 1.725, 1.76, 1.795, 1.83, 1.865, 1.9, 1.935, 1.97, 2.005, 2.04, 2.075, 2.11, 2.145, 2.18, 2.215, 2.25, 2.285, 2.32, 2.355, 2.39, 2.425, 2.46, 2.495, 2.53, 2.565, 2.6, 2.635, 2.67, 2.705, 2.74, 2.775, 2.81, 2.845, 2.88, 2.915, 2.95, 2.985, 3.02, 3.055, 3.09, 3.125, 3.16, 3.195, 3.23, 3.265, 3.3, 3.335, 3.37, 3.405, 3.44, 3.475, 3.51, 3.545, 3.58, 3.615, 3.65, 3.685, 3.72, 3.755, 3.79, 3.825, 3.86, 3.895, 3.93, 3.965, 4));gamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltingcinfo_testgcinfo1_b2679704d2e2bea4b77293ecd030ef48() {
        assertEval("argv <- list(list()); .Internal(gcinfo(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltingcinfo_testgcinfo2_0779a52aeb463f411790aaa4a825b3fd() {
        assertEval("argv <- list(FALSE); .Internal(gcinfo(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltingctorture2_testgctorture21_e3e9375b04b511497bc2ab9a8841f2a4() {
        assertEval("argv <- list(NULL, NULL, FALSE); .Internal(gctorture2(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltingctorture2_testgctorture22_6c6266118bdd19a452f184283188d78b() {
        assertEval("argv <- list(FALSE, FALSE, FALSE); .Internal(gctorture2(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltingetConnection_testgetConnection1_dd59c6908024de836332c3e6bf9f05d0() {
        assertEval("argv <- list(FALSE); .Internal(getConnection(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltingetNamespaceVersion_testgetNamespaceVersion1_059ba175f8d692e7478626e3237f6f1d() {
        assertEval("argv <- structure(list(ns = 'stats'), .Names = 'ns');do.call('getNamespaceVersion', argv)");
    }

    @Test
    public void TestrGenBuiltingetRestart_testgetRestart1_05c269c4e9ce65babe2285b34e6070b2() {
        assertEval("argv <- list(2L); .Internal(.getRestart(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltingetRestart_testgetRestart2_5a1b43cdb8efed31809e39583630da8b() {
        assertEval("argv <- list(1L); .Internal(.getRestart(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltingetSymbolInfo_testgetSymbolInfo1_bf8e2ec15e02b34e7cd84158ebb69d15() {
        assertEval("argv <- list('FALSE', '', FALSE); .Internal(getSymbolInfo(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltingetconst_testgetconst1_1c8d7b8f47e3a5d04dc34b03e40855ba() {
        assertEval("argv <- list(list(list(), NULL), 1); .Internal(getconst(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltingetconst_testgetconst2_1887a2463f5a964af3e11d158b66282c() {
        assertEval("argv <- list(list(FALSE), 1); .Internal(getconst(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltingettext_testgettext1_a8ccfdab226247b491c718a3dd65fe5c() {
        assertEval("argv <- list(NULL, 'Loading required package: %s'); .Internal(gettext(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltingettext_testgettext2_d9f1074928cc0ee117e127336f7e33d8() {
        assertEval("argv <- list(NULL, ''); .Internal(gettext(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltingettext_testgettext3_d94760f57357114c95e9b840712881ce() {
        assertEval("argv <- list(NULL, 'The following object is masked from ‘package:base’:\\n\\n    det\\n'); .Internal(gettext(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltingettext_testgettext4_7d50415aaad5c76a036dff32913b3235() {
        assertEval("argv <- list(NULL, c('/', ' not meaningful for factors')); .Internal(gettext(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltingettext_testgettext5_aff449a3d088232d28ccde3a1f3e669c() {
        assertEval("argv <- list(NULL, character(0)); .Internal(gettext(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltingettext_testgettext6_c0981cbb8176433c2aacfa88540062b1() {
        assertEval("argv <- list(NULL, NULL); .Internal(gettext(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr1_8ebb964270131521a289c8b842b3fcba() {
        assertEval("argv <- list('', 'abc', FALSE, FALSE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr10_10685022731e163e4d3e036a4d36259c() {
        assertEval("argv <- list('(?<first>[[:upper:]][[:lower:]]+) (?<last>[[:upper:]][[:lower:]]+)', c('  Ben Franklin and Jefferson Davis', '\\tMillard Fillmore'), FALSE, TRUE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr11_e7b8ea8fe8346e4d530edf2d4a4e7c6d() {
        assertEval("argv <- list('?', 'utils::data', FALSE, FALSE, TRUE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr12_53bc669706df0f168f4787b0d37c4bed() {
        assertEval("argv <- list('[[', 'utils:::.show_help_on_topic_', FALSE, FALSE, TRUE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr14_a4aa92afb0e6c6f52512e4d9afbf4f8c() {
        assertEval("argv <- structure(list(pattern = '', text = 'abc', fixed = TRUE),     .Names = c('pattern', 'text', 'fixed'));do.call('gregexpr', argv)");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr15_28a488abd7e1543d280ce5e3f8400d6f() {
        assertEval("argv <- structure(list(pattern = '', text = 'abc'), .Names = c('pattern',     'text'));do.call('gregexpr', argv)");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr16_4811602af4acd32262f665f03d89c947() {
        assertEval("argv <- structure(list(pattern = '', text = 'abc', perl = TRUE),     .Names = c('pattern', 'text', 'perl'));do.call('gregexpr', argv)");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr2_bca95179bee7fb70c744060ab2dcbc4b() {
        assertEval("argv <- list('[^\\\\.\\\\w:?$@[\\\\]]+', 'version$m', FALSE, TRUE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr3_3d5ebc42c16e2fd7abdb096d6054ef5c() {
        assertEval("argv <- list('$', 'version$m', FALSE, FALSE, TRUE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr4_1a125740d7a3da09fcf8564bdfabefba() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', FALSE, FALSE, TRUE, TRUE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr5_f764145d181601e386edf4bf100ea063() {
        assertEval("argv <- list('', 'abc', FALSE, TRUE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr6_c0be4735e63ad80413f96c0e2efba3e4() {
        assertEval("argv <- list('', 'abc', FALSE, FALSE, TRUE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr7_d7b33db339b072daf4ce027a0e0b256a() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', TRUE, FALSE, FALSE, TRUE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr8_e55bbcf6904da0f9774f58b95674d356() {
        assertEval("argv <- list('[[:space:]]?(,|,?[[:space:]]and)[[:space:]]+', character(0), FALSE, FALSE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr9_97cda4c85bdd67d9fb77194ec7b4438a() {
        assertEval("argv <- list('\\\\[[^]]*\\\\]', 'FALSE', FALSE, FALSE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep1_70629a9cc66605e0c03e43e58b2c5ddf() {
        assertEval("argv <- list('|', 'wool', FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep10_bf80b8be3e8617de496a7c73791f704d() {
        assertEval("argv <- list('-package$', structure(c('bkde', 'bkde2D', 'bkfe', 'dpih', 'dpik', 'dpill', 'locpoly'), .Names = c('/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/bkde.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/bkde2D.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/bkfe.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/dpih.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/dpik.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/dpill.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/locpoly.tex')), FALSE, FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep11_773cfe620d510a73eb654257fbd221e1() {
        assertEval("argv <- list('.__T__unname:', c('.__T__!:base', '.__T__%%:base', '.__T__%*%:base', '.__T__%/%:base', '.__T__&:base', '.__T__*:base', '.__T__+:base', '.__T__-:base', '.__T__/:base', '.__T__Arith:base', '.__T__BunchKaufman:Matrix', '.__T__Cholesky:Matrix', '.__T__Compare:methods', '.__T__Logic:base', '.__T__Math2:methods', '.__T__Math:base', '.__T__Ops:base', '.__T__Schur:Matrix', '.__T__Summary:base', '.__T__[:base', '.__T__[<-:base', '.__T__^:base', '.__T__all.equal:base', '.__T__all:base', '.__T__any:base', '.__T__as.array:base', '.__T__as.integer:base', '.__T__as.logical:base', '.__T__as.matrix:base', '.__T__as.numeric:base', '.__T__as.vector:base', '.__T__band:Matrix', '.__T__cbind2:methods', '.__T__chol2inv:base', '.__T__chol:base', '.__T__coerce:methods', '.__T__coerce<-:methods', '.__T__colMeans:base', '.__T__colSums:base', '.__T__cov2cor:stats', '.__T__crossprod:base', '.__T__determinant:base', '.__T__diag:base', '.__T__diag<-:base', '.__T__diff:base', '.__T__dim:base', '.__T__dim<-:base', '.__T__dimnames:base', '.__T__dimnames<-:base', '.__T__drop:base', '.__T__expand:Matrix', '.__T__expm:Matrix', '.__T__facmul:Matrix', '.__T__forceSymmetric:Matrix', '.__T__format:base', '.__T__head:utils', '.__T__image:graphics', '.__T__initialize:methods', '.__T__is.finite:base', '.__T__is.infinite:base', '.__T__is.na:base', '.__T__isDiagonal:Matrix', '.__T__isSymmetric:base', '.__T__isTriangular:Matrix', '.__T__kronecker:base', '.__T__length:base', '.__T__lu:Matrix', '.__T__mean:base', '.__T__nnzero:Matrix', '.__T__norm:base', '.__T__pack:Matrix', '.__T__print:base', '.__T__prod:base', '.__T__qr.Q:base', '.__T__qr.R:base', '.__T__qr.coef:base', '.__T__qr.fitted:base', '.__T__qr.qty:base', '.__T__qr.qy:base', '.__T__qr.resid:base', '.__T__qr:base', '.__T__rbind2:methods', '.__T__rcond:base', '.__T__rep:base', '.__T__rowMeans:base', '.__T__rowSums:base', '.__T__show:methods', '.__T__skewpart:Matrix', '.__T__solve:base', '.__T__sum:base', '.__T__summary:base', '.__T__symmpart:Matrix', '.__T__t:base', '.__T__tail:utils', '.__T__tcrossprod:base', '.__T__toeplitz:stats', '.__T__tril:Matrix', '.__T__triu:Matrix', '.__T__unname:base', '.__T__unpack:Matrix', '.__T__update:stats', '.__T__updown:Matrix', '.__T__which:base', '.__T__writeMM:Matrix', '.__T__zapsmall:base'), FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep12_76258394edbd429e32c525d5a380f10d() {
        assertEval("argv <- list('^[[:blank:]]*$', 'mtext(\\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\\', side = 3)', FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep2_7ff292414afc18691db76a418ba76343() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', TRUE, FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep3_b376e0028a221ad66d6d7ab9c23f4d5b() {
        assertEval("argv <- list('[', '^\\\\.__[MT]', FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep4_877851792c5d826188329cdf348f1d35() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep5_7f275b6cc2bfc209871dbebe0e4690b2() {
        assertEval("argv <- list('[', '^[[:alpha:]]+', FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep6_31adf2c86a8c87cbe4fb4e7d7a36ce7e() {
        assertEval("argv <- list('.__T__[:', c('.__T__plot:graphics', '.__T__$:base', '.__T__$<-:base', '.__T__Arith:base', '.__T__Compare:methods', '.__T__Complex:base', '.__T__Logic:base', '.__T__Math2:methods', '.__T__Math:base', '.__T__Ops:base', '.__T__Summary:base', '.__T__[:base', '.__T__addNextMethod:methods', '.__T__body<-:base', '.__T__cbind2:methods', '.__T__coerce:methods', '.__T__coerce<-:methods', '.__T__initialize:methods', '.__T__kronecker:base', '.__T__loadMethod:methods', '.__T__rbind2:methods', '.__T__show:methods', '.__T__slotsFromS3:methods'), FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep7_50dd34ac32afe0b8905f9f6eb5352e40() {
        assertEval("argv <- list(''', structure('exNSS4_1.0.tar.gz', .Names = ''), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep9_621dac8dcf4bd0e5b0878e1937c98fba() {
        assertEval("argv <- list('^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789]', 'all.R', FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl1_94d39cdd4f642ebbdcb25309a1cb2e8e() {
        assertEval("argv <- list('([[:digit:]]+[.-]){1,}[[:digit:]]+', c('1.0', '1.0'), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl10_0b78ff0b21a93bf0bf3d5629e3d267e0() {
        assertEval("argv <- list('{refObject}', c('\\\\section{Extends}{', 'Class \\\\code{\\'\\\\linkS4class{refClassA}\\'}, directly.', 'Class \\\\code{\\'\\\\linkS4class{envRefClass}\\'}, by class \\'refClassA\\', distance 2.', 'Class \\\\code{\\'\\\\linkS4class{.environment}\\'}, by class \\'refClassA\\', distance 3.', 'Class \\\\code{\\'\\\\linkS4class{refClass}\\'}, by class \\'refClassA\\', distance 3.', 'Class \\\\code{\\'\\\\linkS4class{environment}\\'}, by class \\'refClassA\\', distance 4, with explicit coerce.', 'Class \\\\code{\\'\\\\linkS4class{refObject}\\'}, by class \\'refClassA\\', distance 4.', '}'), FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl11_94af6bace9fdd71cbe37d0ad44c816fb() {
        assertEval("argv <- list('^prepare_Rd', structure(character(0), class = 'checkRd'), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl12_e165cdc58aaf33023de8e5b430f01040() {
        assertEval("argv <- structure(list(pattern = 'length', x = 'Lengths: 0, 1',     ignore.case = TRUE), .Names = c('pattern', 'x', 'ignore.case'));do.call('grepl', argv)");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl3_7b0b57a854bc118394b5680456289d8c() {
        assertEval("argv <- list('\\n', structure('c(person(\\'José\\', \\'Pinheiro\\', role = \\'aut\\',\\n                    comment = \\'S version\\'),\\n             person(\\'Douglas\\', \\'Bates\\', role = \\'aut\\',\\n                    comment = \\'up to 2007\\'),\\n             person(\\'Saikat\\', \\'DebRoy\\', role = \\'ctb\\',\\n                    comment = \\'up to 2002\\'),\\n             person(\\'Deepayan\\', \\'Sarkar\\', role = \\'ctb\\',\\n                    comment = \\'up to 2005\\'),\\n\\t     person(\\'R-core\\', email = \\'R-core@R-project.org\\',\\n                    role = c(\\'aut\\', \\'cre\\')),\\n             person(\\'EISPACK authors\\', role = \\'ctb\\'))', .Names = 'Authors@R'), FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl4_b324803d2aa77454f85f6ab70d4982cc() {
        assertEval("argv <- list('([[:digit:]]+[.-]){1,}[[:digit:]]+', structure('7.3-26', .Names = 'Version'), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl5_4d07c02b6dea1f8845449f732ae53ed7() {
        assertEval("argv <- list('\\n', c('### Encoding: UTF-8', '', '### Name: text', '### Title: Add Text to a Plot', '### Aliases: text text.default', '### Keywords: aplot', '', '### ** Examples', '', 'plot(-1:1, -1:1, type = \\'n\\', xlab = \\'Re\\', ylab = \\'Im\\')', 'K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)', '', '## The following two examples use latin1 characters: these may not', '## appear correctly (or be omitted entirely).', 'plot(1:10, 1:10, main = \\'text(...) examples\\\\n~~~~~~~~~~~~~~\\',', '     sub = \\'R is GNU ©, but not ® ...\\')', 'mtext(\\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\\', side = 3)', 'points(c(6,2), c(2,1), pch = 3, cex = 4, col = \\'red\\')', 'text(6, 2, \\'the text is CENTERED around (x,y) = (6,2) by default\\',', '     cex = .8)', 'text(2, 1, \\'or Left/Bottom - JUSTIFIED at (2,1) by 'adj = c(0,0)'\\',', '     adj = c(0,0))', 'text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))', 'text(4, 8.4, \\'expression(hat(beta) == (X^t * X)^{-1} * X^t * y)\\',', '     cex = .75)', 'text(4, 7, expression(bar(x) == sum(frac(x[i], n), i==1, n)))', '', '## Two more latin1 examples', 'text(5, 10.2,', '     \\'Le français, c'est façile: Règles, Liberté, Egalité, Fraternité...\\')', 'text(5, 9.8,', '     \\'Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)\\')', '', '', ''), FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl6_504d34d923143716a28efe7a26ca53a0() {
        assertEval("argv <- list('x', 'x', FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl7_e07b8a94fb311d6d9f0f627db2941ff4() {
        assertEval("argv <- list('^[[:space:]]*## No test:', 'Diagonal(3)', FALSE, FALSE, TRUE, FALSE, TRUE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl8_da254da3d31bc434df2292be5942a03c() {
        assertEval("argv <- list('\\\\\\\\keyword\\\\{\\\\s*internal\\\\s*\\\\}', c('\\\\inputencoding{utf8}', '\\\\HeaderA{condest}{Compute Approximate CONDition number and 1-Norm of (Large) Matrices}{condest}', '\\\\aliasA{onenormest}{condest}{onenormest}', '%', '\\\\begin{Description}\\\\relax', '``Estimate'', i.e. compute approximately the CONDition number of', 'a (potentially large, often sparse) matrix \\\\code{A}.', 'It works by apply a fast approximation of the 1-norm,', '\\\\code{norm(A,\\'1\\')}, through \\\\code{onenormest(.)}.', '\\\\end{Description}', '%', '\\\\begin{Usage}', '\\\\begin{verbatim}', 'condest(A, t = min(n, 5), normA = norm(A, \\'1\\'),', '        silent = FALSE, quiet = TRUE)', '', 'onenormest(A, t = min(n, 5), A.x, At.x, n,', '           silent = FALSE, quiet = silent,', '           iter.max = 10, eps = 4 * .Machine$double.eps)', '\\\\end{verbatim}', '\\\\end{Usage}', '%', '\\\\begin{Arguments}', '\\\\begin{ldescription}', '\\\\item[\\\\code{A}] a square matrix, optional for \\\\code{onenormest()}, where', 'instead of \\\\code{A}, \\\\code{A.x} and \\\\code{At.x} can be specified,', 'see there.', '\\\\item[\\\\code{t}] number of columns to use in the iterations.', '\\\\item[\\\\code{normA}] number; (an estimate of) the 1-norm of \\\\code{A}, by', 'default \\\\code{\\\\LinkA{norm}{norm}(A, \\'1\\')}; may be replaced by an estimate.', '\\\\item[\\\\code{silent}] logical indicating if warning and (by default)', 'convergence messages should be displayed.', '\\\\item[\\\\code{quiet}] logical indicating if convergence messages should be', 'displayed.', '\\\\item[\\\\code{A.x, At.x}] when \\\\code{A} is missing, these two must be given as', 'functions which compute \\\\code{A \\\\%\\\\% x}, or \\\\code{t(A) \\\\%\\\\% x},', 'respectively.', '\\\\item[\\\\code{n}] \\\\code{ == nrow(A)}, only needed when \\\\code{A} is not specified.', '\\\\item[\\\\code{iter.max}] maximal number of iterations for the 1-norm estimator.', '\\\\item[\\\\code{eps}] the relaive change that is deemed irrelevant.', '\\\\end{ldescription}', '\\\\end{Arguments}', '%', '\\\\begin{Value}', 'Both functions return a \\\\code{\\\\LinkA{list}{list}};', '\\\\code{onenormest()} with components,', '\\\\begin{ldescription}', '\\\\item[\\\\code{est}] a number \\\\eqn{> 0}{}, the estimated \\\\code{norm(A, \\'1\\')}.', '\\\\item[\\\\code{v}] the maximal \\\\eqn{A X}{} column.', '', '\\\\end{ldescription}', 'The function \\\\code{condest()} returns a list with components,', '\\\\begin{ldescription}', '\\\\item[\\\\code{est}] a number \\\\eqn{> 0}{}, the estimated condition number', '\\\\eqn{\\\\hat\\\\kappa}{}; when \\\\eqn{r :=}{}\\\\code{rcond(A)},', '\\\\eqn{1/\\\\hat\\\\kappa \\\\approx r}{}.', '\\\\item[\\\\code{v}] integer vector length \\\\code{n}, with an \\\\code{1} at the index', '\\\\code{j} with maximal column \\\\code{A[,j]} in \\\\eqn{A}{}.', '\\\\item[\\\\code{w}] numeric vector, the largest \\\\eqn{A x}{} found.', '\\\\item[\\\\code{iter}] the number of iterations used.', '\\\\end{ldescription}', '\\\\end{Value}', '%', '\\\\begin{Author}\\\\relax', 'This is based on octave's \\\\code{condest()} and', '\\\\code{onenormest()} implementations with original author', 'Jason Riedy, U Berkeley; translation to \\\\R{} and', 'adaption by Martin Maechler.', '\\\\end{Author}', '%', '\\\\begin{References}\\\\relax', '', 'Nicholas J. Higham and Fran\\303\\247oise Tisseur (2000).', 'A Block Algorithm for Matrix 1-Norm Estimation, with an Application to 1-Norm', 'Pseudospectra.', '\\\\emph{SIAM J. Matrix Anal. Appl.} \\\\bold{21}, 4, 1185--1201.', '\\\\url{http://dx.doi.org/10.1137/S0895479899356080}', '', '', 'William W. Hager (1984).', 'Condition Estimates.', '\\\\emph{SIAM J. Sci. Stat. Comput.} \\\\bold{5}, 311--316.', '\\\\end{References}', '%', '\\\\begin{SeeAlso}\\\\relax', '\\\\code{\\\\LinkA{norm}{norm}}, \\\\code{\\\\LinkA{rcond}{rcond}}.', '\\\\end{SeeAlso}', '%', '\\\\begin{Examples}', '\\\\begin{ExampleCode}', 'data(KNex)', 'mtm <- with(KNex, crossprod(mm))', 'system.time(ce <- condest(mtm))', '## reciprocal', '1 / ce$est', 'system.time(rc <- rcond(mtm)) # takes ca  3 x  longer', 'rc', 'all.equal(rc, 1/ce$est) # TRUE -- the approxmation was good', '\\\\end{ExampleCode}', '\\\\end{Examples}'), FALSE, FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl9_8b93308733a57d44cfd0b73654bf0a78() {
        assertEval("argv <- list('\\n', '\\nqr(x, ...)\\nqrR(qr, complete=FALSE, backPermute=TRUE)\\n', FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltingrowconst_testgrowconst1_2dba37c5effe26a881d42ae71454c753() {
        assertEval("argv <- list(list(list())); .Internal(growconst(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub1_b741582d9d12025e6c83247dd280829f() {
        assertEval("argv <- list('([[:alnum:]])--([[:alnum:]])', '\\\\1-\\\\2', 'Date-Time Classes', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub10_7529e46e81c5d0bbdbbf668805584e03() {
        assertEval("argv <- list('a*', 'x', 'baaac', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub11_d31bfededee14fdb6a627695e0f38800() {
        assertEval("argv <- list('é', 'gh', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub12_9bf8c305d1d11c2a8494d767cd412f45() {
        assertEval("argv <- list('([[:digit:]]+[.-]){1,}[[:digit:]]+', '', 'pkgB_1.0.tar.gz', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub13_9848cd82002f6b6237e971853fab0753() {
        assertEval("argv <- list('\\\\b', '|', 'The quick brown èé', FALSE, TRUE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub14_7f464b230b39683811a6f51cd43771bc() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/src/library/utils', '', '/home/lzhao/hg/r-instrumented/src/library/utils/vignettes', FALSE, FALSE, TRUE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub15_036914d1301004274b1056eaf2d9b03b() {
        assertEval("argv <- list('(‘|’)', ''', c('', '', '> library(survival)', 'Loading required package: splines', '> options(na.action=na.exclude) # preserve missings', '> options(contrasts=c('contr.treatment', 'contr.poly')) #ensure constrast type', '> ', '> #', '> # Simple tests of concordance.  These numbers were derived in multiple', '> #   codes.', '> #', '> aeq <- function(x,y, ...) all.equal(as.vector(x), as.vector(y), ...)', '> ', '> grank <- function(x, time, grp, wt) ', '+     unlist(tapply(x, grp, rank))', '> grank2 <- function(x, time, grp, wt) {  #for case weights', '+     if (length(wt)==0) wt <- rep(1, length(x))', '+     z <- double(length(x))', '+     for (i in unique(grp)) {', '+         indx <- which(grp==i)', '+         temp <- tapply(wt[indx], x[indx], sum)', '+         temp <- temp/2  + c(0, cumsum(temp)[-length(temp)])', '+         z[indx] <- temp[match(x[indx], names(temp))]', '+     }', '+     z', '+ }', '> ', '> ', '> tdata <- aml[aml$x=='Maintained',]', '> tdata$y <- c(1,6,2,7,3,7,3,8,4,4,5)', '> tdata$wt <- c(1,2,3,2,1,2,3,4,3,2,1)', '> fit <- survConcordance(Surv(time, status) ~y, tdata)', '> aeq(fit$stats[1:4], c(14,24,2,0))', '[1] TRUE', '> cfit <- coxph(Surv(time, status) ~ tt(y), tdata, tt=grank, method='breslow',', '+               iter=0, x=T)', '> cdt <- coxph.detail(cfit)', '> aeq(4*sum(cdt$imat),fit$stats[5]^2) ', '[1] TRUE', '> aeq(2*sum(cdt$score), diff(fit$stats[2:1]))', '[1] TRUE', '> ', '> ', '> # Lots of ties', '> tempx <- Surv(c(1,2,2,2,3,4,4,4,5,2), c(1,0,1,0,1,0,1,1,0,1))', '> tempy <- c(5,5,4,4,3,3,7,6,5,4)', '> fit2 <- survConcordance(tempx ~ tempy)', '> aeq(fit2$stats[1:4], c(13,13,5,2))', '[1] TRUE', '> cfit2 <-  coxph(tempx ~ tt(tempy), tt=grank, method='breslow', iter=0)', '> aeq(4/cfit2$var, fit2$stats[5]^2)', '[1] TRUE', '> ', '> # Bigger data', '> fit3 <- survConcordance(Surv(time, status) ~ age, lung)', '> aeq(fit3$stats[1:4], c(10717, 8706, 591, 28))', '[1] TRUE', '> cfit3 <- coxph(Surv(time, status) ~ tt(age), lung, ', '+                iter=0, method='breslow', tt=grank, x=T)', '> cdt <- coxph.detail(cfit3)', '> aeq(4*sum(cdt$imat),fit3$stats[5]^2) ', '[1] TRUE', '> aeq(2*sum(cdt$score), diff(fit3$stats[2:1]))', '[1] TRUE', '> ', '> ', '> # More ties', '> fit4 <- survConcordance(Surv(time, status) ~ ph.ecog, lung)', '> aeq(fit4$stats[1:4], c(8392, 4258, 7137, 28))', '[1] TRUE', '> cfit4 <- coxph(Surv(time, status) ~ tt(ph.ecog), lung, ', '+                iter=0, method='breslow', tt=grank)', '> aeq(4/cfit4$var, fit4$stats[5]^2)', '[1] TRUE', '> ', '> # Case weights', '> fit5 <- survConcordance(Surv(time, status) ~ y, tdata, weight=wt)', '> fit6 <- survConcordance(Surv(time, status) ~y, tdata[rep(1:11,tdata$wt),])', '> aeq(fit5$stats[1:4], c(70, 91, 7, 0))  # checked by hand', '[1] TRUE', '> aeq(fit5$stats[1:3], fit6$stats[1:3])  #spurious \\'tied on time\\' value, ignore', '[1] TRUE', '> aeq(fit5$std, fit6$std)', '[1] TRUE', '> cfit5 <- coxph(Surv(time, status) ~ tt(y), tdata, weight=wt, ', '+                iter=0, method='breslow', tt=grank2)', '> cfit6 <- coxph(Surv(time, status) ~ tt(y), tdata[rep(1:11,tdata$wt),], ', '+                iter=0, method='breslow', tt=grank)', '> aeq(4/cfit6$var, fit6$stats[5]^2)', '[1] TRUE', '> aeq(cfit5$var, cfit6$var)', '[1] TRUE', '> ', '> # Start, stop simplest cases', '> fit7 <- survConcordance(Surv(rep(0,11), time, status) ~ y, tdata)', '> aeq(fit7$stats, fit$stats)', '[1] TRUE', '> aeq(fit7$std.err, fit$std.err)', '[1] TRUE', '> fit7 <- survConcordance(Surv(rep(0,11), time, status) ~ y, tdata, weight=wt)', '> aeq(fit5$stats, fit7$stats)', '[1] TRUE', '> ', '> # Multiple intervals for some, but same risk sets as tdata', '> tdata2 <- data.frame(time1=c(0,3, 5,  6,7,   0,  4,17,  7,  0,16,  2,  0, ', '+                              0,9, 5),', '+                      time2=c(3,9, 13, 7,13, 18, 17,23, 28, 16,31, 34, 45, ', '+                              9,48, 60),', '+                      status=c(0,1, 1, 0,0,  1,  0,1, 0, 0,1, 1, 0, 0,1, 0),', '+                      y = c(1,1, 6, 2,2, 7, 3,3, 7, 3,3, 8, 4, 4,4, 5),', '+                      wt= c(1,1, 2, 3,3, 2, 1,1, 2, 3,3, 4, 3, 2,2, 1))', '> fit8 <- survConcordance(Surv(time1, time2, status) ~y, tdata2, weight=wt)', '> aeq(fit5$stats, fit8$stats)', '[1] TRUE', '> aeq(fit5$std.err, fit8$std.err)', '[1] TRUE', '> cfit8 <- coxph(Surv(time1, time2, status) ~ tt(y), tdata2, weight=wt, ', '+                iter=0, method='breslow', tt=grank2)', '> aeq(4/cfit8$var, fit8$stats[5]^2)', '[1] TRUE', '> aeq(fit8$stats[5]/(2*sum(fit8$stats[1:3])), fit8$std.err)', '[1] TRUE', '> ', '> # Stratified', '> tdata3 <- data.frame(time1=c(tdata2$time1, rep(0, nrow(lung))),', '+                      time2=c(tdata2$time2, lung$time),', '+                      status = c(tdata2$status, lung$status -1),', '+                      x = c(tdata2$y, lung$ph.ecog),', '+                      wt= c(tdata2$wt, rep(1, nrow(lung))),', '+                      grp=rep(1:2, c(nrow(tdata2), nrow(lung))))', '> fit9 <- survConcordance(Surv(time1, time2, status) ~x + strata(grp),', '+                         data=tdata3, weight=wt)', '> aeq(fit9$stats[1,], fit5$stats)', '[1] TRUE', '> aeq(fit9$stats[2,], fit4$stats)', '[1] TRUE', '> '), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub16_ba0a2be2b395794769c80eeea930b1ae() {
        assertEval("argv <- list('[[:blank:][:cntrl:]]*', '', structure(' unix\\n', Rd_tag = 'TEXT'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub17_bdee42f75dcb4d58f9c68dd3a445d499() {
        assertEval("argv <- list('(\\\\w)(\\\\w*)', '\\\\U\\\\1\\\\L\\\\2', 'a test of capitalizing', FALSE, TRUE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub18_b5ecae04757fba9c37c2e55fd07ce7ca() {
        assertEval("argv <- list('\\\\.', '\\\\\\\\.', '^*.t??$', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub19_2b2431b050b9ec10955f081079ed0d48() {
        assertEval("argv <- list('(\\\\w)(\\\\w*)(\\\\w)', '\\\\U\\\\1\\\\E\\\\2\\\\U\\\\3', 'useRs may fly into JFK or laGuardia', FALSE, TRUE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub2_c034d1455969b903307358fa6716203b() {
        assertEval("argv <- list('\\\\\\\\(link|var)\\\\{([^}]+)\\\\}', '\\\\2', structure('     \\'Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)\\')\\n', Rd_tag = 'RCODE'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub20_557dade81f3bfa6ee72071a19f0727bf() {
        assertEval("argv <- list('([&$%_#])', '\\\\\\\\\\\\1', structure('with 5% of the range added to each end.\\n', Rd_tag = 'TEXT'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub21_f246facd891d6ae6354531873a6b06c6() {
        assertEval("argv <- list('[[:space:]]*%+[[:space:]]*\\\\\\\\VignetteEngine\\\\{([^}]*)\\\\}', '\\\\1', character(0), FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub22_047f249a051be625467ba4b83220245b() {
        assertEval("argv <- list('^\\\\s+', '', ' utilities ', FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub23_c827d7a2b0952230ea4e05cad718f20b() {
        assertEval("argv <- list('([^\\\\])\\\\[', '\\\\1\\\\\\\\[', '^.*[.*$', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub24_353e156defb1b30778851a21f8bf2c7b() {
        assertEval("argv <- list('.__M__(.*):([^:]+)', '\\\\1', character(0), FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub25_e759254c5e5d6da45f534f8e03283b99() {
        assertEval("argv <- list('%', '\\\\\\\\%', structure('foo', .Names = 'object'), FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub26_a6631bc9f1b0c1f13b46d61f09bc359e() {
        assertEval("argv <- list('\\\\\\\\(l|)dots', '...', structure('plot(1:10, 1:10, main = \\'text(...) examples\\\\n~~~~~~~~~~~~~~\\',\\n', Rd_tag = 'RCODE'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub27_abf221cb6ca381e202b1dd98ead58967() {
        assertEval("argv <- list('.__T__(.*):([^:]+(.*))', '\\\\2', c('.__T__!:base', '.__T__%%:base', '.__T__%*%:base', '.__T__%/%:base', '.__T__&:base', '.__T__*:base', '.__T__+:base', '.__T__-:base', '.__T__/:base', '.__T__Arith:base', '.__T__BunchKaufman:Matrix', '.__T__Cholesky:Matrix', '.__T__Compare:methods', '.__T__Logic:base', '.__T__Math2:methods', '.__T__Math:base', '.__T__Ops:base', '.__T__Schur:Matrix', '.__T__Summary:base', '.__T__[:base', '.__T__[<-:base', '.__T__^:base', '.__T__all.equal:base', '.__T__all:base', '.__T__any:base', '.__T__as.array:base', '.__T__as.integer:base', '.__T__as.logical:base', '.__T__as.matrix:base', '.__T__as.numeric:base', '.__T__as.vector:base', '.__T__band:Matrix', '.__T__cbind2:methods', '.__T__chol2inv:base', '.__T__chol:base', '.__T__coerce:methods', '.__T__coerce<-:methods', '.__T__colMeans:base', '.__T__colSums:base', '.__T__cov2cor:stats', '.__T__crossprod:base', '.__T__determinant:base', '.__T__diag:base', '.__T__diag<-:base', '.__T__diff:base', '.__T__dim:base', '.__T__dim<-:base', '.__T__dimnames:base', '.__T__dimnames<-:base', '.__T__drop:base', '.__T__expand:Matrix', '.__T__expm:Matrix', '.__T__facmul:Matrix', '.__T__forceSymmetric:Matrix', '.__T__format:base', '.__T__head:utils', '.__T__image:graphics', '.__T__initialize:methods', '.__T__is.finite:base', '.__T__is.infinite:base', '.__T__is.na:base', '.__T__isDiagonal:Matrix', '.__T__isSymmetric:base', '.__T__isTriangular:Matrix', '.__T__kronecker:base', '.__T__length:base', '.__T__lu:Matrix', '.__T__mean:base', '.__T__nnzero:Matrix', '.__T__norm:base', '.__T__pack:Matrix', '.__T__print:base', '.__T__prod:base', '.__T__qr.Q:base', '.__T__qr.R:base', '.__T__qr.coef:base', '.__T__qr.fitted:base', '.__T__qr.qty:base', '.__T__qr.qy:base', '.__T__qr.resid:base', '.__T__qr:base', '.__T__rbind2:methods', '.__T__rcond:base', '.__T__rep:base', '.__T__rowMeans:base', '.__T__rowSums:base', '.__T__show:methods', '.__T__skewpart:Matrix', '.__T__solve:base', '.__T__sum:base', '.__T__summary:base', '.__T__symmpart:Matrix', '.__T__t:base', '.__T__tail:utils', '.__T__tcrossprod:base', '.__T__toeplitz:stats', '.__T__tril:Matrix', '.__T__triu:Matrix', '.__T__unname:base', '.__T__unpack:Matrix', '.__T__update:stats', '.__T__updown:Matrix', '.__T__which:base', '.__T__writeMM:Matrix', '.__T__zapsmall:base'), FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub28_2786109e8ceb268fe75e04680d783361() {
        assertEval("argv <- list('([^\\\\])\\\\(', '\\\\1\\\\\\\\(', '^.*{n.*$', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub3_605ecb1828d714a8f1d642c31dfebab5() {
        assertEval("argv <- list('\\\\bsl', '\\\\bsl{}', structure('     knots).\\n', Rd_tag = 'TEXT'), FALSE, FALSE, TRUE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub30_da596c3d040074b084d41cf23d1d4ea8() {
        assertEval("argv <- structure(list(pattern = 'a*', replacement = 'x', x = 'baaaac',     perl = TRUE), .Names = c('pattern', 'replacement', 'x', 'perl'));do.call('gsub', argv)");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub31_e978d2b66288517bc0c00b4ab66afc60() {
        assertEval("argv <- structure(list(pattern = 'a*', replacement = 'x', x = 'baaaac'),     .Names = c('pattern', 'replacement', 'x'));do.call('gsub', argv)");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub4_992637880a818a82e4bc9fc17014c01e() {
        assertEval("argv <- list('\\\\bsl', '\\\\bsl{}', structure('  ', Rd_tag = 'TEXT'), FALSE, FALSE, TRUE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub5_8c0f11bb2f8aaf2acb931c9da4d16e43() {
        assertEval("argv <- list('([{}$#_])', '\\\\\\\\\\\\1', structure('2013-03-19 13:18:58', .Names = 'Date/Publication'), FALSE, FALSE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub6_e97bd074be3d9178ffea993c6e0a6de8() {
        assertEval("argv <- list('é', 'gh', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', FALSE, FALSE, TRUE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub7_fee8d53b32d8c0dad2fad676cb70dfad() {
        assertEval("argv <- list('([&$%_#])', '\\\\\\\\\\\\1', structure(', then ', Rd_tag = 'TEXT'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub8_312cf9b912b24f324a6eba363ce12cda() {
        assertEval("argv <- list(''([^']*)'', '‘\\\\1’', '‘/home/lzhao/hg/r-instrumented/tests/rpart.Rcheck’', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub9_9394983adf7c6d99ae5ff180e19b7171() {
        assertEval("argv <- list('\\\\', '\\\\bsl', structure('range specified by ', Rd_tag = 'TEXT'), FALSE, FALSE, TRUE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv1_cc788a1d2b5ae32c2bbc512e71d2014b() {
        assertEval("argv <- list('Report Information on C Stack Size and Usage', 'UTF-8', '', 'byte', FALSE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv2_83efbe1df805ba105c39fda056c8d672() {
        assertEval("argv <- list('façile'   , 'latin1', 'ASCII', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv3_cb446fe63500870751ff30f909956f3c() {
        assertEval("argv <- list(c('% This file is part of the 'foreign' package for R', '% It is distributed under the GPL version 2 or later', '', '\\\\name{S3 read functions}', '\\\\alias{data.restore}', '\\\\alias{read.S}', '\\\\title{Read an S3 Binary or data.dump File}', '\\\\description{', '  Reads binary data files or \\\\code{data.dump} files that were produced', '  in S version 3.', '}', '\\\\usage{', '  data.restore(file, print = FALSE, verbose = FALSE, env = .GlobalEnv)', '  read.S(file)', '}', '\\\\arguments{', '  \\\\item{file}{the filename of the S-PLUS \\\\code{data.dump} or binary', '    file.}', '  \\\\item{print}{whether to print the name of each object as read from the', '    file.}', '  \\\\item{verbose}{whether to print the name of every subitem within each', '    object.}', '  \\\\item{env}{environment within which to create the restored object(s).}', '}', '\\\\value{', '  For \\\\code{read.S}, an R version of the S3 object.', '', '  For \\\\code{data.restore}, the name of the file.', '}', '\\\\details{', '  \\\\code{read.S} can read the binary files produced in some older', '  versions of S-PLUS on either Windows (versions 3.x, 4.x, 2000) or Unix', '  (version 3.x with 4 byte integers).  It automatically detects whether', '  the file was produced on a big- or little-endian machine and adapts', '  itself accordingly.', '', '  \\\\code{data.restore} can read a similar range of files produced by', '  \\\\code{data.dump} and for newer versions of S-PLUS, those from', '  \\\\code{data.dump(....., oldStyle=TRUE)}.', '', '  Not all S3 objects can be handled in the current version.  The most', '  frequently encountered exceptions are functions and expressions; you', '  will also have trouble with objects that contain model formulas.  In', '  particular, comments will be lost from function bodies, and the', '  argument lists of functions will often be changed.', '}', '\\\\author{', '  Duncan Murdoch', '}', '\\\\examples{', '\\\\dontrun{read.S(file.path(\\'_Data\\', \\'myobj\\'))', 'data.restore(\\'dumpdata\\', print = TRUE)', '}}', '\\\\keyword{data}', '\\\\keyword{file}'), '', 'ASCII', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv4_ea055c7e95c8deaa7d9d2e060c5ccf8a() {
        assertEval("argv <- list(c('', 'Compute a Survival Curve for Censored Data'), 'UTF-8', '', 'byte', FALSE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv5_ee2365cbc2576f192e2ed30552707e1a() {
        assertEval("argv <- list(character(0), 'latin1', 'ASCII', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv6_e13a6b665d6f41270fe5914650017137() {
        assertEval("argv <- list(list(), 'latin1', 'ASCII', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv7_5136fb34863ba18cfa72ee2fa450f451() {
        assertEval("argv <- list('façile'   , 'latin1', 'ASCII', '', TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv8_60993ad6adafa3101de15be38263cffc() {
        assertEval("argv <- list(structure('Prediction matrix for soap film smooth', Rd_tag = 'TEXT'), 'UTF-8', 'ASCII', NA_character_, FALSE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv9_4ddd37a63b4115f8f20cea7195287015() {
        assertEval("argv <- list(structure(c('Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance'), .Names = c('Q1_MISSING_NONE', 'Q1_MISSING_1', 'Q1_MISSING_2', 'Q1_MISSING_3', 'Q1_MISSING_RANGE', 'Q1_MISSING_LOW', 'Q1_MISSING_HIGH', 'Q1_MISSING_RANGE_1', 'Q1_MISSING_LOW_1', 'Q1_MISSING_HIGH_1')), 'latin1', '', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinicuSetCollate_testicuSetCollate1_e6b72f4268a1f77ea1f1aa28a891c91f() {
        assertEval(" .Internal(icuSetCollate())");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical1_2e525e7cd7a5376385507a4cf0144f9f() {
        assertEval("argv <- list('oats[-1, ]', 'newdata', TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical10_5c2d2df41b5d1ccf953b13d1414883ba() {
        assertEval("argv <- list(complex(0), complex(0), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical11_dfb7b3054dcb75166b6daa12eeecceee() {
        assertEval("argv <- list(NULL, '\\\\link', TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical12_36fe2f12bdd5b5a2d716e6dca4768090() {
        assertEval("argv <- list(c(TRUE, TRUE, NA), c(TRUE, TRUE, NA), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical13_a57349cf39ffef9133cde9aacb3d55ef() {
        assertEval("argv <- list(NA_complex_, NA_complex_, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical14_64c0a8092307ad9d5a2738803b159969() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 2, 3), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('I', 'a')), foo = 'bar', class = 'matrix'), structure(c(1, 1, 1, 1, 2, 3), .Dim = c(3L, 2L), class = 'matrix', foo = 'bar', .Dimnames = list(NULL, c('I', 'a'))), TRUE, TRUE, FALSE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical15_838fbb2684b3da3926a311ed019f4137() {
        assertEval("argv <- list(structure(list(x = 1L), .Names = 'x', row.names = c(NA, -1L), class = 'data.frame'), structure(list(x = 1L), .Names = 'x', row.names = c(NA, -1L), class = 'data.frame'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical16_d75fe7faf37da9b7c9ccf7de042689c7() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L), .Label = c('1', '2'), class = 'factor'), structure(list(f = structure(c(1L, 1L, 1L), .Label = c('1', '2'), class = 'factor'), u = structure(12:14, unit = 'kg', class = 'avector')), .Names = c('f', 'u'), row.names = 2:4, class = 'data.frame'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical17_b6504f50cf209c94858f3cbc7275b87a() {
        assertEval("argv <- list(raw(0), raw(0), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical18_5864a64f55eba01ac85a1cde8989f06d() {
        assertEval("argv <- list(c(1, 1, 0.5, 1, 1, 1, 1, 1, 0, 0, 0.5, 1, 0, 1, 0, 1, 0.5, 1, NA, 0.75, 0.5, 0, 0.5, 0.5, 0.666666666666667, 0.666666666666667, 1, 1, 0.666666666666667, 1, 0.666666666666667, 0.666666666666667, 0.333333333333333, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0, 1, 0.5, 1, 1, 0.5, 1, 1, 1, 0.5, 1, 1, NA, 0.5), c(1, 1, 0.5, 1, 1, 1, 1, 1, 0, 0, 0.5, 1, 0, 1, 0, 1, 0.5, 1, NA, 0.75, 0.5, 0, 0.5, 0.5, 0.666666666666667, 0.666666666666667, 1, 1, 0.666666666666667, 1, 0.666666666666667, 0.666666666666667, 0.333333333333333, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0, 1, 0.5, 1, 1, 0.5, 1, 1, 1, 0.5, 1, 1, NA, 0.5), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical19_133433b56bb566502db9cc4533c74fc1() {
        assertEval("argv <- list(c(0.0804034870161223, 10.3548347412639), structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08,     it = 898L, maxit = 5000, ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical2_3beeb211017fc7c5e36f89078c23ba43() {
        assertEval("argv <- list(structure(c(NA, 2, NA, 1, NA, 0), .Dim = 2:3), structure(c(NA, 2, NA, 1, NA, 0), .Dim = 2:3), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical20_1af12ffb649546231e8f20d7f6b93c6a() {
        assertEval("argv <- list(NaN, NaN, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical21_2bd255b24406f5a9b93558124935fed6() {
        assertEval("argv <- list(c('«', '»', '¿', '?'), 'TeX', TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical22_fbc65b1c19b2aff7dee41b38219ed601() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')), 42, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical23_4eb44d9d217c38caa488b3c35166451f() {
        assertEval("argv <- list(c(3L, 3L, NA, 3L), c(3L, 3L, NA, 3L), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical24_67b2fe6dbf438c15ec908556159f926d() {
        assertEval("argv <- list(list(c('r1', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15', 'r16', 'r17', 'r18', 'r19', 'r20', 'r21', 'r22', 'r23', 'r24', 'r25', 'r26', 'r27', 'r28', 'r29', 'r30', 'r31', 'r32', 'r33', 'r34', 'r35', 'r36', 'r37', 'r38', 'r39', 'r40'), c('c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'c10', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'c17', 'c18', 'c19', 'c20')), list(character(0), character(0)), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical25_a83a3629d1a811ceb317b76a5ccaf11a() {
        assertEval("argv <- list(c('object', NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), c('object', NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical26_0809ba1f180897c13de79035932cf30c() {
        assertEval("argv <- list(3.04888344611714e+29, 3.04888344611714e+29, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical27_b4438c320651e925e91febf5dff91267() {
        assertEval("argv <- list(structure('BunchKaufman', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), structure('Matrix', .Names = 'x', package = 'Matrix', class = structure('signature', package = 'methods')), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical28_de293a9e5ae455f54063652ce73ddd52() {
        assertEval("argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, -10L), class = 'data.frame'), structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, 10L), class = 'data.frame'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical29_aed8b2c8169173ba9697637d93cd1671() {
        assertEval("argv <- list(c('1', '2', NA), c('1', '2', NA), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical3_ae488584380826d82a07e30c967d3b24() {
        assertEval("argv <- list(structure(c('dgTMatrix', 'matrix.coo'), .Names = c('from', 'to'), package = c('Matrix', ''), class = structure('signature', package = 'methods')), structure(c('dgTMatrix', 'matrix.coo'), .Names = c('from', 'to'), package = c('Matrix', ''), class = structure('signature', package = 'methods')), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical30_a1a87d269d3739cd9bf558f2fdb066ec() {
        assertEval("argv <- list(c(-9.42477796076938, -6.28318530717959, -3.14159265358979, 0, 3.14159265358979, 6.28318530717959, 9.42477796076938, 12.5663706143592, 15.707963267949, 18.8495559215388), c(-9.42477796076938, -6.28318530717959, -3.14159265358979, 0, 3.14159265358979, 6.28318530717959, 9.42477796076938, 12.5663706143592, 15.707963267949, 18.8495559215388), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical31_be779c11d478d30decee8bd1d6e59c2f() {
        assertEval("argv <- list(structure('classGeneratorFunction', package = 'methods'), structure('classGeneratorFunction', package = 'methods'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical32_f812c0ab82842b9131b133ac2fcaedeb() {
        assertEval("argv <- list(structure(function (x) standardGeneric('cosh', .Primitive('cosh')), generic = structure('cosh', package = 'base'), package = 'base', group = list('Math'), valueClass = character(0), signature = 'x', default = .Primitive('cosh'), skeleton = quote(.Primitive('cosh')(x)), class = structure('standardGeneric', package = 'methods')), FALSE, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical33_b8ee9b1ce3c55d83417394acb877108f() {
        assertEval("argv <- list(structure(1L, match.length = 8L, useBytes = TRUE), structure(1L, match.length = 8L, useBytes = TRUE), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical35_d2d075a5f33e5a3ba19ae07a4bec8357() {
        assertEval("argv <- structure(list(x = expression(exp(-0.5 * u^2)), y = expression(exp(-0.5 *     u^2))), .Names = c('x', 'y'));do.call('identical', argv)");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical36_79850059a8f4d13ddcd947f591a2321a() {
        assertEval("argv <- structure(list(x = structure(list(X1.4 = 1:4), .Names = 'X1.4',     row.names = c(NA, -4L), class = 'data.frame'), y = structure(list(X1.4 = 1:4),     .Names = 'X1.4', row.names = c('1', '2', '3', '4'), class = 'data.frame')),     .Names = c('x', 'y'));do.call('identical', argv)");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical37_8c45751cd06e41fd83a4f22150cac4ef() {
        assertEval("argv <- structure(list(x = structure(list(a = NA, b = NA_integer_,     c = NA_real_, d = NA_complex_, e = 1, f = 1L, g = 1:3, h = c(NA,         1L, 2L, 3L), i = NA_character_, j = c('foo', NA, 'bar')),     .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')),     y = structure(list(a = NA, b = NA_integer_, c = NA_real_,         d = NA_complex_, e = 1, f = 1L, g = 1:3, h = c(NA, 1L,             2L, 3L), i = NA_character_, j = c('foo', NA, 'bar')),         .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',             'j'))), .Names = c('x', 'y'));do.call('identical', argv)");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical4_a1f9d0a3519c9dae72256307fc6b02c9() {
        assertEval("argv <- list(structure(3.14159265358979, comment = 'Start with pi', class = structure('num1', package = '.GlobalEnv')), structure(3.14159265358979, comment = 'Start with pi', class = structure('num1', package = '.GlobalEnv')), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical5_a49793f9fcd10d986b6fbda840ab252c() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')), structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical6_c5726d2da35d0f9d79c0ca28babc7a3a() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'), structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical7_bc852606780831574a1b6acdc0434aab() {
        assertEval("argv <- list(c(-1.38507061859438+0.31833672642477i, 0.0383231810219-1.42379885362755i, -0.763030162361974-0.405090858049187i, 0.212306135525839+0.995386565684023i, 1.42553796686779+0.95881778764026i, 0.744479822333976+0.918087896319951i, 0.70022940298623-0.15096960188161i, -0.22935461345173-1.2230687888662i, 0.197093861895352-0.868824288637794i, 1.20715377387226-1.04248536490429i), c(-1.38507061859438+0.31833672642477i, 0.0383231810219-1.42379885362755i, -0.763030162361974-0.405090858049187i, 0.212306135525839+0.995386565684023i, 1.42553796686779+0.95881778764026i, 0.744479822333976+0.918087896319951i, 0.70022940298623-0.15096960188161i, -0.22935461345173-1.2230687888662i, 0.197093861895352-0.868824288637794i, 1.20715377387226-1.04248536490429i), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical8_efe4e4741e3c2e339c2f713c30cfe015() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a', .Tsp = c(1, 1, 1), class = 'ts'), structure(list(a = 1), .Names = 'a', .Tsp = c(1, 1, 1), class = 'ts'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical9_62b4c0e7b380cb98f1d7e543c63eb8d7() {
        assertEval("argv <- list(c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE), cnternal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinifelse_testifelse1_ec936dcd79377482f9cb2596843512d5() {
        assertEval("argv <- structure(list(test = c(TRUE, TRUE, FALSE, TRUE, FALSE),     yes = 'True', no = 'False'), .Names = c('test', 'yes', 'no'));do.call('ifelse', argv)");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits1_5852f5e4a22632721d6bb9b9d48ececc() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Names = c('dtrMatrix', 'MatrixFactorization', 'ddenseMatrix', 'triangularMatrix', 'dMatrix', 'denseMatrix', 'Matrix', 'mMatrix')), 'factor', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits10_bfc23af919b4e6f2d873f276adc380ec() {
        assertEval("argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits11_8c529af4565809c23bdffe92a87d56d2() {
        assertEval("argv <- list(structure(list(srcfile = '/home/lzhao/hg/r-instrumented/library/stats/R/stats', frow = 853L, lrow = 853L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits12_1f7dbbb7c4fdb734473fe1f498b037a0() {
        assertEval("argv <- list(quote(y ~ a + b:c + d + e + e:d), 'formula', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits13_959db2f8d77d85225b98710dba01850e() {
        assertEval("argv <- list(structure(10, class = c('a', 'b')), c('a', 'b', 'c'), TRUE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits14_9f1ce228f8988ed683801408a8c74419() {
        assertEval("argv <- list(complex(0), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits15_5e1d54d32123ac2c52587e44303c9abf() {
        assertEval("argv <- list(structure(FALSE, .Tsp = c(0, 0, 1), class = 'ts'), 'ts', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits16_925b6cb42e331e2f2828af7691fc7f60() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits17_70d3fab8595162e95e13b7db07f45c41() {
        assertEval("argv <- list(raw(0), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits18_d781b396952ff9122e41a153a75d74d1() {
        assertEval("argv <- list(structure(c(-1.5116089581734, 0.200010507218348, 0.266001075015567, 0.339550302820724, 0.425045882083188, 0.496549005782181, 0.576998440511346, -0.909988579721932, -1.06576984591386, 0.174059431391812, -0.0372498129362256, -0.282881300668478, -0.488312023557303, -0.719445779363312), gradient = structure(c(0.160743714207466, 0.251172444221428, 0.307513919261763, 0.350467096622222, 0.367731527586793, 0.346345778958899, 0.262925702855199, -0.160743714207466, -0.251172444221428, -0.307513919261763, -0.350467096622222, -0.367731526984617, -0.346345778958899, -0.262925703156287), .Dim = c(7L, 2L, 1L)), .Dim = c(7L, 2L)), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits19_64e6a33e7740524c906e66eba5f6b508() {
        assertEval("argv <- list(structure(3.14159265358979, comment = 'Start with pi'), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits2_5c30e2dfc726fd31c1059134d956e1f7() {
        assertEval("argv <- list(structure(list(x = numeric(0), y = numeric(0), fac = structure(integer(0), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = integer(0), class = 'data.frame'), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits20_8d3c9192e97a2014de6628ccf63700e8() {
        assertEval("argv <- list(c(TRUE, NA, FALSE, TRUE), 'Date', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits21_90b160c051a4bdbf47eb57e20af1fa68() {
        assertEval("argv <- list(c(-1, 1, -1, 2, 1, NA, -1, 1, 4, 1, NA, 4, 1, 3, NA, 4, 2, 2, NA, 4, 4, 2, 4, 4, 2, 1, 4, 4, 3, 1, 1, 4, 1, 4, NA, 1, 4, 4, 2, 2, 4, 4, 3, 4, 2, 2, 3, 3, 4, 1, 1, 1, 4, 1, 4, 4, 4, 4, NA, 4, 4, 4, NA, 1, 2, 3, 4, 3, 4, 2, 4, 4, 1, 4, 1, 4, NA, 4, 2, 1, 4, 1, 1, 1, 4, 4, 2, 4, 1, 1, 1, 4, 1, 1, 1, 4, 3, 1, 4, 3, 2, 4, 3, 1, 4, 2, 4, NA, 4, 4, 4, 2, 1, 4, 4, NA, 2, 4, 4, 1, 1, 1, 1, 4, 1, 2, 3, 2, 1, 4, 4, 4, 1, NA, 4, 2, 2, 2, 4, 4, 3, 3, 4, 2, 4, 3, 1, 1, 4, 2, 4, 3, 1, 4, 3, 4, 4, 1, 1, 4, 4, 3, 1, 1, 2, 1, 3, 4, 2, 2, 2, 4, 4, 3, 2, 1, 1, 4, 1, 1, 2, NA, 2, 3, 3, 2, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 2, 2, 1, 4, 1, 4, 3, 4, 2, 3, 1, 3, 1, 4, 1, 4, 1, 4, 3, 3, 4, 4, 1, NA, 3, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 2, 4, 4, 1, 2, NA, 4, 4, 4, 4, 1, 2, 1, 1, 2, 1, 4, 2, 3, 1, 4, 4, 4, 1, 2, 1, 4, 2, 1, 3, 1, 2, 2, 1, 2, 1, NA, 3, 2, 2, 4, 1, 4, 4, 2, 4, 4, 4, 2, 1, 4, 2, 4, 4, 4, 4, 4, 1, 3, 4, 3, 4, 1, NA, 4, NA, 1, 1, 1, 4, 4, 4, 4, 2, 4, 3, 2, NA, 1, 4, 4, 3, 4, 4, 4, 2, 4, 2, 1, 4, 4, NA, 4, 4, 3, 3, 4, 2, 2, 4, 1, 4, 4, 4, 3, 4, 4, 4, 3, 2, 1, 3, 1, 4, 1, 4, 2, NA, 1, 4, 4, 3, 1, 4, 1, 4, 1, 4, 4, 1, 2, 2, 1, 4, 1, 1, 4, NA, 4, NA, 4, 4, 4, 1, 4, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 4, 2, 3, 3, 1, 3, 1, 4, 1, 3, 2, 2, 4, 1, NA, 3, 4, 2, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 2, 1, 4, 4, 2, 4, 2, 1, 2, 1, 1, 1, 1, 4, 4, 1, 1, 4, 1, 4, 4, 4, 1, 1, NA, 3, 2, 4, 4, 4, 4, 2, 3, 3, 2, NA, 4, 2, 4, 4, 1, 1, 4, 4, 1, 1, 4, 1, 2, 2, 2, 2, 1, 4, 4, 1, 2, 2, 2, 3, 4, 4, 3, 4, 1, 1, 4, 4, NA, 4, 1, 4, 4, 4, 1, 4, 4, 1, 2, 4, 4, 4, 4, 1, 2, 4, 4, 2, 1, 4, 2, 4, 2, 2, 4, 1, 3, 3, 2, 4, 1, 4, 4, 4, 1, NA, 4, 4, 2, 4, 4, 4, 4, 4, 2, NA, 4, 2, 4, 3, 1, 4, 4, 3, 4, 2, 4, 4, 1, 2, 1, 4, 1, 3, 3, 1, 4, 4, 2, 4, 4, 4, 4, 3, 2, 3, 3, 2, NA, 3, 4, 4, 3, 3, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 3, 4, 1, 3, 1, NA, 4, 1, 2, 2, 1, 4, 3, 3, 4, 1, 1, 3), 'Date', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits22_ef4c22e216fdb8fb9212efaabe0fb202() {
        assertEval("argv <- list(.Primitive('['), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits23_2af129258b24daf188cb3dc63da6b833() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96), .Dim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4')), .Tsp = c(1, 101, 1), class = c('mts', 'ts', 'matrix')), 'ts', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits24_970b3922e6046530a588b13a248e8feb() {
        assertEval("argv <- list(c(10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 1e+05, 110000, 120000, 130000, 140000, 150000, 160000, 170000, 180000, 190000, 2e+05, 210000, 220000, 230000, 240000, 250000, 260000, 270000, 280000, 290000, 3e+05, 310000, 320000, 330000, 340000, 350000, 360000, 370000, 380000, 390000, 4e+05, 410000, 420000, 430000, 440000, 450000, 460000, 470000, 480000, 490000, 5e+05, 510000, 520000, 530000, 540000, 550000, 560000, 570000, 580000, 590000, 6e+05, 610000, 620000, 630000, 640000, 650000, 660000, 670000, 680000, 690000, 7e+05, 710000, 720000, 730000, 740000, 750000, 760000, 770000, 780000, 790000, 8e+05, 810000, 820000, 830000, 840000, 850000, 860000, 870000, 880000, 890000, 9e+05, 910000, 920000, 930000, 940000, 950000, 960000, 970000, 980000, 990000, 1e+06), 'POSIXlt', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits25_b0acf814f6c9a65f00051ccc7119efab() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/grid/R/grid', '/home/lzhao/hg/r-instrumented/library/grid/R/grid'), frow = 3581:3582, lrow = c(3581L, 3590L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits26_5d8a3118674679ed2b9d0fa342bc1411() {
        assertEval("argv <- list('  Running ‘scales.R’', 'condition', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits27_41438db3de15f4bfd089ae3fb3591be5() {
        assertEval("argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i), 'ts', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits28_08c15f87e4c62f40a972605387f1f878() {
        assertEval("argv <- list(structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits29_cc26944155345177f9c0ce297d4fa1c6() {
        assertEval("argv <- list(structure(c(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'), 'ts', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits3_a70d84bf3ea82b20a36d92ee781d294c() {
        assertEval("argv <- list(structure(c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Tsp = c(2, 11, 1)), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits30_a388a479684973ef42ee7ca9a189f163() {
        assertEval("argv <- list(structure(list(coefficients = numeric(0), residuals = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), fitted.values = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), weights = NULL, rank = 0L, df.residual = 10L,     call = quote(lm(formula = y ~ 0)), terms = quote(y ~ 0), model = structure(list(y = c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434)), .Names = 'y', terms = quote(y ~ 0), row.names = c(NA, 10L), class = 'data.frame')), .Names = c('coefficients', 'residuals', 'fitted.values', 'weights', 'rank', 'df.residual', 'call', 'terms', 'model'), class = 'lm'), 'lm', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits31_939b703cc3e03c5b28905642d731b7ed() {
        assertEval("argv <- list(structure(c(-0.562441486309934, -0.588967592535822, 0.0277608937997097, 0.568074124752969, 3.89980510825846, -0.428174866497729, -0.343990813420242, -0.260996370058754, -2.31774610938305, 0.314764947225063, -0.455124436264437, -0.0444006414474544, -0.27748974692001, -0.303134023269405, -0.670168347915028, 2.92643313367, -0.749546667806845, -0.410394401887929, -0.203261263063707, 0.1847365997012, 0.128559671155683, 0.313558179929332, -0.0668425264405297, -0.106427678524531, -0.523747793519006, -0.402585404761851, 0.0642079595716389, -0.779859286629166, 0.356484381211739, -0.625053119472271, 1.31547628490512, -0.21959878152752, -0.102402088986461), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')), 'factor', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits32_c391f3a754cfff3c7aa64e12633ddfca() {
        assertEval("argv <- list(quote(breaks ~ (wool + tension) - tension), 'formula', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits34_a2ad07c5f38094f53750a16828fb91bb() {
        assertEval("argv <- structure(list(x = structure(c(1412799280.04908, 1412799280.04908),     class = c('POSIXct', 'POSIXt')), what = 'POSIXt'), .Names = c('x',     'what'));do.call('inherits', argv)");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits4_e07da4d4627a5678d119bd7b434c837c() {
        assertEval("argv <- list(structure(list(Sepal.Length = c(4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7, 7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2), Sepal.Width = c(3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3, 3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2, 3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9, 2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8, 3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5, 2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3, 2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2, 3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3, 2.8, 3),     Petal.Length = c(1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8    ), Petal.Width = c(0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5, 1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1,     1.6)), .Names = c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width'), row.names = 30:130, class = 'data.frame'), 'data.frame', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits5_7ec226f51c308eb70a590e3fc8a446c0() {
        assertEval("argv <- list(structure(1L, .Dim = 1L), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits6_79af8490d40c99d57a6db5e87203fd95() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), 'Surv', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits7_3195fee38890f15a30b702227568c326() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('Ctl', 'A', 'B'), class = 'factor', contrasts = 'contr.treatment'), 'factor', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits8_32611a32fa4bc56ac1b85bbe6005530c() {
        assertEval("argv <- list(c(NA, NA, '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/groupedData.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/groupedData.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/groupedData.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/groupedData.R'), 'ordered', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits9_e4cfef91439ea6e7df461daee1f749c1() {
        assertEval("argv <- list(list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit'))), 'try-error', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinintToBits_testintToBits1_8dcf932acd5e3b3ccf1448cb2645ddb7() {
        assertEval("argv <- list(list()); .Internal(intToBits(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinintToBits_testintToBits2_9ca4884c79d6174b2ebb62f73a8f41ad() {
        assertEval("argv <- list(NULL); .Internal(intToBits(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf81_85be9fa767479aa6a70148af54a747bb() {
        assertEval("argv <- list(NULL, FALSE); .Internal(intToUtf8(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf82_852fb44f5b58696388588b830de7c7b6() {
        assertEval("argv <- list(list(), FALSE); .Internal(intToUtf8(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf83_337738aec4a636878fbe8338a9232e10() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(intToUtf8(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf85_008af971249ec5dd878fd1a48dfd58bc() {
        assertEval("argv <- structure(list(x = NA_integer_, multiple = TRUE), .Names = c('x',     'multiple'));do.call('intToUtf8', argv)");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf86_8dbb635372374f7c1b23dbd9693dea5a() {
        assertEval("argv <- structure(list(x = NA_integer_), .Names = 'x');do.call('intToUtf8', argv)");
    }

    @Test
    public void TestrGenBuiltininteger_testinteger1_4200a3a11c1dece1b16f0c313849ed47() {
        assertEval("argv <- structure(list(length = 2), .Names = 'length');do.call('integer', argv)");
    }

    @Test
    public void TestrGenBuiltininteraction_testinteraction1_877a2a7d62d974437249851fa72af951() {
        assertEval("argv <- list(c('a.b', 'a'), c('c', 'b.c'));do.call('interaction', argv)");
    }

    @Test
    public void TestrGenBuiltininteractive_testinteractive1_1d0f813e4dd9214aa77a2b4f61230e94() {
        assertEval("argv <- list();do.call('interactive', argv)");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible1_617e6f35a107a4d2bd98f7c28bdfcc67() {
        assertEval("argv <- list(c(3.14159265358977, 3.14159265358981));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible10_0ea1a02b76f917729ffb5550cdc79c49() {
        assertEval("argv <- list(structure(list(surname = structure(1:5, .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(c(1L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(NA_integer_, NA_integer_, NA_integer_, NA_integer_, NA_integer_), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA_integer_, NA_integer_, NA_integer_, NA_integer_, NA_integer_), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c(NA, -5L), class = 'data.frame'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible11_34db0568570617234ca5a6bdb0b13ece() {
        assertEval("argv <- list(structure('Error in `[.data.frame`(dd, , \\'x\\') : undefined columns selected\\n', class = 'try-error', condition = structure(list(message = 'undefined columns selected', call = quote(`[.data.frame`(dd, , 'x'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible12_7d603b5ccd663d875b03404bf3cebed3() {
        assertEval("argv <- list(structure(list(value = structure(c(NA, NA, 1L, 9L), .Names = c('size', 'current', 'direction', 'eval_depth')), visible = TRUE), .Names = c('value', 'visible')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible13_975c56f76490a5754564443a34069769() {
        assertEval("argv <- list(structure(function (...) new('test1', ...), className = structure('test1', package = '.GlobalEnv'), package = '.GlobalEnv', class = structure('classGeneratorFunction', package = 'methods')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible14_0429d9d268d0ca8370cb89a5195e0b57() {
        assertEval("argv <- list(structure(list(coefficients = structure(c(-0.0880891704401362, -0.508170309402877, -0.00510235947825228, 0.0737329622006759), .Names = c('(Intercept)', 'x1', 'z', 'x1:z')), residuals = structure(c(0.471500137591588, -0.418206002310214, -1.08038471222353, -0.582889907355648, 0.671048026430597, 1.41161034263987, 0.0130575334430522, 0.598273046028054, -0.0752209852417045, -1.00878747900206), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), effects = structure(c(0.483887391035467, -0.316505532770654, -0.0456368905560498, -0.659487662652535, 0.502868792132386, 1.20242722895332, -0.301792379913696, 0.0429789614006214, -0.536741577656989, -1.91019253457038), .Names = c('(Intercept)', 'x1', 'z', 'x1:z', '', '', '', '', '', '')), rank = 4L, fitted.values = structure(c(-0.527628877120589, 0.262410495604884, -0.390367671675741, 0.104739852247028, -0.253106466230895, -0.0529307911108283, -0.115845260786048, -0.210601434468685, 0.0214159446587994, -0.368272077826542), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), assign = 0:3, qr = structure(list(qr = structure(c(-3.16227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0, 3.16227766016838, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -17.3925271309261, -1.58113883008419, 8.94427190999916, 0.0204447427551466, -0.048810308101025, -0.203162054994832, -0.272417105851004, -0.426768852744811, -0.496023903600983, -0.65037565049479, 1.58113883008419, 17.3925271309261, 2.77555756156289e-17, -8.94427190999916, 0.202312619197469, -0.0523458957441388, 0.422028033632482, -0.279844076809084, 0.641743448067495, -0.507342257874029), .Dim = c(10L, 4L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), c('(Intercept)', 'x1', 'z', 'x1:z')), assign = 0:3, contrasts = structure(list(    x = 'contr.helmert'), .Names = 'x')), qraux = c(1.31622776601684, 1.39220245868163, 1.17479648964895, 1.17515228532081), pivot = 1:4, tol = 1e-07, rank = 4L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 6L, contrasts = structure(list(x = 'contr.helmert'), .Names = 'x'), xlevels = structure(list(), .Names = character(0)), call = quote(lm(formula = y ~ x * z)), terms = quote(y ~ x * z), model = structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), terms = quote(y ~ x * z), row.names = c(NA, 10L), class = 'data.frame')), .Names = c('coefficients', 'residuals', 'effects', 'rank', 'fitted.values', 'assign', 'qr', 'df.residual', 'contrasts', 'xlevels', 'call', 'terms', 'model'), class = 'lm'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible15_31c0731d7ba5f7db2e70451fc22f104d() {
        assertEval("argv <- list(structure('Error in scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings,  : \\n  line 1 did not have 4 elements\\n', class = 'try-error', condition = structure(list(message = 'line 1 did not have 4 elements', call = quote(scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, flush, fill, strip.white, quiet, blank.lines.skip, multi.line, comment.char, allowEscapes, encoding))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible16_632474aa60f9f8e86c2c21909b6d0576() {
        assertEval("argv <- list(structure('Error in cor(Z[, FALSE], use = \\'pairwise.complete.obs\\', method = \\'kendall\\') : \\n  'x' is empty\\n', class = 'try-error', condition = structure(list(message = ''x' is empty', call = quote(cor(Z[, FALSE], use = 'pairwise.complete.obs', method = 'kendall'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible17_8ea03ab2d62ec0fb64963c404516b53b() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible18_6c78d740829bc1cb9a9c0ad9032914b3() {
        assertEval("argv <- list(structure(c(3, 8), .Dim = 2L, .Dimnames = structure(list(g = c('1', '2')), .Names = 'g'), call = quote(by.data.frame(data = X, INDICES = g, FUN = colMeans)), class = 'by'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible19_c9108ae2baa0501bff9f7c38148bb7cb() {
        assertEval("argv <- list(structure('Error in rnorm(2, c(1, NA)) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(2, c(1, NA)))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible2_c67b2ec11dd97e94653c8734488c781f() {
        assertEval("argv <- list(structure('Error in cov(rnorm(10), NULL) : \\n  supply both 'x' and 'y' or a matrix-like 'x'\\n', class = 'try-error', condition = structure(list(message = 'supply both 'x' and 'y' or a matrix-like 'x'', call = quote(cov(rnorm(10), NULL))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible20_b55d9d7a68b893fb8589c2395ab94271() {
        assertEval("argv <- list(structure(list(z = structure(c(1395082040.29392, 1395082040.29392, 1395082040.29392, 1395082040.29392, 1395082040.29392), class = c('AsIs', 'POSIXct', 'POSIXt'))), .Names = 'z', row.names = c(NA, -5L), class = 'data.frame'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible21_cec5e2edce17bb8145b060a6eba3bd65() {
        assertEval("argv <- list(quote(~a + b:c + d + e + e:d));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible22_dbcbe9c02e4985a6d6ba50db32513413() {
        assertEval("argv <- list(structure(list(tables = structure(list(`Grand mean` = 103.87323943662, N = structure(c(78.7365206866197, 98.5088731171753, 113.842206450509, 123.008873117175), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'), class = 'mtable'), `V:N` = structure(c(79.5323303457107, 86.1989970123773, 69.7732394366197, 98.0323303457106, 108.032330345711, 89.1989970123773, 114.198997012377, 116.698997012377, 110.365663679044, 124.365663679044, 126.365663679044, 118.032330345711), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')), class = 'mtable')), .Names = c('Grand mean', 'N', 'V:N')), n = structure(list(N = structure(c(17, 18, 18, 18), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N')), `V:N` = structure(c(6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')))), .Names = c('N', 'V:N'))), .Names = c('tables', 'n'), type = 'means', class = c('tables_aov', 'list.of')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible23_9107ab6d914c0c01314300b9d122cdbf() {
        assertEval("argv <- list(structure(list(A = 0:10, `NA` = 20:30), .Names = c('A', NA), class = 'data.frame', row.names = c(NA, -11L)));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible24_b3c39c78a239b1a4e5711335c090a1f2() {
        assertEval("argv <- list(structure(c(-Inf, -Inf, -2.248e+263, -Inf, -3.777e+116, -1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = 'table'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible25_6398318a0787764c91a77e3b4fc26c35() {
        assertEval("argv <- list(structure(list(Df = c(1, 1, NA, 2), Deviance = c(12.2441566485997, 28.4640218366572, 32.825622681839, 32.4303239692005), AIC = c(73.9421143635373, 90.1619795515948, 92.5235803967766, 96.1282816841381)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('+ M.user', '+ Temp', '<none>', '+ Soft'), class = c('anova', 'data.frame')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible26_20fd9d28871341957354286067b772a3() {
        assertEval("argv <- list(c(-1, -0.5, 0, 0.5, 1));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible27_9d6359ac126c998e0e4fad50f84fa57b() {
        assertEval("argv <- list(structure(c('Min.   :  5.00  ', '1st Qu.: 12.50  ', 'Median : 23.00  ', 'Mean   : 29.48  ', '3rd Qu.: 33.50  ', 'Max.   :161.00  ', 'Min.   :0.0000  ', '1st Qu.:1.0000  ', 'Median :1.0000  ', 'Mean   :0.7826  ', '3rd Qu.:1.0000  ', 'Max.   :1.0000  ', 'Maintained   :11  ', 'Nonmaintained:12  ', NA, NA, NA, NA), .Dim = c(6L, 3L), .Dimnames = list(c('', '', '', '', '', ''), c('     time', '    status', '            x')), class = 'table'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible28_423581922e5ae91f02e80638072e19f0() {
        assertEval("argv <- list(structure(list(latin1 = 0L, utf8 = 0L, bytes = 0L, unknown = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('non_ASCII', 'where')))), .Names = c('latin1', 'utf8', 'bytes', 'unknown'), class = 'check_package_datasets'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible29_2701d0d8939ad9536cc9716e46feb080() {
        assertEval("argv <- list(structure(NA, .Tsp = c(1, 1, 1), class = 'ts'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible3_305f44fe65c4ff50c6b1dc176c6c399a() {
        assertEval("argv <- list(quote(Y ~ X));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible30_6896f742c1f16d75602045edbc79a02a() {
        assertEval("argv <- list(structure(list(), class = 'formula'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible31_156f43d2bebed7008a153d5df86d06b9() {
        assertEval("argv <- list(structure(list(strip.vp = structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(-0.0330971105140634, 1.03229244338581), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = c(1L, 1L), layout.pos.col = c(1L, 1L), valid.just = c(0.5, 0.5), valid.pos.row = c(1L, 1L), valid.pos.col = c(1L, 1L), name = 'GRID.VP.40'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport'), plot.vp = structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'),     width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(-0.0330971105140634, 1.03229244338581), yscale = c(-0.0353837383445352, 1.04704589419998), angle = 0, layout = NULL, layout.pos.row = c(2L, 2L), layout.pos.col = c(1L, 1L), valid.just = c(0.5, 0.5), valid.pos.row = c(2L, 2L), valid.pos.col = c(1L, 1L), name = 'GRID.VP.41'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport')), .Names = c('strip.vp', 'plot.vp')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible32_6bbea709b64ef4974de0248dcc6ad2e0() {
        assertEval("argv <- list(structure(list(name = 'list', objs = structure(list(`package:base` = .Primitive('list'), .Primitive('list')), .Names = c('package:base', '')), where = c('package:base', 'namespace:base'), visible = c(TRUE, FALSE), dups = c(FALSE, TRUE)), .Names = c('name', 'objs', 'where', 'visible', 'dups'), class = 'getAnywhere'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible33_1356f4f5c749535180ae7615c6fe7d0d() {
        assertEval("argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible34_837f9af5584ebfa9bdd284710d213824() {
        assertEval("argv <- list(structure(list(sec = 59.7693939208984, min = 47L, hour = 18L, mday = 17L, mon = 2L, year = 114L, wday = 1L, yday = 75L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible35_95a3a6e7b953ad9a8b4d348d6bf7583f() {
        assertEval("argv <- list(structure(list(x = structure(c(63.8079770211941, 64.1015289795127, 64.3950809378313, 64.6886328961499, 64.9821848544685, 65.2757368127871, 65.5692887711057, 65.8628407294243, 66.1563926877429, 66.4499446460616, 66.7434966043802, 67.0370485626988, 67.3306005210174, 67.624152479336, 67.9177044376546, 68.2112563959732, 68.5048083542918, 68.7983603126104, 69.091912270929, 69.3854642292476, 69.6790161875662, 69.9725681458849, 70.2661201042035, 70.5596720625221, 70.8532240208407, 71.1467759791593, 71.4403279374779, 71.7338798957965, 72.0274318541151, 72.3209838124337, 72.6145357707524, 72.908087729071, 73.2016396873896, 73.4951916457082, 73.7887436040268, 74.0822955623454, 74.375847520664, 74.6693994789826, 74.9629514373012, 75.2565033956198, 75.5500553539384, 75.843607312257, 76.1371592705757, 76.4307112288943, 76.7242631872129, 77.0178151455315, 77.3113671038501, 77.6049190621687, 77.8984710204873, 78.1920229788059), unit = 'native', valid.unit = 4L, class = 'unit'), y = structure(c(0.000292389503184205, 0.000897790147984954, 0.00234624782100963, 0.00521720896677798, 0.00989423163518025, 0.015999825469344, 0.0221693602680603, 0.0266484406702544, 0.0287592128884921, 0.0302032637184832, 0.0349150884986298, 0.0473117449499264, 0.069811568153779, 0.101849712371392, 0.14014558800306, 0.179532924691013, 0.213121481011927, 0.233373692723354, 0.235396372946243, 0.221556776074102, 0.201658872746641, 0.187397555681655, 0.184299939839784, 0.187901304936084, 0.186879499085897, 0.171534710980926, 0.140953197828419, 0.103411084284294, 0.0700968149951466, 0.0478115464491638, 0.0363916682131507, 0.0310202066683672, 0.0267344490723088, 0.0212112857883806, 0.0149149265224817, 0.00956339674119522, 0.00665150505587597, 0.00689835920722663, 0.010231338259878, 0.0157315524205489, 0.0215689799990253, 0.0254154063025622, 0.0255363521874538, 0.0218531199052928, 0.0159232922023665, 0.00987834564939972, 0.00521442208935573, 0.00234582757042574, 0.000897736459776011, 0.000292383673435392), unit = 'native', valid.unit = 4L, class = 'unit'),     arrow = NULL, name = 'plot_02.density.lines.panel.3.1', gp = structure(list(lty = 1, col = '#0080ff', lwd = 1, alpha = 1), .Names = c('lty', 'col', 'lwd', 'alpha'), class = 'gpar'), vp = NULL), .Names = c('x', 'y', 'arrow', 'name', 'gp', 'vp'), class = c('lines', 'grob', 'gDesc')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible37_2f3bd500af8625f0f1b6c0bc2896dd0a() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible38_c70c2774d6796dc6a64ef225992330e8() {
        assertEval("argv <- list(structure(list(value = 4.94065645841247e-324, visible = TRUE), .Names = c('value', 'visible')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible39_8159f8ac05fe20dd4389e561b862fdb3() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor'), c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = c('c0', 'c0'), row.names = integer(0), class = 'data.frame'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible4_70fbe8ede7b0f5f5c7e8813d35dd20e4() {
        assertEval("argv <- list(structure(list(height = numeric(0), weight = numeric(0)), .Names = c('height', 'weight'), row.names = integer(0), class = 'data.frame'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible40_0df6e2d8ec6995f7bc86b592b20008f8() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible41_a29afbe597cee1fbb67c29dd2fd1a72d() {
        assertEval("argv <- list(c(1e-10, 1e+49, 1e+108, 1e+167, 1e+226));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible42_c9d5585333ea8506fd33360cf9a7a110() {
        assertEval("argv <- list(structure('checkRd: (-3) Surv.Rd:90: Unnecessary braces at ‘{time2}’', class = 'checkRd'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible43_8c4a58085ea7fd3a2d6695118743f21a() {
        assertEval("argv <- list(structure(list(raster = structure('#000000', .Dim = c(1L, 1L), class = 'raster'), x = structure(0, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = NULL, height = NULL, just = 'centre', hjust = NULL, vjust = NULL, interpolate = TRUE, name = 'GRID.rastergrob.785', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('raster', 'x', 'y', 'width', 'height', 'just', 'hjust', 'vjust', 'interpolate', 'name', 'gp', 'vp'), class = c('rastergrob', 'grob', 'gDesc')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible44_bd7126349ba627ff21ae3cea3d9e32d3() {
        assertEval("argv <- list(structure(c('0', 'NULL', 'NULL'), .Names = c('Length', 'Class', 'Mode'), class = c('summaryDefault', 'table')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible45_fec62c8ea148215018219607475780ee() {
        assertEval("argv <- list(structure(list(TEST = structure(c(1L, 2L, 6L, 3L, 4L, 5L, 10L, 11L, 9L, 7L, 8L), .Label = c('1', '2', '4', '5', '\\\\040', '\\\\b', '\\\\n', '\\\\r', '\\\\t', '\\\\x20', 'c:\\\\spencer\\\\tests'), class = 'factor')), .Names = 'TEST', class = 'data.frame', row.names = c(NA, -11L)));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible46_36112746bbcb8f587cea3b35923b948e() {
        assertEval("argv <- list(structure(list(size = numeric(0), isdir = logical(0), mode = structure(integer(0), class = 'octmode'), mtime = structure(numeric(0), class = c('POSIXct', 'POSIXt')), ctime = structure(numeric(0), class = c('POSIXct', 'POSIXt')), atime = structure(numeric(0), class = c('POSIXct', 'POSIXt')), uid = integer(0), gid = integer(0), uname = character(0), grname = character(0)), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = character(0)));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible47_b695abc2e9c49487a19967aaee12b78c() {
        assertEval("argv <- list(structure(list(a = c(1L, 4L, 7L), b = c(2L, 5L, 8L), c = c(3L, 6L, 9L)), .Names = c('a', 'b', 'c'), class = 'data.frame', row.names = c(NA, -3L)));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible49_7c6403ce92547d64d04d1c76c48fe755() {
        assertEval("argv <- list(structure('Error in rnorm(1, sd = Inf) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible5_8f52a048e7a1cec98a3a0b5a0e5cc34e() {
        assertEval("argv <- list(structure(c('Min.   : 1.000  ', '1st Qu.: 9.000  ', 'Median :18.000  ', 'Mean   :14.742  ', '3rd Qu.:20.000  ', 'Max.   :23.000  ', NA, 'Min.   :5.0000  ', '1st Qu.:5.3000  ', 'Median :6.1000  ', 'Mean   :6.0841  ', '3rd Qu.:6.6000  ', 'Max.   :7.7000  ', NA, 'Min.   :  1.000  ', '1st Qu.: 24.250  ', 'Median : 56.500  ', 'Mean   : 56.928  ', '3rd Qu.: 86.750  ', 'Max.   :117.000  ', 'NA's   :16  ', 'Min.   :  0.500  ', '1st Qu.: 11.325  ', 'Median : 23.400  ', 'Mean   : 45.603  ', '3rd Qu.: 47.550  ', 'Max.   :370.000  ', NA, 'Min.   :0.00300  ', '1st Qu.:0.04425  ', 'Median :0.11300  ', 'Mean   :0.15422  ', '3rd Qu.:0.21925  ', 'Max.   :0.81000  ', NA), .Dim = c(7L, 5L), .Dimnames = list(c('', '', '', '', '', '', ''), c('    event', '     mag', '   station', '     dist', '    accel')), class = 'table'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible50_cbd167372895093e2d28ea5d8e4aa7ad() {
        assertEval("argv <- list(structure(1395078479.75887, class = c('POSIXct', 'POSIXt')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible51_68b496fba06c5ceeb71dad776842ba7b() {
        assertEval("argv <- list(structure('Error in read.table(\\'foo1\\') : no lines available in input\\n', class = 'try-error', condition = structure(list(message = 'no lines available in input', call = quote(read.table('foo1'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible52_f2e6728eb51989ba4c939d45e547314e() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Dim = c(10L, 2L), .Dimnames = list(NULL, c('tt', 'tt + 1')), .Tsp = c(1920.5, 1921.25, 12), class = c('mts', 'ts', 'matrix')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible6_40df8f181221be318c35ef164cf2d10d() {
        assertEval("argv <- list(structure(list(call = quote(lm(formula = y ~ x1 + x2 + x3)), terms = quote(y ~ x1 + x2 + x3), residuals = structure(c(0.224762433374997, 0.4813346401898, -0.548705796690786, -0.873306430909872, 0.3255545927283, -0.288240908441576, 0.530823516045489, -0.0649703574297026, 1.2699009772491, -1.05715266611575), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), coefficients = structure(c(1.47191076131574, 0.586694550701453, 0.258706725324317, 0.948371836939988, 0.396080061109718, 0.350912037541581, 1.55203972111298, 1.48125242421363, 0.737240953991673, 0.164593338447767, 0.182090654313858, 0.484947927602608), .Dim = 3:4, .Dimnames = list(c('(Intercept)', 'x1', 'x3'), c('Estimate', 'Std. Error', 't value', 'Pr(>|t|)'))), aliased = structure(c(FALSE, FALSE, TRUE, FALSE), .Names = c('(Intercept)', 'x1', 'x2', 'x3')), sigma = 0.806334473232766, df = c(3L, 7L, 4L), r.squared = 0.932605950232242, adj.r.squared = 0.913350507441455, fstatistic = structure(c(48.4333681840033, 2, 7), .Names = c('value', 'numdf', 'dendf')), cov.unscaled = structure(c(1.38333333333333, -0.525000000000001, 0.416666666666667, -0.525000000000001, 0.241287878787879, -0.208333333333334, 0.416666666666667, -0.208333333333334, 0.18939393939394), .Dim = c(3L, 3L), .Dimnames = list(c('(Intercept)', 'x1', 'x3'), c('(Intercept)', 'x1', 'x3'))), correlation = structure(c(1, -0.908715905467124, 0.814033538872717, -0.908715905467124, 1, -0.974558628915209, 0.814033538872717, -0.974558628915209, 1), .Dim = c(3L, 3L), .Dimnames = list(    c('(Intercept)', 'x1', 'x3'), c('(Intercept)', 'x1', 'x3'))), symbolic.cor = FALSE), .Names = c('call', 'terms', 'residuals', 'coefficients', 'aliased', 'sigma', 'df', 'r.squared', 'adj.r.squared', 'fstatistic', 'cov.unscaled', 'correlation', 'symbolic.cor'), class = 'summary.lm'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible7_a5f3c84a06fa5286ea8195ce6130e445() {
        assertEval("argv <- list(structure(list(call = quote(lm(formula = y ~ 0)), terms = quote(y ~ 0), aliased = logical(0), residuals = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), df = c(0L, 10L, 0L), coefficients = structure(logical(0), .Dim = c(0L, 4L), .Dimnames = list(NULL, c('Estimate', 'Std. Error', 't value', 'Pr(>|t|)'))), sigma = 0.523484262069588, adj.r.squared = 0, r.squared = 0), .Names = c('call', 'terms', 'aliased', 'residuals', 'df', 'coefficients', 'sigma', 'adj.r.squared', 'r.squared'), class = 'summary.lm'));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible8_3cf4a7fccc369e7f23487c93513eb6d7() {
        assertEval("argv <- list(structure(list(width = 80L, minIndent = 10L, extraIndent = 4L, sectionIndent = 5L, sectionExtra = 2L, itemBullet = '• ', enumFormat = function (n) sprintf('%d. ', n), showURLs = FALSE, code_quote = TRUE, underline_titles = FALSE), .Names = c('width', 'minIndent', 'extraIndent', 'sectionIndent', 'sectionExtra', 'itemBullet', 'enumFormat', 'showURLs', 'code_quote', 'underline_titles')));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible9_cd7f44c88712d72f69696d5053761563() {
        assertEval("argv <- list(quote(breaks ~ (wool + tension)^2));invisible(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv1_1118796780eb467db770c3578d5271c0() {
        assertEval("argv <- list(FALSE); .Internal(isNamespaceEnv(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv2_ef0ec9653df3ba8cc68cec0a9ccafe4c() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(isNamespaceEnv(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv3_2f32d4a6a135fac444e8c9f6d951a185() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame')); .Internal(isNamespaceEnv(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinisOpen_testisOpen1_5a795842bfaa3be0d7b7f7c5a95f4edc() {
        assertEval("argv <- list(structure(2L, class = c('terminal', 'connection')), 0L); .Internal(isOpen(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisOpen_testisOpen3_1fa961444bd5aaedc5e755eec3fe9aa6() {
        assertEval("argv <- list(FALSE, 2L); .Internal(isOpen(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisR_testisR1_65d9866a66c1fdff3672e8ceb08fcb8d() {
        assertEval("argv <- list();do.call('is.R', argv)");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS41_4907b7a4490b3f1a958ab27c3810a7e5() {
        assertEval("argv <- list(c('time', 'status'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS410_229aadb560bf0ed9f80b0fb684501f90() {
        assertEval("argv <- list(structure(list(coefficients = structure(c(62.4053692999179, 1.55110264750845, 0.510167579684914, 0.101909403579661, -0.144061029071015), .Names = c('(Intercept)', 'x1', 'x2', 'x3', 'x4')), residuals = structure(c(0.00476041849820263, 1.51120069970905, -1.67093753208295, -1.72710025504269, 0.250755561773019, 3.92544270216433, -1.44866908650026, -3.17498851728652, 1.3783494772083, 0.281547998741553, 1.99098357125943, 0.972989034920119, -2.2943340733616), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13')), effects = structure(c(-344.052796708698, 38.0798677535417, -34.7531619513928, -3.12951579377076, 0.496965514049109, 4.50219669010871, -0.53327716269669, -2.71488989732451, 1.79317596396333, 1.57288365899254, 2.82474425399188, 1.8967418325489, -1.63480882826157), .Names = c('(Intercept)', 'x1', 'x2', 'x3', 'x4', '', '', '', '', '', '', '', '')), rank = 5L, fitted.values = structure(c(78.4952395815018, 72.7887993002909, 105.970937532083, 89.3271002550427, 95.649244438227, 105.274557297836, 104.1486690865, 75.6749885172865, 91.7216505227917, 115.618452001258, 81.8090164287406, 112.32701096508, 111.694334073362), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13')), assign = 0:4, qr = structure(list(qr = structure(c(-3.60555127546399, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, 0.277350098112615, -26.9029595169236, 20.3772120082893, -0.178565892506596, -0.178565892506596, 0.0177318148722558, -0.178565892506596, 0.214029522251108, 0.312178375940534, 0.263103949095821, -0.669310160953726, 0.312178375940534, -0.178565892506596, -0.129491465661883, -173.621161418497, 12.3214560939341, -52.4773668110126, -0.304364982610169, 0.171821393780133, 0.152975037639542, 0.609896101816292, -0.114330335930658, 0.304950385474031, -0.189506282456539, 0.0571721716629835, 0.362589213587327, 0.41970434660942, -42.43456501123, -18.2858864335223, -1.11991681104158, -12.5171816310368, -0.405342735734607, 0.108637576500954, 0.150506108798058, 0.497910771855039, 0.197741319088291, 0.429225499683342, 0.557905444893665, 0.0843208353807417, -0.0702259750833564, -108.16653826392, -14.2315837849668, 54.6072781350954, 12.8688326829848, -3.44968738078449, -0.0383654655076831, 0.50336264362848, 0.326250451511037, -0.0404173233188265, 0.0147578414456289, 0.526049642157631, 0.437713824243366, 0.410519010978314), .Dim = c(13L, 5L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13'), c('(Intercept)', 'x1', 'x2', 'x3', 'x4')), assign = 0:4), qraux = c(1.27735009811261, 1.31217837594053, 1.17203087181661, 1.08180209589898, 1.00399408483144), pivot = 1:5, tol = 1e-07, rank = 5L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 8L, xlevels = structure(list(), .Names = character(0)), call = quote(lm(formula = y ~ x1 + x2 + x3 + x4, data = d2)),     terms = quote(y ~ x1 + x2 + x3 + x4), model = structure(list(y = c(78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1, 115.9, 83.8, 113.3, 109.4), x1 = c(7, 1, 11, 11, 7, 11, 3, 1, 2, 21, 1, 11, 10), x2 = c(26, 29, 56, 31, 52, 55, 71, 31, 54, 47, 40, 66, 68), x3 = c(6, 15, 8, 8, 6, 9, 17, 22, 18, 4, 23, 9, 8), x4 = c(60, 52, 20, 47, 33, 22, 6, 44, 22, 26, 34, 12, 12)), .Names = c('y', 'x1', 'x2', 'x3', 'x4'), terms = quote(y ~ x1 + x2 + x3 + x4), row.names = c(NA, 13L), class = 'data.frame'),     formula = quote(y ~ x1 + x2 + x3 + x4)), .Names = c('coefficients', 'residuals', 'effects', 'rank', 'fitted.values', 'assign', 'qr', 'df.residual', 'xlevels', 'call', 'terms', 'model', 'formula'), class = 'lm'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS411_7bcfc47416f17173466c77fb3260721f() {
        assertEval("argv <- list(3.14159265358979);isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS412_28509e9d38b33852b4cd80036380c413() {
        assertEval("argv <- list(structure(1, .Dim = 1L));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS413_ce949e8b406386f3078929c59d56426d() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = 'factor'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS414_36040d9253fd152e991de71f4f66d25d() {
        assertEval("argv <- list(structure(list(usr = c(0.568, 1.432, -1.08, 1.08), xaxp = c(0.6, 1.4, 4), yaxp = c(-1, 1, 4)), .Names = c('usr', 'xaxp', 'yaxp')));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS415_381af965b65bfc6ebfba9f54181f3203() {
        assertEval("argv <- list(structure(list(row.names = c('rate', 'additive', 'rate:additive', 'Residuals'), SS = structure(list(rate = structure(c(1.7405, -1.5045, 0.855500000000001, -1.5045, 1.3005, -0.739500000000001, 0.855500000000001, -0.739500000000001, 0.420500000000001), .Dim = c(3L, 3L), .Dimnames = list(c('tear', 'gloss', 'opacity'), c('tear', 'gloss', 'opacity'))), additive = structure(c(0.760499999999999, 0.682499999999998, 1.9305, 0.682499999999998, 0.612499999999998, 1.7325, 1.9305, 1.7325, 4.90050000000001), .Dim = c(3L, 3L), .Dimnames = list(c('tear', 'gloss', 'opacity'), c('tear', 'gloss', 'opacity'))), `rate:additive` = structure(c(0.000500000000000012, 0.0165000000000002, 0.0445000000000006, 0.0165000000000002, 0.5445, 1.4685, 0.0445000000000006, 1.4685, 3.9605), .Dim = c(3L, 3L), .Dimnames = list(c('tear', 'gloss', 'opacity'), c('tear', 'gloss', 'opacity'))), Residuals = structure(c(1.764, 0.0200000000000005, -3.07, 0.0200000000000005, 2.628, -0.551999999999994, -3.07, -0.551999999999994, 64.924), .Dim = c(3L, 3L), .Dimnames = list(c('tear', 'gloss', 'opacity'), c('tear', 'gloss', 'opacity')))), .Names = c('rate', 'additive', 'rate:additive', 'Residuals')), Eigenvalues = structure(c(1.61877188028067, 0.911918322770912, 0.286826136427727, -8.75998844614162e-17, -6.73817551294033e-18, 8.58370095630716e-18, 1.36263996836868e-17, -6.73817551294033e-18, -2.24871081520413e-19), .Dim = c(3L, 3L), .Dimnames = list(c('rate', 'additive', 'rate:additive'), NULL)), stats = structure(c(1, 1, 1, 16, 0.618141615338857, 0.476965104581081, 0.222894242126575, NA, 7.55426877464313, 4.25561883959759, 1.33852196999606, NA, 3, 3, 3, NA, 14, 14, 14, NA, 0.00303404516026092, 0.0247452809990207, 0.301781645099671, NA), .Dim = c(4L, 6L), .Dimnames = list(c('rate', 'additive', 'rate:additive', 'Residuals'), c('Df', 'Pillai', 'approx F', 'num Df', 'den Df', 'Pr(>F)')))), .Names = c('row.names', 'SS', 'Eigenvalues', 'stats'), class = 'summary.manova'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS416_5ed692d682105e7526f4932f68448923() {
        assertEval("argv <- list(4.94065645841247e-324);isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS417_eb07cb6703e420cc46d139bac4ea1a99() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS42_89311a46b53222efcd83e2a3fb7442b8() {
        assertEval("argv <- list(structure(1:10, .Tsp = c(1959.25, 1961.5, 4), class = 'ts'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS43_0243b655aa32aad303463319d8c2b35e() {
        assertEval("argv <- list(1.79769313486232e+308);isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS44_19684e71a196f8905d1d69c0e80fb057() {
        assertEval("argv <- list(structure(c('a1', NA, NA, 'a4'), class = 'AsIs'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS45_1a1f80864ccde3155748c39df3a23ceb() {
        assertEval("argv <- list(structure(list(Df = c(NA, 2L, 2L), Deviance = c(NA, 5.45230478674972, 2.66453525910038e-15), `Resid. Df` = c(8L, 6L, 4L), `Resid. Dev` = c(10.5814458637509, 5.12914107700115, 5.12914107700115)), .Names = c('Df', 'Deviance', 'Resid. Df', 'Resid. Dev'), row.names = c('NULL', 'outcome', 'treatment'), class = c('anova', 'data.frame'), heading = 'Analysis of Deviance Table\\n\\nModel: poisson, link: log\\n\\nResponse: counts\\n\\nTerms added sequentially (first to last)\\n\\n'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS46_82ec71b947496974e016ebf683a05418() {
        assertEval("argv <- list(structure(list(f = structure(c(1L, 1L, 1L), .Label = c('1', '2'), class = 'factor'), u = structure(12:14, unit = 'kg', class = 'avector')), .Names = c('f', 'u'), row.names = 2:4, class = 'data.frame'));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS47_84787b337c26b3938c46f7e6d5a9ee4f() {
        assertEval("argv <- list(structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS48_d5c3338735fe723136d03cec064a48d4() {
        assertEval("argv <- list(structure(list(a = c(1L, 2L, 3L, NA), b = c(NA, 3.14159265358979, 3.14159265358979, 3.14159265358979), c = c(TRUE, NA, FALSE, TRUE), d = structure(c(1L, 2L, NA, 3L), .Label = c('aa', 'bb', 'dd'), class = 'factor'), e = structure(c(1L, NA, NA, 2L), .Label = c('a1', 'a4'), class = 'factor'), f = structure(c(11323, NA, NA, 12717), class = 'Date')), .Names = c('a', 'b', 'c', 'd', 'e', 'f'), row.names = c(NA, -4L), class = 'data.frame', data_types = c('N', 'N', 'L', 'C', 'C', 'D')));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisS4_testisS49_e6a2a00f25b763e507fca1fcd0bb912e() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));isS4(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisTRUE_testisTRUE1_e0399ea3be506202e28740f067866a42() {
        assertEval("argv <- structure(list(x = TRUE), .Names = 'x');do.call('isTRUE', argv)");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray1_0d3d50edcf282c3164a3221aa0ceea6f() {
        assertEval("argv <- list(structure(list(weight = c(4.17, 5.58), group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('weight', 'group'), row.names = 1:2, class = 'data.frame'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray10_88fcff87e58d6ff40b04f5a3df0e233e() {
        assertEval("argv <- list(structure(integer(0), .Names = character(0)));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray11_5b6873df0dabaaa05273dec606e1303c() {
        assertEval("argv <- list(structure(list(c0 = logical(0)), .Names = 'c0', row.names = integer(0), class = 'difftime'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray12_21fc70ffd6e9e25979c4df0809605fb4() {
        assertEval("argv <- list(structure(list(B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor'), Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L)), .Names = c('B', 'V', 'N', 'Y'), row.names = 2:72, class = 'data.frame'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray13_41fc271437dbcce88681e9bf60c8e180() {
        assertEval("argv <- list(1.79769313486232e+308);is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray14_ead6e2f5c831513e9268c3fc834bddb6() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray15_030c86ef40225016a8412ec6f922668c() {
        assertEval("argv <- list(structure(c(-0.826728474083517, -0.154469781470927, 0.390336546510923, 1.36531474451071, 2.06722571939869, 1.96521311125433, 1.45602298338166, 0.730191404067138, -0.941608750081938, -0.839732558506723, -0.0905911085922035, 0.450465973953452, 1.12065714554563, 1.45760317860118, 1.25109677501882, 1.2162018587134, 1.45496813096317, -0.271923056200992, -2.39070401244086, -2.40312653243942, 1.3490211050246, 0.723634003520978, -0.525571703048375, -2.20018568844273, -1.57021740950431, -1.15394138529193, -0.771438011070496, 0.948968136215006, 1.11028283982967, 1.3490211050246, 0.723634003520978, -0.771438011070496, -1.76787333029837, -2.97849067734298, -2.56564546193719, -1.42386100140387, -0.482534191368393, 0.15506930200634, 0.878254497780181, 1.05319014844382, 0.0786502243396558, -0.896275208780418, -0.852907979665288, -1.36905276490888, -0.852907979665288, 0.378793517229249, 1.51661659600387, 1.37393548755461, -1.19044178751146, -1.01371204398328, -0.413541319881442, -0.0155111902607956, 0.511260101660621, 1.1596935438887, 1.49073250236106, 1.90481616825336, 1.72198968844944, 1.06922804353907, -0.525571703048375, -2.20018568844273, -1.57021740950431, -1.15394138529193, -0.771438011070496, 0.948968136215006, 1.11028283982967, 1.3490211050246, 0.723634003520978, -0.771438011070496, -1.76787333029837, 1.90481616825336, -1.15394138529193, -0.771438011070496, 0.948968136215006, 1.11028283982967, 1.3490211050246, 0.723634003520978, -0.771438011070496, -1.76787333029837, 1.17726251300777, 0.873546391155001, -0.257195249490748, -1.08470959372261, -1.32132136208769, -1.28389495656857, -0.471605120836204, 0.606878400401293, 1.31985237043395, 2.02783906485667, 1.57046182864688, -0.252818874890949, -1.24388962195487, -0.626057778621366, 1.49073250236106, 1.90481616825336, 1.72198968844944, 1.06922804353907, -0.525571703048375, -2.20018568844273, -1.57021740950431, -1.15394138529193, -0.771438011070496, 0.948968136215006, 1.11028283982967, 1.45760317860118, 1.25109677501882, 1.2162018587134, 1.45496813096317, -0.271923056200992, -2.39070401244086, -2.40312653243942, -2.10302193998908, -1.35143116355906, -0.796191750223435, 0.24658809164983), .Dim = c(114L, 1L), .Dimnames = list(NULL, 'Series 1'), .Tsp = c(1, 114, 1), class = 'ts'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray16_ac51cb19ad9dc83e3dccf6bbe8cb212e() {
        assertEval("argv <- list(structure(c(1.82608695652174, 1.17391304347826, 1.17391304347826, 4.17391304347826, 1.82608695652174, 1.82608695652174, 2.17391304347826, 0.173913043478262, 4.17391304347826, 0.826086956521738, 2.17391304347826, 2.17391304347826, 2.17391304347826, 4.17391304347826, 2.82608695652174, 2.17391304347826, 2.17391304347826, 0.826086956521738, 3.82608695652174, 1.82608695652174, 4.82608695652174, 0.173913043478262, 7.82608695652174, 1.15, 5.15, 0.85, 1.15, 2.85, 2.85, 1.85, NA, 6.15, 2.85, 0.15, 3.15, 0.15, NA, NA, 1.15, 1.85, 0.15, 0.85, 0.85, 2.15, 2.85, 2.85, 32.2608695652174, 54.2608695652174, 36.2608695652174, 45.2608695652174, 194.739130434783, 130.739130434783, 35.2608695652174, 59.2608695652174, 63.2608695652174, 25.7391304347826, 25.2608695652174, 44.2608695652174, 16.2608695652174, 63.2608695652174, 53.2608695652174, 56.2608695652174, 19.2608695652174, 35.2608695652174, 39.2608695652174, 7.26086956521739, 38.2608695652174, 213.739130434783, 158.739130434783, 8.09999999999999, 94.9, 59.9, 49.9, 176.1, 11.1, 59.9, NA, 100.1, 15.1, 21.1, 84.1, 65.1, NA, NA, 63.9, 37.9, 26.9, 128.9, 42.1, 87.9, 118.1, 30.9), .Dim = c(23L, 4L), .Dimnames = list(NULL, c('V1', 'V2', 'V3', 'V4')), '`scaled:center`' = structure(c(10.8260869565217, 3.85, 95.2608695652174, 137.9), .Names = c('V1', 'V2', 'V3', 'V4'))));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray17_88afa3e7a5a1bcfd2df4c48a1368061b() {
        assertEval("argv <- list(c('1', '2', NA));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray18_c3923ad852a8da4673f4620be0a4596c() {
        assertEval("argv <- list(structure(list(y = c(0.219628047744843, 0.360454661130887, NA, 0.114681204747219, -1.14267533343616, 0.772374419482067, 0.681741904304867, 0.171869265068012, 2.08409180391906, 0.367547276775469), x1 = c(1L, 2L, 3L, NA, 5L, 6L, 7L, 8L, 9L, 10L), x2 = 1:10, x3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), wt = c(0, 1, 1, 1, 1, 1, 1, 1, 1, 1)), .Names = c('y', 'x1', 'x2', 'x3', 'wt'), row.names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), class = 'data.frame'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray19_a7af74f10258ccced4eb182c506533ba() {
        assertEval("argv <- list(structure(list(x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861)), .Names = c('x', 'y'), row.names = c(NA, -10L), class = 'data.frame'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray2_9a04fcce999c578c3425570b128a58fe() {
        assertEval("argv <- list(structure(list(weight = c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('weight', 'group'), row.names = c(NA, -20L), class = 'data.frame'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray20_b2073f65aff5589a27cf4fe47e6af40b() {
        assertEval("argv <- list(structure(c(365, 365, 365, 366, 1, 0), .Dim = c(3L, 2L)));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray21_92d45cfdd9c02f04e0d22900b19fc4d2() {
        assertEval("argv <- list(integer(0));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray22_c670debb7d36b5f500c3374ede380770() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4, .Dimnames = list(c('A', 'B', 'C'), c('D', 'E', 'F', 'G'))));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray23_e216af7fc7279afd7fb7bc919ff96fe1() {
        assertEval("argv <- list(c(0.568, 1.432, -1.08, 1.08));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray3_8dd8ad8387d0cdcb917df4215fd0df18() {
        assertEval("argv <- list(structure(c(3.3675190249981e-55, 0.765191717864009, 1.84321904447013e-13, 0.270563224172485, 1.09996038197079, 1.31584681249013e-26, 0.00018392029356426, 0.515909871821833, 3.2666146281237e-45, -9.79475754683005e-56, -0.139604410987981, -1.56689901864133e-13, -0.285096750996398, -0.00590762252543826, -1.87837727043588e-27, -1.95765906855729e-05, -0.587847588896037, -1.0000270983218e-45), .Dim = c(9L, 2L), .Dimnames = list(NULL, c('Comp.1', 'Comp.2'))));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray4_b004adff6d04b601171db3d813b117aa() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray5_17b3162bba911f09b913189190d33f76() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE), .Dim = c(11L, 2L)));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray6_b76037451a26fe2cfbb32861e0c755dd() {
        assertEval("argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray7_a77560243cad5f50886f1d915fb0e178() {
        assertEval("argv <- list(c('2001-01-01', NA, NA, '2004-10-26'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray8_47f56e7652ab2b32f7fd10e753471722() {
        assertEval("argv <- list(structure(list(breaks = c(26, 30, 54, 25, 70, 52, 51, 26, 67, 27, 14, 29, 19, 29, 31, 41, 20, 44), wool = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('A', 'B'), class = 'factor'), tension = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c('L', 'M', 'H'), class = 'factor')), .Names = c('breaks', 'wool', 'tension'), row.names = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L), class = 'data.frame'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisarray_testisarray9_55946626bc3990fee5da18646e3b11a3() {
        assertEval("argv <- list(structure(list(carb = c(33, 40, 37, 27, 30, 43, 34, 48, 30, 38, 50, 51, 30, 36, 41, 42, 46, 24, 35, 37), age = c(33, 47, 49, 35, 46, 52, 62, 23, 32, 42, 31, 61, 63, 40, 50, 64, 56, 61, 48, 28), wgt = c(100, 92, 135, 144, 140, 101, 95, 101, 98, 105, 108, 85, 130, 127, 109, 107, 117, 100, 118, 102), prot = c(14, 15, 18, 12, 15, 15, 14, 17, 15, 14, 17, 19, 19, 20, 15, 16, 18, 13, 18, 14)), .Names = c('carb', 'age', 'wgt', 'prot'), row.names = c(NA, -20L), class = 'data.frame'));is.array(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic1_0200c5d21332e873cc40a92a21854959() {
        assertEval("argv <- list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic10_e84a07ff40047b27d5c41908ec79f522() {
        assertEval("argv <- list(structure(c(123.263157894737, 88.6052631578949, 77.0526315789476, 60.9473684210528, 54.3947368421055, 43.8421052631581, 34.2894736842107, 14.7368421052633, 10.6315789473686, 1.07894736842124, -9.47368421052613, -11.0263157894735, -16.1315789473682, -13.6842105263156, -3.23684210526298, -1.34210526315772, 11.1052631578949, -0.44736842105246, 7.00000000000017, 7.4473684210528, 6.89473684210543, 5.34210526315806, -8.21052631578931, -15.7631578947367, -3.31578947368405, 24.5789473684212, 27.0263157894738, 26.4736842105265, 21.9210526315791, 23.3684210526317, 27.263157894737, 19.6052631578949, 21.0526315789475, 26.5000000000001, 22.9473684210528, 12.3947368421054, 1.84210526315803, 5.28947368421066, -1.81578947368408, 4.63157894736855, 24.5263157894738, 10.9736842105264, 4.42105263157907, -10.1315789473683, -10.6842105263157, 12.763157894737, 33.2105263157896, 35.1052631578949, 44.5526315789475, 41.0000000000001, 46.4473684210527, 59.8947368421054, 69.342105263158, 64.7894736842106, 48.6842105263159, 63.1315789473685, 54.0263157894738, 46.4736842105264, 41.921052631579, 35.3684210526317, 27.8157894736843, 32.2631578947369, 36.7105263157896, 32.1578947368422, 23.6052631578948, 14.0526315789475, 12.5000000000001, -5.05263157894728, 9.84210526315798, 7.28947368421061, 16.7368421052632, 13.1842105263159, 13.6315789473685, 7.07894736842113, 9.52631578947376, 6.42105263157902, 4.31578947368428, -7.23684210526309, -15.7894736842105, 0.657894736842167, -5.8947368421052, 0.552631578947427, 7.44736842105269, -10.1052631578947, -3.65789473684205, 0.789473684210577, 7.23684210526321, 16.6842105263158, 7.13157894736847, -4.4210526315789, -5.97368421052627, -11.5263157894736, -4.07894736842101, -16.6315789473684, -14.1842105263158, -19.7368421052631, -11.2894736842105, -5.84210526315786, -13.3947368421052, -14.9473684210526, -15.5, -21.0526315789473, -6.60526315789471, -14.1578947368421, -8.71052631578945, -6.26315789473682, -11.8157894736842, -19.3684210526316, -6.92105263157893, -18.4736842105263, -19.0263157894737, -15.578947368421, -16.1315789473684, -12.6842105263158, 5.76315789473685, 3.21052631578948, 2.65789473684211, 5.10526315789474, 11.5526315789474), .Names = c('11', '12', '13', '15', '26', '30', '31', '53', '54', '59', '60', '65', '71', '81', '88', '92', '93', '95', '105', '107', '110', '116', '118', '131', '132', '135', '142', '144', '147', '156', '163', '166', '170', '174', '175', '176', '177', '179', '180', '181', '183', '185', '188', '189', '191', '196', '197', '202', '207', '210', '212', '218', '221', '222', '223', '225', '229', '230', '237', '239', '246', '259', '267', '269', '270', '279', '283', '284', '285', '286', '288', '291', '292', '300', '301', '303', '306', '310', '320', '329', '337', '353', '363', '364', '371', '387', '390', '394', '404', '413', '428', '429', '442', '444', '455', '457', '458', '460', '477', '519', '524', '533', '558', '567', '574', '583', '613', '624', '643', '655', '689', '707', '791', '806', '814', '840', '883', '1010', '1022')));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic11_45dfb74919538825a9c2e0bc30b87404() {
        assertEval("argv <- list(structure(c(0, -0.0555555555555556, 0.02, 0.0625, 0.0625, 0.04, 0, 0), .Dim = c(8L, 1L), .Dimnames = list(c('2', '3', '6', '7', '8', '9', '14', '17'), 'x')));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic12_0738066a3b4efdd1d250f76e523aed75() {
        assertEval("argv <- list(structure(c(2.21843970753346, 1.80732678656753, -1.09399175987006, 0.585986462327552, -5.68458926982395, 1.23352238598674, 0.457950438444482, 2.51599006679516, -2.28780372840319, 5.53596062467695, 2.17890565095959, -1.59611751350773, -2.9672978602151, 0.745175851232308, 1.93388282434376, -3.03559459078455, 2.19500990255906, 0.0725275773318347, -0.75336064096447, -1.15505962102859, -2.84782886882524, -1.41070341448251, -0.540252474026749, 4.87719739781058, 0.890715639552621, -0.968642103099399, 1.73177156113283, -0.993218102309356, -0.656454198323984, -1.5299506933835, -0.298424468882268, 6.51011264717937, 2.68326774833378, 1.99295445531679, -0.214079422583434, 6.73505308264589, -4.54579214489424, -2.3991834444486, -1.71479569181251, -6.47293095421849, -1.67116930820449, -11.5853328029437, -2.48588878138021, -0.888857646918452, 8.06807102468956, -0.216046323028316, 6.24682938323398, -1.74761908105831, 2.53082303181417, 2.31410662801887, 2.97453294161523, -2.88723068649699, -1.04144266580674, -0.835536300630093, -6.10229135345437, -4.37605802846523, -1.94289029309402e-16, 5.96619037131792, -1.1474434665393, 3.78819830631063, -3.01580771910632, -0.656454198323984, 1.50824785799851, -2.06401783962239, -3.02346226775125, 0.407243897855763, -3.96478352340807, -2.12718621336067, -0.78924288871239, -3.03559459078455, 0.457950438444496, -0.797900839851943, -3.38233849466459, 1.97815029009903, 0.745175851232309, -1.09645503136389, 0.341748714147263, 7.32472922782987, -1.33672649241008, 1.51931399477032, 0.00590129163826772, -4.09533092706814, 0.195481697042187, -2.7736762657602, -3.48737543915568, 0.536312040203338, 0.775871729180551, 4.37979177946206, 1.30271070089245, 4.2132287611068, 7.33457656622414, 3.28311350719274, -1.30271070089245), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic13_e719aa75e3239b1bb5e96f2d4f6acfff() {
        assertEval("argv <- list(c(1, 0, 2, NA, 3));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic14_b2e13e656aac92d2917521a72f6a9e21() {
        assertEval("argv <- list(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00566013786017473, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.00900237050730269, -0.728901016108085, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.0165439610603712, 0.195986923200517, -0.65974257839475, 1, 0, 0, 0, 0, 0, 0, 0, -0.066085607580362, -0.0156976524162818, 0.173905017001082, -0.499536921684336, 1, 0, 0, 0, 0, 0, 0, -0.0738085645370442, -0.0203225592950423, -0.115986092442635, 0.0129919901272555, -0.442920654638837, 1, 0, 0, 0, 0, 0, 0.0393894522336503, -0.0197375262983596, -0.124011676515792, -0.217221939591068, -0.129869023991585, -0.565387274218169, 1, 0, 0, 0, 0, 0.0607863121945582, -0.0166644168652946, -0.107337280394758, -0.197961946387821, -0.278643450192551, -0.207586147284064, -0.767412521925717, 1, 0, 0, 0, 0.062350529551034, -0.00752786862124525, -0.0512212310455943, -0.0966787787982999, -0.13451920005707, -0.183723918913255, -0.15174930099133, -1.08016400642495, 1, 0, 0, 0.00956599068508591, -0.00134207672049057, -0.00895378984363029, -0.0175914048294707, -0.0252596683886793, -0.0334470581271047, -0.0623904491074943, 0.117178336161866, -1.32461347964996, 1, 0, -0.000288769768734922, -7.2526747819756e-05, -0.000396728614559744, -0.000760325293277726, -0.00119170347009929, -0.00158048211775626, -0.00256503558312322, -0.00605270851626604, 0.3995724375217, -0.740914424130097, 1));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic15_fe7a61b459706d9eba4f71d4d69410fa() {
        assertEval("argv <- list(structure(list(age = 62.4473684210526, age.strata.sex.sex.2 = 24.109649122807), .Names = c('age', 'age.strata.sex.sex.2'), row.names = c(NA, -1L), class = 'data.frame'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic16_13250ffe89b48db1d9c7f00bdb25d2fc() {
        assertEval("argv <- list(structure(list(base = c(11L, 11L, 6L, 8L, 66L, 27L, 12L, 52L, 23L, 10L, 52L, 33L, 18L, 42L, 87L, 50L, 18L, 111L, 18L, 20L, 12L, 9L, 17L, 28L, 55L, 9L, 10L, 47L, 76L, 38L, 19L, 10L, 19L, 24L, 31L, 14L, 11L, 67L, 41L, 7L, 22L, 13L, 46L, 36L, 38L, 7L, 36L, 11L, 151L, 22L, 41L, 32L, 56L, 24L, 16L, 22L, 25L, 13L, 12L)), .Names = 'base', class = 'data.frame', row.names = c(1L, 5L, 9L, 13L, 17L, 21L, 25L, 29L, 33L, 37L, 41L, 45L, 49L, 53L, 57L, 61L, 65L, 69L, 73L, 77L, 81L, 85L, 89L, 93L, 97L, 101L, 105L, 109L, 113L, 117L, 121L, 125L, 129L, 133L, 137L, 141L, 145L, 149L, 153L, 157L, 161L, 165L, 169L, 173L, 177L, 181L, 185L, 189L, 193L, 197L, 201L, 205L, 209L, 213L, 217L, 221L, 225L, 229L, 233L)));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic17_ece48bbf7cead7f3fbeae3ea87593a5c() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 0, 2.47032822920623e-323, 0, 0, 0, 0, 0));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic18_7ffe4032ea96868faf0485e5a8e7779b() {
        assertEval("argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic19_d514e7e885a60614e861834a6e8ec1d6() {
        assertEval("argv <- list(c(NA, 'Ripley', 'Venables & Smith'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic2_061a3bc4d98c43ea0b5fb783b287bd3b() {
        assertEval("argv <- list(structure(c(1, 2, 3, 0, 10, NA), .Dim = c(3L, 2L)));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic20_daa6a103c57b01e1fd1321f459314cb0() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic21_afe002f64a5559c31efb0c1be32ef5c9() {
        assertEval("argv <- list(structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic22_62c9d7835a3a3aa3077d36787c6af373() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(4L, 0L)));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic23_60fa3dbb259b85adfc4917b6e518edac() {
        assertEval("argv <- list(structure(1:3, .Label = c('4', '5', '6'), class = 'factor'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic24_fb855967e68768a0cc15a307d7cbddc0() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L), .Label = c('freckle', 'superficial', 'nodular', 'indeterminate'), class = 'factor', contrasts = 'contr.treatment'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic25_8d4f26b51a2ff1c7b4b17369dfd82ffb() {
        assertEval("argv <- list(raw(0));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic26_879a930fb0ee28aa2a0817e7d9f53ada() {
        assertEval("argv <- list(c(19.7787405591752, 12504507.4953993, 12504507.4953993, 5.96190157728191e+41));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic27_504e7611e2c16e742c496baa98bfe41b() {
        assertEval("argv <- list(character(0));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic28_843c5dce114c40aaad50b81af217259b() {
        assertEval("argv <- list(structure(list(a1 = 1:3, a2 = 4:6, a3 = 3.14159265358979, a4 = c('a', 'b', 'c')), .Names = c('a1', 'a2', 'a3', 'a4')));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic29_e7ba38d99c82ac07d2bf16aec10cfd1d() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = 'factor'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic3_a3cf0fdfa26309f5c960a05b331ea727() {
        assertEval("argv <- list(structure(list(x = 1:10, yyy = 11:20), .Names = c('x', 'yyy'), row.names = c(NA, -10L), class = 'data.frame'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic30_f8b97f270cef89e38127b86ad7af58df() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic31_44a0e5b3823f2dc3c7d795846a316578() {
        assertEval("argv <- list(c(2L, 1L, NA));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic32_1b10484ac617b34ce2a1abaff7b3e3fa() {
        assertEval("argv <- list(structure(1:20, .Tsp = c(1, 20, 1), class = 'ts'));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic4_5abee546e5f427687eeda09829d637f7() {
        assertEval("argv <- list(c(-1.12778377684043, -12820.0784261145, -21650982809.6744, -473300382255715392, -6.08456909882282e+25, -3.04622557026196e+34, -4.60125024792566e+43, -1.76183826972506e+53, -1.5069799345972e+63, -2.61556777274611e+73, -8.54170618068872e+83, -4.9383857330861e+94, -4.80716085942859e+105, -7.55412056676629e+116, -1.84898368353639e+128, -6.83535188151783e+139, -3.71562599613334e+151, -2.90089508183654e+163, -3.18582547396557e+175, -4.83110332887119e+187, -9.94902790498679e+199, -2.74100158340596e+212, -9.96611412047338e+224, -4.72336572671053e+237, -2.88514442494869e+250, -2.24780296109123e+263, -2.21240023126594e+276, -2.72671165723473e+289, -4.17369555651928e+302, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic5_c620a04d64726581b3369416bee96bf1() {
        assertEval("argv <- list(c(2.5, 6, 6, 7.5, 8, 8, 16, 6, 5, 6, 28, 5, 9.5, 6, 4.5, 10, 14, 3, 4.5, 5.5, 3, 3.5, 6, 2, 3, 4, 6, 5, 6.5, 5, 10, 6, 18, 4.5, 20));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic6_be07ea104a46adabbc27c2833d654dfe() {
        assertEval("argv <- list(structure(c(1, 2, 2, 3, 3, 3, 4, 5), .Names = c('dsyMatrix', 'ddenseMatrix', 'symmetricMatrix', 'dMatrix', 'denseMatrix', 'compMatrix', 'Matrix', 'mMatrix')));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic7_9fb4238144fe5cbb3e40eeb4ca79322f() {
        assertEval("argv <- list(c(-Inf, -Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic8_02259ed2edceec23c5d95f2f8872fb28() {
        assertEval("argv <- list(structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisatomic_testisatomic9_5cdbc4b782070b6ce79647feae16892c() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')));is.atomic(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall1_58cc63932aefc74f583a8a46b83c8190() {
        assertEval("argv <- list(structure(list(dim = c(93L, 19L), dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93'), c('dfb.1_', 'dfb.Wght', 'dfb.Cyl4', 'dfb.Cyl5', 'dfb.Cyl6', 'dfb.Cyl8', 'dfb.Cyln', 'dfb.TypL', 'dfb.TypM', 'dfb.TypSm', 'dfb.TypSp', 'dfb.TypV', 'dfb.EngS', 'dfb.DrTF', 'dfb.DrTR', 'dffit', 'cov.r', 'cook.d', 'hat'))), .Names = c('dim', 'dimnames')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall10_fc0284be75adb571fd60bdaecf982457() {
        assertEval("argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall11_18cd2720f3b966a9b71da861ff0f847d() {
        assertEval("argv <- list(c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall12_17d8d3b4173d3328ba2ec30e60900fc6() {
        assertEval("argv <- list(structure(c(NA, 9.93, 26.79, 820.91), .Names = c('<none>', '- x4', '- x2', '- x1')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall13_8dca671237f8d70e844115833d098282() {
        assertEval("argv <- list(structure(list(nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('nationality', 'deceased', 'title', 'other.author'), class = 'data.frame', row.names = c(NA, -6L)));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall14_a69cf172a063a50ff0ab75c661eacf0d() {
        assertEval("argv <- list(structure(c(10L, 10L, 10L, 10L, 10L), .Dim = 5L, .Dimnames = structure(list(a = c('0.333333333333333', '0.5', '1', 'Inf', NA)), .Names = 'a')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall15_6b3488297eea7c500984075b5b0bca0f() {
        assertEval("argv <- list(1.79769313486232e+308);is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall16_c3f281c408bb9fb99bd82206642ab0ea() {
        assertEval("argv <- list(c(3.71357206670431, 3.58351893845611, 2.484906649788, 2.89037175789616, NA, 3.3322045101752, 3.13549421592915, 2.94443897916644, 2.07944154167984, NA, 1.94591014905531, 2.77258872223978, 2.39789527279837, 2.63905732961526, 2.89037175789616, 2.63905732961526, 3.52636052461616, 1.79175946922805, 3.40119738166216, 2.39789527279837, 0, 2.39789527279837, 1.38629436111989, 3.46573590279973, NA, NA, NA, 3.13549421592915, 3.80666248977032, 4.74493212836325, 3.61091791264422, NA, NA, NA, NA, NA, NA, 3.36729582998647, NA, 4.26267987704132, 3.66356164612965, NA, NA, 3.13549421592915, NA, NA, 3.04452243772342, 3.61091791264422, 2.99573227355399, 2.484906649788, 2.56494935746154, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 4.90527477843843, 3.89182029811063, 3.46573590279973, NA, 4.15888308335967, 3.68887945411394, 4.34380542185368, 4.57471097850338, 4.57471097850338, 4.44265125649032, NA, 2.30258509299405, 3.29583686600433, NA, 1.94591014905531, 3.87120101090789, 3.55534806148941, 4.11087386417331, 4.36944785246702, 4.14313472639153, 2.77258872223978, NA, NA, 4.38202663467388, 4.68213122712422, 2.99573227355399, 3.95124371858143, 4.40671924726425, 3.91202300542815, 4.15888308335967, 4.07753744390572, 3.66356164612965, 2.19722457733622, 2.77258872223978, 4.35670882668959, 3.55534806148941, 4.18965474202643, 4.80402104473326, 4.48863636973214, 4.70048036579242, NA, NA, 3.78418963391826, 3.3322045101752, 4.17438726989564, NA, 3.09104245335832, 4.07753744390572, 3.13549421592915, 3.43398720448515, 3.78418963391826, 3.04452243772342, 2.19722457733622, NA, 3.80666248977032, 5.12396397940326, 4.29045944114839, NA, 4.33073334028633, 4.77068462446567, 4.43081679884331, 4.44265125649032, 4.56434819146784, 4.35670882668959, 4.29045944114839, 4.51085950651685, 3.85014760171006, 3.46573590279973, 2.99573227355399, 3.13549421592915, 3.04452243772342, 3.17805383034795, 3.78418963391826, 3.04452243772342, 3.3322045101752, 2.19722457733622, 2.56494935746154, 3.8286413964891, 2.89037175789616, 2.56494935746154, 3.17805383034795, 2.77258872223978, 2.56494935746154, 3.13549421592915, 3.58351893845611, 1.94591014905531, 2.63905732961526, 3.40119738166216, NA, 2.63905732961526, 2.89037175789616, 2.99573227355399));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall17_c1d26a1b8d1d135130cafc4ef2018403() {
        assertEval("argv <- list(c(1.1+0i, NA, 3+0i));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall18_15ddb4f832d8cdc442a67f7f03fdbb01() {
        assertEval("argv <- list(structure(c('***', '***', '*', '*'), legend = '0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1', class = 'noquote'));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall19_f320e2877e275ee4ab4aa9b21fd92e44() {
        assertEval("argv <- list(structure(3.14159265358979, .Tsp = c(1, 1, 1), class = 'ts'));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall2_cb95b1c5fe6a6949bf4d015ef04e3f68() {
        assertEval("argv <- list(structure(1:10, .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall20_8bcca7a03c20204d86699a078ac00f2f() {
        assertEval("argv <- list(structure(c(0.00290239468554394, 0.00140705152597278, 0.00182415100508828, 0.000171517300342801, 0.0747454613066304, 0.00103234723292907, 0.000179983318697126, 0.0352586084465556, 0.00336847595628202, 0.0640696486471412, 0.013210800275195, 0.00194778778741287, 0.00351950115137133, 0.000700468320296444, 0.00252844357735001, 0.0143720121954949, 0.0092342255427433, 7.64817786749446e-06, 0.00387339857745543, 0.00121246491006704, 0.00624917129689855, 0.00187753034805145, 0.000103002251547083, 0.0136703020254034, 0.000349542811339773, 0.00120367047056317, 0.00194205014408538, 0.00462815827742801, 0.000149291834133954, 0.00193441236645676, 9.00084520363835e-05, 0.0160915134527436, 0.0034667595853861, 0.00481936427422654, 3.13343033856193e-05, 0.0564685345533007, 0.00929771993193245, 0.0103876340982416, 0.0133005891226511, 0.0325989357511191, 0.00228122925969391, 0.0460976655088242, 0.0030036374596782, 0.000271060875811076, 0.0301696315261026, 4.72002631048293e-05, 0.0262321004865234, 0.00594174673473018, 0.00288915040856097, 0.00635277836091401, 0.00569342819072192, 0.0163907345734164, 0.000360581939026221, 0.000237725871915377, 0.0164062036225434, 0.0238391417439455, NaN, 0.0421542087325977, 0.00133954856768466, 0.0113421570571087, 0.00818242287729128, 0.000149291834133954, 0.00162069399881579, 0.00180262291288582, 0.0043164627226381, 0.000407784303899558, 0.0087630128035445, 0.00179253664026378, 0.000416739394150714, 0.0143720121954949, 0.000179983318697137, 0.00115986529332947, 0.00377736311314377, 0.00219491136307178, 0.000700468320296447, 0.000522557531637987, 9.86336244510677e-05, 0.0216346027446621, 0.000659639144027213, 0.0137501462695059, 5.91425796333253e-08, 0.0279425064631674, 0.000170828237014783, 0.00424546903556132, 0.0114879015536739, 0.000173346990819205, 0.00138111062254461, 0.00772582941114727, 0.0277947034678616, 0.00892024547056825, 0.061857770987456, 0.0125790610228498, 0.0277947034678616), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall21_aefe4bc913613a410aa52558947016e3() {
        assertEval("argv <- list(structure(c(1920, 1920, 1920, 1920, 1920, 1920, 1921, 1921, 1921, 1921), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall23_110664c3946fb03aaf62a18f4e3242d4() {
        assertEval("argv <- list(structure(c(2671, 6.026e+77, 3.161e+152, 3.501e+299, 2.409e+227, 1.529e+302), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall24_11a9c7a4ec902444dc294953be024a8d() {
        assertEval("argv <- list(structure(c(1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 11, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 7, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 7.4, 5.3, 6.1, 6.1, 6.1, 6.1, 6.1, 6.1, 6.1, 6.1, 6.1, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 5.6, 5.7, 5.3, 5.3, 5.3, 5.3, 5.3, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 6.6, 5.3, 7.7, 7.7, 7.7, 6.2, 5.6, 5.6, 5.2, 5.2, 5.2, 5.2, 6, 6, 6, 6, 5.1, 5.1, 5.1, 7.6, 7.6, 7.6, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 6.5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 5.3, 24, 13, 15, 68, 39, 74, 22, 1, 8, 55, 24, 20, 51, 13, 3, 4, 5, 6, 15, 2, 8, 60, 67, 23, 58, 24, 22, 21, 37, 74, 59, 39, 14, 14, 19, 23, 70, 21, 22, 31, 29, 30, 45, 58, 17, 7, 19, 26, 39, 74, 57, 59, 12, 72, 70, 37, 64, 16, 18, 21, 22, 8, 62, 61, 63, 71, 105, 64, 10, 41, 8, 27, 11, 34, 32, 33, 68, 107, NA, 66, NA, 65, 48, 52, 43, 47, 46, 44, 41, 54, 28, 50, 40, NA, 69, NA, 75, 109, NA, 86, 112, 110, 104, 24, 111, 87, NA, NA, 92, 73, 85, 90, 89, NA, 83, NA, 102, NA, 108, 88, 91, 93, NA, 94, 84, NA, 106, NA, 95, 82, 56, 87, 109, 75, 104, 110, 112, 111, 24, 73, 85, 86, 90, 89, 102, 88, 92, 9, 49, 42, 38, 35, 36, 25, NA, NA, 9, 49, 42, NA, 36, 38, 25, 53, 79, 78, 103, 77, 80, 114, 97, 113, 76, 96, 81, 116, 99, 117, 115, 98, 101, 100, 12, 148, 42, 85, 107, 109, 156, 224, 293, 359, 370, 8, 16.1, 63.6, 6.6, 9.3, 13, 17.3, 105, 112, 123, 105, 122, 141, 200, 45, 130, 147, 187, 197, 203, 211, 62, 62, 19, 21, 13, 22, 29, 17, 19.6, 20.2, 21.1, 21.9, 24.2, 66, 87, 23.4, 24.6, 25.7, 28.6, 37.4, 46.7, 56.9, 60.7, 61.4, 62, 64, 82, 88, 91, 31, 45, 145, 300, 5, 50, 16, 17, 8, 10, 10, 8, 32, 30, 31, 2.9, 3.2, 7.6, 25.4, 32.9, 92.2, 1.2, 1.6, 9.1, 3.7, 5.3, 7.4, 17.9, 19.2, 23.4, 30, 38.9, 23.5, 26, 0.5, 0.6, 1.3, 1.4, 2.6, 3.8, 4, 5.1, 6.2, 6.8, 7.5, 7.6, 8.4, 8.5, 8.5, 10.6, 12.6, 12.7, 12.9, 14, 15, 16, 17.7, 18, 22, 22, 23, 23.2, 29, 32, 32.7, 36, 43.5, 49, 60, 64, 7.5, 8.8, 8.9, 9.4, 9.7, 9.7, 10.5, 10.5, 12, 12.2, 12.8, 14.6, 14.9, 17.6, 23.9, 25, 10.8, 15.7, 16.7, 20.8, 28.5, 33.1, 40.3, 4, 10.1, 11.1, 17.7, 22.5, 26.5, 29, 30.9, 37.8, 48.3, 5.8, 12, 12.1, 20.5, 20.5, 25.3, 35.9, 36.1, 36.3, 38.5, 41.4, 43.6, 44.4, 46.1, 47.1, 47.7, 49.2, 53.1, 0.359, 0.014, 0.196, 0.135, 0.062, 0.054, 0.014, 0.018, 0.01, 0.004, 0.004, 0.127, 0.411, 0.018, 0.509, 0.467, 0.279, 0.072, 0.012, 0.006, 0.003, 0.018, 0.048, 0.011, 0.007, 0.142, 0.031, 0.006, 0.01, 0.01, 0.006, 0.013, 0.005, 0.003, 0.086, 0.179, 0.205, 0.073, 0.045, 0.374, 0.2, 0.147, 0.188, 0.204, 0.335, 0.057, 0.021, 0.152, 0.217, 0.114, 0.15, 0.148, 0.112, 0.043, 0.057, 0.03, 0.027, 0.028, 0.034, 0.03, 0.039, 0.03, 0.11, 0.01, 0.01, 0.39, 0.031, 0.13, 0.011, 0.12, 0.17, 0.14, 0.11, 0.04, 0.07, 0.08, 0.21, 0.39, 0.28, 0.16, 0.064, 0.09, 0.42, 0.23, 0.13, 0.26, 0.27, 0.26, 0.11, 0.12, 0.038, 0.044, 0.046, 0.17, 0.21, 0.32, 0.52, 0.72, 0.32, 0.81, 0.64, 0.56, 0.51, 0.4, 0.61, 0.26, 0.24, 0.46, 0.22, 0.23, 0.28, 0.38, 0.27, 0.31, 0.2, 0.11, 0.43, 0.27, 0.15, 0.15, 0.15, 0.13, 0.19, 0.13, 0.066, 0.35, 0.1, 0.16, 0.14, 0.049, 0.034, 0.264, 0.263, 0.23, 0.147, 0.286, 0.157, 0.237, 0.133, 0.055, 0.097, 0.129, 0.192, 0.147, 0.154, 0.06, 0.057, 0.12, 0.154, 0.052, 0.045, 0.086, 0.056, 0.065, 0.259, 0.267, 0.071, 0.275, 0.058, 0.026, 0.039, 0.112, 0.065, 0.026, 0.123, 0.133, 0.073, 0.097, 0.096, 0.23, 0.082, 0.11, 0.11, 0.094, 0.04, 0.05, 0.022, 0.07, 0.08, 0.033, 0.017, 0.022), .Dim = c(182L, 5L), .Dimnames = list(NULL, c('event', 'mag', 'station', 'dist', 'accel'))));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall25_afa1e7dab50a2eb395a37ffd214b4009() {
        assertEval("argv <- list(structure(c(8.444, 12.244, 11.967, 32.826), .Names = c('+ Temp', '<none>', '+ Soft', '- M.user')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall26_753ff719553b6809d09c4ecb670b117d() {
        assertEval("argv <- list(quote(cbind(X, M) ~ M.user + Temp + M.user:Temp));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall3_83c5f1c2f55a01e76ee822daeeec9fa4() {
        assertEval("argv <- list(structure(c(1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall4_93f6446c525a6b0e9b6d9033aaf9cf81() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall5_67d7298b77d8d467940bd28b72487479() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall6_51480772477c17a739826be9731bcda1() {
        assertEval("argv <- list(structure(list(var = structure(c(4L, 4L, 1L, 2L, 1L, 2L, 3L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 3L, 2L, 1L, 3L, 1L, 1L, 1L, 3L, 1L, 1L), .Label = c('<leaf>', 'Age', 'Number', 'Start'), class = 'factor'), wt = c(318, 244, 114, 130, 49, 81, 65, 34, 31, 17, 14, 3, 11, 16, 74, 42, 35, 16, 19, 10, 9, 7, 32, 3, 29), dev = c(95.4, 34.5652173913044, 0, 34.5652173913044, 0, 34.5652173913044, 15.2086956521739, 0, 15.2086956521739, 0, 5.36385542168675, 0, 0, 3.57590361445783, 53.6385542168675, 22.1217391304348, 12.4434782608696, 0, 12.4434782608696, 0, 0, 0, 7.15180722891566, 0, 1.78795180722892), yval = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2), complexity = c(0.165415284325709, 0.0551384281085695, 0.039, 0.0551384281085695, 0.039, 0.0551384281085695, 0.0515976951283394, 0.039, 0.0515976951283394, 0.039, 0.0515976951283394, 0.039, 0.039, 0.039, 0.165415284325709, 0.101449275362319, 0.0652173913043478, 0.039, 0.0652173913043478, 0.039, 0.039, 0.039, 0.0562248995983936, 0.039, 0.039), ncompete = c(2L, 2L, 0L, 2L, 0L, 2L, 2L, 0L, 2L, 0L, 2L, 0L, 0L, 0L, 2L, 2L, 2L, 0L, 2L, 0L, 0L, 0L, 2L, 0L, 0L), nsurrogate = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), yval2 = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 249, 219, 114, 105, 49, 56, 54, 34, 20, 17, 3, 3, 0, 2, 30, 26, 26, 16, 10, 10, 0, 0, 4, 3, 1, 69, 25, 0, 25, 0, 25, 11, 0, 11, 0, 11, 0, 11, 14, 44, 16, 9, 0, 9, 0, 9, 7, 28, 0, 28, 0.7, 0.849942146369685, 1, 0.730869001297017, 1, 0.591562233449249, 0.760430333245867, 1, 0.540359120657828, 1, 0.149906890130354, 1, 0, 0.0845588235294117, 0.305967312808818, 0.512362301101591, 0.651314765831648, 1, 0.418073227733056, 1, 0, 0, 0.0845588235294117, 1, 0.0225711481844946, 0.3, 0.150057853630315, 0, 0.269130998702983, 0, 0.408437766550751, 0.239569666754133, 0, 0.459640879342172, 0, 0.850093109869646, 0, 1, 0.915441176470588, 0.694032687191182, 0.487637698898409, 0.348685234168352, 0, 0.581926772266944, 0, 1, 1, 0.915441176470588, 0, 0.977428851815505, 1, 0.724358302776323, 0.320481927710843, 0.403876375065479, 0.137751004016064, 0.266125371049415, 0.199633315872184, 0.095582329317269, 0.104050986554915, 0.0477911646586345, 0.0562598218962808, 0.00843373493975903, 0.0478260869565217, 0.0664920551772307, 0.275641697223677, 0.142657586869216, 0.11222280426052, 0.0449799196787148, 0.0672428845818055, 0.0281124497991968, 0.0391304347826087, 0.0304347826086957, 0.132984110354461, 0.00843373493975903, 0.124550375414702), .Dim = c(25L, 6L), .Dimnames = list(NULL, c('', '', '', '', '', 'nodeprob')))), .Names = c('var', 'wt', 'dev', 'yval', 'complexity', 'ncompete', 'nsurrogate', 'yval2'), class = 'data.frame', row.names = c(1L, 2L, 4L, 5L, 10L, 11L, 22L, 44L, 45L, 90L, 91L, 182L, 183L, 23L, 3L, 6L, 12L, 24L, 25L, 50L, 51L, 13L, 7L, 14L, 15L)));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall7_58253c68cd3f834cf3505bd19f652504() {
        assertEval("argv <- list(structure(c(2.828, -1.04, -2.738, 3.084), .Names = c('(Intercept)', 'age', 'wgt', 'prot')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall8_26ae835c4720fb4206f0c5e77c3dbabe() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall9_6f52a977e120b514c37cd9f5cf69465c() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.call(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter1_3e5d540071f306d0e750e8ea1065aae3() {
        assertEval("argv <- list('pch');is.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter10_00eba5f7bd92690cdebe5cc438b9101c() {
        assertEval("argv <- list('\\'class\\' is a reserved slot name and cannot be redefined');do.call('is.character', argv)");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter2_de0f4feb255e655479b7b3067713a84f() {
        assertEval("argv <- list(structure(list(mai = c(0.51, 0.41, 0.41, 0.21), mar = c(5.1, 4.1, 4.1, 2.1), cex = 1, yaxs = 'r'), .Names = c('mai', 'mar', 'cex', 'yaxs')));is.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter3_c4ce3e4c849ee317df8ea3da506d64ff() {
        assertEval("argv <- list(structure(list(usr = c(-0.04, 1.04, -0.04, 1.04), mgp = c(3, 1, 0)), .Names = c('usr', 'mgp')));is.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter4_27ae71169988468319e602866048f759() {
        assertEval("argv <- list(c(-1, 1, -1, 1));is.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter5_865c5b83ce73215164094ddb46c0b970() {
        assertEval("argv <- list(structure(list(usr = c(-4.82721591443179, -1.44459960821772, -4.82721591443179, -1.44459960821772)), .Names = 'usr'));is.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter6_b5810baa50e9584b08113fec7db13d5e() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter7_d061659e7c853b40683ae679f335cd6f() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinischaracter_testischaracter8_da295379c48d2ec91f30e34ec1ea0789() {
        assertEval("argv <- list(structure(c(238L, 154L, 73L), .Dim = c(3L, 1L), .Dimnames = list(c('red', 'green', 'blue'), NULL)));is.character(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscomplex_testiscomplex1_17447fc6bc5a3e7948bf6ca58776a1c8() {
        assertEval("argv <- list(integer(0));is.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscomplex_testiscomplex2_356b15c403d8de1d0b6bcce5c7b1e0c8() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscomplex_testiscomplex3_eb73621e38a6e14443b9706f57adaa79() {
        assertEval("argv <- list(structure(1:24, .Dim = 2:4));is.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscomplex_testiscomplex4_7f99f72176d8256c0360850982256f99() {
        assertEval("argv <- list(NA_complex_);is.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscomplex_testiscomplex5_9e92a5cbe2f2b7eff9e6f542de02acdf() {
        assertEval("argv <- list(1.3+0i);is.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscomplex_testiscomplex6_ca95380e2af079a3aee43e7854a4f9c3() {
        assertEval("argv <- list(complex(0));is.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltiniscomplex_testiscomplex7_9a174690f6aae6e113cb1bedb494f693() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.complex(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisdouble_testisdouble1_7531b9df5250f930cc4d588e5a0f71dc() {
        assertEval("argv <- list(list(1, list(3, 'A')));is.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisdouble_testisdouble2_6e749770b99b58faf298175e8fab0e92() {
        assertEval("argv <- list(structure(1:7, .Names = c('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7')));is.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisdouble_testisdouble3_ec0d2c1288d7fce606bf7667517476c3() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisdouble_testisdouble4_eec40fbd2cfeb998c1010abc1380a8cc() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisdouble_testisdouble5_d1e684f171a9c3d26905cd6c0a19e1f7() {
        assertEval("argv <- list(structure(1:24, .Dim = 2:4));is.double(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisdouble_testisdouble7_efcf5caaacee4bcbf511899b71ad367a() {
        assertEval("argv <- list(structure(c(1, 5, 9, 13, 17, 21, 2, 6, 10, 14, 18,     22, 3, 7, 11, 15, 19, 23, 4, 8, 12, 16, 20, 24), .Dim = c(6L,     4L)));do.call('is.double', argv)");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment1_d2b4f79f9372d89f58f41542428fae4a() {
        assertEval("argv <- list(structure(list(B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor'), Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L)), .Names = c('B', 'V', 'N', 'Y'), row.names = 2:72, class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment10_b8acfc7e6ad045f39c928a88fc68ae25() {
        assertEval("argv <- list(structure(list(breaks = c(26, 30, 54, 25, 70, 52, 51, 26, 67, 18, 21, 29, 17, 12, 18, 35, 30, 36, 36, 21, 24, 18, 10, 43, 28, 15, 26, 27, 14, 29, 19, 29, 31, 41, 20, 44, 42, 26, 19, 16, 39, 28, 21, 39, 29, 20, 21, 24, 17, 13, 15, 15, 16, 28), wool = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('A', 'B'), class = 'factor'), tension = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('L', 'M', 'H'), class = 'factor')), .Names = c('breaks', 'wool', 'tension'), row.names = c(NA, -54L), class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment11_14837fa2da15aa6ed326eb777388e337() {
        assertEval("argv <- list(structure(list(y = c(0.219628047744843, 0.360454661130887, NA, 0.114681204747219, -1.14267533343616, 0.772374419482067, 0.681741904304867, 0.171869265068012, 2.08409180391906, 0.367547276775469), x1 = c(1L, 2L, 3L, NA, 5L, 6L, 7L, 8L, 9L, 10L), x2 = 1:10, x3 = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), wt = c(0, 1, 1, 1, 1, 1, 1, 1, 1, 1)), .Names = c('y', 'x1', 'x2', 'x3', 'wt'), row.names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment12_98594ede282c2086af54f76a125554a4() {
        assertEval("argv <- list(structure(list(x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861)), .Names = c('x', 'y'), row.names = c(NA, -10L), class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment13_77a1342d12b4f17598ae66de3d5c1598() {
        assertEval("argv <- list(structure(list(weight = c(1.9, 3.1, 3.3, 4.8, 5.3, 6.1, 6.4, 7.6, 9.8, 12.4), depression = c(2, 1, 5, 5, 20, 20, 23, 10, 30, 25)), .Names = c('weight', 'depression'), row.names = c(NA, -10L), class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment14_a9c58c3beff441942f449e5cd53cc09a() {
        assertEval("argv <- list(structure(list(loglik = c(-577.080015666702, -568.702653976085, -567.639101463216, -565.252511135152), Chisq = c(NA, 16.7547233812336, 2.12710502573896, 4.77318065612872), Df = c(NA, 1, 1, 3), `Pr(>|Chi|)` = c(NA, 4.25362427346476e-05, 0.144713844418628, 0.189179603743297)), .Names = c('loglik', 'Chisq', 'Df', 'Pr(>|Chi|)'), row.names = c('NULL', 'ph.ecog', 'wt.loss', 'poly(age, 3)'), class = c('anova', 'data.frame'), heading = 'Analysis of Deviance Table\\n Cox model: response is Surv(time, status)\\nTerms added sequentially (first to last)\\n'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment16_dc7a61a64702dfae96009368d918ccfa() {
        assertEval("argv <- list(numeric(0));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment2_cb4012012a965951be24a9126f599d5a() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment3_246a7355a410de372c26ec0763ea969a() {
        assertEval("argv <- list(structure(list(ID = c(65L, 65L), Age = c(18L, 18L), OME = structure(c(1L, 1L), .Label = c('N/A', 'high', 'low'), class = 'factor'), Loud = c(35L, 50L), Noise = structure(c(2L, 2L), .Label = c('coherent', 'incoherent'), class = 'factor'), Correct = 0:1, Trials = c(1L, 1L), UID = c(71L, 71L), UIDn = c(71.1, 71.1)), .Names = c('ID', 'Age', 'OME', 'Loud', 'Noise', 'Correct', 'Trials', 'UID', 'UIDn'), row.names = c(691L, 701L), class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment4_f226b9ea4254d2b62b6e92cd48c48dc6() {
        assertEval("argv <- list(c(1.21066831870929-1.66634219937781i, -1.3109785475009-4.03477541783013i, -8.31047673770943-2.70023589529419i, -14.5607479203187+10.5790080335186i, 0.0000113099668+37.0708585836817i, 61.7727497177743+44.8804951883406i, 149.572574104172-48.599145973822i, 100.099969025816-308.076538446181i, -392.173075447774-539.779307378543i, -1374.2485561312+0.00083854036i, -1663.75779164483+2289.96937670968i, 1801.61375934412+5544.78319295828i, 11420.6629218159+3710.7883116515i, 20010.0779347631-14538.198725138i, -0.0466281166-50944.5738831589i, -84891.1497420117-61676.9039120865i, -205549.85324714+66787.431606375i, -137561.979567894+423373.822075425i, 538943.735314369+741790.604941508i, 1888559.09402798-2.30472576i));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment5_54cb9e3dda1a5d97554c60ad0cf56406() {
        assertEval("argv <- list(structure(c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(5L, 5L)));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment6_28372b784bae09d0732af189030024c1() {
        assertEval("argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment7_f32b937c6b6405ed777f5d7b29e2aa54() {
        assertEval("argv <- list(structure(c(1+0i, 5+0i, 9+0i, 13+0i, 17+0i, 21+0i, 2+0i, 6+0i, 10+0i, 14+0i, 18+0i, 22+0i, 3+0i, 7+0i, 11+0i, 15+0i, 19+0i, 23+0i, 4+0i, 8+0i, 12+0i, 16+0i, 20+0i, 24+0i), .Dim = c(6L, 4L)));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment8_52f864cd221cb93895b3e18261c6fb52() {
        assertEval("argv <- list(structure(list(z = c(-3.32814298919898, -2.50040106767383, -1.77388580318944, -1.1253131847654, -0.538436159302777, 0, 0.494272294062615, 0.955576378633541, 1.38763151510367, 1.79457990658358, 2.17975641634868, 2.54588157879649, 2.89520069061619), par.vals = structure(c(14.1116522107389, 16.2879401909036, 18.4642281710683, 20.640516151233, 22.8168041313977, 24.9930921115624, 27.1693800917271, 29.3456680718919, 31.5219560520566, 33.6982440322213, 35.874532012386, 38.0508199925507, 40.2271079727154, 9.77292620586829, 6.94555751970939, 5.3344468962477, 4.29948550876711, 3.58192055542193, 3.05706219239734, 2.6578922832996, 2.34490705796319, 2.09354140228955, 1.88766190416604, 1.71625883349025, 1.57157057930468, 1.44797941211333), .Dim = c(13L, 2L), .Dimnames = list(NULL, c('ymax', 'xhalf')))), .Names = c('z', 'par.vals'), row.names = c(NA, -13L), class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisenvironment_testisenvironment9_b71c1cc390dee8fc663b1a9a055b23c2() {
        assertEval("argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'));is.environment(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression1_a2b1412034cd5dcb15cf18edb97bc8df() {
        assertEval("argv <- list(c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression10_6a300aa4d132c081766793438d8212d0() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression11_47dfc502c584198b390333a908821bf6() {
        assertEval("argv <- list(structure(list(var = structure(c(3L, 5L, 3L, 1L, 1L, 1L, 3L, 4L, 1L, 2L, 1L, 1L, 1L), .Label = c('<leaf>', 'frost', 'life.exp', 'population', 'region'), class = 'factor'), n = c(50L, 21L, 13L, 10L, 3L, 8L, 29L, 21L, 4L, 17L, 9L, 8L, 8L), wt = c(50, 21, 13, 10, 3, 8, 29, 21, 4, 17, 9, 8, 8), dev = c(667.7458, 87.3866666666667, 18.8523076923077, 6.989, 2.84666666666667, 28.2, 222.311724137931, 116.909523809524, 10.18, 50.8823529411765, 24.24, 11.62, 14.415), yval = c(7.378, 4.23333333333333, 3.14615384615385, 2.69, 4.66666666666667, 6, 9.6551724137931, 8.56190476190476, 5.2, 9.35294117647059, 8.46666666666667, 10.35, 12.525), complexity = c(0.536203161735203, 0.0604037628905475, 0.0135031040639133, 0.00508384221318095, 0.01, 0.01, 0.136260236048519, 0.0836353757198433, 0.01, 0.0224971133344103, 0.01, 0.01, 0.01), ncompete = c(4L, 4L, 4L, 0L, 0L, 0L, 4L, 4L, 0L, 4L, 0L, 0L, 0L), nsurrogate = c(5L, 4L, 1L, 0L, 0L, 0L, 4L, 3L, 0L, 5L, 0L, 0L, 0L)), .Names = c('var', 'n', 'wt', 'dev', 'yval', 'complexity', 'ncompete', 'nsurrogate'), row.names = c(1L, 2L, 4L, 8L, 9L, 5L, 3L, 6L, 12L, 13L, 26L, 27L, 7L), class = 'data.frame'));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression12_e825bbf1c4f53d4c36c549c5813d427c() {
        assertEval("argv <- list(structure(c(1, 24.25, 56.5, 56.92771, 86.75, 117), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression13_05f67ed6bebb14c352861e54b309ea04() {
        assertEval("argv <- list(1.79769313486232e+308);is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression14_9b8f0753ee0353aa1fe1484f38395fac() {
        assertEval("argv <- list(c(1.1+0i, NA, 3+0i));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression15_242a24c63fec2e05a2a7dd3b78b4a9f6() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression16_e83ee4466b61c3d6c4ecd515aadbf420() {
        assertEval("argv <- list(structure(c('***', '***', '*', '*'), legend = '0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1', class = 'noquote'));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression17_aae8e3cbada491710f88a76977aada1d() {
        assertEval("argv <- list(structure(c(-0.0880891704401362, -0.508170309402877, -0.00510235947825228, 0.0737329622006759), .Names = c('(Intercept)', 'x1', 'z', 'x1:z')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression18_ef3967ff7fa4aa53c58fb0c330baaaaf() {
        assertEval("argv <- list(structure(c(-Inf, -Inf, -2.248e+263, -Inf, -3.777e+116, -1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression19_75fceb2060f0e6db20cbddbcd82f4897() {
        assertEval("argv <- list(quote(print(.leap.seconds, tz = 'PST8PDT')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression2_ad5dc0c89aa44f12d807e0f87ad52552() {
        assertEval("argv <- list(structure(list(class = c('ordered', 'factor'), levels = character(0)), .Names = c('class', 'levels')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression20_8972221e6d3cf4d0b9013b825d81f926() {
        assertEval("argv <- list(c(-0.5, -0.47979797979798, -0.45959595959596, -0.439393939393939, -0.419191919191919, -0.398989898989899, -0.378787878787879, -0.358585858585859, -0.338383838383838, -0.318181818181818, -0.297979797979798, -0.277777777777778, -0.257575757575758, -0.237373737373737, -0.217171717171717, -0.196969696969697, -0.176767676767677, -0.156565656565657, -0.136363636363636, -0.116161616161616, -0.0959595959595959, -0.0757575757575757, -0.0555555555555555, -0.0353535353535353, -0.0151515151515151, 0.00505050505050508, 0.0252525252525253, 0.0454545454545455, 0.0656565656565657, 0.0858585858585859, 0.106060606060606, 0.126262626262626, 0.146464646464647, 0.166666666666667, 0.186868686868687, 0.207070707070707, 0.227272727272727, 0.247474747474748, 0.267676767676768, 0.287878787878788, 0.308080808080808, 0.328282828282828, 0.348484848484849, 0.368686868686869, 0.388888888888889, 0.409090909090909, 0.429292929292929, 0.44949494949495, 0.46969696969697, 0.48989898989899, 0.51010101010101, 0.53030303030303, 0.550505050505051, 0.570707070707071, 0.590909090909091, 0.611111111111111, 0.631313131313131, 0.651515151515152, 0.671717171717172, 0.691919191919192, 0.712121212121212, 0.732323232323232, 0.752525252525253, 0.772727272727273, 0.792929292929293, 0.813131313131313, 0.833333333333333, 0.853535353535354, 0.873737373737374, 0.893939393939394, 0.914141414141414, 0.934343434343434, 0.954545454545455, 0.974747474747475, 0.994949494949495, 1.01515151515152, 1.03535353535354, 1.05555555555556, 1.07575757575758, 1.0959595959596, 1.11616161616162, 1.13636363636364, 1.15656565656566, 1.17676767676768, 1.1969696969697, 1.21717171717172, 1.23737373737374, 1.25757575757576, 1.27777777777778, 1.2979797979798, 1.31818181818182, 1.33838383838384, 1.35858585858586, 1.37878787878788, 1.3989898989899, 1.41919191919192, 1.43939393939394, 1.45959595959596, 1.47979797979798, 1.5));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression21_655a6c93630463bd3ab42e4670faf5c1() {
        assertEval("argv <- list(structure(list(dim = 1L, dimnames = list('a')), .Names = c('dim', 'dimnames')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression22_d34a057f543873cc84b0a3e1eed92ade() {
        assertEval("argv <- list(structure(c(NA, 6346.2), .Names = c('1', '2')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression23_e9f4286e3fa1bd7af640d03674c4d5c1() {
        assertEval("argv <- list(3.97376540705816e-12);is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression25_47d86b6bd53cf19a1c07ffe9e8d7f68d() {
        assertEval("argv <- list(expression(quote(expression(b = pi^3))));do.call('is.expression', argv)");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression3_c2920fedbc680959c7ec16efaf7d8f5e() {
        assertEval("argv <- list(c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression4_5538c7c1639cff4a47de31477a0559e8() {
        assertEval("argv <- list(structure(list(nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('nationality', 'deceased', 'title', 'other.author'), class = 'data.frame', row.names = c(NA, -6L)));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression5_feae30b860857adc604c469183ee4e34() {
        assertEval("argv <- list(structure(c('Min.   :10.00  ', '1st Qu.:15.25  ', 'Median :20.50  ', 'Mean   :21.67  ', '3rd Qu.:25.50  ', 'Max.   :43.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool'))));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression6_5d3cc0d08cc69ed69277201896807d2d() {
        assertEval("argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression7_bfa698468fb326588799962bf4e7d0c8() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression8_51e1b78530537945f4c60bac1d6bcc47() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisexpression_testisexpression9_00f6e18781caa73308e99e2ef1dd5c34() {
        assertEval("argv <- list(structure(3.14159265358979, .Tsp = c(1, 1, 1), class = 'ts'));is.expression(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfactor_testisfactor1_bcbf07a03dc46565dec305acc0d55f90() {
        assertEval("argv <- structure(list(x = c(TRUE, TRUE, TRUE, TRUE, FALSE, FALSE,     FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE,     FALSE, FALSE, FALSE, FALSE, FALSE)), .Names = 'x');do.call('is.factor', argv)");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite1_2120c12ec104ec195efeb4d1edfa946f() {
        assertEval("argv <- list(c(20.1635649375266, 0.00464806897188935, 7.66871331765456, 12.5627629785965, 11.5797681339384, 12.9719582729673, 25.2769526097163, -1.81739378653632, 0.81215865601413, -3.83170645669318, -0.246853801421158, 3.46135095276697, 2.4554639832607, -3.21187324485145, -3.0183971859156));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite10_a54ba2260a5c0bbf3588f18e608b5096() {
        assertEval("argv <- list(structure(c(-32.6915744137254, -24.6945405669482, -24.6945405669482, -357.79068676373), .Dim = c(2L, 2L)));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite11_b6751158b339a2506c899b42d2a3efb9() {
        assertEval("argv <- list(3.18309886183776e-301);is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite12_cda886e60fa6f180ff78b306a7dd258b() {
        assertEval("argv <- list(c(0.0599, 0.00599, 0.000599, 5.99e-05, 5.99e-06, 5.99e-07));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite13_2a107a5b4998978c3c23deab93132e9a() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L)));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite14_a884b2a8cf5fc7ccc5357176c8cf5dc0() {
        assertEval("argv <- list(structure(2L, .Label = c('Northeast', 'South', 'North Central', 'West'), class = 'factor'));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite15_4f881d4c9e2847c6ff0b7dcf80817c62() {
        assertEval("argv <- list(c(0.0099, 0.099, 0.99, 9.9, 99, 990, 9900, 99000, 990000, 9900000, 9.9e+07, 9.9e+08, 9.9e+09, 9.9e+10));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite16_9fc9d36f86b99b9abad740b8ffdc4f14() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite17_176feeed2a9e8f8b58798be0d5465736() {
        assertEval("argv <- list(NULL);is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite18_822134d6f5d8cbf2f5a015d450cf3729() {
        assertEval("argv <- list(structure(1, .Tsp = c(1, 1, 1), class = 'ts'));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite19_525d6af261dc35fb6b967b8e5e0bdef7() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite2_277ad456390bc3b8b39fbb74084dcc0c() {
        assertEval("argv <- list(c(NA, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite20_d32f8543c755faee4b81fd27c1eae483() {
        assertEval("argv <- list(structure(c(100L, 0L, NA, NA, NA, 3L, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite21_bf3fd9b9a60c358669bbcd4ca3c17a15() {
        assertEval("argv <- list(c(1.86606598307361, 339033474310168, 6.15968019059533e+28, 1.11911250438065e+43, 2.03324321833028e+57, 3.69406826275609e+71, 6.71151400229846e+85, 1.21937162496937e+100, 2.2153975381282e+114, 4.02501267984465e+128, 7.31278553581751e+142, 1.32861276588395e+157, 2.41387071044804e+171, 4.38560576593759e+185, 7.96792382084694e+199, 1.44764060891943e+214, 2.63012470966353e+228, 4.77850368783602e+242, 8.6817546752692e+256, 1.57733192575377e+271));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite22_c5a79ff572df7b2853a67b1278b288dd() {
        assertEval("argv <- list(structure(1:7, .Dim = c(1L, 7L)));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite23_e0e28e2d33c142874a4d372c08259afd() {
        assertEval("argv <- list(structure(c(-4, 0, 0, 0, 0, 0, 0, -406.725, 41.7955066364795, 0, 0, 0, 0, 0, -1550.79375, 381.717151319926, 49.8228991342168, 0, 0, 0, 0, -1277.325, 224.617432123818, -31.1858918860748, -282.060212912726, 0, 0, 0, -1042.675, 125.261805546114, -29.9849484767744, 164.425554254677, -170.353263600129, 0, 0, -469.696, 26.3795103523805, 4.19691803785862, -3.18974110831568, 0.0462484557378925, 1.46320172717486, 0, -7818, 18.2758880432689, 1.77525956575195, -1.45298766739792, -0.449176219307484, -0.281900648530911, -0.669305080560524), .Dim = c(7L, 7L), .Dimnames = list(c('1947', '1948', '1949', '1950', '1951', '1952', '1953'), c('(Intercept)', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'))));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite24_d92d28815ee0026457e1457a0a8ca0b6() {
        assertEval("argv <- list(c(13L, 13L));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite25_2aa8da1e1ced7fc8f3c0103b3676ee90() {
        assertEval("argv <- list(structure(c(13991, 13995), class = 'Date'));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite3_f084456956dc7ed4a7f1daf485d1396c() {
        assertEval("argv <- list(structure(485.051413351662, .Names = 'value'));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite4_d10e62cb2a9cf92411587d5cda23700f() {
        assertEval("argv <- list(151.670620533678);is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite5_f274c8af4d63c42e5df0decdd91d393f() {
        assertEval("argv <- list(c(NA, 5, 9, 1, 2, 5, 6, 7, 8, 3, 8));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite6_6013de97886e633dc2f3906d44fcde8f() {
        assertEval("argv <- list(structure(1.27861470300044, .Dim = c(1L, 1L), .Dimnames = list('(Intercept)', '(Intercept)')));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite7_abad0209e2315b3923a92d5bd2842f1b() {
        assertEval("argv <- list(c(3.16233404821525, 0.257188565034331, -0.453229834209339, 0.242190153165057, -0.923637244637281, -0.792686406797337, -0.000583432444331871, -0.115409318984254, 0.305847927531439, 0.0246693430266492, 0.461347310132161, -0.236100949717949, 0.28892702011061, -0.134702428025256, -0.00354133265015019, -0.239319416508562, -0.657338306370259, 0.617201588652923, 0.864066808989359, 0.903680787204032, 0.524476724719486, 1.12851069606821, -0.0690532444696005, 0.111965689984579, -0.494558736384601, -0.26678456955063, -0.953423764504691, 0.0388401464034938, -0.280977489674148, -0.0317343673308523, 0.332270617799988, -0.0953997363217814));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite8_a65e1c1ac1bf0df95fa6d07ef5e4443a() {
        assertEval("argv <- list(c(96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite9_93add09c39c9f62fc3ce16cdf807599f() {
        assertEval("argv <- list(structure(c(0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.0220588235294118, 0.00735294117647059, 0.0147058823529412, 0.0110294117647059, 0.0257352941176471, 0.00735294117647059, 0.0294117647058824, 0.0147058823529412, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.0110294117647059, 0.0110294117647059, 0.0147058823529412, 0.0110294117647059, 0.00735294117647059, 0.00367647058823529, 0.00735294117647059, 0.0110294117647059, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00367647058823529, 0.0110294117647059, 0.00367647058823529, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00735294117647059, 0.0147058823529412, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00367647058823529, 0.0183823529411765, 0.00735294117647059, 0.00367647058823529, 0.0110294117647059, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.0220588235294118, 0.00735294117647059, 0.00367647058823529, 0.00735294117647059, 0.0183823529411765, 0.00735294117647059, 0.00735294117647059, 0.00735294117647059, 0.0147058823529412, 0.0147058823529412, 0.00367647058823529, 0.00367647058823529, 0.0110294117647059, 0.0147058823529412, 0.00735294117647059, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.0183823529411765, 0.0147058823529412, 0.00367647058823529, 0.0110294117647059, 0.00367647058823529, 0.00367647058823529, 0.0147058823529412, 0.00735294117647059, 0.0110294117647059, 0.00735294117647059, 0.00367647058823529, 0.0294117647058824, 0.00367647058823529, 0.0183823529411765, 0.00367647058823529, 0.0110294117647059, 0.0147058823529412, 0.0147058823529412, 0.00367647058823529, 0.0110294117647059, 0.00367647058823529, 0.00735294117647059, 0.0220588235294118, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.0220588235294118, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.0110294117647059, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529), class = 'table', .Dim = 126L, .Dimnames = structure(list(fe = c('1.6', '1.667', '1.7', '1.733', '1.75', '1.783', '1.8', '1.817', '1.833', '1.85', '1.867', '1.883', '1.917', '1.933', '1.95', '1.967', '1.983', '2', '2.017', '2.033', '2.067', '2.083', '2.1', '2.133', '2.15', '2.167', '2.183', '2.2', '2.217', '2.233', '2.25', '2.267', '2.283', '2.3', '2.317', '2.333', '2.35', '2.367', '2.383', '2.4', '2.417', '2.483', '2.617', '2.633', '2.8', '2.883', '2.9', '3.067', '3.317', '3.333', '3.367', '3.417', '3.45', '3.5', '3.567', '3.6', '3.683', '3.717', '3.733', '3.75', '3.767', '3.817', '3.833', '3.85', '3.883', '3.917', '3.95', '3.966', '3.967', '4', '4.033', '4.05', '4.067', '4.083', '4.1', '4.117', '4.133', '4.15', '4.167', '4.183', '4.2', '4.233', '4.25', '4.267', '4.283', '4.3', '4.317', '4.333', '4.35', '4.366', '4.367', '4.383', '4.4', '4.417', '4.433', '4.45', '4.467', '4.483', '4.5', '4.517', '4.533', '4.55', '4.567', '4.583', '4.6', '4.617', '4.633', '4.65', '4.667', '4.7', '4.716', '4.733', '4.75', '4.767', '4.783', '4.8', '4.817', '4.833', '4.85', '4.883', '4.9', '4.933', '5', '5.033', '5.067', '5.1')), .Names = 'fe')));is.finite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction1_2346ff9bfb1b82dd835cff3a31719bb0() {
        assertEval("argv <- list(function (x, y) {    c(x, y)});is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction10_563a07bfa9e149ea701db69fb5610e05() {
        assertEval("argv <- list(structure(c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(5L, 5L)));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction11_758254bdeb5cd140cfeec2692939c602() {
        assertEval("argv <- list(c(0.2853725+0.3927816i, -0.07283992154231+0.224178134292i, -0.10883955678256+0.035364093700981i, -0.0449501817243521-0.0326582354266614i, 8.2299281e-09-2.69753665872767e-02i, 0.0105954299973322-0.0076980245688633i, 0.00604728675391113+0.00196488543076221i, 0.00095395849586903+0.00293598723445021i, -0.00088096824266454+0.00121254736140417i, -7.27670402517897e-04-4.44010655e-10i, -2.07656947543323e-04-2.85815671682054e-04i, 5.3003554565545e-05-1.6312776087427e-04i, 7.9199339795869e-05-2.57333559721505e-05i, 3.27089023280074e-05+2.37644512768026e-05i, -1.79660253e-11+1.96291758626278e-05i, -7.70998422901389e-06+5.60161993213361e-06i, -4.4004307139296e-06-1.42979165736404e-06i, -6.9416605906477e-07-2.13643143624753e-06i, 6.4105505412914e-07-8.82334435385704e-07i, 5.29504214700362e-07+6.46186824e-13i));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction12_be269c67bb1d26df96c1001879ee2131() {
        assertEval("argv <- list(structure(c(9, 13, 13, 18, 23, 28, 31, 34, 45, 48, 161, 5, 5, 8, 8, 12, 16, 23, 27, 30, 33, 43, 45, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1), .Dim = c(23L, 2L), .Dimnames = list(NULL, c('time', 'status')), type = 'right', class = 'Surv'));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction13_d1251f6260511dbe7ff930a97b89d837() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction14_637e7db5053f1b2dcfee3b53831ba043() {
        assertEval("argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, -10L), class = 'data.frame'));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction15_dd13fdc47c7f20e0567c1f3aaf36d13a() {
        assertEval("argv <- list(structure(function (x) standardGeneric('dim', .Primitive('dim')), generic = structure('dim', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = 'x', default = .Primitive('dim'), skeleton = quote(.Primitive('dim')(x)), class = structure('standardGeneric', package = 'methods')));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction16_b764d9f0f945e0d31b68b3867f95d2ea() {
        assertEval("argv <- list(structure(function (x, na.rm = FALSE, dims = 1, ...) standardGeneric('rowMeans'), generic = structure('rowMeans', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = c('x', 'na.rm', 'dims'), default = structure(function (x, na.rm = FALSE, dims = 1, ...) base::rowMeans(x, na.rm = na.rm, dims = dims, ...), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = structure('rowMeans', package = 'base'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (x, na.rm = FALSE, dims = 1, ...) base::rowMeans(x, na.rm = na.rm, dims = dims, ...))(x, na.rm, dims, ...)), class = structure('standardGeneric', package = 'methods')));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction17_63672070125ce0865db04f99aefd1988() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = c('ordered', 'factor')));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction18_7b42163b183135e5c32bcbae5db926fa() {
        assertEval("argv <- list(structure(list(usr = c(0.568, 1.432, -1.08, 1.08), xaxp = c(0.6, 1.4, 4), yaxp = c(-1, 1, 4)), .Names = c('usr', 'xaxp', 'yaxp')));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction19_710e97b2c4df526c9240dc1d0b69a9ff() {
        assertEval("argv <- list(structure(list(double.eps = 2.22044604925031e-16, double.neg.eps = 1.11022302462516e-16, double.xmin = 2.2250738585072e-308, double.xmax = 1.79769313486232e+308, double.base = 2L, double.digits = 53L, double.rounding = 5L, double.guard = 0L, double.ulp.digits = -52L, double.neg.ulp.digits = -53L, double.exponent = 11L, double.min.exp = -1022L, double.max.exp = 1024L, integer.max = 2147483647L, sizeof.long = 8L, sizeof.longlong = 8L, sizeof.longdouble = 16L, sizeof.pointer = 8L), .Names = c('double.eps', 'double.neg.eps', 'double.xmin', 'double.xmax', 'double.base', 'double.digits', 'double.rounding', 'double.guard', 'double.ulp.digits', 'double.neg.ulp.digits', 'double.exponent', 'double.min.exp', 'double.max.exp', 'integer.max', 'sizeof.long', 'sizeof.longlong', 'sizeof.longdouble', 'sizeof.pointer')));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction2_ce530197637b204eff56771230a9f40f() {
        assertEval("argv <- list(c('a', 'b', NA, NA, NA, 'f', 'g', 'h', 'i', 'j', 'k', 'l'));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction20_bde4d27b02aeffddbf233a7495c890f6() {
        assertEval("argv <- list(structure(list(extra = c(0.7, -1.6, -0.2, -1.2, -0.1, 3.4, 3.7, 0.8, 0, 2, 1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 5.5, 1.6, 4.6, 3.4), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('1', '2'), class = 'factor'), ID = structure(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L), .Label = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), class = 'factor')), .Names = c('extra', 'group', 'ID'), row.names = c(NA, -20L), class = 'data.frame'));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction22_e8a64e8583a5ed0477e9df7eab1f61fd() {
        assertEval("argv <- list(function(e1, e2) {    ok <- switch(.Generic, `<` = , `>` = , `<=` = , `>=` = ,         `==` = , `!=` = TRUE, FALSE)    if (!ok) {        warning(sprintf(''%s' is not meaningful for ordered factors',             .Generic))        return(rep.int(NA, max(length(e1), if (!missing(e2)) length(e2))))    }    if (.Generic %in% c('==', '!=')) return(NextMethod(.Generic))    nas <- is.na(e1) | is.na(e2)    ord1 <- FALSE    ord2 <- FALSE    if (nzchar(.Method[1L])) {        l1 <- levels(e1)        ord1 <- TRUE    }    if (nzchar(.Method[2L])) {        l2 <- levels(e2)        ord2 <- TRUE    }    if (all(nzchar(.Method)) && (length(l1) != length(l2) ||         !all(l2 == l1))) stop('level sets of factors are different')    if (ord1 && ord2) {        e1 <- as.integer(e1)        e2 <- as.integer(e2)    } else if (!ord1) {        e1 <- match(e1, l2)        e2 <- as.integer(e2)    } else if (!ord2) {        e2 <- match(e2, l1)        e1 <- as.integer(e1)    }    value <- get(.Generic, mode = 'function')(e1, e2)    value[nas] <- NA    value});do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction23_01c2680c730e08c5d4fcf565f4d73441() {
        assertEval("argv <- list(function(x, width = 0.9 * getOption('width'), indent = 0,     exdent = 0, prefix = '', simplify = TRUE, initial = prefix) {    if (!is.character(x)) x <- as.character(x)    indentString <- paste(rep.int(' ', indent), collapse = '')    exdentString <- paste(rep.int(' ', exdent), collapse = '')    y <- list()    UB <- TRUE    if (all(Encoding(x) == 'UTF-8')) UB <- FALSE else {        enc <- Encoding(x) %in% c('latin1', 'UTF-8')        if (length(enc)) x[enc] <- enc2native(x[enc])    }    z <- lapply(strsplit(x, '\\n[ 	\\n]*\\n', perl = TRUE, useBytes = UB),         strsplit, '[ 	\\n]', perl = TRUE, useBytes = UB)    for (i in seq_along(z)) {        yi <- character()        for (j in seq_along(z[[i]])) {            words <- z[[i]][[j]]            nc <- nchar(words, type = 'w')            if (anyNA(nc)) {                nc0 <- nchar(words, type = 'b')                nc[is.na(nc)] <- nc0[is.na(nc)]            }            if (any(nc == 0L)) {                zLenInd <- which(nc == 0L)                zLenInd <- zLenInd[!(zLenInd %in% (grep('[.?!][)\\'']{0,1}$',                   words, perl = TRUE, useBytes = TRUE) + 1L))]                if (length(zLenInd)) {                  words <- words[-zLenInd]                  nc <- nc[-zLenInd]                }            }            if (!length(words)) {                yi <- c(yi, '', initial)                next            }            currentIndex <- 0L            lowerBlockIndex <- 1L            upperBlockIndex <- integer()            lens <- cumsum(nc + 1L)            first <- TRUE            maxLength <- width - nchar(initial, type = 'w') -                 indent            while (length(lens)) {                k <- max(sum(lens <= maxLength), 1L)                if (first) {                  first <- FALSE                  maxLength <- width - nchar(prefix, type = 'w') -                     exdent                }                currentIndex <- currentIndex + k                if (nc[currentIndex] == 0L) upperBlockIndex <- c(upperBlockIndex,                   currentIndex - 1L) else upperBlockIndex <- c(upperBlockIndex,                   currentIndex)                if (length(lens) > k) {                  if (nc[currentIndex + 1L] == 0L) {                    currentIndex <- currentIndex + 1L                    k <- k + 1L                  }                  lowerBlockIndex <- c(lowerBlockIndex, currentIndex +                     1L)                }                if (length(lens) > k) lens <- lens[-seq_len(k)] -                   lens[k] else lens <- NULL            }            nBlocks <- length(upperBlockIndex)            s <- paste0(c(initial, rep.int(prefix, nBlocks -                 1L)), c(indentString, rep.int(exdentString, nBlocks -                 1L)))            initial <- prefix            for (k in seq_len(nBlocks)) s[k] <- paste0(s[k],                 paste(words[lowerBlockIndex[k]:upperBlockIndex[k]],                   collapse = ' '))            yi <- c(yi, s, prefix)        }        y <- if (length(yi)) c(y, list(yi[-length(yi)])) else c(y,             '')    }    if (simplify) y <- as.character(unlist(y))    y});do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction24_d9aa5798393f86fb7ef28b62462d550d() {
        assertEval("argv <- list(function(..., na.rm) {    coerceTimeUnit <- function(x) {        as.vector(switch(attr(x, 'units'), secs = x, mins = 60 *             x, hours = 60 * 60 * x, days = 60 * 60 * 24 * x,             weeks = 60 * 60 * 24 * 7 * x))    }    ok <- switch(.Generic, max = , min = , sum = , range = TRUE,         FALSE)    if (!ok) stop(gettextf(''%s' not defined for \\'difftime\\' objects',         .Generic), domain = NA)    x <- list(...)    Nargs <- length(x)    if (Nargs == 0) {        .difftime(do.call(.Generic), 'secs')    } else {        units <- sapply(x, function(x) attr(x, 'units'))        if (all(units == units[1L])) {            args <- c(lapply(x, as.vector), na.rm = na.rm)        } else {            args <- c(lapply(x, coerceTimeUnit), na.rm = na.rm)            units <- 'secs'        }        .difftime(do.call(.Generic, args), units[[1L]])    }});do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction25_bbff55cc30b0c92d0bbe706357f52864() {
        assertEval("argv <- list(structure(list(platform = 'x86_64-unknown-linux-gnu',     arch = 'x86_64', os = 'linux-gnu', system = 'x86_64, linux-gnu',     status = '', major = '3', minor = '1.1', year = '2014', month = '07',     day = '10', `svn rev` = '66115', language = 'R', version.string = 'R version 3.1.1 (2014-07-10)',     nickname = 'Sock it to Me'), .Names = c('platform', 'arch',     'os', 'system', 'status', 'major', 'minor', 'year', 'month',     'day', 'svn rev', 'language', 'version.string', 'nickname'),     class = 'simple.list'));do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction26_6933b91e5c086b56c930fcdf2c0b9be3() {
        assertEval("argv <- list(function(x, format = '', usetz = FALSE, ...) {    if (!inherits(x, 'POSIXlt')) stop('wrong class')    if (format == '') {        times <- unlist(unclass(x)[1L:3L])        secs <- x$sec        secs <- secs[!is.na(secs)]        np <- getOption('digits.secs')        if (is.null(np)) np <- 0L else np <- min(6L, np)        if (np >= 1L) for (i in seq_len(np) - 1L) if (all(abs(secs -             round(secs, i)) < 1e-06)) {            np <- i            break        }        format <- if (all(times[!is.na(times)] == 0)) '%Y-%m-%d' else if (np ==             0L) '%Y-%m-%d %H:%M:%S' else paste0('%Y-%m-%d %H:%M:%OS',             np)    }    y <- .Internal(format.POSIXlt(x, format, usetz))    names(y) <- names(x$year)    y});do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction27_aef35926778d3a4cc2e0a6763065f6c9() {
        assertEval("argv <- list(function(name, cond = NULL) {    i <- 1L    repeat {        r <- .Internal(.getRestart(i))        if (is.null(r)) return(NULL) else if (name == r[[1L]] &&             (is.null(cond) || is.null(r$test) || r$test(cond))) return(r) else i <- i +             1L    }});do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction28_598a8f892760f397840e7c5ed44d8fae() {
        assertEval("argv <- list(function(x, width = 12, ...) {    if (is.character(x)) return(format.default(x, ...))    if (is.null(width)) width = 12L    n <- length(x)    rvec <- rep.int(NA_character_, n)    for (i in seq_len(n)) {        y <- x[[i]]        cl <- oldClass(y)        if (m <- match('AsIs', cl, 0L)) oldClass(y) <- cl[-m]        rvec[i] <- toString(y, width = width, ...)    }    dim(rvec) <- dim(x)    dimnames(rvec) <- dimnames(x)    format.default(rvec, justify = 'right')});do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction29_c44daea8c4df3b3f81469eb766d81277() {
        assertEval("argv <- list(function(x, i, ...) structure(NextMethod('['), class = class(x)));do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction3_183b621151a3700ce39c58765a15df43() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction31_11866f44e059cdb8d1fb3411015d00ed() {
        assertEval("argv <- list(function(qr, y) {    if (!is.qr(qr)) stop('first argument must be a QR decomposition')    n <- as.integer(nrow(qr$qr))    if (is.na(n)) stop('invalid nrow(qr$qr)')    p <- as.integer(ncol(qr$qr))    if (is.na(p)) stop('invalid ncol(qr$qr)')    k <- as.integer(qr$rank)    if (is.na(k)) stop('invalid ncol(qr$rank)')    im <- is.matrix(y)    if (!im) y <- as.matrix(y)    ny <- as.integer(ncol(y))    if (is.na(ny)) stop('invalid ncol(y)')    if (p == 0L) return(if (im) matrix(0, p, ny) else numeric())    ix <- if (p > n) c(seq_len(n), rep(NA, p - n)) else seq_len(p)    if (is.complex(qr$qr)) {        coef <- matrix(NA_complex_, nrow = p, ncol = ny)        coef[qr$pivot, ] <- .Internal(qr_coef_cmplx(qr, y))[ix,             ]        return(if (im) coef else c(coef))    }    if (isTRUE(attr(qr, 'useLAPACK'))) {        coef <- matrix(NA_real_, nrow = p, ncol = ny)        coef[qr$pivot, ] <- .Internal(qr_coef_real(qr, y))[ix,             ]        return(if (im) coef else c(coef))    }    if (k == 0L) return(if (im) matrix(NA, p, ny) else rep.int(NA,         p))    storage.mode(y) <- 'double'    if (nrow(y) != n) stop(''qr' and 'y' must have the same number of rows')    z <- .Fortran(.F_dqrcf, as.double(qr$qr), n, k, as.double(qr$qraux),         y, ny, coef = matrix(0, nrow = k, ncol = ny), info = integer(1L),         NAOK = TRUE)[c('coef', 'info')]    if (z$info) stop('exact singularity in 'qr.coef'')    if (k < p) {        coef <- matrix(NA_real_, nrow = p, ncol = ny)        coef[qr$pivot[seq_len(k)], ] <- z$coef    } else coef <- z$coef    if (!is.null(nam <- colnames(qr$qr))) if (k < p) rownames(coef)[qr$pivot] <- nam else rownames(coef) <- nam    if (im && !is.null(nam <- colnames(y))) colnames(coef) <- nam    if (im) coef else drop(coef)});do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction32_2615ac382041993d2f82b353672054d9() {
        assertEval("argv <- list(function(cpu = Inf, elapsed = Inf, transient = FALSE) .Internal(setTimeLimit(cpu,     elapsed, transient)));do.call('is.function', argv)");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction4_08973abf26e091c1d720d0c1484577db() {
        assertEval("argv <- list(structure(c(1, 0.341108926893721, 7.03552967282433, 0.0827010685995216, 2.31431632448833, 2.09774421189194, 17.4719768806091, 0.00710660186854106, 0.341108926893721, 6.24415190746514, 0.0686360870302571, 2.93161486304804, 1, 20.6254633582673, 0.242447681896313, 6.78468413466471, 6.14977811045541, 51.2211071100253, 0.02083381966358, 1, 18.3054485390546, 0.201214572879361, 0.142135709250525, 0.0484837592557245, 1, 0.0117547750411693, 0.328946992211217, 0.298164361383444, 2.48339182593415, 0.00101010189694619, 0.0484837592557245, 0.887516960035576, 0.00975563891022635, 12.0917421858535, 4.12460120129202, 85.071810944714, 1, 27.984116332225, 25.3653821820638, 211.266639917518, 0.0859311976119033, 4.12460120129202, 75.5026750343739, 0.829929869015672, 0.432093050296869, 0.147390796704999, 3.04000347678479, 0.0357345569939779, 1, 0.906420695258988, 7.54951978505874, 0.00307071327862333, 0.147390796704999, 2.69805464421362, 0.0296571762053451, 0.476702542822467, 0.16260749282968, 3.35385488513828, 0.0394238096955273, 1.10324047677913, 1, 8.32893580712171, 0.00338773518156042, 0.16260749282968, 2.97660309205839, 0.0327189972167077, 0.0572345079685763, 0.0195232015944512, 0.402675079122419, 0.00473335496976909, 0.132458756115733, 0.120063357811564, 1, 0.000406742861274512, 0.0195232015944512, 0.357380962104814, 0.00392835267006514, 140.714228614202, 47.998879521268, 989.999130803802, 11.6372170735519, 325.65723636963, 295.182458606281, 2458.55574912007, 1, 47.998879521268, 878.641019008853, 9.65807404155984, 2.93161486304804, 1, 20.6254633582673, 0.242447681896313, 6.78468413466471, 6.14977811045541, 51.2211071100253, 0.02083381966358, 1, 18.3054485390546, 0.201214572879361, 0.160149851384054, 0.0546285439478035, 1.12673903151092, 0.0132445638455158, 0.370637415422497, 0.335953423776254, 2.79813450081517, 0.00113812123309249, 0.0546285439478035, 1, 0.0109920591374787, 14.5695951396408, 4.96981896335886, 102.50481892598, 1.20492108711069, 33.7186518728567, 30.5632838737905, 254.559629439639, 0.103540312043258, 4.96981896335886, 90.9747652821832, 1), .Dim = c(11L, 11L), .Dimnames = list(c('ATS', 'BEF', 'DEM', 'ESP', 'FIM', 'FRF', 'IEP', 'ITL', 'LUF', 'NLG', 'PTE'), c('ATS', 'BEF', 'DEM', 'ESP', 'FIM', 'FRF', 'IEP', 'ITL', 'LUF', 'NLG', 'PTE'))));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction5_55e924b83dcc1d9b20a0ca01396fc2bb() {
        assertEval("argv <- list(structure(c(1+0i, 5+0i, 9+0i, 13+0i, 17+0i, 21+0i, 2+0i, 6+0i, 10+0i, 14+0i, 18+0i, 22+0i, 3+0i, 7+0i, 11+0i, 15+0i, 19+0i, 23+0i, 4+0i, 8+0i, 12+0i, 16+0i, 20+0i, 24+0i), .Dim = c(6L, 4L)));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction6_4c6c3213d74e8a742ef7f90e888ca45a() {
        assertEval("argv <- list(structure(list(Df = c(1L, 7L), `Sum Sq` = c(158.407612694902, 204.202165082876), `Mean Sq` = c(158.407612694902, 29.1717378689823), `F value` = c(5.43017400630538, NA), `Pr(>F)` = c(0.052592726218915, NA)), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), row.names = c('depression', 'Residuals'), class = c('anova', 'data.frame'), heading = c('Analysis of Variance Table\\n', 'Response: weight')));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction7_cdd24e600b04db832f5ffa0400ac1a62() {
        assertEval("argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction8_bd440f664b9e14f1dc49580ff843cf7a() {
        assertEval("argv <- list(structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166, 171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194, 196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201, 204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 229, 242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432), .Tsp = c(1949, 1960.91666666667, 12), class = 'ts'));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction9_e82c7d1967f1b530c04bcafdf10a5cda() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.function(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite1_916582d63a82f7a69dc06e75cd480704() {
        assertEval("argv <- list(structure(c(100L, 0L, NA, NA, NA, 3L, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite10_01a212eca696cbaf20d1f527b70eb29e() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite11_9c296861ac65b4ef655c523ca32c19f0() {
        assertEval("argv <- list(structure(c(0.140840156507829, 0.04056135019562, 0.0029302031336855, 0.244192917875952, 0.613916838192149, 0.0888451715064135, 0.0786481028238466, 0.000549230092684491, 0.00048785961836479, 0.235214398525727, 0.000402612842061681, 0.00423992719924668, 0.0355604120039037, 0.00432748168352161, 0.170388213068447, 0.466682597016338), .Names = c('1947', '1948', '1949', '1950', '1951', '1952', '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962')));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite12_c71e68e48aacdf0c74d5c2d5d55d8bf8() {
        assertEval("argv <- list(4);is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite13_d9ec13b8644d211fa07bd8d52f11583b() {
        assertEval("argv <- list(structure(1:24, .Dim = 2:4));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite14_4874e151ae66dd14368e5a9bd78318c9() {
        assertEval("argv <- list(structure(c(1, 0.5, 0.5, 1), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite15_5ceb7ccbf0cffa18fceb1836cfd0a687() {
        assertEval("argv <- list(c(21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 21L, 36L, 51L, 66L, 81L, 96L, 111L, 126L, 141L, 156L, 171L, 178L, 185L, 192L, 199L, 206L, 213L, 220L, 227L, 234L, 241L, 248L, 250L, 252L, 254L, 256L, 258L, 260L, 262L, 264L, 266L, 268L, 270L, 267L, 264L, 261L, 258L, 255L, 242L, 229L, 216L, 203L, 190L, 177L, 164L, 151L, 138L, 125L, 112L, 111L, 110L, 109L, 108L, 107L, 106L, 105L, 104L, 103L, 102L, 101L, 100L, 99L, 102L, 105L, 108L, 111L, 114L, 117L, 120L, 123L, 126L, 129L, 132L, 141L, 150L, 159L, 168L, 177L, 186L, 195L, 204L, 213L, 222L, 231L, 240L, 257L, 274L, 291L, 308L, 325L, 342L, 359L, 376L, 393L, 384L, 375L, 366L, 357L, 348L, 339L, 330L, 321L, 312L, 303L, 294L, 285L, 286L, 287L, 288L, 289L, 290L, 291L, 292L, 293L, 294L, 295L, 296L, 282L, 268L, 254L, 240L, 226L, 212L, 198L, 184L, 170L, 156L, 142L, 128L, 114L, 100L, 86L, 72L, 58L, 44L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite2_cd0f1fb7f584cd1f6a0924da17901f2b() {
        assertEval("argv <- list(c(Inf, -Inf));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite3_e9b6f5d320af80742d6bbd98d0b84c9e() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L)));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite4_60c792df0e06d97bbb168d46ec958a97() {
        assertEval("argv <- list(structure(c(0.00241725013897913, 2.73568372449633e-07, 0.00400531454105884, 0.0305181933571734, 0.022064930648429, 0.000416097494498381, 0.0186357510997526, 0.00896237344987589, 0.00202331168264955, 0.00279067096737535, 0.0447487811957221, 0.000577210896095096, 0.00782925975125774, 0.033211430744327, 0.0093483442273581, 0.00136284952207105, 0.0275004422708864, 0.0135979349769553, 0.000181644594904405, 0.00803803085466393, 0.00350275333198457, 0.014998898960339, 5.39459255498146e-05, 0.00123860219686858, 1.13323906102913e-05, 0.0297916373848854, 0.0312890114433758, 5.85350754663798e-05, 0.0131002435454964, 0.00277072267615578, 0.0222123285012571, 0.00194205331979335, 0.0103231522531299, 0.0261098279661105, 0.0358853728812373, 1.13323906102913e-05, 0.0486308859679786, 0.000674881587747117, 0.0218633172580077, 0.000558592420498928, 0.000802158707806158, 0.0581913205761545, 0.000436809276845313, 0.00631994234432259, 0.000141965876420771, 0.000262833357340149, 0.0055965687842748, 0.000654737007593888, 0.0140931986366498, 0.00241538552182261, 0.00414822230660342, 0.00884150659070285, 0.0647626092888162, 0.0935599413167129, 0.00117891119201738, 0.00742609802768654, 0.0306399064130622, 0.0274290617824389, 0.00217883778937331, 0.0108387379377857, 0.0242348837396833, 0.0168720396936779, 0.022211269097018, 0.0355286679037712, 0.00017126708391638, 0.00443642409999561, 0.0068913158904869, 0.0635882367317516, 0.0566932963429416, 0.00904861729235097, 0.00038919481466495), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71')));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite5_f03ade80b432565603edd692566c6f97() {
        assertEval("argv <- list(structure(c(80, 80, 75, 62, 62, 62, 62, 62, 58, 58, 58, 58, 58, 58, 50, 50, 50, 50, 50, 56, 70, 27, 27, 25, 24, 22, 23, 24, 24, 23, 18, 18, 17, 18, 19, 18, 18, 19, 19, 20, 20, 20, 89, 88, 90, 87, 87, 87, 93, 93, 87, 80, 89, 88, 82, 93, 89, 86, 72, 79, 80, 82, 91, 42, 37, 37, 28, 18, 18, 19, 20, 15, 14, 14, 13, 11, 12, 8, 7, 8, 8, 9, 15, 15), .Dim = c(21L, 4L), .Dimnames = list(NULL, c('Air.Flow', 'Water.Temp', 'Acid.Conc.', 'stack.loss'))));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite6_7c185cb2979af2ca62ef273fb43c76bb() {
        assertEval("argv <- list(structure(c(1.12411954394441, -0.567321126080105, 1.28594901629635, -0.519809468914999, -1.485548782458, -0.435305441405687, -0.281625943801696, -0.527525498975648, 2.60041695299567, NA), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite7_75732102df565ade7f1ae65f031ffb61() {
        assertEval("argv <- list(NULL);is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite8_a9d6033608b9c036c49a85d29d905676() {
        assertEval("argv <- list(structure(c(0.00544194018731062, 0.00542949133552226, 1.20718999105839e-05, 0.00505497198006266, 0.827687885653788, 0.00315385274195005, 0.0023164952286401, 0.00117183915211372, 2.09167441982205, 0.00193959227691399, 0.00358084102808485, 3.39138861812986e-05, 0.00163051710052444, 0.00168735925488057, 0.0167253073891896, 0.237074502262169, 0.0118967636015583, 0.00307437031103621, 0.00114371252369823, 0.000860763872820255, 0.00028432076263802, 0.00329557354736053, 0.000123683950933913, 0.00026114238659798, 0.00471892942651347, 0.00317288091968884, 6.76955217513137e-05, 0.0119061189538054, 0.00233356124758579, 0.00672098496026968, 0.134965372025281, 0.00102115420103838, 0.00114816901125044), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite9_5d40116aebd0246ba08e197374041229() {
        assertEval("argv <- list(structure(c(0.648648743252693, 0.52170345712821, -0.338075767187078, 0.169770656775468, -1.86324282017776, 0.362268009067608, 0.136032794890515, 0.901814933704047, -0.671639624694386, 1.79387977353953, 0.714576709724596, -0.471811539980989, -0.857026690426369, 0.226899513968796, 0.568565310101759, -0.944564385994918, 0.693403222263985, 0.02231307737364, -0.276817414323803, -0.344452836733253, -0.844829717537689, -0.421779195680793, -0.154748062715674, 1.43960300137753, 0.256965508768852, -0.295370227475694, 0.507911869619344, -0.346156318366332, -0.187948961031579, -0.454073164294974, -0.0895014237058297, 1.91227371168715, 0.779246572061347, 0.606406152381391, -0.0628430973426908, 2.1063179091687, -1.32672093069913, -0.754254955100625, -0.59565543740158, -1.95946772292555, -0.495798772099865, -3.58086046245482, -0.721772682345538, -0.254468243441054, 2.41750264738881, -0.0647957309150968, 1.87354174039771, -0.552199273430865, 0.732944502427441, 0.703597322009966, 0.875011400025303, -0.916329805907907, -0.297942295133666, -0.239141969395332, -1.79620422664673, -1.34633804643361, -Inf, 1.84762640960041, -0.344523591926435, 1.12935189480329, -0.902874350916712, -0.187948961031579, 0.444184743731147, -0.595767030989317, -0.878351658910786, 0.131398128073247, -1.16349118303155, -0.612790192876235, -0.231519954928205, -0.944564385994918, 0.136032794890519, -0.250233723215235, -0.972829009134415, 0.576852333601859, 0.226899513968797, -0.316245505808486, 0.101419270213227, 2.16953626752671, -0.383691077846572, 0.547999893193889, 0.00183871707028874, -1.28758691932778, 0.0676445397107313, -0.809987759639438, -1.04896153736838, 0.156556073105978, 0.248659709506608, 1.27246860456928, 0.554771572109539, 1.2326801378144, 2.2926344791142, 1.00034303387372, -0.554771572109538), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')));is.infinite(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger1_af7539af8a7568de36162faf39ea6f5f() {
        assertEval("argv <- list(2.74035772634541);is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger11_8c56913a0b42bf8f17ce9081c71472b8() {
        assertEval("argv <- list(c(1L, 0L, NA, 1L));do.call('is.integer', argv)");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger2_840ae7248cf23a609c76391826d1dfff() {
        assertEval("argv <- list(c(NA, 9, 3, 3));is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger3_4fd53a5341da67beae7d9b7d98d6a2b3() {
        assertEval("argv <- list(c(NA, 0L));is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger4_dd690f6b34ecc73790c6021d9f0cfd8e() {
        assertEval("argv <- list(c(NA, -4.19095158576965e-09));is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger5_a1360344cd140f1a2fb0926ac462d115() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger6_31976787145244819cef98007ff78247() {
        assertEval("argv <- list(c(-0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.6, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6));is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger7_bad6719af8d5cb48d786b853390020c9() {
        assertEval("argv <- list(c(NA, 1L));is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger8_1ee07eaf05755f149f0fc3e6caefce7d() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisinteger_testisinteger9_d5e6ffc1921f24d2d01bb13f8581af3c() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1), .Dim = 1:3));is.integer(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage1_327c01febbf4792b7e1561d77b5afed5() {
        assertEval("argv <- list(c(3.14159265358988, 3.14159265358988, 3.14159265358983, 3.14159265358982, 3.14159265358974, 3.14159265358989, 3.14159265358976, 3.14159265358993, 3.14159265358997, 3.14159265358984, 3.14159265358969, 3.14159265358989, 3.14159265358977, 3.14159265358964, 3.14159265358982, 3.14159265358969, 3.14159265358968, 3.1415926535898, 3.14159265358961, 3.14159265358967, 3.14159265358983, 3.14159265358997, 3.14159265358987, 3.14159265358995, 3.14159265358992, 3.14159265358996, 3.14159265358965, 3.14159265358964, 3.14159265358997, 3.14159265358968, 3.14159265358995, 3.14159265358961, 3.14159265358993, 3.14159265358985, 3.14159265358996, 3.14159265358964, 3.1415926535898, 3.1415926535896, 3.14159265358964, 3.14159265358994, 3.14159265358964, 3.14159265358962, 3.14159265358985, 3.14159265358962, 3.14159265358977, 3.14159265358973, 3.14159265358969, 3.14159265358987, 3.14159265358978, 3.14159265358965, 3.14159265358991, 3.14159265358997, 3.14159265358979, 3.1415926535897, 3.14159265358974, 3.14159265358977, 3.14159265358985, 3.14159265358982, 3.14159265358981, 3.14159265358984, 3.14159265358991, 3.14159265358989, 3.14159265358978, 3.14159265358967, 3.1415926535899, 3.14159265358998, 3.14159265358992, 3.14159265358972, 3.14159265358984, 3.14159265358974, 3.14159265358969, 3.14159265358984, 3.14159265358983, 3.14159265358995, 3.14159265358963, 3.14159265358996, 3.14159265358976, 3.14159265358973, 3.14159265358995, 3.14159265358965, 3.14159265358966, 3.1415926535898, 3.14159265358965, 3.14159265358992, 3.14159265358959, 3.14159265358988, 3.14159265358988, 3.14159265358974, 3.14159265358994, 3.14159265358996, 3.1415926535897, 3.14159265358973, 3.14159265358971, 3.14159265358986, 3.14159265358998, 3.14159265358984, 3.14159265358988, 3.1415926535896, 3.1415926535897, 3.14159265358985, 3.14159265358983));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage10_c669cd69fe84102c27dd81bb2c33a5f9() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage11_a0e16f9b02699f3cafa5876c9b96d4e0() {
        assertEval("argv <- list(numeric(0));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage12_34b10ca0a691e5b6043ec38bdd3ebdc8() {
        assertEval("argv <- list(expression(sqrt(abs(`Standardized residuals`))));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage13_fc828389d297e2e8837d0de7d7c3e8d6() {
        assertEval("argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage14_1a0caa4e83bea2f59af048e5d5c876f0() {
        assertEval("argv <- list(c(NA, NA, 0, NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, NA, NA, NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage15_b629fcf6211935ee0e3ffeec045d43d0() {
        assertEval("argv <- list(c(3L, 3L, NA, 3L, 4L, 3L, NA, 3L, 3L, 3L, 3L, 2L, 3L, 3L, 4L, 3L, 2L, 2L, 3L, 5L, 2L, 2L, 2L, 4L, 3L, 3L, 3L, 3L, 4L, 4L, 3L, 3L, 4L, 3L, 4L, 3L, 3L, 4L, 3L, 1L, 3L, 3L, 5L, 3L, NA, 2L, 4L, 1L, 3L, 3L, NA, 2L, 5L, 3L, 4L, 4L, 5L, 4L, 4L, 3L, 5L, 4L, 4L, NA, 3L, 5L, 5L, 5L, 5L, 4L, 5L, 4L, 4L, 5L));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage16_4623a1a38899c1d717efcaefcc53d883() {
        assertEval("argv <- list(structure(list(nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('nationality', 'deceased', 'title', 'other.author'), class = 'data.frame', row.names = c(NA, -6L)));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage17_c6c740213eeedc7db94ebb47343d5d1d() {
        assertEval("argv <- list(structure(list(x = c(0.3, 3.6, 6.2, 3.8, 3.1, 4.1, 6), y = c(6.1, 6.2, 5.2, 2.3, 1.1, 0.8, 0.1)), .Names = c('x', 'y'), row.names = c(1L, 4L, 12L, 31L, 37L, 48L, 50L), class = 'data.frame'));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage18_f817734849ace02a4b78f1dc15a8e28c() {
        assertEval("argv <- list(c('1', '2', NA));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage19_231cba816882c73689515ad2e707b0ac() {
        assertEval("argv <- list(structure(c(9, 13, 13, 18, 23, 28, 31, 34, 45, 48, 161, 5, 5, 8, 8, 12, 16, 23, 27, 30, 33, 43, 45, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1), .Dim = c(23L, 2L), .Dimnames = list(NULL, c('time', 'status')), type = 'right', class = 'Surv'));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage2_c2448845d319c76c038234b04067efc0() {
        assertEval("argv <- list(structure(cim = 16:17));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage20_58742ea4e4797d34fd690ab97bac349c() {
        assertEval("argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage21_d1f696aa0be107f871ba066380417897() {
        assertEval("argv <- list(integer(0));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage22_a54958869c85ae9f07c016a10837f0fb() {
        assertEval("argv <- list(structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage23_1399036a1f5d3f40dac88ff46e373bb0() {
        assertEval("argv <- list(c(0.568, 1.432, -1.08, 1.08));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage24_c3af82c60d6f22a175609874aae28f33() {
        assertEval("argv <- list('«Latin-1 accented chars»: éè øØ å<Å æ<Æ');is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage3_f2f8f5732ac2a1bc3a25a968937f6176() {
        assertEval("argv <- list(structure(c(-5.96781464124519, -6.49437440734601, -3.09795335180399, -6.0516983940436, 2.94181419227242, 1.32243907887975, -6.14000748997388, -1.17705131190311), .Dim = c(4L, 2L), .Dimnames = list(c('Murder', 'Assault', 'UrbanPop', 'Rape'), c('PC1', 'PC2'))));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage4_7f868ea150950b397c0ca33d75b93e87() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage6_eb50ed93da325e9bb8feb3a612440db5() {
        assertEval("argv <- list(1.79769313486232e+308);is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage7_c82b4286cd46170d368c9a154248cd22() {
        assertEval("argv <- list(c('2001-01-01', NA, NA, '2004-10-26'));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage8_a96effb32ba55172e0e41d9238a505f0() {
        assertEval("argv <- list(c(0+0i, 0.00809016994374947-0.00587785252292473i, 0.0161803398874989-0.0117557050458495i, 0.0242705098312484-0.0176335575687742i, 0.0323606797749979-0.0235114100916989i, 0.0404508497187474-0.0293892626146237i, 0.0485410196624968-0.0352671151375484i, 0.0566311896062463-0.0411449676604731i, 0.0647213595499958-0.0470228201833979i, 0.0728115294937453-0.0529006727063226i, 0.0809016994374947-0.0587785252292473i, 0.0889918693812442-0.0646563777521721i, 0.0970820393249937-0.0705342302750968i, 0.105172209268743-0.076412082798022i, 0.113262379212493-0.082289935320946i, 0.121352549156242-0.088167787843871i, 0.129442719099992-0.094045640366796i, 0.137532889043741-0.09992349288972i, 0.14562305898749-0.105801345412645i, 0.15371322893124-0.11167919793557i, 0.16180339887499-0.117557050458495i, 0.169893568818739-0.123434902981419i, 0.177983738762488-0.129312755504344i, 0.186073908706238-0.135190608027269i, 0.194164078649987-0.141068460550194i, 0.202254248593737-0.146946313073118i, 0.210344418537486-0.152824165596043i, 0.218434588481236-0.158702018118968i, 0.226524758424985-0.164579870641893i, 0.234614928368735-0.170457723164817i, 0.242705098312484-0.176335575687742i, 0.250795268256234-0.182213428210667i, 0.258885438199983-0.188091280733591i, 0.266975608143733-0.193969133256516i, 0.275065778087482-0.199846985779441i, 0.283155948031232-0.205724838302366i, 0.291246117974981-0.21160269082529i, 0.29933628791873-0.217480543348215i, 0.30742645786248-0.22335839587114i, 0.315516627806229-0.229236248394065i, 0.323606797749979-0.235114100916989i, 0.331696967693728-0.240991953439914i, 0.339787137637478-0.246869805962839i, 0.347877307581227-0.252747658485764i, 0.355967477524977-0.258625511008688i, 0.364057647468726-0.264503363531613i, 0.372147817412476-0.270381216054538i, 0.380237987356225-0.276259068577462i, 0.388328157299975-0.282136921100387i, 0.396418327243724-0.288014773623312i, 0.404508497187474-0.293892626146237i, 0.412598667131223-0.299770478669161i, 0.420688837074973-0.305648331192086i, 0.428779007018722-0.311526183715011i, 0.436869176962472-0.317404036237936i, 0.444959346906221-0.32328188876086i, 0.453049516849971-0.329159741283785i, 0.46113968679372-0.33503759380671i, 0.469229856737469-0.340915446329634i, 0.477320026681219-0.346793298852559i, 0.485410196624968-0.352671151375484i, 0.493500366568718-0.358549003898409i, 0.501590536512467-0.364426856421333i, 0.509680706456217-0.370304708944258i, 0.517770876399966-0.376182561467183i, 0.525861046343716-0.382060413990108i, 0.533951216287465-0.387938266513032i, 0.542041386231215-0.393816119035957i, 0.550131556174964-0.399693971558882i, 0.558221726118714-0.405571824081807i, 0.566311896062463-0.411449676604731i, 0.574402066006213-0.417327529127656i, 0.582492235949962-0.423205381650581i, 0.590582405893712-0.429083234173506i, 0.598672575837461-0.43496108669643i, 0.60676274578121-0.440838939219355i, 0.61485291572496-0.44671679174228i, 0.62294308566871-0.452594644265205i, 0.631033255612459-0.458472496788129i, 0.639123425556208-0.464350349311054i, 0.647213595499958-0.470228201833979i, 0.655303765443707-0.476106054356903i, 0.663393935387457-0.481983906879828i, 0.671484105331206-0.487861759402753i, 0.679574275274956-0.493739611925678i, 0.687664445218705-0.499617464448602i, 0.695754615162455-0.505495316971527i, 0.703844785106204-0.511373169494452i, 0.711934955049954-0.517251022017377i, 0.720025124993703-0.523128874540301i, 0.728115294937453-0.529006727063226i, 0.736205464881202-0.534884579586151i, 0.744295634824952-0.540762432109075i, 0.752385804768701-0.546640284632i, 0.76047597471245-0.552518137154925i, 0.7685661446562-0.55839598967785i, 0.77665631459995-0.564273842200774i, 0.784746484543699-0.570151694723699i, 0.792836654487448-0.576029547246624i, 0.800926824431198-0.581907399769549i, 0.809016994374947-0.587785252292473i));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislanguage_testislanguage9_f495084544910b82dec8434a106461f5() {
        assertEval("argv <- list(structure(c(-0.148741651280925, -0.200659450546418, -0.0705810742857073, -0.356547323513813, -0.214670164989233, -0.161150909262745, -0.0362121726544447, -0.259637310505756, -0.142667503568732, -0.113509274827518, -0.0362121726544447, -0.221848749616356, -0.0809219076239261, -0.0969100130080564, 0, -0.113509274827518, -0.0362121726544447, 0, 0.0934216851622351, 0, 0.0644579892269184, 0.113943352306837, 0.161368002234975, 0.0969100130080564, 0.100370545117563, 0.139879086401236, 0.269512944217916, 0.193124598354462, 0.184691430817599, 0.201397124320452, 0.262451089730429, 0.269512944217916, 0.184691430817599, 0.315970345456918, 0.369215857410143, 0.352182518111362, 0.334453751150931, 0.385606273598312, 0.431363764158987, 0.352182518111362, 0.445604203273598, 0.534026106056135, 0.56702636615906, 0.556302500767287, 0.556302500767287, 0.635483746814912, 0.635483746814912, 0.607455023214668, 0.686636269262293, 0.702430536445525, 0.702430536445525, 0.644438589467839, 0.746634198937579, 0.76715586608218, 0.817565369559781, 0.725094521081469, 0.780317312140151, 0.8055008581584, 0.840733234611807, 0.76715586608218, 0.840733234611807, 0.888740960682893, 0.893761762057943, 0.786751422145561, 0.888740960682893, 0.949877704036875, 0.91803033678488, 0.835056101720116, 0.979548374704095, 1.0111473607758, 0.979548374704095, 0.94101424370557, 1.07481644064517, 1.08134730780413, 1.08457627793433, 0.949877704036875, 1.14736710779379, 1.11260500153457, 1.17172645365323, 0.999565488225982, 1.20951501454263, 1.16643011384328, 1.20466251174822, 1.06483221973857), .Tsp = c(1960, 1980.75, 4), class = 'ts'));is.language(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist1_0bf5b5d95d10bfb449f032407218a5a6() {
        assertEval("argv <- list(structure(function (e1, e2) standardGeneric('/', .Primitive('/')), generic = structure('/', package = 'base'), package = 'base', group = list('Arith'), valueClass = character(0), signature = c('e1', 'e2'), default = .Primitive('/'), skeleton = quote(.Primitive('/')(e1, e2)), class = structure('standardGeneric', package = 'methods')));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist10_6bcdd07568de3bab716692c9cbcb22c6() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist11_942f7b1f8628b32a57c455f4676acdbe() {
        assertEval("argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist12_f7cb481f158d7520a09f259bf80b08f1() {
        assertEval("argv <- list(5e-14);is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist13_e9d76c8a2a8816193e088d04e89ae710() {
        assertEval("argv <- list(structure(c(NA, 6346.2), .Names = c('1', '2')));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist14_7325d7c2dfc0f8ba856abad64bc390f4() {
        assertEval("argv <- list(c(1.1+0i, NA, 3+0i));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist15_944245ec1e7ece56d30b09efe2d86e49() {
        assertEval("argv <- list(structure(list(Ozone = c(NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), Solar.R = c(286L, 287L, 242L, 186L, 220L, 264L, 127L, 273L, 291L, 323L, 259L, 250L, 148L, 332L, 322L, 191L, 284L, 37L, 120L, 137L, 150L, 59L, 91L, 250L, 135L, 127L, 47L, 98L, 31L, 138L), Wind = c(8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8), Temp = c(78L, 74L, 67L, 84L, 85L, 79L, 82L, 87L, 90L, 87L, 93L, 92L, 82L, 80L, 79L, 77L, 72L, 65L, 73L, 76L, 77L, 76L, 76L, 76L, 75L, 78L, 73L, 80L, 77L, 83L), Month = c(6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), Day = 1:30), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day'), row.names = 32:61, class = 'data.frame'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist16_b976b233dd944413df2ebaffbdbd7327() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4), .Tsp = c(1945, 1974.75, 4), class = 'ts'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist17_28fe52c5b0041c4bc715980a7250ac50() {
        assertEval("argv <- list(structure(c('***', '***', '*', '*'), legend = '0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1', class = 'noquote'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist18_92ea6d7642d3d8891cb7219974a73eb0() {
        assertEval("argv <- list(structure(list(`/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/lookup.xport.Rd` = structure(c('read.xport', ''), .Dim = 1:2, .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.S.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.arff.Rd` = structure(c('connection', 'write.arff', '', ''), .Dim = c(2L, 2L), .Dimnames = list(    NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.dbf.Rd` = structure(c('make.names', 'write.dbf', '', ''), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.dta.Rd` = structure(c('write.dta', 'attributes', 'Date', 'factor', '', '', '', ''), .Dim = c(4L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.epiinfo.Rd` = structure(c('Date', 'DateTimeClasses', '', ''), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.mtp.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.octave.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.spss.Rd` = structure(c('sub', 'iconv', 'iconvlist', '', '', ''), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.ssd.Rd` = structure(c('read.xport', ''), .Dim = 1:2, .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.systat.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.xport.Rd` = structure(c('lookup.xport', ''), .Dim = 1:2, .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.arff.Rd` = structure(c('make.names', 'read.arff', '', ''), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.dbf.Rd` = structure(c('read.dbf', ''), .Dim = 1:2, .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.dta.Rd` = structure(c('drop', 'read.dta', 'attributes', 'DateTimeClasses', 'abbreviate', '', '', '', '', ''), .Dim = c(5L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor'))), `/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.foreign.Rd` = structure(character(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('Target', 'Anchor')))), .Names = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/lookup.xport.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.S.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.arff.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.dbf.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.dta.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.epiinfo.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.mtp.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.octave.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.spss.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.ssd.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.systat.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/read.xport.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.arff.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.dbf.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.dta.Rd', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/man/write.foreign.Rd')));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist19_15a436e8375018427e81460ab9ab2815() {
        assertEval("argv <- list(3.14159265358979e+20);is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist2_922d65499c4e724a6ce2a349254c0f6f() {
        assertEval("argv <- list(structure(c(2671, 6.026e+77, 3.161e+152, 3.501e+299, 2.409e+227, 1.529e+302), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist20_852dc7ee3e65c01bd6ea529f19066902() {
        assertEval("argv <- list(structure(list(srcfile = c(NA, '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R'), frow = c(NA, 88L, 89L, 89L, 90L, 90L, 90L, 88L, 88L, 92L, 92L, 92L, 92L, 92L, 94L, 94L, 100L, 103L, 108L, 108L, 128L, 131L, 138L, 142L, 160L, 160L), lrow = c(NA, 91L, 89L, 89L, 90L, 90L, 90L, 91L, 91L, 93L, 93L, 93L, 93L, 93L, 95L, 95L, 100L, 104L, 108L, 108L, 132L, 131L, 138L, 144L, 160L, 160L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 26L)));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist21_707f8f00b27f5523422179ff84ee1d3b() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/R_systat.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/R_systat.R'), frow = 21:22, lrow = 21:22), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist22_7b7fd327b172c207fd61ec22fc89b380() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, NA, NA, NA, NA, NA), .Label = c('[0,2)', '[2,4)', '[4,6)', '[6,8)'), class = 'factor'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist23_e6134625f7ed2bc36a8168ec2926d068() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), .Dim = c(10L, 2L), .Dimnames = list(NULL, c('x', 'y'))));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist24_78394f050fd3204021866646f6aadfbd() {
        assertEval("argv <- list(structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08, it = 898L, maxit = 5000,     ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist25_dd69ac317f87b85a9552eb6b2a4827b4() {
        assertEval("argv <- list(structure(c(NA, 1, 1, 2), .Names = c('<none>', 'M.user', 'Temp', 'Soft')));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist26_312b3238ec796f804cc94376d5924f07() {
        assertEval("argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), terms = quote(y ~ x * z), row.names = c(NA, 10L), class = 'data.frame'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist27_645f23c0f5bccd75f3a2a38bc0a67ce4() {
        assertEval("argv <- list(structure(c(1920, 1920, 1920, 1920, 1920, 1920, 1921, 1921, 1921, 1921), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist29_647350c844ea5952913dfc47c75c1d17() {
        assertEval("argv <- list(structure(1, .Dim = 1L));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist3_e2510bb0103191ac09896f8dc0f22b6b() {
        assertEval("argv <- list('• ');is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist30_691af5dcfb99b8bde8a6088f9b8ff9b9() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), terms = quote(Employed ~ GNP.deflator + GNP + Unemployed +     Armed.Forces + Population + Year), row.names = 1947:1962, class = 'data.frame'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist31_42393832bb135db8b2cca7a2d4a6a66e() {
        assertEval("argv <- list(structure(list(onefile = TRUE, family = 'Helvetica',     title = 'R Graphics Output', fonts = NULL, encoding = 'default',     bg = 'transparent', fg = 'black', width = 0, height = 0,     horizontal = TRUE, pointsize = 12, paper = 'default', pagecentre = TRUE,     print.it = FALSE, command = 'default', colormodel = 'srgb',     useKerning = TRUE, fillOddEven = FALSE), .Names = c('onefile',     'family', 'title', 'fonts', 'encoding', 'bg', 'fg', 'width',     'height', 'horizontal', 'pointsize', 'paper', 'pagecentre',     'print.it', 'command', 'colormodel', 'useKerning', 'fillOddEven')));do.call('is.list', argv)");
    }

    @Test
    public void TestrGenBuiltinislist_testislist4_2deebef32feb63174f3a40462af38b9e() {
        assertEval("argv <- list(13186.6170826564);is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist5_d127df94946c9b47fb8b281425d0a0bb() {
        assertEval("argv <- list(structure(list(object = c(0.568, 1.432, -1.08, 1.08), max.level = NA, vec.len = 4, digits.d = 3, nchar.max = 128, give.attr = TRUE, give.head = TRUE, width = 80L, envir = NULL, strict.width = 'no', formatNum = function (x, ...) format(x, trim = TRUE, drop0trailing = TRUE, ...), list.len = 99, give.length = TRUE, nest.lev = 1, indent.str = '  ..'), .Names = c('object', 'max.level', 'vec.len', 'digits.d', 'nchar.max', 'give.attr', 'give.head', 'width', 'envir', 'strict.width', 'formatNum', 'list.len', 'give.length', 'nest.lev', 'indent.str')));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist6_0795f84c85869473e7a96f10d33217c4() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = 'factor'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist7_57b253161992881cff0827d7fd4bef5b() {
        assertEval("argv <- list(structure(list(y = c(1.08728092481538, 0.0420572471552261, 0.787502161306819, 0.512717751544676, 3.35376639535311, 0.204341510750309, -0.334930602487435, 0.80049208412789, -0.416177803375218, -0.777970346246018, 0.934996808181635, -0.678786709127108, 1.52621589791412, 0.5895781228122, -0.744496121210548, -1.99065153885627, 1.51286447692396, -0.750182409847851), A = c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1), U = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor'), V = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('y', 'A', 'U', 'V'), terms = quote(y ~ A:U + A:V - 1), row.names = c(NA, 18L), class = 'data.frame'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist8_0866b83ae49166e4e8c454247513ea1d() {
        assertEval("argv <- list(structure(list(title = structure(1L, .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(2L, .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = 1L, class = 'data.frame'));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislist_testislist9_571c605bb48b59a9a84844d5f9b15bbe() {
        assertEval("argv <- list(structure(list(srcfile = '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', frow = 612L, lrow = 612L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L)));is.list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor1_11e42d3fdb31e174af970cd806b20e0e() {
        assertEval("argv <- list(list(structure(list(structure('R Core', class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame'), structure(list(structure(NA_character_, class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame'), structure(list(structure(NA_character_, class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame'), structure(list(structure('An Introduction to R', class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame'), structure(list(structure('Venables & Smith', class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor10_2a8d8eb6392df15688244afca7f2edab() {
        assertEval("argv <- list(list(structure(c(0, 1, 1, 2, 2, 4, NA), .Names = c('ddiMatrix', 'diagonalMatrix', 'dMatrix', 'sparseMatrix', 'Matrix', 'mMatrix', 'ANY')), structure(c(0, 1, 1, 1, 2, 2, 2, 3, 4, NA), .Names = c('dgCMatrix', 'CsparseMatrix', 'dsparseMatrix', 'generalMatrix', 'dMatrix', 'sparseMatrix', 'compMatrix', 'Matrix', 'mMatrix', 'ANY'))), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor11_e03f9fe5b02cecc1c013f17910a74046() {
        assertEval("argv <- list(list(structure(0, .Dim = c(1L, 1L)), structure(-4.9497224423095e-07, .Dim = c(1L, 1L)), structure(0, .Dim = c(1L, 1L)), structure(-7.44931694456399e-07, .Dim = c(1L, 1L))), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor12_6b31e3550a2a6b06373bdab71efda50b() {
        assertEval("argv <- list(structure(list(event = c('Min.   : 1.00  ', '1st Qu.: 9.00  ', 'Median :18.00  ', 'Mean   :14.74  ', '3rd Qu.:20.00  ', 'Max.   :23.00  ', NA), mag = c('Min.   :5.000  ', '1st Qu.:5.300  ', 'Median :6.100  ', 'Mean   :6.084  ', '3rd Qu.:6.600  ', 'Max.   :7.700  ', NA), station = c('117    :  5  ', '1028   :  4  ', '113    :  4  ', '112    :  3  ', '135    :  3  ', '(Other):147  ', 'NA's   : 16  '), dist = c('Min.   :  0.50  ', '1st Qu.: 11.32  ', 'Median : 23.40  ', 'Mean   : 45.60  ', '3rd Qu.: 47.55  ', 'Max.   :370.00  ', NA), accel = c('Min.   :0.00300  ', '1st Qu.:0.04425  ', 'Median :0.11300  ', 'Mean   :0.15422  ', '3rd Qu.:0.21925  ', 'Max.   :0.81000  ', NA)), .Names = c('event', 'mag', 'station', 'dist', 'accel')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor13_6e172d4486c1d4b1ebdbf88990fea80b() {
        assertEval("argv <- list(structure(list(`1` = 1.97626258336499e-323), .Names = '1'), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor14_cbcca9f80f4a7a82f0125ca89f1ab028() {
        assertEval("argv <- list(structure(list(name = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), title = structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...'), class = 'AsIs'), other.author = structure(c(NA, NA, NA, NA, NA, 'Ripley'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia'), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'no', 'yes', 'no'), class = 'AsIs')), .Names = c('name', 'title', 'other.author', 'nationality', 'deceased'), row.names = c('1', '2', '3', '4', '5', '6')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor15_c1bc23c40d6d56921ab2f902c93fa1ae() {
        assertEval("argv <- list(structure(list(`1` = 8.91763605923317e+38), .Names = '1'), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor16_9098c50a1d8e9a99857bc8e6aa56814b() {
        assertEval("argv <- list(structure(list(V1 = c(0.908207789994776, 0.62911404389888, 0.205974574899301), V2 = c(0.125555095961317, 0.86969084572047, 0.482080115471035), V3 = c(0.553036311641335, 0.7323137386702, 0.477619622135535), V4 = c(0.332394674187526, 0.0842469143681228, 0.339072937844321), V5 = c(0.325352151878178, 0.245488513959572, 0.239629415096715)), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(4L, 9L, 11L)), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor17_1d82f55cc4296469207e51563e99d021() {
        assertEval("argv <- list(structure(list(V1 = c(0.497699242085218, 0.991906094830483), V2 = c(0.668466738192365, 0.107943625887856), V3 = c(0.0994661601725966, 0.518634263193235), V4 = c(0.892198335845023, 0.389989543473348), V5 = c(0.79730882588774, 0.410084082046524)), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(16L, 18L)), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor18_1007193d145eb1792cb580a17cb3e2a9() {
        assertEval("argv <- list(list(structure(list(structure('rm', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('remove', Rd_tag = 'VERB')), Rd_tag = '\\\\alias')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor19_285181287efed16bd5fa2cd276fc7007() {
        assertEval("argv <- list(list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'))), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor2_704f71ef7f34671dd86d105a76a03456() {
        assertEval("argv <- list(list(c(TRUE, FALSE, FALSE, FALSE, FALSE), c(TRUE, TRUE, TRUE, TRUE, NA)), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor20_b798a712b7d5e0e143b3010162eadf3e() {
        assertEval("argv <- list(list(c(0.92317305817397+0i, 0.160449395256071+0.220125597679977i, 0.40353715410585+2.39063261466203i, -3.64092275386503+3.51619480964107i, -0.30877433127864+1.37503901638266i, -0.5590368753986+2.95994484328048i, 2.07117052177259-1.58552086053907i, 5.12796916272868+5.50114308371867i, 0.71791019962021-4.36295436036464i, 3.6182846955548+0.01693946731429i, 5.86560669896785+3.41674024963709i, 7.14153164455803+0i, 5.86560669896785-3.41674024963709i, 3.6182846955548-0.01693946731429i, 0.71791019962021+4.36295436036464i, 5.12796916272868-5.50114308371867i, 2.07117052177259+1.58552086053907i, -0.5590368753986-2.95994484328048i, -0.30877433127864-1.37503901638266i, -3.64092275386503-3.51619480964107i, 0.40353715410585-2.39063261466203i, 0.160449395256071-0.220125597679976i), c(0.994686860835215+0i, -0.711636086238366+0.034977366507257i, -3.47255638259391-3.00654729467177i, -1.61617641806619-2.52564108817258i, -1.83729841635945+1.24025696654912i, -0.05940773912914+1.99807537840182i, 2.14861624215501+1.14547234755584i, -0.18935885218927+5.11711397439959i, 3.55025883223277-3.01463113510177i, 0.37587194655463-4.62160286369829i, -0.57999032040714+3.57394816552023i, -3.22078701201057+0i, -0.57999032040714-3.57394816552023i, 0.37587194655463+4.62160286369829i, 3.55025883223277+3.01463113510177i, -0.18935885218927-5.11711397439959i, 2.14861624215501-1.14547234755584i, -0.05940773912914-1.99807537840182i, -1.83729841635945-1.24025696654912i, -1.61617641806619+2.52564108817258i, -3.47255638259391+3.00654729467177i, -0.711636086238366-0.034977366507256i), c(-0.376031201145236+0i, 0.36561036190112-2.94822783523588i, 2.53378536984825+1.14599403212998i, -0.59345500414631-1.46249091231517i, -5.47371957596241-2.40983118775265i, 0.994698295196402+0.827012883372647i, 4.88614691865207-0.66440097322583i, -1.22869446246947-1.85036568311679i, 4.54719422944744-1.7507307644741i, -1.25805718969215-0.46461775748286i, -6.6950163960079-1.32606545879492i, -1.8510470181104-0i, -6.6950163960079+1.32606545879492i, -1.25805718969215+0.46461775748286i, 4.54719422944744+1.7507307644741i, -1.22869446246947+1.85036568311679i, 4.88614691865207+0.66440097322583i, 0.994698295196402-0.827012883372647i, -5.47371957596241+2.40983118775265i, -0.59345500414631+1.46249091231517i, 2.53378536984825-1.14599403212998i, 0.36561036190112+2.94822783523588i), c(1.86949363581639+0i, 3.2510927680528+3.7297126359622i, 5.77117909703734-0.58113122596059i, -2.73489323319193-2.03739778844743i, 1.59256247378073-3.23882870600546i, -2.21652163259476+3.70287191787544i, -6.80966667821261-4.74346958471693i, -0.48551953206469-3.42445496113818i, -4.95350216815663-1.60107509096991i, -0.651322462114205+0.588393022429161i, 3.32067078328635+3.75999833207777i, -1.35013798358527+0i, 3.32067078328635-3.75999833207777i, -0.651322462114205-0.588393022429161i, -4.95350216815663+1.60107509096991i, -0.48551953206469+3.42445496113818i, -6.80966667821261+4.74346958471693i, -2.21652163259476-3.70287191787544i, 1.59256247378073+3.23882870600546i, -2.73489323319193+2.03739778844743i, 5.77117909703734+0.58113122596059i, 3.2510927680528-3.7297126359622i),     c(-3.90806827793786+0i, -4.10078155861753-4.25996878161911i, -0.63461032994351-2.08074582601136i, -0.10593736514835-3.82022652091785i, 6.14817602783479+2.33657685886581i, 0.64431546852762-1.776774088028i, 3.43771282488202-3.00904523977379i, -3.6812061457129+3.53944567666635i, 3.07722382691467+4.5373840425762i, 3.3679046040028+7.20820407858926i, 7.47003475089893-0.4463480891006i, 13.9322715624418-0i, 7.47003475089893+0.4463480891006i, 3.3679046040028-7.20820407858926i, 3.07722382691467-4.5373840425762i,     -3.6812061457129-3.53944567666635i, 3.43771282488202+3.00904523977379i, 0.64431546852762+1.776774088028i, 6.14817602783479-2.33657685886581i, -0.10593736514835+3.82022652091785i, -0.63461032994351+2.08074582601136i, -4.10078155861753+4.25996878161911i)), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor21_3afbb38616984e26266943404c131210() {
        assertEval("argv <- list(structure(list(), .Names = character(0)), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor22_159e67ec14852a9a3690b970aecceb18() {
        assertEval("argv <- list(structure(list(a = 'a', b = 2, c = 3.14159265358979+2i), .Names = c('a', 'b', 'c')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor23_ac38f19802468836f4005883b96a1525() {
        assertEval("argv <- list(list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 1L, class = 'data.frame'), structure(list(title = structure(1L, .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(2L, .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = 1L, class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor25_562825b2f061ee0db050701aabe6e44a() {
        assertEval("argv <- list(list(structure(list(structure(c('', '+ M.user', '+ Temp', '+ M.user:Temp'), class = 'AsIs')), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(NA, -1, -1, -1)), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(NA, 20.5814660332393, 3.80016287449608, 2.78794934284365)), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(11, 10, 9, 8)), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(32.825622681839, 12.2441566485997, 8.44399377410362, 5.65604443125997)), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(92.5235803967766, 73.9421143635373, 72.1419514890413, 71.3540021461976)), row.names = c(NA, -4L), class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor26_fd88fb80b8a7575ff3d5aa064219b6c8() {
        assertEval("argv <- list(structure(list(`2005` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2006` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2007` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2008` = structure(c(31L, 29L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2009` = structure(1L, .Dim = 1L, .Dimnames = structure(list('01'), .Names = ''), class = 'table')), .Names = c('2005', '2006', '2007', '2008', '2009')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor27_9824b8abcad7928d0f355630b27477f1() {
        assertEval("argv <- list(structure('mtext(\\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\\', side = 3)\\n', Rd_tag = 'RCODE'), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor28_d9a89f240020611a863ca072bc71c833() {
        assertEval("argv <- list(structure(list(V1 = structure(c('head', '1', '3', '6'), class = 'AsIs'), V2 = structure(c('NA', ' 2', ' 4', ' 7'), class = 'AsIs'), V3 = structure(c('NA', 'NA', ' 5', ' 8'), class = 'AsIs'), V4 = structure(c('NA', 'NA', 'NA', ' 9'), class = 'AsIs')), .Names = c('V1', 'V2', 'V3', 'V4'), row.names = c('1', '2', '3', '4')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor29_46c11b5a9d7bb9bb992e67a05ed2b6ac() {
        assertEval("argv <- list(structure(list(`1 sec` = 345600, `2 secs` = 172800, `5 secs` = 69120, `10 secs` = 34560, `15 secs` = 23040, `30 secs` = 11520, `1 min` = 5760, `2 mins` = 2880, `5 mins` = 1152, `10 mins` = 576, `15 mins` = 384, `30 mins` = 192, `1 hour` = 96, `3 hours` = 32, `6 hours` = 16, `12 hours` = 8, `1 DSTday` = 4, `2 DSTdays` = 2, `1 week` = 0.571428571428571, halfmonth = 0.262833675564682, `1 month` = 0.131416837782341, `3 months` = 0.0438056125941136, `6 months` = 0.0219028062970568, `1 year` = 0.0109514031485284,     `2 years` = 0.0054757015742642, `5 years` = 0.00219028062970568, `10 years` = 0.00109514031485284, `20 years` = 0.00054757015742642, `50 years` = 0.000219028062970568, `100 years` = 0.000109514031485284, `200 years` = 5.4757015742642e-05, `500 years` = 2.19028062970568e-05, `1000 years` = 1.09514031485284e-05), .Names = c('1 sec', '2 secs', '5 secs', '10 secs', '15 secs', '30 secs', '1 min', '2 mins', '5 mins', '10 mins', '15 mins', '30 mins', '1 hour', '3 hours', '6 hours', '12 hours', '1 DSTday', '2 DSTdays', '1 week', 'halfmonth', '1 month', '3 months', '6 months', '1 year', '2 years', '5 years', '10 years', '20 years', '50 years', '100 years', '200 years', '500 years', '1000 years')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor3_d8292e70762644e8793b001f9b4c18db() {
        assertEval("argv <- list(structure(list(a = 6:10), .Names = 'a', row.names = 6:10), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor4_21fc784e9c177b5f9e48207f9bf7cc10() {
        assertEval("argv <- list(structure(list(k = 0.413311097189709, g1 = 72.8306629700373, g2 = 181.793153976139), .Names = c('k', 'g1', 'g2')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor5_75b22e55966cb2f065ed523bc0b523a2() {
        assertEval("argv <- list(list(structure(list(structure('text', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('text.default', Rd_tag = 'VERB')), Rd_tag = '\\\\alias')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor6_ddd1b417b71ccb33b951f1fc1f03cfe5() {
        assertEval("argv <- list(list(structure(list(surname = structure(c(4L, 5L, 3L, 2L, 2L, 1L, 6L), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables', 'R Core'), class = 'factor'), nationality = structure(c(3L, 1L, 3L, 2L, 2L, 1L, NA), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(2L, 1L, 1L, 1L, 1L, 1L, NA), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = c('1', '2', '3', '4', '4.1', '5', '7'), class = 'data.frame'),     structure(list(title = structure(c(2L, 5L, 4L, 6L, 7L, 3L, 1L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = c(NA, 7L), class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor7_76122c593e5959d5f57a314601361b65() {
        assertEval("argv <- list(list(c('     The binary arithmetic operators are generic functions: methods can', '     be written for them individually or via the ‘Ops’ group generic', '     function.  (See ‘Ops’ for how dispatch is computed.)')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor8_63def84a0ffa79732d4fad9d531278f4() {
        assertEval("argv <- list(list(structure(list(structure(1:4, .Label = c('0', '1', '2', '3'), class = 'factor')), row.names = c(NA, -4L), class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor9_4c59dc0a1fca5a3e86054aadedcf83e2() {
        assertEval("argv <- list(structure(list(`1` = c(2, 1, 4, 3), `2` = c(3, 1.5, 5, 4, 1.5), `3` = c(6.5, 1.5, 9, 8, 1.5, 6.5, 4, 4, 4), `4` = c(7, 1.5, 10, 9, 1.5, 7, 4, 4, 4, 7)), .Dim = 4L, .Dimnames = list(c('1', '2', '3', '4'))), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisloaded_testisloaded1_220ceb2147278a6f97c31fd69353e397() {
        assertEval("argv <- list('PDF', '', 'External'); .Internal(is.loaded(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinisloaded_testisloaded2_30b0aadc29d88b90168e554485b40aac() {
        assertEval("argv <- list('supsmu', '', ''); .Internal(is.loaded(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinislogical_testislogical1_0823134dcecb9262120e44ea6976c89c() {
        assertEval("argv <- list(structure(cim = c(22L, 13L), .Dimnames = list(c('r39', 'r17', 'r39', 'r14', 'r39', 'r8', 'r25', 'r9', 'r17', 'r27', 'r17', 'r14', 'r39', 'r27', 'r9', 'r25', 'r8', 'r17', 'r9', 'r8', 'r25', 'r5'), c('c4', 'c1', 'c13', 'c13', 'c1', 'c20', 'c20', 'c13', 'c20', 'c8', 'c8', 'c8', 'c13'))));is.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislogical_testislogical2_9a7597d16b5376eadf8dd69b84cffce5() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislogical_testislogical3_61ae2ece0eba0e47768e35172bfc770b() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislogical_testislogical4_653b0b9707c8713f830bc087103c8ec4() {
        assertEval("argv <- list(structure(c(1, 4.16333634234434e-17, 5.55111512312578e-17, -1.38777878078145e-17, 2.77555756156289e-17, 4.16333634234434e-17, 1, -1.11022302462516e-16, -2.77555756156289e-17, -5.55111512312578e-17, 5.55111512312578e-17, -1.11022302462516e-16, 1, 5.55111512312578e-17, 0, -1.38777878078145e-17, -2.77555756156289e-17, 5.55111512312578e-17, 1, -1.11022302462516e-16, 2.77555756156289e-17, -5.55111512312578e-17, 0, -1.11022302462516e-16, 1), .Dim = c(5L, 5L)));is.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislogical_testislogical5_d5543e0d201f118e6e70e5f959c95bc6() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, NA, 6, 0, 0, 0, 14, 3, 0, 15, 0, 0, 8), .Dim = c(4L, 4L)));is.logical(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinislogical_testislogical7_2552a6f53cc06be20df6ee4fbe8b4c36() {
        assertEval("argv <- list(c(FALSE, TRUE, FALSE));do.call('is.logical', argv)");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix1_dae7d36208604c0fa5f64d0e33a03490() {
        assertEval("argv <- list(c(-3.44, 62.44));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix10_428a871e7486fabd6efea3517f4faabd() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(25L, 0L)));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix11_cd6318cec32acb7939c2280e70c635e0() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/arff.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/arff.R'), frow = c(86L, 86L), lrow = c(88L, 88L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix12_d839da23e106b1d13ce276fb8f6ff95a() {
        assertEval("argv <- list(structure(c(-15.8396536770559, 0.267020886067525, -10.0516337591148, 7.62751967585832), .Dim = c(2L, 2L), .Dimnames = list(c('1', '3'), c('(Intercept)', 'TempLow'))));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix13_3fa584c1a0328be8e35cc253f69c0678() {
        assertEval("argv <- list(structure(list(srcfile = c(NA, '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats'), frow = c(NA, 16987L, 16991L), lrow = c(NA, 16987L, 16991L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 3L), class = 'data.frame'));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix14_d59dd47658e9f2963bf293502d5b8152() {
        assertEval("argv <- list(structure(list(V1 = c(NA, 2, NA, 4, 5), V2 = c(NA, NA, 3, 4, 5)), .Names = c('V1', 'V2'), class = 'data.frame', row.names = c(NA, -5L)));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix15_edf48bcf82ea762e0e47caa10376d305() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 56.989995924654, 56.989995924654, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 94.3649041101607, 109.608811230383, 109.608811230383, 109.608811230383, 107.478028232287, 107.478028232287, 107.478028232287, 107.478028232287, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 94.6057793667664, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 76.6771074226725, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 57.5975949121373, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 39.6403646307366, 10.7055301785859, 0, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 1.00000000551046, 0.914597467778369, 0.914597467778369, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.764820801027804, 0.599195286063472, 0.599195286063472, 0.599195286063472, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.446659102876937, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.319471715663991, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.21965732107982, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.144322069921372, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0889140940358009, 0.0202635232425103, 2.60032456603692e-08, 0, 0, 0, 0, 0, 0.165626203544259, 0.165626203544259, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.341691261149167, 0.503396799290371, 0.503396799290371, 0.503396799290371, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.638987326722699, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.746106779008021, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.827421615259225, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.887496120452751, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.931061257482989, 0.984387422945875, 0.999999996451695), .Dim = c(52L, 3L)));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix16_673aa335bf6b95eef1b89672f7d182ad() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1), Deviance = c(12.2441566485997, 32.825622681839), AIC = c(73.9421143635373, 92.5235803967766)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user'), class = c('anova', 'data.frame'), heading = c('Single term deletions', '\\nModel:', 'cbind(X, M) ~ M.user')));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix17_96c98a5007bab1e693dacef46aeea1a0() {
        assertEval("argv <- list(structure(list(V1 = 1L, V2 = structure(1L, .Label = c('A', 'D', 'E'), class = 'factor'), V3 = 6), .Names = c('V1', 'V2', 'V3'), class = 'data.frame', row.names = c(NA, -1L)));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix18_d27ad38b99b90b4a67f9813c51dc5f4c() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(10L, 0L)));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix19_9636acdda14f212058906537355d0593() {
        assertEval("argv <- list(c(-1.12778377684043, -12820.0784261145, -21650982809.6744, -473300382255715392, -6.08456909882282e+25, -3.04622557026196e+34, -4.60125024792566e+43, -1.76183826972506e+53, -1.5069799345972e+63, -2.61556777274611e+73, -8.54170618068872e+83, -4.9383857330861e+94, -4.80716085942859e+105, -7.55412056676629e+116, -1.84898368353639e+128, -6.83535188151783e+139, -3.71562599613334e+151, -2.90089508183654e+163, -3.18582547396557e+175, -4.83110332887119e+187, -9.94902790498679e+199, -2.74100158340596e+212, -9.96611412047338e+224, -4.72336572671053e+237, -2.88514442494869e+250, -2.24780296109123e+263, -2.21240023126594e+276, -2.72671165723473e+289, -4.17369555651928e+302, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix2_24d3c1c015000b8897c2e601ecd8d5f1() {
        assertEval("argv <- list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 1L, class = 'data.frame'));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix20_bc38e9365b2ae9a4709c6c8a7d689541() {
        assertEval("argv <- list(structure(c(-15.7116658409483, 0.267197739695975, -7.51681521806951, 7.8485143735526), .Dim = c(2L, 2L), .Dimnames = list(c('1', '3'), c('(Intercept)', 'M.userY'))));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix21_d782f152367a94a7a20c42835cce749d() {
        assertEval("argv <- list(structure(c(NA, NA, NA, NA), .Dim = c(1L, 4L), .Dimnames = list('x', c('Estimate', 'Std. Error', 't value', 'Pr(>|t|)'))));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix23_d13c8870c5d93707ea8d734b6680192c() {
        assertEval("argv <- list(0.0597289453377495);do.call('is.matrix', argv)");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix3_4e3a7abe023a4cbbc487f85244861445() {
        assertEval("argv <- list(structure(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), from = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = 'registered S3method for summary', class = 'factor')), .Names = c('visible', 'from'), row.names = c('summary.aspell', 'summary.ecdf', 'summary.loess', 'summary.nls', 'summary.packageStatus', 'summary.PDF_Dictionary', 'summary.PDF_Stream', 'summary.ppr', 'summary.prcomp', 'summary.princomp', 'summary.stl', 'summary.tukeysmooth'), class = 'data.frame'));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix4_68d791e7effdd030a576f9b6f0536f40() {
        assertEval("argv <- list(structure(c(0, 87, 82, 75, 63, 50, 43, 32, 35, 60, 54, 55, 36, 39, 0, 0, 69, 57, 57, 51, 45, 37, 46, 39, 36, 24, 32, 23, 25, 32, 0, 32, 59, 74, 75, 60, 71, 61, 71, 57, 71, 68, 79, 73, 76, 71, 67, 75, 79, 62, 63, 57, 60, 49, 48, 52, 57, 62, 61, 66, 71, 62, 61, 57, 72, 83, 71, 78, 79, 71, 62, 74, 76, 64, 62, 57, 80, 73, 69, 69, 71, 64, 69, 62, 63, 46, 56, 44, 44, 52, 38, 46, 36, 49, 35, 44, 59, 65, 65, 56, 66, 53, 61, 52, 51, 48, 54, 49, 49, 61, 0, 0, 68, 44, 40, 27, 28, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts'));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix5_0a3aee8b4b8d4092727d423a399203ea() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R'), frow = c(112L, 114L, 115L, 116L, 127L, 130L, 130L, 130L, 133L, 133L, 133L, 136L, 136L, 136L, 140L, 140L, 140L, 143L, 143L, 143L, 147L, 147L, 147L, 147L, 150L, 150L, 150L, 155L, 161L), lrow = c(156L, 114L, 115L, 116L, 127L, 130L, 130L, 130L, 133L, 133L, 133L, 136L, 136L, 136L, 140L, 140L, 140L, 143L, 143L, 143L, 147L, 147L, 147L, 147L, 150L, 150L, 150L, 155L, 178L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 29L), class = 'data.frame'));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix6_89f5dc0599b95df6edaf038fff686849() {
        assertEval("argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix7_737d368a60805525729ca3b618845161() {
        assertEval("argv <- list(c(1.2e+100, 1.3e+100));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix8_e30de8ecc4d15b5ed1fa78ead2350a64() {
        assertEval("argv <- list(structure(c(1.46658790096676e-05, -0.00015671726259936, -4.04552045434325e-05, 0.00255024941225984, -0.00162786181391528, 8.23090637551149e-05, -0.00015671726259936, 3.72287793770631e-05, 0.000886372801540247, -0.0567316142279179, 0.0349990628241952, -0.00175223081612341, -4.04552045434325e-05, 0.000886372801540247, 2.56091878967357e-05, -0.000729189497559513, -0.000975857105361189, 4.86109322531125e-05, 0.00255024941225984, -0.0567316142279179, -0.000729189497559513, 0.000230331183246113, 0.0612339887096517, -0.00297447704687248, -0.00162786181391528, 0.0349990628241952, -0.000975857105361189, 0.0612339887096517, -1.91064691608123e-05, -0.000246257006748074, 8.23090637551149e-05, -0.00175223081612341, 4.86109322531125e-05, -0.00297447704687248, -0.000246257006748074, 2.51870808007926e-05), .Dim = c(6L, 6L), .Dimnames = list(c('v1', 'v2', 'v3', 'v4', 'v5', 'v6'), c('v1', 'v2', 'v3', 'v4', 'v5', 'v6'))));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix9_c4e53120716a1262d9f7e126f929de29() {
        assertEval("argv <- list(structure(list(Topic = c('myTst-package', 'foo-class', 'myTst', 'show,foo-method', 'show,foo-method', 'show-methods'), File = c('myTst-package', 'foo-class', 'myTst-package', 'foo-class', 'show-methods', 'show-methods')), .Names = c('Topic', 'File'), row.names = c(3L, 1L, 4L, 2L, 6L, 5L), class = 'data.frame'));is.matrix(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna1_2aa32c618593d36d7fa5423df4517180() {
        assertEval("argv <- list(8.21977282218514e-09);is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna10_1408809efbe7a7f813755b6174502419() {
        assertEval("argv <- list(structure(TRUE, .Names = NA_character_));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna11_c22576b815a1bb8a0cfbd38e7d01cf18() {
        assertEval("argv <- list('•');is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna12_5edfe99c1a8b2e978985ca8e685798d7() {
        assertEval("argv <- list(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, NA, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, NA, 16L, NA, NA, 17L, 18L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 19L, 20L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 21L, 22L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 23L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 24L, 25L, NA, NA, NA, NA, NA, 26L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 27L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 28L, NA, NA, NA, NA, NA, NA, NA));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna13_1a5ea677fcf7838e65232d60dc685a93() {
        assertEval("argv <- list(structure(list(VAR1 = c(1, 2, 3, 4, 5), VAR3 = c(1, 1, 1, 1, NA)), .Names = c('VAR1', 'VAR3'), class = 'data.frame', row.names = c(NA, -5L)));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna14_fd2cc8d3a14401702d075cf77fa72977() {
        assertEval("argv <- list(structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna15_08a187241e684f3f72938ec3f81b57ab() {
        assertEval("argv <- list(structure('graphics', .Names = 'plot'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna16_4d6d28463f55138b166017be10b6602a() {
        assertEval("argv <- list(structure(c(1.47191076131574, 0.586694550701453, NA, 0.258706725324317), .Names = c('(Intercept)', 'x1', 'x2', 'x3')));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna17_8c1746cfb2d6dd44e9e941f70b7fcaf0() {
        assertEval("argv <- list(structure(0.0129709025545593, .Names = 'value'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna18_fae4bd537754ed46847cbe178553d5c4() {
        assertEval("argv <- list(c(1.15623864987889e-07, 2.29156215117184e-06, 2.23566813947706e-05, 0.000143191143888661, 0.000677580461489631, 0.00252801907454942, 0.00775156037133752, 0.0201095764491411, 0.0451105149252681, 0.0890234210350955, 0.15678837112652, 0.249535722442692, 0.362988194603088, 0.487807940725587, 0.611969188999548, 0.724126192770213, 0.816469100858263, 0.885981556331846, 0.933947517503216, 0.964353470219262, 0.982092072679401, 0.991629921792979));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna19_f4d7f6f33831f931ea01d2bc102803bd() {
        assertEval("argv <- list(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna2_1e158b5c0273c887f2af4bbabe23701c() {
        assertEval("argv <- list(structure(c(1, 2, 3, 0, 10, NA), .Dim = c(3L, 2L)));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna20_7e7410bf8b5627962fcc4d0622a5bd04() {
        assertEval("argv <- list(structure(list(conc = c(NA, 1.4, NA, NA, NA, NA, NA, NA, 2.2, NA, NA, 0.6)), .Names = 'conc', row.names = 407:418, class = 'data.frame'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna21_f71736784acf6cd7e64ca317c379f565() {
        assertEval("argv <- list(structure(c(-0.435358622483264, -0.0335050551134034, 0.133034650300067, -0.159998333048696, 0.195871393282558, 0.350272600548034, 0.39175188095922, 0.80136172049434, 0.278604939810076, 0.226807608071186, -0.705366153102363, -0.673376038650154, 1.0575405448001, -0.361896730525493, -0.183063001472974, 0.770224627641576, -0.723327517911943, 0.641508754101234, -0.497966152633253, -0.565883899194175, -0.163154615929682, -1.04605311744929, 0.345822472294285, -0.120642075306238, -0.310915191264717, -0.421459810417331, 0.127313193315093, 0.0460216192070582, -0.571263568938105, -0.255068194977355, 0.466680400648398, -0.577405253130228, 0.427189001707599, -0.117526978398191, 0.338157182237428, 0.106063414615583, 0.0652166343937516, 0.113976880905178, -0.508973211491926, -0.0281367896906678, 0.0255810420505139, -0.0895312259800421, 0.343273059276787, 0.25878029892501, 0.178005594248437, 0.616202813145647, -0.223306051799002, -0.822237650949987, 0.181243736532592, 1.03805050988759, -0.535064558180362, 0.629967292956912, -0.206091625685159, -0.0982523326578774, 0.414371639034748, -0.332128640110978, 0.0280866409684434, -0.53195331347224, -0.0381291521565174, -0.0522348719327905, 0.221019543981438, -0.306904771316101, 0.553064781030607, -0.15705513179628, 0.740342712486913, -0.307570821127478, -0.952143530102099, -0.691835269560791, -0.27190785111766, -0.196035414096589, -0.970405281846342, -0.177170015488179, -0.885843727603163, 0.429176556994819, 0.310459328495626, -0.258604904263182, -1.18516758379134, -0.690975294813695, 0.965849167652318, 0.44535708731974, -0.0846102375086248, -0.32082832908822, 0.528416539604261, 0.620184198607294, 0.317666232431379, 0.283097649168652, 0.223675435302281, -0.697584545802335, 1.0301502006605, 0.452533534739715, 0.264750609900989, 0.267980537616643, 0.0973596082099813, 0.161838610289358, 0.612946027273891, 0.816578471249094, -1.15340096289088, -1.01680545446605, 0.422976667855578, -0.23961110455947, 0.0316786188682291, -0.797164261874229, 0.184311996008136, 0.0876867376986658, 0.312240812855443, 0.0432826980205777, -0.00317515675173313, -0.296692321406956, 0.598755930788477, 0.298681977334167, 0.258864357137695, 0.126248580888692, 0.318393890044881, 0.316636862337678), .Tsp = c(1, 114, 1), class = 'ts'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna22_6c1b4ce8bdd54c4a96e9f37d9387551a() {
        assertEval("argv <- list(c(-Inf, 2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, Inf, NaN, NA));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna23_41b3186fdac0bca647f163b1e86b8e2e() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 105L, wday = 6L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna24_0a2422ef574162a9ab887775f3975750() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna25_e0ae32baaa99ed736ec6689db23bd043() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 60L, wday = 5L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna26_2a434b0ada52407a9e835d2698ae4088() {
        assertEval("argv <- list(structure(list(conc = c(NA, NA, NA, NA, NA, NA, NA, 1.4, NA, NA, NA, NA, NA, NA, NA, 3)), .Names = 'conc', row.names = c(NA, 16L), class = 'data.frame'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna27_d72c37b302b3b55042b674e1c541e194() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna28_84b0514d3ad0bdabdceba5bbfdd9ed99() {
        assertEval("argv <- list(structure(list(conc = c(NA, 3.6)), .Names = 'conc', row.names = 419:420, class = 'data.frame'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna29_9d0f053684ba87cbe5eb248372acea93() {
        assertEval("argv <- list(NULL);is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna3_3a76894b87301cd131b3ccc6beb02b8a() {
        assertEval("argv <- list(structure(c(17L, 18L, 18L, 18L), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N')));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna30_02682b27be50ef5425c8edd7a6bd73ea() {
        assertEval("argv <- list(structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_, mday = NA_integer_, mon = NA_integer_, year = NA_integer_, wday = NA_integer_, yday = NA_integer_, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna31_fe88c79430b0b7872af42d872546cd8d() {
        assertEval("argv <- list(structure(c('R (>= 2.10.0), methods, DBI (>= 0.2-5)', 'methods, DBI (>= 0.2-3)', NA), .Names = c('Depends', 'Imports', 'LinkingTo')));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna32_20c3552db16069719f196255548a41c8() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 12L, mon = 2L, year = 112L, wday = 1L, yday = 71L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna33_3368e9fdee86508475174b85f9fcb4fc() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(8L, 5L)));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna34_e26dee73698813118118fe9b6a849231() {
        assertEval("argv <- list(structure(c('Min.   : 1.00  ', '1st Qu.: 9.00  ', 'Median :18.00  ', 'Mean   :14.74  ', '3rd Qu.:20.00  ', 'Max.   :23.00  ', NA, 'Min.   :5.000  ', '1st Qu.:5.300  ', 'Median :6.100  ', 'Mean   :6.084  ', '3rd Qu.:6.600  ', 'Max.   :7.700  ', NA, '117    :  5  ', '1028   :  4  ', '113    :  4  ', '112    :  3  ', '135    :  3  ', '(Other):147  ', 'NA's   : 16  ', 'Min.   :  0.50  ', '1st Qu.: 11.32  ', 'Median : 23.40  ', 'Mean   : 45.60  ', '3rd Qu.: 47.55  ', 'Max.   :370.00  ', NA, 'Min.   :0.00300  ', '1st Qu.:0.04425  ', 'Median :0.11300  ', 'Mean   :0.15422  ', '3rd Qu.:0.21925  ', 'Max.   :0.81000  ', NA), .Dim = c(7L, 5L), .Dimnames = list(c('', '', '', '', '', '', ''), c('    event', '     mag', '   station', '     dist', '    accel')), class = 'table'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna35_3a958646dfd6addce10492f5e23b6947() {
        assertEval("argv <- list(NA_complex_);is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna36_6f95a351890ed461e95ef71d6360b137() {
        assertEval("argv <- list(complex(0));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna37_1dee0e5e27f42092b55314e66ddc2e5c() {
        assertEval("argv <- list(structure(list(sec = 40, min = 24L, hour = 11L, mday = 15L, mon = 11L, year = 100L, wday = 5L, yday = 349L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt')));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna38_2357f4b62dba8861119a17a95e31748f() {
        assertEval("argv <- list(structure(c(2L, 6L, 2L, 5L, 4L, 2L, 5L, 4L), .Dim = 8L, .Dimnames = structure(list(statef = c('act', 'nsw', 'nt', 'qld', 'sa', 'tas', 'vic', 'wa')), .Names = 'statef'), class = 'table'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna39_9f8a962233b053dc539d9519852d5b05() {
        assertEval("argv <- list(structure(c(2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0), .Dim = 3:4, .Dimnames = structure(list(x1 = c('a', 'b', 'c'), x2 = c('a', 'b', 'c', NA)), .Names = c('x1', 'x2')), class = c('xtabs', 'table')));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna4_e67de1263aa17ec0a862b5061ae8201b() {
        assertEval("argv <- list(structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna40_eaabd3c5490543c81a8811dc06da1d7d() {
        assertEval("argv <- list(structure(list(1L, 3L), class = structure('L', package = '.GlobalEnv')));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna41_ed8ed62d5491439bc1a2cfadb679d9f3() {
        assertEval("argv <- list(c('«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', 'éè'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna42_701aa58042a8a186a089ba27db950974() {
        assertEval("argv <- list(c(-Inf, -Inf, -Inf, 0, 1, 2, Inf, Inf));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna43_086ff06b1c65751ad82bab53679fdedf() {
        assertEval("argv <- list(structure(c(-3.001e+155, -1.067e+107, -1.976e+62, -9.961e+152, -2.059e+23, 0.5104), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = c('summaryDefault', 'table')));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna44_9f4ecab2273d91a954b8f023ab2c59f2() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 70L, wday = 4L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna45_a6a4c956b4218eaa37939fac1a5ec3d9() {
        assertEval("argv <- list(119:120);is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna46_ef68fa67dfb668e50afe626f1ad8848e() {
        assertEval("argv <- list(integer(0));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna6_1c50315d21da008e68803040ab060aad() {
        assertEval("argv <- list(list(list(1)));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna7_384496152a4a590ca86a7655b5c6aca2() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 9L, mon = 9L, year = 103L, wday = 4L, yday = 281L, isdst = 1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt')));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisna_testisna8_f36aa043bdbd7d62cb9a7b6fbdff82cf() {
        assertEval("argv <- list(structure(c(23L, 24L, 47L, 48L, 71L, 72L, 95L, 96L, 119L, 120L), .Dim = c(2L, 5L), .Dimnames = list(NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))));is.na(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnaPOSIXlt_testisnaPOSIXlt1_fe72c0f5737fa6b57256c327a9603120() {
        assertEval("argv <- structure(list(x = structure(list(sec = 0, min = 0L,     hour = 0L, mday = 11L, mon = 7L, year = 3L, wday = 2L, yday = 222L,     isdst = 0L, zone = 'EST', gmtoff = NA_integer_), .Names = c('sec',     'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst',     'zone', 'gmtoff'), class = c('POSIXlt', 'POSIXt'), tzone = c('EST5EDT',     'EST', 'EDT'))), .Names = 'x');do.call('is.na.POSIXlt', argv)");
    }

    @Test
    public void TestrGenBuiltinisnaassign_default_testisnaassign_default1_319ae2b56221908ce694e0d587332841() {
        assertEval("argv <- structure(list(x = 9L, value = TRUE), .Names = c('x',     'value'));do.call('is.na<-.default', argv)");
    }

    @Test
    public void TestrGenBuiltinisnaassign_default_testisnaassign_default2_9e3e856bc4c97a51fc96d24752d08e91() {
        assertEval("argv <- structure(list(x = structure(c('A', '3', 'C'), class = 'AsIs'),     value = 2), .Names = c('x', 'value'));do.call('is.na<-.default', argv)");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan1_f1f605a8362425117d7d0f088f6b419d() {
        assertEval("argv <- list(NA);is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan10_ac1aae3fc8a6bffc4887ffa94dba3a5d() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1), .Dim = 1:3));is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan2_590632285048b0eb0ad330c5d0abf1a6() {
        assertEval("argv <- list(structure(1:7, .Names = c('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7')));is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan3_f4ed9ecd1bdabc11bbaa46c6fe47cac0() {
        assertEval("argv <- list(1:3);is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan4_da2b4392fba4e3a55021d23db0c7a264() {
        assertEval("argv <- list(structure(NaN, .Dim = c(1L, 1L)));is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan5_e40af0b6987cdff5f008d12ff177b849() {
        assertEval("argv <- list(3.14159265358979);is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan6_259e9ea42382ad8e6e3ebb8978d2ec67() {
        assertEval("argv <- list(NULL);is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan7_09d8b88da3658280c474240252fce4e6() {
        assertEval("argv <- list(structure(1:3, .Dim = c(3L, 1L)));is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan9_2b940567bf3f4e734a1a778e1edea354() {
        assertEval("argv <- list(c(-Inf, 2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, Inf, NaN, NA));is.nan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull1_f744bc6a72e13cbb6c90528cf54d92fc() {
        assertEval("argv <- list(c('a', 'b', 'c'));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull10_adab7fa7ade3f0945cfc8d6b25e36308() {
        assertEval("argv <- list(structure(list(coefficients = numeric(0), residuals = structure(c(-68.7898369431611, -71.7713382904347, -44.0000000000001, -56.5455568546283, -29.303772984227), .Dim = c(5L, 1L), .Dimnames = list(c('2', '3', '4', '5', '6'), NULL)), fitted.values = structure(c(0, 0, 0, 0, 0), .Dim = c(5L, 1L), .Dimnames = list(c('2', '3', '4', '5', '6'), NULL)), weights = NULL, rank = 0L, df.residual = 5L), .Names = c('coefficients', 'residuals', 'fitted.values', 'weights', 'rank', 'df.residual'), class = c('aov', 'lm')));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull11_7323eeeb4b6fb829f9d8f15a0a29bcfe() {
        assertEval("argv <- list(complex(0));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull12_76214e6ba4f965107bcf63723d87fa95() {
        assertEval("argv <- list(1.74126257032961e-18);is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull13_00bd79a89201e1b4a022b76dd4ba89a5() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull14_50434f5c1b341684b0b42a3e1175c33d() {
        assertEval("argv <- list(NA_complex_);do.call('is.null', argv)");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull15_87b9639225f70c9beb7a65f5966340af() {
        assertEval("argv <- list(complex(real = 3, imaginary = -Inf));do.call('is.null', argv)");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull16_6aed923cc68e227d5514bf5a366ffbb7() {
        assertEval("argv <- list(function(file = ifelse(onefile, 'Rplots.pdf', 'Rplot%03d.pdf'),     width, height, onefile, family, title, fonts, version, paper,     encoding, bg, fg, pointsize, pagecentre, colormodel, useDingbats,     useKerning, fillOddEven, compress) {    initPSandPDFfonts()    new <- list()    if (!missing(width)) new$width <- width    if (!missing(height)) new$height <- height    if (!missing(onefile)) new$onefile <- onefile    if (!missing(title)) new$title <- title    if (!missing(fonts)) new$fonts <- fonts    if (!missing(version)) new$version <- version    if (!missing(paper)) new$paper <- paper    if (!missing(encoding)) new$encoding <- encoding    if (!missing(bg)) new$bg <- bg    if (!missing(fg)) new$fg <- fg    if (!missing(pointsize)) new$pointsize <- pointsize    if (!missing(pagecentre)) new$pagecentre <- pagecentre    if (!missing(colormodel)) new$colormodel <- colormodel    if (!missing(useDingbats)) new$useDingbats <- useDingbats    if (!missing(useKerning)) new$useKerning <- useKerning    if (!missing(fillOddEven)) new$fillOddEven <- fillOddEven    if (!missing(compress)) new$compress <- compress    old <- check.options(new, name.opt = '.PDF.Options', envir = .PSenv)    if (!missing(family) && (inherits(family, 'Type1Font') ||         inherits(family, 'CIDFont'))) {        enc <- family$encoding        if (inherits(family, 'Type1Font') && !is.null(enc) &&             enc != 'default' && (is.null(old$encoding) || old$encoding ==             'default')) old$encoding <- enc        family <- family$metrics    }    if (is.null(old$encoding) || old$encoding == 'default') old$encoding <- guessEncoding()    if (!missing(family)) {        if (length(family) == 4L) {            family <- c(family, 'Symbol.afm')        } else if (length(family) == 5L) {        } else if (length(family) == 1L) {            pf <- pdfFonts(family)[[1L]]            if (is.null(pf)) stop(gettextf('unknown family '%s'',                 family), domain = NA)            matchFont(pf, old$encoding)        } else stop('invalid 'family' argument')        old$family <- family    }    version <- old$version    versions <- c('1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7',         '2.0')    if (version %in% versions) version <- as.integer(strsplit(version,         '[.]')[[1L]]) else stop('invalid PDF version')    onefile <- old$onefile    if (!checkIntFormat(file)) stop(gettextf('invalid 'file' argument '%s'',         file), domain = NA)    .External(C_PDF, file, old$paper, old$family, old$encoding,         old$bg, old$fg, old$width, old$height, old$pointsize,         onefile, old$pagecentre, old$title, old$fonts, version[1L],         version[2L], old$colormodel, old$useDingbats, old$useKerning,         old$fillOddEven, old$compress)    invisible()});do.call('is.null', argv)");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull2_b57bd3ebab7b4ffdddfad6d413687b43() {
        assertEval("argv <- list(structure(c(NA, NA, 159.125, 204, 221.25, 245.125, 319.75, 451.5, 561.125, 619.25, 615.625, 548, 462.125, 381.125, 316.625, 264, 228.375, 210.75, 188.375, 199, 207.125, 191, 166.875, 72, -9.25, -33.125, -36.75, 36.25, 103, 131.625, NA, NA), .Tsp = c(1951, 1958.75, 4), class = 'ts'));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull3_2daa94d7c01db7581c78bed9ff478bbc() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('L', 'M', 'H'), class = 'factor'));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull4_db5d3708e3d15036ca260ac8e314afe2() {
        assertEval("argv <- list(c('(2,5.5]', '(5.5,10]', NA));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull5_c5424bb2bddbdf933b516e9e69ac081b() {
        assertEval("argv <- list(structure(list(z = c(-2.71928906935559, -2.42170276502517, -2.09964379178171, -1.74953243478614, -1.36765437050161, -0.950481896729501, -0.49514368442691, 0, 0.534774072422106, 1.1067130528647, 1.71078417306203, 2.33938293418822, 2.98268239609615), par.vals = structure(c(0.707463571249756, 0.714694094477037, 0.725412821685713, 0.74111612512182, 0.763750498997247, 0.795678221483334, 0.839503022768249, 0.897728639347183, 0.972289000300049, 1.06404105741634, 1.1722925771844, 1.29437141627989, 1.42522018859931, -3.11497037357416, -3.12714840246737, -3.14532049441438, -3.17220876767473, -3.21154655520113, -3.26827705075488, -3.34869944608425, -3.46054428079529, -3.61294451442018, -3.81614134368036, -4.08060875057211, -4.41549521607872, -4.82702626542922, -0.0255577133668773, -0.0384397882414428, -0.0575047563177536, -0.085367554260897, -0.125387593962273, -0.181561305237101, -0.258149413255891, -0.359008117508679, -0.486728760637899, -0.641785962540215, -0.821841695092364, -1.02123122113516, -1.23065013245083, 7.95100998228548, 7.54634587182367, 7.14890399737901, 6.76196968783309, 6.39005226899545, 6.03912521056563, 5.71679838524513, 5.43240185128028, 5.19696909896364, 5.02301800418124, 4.92391121830517, 4.91279665045699, 5.00177553632184, -9.53200922191114, -8.69335766510962, -7.8547061083081, -7.01605455150657, -6.17740299470505, -5.33875143790352, -4.500099881102, -3.66144832430047, -2.82279676749895, -1.98414521069743, -1.1454936538959, -0.306842097094378, 0.531809459707146), .Dim = c(13L, 5L), .Dimnames = list(    NULL, c('(Intercept)', 'PS', 'AI', 'VS', 'PS:AI')))), .Names = c('z', 'par.vals'), row.names = c(NA, 13L), class = 'data.frame'));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull6_61f56aaf144548bd4908fa369ebdba7f() {
        assertEval("argv <- list(structure(c(-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96), .Tsp = c(1, 101, 1), class = 'ts'));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull7_2a4c14addaf82d8a13169854a8c1792a() {
        assertEval("argv <- list(numeric(0));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull8_45a422014a6e6771472228993bdf8a3a() {
        assertEval("argv <- list(structure(c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));is.null(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric1_c9bebb9517f1ba58fe9f59d6e3c53c1c() {
        assertEval("argv <- list(structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric10_4c65759dda183eb15818bcdae176748e() {
        assertEval("argv <- list(structure(c(1L, 2L, NA, 3L), .Label = c('aa', 'bb', 'dd')));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric11_864ee53c6963c6fa1ab6f54668ff8bbd() {
        assertEval("argv <- list(structure(c(1120, 1160, 963, 1210, 1160, 1160, 813, 1230, 1370, 1140, 995, 935, 1110, 994, 1020, 960, 1180, 799, 958, 1140, 1100, 1210, 1150, 1250, 1260, 1220, 1030, 1100, 774, 840, 874, 694, 940, 833, 701, 916, 692, 1020, 1050, 969, 831, 726, 456, 824, 702, 1120, 1100, 832, 764, 821, 768, 845, 864, 862, 698, 845, 744, 796, 1040, 759, 781, 865, 845, 944, 984, 897, 822, 1010, 771, 676, 649, 846, 812, 742, 801, 1040, 860, 874, 848, 890, 744, 749, 838, 1050, 918, 986, 797, 923, 975, 815, 1020, 906, 901, 1170, 912, 746, 919, 718, 714, 740), .Tsp = c(1871, 1970, 1), class = 'ts'));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric12_b15bd89dead6fc01d2da7cbf75ca5caf() {
        assertEval("argv <- list(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric13_868f8d2fea575e42581615cece943f06() {
        assertEval("argv <- list(structure(c(39.7, 27.7, 43.5, 89.7, 70.2, 63.5, 36.5, 15.2, 35.3, 45.2, 1.2, 49.5, 63.1, 34, 17, 17.6, 67.8, 45.1, 50.9, 64.9, 59.8, 73, 37.6, 60.7, 60.8, 69.3, 71.2, 64.5, 75.9, 7.7, 72.6, 18.7, 78.2, 55.1, 58.1, 62, 53.3, 85.9, 67.5, 16.7, 46.6, 84.9, 19.4, 38.4, 5, 22, 17, 5, 16, 6, 12, 31, 9, 16, 37, 15, 13, 17, 15, 35, 14, 6, 22, 7, 22, 19, 15, 19, 16, 22, 12, 14, 9, 29, 18, 25, 12, 14, 14, 21, 12, 3, 14, 22, 16, 7, 26, 26, 5, 29, 15, 2, 7, 3, 7, 20, 7, 13, 53, 8, 13, 8, 12, 32, 8, 9, 12, 3, 10, 9, 7, 12, 10, 5, 1, 6, 9, 11, 2, 7, 6, 3, 8, 12, 7, 2, 7, 13, 29, 6, 28, 12, 93.4, 58.33, 5.16, 100, 92.85, 2.56, 33.77, 2.15, 90.57, 91.38, 42.34, 6.1, 96.83, 3.3, 9.96, 16.92, 97.16, 84.84, 15.14, 98.22, 5.23, 2.84, 4.97, 4.43, 7.72, 2.82, 2.4, 98.61, 99.06, 13.79, 24.2, 8.65, 98.96, 4.52, 5.23, 8.52, 97.67, 99.71, 2.27, 11.22, 50.43, 99.68, 12.11, 5.62, 20.2, 19.3, 20.6, 18.3, 23.6, 18, 20.3, 10.8, 26.6, 24.4, 18, 22.5, 18.1, 20, 22.2, 23, 24.9, 22.2, 16.7, 20.2, 18, 20, 20, 22.7, 16.3, 18.7, 21, 24.5, 17.8, 20.5, 21.2, 19.5, 19.4, 22.4, 23.8, 16.5, 21, 15.1, 19.1, 18.9, 18.2, 19.8, 20.2, 20.3), .Dim = c(44L, 5L), .Dimnames = list(c('Franches-Mnt', 'Rive Gauche', 'Neuveville', 'Herens', 'Broye', 'Paysd'enhaut', 'Moutier', 'La Vallee', 'Porrentruy', 'Sarine', 'V. De Geneve', 'Yverdon', 'Sion', 'Grandson', 'Courtelary', 'Neuchatel', 'Glane', 'Delemont', 'Nyone', 'Monthey', 'Morges', 'Lavaux', 'Val de Ruz', 'Avenches', 'Rolle', 'Cossonay', 'Oron', 'Veveyse', 'St Maurice', 'La Chauxdfnd', 'Echallens', 'ValdeTravers', 'Martigwy', 'Moudon', 'Payerne', 'Aigle', 'Gruyere', 'Conthey', 'Aubonne', 'Le Locle', 'Rive Droite', 'Entremont', 'Lausanne', 'Boudry'), c('Agriculture', 'Examination', 'Education', 'Catholic', 'Infant.Mortality'))));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric14_0d4c589b64aa0937df11da7a713fe795() {
        assertEval("argv <- list(structure(c(1386439154.20645, 1386469154.20645, 1386499154.20645, 1386529154.20645, 1386559154.20645, 1386589154.20645, 1386619154.20645, 1386649154.20645, 1386679154.20645, 1386709154.20645, 1386739154.20645, 1386769154.20645, 1386799154.20645, 1386829154.20645, 1386859154.20645, 1386889154.20645, 1386919154.20645, 1386949154.20645, 1386979154.20645, 1387009154.20645, 1387039154.20645, 1387069154.20645, 1387099154.20645, 1387129154.20645, 1387159154.20645, 1387189154.20645, 1387219154.20645, 1387249154.20645, 1387279154.20645, 1387309154.20645, 1387339154.20645, 1387369154.20645, 1387399154.20645, 1387429154.20645), class = c('POSIXct', 'POSIXt')));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric15_8e30cfc20c7c6c30b1bfbb3324622541() {
        assertEval("argv <- list(c('2001-01-01', NA, NA, '2004-10-26'));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric16_7e27987a8f5132eb5f793f77133bbb00() {
        assertEval("argv <- list(c(1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374947, 0.707106781186547, 0.587785252292473, 0.453990499739547, 0.309016994374947, 0.156434465040231, -1.83697019872103e-16, -0.156434465040231, -0.309016994374948, -0.453990499739547, -0.587785252292473, -0.707106781186548, -0.809016994374948, -0.891006524188368, -0.951056516295154, -0.987688340595138, -1, -0.987688340595138, -0.951056516295154, -0.891006524188368, -0.809016994374947, -0.707106781186547, -0.587785252292473, -0.453990499739547, -0.309016994374947, -0.156434465040231, 6.12323399573677e-17, 0.156434465040231, 0.309016994374947, 0.453990499739547, 0.587785252292473, 0.707106781186548, 0.809016994374947, 0.891006524188368, 0.951056516295154, 0.987688340595138, 1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374947, 0.707106781186548, 0.587785252292473, 0.453990499739547, 0.309016994374947, 0.156434465040231, 6.12323399573677e-17, -0.15643446504023, -0.309016994374947, -0.453990499739548, -0.587785252292473, -0.707106781186547, -0.809016994374947, -0.891006524188368, -0.951056516295154, -0.987688340595138, -1, -0.987688340595138, -0.951056516295154, -0.891006524188368, -0.809016994374948, -0.707106781186547, -0.587785252292473, -0.453990499739548, -0.309016994374948, -0.15643446504023, -1.83697019872103e-16, 0.15643446504023, 0.309016994374947, 0.453990499739547, 0.587785252292473, 0.707106781186547, 0.809016994374947, 0.891006524188368, 0.951056516295154, 0.987688340595138, 1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374948, 0.707106781186547, 0.587785252292473, 0.453990499739548, 0.309016994374948, 0.15643446504023, 3.06161699786838e-16, -0.15643446504023, -0.309016994374947, -0.453990499739547, -0.587785252292473, -0.707106781186547, -0.809016994374947, -0.891006524188368, -0.951056516295153, -0.987688340595138, -1));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric17_7afbabf760efba4000ddf7a1a596e381() {
        assertEval("argv <- list(structure(c(0.696706709347165, 0.362357754476673, -0.0291995223012888, 0.696706709347165, 0.696706709347165, -0.0291995223012888, 0.696706709347165, -0.0291995223012888, 0.362357754476673, 0.696706709347165, -0.0291995223012888, 0.362357754476673, -0.416146836547142, 0.362357754476673, 0.696706709347165, 0.696706709347165, 0.362357754476673, -0.416146836547142, -0.0291995223012888, -0.416146836547142, 0.696706709347165, -0.416146836547142, 0.362357754476673, -0.0291995223012888, 0.717356090899523, 0.932039085967226, 0.999573603041505, 0.717356090899523, 0.717356090899523, 0.999573603041505, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.909297426825682, 0.932039085967226, 0.717356090899523, 0.717356090899523, 0.932039085967226, 0.909297426825682, 0.999573603041505, 0.909297426825682, 0.717356090899523, 0.909297426825682, 0.932039085967226, 0.999573603041505, -0.0291995223012888, -0.737393715541246, -0.998294775794753, -0.0291995223012888, -0.0291995223012888, -0.998294775794753, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.653643620863612, -0.737393715541246, -0.0291995223012888, -0.0291995223012888, -0.737393715541246, -0.653643620863612, -0.998294775794753, -0.653643620863612, -0.0291995223012888, -0.653643620863612, -0.737393715541246, -0.998294775794753, 0.999573603041505, 0.67546318055115, -0.0583741434275801, 0.999573603041505, 0.999573603041505, -0.0583741434275801, 0.999573603041505, -0.0583741434275801, 0.67546318055115, 0.999573603041505, -0.0583741434275801, 0.67546318055115, -0.756802495307928, 0.67546318055115, 0.999573603041505, 0.999573603041505, 0.67546318055115, -0.756802495307928, -0.0583741434275801, -0.756802495307928, 0.999573603041505, -0.756802495307928, 0.67546318055115, -0.0583741434275801), .Dim = c(24L, 4L), .Dimnames = list(NULL, c('A', 'B', 'C', 'D'))));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric18_adbb5a811c1903ab63dcc27f8b509514() {
        assertEval("argv <- list(c(1, 1, NA, 2));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric19_9ea96d9d1c35f3abf34aec535c5a403b() {
        assertEval("argv <- list(structure(c(79.5323303457107, 6, 86.1989970123773, 6, 69.7732394366197, 5, 98.0323303457106, 6, 108.032330345711, 6, 89.1989970123773, 6, 114.198997012377, 6, 116.698997012377, 6, 110.365663679044, 6, 124.365663679044, 6, 126.365663679044, 6, 118.032330345711, 6), .Dim = c(6L, 4L), .Dimnames = structure(list(V = c('Golden.rain', 'rep        ', 'Marvellous ', 'rep        ', 'Victory    ', 'rep        '), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N'))));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric2_65df4b81dfebff773417ef0966f2eb24() {
        assertEval("argv <- list(structure(c(12784, 12874, 12965, 13057, 13149, 13239, 13330, 13422, 13514, 13604, 13695, 13787, 13879, 13970, 14061, 14153, 14245, 14335), class = 'Date'));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric20_ea66a7a4749f3346e17ec7e8b91e3f85() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(3L, 0L)));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric21_6162f05d2d6b02de4d99d1614956adba() {
        assertEval("argv <- list(structure(16146, class = 'Date'));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric22_345046d6fe4f843f8dfb82f255892f67() {
        assertEval("argv <- list(structure(c(-3.001e+155, -1.067e+107, -1.976e+62, -9.961e+152, -2.059e+23, 0.5104), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = c('summaryDefault', 'table')));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric24_cf0964db56237cbe4e5f3252352381cd() {
        assertEval("argv <- list(structure(16352, class = 'Date'));do.call('is.numeric', argv)");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric3_0231f35ea9cec7a1da59c388e4d0eec3() {
        assertEval("argv <- list(c(1.4615016373309e+48, 5.70899077082384e+45, 2.23007451985306e+43, 8.71122859317602e+40, 3.40282366920938e+38, 1.32922799578492e+36, 5.19229685853483e+33, 2.02824096036517e+31, 7.92281625142643e+28, 3.09485009821345e+26, 1.20892581961463e+24, 4.72236648286965e+21, 18446744073709551616, 72057594037927936, 281474976710656, 1099511627776, 4294967296, 16777216, 65536, 256, 1, 0.00390625, 1.52587890625e-05, 5.96046447753906e-08, 2.3283064365387e-10, 9.09494701772928e-13, 3.5527136788005e-15, 1.38777878078145e-17, 5.42101086242752e-20, 2.11758236813575e-22, 8.27180612553028e-25));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric4_287931cac0e03e61e2906b34212fa7d5() {
        assertEval("argv <- list(integer(0));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric5_03ac46ff8d646dee6345a1332d60b364() {
        assertEval("argv <- list(c(16.4, 11.4, 7.8, 14, 10.9, 16.8, 16.6, 5.9, 21));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric6_03023678d0aad7db3442ef3f2da45525() {
        assertEval("argv <- list(c(0, 0, 0, 1, 0, 0, 0, 0, 1, 0, NA, NA, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, NA, 1, 0, 1, 0, NA, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, NA, 0, 1, 0, 0, 0, 0, NA, 1, 1));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric7_43490d397bf4ba47c8eeadd07586add6() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric8_fceea99a30ce4a375543349c0ed02a20() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('1', '2', '3', '4'), class = 'factor'));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric9_e6a39de8ab1be1e8b1e103a2f13b465c() {
        assertEval("argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));is.numeric(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject1_7b2e1f9a0af7347865cb15839cffe013() {
        assertEval("argv <- list(c(45.0314849918875, 57.5361690778799, 61.7043971065441, 61.7043971065441, 128.39604556517, 45.0314849918875, 36.6950289345592, 45.0314849918875, 228.43351825311, 36.6950289345592, 74.2090811925365, 45.0314849918875, 32.5268009058951, 78.3773092212007, 111.723133450514, 20.0221168199027, 32.5268009058951, 40.8632569632234, 20.0221168199027, 24.1903448485668, 45.0314849918875, 11.6856607625744, 20.0221168199027, 28.3585728772309, 45.0314849918875, 36.6950289345592, 49.1997130205517, 36.6950289345592, 78.3773092212007, 45.0314849918875, 145.068957679827, 32.5268009058951, 161.741869794484));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject10_93eb1f1bf7a7f45fa1f288334dccd3fb() {
        assertEval("argv <- list(structure(c(-0.562441486309934, -0.588967592535822, 0.0277608937997097, 0.568074124752969, 3.89980510825846, -0.428174866497729, -0.343990813420242, -0.260996370058754, -2.31774610938305, 0.314764947225063, -0.455124436264437, -0.0444006414474544, -0.27748974692001, -0.303134023269405, -0.670168347915028, 2.92643313367, -0.749546667806845, -0.410394401887929, -0.203261263063707, 0.1847365997012, 0.128559671155683, 0.313558179929332, -0.0668425264405297, -0.106427678524531, -0.523747793519006, -0.402585404761851, 0.0642079595716389, -0.779859286629166, 0.356484381211739, -0.625053119472271, 1.31547628490512, -0.21959878152752, -0.102402088986461), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject11_697e4aa08b9944afd759eb59fda6da07() {
        assertEval("argv <- list(integer(0));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject12_c7139499ed1fd281646ab5c6156eeade() {
        assertEval("argv <- list(c(25, 50, 100, 250, 500, 1e+05));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject13_4b455f302ebbbf08518ce4d640d65c8c() {
        assertEval("argv <- list(numeric(0));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject14_d1b7dc01aafa7546ec13f0a7635bb61d() {
        assertEval("argv <- list(c(TRUE, FALSE));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject16_b799a0a4d493a3ef4b8c0a1ba8d649a6() {
        assertEval("argv <- list(1:3);do.call('is.object', argv)");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject2_316c5973813fab05cf7d4542462d61c1() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L), .Label = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59'), class = 'factor'));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject3_e38080aaa14c55e03aa5d665b51cd9f8() {
        assertEval("argv <- list(c(-2.97525100835805, -2.82075793382799, -2.66593061478436, -2.51078653265898, -2.35534314690423, -2.19961777085284, -2.04362765822923, -1.88739011884942, -1.73092311663886, -1.57424503752904, -1.41737428587374, -1.26032952797003, -1.10312969205829, -0.945793720579289, -0.788340724666015, -0.630790076924443, -0.473161172617641, -0.315473462875692, -0.157746535777026, -4.9960036108132e-16, 0.157746535777027, 0.315473462875696, 0.473161172617647, 0.630790076924451, 0.788340724666025, 0.9457937205793, 1.1031296920583, 1.26032952797003, 1.41737428587374, 1.57424503752905, 1.73092311663887, 1.88739011884943, 2.04362765822924, 2.19961777085286, 2.35534314690424, 2.510786532659, 2.66593061478437, 2.82075793382801, 2.97525100835807));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject4_54283110b11dae933285b296d1f678bd() {
        assertEval("argv <- list(structure(c(-0.266501885293689, -3.8931863588937, -0.272681427089914, 0.685830427280619, 0.146697567632144, -0.178509228122189, -0.827954133483467, -0.00847153748452917, -0.439077730128206, -0.100627762490786, 1.90697806298419, 0.534191446603769, 0.118116488305486, 0.266107216595585, 1.09677961111435, 0.294604712451767, 1.26527267402907, -1.37468346842381, -0.501152044022612, 0.277514706049866, 0.080458897112638, 0.0436443543043109, -0.480973816036986, 1.25647294144768, 0.371150285558408), .Dim = 25L, .Dimnames = list(    c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject5_0f210d5873969d46ac95cdf46815b5e1() {
        assertEval("argv <- list(c(0.3814, 1.0281, 0.3814, 0.1202, -0.3385, 0.6757, 0.6757, -0.5422, -1.0914, 1.0281, -0.3385, 0.3814, 0.3814, -1.0914, -0.7326, 0.6757, 1.5128, 0.6757, 1.0281, 0.6757, 1.0281, -1.0914, -0.7326, 0.1202, -0.3385, 0.3814, 0.6757, 1.5128, 0.1202, -0.7326, 1.5128, -1.0914, 0.6757, 2.4608, 0.3814, 0.6757, -0.8176, 1.0281, 0.1202, 2.4404, -0.5422, 0.1202, -0.1182, 0.3814, -0.5422, -0.5422, 0.6757, -0.3385, -1.6508, 0.6757, -0.7326, -0.1182, -1.0914, 0.3814, 0.3814, -0.1182, 0.3814, 0.1202, 0.6757, 0.6757, 0.1202, -0.5422, 1.5128, 0.3814, -1.2692, 1.0281, 0.6757, 0.1202, -0.5422, 0.3814, -0.3385, 1.0281, -0.1182, 0.1202, 1.5128, 2.4608, 0.6757, -1.0914, -0.9144, -0.3385, 0.1202, 0.1202, 0.1202, 0.3814, -0.13, -0.5422, 0.1202, -0.1182, 0.3814, 1.0281, 0.6757, 1.0281, -1.2692, 0.1202, 0.3814, 1.5128, -0.1182, 0.3814, 1.0281, 0.3814, 0.1202, -0.3385, 0.6757, 0.6757, -0.5422, -1.0914, 1.0281, -0.3385, 0.3814, 0.3814, -1.0914, -0.7326, 0.6757, 1.5128, 0.6757, 1.0281, 0.6757, 1.0281, -1.0914, -0.7326, 0.1202, -0.3385, 0.3814, 0.6757, 1.5128, 0.1202, -0.7326, 1.5128, -1.0914, 0.6757, 2.4608, 0.3814, 0.6757, -0.8176, 1.0281, 0.1202, 2.4404, -0.5422, 0.1202, -0.1182, 0.3814, -0.5422, -0.5422, 0.6757, -0.3385, -1.6508, 0.6757, -0.7326, -0.1182, -1.0914, 0.3814, 0.3814, -0.1182, 0.3814, 0.1202, 0.6757, 0.6757, 0.1202, -0.5422, 1.5128, 0.3814, -1.2692, 1.0281, 0.6757, 0.1202, -0.5422, 0.3814, -0.3385, 1.0281, -0.1182, 0.1202, 1.5128, 2.4608, 0.6757, -1.0914, -0.9144, -0.3385, 0.1202, 0.1202, 0.1202, 0.3814, -0.13, -0.5422, 0.1202, -0.1182, 0.3814, 1.0281, 0.6757, 1.0281, -1.2692, 0.1202, 0.3814, 1.5128, -0.1182, 0.3814, 1.0281, 0.3814, 0.1202, -0.3385, 0.6757, 0.6757, -0.5422, -1.0914, 1.0281, -0.3385, 0.3814, 0.3814, -1.0914, -0.7326, 0.6757, 1.5128, 0.6757, 1.0281, 0.6757, 1.0281, -1.0914, -0.7326, 0.1202, -0.3385, 0.3814, 0.6757, 1.5128, 0.1202, -0.7326, 1.5128, -1.0914, 0.6757, 2.4608, 0.3814, 0.6757, -0.8176, 1.0281, 0.1202, 2.4404, -0.5422, 0.1202, -0.1182, 0.3814, -0.5422, -0.5422, 0.6757, -0.3385, -1.6508, 0.6757, -0.7326, -0.1182, -1.0914, 0.3814, 0.3814, -0.1182, 0.3814, 0.1202, 0.6757, 0.6757, 0.1202, -0.5422, 1.5128, 0.3814, -1.2692, 1.0281, 0.6757, 0.1202, -0.5422, 0.3814, -0.3385, 1.0281, -0.1182, 0.1202, 1.5128, 2.4608, 0.6757, -1.0914, -0.9144, -0.3385, 0.1202, 0.1202, 0.1202, 0.3814, -0.13, -0.5422, 0.1202, -0.1182, 0.3814, 1.0281, 0.6757, 1.0281, -1.2692, 0.1202, 0.3814, 1.5128, -0.1182, NA, NA, NA));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject6_1acdf7cf12f48ea1395384dd0aeb1de0() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject7_24c904d3f839ac0e23de1968bd5811ed() {
        assertEval("argv <- list(structure(c(-0.00544194018731062, -0.00542949133552226, -1.20718999105839e-05, -0.00505497198006266, -0.827687885653788, -0.00315385274195005, -0.0023164952286401, -0.00117183915211372, -2.09167441982205, -0.00193959227691399, -0.00358084102808485, -3.39138861812986e-05, -0.00163051710052444, -0.00168735925488057, -0.0167253073891896, -0.237074502262169, -0.0118967636015583, -0.00307437031103621, -0.00114371252369823, -0.000860763872820255, -0.00028432076263802, -0.00329557354736053, -0.000123683950933913, -0.00026114238659798, -0.00471892942651347, -0.00317288091968884, -6.76955217513137e-05, -0.0119061189538054, -0.00233356124758579, -0.00672098496026968, -0.134965372025281, -0.00102115420103838, -0.00114816901125044), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject8_76324acc4cb42b1efa66444a711100d7() {
        assertEval("argv <- list(c(FALSE, FALSE));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisobject_testisobject9_b168c31a45220942fed34dad5e2967fd() {
        assertEval("argv <- list(structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'));is.object(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisordered_testisordered1_9cfaca6bf95ac022db401f94bbf12c5f() {
        assertEval("argv <- structure(list(x = structure(c(1L, 3L), .Label = c('b',     'c', 'a'), class = c('ordered', 'factor'))), .Names = 'x');do.call('is.ordered', argv)");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist1_db6c39c12453440de8b0ef05575339f5() {
        assertEval("argv <- list(list(NULL, c('time', 'status')));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist10_9be26a1f4860200be61193dc0d6a82a8() {
        assertEval("argv <- list(structure(list(height = c(58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72), weight = c(115, 117, 120, 123, 126, 129, 132, 135, 139, 142, 146, 150, 154, 159, 164)), .Names = c('height', 'weight'), row.names = c(NA, -15L), class = 'data.frame'));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist11_3ee468c08980ae40bd0ae526dd49e604() {
        assertEval("argv <- list(structure(list(a_string = c('foo', 'bar'), a_bool = FALSE, a_struct = structure(list(a = 1, b = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), c = 'foo'), .Names = c('a', 'b', 'c')), a_cell = structure(list(1, 'foo', structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'bar'), .Dim = c(2L, 2L)), a_complex_scalar = 0+1i, a_list = list(1, structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), 'foo'), a_complex_matrix = structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), a_range = c(1, 2, 3, 4, 5), a_scalar = 1,     a_complex_3_d_array = structure(c(1+1i, 3+1i, 2+1i, 4+1i, 5-1i, 7-1i, 6-1i, 8-1i), .Dim = c(2L, 2L, 2L)), a_3_d_array = structure(c(1, 3, 2, 4, 5, 7, 6, 8), .Dim = c(2L, 2L, 2L)), a_matrix = structure(c(1, 3, 2, 4), .Dim = c(2L, 2L)), a_bool_matrix = structure(c(TRUE, FALSE, FALSE, TRUE), .Dim = c(2L, 2L))), .Names = c('a_string', 'a_bool', 'a_struct', 'a_cell', 'a_complex_scalar', 'a_list', 'a_complex_matrix', 'a_range', 'a_scalar', 'a_complex_3_d_array', 'a_3_d_array', 'a_matrix', 'a_bool_matrix')));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist12_0422756eea495f21f2ba7f144d6978b5() {
        assertEval("argv <- list(structure(list(f = structure(c(1L, 1L, 1L), .Label = c('1', '2'), class = 'factor'), u = structure(12:14, unit = 'kg', class = 'avector')), .Names = c('f', 'u'), row.names = 2:4, class = 'data.frame'));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist13_3135b2e8b8f51724131db98ccb3d3bbc() {
        assertEval("argv <- list(structure(list(a = c(1L, 2L, 3L, NA), b = c(NA, 3.14159265358979, 3.14159265358979, 3.14159265358979), c = c(TRUE, NA, FALSE, TRUE), d = structure(c(1L, 2L, NA, 3L), .Label = c('aa', 'bb', 'dd'), class = 'factor'), e = structure(c('a1', NA, NA, 'a4'), class = 'AsIs'), f = structure(c(11323, NA, NA, 12717), class = 'Date')), .Names = c('a', 'b', 'c', 'd', 'e', 'f'), row.names = c(NA, -4L), class = 'data.frame'));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist14_3749046b87144ce14034a498d5db7080() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist16_ce1094adad75b87879524a3885b3d02f() {
        assertEval("argv <- list(NULL);do.call('is.pairlist', argv)");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist2_e6f8d3cc9bacd1ab68044ed1dc4189af() {
        assertEval("argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist3_a3fa23ae464d6a76e5ac937369cbc2de() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist4_43172b276329fd074713a79317711ede() {
        assertEval("argv <- list(structure(list(double.eps = 2.22044604925031e-16, double.neg.eps = 1.11022302462516e-16, double.xmin = 2.2250738585072e-308, double.xmax = 1.79769313486232e+308, double.base = 2L, double.digits = 53L, double.rounding = 5L, double.guard = 0L, double.ulp.digits = -52L, double.neg.ulp.digits = -53L, double.exponent = 11L, double.min.exp = -1022L, double.max.exp = 1024L, integer.max = 2147483647L, sizeof.long = 8L, sizeof.longlong = 8L, sizeof.longdouble = 16L, sizeof.pointer = 8L), .Names = c('double.eps', 'double.neg.eps', 'double.xmin', 'double.xmax', 'double.base', 'double.digits', 'double.rounding', 'double.guard', 'double.ulp.digits', 'double.neg.ulp.digits', 'double.exponent', 'double.min.exp', 'double.max.exp', 'integer.max', 'sizeof.long', 'sizeof.longlong', 'sizeof.longdouble', 'sizeof.pointer')));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist5_197f6b4c5c902946000b77ccf71fb38e() {
        assertEval("argv <- list(structure(list(widths = structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.880387330793302, 0.872694837975491, 0.862482627238653, 0.85694743348285, 0.844691564126209, 0.837992157219203, 0.826065549537932, 0.821813943091766, 0.801815430713592, 0.777814415451275, 0.862246453969427, 0.852609391860845, 0.852456189097792, 0.852184980555031, 0.847433895388854, 0.847321709738264, 0.843043642624801, 0.839180526055581, 0.838791375904974, 0.832684615585117, 0.829332878628487, 0.818738807141856, 0.817393740696655, 0.795187378905238, 0.771817782697421, 0.644452148607831, 0.532190150080465, 0.330404926016424), .Dim = c(28L, 3L), .Dimnames = list(c('10', '9', '2', '4', '8', '7', '6', '3', '1', '5', '22', '19', '11', '13', '18', '15', '16', '23', '24', '12', '14', '20', '21', '17', '25', '27', '28', '26'), c('cluster', 'neighbor', 'sil_width'))), clus.avg.widths = c(0.838270528963027, 0.778192810753059), avg.width = 0.799649138685191), .Names = c('widths', 'clus.avg.widths', 'avg.width')));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist6_d7294744f7d45292001059134e173744() {
        assertEval("argv <- list(structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08, it = 898L, maxit = 5000,     ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist7_d7660417cc13603425ea61f7e9cd5a86() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L), mday = c(30L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 30L, 30L, 30L, 31L, 30L, 31L, 31L, 31L, 30L), mon = c(5L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 5L, 5L, 5L, 5L, 11L, 11L, 11L, 5L, 5L, 5L, 11L, 5L, 11L, 11L, 11L, 5L), year = c(72L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 81L, 82L, 83L, 85L, 87L, 89L, 90L, 92L, 93L, 94L, 95L, 97L, 98L, 105L, 108L, 112L), wday = c(5L, 0L, 1L, 2L, 3L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 0L, 4L, 0L, 1L, 2L, 3L, 4L, 0L, 1L, 4L, 6L, 3L, 6L), yday = c(181L, 365L, 364L, 364L, 364L, 365L, 364L, 364L, 364L, 180L, 180L, 180L, 180L, 364L, 364L, 364L, 181L, 180L, 180L, 364L, 180L, 364L, 364L, 365L, 181L), isdst = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), tzone = c('', 'EST', 'EDT')));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist8_f7b5b1d899524061cb911e1149930e1f() {
        assertEval("argv <- list(structure(list(usr = c(0.568, 1.432, -1.08, 1.08), xaxp = c(0.6, 1.4, 4), yaxp = c(-1, 1, 4)), .Names = c('usr', 'xaxp', 'yaxp')));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinispairlist_testispairlist9_bcb10d005e00fb0725cdcc8d363fa291() {
        assertEval("argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, -10L), class = 'data.frame'));is.pairlist(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisraw_testisraw1_d148567121be7cd4b4a77737e0b4101a() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'));is.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisraw_testisraw2_28d1b3147bab31bca153b550f8a5f20e() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisraw_testisraw3_086e92ae75e8f861dc82c25c7de069fe() {
        assertEval("argv <- list(c(0.367649186507741, -0.792514168501158, 0.0770550181313438, 0.193209990320579, 0.556026088821232, -1.90995675991293, 1.21007077813812, -1.22764970620883));is.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisraw_testisraw4_0705c1ae2ce308fd0dcffe6942e7c7c1() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1), .Dim = 1:3));is.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisraw_testisraw5_b389b1885f663e83d60ef98213d54902() {
        assertEval("argv <- list(raw(0));is.raw(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive1_ceceb25a2b5f4d00268083c33a86bed2() {
        assertEval("argv <- list(c(1, 5.75, 10.5, 15.25, 20));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive10_a200939ef5f5f086629c17fdc1f11737() {
        assertEval("argv <- list(logical(0));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive11_e4e1483e8ab5784cc5e11e4780380246() {
        assertEval("argv <- list(structure(list(Df = c(1L, 7L), `Sum Sq` = c(158.407612694902, 204.202165082876), `Mean Sq` = c(158.407612694902, 29.1717378689823), `F value` = c(5.43017400630538, NA), `Pr(>F)` = c(0.052592726218915, NA)), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), row.names = c('depression', 'Residuals'), class = c('anova', 'data.frame'), heading = c('Analysis of Variance Table\\n', 'Response: weight')));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive13_856fb315c967efd9da7cdff987f933e4() {
        assertEval("argv <- list(expression(quote(expression(4, 1.12837916709551))));do.call('is.recursive', argv)");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive2_83b9d081114612fdffc759c577e32f01() {
        assertEval("argv <- list(structure(c(1+0i, 5+0i, 9+0i, 13+0i, 17+0i, 21+0i, 2+0i, 6+0i, 10+0i, 14+0i, 18+0i, 22+0i, 3+0i, 7+0i, 11+0i, 15+0i, 19+0i, 23+0i, 4+0i, 8+0i, 12+0i, 16+0i, 20+0i, 24+0i), .Dim = c(6L, 4L)));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive3_a28b54d2c0c3431da2adb0b94ddebf21() {
        assertEval("argv <- list(structure(list(var = structure(c(2L, 5L, 1L, 1L, 4L, 5L, 5L, 1L, 3L, 1L, 1L, 2L, 1L, 6L, 1L, 1L, 1L), .Label = c('<leaf>', 'hs.grad', 'illiteracy', 'murder', 'population', 'region'), class = 'factor'), n = c(50L, 10L, 7L, 3L, 40L, 32L, 13L, 3L, 10L, 6L, 4L, 19L, 4L, 15L, 11L, 4L, 8L), wt = c(50, 10, 7, 3, 40, 32, 13, 3, 10, 6, 4, 19, 4, 15, 11, 4, 8), dev = c(18501092, 668812.4, 269049.714285714, 40824, 9908099.1, 5718045.5, 2592172, 97824.6666666667, 1337366.4, 249796.833333333, 155810.75, 2105534.63157895, 276864.75, 1264031.6, 209138.181818182, 224618.75, 2526229.5), yval = c(4435.8, 3639.6, 3515.57142857143, 3929, 4634.85, 4532.875, 4317, 3772.33333333333, 4480.4, 4231.16666666667, 4854.25, 4680.57894736842, 4346.75, 4769.6, 4627.72727272727, 5159.75, 5042.75), complexity = c(0.42830879928601, 0.0194009459395308, 0.01, 0.01, 0.089931129470628, 0.0588430078006851, 0.0588430078006851, 0.01, 0.050362368700543, 0.01, 0.01, 0.0376981247853036, 0.01, 0.0376981247853036, 0.00682341562063013, 0.01, 0.01), ncompete = c(4L, 3L, 0L, 0L, 4L, 4L, 4L, 0L, 4L, 0L, 0L, 4L, 0L, 4L, 0L, 0L, 0L), nsurrogate = c(3L, 0L, 0L, 0L, 2L, 4L, 0L, 0L, 4L, 0L, 0L, 2L, 0L, 3L, 0L, 0L, 0L)), .Names = c('var', 'n', 'wt', 'dev', 'yval', 'complexity', 'ncompete', 'nsurrogate'), row.names = c(1L, 2L, 4L, 5L, 3L, 6L, 12L, 24L, 25L, 50L, 51L, 13L, 26L, 27L, 54L, 55L, 7L), class = 'data.frame'));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive4_4c8716f64b0f85a54b37b4467186a764() {
        assertEval("argv <- list(structure(c(0, 0.693147180559945, 1.09861228866811, 1.38629436111989, 1.6094379124341, 1.79175946922805, 1.94591014905531, 2.07944154167984, 2.19722457733622, 2.30258509299405, 2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive5_45a0f6fc8fcf695b5db31fba069d467f() {
        assertEval("argv <- list(c(4.2946094590101+0i, -3.25699475013756-2.24807847868298i, -7.95013358893225-2.01799537233252i, -3.67333331331688+0.2922506370947i, 10.1942090590333+0.2633318847587i, -3.52243716497356+3.01559327870726i, 0.840489557961749+0.760755891710788i, 0.34614657901946+3.92303947429563i, 1.25203951718932-0.04113309513059i, 1.25203951718932+0.04113309513059i, 0.34614657901946-3.92303947429563i, 0.840489557961749-0.760755891710788i, -3.52243716497356-3.01559327870726i, 10.1942090590333-0.2633318847587i, -3.67333331331688-0.2922506370947i, -7.95013358893225+2.01799537233252i, -3.25699475013756+2.24807847868298i));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive6_78561e332bf37da54600cc99f68614cf() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('age', 'eet', 'g2', 'grade', 'gleason', 'ploidy')));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive7_9070190af699638cfd2bad437fcfb511() {
        assertEval("argv <- list(structure(list(var = structure(c(2L, 1L, 1L), .Label = c('<leaf>', 'Start'), class = 'factor'), n = c(81L, 62L, 19L), wt = c(81, 62, 19), dev = c(24.3, 8.57647058823529, 14.175), yval = c(1, 1, 2), complexity = c(0.0637254901960785, 0, 1e-15), ncompete = c(2L, 0L, 0L), nsurrogate = c(0L, 0L, 0L), yval2 = structure(c(1, 1, 2, 64, 56, 8, 17, 6, 11, 0.7, 0.852610030706244, 0.310704960835509, 0.3, 0.147389969293756, 0.689295039164491, 0.999999999999999, 0.718382352941176, 0.281617647058824), .Dim = c(3L, 6L), .Dimnames = list(NULL, c('', '', '', '', '', 'nodeprob')))), .Names = c('var', 'n', 'wt', 'dev', 'yval', 'complexity', 'ncompete', 'nsurrogate', 'yval2'), row.names = c(NA, 3L), class = 'data.frame'));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive8_297a38e888dbb102becc25b3e0250e04() {
        assertEval("argv <- list(1e+09);is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisrecursive_testisrecursive9_6fae02b30f2dbc270e746b4dbe76a694() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.recursive(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinissymbol_testissymbol1_01f0099cae053857119018a9553dd51c() {
        assertEval("argv <- list(0.05);is.symbol(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinissymbol_testissymbol2_bcdefb2320c991d9907697680005eb4f() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1), .Dim = 1:3));is.symbol(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinissymbol_testissymbol3_57a98844a92e7a21d4dcbb89bebd85ad() {
        assertEval("argv <- list(numeric(0));is.symbol(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinissymbol_testissymbol4_ff91be8ead829c2a21f97f7c240ebf5c() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));is.symbol(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted1_c3485d6926cdf5fc4d281e28e1379264() {
        assertEval("argv <- list(c(1L, 2L, 4L), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted11_085f8fccd865135cc64e72459a458c02() {
        assertEval("argv <- structure(list(x = c('A', 'B', 'C', 'D', 'E', 'F', 'G',     'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',     'T', 'U', 'V', 'W', 'X', 'Y', 'Z')), .Names = 'x');do.call('is.unsorted', argv)");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted12_1dd7411c35ce51ad077f23c5897d7149() {
        assertEval("argv <- structure(list(x = c(NA, 1, 2, 3, 2), na.rm = TRUE),     .Names = c('x', 'na.rm'));do.call('is.unsorted', argv)");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted13_4e30b7f3cdeef4e23d628af738c4f026() {
        assertEval("argv <- structure(list(x = c(1L, 2L, 3L, 5L, 5L, 6L, 6L, 7L,     7L, 7L, 7L, 7L, 8L, 8L, 9L, 9L, 10L, 12L, 12L, 12L, 12L,     13L, 15L, 20L, 28L)), .Names = 'x');do.call('is.unsorted', argv)");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted14_7b561f72cf279b021f1a3a70b2476bbc() {
        assertEval("argv <- structure(list(x = structure(list(x = 3:4, y = 1:2),     .Names = c('x', 'y'), row.names = c(NA, -2L), class = 'data.frame')),     .Names = 'x');do.call('is.unsorted', argv)");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted15_0ab2259f36aff1da8e2c18f2ebb88d5f() {
        assertEval("argv <- structure(list(x = structure(list(x = c(2L, 1L)), .Names = 'x',     row.names = c(NA, -2L), class = 'data.frame')), .Names = 'x');do.call('is.unsorted', argv)");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted2_79ed5403651526c7d5283a519f3b7a30() {
        assertEval("argv <- list(c(10.7041467781967, 11.5754756379084, 12.524991240374, 13.5975143137056, 14.4688431734172, 15.4183587758829, 16.4908818492144, 17.7566218541999, 19.1425780866377, 20.5285343190754, 22.0685075746448, 23.9825281292691, 26.4455166737415, 29.7592803351446, 34.4380365011698, 41.4254228764895, 44.7391865378926, 49.4179427039178, 56.4053290792375), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted3_cfb0d49ba707d9da2e3c4f469dfa200f() {
        assertEval("argv <- list(c(-19, -12.21, -7.07, -6.14, -4.56, -4.09, -3.8, -2.22, -1.97, -1.95, -1.83, -1.82, -1.77, -1.56, -1.48, -1.42, -1.19, -1.12, -1.09, -1.04, -0.96, -0.89, -0.87, -0.87, -0.78, -0.77, -0.77, -0.74, -0.71, -0.63, -0.61, -0.59, -0.54, -0.51, -0.5, -0.5, -0.44, -0.4, -0.4, -0.37, -0.33, -0.28, -0.21, -0.2, -0.16, -0.16, -0.12, -0.1, -0.05, -0.01, -0.01, 0.04, 0.11, 0.13, 0.14, 0.15, 0.15, 0.25, 0.25, 0.26, 0.34, 0.42, 0.44, 0.46, 0.48, 0.48, 0.49, 0.49, 0.51, 0.57, 0.58, 0.64, 0.66, 0.7, 0.74, 0.8, 0.83, 0.94, 0.94, 1.02, 1.09, 1.12, 1.15, 1.18, 1.19, 1.63, 1.86, 1.92, 2.11, 2.17, 2.21, 2.22, 2.25, 2.64, 2.75, 4.18, 4.6, 5.74, 22.42, 44.32), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted4_f750d9183d0a3c9b4d2449f9c925b563() {
        assertEval("argv <- list(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted5_8f45d461532eee2e3e72ea7a7abc20e7() {
        assertEval("argv <- list(c(8, 6, 9, 4, 3, 7, 1, 5, 2), TRUE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted6_94a63ef33eb40aae5b9ad33116c2fc19() {
        assertEval("argv <- list(c(1, 2, 3, 2), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted7_40e5a970eb27718fdd45159ea51d915e() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted8_11ae4c3220969aa40b1c466715158380() {
        assertEval("argv <- list(c(2L, 1L, 0L, 3L), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted9_a5df55a2234e73b32b8841cab83ecafb() {
        assertEval("argv <- list(c(1L, 3L, 2L, 4L), TRUE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector1_42c54d30e5634b6fd8d6f93a3ccfc735() {
        assertEval("argv <- list(list(structure(0, class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), 1262304000), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector10_2b88f7577de5a7671397e0a86f036aba() {
        assertEval("argv <- list(structure(list(`1` = c(0, 0, 0, 0, 0, 0, 2.96439387504748e-323, 0, 0, 0, 0, 0)), .Names = '1'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector11_697b68c3c4eaea023ea003847f542380() {
        assertEval("argv <- list(list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/methods/R/methods', '/home/lzhao/hg/r-instrumented/library/methods/R/methods'), frow = c(6030L, 6032L), lrow = c(6031L, 6063L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/hg/r-instrumented/library/methods/R/methods', frow = 6036L, lrow = 6055L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector12_ff1c9811d9d08f6118fd36a26895eb4a() {
        assertEval("argv <- list(structure(list(B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor')), .Names = c('B', 'V', 'N'), class = 'data.frame', row.names = 2:72), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector13_3c7ac081ff7fffe6badfb6cb2413d826() {
        assertEval("argv <- list(list('‘FUN’ is found by a call to ‘match.fun’ and typically   is specified as a function or a symbol (e.g. a backquoted name) or a   character string specifying a function to be searched for from the   environment of the call to ‘lapply’.'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector14_7ff0f762532c06903c827be7e30beee8() {
        assertEval("argv <- list(list(c(35, 232, 232, 355, 1041, 1510, 1525, 1548, 1560, 1560, 1563, 1641, 1648, 1652, 1654, 1654, 1690, 1690, 1710, 1710, 1710, 1710, 1779, 1779, 1779, 1779, 1787, 1804, 1812, 1836, 1854, 1864, 1899, 1919, 1920, 1958, 1963, 2007, 2011, 2024, 2024, 2024, 2028, 2061, 2061, 2061, 2062, 2062, 2075, 2085, 2103, 2156, 2227, 2264, 2339, 2339, 2361, 2361, 2387, 2387, 2388, 2426, 2431, 2460, 2493, 2493, 2542, 2559, 2559, 2570, 2676, 2738, 2782, 2984, 3067, 3144, 3154, 3199, 3228, 3297, 3328, 3328, 3330, 3383, 3384, 3384, 3402, 3402, 3441, 3458, 3459, 3459, 3476, 3476, 3695, 3695, 3776, 3776, 3776, 3830, 3856, 3909, 3909, 3968, 3968, 4001, 4119, 4124, 4207, 4207, 4310, 4390, 4479, 4479, 4688), c(0, 0, 0, 0, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector15_2da6838d8ffd988056b23c8f4bcb8b88() {
        assertEval("argv <- list(structure(c(1+2i, 5+0i, 3-4i, -6+0i), .Dim = c(2L, 2L)), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector16_e03614b44d7f8704c727cfbfffebc1db() {
        assertEval("argv <- list(structure(list(row.names = character(0), A = numeric(0), B = numeric(0), C = complex(0), D = integer(0), E = logical(0), F = character(0)), .Names = c('row.names', 'A', 'B', 'C', 'D', 'E', 'F')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector17_529481023d00e056845723c8af9629a9() {
        assertEval("argv <- list(structure(c(315.42, 316.32, 316.49, 317.56, 318.13, 318, 316.39, 314.66, 313.68, 313.18, 314.66, 315.43, 316.27, 316.81, 317.42, 318.87, 319.87, 319.43, 318.01, 315.75, 314, 313.68, 314.84, 316.03, 316.73, 317.54, 318.38, 319.31, 320.42, 319.61, 318.42, 316.64, 314.83, 315.15, 315.95, 316.85, 317.78, 318.4, 319.53, 320.41, 320.85, 320.45, 319.44, 317.25, 316.12, 315.27, 316.53, 317.53, 318.58, 318.92, 319.7, 321.22, 322.08, 321.31, 319.58, 317.61, 316.05, 315.83, 316.91, 318.2, 319.41, 320.07, 320.74, 321.4, 322.06, 321.73, 320.27, 318.54, 316.54, 316.71, 317.53, 318.55, 319.27, 320.28, 320.73, 321.97, 322, 321.71, 321.05, 318.71, 317.65, 317.14, 318.71, 319.25, 320.46, 321.43, 322.22, 323.54, 323.91, 323.59, 322.26, 320.21, 318.48, 317.94, 319.63, 320.87, 322.17, 322.34, 322.88, 324.25, 324.83, 323.93, 322.39, 320.76, 319.1, 319.23, 320.56, 321.8, 322.4, 322.99, 323.73, 324.86, 325.41, 325.19, 323.97, 321.92, 320.1, 319.96, 320.97, 322.48, 323.52, 323.89, 325.04, 326.01, 326.67, 325.96, 325.13, 322.9, 321.61, 321.01, 322.08, 323.37, 324.34, 325.3, 326.29, 327.54, 327.54, 327.21, 325.98, 324.42, 322.91, 322.9, 323.85, 324.96, 326.01, 326.51, 327.01, 327.62, 328.76, 328.4, 327.2, 325.28, 323.2, 323.4, 324.64, 325.85, 326.6, 327.47, 327.58, 329.56, 329.9, 328.92, 327.89, 326.17, 324.68, 325.04, 326.34, 327.39, 328.37, 329.4, 330.14, 331.33, 332.31, 331.9, 330.7, 329.15, 327.34, 327.02, 327.99, 328.48, 329.18, 330.55, 331.32, 332.48, 332.92, 332.08, 331.02, 329.24, 327.28, 327.21, 328.29, 329.41, 330.23, 331.24, 331.87, 333.14, 333.8, 333.42, 331.73, 329.9, 328.4, 328.17, 329.32, 330.59, 331.58, 332.39, 333.33, 334.41, 334.71, 334.17, 332.88, 330.77, 329.14, 328.77, 330.14, 331.52, 332.75, 333.25, 334.53, 335.9, 336.57, 336.1, 334.76, 332.59, 331.41, 330.98, 332.24, 333.68, 334.8, 335.22, 336.47, 337.59, 337.84, 337.72, 336.37, 334.51, 332.6, 332.37, 333.75, 334.79, 336.05, 336.59, 337.79, 338.71, 339.3, 339.12, 337.56, 335.92, 333.74, 333.7, 335.13, 336.56, 337.84, 338.19, 339.9, 340.6, 341.29, 341, 339.39, 337.43, 335.72, 335.84, 336.93, 338.04, 339.06, 340.3, 341.21, 342.33, 342.74, 342.07, 340.32, 338.27, 336.52, 336.68, 338.19, 339.44, 340.57, 341.44, 342.53, 343.39, 343.96, 343.18, 341.88, 339.65, 337.8, 337.69, 339.09, 340.32, 341.2, 342.35, 342.93, 344.77, 345.58, 345.14, 343.81, 342.22, 339.69, 339.82, 340.98, 342.82, 343.52, 344.33, 345.11, 346.88, 347.25, 346.61, 345.22, 343.11, 340.9, 341.17, 342.8, 344.04, 344.79, 345.82, 347.25, 348.17, 348.75, 348.07, 346.38, 344.52, 342.92, 342.63, 344.06, 345.38, 346.12, 346.79, 347.69, 349.38, 350.04, 349.38, 347.78, 345.75, 344.7, 344.01, 345.5, 346.75, 347.86, 348.32, 349.26, 350.84, 351.7, 351.11, 349.37, 347.97, 346.31, 346.22, 347.68, 348.82, 350.29, 351.58, 352.08, 353.45, 354.08, 353.66, 352.25, 350.3, 348.58, 348.74, 349.93, 351.21, 352.62, 352.93, 353.54, 355.27, 355.52, 354.97, 353.74, 351.51, 349.63, 349.82, 351.12, 352.35, 353.47, 354.51, 355.18, 355.98, 356.94, 355.99, 354.58, 352.68, 350.72, 350.92, 352.55, 353.91), .Tsp = c(1959, 1990.91666666667, 12), class = 'ts'), 'symbol'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector18_3f5da0689e1c16ad25d3b56342abccc6() {
        assertEval("argv <- list(structure(list(age = 60), .Names = 'age', row.names = c(NA, -1L), class = 'data.frame'), 'numeric'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector19_e9f2d957bdafadb86220e6707618fbad() {
        assertEval("argv <- list(c(1.00000001+1.00000001i, 1.00000002+1.00000002i, 1.00000003+1.00000003i, 1.00000004+1.00000004i, 1.00000005+1.00000005i, 1.00000006+1.00000006i, 1.00000007+1.00000007i, 1.00000008+1.00000008i, 1.00000009+1.00000009i, 1.0000001+1.0000001i), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector2_acc10347b6fc6cea6261f757ee57db8e() {
        assertEval("argv <- list(list(c(' 1', 'NA', ' 1'), c('1.1', ' NA', '2.0'), c('1.1+0i', '    NA', '3.0+0i'), c('NA', 'NA', 'NA'), c('FALSE', '   NA', ' TRUE'), c('abc', NA, 'def')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector20_d6cd3470e89b8c40830e59e561dc9207() {
        assertEval("argv <- list(list(), 'list'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector21_bb275d6274fd37a7d24c9c08d21738f7() {
        assertEval("argv <- list(structure(list(`1` = c(256.266652076228, 529.998452486383, 655.612271403493, 31.5607377310524, 10.1780771257452, 0.82654086298349, 0.192588149393303, 0.27340160887417, 0.420761091220242, 0.212073424883136, 6006.37649011526, 8.9782737548589e+42)), .Names = '1'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector22_b4f96e97f3e91a67ec34690975124d39() {
        assertEval("argv <- list(structure(list(Subject = structure(c(40L, 40L, 40L, 40L, 40L, 40L, 40L, 40L), .Label = c('42', '28', '30', '56', '46', '5', '55', '32', '43', '29', '3', '11', '45', '22', '40', '47', '31', '14', '7', '41', '33', '44', '23', '57', '34', '18', '36', '21', '15', '38', '10', '1', '58', '51', '4', '6', '19', '2', '27', '53', '37', '20', '12', '9', '17', '26', '8', '49', '39', '54', '25', '35', '52', '13', '16', '59', '48', '24', '50'), class = c('ordered', 'factor')), Wt = c(1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7, 1.7), Apgar = structure(c(8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L), .Label = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), class = c('ordered', 'factor')), ApgarInd = structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('< 5', '>= 5'), class = 'factor'), time = c(0, 4, 6, 23.8, 27, 28, 39.5, 47), dose = c(17, 17, NA, 4, 7.5, 4, 4, NA), conc = c(NA, NA, 19.1, NA, NA, NA, NA, 33.3)), .Names = c('Subject', 'Wt', 'Apgar', 'ApgarInd', 'time', 'dose', 'conc'), row.names = c('669', '670', '671', '672', '673', '674', '675', '676'), class = 'data.frame'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector23_a0115f063007587243256acc89acea7b() {
        assertEval("argv <- list(list(structure(c(0.445983387275159, 0.0291424961297979, 0.305722673636889, 0.0640910333172597, 6.1841587262516e-05, 0.000608774190997193, 0.00533346072966287, 1.87468589092225, 0.00776943250876635, 0.00695873604736988), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), 0), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector24_18c3ede115b0f7230cea3ec81473abd7() {
        assertEval("argv <- list(structure(list(`1` = structure(list(stats = c(-9.90250128905181, -7.70852699427806, -5.13496062122677, -3.95948091921295, 1.46970778502994), n = 29L, conf = c(-6.23492561965266, -4.03499562280088), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `2` = structure(list(stats = c(-11.1332994435188, -6.39592651878103, -4.21825647639093, -2.4710346135438, 0.142332232638518), n = 27L, conf = c(-5.41170283935282, -3.02481011342905), out = c(5.49660997093232, 3.55716552721441)), .Names = c('stats', 'n', 'conf', 'out')), `3` = structure(list(stats = c(-6.21825647639093, -4.89504044270307, -3.50339002906768, -2.12460329098075, 1.68674122392151), n = 27L, conf = c(-4.34580001700278, -2.66098004113257), out = 3.49961675599928), .Names = c('stats', 'n', 'conf', 'out')), `4` = structure(list(stats = c(-5.85766776736148, -2.17391966458661, -1.21825647639093, 0.620760276498144, 4.06758688195534), n = 27L, conf = c(-2.06803799696724, -0.368474955814626), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `5` = structure(list(stats = c(-7.47307099543129, -3.31679346391683, -0.571500134198763, 0.883997101871453, 5.68320653608317), n = 29L, conf = c(-1.8040063492643, 0.661006080866776), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `6` = structure(list(stats = c(-5.74371144541934, -1.32005454439779, -0.0691719185754582, 1.68918858100201, 5.88399710187145), n = 25L, conf = c(-1.02009274620179, 0.881748909050878), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `7` = structure(list(    stats = c(-0.959725366614089, 1.04051908078705, 2.68320653608317, 4.68320653608317, 6.86503937877323), n = 29L, conf = c(1.61444701144563, 3.7519660607207), out = c(10.4020441274641, 11.9338597320297)), .Names = c('stats', 'n', 'conf', 'out')), `8` = structure(list(stats = c(-4.31872184443094, -0.341901367712618, 2.09749871094819, 4.42849305489153, 9.86504029478776), n = 29L, conf = c(0.69787150218962, 3.49712591970676), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `9` = structure(list(    stats = c(-4.47307099543129, 1.46970778502994, 3.27573063223268, 6.09749871094819, 8.5266833961141), n = 29L, conf = c(1.91794309465097, 4.63351816981439), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `10` = structure(list(stats = c(-5.31679346391683, -1.04725655125673, 2.61440793064106, 7.68320653608317, 14.5985362650564), n = 26L, conf = c(-0.0908438616349159, 5.31965972291703), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out')), `11` = structure(list(stats = c(-4.26322883423527, -1.27884444060771, 1.37070166144218, 5.85051662661329, 10.1854674121229), n = 31L, conf = c(-0.65244259398095, 3.39384591686531), out = numeric(0)), .Names = c('stats', 'n', 'conf', 'out'))), .Dim = 11L, .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'))), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector25_e8017b586d2cc7a961614de273025e39() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector26_0d9067a68be1780690f6c7e92dd5f497() {
        assertEval("argv <- list(list(structure(list(srcfile = c(NA, '/home/lzhao/hg/r-instrumented/library/graphics/R/graphics'), frow = c(NA, 3990L), lrow = c(NA, 3991L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/hg/r-instrumented/library/graphics/R/graphics', frow = 3998L, lrow = 4009L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector27_945852aaaf4656d431c607a1a29a10df() {
        assertEval("argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), terms = quote(y ~ x * z), row.names = c(NA, 10L), class = 'data.frame'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector28_0f0699e35c04a67c2b75c6b19ef9b580() {
        assertEval("argv <- list(list(structure(c(-1L, -2L, -3L, -4L, -5L, -6L, -7L, -8L, -9L, -10L), .Dim = c(2L, 5L)), structure(list(V1 = 1:5, V2 = 6:10, V3 = 11:15, V4 = 16:20, V5 = 21:25), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(NA, -5L), class = 'data.frame')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector29_a5b7c53f099d0b31ebd86ed92404d78c() {
        assertEval("argv <- list(structure(list(group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor', contrasts = 'contr.treatment')), .Names = 'group', class = 'data.frame', row.names = 1:2), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector3_35ecca1873ab4b686ee24b1da714b2de() {
        assertEval("argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector30_535d7ed78376038d2f7f3539b89ab606() {
        assertEval("argv <- list(structure(c(12L, 120L, 116L), .Dim = 3L, .Dimnames = structure(list(c('0-5yrs', '6-11yrs', '12+ yrs')), .Names = ''), class = 'table'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector31_f471effc213210eebd8495532f46529f() {
        assertEval("argv <- list(structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor'), 'symbol'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector32_e60307e990fccebb814dd51968c13492() {
        assertEval("argv <- list(structure(list(Df = c(NA, 0L), Deviance = c(NA, 0), `Resid. Df` = c(10L, 10L), `Resid. Dev` = c(2.74035772634541, 2.74035772634541)), .Names = c('Df', 'Deviance', 'Resid. Df', 'Resid. Dev'), row.names = c('NULL', 'x'), class = c('anova', 'data.frame'), heading = 'Analysis of Deviance Table\\n\\nModel: gaussian, link: identity\\n\\nResponse: y\\n\\nTerms added sequentially (first to last)\\n\\n'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector34_94786a55371482e7c746db253ede7cd8() {
        assertEval("argv <- structure(list(x = 3), .Names = 'x');do.call('is.vector', argv)");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector4_d13bdc66e1db2576ce64e641b9320d3f() {
        assertEval("argv <- list(structure(list(character = character(0), numeric = numeric(0), numeric = numeric(0), complex = complex(0), integer = integer(0), logical = logical(0), character = character(0)), .Names = c('character', 'numeric', 'numeric', 'complex', 'integer', 'logical', 'character')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector5_12ca163cf37508e1273956276c05ec6c() {
        assertEval("argv <- list(structure(list(group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = 'group', class = 'data.frame', row.names = c(NA, 20L)), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector6_71ba534dc7089197ef2421a67361f418() {
        assertEval("argv <- list(structure(list(y = c(1.08728092481538, 0.0420572471552261, 0.787502161306819, 0.512717751544676, 3.35376639535311, 0.204341510750309, -0.334930602487435, 0.80049208412789, -0.416177803375218, -0.777970346246018, 0.934996808181635, -0.678786709127108, 1.52621589791412, 0.5895781228122, -0.744496121210548, -1.99065153885627, 1.51286447692396, -0.750182409847851), A = c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1), U = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor'), V = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('y', 'A', 'U', 'V'), terms = quote(y ~ A:U + A:V - 1), row.names = c(NA, 18L), class = 'data.frame'), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector7_6c2750df863488e5e40f5126d26588ae() {
        assertEval("argv <- list(list(integer(0)), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector8_78fb80b6caff0f1f9f2433e58a77af3e() {
        assertEval("argv <- list(list(structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'), structure(c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000), .Tsp = c(1, 101, 1), class = 'ts'), structure(c(-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96), .Tsp = c(1, 101, 1), class = 'ts')), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinisvector_testisvector9_7a2d368cebf0e8bcc64da81916c4dd08() {
        assertEval("argv <- list(structure(list(Plant = structure(c(5L, 5L, 5L, 5L, 5L, 5L, 5L), .Label = c('Qn1', 'Qn2', 'Qn3', 'Qc1', 'Qc3', 'Qc2', 'Mn3', 'Mn2', 'Mn1', 'Mc2', 'Mc3', 'Mc1'), class = c('ordered', 'factor')), Type = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c('Quebec', 'Mississippi'), class = 'factor'), Treatment = structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('nonchilled', 'chilled'), class = 'factor')), .Names = c('Plant', 'Type', 'Treatment'), class = 'data.frame', row.names = 36:42), 'any'); .Internal(is.vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinjulianDate_testjulianDate1_e2611ffbc0bb4eb7d2e9db89106c26d1() {
        assertEval("argv <- structure(list(x = structure(16352, class = 'Date'),     origin = -2440588), .Names = c('x', 'origin'));do.call('julian.Date', argv)");
    }

    @Test
    public void TestrGenBuiltinlabels_testlabels1_9429b8f435fb4d93c055e4d34115a4bb() {
        assertEval("argv <- structure(list(object = structure(c(-469.098459411633,     469.356672501203, -0.429918004252249, 0.00364370239091614,     -0.256875513692359, -0.0204799335117722, 2.00613934942808),     .Names = c('(Intercept)', 'gravity', 'ph', 'osmo', 'conduct',         'urea', 'log(calc)'))), .Names = 'object');do.call('labels', argv)");
    }

    @Test
    public void TestrGenBuiltinlazyLoadDBflush_testlazyLoadDBflush1_cef4a1af4e9fa39cdf8f736e988487cd() {
        assertEval("argv <- list('/home/roman/r-instrumented/library/tools/R/tools.rdb'); .Internal(lazyLoadDBflush(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinlazyLoadDBflush_testlazyLoadDBflush2_9a5760c0187e982262284ceb02d2e117() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/library/stats4/R/stats4.rdb'); .Internal(lazyLoadDBflush(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinlbeta_testlbeta1_09a92ce71a1f383c2304c1f8fc433817() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(lbeta(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinlchoose_testlchoose1_aea5cb7166dbc2c24ee4d66a3285b134() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(lchoose(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinlchoose_testlchoose2_eef92f0b2715df9ec5ebab185e89a3b8() {
        assertEval("argv <- list(50L, 0:48); .Internal(lchoose(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinlchoose_testlchoose3_1c1480efe394bbd1018556b13b24cb31() {
        assertEval("argv <- list(0.5, 1:9); .Internal(lchoose(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinlength_testlength1_90a6bd65881b7e6afd2cd642265ffd2d() {
        assertEval("argv <- list('~ . + Soft+M.user:Temp');length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength10_e01839516cabe2758ead9c61132e6fbc() {
        assertEval("argv <- list(list(structure(c(-1L, -2L, -3L, -4L, -5L, -6L, -7L, -8L, -9L, -10L), .Dim = c(2L, 5L)), structure(list(V1 = 1:5, V2 = 6:10, V3 = 11:15, V4 = 16:20, V5 = 21:25), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(NA, -5L), class = 'data.frame')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength11_059a5093010aa6e9bdfac01d6235afd2() {
        assertEval("argv <- list(structure(list(weight = c(4.17, 5.58), group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('weight', 'group'), row.names = 1:2, class = 'data.frame'));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength12_9301367856ba463ffbd2cf050e2c249d() {
        assertEval("argv <- list(quote(cbind(X, M) ~ M.user + Temp + M.user:Temp));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength13_a0ed1d13c72f9168ae0d83d562eeabe5() {
        assertEval("argv <- list(structure(c(-Inf, -Inf, 0, 0, 1, 2, Inf, Inf, Inf, -Inf, -Inf, 0, 0.5, 1, 2, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 1, 2, 2, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.8, 1.6, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.3, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.4, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.2, 1.9, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.499999999999999, 1.33333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.325, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength14_d903a460277a926797dc14b29e8e5e75() {
        assertEval("argv <- list(structure(list(character = character(0), numeric = numeric(0), numeric = numeric(0), complex = complex(0), integer = integer(0), logical = logical(0), character = character(0)), .Names = c('character', 'numeric', 'numeric', 'complex', 'integer', 'logical', 'character')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength15_c9a1aeb0017dad5b429f386a8cae8206() {
        assertEval("argv <- list(structure(list(loc = c(0.0804034870161223, 10.3548347412639), cov = structure(c(3.01119301965569, 6.14320559215603, 6.14320559215603, 14.7924762275451), .Dim = c(2L, 2L)), d2 = 2, wt = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0), sqdist = c(0.439364946869246, 0.0143172566761092, 0.783644692619938, 0.766252947443554, 0.346865912102713, 1.41583192825661, 0.168485512965902, 0.354299830956879, 0.0943280426627965, 1.05001058449122, 1.02875556201707, 0.229332323173361, 0.873263925064789, 2.00000009960498, 0.449304354954282, 0.155023307933165, 0.118273979375253, 0.361693898800799, 0.21462398586105, 0.155558909016629, 0.471723661454506, 0.719528696331092, 0.0738164380664225, 1.46001193111051, 0.140785322548143, 0.127761195166703, 0.048012401156175, 0.811750426884519, 0.425827709817574, 0.163016638545231, 0.557810866640707, 0.277350147637843, 0.0781399119055092, 1.29559183995835, 0.718376405567138, 1.37650242941478, 0.175087780508154, 0.233808973148729, 0.693473805463067, 0.189096604125073, 1.96893781800017, 0.4759756980592, 1.69665760380474, 0.277965749373647, 0.920525436884815, 0.57525234053591, 1.59389578665009, 0.175715364671313, 0.972045794851437, 1.75514684962809, 0.0597413185507202, 0.174340343040626, 0.143421553552865, 0.997322770596838, 1.94096736957465, 2.00000001159796, 0.367000821772989, 0.682474530588235, 1.20976163307984, 1.27031685239035, 1.79775635513363, 0.0857761902860323, 0.435578932929501, 0.214370604878221, 0.494714247412686, 1.78784623754399, 1.24216674083069, 1.87749485326709, 0.0533296334123023, 1.45588362584438, 2.00000000631459, 0.208857144738039, 0.119251291573058, 0.365303924649962, 0.690656674239668, 0.0396958405786268, 0.258262120876164, 1.57360254057537, 0.307548421049514, 0.628417063100241, 1.00647098749202, 0.297624360530352, 0.400289147351669, 1.98298426250944, 0.129127182829694, 0.0794695319493149, 0.991481735944321, 0.444068154119836, 0.206790162395106, 0.574310829851377, 0.181887577583334, 0.433872021297517, 0.802994892604009, 0.293053770941001, 1.7002969001965, 0.77984639982848, 1.36127407487932, 0.761935213110323, 0.597915313430067, 0.237134831067472), prob = NULL, tol = 1e-07, eps = 9.96049758228423e-08, it = 898L, maxit = 5000,     ierr = 0L, conv = TRUE), .Names = c('loc', 'cov', 'd2', 'wt', 'sqdist', 'prob', 'tol', 'eps', 'it', 'maxit', 'ierr', 'conv'), class = 'ellipsoid'));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength16_0338d96fa69ba60ea0aa87bd7a954c2d() {
        assertEval("argv <- list(c(-167.089651989438, -122.420302709026));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength17_1c296838f12e655ab5806567b7ec064e() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils'), frow = c(1809L, 1810L, 1811L, 1812L, 1802L, 1827L, 1840L), lrow = c(1809L, 1814L, 1811L, 1813L, 1816L, 1834L, 1842L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 7L)));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength18_1a24a4cb2f8b5becb3b0ca1a821b110a() {
        assertEval("argv <- list(structure(list(object = structure(3.14159265358979, comment = 'Start with pi'), slots = 'comment', dataPart = TRUE), .Names = c('object', 'slots', 'dataPart')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength19_8c23b2b3840c4553d32e153b5e3b3efb() {
        assertEval("argv <- list(structure(list(name = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor'), nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor')), .Names = c('name', 'title', 'other.author', 'nationality', 'deceased'), row.names = c(6L, 4L, 5L, 3L, 1L, 2L), class = 'data.frame'));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength2_15a243a1b29ca1826ddc56b51fc03a76() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength20_989cfcad7be3991b4b4b95143e174c88() {
        assertEval("argv <- list(c('  These operators return vectors containing the result of the element', '  by element operations.  The elements of shorter vectors are recycled', '  as necessary (with a ‘warning’ when they are recycled only', '  _fractionally_).  The operators are ‘+’ for addition,', '  ‘-’ for subtraction, ‘*’ for multiplication, ‘/’ for', '  division and ‘^’ for exponentiation.', '', '  ‘%%’ indicates ‘x mod y’ and ‘%/%’ indicates', '  integer division.  It is guaranteed that '));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength21_9c206267710771cf09bb0b35799222e4() {
        assertEval("argv <- list(structure(c(3.14475800140539, 3.11465478132706, 3.10630529271564, 3.0844667956717, 3.10602734436792, 3.1179780987041, 3.10510218928681, 3.13870964347838, 3.1236627058491, 3.16426296817658, 3.18524449375727, 3.19607967740367, 3.12404668400251, 3.1073799072767, 3.10252776401906, 3.0888846453793, 3.10244112014795, 3.1099501880355, 3.10186319790916, 3.12297248377609, 3.11352136079872, 3.13902281247452, 3.1522015282299, 3.15900722027104), .Tsp = c(1983, 1984.91666666667, 12), class = 'ts'));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength22_4a3e426fad30063219b818faba3b2b1c() {
        assertEval("argv <- list(c(3.14159265358979e-10, 0.0314159265358979, 3.14159265358979, 31.4159265358979, 314.159265358979, 314159265.358979, 3.14159265358979e+20));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength23_6064af32457f6a822cf0fb8a236db4d3() {
        assertEval("argv <- list(structure(list(names = character(0), row.names = integer(0), class = 'data.frame'), .Names = c('names', 'row.names', 'class')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength24_115f386f038f3aa9eb3bfc138798354a() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength25_ff31f57b0a19d5e8f5a0d3b86d4febb9() {
        assertEval("argv <- list(c(0+0i, -0.740437474899139-0.482946826369552i, -0.333166449062945-0.753763230370951i, 0+0i, 0.522033838837248+0.102958580568997i, 0+0i, 0+0i, 0+0i, -0.563222209454641-0.518013590538404i, -0.068796124369349+0.97981641556181i, 0.244428915757284-0.330850507052219i, 0+0i, 0+0i, 0+0i, -0.451685375030484+0.126357395265016i, 0.375304016677864+0.436900190874168i, -0.674059300339186+0.084416799015191i, 0+0i, 0.509114684244823-0.086484623694157i, -0.535642839219739+0.289927561259502i, 0.629727249341749+0.707648659913726i, 0+0i, -0.333800277698424-0.317646103980588i, -0.422186107911717+0.317002735170286i, -0.616692335171505+0.068946145379939i, -0.136100485502624-0.487679764177213i, -0.68086000613138+0.047032323152903i, 0.296209908189768+0.585533462557103i, 0.43280012844045+0.136998748692477i, -0.680205941942733-0.256569497284745i, 0+0i, 0+0i, 0+0i, -0.983769553611346-0.088288289740869i, -0.046488672133508-0.622109071207677i, 0+0i, 0.379095891586975-0.727769566649926i, 0+0i, 0+0i, -0.150428076228347+0.615598727377677i, 0.762964492726935+0.377685645913312i, -0.7825325866026+0.365371705974346i, -0.792443423040311-0.029652870362208i, 0.265771060547393-0.106618612674382i, -0.076741350022367-0.422144111460857i, 0.120061986786934-0.623033085890884i, 0+0i, -0.145741981978782+0.529165019069452i, 0+0i, 0+0i, 0+0i, 0+0i, 0+0i, 0.328611964770906+0.215416587846774i, -0.583053183540166-0.668235480667835i, -0.782507286391418+0.318827979750013i, 0+0i, 0+0i, 0+0i, 0+0i, -0.271871452223431+0.426340387811162i, 0.590808184713385-0.344468770084509i, 0+0i, 0+0i, 0+0i, 0+0i, 0.866602113481861-0.172567291859327i, 0.031389337713892-0.607820631329035i, 0+0i, 0+0i, 0.151969488085021-0.827990593142535i, -0.266853748421854-0.866413193943766i, 0.071623062591495-0.867246686843546i, -0.788765741891382+0.508717463380604i, -0.228835546857432-0.349587041980114i, 0.500139791176978-0.016703152458872i, 0.15619107374708-0.485402548890295i, -0.369039310626083+0.398423724273751i, 0+0i, -0.399467692630093-0.421179989556223i, 0.411274074028001+0.133781691724871i, 0.573364366690245+0.328833257005489i, 0+0i, 0.387209171815106+0.750271083217101i, 0+0i, 0+0i, -0.168543113030619+0.43048451175239i, 0+0i, 0.388005062566602-0.290649953587954i, -0.013004326537709-0.490434895455784i, 0.069845221019376-0.762134635168809i, 0+0i, 0.27384734040072+0.383667165938905i, 0+0i, -0.894951082455532+0.317442909372288i, 0.5073401683933-0.213001485168032i, 0+0i, -0.343169835663372+0.597359384628839i, -0.283179001991236-0.385834501657171i, -0.517794900198098-0.36732932802092i));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength26_48abde75e1aa7d159270fa39ef5d6099() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength27_bda867ccdd04e5a2b1840d527dcde9c4() {
        assertEval("argv <- list(c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength28_c97d155abc2b8f1850dad9e0d5d18233() {
        assertEval("argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength29_ab5bb4e6b7a00d8483025f10d34c8a00() {
        assertEval("argv <- list(list(structure(list(srcfile = c('/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R'), frow = 122:123, lrow = 122:123), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/rlm.R', frow = 124L, lrow = 124L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength3_098f5d0995cf8297ff6a5d72d907402e() {
        assertEval("argv <- list(structure('     \\'Le français, c'est façile: Règles, Liberté, Egalité, Fraternité...\\')\\n', Rd_tag = 'RCODE'));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength30_dd28151021a91fbc9f4aaffcbe802583() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 1, 1), `Sum of Sq` = c(NA, 820.907401534698, 26.7893827563485, 9.93175377572661), RSS = c(47.9727294003871, 868.880130935086, 74.7621121567356, 57.9044831761137), AIC = c(24.9738836085411, 60.6293256496563, 28.7417044039189, 25.4199908988691)), .Names = c('Df', 'Sum of Sq', 'RSS', 'AIC'), row.names = c('<none>', '- x1', '- x2', '- x4'), class = c('anova', 'data.frame')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength31_a7415ccc9043f2c6f9eda5d18dac24c8() {
        assertEval("argv <- list(list(structure(c(30.3398431424662, 53.0273088677942, 11.6721423374092, 3.1219098789343, 9.58888402166762, 41.0027598267751, 8.26816396385794, 46.7997906867199, 7.96616780447507, 27.2952699050281, 7.05399789883986, 5.03904688224502, 2.61409832611023, 14.9537930856989, 7.22312484916424, 8.25480759597494, 37.7467076615774, 65.972863357068, 14.5216619125438, 3.88406159493231, 10.6419076139158, 45.5055646732323, 9.17614988785547, 51.9392087455927, 7.84624470450625, 26.8843655076016, 6.94780665155944, 4.96318881123281, 2.45558360989303, 14.0470191347445, 6.78512618085463, 7.75424934595279), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')), 2.22044604925031e-16));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength32_cf4d43f1ad6d5ed45759331530072503() {
        assertEval("argv <- list(structure(c(78796800, 94694400, 126230400, 157766400, 189302400, 220924800, 252460800, 283996800, 315532800, 362793600, 394329600, 425865600, 489024000, 567993600, 631152000, 662688000, 709948800, 741484800, 773020800, 820454400, 867715200, 915148800, 1136073600, 1230768000, 1341100800), class = c('POSIXct', 'POSIXt')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength33_ba0e63404765da175661379aa4ea511b() {
        assertEval("argv <- list(c(1.03711990677284e+29, 4.58346574364236e+27, 2.02562481791768e+26, 8.95208153058638e+24, 3.95629847255715e+23, 1.7484534240517e+22, 7.7271454561408e+20, 34149480972585590784, 1509208102926327040, 66698206089453432, 2947672264272576, 130269967045726, 5757178273805.44, 254434569303.796, 11244672651.0134, 496975017.177538, 21967997.2327598, 971670.715389718, 43086.3667907314, 1929.95757399166, 90.0797181275922, 5.03402841668789, 0.625146618950265, -0.304867530220417, -0.123332207492738, 0.0884498083502638, 0.0243523396488189, -0.0527015109337102, -3.68088311960635e-05, -0.0351989174304481, 0.024656114194774));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength34_0ca346ad2e372d804830373668004383() {
        assertEval("argv <- list(structure(c('1.0', NA, NA, 'methods, graphics, pkgA', NA, NA, NA, 'GPL (>= 2)', NA, NA, NA, NA, NA, NA, 'R 3.0.1; ; 2014-03-17 18:49:56 UTC; unix'), .Names = c('Version', NA, NA, 'Imports', NA, NA, NA, 'License', NA, NA, NA, NA, NA, NA, 'Built')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength35_d7413460d341d304da1390df666b760b() {
        assertEval("argv <- list(structure(c(-1, 0, 1, 2, 3), .Tsp = c(-1, 3, 1)));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength37_e2bf4ac1f3ea08efd2d9ec31702ac637() {
        assertEval("argv <- list(function(file = ifelse(onefile, 'Rplots.pdf', 'Rplot%03d.pdf'),     width, height, onefile, family, title, fonts, version, paper,     encoding, bg, fg, pointsize, pagecentre, colormodel, useDingbats,     useKerning, fillOddEven, compress) {    initPSandPDFfonts()    new <- list()    if (!missing(width)) new$width <- width    if (!missing(height)) new$height <- height    if (!missing(onefile)) new$onefile <- onefile    if (!missing(title)) new$title <- title    if (!missing(fonts)) new$fonts <- fonts    if (!missing(version)) new$version <- version    if (!missing(paper)) new$paper <- paper    if (!missing(encoding)) new$encoding <- encoding    if (!missing(bg)) new$bg <- bg    if (!missing(fg)) new$fg <- fg    if (!missing(pointsize)) new$pointsize <- pointsize    if (!missing(pagecentre)) new$pagecentre <- pagecentre    if (!missing(colormodel)) new$colormodel <- colormodel    if (!missing(useDingbats)) new$useDingbats <- useDingbats    if (!missing(useKerning)) new$useKerning <- useKerning    if (!missing(fillOddEven)) new$fillOddEven <- fillOddEven    if (!missing(compress)) new$compress <- compress    old <- check.options(new, name.opt = '.PDF.Options', envir = .PSenv)    if (!missing(family) && (inherits(family, 'Type1Font') ||         inherits(family, 'CIDFont'))) {        enc <- family$encoding        if (inherits(family, 'Type1Font') && !is.null(enc) &&             enc != 'default' && (is.null(old$encoding) || old$encoding ==             'default')) old$encoding <- enc        family <- family$metrics    }    if (is.null(old$encoding) || old$encoding == 'default') old$encoding <- guessEncoding()    if (!missing(family)) {        if (length(family) == 4L) {            family <- c(family, 'Symbol.afm')        } else if (length(family) == 5L) {        } else if (length(family) == 1L) {            pf <- pdfFonts(family)[[1L]]            if (is.null(pf)) stop(gettextf('unknown family '%s'',                 family), domain = NA)            matchFont(pf, old$encoding)        } else stop('invalid 'family' argument')        old$family <- family    }    version <- old$version    versions <- c('1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7',         '2.0')    if (version %in% versions) version <- as.integer(strsplit(version,         '[.]')[[1L]]) else stop('invalid PDF version')    onefile <- old$onefile    if (!checkIntFormat(file)) stop(gettextf('invalid 'file' argument '%s'',         file), domain = NA)    .External(C_PDF, file, old$paper, old$family, old$encoding,         old$bg, old$fg, old$width, old$height, old$pointsize,         onefile, old$pagecentre, old$title, old$fonts, version[1L],         version[2L], old$colormodel, old$useDingbats, old$useKerning,         old$fillOddEven, old$compress)    invisible()});do.call('length', argv)");
    }

    @Test
    public void TestrGenBuiltinlength_testlength4_8db75decea0f9cad725875ec9edecc41() {
        assertEval("argv <- list(structure(list(a = 6:10), .Names = 'a', row.names = 6:10, class = 'data.frame'));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength5_bea1d3b9768614cdcd4d033fb443548f() {
        assertEval("argv <- list(structure(list(`log(x)` = c(0, 0.693147180559945, 1.09861228866811, 1.38629436111989, 1.6094379124341, 1.79175946922805, 1.94591014905531, 2.07944154167984, 2.19722457733622, 2.30258509299405, 2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809), `log(z)` = c(2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809, 4.61512051684126, 4.62497281328427, 4.63472898822964, 4.64439089914137, 4.65396035015752, 4.66343909411207, 4.67282883446191, 4.68213122712422, 4.69134788222914, 4.70048036579242)), .Names = c('log(x)', 'log(z)'), class = 'data.frame', row.names = c(NA, 100L), terms = quote(~log(x) + log(z))));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength6_5059a25bf1b1d3661d481a4ea56e7924() {
        assertEval("argv <- list(list('Residuals vs Fitted', 'Normal Q-Q', 'Scale-Location', 'Cook's distance', 'Residuals vs Leverage', expression('Cook's dist vs Leverage  ' * h[ii]/(1 - h[ii]))));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength7_55a83c0818d69a7b7df3c3826e85718b() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L), mday = c(30L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 30L, 30L, 30L, 31L, 30L, 31L, 31L, 31L, 30L), mon = c(5L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 5L, 5L, 5L, 5L, 11L, 11L, 11L, 5L, 5L, 5L, 11L, 5L, 11L, 11L, 11L, 5L), year = c(72L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 81L, 82L, 83L, 85L, 87L, 89L, 90L, 92L, 93L, 94L, 95L, 97L, 98L, 105L, 108L, 112L), wday = c(5L, 0L, 1L, 2L, 3L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 0L, 4L, 0L, 1L, 2L, 3L, 4L, 0L, 1L, 4L, 6L, 3L, 6L), yday = c(181L, 365L, 364L, 364L, 364L, 365L, 364L, 364L, 364L, 180L, 180L, 180L, 180L, 364L, 364L, 364L, 181L, 180L, 180L, 364L, 180L, 364L, 364L, 365L, 181L), isdst = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength8_736bdb3eaa2236c08ce3e04c3b76b5e2() {
        assertEval("argv <- list(complex(0));length(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlength_testlength9_e4ba5d4bf05853e0cd04b88b4b83c679() {
        assertEval("argv <- list(clength(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign1_1481d9482e1473ce157eb39230fd0d48() {
        assertEval("argv <- list(c('A', 'B'), value = 5);`length<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign2_4b74e5d4e2ac239ec628941b8135d6b2() {
        assertEval("argv <- list(list(list(2, 2, 6), list(2, 2, 0)), value = 0);`length<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign3_fb7e9cceeb4e47802113806aa49cb1a4() {
        assertEval("argv <- list(list(list(2, 2, 6), list(1, 3, 9), list(1, 3, -1)), value = 1);`length<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign4_8dce4e78e2538e574d9a637fd328c8de() {
        assertEval("argv <- list(c(28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), value = 0L);`length<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign5_6fada3a1873cba1852cb1cddccd5e4a8() {
        assertEval("argv <- list(c(0L, 1L, 2L, 3L, 4L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 5L, 6L), value = 0L);`length<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign6_ca074e784907db67ace5265cf4864a14() {
        assertEval("argv <- list(list(), value = 0L);`length<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlengthassign__testlengthassign_1_8a86c8479100c5c1c7e318b61b46cbcc() {
        assertEval("argv <- structure(list(1:3, value = TRUE), .Names = c('', 'value'));do.call('length<-', argv)");
    }

    @Test
    public void TestrGenBuiltinlevels_testlevels1_2abba1776a22a80ceb3772b59c2f0daf() {
        assertEval("argv <- structure(list(x = structure(c(1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L),     .Label = c('1', '2'), class = 'factor')), .Names = 'x');do.call('levels', argv)");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign1_32eaaa5f66a2124bd48f233b7d004572() {
        assertEval("argv <- list(structure(1:2, .Label = c('a', 'b'), class = 'factor'), value = structure(list(C = 'C', A = 'a', B = 'b'), .Names = c('C', 'A', 'B')));`levels<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign2_87535052709adcabc481eb8c7a94c28b() {
        assertEval("argv <- list(structure(c(24L, 13L, 15L, 68L, 39L, 74L, 22L, 1L, 8L, 55L, 24L, 20L, 51L, 13L, 3L, 4L, 5L, 6L, 15L, 2L, 8L, 60L, 67L, 23L, 58L, 24L, 22L, 21L, 37L, 74L, 59L, 39L, 14L, 14L, 19L, 23L, 70L, 21L, 22L, 31L, 29L, 30L, 45L, 58L, 17L, 7L, 19L, 26L, 39L, 74L, 57L, 59L, 12L, 72L, 70L, 37L, 64L, 16L, 18L, 21L, 22L, 8L, 62L, 61L, 63L, 71L, 105L, 64L, 10L, 41L, 8L, 27L, 11L, 34L, 32L, 33L, 68L, 107L, NA, 66L, NA, 65L, 48L, 52L, 43L, 47L, 46L, 44L, 41L, 54L, 28L, 50L, 40L, NA, 69L, NA, 75L, 109L, NA, 86L, 112L, 110L, 104L, 24L, 111L, 87L, NA, NA, 92L, 73L, 85L, 90L, 89L, NA, 83L, NA, 102L, NA, 108L, 88L, 91L, 93L, NA, 94L, 84L, NA, 106L, NA, 95L, 82L, 56L, 87L, 109L, 75L, 104L, 110L, 112L, 111L, 24L, 73L, 85L, 86L, 90L, 89L, 102L, 88L, 92L, 9L, 49L, 42L, 38L, 35L, 36L, 25L, NA, NA, 9L, 49L, 42L, NA, 36L, 38L, 25L, 53L, 79L, 78L, 103L, 77L, 80L, 114L, 97L, 113L, 76L, 96L, 81L, 116L, 99L, 117L, 115L, 98L, 101L, 100L), .Label = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'), class = 'factor'), value = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'));`levels<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign4_2f1ede8e983680131664ece8e9e96e2e() {
        assertEval("argv <- list(structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor'), value = structure(list(A = c(1, 3), B = 2), .Names = c('A', 'B')));`levels<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign5_934190e4c01e8683a4f138e15ee5129f() {
        assertEval("argv <- list(structure(FALSE, .Label = FALSE), FALSE);`levels<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign6_76f3c73d8ae11833c5a065ddae27d835() {
        assertEval("argv <- list(NULL, NULL);`levels<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign7_232e9f1995c24d418cd95448f6b30997() {
        assertEval("argv <- list(structure(list(), .Label = list()), list());`levels<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlevelsassign__testlevelsassign_1_f2b397fbeef96c0856c4b1bee7b85573() {
        assertEval("argv <- structure(list(structure(c(4L, 4L, 3L, 6L, 5L, 4L, 4L,     5L, 4L, 4L, 2L, 1L, 3L, 2L, 2L, 3L, 4L, 3L, 2L, 2L, 2L, 4L,     3L, 2L, 6L, 3L, 6L, 2L, 3L, 5L, 2L, 6L, 4L, 2L, 1L, 6L, 6L,     4L, 5L, 3L, 5L, 5L, 6L, 2L, 4L, 3L, 4L, 5L, 4L, 4L, 2L, 6L,     1L, 3L, 5L, 4L, 5L, 2L, 5L, 1L, 6L, 5L, 3L, 6L, 3L, 6L, 3L,     6L, 4L, 6L, 1L, 3L, 2L, 5L, 3L, 3L, 2L, 4L, 3L, 4L, 2L, 1L,     4L, 5L, 3L, 6L, 3L, 6L, 6L, 6L, 4L, 4L, 6L, 4L, 2L, 2L, 3L,     3L, 3L, 5L, 3L, 1L, 5L, 6L, 6L, 6L, 2L, 3L, 3L, 5L, 4L, 2L,     2L, 5L, 2L, 3L, 1L, 3L, 3L, 6L, 1L, 6L, 5L, 4L, 3L, 1L, 1L,     1L, 3L, 5L, 4L, 4L, 1L, 1L, 6L, 2L, 6L, 6L, 1L, 5L, 6L, 6L,     2L, 4L, 6L, 6L, 4L, 4L, 5L, 4L, 4L, 1L, 3L, 1L, 2L, 6L, 6L,     1L, 2L, 6L, 3L, 5L, 4L, 6L, 5L, 3L, 4L, 2L, 5L, 2L, 3L, 2L,     1L, 5L, 1L, 1L, 6L, 6L, 1L, 4L, 2L, 3L, 4L, 3L, 3L, 5L, 3L,     6L, 4L, 3L, 5L, 3L, 5L, 5L, 4L, 2L, 2L, 4L, 1L, 6L, 5L, 6L,     3L, 5L, 1L, 2L, 1L, 3L, 5L, 1L, 4L, 1L, 2L, 4L, 5L, 4L, 6L,     3L, 5L, 6L, 1L, 3L, 4L, 6L, 5L, 5L, 1L, 3L, 2L, 6L, 5L, 5L,     4L, 3L, 5L, 3L, 6L, 5L, 4L, 4L, 2L, 4L, 5L, 2L, 5L, 3L, 1L,     1L, 6L, 5L, 6L, 6L, 1L, 5L, 5L, 3L, 6L, 6L, 1L, 4L, 3L, 6L,     4L, 4L, 6L, 4L, 4L, 3L, 5L, 4L, 1L, 2L, 1L, 5L, 2L, 6L, 4L,     1L, 3L, 4L, 4L, 2L, 4L, 5L, 6L, 5L, 5L, 5L, 3L, 1L, 6L, 2L,     2L, 2L, 6L, 4L, 2L, 5L, 4L, 3L, 4L, 3L, 1L, 2L, 2L, 3L, 4L,     5L, 6L, 4L, 3L, 4L, 6L, 3L, 3L, 5L, 6L, 3L, 3L, 3L, 1L, 2L,     4L, 5L, 2L, 5L, 4L, 4L, 2L, 4L, 3L, 1L, 3L, 3L, 6L, 5L, 4L,     2L, 1L, 4L, 4L, 1L, 4L, 3L, 4L, 3L, 1L, 4L, 6L, 2L, 5L, 6L,     3L, 6L, 2L, 1L, 6L, 6L, 2L, 6L, 6L, 5L, 2L, 2L, 4L, 6L, 6L,     5L, 2L, 3L, 3L, 1L, 3L, 4L, 3L, 5L, 5L, 2L, 4L, 2L, 2L, 6L,     3L, 6L, 4L, 4L, 1L, 4L, 5L, 2L, 2L, 4L, 6L, 5L, 4L, 3L, 2L,     4L, 4L, 6L, 5L, 4L, 4L, 6L, 4L, 4L, 1L, 5L, 2L, 1L, 6L, 5L,     4L, 2L, 5L, 4L, 2L, 4L, 6L, 1L, 6L, 5L, 4L, 5L, 1L, 4L, 6L,     2L, 4L, 4L, 2L, 3L, 2L, 1L, 5L, 2L, 4L, 5L, 2L, 5L, 3L, 2L,     3L, 6L, 6L, 3L, 1L, 3L, 2L, 6L, 5L, 5L, 4L, 3L, 3L, 6L, 5L,     2L, 5L, 4L, 5L, 1L, 2L, 6L, 2L, 6L, 3L, 5L, 6L, 1L, 6L, 3L,     4L, 2L, 1L, 6L, 2L, 5L, 5L, 4L, 3L, 2L, 2L, 2L, 1L, 2L, 6L,     1L, 5L, 1L, 3L, 1L, 1L, 6L, 4L, 5L, 2L, 4L, 2L, 5L, 3L, 4L,     1L, 2L, 5L, 1L, 1L, 2L, 6L, 2L, 4L, 3L, 3L, 4L, 4L, 5L, 5L,     6L, 1L, 4L, 2L, 2L, 3L, 3L, 3L, 6L, 3L, 5L, 4L, 4L, 3L, 3L,     3L, 3L, 5L, 4L, 5L, 1L, 4L, 4L, 5L, 6L, 4L, 5L, 1L, 6L, 2L,     1L, 3L, 6L, 3L, 2L, 5L, 1L, 3L, 2L, 3L, 3L, 2L, 5L, 3L, 5L,     5L, 4L, 6L, 6L, 5L, 6L, 6L, 3L, 4L, 2L, 4L, 2L, 3L, 1L, 4L,     5L, 4L, 1L, 5L, 4L, 5L, 6L, 3L, 5L, 6L, 5L, 1L, 2L, 2L, 4L,     6L, 4L, 5L, 6L, 3L, 4L, 2L, 1L, 2L, 5L, 3L, 6L, 5L, 5L, 5L,     3L, 5L, 5L, 2L, 2L, 3L, 2L, 5L, 5L, 4L, 5L, 1L, 5L, 2L, 5L,     4L, 2L, 4L, 6L, 3L, 6L, 3L, 1L, 6L, 5L, 4L, 5L, 6L, 4L, 5L,     2L, 1L, 3L, 6L, 1L, 5L, 1L, 2L, 5L, 2L, 1L, 6L, 4L, 1L, 6L,     3L, 2L, 2L, 4L, 5L, 5L, 5L, 3L, 3L, 1L, 4L, 2L, 4L, 6L, 1L,     3L, 1L, 6L, 3L, 2L, 1L, 3L, 3L, 4L, 1L, 3L, 3L, 5L, 1L, 2L,     2L, 5L, 2L, 4L, 3L, 2L, 3L, 3L, 6L, 5L, 1L, 4L, 3L, 4L, 5L,     5L, 1L, 5L, 6L, 5L, 2L, 2L, 3L, 5L, 3L, 1L, 2L, 5L, 5L, 1L,     3L, 4L, 3L, 3L, 6L, 5L, 2L, 5L, 5L, 2L, 6L, 2L, 1L, 1L, 2L,     6L, 4L, 5L, 1L, 2L, 1L, 1L, 4L, 4L, 1L, 3L, 5L, 4L, 4L, 3L,     4L, 5L, 3L, 4L, 5L, 1L, 3L, 2L, 3L, 4L, 3L, 5L, 3L, 2L, 4L,     5L, 1L, 2L, 4L, 3L, 6L, 3L, 6L, 3L, 6L, 3L, 4L, 3L, 2L, 3L,     6L, 2L, 4L, 1L, 1L, 2L, 2L, 5L, 3L, 2L, 3L, 6L, 2L, 3L, 2L,     5L, 5L, 2L, 3L, 3L, 5L, 3L, 5L, 4L, 6L, 2L, 2L, 1L, 5L, 4L,     4L, 4L, 1L, 6L, 6L, 3L, 2L, 3L, 6L, 4L, 4L, 4L, 4L, 4L, 5L,     3L, 5L, 6L, 5L, 2L, 4L, 6L, 5L, 6L, 5L, 5L, 1L, 3L, 6L, 3L,     2L, 2L, 4L, 4L, 2L, 5L, 4L, 4L, 6L, 4L, 5L, 5L, 5L, 3L, 6L,     4L, 6L, 5L, 6L, 4L, 4L, 6L, 2L, 3L, 5L, 5L, 2L, 5L, 4L, 4L,     1L, 4L, 2L, 6L, 2L, 1L, 4L, 2L, 6L, 4L, 2L, 3L, 4L, 6L, 6L,     2L, 3L, 4L, 3L, 2L, 3L, 5L, 2L, 6L, 4L, 4L, 1L, 5L, 3L, 6L,     1L, 2L, 3L, 5L, 5L, 5L, 5L, 3L, 5L, 4L, 5L, 6L, 4L, 5L, 5L,     3L, 4L, 4L, 2L, 4L, 3L, 4L, 6L, 3L, 5L, 2L, 5L, 5L, 4L, 2L,     1L, 6L, 2L, 4L, 6L, 3L, 3L, 6L, 5L, 6L, 1L, 5L, 2L, 4L, 6L,     4L, 5L, 3L, 2L, 6L, 1L, 3L, 3L, 3L, 2L, 4L, 3L, 2L, 5L, 5L,     4L, 2L, 6L, 6L, 2L, 6L, 3L, 6L, 1L, 4L, 6L, 4L, 6L, 6L, 1L,     5L, 1L, 3L, 1L, 6L, 1L, 3L, 2L, 3L, 2L, 2L, 4L, 1L, 3L, 1L,     5L, 3L, 5L, 4L, 3L, 2L, 3L, 2L, 3L, 3L, 6L, 1L, 2L, 6L, 5L,     2L, 6L, 2L, 6L, 5L, 3L, 1L, 2L, 2L, 4L, 5L, 4L, 6L, 5L, 3L,     4L, 2L, 5L, 6L, 4L, 1L, 5L, 3L, 1L, 5L, 4L, 2L, 2L, 5L, 2L,     5L, 4L, 3L, 5L, 3L, 2L, 2L, 3L, 2L, 1L, 4L, 5L, 4L, 6L, 3L,     6L, 3L, 6L, 4L, 1L, 6L, 6L, 4L, 1L, 5L, 2L, 5L, 5L, 4L, 2L,     5L, 4L, 6L, 4L, 6L, 3L, 4L, 1L, 4L, 3L, 1L, 4L, 5L, 3L, 4L,     1L, 5L, 5L, 1L, 2L, 1L, 4L, 1L, 5L, 5L, 4L, 4L, 6L, 6L, 4L,     6L, 4L, 2L, 2L, 3L, 5L, 1L, 2L, 3L, 6L, 3L, 4L, 4L, 2L, 4L,     2L, 3L, 3L, 2L, 1L, 1L, 3L, 2L, 2L, 1L, 1L, 6L, 3L, 3L, 6L,     1L, 6L, 4L, 2L, 4L, 2L, 1L, 1L, 4L, 4L, 4L, 6L, 4L, 4L, 6L,     2L, 3L, 3L, 3L, 2L, 2L, 4L, 4L, 6L, 5L, 5L, 3L, 4L, 5L, 4L,     1L, 3L, 1L, 5L, 5L, 6L, 5L, 1L, 5L, 3L, 6L, 3L, 4L, 6L, 3L,     3L, 5L, 1L, 5L, 2L, 3L, 2L, 2L, 2L, 2L, 4L, 4L, 2L, 5L, 4L,     1L, 2L, 3L, 1L, 4L, 2L, 1L, 6L, 4L, 1L, 4L, 2L, 5L, 4L, 3L,     5L, 2L, 1L, 1L, 4L, 3L, 2L, 3L, 1L, 2L, 6L, 6L, 1L, 3L, 4L,     1L, 5L, 6L, 4L, 4L), .Label = c('(0,25]', '(25,35]', '(35,45]',     '(45,55]', '(55,65]', '(65,99]'), class = 'factor'), value = c('age1824',     'age2534', 'age3544', 'age4554', 'age5564', 'age6599')),     .Names = c('', 'value'));do.call('levels<-', argv)");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma1_e95a91f28a8a65ed9285324833de381f() {
        assertEval("argv <- list(structure(c(2, 1, 1, 1, 3, 1, 1, 1, 4), .Dim = c(3L, 3L)));lgamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma2_541d5022d92bebe4392512ddba8a4fe5() {
        assertEval("argv <- list(structure(c(2, 3, 2, 1, 4, 4, 7, 2, 11, 11, 15, 10, 7, 8, 13, 12), .Dim = c(4L, 4L), .Dimnames = structure(list(income = c('< 15k', '15-25k', '25-40k', '> 40k'), satisfaction = c('VeryD', 'LittleD', 'ModerateS', 'VeryS')), .Names = c('income', 'satisfaction'))));lgamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma3_e1f937d8e3d529f3446a378b383421db() {
        assertEval("argv <- list(1.72926007700446);lgamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma4_fea0f0854c103e5b079d4af35013e0a7() {
        assertEval("argv <- list(0.999935539560166);lgamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma5_d46e90324c6f0cef7d5ecc4ea27da104() {
        assertEval("argv <- list(FALSE);lgamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma6_2cf9fc6844d0327b2c4b1b109635cc7f() {
        assertEval("argv <- list(numeric(0));lgamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma7_6c68b8e517127bdb8de22aa4b23c1458() {
        assertEval("argv <- list(structure(c(11.4065045686104, 9.40650456861037, 8.40650456861037, 11.4065045686104, 9.40650456861037, 6.40650456861036, 15.4065045686104, 9.40650456861037, 9.40650456861037, 8.40650456861037, 6.40650456861036, 7.40650456861036, 8.40650456861037, 7.40650456861036, 9.40650456861037, 13.4065045686104, 10.4065045686104, 11.4065045686104, 14.4065045686104, 10.4065045686104, 16.4065045686104, 10.4065045686104, 7.40650456861036, 9.40650456861037, 7.40650456861036, 13.4065045686104, 17.4065045686104, 4.40650456861036, 10.4065045686104, 5.40650456861036, 6.40650456861036, 4.40650456861036, 5.40650456861036, 4.40650456861036, 4.40650456861036, 8.40650456861037, 9.40650456861037, 5.40650456861036, 9.40650456861037, 7.40650456861036, 7.40650456861036, 8.40650456861037), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42')));lgamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma9_be6e1c7ee2606642e5baeeef275b5bdf() {
        assertEval("argv <- list(Inf);do.call('lgamma', argv)");
    }

    @Test
    public void TestrGenBuiltinlist_testlist1_65944132382d44701c1261f0a0b25eee() {
        assertEval("argv <- list(surname = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables', 'R Core'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia', NA), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'no', 'yes', 'no', NA), class = 'AsIs'), title = structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...', 'An Introduction to R'), class = 'AsIs'), other.author = structure(c(NA, NA, NA, NA, NA, 'Ripley', 'Venables & Smith'), class = 'AsIs'));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist10_0d91de5fcb12ceb1b94df1e95266e389() {
        assertEval("argv <- list(linkfun = function (mu) .Call(C_logit_link, mu), linkinv = function (eta) .Call(C_logit_linkinv, eta), mu.eta = function (eta) .Call(C_logit_mu_eta, eta), valideta = function (eta) TRUE, name = 'logit');list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist11_606357090d4876929a9f1b147d4d012b() {
        assertEval("argv <- list(linkfun = function (mu) log(mu), linkinv = function (eta) pmax(exp(eta), .Machine$double.eps), mu.eta = function (eta) pmax(exp(eta), .Machine$double.eps), valideta = function (eta) TRUE, name = 'log');list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist12_c9a9c06a59bcfbcc26056a024fa8f34b() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(2, numeric()))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist13_e0df2faaf5e788dce11bc91c59bea571() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = 'undefined columns selected', call = quote(`[.data.frame`(dd, , 'x'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist14_9d1e92da0bd42ea748d9dfddfdaec73b() {
        assertEval("argv <- list(error = function (e) -1);list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist15_b3059bdb14bfb3e116caddd2d5b47397() {
        assertEval("argv <- list(error = function (e) warning(gettextf('%s namespace cannot be unloaded:\\n  ', sQuote(pkgname)), conditionMessage(e), call. = FALSE, domain = NA));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist16_fcd9aa17d77c957c43e29af4028b0ba2() {
        assertEval("argv <- list(aa = structure(c('1', '2', '3'), class = 'AsIs'), ..dfd.row.names = structure(c('4', '5', '6', '7', '8', '9'), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('a', 'b'))));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist17_5260c9430ad2029dd0d65545cdb9ddf6() {
        assertEval("argv <- list(deviance.resid = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), coefficients = structure(logical(0), .Dim = c(0L, 4L), .Dimnames = list(NULL, c('Estimate', 'Std. Error', 't value', 'Pr(>|t|)'))), aliased = structure(TRUE, .Names = 'x'), dispersion = 0.274035772634541, df = c(0L, 10L, 1L), cov.unscaled = structure(logical(0), .Dim = c(0L, 0L)), cov.scaled = structure(logical(0), .Dim = c(0L, 0L)));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist18_9373dc5de31b96619dee3afffa3c1d99() {
        assertEval("argv <- list(date = structure(1065672000, class = c('POSIXct', 'POSIXt'), tzone = ''));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist19_29ed23ccf1ca95ee0a511ae40ef50e31() {
        assertEval("argv <- list(arguments = structure('object', simpleOnly = TRUE), generic = structure(function (object) standardGeneric('show'), generic = structure('show', package = 'methods'), package = 'methods', group = list(), valueClass = character(0), signature = structure('object', simpleOnly = TRUE), default = structure(function (object) showDefault(object, FALSE), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), generic = structure('show', package = 'methods'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (object) showDefault(object, FALSE))(object)), class = structure('standardGeneric', package = 'methods')));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist2_79f3cfd82a7b2ff7a9e2638890c47890() {
        assertEval("argv <- list(`_R_NS_LOAD_` = structure('survival', .Names = 'name'));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist20_ceb11b13da5bb4a3654ebbde24fbe656() {
        assertEval("argv <- list('Residuals vs Fitted', 'Normal Q-Q', 'Scale-Location', 'Cook's distance', 'Residuals vs Leverage', expression('Cook's dist vs Leverage  ' * h[ii]/(1 - h[ii])));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist21_4d399388cb66e8dc6719b175b6bad72f() {
        assertEval("argv <- list(Df = structure(c(NA, 2, 1), .Names = c('<none>', 'Soft', 'M.user:Temp')), Deviance = structure(c(8.44399377410362, 8.2279889309135, 5.65604443125997), .Names = c('<none>', 'Soft', 'M.user:Temp')), AIC = structure(c(72.1419514890413, 75.9259466458512, 71.3540021461976), .Names = c('<none>', 'Soft', 'M.user:Temp')));list(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist22_f8a01089f8b49a095631588012c7523a() {
        assertEval("argv <- list(structure(TRUE, .Dim = c(1L, 1L)));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist23_263a4a24553cb6d6be3064b518bd40c8() {
        assertEval("argv <- list(V1 = c(1L, 1L, 2L, 3L), V2 = structure(c(1L, 1L, 2L, 3L), .Label = c('A', 'D', 'E'), class = 'factor'), V3 = c(6, 6, 9, 10));list(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist24_63693ede58a1f13ade4fef7fa41e43d4() {
        assertEval("argv <- list(structure(1:5, .Tsp = c(-1, 3, 1), class = 'ts'), structure(1:5, .Tsp = c(1, 5, 1), class = 'ts'));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist25_4ecd613920cab7b38e6e0da43bbb3b69() {
        assertEval("argv <- list(structure(list(x = 1L, y = structure(1L, .Label = c('A', 'D', 'E'), class = 'factor'), z = 6), .Names = c('x', 'y', 'z'), row.names = 1L, class = 'data.frame'), structure(list(), .Names = character(0), row.names = 1L, class = 'data.frame'));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist26_c29455e4cb5728a6620b481d828e99a2() {
        assertEval("argv <- list(1L, 3.14159265358979, 3+5i, 'testit', TRUE, structure(1L, .Label = 'foo', class = 'factor'));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist27_07f5ff63af8a66f0ff454aec8a76e873() {
        assertEval("argv <- list(structure(c(24L, 13L, 15L, 68L, 39L, 74L, 22L, 1L, 8L, 55L, 24L, 20L, 51L, 13L, 3L, 4L, 5L, 6L, 15L, 2L, 8L, 60L, 67L, 23L, 58L, 24L, 22L, 21L, 37L, 74L, 59L, 39L, 14L, 14L, 19L, 23L, 70L, 21L, 22L, 31L, 29L, 30L, 45L, 58L, 17L, 7L, 19L, 26L, 39L, 74L, 57L, 59L, 12L, 72L, 70L, 37L, 64L, 16L, 18L, 21L, 22L, 8L, 62L, 61L, 63L, 71L, 105L, 64L, 10L, 41L, 8L, 27L, 11L, 34L, 32L, 33L, 68L, 107L, NA, 66L, NA, 65L, 48L, 52L, 43L, 47L, 46L, 44L, 41L, 54L, 28L, 50L, 40L, NA, 69L, NA, 75L, 109L, NA, 86L, 112L, 110L, 104L, 24L, 111L, 87L, NA, NA, 92L, 73L, 85L, 90L, 89L, NA, 83L, NA, 102L, NA, 108L, 88L, 91L, 93L, NA, 94L, 84L, NA, 106L, NA, 95L, 82L, 56L, 87L, 109L, 75L, 104L, 110L, 112L, 111L, 24L, 73L, 85L, 86L, 90L, 89L, 102L, 88L, 92L, 9L, 49L, 42L, 38L, 35L, 36L, 25L, NA, NA, 9L, 49L, 42L, NA, 36L, 38L, 25L, 53L, 79L, 78L, 103L, 77L, 80L, 114L, 97L, 113L, 76L, 96L, 81L, 116L, 99L, 117L, 115L, 98L, 101L, 100L), .Label = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'), class = 'factor'));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist28_a79fa150e524419f2c7f8e0a51f5a30f() {
        assertEval("argv <- list(3.14159265358979, 'C', NaN, Inf, 1:3, c(0, NA), NA);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist29_34d4615e7ae4dcbb36f04e41af7ce028() {
        assertEval("argv <- list(assign = c(0L, 1L, 1L, 1L), qr = structure(list(qr = structure(c(-28.8270706107991, 0.273146306828071, 0.312206540911182, 0.247733407426682, 0.216636580341913, 0.0849718577324175, 0.298411357268471, 0.294351149612123, 0.247733407426682, 0.308328048219576, 0.125075187976724, 0.138758462627192, 0.190002850064127, 0.1835601922086, 0.232705016165824, 0.069379231313596, 0.120168353625222, 0.222121918799273, 0.190002850064127, 0.247733407426682, 0.0917800961043001, -10.2334366187554, 13.7940847818881, 0.190374922931528, 0.151060987411652, 0.132099001405849, -0.125761881229701, -0.441661211981173, -0.435651935890569, -0.366655739827817, -0.45633832676795, -0.185116476853374, 0.084611076858457, 0.115858488525451, 0.111929933764425, 0.141897089628727, 0.0423055384292285, 0.0732753420009814, 0.13544380924692, 0.115858488525451, 0.151060987411652, 0.0559649668822123, -4.26682272578616, -3.16543363464969, 9.7352069177467, 0.118607830555703, 0.10371953900067, 0.00616533725634264, 0.0216519528674631, 0.0213573547475655, 0.0179748924786157, 0.0223714822011986, 0.00907513071804667, -0.344446140042991, -0.471652301867824, -0.45565941330494, -0.577653737792655, -0.172223070021495, 0.0575332486360618, 0.106345765721762, 0.0909680534393656, 0.118607830555703, 0.0439417444752447, -4.89123580760852, -3.62866782508622, -3.32364207119197, 9.63649238427318, 0.135617489972887, 0.00806142768852949, 0.0283108036266689, 0.0279256046761512, 0.0235028985277947, 0.0292516173165799, 0.0118661002643811, 0.0254562434016423, 0.0348573968510539, 0.0336754446773372, 0.0426914180233895, 0.0127281217008212, -0.284250391934964, -0.525414891452651, -0.449439332155022, -0.585997195035538, -0.217099822893807), assign = c(0L, 1L, 1L, 1L), contrasts = structure(list(trt = 'contr.treatment'), .Names = 'trt'), .Dim = c(21L, 4L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21'), c('(Intercept)', 'trt2', 'trt3', 'trt4'))), qraux = c(1.21663658034191, 1.16655707135303, 1.14947576464323, 1.15508453302121), pivot = 1:4, tol = 1e-07, rank = 4L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 17L);list(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist3_8edad12272a87d59515743661ee54343() {
        assertEval("argv <- list(x = c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), y = c(3.69420518444359e+25, 2.30887824027777e+24, 1.44304890017492e+23, 9.01905562612606e+21, 5.63690976641081e+20, 35230686042118275072, 2201917878145066496, 137619867512235136, 8601241751556820, 537577617482832, 33598603095309.8, 2099913194115.17, 131244699796.888, 8202825028.58974, 512684387.219832, 32044730.0464007, 2003284.70114408, 125327.674230857, 7863.68742857025, 499.272560819512, 33.2784230289721, 2.7659432263306, 0.488936768533843, -0.282943224311172, 7.32218543045282e-05, -0.00636442868227041, -0.0483709204009262, -0.0704795507649514, 0.0349437746169591, -0.0264830837608839, 0.0200901469411759), xlab = NULL, ylab = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist30_f4754177d06cebd5d79b82e41866666d() {
        assertEval("argv <- list(function (x, i, j, ...) x@aa[[i]]);list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist31_787ffb18410a33d3e9f4b0023b38fec6() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = 2:3, .Dimnames = list(NULL, c('a', 'b', 'c'))), structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L, 5L)), TRUE);list(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist32_4d167ac0dfe64bfcdcc76a228afa547a() {
        assertEval("argv <- list(structure(function (e1, e2) standardGeneric('Ops'), generic = structure('Ops', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = c('e1', 'e2'), default = quote(`\\001NULL\\001`), skeleton = quote((function (e1, e2) stop('invalid call in method dispatch to 'Ops' (no default method)', domain = NA))(e1, e2)), groupMembers = list('Arith', 'Compare', 'Logic'), class = structure('groupGenericFunction', package = 'methods')));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist33_406d36e77264830713bc65f7f714ff95() {
        assertEval("argv <- list(tables = structure(list(`Grand mean` = 103.87323943662, N = structure(c(78.7365206866197, 98.5088731171753, 113.842206450509, 123.008873117175), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'), class = 'mtable'), `V:N` = structure(c(79.5323303457107, 86.1989970123773, 69.7732394366197, 98.0323303457106, 108.032330345711, 89.1989970123773, 114.198997012377, 116.698997012377, 110.365663679044, 124.365663679044, 126.365663679044, 118.032330345711), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')), class = 'mtable')), .Names = c('Grand mean', 'N', 'V:N')), n = structure(list(N = structure(c(17, 18, 18, 18), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N')), `V:N` = structure(c(6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')))), .Names = c('N', 'V:N')));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist34_a5fd3bcd29b52fea51a2ac4e060853d8() {
        assertEval("argv <- list(itemBullet = '• ');list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist35_50462cb2c743764a9dafd135bfb1acec() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = 'more columns than column names', call = quote(read.table('foo6', header = TRUE))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist36_87e5f530ae12133d74365a5addcaa350() {
        assertEval("argv <- list(name = 'list', objs = structure(list(`package:base` = .Primitive('list'), .Primitive('list')), .Names = c('package:base', '')), where = c('package:base', 'namespace:base'), visible = c(TRUE, FALSE), dups = c(FALSE, TRUE));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist37_1c436ec1fd79c3179b14c6b4bbdb2ba9() {
        assertEval("argv <- list(structure(-1.81670076485116, .Names = '5%'), structure(c(-0.569903669351869, -3.58817618394987, 1.7002237104195, 0.247262299686774, -1.6099565644337, -0.117004990933267, 2.26201852051082, 1.27765184061634, -0.585159452768219, 0.777745165779344, -0.299055554574658, -0.10613560158199, -0.96347850905908, 2.01298478288055, -0.65898967614864, 0.497719980170775, 0.113843920033269, -0.766958149949393, 3.9222560854539, -0.936533336103743, 0.287536526568389, -1.36853788163704, 0.875060974238616, 6.63795852562496, -1.7181964535622, -1.84566355665129, -2.51563250429738, -0.197885450775488, 0.343408036526242, 0.0203380393884578, 0.207160904400713, 0.869565410777187, -0.815315222368209, -0.0998963343276999, 0.656114271672876, 1.27566552196184, 0.0658788246994603, -1.69200573781689, -0.0369929356350034, -0.342061734014624, 0.31798622848054, -1.52242182038666, -1.33617654990952, 0.0175687049379899, -0.093090859182165, -0.0507330478224399, -0.431715933999334, 0.37428759377223, -1.51710077889452, 0.148230661369186, 0.214909263767934, 0.178494903424769, -2.69339417614172, 0.644025806665703, -0.287978582462478, 3.36345700350871, 1.39656784449323, -0.344866954524567, -0.270662469024608, -1.32424067954204), .Dim = 60L, .Dimnames = list(c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L));list(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist38_884f5056f11619f1d3003cba61fbbb5e() {
        assertEval("argv <- list(srcfile = '/home/lzhao/hg/r-instrumented/library/utils/R/utils', frow = 1271L, lrow = 1273L);list(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist39_6b37a56e317d3893c6da994c28fc51cb() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils'), frow = c(6889L, 6893L, 6897L, 6901L, 6902L, 6903L, 6903L, 6917L, 6918L, 6919L, 6919L, 6927L, 6928L), lrow = c(6889L, 6893L, 6900L, 6901L, 6902L, 6903L, 6903L, 6917L, 6918L, 6919L, 6919L, 6927L, 6928L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 13L), class = 'data.frame'), structure(list(    srcfile = '/home/lzhao/hg/r-instrumented/library/utils/R/utils', frow = 6928L, lrow = 6928L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist4_d9d0349db6a6cf11ebfa764878f9793a() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = 'line 1 did not have 4 elements', call = quote(scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, flush, fill, strip.white, quiet, blank.lines.skip, multi.line, comment.char, allowEscapes, encoding))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist40_2160e3cc6bceff5f47c039ebfaa38743() {
        assertEval("argv <- list(x = c(190, 118, 149, 313, NA, NA, 299, 99, 19, 194, NA, 256, 290, 274, 65, 334, 307, 78, 322, 44, 8, 320, 25, 92, 66, 266, NA, 13, 252, 223, 279, 286, 287, 242, 186, 220, 264, 127, 273, 291, 323, 259, 250, 148, 332, 322, 191, 284, 37, 120, 137, 150, 59, 91, 250, 135, 127, 47, 98, 31, 138, 269, 248, 236, 101, 175, 314, 276, 267, 272, 175, 139, 264, 175, 291, 48, 260, 274, 285, 187, 220, 7, 258, 295, 294, 223, 81, 82, 213, 275, 253, 254, 83, 24, 77, NA, NA, NA, 255, 229, 207, 222, 137, 192, 273, 157, 64, 71, 51, 115, 244, 190, 259, 36, 255, 212, 238, 215, 153, 203, 225, 237, 188, 167, 197, 183, 189, 95, 92, 252, 220, 230, 259, 236, 259, 238, 24, 112, 237, 224, 27, 238, 201, 238, 14, 139, 49, 20, 193, 145, 191, 131, 223), y = c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5, 9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4, 8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8, 4.1, 9.2, 9.2, 10.9, 4.6, 10.9, 5.1, 6.3, 5.7, 7.4, 8.6, 14.3, 14.9, 14.9, 14.3, 6.9, 10.3, 6.3, 5.1, 11.5, 6.9, 9.7, 11.5, 8.6, 8, 8.6, 12, 7.4, 7.4, 7.4, 9.2, 6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3, 8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9, 10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3, 6.3, 6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7, 14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6, 9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), xlab = NULL, ylab = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist41_c5b0b665bdce6d19b95fd76a087b6953() {
        assertEval("argv <- list(properties = structure(list(.Data = 'numeric', comment = 'character'), .Names = c('.Data', 'comment')), prototype = structure(3.14159265358979, comment = 'Start with pi'));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist42_9ebbfe4daa70ca2ef7e6172007134076() {
        assertEval("argv <- list(structure(c(NA, NA, FALSE), .Names = c('perm', 'LDL', 'super')));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist43_b64ca362409030a667ca156deb17fb99() {
        assertEval("argv <- list(raster = structure('#000000', .Dim = c(1L, 1L), class = 'raster'), x = structure(0, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = NULL, height = NULL, just = 'centre', hjust = NULL, vjust = NULL, interpolate = TRUE, name = NULL, gp = structure(list(), class = 'gpar'), vp = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]],argv[[8]],argv[[9]],argv[[10]],argv[[11]],argv[[12]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist44_4a5d7768a000d47fabc9464a9ef26fb7() {
        assertEval("argv <- list(trace = 0, fnscale = 1, parscale = 1, ndeps = 0.001, maxit = 100L, abstol = -Inf, reltol = 1.49011611938477e-08, alpha = 1, beta = 0.5, gamma = 2, REPORT = 10, type = 1, lmm = 5, factr = 1e+07, pgtol = 0, tmax = 10, temp = 10);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]],argv[[8]],argv[[9]],argv[[10]],argv[[11]],argv[[12]],argv[[13]],argv[[14]],argv[[15]],argv[[16]],argv[[17]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist45_72dab5449d87d4d567bf6a84441b8a5b() {
        assertEval("argv <- list(error = function (...) {});list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist46_f1d3dc269e74b9cc9dc41830ba680647() {
        assertEval("argv <- list(structure(list(srcfile = c(NA, '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R'), frow = c(NA, 832L, 833L, 834L, 842L, 845L, 845L, 849L, 858L, 860L, 862L, 863L), lrow = c(NA, 832L, 833L, 834L, 842L, 846L, 846L, 851L, 859L, 860L, 862L, 863L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 12L), class = 'data.frame'), structure(list(    srcfile = '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', frow = 863L, lrow = 863L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist48_26d67bf37ae3bc21b10c95570f25244b() {
        assertEval("argv <- list(structure(list(Month = c(5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L)), .Names = 'Month', class = 'data.frame', row.names = c(1L, 2L, 3L, 4L, 6L, 7L, 8L, 9L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 28L, 29L, 30L, 31L, 38L, 40L, 41L, 44L, 47L, 48L, 49L, 50L, 51L, 62L, 63L, 64L, 66L, 67L, 68L, 69L, 70L, 71L, 73L, 74L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L, 104L, 105L, 106L, 108L, 109L, 110L, 111L, 112L, 113L, 114L, 116L, 117L, 118L, 120L, 121L, 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L, 132L, 133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L, 144L, 145L, 146L, 147L, 148L, 149L, 151L, 152L, 153L)));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist49_28ca3680b9ecafefae85c2bef52ef2c8() {
        assertEval("argv <- list(structure(list(stats = c(7, 35, 60, 80, 135), n = 26L, conf = c(46.0561427916751, 73.9438572083249), out = integer(0)), .Names = c('stats', 'n', 'conf', 'out')));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist5_6fca78e57d388cc155e7fb56357c6e5d() {
        assertEval("argv <- list(structure(list(Hair = structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('Black', 'Brown', 'Red', 'Blond'), class = 'factor'), Eye = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('Hair', 'Eye', 'Sex'), out.attrs = structure(list(dim = structure(c(4L, 4L, 2L), .Names = c('Hair', 'Eye', 'Sex')), dimnames = structure(list(Hair = c('Hair=Black', 'Hair=Brown', 'Hair=Red', 'Hair=Blond'), Eye = c('Eye=Brown', 'Eye=Blue', 'Eye=Hazel', 'Eye=Green'), Sex = c('Sex=Male', 'Sex=Female')), .Names = c('Hair', 'Eye', 'Sex'))), .Names = c('dim', 'dimnames')), class = 'data.frame', row.names = c(NA, -32L)), Fr = c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist50_10b0daf050ae2f781bb97ae427b20730() {
        assertEval("argv <- list('‘', 'Matrix', '’');list(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist51_41e7fb6b4456303d154b8e3a8a4863a3() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist52_6835c28230d6b56ec666e683fbbebf58() {
        assertEval("argv <- list(structure(1386392034.50546, class = c('POSIXct', 'POSIXt')));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist53_eb76241f6d6432c150f4fb4dbcca24e9() {
        assertEval("argv <- list(structure(list(sec = 54.5054557323456, min = 53L, hour = 23L, mday = 6L, mon = 11L, year = 113L, wday = 5L, yday = 339L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist54_84ecc4e1bb9ddeae41aea8fd438ee141() {
        assertEval("argv <- list(values = c(0.266917355843816, 0.00557315714782281, 0.00229578896250102, 0.000615239459643172, 8.19421206363694e-05), vectors = structure(c(-0.452472222108953, -0.386550651250976, -0.453293999783174, -0.439775552409852, -0.496960255453506, -0.157430201026812, 0.910628681750865, -0.204120426456847, -0.072367418669335, -0.314752194584169, 0.437863914035591, 0.0975567326834968, -0.370843683888789, -0.67178336056532, 0.458192050652246, 0.752103796361061, -0.0893037594956476, 0.0198033027727173, 0.0214021063919376, -0.652314722415877, 0.114453887261006, -0.0619800003080987, -0.784182499538679, 0.591277842073673, 0.136040832629847), .Dim = c(5L, 5L)));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist55_597ad833137e56c8f697416c3a92b072() {
        assertEval("argv <- list(object = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist56_82925c617c1df362116464d8fc7d6495() {
        assertEval("argv <- list(class = 'data.frame', row.names = c(NA, 32L));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist57_abfd321152229b78af86a9b83cb8c3cd() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R'), frow = 164:165, lrow = c(164L, 169L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', frow = 170L, lrow = 177L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist58_6661234bd12ddd632ed34fb8e88598e7() {
        assertEval("argv <- list(structure(FALSE, .Names = 'Series 1', .Tsp = c(0, 0, 1), class = 'ts'), structure(FALSE, .Names = 'Series 1', .Tsp = c(1, 1, 1), class = 'ts'));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist59_ad6b0a2f60cb8fbea8659597bc59e579() {
        assertEval("argv <- list(structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts'), structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts'));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist6_93b61fc100f555c4e5c217b8c362ccf7() {
        assertEval("argv <- list(deviance.resid = structure(c(0.979005810350303, 0.190415231217834, -0.262041786489909, -1.18856115310823, -0.0713326116251696, 0.258231444611709, 0.637403312181204, -1.72855514890285, -0.632723785156881, -0.819071604478243, 2.23780874325045, -0.472376375886729), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), coefficients = structure(c(0.291009862544455, -0.575062166945441, 0.0881289026086606, 0.127412648101879, 3.30209334202984, -4.5133836829576, 0.00095966129066828, 6.38014475989249e-06), .Dim = c(2L, 4L), .Dimnames = list(c('(Intercept)', 'M.userY'), c('Estimate', 'Std. Error', 'z value', 'Pr(>|z|)'))), aliased = structure(c(FALSE, FALSE), .Names = c('(Intercept)', 'M.userY')), dispersion = 1, df = c(2L, 10L, 2L), cov.unscaled = structure(c(0.00776670347500679, -0.00776670347500679, -0.00776670347500679, 0.0162339828963334), .Dim = c(2L, 2L), .Dimnames = list(c('(Intercept)', 'M.userY'), c('(Intercept)', 'M.userY'))), cov.scaled = structure(c(0.00776670347500679, -0.00776670347500679, -0.00776670347500679, 0.0162339828963334), .Dim = c(2L, 2L), .Dimnames = list(c('(Intercept)', 'M.userY'), c('(Intercept)', 'M.userY'))));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist60_a9ad16230ee856fa1e2de0ad4b2722a1() {
        assertEval("argv <- list(Depends = structure(logical(0), .Dim = c(0L, 3L)), Installed = structure(logical(0), .Dim = c(0L, 3L)), R = structure(logical(0), .Dim = c(0L, 3L)));list(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist61_deed697ac277f9b718644ae227607a84() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(12L, 1L), .Dimnames = structure(list(`  p L s` = c('. . .', '| . .', '. | .', '| | .', '. . |', '| . |', '. | |', '| | |', '. . ?', '| . ?', '. | ?', '| | ?'), NULL), .Names = c('  p L s', ''))));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist62_89e0f10f5d47b77f291683f2cfefcbc3() {
        assertEval("argv <- list(values = c(-2572.90550008339+0i, -915.064609071159+0i, -456.632018115023+0i, 419.980933101553+0i, -366.745362912885+0i, -308.301779528581+0i, -258.104614655539+0i, -208.43876984087+0i, -174.152165416129+0i, 166.131403923756+0i, -153.932564395224+31.248756965275i, -153.932564395224-31.248756965275i, -145.261798316303+0i, -140.969649074553+0i, -109.026224585292+37.27313202252i, -109.026224585292-37.27313202252i, -95.4200045428049+0i, -94.2845517186135+0i, 93.6287479850051+0i, -83.7083948970612+39.7221174209657i, -83.7083948970612-39.7221174209657i, -89.7405335285911+14.6972603541884i, -89.7405335285911-14.6972603541884i, -90.4677652619726+0i, 80.9227484547009+0i, -79.2808369338756+0i, -67.7641499054793+34.4882180369511i, -67.7641499054793-34.4882180369511i, -74.7131802385517+0i, -72.7892236613541+0i, -70.8748882290923+0i, -65.326216345093+24.6325729497989i, -65.326216345093-24.6325729497989i, -65.6613463045206+12.2012477360608i, -65.6613463045206-12.2012477360608i, -64.009437139127+0i, -53.8555784147338+28.3814233344012i, -53.8555784147338-28.3814233344012i, -60.372612826631+0i, -55.598407412763+0i, -53.8337490558365+13.1765372798343i, -53.8337490558365-13.1765372798343i, -48.7010835501729+24.5244827641945i, -48.7010835501729-24.5244827641945i, -51.620171425175+0i, -49.1047272072286+7.0804434036442i, -49.1047272072286-7.0804434036442i, -44.0755122578262+21.8965512206582i, -44.0755122578262-21.8965512206582i, -47.6686025497685+0i, -47.0350049752776+0i, 43.2054741656531+0i, -42.0546965543942+0i, -41.4311176038551+0i, -36.4574226401686+16.1634950480082i, -36.4574226401686-16.1634950480082i, -39.2901755793811+0i, -36.5376333751307+11.2152902727145i, -36.5376333751307-11.2152902727145i, -38.0398197891428+0i, -32.9946255929378+12.9867445602001i, -32.9946255929378-12.9867445602001i, -34.7321001383969+0i, -32.0667502593492+12.342590095597i, -32.0667502593492-12.342590095597i, -27.2830437098322+11.6992356475951i, -27.2830437098322-11.6992356475951i, -29.1247671355682+2.0847233845627i, -29.1247671355682-2.0847233845627i, -28.1216021055426+0i, -27.0745572919711+0i, 26.1565478253913+0i, -23.4210302095847+1.8723763695687i, -23.4210302095847-1.8723763695687i, 20.782836979896+0i, 16.5058357149619+0i, -15.9316203363047+0i, 13.2377600042936+0i, -11.9119569568831+0i, -11.1832867499603+0i, 8.99100195370794+0i, 7.62805946796798+0i, -7.44159556589097+0i, -6.46699019595805+0i, 5.57838460483725+0i, 5.07382264677001+0i, -4.77172378340461+0i, 4.21976444063592+0i, -2.86123099075901+0i, -2.69814683135512+0i, -2.29820560404041+0i, 2.05951624519943+0i, -1.8306332549612+0i, 1.66021670517454+0i, 1.03505989993491+0i, -0.773887754953459+0i, -0.416100454072758+0i, 0.213086170361661+0i, -3.42336062193255e-06+0i, 3.42336057523814e-06+0i), vectors = NULL);list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist63_57e9ee99d343467289929b11e2c0c47c() {
        assertEval("argv <- list(x = 2.28125, y = 1.70580465116279, xlab = NULL, ylab = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist64_776b21324b07dad034b97f2090e8bb61() {
        assertEval("argv <- list(fit = structure(numeric(0), .Dim = c(10L, 0L), constant = 0), se.fit = structure(numeric(0), .Dim = c(10L, 0L)), df = 10L, residual.scale = 0.523484262069588);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist65_9d360c20fd362699811b32986b23c4e6() {
        assertEval("argv <- list(ANY = structure(function (x, y = NULL) .Internal(crossprod(x, y)), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = structure('crossprod', package = 'base'), class = structure('derivedDefaultMethod', package = 'methods')));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist7_a7db077994e64d0c603e8f245c1891b2() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist8_762414fc367763cc9598767d3fd83093() {
        assertEval("argv <- list(upper = quote(~M.user * Temp * Soft));list(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlist_testlist9_28502366b65077f736dbe37796188c4d() {
        assertEval("argv <- list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = NULL, gp = structure(list(), class = 'gpar'), vp = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]],argv[[8]],argv[[9]],argv[[10]],argv[[11]]);");
    }

    @Test
    public void TestrGenBuiltinlistdirs_testlistdirs1_507c79e25c5ba58e0585049412e0c824() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/library/rpart/doc', TRUE, FALSE); .Internal(list.dirs(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinlistfiles_testlistfiles1_fa1b00441fa4019b80c7bd9a3a43bb62() {
        assertEval("argv <- list('.', 'myTst_.*tar\\\\.gz$', FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(list.files(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinlistfiles_testlistfiles2_ddfe3735d68bc1d5cda87086abe5993d() {
        assertEval("argv <- list('./myTst/data', NULL, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(list.files(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinlistfiles_testlistfiles3_208f0e08c809f563500b4c3637be477c() {
        assertEval("argv <- list('.', '^CITATION.*', FALSE, FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(list.files(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinlistfiles_testlistfiles4_ac0902d5453c9f76cbcb2c321295c947() {
        assertEval("argv <- list('mgcv', NULL, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(list.files(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
    }

    @Test
    public void TestrGenBuiltinlog_testlog1_1afb7c26ec85f459b1d92b8b05a1fb43() {
        assertEval("argv <- list(0.7800058115849);do.call('log', argv)");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog101_ecc24c44ed8ddfa6018ff0514176ad32() {
        assertEval("argv <- list(c(0.047, 0.013, 0.002, 1e-04, 2.3e-05, 4.5e-06));log10(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog102_9372967cb32bd4fcb312d70281766e91() {
        assertEval("argv <- list(1.529e+302);log10(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog103_7de2a7ef5c0e3097db0c53c9e451eebf() {
        assertEval("argv <- list(structure(7.94649180820227e-05, .Names = 'value'));log10(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog104_59f55d661983699bc555ecc87c9868cb() {
        assertEval("argv <- list(c(0.0654707112145738, 0.999999999999999));log10(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog105_e6ea277d55371da6a195368c6435e823() {
        assertEval("argv <- list(structure(c(160.1, 129.7, 84.8, 120.1, 160.1, 124.9, 84.8, 116.9, 169.7, 140.9, 89.7, 123.3, 187.3, 144.1, 92.9, 120.1, 176.1, 147.3, 89.7, 123.3, 185.7, 155.3, 99.3, 131.3, 200.1, 161.7, 102.5, 136.1, 204.9, 176.1, 112.1, 140.9, 227.3, 195.3, 115.3, 142.5, 244.9, 214.5, 118.5, 153.7, 244.9, 216.1, 188.9, 142.5, 301, 196.9, 136.1, 267.3, 317, 230.5, 152.1, 336.2, 371.4, 240.1, 158.5, 355.4, 449.9, 286.6, 179.3, 403.4, 491.5, 321.8, 177.7, 409.8, 593.9, 329.8, 176.1, 483.5, 584.3, 395.4, 187.3, 485.1, 669.2, 421, 216.1, 509.1, 827.7, 467.5, 209.7, 542.7, 840.5, 414.6, 217.7, 670.8, 848.5, 437, 209.7, 701.2, 925.3, 443.4, 214.5, 683.6, 917.3, 515.5, 224.1, 694.8, 989.4, 477.1, 233.7, 730, 1087, 534.7, 281.8, 787.6, 1163.9, 613.1, 347.4, 782.8), .Tsp = c(1960, 1986.75, 4), class = 'ts'));log10(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog106_d964329cd3dcf7956a6cd82c4f6ea162() {
        assertEval("argv <- list(c(10, 100, 1000, 10000, 1e+05));log10(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog107_503c096025a4b93a75b0148ebd7255ba() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(20L, 0L), .Dimnames = list(c('ant', 'bee', 'cat', 'cpl', 'chi', 'cow', 'duc', 'eag', 'ele', 'fly', 'fro', 'her', 'lio', 'liz', 'lob', 'man', 'rab', 'sal', 'spi', 'wha'), NULL)));log10(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog1p_testlog1p1_c023c918bddc95b0e1cfd60af87a9763() {
        assertEval("argv <- list(c(-0.160475096572577, -0.953101214495634, -0.329547420118877, -0.234819677566528, -0.108178529791777, -0.0994458210555148, -0.282992873965743, -0.731707656126625, -0.866467764292465, -0.76039953639421, -0.3580569675068, -0.52382260076554, -0.240530699925064, -0.236619747356161, -0.811827419307205, -0.154911720192001, -0.97472580847241, -0.464016625026599, -0.58493655376716, -0.230096919024049));log1p(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog1p_testlog1p2_81b25cc10d353414f1f37782c032d890() {
        assertEval("argv <- list(-7e-04);log1p(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog2_testlog21_fc038e122267912e7786ebe0a8cbc813() {
        assertEval("argv <- list(48L);log2(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog2_testlog22_43b705a6a4c410cceffa89c5116e2edd() {
        assertEval("argv <- list(FALSE);log2(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog2_testlog23_66b4617ac1c0af36b59782d5eb124e01() {
        assertEval("argv <- list(2.2250738585072e-308);log2(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinlog2_testlog25_a38ddb4787f2d21fff3f9acd8adcc4db() {
        assertEval("argv <- list(2.2250738585072e-308);do.call('log2', argv)");
    }

    @Test
    public void TestrGenBuiltinlogical_testlogical1_2702e90f71b10e323ac11b8626973aaf() {
        assertEval("argv <- structure(list(length = 0), .Names = 'length');do.call('logical', argv)");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames1_898df0e3a59db50576c53c531d007018() {
        assertEval("argv <- list('head', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames10_4aa926b564582b235ded66f082258d20() {
        assertEval("argv <- list(c('', '', 'bady'), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames11_22d9a3235e2cab99684db62ef344d299() {
        assertEval("argv <- list(character(0), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames2_67e507c1d0708a736eec9c03185c6352() {
        assertEval("argv <- list('FALSE', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames3_03ae4bfa7f133486b1910528c62665f6() {
        assertEval("argv <- list(c('.Call', '.Call numParameters', '.Fortran', '.Fortran numParameters'), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames4_0560c1f540e0b5bb98fcdbd018329fc5() {
        assertEval("argv <- list('..adfl.row.names', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames5_f52ad37b2de0be513050a1de0e3b9418() {
        assertEval("argv <- list(c('name', 'title', 'other.author'), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames6_7255cfa6a5dc8bed4e0627ee7a2e2cbf() {
        assertEval("argv <- list('.2a', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames7_b3f46c6d69eea518172590428806ddf3() {
        assertEval("argv <- list('', TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames8_514336d382135927daedea4cc7e645e3() {
        assertEval("argv <- list(NA_character_, TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakenames_testmakenames9_c1f23c2ec8890fbb500886c5fcf439da() {
        assertEval("argv <- list(c('Subject', 'predict.fixed', 'predict.Subject'), TRUE); .Internal(make.names(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakeunique_testmakeunique1_a259d93b75237c2f9d87f1469dcda44d() {
        assertEval("argv <- list(c('A', 'B', 'C', 'D', 'E', 'F'), '.'); .Internal(make.unique(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakeunique_testmakeunique2_ae9ba0d71a11d834ed5d0de6377fda42() {
        assertEval("argv <- list(c('b', 'NA', 'NA'), '.'); .Internal(make.unique(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakeunique_testmakeunique3_6d802924a5fd45b9d969c974781e035c() {
        assertEval("argv <- list(c('1', '2', '3', '6', '7', '7', '7', '8', '8', '10', '11', '12', '12', '12', '15', '15', '16', '17', '19', '20', '21', '21', '23'), '.'); .Internal(make.unique(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmakeunique_testmakeunique4_90b66112232aa7fab5580ae74b7da5fa() {
        assertEval("argv <- list(character(0), '.'); .Internal(make.unique(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmapply_testmapply1_4c9b17d42aa71ef6fbf0ca38186bc614() {
        assertEval("argv <- list(.Primitive('c'), list(list(), list(), list()), NULL); .Internal(mapply(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch1_d020a7104509bc56383efa46056cc122() {
        assertEval("argv <- list('corMatrix', c('dpoMatrix', 'dsyMatrix', 'ddenseMatrix', 'symmetricMatrix', 'dMatrix', 'denseMatrix', 'compMatrix', 'Matrix', 'mMatrix'), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch10_b875d387d67d1ef0f56c56c455bfd57f() {
        assertEval("argv <- list(structure(1:27, .Label = c('M16', 'M05', 'M02', 'M11', 'M07', 'M08', 'M03', 'M12', 'M13', 'M14', 'M09', 'M15', 'M06', 'M04', 'M01', 'M10', 'F10', 'F09', 'F06', 'F01', 'F05', 'F07', 'F02', 'F08', 'F03', 'F04', 'F11'), class = c('ordered', 'factor')), structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 16L, 16L, 16L, 16L, 17L, 17L, 17L, 17L, 18L, 18L, 18L, 18L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 21L, 21L, 21L, 21L, 22L, 22L, 22L, 22L, 23L, 23L, 23L, 23L, 24L, 24L, 24L, 24L, 25L, 25L, 25L, 25L, 26L, 26L, 26L, 26L, 27L, 27L, 27L, 27L), .Label = c('M16', 'M05', 'M02', 'M11', 'M07', 'M08', 'M03', 'M12', 'M13', 'M14', 'M09', 'M15', 'M06', 'M04', 'M01', 'M10', 'F10', 'F09', 'F06', 'F01', 'F05', 'F07', 'F02', 'F08', 'F03', 'F04', 'F11'), class = c('ordered', 'factor')), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch11_ad5a24d20daaf4db398e63fff34a57d2() {
        assertEval("argv <- list('g', 'l', NA_character_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch12_cee6fb20eea0fbc7856e888bfd3ecd51() {
        assertEval("argv <- list(1:4, 3L, 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch13_25cf9facfc1ed4731e49e4127211f298() {
        assertEval("argv <- list(c('0.5', '0.5', '0.5', '0.5', '0.5'), 0.5, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch14_7c330871ec8b196a483f4903400f3702() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch15_b8b9158f5fdd986b9e94f2fa7cd29189() {
        assertEval("argv <- list(c('May', 'Jun', 'Jul', 'Aug', 'Sep'), c(NA, NaN), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch16_2cadff6a2c81472c865f72832d616d99() {
        assertEval("argv <- list(c(1L, 2L, 4L, 13L, 14L, 15L, 16L, 17L, 18L, 23L), c(23L, 28L), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch17_344af6a846f688dddd5d64acf3f37f97() {
        assertEval("argv <- list(c('dMatrix', 'nonStructure', 'structure'), c('nonStructure', 'structure'), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch18_7932dbd8e54f03fac0e51f0166c093ed() {
        assertEval("argv <- list(structure(c(0, 1), .Names = c('Domestic', 'Foreign')), NA_integer_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch19_a89b2507cc4a06ba1f61c1d516284135() {
        assertEval("argv <- list(structure(list(col = 1, cellvp = structure(list(structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = c(1L, 1L), layout.pos.col = c(1L, 1L), valid.just = c(0.5, 0.5), valid.pos.row = c(1L, 1L), valid.pos.col = c(1L, 1L), name = 'GRID.VP.8'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport'), structure(list(x = structure(1, unit = 'lines', valid.unit = 3L, data = list(NULL), class = 'unit'), y = structure(1, unit = 'lines', valid.unit = 3L, data = list(    NULL), class = 'unit'), width = structure(list(fname = '-', arg1 = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), arg2 = structure(list(fname = 'sum', arg1 = structure(c(1, 1), unit = c('lines', 'lines'), valid.unit = c(3L, 3L), data = list(NULL, NULL), class = 'unit'), arg2 = NULL), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit'))), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit')), height = structure(list(fname = '-', arg1 = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'),     arg2 = structure(list(fname = 'sum', arg1 = structure(c(1, 1), unit = c('lines', 'lines'), valid.unit = c(3L, 3L), data = list(NULL, NULL), class = 'unit'), arg2 = NULL), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit'))), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit')), justification = c('left', 'bottom'), gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL,     layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = 'GRID.VP.9'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport')), class = c('vpStack', 'viewport'))), .Names = c('col', 'cellvp')), c('children', 'childrenOrder'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch2_29bd92c9f6e9120c5e3e171dc63d231d() {
        assertEval("argv <- list(c('ANY', 'abIndex', 'ddenseMatrix', 'diagonalMatrix', 'dsparseMatrix', 'lMatrix', 'nMatrix', 'nsparseVector', 'pMatrix', 'sparseVector'), 'ANY', NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch20_71d4c7ed78e2bd22690ea39eb14219dd() {
        assertEval("argv <- list(structure(c(1, 1, 6, 2, 2, 7, 3, 3, 7, 3, 3, 8, 4, 4, 4, 5), .Dim = c(16L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16'), 'y')), c(1, 2, 3, 4, 5, 6, 7, 8), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch21_ce59bdde030e15182688c25018a2792e() {
        assertEval("argv <- list(structure(c(0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3), .Tsp = c(1959, 1997.91666667, 12), class = 'ts'), c(0, 1, 2, 3), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch22_6ea69490e3c0b9d94d2f4df21d5ce4ef() {
        assertEval("argv <- list(c(NA, NA, 3, 4, 5), c(NA, NA, 4, 5), 0L, NA); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch23_2dafa7d1f48daf6d915168c9bde59a3d() {
        assertEval("argv <- list(structure('tools', .Names = 'name'), c('base', 'utils'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch24_2e0690ab98bb8e121fd4f5fa1fab0cf2() {
        assertEval("argv <- list(structure(list(framevp = structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = structure(list(nrow = 1L, ncol = 1L, widths = structure(list(    fname = 'sum', arg1 = structure(c(1, 1, 1), unit = c('lines', 'lines', 'lines'), valid.unit = c(3L, 3L, 3L), data = list(NULL, NULL, NULL), class = 'unit'), arg2 = NULL), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit')), heights = structure(list(fname = 'sum', arg1 = structure(c(1, 1, 1), unit = c('lines', 'lines', 'lines'), valid.unit = c(3L, 3L, 3L), data = list(NULL, NULL, NULL), class = 'unit'), arg2 = NULL), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit')), respect = FALSE, valid.respect = 0L, respect.mat = structure(0L, .Dim = c(1L, 1L)), just = 'centre', valid.just = c(0.5, 0.5)), .Names = c('nrow', 'ncol', 'widths', 'heights', 'respect', 'valid.respect', 'respect.mat', 'just', 'valid.just'), class = 'layout'), layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5), valid.pos.row = NULL, valid.pos.col = NULL, name = 'GRID.VP.33'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport')), .Names = 'framevp'), c('children', 'childrenOrder'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch25_6678ace6d7395396f5a017a6ae4c25da() {
        assertEval("argv <- list(' *** Run successfully completed ***', c('', '> ### R code from vignette source 'Design-issues.Rnw'', '> ', '> ###################################################', '> ### code chunk number 1: preliminarie .... [TRUNCATED] ', '', '> ###################################################', '> ### code chunk number 2: diag-class', '> ###################################################', '> li .... [TRUNCATED] ', 'Loading required package: lattice', '', 'Attaching package: ‘Matrix’', '', 'The following object is masked from ‘package:base’:', '', '    det', '', '', '> (D4 <- Diagonal(4, 10*(1:4)))', '4 x 4 diagonal matrix of class \\'ddiMatrix\\'', '     [,1] [,2] [,3] [,4]', '[1,]   10    .    .    .', '[2,]    .   20    .    .', '[3,]    .    .   30    .', '[4,]    .    .    .   40', '', '> str(D4)', 'Formal class 'ddiMatrix' [package \\'Matrix\\'] with 4 slots', '  ..@ diag    : chr \\'N\\'', '  ..@ Dim     : int [1:2] 4 4', '  ..@ Dimnames:List of 2', '  .. ..$ : NULL', '  .. ..$ : NULL', '  ..@ x       : num [1:4] 10 20 30 40', '', '> diag(D4)', '[1] 10 20 30 40', '', '> ###################################################', '> ### code chunk number 3: diag-2', '> ###################################################', '> diag(D .... [TRUNCATED] ', '', '> D4', '4 x 4 diagonal matrix of class \\'ddiMatrix\\'', '     [,1] [,2] [,3] [,4]', '[1,]   11    .    .    .', '[2,]    .   22    .    .', '[3,]    .    .   33    .', '[4,]    .    .    .   44', '', '> ###################################################', '> ### code chunk number 4: unit-diag', '> ###################################################', '> str .... [TRUNCATED] ', 'Formal class 'ddiMatrix' [package \\'Matrix\\'] with 4 slots', '  ..@ diag    : chr \\'U\\'', '  ..@ Dim     : int [1:2] 3 3', '  ..@ Dimnames:List of 2', '  .. ..$ : NULL', '  .. ..$ : NULL', '  ..@ x       : num(0) ', '', '> getClass(\\'diagonalMatrix\\') ## extending \\'denseMatrix\\'', 'Virtual Class \\'diagonalMatrix\\' [package \\'Matrix\\']', '', 'Slots:', '                                    ', 'Name:       diag       Dim  Dimnames', 'Class: character   integer      list', '', 'Extends: ', 'Class \\'sparseMatrix\\', directly', 'Class \\'Matrix\\', by class \\'sparseMatrix\\', distance 2', 'Class \\'mMatrix\\', by class \\'Matrix\\', distance 3', '', 'Known Subclasses: \\'ddiMatrix\\', \\'ldiMatrix\\'', '', '> ###################################################', '> ### code chunk number 5: Matrix-ex', '> ###################################################', '> (M  .... [TRUNCATED] ', '4 x 4 sparse Matrix of class \\'dgTMatrix\\'', '            ', '[1,] . . 4 .', '[2,] . 1 . .', '[3,] 4 . . .', '[4,] . . . 8', '', '> m <- as(M, \\'matrix\\')', '', '> (M. <- Matrix(m)) # dsCMatrix (i.e. *symmetric*)', '4 x 4 sparse Matrix of class \\'dsCMatrix\\'', '            ', '[1,] . . 4 .', '[2,] . 1 . .', '[3,] 4 . . .', '[4,] . . . 8', '', '> ###################################################', '> ### code chunk number 6: sessionInfo', '> ###################################################', '> t .... [TRUNCATED] ', '\\\\begin{itemize}\\\\raggedright', '  \\\\item R version 3.0.1 (2013-05-16), \\\\verb|x86_64-unknown-linux-gnu|', '  \\\\item Locale: \\\\verb|LC_CTYPE=en_US.UTF-8|, \\\\verb|LC_NUMERIC=C|, \\\\verb|LC_TIME=en_US.UTF-8|, \\\\verb|LC_COLLATE=C|, \\\\verb|LC_MONETARY=en_US.UTF-8|, \\\\verb|LC_MESSAGES=en_US.UTF-8|, \\\\verb|LC_PAPER=C|, \\\\verb|LC_NAME=C|, \\\\verb|LC_ADDRESS=C|, \\\\verb|LC_TELEPHONE=C|, \\\\verb|LC_MEASUREMENT=en_US.UTF-8|, \\\\verb|LC_IDENTIFICATION=C|', '  \\\\item Base packages: base, datasets, grDevices, graphics,', '    methods, stats, utils', '  \\\\item Other packages: Matrix~1.0-12, lattice~0.20-15', '  \\\\item Loaded via a namespace (and not attached): grid~3.0.1,', '    tools~3.0.1', '\\\\end{itemize}', '', ' *** Run successfully completed ***', '> proc.time()', '   user  system elapsed ', '157.417   4.183 161.773 '), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch26_ef49e3e3a7e3e2ed99c17791f089b393() {
        assertEval("argv <- list(c(NA, NA, NA, NA, NA, NA, NA, NA), c('real', 'double'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch27_8d1444ca46ce1631988cc24ddb5c3996() {
        assertEval("argv <- list(c('2005-01-01', '2006-01-01', '2007-01-01', '2008-01-01', '2009-01-01'), c(NA, NaN), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch28_4d42acd02ffc54a97b2e8a28cfcf59e5() {
        assertEval("argv <- list(c(NA, NA), c('real', 'double'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch29_f242dbcdfd33e6330f2bbaacb42ade66() {
        assertEval("argv <- list(c('TRUE', 'FALSE', 'TRUE', 'FALSE', 'TRUE', 'FALSE', 'TRUE', 'FALSE', 'TRUE', 'FALSE'), c(FALSE, TRUE), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch3_38fa1994a4e75a99e8edee8ecb0f22fb() {
        assertEval("argv <- list(character(0), NA_integer_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch30_48397e5539abbde8b5c7dbbe0aa14e71() {
        assertEval("argv <- list(c('2005-01-01', '2005-02-01', '2005-03-01', '2005-04-01', '2005-05-01', '2005-06-01', '2005-07-01', '2005-08-01', '2005-09-01', '2005-10-01', '2005-11-01', '2005-12-01', '2006-01-01', '2006-02-01', '2006-03-01', '2006-04-01', '2006-05-01', '2006-06-01', '2006-07-01', '2006-08-01', '2006-09-01', '2006-10-01', '2006-11-01', '2006-12-01', '2007-01-01', '2007-02-01', '2007-03-01', '2007-04-01', '2007-05-01', '2007-06-01', '2007-07-01', '2007-08-01', '2007-09-01', '2007-10-01', '2007-11-01', '2007-12-01', '2008-01-01', '2008-02-01', '2008-03-01', '2008-04-01', '2008-05-01', '2008-06-01', '2008-07-01', '2008-08-01', '2008-09-01', '2008-10-01', '2008-11-01', '2008-12-01', '2009-01-01'), NA_integer_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch31_07e0d2d5804d08f12b5996eda8071b74() {
        assertEval("argv <- list(c(1, 2, 3, 4, 8, 12), c(1, 2, 3, 4, 8, 12), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch32_4f5c4e853d9d5dd310b4b6e9435a3794() {
        assertEval("argv <- list(c('.__C__classA', '.__T__$:base', '.__T__$<-:base', '.__T__[:base', '.__T__plot:graphics', 'plot'), c('.__NAMESPACE__.', '.__S3MethodsTable__.', '.packageName', '.First.lib', '.Last.lib', '.onLoad', '.onAttach', '.onDetach', '.conflicts.OK', '.noGenerics'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch4_1cc99c7481426681808921dc446883ca() {
        assertEval("argv <- list(c('1', '2', NA), NA_real_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch5_e7ce470446c8830a4ed057bfee119064() {
        assertEval("argv <- list(c(0.00711247435174189, 0.251292124343149, -0.319172743733056, 5.75733114833721e-05, -0.35788385867217, -0.423873493915367, -0.440922191441033, 0.454737405613056, -0.337349081024889, -0.340540089756868, 0.0142999714851724, -0.337349081024889, 0.16929974943645, 0.0119141094780619, 0.0237947544260095, 0.481799107922823, -0.398620160881439, 0.112296211162227, 0.124500575635478, -0.423873493915367, 0.476631055345105, -0.201544176575946, 0.0504435384277691, 0.0142999714851724, 0.0859627732681778, -0.402191440217491, 0.0237947544260095, -0.35788385867217, 0.131606068222389, -0.328335725283617, -0.366873527650917, 0.855944113774621, 0.0506448607016037, -0.540294711232517, 0.365377890605673, 0.122315677921641, 0.122315677921641, 0.476631055345105, 0.0859627732681778, 0.028962807003728, 0.130710526672205, 0.704128425262244, 0.0119141094780619, 0.0506448607016037, 0.0859627732681778, 0.131606068222389, 0.122315677921641, -0.429041546493085, 0.0506448607016037, -0.35788385867217, 0.746844979419744, -0.158827622418446, -0.340540089756868, 0.130710526672205, -0.429041546493085, 0.126579318324608, 0.0119141094780619, 0.251292124343149, -0.283536551482645, 0.107466982896435, 0.586499858105134, -0.402392762491326, -0.85437461044313, 0.133663557186039, -0.328335725283617, 0.124500575635478, 0.0237947544260095, 0.133663557186039, 0.133663557186039, 0.656149860060726, 0.579415619243703, 0.107466982896435, -0.599127482939288, -0.326256982594487, 0.746844979419744, -0.452778727607612, -0.328335725283617, 0.0119141094780619, -0.340540089756868, -0.319172743733056, -0.725390113737062, 0.503481161620698, -0.661275243349858, -0.402392762491326, 0.476631055345105, 0.126579318324608, 0.251292124343149, -0.0874584103134217, 0.107466982896435, -0.201544176575946, 0.0734191385691725), c(-0.85437461044313, -0.725390113737062, -0.661275243349858, -0.599127482939288, -0.540294711232517, -0.452778727607612, -0.440922191441033, -0.429041546493085, -0.423873493915367, -0.402392762491326, -0.402191440217491, -0.398620160881439, -0.366873527650917, -0.35788385867217, -0.340540089756868, -0.337349081024889, -0.328335725283617, -0.326256982594487, -0.319172743733056, -0.283536551482645, -0.201544176575946, -0.158827622418446, -0.0874584103134217, 5.75733114833721e-05, 0.00711247435174189, 0.0119141094780619, 0.0142999714851724, 0.0237947544260095, 0.028962807003728, 0.0504435384277691, 0.0506448607016037, 0.0734191385691725, 0.0859627732681778, 0.107466982896435, 0.112296211162227, 0.122315677921641, 0.124500575635478, 0.126579318324608, 0.130710526672205, 0.131606068222389, 0.133663557186039, 0.16929974943645, 0.251292124343149, 0.365377890605673, 0.454737405613056, 0.476631055345105, 0.481799107922823, 0.503481161620698, 0.579415619243703, 0.586499858105134, 0.656149860060726, 0.704128425262244, 0.746844979419744, 0.855944113774621), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch6_8bf990f52ace5ead2f5837f2d97b000b() {
        assertEval("argv <- list(c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'), NA_integer_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch7_08e7cc0f7a5302c6b24d95450f3c0872() {
        assertEval("argv <- list(character(0), c('methods', 'utils', 'XML', 'RCurl'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch8_b64a75e4392b4dfae4b3d1f590ed408b() {
        assertEval("argv <- list(c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'), NA_real_, NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch9_bbbab40f7e37fd84ee0401c59c3a99e5() {
        assertEval("argv <- list(c(-1628571, -1628571, -1200000, -1200000, -1057143, -914286, -771429, -771429, -771429, -628571, -628571, -485714, -485714, -485714, -485714, -342857, -342857, -342857, -342857, -2e+05, -2e+05, -2e+05, -2e+05, -57143, -57143, -57143, 85714, 85714, 228571, 228571, 228571, 371429, 371429, 371429, 371429, 514286, 514286, 514286, 657143, 657143, 657143, 657143, 657143, 942857, 1085714, 1228571, 1228571, 1228571, 1228571, 1371429), c(-1628571, -1200000, -1057143, -914286, -771429, -628571, -485714, -342857, -2e+05, -57143, 85714, 228571, 371429, 514286, 657143, 942857, 1085714, 1228571, 1371429), NA_integer_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix1_129288927fd1c25bf4d36562e3de1510() {
        assertEval("argv <- list(NA_real_, 1L, 5L, FALSE, list('Residuals', c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)')), FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix10_dc72c70f5d57aa08375ee046e1463966() {
        assertEval("argv <- list(c(1, 1, 1, 1, 1, 1), 1, 1, FALSE, NULL, TRUE, TRUE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix11_8bb57d223d3bbb1fa5c36bb7da3f2aa9() {
        assertEval("argv <- list(c(420.223016031624, 290.609964753365, 290.609964753365, 200), 2, 2, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix12_660a31cd914f52ab4f6919d35f20c3ec() {
        assertEval("argv <- list(1:4, 1, 2, FALSE, NULL, TRUE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix13_5bc9087ec092f4378bfbcdc1f03fd169() {
        assertEval("argv <- list(c(0, 0, 0, 0), 4L, 0L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix14_b606b1e87cf667c98cdfc1c3885e78f0() {
        assertEval("argv <- list(0+0i, 7L, 2L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix15_62e089343cf28ce959a6a8a376ccf37b() {
        assertEval("argv <- list(0L, 1L, 2L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix16_f6948d866815804b1c4dc7a631aed1b9() {
        assertEval("argv <- list(0, 12L, 12L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix17_f7707e6cfec1d1efa2e7cbec9b3fe58e() {
        assertEval("argv <- list(NA, 240, 4L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix18_393309cf06a3a9fef66141fb3de3c314() {
        assertEval("argv <- list(c(1448665, 18316380, 77.4, 139.8, 2251281, 26424236, 120.3, 201.7, NA, NA, 1835812, 22608335, 98.1, 172.5), 2L, 7L, FALSE, list(c('Ncells', 'Vcells'), c('used', '(Mb)', 'gc trigger', '(Mb)', 'limit (Mb)', 'max used', '(Mb)')), FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix19_8a96511b22d03016e2ca47f9db8ab269() {
        assertEval("argv <- list(c('315.45', '363.01', '405.02', '443.06', '478.09', '510.72'), 1L, 1, TRUE, list('1979', c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun')), FALSE, TRUE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix2_71d70e49707ce1e73538dd863ad3fb0f() {
        assertEval("argv <- list(c(NA, 'a', 'b', '10', NA, NA, 'd', '12', NA, NA, NA, '14'), 1, 4, TRUE, NULL, TRUE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix20_6f82cce7d3c8240d77530591c2510e14() {
        assertEval("argv <- list('', 0L, 0L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix21_ae5da2827444c941a6ee957caf47ba78() {
        assertEval("argv <- list(character(0), 0L, 2L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix22_5d1009ae9762a3be8ec35e26bae759fd() {
        assertEval("argv <- list(raw(0), 0L, 0L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix23_99a98909f36d6952fbe497c259b0467d() {
        assertEval("argv <- list(character(0), 0L, 17L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix24_593fcf38d2384a24b7ece626a1275db0() {
        assertEval("argv <- list(c(TRUE, FALSE, FALSE, TRUE), 2L, 2L, TRUE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix25_02c656525f8d9af8a83980a72d34fb51() {
        assertEval("argv <- list(c(0.342020143325669, 0, -0.939692620785908, 0, 1, 0, 0.939692620785908, 0, 0.342020143325669), 3, 3, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix26_bfe592ed5c2b4ae50f83e71cf4db5c51() {
        assertEval("argv <- list(NA_integer_, 1L, 1L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix27_364ae3cbbe01436b2a6bc69a1df5c9e4() {
        assertEval("argv <- list(numeric(0), 1, 1L, FALSE, NULL, TRUE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix28_41e0446a1e0ca65f255d4d46f04b6f03() {
        assertEval("argv <- list(NA_complex_, 5L, 1L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix29_eb80b03f9fa1526f108b3e3ab317fd08() {
        assertEval("argv <- list(NA_character_, 4L, 17L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix3_874bd2e083c0a84dacffd9d54a7d9d64() {
        assertEval("argv <- list(NA, 0L, 0L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix30_a92ef267a111bca7ffc2045040cd4c2f() {
        assertEval("argv <- list(c(2.8421709430404e-14, 0, 0, 0, 0, 0, 0, -4.44089209850063e-16, 0, 0, 0, 0, 0, 0, 4.44089209850063e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.105427357601e-15), 6L, 6L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix31_6d32b187f736788253ce3f8eb39682bb() {
        assertEval("argv <- list(structure(integer(0), .Dim = c(0L, 2L), .Dimnames = list(NULL, c('row', 'col'))), 0, 2, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix32_aaf4f96745b0450a07ce25d6b8f9cc51() {
        assertEval("argv <- list(c(24.2407407407407, 22.3953488372093, 24.4761904761905, 25.625, 24.3518518518519, 30.8333333333333, 30.8333333333333, 30.8333333333333, 24.2037037037037, 30.5, 30.5, 30.5, 24.4444444444444, 30.8571428571429, 30.8571428571429, 30.8571428571429, 24.2037037037037, 30.5, 30.5, 30.5, 24.2407407407407, 31.4545454545455, 31.4545454545455, 31.4545454545455, 24.8333333333333, 30.7857142857143, 30.7857142857143, 30.7857142857143, 24.7777777777778, 31.1428571428571, 31.1428571428571, 31.1428571428571, 24.2407407407407, 31.4545454545455, 31.4545454545455, 31.4545454545455, 24.2407407407407, 31.4545454545455, 31.4545454545455, 31.4545454545455, 24.2037037037037, 30.5, 30.5, 30.5, 24.5185185185185, 30.6428571428571, 30.6428571428571, 30.6428571428571, 24.8333333333333, 31.2857142857143, 31.2857142857143, 31.2857142857143, 24.8333333333333, 22.75, 20.5789473684211, 20.5789473684211, 24.5185185185185, 22.375, 24.4, 23.5833333333333, 24.8148148148148, 22.4615384615385, 20.2222222222222, 20.2222222222222, 24.4444444444444, 22.2, 24.05, 24.05, 24.3518518518519, 30.8333333333333, 30.8333333333333, 30.8333333333333, 24.8148148148148, 22.4615384615385, 24.3809523809524, 25.5714285714286, 24.8333333333333, 22.575, 24.3333333333333, 23.5384615384615, 24.4444444444444, 22.2, 24.05, 24.05, 24.3518518518519, 30.8333333333333, 30.8333333333333, 30.8333333333333, 24.2037037037037, 22.4047619047619, 24.4761904761905, 24.4761904761905, 24.8148148148148, 22.4615384615385, 24.3809523809524, 25.5714285714286, 24.8148148148148, 22.4615384615385, 24.3809523809524, 25.5714285714286, 24.3518518518519, 22.5, 20.695652173913, 20.695652173913, 24.2407407407407, 22.3953488372093, 24.4761904761905, 25.625, 24.5185185185185, 22.375, 24.4, 23.5833333333333, 24.2407407407407, 22.3953488372093, 24.4761904761905, 23.7692307692308, 24.4444444444444, 22.2, 24.05, 24.05, 24.5185185185185, 22.375, 20.35, 20.35, 24.5185185185185, 22.375, 24.4, 23.5833333333333, 24.7777777777778, 22.55, 24.65, 26, 24.8148148148148, 30.9333333333333, 30.9333333333333, 30.9333333333333, 24.7777777777778, 22.55, 24.65, 23.9230769230769, 24.8333333333333, 22.575, 24.3333333333333, 23.5384615384615, 24.7777777777778, 22.55, 24.65, 23.9230769230769, 24.8333333333333, 22.575, 20.6315789473684, 20.6315789473684, 24.8333333333333, 22.75, 24.7142857142857, 24.7142857142857, 24.8333333333333, 22.75, 24.7142857142857, 24.7142857142857, 24.8148148148148, 22.4615384615385, 20.2222222222222, 20.2222222222222, 24.2037037037037, 22.4047619047619, 20.3333333333333, 20.3333333333333, 24.7777777777778, 22.55, 20.45, 20.45, 24.8148148148148, 22.4615384615385, 20.2222222222222, 20.2222222222222, 24.3518518518519, 22.5, 24.6842105263158, 24.6842105263158, 24.8148148148148, 22.4615384615385, 20.2222222222222, 20.2222222222222, 24.4444444444444, 22.2, 20.35, 20.35, 24.2037037037037, 22.4047619047619, 24.4761904761905, 24.4761904761905, 24.5185185185185, 22.375, 20.35, 20.35, 24.8148148148148, 22.4615384615385, 20.2222222222222, 20.2222222222222, 24.8148148148148, 22.4615384615385, 20.2222222222222, 20.2222222222222, 24.3518518518519, 22.5, 20.695652173913, 20.695652173913, 24.8148148148148, 22.4615384615385, 20.2222222222222, 20.2222222222222, 24.8333333333333, 22.575, 20.6315789473684, 20.6315789473684, 24.7777777777778, 22.55, 20.45, 20.45, 24.8333333333333, 22.75, 20.5789473684211, 20.5789473684211, 24.8333333333333, 22.575, 20.6315789473684, 20.6315789473684, 24.8333333333333, 22.75, 20.5789473684211, 20.5789473684211, 24.4444444444444, 22.2, 20.35, 20.35, 24.8148148148148, 22.4615384615385, 20.2222222222222, 20.2222222222222), 60L, 1, TRUE, list(c('Eagle Summit 4', 'Ford Escort   4', 'Ford Festiva 4', 'Honda Civic 4', 'Mazda Protege 4', 'Mercury Tracer 4', 'Nissan Sentra 4', 'Pontiac LeMans 4', 'Subaru Loyale 4', 'Subaru Justy 3', 'Toyota Corolla 4', 'Toyota Tercel 4', 'Volkswagen Jetta 4', 'Chevrolet Camaro V8', 'Dodge Daytona', 'Ford Mustang V8', 'Ford Probe', 'Honda Civic CRX Si 4', 'Honda Prelude Si 4WS 4', 'Nissan 240SX 4', 'Plymouth Laser', 'Subaru XT 4', 'Audi 80 4', 'Buick Skylark 4', 'Chevrolet Beretta 4', 'Chrysler Le Baron V6', 'Ford Tempo 4', 'Honda Accord 4', 'Mazda 626 4', 'Mitsubishi Galant 4', 'Mitsubishi Sigma V6', 'Nissan Stanza 4', 'Oldsmobile Calais 4', 'Peugeot 405 4', 'Subaru Legacy 4', 'Toyota Camry 4', 'Volvo 240 4', 'Acura Legend V6', 'Buick Century 4', 'Chrysler Le Baron Coupe', 'Chrysler New Yorker V6', 'Eagle Premier V6', 'Ford Taurus V6', 'Ford Thunderbird V6', 'Hyundai Sonata 4', 'Mazda 929 V6', 'Nissan Maxima V6', 'Oldsmobile Cutlass Ciera 4', 'Oldsmobile Cutlass Supreme V6', 'Toyota Cressida 6', 'Buick Le Sabre V6', 'Chevrolet Caprice V8', 'Ford LTD Crown Victoria V8', 'Chevrolet Lumina APV V6', 'Dodge Grand Caravan V6', 'Ford Aerostar V6', 'Mazda MPV V6', 'Mitsubishi Wagon 4', 'Nissan Axxess 4', 'Nissan Van 4'), structure(c('0.79767456', '0.28300396', '0.04154257', '0.01132626'), .Names = c('1', '2', '3', '4'))), FALSE, TRUE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix33_21a29d0ff4b7c9df7579311e16a9997c() {
        assertEval("argv <- list(c(1+2i, 3-4i, 5+0i, -6+0i), 2L, 2L, TRUE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix34_f4beefcfa24319d680cab49233e6468d() {
        assertEval("argv <- list(NA, 2, 5, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix35_bb801e30e125bd792e0933c8e180f381() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(1L, 0L), .Dimnames = list('r', NULL)), 0L, 0L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix36_2a0583afdbde06aa275d16f2da8d090c() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 0, 4.94065645841247e-324, 0, 0, 0, 0, 0), structure(12L, .Names = '1'), 1L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix37_a7d353e4c41d248a0e708e7f3224bf20() {
        assertEval("argv <- list(1:7, 3, 4, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix38_d7b8d0c95b8472f4b5e6ea3f362c4d3d() {
        assertEval("argv <- list(c(1, 3, 2, -2, 16, 4, 3, 3, 1, 32, -3, 2, 3, 2, 5, 1, 3, 4, 9, 0, 4, 16, 3, 5, 1, -1, 3, 2, -3, 4, 1, 2, 8, 0, 8, 5, 4, 2, 6, 5, 3, 1, 3, 1), 4L, 4L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix39_53c38f6077dd7aaca90c51c383503499() {
        assertEval("argv <- list(c(-1, 4, 4, 9, 5, 1, 4, 8, 8, 2, 6, 0, 2, 3, 8, 8, 4, 4, 2, 3, 4, 0, -1, 7, 2, 4, 2, 3, 5, 6, 6, 5, 4, 3, 7, -1, 3, 1, -1, 2, 32, 1, 4, 4), 2L, 5L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix4_58ce8e56a3cf85efe057af9b7ffb9083() {
        assertEval("argv <- list('foo', 1L, 1, FALSE, list(structure('object', simpleOnly = TRUE), NULL), FALSE, TRUE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix40_69bb81d6b630e72206f900d1505098f2() {
        assertEval("argv <- list(c(1259, 845, 719, 390, 1360, 1053, 774, 413), 2, 1, TRUE, NULL, FALSE, TRUE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix41_4506ed270fec0fcccd716ed15003e8f4() {
        assertEval("argv <- list(1:2, 2, 12, TRUE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix42_fa537b7a32d8b9000388c2008d68fb0c() {
        assertEval("argv <- list(NA_character_, 1L, 17L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix43_8dec6c4c3a34100792db0fbe3738f2ed() {
        assertEval("argv <- list(c('', '', '', '', '', '', ' 1', ' 2', ' 3', ' 4', ' 5', ' 6', ' 7', ' 8', ' 9', '10', '', '', '', '', '', '', '', ''), 1, 12, TRUE, list(c('1920', '1921'), c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')), TRUE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix44_4d002852813ae5281c78de2a673a8c83() {
        assertEval("argv <- list(structure(list(a1 = 1:3, a2 = 4:6, a3 = 3.14159265358979, a4 = c('a', 'b', 'c')), .Names = c('a1', 'a2', 'a3', 'a4')), 2, 2, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix5_53b963b380fc4d60eb89161fd2eeba7d() {
        assertEval("argv <- list(c(1, 2, 3, 0, 10, NA), 3, 2, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix6_e183e3544a3231d469a485ce85faba69() {
        assertEval("argv <- list(1:25, 5, 5, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix7_28825920bfff0474f4ddb03ff8fadbe3() {
        assertEval("argv <- list('ANY', 2L, 3L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix8_a78ed9549cf7519d0e8e57abcfd32e8d() {
        assertEval("argv <- list(0L, 1L, 1L, TRUE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix9_fd4685d9a4c85ee9a108cda523251ccb() {
        assertEval("argv <- list(0L, 0L, 0L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinmax_testmax1_db816396e29ab361c6a6f3a51c12817e() {
        assertEval("argv <- list(10L, 1L);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax10_aae6b99c2f95cc53388a3e2e8cff1c1a() {
        assertEval("argv <- list(c(FALSE, FALSE));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax11_8608c8811b4335b2c8da107e4440edf0() {
        assertEval("argv <- list(numeric(0));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax12_710462e2d6241e41aa7f635ca3b99fdd() {
        assertEval("argv <- list(4L, numeric(0));max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax13_d6310bbca9db3c386cc7fa4fddc520e4() {
        assertEval("argv <- list(6L, numeric(0));max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax14_ac71da5a49734dbb190f580e8382a85e() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax15_0cbe44fbb30efebcb583382fe042cea9() {
        assertEval("argv <- list(c(1.2e+100, 1.3e+100));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax16_5a290edcdd81e3b471f2df6b0f5b65cf() {
        assertEval("argv <- list(structure(c(11368.8306749654, 11347.7238090355, 11341.9182102121, 11392.4878842821, 11367.3445285107, 11337.9245694652, 11332.0560643654, 11356.4682624019, 11387.6852128883, 11364.9132677, 11391.3319486445, 11374.2254758319, 11347.9708838458, 11353.2031583386, 11333.3748092474, 11323.9154302836, 11373.0896246266, 11330.2228965024, 11354.2399044028, 11367.8070731596, 11392.4287034031, 11357.6915504499, 11356.9044667059, 11335.1409634408, 11375.8374661156, 11354.7726842454, 11358.781884864, 11337.5281579299, 11339.0060699913, 11364.6998397419, 11363.2410538797, 11328.3945066198, 11325.487840571, 11367.9956844538, 11388.0030639744, 11364.8664695648, 11362.2630523606, 11359.821940674, 11391.9566656714, 11358.5349275633, 11370.7951655071, 11365.1078852355, 11339.7208074429, 11341.0716148671, 11374.0516736354, 11354.6799581982, 11335.2588737891, 11375.2688788734, 11330.349134828, 11383.518146432, 11366.0251480173, 11362.0011677193, 11346.0144123337, 11354.7192011815, 11358.0308680837, 11335.6606452791, 11360.0741421962, 11328.2693021996, 11342.4429152855, 11337.8889663466, 11342.9353336683, 11385.6565872063, 11354.2364726327, 11377.5989422849, 11384.6433324409, 11351.9186946652, 11327.4665936357, 11346.4841244179, 11373.6608162634, 11346.6330733448, 11367.1289885738, 11381.8430187805, 11382.9292165297, 11350.3951496719, 11349.6345719923, 11385.6811798196, 11368.1021034038, 11374.8755054101, 11365.3712412571, 11386.2157128048, 11343.5611108569, 11336.3882076922, 11385.0515660313, 11358.2337640012, 11384.3940280117, 11336.2435535709, 11376.0672136671, 11373.7149224868, 11389.0607372806, 11361.3352610911, 11372.8220707406, 11350.2233569878, 11330.0611188328, 11387.9111462012, 11342.8262750218, 11364.340121117, 11330.7252423461, 11381.8354922482, 11345.257457911, 11377.7995935893), class = 'Date'), na.rm = TRUE);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax17_846546dbc304f70557403d1282159159() {
        assertEval("argv <- list(structure(c(3L, 2L, 1L), .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')), na.rm = FALSE);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax18_85d9a59ed8eff6f67794e6d1917503eb() {
        assertEval("argv <- list(structure(c(1338544800L, 1338566400L, 1338588000L, 1338609600L, 1338631200L, 1338652800L, 1338674400L, 1338696000L, 1338717600L, 1338739200L, 1338760800L, 1338782400L, 1338804000L, 1338825600L, 1338847200L, 1338868800L, 1338890400L, 1338912000L, 1338933600L, 1338955200L, 1338976800L, 1338998400L, 1339020000L, 1339041600L), class = c('POSIXct', 'POSIXt'), tzone = ''), na.rm = TRUE);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax19_1107df5692a44807570b7e1e965400bd() {
        assertEval("argv <- list(structure(list(c(1L, 2L, 4L), 1:3, c(2L, 1L)), class = c('package_version', 'numeric_version')), na.rm = FALSE);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax2_9e35ea358a88ecb88dd7f0f80d0db911() {
        assertEval("argv <- list(structure(c(1208822400, 1209168000, 1208822400, 1209168000), class = c('POSIXct', 'POSIXt')), na.rm = TRUE);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax20_821788b353e2614d4780d52d65a432e5() {
        assertEval("argv <- list(structure(c(1208822400, 1209168000), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), na.rm = FALSE);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax21_d39d45770d39e8317748f016d8b9ab72() {
        assertEval("argv <- list(structure(c(13823, NA), class = 'Date'), na.rm = TRUE);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax22_31bdd9740ffcce5ce8d2ea3c3d373c15() {
        assertEval("argv <- list(structure(c(7L, 4L, 3L), .Dim = 3L, .Dimnames = structure(list(c('0', '1', '5')), .Names = ''), class = 'table'));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax23_bae62384648b5f4cefe834870254d4a3() {
        assertEval("argv <- list(structure(c(0, 1, 1, 1, 1), .Names = c('Hair', 'Eye', 'Sex', 'Hair:Eye', 'Hair:Sex')));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax24_1b04e27762beea11589c1800adba0560() {
        assertEval("argv <- list(structure(c(Inf, Inf, 2.248e+263, Inf, 3.777e+116, 1.128), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax25_fa768e0c00299531d7dfbd981df08824() {
        assertEval("argv <- list(structure(c(-11.3814849918875, -11.9361690778798, 0.562602893455921, 11.5126028934559, 76.2209544348296, -8.66448499188751, -6.94502893455923, -5.28148499188751, -35.7665182531098, 6.35497106544077, -9.20908119253651, -0.898484991887508, -5.59380090589508, -6.12730922120065, -13.3061334505138, 58.6278831800973, -15.1098009058951, -8.29625696322337, -4.07211681990265, 3.7096551514332, 2.60151500811249, 6.24733923742563, -1.33911681990266, -2.14157287723094, -10.5984849918875, -8.12802893455923, 1.30028697944835, -15.7450289345592, 7.20569077879935, -12.6484849918875, 25.1810423201731, -4.42680090589508, -1.90886979448351), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax26_10e90b2dd304926ccf27c9c4fbba56f7() {
        assertEval("argv <- list(c(1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374947, 0.707106781186547, 0.587785252292473, 0.453990499739547, 0.309016994374947, 0.156434465040231, -1.83697019872103e-16, -0.156434465040231, -0.309016994374948, -0.453990499739547, -0.587785252292473, -0.707106781186548, -0.809016994374948, -0.891006524188368, -0.951056516295154, -0.987688340595138, -1, -0.987688340595138, -0.951056516295154, -0.891006524188368, -0.809016994374947, -0.707106781186547, -0.587785252292473, -0.453990499739547, -0.309016994374947, -0.156434465040231, 6.12323399573677e-17, 0.156434465040231, 0.309016994374947, 0.453990499739547, 0.587785252292473, 0.707106781186548, 0.809016994374947, 0.891006524188368, 0.951056516295154, 0.987688340595138, 1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374947, 0.707106781186548, 0.587785252292473, 0.453990499739547, 0.309016994374947, 0.156434465040231, 6.12323399573677e-17, -0.15643446504023, -0.309016994374947, -0.453990499739548, -0.587785252292473, -0.707106781186547, -0.809016994374947, -0.891006524188368, -0.951056516295154, -0.987688340595138, -1, -0.987688340595138, -0.951056516295154, -0.891006524188368, -0.809016994374948, -0.707106781186547, -0.587785252292473, -0.453990499739548, -0.309016994374948, -0.15643446504023, -1.83697019872103e-16, 0.15643446504023, 0.309016994374947, 0.453990499739547, 0.587785252292473, 0.707106781186547, 0.809016994374947, 0.891006524188368, 0.951056516295154, 0.987688340595138, 1, 0.987688340595138, 0.951056516295154, 0.891006524188368, 0.809016994374948, 0.707106781186547, 0.587785252292473, 0.453990499739548, 0.309016994374948, 0.15643446504023, 3.06161699786838e-16, -0.15643446504023, -0.309016994374947, -0.453990499739547, -0.587785252292473, -0.707106781186547, -0.809016994374947, -0.891006524188368, -0.951056516295153, -0.987688340595138, -1));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax28_51935a25cbf711a8aa1a21dbbe38ae6b() {
        assertEval("argv <- structure(list(2, 3, NA, na.rm = TRUE), .Names = c('',     '', '', 'na.rm'));do.call('max', argv)");
    }

    @Test
    public void TestrGenBuiltinmax_testmax29_c6794ad124a7abc090b128fd7bfcb18c() {
        assertEval("argv <- list(2, 3, NA);do.call('max', argv)");
    }

    @Test
    public void TestrGenBuiltinmax_testmax3_1c9af6b2ed8692613f579104f1967de7() {
        assertEval("argv <- list(5, 1, 0);max(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax4_98b63530746239442da45bb5206423dc() {
        assertEval("argv <- list(c(NA, 1, 2, 3, -Inf, NaN, Inf));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax5_5ebe9da0be4eef7e8bde44e34019b2e2() {
        assertEval("max( );");
    }

    @Test
    public void TestrGenBuiltinmax_testmax6_9c3ab3fc27d45d6f0b8d5c6a8791347f() {
        assertEval("argv <- list(1L, structure(1:10, .Label = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), class = 'factor'));max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax7_e867d6a95b2a75886cdbe954a3270e7a() {
        assertEval("argv <- list(1573.05073007216, 1000);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax8_6a4db49e9be73681652dff7a15f10f48() {
        assertEval("argv <- list(structure(c(6L, 3L, 8L, 4L, 4L, 5L, 7L, 8L, 5L), .Dim = 9L, .Dimnames = structure(list(state.division = c('New England', 'Middle Atlantic', 'South Atlantic', 'East South Central', 'West South Central', 'East North Central', 'West North Central', 'Mountain', 'Pacific')), .Names = 'state.division'), class = 'table'));max(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmax_testmax9_6b37ac20bbd5f6968bbbd7156f6f87c5() {
        assertEval("argv <- list(structure(list(x = c(-1, 1, 1, -1, -1, 1, 1, -1), y = c(-0.701149425287356, -0.701149425287356, -0.701149425287356, -0.701149425287356, 0.701149425287356, 0.701149425287356, 0.701149425287356, 0.701149425287356), z = c(-0.4, -0.4, 0.4, 0.4, -0.4, -0.4, 0.4, 0.4)), .Names = c('x', 'y', 'z'), row.names = c(NA, -8L), class = 'data.frame'), na.rm = FALSE);max(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmaxcol_testmaxcol1_df8662b0e48cf725d3be6b778572cdc3() {
        assertEval("argv <- list(structure(c(80.2, 17, 15, 12, 9.96, 22.2, 83.1, 45.1, 6, 9, 84.84, 22.2, 92.5, 39.7, 5, 5, 93.4, 20.2, 85.8, 36.5, 12, 7, 33.77, 20.3, 76.9, 43.5, 17, 15, 5.16, 20.6, 76.1, 35.3, 9, 7, 90.57, 26.6, 83.8, 70.2, 16, 7, 92.85, 23.6, 92.4, 67.8, 14, 8, 97.16, 24.9, 82.4, 53.3, 12, 7, 97.67, 21, 82.9, 45.2, 16, 13, 91.38, 24.4, 87.1, 64.5, 14, 6, 98.61, 24.5, 64.1, 62, 21, 12, 8.52, 16.5, 66.9, 67.5, 14, 7, 2.27, 19.1, 68.9, 60.7, 19, 12, 4.43, 22.7, 61.7, 69.3, 22, 5, 2.82, 18.7, 68.3, 72.6, 18, 2, 24.2, 21.2, 71.7, 34, 17, 8, 3.3, 20, 55.7, 19.4, 26, 28, 12.11, 20.2, 54.3, 15.2, 31, 20, 2.15, 10.8, 65.1, 73, 19, 9, 2.84, 20, 65.5, 59.8, 22, 10, 5.23, 18, 65, 55.1, 14, 3, 4.52, 22.4, 56.6, 50.9, 22, 12, 15.14, 16.7, 57.4, 54.1, 20, 6, 4.2, 15.3, 72.5, 71.2, 12, 1, 2.4, 21, 74.2, 58.1, 14, 8, 5.23, 23.8, 72, 63.5, 6, 3, 2.56, 18, 60.5, 60.8, 16, 10, 7.72, 16.3, 58.3, 26.8, 25, 19, 18.46, 20.9, 65.4, 49.5, 15, 8, 6.1, 22.5, 75.5, 85.9, 3, 2, 99.71, 15.1, 69.3, 84.9, 7, 6, 99.68, 19.8, 77.3, 89.7, 5, 2, 100, 18.3, 70.5, 78.2, 12, 6, 98.96, 19.4, 79.4, 64.9, 7, 3, 98.22, 20.2, 65, 75.9, 9, 9, 99.06, 17.8, 92.2, 84.6, 3, 3, 99.46, 16.3, 79.3, 63.1, 13, 13, 96.83, 18.1, 70.4, 38.4, 26, 12, 5.62, 20.3, 65.7, 7.7, 29, 11, 13.79, 20.5, 72.7, 16.7, 22, 13, 11.22, 18.9, 64.4, 17.6, 35, 32, 16.92, 23, 77.6, 37.6, 15, 7, 4.97, 20, 67.6, 18.7, 25, 7, 8.65, 19.5, 35, 1.2, 37, 53, 42.34, 18, 44.7, 46.6, 16, 29, 50.43, 18.2, 42.8, 27.7, 22, 29, 58.33, 19.3), .Dim = c(6L, 47L), .Dimnames = list(c('Fertility', 'Agriculture', 'Examination', 'Education', 'Catholic', 'Infant.Mortality'), c('Courtelary', 'Delemont', 'Franches-Mnt', 'Moutier', 'Neuveville', 'Porrentruy', 'Broye', 'Glane', 'Gruyere', 'Sarine', 'Veveyse', 'Aigle', 'Aubonne', 'Avenches', 'Cossonay', 'Echallens', 'Grandson', 'Lausanne', 'La Vallee', 'Lavaux', 'Morges', 'Moudon', 'Nyone', 'Orbe', 'Oron', 'Payerne', 'Paysd'enhaut', 'Rolle', 'Vevey', 'Yverdon', 'Conthey', 'Entremont', 'Herens', 'Martigwy', 'Monthey', 'St Maurice', 'Sierre', 'Sion', 'Boudry', 'La Chauxdfnd', 'Le Locle', 'Neuchatel', 'Val de Ruz', 'ValdeTravers', 'V. De Geneve', 'Rive Droite', 'Rive Gauche'))), 1L); .Internal(max.col(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmaxcol_testmaxcol2_3e069e10258ed1d236f496c702d847de() {
        assertEval("argv <- list(structure(c(0.0140185568997224, 0.0152950000405453, 0.013933189413423, 0.0141545247888734, 0.0144656253644622, 0.0138841285101751, 0.014995293880605, 0.0135531935867069, 0.0136464824425927, 0.0139216121812551, 0.0150015663096977, 0.0141230892456885, 0.013614290948012, 0.0169498879707739, 0.0167919904349555, 0.0164281655519131, 0.0145450130659148, 0.0154935322596005, 0.0140566103751186, 0.0137862479562347, 0.0138916844301758, 0.0144143878263478, 0.0153699249520618, 0.0156955405518398, 0.0143684930741837, 0.991123944314599, 0.772371856665358, 0.998388573397845, 0.997744681008954, 0.935000528851613, 0.995759465226583, 0.998319991897437, 0.998446741491899, 0.997291233910865, 0.998453850443283, 0.449550979690061, 0.99765492178392, 0.0744670889060699, 0.997953251276348, 0.998367231220745, 0.998303801028119, 0.996490251221358, 0.987068752837462, 0.963362766144961, 0.997745619693091, 0.998180187351627, 0.995230116685749, 0.99834615324817, 0.998224606721368, 0.998138182928866, 0.000101796455995556, 0.0169548122668949, 0.00010041243364593, 0.994976075194857, 0.000116262428296307, 0.000266333816370553, 0.000213420942072358, 0.000150164062855871, 9.91852669694001e-05, 0.962237984681016, 0.000109709045973819, 0.363503438381572, 0.000165884012322677, 0.000404227768170316, 0.000101407372837694, 0.000138346452367636, 0.76867700377653, 0.000101067307394145, 0.000798310678132636, 0.439735407970107, 0.000105640126458538, 0.000103729730504055, 0.000157422658078269, 0.00062878104546921, 0.000140302481934868, 0.987636544924171, 0.986762198204236, 0.987695606647598, 0.987542563977846, 0.987328468487257, 0.987729584212166, 0.986966061808917, 0.987959390267427, 0.987894530108167, 0.987703622276188, 0.986961786481457, 0.987564327481863, 0.987916920251847, 0.98565103396999, 0.98575611086066, 0.985998830615913, 0.98727397408636, 0.986627618096195, 0.987610242071539, 0.987797448350422, 0.987724349638781, 0.987363673212559, 0.986711269247982, 0.986491053812255, 0.987395229430566, 0.0127450421932153, 0.00673790924500044, 0.0168765170487183, 0.015797380803532, 0.00875985277873091, 0.0142537568101031, 0.0172964637554702, 0.0177648866573519, 0.0158550778308362, 0.0172334564486378, 0.00522951225361075, 0.016267073149734, 0.00347221059583105, 0.0218803200901225, 0.0183403081414579, 0.0180163362514856, 0.0146261930363668, 0.0119682371438135, 0.00971509310832369, 0.0157071233034631, 0.017455515535567, 0.0139105878597395, 0.0174050248646065, 0.0173796025035352, 0.0168918350504782, 0.00106971573173608, 0.0026383344434856, 0.00106703814487522, 0.0135614845327103, 0.0010949673490627, 0.00126684800065677, 0.0012190851300456, 0.00114670950680761, 0.00106469628452917, 0.00946684926508704, 0.00108427378412549, 0.00489096395354091, 0.00116581741675497, 0.00136406369196257, 0.00106938597766297, 0.00112914854449728, 0.00664571845549644, 0.00106837166942789, 0.00153810249624049, 0.0051794966429432, 0.00107683746869901, 0.00107356047093305, 0.00115632815053843, 0.001475874716352, 0.00113310775095649, 0.000705529701133523, 0.000706190813132159, 0.000705483416292851, 0.000705607277564461, 0.000705767694047911, 0.000705456690994395, 0.000706040550884142, 0.000705277731844386, 0.000705325918720134, 0.00070547711802582, 0.000706043725519247, 0.000705586003991082, 0.000705308033747408, 0.000706976814055453, 0.000706900888924168, 0.000706734153004456, 0.000705809204506355, 0.000706288779684405, 0.000705550244606539, 0.000705403095546089, 0.000705460812978617, 0.000705740784771567, 0.000706233802920496, 0.000706387215078423, 0.000705716602186515, 0.00537527373619432, 0.193553056279976, 0.000869791621482113, 0.00126068143747944, 0.0477132994644455, 0.00247011263414166, 0.000876993026210466, 0.000793804652755058, 0.00147446124252569, 0.000818798505743392, 0.527720370257185, 0.0012613575859543, 0.931485133910046, 0.000794860447953985, 0.000799403966921179, 0.000843774285071599, 0.00203097055872496, 0.00804383321163345, 0.0255537088264535, 0.00126855734163029, 0.000930853589102135, 0.00281671019786704, 0.000858777960111907, 0.000915470358337216, 0.000986308498091386, 0.999944492377256, 0.98624753604171, 0.999945310582066, 0.00303527549384713, 0.999935958318038, 0.99984366374275, 0.999876760118408, 0.999915533835607, 0.999946031942947, 0.0270168111120999, 0.999939809617296, 0.622685795280626, 0.999906081646851, 0.999754847875723, 0.999944697838299, 0.999922757726417, 0.198924025871316, 0.99994491987507, 0.99948964681356, 0.539122196215121, 0.999942224996369, 0.999943338667082, 0.999911124821608, 0.999605022779117, 0.999921489451661), .Dim = c(75L, 3L), .Dimnames = list(    NULL, c('c', 's', 'v'))), 1L); .Internal(max.col(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmaxcol_testmaxcol3_207ddcc22fe384dfefb0977a8c29e2d4() {
        assertEval("argv <- list(structure(list(), .Dim = 0:1), 1L); .Internal(max.col(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean1_6d63044d182de4a3362485ccc134f396() {
        assertEval("argv <- list(c(95.4489970123773, 98.5489970123773, 98.5489970123773, 98.5489970123773, 98.5489970123773, 98.5489970123773)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean10_c131cf0ff3309cb502d49c3a8e5928ab() {
        assertEval("argv <- list(c(TRUE, FALSE, TRUE, TRUE)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean11_d6c85ab05506b4304e0869814432bd72() {
        assertEval("argv <- list(structure(c(103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662, 103.87323943662), .Names = c('2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72'))); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean12_eca7c9ecabad037b71ed081282c83c5c() {
        assertEval("argv <- list(c(-1.12778377684043, -12820.0784261145, -21650982809.6744, -473300382255715392, -6.08456909882282e+25, -3.04622557026196e+34, -4.60125024792566e+43, -1.76183826972506e+53, -1.5069799345972e+63, -2.61556777274611e+73, -8.54170618068872e+83, -4.9383857330861e+94, -4.80716085942859e+105, -7.55412056676629e+116, -1.84898368353639e+128, -6.83535188151783e+139, -3.71562599613334e+151, -2.90089508183654e+163, -3.18582547396557e+175, -4.83110332887119e+187, -9.94902790498679e+199, -2.74100158340596e+212, -9.96611412047338e+224, -4.72336572671053e+237, -2.88514442494869e+250, -2.24780296109123e+263, -2.21240023126594e+276, -2.72671165723473e+289, -4.17369555651928e+302, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean13_46152cb9e4ab3bed2c659c2bc5b7cc8a() {
        assertEval("argv <- list(1:10); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean14_290156131741c9e227df181becc40a71() {
        assertEval("argv <- list(c(-2.16610675289233, 2.16610675289233)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean15_9abd3e7f781e3925216367ec53ddb5c4() {
        assertEval("argv <- list(c(-Inf, Inf)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean16_da3df535b6e27638cb42086b8ae57a46() {
        assertEval("argv <- list(numeric(0)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean17_3ff1f045467adce67fbf87c1dec8e1f2() {
        assertEval("argv <- list(c(1.77635683940025e-15, 7.105427357601e-14, 4.54747350886464e-13, 4.54747350886464e-13, 1.81898940354586e-12, 7.27595761418343e-12, 7.27595761418343e-12, 1.45519152283669e-11, 2.91038304567337e-11, 5.82076609134674e-11)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean19_6620b77cdd646a0c73fb0012b5450b0f() {
        assertEval("argv <- structure(list(x = structure(c(31, NA, NA, 31), units = 'days',     class = 'difftime'), na.rm = TRUE), .Names = c('x', 'na.rm'));do.call('mean', argv)");
    }

    @Test
    public void TestrGenBuiltinmean_testmean2_5b80432d7da7d000026ef5f85256359c() {
        assertEval("argv <- list(c(0.104166666666667, 0.285714285714286, 0.285714285714286, NA)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean20_2aab03856282eb7586a4da27a0a02edc() {
        assertEval("argv <- structure(list(x = c(TRUE, FALSE, TRUE, TRUE)), .Names = 'x');do.call('mean', argv)");
    }

    @Test
    public void TestrGenBuiltinmean_testmean21_9c2cc664d81f105e3d43c7182593c447() {
        assertEval("argv <- structure(list(x = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,     50), trim = 0.5), .Names = c('x', 'trim'));do.call('mean', argv)");
    }

    @Test
    public void TestrGenBuiltinmean_testmean22_d3aa4559fd58c87a42a16684ced65048() {
        assertEval("argv <- structure(list(x = structure(c(2L, 1L, 2L, 2L), .Label = c('FALSE',     'TRUE'), class = 'factor')), .Names = 'x');do.call('mean', argv)");
    }

    @Test
    public void TestrGenBuiltinmean_testmean23_c5d112ff2a8ebbd24cafaf3cd787e26f() {
        assertEval("argv <- structure(list(x = c(83.7010937038573, 61.9895951152624,     259.87035947113, 58.4906618904788, 24.7573173158259, 27.3459081536165,     286.404145870861, 31.5386609266279, 11.4645558243349, 48.261763556938,     24.118141168773, 25.3079966732443)), .Names = 'x');do.call('mean', argv)");
    }

    @Test
    public void TestrGenBuiltinmean_testmean3_3acc6ba76dfd344245f73f1dbe114f2c() {
        assertEval("argv <- list(structure(c(59.8164361195774, 16.3642182644146, 111.747292631572, 33.1308121255244, 111.087966260681, 17.8530570409338, 109.920202428016, 21.131775457295, 0, 0, 16.3642182644146, 161.535939255833, 37.6748802609012, 67.2883398244609, 38.6252764993654, 76.8303935707398, 28.4778348377214, 75.3935967432183, 0, 0, 111.747292631572, 37.6748802609012, 398.433064545232, 41.228743361535, 56.6580728922266, 34.5026155985806, 59.292325604515, 36.0412835987832, 0, 0, 33.1308121255244, 67.2883398244609, 41.228743361535, 1176.45954558834, 42.4165944769534, 69.928075668575, 32.9974365646273, 68.4061187132491, 0, 0, 111.087966260681, 38.6252764993654, 56.6580728922266, 42.4165944769534, 1738.19143232074, 35.3995546471346, 61.6125843485971, 37.0026062612778, 0, 0, 17.8530570409338, 76.8303935707398, 34.5026155985806, 69.928075668575, 35.3995546471346, 3334.81773597237, 25.0719711616328, 77.7527739510622, 0, 0, 109.920202428016, 28.4778348377214, 59.292325604515, 32.9974365646273, 61.6125843485971, 25.0719711616328, 3310.21623403309, 26.7939833992556, 0, 0, 21.131775457295, 75.3935967432183, 36.0412835987832, 68.4061187132491, 37.0026062612778, 77.7527739510622, 26.7939833992556, 6145.64636329227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(10L, 10L))); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean4_982f7402dc23c0b0c4a2881a2c631c83() {
        assertEval("argv <- list(structure(c(36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42), .Dim = c(10L, 10L), .Dimnames = list(c('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10'), c('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10')))); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean5_21e9580475604a7da578856f01a44fa0() {
        assertEval("argv <- list(c(FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean6_d1689d9f0deb0058fec8487bd4b1c53e() {
        assertEval("argv <- list(c(-0.207917278019599, -0.0833690664718293, 0.878133487533042, 0.070508391424576, 0.460916205989202, 0.497850478229239, 0.400771450594052, 0.400771450594052, -0.380471001012383, -0.686852851893526, 1.25381492106993, 0.821581081637487, -0.402884835299076, 0.821581081637487, 0.11068271594512, -0.560475646552213, 1.55870831414912, -0.686852851893526, -1.26539635156826, 1.55870831414912, 0.11068271594512, 1.20796199830499, 0.153373117836515, -0.694706978920513, -0.466655353623219, 0.821581081637487, -1.06782370598685, 0.779965118336318, -0.402884835299076, -1.68669331074241, 0.460916205989202, -0.295071482992271, -0.207917278019599, 0.460916205989202, 1.25381492106993, -0.0833690664718293, 0.359813827057364, -1.06782370598685, 1.71506498688328, 0.11068271594512, 0.837787044494525, 1.78691313680308, 0.426464221476814, -0.0833690664718293, 0.426464221476814, -1.26506123460653, 0.688640254100091, 0.878133487533042, 0.497850478229239, -0.217974914658295)); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean7_242eb54544a2161448a58f7f14b6dbd6() {
        assertEval("argv <- list(1.47130567537631e-314); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean8_a91ee89ef035cbad22852b11a3531341() {
        assertEval("argv <- list(4.9306115419259e+108); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmean_testmean9_09c9d5009e4805408150b2a3a66ca4ee() {
        assertEval("argv <- list(structure(c(2134, 1863, 1877, 1877, 1492, 1249, 1280, 1131, 1209, 1492, 1621, 1846, 2103, 2137, 2153, 1833, 1403, 1288, 1186, 1133, 1053, 1347, 1545, 2066, 2020, 2750, 2283, 1479, 1189, 1160, 1113, 970, 999, 1208, 1467, 2059, 2240, 1634, 1722, 1801, 1246, 1162, 1087, 1013, 959, 1179, 1229, 1655, 2019, 2284, 1942, 1423, 1340, 1187, 1098, 1004, 970, 1140, 1110, 1812, 2263, 1820, 1846, 1531, 1215, 1075, 1056, 975), .Tsp = c(1974, 1979.58333333333, 12), class = 'ts')); .Internal(mean(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinmeanPOSIXct_testmeanPOSIXct1_5cdc4a7e081ae1ca274e59ebfd63e627() {
        assertEval("argv <- structure(list(x = structure(1412795929.08562, class = c('POSIXct',     'POSIXt'))), .Names = 'x');do.call('mean.POSIXct', argv)");
    }

    @Test
    public void TestrGenBuiltinmeandefault_testmeandefault1_aff5510f988974e3de95c8cf8b010743() {
        assertEval("argv <- structure(list(x = structure(c(2L, 1L, 2L, 2L), .Label = c('FALSE',     'TRUE'), class = 'factor')), .Names = 'x');do.call('mean.default', argv)");
    }

    @Test
    public void TestrGenBuiltinmeandifftime_testmeandifftime1_8c979d698513e418dd8055b2c9a377b9() {
        assertEval("argv <- structure(list(x = structure(c(31, NA, NA, 31), units = 'days',     class = 'difftime'), na.rm = TRUE), .Names = c('x', 'na.rm'));do.call('mean.difftime', argv)");
    }

    @Test
    public void TestrGenBuiltinmemDecompress_testmemDecompress1_e671c3385759ba61495ddb5408e18509() {
        assertEval("argv <- structure(list(from = as.raw(c(253, 55, 122, 88, 90,     0, 0, 1, 105, 34, 222, 54, 2, 0, 33, 1, 28, 0, 0, 0, 16,     207, 88, 204, 224, 7, 207, 0, 28, 93, 0, 24, 140, 130, 182,     196, 17, 52, 92, 78, 225, 221, 115, 179, 63, 98, 20, 119,     183, 90, 101, 43, 5, 112, 179, 75, 69, 222, 0, 0, 155, 136,     185, 16, 0, 1, 52, 208, 15, 0, 0, 0, 105, 254, 40, 141, 62,     48, 13, 139, 2, 0, 0, 0, 0, 1, 89, 90)), type = 'xz', asChar = TRUE),     .Names = c('from', 'type', 'asChar'));do.call('memDecompress', argv)");
    }

    @Test
    public void TestrGenBuiltinmerge_testmerge1_67f3d35bee7a44212d18c4947fe9cd45() {
        assertEval("argv <- list(c(0L, 0L, 0L, 0L, 0L), 0L, FALSE, TRUE); .Internal(merge(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmerge_testmerge2_5e73e0cf406f0165a44a7bd568061a10() {
        assertEval("argv <- list(c(0L, 0L, 0L, 0L, 0L), 0L, TRUE, FALSE); .Internal(merge(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmerge_testmerge3_ab877162a6a6d8ad05f8a857a91d8755() {
        assertEval("argv <- list(c(0L, 0L, 0L, 3L, 4L), c(0L, 0L, 0L, 3L, 4L), FALSE, FALSE); .Internal(merge(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinmerge_testmerge5_84e059f757cce8c6aacf4d0e6f024007() {
        assertEval("argv <- structure(list(x = structure(list(gender = structure(c(1L,     1L, 2L), .Label = c('F', 'M'), class = 'factor'), age = c(20,     30, 40), filename = structure(1:3, .Label = c('q1.csv', 'q2.csv',     'q3.csv'), class = 'factor')), .Names = c('gender', 'age',     'filename'), row.names = c(NA, -3L), class = 'data.frame'),     y = structure(list(effsize = c(3.5, 2, 1.7), constraint = c(0.40625,         0.5, 0.882), outdegree = c(4, 2, 2), indegree = c(4,         2, 3), efficiency = c(0.625, 0.5, 0.444444444444444),         hierarchy = c(0, 0, 0.333333333333333), centralization = c(0.833333333333333,             1, 0.333333333333333), gden = c(0.5, 0.666666666666667,             0.666666666666667), ego.gden = c(0.166666666666667,             0, 0.5), filename = structure(1:3, .Label = c('q1.csv',             'q2.csv', 'q3.csv'), class = 'factor')), .Names = c('effsize',         'constraint', 'outdegree', 'indegree', 'efficiency',         'hierarchy', 'centralization', 'gden', 'ego.gden', 'filename'),         row.names = c('q1.csv', 'q2.csv', 'q3.csv'), class = 'data.frame'),     by = 'filename'), .Names = c('x', 'y', 'by'));do.call('merge', argv)");
    }

    @Test
    public void TestrGenBuiltinmin_testmin1_9fb43b17d6d8bc2e8f0f54b45dcca106() {
        assertEval("argv <- list(c(10L, 1L));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin10_3eff33ade5effcf4f29e3a2b76c52f0e() {
        assertEval("argv <- list(c(2.00256647265648e-308, 2.22284878464869e-308, 2.22507363599982e-308, 2.2250738585072e-308, 2.22507408101459e-308, 2.22729893236571e-308, 2.44758124435792e-308));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin11_44b9e8718656525c9d5c10c50d0eb959() {
        assertEval("argv <- list(c(FALSE, FALSE));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin12_7c86bff658ab8866c2cb751607271b09() {
        assertEval("argv <- list(c(2, 13954490295224484, 9.73638996997572e+31, 6.79331796732739e+47, 4.73986448237219e+63, 3.30711964599708e+79, 2.30745845026066e+95, 1.60997032753976e+111, 1.12331576556267e+127, 7.83764947450857e+142, 5.46852017646992e+158, 3.8155205865895e+174, 2.66218224983966e+190, 1.85746981847535e+206, 1.29600222777925e+222, 9.04252525506755e+237, 6.30919154580821e+253, 4.40207760983472e+269, 3.07143746426322e+285, 2.14301721437253e+301));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin13_341893ea4787c250bc3e31fa673bb2f5() {
        assertEval("min( );");
    }

    @Test
    public void TestrGenBuiltinmin_testmin14_268ff60da1e88efcacbc32726f1ff677() {
        assertEval("argv <- list(structure(c(13823, NA), class = 'Date'), na.rm = TRUE);min(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin15_e4f80ff9bce87b9dc26b274dbfdd036c() {
        assertEval("argv <- list(structure(c(1208822400, 1209168000), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), na.rm = FALSE);min(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin16_5973a8bf09d0a8d665236ec9ad4c5ef9() {
        assertEval("argv <- list(3L, 7);min(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin17_4ccc1bfc8bf36a5afc7cbb6d5592b4e3() {
        assertEval("argv <- list(c(-7, -5.6, -4.2, -2.8, -1.4, 0, 1.4, 2.8, 4.2, 5.6, 7));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin18_3dcb0e94d45cec63699680dc9ec09005() {
        assertEval("argv <- list(c(4.5241870901798, 0.211646098116025, 1.86003798801034e-43));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin19_16be5bbb78cfa3d6cf57e7848eac025c() {
        assertEval("argv <- list(structure(c(-0.562441486309934, -0.588967592535822, 0.0277608937997097, 0.568074124752969, 3.89980510825846, -0.428174866497729, -0.343990813420242, -0.260996370058754, -2.31774610938305, 0.314764947225063, -0.455124436264437, -0.0444006414474544, -0.27748974692001, -0.303134023269405, -0.670168347915028, 2.92643313367, -0.749546667806845, -0.410394401887929, -0.203261263063707, 0.1847365997012, 0.128559671155683, 0.313558179929332, -0.0668425264405297, -0.106427678524531, -0.523747793519006, -0.402585404761851, 0.0642079595716389, -0.779859286629166, 0.356484381211739, -0.625053119472271, 1.31547628490512, -0.21959878152752, -0.102402088986461), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin2_1b48d9e77f21ab2b4adba5adb1cb2da0() {
        assertEval("argv <- list(structure(c(0.25069599964819, 0.252830784944624), .Dim = 1:2));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin20_574784a10aa58b754300bd8152cf28f2() {
        assertEval("argv <- list(numeric(0));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin22_53db94fd42720d3941a715dfa4f99548() {
        assertEval("argv <- list(2, 3, NA);do.call('min', argv)");
    }

    @Test
    public void TestrGenBuiltinmin_testmin3_de90589d947add75f389d19743d98c52() {
        assertEval("argv <- list(c(-3.37619548064471, -3.28575139573497, -3.19530731082523, -3.10486322591549, -3.01441914100575, -2.923975056096, -2.83353097118626, -2.74308688627652, -2.65264280136678, -2.56219871645704, -2.4717546315473, -2.38131054663755, -2.29086646172781, -2.20042237681807, -2.10997829190833, -2.01953420699859, -1.92909012208884, -1.8386460371791, -1.74820195226936, -1.65775786735962, -1.56731378244988, -1.47686969754013, -1.38642561263039, -1.29598152772065, -1.20553744281091, -1.11509335790117, -1.02464927299142, -0.934205188081682, -0.84376110317194, -0.753317018262198, -0.662872933352456, -0.572428848442715, -0.481984763532973, -0.39154067862323, -0.301096593713489, -0.210652508803747, -0.120208423894005, -0.029764338984263, 0.0606797459254791, 0.151123830835221, 0.241567915744963, 0.332012000654705, 0.422456085564447, 0.512900170474189, 0.603344255383931, 0.693788340293673, 0.784232425203414, 0.874676510113156, 0.965120595022898, 1.05556467993264, 1.14600876484238, 1.23645284975212, 1.32689693466187, 1.41734101957161, 1.50778510448135, 1.59822918939109, 1.68867327430083, 1.77911735921058, 1.86956144412032, 1.96000552903006, 2.0504496139398, 2.14089369884954, 2.23133778375928, 2.32178186866903, 2.41222595357877, 2.50267003848851, 2.59311412339825, 2.68355820830799, 2.77400229321774, 2.86444637812748, 2.95489046303722, 3.04533454794696, 3.1357786328567, 3.22622271776645, 3.31666680267619, 3.40711088758593, 3.49755497249567, 3.58799905740541, 3.67844314231516, 3.7688872272249, 3.85933131213464, 3.94977539704438, 4.04021948195412, 4.13066356686387, 4.22110765177361, 4.31155173668335, 4.40199582159309, 4.49243990650283, 4.58288399141258, 4.67332807632232, 4.76377216123206, 4.8542162461418, 4.94466033105154, 5.03510441596129, 5.12554850087103, 5.21599258578077, 5.30643667069051, 5.39688075560025, 5.48732484051, 5.57776892541974, 5.66821301032948, 5.75865709523922, 5.84910118014896, 5.9395452650587, 6.02998934996845, 6.12043343487819, 6.21087751978793, 6.30132160469767, 6.39176568960741, 6.48220977451716, 6.5726538594269, 6.66309794433664, 6.75354202924638, 6.84398611415612, 6.93443019906586, 7.02487428397561, 7.11531836888535, 7.20576245379509, 7.29620653870483, 7.38665062361457, 7.47709470852432, 7.56753879343406, 7.6579828783438, 7.74842696325354, 7.83887104816328, 7.92931513307303, 8.01975921798277, 8.11020330289251));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin4_7a8b139c2389992575b5615a63b50dab() {
        assertEval("argv <- list(c(NA, 1, 2, 3, -Inf, NaN, Inf));min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin5_cea78acf4c8889e24182ccb6af340f77() {
        assertEval("argv <- list(structure(list(c(1L, 2L, 4L), 1:3, c(2L, 1L)), class = c('package_version', 'numeric_version')), na.rm = FALSE);min(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin6_a4ec5c86068ddf5916f2532ecc622948() {
        assertEval("argv <- list(structure(c(1338544800L, 1338566400L, 1338588000L, 1338609600L, 1338631200L, 1338652800L, 1338674400L, 1338696000L, 1338717600L, 1338739200L, 1338760800L, 1338782400L, 1338804000L, 1338825600L, 1338847200L, 1338868800L, 1338890400L, 1338912000L, 1338933600L, 1338955200L, 1338976800L, 1338998400L, 1339020000L, 1339041600L), class = c('POSIXct', 'POSIXt'), tzone = ''), na.rm = TRUE);min(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin7_63b353dc1cec76c9466ce39a256673e1() {
        assertEval("argv <- list(1.234e+100);min(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin8_64e6a569096300db1b5d75de4779ab74() {
        assertEval("argv <- list(structure(c(3L, 2L, 1L), .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')), na.rm = FALSE);min(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinmin_testmin9_6a1c474d9c4291af3bd1ac906811bb9e() {
        assertEval("argv <- list(structure(c(11368.8306749654, 11347.7238090355, 11341.9182102121, 11392.4878842821, 11367.3445285107, 11337.9245694652, 11332.0560643654, 11356.4682624019, 11387.6852128883, 11364.9132677, 11391.3319486445, 11374.2254758319, 11347.9708838458, 11353.2031583386, 11333.3748092474, 11323.9154302836, 11373.0896246266, 11330.2228965024, 11354.2399044028, 11367.8070731596, 11392.4287034031, 11357.6915504499, 11356.9044667059, 11335.1409634408, 11375.8374661156, 11354.7726842454, 11358.781884864, 11337.5281579299, 11339.0060699913, 11364.6998397419, 11363.2410538797, 11328.3945066198, 11325.487840571, 11367.9956844538, 11388.0030639744, 11364.8664695648, 11362.2630523606, 11359.821940674, 11391.9566656714, 11358.5349275633, 11370.7951655071, 11365.1078852355, 11339.7208074429, 11341.0716148671, 11374.0516736354, 11354.6799581982, 11335.2588737891, 11375.2688788734, 11330.349134828, 11383.518146432, 11366.0251480173, 11362.0011677193, 11346.0144123337, 11354.7192011815, 11358.0308680837, 11335.6606452791, 11360.0741421962, 11328.2693021996, 11342.4429152855, 11337.8889663466, 11342.9353336683, 11385.6565872063, 11354.2364726327, 11377.5989422849, 11384.6433324409, 11351.9186946652, 11327.4665936357, 11346.4841244179, 11373.6608162634, 11346.6330733448, 11367.1289885738, 11381.8430187805, 11382.9292165297, 11350.3951496719, 11349.6345719923, 11385.6811798196, 11368.1021034038, 11374.8755054101, 11365.3712412571, 11386.2157128048, 11343.5611108569, 11336.3882076922, 11385.0515660313, 11358.2337640012, 11384.3940280117, 11336.2435535709, 11376.0672136671, 11373.7149224868, 11389.0607372806, 11361.3352610911, 11372.8220707406, 11350.2233569878, 11330.0611188328, 11387.9111462012, 11342.8262750218, 11364.340121117, 11330.7252423461, 11381.8354922482, 11345.257457911, 11377.7995935893), class = 'Date'), na.rm = TRUE);min(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinminus_Date_testminus_Date1_83c5161cacbf2f9f38a80584b3e88064() {
        assertEval("argv <- structure(list(e1 = structure(14580, class = 'Date'),     e2 = structure(1, units = 'days', class = 'difftime')), .Names = c('e1',     'e2'));do.call('-.Date', argv)");
    }

    @Test
    public void TestrGenBuiltinmode_testmode1_2d99f5cd6a178f9649dad98894d3e846() {
        assertEval("argv <- structure(list(x = NA_real_), .Names = 'x');do.call('mode', argv)");
    }

    @Test
    public void TestrGenBuiltinnames_testnames1_3355b6e340b2d268485ee587b823330f() {
        assertEval("argv <- list(structure(list(size = 113, isdir = FALSE, mode = structure(436L, class = 'octmode'), mtime = structure(1395082088.72988, class = c('POSIXct', 'POSIXt')), ctime = structure(1395082088.72988, class = c('POSIXct', 'POSIXt')), atime = structure(1395082088.77388, class = c('POSIXct', 'POSIXt')), uid = 1001L, gid = 1001L, uname = 'roman', grname = 'roman'), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = '/tmp/RtmptPgrXI/file55711ba85492'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames10_8a197025890e8bc6eab59f7e6840b866() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames11_4acabe50ac6945499e65f537a2ccd957() {
        assertEval("argv <- list(structure(c(NA, NA, NA, NA, NA, 1L, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames12_6c9070b386e6a9d43001ad4a2a80b1f4() {
        assertEval("argv <- list(structure(list(V1 = c(-1L, -2L, 1L, 2L, 3L, 4L, 5L), V2 = c(-3L, -4L, 6L, 7L, 8L, 9L, 10L), V3 = c(-5L, -6L, 11L, 12L, 13L, 14L, 15L), V4 = c(-7L, -8L, 16L, 17L, 18L, 19L, 20L), V5 = c(-9L, -10L, 21L, 22L, 23L, 24L, 25L)), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(NA, 7L), class = 'data.frame'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames13_1fbe113577e256d270a7514197b8a703() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), class = 'data.frame', row.names = 1947:1962, terms = quote(Employed ~     GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year)));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames14_8b3eec9237f086d76f8f8f6de18ed4af() {
        assertEval("argv <- list(structure(list(ii = 1:10, xx = c(-9.42477796076938, -6.28318530717959, -3.14159265358979, 0, 3.14159265358979, 6.28318530717959, 9.42477796076938, 12.5663706143592, 15.707963267949, 18.8495559215388)), .Names = c('ii', 'xx')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames15_419a73a144622b0f43878d69287aff5e() {
        assertEval("argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'), Soft = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L), .Label = c('Hard', 'Medium', 'Soft'), class = 'factor')), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), class = 'data.frame', row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), terms = quote(cbind(X, M) ~ M.user + Temp + Soft)));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames16_7c2429941efa2966c421240e10bf6879() {
        assertEval("argv <- list(structure(list(), .Names = character(0)));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames17_fad62e5287858a683361909d8dad38b7() {
        assertEval("argv <- list(c(1281L, 1283L));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames18_5a295b807d2b56126dbac07686ac5dfb() {
        assertEval("argv <- list(structure(list(itemBullet = '• '), .Names = 'itemBullet'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames19_51cdb7b68468aee6aa02978ba6a46fe0() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils'), frow = c(2417L, 2417L, 2418L, 2418L, 2420L, 2420L, 2422L, 2422L, 2423L, 2424L, 2426L, 2426L, 2426L, 2426L), lrow = c(2417L, 2417L, 2419L, 2419L, 2421L, 2421L, 2422L, 2422L, 2434L, 2425L, 2433L, 2433L, 2433L, 2433L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 14L), class = 'data.frame'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames2_29141832f4c3c28823f2d5cddd732819() {
        assertEval("argv <- list(list(character(0), numeric(0), numeric(0), complex(0), integer(0), logical(0), character(0)));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames20_fdc832784b9229270806ce5882aefef9() {
        assertEval("argv <- list(c(-21.222245139688+176.377752294836i, -21.222245139688-176.377752294836i, 61.0965873274464+76.7794305756989i, 61.0965873274464-76.7794305756989i, -11.748684375517+0i));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames21_0f71460a2e421a30a961f445640b3845() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames22_e36559d882b21d52c899aacff82f670b() {
        assertEval("argv <- list(structure(list(`Surv(time, status)` = structure(c(9, 1, 1, 6, 6, 8, 1, 1, 0, 1, 1, 0), .Dim = c(6L, 2L), .Dimnames = list(NULL, c('time', 'status')), class = 'Surv', type = 'right'), x = c(0, 1, 1, 1, 0, 0)), .Names = c('Surv(time, status)', 'x'), class = 'data.frame', row.names = c(1L, 3L, 4L, 5L, 6L, 7L)));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames23_99aa6cad36e0d65c886f1bc72501d62d() {
        assertEval("argv <- list(structure(list(xlev = structure(list(), .Names = character(0))), .Names = 'xlev'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames24_6b011f295a2c6c3b3ebf7f5bbcf81669() {
        assertEval("argv <- list(structure(c(0.434200949779115, NA, 0.907914219551846, 0.907914219551846, 0.907914219551846, 0.434200949779115, 0.434200949779115), .Names = c('1', NA, '3', '4', '5', '6', '7')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames25_a87e2b2072b78cc63d1e5fe12d1a4e79() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames26_4e5ee3c1d25474beae3404ba8ef3aa83() {
        assertEval("argv <- list(structure(c(3.22711508258913, 3.17840134153376, 3.17811325231463, 3.14144977340047, 3.21272015441784, 3.17926446433903, 3.19284611518884, 3.21218760440396, 3.19838213000829, 3.21827285357145, 3.33284226699435, 3.33203427702752, 3.24353410183206, 3.24674470972384, 3.23477029516092, 3.19256745333655, 3.19728055812562, 3.18184358794477, 3.25647720624168, 3.25527250510331, 3.23527587668705, 3.30276370847298, 3.35063560825895, 3.39410130204004, 3.30749603791321, 3.21879799811174, 3.22865695810894, 3.21031851982623, 3.25647720624168, 3.24204423936955, 3.25406445291434, 3.28465628278852, 3.20924684875337, 3.29928933408768, 3.34888872307144, 3.34084054981233, 3.31806333496276, 3.24748226067705, 3.26363606858811, 3.19562294358694, 3.29578694025161, 3.2678754193189, 3.29336255471145, 3.22762964957101, 3.24993175663419, 3.29578694025161, 3.37966803403365, 3.42390091852842, 3.32159843046534, 3.29292029960001, 3.22453306260609, 3.28802553538836, 3.30168094929358, 3.25839780409551, 3.30362797638389, 3.28148788794008, 3.31889771462749, 3.31806333496276, 3.32592595577147, 3.33243845991561, 3.20628604441243, 3.17695898058691, 3.18977095634687, 3.14050804303818, 3.23829706787539, 3.25478968739721, 3.25017594808393, 3.27577190016493, 3.30189771719521, 3.3174364965351, 3.32056168019524, 3.31196566036837, 3.1978316933289, 3.13225968953104, 3.21801004298436, 3.14050804303818, 3.18155777386279, 3.15259407792747, 3.15896526038341, 3.18836592606315, 3.21906033244886, 3.19340290306242, 3.27989498001164, 3.34222522936079, 3.16820274684263, 3.21879799811174, 3.14829409743475, 3.14457420760962, 3.1846914308176, 3.11693964655076, 3.18355453361886, 3.12287092286444, 3.21138755293686, 3.24254142829838, 3.29181268746712, 3.35679046035172, 3.2169572073611, 3.14643813528577, 3.14952701375435, 3.14705767102836, 3.14426277376199, 3.18184358794477, 3.18412335423967, 3.21563756343506, 3.18041263283832, 3.22659990520736, 3.30102999566398, 3.34537373055909, 3.29136885045158, 3.16494737262184, 3.19395897801919, 3.16405529189345, 3.16016829295851, 3.21005084987514, 3.21932250841934, 3.2143138974244, 3.21563756343506, 3.22608411597582, 3.31175386105575, 3.35449260058944, 3.25839780409551, 3.15986784709257, 3.24600590407603, 3.1646502159343, 3.19200959265367, 3.15563963375978, 3.15442397311465, 3.1914510144649, 3.21616590228599, 3.21827285357145, 3.30449052777349, 3.34380233316165, 3.22141423784234, 3.13385812520333, 3.17782497186468, 3.13353890837022, 3.16226561429802, 3.18241465243455, 3.16435285578444, 3.19089171692217, 3.18977095634687, 3.26173854735254, 3.2397998184471, 3.28802553538836, 3.16849748352303, 3.16375752398196, 3.18808437371494, 3.14736710779379, 3.18241465243455, 3.14144977340047, 3.21510858105309, 3.17897694729317, 3.22556771343947, 3.28735377271475, 3.27137687189407, 3.23704079137919, 3.16316137497702, 3.15986784709257, 3.16316137497702, 3.13513265137677, 3.17231096852195, 3.19256745333655, 3.17260293120986, 3.22634208716363, 3.20248831706009, 3.26717172840301, 3.30059548388996, 3.31785448933147), .Tsp = c(1969, 1982.91666666667, 12), class = 'ts'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames27_4cbc1ecf95ba4ac13ad590ef3cd3a405() {
        assertEval("argv <- list(structure(list(object = structure(3.14159265358979, comment = 'Start with pi'), slots = 'comment', dataPart = TRUE, class = structure('classPrototypeDef', package = 'methods')), .Names = c('object', 'slots', 'dataPart', 'class')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames28_701720d16a6a4676833bf65a094afbe1() {
        assertEval("argv <- list(list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'))));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames29_064751dbabc6a3f4b7bf64f6db1f0fe1() {
        assertEval("argv <- list(structure(list(zz = complex(0)), .Names = 'zz'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames3_f58a94174b84f011c06f49d69307153c() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames31_a981017279aa1fa70133e594242c6c41() {
        assertEval("argv <- list(list(structure(list(srcfile = c('/home/lzhao/tmp/RtmpTzriDZ/R.INSTALL30d4108a07be/mgcv/R/gam.fit3.r', '/home/lzhao/tmp/RtmpTzriDZ/R.INSTALL30d4108a07be/mgcv/R/gam.fit3.r'), frow = c(1287L, 1289L), lrow = c(1287L, 1289L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/tmp/RtmpTzriDZ/R.INSTALL30d4108a07be/mgcv/R/gam.fit3.r', frow = 1289L, lrow = 1289L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames32_b74257b2b5f05ae12c663b5e6d0c4df5() {
        assertEval("argv <- list(structure(list(trace = 0, fnscale = 1, parscale = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ndeps = c(0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001), maxit = 100L, abstol = -Inf, reltol = 1.49011611938477e-08, alpha = 1, beta = 0.5, gamma = 2, REPORT = 10, type = 1, lmm = 5, factr = 1e+07, pgtol = 0, tmax = 10, temp = 10), .Names = c('trace', 'fnscale', 'parscale', 'ndeps', 'maxit', 'abstol', 'reltol', 'alpha', 'beta', 'gamma', 'REPORT', 'type', 'lmm', 'factr', 'pgtol', 'tmax', 'temp')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames33_8d74f9d886bcd994fe5f33cf566b1fa7() {
        assertEval("argv <- list(structure(list(Df = c(NA, 0L), Deviance = c(NA, 0), `Resid. Df` = c(10L, 10L), `Resid. Dev` = c(2.74035772634541, 2.74035772634541)), .Names = c('Df', 'Deviance', 'Resid. Df', 'Resid. Dev'), row.names = c('NULL', 'x'), class = c('anova', 'data.frame'), heading = 'Analysis of Deviance Table\\n\\nModel: gaussian, link: identity\\n\\nResponse: y\\n\\nTerms added sequentially (first to last)\\n\\n'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames34_e01202ee07ca89d878b085ed5dc115c2() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames35_f006217cacd4d80e05366cac9d08f9df() {
        assertEval("argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x * z)));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames36_a08bc967a7cff498129089e75a758ad5() {
        assertEval("argv <- list(structure(c(2671, 6.026e+77, 3.161e+152, 3.501e+299, 2.409e+227, 1.529e+302), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), class = 'table'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames37_51ca21efc2a58c68dfc52063ba1aee4d() {
        assertEval("argv <- list(structure(list(surname = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia'), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'no', 'yes', 'no'), class = 'AsIs'), title = structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...'), class = 'AsIs'), other.author = structure(c(NA, NA, NA, NA, NA, 'Ripley'), class = 'AsIs')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames38_9ea8f5404d412cedbb05c97dacebb613() {
        assertEval("argv <- list(structure(list(head = logical(0)), .Names = 'head', class = 'data.frame', row.names = integer(0)));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames4_1b914f06686de899d8349e5b6d7052ba() {
        assertEval("argv <- list(structure(list(A = NULL, B = NULL, `NA` = NULL), .Names = c('A', 'B', NA)));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames6_f1ed573a769973d0b06294c4d9aa252e() {
        assertEval("argv <- list(structure(list(groups = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor')), .Names = 'groups'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames7_59202cac432980298c07321b47b4b369() {
        assertEval("argv <- list(structure(1:20, .Tsp = c(1, 20, 1), class = 'ts'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames8_f2412a65720f15cc266a28f73140351b() {
        assertEval("argv <- list(structure(c(12L, 120L, 116L), .Dim = 3L, .Dimnames = structure(list(c('0-5yrs', '6-11yrs', '12+ yrs')), .Names = ''), class = 'table'));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnames_testnames9_6e1968ccfccc93a03e8acbbbb8051d44() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L), mday = c(30L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 30L, 30L, 30L, 31L, 30L, 31L, 31L, 31L, 30L), mon = c(5L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 5L, 5L, 5L, 5L, 11L, 11L, 11L, 5L, 5L, 5L, 11L, 5L, 11L, 11L, 11L, 5L), year = c(72L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 81L, 82L, 83L, 85L, 87L, 89L, 90L, 92L, 93L, 94L, 95L, 97L, 98L, 105L, 108L, 112L), wday = c(5L, 0L, 1L, 2L, 3L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 0L, 4L, 0L, 1L, 2L, 3L, 4L, 0L, 1L, 4L, 6L, 3L, 6L), yday = c(181L, 365L, 364L, 364L, 364L, 365L, 364L, 364L, 364L, 180L, 180L, 180L, 180L, 364L, 364L, 364L, 181L, 180L, 180L, 364L, 180L, 364L, 364L, 365L, 181L), isdst = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')));names(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign1_c44fb91da1834d486b0a8d373c6bf3e4() {
        assertEval("argv <- list(structure(list(happy = c('a', 'b', 'c', 'd'), sad = c('A', 'B', 'C', 'D', 'E', 'F')), .Names = c('happy', 'sad')), value = c('happy', 'sad'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign10_1f4572801fee52230ec08e51f3383ab0() {
        assertEval("argv <- list(structure(list(), .Names = character(0)), character(0));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign11_60898f011311f7c472fd9b77cb639a40() {
        assertEval("argv <- list(structure(list(save.object = NULL, panel.error = NULL, drop.unused.levels = NULL, default.theme = NULL, legend.bbox = NULL, banking = NULL, default.args = NULL, axis.padding = NULL, skip.boundary.labels = NULL, interaction.sep = NULL, panel.contourplot = NULL, panel.levelplot = NULL, panel.levelplot.raster = NULL, panel.parallel = NULL, panel.densityplot = NULL, panel.splom = NULL, panel.wireframe = NULL, panel.dotplot = NULL, panel.qq = NULL, panel.stripplot = NULL, panel.xyplot = NULL, panel.qqmath = NULL,     panel.barchart = NULL, panel.bwplot = NULL, panel.histogram = NULL, panel.cloud = NULL, panel.pairs = NULL, prepanel.default.bwplot = NULL, prepanel.default.cloud = NULL, prepanel.default.densityplot = NULL, prepanel.default.histogram = NULL, prepanel.default.levelplot = NULL, prepanel.default.parallel = NULL, prepanel.default.qq = NULL, prepanel.default.qqmath = NULL, prepanel.default.splom = NULL, prepanel.default.xyplot = NULL, prepanel.default.dotplot = NULL, prepanel.default.barchart = NULL,     prepanel.default.wireframe = NULL, prepanel.default.contourplot = NULL, axis.units = NULL, layout.heights = NULL, layout.widths = NULL, highlight.gpar = NULL), .Names = c('save.object', 'panel.error', 'drop.unused.levels', 'default.theme', 'legend.bbox', 'banking', 'default.args', 'axis.padding', 'skip.boundary.labels', 'interaction.sep', 'panel.contourplot', 'panel.levelplot', 'panel.levelplot.raster', 'panel.parallel', 'panel.densityplot', 'panel.splom', 'panel.wireframe', 'panel.dotplot', 'panel.qq', 'panel.stripplot', 'panel.xyplot', 'panel.qqmath', 'panel.barchart', 'panel.bwplot', 'panel.histogram', 'panel.cloud', 'panel.pairs', 'prepanel.default.bwplot', 'prepanel.default.cloud', 'prepanel.default.densityplot', 'prepanel.default.histogram', 'prepanel.default.levelplot', 'prepanel.default.parallel', 'prepanel.default.qq', 'prepanel.default.qqmath', 'prepanel.default.splom', 'prepanel.default.xyplot', 'prepanel.default.dotplot', 'prepanel.default.barchart', 'prepanel.default.wireframe', 'prepanel.default.contourplot', 'axis.units', 'layout.heights', 'layout.widths', 'highlight.gpar')), value = c('save.object', 'panel.error', 'drop.unused.levels', 'default.theme', 'legend.bbox', 'banking', 'default.args', 'axis.padding', 'skip.boundary.labels', 'interaction.sep', 'panel.contourplot', 'panel.levelplot', 'panel.levelplot.raster', 'panel.parallel', 'panel.densityplot', 'panel.splom', 'panel.wireframe', 'panel.dotplot', 'panel.qq', 'panel.stripplot', 'panel.xyplot', 'panel.qqmath', 'panel.barchart', 'panel.bwplot', 'panel.histogram', 'panel.cloud', 'panel.pairs', 'prepanel.default.bwplot', 'prepanel.default.cloud', 'prepanel.default.densityplot', 'prepanel.default.histogram', 'prepanel.default.levelplot', 'prepanel.default.parallel', 'prepanel.default.qq', 'prepanel.default.qqmath', 'prepanel.default.splom', 'prepanel.default.xyplot', 'prepanel.default.dotplot', 'prepanel.default.barchart', 'prepanel.default.wireframe', 'prepanel.default.contourplot', 'axis.units', 'layout.heights', 'layout.widths', 'highlight.gpar'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign12_e3d0daa8144432e6fedd2a4f5e011407() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')), value = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign13_c7cf2abd9ec68e911725ad041ff08e7a() {
        assertEval("argv <- list(structure(list(A = 0:10, B = 10:20, `NA` = 20:30), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame'), value = c('A', 'B', NA));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign15_3e225c9fab805c5b349c8be6d91fba69() {
        assertEval("argv <- list(structure(list(surname = structure(c(5L, 6L, 4L, 3L, 3L, 1L, 2L), .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), title = structure(c(2L, 5L, 4L, 6L, 7L, 3L, 1L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'title', 'other.author'), row.names = c(NA, -7L), class = 'data.frame'), value = c('surname', 'title', 'other.author'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign16_dff1df9e7c45c2fe150395b86ab66d9c() {
        assertEval("argv <- list(structure(1:3, .Names = c('foo', 'bar', 'baz')), value = c('foo', 'bar', 'baz'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign17_4ccd1d67e1bca4cd0ce4f0154f00805f() {
        assertEval("argv <- list(structure(c(1+1i, 1.2+10i), .Names = c('a', 'b')), value = c('a', 'b'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign18_3a82f6c15e080877ecdfc4e91e18c506() {
        assertEval("argv <- list(structure(c(67L, 34L), .Dim = 2L, .Dimnames = list(c('\\'actual\\'', 'virtual')), class = 'table'), value = c('\\'actual\\'', 'virtual'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign2_fef1858659664db592c6d712de19a5d1() {
        assertEval("argv <- list(structure(list(population = c(3615, 365, 2212, 2110, 21198, 2541, 3100, 579, 8277, 4931, 868, 813, 11197, 5313, 2861, 2280, 3387, 3806, 1058, 4122, 5814, 9111, 3921, 2341, 4767, 746, 1544, 590, 812, 7333, 1144, 18076, 5441, 637, 10735, 2715, 2284, 11860, 931, 2816, 681, 4173, 12237, 1203, 472, 4981, 3559, 1799, 4589, 376), income = c(3624, 6315, 4530, 3378, 5114, 4884, 5348, 4809, 4815, 4091, 4963, 4119, 5107, 4458, 4628, 4669, 3712, 3545, 3694, 5299, 4755, 4751, 4675, 3098, 4254, 4347, 4508, 5149, 4281, 5237, 3601, 4903, 3875, 5087, 4561, 3983, 4660, 4449, 4558, 3635, 4167, 3821, 4188, 4022, 3907, 4701, 4864, 3617, 4468, 4566), illiteracy = c(2.1, 1.5, 1.8, 1.9, 1.1, 0.7, 1.1, 0.9, 1.3, 2, 1.9, 0.6, 0.9, 0.7, 0.5, 0.6, 1.6, 2.8, 0.7, 0.9, 1.1, 0.9, 0.6, 2.4, 0.8, 0.6, 0.6, 0.5, 0.7, 1.1, 2.2, 1.4, 1.8, 0.8, 0.8, 1.1, 0.6, 1, 1.3, 2.3, 0.5, 1.7, 2.2, 0.6, 0.6, 1.4, 0.6, 1.4, 0.7, 0.6), life.exp = c(69.05, 69.31, 70.55, 70.66, 71.71, 72.06, 72.48, 70.06, 70.66, 68.54, 73.6, 71.87, 70.14, 70.88, 72.56, 72.58, 70.1, 68.76, 70.39, 70.22, 71.83, 70.63, 72.96, 68.09, 70.69, 70.56, 72.6, 69.03, 71.23, 70.93, 70.32, 70.55, 69.21, 72.78, 70.82, 71.42, 72.13, 70.43, 71.9, 67.96, 72.08, 70.11, 70.9, 72.9, 71.64, 70.08, 71.72, 69.48, 72.48, 70.29), murder = c(15.1, 11.3, 7.8, 10.1, 10.3, 6.8, 3.1, 6.2, 10.7, 13.9, 6.2, 5.3, 10.3, 7.1, 2.3, 4.5, 10.6, 13.2, 2.7, 8.5, 3.3, 11.1, 2.3, 12.5, 9.3, 5, 2.9, 11.5, 3.3, 5.2, 9.7, 10.9, 11.1, 1.4, 7.4, 6.4, 4.2, 6.1, 2.4, 11.6, 1.7, 11, 12.2, 4.5, 5.5, 9.5, 4.3, 6.7, 3, 6.9), hs.grad = c(41.3, 66.7, 58.1, 39.9, 62.6, 63.9, 56, 54.6, 52.6, 40.6, 61.9, 59.5, 52.6, 52.9, 59, 59.9, 38.5, 42.2, 54.7, 52.3, 58.5, 52.8, 57.6, 41, 48.8, 59.2, 59.3, 65.2, 57.6, 52.5, 55.2, 52.7, 38.5, 50.3, 53.2, 51.6, 60, 50.2, 46.4, 37.8, 53.3, 41.8, 47.4, 67.3, 57.1, 47.8, 63.5, 41.6, 54.5, 62.9), frost = c(20, 152, 15, 65, 20, 166, 139, 103, 11, 60, 0, 126, 127, 122, 140, 114, 95, 12, 161, 101, 103, 125, 160, 50, 108, 155, 139, 188, 174, 115, 120, 82, 80, 186, 124, 82, 44, 126, 127, 65, 172, 70, 35, 137, 168, 85, 32, 100, 149, 173), area = c(50708, 566432, 113417, 51945, 156361, 103766, 4862, 1982, 54090, 58073, 6425, 82677, 55748, 36097, 55941, 81787, 39650, 44930, 30920, 9891, 7826, 56817, 79289, 47296, 68995, 145587, 76483, 109889, 9027, 7521, 121412, 47831, 48798, 69273, 40975, 68782, 96184, 44966, 1049, 30225, 75955, 41328, 262134, 82096, 9267, 39780, 66570, 24070, 54464, 97203), region = structure(c(2L, 4L, 4L, 2L, 4L, 4L, 1L, 2L, 2L, 2L, 4L, 4L, 3L, 3L, 3L, 3L, 2L, 2L, 1L, 2L, 1L, 3L, 3L, 2L, 3L, 4L, 3L, 4L, 1L, 1L, 4L, 1L, 2L, 3L, 3L, 2L, 4L, 1L, 1L, 2L, 3L, 2L, 2L, 4L, 1L, 2L, 4L, 2L, 3L, 4L), .Label = c('Northeast', 'South', 'North Central', 'West'), class = 'factor')), .Names = c('population', 'income', 'illiteracy', 'life.exp', 'murder', 'hs.grad', 'frost', 'area', 'region'), row.names = c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), class = 'data.frame'), value = c('population', 'income', 'illiteracy', 'life.exp', 'murder', 'hs.grad', 'frost', 'area', 'region'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign3_ec03de1267625939fcd9937f724189ff() {
        assertEval("argv <- list(structure(list(`Sepal Length` = c(5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7, 7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2, 7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9, 5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9), `Sepal Width` = c(3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3, 3, 4, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3, 3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3, 3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2, 3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9, 2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8, 3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5, 2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3, 2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2, 3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3, 2.8, 3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1, 3, 3.1, 3.1, 3.1, 2.7, 3.2, 3.3, 3, 2.5, 3, 3.4, 3), `Petal Length` = c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9, 5.7, 5.2, 5, 5.2, 5.4, 5.1), `Petal Width` = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5, 1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2, 2.3, 1.8), Species = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('setosa', 'versicolor', 'virginica'), class = 'factor')), .Names = c('Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width', 'Species'), row.names = c(NA, -150L), class = 'data.frame'), value = c('Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width', 'Species'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign4_571457ff282b2b58734f08c37e80fe16() {
        assertEval("argv <- list(structure(list(y = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('y', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'), value = c('y', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign5_bde39c5ab7dde3476ffcf87c2751ce07() {
        assertEval("argv <- list(c(-3.21402130636699, 101.08748330158, -8.50234284659562), value = NULL);`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign6_0cf4c2e0535758cbacbc67772a034b0b() {
        assertEval("argv <- list(structure(1:3, .Names = c(NA, 'b', NA)), value = c(NA, 'b'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign7_df031072453201d0946b8bca52750b0c() {
        assertEval("argv <- list(structure(c(3.14159265358979e-10, 0.0314159265358979, 3.14159265358979, 31.4159265358979, 314.159265358979, 314159265.358979, 3.14159265358979e+20), .Names = c('3.14e-10', '0.0314', '3.14', '31.4', '314', '3.14e+08', '3.14e+20')), value = c('3.14e-10', '0.0314', '3.14', '31.4', '314', '3.14e+08', '3.14e+20'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign8_3efb9d815294bd2f6ecd3caba5d856f3() {
        assertEval("argv <- list(structure(c('variable1', 'variable2'), .Names = c('variable1', 'variable2')), value = c('variable1', 'variable2'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign9_b5e889e6c25360b1386457344188535d() {
        assertEval("argv <- list(structure(c(NA, FALSE, TRUE), .Names = c(NA, 'FALSE', 'TRUE')), value = c(NA, 'FALSE', 'TRUE'));`names<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinnargs_testnargs1_35e8cf47fabc8d470c2af44252848aa2() {
        assertEval("nargs( );");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar1_a610f732c5a1940289995b9fb820a25f() {
        assertEval("argv <- list('DtTmCl> format(.leap.seconds)         # all 24 leap seconds in your timezone', 'c', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar10_251ebbf780a19ad3b15cbaa06485443a() {
        assertEval("argv <- list(FALSE, 'chars', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar11_dc443da77157cc6d434a029df4ee4b97() {
        assertEval("argv <- list('> contour(x, y, volcano, levels = lev, col=\\'yellow\\', lty=\\'solid\\', add=TRUE)', 'c', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar12_95206bbb1214fc52a45098b99c88c274() {
        assertEval("argv <- list(character(0), 'c', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar13_66517b48b1dedf647830b6a7f5588cd3() {
        assertEval("argv <- list(structure(c('rpart', 'recommended', '4.1-1', '2013-03-20', 'c(person(\\'Terry\\', \\'Therneau\\', role = \\'aut\\',\\n\\t             email = \\'therneau@mayo.edu\\'),\\n             person(\\'Beth\\', \\'Atkinson\\', role = \\'aut\\',\\t\\n\\t             email = \\'atkinson@mayo.edu\\'),\\n             person(\\'Brian\\', \\'Ripley\\', role = c(\\'aut\\', \\'trl\\', \\'cre\\'),\\n                    email = \\'ripley@stats.ox.ac.uk\\',\\n\\t\\t   comment = \\'author of R port\\'))', 'Recursive partitioning and regression trees', 'Recursive Partitioning', 'R (>= 2.14.0), graphics, stats, grDevices', 'survival', 'GPL-2 | GPL-3', 'yes', 'yes', 'Maintainers are not available to give advice on using a package\\nthey did not author.', '2013-03-20 07:27:05 UTC; ripley', 'Terry Therneau [aut],\\n  Beth Atkinson [aut],\\n  Brian Ripley [aut, trl, cre] (author of R port)', 'Brian Ripley <ripley@stats.ox.ac.uk>'), .Names = c('Package', 'Priority', 'Version', 'Date', 'Authors@R', 'Description', 'Title', 'Depends', 'Suggests', 'License', 'LazyData', 'ByteCompile', 'Note', 'Packaged', 'Author', 'Maintainer')), 'c', TRUE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar2_1c09ba86e60fdfa5eca5e1e367720a04() {
        assertEval("argv <- list(c('\\'a\\'', '\\'b\\'', NA, NA, NA, '\\'f\\'', '\\'g\\'', '\\'h\\'', '\\'i\\'', '\\'j\\'', '\\'k\\'', '\\'l\\''), 'w', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar3_57659592fc79341516fbcd5870d911ca() {
        assertEval("argv <- list('\\'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\\'', 'w', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar4_b07205078ea7e27711aa42aa85191257() {
        assertEval("argv <- list(structure(c('1', '2', '3', '4', '5', '1', '2', '3', '4', '5'), .Dim = 10L), 'c', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar5_b0cf3dcbb7959533f7618618d685ac98() {
        assertEval("argv <- list(c('Var1', 'Var2'), 'bytes', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar6_9fd1a08d73fc5dc4e5292e0c237efba5() {
        assertEval("argv <- list(c('0.0470', '0.0130', '0.0020', '0.0001', '2.3e-05', '4.5e-06'), 'w', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar7_701af2518e7fb1448b6556b3970a7b00() {
        assertEval("argv <- list(c('x1', 'x.2', 'x3'), 'bytes', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnchar_testnchar9_f219c8ae8c855e0d0b72ad8810e6f695() {
        assertEval("argv <- list(c('\\'1\\'', '\\'2\\'', NA), 'w', FALSE); .Internal(nchar(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinncol_testncol1_0981226b823bc6f5952116cd063acb30() {
        assertEval("argv <- structure(list(x = structure(list(pop15 = c(29.35, 23.32,     23.8, 41.89, 42.19, 31.72, 39.74, 44.75, 46.64, 47.64, 24.42,     46.31, 27.84, 25.06, 23.31, 25.62, 46.05, 47.32, 34.03, 41.31,     31.16, 24.52, 27.01, 41.74, 21.8, 32.54, 25.95, 24.71, 32.61,     45.04, 43.56, 41.18, 44.19, 46.26, 28.96, 31.94, 31.92, 27.74,     21.44, 23.49, 43.42, 46.12, 23.27, 29.81, 46.4, 45.25, 41.12,     28.13, 43.69, 47.2), pop75 = c(2.87, 4.41, 4.43, 1.67, 0.83,     2.85, 1.34, 0.67, 1.06, 1.14, 3.93, 1.19, 2.37, 4.7, 3.35,     3.1, 0.87, 0.58, 3.08, 0.96, 4.19, 3.48, 1.91, 0.91, 3.73,     2.47, 3.67, 3.25, 3.17, 1.21, 1.2, 1.05, 1.28, 1.12, 2.85,     2.28, 1.52, 2.87, 4.54, 3.73, 1.08, 1.21, 4.46, 3.43, 0.9,     0.56, 1.73, 2.72, 2.07, 0.66), dpi = c(2329.68, 1507.99,     2108.47, 189.13, 728.47, 2982.88, 662.86, 289.52, 276.65,     471.24, 2496.53, 287.77, 1681.25, 2213.82, 2457.12, 870.85,     289.71, 232.44, 1900.1, 88.94, 1139.95, 1390, 1257.28, 207.68,     2449.39, 601.05, 2231.03, 1740.7, 1487.52, 325.54, 568.56,     220.56, 400.06, 152.01, 579.51, 651.11, 250.96, 768.79, 3299.49,     2630.96, 389.66, 249.87, 1813.93, 4001.89, 813.39, 138.33,     380.47, 766.54, 123.58, 242.69), ddpi = c(2.87, 3.93, 3.82,     0.22, 4.56, 2.43, 2.67, 6.51, 3.08, 2.8, 3.99, 2.19, 4.32,     4.52, 3.44, 6.28, 1.48, 3.19, 1.12, 1.54, 2.99, 3.54, 8.21,     5.81, 1.57, 8.12, 3.62, 7.66, 1.76, 2.48, 3.61, 1.03, 0.67,     2, 7.48, 2.19, 2, 4.35, 3.01, 2.7, 2.96, 1.13, 2.01, 2.45,     0.53, 5.14, 10.23, 1.88, 16.71, 5.08)), .Names = c('pop15',     'pop75', 'dpi', 'ddpi'), class = 'data.frame', row.names = c('Australia',     'Austria', 'Belgium', 'Bolivia', 'Brazil', 'Canada', 'Chile',     'China', 'Colombia', 'Costa Rica', 'Denmark', 'Ecuador',     'Finland', 'France', 'Germany', 'Greece', 'Guatamala', 'Honduras',     'Iceland', 'India', 'Ireland', 'Italy', 'Japan', 'Korea',     'Luxembourg', 'Malta', 'Norway', 'Netherlands', 'New Zealand',     'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Philippines',     'Portugal', 'South Africa', 'South Rhodesia', 'Spain', 'Sweden',     'Switzerland', 'Turkey', 'Tunisia', 'United Kingdom', 'United States',     'Venezuela', 'Zambia', 'Jamaica', 'Uruguay', 'Libya', 'Malaysia'))),     .Names = 'x');do.call('ncol', argv)");
    }

    @Test
    public void TestrGenBuiltinngettext_testngettext1_e60c984c37d44bb2e1b0d0e4400fc4fd() {
        assertEval("argv <- list(1L, '%s is not TRUE', '%s are not all TRUE', NULL); .Internal(ngettext(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinngettext_testngettext2_8e8385c8ba3b950733b9696784090e85() {
        assertEval("argv <- list(2L, '%s is not TRUE', '%s are not all TRUE', NULL); .Internal(ngettext(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinnlevels_testnlevels1_55d459dc9f44aa6034f088d60ad452ad() {
        assertEval("argv <- structure(list(x = structure(c(1L, 2L, NA), .Label = c('1',     '2'), class = 'factor')), .Names = 'x');do.call('nlevels', argv)");
    }

    @Test
    public void TestrGenBuiltinnormalizePath_testnormalizePath1_defa49a5aa65d3b1cd9f4f65281f4477() {
        assertEval("argv <- list(c('/home/lzhao/hg/r-instrumented/library', '/home/lzhao/R/x86_64-unknown-linux-gnu-library/3.0', '/home/lzhao/hg/r-instrumented/library'), '/', NA); .Internal(normalizePath(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinnrow_testnrow1_91504df58c1a9e511929974b86463f7a() {
        assertEval("argv <- structure(list(x = structure(c(0, 3313, 2963, 3175, 3339,     2762, 3276, 2610, 4485, 2977, 3030, 4532, 2753, 3949, 2865,     2282, 2179, 3000, 817, 3927, 1991, 3313, 0, 1318, 1326, 1294,     1498, 2218, 803, 1172, 2018, 1490, 1305, 645, 636, 521, 1014,     1365, 1033, 1460, 2868, 1802, 2963, 1318, 0, 204, 583, 206,     966, 677, 2256, 597, 172, 2084, 690, 1558, 1011, 925, 747,     285, 1511, 1616, 1175, 3175, 1326, 204, 0, 460, 409, 1136,     747, 2224, 714, 330, 2052, 739, 1550, 1059, 1077, 977, 280,     1662, 1786, 1381, 3339, 1294, 583, 460, 0, 785, 1545, 853,     2047, 1115, 731, 1827, 789, 1347, 1101, 1209, 1160, 340,     1794, 2196, 1588, 2762, 1498, 206, 409, 785, 0, 760, 1662,     2436, 460, 269, 2290, 714, 1764, 1035, 911, 583, 465, 1497,     1403, 937, 3276, 2218, 966, 1136, 1545, 760, 0, 1418, 3196,     460, 269, 2971, 1458, 2498, 1778, 1537, 1104, 1176, 2050,     650, 1455, 2610, 803, 677, 747, 853, 1662, 1418, 0, 1975,     1118, 895, 1936, 158, 1439, 425, 328, 591, 513, 995, 2068,     1019, 4485, 1172, 2256, 2224, 2047, 2436, 3196, 1975, 0,     2897, 2428, 676, 1817, 698, 1693, 2185, 2565, 1971, 2631,     3886, 2974, 2977, 2018, 597, 714, 1115, 460, 460, 1118, 2897,     0, 550, 2671, 1159, 2198, 1479, 1238, 805, 877, 1751, 949,     1155, 3030, 1490, 172, 330, 731, 269, 269, 895, 2428, 550,     0, 2280, 863, 1730, 1183, 1098, 851, 457, 1683, 1500, 1205,     4532, 1305, 2084, 2052, 1827, 2290, 2971, 1936, 676, 2671,     2280, 0, 1178, 668, 1762, 2250, 2507, 1799, 2700, 3231, 2937,     2753, 645, 690, 739, 789, 714, 1458, 158, 1817, 1159, 863,     1178, 0, 1281, 320, 328, 724, 471, 1048, 2108, 1157, 3949,     636, 1558, 1550, 1347, 1764, 2498, 1439, 698, 2198, 1730,     668, 1281, 0, 1157, 1724, 2010, 1273, 2097, 3188, 2409, 2865,     521, 1011, 1059, 1101, 1035, 1778, 425, 1693, 1479, 1183,     1762, 320, 1157, 0, 618, 1109, 792, 1011, 2428, 1363, 2282,     1014, 925, 1077, 1209, 911, 1537, 328, 2185, 1238, 1098,     2250, 328, 1724, 618, 0, 331, 856, 586, 2187, 898, 2179,     1365, 747, 977, 1160, 583, 1104, 591, 2565, 805, 851, 2507,     724, 2010, 1109, 331, 0, 821, 946, 1754, 428, 3000, 1033,     285, 280, 340, 465, 1176, 513, 1971, 877, 457, 1799, 471,     1273, 792, 856, 821, 0, 1476, 1827, 1249, 817, 1460, 1511,     1662, 1794, 1497, 2050, 995, 2631, 1751, 1683, 2700, 1048,     2097, 1011, 586, 946, 1476, 0, 2707, 1209, 3927, 2868, 1616,     1786, 2196, 1403, 650, 2068, 3886, 949, 1500, 3231, 2108,     3188, 2428, 2187, 1754, 1827, 2707, 0, 2105, 1991, 1802,     1175, 1381, 1588, 937, 1455, 1019, 2974, 1155, 1205, 2937,     1157, 2409, 1363, 898, 428, 1249, 1209, 2105, 0), .Dim = c(21L,     21L), .Dimnames = list(c('Athens', 'Barcelona', 'Brussels',     'Calais', 'Cherbourg', 'Cologne', 'Copenhagen', 'Geneva',     'Gibraltar', 'Hamburg', 'Hook of Holland', 'Lisbon', 'Lyons',     'Madrid', 'Marseilles', 'Milan', 'Munich', 'Paris', 'Rome',     'Stockholm', 'Vienna'), c('Athens', 'Barcelona', 'Brussels',     'Calais', 'Cherbourg', 'Cologne', 'Copenhagen', 'Geneva',     'Gibraltar', 'Hamburg', 'Hook of Holland', 'Lisbon', 'Lyons',     'Madrid', 'Marseilles', 'Milan', 'Munich', 'Paris', 'Rome',     'Stockholm', 'Vienna')))), .Names = 'x');do.call('NROW', argv)");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar1_7fe11de9f0d4d849d14655c9af1e07cd() {
        assertEval("argv <- list('./myTst2/man/DocLink-class.Rd');nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar10_13f035fda81410f5f66689719efb3f01() {
        assertEval("argv <- list(logical(0));nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar12_34ceb1be3f900a5e6c8ae25a6846e4a7() {
        assertEval("argv <- list('');do.call('nzchar', argv)");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar2_25803bc3565c771121f600cc2f891bdb() {
        assertEval("argv <- list(FALSE);nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar3_55e864e7a72cb8e14573f424ad35221c() {
        assertEval("argv <- list(c('a', 'b', 'c'));nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar4_dd6ae9d00129a1b85512689e85633298() {
        assertEval("argv <- list(structure('MASS', .Names = ''));nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar5_09d62a8033aaeafda827066246963926() {
        assertEval("argv <- list(NULL);nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar6_2d0c181647c30155434cfc7664a32a4d() {
        assertEval("argv <- list(c('Fr', 'Temp', 'Soft', 'M.user', 'Brand'));nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar7_602ede2f528fd400bc9149d4ea9d5b75() {
        assertEval("argv <- list(structure('survival', .Names = ''));nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar8_8e4e09a5b8d988f19bc369b7438dda12() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar9_dc3c4901c7dd8fd1d7f6b2192e5c78da() {
        assertEval("argv <- list(c('  \\036 The other major change was an error for asymmetric loss matrices,', '    prompted by a user query.  With L=loss asymmetric, the altered', '    priors were computed incorrectly - they were using L' instead of L.', '    Upshot - the tree would not not necessarily choose optimal splits', '    for the given loss matrix.  Once chosen, splits were evaluated', '    correctly.  The printed “improvement” values are of course the', '    wrong ones as well.  It is interesting that for my little test', '    case, with L quite asymmetric, the early splits in the tree are', '    unchanged - a good split still looks good.'));nzchar(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass1_5dc242e3a7882519857877b9fdbdab26() {
        assertEval("argv <- list(structure(list(`cbind(w = weight, w2 = weight^2)` = structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), terms = quote(cbind(w = weight, w2 = weight^2) ~ group), row.names = c(NA, 20L), class = 'data.frame'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass10_228a45b48d4b1c5e1bfbc9abf13f9416() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass11_8c8a6f747c67917bd6ad8e206bc5e420() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/RtmpS45wYI/R.INSTALL2aa62411bcd3/rpart/R/rsq.rpart.R', '/home/lzhao/tmp/RtmpS45wYI/R.INSTALL2aa62411bcd3/rpart/R/rsq.rpart.R'), frow = c(7L, 9L), lrow = c(7L, 9L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass12_6d9013ed182f2b17dcb2aa8bdb29a990() {
        assertEval("argv <- list(structure(1:5, .Tsp = c(1, 5, 1), class = 'ts'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass13_7c0ff7d4a196df33487f5ee659122e21() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass14_adf2de1af5747684549badc07a79c5e9() {
        assertEval("argv <- list(structure(list(`cbind(A, B, C, D)` = structure(c(0.696706709347165, 0.362357754476673, -0.0291995223012888, 0.696706709347165, 0.696706709347165, -0.0291995223012888, 0.696706709347165, -0.0291995223012888, 0.362357754476673, 0.696706709347165, -0.0291995223012888, 0.362357754476673, -0.416146836547142, 0.362357754476673, 0.696706709347165, 0.696706709347165, 0.362357754476673, -0.416146836547142, -0.0291995223012888, -0.416146836547142, 0.696706709347165, -0.416146836547142, 0.362357754476673, -0.0291995223012888, 0.717356090899523, 0.932039085967226, 0.999573603041505, 0.717356090899523, 0.717356090899523, 0.999573603041505, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.909297426825682, 0.932039085967226, 0.717356090899523, 0.717356090899523, 0.932039085967226, 0.909297426825682, 0.999573603041505, 0.909297426825682, 0.717356090899523, 0.909297426825682, 0.932039085967226, 0.999573603041505, -0.0291995223012888, -0.737393715541246, -0.998294775794753, -0.0291995223012888, -0.0291995223012888, -0.998294775794753, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.653643620863612, -0.737393715541246, -0.0291995223012888, -0.0291995223012888, -0.737393715541246, -0.653643620863612, -0.998294775794753, -0.653643620863612, -0.0291995223012888, -0.653643620863612, -0.737393715541246, -0.998294775794753, 0.999573603041505, 0.67546318055115, -0.0583741434275801, 0.999573603041505, 0.999573603041505, -0.0583741434275801, 0.999573603041505, -0.0583741434275801, 0.67546318055115, 0.999573603041505, -0.0583741434275801, 0.67546318055115, -0.756802495307928, 0.67546318055115, 0.999573603041505, 0.999573603041505, 0.67546318055115, -0.756802495307928, -0.0583741434275801, -0.756802495307928, 0.999573603041505, -0.756802495307928, 0.67546318055115, -0.0583741434275801), .Dim = c(24L, 4L), .Dimnames = list(NULL, c('A', 'B', 'C', 'D'))), groups = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor')), .Names = c('cbind(A, B, C, D)', 'groups'), terms = quote(cbind(A, B, C, D) ~ groups), row.names = c(NA, 24L), class = 'data.frame'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass15_b38bd26f241c6079334b1f24b3897ebf() {
        assertEval("argv <- list(structure(list(), .Names = character(0), class = 'data.frame', row.names = c(NA, -10L)));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass16_e97f7baf489bbc91cff69cd2c0890211() {
        assertEval("argv <- list(structure(list(y = c(1.08728092481538, 0.0420572471552261, 0.787502161306819, 0.512717751544676, 3.35376639535311, 0.204341510750309, -0.334930602487435, 0.80049208412789, -0.416177803375218, -0.777970346246018, 0.934996808181635, -0.678786709127108, 1.52621589791412, 0.5895781228122, -0.744496121210548, -1.99065153885627, 1.51286447692396, -0.750182409847851), A = c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1), U = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor'), V = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('y', 'A', 'U', 'V'), class = 'data.frame', row.names = c(NA, 18L), terms = quote(y ~ A:U + A:V - 1)));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass17_630eff674d690f2158501694ec6ef51d() {
        assertEval("argv <- list(structure(list(surname = structure(integer(0), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(integer(0), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(integer(0), .Label = c('no', 'yes'), class = 'factor'), title = structure(integer(0), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(integer(0), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = integer(0), class = 'data.frame'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass18_798bb2053c646768bd6b5795580415f8() {
        assertEval("argv <- list(structure(list(srcfile = c(NA, NA, '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/pdMat.R'), frow = c(NA, NA, 1739L, 1741L, 1807L, 1868L, 1868L, 1868L, 1870L, 1873L, 1888L, 1888L, 1888L, 1898L, 1898L, 1898L, 1899L, 1905L), lrow = c(NA, NA, 1739L, 1742L, 1807L, 1868L, 1868L, 1868L, 1872L, 1873L, 1888L, 1888L, 1888L, 1898L, 1898L, 1898L, 1901L, 1905L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 18L), class = 'data.frame'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass19_05d9fe4374b77833aa05f590a10a1dd3() {
        assertEval("argv <- list(structure(list(double.eps = 2.22044604925031e-16, double.neg.eps = 1.11022302462516e-16, double.xmin = 2.2250738585072e-308, double.xmax = 1.79769313486232e+308, double.base = 2L, double.digits = 53L, double.rounding = 5L, double.guard = 0L, double.ulp.digits = -52L, double.neg.ulp.digits = -53L, double.exponent = 11L, double.min.exp = -1022L, double.max.exp = 1024L, integer.max = 2147483647L, sizeof.long = 8L, sizeof.longlong = 8L, sizeof.longdouble = 16L, sizeof.pointer = 8L), .Names = c('double.eps', 'double.neg.eps', 'double.xmin', 'double.xmax', 'double.base', 'double.digits', 'double.rounding', 'double.guard', 'double.ulp.digits', 'double.neg.ulp.digits', 'double.exponent', 'double.min.exp', 'double.max.exp', 'integer.max', 'sizeof.long', 'sizeof.longlong', 'sizeof.longdouble', 'sizeof.pointer')));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass2_0cdab6a0f3bb36a790cbae2f7df7555f() {
        assertEval("argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass20_f44bcceb81148df6530188fb3a03e4b0() {
        assertEval("argv <- list(structure(list(Model = 1:2, df = c(5, 6), AIC = c('1571.455', '1570.925'), BIC = c('1590.056', '1593.247'), logLik = c(-780.727255295109, -779.462624623506), Test = structure(1:2, .Label = c('', '1 vs 2'), class = 'factor'), L.Ratio = c(NA, 2.52926134320705), `p-value` = c(NA, 0.111752518719366)), .Names = c('Model', 'df', 'AIC', 'BIC', 'logLik', 'Test', 'L.Ratio', 'p-value'), row.names = c('fm1', 'fm2'), class = 'data.frame'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass22_ac518980774ff9a930d9d3fdde87d1a0() {
        assertEval("argv <- list(c('1.537e+04', '1.54e+04', '1.546e+04'));do.call('oldClass', argv)");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass3_2a45705d29cf78fb12ead355cd7d5319() {
        assertEval("argv <- list(c(7.50863122075491e-09, 1.87762632589663e-07, 2.29589583061716e-06, 1.83002461474278e-05, 0.000106962770210119, 0.000488992941332962, 0.00182154707835978, 0.0056884235091347, 0.0152093632759767, 0.0353957474549943, 0.0726726073416657, 0.13316547411151));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass4_538abc70adf6c7c18e995e60289072ea() {
        assertEval("argv <- list(c(0.2853725+0.3927816i, -0.07283992154231+0.224178134292i, -0.10883955678256+0.035364093700981i, -0.0449501817243521-0.0326582354266614i, 8.2299281e-09-2.69753665872767e-02i, 0.0105954299973322-0.0076980245688633i, 0.00604728675391113+0.00196488543076221i, 0.00095395849586903+0.00293598723445021i, -0.00088096824266454+0.00121254736140417i, -7.27670402517897e-04-4.44010655e-10i, -2.07656947543323e-04-2.85815671682054e-04i, 5.3003554565545e-05-1.6312776087427e-04i, 7.9199339795869e-05-2.57333559721504e-05i, 3.27089023280074e-05+2.37644512768026e-05i, -1.79660253e-11+1.96291758626278e-05i, -7.70998422901389e-06+5.60161993213361e-06i, -4.4004307139296e-06-1.42979165736404e-06i, -6.9416605906477e-07-2.13643143624753e-06i, 6.41055054129141e-07-8.82334435385704e-07i, 5.29504214700362e-07+6.46186824e-13i));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass5_07b8d459e5106e4835f55df08083a072() {
        assertEval("argv <- list(structure(list(Subject = structure(c(1L, 3L, 6L, 2L, 4L, 5L), .Label = c('1', '4', '2', '5', '6', '3'), class = c('ordered', 'factor')), conc.0.25 = c(1.5, 2.03, 2.72, 1.85, 2.05, 2.31), conc.0.5 = c(0.94, 1.63, 1.49, 1.39, 1.04, 1.44), conc.0.75 = c(0.78, 0.71, 1.16, 1.02, 0.81, 1.03), conc.1 = c(0.48, 0.7, 0.8, 0.89, 0.39, 0.84), conc.1.25 = c(0.37, 0.64, 0.8, 0.59, 0.3, 0.64), conc.2 = c(0.19, 0.36, 0.39, 0.4, 0.23, 0.42)), row.names = c(1L, 12L, 23L, 34L, 45L, 56L), .Names = c('Subject', 'conc.0.25', 'conc.0.5', 'conc.0.75', 'conc.1', 'conc.1.25', 'conc.2'), class = c('nfnGroupedData', 'nfGroupedData', 'groupedData', 'data.frame')));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass6_0568d97da6231fe99136cd3f14528ac2() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L)));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass7_a5065df8e4e3755172d75f32fc691746() {
        assertEval("argv <- list(3.18309886183791e-301);oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass8_78954c7f24747d548d7a8eedafc40e2b() {
        assertEval("argv <- list(structure(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), from = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = 'registered S3method for predict', class = 'factor')), .Names = c('visible', 'from'), row.names = c('predict.Arima', 'predict.HoltWinters', 'predict.StructTS', 'predict.ar', 'predict.arima0', 'predict.bSpline', 'predict.bs', 'predict.glm', 'predict.glmmPQL', 'predict.lda', 'predict.lm', 'predict.loess', 'predict.lqs', 'predict.mca', 'predict.mlm', 'predict.nbSpline', 'predict.nls', 'predict.npolySpline', 'predict.ns', 'predict.pbSpline', 'predict.polr', 'predict.poly', 'predict.polySpline', 'predict.ppolySpline', 'predict.ppr', 'predict.prcomp', 'predict.princomp', 'predict.qda', 'predict.rlm', 'predict.smooth.spline', 'predict.smooth.spline.fit'), class = 'data.frame'));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClass_testoldClass9_bf0780fcf0f2a52873498cfb1ed987df() {
        assertEval("argv <- list(structure(c(4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L), .Label = c('C', 'E', 'D', 'A', 'F', 'B'), class = 'factor', scores = structure(c(14, 16.5, 1.5, 5, 3, 15), .Dim = 6L, .Dimnames = list(c('A', 'B', 'C', 'D', 'E', 'F')))));oldClass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoldClassassign_testoldClassassign1_6991d782cda33c6d2408210d55154932() {
        assertEval("argv <- list(list(), NULL);`oldClass<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoldClassassign_testoldClassassign2_d28917eb4a217d340a8f63b40b45fd24() {
        assertEval("argv <- list(NULL, NULL);`oldClass<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoldClassassign__testoldClassassign_1_873c1c2d762b7ba43a935de0a76abf45() {
        assertEval("argv <- structure(list(structure(1:10, class = 'foo'), value = character(0)),     .Names = c('', 'value'));do.call('oldClass<-', argv)");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators1_8eef79c9520b9bb26857d9f27101c73f() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators10_7bd5aac02a80b1ceccac55bbfd30ea67() {
        assertEval("argv <- list(1, 0+1i);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators100_7620ba83953ed9b09aade4a0e47cd3e5() {
        assertEval("argv <- list(c(30L, 30L, 60L, 60L, 60L, 60L, 60L, 60L, 30L, 30L, 60L, 60L, 60L, NA, 30L, 30L, 30L, 30L, 60L, 60L, 60L, 60L, 60L, 60L, 30L, 30L, 60L, 60L, 60L, 60L, 30L, 30L, 30L, NA, 30L, 30L, 60L, 60L, 30L, 30L, 30L, 30L, 30L, 60L, 60L, 30L, 30L, 30L, 30L, 60L, NA, 60L, NA, 30L, 60L, 60L, 30L, NA, 30L, 30L, 60L, NA, 30L, 30L, 30L, 30L, 30L, NA, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, NA, 18L, 18L, 30L, 30L, 30L, 30L, 18L, 18L, 30L, 30L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, NA, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, NA, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 30L, 30L, NA, 18L, NA, 30L, 30L, NA, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 30L, 30L, NA, 30L, 18L, 18L, 30L, 30L, 18L, 18L, 7L, 7L, 30L, 30L, 18L, 18L, NA, 30L, 7L, 7L, 7L, NA, 18L, 18L, 7L, 7L, 18L, NA, 30L, 30L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 18L, 18L), 60);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators101_a3d29b3b8a08e460c98746854862b767() {
        assertEval("argv <- list(structure(c(21, 0, 77, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 325, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361, 0, 513, 96, 0, 288, 0, 0, 576, 0, 0, 0, 0, 0, 513, 0, 729), .Dim = c(7L, 7L), .Dimnames = list(NULL, NULL)), 0);`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators102_e392242864b10272f401db17c62e9107() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 0L);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators103_f0ea13d83ab8332f565106c4f4645bfd() {
        assertEval("argv <- list(NULL, NULL);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators104_e51827e9b2d50627855ed2a4a0b67006() {
        assertEval("argv <- list(structure(c(-1.47120249322699, 0.791288894530825, 4.43110323863505), .Dim = c(1L, 3L)), 0.0031308);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators105_de95372e5d098bc1f1a0fe7801412028() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`<=`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators106_c66ead3208dbe3bf44e371bf8275b7b7() {
        assertEval("argv <- list(0.998212441139784, c(0.999998001700552, -0.0013118835870674, -0.000526551904329415, 0.999999038344567, -0.000903475278483392, -0.000381296378838388, 0.999999057686544, -0.000896140095625969, -0.000373156128147092, 0.999998405868953, -0.00114777435393854, -0.000526063245555164, 0.99999814161282, -0.00120795166706622, -0.000631851641234638, 0.999997792453059, -0.00139185834612791, -0.000519877304541034, 0.999998020546725, -0.00127080900255349, -0.00060373324887666, 0.999998059330159, -0.00123814735894241, -0.000638480377887232, 0.999998337108097, -0.00115570987192407, -0.000572034814304861, 0.999998571810103, -0.00106400147389197, -0.00054414035107764, 0.999999136998844, -0.000829344110491764, -0.000418555560445895, 0.999999436800894, -0.000688792506748533, -0.00029793232712181, 0.999999182435777, -0.000786088000160243, -0.000446798847724984, 0.999998035855459, -0.00125214214514046, -0.000629508325517675, 0.999995461301925, -0.00191759993645823, -0.000928163756226527, 0.999990501294199, -0.00282586497589704, -0.00123008240127283, 0.99998523015117, -0.00349306924843624, -0.00160252859811979, 0.999980247693918, -0.00393070891026528, -0.00207399213858218, 0.999258133391236, -0.0212608113487506, 0.0170086490790013, 0.999752823870685, -0.0151150534926454, -0.00431858671218418, 0.998521231438773, -0.0331918414882689, 0.0193619075348229, 0.973987730061349, 0.0773006134969334, -0.139141104294479, 0.997923156801661, -0.0321910695742469, 0.0321910695742468, 0.999947758503179, -0.00259457124676546, -0.006745885241587, -0.0013118835870674, 0.138748425090248, -0.345681325192261, -0.000903475278483392, 0.151184975864853, -0.358227947918666, -0.000896140095625969, 0.147770769059702, -0.354871477867884, -0.00114777435393854, 0.173602465164251, -0.378765536799718, -0.00120795166706622, 0.214831416406957, -0.410703566802515, -0.00139185834612791, 0.122433312766354, -0.327782640513123, -0.00127080900255349, 0.184140620360657, -0.387596745778816, -0.00123814735894241, 0.21006198499474, -0.407350481092054, -0.00115570987192407, 0.196781639012774, -0.397564195941878, -0.00106400147389197, 0.207318901950479, -0.405384561552842, -0.000829344110491764, 0.203000309817415, -0.402231893588506, -0.000688792506748533, 0.157606764246543, -0.364371236069974, -0.000786088000160243, 0.244176387845927, -0.429597092087573, -0.00125214214514046, 0.201759382472957, -0.401311557517518, -0.00191759993645823, 0.189814026846399, -0.392149187005707, -0.00282586497589704, 0.159305169670633, -0.365949514378666, -0.00349306924843624, 0.173889122744829, -0.378998013455332, -0.00393070891026528, 0.217788926857211, -0.412724435577854, -0.0212608113487506, 0.000452357688250284, -0.00036188615058233, -0.0151150534926454, 0.000228521327097438, 6.52918077527545e-05, -0.0331918414882689, 0.00110332991097693, -0.000643609114746404, 0.0773006134969334, 0.00613496932514866, -0.0110429447852694, -0.0321910695742469, 0.0010384215991718, -0.00103842159917336, -0.00259457124676546, 6.73215168555691e-06, 1.75035942027152e-05, -0.000526551904329415, -0.345681325192261, 0.861253573209199, -0.000381296378838388, -0.358227947918666, 0.848815985790579, -0.000373156128147092, -0.354871477867884, 0.852230173253752, -0.000526063245555164, -0.378765536799718, 0.826399128966796, -0.000631851641234638, -0.410703566802515, 0.785170441980223, -0.000519877304541034, -0.327782640513123, 0.877568894780586, -0.00060373324887666, -0.387596745778816, 0.815861359092619, -0.000638480377887232, -0.407350481092054, 0.789939955675102, -0.000572034814304861, -0.397564195941878, 0.803220023879128, -0.00054414035107764, -0.405384561552842, 0.792682526239419, -0.000418555560445895, -0.402231893588506, 0.797000553183741, -0.00029793232712181, -0.364371236069974, 0.842393798952562, -0.000446798847724984, -0.429597092087573, 0.755824429718295, -0.000629508325517675, -0.401311557517518, 0.798242581671585, -0.000928163756226527, -0.392149187005707, 0.810190511851676, -0.00123008240127283, -0.365949514378666, 0.840704329035169, -0.00160252859811979, -0.378998013455332, 0.826125647104002, -0.00207399213858218, -0.412724435577854, 0.782230825448871, 0.0170086490790013, -0.00036188615058233, 0.00028950892043616, -0.00431858671218418, 6.52918077527545e-05, 1.86548021961656e-05, 0.0193619075348229, -0.000643609114746404, 0.000375438650284673, -0.139141104294479, -0.0110429447852694, 0.0198773006134874, 0.0321910695742468, -0.00103842159917336, 0.00103842159917592, -0.006745885241587, 1.75035942027152e-05, 4.55093454284494e-05));`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators107_52d36541c4857242e673678de2671c5c() {
        assertEval("argv <- list(structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'), 0);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators108_8181ca7c1c37c1e17e3a5c89f7e343b4() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96), .Dim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4')), .Tsp = c(1, 101, 1), class = c('mts', 'ts', 'matrix')), 0);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators109_92586c40bacb2026c7d5368eaee757ed() {
        assertEval("argv <- list(structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166, 171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194, 196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201, 204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 229, 242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 419.147602949539, 391.474665943444, 435.919286153217, 443.935203034261, 455.023399013445, 517.28707821144, 589.71337277669, 582.999919227301, 484.573388713116, 428.878182738437, 368.526582998452, 406.728709993152, 415.660571294428, 388.716535970235, 433.006017658935, 440.885684396326, 451.651900136866, 513.051252429496, 584.327164324967, 577.055407135124, 479.076505013118, 423.494870357491, 363.43932958967, 400.592058645117, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 484.030717075782, 462.954959541421, 526.353307750503, 546.165638262644, 569.502470928676, 657.838443307596, 761.241730163307, 763.280655335144, 642.989004951864, 576.423799567567, 501.429012064338, 559.981301364233, 591.700754553767, 565.210772316967, 642.377841008703, 666.682421047093, 695.547100430962, 804.065022775202, 931.340589597203, 934.837830059897, 788.422986194072, 707.666678543854, 616.37838266375, 689.250456425465), .Dim = c(168L, 3L), .Dimnames = list(NULL, c('structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, ', 'structure(c(419.147602949539, 391.474665943444, 435.919286153217, ', 'structure(c(484.030717075782, 462.954959541421, 526.353307750503, ')), .Tsp = c(1949, 1962.91666666667, 12), class = c('mts', 'ts', 'matrix')), 0);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators11_6a358875184a74ecf0766766ccec2b9c() {
        assertEval("argv <- list(structure(68.6851383798793, .Names = ''), structure(35.9756377289347, .Names = 'Var1'));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators110_5e09a2dbdb2811ad41daadd0ac7279bd() {
        assertEval("argv <- list(structure(list(Fertility = c(80.2, 83.1, 92.5, 85.8, 76.9), Agriculture = c(17, 45.1, 39.7, 36.5, 43.5), Examination = c(15L, 6L, 5L, 12L, 17L), Education = c(12L, 9L, 5L, 7L, 15L)), .Names = c('Fertility', 'Agriculture', 'Examination', 'Education'), row.names = c('Courtelary', 'Delemont', 'Franches-Mnt', 'Moutier', 'Neuveville'), class = 'data.frame'), 6);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators111_39ef0f9f082756ba98b3e8184c7f5937() {
        assertEval("argv <- list(c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, NA, 2L, 2L, 0L, NA, 1L, 1L), c(0, 0, 0, 0, 0, 0, 0, 0, 1, NA, 2, 2, 0, NA, 1, 1));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators112_3963dd31b169d53844495e248c650658() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators113_01361d047460f0e4f1c56abbee309be7() {
        assertEval("argv <- list(structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c('fm2', 'original'), class = c('ordered', 'factor')), 'original');`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators114_ef431cadb4a367930deaa9ff6d9e5c96() {
        assertEval("argv <- list(structure(c(1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0), .Dim = 12L), 0);`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators115_c9dd25c8ca9417269ad19d66070149ac() {
        assertEval("argv <- list(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 124, 125, 126, 127, 160, 160, 164, 167, 168, 173, 173, 176, 180, 184, 193, 194, 196, 199, 201, 203, 205, 206, 211, 212, 214, 215, 218, 220, 221, 223, 225, 226, 228, 231, 233, 235, 237, 238, 243, 244, 246, 247, 250, 252, 253, 258, 259, 260, 261, 262, 263, 268, 269, 270, 271, 272, 272, 273, 273, 280, 281, 282, 283, 313, 314, 317, 318, 321, 322, 323, 324, 327, 328, 336, 336, 337, 337, 340, 341, 344, 345, 346, 347, 350, 351, 352, 353, 354, 354, 355, 355, 356, 357, 366, 367, 368, 368, 369, 369, 377, 378, 379, 379, 380, 380, 381, 382, 711, 728, 729, 731, 733), structure(231L, .Names = 'e7', class = c('noquote', 'hexmode')));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators116_ed9ba3527bf5fa5c67a461a914e1d462() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L), .Dim = 3:4), structure(c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L), .Dim = 3:4));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators117_f4d25de202ad38dda3ae11229b98daf1() {
        assertEval("argv <- list(structure(c(9L, 4L, 6L, 5L, 3L, 10L, 5L, 3L, 5L), .Dim = 9L, .Dimnames = structure(list(x = c('0', '1', '2', '3', '4', '5', '6', '7', '8')), .Names = 'x'), class = 'table'), c(9, 4, 6, 5, 3, 10, 5, 3, 5));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators118_b18ea452ac5c1a357275e5976a3933e6() {
        assertEval("argv <- list(structure(c('white', 'aquamarine3', 'bisque2', 'blueviolet', 'burlywood4', 'chartreuse4', 'coral4', 'cyan3', 'darkgreen', 'darkorange1', 'aliceblue', 'white', 'white', 'white', 'white', 'chocolate', 'cornflowerblue', 'cyan4', 'darkgrey', 'darkorange2', 'antiquewhite', 'white', 'white', 'white', 'white', 'chocolate1', 'cornsilk', 'darkblue', 'darkkhaki', 'darkorange3', 'antiquewhite1', 'white', 'white', 'white', 'white', 'chocolate2', 'cornsilk1', 'darkcyan', 'darkmagenta', 'darkorange4', 'antiquewhite2', 'azure2', 'blanchedalmond', 'brown3', 'cadetblue3', 'chocolate3', 'cornsilk2', 'darkgoldenrod', 'darkolivegreen', 'darkorchid', 'antiquewhite3', 'azure3', 'blue', 'brown4', 'cadetblue4', 'chocolate4', 'cornsilk3', 'darkgoldenrod1', 'darkolivegreen1', 'darkorchid1', 'antiquewhite4', 'azure4', 'blue1', 'burlywood', 'chartreuse', 'coral', 'cornsilk4', 'darkgoldenrod2', 'darkolivegreen2', 'darkorchid2', 'aquamarine', 'beige', 'blue2', 'burlywood1', 'chartreuse1', 'coral1', 'cyan', 'darkgoldenrod3', 'darkolivegreen3', 'darkorchid3', 'aquamarine1', 'bisque', 'blue3', 'burlywood2', 'chartreuse2', 'coral2', 'cyan1', 'darkgoldenrod4', 'darkolivegreen4', 'darkorchid4', 'aquamarine2', 'bisque1', 'blue4', 'burlywood3', 'chartreuse3', 'coral3', 'cyan2', 'darkgray', 'darkorange', 'darkred'), .Dim = c(10L, 10L), class = 'raster'), 'white');`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators119_18ff5f870ad0a7bca01d4b9db0267b70() {
        assertEval("argv <- list(c(0, 7.93839803127729e-06, 7.93839803127729e-06, 1.58767960625546e-05, 2.38151940938319e-05, 3.96919901563864e-05, 5.5568786218941e-05, 8.73223783440502e-05, 0.000119075970469159, 0.0001746447566881, 0.000230213542907041, 0.000317535921251092, 0.000412796697626419, 0.00055568786218941, 0.000698579026752401, 0.000904977375565611, 0.00112725252044137, 0.00142097324759863, 0.00173057077081845, 0.00213542907041359, 0.00255616416607129, 0.00308803683416687, 0.00364372469635628, 0.00431848852901484, 0.00501706755576725, 0.00585853774708264, 0.00670000793839803, 0.00769230769230769, 0.00869254584424863, 0.00983567516075256, 0.0109629276811939, 0.0122410097642296, 0.0134714614590776, 0.0148448043184885, 0.016146701595618, 0.0175597364451854, 0.0188775105183774, 0.020298483765976, 0.0215606890529491, 0.022902278320235, 0.0240692228308327, 0.0252758593315869, 0.0262602206874653, 0.0272763356354688, 0.0280304834484401, 0.0287925696594427, 0.0292768119393506, 0.0297372390251647, 0.0299118837818528, 0.0300706517424784, 0.0299118837818528, 0.0297372390251647, 0.0292768119393506, 0.0287925696594427, 0.0280304834484401, 0.0272763356354688, 0.0262602206874653, 0.0252758593315869, 0.0240692228308327, 0.022902278320235, 0.0215606890529491, 0.020298483765976, 0.0188775105183774, 0.0175597364451854, 0.016146701595618, 0.0148448043184885, 0.0134714614590776, 0.0122410097642296, 0.0109629276811939, 0.00983567516075256, 0.00869254584424863, 0.00769230769230769, 0.00670000793839803, 0.00585853774708264, 0.00501706755576725, 0.00431848852901484, 0.00364372469635628, 0.00308803683416687, 0.00255616416607129, 0.00213542907041359, 0.00173057077081845, 0.00142097324759863, 0.00112725252044137, 0.000904977375565611, 0.000698579026752401, 0.00055568786218941, 0.000412796697626419, 0.000317535921251092, 0.000230213542907041, 0.0001746447566881, 0.000119075970469159, 8.73223783440502e-05, 5.5568786218941e-05, 3.96919901563864e-05, 2.38151940938319e-05, 1.58767960625546e-05, 7.93839803127729e-06, 7.93839803127729e-06, 0), c(0, 7.93839803127729e-06, 7.93839803127729e-06, 1.58767960625546e-05, 2.38151940938319e-05, 3.96919901563864e-05, 5.5568786218941e-05, 8.73223783440502e-05, 0.000119075970469159, 0.0001746447566881, 0.000230213542907041, 0.000317535921251092, 0.000412796697626419, 0.00055568786218941, 0.000698579026752401, 0.000904977375565611, 0.00112725252044137, 0.00142097324759863, 0.00173057077081845, 0.00213542907041359, 0.00255616416607129, 0.00308803683416687, 0.00364372469635628, 0.00431848852901484, 0.00501706755576725, 0.00585853774708264, 0.00670000793839803, 0.00769230769230769, 0.00869254584424863, 0.00983567516075256, 0.0109629276811939, 0.0122410097642296, 0.0134714614590776, 0.0148448043184885, 0.016146701595618, 0.0175597364451854, 0.0188775105183774, 0.020298483765976, 0.0215606890529491, 0.022902278320235, 0.0240692228308327, 0.0252758593315869, 0.0262602206874653, 0.0272763356354688, 0.0280304834484401, 0.0287925696594427, 0.0292768119393506, 0.0297372390251647, 0.0299118837818528, 0.0300706517424784, 0.0299118837818528, 0.0297372390251647, 0.0292768119393506, 0.0287925696594427, 0.0280304834484401, 0.0272763356354688, 0.0262602206874653, 0.0252758593315869, 0.0240692228308327, 0.022902278320235, 0.0215606890529491, 0.020298483765976, 0.0188775105183774, 0.0175597364451854, 0.016146701595618, 0.0148448043184885, 0.0134714614590776, 0.0122410097642296, 0.0109629276811939, 0.00983567516075256, 0.00869254584424863, 0.00769230769230769, 0.00670000793839803, 0.00585853774708264, 0.00501706755576725, 0.00431848852901484, 0.00364372469635628, 0.00308803683416687, 0.00255616416607129, 0.00213542907041359, 0.00173057077081845, 0.00142097324759863, 0.00112725252044137, 0.000904977375565611, 0.000698579026752401, 0.00055568786218941, 0.000412796697626419, 0.000317535921251092, 0.000230213542907041, 0.0001746447566881, 0.000119075970469159, 8.73223783440502e-05, 5.5568786218941e-05, 3.96919901563864e-05, 2.38151940938319e-05, 1.58767960625546e-05, 7.93839803127729e-06, 7.93839803127729e-06, 0));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators12_6205823d8ab8658ab17ce459ccb7a435() {
        assertEval("argv <- list(structure(0.070387338608913, .Names = 'Var1'), structure(0.00374843815077052, .Names = 'Var2'));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators120_571abbafc889c01f539529e23ed0df5e() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), .Tsp = c(1959, 1997.91666666667, 12), class = 'ts'), 10L);`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators121_1130a49b1be28115d545ef8a5bcd5ef2() {
        assertEval("argv <- list(structure(c(0.86317353889998+0i, -3.79913366221062+3.31244294914647i, 1.55614767167993-1.74174276171448i, -2.23430861671215-1.65262168622253i, -2.23430861671215+1.65262168622253i, 1.55614767167993+1.74174276171448i, -3.79913366221062-3.31244294914647i, -3.33827801689622+0i, -0.24558402446046-1.38976239274682i, 0.38994543428825+2.49010387459687i, 1.4081214006546+1.81482300583077i, 1.4081214006546-1.81482300583077i, 0.38994543428825-2.49010387459687i, -0.24558402446046+1.38976239274682i, -2.31885928035568+0i, -4.19304293056817-0.22777444729915i, 0.98896416070392-1.81216964948694i, 1.39179443748361-4.40983340277928i, 1.39179443748361+4.40983340277928i, 0.98896416070392+1.81216964948694i, -4.19304293056817+0.22777444729915i, -1.0554525205105+0i, -0.26365333042432+1.4074399019829i, 0.40560122186879+3.13070845018955i, -1.20041403617116-3.43234427504359i, -1.20041403617116+3.43234427504359i, 0.40560122186879-3.13070845018955i, -0.26365333042432-1.4074399019829i, 0.0498590799965546+0i, 1.83744919383128-0.49050274510365i, -0.24547773966823+4.86316579489277i, -0.99323533469825+1.90306050881202i, -0.99323533469825-1.90306050881202i, -0.24547773966823-4.86316579489277i, 1.83744919383128+0.49050274510365i), .Dim = c(7L, 5L)), structure(c(0.86317353889998+0i, -3.79913366221062+3.31244294914647i, 1.55614767167993-1.74174276171448i, -2.23430861671215-1.65262168622253i, -2.23430861671215+1.65262168622253i, 1.55614767167993+1.74174276171448i, -3.79913366221062-3.31244294914647i, -3.33827801689622+0i, -0.24558402446046-1.38976239274682i, 0.38994543428825+2.49010387459687i, 1.4081214006546+1.81482300583077i, 1.4081214006546-1.81482300583077i, 0.38994543428825-2.49010387459687i, -0.24558402446046+1.38976239274682i, -2.31885928035568+0i, -4.19304293056817-0.22777444729915i, 0.98896416070392-1.81216964948694i, 1.39179443748361-4.40983340277928i, 1.39179443748361+4.40983340277928i, 0.98896416070392+1.81216964948694i, -4.19304293056817+0.22777444729915i, -1.0554525205105+0i, -0.26365333042432+1.4074399019829i, 0.40560122186879+3.13070845018955i, -1.20041403617116-3.43234427504359i, -1.20041403617116+3.43234427504359i, 0.40560122186879-3.13070845018955i, -0.26365333042432-1.4074399019829i, 0.0498590799965546+0i, 1.83744919383128-0.49050274510365i, -0.24547773966823+4.86316579489277i, -0.99323533469825+1.90306050881202i, -0.99323533469825-1.90306050881202i, -0.24547773966823-4.86316579489277i, 1.83744919383128+0.49050274510365i), .Dim = c(7L, 5L)));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators122_c75082b19991bf7920694eed1fee3d97() {
        assertEval("argv <- list(c(1.22408179743946+0i, 0.359813827057364+0i, 0.400771450594052+0i, 0.11068271594512+0i, -0.555841134754075+0i), structure(c(1.22408179743946+0i, 0.359813827057364+0i, 0.400771450594052+0i, 0.11068271594512+0i, -0.555841134754075+0i), .Dim = c(1L, 5L)));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators123_3d5f0458d6bd1687da7ecd92cba98837() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 1L, 2L), .Label = c('0-9g/day', '10-19', '20-29', '30+'), class = c('ordered', 'factor'), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88')), structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 1L, 2L), .Label = c('0-9g/day', '10-19', '20-29', '30+'), class = c('ordered', 'factor')));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators124_cb7441cc3f31f179330a8cb99f5e97d2() {
        assertEval("argv <- list(16L, 8);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators125_e65451fa1de50d528ef263eae64a568f() {
        assertEval("argv <- list('«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè', '«Latin-1 accented chars»: ghè øØ å<Å æ<Æ gh ghè');`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators126_b247bd4cada9ea987df987f69c0254ca() {
        assertEval("argv <- list(structure(list(cde = 2L, cd = 4L), .Names = c('cde', 'cd'), row.names = 'ab', class = 'data.frame'), c(2, 4));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators127_6a0d217be60a9da4937ee648681aba86() {
        assertEval("argv <- list(1, structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Names = c('is.array', 'is.atomic', 'is.call', 'is.character', 'is.complex', 'is.data.frame', 'is.double', 'is.environment', 'is.expression', 'is.factor', 'is.finite', 'is.function', 'is.infinite', 'is.integer', 'is.language', 'is.list', 'is.logical', 'is.matrix', 'is.na', 'is.name', 'is.nan', 'is.null', 'is.numeric', 'is.numeric_version', 'is.object', 'is.ordered', 'is.package_version', 'is.pairlist', 'is.primitive', 'is.qr', 'is.raw', 'is.recursive', 'is.symbol', 'is.table', 'is.vector')));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators128_7b120e81ea0d8f35f230a4922e1f760d() {
        assertEval("argv <- list(c(30000L, 100000L), c(30000, 1e+05));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators129_3f3afd468d1af420af4c5d5ccb287469() {
        assertEval("argv <- list(2L, e2 = 2);`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators13_4be7d73f8ee55def375a1ec509e68ba2() {
        assertEval("argv <- list(c(1, 1, 10, 1, 1, 10, 10), 0);`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators130_3c02add1a8cf420daac6027427811d6e() {
        assertEval("argv <- list(2, structure(list(2L), class = structure('L', package = '.GlobalEnv')));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators131_915f10ceaf99047d9064536431c6510a() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 1L);`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators132_876d39eec749c4e2a684714378a6b91a() {
        assertEval("argv <- list(NULL, NULL);`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators133_e32b26a50a63f1258a04c3a15f9dcf48() {
        assertEval("argv <- list(structure(c(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2), .Dim = 5:6), structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Dim = 5:6, .Dimnames = structure(list(blocks = c('1', '2', '3', '4', '5'), varieties = c('1', '2', '3', '4', '5', '6')), .Names = c('blocks', 'varieties')), class = 'table'));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators134_52935d1beb1ada309db7c36152b6ff78() {
        assertEval("argv <- list(FALSE, 'Sweave');`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators135_8b5105c25a2df0f39751993061d1323b() {
        assertEval("argv <- list(1, 26);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators136_0b97efb881fe16cb890d44ecbb8d3a59() {
        assertEval("argv <- list(NULL, NULL);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators137_d7562afd541b429a3dd6aa47e2c317ed() {
        assertEval("argv <- list(structure(c(2, 1, 0, 1, 2), .Tsp = c(-1, 3, 1), class = 'ts'), 1e-05);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators138_57c685cf0cbd0a921fc8be7b9380461e() {
        assertEval("argv <- list(structure(NA_real_, class = c('POSIXct', 'POSIXt')), structure(1386394754, class = c('POSIXct', 'POSIXt')));`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators139_036cb373bde70ef5d936dbeefe146080() {
        assertEval("argv <- list(structure(c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492, -0.305388387156356, 1.51178116845085, 0.389843236411431, -0.621240580541804, -2.2146998871775, 1.12493091814311, -0.0449336090152309, -0.0161902630989461, 0.943836210685299, 0.821221195098089, 0.593901321217509, 0.918977371608218, 0.782136300731067, 0.0745649833651906, -1.98935169586337, 0.61982574789471, -0.0561287395290008, -0.155795506705329, -1.47075238389927), .Dim = c(4L, 7L)), 0);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators14_f97458c4c3339655fae6ddedc5fa49a0() {
        assertEval("argv <- list(c(23.454000046244, 23.454000046244, 23.454000046244, 23.454000046244, 28.3020224298599, 28.3020224298599, 28.3020224298599, 28.3020224298599, 30.800519631939, 30.800519631939, 30.800519631939, 30.800519631939, 25.9206422064884, 25.9206422064884, 25.9206422064884, 23.2002066882042, 23.2002066882042, 23.2002066882042, 20.1196890721666, 20.1196890721666, 20.1196890721666, 33.5952341720171, 33.5952341720171, 39.0519830824759, 39.0519830824759, 32.136512000254, 32.136512000254, 40.0046131871928, 40.0046131871928, 36.1899385542654, 36.1899385542654, 36.1899385542654, 36.9107066354437, 36.9107066354437, 30.6345192978006, 30.6345192978006, 34.3113600002908, 34.3113600002908, 38.3947952390571, 38.3947952390571, 31.2256309266188, 31.2256309266188, 31.2256309266188, 31.2256309266188, 31.2302025081837, 31.2302025081837, 31.2302025081837, 31.2302025081837, 19.9976293105352, 19.9976293105352, 19.9976293105352, 37.0952034528547, 37.0952034528547, 37.0952034528547, 32.5940180631865, 32.5940180631865, 32.5940180631865, 30.3755575381127, 30.3755575381127, 30.3755575381127), c(-7.78372381938215, -2.21918545910218, -0.632702831725275, -0.180387300047981, -7.49017129741483, -2.13549190787282, -0.608841307830204, -0.173584239188075, -22.5802449738518, -16.4998575320751, -8.81014962829596, -2.51182549655016, -23.557038894075, -17.2136212906412, -9.19126598036131, -21.8778835738372, -15.9866273589884, -8.53610880037608, -15.0686941140291, -11.0110101269414, -5.87936269076593, -5.59523381317633, -1.59523408160483, -33.4519828181102, -13.051983020203, -16.7365117167447, -8.93651185736664, -28.2046129643012, -11.0046131346857, -24.7866580698756, -18.1121297542524, -9.67102733534973, -10.9107059357263, -3.11070645913868, -6.43451888517834, -1.83451919385285, -19.311359673177, -10.3113598354284, -17.5947943688525, -9.39479451670115, -13.4592527410221, -3.83731214857368, -1.09404027169438, -0.311917318619494, -9.6582725100978, -2.75363032037238, -0.7850762062622, -0.223829845669225, -4.53229442651767, -1.2921838083017, -0.368409206751382, -8.25942763485825, -2.35481141586021, -0.671370589998607, -10.5255747423345, -3.00090328985181, -0.855575184775718, -7.55762449149225, -2.15472321038819, -0.614324265331269));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators140_3952187a30b7a37d82d63ff4776f6bda() {
        assertEval("argv <- list(structure(c(24L, 13L, 15L, 68L, 39L, 74L, 22L, 1L, 8L, 55L, 24L, 20L, 51L, 13L, 3L, 4L, 5L, 6L, 15L, 2L, 8L, 60L, 67L, 23L, 58L, 24L, 22L, 21L, 37L, 74L, 59L, 39L, 14L, 14L, 19L, 23L, 70L, 21L, 22L, 31L, 29L, 30L, 45L, 58L, 17L, 7L, 19L, 26L, 39L, 74L, 57L, 59L, 12L, 72L, 70L, 37L, 64L, 16L, 18L, 21L, 22L, 8L, 62L, 61L, 63L, 71L, 105L, 64L, 10L, 41L, 8L, 27L, 11L, 34L, 32L, 33L, 68L, 107L, NA, 66L, NA, 65L, 48L, 52L, 43L, 47L, 46L, 44L, 41L, 54L, 28L, 50L, 40L, NA, 69L, NA, 75L, 109L, NA, 86L, 112L, 110L, 104L, 24L, 111L, 87L, NA, NA, 92L, 73L, 85L, 90L, 89L, NA, 83L, NA, 102L, NA, 108L, 88L, 91L, 93L, NA, 94L, 84L, NA, 106L, NA, 95L, 82L, 56L, 87L, 109L, 75L, 104L, 110L, 112L, 111L, 24L, 73L, 85L, 86L, 90L, 89L, 102L, 88L, 92L, 9L, 49L, 42L, 38L, 35L, 36L, 25L, NA, NA, 9L, 49L, 42L, NA, 36L, 38L, 25L, 53L, 79L, 78L, 103L, 77L, 80L, 114L, 97L, 113L, 76L, 96L, 81L, 116L, 99L, 117L, 115L, 98L, 101L, 100L), .Label = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266')), 20);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators141_eca21abeb74fdc0d611c2a4db296a15d() {
        assertEval("argv <- list(structure(c(2, 2, 1, 1, 1, 0, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0), .Dim = 18L, .Dimnames = list(c('5', '8', '9', '12', '13', '16', '18', '23', '27', '28', '30', '31', '33', '34', '43', '45', '48', '161'))), 0);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators142_465d2b76c425c07e19e8cc91d98b7adf() {
        assertEval("argv <- list(structure(list(c(3L, 0L, 1L)), class = c('R_system_version', 'package_version', 'numeric_version')), structure('2.13.2', .Names = 'SweaveListingUtils'));`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators143_13577c3a1c5688412b32e3f1068a5279() {
        assertEval("argv <- list(c(8262, 2889), 1e+05);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators144_2c2a189933293f0c5f22857e79b2ce05() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`>`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators145_3d3d8e1ff0d28f2ad3d31638e6dfb398() {
        assertEval("argv <- list(c(1, 2, 3, NA, -1, 0, 1, NA), 0);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators146_a732d60c42e411f8b9f881b700d9260c() {
        assertEval("argv <- list(10, 16L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators147_462aea9b8c69f122f1fbbf5284cb92ad() {
        assertEval("argv <- list(structure(0, .Tsp = c(1, 1, 1), class = 'ts'), 1e-05);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators148_aff2bc0695daed09ac523ad1fa4340e2() {
        assertEval("argv <- list(FALSE, FALSE);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators149_87fdd96024fbf3cfb8357070b43cc815() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`>=`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators15_be9fcc00dbcfc2be825cda4e77962a47() {
        assertEval("argv <- list(structure(c(1976, 1976.08333333333, 1976.16666666667, 1976.25, 1976.33333333333, 1976.41666666667, 1976.5, 1976.58333333333, 1976.66666666667, 1976.75, 1976.83333333333, 1976.91666666667, 1977, 1977.08333333333, 1977.16666666667, 1977.25, 1977.33333333333, 1977.41666666667, 1977.5, 1977.58333333333, 1977.66666666667, 1977.75, 1977.83333333333, 1977.91666666667, 1978), .Tsp = c(1976, 1978, 12), class = 'ts'), 0.001);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators150_20776e8a9cc54e11f6c045695ef8a2e6() {
        assertEval("argv <- list(NULL, NULL);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators151_3209b807e669f4a6a3baf1f44553e5a9() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 6L, 2L, 4L, 3L, 7L, 2L, 8L, 4L, 2L, 2L, 1L, 3L, 3L, 4L, 3L, 2L, 1L, 2L, 3L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 4L, 1L, 1L, 1L, 1L, 2L, 1L, 5L, 2L, 1L, 3L, 2L, 2L, 6L, 2L, 1L, 2L, 5L, 2L, 2L, 2L, 4L, 4L, 1L, 1L, 3L, 4L, 2L, 2L, 2L, 1L, 5L, 4L, 4L, 1L, 1L, 4L, 2L, 3L, 2L, 1L, 8L, 1L, 5L, 1L, 3L, 4L, 4L, 1L, 3L, 1L, 2L, 6L, 1L, 1L, 1L, 1L, 1L, 6L, 2L, 2L, 1L, 1L, 2L, 3L, 1L, 1L, 1L, 1L), .Dim = 124L, .Dimnames = structure(list(ne60 = c('96', '100', '102', '104', '105', '107', '108', '109', '110', '111', '112', '113', '115', '116', '117', '118', '119', '120', '121', '122', '124', '125', '126', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '149', '157', '158', '168', '173', '174', '184', '199', '200', '202', '205', '207', '210', '214', '216', '221', '223', '224', '225', '226', '229', '230', '231', '233', '235', '237', '238', '240', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '293', '294', '296', '300', '302', '304', '306')), .Names = 'ne60'), class = 'table'), 4);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators152_f984e3d1cf8f830252f19a61daddb068() {
        assertEval("argv <- list(structure(3.00390625, base = 16, lens = 3L, .classes = c('R_system_version', 'package_version', 'numeric_version')), structure(2.9375, base = 16, lens = 3L, .classes = c('package_version', 'numeric_version')));`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators153_53bf623e542834ecf368110a92e1b750() {
        assertEval("argv <- list(structure(list(2L), class = 'numeric_version'), '2');`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators154_36372853a5822031d60aba017ba8ef46() {
        assertEval("argv <- list('3.0.1', '2.3.0');`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators155_523905e7d430f9ee4653fde1280d3e9a() {
        assertEval("argv <- list(c(30L, 30L, 60L, 60L, 60L, 60L, 60L, 60L, 30L, 30L, 60L, 60L, 60L, NA, 30L, 30L, 30L, 30L, 60L, 60L, 60L, 60L, 60L, 60L, 30L, 30L, 60L, 60L, 60L, 60L, 30L, 30L, 30L, NA, 30L, 30L, 60L, 60L, 30L, 30L, 30L, 30L, 30L, 60L, 60L, 30L, 30L, 30L, 30L, 60L, NA, 60L, NA, 30L, 60L, 60L, 30L, NA, 30L, 30L, 60L, NA, 30L, 30L, 30L, 30L, 30L, NA, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, 30L, NA, 18L, 18L, 30L, 30L, 30L, 30L, 18L, 18L, 30L, 30L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, NA, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, NA, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 18L, 18L, 30L, 30L, 30L, 30L, NA, 18L, NA, 30L, 30L, NA, 18L, 18L, 30L, 30L, 7L, 7L, 18L, 18L, 30L, 30L, 30L, 30L, NA, 30L, 18L, 18L, 30L, 30L, 18L, 18L, 7L, 7L, 30L, 30L, 18L, 18L, NA, 30L, 7L, 7L, 7L, NA, 18L, 18L, 7L, 7L, 18L, NA, 30L, 30L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 18L, 18L), 30);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators156_92d8a04bcf943e9f86c8d50b69d67ca6() {
        assertEval("argv <- list(structure(c(0L, 1L, 1L, 3L), .Names = c('1', '2', '3', '4')), 0:3);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators157_d8f8ba1efa573693d94bd11b792c7b0e() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators158_f0f008d07f04c29b16d239e376942902() {
        assertEval("argv <- list(c(1.67451869393188, 0.668927329809365, 0.0791361259651342, 0.543924729050942, 0.00967644138302005, 0.464139419264689, 1.12629957234273), 1e-30);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators159_b92d5a6dc2cb55921488f6fa0abe9b7a() {
        assertEval("argv <- list(c(2.00256647265648e-308, 2.22284878464869e-308, 2.22507363599982e-308, 2.2250738585072e-308, 2.22507408101459e-308, 2.22729893236571e-308, 2.44758124435792e-308, 1.61792382137608e+308, 1.79589544172745e+308, 1.797692955093e+308, 1.79769313486232e+308), 1);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators16_b33d95bb17cd4c1e8d54410f54d9518b() {
        assertEval("argv <- list(1.678932e-305, 0+0i);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators160_b692fc7bd38881f9d5ce030e5d67a055() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), .Dim = c(4L, 4L)), 0);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators161_7c3f8b86ca755678e540a58438ac88b5() {
        assertEval("argv <- list(structure(c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492, -0.305388387156356, 1.51178116845085, 0.389843236411431, -0.621240580541804, -2.2146998871775, 1.12493091814311, -0.0449336090152309, -0.0161902630989461, 0.943836210685299, 0.821221195098089, 0.593901321217509, 0.918977371608218, 0.782136300731067, 0.0745649833651906, -1.98935169586337, 0.61982574789471, -0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861, -0.41499456329968, -0.394289953710349, -0.0593133967111857, 1.10002537198388, 0.763175748457544, -0.164523596253587, -0.253361680136508, 0.696963375404737, 0.556663198673657, -0.68875569454952, -0.70749515696212, 0.36458196213683, 0.768532924515416, -0.112346212150228, 0.881107726454215), .Label = structure(list(c(-2.21578569960353, -0.304302574730325), c(-0.689841506975551, -0.0550429271029698), c(-0.254447492562539, 0.3887574239854), c(-0.0548908530089361, 0.620911560320741), c(0.3887574239854, 0.882193538880246), c(0.695877562978706, 1.59636661456382)), class = 'shingleLevel'), class = 'shingle'), -0.254447492562539);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators162_bbda2aa021c4b483d7e84ae684f6a3ae() {
        assertEval("argv <- list(c(1, 2, 3, 4, 5, 6, 7, NA, 9, 10, 11, 12), 1);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators163_8ee4d83a20842d0a6d2b337a0f06957c() {
        assertEval("argv <- list(structure(c(18000, 315550800, 631170000, 946702800, 1262322000, 1577854800), class = c('POSIXct', 'POSIXt'), tzone = ''), 28304640);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators164_83ec8330d181c5944a42981a0e425ba1() {
        assertEval("argv <- list(c`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators165_e47c850c387aba4a4529f76eb65e816c() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators166_34af1db046624def67055f7f7b56a597() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE), .Dim = c(5L, 2L), .Dimnames = list(NULL, c('VAR1', 'VAR3'))));`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators167_88f90f0ef9f9eceefdd23aea5fd81f76() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')), structure(c(TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators168_9356a73e37f1d5b19b01f02fad7cfd07() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`%%`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators169_f1b2742960c9b0c8374d37ebe067c38e() {
        assertEval("argv <- list(structure(1:3, .Label = c('1', '2', NA), class = 'factor'), structure(1:3, .Label = c('1', '2', NA), class = 'factor'));`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators17_da8bd2475d66e2c4c431ce6c6efac096() {
        assertEval("argv <- list(4.40646552950873, structure(c(2.62980519617636, 3.871217247387, 4.50132920500077, 4.98499803067693, 5.10709299286893, 5.03983500591087, 4.63030887318817, 5.53509956067429, 5.33332559980012, 5.70084841033141, 4.71574513022187, 4.22037009914704, 3.98171648049174, 4.03049403236714, 4.12846177743637, 4.47709151156657, 5.3332151234887, 5.63317778205492, 5.92697054095118, 6.19581080008781, 6.04311655609605, 6.94831988490059, 6.18986185304067, 5.62147157665625, 4.74634441202163, 4.26914765102244, 5.32109627677161, 6.60533693281051, 5.67035960484307, 5.44401652160046, 3.65126501643718, 3.93293892861635, 3.04580339357603, 3.07640267537579, 2.77049106976243, 2.76443164640389, 3.33918351115387, 4.07927158424254, 4.04908494376122, 4.33034621462195, 3.99989475056739, 4.25702880430535), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42')));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators170_7d7fa6127f4a729ea766cfcd8987903a() {
        assertEval("argv <- list(429204532L, 2L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators171_e4cdd0497655c9b378c2cbdbe765935b() {
        assertEval("argv <- list(structure(c(1960.08433333333, 1960.16766666667, 1960.251, 1960.33433333333, 1960.41766666667, 1960.501, 1960.58433333333, 1960.66766666667, 1960.751, 1960.83433333333, 1960.91766666667, 1961.001, 1961.08433333333, 1961.16766666667, 1961.251, 1961.33433333333, 1961.41766666667, 1961.501, 1961.58433333333, 1961.66766666667), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'), 1);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators172_7b3d87c5dee287217059b9854f22c227() {
        assertEval("argv <- list(c(-1, 0, 0, 0, 0, 0, 1, 1, 1), 2L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators173_8471a4eeb676329a94182bd1ac7317ed() {
        assertEval("argv <- list(-65205377L, 1073741824L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators174_99887ed6af06e95156b785b51524703f() {
        assertEval("argv <- list(160L, 16);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators175_4f0517c2fac61231fd6eb92180045897() {
        assertEval("argv <- list(structure(c(52L, 52L, 1L, 1L), .Names = c('y', 'x', 'Ta', 'Tb')), 52L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators176_633afef6de40470ec922f868b89bdc22() {
        assertEval("argv <- list(1, 2);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators177_41175b39cc02e7a62a0b77604d4af2de() {
        assertEval("argv <- list(c(0, 1, 1, 2, 2, 3, 3, 4, 4), 2L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators178_e404a08113583901f6b0ee9f40642ff9() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0), .Dim = c(12L, 4L), .Dimnames = list(c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), c('(Intercept)', 'M.userY', 'TempLow', 'M.userY:TempLow')), assign = 0:3, contrasts = structure(list(M.user = 'contr.treatment', Temp = 'contr.treatment'), .Names = c('M.user', 'Temp'))), c(0.262364229584951, -0.851832547542732, 0.0441056253109867, 0.444266588736502));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators179_94961e98abe4ea3c17f840200b6529e8() {
        assertEval("argv <- list(structure(c(1976.001, 1976.08433333333, 1976.16766666667, 1976.251, 1976.33433333333, 1976.41766666667, 1976.501, 1976.58433333333, 1976.66766666667, 1976.751, 1976.83433333333, 1976.91766666667, 1977.001, 1977.08433333333, 1977.16766666667, 1977.251, 1977.33433333333, 1977.41766666667, 1977.501, 1977.58433333333, 1977.66766666667, 1977.751, 1977.83433333333, 1977.91766666667, 1978.001), .Tsp = c(1976, 1978, 12), class = 'ts'), 1);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators18_a5183b1ed31b7c2449b7c920f7faa7be() {
        assertEval("argv <- list(100.35609040323, c(16.9869197055322, 32.9569269674228, 63.9409059420178, 124.054025326065, 240.681625836759, 466.954980809107, 905.955962962971, 1757.67737910411, 3410.13238536472, 6616.11910351861, 12836.1679387595, 24903.9058659644, 48316.9533415093, 93741.4393055559, 181871.099797343, 352854.587965931, 684585.733452663, 1328189.12501195, 2576866.95120412, 4999471.20418434, 9699651.86203691, 18818639.4925072, 36510711.6612103, 70835729.9973146, 137430918.652385, 266634612.255063, 517307292.635014, 1003646273.64047, 1947209824.67014, 3777851022.69026, 7329543107.69234, 14220307218.2724, 27589323701.4766, 53527027976.3571, 103849690372.38, 201482477136.65, 390903318513.094, 758405428581.828, 1471409340525, 2854733584163.2, 5538570139592.47, 10745576876721.9, 20847875806089.6, 40447705191861.9, 78474031143733.8, 152250258320878, 295386140114522, 573089154225693, 1111870646888807, 2157179779616058, 4185221198711724, 8119896472079771, 15753699885107074, 30564313341110788, 59298911165416064, 115047926192872144, 223208572655883520, 433054888999496256, 840185189372140416, 1630073162483360512, 3162562907154039296, 6135800755390145536, 11904285231665293312, 23095927088628809728, 44809229424741679104, 86935979401654583296, 1.68667585038894e+20, 3.27237979472409e+20, 6.34886040400066e+20, 1.23176498322335e+21, 2.3897910449238e+21, 4.63651858608037e+21, 8.99547458123233e+21, 1.74524401098118e+22, 3.38600996574481e+22, 6.56931833943232e+22, 1.2745368112143e+23, 2.47277418935474e+23, 4.79751713543167e+23, 9.30783359186e+23, 1.80584589336672e+24, 3.50358583273485e+24, 6.79743145992125e+24, 1.31879384887967e+25, 2.55863884188836e+25, 4.96410620111801e+25, 9.63103896202531e+25, 1.8685521165353e+26, 3.62524440610747e+26, 7.03346558424191e+26, 1.36458766866515e+27, 2.64748506006045e+27, 5.13647990832267e+27, 9.96546732089944e+27, 1.93343575165167e+28, 3.75112745382766e+28, 7.27769576146466e+28, 1.41197163381895e+29, 2.73941637580644e+29, 5.31483912303488e+29));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators180_0a6e3f794ff2a7db32d9cdf5748cd729() {
        assertEval("argv <- list(structure(c(1, 0, NA, 1), .Dim = c(2L, 2L)), structure(c(1, 2, 0, 1, 0, 0), .Dim = 2:3));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators181_aa5e75608f75711c7b0ab9ce4579a550() {
        assertEval("argv <- list(0, NA_real_);`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators182_7ccd4493bbbe1b9fc4ee89461780fe08() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.35, 0.64, 0.12, 1.66, 1.52, 0.23, -1.99, 0.42, 1.86, -0.02, -1.64, -0.46, -0.1, 1.25, 0.37, 0.31, 1.11, 1.65, 0.33, 0.89, -0.25, -0.87, -0.22, 0.71, -2.26, 0.77, -0.05, 0.32, -0.64, 0.39, 0.19, -1.62, 0.37, 0.02, 0.97, -2.62, 0.15, 1.55, -1.41, -2.35, -0.43, 0.57, -0.66, -0.08, 0.02, 0.24, -0.33, -0.03, -1.13, 0.32, 1.55, 2.13, -0.1, -0.32, -0.67, 1.44, 0.04, -1.1, -0.95, -0.19, -0.68, -0.43, -0.84, 0.69, -0.65, 0.71, 0.19, 0.45, 0.45, -1.19, 1.3, 0.14, -0.36, -0.5, -0.47, -1.31, -1.02, 1.17, 1.51, -0.33, -0.01, -0.59, -0.28, -0.18, -1.07, 0.66, -0.71, 1.88, -0.14, -0.19, 0.84, 0.44, 1.33, -0.2, -0.45, 1.46, 1, -1.02, 0.68, 0.84), .Dim = c(100L, 2L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'), c('(Intercept)', 'x')), assign = 0:1), c(1.15937252188199, 0.442508987631707));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators183_b023dc44c55f056cf7a6b66b76a1eaff() {
        assertEval("argv <- list(c(-3, -2, -1, 0, 1, 2, 3, 4, 5), structure(c(-3, -2, -1, 0, 1, 2, 3, 4, 5), .Dim = c(1L, 9L)));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators184_92452e14882c5ca276a090555de4213a() {
        assertEval("argv <- list(c(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 4000, 8000, 12000, 16000, 20000, 24000, 28000, 32000, 36000, 40000, 44000, 48000), structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), .Dim = c(1L, 24L)));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators185_fb8e8d4281a54bf250bed4f01eefbfab() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(10L, 0L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), NULL)), structure(numeric(0), .Names = character(0)));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators186_8ac8d377f486f1b899533c7cc99143d1() {
        assertEval("argv <- list(structure(c(0.553622032575332, 0, 0, 0, 0, 1.83583330034692, 0, 0, 0, 0, 0.540309168173204, 0, 0, 0, 0, 0.347171956892285), .Dim = c(4L, 4L)), structure(c(3.26267089696047, -0.712693854979374, 2.39769041729195, 5.15111718577956, -0.712693854979374, 0.296710908544859, -1.00753262176762, -0.987904999293151, 2.39769041729195, -1.00753262176762, 3.42543180838832, 3.32535677689614, 5.15111718577956, -0.987904999293151, 3.32535677689614, 8.29680198510459), .Dim = c(4L, 4L), .Dimnames = list(c('A', 'B', 'C', 'D'), c('A', 'B', 'C', 'D'))));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators187_d39f06463cb53ab21d6054ade90cbbf7() {
        assertEval("argv <- list(243L, 16);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators188_e071ec67ab64339ac7ad2b45b81672f5() {
        assertEval("argv <- list(4L, 2L);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators189_6c71d1ce548b8bc33b8d61839c637155() {
        assertEval("argv <- list(5, 3);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators19_35579b6bb06ebf62a6bd7cd24bb396bb() {
        assertEval("argv <- list(structure(csp = c(1971, 2000, 1), class = 'ts'), structure(c(96.1627886140128, 99.5328179233045, 102.792420797859, 105.951789523417, 109.019638748919, 112.00348906474, 114.909884224142, 117.744560053261, 120.512577567101, 123.218429147578, 125.866124161059, 128.459258681722, 131.001072784874, 133.494498015905, 135.942197018618, 138.34659685001, 140.70991716901, 143.034194231449, 145.321301429523, 147.572966965162, 149.790789131479, 151.976249586445, 154.130724932091, 156.255496856342, 158.351761049736, 160.420635073182, 162.463165323754, 164.480333221768, 166.473060722972, 168.442215243699), .Tsp = c(1971, 2000, 1), class = 'ts'));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators190_1fa4eab5b248ef009677e44da0cf7bad() {
        assertEval("argv <- list(1:2, 4L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators191_432424538837fc2084cefb55baba35d3() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators192_aa8cb7d7de7b90b7539ec5efc857a229() {
        assertEval("argv <- list(structure(c(TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, NA), .Dim = c(5L, 2L), .Dimnames = list(NULL, c('VAR1', 'VAR3'))), structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE), .Dim = c(5L, 2L), .Dimnames = list(NULL, c('VAR1', 'VAR3'))));`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators193_50aa9cab26d3dc948abc88e58ec229fd() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')), structure(c(TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators195_1f782bffbabe014b420a84d687c86893() {
        assertEval("argv <- list(7);`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators196_142ffc9dea969943aeb191a1afc8cbfb() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('NA', 'a', 'b'), class = 'factor'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators197_18c86837ef5f2eba92f53fec19141f30() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators198_602c14ccaf426a573c611426bbd5ffb2() {
        assertEval("argv <- list(structure(c(0.500999999999976, 0.584333333333234, 0.667666666666719, 0.750999999999976, 0.834333333333234, 0.917666666666719, 0.000999999999976353, 0.0843333333332339, 0.167666666666719, 0.250999999999976), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators2_e4866e4719eeee72471ec3c4037c585d() {
        assertEval("argv <- list(c(NA, '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', NA));`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators20_07aa2ed9c77431e83e27219551fdf866() {
        assertEval("argv <- list(structure(978350400, class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), c(1605796.39468342, 2250605.34500331, 3464617.14155227, 5492840.71388841, 1219772.31891453, 5433460.81468463, 5713396.02452517, 3996505.04896045, 3804881.73750043, 373683.36378783, 1245734.22899097, 1067815.23929536, 4155114.17658627, 2323059.28775668, 4656000.90815127, 3010085.0161314, 4340156.73798323, 5999048.06153476, 2298452.76521891, 4701988.69854212, 5653097.23772854, 1283037.96871752, 3941322.93728739, 759357.220374048, 1616150.60446411, 2335218.03170443, 80984.7349449992, 2312682.3643595, 5259890.2349174, 2058430.73196709, 2915620.53836882, 3626174.11217093, 2984937.82503158, 1126244.053334, 5003953.83093506, 4042886.83258742, 4803562.677674, 652843.049369752, 4377003.8016513, 2487387.75048405, 4965083.1868127, 3913420.05222291, 4735177.34632641, 3344763.6128068, 3203744.02103573, 4774026.48925781, 141107.11171478, 2886287.43334115, 4429033.49147737, 4189640.45360684, 2888643.47467571, 5208594.91588175, 2649611.30449176, 1480533.93148631, 427466.877132654, 601571.336723864, 1912811.28504127, 3136700.02379268, 4003806.70217425, 2460508.97211581, 5521073.589921, 1775713.19845319, 2776429.51241881, 2010322.98948616, 3936464.58484232, 1560485.48977822, 2894241.66157097, 4634646.93606645, 509525.338098407, 5293943.40406358, 2050713.12808245, 5076935.23793668, 2096741.74243212, 2018670.78146338, 2880972.33020514, 5396015.5351907, 5227525.11837333, 2358656.75892681, 4701235.58655381, 5809817.647174, 2628820.56391239, 4309288.77686709, 2419165.9430936, 1967729.81455922, 4578863.07127029, 1225882.75911659, 4300861.15349829, 735992.738373578, 1484714.53242749, 866704.886756837, 1449278.70250493, 356435.113750398, 3884559.38760191, 5299676.19835585, 4710875.96918643, 4822123.77896905, 2753499.89549071, 2480188.52821738, 4904143.22827756, 3658636.53959334));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators200_5366838236a082b9786d7f10e8ca6b3c() {
        assertEval("argv <- list(structure(list(coefficients = structure(NA_real_, .Names = 'x'), residuals = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), effects = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('', '', '', '', '', '', '', '', '', '')), rank = 0L, fitted.values = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), assign = 1L, qr = structure(list(qr = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(10L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), 'x'), assign = 1L), qraux = 0, pivot = 1L, tol = 1e-07, rank = 0L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 10L, xlevels = structure(list(), .Names = character(0)), call = quote(lm(formula = y ~ x + 0)), terms = quote(y ~ x + 0), model = structure(list(y = c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), x = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), .Names = c('y', 'x'), terms = quote(y ~ x + 0), row.names = c(NA, 10L), class = 'data.frame')), .Names = c('coefficients', 'residuals', 'effects', 'rank', 'fitted.values', 'assign', 'qr', 'df.residual', 'xlevels', 'call', 'terms', 'model'), class = 'lm'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators201_c7297bd2185297fd8af2318f390871b9() {
        assertEval("argv <- list(3e+09, 30000L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators202_b3fbde75053cf8633e601c73255f8b01() {
        assertEval("argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators203_40af1d5a95cb0b7cc8dc9bc1497098f5() {
        assertEval("argv <- list(structure(1395082079.73982, class = c('POSIXct', 'POSIXt')));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators204_b266862648145727fc3cdb5da5b70ae1() {
        assertEval("argv <- list(quote(y ~ a + b:c + d + e + e:d));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators205_f7746e8d4d0d3c6b787e72d1c465d3fd() {
        assertEval("argv <- list(structure(c(-Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, 0, 0, 1, 1, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, Inf, -Inf, -Inf, -Inf, -Inf, 0, 1, 1, 1, Inf, -Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.6, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.4, 0.8, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.533333333333334, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.525, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 0, 1, 2, Inf, Inf, Inf, -Inf, -Inf, 0, 0.5, 1, 2, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 1, 2, 2, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.8, 1.6, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.3, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.4, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.2, 1.9, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.499999999999999, 1.33333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.325, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.6, 2.7, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.1, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.2, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.13333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.125, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 3, 4, Inf, Inf, Inf, -Inf, -Inf, 0, 1.5, 3, 4, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 4, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.4, 3.8, Inf, Inf, Inf, -Inf, -Inf, 0.100000000000001, 1.5, 2.9, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1.5, 3, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 1.5, 2.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.0666666666666664, 1.5, 2.93333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.0750000000000002, 1.5, 2.925, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 3, 5, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1.5, 3.2, 4.9, Inf, Inf, Inf, -Inf, -Inf, 0.300000000000001, 2, 3.7, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 2, 3.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.4, 2, 3.6, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.266666666666667, 2, 3.73333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.275, 2, 3.725, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L, 6L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL, NULL)));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators206_5b1d50338aecad5d6bc7dd1668bf3be7() {
        assertEval("argv <- list(structure(character(0), .Dim = c(0L, 7L), .Dimnames = list(NULL, c('description', 'class', 'mode', 'text', 'isopen', 'can read', 'can write'))));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators207_aaa3ff64d428394173323d4657ee2d20() {
        assertEval("argv <- list(structure(list(coefficients = structure(c(1.47191076131574, 0.586694550701453, NA, 0.258706725324317), .Names = c('(Intercept)', 'x1', 'x2', 'x3')), residuals = structure(c(0.224762433374997, 0.4813346401898, -0.548705796690786, -0.873306430909872, 0.3255545927283, -0.288240908441576, 0.530823516045489, -0.0649703574297026, 1.2699009772491, -1.05715266611575), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), effects = structure(c(-18.0083860263211, 7.91372047070235, 0.594462796282497, -0.733976126666906, 0.546582698364345, -0.032332374655677, 0.774795104738016, 0.120246912926227, 1.34954655602521, -1.1298961521627), .Names = c('(Intercept)', 'x1', 'x3', '', '', '', '', '', '', '')), rank = 3L, fitted.values = structure(c(2.08447598454963, 2.74878255284838, 3.46483046621199, 4.23261972464046, 5.0521503281338, 5.923422276692, 6.84643557031507, 7.821190209003, 8.84768619275579, 9.92592352157344), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), assign = 0:3, qr = structure(list(    qr = structure(c(-3.16227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, -17.3925271309261, 9.08295106229247, 0.15621147358221, 0.0461150970695743, -0.0639812794430617, -0.174077655955698, -0.284174032468334, -0.39427040898097, -0.504366785493606, -0.614463162006242, -12.1747689916483, 9.99124616852172, 2.29782505861521, 0.388354773181155, 0.471167347118467, 0.46694109307793,     0.375676011059543, 0.197372101063308, -0.0679706369107753, -0.420352202862709, -17.3925271309261, 9.08295106229247, 1.30962518065979e-16, -1.00907321685019e-15, 0.0501848681992808, -0.170313338748631, 0.0400139169574381, -0.419073670426332, -0.887431917453648, -0.0447724572319277), .Dim = c(10L, 4L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), c('(Intercept)', 'x1', 'x3', 'x2')), assign = 0:3), qraux = c(1.31622776601684, 1.26630785009485, 1.21850337126599, 1.04136435435488    ), pivot = c(1L, 2L, 4L, 3L), tol = 1e-07, rank = 3L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 7L, xlevels = structure(list(), .Names = character(0)), call = quote(lm(formula = y ~ x1 + x2 + x3)), terms = quote(y ~ x1 + x2 + x3), model = structure(list(y = c(2.30923841792462, 3.23011719303818, 2.9161246695212, 3.35931329373059, 5.3777049208621, 5.63518136825043, 7.37725908636056, 7.75621985157329, 10.1175871700049, 8.86877085545769), x1 = 1:10, x2 = 1:10,     x3 = c(0.1, 0.4, 0.9, 1.6, 2.5, 3.6, 4.9, 6.4, 8.1, 10)), .Names = c('y', 'x1', 'x2', 'x3'), terms = quote(y ~ x1 + x2 + x3), row.names = c(NA, 10L), class = 'data.frame')), .Names = c('coefficients', 'residuals', 'effects', 'rank', 'fitted.values', 'assign', 'qr', 'df.residual', 'xlevels', 'call', 'terms', 'model'), class = 'lm'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators208_d6135a5c1fd8c793308d0a92ea418c1a() {
        assertEval("argv <- list(structure(c(1L, 2L, 1L), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = ''), class = 'table'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators209_3fbb0ff71799cfed6d2ed45eba3267d4() {
        assertEval("argv <- list(0.603420215896625, c(0, 0, 0, 0, 0, -0.0303676182248376, -0.0303676182248376, -0.0616574286863247, -0.0616574286863247, -0.0616574286863247, -0.0616574286863247, -0.0616574286863247, -0.0616574286863247, -0.0938974361662337, -0.0938974361662337, -0.0938974361662337, -0.127116495884859, -0.127116495884859, -0.127116495884859, -0.127116495884859, -0.161344339326807, -0.161344339326807, -0.161344339326807, -0.161344339326807, -0.161344339326807, -0.161344339326807, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.196611600851059, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.232949845109116, -0.270391595295763, -0.270391595295763, -0.270391595295763, -0.270391595295763, -0.270391595295763, -0.348720674486417, -0.389678109021166));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators21_30213f0314c03b7467110a6a5de96c5b() {
        assertEval("argv <- list(1, c(FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators210_5fee067a6a6c55474cc3d775a8abfea9() {
        assertEval("argv <- list(5, c(0.90483741803596, 0.042329219623205, 3.72007597602068e-44));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators211_e0e106f9cf904f38c74793ad7272f6b6() {
        assertEval("argv <- list(structure(c(110, 72, 89, 67, 116, 56, 102, 70, 116, 56, 106, 48), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), structure(c(0.618181818181818, 0.583333333333333, 0.415730337078652, 0.358208955223881, 0.568965517241379, 0.589285714285714, 0.46078431372549, 0.328571428571429, 0.543103448275862, 0.517857142857143, 0.537735849056604, 0.395833333333333), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators212_cde36360fb36e0671c4a7eccd9dee60c() {
        assertEval("argv <- list(0, 0L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators213_a769d7e73dada97662d9bbc94c82bb63() {
        assertEval("argv <- list(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), structure(c(110, 72, 89, 67, 116, 56, 102, 70, 116, 56, 106, 48), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators214_e86dfb64edf5c64c80b37aab6ef2ff32() {
        assertEval("argv <- list(0+6.28318530717959i, 1:16);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators215_22855dfc79710f2336fabc9d12331c1f() {
        assertEval("argv <- list(10, structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators216_e44392a679e9a10e5c467455dcc1fae6() {
        assertEval("argv <- list(1, 8);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators217_a367a1c05bb1cc9587b410760078978d() {
        assertEval("argv <- list(0+1i, 2);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators218_728b0d82ec18d0f94430ccabf9b89820() {
        assertEval("argv <- list(2L, 5L);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators219_c3b54be8731ee8aba9f4f418c55a6c07() {
        assertEval("argv <- list(0+2i, 3.14159265358979);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators22_c319a61658a9bb5ea5bc872037a09b0b() {
        assertEval("argv <- list(1, structure(list(x = 1:9, y = c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492)), .Names = c('x', 'y'), row.names = c(NA, -9L), class = 'data.frame'));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators220_5263155c59a61b91d81ea9cfd5dd43bc() {
        assertEval("argv <- list(structure(11323, class = 'Date'), c(12, 24, 36, 48, 60, 72, 84, 96, 108));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators221_5430d4c897e782303ef7852d62d9c6f9() {
        assertEval("argv <- list(3, 0+5i);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators222_ddf0ae9b02746dd60685473279e17959() {
        assertEval("argv <- list(structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), structure(c(42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators224_c4a594dd6b36fb91cc376311c8250d06() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4), 3);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators225_4d607c89fbaa4ebbf274606dec675a0f() {
        assertEval("argv <- list(0.02);`+`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators226_1a3b907b3ae8e622718ee00e0bb4e27f() {
        assertEval("argv <- list(1, structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators227_bbe5b3c017b67404606553acdd1b0ffb() {
        assertEval("argv <- list(3.14159265358979, c(8.24339426780198e-14, 8.88066145332545e-14, 3.39607080058103e-14, 2.87112686384263e-14, -5.3372537031158e-14, 9.96185601455202e-14, -3.26659396832497e-14, 1.39086823244366e-13, 1.72881695621852e-13, 4.32507741831361e-14, -9.84603924440361e-14, 9.87208407136427e-14, -2.73032911651077e-14, -1.48736837028697e-13, 2.94392054503409e-14, -1.05171613093738e-13, -1.14029445758562e-13, 5.13338041611324e-15, -1.87531579189825e-13, -1.25627528672486e-13, 4.10267164560562e-14, 1.74236574669889e-13, 8.02066525165472e-14, 1.57764465352e-13, 1.23253351804626e-13, 1.6788749880341e-13, -1.39908165098147e-13, -1.58115885024452e-13, 1.81544497697974e-13, -1.14362367874561e-13, 1.56626365789358e-13, -1.81348445541539e-13, 1.34029870837468e-13, 5.83660521214748e-14, 1.66415892254192e-13, -1.55962501921682e-13, 5.56922447997358e-15, -1.90684901734508e-13, -1.56068620913678e-13, 1.42594677103356e-13, -1.5324035174056e-13, -1.72045664669025e-13, 6.15626207230525e-14, -1.70423231918929e-13, -2.2440318442518e-14, -6.47937716601402e-14, -1.03307295568126e-13, 7.89213836842498e-14, -9.01552844071197e-15, -1.39863491975671e-13, 1.21580502093206e-13, 1.74391617154328e-13, -7.68474764369541e-15, -9.62952541877272e-14, -5.3148471902392e-14, -2.21880305144443e-14, 5.26389742858333e-14, 2.7159840200832e-14, 1.87431554819324e-14, 4.56102486340353e-14, 1.11966090535737e-13, 9.46528420538298e-14, -1.10626253790834e-14, -1.20682584010224e-13, 1.09679727142136e-13, 1.85521222833898e-13, 1.28904258163856e-13, -7.30112958403796e-14, 4.38190249362539e-14, -5.25642067782032e-14, -1.07266296983526e-13, 4.48939091164837e-14, 4.09010010401022e-14, 1.576058154827e-13, -1.65586113176678e-13, 1.64953139323032e-13, -3.61017352519794e-14, -5.98713716165795e-14, 1.5553263601743e-13, -1.40329145253713e-13, -1.34306416738384e-13, 6.33760537168414e-15, -1.47719256195174e-13, 1.30439641217338e-13, -1.9949544714752e-13, 8.89585653992738e-14, 9.03099047696007e-14, -5.47032374550363e-14, 1.44655516265113e-13, 1.70556682807057e-13, -9.71359599142186e-14, -6.53941098287223e-14, -8.38818567534634e-14, 6.7826899389696e-14, 1.86838153280979e-13, 4.37228204318607e-14, 8.3759639291968e-14, -1.92868749423155e-13, -9.13894925944948e-14, 5.76515542011828e-14, 3.92733987046576e-14));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators228_e95abf1ec46a13106cb73f83b8865237() {
        assertEval("argv <- list(4, 1:5);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators229_b1474c2eea0cccc436d601ae8766dfbb() {
        assertEval("argv <- list(structure(c(1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')), 0.1);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators23_9af6f26de83109d547826242c152ade4() {
        assertEval("argv <- list(1:2, c(0+8i, 0+9i));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators230_9b8fcc67ae4bc76690c713e51ddb4e64() {
        assertEval("argv <- list(structure(1:10, .Tsp = c(1920.5, 1921.25, 12), class = 'ts'), 1);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators231_69a760411aff0641c9e1c661dabebc9f() {
        assertEval("argv <- list(1, 1);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators232_e3df0a91b3c4778c1d4bae8f85308786() {
        assertEval("argv <- list(structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), c('X', 'M'))), structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), c('X', 'M'))));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators233_2f935b5e8e410108e11f647cdc663a73() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Tsp = c(3, 10, 1), class = 'ts'), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Tsp = c(3, 10, 1), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators234_712dc2f75f71128c9b32cabf45b45568() {
        assertEval("argv <- list(c(-1.04843842027757e+143, -9.998687937523e+136, -9.53549188377803e+130, -9.09375370386458e+124, -8.67247934711978e+118, -8.27072081298779e+112, -7.88757401780305e+106, -7.52217676063816e+100, -7.17370678430818e+94, -6.84137992972049e+88, -6.5244483891549e+82, -6.22219909169008e+76, -5.93395235884653e+70, -5.65906136797865e+64, -5.39691448428537e+58, -5.14694833309681e+52, -4.90870165301755e+46, -4.68202458334831e+40, -4.46788150641526e+34, -4.27143012156591e+28, -4.11397031483551e+22, -40816513889983680, -45637199262.2201, -83492.8982026505, -1.56717399085881, -0.0019371698216247, -0.0388983050293216, 0.00184649674288725, -0.049895679671468, 0.0161192923654623, -0.0169866996250208));`-`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators235_a8e35f57650faabace4e3045fcb0a6df() {
        assertEval("argv <- list(FALSE, c(-3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L));`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators236_8c9f50adf9e2f881ade79b39fa098979() {
        assertEval("argv <- list(structure(1395082079.75887, class = c('POSIXct', 'POSIXt')), 3600);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators237_ac592d4e38c58a1d1144e14738aa4bb7() {
        assertEval("argv <- list(structure(c(2, 1, 0, 1, 0, NA, NA, NA, 0), .Dim = c(3L, 3L)), structure(c(1, 1, 1, 0.5, 0.5, 0.5, 0, 0, 0), .Dim = c(3L, 3L)));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators238_861e6ce652bbbabc9f8e1cff5660a21f() {
        assertEval("argv <- list(structure(2:10, .Tsp = c(2, 10, 1), class = 'ts'), structure(1:9, .Tsp = c(2, 10, 1), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators239_e51bfdc9a9d8984829ec62ef60b55381() {
        assertEval("argv <- list(structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'), 4);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators24_5dd96f014c3cb4980e5f1f3475781a42() {
        assertEval("argv <- list(c(14, 2, 2, -7), c(14, 2, 2, -7));`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators240_aae6e5e7305a3bb322f3ea667431da37() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 4L)), structure(numeric(0), .Dim = c(0L, 4L)));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators241_ae3ad235a8d0266f24112d4d0b6f0c0a() {
        assertEval("argv <- list(structure(c(1L, 0L, 0L, 1L), .Dim = c(2L, 2L), .Dimnames = structure(list(x = c('1', '2'), y = c('1', '2')), .Names = c('x', 'y')), class = 'table'), 1);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators242_8c0997436a810c9e32c21d0dc11c0312() {
        assertEval("argv <- list(5);`-`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators243_e085feeb1c2febcb7a806385a1c8a090() {
        assertEval("argv <- list(structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators244_9a65cfac70238a0414e8b3c3b5e589bf() {
        assertEval("argv <- list(10, structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), .Tsp = c(1, 10, 1), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators245_e806671ecda09a86ecb14bc505e6dc94() {
        assertEval("argv <- list(17L, 10L);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators246_abf1c4e100d87b2622343eb1f536ca03() {
        assertEval("argv <- list(structure(100L, .Names = 'expsumNoisy'), 100L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators247_9fdf83a940a8bcab06a67e3de62b8e6f() {
        assertEval("argv <- list(50, 51);`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators248_85f4772e959deebbadece4f185c7ee15() {
        assertEval("argv <- list(-1, 1);`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators249_cda9a5e8de2675d38da1f68773327db1() {
        assertEval("argv <- list(1L, structure(15L, .Names = 'nc'));`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators25_94848b7ea7d53e36131ab0bc83cf147f() {
        assertEval("argv <- list(c(-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -1000, -10000, -1e+05, -1e+06, -1e+07, -1e+08, -1e+09, -1e+10, -1e+20, -1e+50, -1e+150, -1e+250, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1000, 10000, 1e+05, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+20, 1e+50, 1e+150, 1e+250));`+`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators250_27d6c85002551534a37a3c6fddf4e7a8() {
        assertEval("argv <- list(-20, 10);`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators251_4acd567774644f8db8d564451d988926() {
        assertEval("argv <- list(-7L, -1L);`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators252_b71e2a9f6e34a49be8ea7ba8f3f6e1b0() {
        assertEval("argv <- list(structure(c(0.618181818181818, 0.583333333333333, 0.415730337078652, 0.358208955223881, 0.568965517241379, 0.589285714285714, 0.46078431372549, 0.328571428571429, 0.543103448275862, 0.517857142857143, 0.537735849056604, 0.395833333333333), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), 0);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators253_cde8cdf1996f47d9f89d475ee389e7d8() {
        assertEval("argv <- list(c(1, 1, 1, 1, 1), -10);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators254_f143b7039eb8befb458d688da130fda5() {
        assertEval("argv <- list(structure(c(1208822400, 1208908800, 1208995200, 1209081600, 1209168000, 1209254400), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), structure(1209168000, class = c('POSIXct', 'POSIXt'), tzone = 'GMT'));`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators257_2a7b56ed5b37bd0f3f27ae78c16117bb() {
        assertEval("argv <- list(structure(c(1, 1.4142135623731, 1.73205080756888, 2, 2.23606797749979, 2.44948974278318, 2.64575131106459, 2.82842712474619, 3, 3.16227766016838), id = 'test 1', class = structure('withId', package = '.GlobalEnv')), 1);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators258_be0134a61489dd3b3bae614af3f37523() {
        assertEval("argv <- list(2L, 1);`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators259_32510af4973912debd26325bb2099e79() {
        assertEval("argv <- list(structure(c(2L, NA, NA, 4L, 3L, 2L, 1L, 5L, 5L, 6L), .Label = c('NA', 'a', 'b', 'c', 'd', NA), class = 'factor'), structure(c(2L, NA, NA, 4L, 3L, 2L, 1L, 5L, 5L, 6L), .Label = c('NA', 'a', 'b', 'c', 'd', NA), class = 'factor'));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators26_afc6633c2f1cbf34a1ded26bfdb5f905() {
        assertEval("argv <- list(structure(c(1+1i, 2+2i, 1.2+10i, 2.4+20i), .Dim = c(2L, 2L), .Dimnames = list(c('x', ''), c('a', 'b'))), 3.14159265358979);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators260_8abe64f648df7b5454f2830e31fc2bf4() {
        assertEval("argv <- list(c(-Inf, Inf), c(-Inf, Inf));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators261_cba752dcaf75cdd4235e6d15b592d9fa() {
        assertEval("argv <- list(structure(list(VAR1 = c(1, 2, 3, 4, 5), VAR3 = c(1, 1, 1, 1, NA)), .Names = c('VAR1', 'VAR3'), class = 'data.frame', row.names = c(NA, -5L)), 1);`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators262_c67c1aae833d575239e4a0c13e072aa3() {
        assertEval("argv <- list(structure(1:20, .Dim = c(2L, 2L, 5L)), structure(1:20, .Dim = c(2L, 2L, 5L)));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators263_149aa38ab8c2611bb60adbe938c1aa58() {
        assertEval("argv <- list(structure(c(1L, 2L, NA), .Label = c('1', '2'), class = 'factor'), structure(c(1L, 2L, NA), .Label = c('1', '2'), class = 'factor'));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators264_b1abf5d8e7f67b9f2a8ceb970c035417() {
        assertEval("argv <- list(c(5L, 2L, 4L), c(5, 2, 4));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators265_a1c877dfcfc231be6b91d17faf3aa2e2() {
        assertEval("argv <- list(NULL, 'foo');`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators266_8d4256f76180b87427b2f3c367efdb26() {
        assertEval("argv <- list(structure(FALSE, .Names = 'd'), FALSE);`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators267_afe0922b01cde0784db521458f6c94a7() {
        assertEval("argv <- list(c('1', '2', NA), c('1', '2', NA));`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators268_15d5159b800edb68bc00d655c7636119() {
        assertEval("argv <- list(-1:12, 2);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators269_e6c132c1830737323c03d8a1d4732811() {
        assertEval("argv <- list(structure('(converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), '(converted from warning) NAs produced\\n');`==`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators27_8bc9eeb8190ce6f5a7ffcfafaab905a1() {
        assertEval("argv <- list(structure(c(1, 0.81, 0.64, 0.49, 0.36, 0.25, 0.16, 0.09, 0.04, 0.01, 0.81, 1, 0.81, 0.64, 0.49, 0.36, 0.25, 0.16, 0.09, 0.04, 0.64, 0.81, 1, 0.81, 0.64, 0.49, 0.36, 0.25, 0.16, 0.09, 0.49, 0.64, 0.81, 1, 0.81, 0.64, 0.49, 0.36, 0.25, 0.16, 0.36, 0.49, 0.64, 0.81, 1, 0.81, 0.64, 0.49, 0.36, 0.25, 0.25, 0.36, 0.49, 0.64, 0.81, 1, 0.81, 0.64, 0.49, 0.36, 0.16, 0.25, 0.36, 0.49, 0.64, 0.81, 1, 0.81, 0.64, 0.49, 0.09, 0.16, 0.25, 0.36, 0.49, 0.64, 0.81, 1, 0.81, 0.64, 0.04, 0.09, 0.16, 0.25, 0.36, 0.49, 0.64, 0.81, 1, 0.81, 0.01, 0.04, 0.09, 0.16, 0.25, 0.36, 0.49, 0.64, 0.81, 1), .Dim = c(10L, 10L)), structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), .Dim = c(10L, 10L)));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators270_7c792f35574302bbf88ed34b49012038() {
        assertEval("argv <- list(75.1931882101063, 0);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators271_a0ea3d069004978fe3c702d25cae6379() {
        assertEval("argv <- list(3.001e+155, 0);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators272_b8f9baa9b9d7a0fe22ff221de6356d02() {
        assertEval("argv <- list(structure(c(4, 3, 2, 1, 0), .Tsp = c(-1, 3, 1), class = 'ts'), 1e-05);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators273_eb353fb902d9f06ec127617a590d9be6() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(12L, 2L), .Dimnames = list(c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), c('X', 'M'))), 0.001);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators274_18bb93365d1d611cdc2cf75e55aa7f4c() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 3.5527136788005e-15, 0, 0), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), 0.001);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators275_29b7b05d53003db4b3a2643bf427ddca() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8), .Tsp = c(3, 11, 1), class = 'ts'), 1e-05);`>`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators276_ffe21cf52c288763ca4c4b725aeb57c9() {
        assertEval("argv <- list(structure(c(13991, 13992, 13993, 13994, 13995), class = 'Date', labels = c('Apr 22', 'Apr 23', 'Apr 24', 'Apr 25', 'Apr 26')), 13991);`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators277_943419b8535959a708046d0e6032737a() {
        assertEval("argv <- list(structure(3.00510204081633, base = 14, lens = 3L, .classes = c('R_system_version', 'package_version', 'numeric_version')), structure(2.92857142857143, base = 14, lens = 3L, .classes = c('package_version', 'numeric_version')));`>=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators278_792332dbd82da01c08d0f16ca5dba9e2() {
        assertEval("argv <- list(2, c(1, 53.6315789473684, 106.263157894737, 158.894736842105, 211.526315789474, 264.157894736842, 316.789473684211, 369.421052631579, 422.052631578947, 474.684210526316, 527.315789473684, 579.947368421053, 632.578947368421, 685.210526315789, 737.842105263158, 790.473684210526, 843.105263157895, 895.736842105263, 948.368421052632, 1001));`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators279_25ec5fd216f350a8e493e5cb105d8e09() {
        assertEval("argv <- list(structure(1:12, .Dim = 12L), 3);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators28_e3ab70d0575681abda58935190fa8422() {
        assertEval("argv <- list(structure(5.5965311794562, .Names = 'thetas'), structure(c(3, 2, 2, 1, 1, 2), .Dim = 6L, .Dimnames = list(c('1', '2', '3', '4', '5', '6'))));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators280_b487ff1c37ad65aa84c650d2ae4e6dc8() {
        assertEval("argv <- list(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69), 2);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators281_675f8f4e7f7bd537b62f36ad4ed49a8e() {
        assertEval("argv <- list(c(2, 13954490295224484, 9.73638996997572e+31, 6.79331796732739e+47, 4.73986448237219e+63, 3.30711964599708e+79, 2.30745845026066e+95, 1.60997032753976e+111, 1.12331576556267e+127, 7.83764947450857e+142, 5.46852017646992e+158, 3.8155205865895e+174, 2.66218224983966e+190, 1.85746981847535e+206, 1.29600222777925e+222, 9.04252525506755e+237, 6.30919154580821e+253, 4.40207760983472e+269, 3.07143746426322e+285, 2.14301721437253e+301), 0.9);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators282_21c31be1ca71a4646c1b8576f4d897b3() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')), structure(c(TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));`|`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators283_08daf5a5098696a0e77f2715e68cca0b() {
        assertEval("argv <- list(10, structure(c(2.62236698682835, 2.59270366218715, 2.63940608371058, 2.64731958493827, 2.65803373028597, 2.71373162990423, 2.77064097627242, 2.76566849458896, 2.68535956033309, 2.6323339540094, 2.56646882037186, 2.60930482928073, 2.61873883018004, 2.58963301587663, 2.63649393196055, 2.64432599746861, 2.65480384168506, 2.71016075212057, 2.76665607635342, 2.76121751481566, 2.68040487260442, 2.62684815424423, 2.56043192269559, 2.60270233556967), .Tsp = c(1961, 1962.91666666667, 12), class = 'ts'));`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators284_43753229a309be4dc33d779a1b8db7c0() {
        assertEval("argv <- list(10, -324:-307);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators285_d32d88c9bb4acfefd7eab0a6f1185807() {
        assertEval("argv <- list(structure(c(2, -2, -2, 2), .Dim = c(2L, 2L), .Dimnames = list(c('Milk', 'Tea'), c('Milk', 'Tea'))), 2);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators286_ff3ef1d5b2c96bd936ec4586644beb36() {
        assertEval("argv <- list(c(-0.672916599964862, -0.584338371560402, 0.572115715156077, -0.341116997543456, -0.218053452331652, 0.603114283893957, -0.415268358002702, -0.0134950134274691, 0.76321585191833, 0.804319710846886, 0.0536892937002835, 1.74635019377278, -0.471646028332481, 1.63758588525433, -0.578351427808452, 0.946667542637206, -0.329423655668059, -0.187791022191408, 0.794323068130594, 0.894218687970535, -1.22656982031204, 1.0590522527981, 0.612808669537666, -0.939425042488798, 2.69005530237799, -5.30421668373535, 2.81829750013497, -0.200427817155017, 0.828486397910241, 0.279395276763307, 0.0200169554117855, -0.787735991519008, -1.29364959334893, -0.511638483749587, 0.113049755514737, 1.10102046217428, -0.306657900899176, 0.268100169311174, -0.305146107712725, 0.396162277846222, 0.0150939553276523, 1.49211381144096, -1.92447564755755, 0.872283353434605, -1.19828539105242, 0.249023119183754, -0.888972367366677, -0.343085496017779, -0.789859289813313, 2.25212409468034, 2.24112978772768, -0.268185452742113, -0.258069470254978, -1.83609460856723, -0.0896167695808968, -0.0862703217063487, -0.00265875112142955, -0.414323880711934, -0.87767314293053, -2.22003587446461, -0.8313148988929, 0.832662806275473, -0.671837383858861, -1.85809916947114, -0.433937023889368, -0.851823367571459, -1.57641862799745, -0.880161315252144, -0.658071675968036, -1.21910415241982, -0.103154147995399, -1.92102359833593, 0.794527839025225, -1.0143657782449, 0.633288668140732, -0.0981774734963654, -0.927622152862583, -1.15272382197142, 3.28038998456465, -2.43807429671523, 0.0242203067253644, -0.377015290181077, 1.18353877313309, -5.69817122824189, -0.316441438096387, -0.0880345184260629, -0.161984388003683, -1.04890926431944, 3.34283466347557, -1.14655469197163, -0.0469559138168916, 4.57732396845363, -1.10972642208237, 6.74369483998494, -4.51689622564278, -0.942648739247179, 2.19288903907033, 1.26921808442688, -0.705352464586085, 0.00567568850361933), 2);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators287_0b689ea36ad607b8249192a6dca887c6() {
        assertEval("argv <- list(-3:4, 2);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators288_4e1e2aca091cc8ca4e826fd072a33f04() {
        assertEval("argv <- list(0.9, Inf);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators289_19fc834348250e6c771211b9164d49d4() {
        assertEval("argv <- list(0+0i, -3:3);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators29_e5e282c3dfa759f4ea9ceca28892c945() {
        assertEval("argv <- list(c(NA, 6.12, 19.92, 29.64, 35.4, 39.72, 45.24, 52.32, 63.48), c(6.12, 19.92, 29.64, 35.4, 39.72, 45.24, 52.32, 63.48, NA));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators290_8fc106e6afc8829d4999756810e9668f() {
        assertEval("argv <- list(structure(c(8L, 8L), .Names = c('y', 'x')), 8L);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators291_4bca051d75b7a9864aa1795d2c7081cb() {
        assertEval("argv <- list(c(-Inf, -2, -1), -3);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators292_bae7e393c0b30412c5f11eaabc45c1a5() {
        assertEval("argv <- list(integer(0), 1:3);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators293_568ce8a6aca5a836a71cd668a1f5efe3() {
        assertEval("argv <- list(c(NA, -2L, -1L, 0L, 1L, 2L, NA, NA, NA), 0L);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators294_1cd1748b71932f9d34d8b2c9ef3c983d() {
        assertEval("argv <- list(c(-4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i), c(-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators295_854d9cba92f5be9c9feaae0d0b4993b8() {
        assertEval("argv <- list(structure(c(26.2845882236184, 26.2845882236184, 26.2845882236184, 19.6276109953659, 19.6276109953659, 19.6276109953659, 19.6276109953659, 19.6276109953659, 16.7854987799975, 16.7854987799975, 16.7854987799975, 12.5343124120522, 12.5343124120522, 28.7031306388734, 28.7031306388734, 28.7031306388734, 28.7031306388734, 21.4336202544253, 21.4336202544253, 21.4336202544253, 21.4336202544253, 21.4336202544253, 21.4336202544253, 21.4336202544253, 28.044754781901, 28.044754781901, 28.044754781901, 28.044754781901, 28.044754781901, 28.044754781901, 28.044754781901, 24.2091543637699, 18.0778127599455, 18.0778127599455, 18.0778127599455, 18.0778127599455, 15.4601140250197, 15.4601140250197, 15.4601140250197, 15.4601140250197, 15.4601140250197, 15.4601140250197, 15.4601140250197, 15.4601140250197, 15.4601140250197, 15.4601140250197, 11.5446017812987, 11.5446017812987, 11.5446017812987, 11.5446017812987, 11.5446017812987, 26.436728414697, 26.436728414697, 26.436728414697, 26.436728414697, 26.436728414697, 26.436728414697, 26.436728414697, 26.436728414697, 19.7412193373284, 25.830337984867, 25.830337984867, 25.830337984867, 25.830337984867, 25.830337984867, 25.830337984867, 25.830337984867, 25.830337984867, 25.830337984867, 14.8736630467598, 14.8736630467598, 14.8736630467598, 11.1066785552923, 11.1066785552923, 11.1066785552923, 11.1066785552923, 11.1066785552923, 11.1066785552923, 9.49841217984702, 9.49841217984702, 9.49841217984702, 9.49841217984702, 9.49841217984702, 9.49841217984702, 9.49841217984702, 7.0927928470328, 7.0927928470328, 16.2422439293196, 16.2422439293196, 16.2422439293196, 12.1286452283118, 12.1286452283118, 12.1286452283118, 12.1286452283118, 12.1286452283118, 12.1286452283118, 12.1286452283118, 15.8696887052689, 15.8696887052689, 15.8696887052689, 15.8696887052689, 15.8696887052689, 15.8696887052689, 15.8696887052689, 13.6992370430272, 10.2296940445213, 10.2296940445213, 10.2296940445213, 10.2296940445213, 8.74841655179539, 8.74841655179539, 8.74841655179539, 8.74841655179539, 8.74841655179539, 8.74841655179539, 8.74841655179539, 8.74841655179539, 8.74841655179539, 8.74841655179539, 8.74841655179539, 6.53274517535593, 6.53274517535593, 6.53274517535593, 6.53274517535593, 6.53274517535593, 6.53274517535593, 14.959754634679, 14.959754634679, 14.959754634679, 14.959754634679, 14.959754634679, 14.959754634679, 14.959754634679, 14.959754634679, 14.959754634679, 11.170966121195, 14.6166164104337, 14.6166164104337, 14.6166164104337, 14.6166164104337, 14.6166164104337, 14.6166164104337, 14.6166164104337, 14.6166164104337, 14.6166164104337, 14.6166164104337), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146')), 2);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators296_51f2c48689a0bed4d74857a288e4a9a8() {
        assertEval("argv <- list(17L, c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 77L, 50L, 49L, 48L, 47L, 46L, 45L, 44L, 43L, 42L, 41L, 40L, 10L));`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators297_136837e2792e7d0f9192e946bc84e8e1() {
        assertEval("argv <- list(c(-Inf, -2, -1), 0.5);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators298_34c8f553c73b10b2f2843a40e4dd7eac() {
        assertEval("argv <- list(structure(c(4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L), .Dim = 27L, .Dimnames = structure(list(groups = c('M01', 'M02', 'M03', 'M04', 'M05', 'M06', 'M07', 'M08', 'M09', 'M10', 'M11', 'M12', 'M13', 'M14', 'M15', 'M16', 'F01', 'F02', 'F03', 'F04', 'F05', 'F06', 'F07', 'F08', 'F09', 'F10', 'F11')), .Names = 'groups'), class = 'table'), 2);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators299_803a78a849a6a41a75f52a25d181628d() {
        assertEval("argv <- list(NA_integer_, structure(-2, .Names = 'power'));`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators3_c66be1d536a6f13e7f65182c12d8efdf() {
        assertEval("argv <- list(2.2250738585072e-308, c(0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 1e+05, 1e+10));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators30_0bfe9d1e193d8b5ba535dfcd6894b791() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0i, 1.39139505579429+0i, 0.928710764113827+0i, -0.469267985412949+0i, 0.7424437487+0i, 0.460916205989202+0i, -0.452623703774585+0i, -0.0945011868321433+0i, -0.331818442379127+0i, 1.39139505579429+0i, -0.452623703774585+0i, 0.400771450594052+0i, -0.927967220342259+0i, -0.790922791530657+0i, 0.928710764113827+0i, -0.0945011868321433+0i, -0.927967220342259+0i, 0.701355901563686+0i, -0.600841318509537+0i, -0.469267985412949+0i, -0.331818442379127+0i, -0.790922791530657+0i, -0.600841318509537+0i, -0.625039267849257+0i), .Dim = c(5L, 5L)), c(0-1.68669331074241i, 0+0.837787044494525i, 0+0.153373117836515i, 0-1.13813693701195i, 0+1.25381492106993i, 0+0.426464221476814i, 0-0.295071482992271i, 0+0.895125661045022i, 0+0.878133487533042i, 0+0.821581081637487i, 0+0.688640254100091i, 0+0.553917653537589i, 0-0.0619117105767217i, 0-0.305962663739917i, 0-0.380471001012383i, 0-0.694706978920513i, 0-0.207917278019599i, 0-1.26539635156826i, 0+2.16895596533851i, 0+1.20796199830499i, 0-1.12310858320335i, 0-0.402884835299076i, 0-0.466655353623219i, 0+0.779965118336318i, 0-0.0833690664718293i));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators300_9d4fd2b549ca831aa30b92a1efff9a58() {
        assertEval("argv <- list(c(-Inf, -2, -1, 0, 1, 2, Inf, NA, NaN), 0);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators301_419ba6d2586f5d54bb5da4e268240187() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4, .Dimnames = list(c('Case_1', 'Case_2', 'Case_3'), NULL)), 5);`%%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators302_acee8449332136984a3bb662a8f77934() {
        assertEval("argv <- list(structure(c(2L, 3L, 4L, 5L, 6L, 7L, 8L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 2L, 3L, 4L, 5L, 6L, 7L, 8L), .Names = c('2:', '3:', '4:', '5:', '6:', '7:', '8:', '2:', '3:', '4:', '5:', '6:', '7:', '8:', '2:', '3:', '4:', '5:', '6:', '7:', '8:', '2:', '3:', '4:', '5:', '6:', '7:', '8:', '2:', '3:', '4:', '5:', '6:', '7:', '8:', '2:', '3:', '4:', '5:', '6:', '7:', '8:', '2:', '3:', '4:', '5:', '6:', '7:', '8:', '2:', '3:', '4:', '5:', '6:', '7:', '8:', '2:', '3:', '4:', '5:', '6:', '7:', '8:')), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L), .Names = c('1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '9', '9', '9', '9', '9', '9', '9')));`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators303_5bcf0f1b3564d3793debc5b173a9e2fc() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`^`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators304_6d1a4736b65b7a8f4e0304f2ea213ebc() {
        assertEval("argv <- list(0.8, structure(c(0L, 1L, 2L, 1L, 0L, 1L, 2L, 1L, 0L), .Dim = c(3L, 3L)));`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators305_0e573d01ff9ad80504dc392e75931176() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0), .Dim = c(4L, 4L)), structure(c(0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0), .Dim = c(4L, 4L)));`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators306_147fbf9c60e5a87f07998df0fdc11cc1() {
        assertEval("argv <- list(c(1.1, 2, Inf), -Inf);`^`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators307_97f4b55ca348d8b64508588c17130859() {
        assertEval("argv <- list(logical(0), structure(logical(0), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)));`|`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators308_5772295f6362383b9b22ac53e9f048b9() {
        assertEval("argv <- list(list());`|`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators309_9ec3da2f1e356943247d1511092d3fec() {
        assertEval("argv <- list(structure(c(TRUE, FALSE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(NULL, NULL)), structure(c(FALSE, FALSE, FALSE, FALSE), .Dim = c(2L, 2L), .Dimnames = list(NULL, NULL)));`|`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators31_259b3b45a792b07127e7cd32b902540e() {
        assertEval("argv <- list(structure(FALSE, class = structure('foo', package = '.GlobalEnv')), NA);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators310_20b9553f46260b6031a95c78ac89daf3() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L)), structure(c(FALSE, FALSE, FALSE, FALSE), .Dim = c(2L, 2L)));`|`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators311_04db700a9465788e9c82c65d059de7eb() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53')));`|`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators312_f0e28dda5fd6a79f4fce4f88da41e681() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0), .Dim = c(6L, 3L), .Dimnames = structure(list(`  p L s` = c('. . .', '. | .', '. . |', '. | |', '. . ?', '. | ?'), c('perm', 'LDL', 'super')), .Names = c('  p L s', ''))), c(4, 2, 1));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators313_752d12f515bacd25ca236c8fb4b76e1f() {
        assertEval("argv <- list(structure(c(NA, FALSE, TRUE, NA, FALSE, TRUE, NA, FALSE, TRUE), .Names = c(NA, 'FALSE', 'TRUE', NA, 'FALSE', 'TRUE', NA, 'FALSE', 'TRUE')), structure(c(NA, NA, NA, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE), .Names = c(NA, NA, NA, 'FALSE', 'FALSE', 'FALSE', 'TRUE', 'TRUE', 'TRUE')));`|`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators314_9be667d83c3750672072fb07114a3b67() {
        assertEval("argv <- list(structure(120L, class = 'octmode'), '644');`|`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators315_56ce43a2563e7f87e2d356df25867b95() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1), .Dim = c(9L, 5L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9'), c('(Intercept)', 'outcome2', 'outcome3', 'treatment2', 'treatment3')), assign = c(0L, 1L, 1L, 2L, 2L), contrasts = structure(list(outcome = 'contr.treatment', treatment = 'contr.treatment'), .Names = c('outcome', 'treatment'))), c(3.04452243772342, -0.454255272277594, -0.292987124681473, 1.33790930192987e-15, 1.42108546079721e-15));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators316_27678b6d196228b5c7da92058db53dba() {
        assertEval("argv <- list(character(0));`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators317_54b87160badbcd3407996ed86531d66d() {
        assertEval("argv <- list(structure(c(-1, 2), .Dim = c(2L, 1L), .Dimnames = list(NULL, 'x')), c(-1, 2));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators318_cc9d41b8e5eef0396492bba89e9b17f4() {
        assertEval("argv <- list(structure(c(0.94232064077615, 0.62152295589611, 0.178333356339776, 0.0222599883329273), .Dim = c(4L, 1L)), structure(c(0.941251786864296, 0.603637002512359, 0.159215730735261, 0.0172717433258791), .Dim = c(1L, 4L)));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators319_4ffa5f7a2e3b74ef1e6bc38226056fb0() {
        assertEval("argv <- list(numeric(0), structure(numeric(0), .Dim = c(1L, 0L)));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators32_338604cfde32bbdbf22f1013a56d41aa() {
        assertEval("argv <- list(2.11111111111111, structure(c(3, 2, 2, 1, 1, 2), .Dim = 6L, .Dimnames = list(c('1', '2', '3', '4', '5', '6'))));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators320_8d5e6b6029ca80c38dd0fb444ba7b92c() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 68, 56, 60, 68, 71, 61, 68, 60, 63, 56, 49, 58, 72, 60, 70, 74, 73, 48, 60, 61, 62, 65, 74, 73, 59, 60, 76, 74, 74, 63, 68, 58, 62, 65, 57, 75, 68, 67, 64, 68, 63, 74, 51, 81, 73, 59, 61, 72, 63, 69, 72, 70, 58, 59, 75, 69, 75, 76, 49, 68, 66, 75, 60, 72, 70, 77, 48, 47, 67, 74, 56, 56, 73, 76, 71, 82, 59, 60, 62, 55, 69, 62, 62, 69, 57, 46, 65, 58, 43, 56, 74, 60, 39, 66, 51, 45, 72, 58, 53, 52, 70, 52, 63, 50, 63, 62, 55, 50, 60, 64, 76, 70, 57, 39, 75, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, NA, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(115L, 5L), .Dimnames = list(c('2', '3', '5', '7', '8', '10', '12', '14', '18', '19', '22', '24', '25', '27', '28', '30', '32', '33', '34', '35', '36', '37', '39', '42', '43', '44', '46', '47', '49', '52', '53', '54', '56', '57', '58', '61', '66', '67', '68', '69', '71', '73', '77', '79', '80', '81', '88', '90', '91', '95', '96', '100', '101', '105', '110', '111', '114', '116', '117', '118', '119', '121', '122', '124', '125', '129', '130', '133', '135', '136', '138', '140', '141', '143', '147', '149', '150', '152', '153', '155', '156', '158', '161', '163', '166', '168', '170', '172', '174', '177', '180', '181', '182', '183', '185', '186', '187', '188', '190', '192', '196', '199', '203', '204', '205', '206', '207', '208', '211', '214', '218', '219', '220', '225', '226'), c('(Intercept)', 'age', 'factor(ph.ecog)1', 'factor(ph.ecog)2', 'factor(ph.ecog)3')), assign = c(0L, 1L, 2L, 2L, 2L), contrasts = structure(list(`factor(ph.ecog)` = 'contr.treatment'), .Names = 'factor(ph.ecog)')), structure(c(6.76534252253894, -0.00731543889899693, -0.256632132912267, -0.629047717825279, -1.48257717514349), .Names = c('(Intercept)', 'age', 'factor(ph.ecog)1', 'factor(ph.ecog)2', 'factor(ph.ecog)3')));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators321_7d4be7d56da1ccc9c1be92716d37490d() {
        assertEval("argv <- list(structure(c(544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 1539.44739946315, 1548.66655077773, 1557.88570209231, 1566.45228027983, 1575.01885846735, 1583.14083472285, 1591.26281097836, 1599.26100149451, 1607.25919201066, 1611.39689466313, 1615.5345973156, 1612.61129444623, 1609.68799157686, 1603.44643859537, 1597.20488561388, 1588.73002343463, 1580.25516125537, 1570.86127478964, 1561.46738832392, 1549.89535441445, 1538.32332050498, 1524.62526591843, 1510.92721133189, 1499.65830819836, 1488.38940506483, 1479.31388700637, 1470.23836894792, 1460.03887936132, 1449.83938977473, 1441.27547309544, 1432.71155641615, 1432.51830671501, 1432.32505701387, 1433.15763708544, 1433.99021715701, 1434.96142536256, 1435.9326335681, 1435.47421580154, 1435.01579803498, 1433.4368629411, 1431.85792784722, 1430.85617066215, 1429.85441347709, 1432.59097206397, 1435.32753065085, 1440.49425642708, 1445.66098220331, 1448.76676550395, 1451.87254880459, 1452.9163236715, 1453.96009853841, 1454.6961768366, 1455.43225513478, 1452.22362902495, 1449.01500291512, 1442.43484036078, 1435.85467780644, 1426.50159512644, 1417.14851244644, 1409.58997614642, 1402.0314398464, 1397.59624058751, 1393.16104132862, 1386.64426440334, 1380.12748747807, 1371.71107833433, 1363.2946691906, 1354.59002807904, 1345.88538696748, 1336.94914699242, 1328.01290701735, 1318.64960669271, 49.7622186359663, -84.1535032467218, -121.764781099341, 37.2870304782966, 82.528433600382, -44.2319392670254, 25.3010406627996, -34.7698782399993, 48.5709781995188, 110.301655093951, -1.96962838525201, -3.7990131710535, -51.4783734777507, 135.066608935635, 114.916035379091, -28.990712676497, -11.7078691876363, 7.04762066618673, -38.9035366827579, 16.5957688400649, -38.4931502947952, 52.0732838386475, 26.6377575984557, 329.153973076816, -13.1797869657194, 872.199160524634, 371.882552045056, -254.299568603192, -95.2920977069916, 8.63342236039193, 16.852295225008, -29.0271834604991, 13.5051131963112, 4.54091267164154, 25.5747517733375, 386.850855912621, 259.276984531009, -199.961168270532, -153.894877042003, 94.302447817031, -20.3106357794875, 21.0527247936745, -6.29056183593116, 13.9001511905426, -29.4973604406664, -31.7957066699985, -224.096013272965, -30.9544842287708, 22.3370692945275, 432.596723859509, 47.1608224545594, -304.956866078466, 50.1150369329559, 24.6852664308792, -14.4511512739648, -4.94371710626865, -19.024507596255, -56.8030453693573, -314.583543516094, 165.222305128756, 316.17817825271, 23.9168069434991, 11.9598796643579, -128.904953645213, 0.419804589665318, -6.80218287850425, 29.2691824505584, 53.9010951754703, 40.9447832426993, -26.2505972353374, -41.4479380870087, -214.837325417531), .Dim = c(72L, 3L), .Dimnames = list(NULL, c('seasonal', 'trend', 'remainder')), .Tsp = c(1974, 1979.91666666667, 12), class = c('mts', 'ts', 'matrix')), c(1, 1, 1));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators322_ed681ed33cdeef811466737c3229607a() {
        assertEval("argv <- list(c(-1, 1), structure(c(1e-05, 1e-04, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 1e+05), .Dim = c(1L, 11L)));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators323_e8ea49f245470e4d26873635f08e993f() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L)), structure(c(0.63829956885596+0i, -0.190923866036828-0.209348060979014i, -0.478761262752136-0.086103851005322i, -0.365383456834977+0.041833555661111i, -0.222902888615007-0.301211043305794i, 0.537261763078809+0i, 0.305061935059249+0.040985454461732i, 0.320062315956695-0.375563080684186i, 0.339383913939873+0.23302799386284i, -0.286918674221019+0.348301421162371i, 0.428338589082996+0.09065231252407i, -0.107969030611945+0.281263066654197i, 0.001811723298003+0.250507832255811i, 0.144305664871353+0.232873855829054i, 0.761400139936914+0i, -0.050390571101999+0.329984002238884i, 0.120127927801654-0.008394623232215i, -0.521562263306688+0.262168616442556i, 0.691801039177503+0i, -0.206933988216912-0.109088169082914i, -0.014684754774299-0.0242358465049725i, 0.848358097780775+0i, -0.232315601522623+0.249797304698912i, -0.362004462885974+0.102815998405382i, 0.086977040883207+0.118037795588006i), .Dim = c(5L, 5L)));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators324_744b448ab3e9e46915e83b1eb4e308d2() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 0, 4.94065645841247e-324, 0, 0, 0, 0, 0), structure(c(73.0102287440125, 79.6161885135717, 81.5497837663961, 53.9710956454646, 43.6831159601594, 20.8581884349194, 7.6155030786098, 10.8008470888011, 14.7201505829463, 8.49167208457355, 101.686214382123, 921.711710792497), .Names = c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1')));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators325_6668953f1fc8490e749d28b763fc05cd() {
        assertEval("argv <- list(-97.5074316406251, structure(c(73.0102287440125, 79.6161885135717, 81.5497837663961, 53.9710956454646, 43.6831159601594, 20.8581884349194, 7.6155030786098, 10.8008470888011, 14.7201505829463, 8.49167208457355, 101.686214382123, 921.711710792497), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))));`%*%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators326_f247208782bd8a99a4f6e62217b5255f() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Tsp = c(1959, 1997.91666667, 12), class = 'ts'), 3);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators327_e76388a62ca23ccc1a5929ac901a11a2() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE), .Dim = 4L, .Dimnames = list(c('8', '10', '12', '14'))));`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators328_07c6da76dfaac93c74df3c963ffd40c4() {
        assertEval("argv <- list(350L, 7);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators329_d1e7a5a4099c8ed9a6c59d267adf8857() {
        assertEval("argv <- list(34, 2L);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators33_387f9c3bc12cdddae9e3506225704deb() {
        assertEval("argv <- list(c(20.8, 11.2, 6.2, 12.8, 43.4), c(10.4, 5.6, 3.1, 6.4, 21.7, 0, 10.4, 5.6, 3.1, 6.4, 21.7));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators330_7e395d20772b2784a043f52df964cc7c() {
        assertEval("argv <- list(TRUE, 0:10);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators331_a54de142b530670ac28eab0e45f98a6e() {
        assertEval("argv <- list(structure(1L, .Names = 'rate'), 2);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators332_4b661d693bc24e5b6c1cf0482e8f57ad() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`%/%`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators333_83e8ac52e6dbb558fd0e9f9b2b4c1ac9() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators334_bc3860eb6eeb071dbc62229acd028591() {
        assertEval("argv <- list(c(0, -1, 0, -1, -1, 0, NA, NA, 0, 0, 0, 0, 0, 15, 0, 17, 18, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 33, 34, 0, 0, 35, 0, 37, 38, 0), 2);`%/%`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators335_4513ed2131010d4541a678d4e469a791() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));`&`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators336_84591dff930b3cd2863d554b6e159dc8() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`&`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators337_0a2327b7e83d6accfbb3a38e14d5e48a() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE), c(TRUE, TRUE, TRUE, NA, FALSE, FALSE, TRUE, NA));`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators338_b7dabc5cf6e9f60b10e4e4450324e94d() {
        assertEval("argv <- list(structure(c(FALSE, FALSE), .Names = c('(Intercept)', 'age')));`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators339_70a0543f4eb2cd03d720673d5a19191b() {
        assertEval("argv <- list(c(FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE), structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Names = c('is.R', 'is.array', 'is.atomic', 'is.call', 'is.character', 'is.complex', 'is.data.frame', 'is.double', 'is.element', 'is.environment', 'is.expression', 'is.factor', 'is.finite', 'is.function', 'is.infinite', 'is.integer', 'is.language', 'is.list', 'is.loaded', 'is.logical', 'is.matrix', 'is.na', 'is.na.POSIXlt', 'is.na.data.frame', 'is.na.numeric_version', 'is.name', 'is.nan', 'is.null', 'is.numeric', 'is.numeric.Date', 'is.numeric.POSIXt', 'is.numeric.difftime', 'is.numeric_version', 'is.object', 'is.ordered', 'is.package_version', 'is.pairlist', 'is.primitive', 'is.qr', 'is.raw', 'is.recursive', 'is.single', 'is.symbol', 'is.table', 'is.unsorted', 'is.vector')));`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators34_a9431d2364dde2ac140f6f17c920c1ad() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators340_5de6be3139e1e0e5b5026fe8834a3ed0() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Tsp = c(1790, 1970, 0.1), class = 'ts'), c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators341_7aebbf647e9c2fe68e5efbab86240d11() {
        assertEval("argv <- list(structure(c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4')), .Tsp = c(1, 101, 1), class = c('mts', 'ts', 'matrix')), structure(cim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4'))));`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators342_21dec62d790ce46198eed22072f9caab() {
        assertEval("argv <- list(structure(c(NA, FALSE, TRUE, NA, FALSE, TRUE, NA, FALSE, TRUE), .Names = c(NA, 'FALSE', 'TRUE', NA, 'FALSE', 'TRUE', NA, 'FALSE', 'TRUE')), structure(c(NA, NA, NA, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE), .Names = c(NA, NA, NA, 'FALSE', 'FALSE', 'FALSE', 'TRUE', 'TRUE', 'TRUE')));`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators343_3d4847ee88a4b4979dc54cafab35e84a() {
        assertEval("argv <- list(structure(508L, class = 'octmode'), '755');`&`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators344_bbca0752cce9fb6149fb196dbe7584df() {
        assertEval("argv <- list(list());`&`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators345_a476b48d092a98b21d8ad887beeed08d() {
        assertEval("argv <- list(structure(cames = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146')));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators347_1a6bed128c33140ae5f6a70936a745bf() {
        assertEval("argv <- list(c(1-0i, 1+0i, 1+0i, 9.99999999999989e-01-5e-15i, 1+0i, 1+0i, 1-0i, 1e+00+9e-16i, 9.99999999999999e-01+3e-15i, 9.99999999999997e-01-3e-15i, 1e+00-1e-15i, 1+0i, 1+0i, 1e+00+1e-15i, 1+0i, 1+0i, 1+0i, 1-0i, 1+0i, 1e+00-5e-15i, 1-0i, 1+0i, 1+0i, 1+0i));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators348_cd8f8ec9fbb0a04a43be226a60707ff1() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Tsp = c(1959, 1997.91666667, 12), class = 'ts'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators349_c628b0a3d64528cef7cb4b63442bf1dc() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE), .Dim = c(3L, 3L)));`!`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators35_b48f9032d80e571c82930417dbc2457b() {
        assertEval("argv <- list(c(3, 1, 2, 2, 3.2, -1, 1, 3.2, 4, 3, 3.2, 3.2, 202, 241, 243), 0);`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators350_a66990bf7e845b028582f04842722d5e() {
        assertEval("argv <- list(c(-Inf, 2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, Inf, NaN, NA));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators351_8cf32aacc01e6b2ace8b819878dc8625() {
        assertEval("argv <- list(.Primitive('log'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators352_b5dd8cea1c51a401abfff6601fe327b1() {
        assertEval("argv <- list(structure(NA, .Dim = c(1L, 1L)));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators353_adf9f5554ce1ffd74a5c3e6486b3c9bb() {
        assertEval("argv <- list(structure(c(NA, 2, NA, 1, NA, 0), .Dim = 2:3));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators354_70c9a579d18440b16c9bdad49315dcb3() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators355_c86e91fabf47d6ef8bc249654ea515a6() {
        assertEval("argv <- list(structure(NA, .Dim = c(1L, 1L), name = 'Sam', class = structure('Foo', package = '.GlobalEnv')));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators356_ecee1d15848f5d89b938900ee0b4a7af() {
        assertEval("argv <- list(structure(list(x = numeric(0), y = numeric(0), fac = structure(integer(0), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = integer(0), class = 'data.frame'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators357_19050f75331a154db43726b1d2e60849() {
        assertEval("argv <- list(structure(list(x = c(-2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2), y = c(1, 4, 5, 9, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 8, 8, 9, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 0, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 1, 2, 3, 5, 5, 10), z = c(-2, 5, -1, 7, -8, 17, -4, -2, -1, 0, -8, -3, 6, -9, 4, -10, 4, -9, -3, 4, -3, 8, 2, 8, 14, -14, -2, -1, 8, 9, -13, -12, -9, 0, 0, 5, 12, 14, -3, -1, 3, 4, 6, 18, 2, 8, 12, -23, 0, 2, 3, 13, -12, -6, -2, 3, 5, 8, -1, 12, 15, -11, 3, 4, 8, 10, 0, -8, -5, 7, 8, 1, -11, -10, -7, -3, 2, 4, 18, -5, -3, 0, -18, -7, -16, -10, -5, -6, -5, -3, -3, -11, -1, 2, 20, 0, -7, -1, 9, 3), u = c(12, 2, 6, 36, 17, 38, 24, 25, 19, 21, 6, 5, 28, 41, 28, 10, 6, 48, 33, 2, 45, 45, 37, 0, 29, 8, 23, 21, 1, 48, 20, 24, 26, 34, 35, 5, 35, 26, 33, 20, 7, 17, 40, 9, 17, 48, 50, 47, 46, 42, 28, 1, 14, 17, 32, 48, 14, 20, 2, 19, 27, 37, 44, 41, 23, 50, 30, 19, 42, 16, 12, 35, 38, 30, 33, 17, 32, 4, 41, 13, 9, 41, 39, 31, 32, 32, 36, 33, 32, 19, 37, 27, 17, 39, 19, 48, 33, 33, 42, 44)), .Names = c('x', 'y', 'z', 'u'), row.names = c(67L, 84L, 24L, 14L, 81L, 28L, 97L, 98L, 99L, 72L, 46L, 74L, 91L, 75L, 1L, 45L, 35L, 6L, 3L, 58L, 54L, 65L, 80L, 13L, 52L, 71L, 12L, 86L, 32L, 89L, 78L, 5L, 88L, 2L, 90L, 57L, 66L, 76L, 77L, 41L, 62L, 23L, 27L, 16L, 33L, 29L, 47L, 82L, 26L, 79L, 49L, 53L, 34L, 38L, 17L, 42L, 69L, 7L, 36L, 37L, 10L, 64L, 51L, 60L, 100L, 30L, 85L, 48L, 8L, 44L, 92L, 22L, 9L, 31L, 94L, 63L, 20L, 87L, 21L, 73L, 39L, 59L, 55L, 40L, 96L, 68L, 15L, 43L, 83L, 25L, 50L, 18L, 19L, 93L, 56L, 70L, 4L, 61L, 95L, 11L), class = 'data.frame'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators358_05697e03a2d3c814c02dc993266134ee() {
        assertEval("argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 2L, 2L, 3L, 1L, 3L, 3L, 2L, 2L, 1L), .Label = c('A', 'B', 'C'), class = 'factor'), char = structure(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), class = 'AsIs')), .Names = c('x', 'y', 'fac', 'char'), row.names = c(NA, -10L), class = 'data.frame'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators359_3f252a21ebcd0b7100ba72debb0bd167() {
        assertEval("argv <- list(c('«L', 'tin-1 ', '', '', 'ented ', 'h', 'rs»: éè øØ å<Å æ<Æ é éè'));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators36_393411150d7d235ce6042d7b8fc25908() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`+`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators360_40a11106e99806648458c2c136d3f553() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 'auto');`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators361_a33df53e888079e0f847f2a7f2588c43() {
        assertEval("argv <- list(structure(c(6.36917889425777, 5.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 4.36917889425777, 5.36917889425777, 5.36917889425777, 6.36917889425777, 6.36917889425777, 4.36917889425777, 5.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 4.36917889425777, 5.36917889425777, 5.36917889425777), .Dim = 38L, .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38'))));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators362_a9b4729b7ef08573a3554910ac113ecb() {
        assertEval("argv <- list(structure(cim = c(14L, 11L), .Dimnames = list(c('0-18', '18-19', '19-20', '20-21', '21-22', '22-23', '23-24', '24-25', '25-26', '26-27', '27-28', '28-29', '29-30', '30-31'), c('1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964'))));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators363_cc36bb60b0bda47b76e479e8781483f8() {
        assertEval("argv <- list(structure(NA, .Tsp = c(1, 1, 1), .S3Class = 'ts', class = structure('ts', package = 'methods')));`(`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators364_b27dd42d73e531297f5126ff5fe33e98() {
        assertEval("argv <- list(6, structure(c(-1, 1, -1), .Dim = 3L, .Dimnames = list(c('73', '312', '674'))));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators365_8ddb23b3c40aaa6da0491b28fe2fbc6e() {
        assertEval("argv <- list(-0.0290053253855826, c(95, 175, 250, 350, 500, 675, 1000));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators366_e91af57427e7ba567ce1c8b8a0c0c0ea() {
        assertEval("argv <- list(c(2L, 1L), c(2L, 2L));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators367_3cf392c34b45b624cb1ea835f4e26482() {
        assertEval("argv <- list(c(2.80068140446062, 1.8317224411983, 1.22900361620513, 0.0769946405427206, 2.80068140446062e-07), structure(c(-0.579458297883801, 0.378144472053104, 0.289151395420297, -0.322488635437406, 0.577604873429495, -0.439515769918701, -0.563213485796381, 0.19897761279598, -0.497766353148047, -0.449725499265461, -0.183421202297383, -0.367349618966443, -0.8113056422696, -0.10946638264776, 0.401511127970965, 0.369976492463818, -0.594590295135748, 0.453781444579942, 0.0303676587408212, 0.550218122031705, 0.548204365705284, 0.22652586176497, -0.112538595641497, -0.797072552569732, 0.012977588540091), .Dim = c(5L, 5L)));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators368_43df624651faf30fa6c50610edb6ce0e() {
        assertEval("argv <- list(1.5, 1.5);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators369_3d8814961cb52c9a6eec5d1906bd4170() {
        assertEval("argv <- list(structure(c(0.853345363892062, -0.0256071578412401, -0.0612813871821256, -0.0612813871821256, -0.0256071578412401, -0.0612813871821256, -0.0256071578412401, -0.0612813871821256, -0.0256071578412401, 0, 0, 0.0786725879812683, 0.0786725879812683, 0.22692030644121, -0.254660745352065, -0.106413026892124, -0.254660745352065, -0.106413026892124, 0, 0, 0.11837902431235, 0.11837902431235, 0.243512113989909, -0.322431463531475, -0.134731829015137, -0.322431463531475, -0.134731829015137, 0, 0, 0.186882435497702, 0.186882435497702, 0.272137080615963, -0.439352693506895, -0.18358875815211, -0.439352693506895, -0.18358875815211, 0, 0, 0, 0, 0, 0, 0, 0.172822903136154, -0.345645806272308), .Dim = c(9L, 5L)), structure(c(1.03259546878074, -0.967404531219257, 0.032595468780743, 0.032595468780743, -0.967404531219257, 0.032595468780743, -0.967404531219257, 0.032595468780743, -0.967404531219257, 1.15961954033819, -0.840380459661814, 0.159619540338186, 0.159619540338186, -0.840380459661814, 0.159619540338186, -0.840380459661814, 0.159619540338186, -0.840380459661814, 1.16167819481816, -0.838321805181836, 0.161678194818164, 0.161678194818164, -0.838321805181836, 0.161678194818164, -0.838321805181836, 0.161678194818164, -0.838321805181836, 1.1652298823369, -0.834770117663101, 0.165229882336899, 0.165229882336899, -0.834770117663101, 0.165229882336899, -0.834770117663101, 0.165229882336899, -0.834770117663101, 1.17282290313615, -0.827177096863846, 0.172822903136154, 0.172822903136154, -0.827177096863846, 0.172822903136154, -0.827177096863846, 0.172822903136154, -0.827177096863846), .Dim = c(9L, 5L)));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators37_a466125eb44850549344dd78e172c12f() {
        assertEval("argv <- list(logical(0));`+`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators370_cfe2c46217b6bded9aad304c663f829e() {
        assertEval("argv <- list(0.5, structure(c(-1.12095129310443+0i, 1.4848874974+0.41132282301771i, 2.78279011158859-0.53526713626358i, 1.85742152822765-0.44342995809143i, -0.9385359708259+2.37692350427328i, 1.4848874974-0.41132282301771i, 0.921832411978405+0i, -0.90524740754917+0.341208007507433i, -0.18900237366429+1.08605076555264i, -0.66363688475825+1.22446591693656i, 2.78279011158859+0.53526713626358i, -0.90524740754917-0.341208007507433i, 0.801542901188104+0i, -1.85593444068452+0.95943368782835i, -1.58184558306131+0.08618435261084i, 1.85742152822765+0.44342995809143i, -0.18900237366429-1.08605076555264i, -1.85593444068452-0.95943368782835i, 1.40271180312737+0i, -1.20168263701907+0.42799687996867i, -0.9385359708259-2.37692350427328i, -0.66363688475825-1.22446591693656i, -1.58184558306131-0.08618435261084i, -1.20168263701907-0.42799687996867i, -1.25007853569851+0i), .Dim = c(5L, 5L)));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators371_ab89fcfdf6aa5da4935878ac00757f8e() {
        assertEval("argv <- list(TRUE, TRUE);`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators372_c5d80ae20fcf4ba75c360f9c13256170() {
        assertEval("argv <- list(structure(1.6768574855882, .Names = 'x'), c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators373_986bb5c9ad613c5c848601d3f10439b5() {
        assertEval("argv <- list(structure(c(2134, 1863, 1877, 1877, 1492, 1249, 1280, 1131, 1209, 1492, 1621, 1846, 2103, 2137, 2153, 1833, 1403, 1288, 1186, 1133, 1053, 1347, 1545, 2066, 2020, 2750, 2283, 1479, 1189, 1160, 1113, 970, 999, 1208, 1467, 2059, 2240, 1634, 1722, 1801, 1246, 1162, 1087, 1013, 959, 1179, 1229, 1655, 2019, 2284, 1942, 1423, 1340, 1187, 1098, 1004, 970, 1140, 1110, 1812, 2263, 1820, 1846, 1531, 1215, 1075, 1056, 975), .Tsp = c(1974, 1979.58333333333, 12), class = 'ts'), c(-33.5, -32.5, -31.5, -30.5, -29.5, -28.5, -27.5, -26.5, -25.5, -24.5, -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5, -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators374_fdf08b71abd4499ba6010e31a9aeebf7() {
        assertEval("argv <- list(c(0.0125360439090882, 0.109084258765985, 0.283058130441221, 0.5, 0.716941869558779, 0.890915741234015, 0.987463956090912, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.987463956090912, 0.890915741234015, 0.716941869558779, 0.5, 0.283058130441221, 0.109084258765985, 0.0125360439090882), structure(c(430.689117199391, 165.5304253221, 185.371733444809, 191.213041567518, -187.945650309773, -425.104342187064, -388.263034064356, -531.421725941647, -447.580417818938, -158.739109696229, -23.8978015735202, 206.943506549189, 469.784814671898, 509.626122794606, 531.467430917315, 217.308739040024, -206.849952837267, -316.008644714558, -412.167336591849, -459.32602846914, -533.484720346432, -233.643412223723, -29.8021041010139, 497.039204021695, 456.880512144404, 1192.72182026711, 731.563128389821, -66.5955634874696, -350.754255364761, -373.912947242052, -415.071639119343, -552.230330996634, -517.389022873925, -302.547714751216, -37.7064066285076, 560.134901494201, 746.97620961691, 146.817517739619, 240.658825862328, 325.500133985037, -223.658557892254, -301.817249769546, -370.975941646837, -439.134633524128, -487.293325401419, -261.45201727871, -205.610709156001, 226.230598966708, 596.071907089416, 866.913215212125, 530.754523334834, 17.5958314575429, -59.5628604197482, -206.721552297039, -289.880244174331, -378.038936051622, -406.197627928913, -230.356319806204, -254.515011683495, 453.326296439214, 910.167604561923, 473.008912684631, 504.85022080734, 195.691528930049, -114.467162947242, -248.625854824533, -261.784546701824, -336.943238579115, -366.101930456407, -219.260622333698, -0.419314210988802, 52.4219939117201), .Tsp = c(1974, 1979.91666666667, 12), class = 'ts'));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators375_770aa8990070feabf2be7828a67eb84d() {
        assertEval("argv <- list(structure(c(12L, 23L), .Dim = 2L, .Dimnames = structure(list(c('1', '2')), .Names = ''), class = 'table'), 1:2);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators376_58682f35159aaf389c643c8893f3af01() {
        assertEval("argv <- list(3, structure(2.39313505864491, .Names = 'x'));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators377_7bbcebfa98161ba870f075281f97428c() {
        assertEval("argv <- list(30, 1:100);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators378_83f6ad26b6082331973f16992bc90047() {
        assertEval("argv <- list(1, structure(cim = c(14L, 11L), .Dimnames = list(c('0-18', '18-19', '19-20', '20-21', '21-22', '22-23', '23-24', '24-25', '25-26', '26-27', '27-28', '28-29', '29-30', '30-31'), c('1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964'))));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators379_9a343c37cef7e71237404a338a047007() {
        assertEval("argv <- list(structure(c(125.462606837607, 127.867786930034, 130.144676735994, 132.324464274255, 134.336734211717, 136.082072800639, 137.721118421779, 140.845055930758, 143.28591535884, 145.768223343737, 146.185327931547, 145.802002908545, 149.002460060179, 153.598715100046, 155.183805036251, 159.724429366298, 161.673726141005, 170.116738471067, 169.947660568386, 170.006973600711, 170.719702563484, 171.765986080317, 174.613600436266, 179.048948110372, 179.883872548102, 181.827282092545, 184.331859119525, 182.743207226061, 183.03021399043, 184.153788490888, 191.745076839764, 194.148810101473, 199.10701170422, 199.286358868728, 202.588173234443, 206.570808710438, 208.901416980527, 210.197793333945, 208.990030330146, 213.988947898492, 221.910492791482, 225.858547195805, 224.629928649936, 225.693827143939, 226.925133971988, 227.909074259919, 228.294198948883, 226.413286455683, 224.858486784216, 224.205996780539, 218.296565215286, 217.952397420454, 218.203297324152, 222.634503912979, 229.136665168488, 238.199012563706, 241.084558136518, 244.474599589944, 246.541678441215, 249.943070595034, 252.738029658228, 257.655553126827, 261.948737901648, 259.38828865138, 260.581624400595, 261.35845107056, 266.721536928548, 274.727021103557, 279.519739428079, 285.613419212625, 290.081183406543, 292.578703689536, 298.536510073918, 301.854944861174, 306.72012690062, 308.552564035999, 308.960906756251, 310.45531361152, 314.471901471993, 316.180279500694, 321.131980519447, 324.487238338646, 326.432439140534, 330.587069598829, 332.257828918305, 334.897103376149, 336.500107838622, 341.040184577164, 343.37680996925, 346.04109648055, 350.540519967376, 353.909804788829, 360.713606630499, 365.246028758837, 368.653301499587, 371.870254918956, 371.890026901483, 370.974100279234, 368.423988230309, 364.248564265975, 359.879991232458, 359.533794053725, 361.493423852232, 366.272105696357, 374.712558672268, 373.691234302716, 377.311059795731, 378.958918379956, 378.434557854932, 383.493556594665, 388.051875855736, 394.72909801417, 399.975945122541, 406.14684914494, 404.223720368284, 407.657133649615, 412.1384117511, 418.253339402259, 423.102585806067, 430.610654889479, 439.381586214864, 443.452574204404, 446.154893648303, 437.948767898975, 448.065211483223, 452.98477480065, 456.22724907891, 460.426882491713, 459.053158913271, 461.490725714314, 468.825080012951, 470.090114620358), .Tsp = c(1950, 1960.91666666667, 12), class = 'ts'), structure(c(0.885377815022177, 0.956702662008391, 1.05604790005129, 0.99999180855271, 0.919180306022048, 1.08513403180744, 1.17950860096112, 1.17526020717901, 1.07399050289666, 0.935173924204861, 0.814655016855593, 0.918977224438701, 0.904886860495219, 0.974651014130265, 1.07318431817519, 1.01267995772422, 0.926294652616773, 1.09129604332202, 1.2136804527299, 1.19513265851781, 1.09196097114148, 0.920716625833028, 0.792428126174694, 0.944665370656132, 0.947060673767712, 0.975861204272186, 1.11889468518085, 1.01760687119493, 1.00966041750694, 1.06261400924208, 1.18646278417314, 1.17953219321689, 1.08299041001682, 0.934768432861068, 0.819582111385122, 0.933541960135008, 0.949299218066574, 0.984712956742138, 1.07274478711742, 1.00035738265237, 1.00344619530389, 1.136720297344, 1.19466716852011, 1.22110179994975, 1.06180417436075, 0.949583554116272, 0.837964127353819, 0.93707048913996, 0.942302022727904, 0.95126138690835, 1.10787035072032, 1.06044554393152, 1.0212841877174, 1.09777947829535, 1.18237485006198, 1.21101795468964, 1.05077474260124, 0.934482494680629, 0.806219558496273, 0.905507672627939, 0.919955309911582, 0.877743501942818, 1.0879384725907, 1.04844380534261, 1.05308404040641, 1.15209925173403, 1.2652951992685, 1.2229795664526, 1.06552999327079, 0.93588195611389, 0.816986956383517, 0.912235531149947, 0.943381852486145, 0.894360852742568, 1.04386693859046, 1.0412387923364, 1.04235110100738, 1.18519852082375, 1.32667886524828, 1.24804193460951, 1.09707745322343, 0.950576085705186, 0.817003170713368, 0.935893112057161, 0.94836946371363, 0.908951898620782, 1.03731973240637, 1.02419763657726, 1.03406277428866, 1.19743269363204, 1.31822462831668, 1.26862748613699, 1.10235655952769, 0.945803515760855, 0.82528228386107, 0.929397385899463, 0.948173569563647, 0.902518233330453, 1.05026106742455, 1.02180458893893, 1.03392834532348, 1.21128679495018, 1.32344975581348, 1.30039314766586, 1.11343783106856, 0.948475302349546, 0.826576551185179, 0.912962090088511, 0.926561968385747, 0.87353380715788, 1.00678775995668, 0.979149663293728, 1.01788806209298, 1.21041189004384, 1.34524520684843, 1.34901427843594, 1.0909897186673, 0.956150231433401, 0.823434379283845, 0.897915761073492, 0.942043948926554, 0.884990150921632, 1.03141421940795, 0.994229969777015, 1.03800763998638, 1.17962620510919, 1.3518161330406, 1.3629765592452, 1.11127249087291, 0.966786065425125, 0.843497574054032, 0.924445014403716), .Tsp = c(1950, 1960.91666666667, 12), class = 'ts'));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators38_fff6b4f6a5c0480606d9ad4715487b2e() {
        assertEval("argv <- list(structure(c(0.2, -1.84560926910116e-17, -3.69226410848886e-17, 2.11212282911474e-17, 9.44321399451751e-18, 3.05608209061811e-17, 0.2, -5.35638147485559e-17, 5.12150597333887e-17, 1.92692213766805e-17, 6.57361167807833e-17, -7.28393619263486e-17, 0.2, 7.17735727503349e-17, 3.10850404080861e-17, -2.28831714606547e-17, 2.83709294123644e-17, 7.98995130974544e-17, 0.2, 0, 8.8841915809257e-17, -1.17177477007305e-16, -1.30709215062431e-16, 1.04641694001652e-16, 0.2), .Dim = c(5L, 5L), fracs = c('1/5', '0', '0', '0', '0', '0', '1/5', '0', '0', '0', '0', '0', '1/5', '0', '0', '0', '0', '0', '1/5', '0', '0', '0', '0', '0', '1/5'), class = c('fractions', 'matrix')), 1);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators380_064e7b5f95dff505770db9cb655de454() {
        assertEval("argv <- list(-3:3, 0+1i);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators381_5a71164222f6dd729c257b5ee4c90667() {
        assertEval("argv <- list(181L, 3.14159265358979);`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators39_59a97f812dab51944914195424a8c0df() {
        assertEval("argv <- list(structure(c(-24.5833333333333, -5.08333333333333, 10.25, 19.4166666666667), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'), strata = structure('Within', .Names = 'N'), class = 'mtable'), structure(103.972222222222, class = 'mtable'));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators4_127bc640f730d79c6d94fa078081d44e() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators40_c911f0a8d5fa0c4585743e1cb48f8b6f() {
        assertEval("argv <- list(structure(1.2728543779194, .Names = 'Var1'), 1);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators41_2bbeb2c4b43d6d571b9b8f011abeb075() {
        assertEval("argv <- list(1.15);`-`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators42_89809c64e640833cc0e1a7e4a6b8c9d4() {
        assertEval("argv <- list(structure(c(6316.53846153846, 6350.69230769231), .Dim = 2L, .Dimnames = list(c('1', '2'))), c(6314.13609467456, 6338.60946745562));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators43_db4f558d3fde50ee63c3bbc5c2e88038() {
        assertEval("argv <- list(1, c(0.588534374722704, 0.346372710230244, 0.203852246436365, 0.119974054392244, 0.0706088550846872, 0.0244569805019377));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators44_75fd2f5250d77fabf7fff7354b33670a() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0i, 1.39139505579429+0i, 0.928710764113827+0i, -0.469267985412949+0i, 0.7424437487+0i, 0.460916205989202+0i, -0.452623703774585+0i, -0.0945011868321433+0i, -0.331818442379127+0i, 1.39139505579429+0i, -0.452623703774585+0i, 0.400771450594052+0i, -0.927967220342259+0i, -0.790922791530657+0i, 0.928710764113827+0i, -0.0945011868321433+0i, -0.927967220342259+0i, 0.701355901563686+0i, -0.600841318509537+0i, -0.469267985412949+0i, -0.331818442379127+0i, -0.790922791530657+0i, -0.600841318509537+0i, -0.625039267849257+0i), .Dim = c(5L, 5L)), structure(c(-0.560475646552213+0i, 0.742443748700001+0i, 1.39139505579429+0i, 0.928710764113827+0i, -0.469267985412949+0i, 0.742443748700001+0i, 0.460916205989202+0i, -0.452623703774585+0i, -0.094501186832143+0i, -0.331818442379127+0i, 1.39139505579429+0i, -0.452623703774585+0i, 0.400771450594052+0i, -0.927967220342258+0i, -0.790922791530656+0i, 0.928710764113827+0i, -0.094501186832143+0i, -0.927967220342258+0i, 0.701355901563685+0i, -0.600841318509537+0i, -0.469267985412949+0i, -0.331818442379127+0i, -0.790922791530656+0i, -0.600841318509537+0i, -0.625039267849256+0i), .Dim = c(5L, 5L)));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators45_f386977db58411e99c401bc40cbf8f86() {
        assertEval("argv <- list(38, 24L);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators46_112dff108345b63dff44cfa8ca6b8eb5() {
        assertEval("argv <- list(structure(c(14, 2, 0, 2, -7, 0), .Dim = c(3L, 2L)), 0);`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators47_004d505cabef4c851408b39ee6342899() {
        assertEval("argv <- list(1979.91666666667, structure(1979.91666666667, .Names = 'data'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators48_15274220eadcf64fe7c91cd00a354e6f() {
        assertEval("argv <- list(41L, 0L);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators49_ff8926894b4e2be54401ffce65e0f538() {
        assertEval("argv <- list(7.12801378828154e+22);`-`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators5_7a41350b82fb48cc09b7c6a7562749da() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`*`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators50_30436ed25394cd65c2763b6febb31068() {
        assertEval("argv <- list(structure(c(315.42, 316.31, 316.5, 317.56, 318.13, 318, 316.39, 314.65, 313.68, 313.18, 314.66, 315.43, 316.27, 316.81, 317.42, 318.87, 319.87, 319.43, 318.01, 315.74, 314, 313.68, 314.84, 316.03), .Tsp = c(1959, 1960.91666666667, 12), class = 'ts'), structure(c(-0.234444444444459, 0.192638888888913, 0.743888888888894, 2.15972222222219, 3.13138888888888, 2.65888888888892, 0.480138888888822, -1.31611111111111, -2.34527777777775, -2.93819444444447, -1.58527777777776, -0.947361111111074, -0.234444444444459, 0.192638888888913, 0.743888888888894, 2.15972222222219, 3.13138888888888, 2.65888888888892, 0.480138888888822, -1.31611111111111, -2.34527777777775, -2.93819444444447, -1.58527777777776, -0.947361111111074), .Tsp = c(1959, 1960.91666666667, 12), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators51_67e818b19655041f681c5fe551540318() {
        assertEval("argv <- list(structure(c(94694400, 126230400, 157766400, 189302400, 220924800, 252460800, 283996800, 315532800, 362793600, 394329600, 425865600, 489024000, 567993600, 631152000, 662688000, 709948800, 741484800, 773020800, 820454400, 867715200, 915148800, 1136073600, 1230768000, 1341100800), class = c('POSIXct', 'POSIXt')), structure(c(78796800, 94694400, 126230400, 157766400, 189302400, 220924800, 252460800, 283996800, 315532800, 362793600, 394329600, 425865600, 489024000, 567993600, 631152000, 662688000, 709948800, 741484800, 773020800, 820454400, 867715200, 1136073600, 1230768000, 1341100800), class = c('POSIXct', 'POSIXt')));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators52_0ae639664f63b4b213e6235475e82a0a() {
        assertEval("argv <- list(structure(c(9, 12, 12, 15, 9, 9, 13, 11, 15, 10, 13, 13, 13, 15, 8, 13, 13, 10, 7, 9, 6, 11, 3, 5, 9, 3, 5, 1, 1, 2, NA, 10, 1, 4, 7, 4, NA, NA, 5, 2, 4, 3, 3, 6, 1, 1, 63, 41, 59, 50, 290, 226, 60, 36, 32, 121, 70, 51, 79, 32, 42, 39, 76, 60, 56, 88, 57, 309, 254, 146, 43, 78, 88, 314, 149, 78, NA, 238, 153, 159, 222, 203, NA, NA, 74, 100, 111, 9, 180, 50, 256, 107), .Dim = c(23L, 4L), .Dimnames = list(NULL, c('V1', 'V2', 'V3', 'V4'))), structure(c(10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9), .Dim = c(23L, 4L)));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators53_d09611c4d741d140b72bf840cb9c2bf6() {
        assertEval("argv <- list(structure(c(58.56, 2.776, 61.341, 0, 0), .Names = c('user.self', 'sys.self', 'elapsed', 'user.child', 'sys.child'), class = 'proc_time'), structure(c(40.692, 0.307, 41, 0, 0), .Names = c('user.self', 'sys.self', 'elapsed', 'user.child', 'sys.child'), class = 'proc_time'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators54_7eab8aab925a8f7cd595f02382af0f44() {
        assertEval("argv <- list(0+1e-04i);`-`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators55_93055e2ebb1267648154087f79912659() {
        assertEval("argv <- list(structure(c(1.05569354979237, 0.694336127879446, -0.0222037058662105), .Dim = c(1L, 3L)), 0.055);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators56_e107f5595f71e9658509b9604452bd28() {
        assertEval("argv <- list(structure(c(-50, 175, 149, 214, 247, 237, 225, 329, 729, 809, 530, 489, 540, 457, 195, 176, 337, 239, 128, 102, 232, 429, 3, 98, 43, -141, -77, -13, 125, 361, -45, 184), .Tsp = c(1951, 1958.75, 4), class = 'ts'), structure(c(NA, NA, 159.125, 204, 221.25, 245.125, 319.75, 451.5, 561.125, 619.25, 615.625, 548, 462.125, 381.125, 316.625, 264, 228.375, 210.75, 188.375, 199, 207.125, 191, 166.875, 72, -9.25, -33.125, -36.75, 36.25, 103, 131.625, NA, NA), .Tsp = c(1951, 1958.75, 4), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators57_a043bf021bbe07951af4a2cfbdfc7b3a() {
        assertEval("argv <- list(structure(c(0, 1, 0, 2), .Names = c('age', 'strata(ss)', 'age2', 'age:strata(ss)')), 1);`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators58_db0f2e287893afc566c292115e43b72c() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 1L);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators59_67c2304ac16ab62f71e0c5ccef44d380() {
        assertEval("argv <- list(50, structure(c(1, 2, 1, 3, 4, 4, 4, 1, 2, 2, 1, 4, 2, 1, 5, 5, 5, 1, 1, 5, 2, 4, 5, 2, 3, 2, 1, 1, 1, 3, 2, 2, 5, 5, 2, 1, 1, 4, 1, 1, 1, 6, 4, 1, 4, 2, 4, 1, 1, 1, 7, 7, 7, 8, 8, 9, 10, 7, 7, 10, 8, 7, 8, 9, 11, 7, 9, 10, 12, 7, 9, 7, 12, 9, 7, 7, 8, 8, 9, 11, 7, 7, 7, 13, 9, 10, 7, 8, 10, 8, 9, 9, 7, 7, 9, 10, 10, 7, 11, 10, 14, 14, 12, 14, 14, 15, 14, 14, 15, 13, 8, 12, 12, 15, 15, 12, 13, 13, 15, 15, 12, 14, 15, 12, 13, 13, 12, 13, 15, 13, 15, 13, 15, 13, 14, 12, 14, 13, 9, 12, 12, 8, 14, 14, 12, 12, 12, 12, 13, 13, 4, 1, 4, 2, 1, 1, 1, 4, 3, 3, 4, 3, 1, 4, 1, 4, 1, 4, 2, 4, 3, 1, 4, 1, 4, 3, 2, 4, 2, 2, 3, 1, 4, 4, 1, 2, 2, 1, 4, 2, 4, 2, 1, 4, 3, 1, 1, 4, 4, 2, 10, 10, 8, 12, 7, 10, 7, 10, 8, 7, 7, 10, 7, 10, 7, 11, 10, 7, 8, 10, 13, 11, 13, 10, 10, 10, 7, 9, 10, 7, 8, 10, 10, 14, 10, 7, 10, 12, 7, 7, 13, 10, 10, 10, 10, 7, 7, 10, 7, 7, 15, 15, 15, 13, 15, 14, 13, 15, 14, 12, 9, 15, 13, 14, 14, 13, 14, 14, 14, 14, 13, 13, 14, 8, 14, 14, 8, 9, 14, 12, 12, 9, 14, 9, 13, 15, 13, 14, 13, 8, 15, 12, 15, 15, 15, 8, 15, 13, 14, 14), .Dim = c(150L, 2L), .Dimnames = list(NULL, c('cluster', 'neighbor'))));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators6_bbbef4fda2917510d998fda8479720ee() {
        assertEval("argv <- list(structure(5.34872109992236, .Names = 'x'), structure(-17494.4659893938, .Names = 'x'));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators60_16866adaaa4b504b7e8dace1699caf3c() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L), .Dim = c(3L, 3L)), structure(c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L), .Dim = c(3L, 3L)));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators61_4e49d9069bded39a1c7e10b74423c638() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1), .Dim = c(7L, 7L), .Dimnames = list(NULL, NULL)), c(1, 0, 0, 0, 0, 0, 0));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators62_55cd425e9582fb6629492cdbeaa85177() {
        assertEval("argv <- list(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0), structure(c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), .Dim = c(10L, 10L)));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators63_3284f8169b83e55f63c16b6a572bf1b4() {
        assertEval("argv <- list(structure(list(war = c(1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L), fly = c(1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), ver = c(1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 1L, 2L), end = c(1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, NA, 1L, 1L, 2L, 1L, 1L, NA, 2L), gro = c(2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, NA, 2L, 2L, 1L, NA, 2L, 2L, NA, 1L, 2L), hai = c(1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L)), .Names = c('war', 'fly', 'ver', 'end', 'gro', 'hai'), class = 'data.frame', row.names = c('ant', 'bee', 'cat', 'cpl', 'chi', 'cow', 'duc', 'eag', 'ele', 'fly', 'fro', 'her', 'lio', 'liz', 'lob', 'man', 'rab', 'sal', 'spi', 'wha')), 1);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators64_529a2b478d936e5c96057f626febbb41() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`-`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators65_44ff7fe551cb1f95bfe43e5cdb4f708f() {
        assertEval("argv <- list(c(41L, 36L, 12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L, 14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L, 45L, 115L, 37L, NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 135L, 49L, 32L, NA, 64L, 40L, 77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L, 79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L, 59L, 39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA, 44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA, 45L, 168L, 73L, NA, 76L, 118L, 84L, 85L, 96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L));`-`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators66_867b493aca979de2a18f3f040a27eebf() {
        assertEval("argv <- list(structure(c(0.163529648037515, 0.690300939958932, 1.33873438218701, 1.66977334065937, 2.08385700655167, 1.90103052674775, 1.24826888183738, -0.346530864750065, -2.02114485014442, -1.391176571206, -0.974900546993623, -0.592397172772186, 1.12800897451332, 1.28932367812798, 1.52806194332292, 0.902674841819288, -0.592397172772186, -1.58883249200006, -2.79944983904467, -2.38660462363888, 1.11301751209174, 0.656516272159253, 0.0219290473645453, -0.905668755424301, -1.30280742075591, -1.17239032526075, -0.455509560368709, -0.00488221008611145, 1.01557266990962, 1.33518324209154, 1.7902682423845, 1.2223240303426, -0.642532985196542, -2.3156528876666, -2.94255068268534, -2.71429203070436, -2.52857488490927, -1.36967036598504, -0.673867141366977, 0.557834355527559, -1.17239032526075, -0.455509560368709, -0.00488221008611145, 1.01557266990962, 1.33518324209154, 1.7902682423845, 1.2223240303426, -0.642532985196542, -2.3156528876666, -2.94255068268534, -2.71429203070436, -2.52857488490927, -1.36967036598504, -0.673867141366977, 0.557834355527559, 1.69565743430218, 1.55297632585292, -0.231087508986891, -1.95215197865747, -1.57567440742255, 1.27884061694483, 1.52424121861625, -1.01140094921315, -0.834671205684972, -0.234500481583131, 0.163529648037515, 0.690300939958932, 1.33873438218701, 1.66977334065937, 2.08385700655167, 1.90103052674775, 1.24826888183738, -0.346530864750065, -2.02114485014442, -1.391176571206, -0.974900546993623, -0.592397172772186, 1.12800897451332, 1.28932367812798, 1.52806194332292, -0.720008297364832, -0.01169886906521, 0.795118935598027, 1.30411137828236, 1.35630335130608, 1.05258722945331, -0.0781544111924379, -0.905668755424301, -1.14228052378938, -1.10485411827026, -0.292564282537893, 0.785919238699603, 1.49889320873226, 2.20687990315498, 1.74950266694519, -0.073778036592639, -1.06484878365656, -0.447016940323056, -0.725579342414288, 0.0582966915354195, 1.55297632585292, -0.231087508986891, -1.95215197865747, -1.57567440742255, -0.647687635785206, 0.0245710568273836, 0.569377384809234, 1.54435558280902, 2.246266557697, 2.14425394955264, 1.63506382167997, 0.909232242365448, -0.762567911783628, -0.660691720208413), .Dim = c(114L, 1L), .Dimnames = list(NULL, 'Series 1'), .Tsp = c(1, 114, 1), class = 'ts'), structure(c(-1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16), .Dim = c(114L, 1L)));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators67_8ea536baa2b57a7d94f88bc4e4695ed0() {
        assertEval("argv <- list(c(4L, 3L, 2L, 1L, 2L, 3L, 4L, 5L), 0+5i);`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators68_f1540a8012879e2a647c922c47accb41() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), structure(integer(0), .Label = character(0), class = 'factor'));`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators69_3e4d9eaf39e34462e19dbfa8d2c7b211() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators7_dafb4aedf08e215f91359f39b7aa316a() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0.5, 0.5, 1, 1, 0, 0, 0, 0, 0, 1), .Dim = c(6L, 4L)), c(1, 1, 1, 0, 0, 0));`*`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators70_cb674c96a72fd23a2806d6bcfde9279d() {
        assertEval("argv <- list(1, structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59), .Tsp = c(0, 59, 1), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators71_70a913feb66e0efec9f0702fc6af8acd() {
        assertEval("argv <- list(-3.14159265358979, 3.14159265358979);`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators72_431e8cc2a0b044fc61ea748ab8c3aa75() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 2L, 2L, 2L), .Label = c('1', '2'), class = 'factor'), structure(c(1L, 1L, 2L, 2L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor'));`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators74_5b50a50a9885bf8dcc8824cfcc05e747() {
        assertEval("argv <- list(0.5, -0.5);`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators75_0ce7c915b675de1f6c7fea9721dffc1f() {
        assertEval("argv <- list(101L, 1L);`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators76_f10b2d4f6acf109ab618ca932a774116() {
        assertEval("argv <- list(FALSE, 1);`:`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators77_c86400159e14a11194cafaf0b160f4b6() {
        assertEval("argv <- list(structure(c(0, 4.44089209850063e-16, 8.88178419700125e-16, 1.66533453693773e-15, 2.22044604925031e-16, 3.33066907387547e-16, 2.77555756156289e-16, 5.55111512312578e-17, 8.32667268468867e-17, 1.66533453693773e-16, 8.88178419700125e-16, 1.11022302462516e-16, 2.44249065417534e-15, 2.22044604925031e-16, 1.11022302462516e-16, 1.88737914186277e-15, 1.11022302462516e-16, 2.22044604925031e-16, 1.4432899320127e-15, 8.88178419700125e-16, 3.33066907387547e-16, 1.66533453693773e-16, 1.11022302462516e-16, 7.7715611723761e-16, 1.11022302462516e-16), .Dim = c(5L, 5L)), 2.22044604925031e-13);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators78_0e5e5aa23d45a0eb760442d8c94b582c() {
        assertEval("argv <- list(1, 4);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators79_1b02b2bcc8a81eb4797dad388b4d8e89() {
        assertEval("argv <- list(NULL, NULL);`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators8_09b87f76dec8ce2f32b01d45f21f3a6d() {
        assertEval("argv <- list(0.5, c(0.0945457474962427, 0.369817831189094, 0.485958087431202, 0.498816870239398, 0.499902671395055));`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators80_3d8e7f6ddcdf80fa474104c35ac62cbe() {
        assertEval("argv <- list(structure(1L, .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')), structure(3L, .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')));`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators81_4880d489ca04b9f3aefe5ec1ec758796() {
        assertEval("argv <- list(structure(1386500270.17764, class = c('POSIXct', 'POSIXt')), structure(c(1383854025.35606, 1386388510.66806), class = c('POSIXct', 'POSIXt')));`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators82_52ef4b93cf91fcfbfce242f36ae87d19() {
        assertEval("argv <- list(c(0.999998001700552, -0.0013118835870674, -0.000526551904329415, 0.999999038344567, -0.000903475278483392, -0.000381296378838388, 0.999999057686544, -0.000896140095625969, -0.000373156128147092, 0.999998405868953, -0.00114777435393854, -0.000526063245555164, 0.99999814161282, -0.00120795166706622, -0.000631851641234638, 0.999997792453059, -0.00139185834612791, -0.000519877304541034, 0.999998020546725, -0.00127080900255349, -0.00060373324887666, 0.999998059330159, -0.00123814735894241, -0.000638480377887232, 0.999998337108097, -0.00115570987192407, -0.000572034814304861, 0.999998571810103, -0.00106400147389197, -0.00054414035107764, 0.999999136998844, -0.000829344110491764, -0.000418555560445895, 0.999999436800894, -0.000688792506748533, -0.00029793232712181, 0.999999182435777, -0.000786088000160243, -0.000446798847724984, 0.999998035855459, -0.00125214214514046, -0.000629508325517675, 0.999995461301925, -0.00191759993645823, -0.000928163756226527, 0.999990501294199, -0.00282586497589704, -0.00123008240127283, 0.99998523015117, -0.00349306924843624, -0.00160252859811979, 0.999980247693918, -0.00393070891026528, -0.00207399213858218, 0.999258133391236, -0.0212608113487506, 0.0170086490790013, 0.999752823870685, -0.0151150534926454, -0.00431858671218418, 0.998521231438773, -0.0331918414882689, 0.0193619075348229, 0.973987730061349, 0.0773006134969334, -0.139141104294479, 0.997923156801661, -0.0321910695742469, 0.0321910695742468, 0.999947758503179, -0.00259457124676546, -0.006745885241587, -0.0013118835870674, 0.138748425090248, -0.345681325192261, -0.000903475278483392, 0.151184975864853, -0.358227947918666, -0.000896140095625969, 0.147770769059702, -0.354871477867884, -0.00114777435393854, 0.173602465164251, -0.378765536799718, -0.00120795166706622, 0.214831416406957, -0.410703566802515, -0.00139185834612791, 0.122433312766354, -0.327782640513123, -0.00127080900255349, 0.184140620360657, -0.387596745778816, -0.00123814735894241, 0.21006198499474, -0.407350481092054, -0.00115570987192407, 0.196781639012774, -0.397564195941878, -0.00106400147389197, 0.207318901950479, -0.405384561552842, -0.000829344110491764, 0.203000309817415, -0.402231893588506, -0.000688792506748533, 0.157606764246543, -0.364371236069974, -0.000786088000160243, 0.244176387845927, -0.429597092087573, -0.00125214214514046, 0.201759382472957, -0.401311557517518, -0.00191759993645823, 0.189814026846399, -0.392149187005707, -0.00282586497589704, 0.159305169670633, -0.365949514378666, -0.00349306924843624, 0.173889122744829, -0.378998013455332, -0.00393070891026528, 0.217788926857211, -0.412724435577854, -0.0212608113487506, 0.000452357688250284, -0.00036188615058233, -0.0151150534926454, 0.000228521327097438, 6.52918077527545e-05, -0.0331918414882689, 0.00110332991097693, -0.000643609114746404, 0.0773006134969334, 0.00613496932514866, -0.0110429447852694, -0.0321910695742469, 0.0010384215991718, -0.00103842159917336, -0.00259457124676546, 6.73215168555691e-06, 1.75035942027152e-05, -0.000526551904329415, -0.345681325192261, 0.861253573209199, -0.000381296378838388, -0.358227947918666, 0.848815985790579, -0.000373156128147092, -0.354871477867884, 0.852230173253752, -0.000526063245555164, -0.378765536799718, 0.826399128966796, -0.000631851641234638, -0.410703566802515, 0.785170441980223, -0.000519877304541034, -0.327782640513123, 0.877568894780586, -0.00060373324887666, -0.387596745778816, 0.815861359092619, -0.000638480377887232, -0.407350481092054, 0.789939955675102, -0.000572034814304861, -0.397564195941878, 0.803220023879128, -0.00054414035107764, -0.405384561552842, 0.792682526239419, -0.000418555560445895, -0.402231893588506, 0.797000553183741, -0.00029793232712181, -0.364371236069974, 0.842393798952562, -0.000446798847724984, -0.429597092087573, 0.755824429718295, -0.000629508325517675, -0.401311557517518, 0.798242581671585, -0.000928163756226527, -0.392149187005707, 0.810190511851676, -0.00123008240127283, -0.365949514378666, 0.840704329035169, -0.00160252859811979, -0.378998013455332, 0.826125647104002, -0.00207399213858218, -0.412724435577854, 0.782230825448871, 0.0170086490790013, -0.00036188615058233, 0.00028950892043616, -0.00431858671218418, 6.52918077527545e-05, 1.86548021961656e-05, 0.0193619075348229, -0.000643609114746404, 0.000375438650284673, -0.139141104294479, -0.0110429447852694, 0.0198773006134874, 0.0321910695742468, -0.00103842159917336, 0.00103842159917592, -0.006745885241587, 1.75035942027152e-05, 4.55093454284494e-05), 0.692636183089874);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators83_adbe70163788812890663b6cfac81a3f() {
        assertEval("argv <- list(20, structure(c(-1, -1, -1, -1, -1, -1, -1, 8, 9, 10, 11, 12, 13, 14, 15, 100, 17, 18, 19, 20, 21, 200, 200, 24, 25, 26, 27, 28), .Dim = c(7L, 4L), .Dimnames = list(NULL, NULL)));`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators84_0b8c0a2654c4ce5e45e8671469b93766() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`<`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators85_2a425065f8fd161af4521727e182a635() {
        assertEval("argv <- list(c(2.00256647265648e-308, 2.22284878464869e-308, 2.22507363599982e-308, 2.2250738585072e-308, 2.22507408101459e-308, 2.22729893236571e-308, 2.44758124435792e-308, 1.61792382137608e+308, 1.79589544172745e+308, 1.797692955093e+308, 1.79769313486232e+308), 1);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators86_ee952f9a096e44a2b425997a9508cd7e() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 1L);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators87_541f65844067c8848bc2876cd063e9e5() {
        assertEval("argv <- list(structure(c(629, 1026, 1422, 1819, 2214, 2611), class = 'difftime', units = 'days', .Names = c('1', '2', '3', '4', '5', '6')), 0);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators88_4e9991c34147796ace6452f71e4e2999() {
        assertEval("argv <- list(c(1, 2, 3, 4, 5, 6, 7, NA, 9, 10, 11, 12), 2);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators89_605cdc2157455f7b9d86542420344cba() {
        assertEval("argv <- list(structure(3.0625, base = 4, lens = 3L, .classes = c('R_system_version', 'package_version', 'numeric_version')), structure(3.25, .Names = 'gridSVG2', base = 4, lens = structure(2L, .Names = 'gridSVG2'), .classes = 'numeric_version'));`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators9_a4164cd5db80ec4decee818ad0c32ff3() {
        assertEval("argv <- list(structure(1:10, class = structure('NumericNotStructure', package = '.GlobalEnv')), 1);`+`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators90_9482056ed84b5a4b5c28420ed970de9a() {
        assertEval("argv <- list(c(1, 0, 0, 1, 0, 1, 2, 2, 1, 2, 1, 2, 1, NA, 1, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 3, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 0, 2, 1, 2, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 0, 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 1, 1, 2, 0, 1, 1, 0, 1, 2, 2, 2, 2, 1, 0, 2, 1, 2, 0, 1, 1, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 2, 1, 0, 2, 1, 2, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 2, 2, 1, 2, 1, 1, 0, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 2, 0, 2, 1, 1, 0, 1, 1, 2, 1, 1, 1, 2, 2, 0, 1, 1, 1, 1, 0, 2, 1, 1), 1);`!=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators91_ea8f9fb6c82f6c1347f50271dd107aab() {
        assertEval("argv <- list(structure(list(c(3L, 0L, 1L)), class = c('R_system_version', 'package_version', 'numeric_version')), structure('3.1', .Names = 'gridSVG2'));`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators92_e568e9569d5263980cab39657cde38c4() {
        assertEval("argv <- list(structure(c(0, 0.414213562373095, 0.732050807568877, 0, 0.23606797749979, 0.449489742783178, 0.645751311064591, 0.82842712474619, 0, 0.16227766016838), id = 'test 1', class = structure('withId', package = '.GlobalEnv')), 0.01);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators93_eb22783200cb7cb4d8d95072e96431e2() {
        assertEval("argv <- list(NULL, NULL);`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators94_b4150048a0faa7e88777fd0c8da01bd3() {
        assertEval("argv <- list('a', 'b');`<`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators95_f9f046285f2753b8be9254faa61d2dda() {
        assertEval("argv <- list(structure(c(1386478800, 1386651600, 1386824400, 1386997200, 1387170000, 1387342800, 1387515600, 1387688400, 1387861200, 1388034000, 1388206800, 1388379600, 1388552400, 1388725200), class = c('POSIXct', 'POSIXt'), tzone = ''), structure(1387538790.57927, class = c('POSIXct', 'POSIXt')));`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators96_6de3a8b0fde8e62cb78c26ceae30d9fe() {
        assertEval("argv <- list(c(17, 45.1, 39.7, 36.5, 43.5), 6);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators97_492a99a4e43c2a0c330b804f6a117fa5() {
        assertEval("argv <- list(structure(c(69, 35, 26, 21, 18, 16, 13, 12, 12), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9')), 0);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators98_4946a5826fc211e1d4f0d5c023cbe92b() {
        assertEval("argv <- list(c(0L, 1L, 2L, 2L, 2L, 3L, 4L, 5L, 5L, 5L, 6L, 7L, 7L, 7L, 8L, 9L, 9L, 9L, 10L, 11L, 11L, 11L, 12L, 12L, 12L, 13L, 14L, 14L, 14L), 1L);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators99_df2c5ec19aa2ace37c8ee6ae0cdc3366() {
        assertEval("argv <- list(150000, 3e+09);`<=`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinoptions_testoptions1_586db7ee2d654fc308a8a8f7f814af60() {
        assertEval("argv <- list('survfit.print.n'); .Internal(options(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinoptions_testoptions2_3a14a4a4ae8bc90f17baefacbc0635ec() {
        assertEval("argv <- list('contrasts'); .Internal(options(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinoptions_testoptions3_1bff83820277ac04f2a918a2929f2990() {
        assertEval("argv <- list('str'); .Internal(options(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinoptions_testoptions4_e4b37bd554474a05d6e509754da1ca16() {
        assertEval("argv <- list('ts.eps'); .Internal(options(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinoptions_testoptions5_cea0be88dce9581c7f5cb930acc71943() {
        assertEval("argv <- list(NULL); .Internal(options(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder1_8208900ec849d6be472bc8d5a115cee7() {
        assertEval("argv <- list(TRUE, FALSE, structure(c(1, 1, 1, 2, 2, 2, 3, 4), .Names = c('CsparseMatrix', 'nsparseMatrix', 'generalMatrix', 'nMatrix', 'sparseMatrix', 'compMatrix', 'Matrix', 'mMatrix'))); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder10_2ad5d031690d4e42a91da016b012beff() {
        assertEval("argv <- list(TRUE, FALSE, c(1L, 1L), c(5L, 5L)); .Internal(order(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder11_acd78c183ca36d45c403db16d2149ea6() {
        assertEval("argv <- list(TRUE, FALSE, structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75')), structure(c(-0.57247143337844, -0.539950178656569, -0.58297623976228, -0.439751638938155, -0.617930515617237, -0.533331856784678, -0.289352731546361, -0.478093191632667, -0.602269400145547, -0.580175322433967, -0.49540432777895, -0.513696058484476, -0.458241390525053, -0.626325772726431, -0.638174891061199, -0.617196984678001, -0.64409821087924, -0.612729425695224, -0.60380450668859, -0.478765912376981, -0.577566470585813, -0.611603489866172, -0.630689749726753, -0.617142933166765, -0.649085924500709, -0.663752033681209, -0.644167702381979, -0.638179039688751, -0.597653338464853, -0.60376057262344, -0.663213279051883, -0.675292341303314, -0.666589501747572, -0.670209631751109, -0.683375351812861, -0.683923564367218, -0.679841016050066, -0.687830656102281, -0.686865903442208, -0.681095489258746, -0.579001929374462, -0.669393058957547, -0.678452540432172, -0.638743740817659, -0.558515347237012, -0.337270659711893, -0.279950203607686, -0.295246094585692, -0.592252570503069, -0.558321756708791, -0.597079745476187, -0.573971559450555, -0.603793132961681, -0.544974758961613, -0.495274888248239, -0.488092985753192, -0.528409363716152, -0.552865045250698, -0.502907194303865, -0.482819909399495, -0.590008262166764, -0.582409343486053, -0.548676506410172, -0.642096376280899, -0.622604552864479, -0.581608072840875, -0.637160558239849, -0.640205884259342, -0.643944208731097, -0.627870005742383, -0.638070667609366, -0.648245104552262, -0.582808968033345, -0.593416716949551, -0.631441868159251), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75'))); .Internal(order(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder12_c16da230db465313234909766e203678() {
        assertEval("argv <- list(TRUE, FALSE, c(FALSE, FALSE)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder13_f77f7f5459a22d13b45b25c6364371bd() {
        assertEval("argv <- list(TRUE, FALSE, structure(c(-0.00544194018731062, -0.00542949133552226, -1.20718999105839e-05, -0.00505497198006266, -0.827687885653788, -0.00315385274195005, -0.0023164952286401, -0.00117183915211372, -2.09167441982205, -0.00193959227691399, -0.00358084102808485, -3.39138861812986e-05, -0.00163051710052444, -0.00168735925488057, -0.0167253073891896, -0.237074502262169, -0.0118967636015583, -0.00307437031103621, -0.00114371252369823, -0.000860763872820255, -0.00028432076263802, -0.00329557354736053, -0.000123683950933913, -0.00026114238659798, -0.00471892942651347, -0.00317288091968884, -6.76955217513137e-05, -0.0119061189538054, -0.00233356124758579, -0.00672098496026968, -0.134965372025281, -0.00102115420103838, -0.00114816901125044), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase'))); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder14_38de0ee06cda03e9e31fc7a8ced3666a() {
        assertEval("argv <- list(TRUE, FALSE, c(2L, 1L, NA)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder15_dc039d1a1d15d15305f83479730a022b() {
        assertEval("argv <- list(TRUE, FALSE, structure(c(1, 2, 2, 2, 2), .Names = c('character', 'vector', 'data.frameRowLabels', 'SuperClassMethod', 'atomicVector'))); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder16_947d3b097e030544b9997563cc6b0b66() {
        assertEval("argv <- list(TRUE, FALSE, c(1, 2, NA)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder17_37812381788d588ad2c4dd70a7946164() {
        assertEval("argv <- list(TRUE, FALSE, c(39.39, NA, 60.99, 45.82, 55.4, 59.49, 63.73, 55.09, 57.2, 33.22, 61.18, 59.52, 59.9, 59.06, 65.44, 54.3, 53.28, 70.87, 60.04, 59.33, 55.63, 53.68, 24.46, 49.87, 57.13, 65.51, 57.97, 66.11, 64.68, 57.81, 61.2, 49.34, 61.72, 61.11, 55.13, 55.25, 56.49, 58.31, 25.18, 58.39, 49.21, 55.27, 64.56, 72.18, 55.37, 53.91, 54.08, 61.58)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder18_8f9fd8750b182eb6177a98ac180ea0c6() {
        assertEval("argv <- list(TRUE, FALSE, c(FALSE, TRUE)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder19_5f063f3d90c3d2aaca78211936083c01() {
        assertEval("argv <- list(TRUE, TRUE, c(2572.90550008339, 915.064609071159, 419.980933101553, 456.632018115023, 366.745362912885, 308.301779528581, 258.104614655539, 166.131403923756, 208.43876984087, 174.152165416129, 157.072337453686, 157.072337453686, 93.6287479850051, 145.261798316303, 140.969649074553, 80.9227484547009, 115.221543203043, 115.221543203043, 43.2054741656531, 92.6549620292801, 92.6549620292801, 90.9360919542674, 90.9360919542674, 95.4200045428049, 94.2845517186135, 90.4677652619726, 76.0356310934324, 76.0356310934324, 26.1565478253913, 79.2808369338756, 69.8160310537133, 69.8160310537133, 74.7131802385517, 72.7892236613541, 20.782836979896, 60.876337906218, 60.876337906218, 70.8748882290923, 66.7853490283529, 66.7853490283529, 16.5058357149619, 54.5274774202162, 54.5274774202162, 64.009437139127, 13.2377600042936, 49.2149340764437, 49.2149340764437, 60.372612826631, 55.4228623592615, 55.4228623592615, 55.598407412763, 8.99100195370794, 49.6125680940682, 49.6125680940682, 51.620171425175, 39.8798475138868, 39.8798475138868, 7.62805946796798, 35.458438379179, 35.458438379179, 38.2201699179466, 38.2201699179466, 29.6856293315566, 29.6856293315566, 34.3600931672689, 34.3600931672689, 47.6686025497685, 47.0350049752776, 5.57838460483725, 5.07382264677001, 15.9316203363047, 23.4957538578271, 23.4957538578271, 41.4311176038551, 11.9119569568831, 34.7321001383969, 4.21976444063592, 39.2901755793811, 29.1992830783774, 29.1992830783774, 11.1832867499603, 42.0546965543942, 27.0745572919711, 7.44159556589097, 28.1216021055426, 6.46699019595805, 2.05951624519943, 4.77172378340461, 38.0398197891428, 1.66021670517454, 1.03505989993491, 2.69814683135512, 1.8306332549612, 2.29820560404041, 3.42336057523814e-06, 3.42336062193255e-06, 2.86123099075901, 0.773887754953459, 0.213086170361661, 0.416100454072758)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder2_7fbc1066c2ff2775e853f5836b5030aa() {
        assertEval("argv <- list(TRUE, FALSE, structure(c(1, 2, 2.1, 2.3, 2.3, 3, 4, 5, 7, 8, 11, 13, 14, 15), .Names = c('\\\\title', '\\\\name', '\\\\alias', '\\\\keyword', '\\\\keyword', '\\\\description', '\\\\usage', '\\\\arguments', '\\\\details', '\\\\value', '\\\\author', '\\\\references', '\\\\seealso', '\\\\examples')), c('', '', 'LOGLIN', '', '', '', '', '', '', '', '', '', '', ''), c('', '', 'loglin', '', '', '', '', '', '', '', '', '', '', '')); .Internal(order(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder21_2f89526041e701e428be7fa62e0ee35a() {
        assertEval("argv <- structure(list(1, 1, 1, na.last = NA), .Names = c('',     '', '', 'na.last'));do.call('order', argv)");
    }

    @Test
    public void TestrGenBuiltinorder_testorder22_692be480654b5b1980fc63c725642cbb() {
        assertEval("argv <- structure(list(1, na.last = NA), .Names = c('', 'na.last'));do.call('order', argv)");
    }

    @Test
    public void TestrGenBuiltinorder_testorder3_5d33747ed78c617856053bf4acc5204d() {
        assertEval("argv <- list(TRUE, FALSE, c(NA, 'Ripley', 'Venables & Smith')); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder4_6bd340990ea137d1593afc77fda46aad() {
        assertEval("argv <- list(TRUE, TRUE, structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 4L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 3L, 4L, 2L, 5L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 3L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L), .Names = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'))); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder5_53923bee08e5df9d21fd981ab899c4ea() {
        assertEval("argv <- list(TRUE, FALSE); .Internal(order(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder6_0ea94d85e22b5ed044a53258ffb14224() {
        assertEval("argv <- list(TRUE, FALSE, c(25, 50, 100, 250, 500, 1e+05)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder7_13eaf18114ac611963e74022c6f2e6a8() {
        assertEval("argv <- list(TRUE, FALSE, c(1L, 2L, NA)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder8_c706cdc95e9d77ea9a179c023ab2b08e() {
        assertEval("argv <- list(TRUE, FALSE, c(-1.90479340955971, 0.152878714793717)); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinorder_testorder9_42d8ed7bb8eeb033e13cf656745cfdaa() {
        assertEval("argv <- list(TRUE, FALSE, structure(numeric(0), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL))); .Internal(order(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpackageEvent_testpackageEvent1_f1fb09f0fba27c1d3de531f961797add() {
        assertEval("argv <- structure(list(pkgname = 'stats4', event = 'onLoad'),     .Names = c('pkgname', 'event'));do.call('packageEvent', argv)");
    }

    @Test
    public void TestrGenBuiltinpairlist_testpairlist1_e734a70a820a0c77665b5e6f4e12a903() {
        assertEval("argv <- list();do.call('pairlist', argv)");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste1_2f14ba48a54847e70d98312ef3c6b446() {
        assertEval("argv <- list(list('%%  ~~objects to See Also as', '\\\\code{\\\\link{~~fun~~}}, ~~~'), ' ', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste10_e53217a5d27295c7a7162333a3eac050() {
        assertEval("argv <- list(list('(', structure(c(' 1.124', ' 1.056', ' 1.059', ' 0.932'), .Dim = c(2L, 2L)), ','), '', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste11_1f3538f5a3d358ca53afdff83bb0c3ad() {
        assertEval("argv <- list(list(character(0)), ' ', ''); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste2_6bee94b7e42df245ee0c1dbf2b8d68b7() {
        assertEval("argv <- list(list(c('[', 'cox.zph', NA)), ' ', '\\r'); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste3_f018ff0ed6764403217af266d102164a() {
        assertEval("argv <- list(list(), ' ', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste4_7e9209fb64750e82cccbfc41ecc5db26() {
        assertEval("argv <- list(list('package', structure('pkgA', .Names = 'name')), ':', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste5_d02f97a1a9cc3cac568f0e34c2e12a70() {
        assertEval("argv <- list(list(c('[', 'as.data.frame', 'plot', 'print', 'summary', 'as.character', 'print', 'print', 'plot', 'update', 'dim', 'dimnames', 'dimnames<-', '[', 't', 'summary', 'print', 'barchart', 'barchart', 'barchart', 'barchart', 'barchart', 'barchart', 'bwplot', 'bwplot', 'densityplot', 'densityplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'dotplot', 'histogram', 'histogram', 'histogram', 'qqmath', 'qqmath', 'stripplot', 'stripplot', 'qq', 'xyplot', 'xyplot', 'levelplot', 'levelplot', 'levelplot', 'levelplot', 'contourplot', 'contourplot', 'contourplot', 'contourplot', 'cloud', 'cloud', 'cloud', 'wireframe', 'wireframe', 'splom', 'splom', 'splom', 'parallelplot', 'parallelplot', 'parallelplot', 'parallel', 'parallel', 'parallel', 'tmd', 'tmd', 'llines', 'ltext', 'lpoints'), c('shingle', 'shingle', 'shingle', 'shingle', 'shingle', 'shingleLevel', 'shingleLevel', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'trellis', 'summary.trellis', 'formula', 'array', 'default', 'matrix', 'numeric', 'table', 'formula', 'numeric', 'formula', 'numeric', 'formula', 'array', 'default', 'matrix', 'numeric', 'table', 'formula', 'factor', 'numeric', 'formula', 'numeric', 'formula', 'numeric', 'formula', 'formula', 'ts', 'formula', 'table', 'array', 'matrix', 'formula', 'table', 'array', 'matrix', 'formula', 'matrix', 'table', 'formula', 'matrix', 'formula', 'matrix', 'data.frame', 'formula', 'matrix', 'data.frame', 'formula', 'matrix', 'data.frame', 'formula', 'trellis', 'default', 'default', 'default')), '.', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste6_b7cad175a29bf140378fe64d7d07837e() {
        assertEval("argv <- list(list(c('dotplot', 'table', NA)), ' ', '\\r'); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste7_7c9133081de4bb7c0552e5efe82eac57() {
        assertEval("argv <- list(list(character(0)), ' ', ' '); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste8_0012f49a694cd90311369d96ca41099a() {
        assertEval("argv <- list(list('detaching', '‘package:splines’'), ' ', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste9_c5bd8c8828c51d091313173124559d7d() {
        assertEval("argv <- list(list('GRID', 'text', '6'), '.', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste01_41fd17e7a064a5dce1a0473504e6648a() {
        assertEval("argv <- list(list('2', ': '), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste010_216367c2f846e81bf0b134ecbbf9bb8f() {
        assertEval("argv <- list(list(structure(c('-0.16', '-0.03', ' 0.11', '-0.19', ' 0.12', ' 0.00', '-0.03', ' 0.18', ' 0.01', '-0.03', '-0.11', '-0.11', ' 0.00', ' 0.09', '-0.15', ' 0.05', '-0.04', ' 0.00', ' 0.04', ' 0.00', ' 0.01', ' 0.04', ' 0.11', ' 0.11', '-0.10', '-0.01', ' 0.04', ' 0.34', '-0.30', ' 0.00', '-0.02', '-0.31', '-0.04', '-0.01', '-0.05', '-0.05', '-0.07', '-0.03', ' 0.02', ' 0.21', '-0.17', ' 0.00', '-0.03', '-0.17', '-0.03', '-0.04', ' 0.28', '-0.45', '-0.24', ' 0.00', ' 0.02', ' 0.25', '-0.28', ' 0.00', '-0.01', '-0.24', '-0.04', '-0.04', '-0.06', '-0.06', '-0.44', '-0.01', ' 0.02', ' 0.18', '-0.26', ' 0.00', ' 0.00', '-0.19', '-0.03', '-0.03', '-0.04', '-0.04', ' 0.01', '-0.03', ' 0.04', ' 0.18', '-0.11', ' 0.00', '-0.02', '-0.15', '-0.02', '-0.02', '-0.06', '-0.06', ' 0.12', ' 0.08', ' 0.07', '-0.01', '-0.03', ' 0.00', '-0.01', ' 0.00', ' 0.00', ' 0.04', '-0.01', '-0.01', ' 0.00', ' 0.01', ' 0.08', '-0.01', ' 0.01', ' 0.00', '-0.02', ' 0.01', ' 0.00', ' 0.03', '-0.07', '-0.07', ' 0.21', ' 0.00', '-0.08', ' 0.04', '-0.42', ' 0.00', ' 0.01', ' 0.01', ' 0.00', ' 0.02', ' 0.05', ' 0.05', ' 0.06', '-0.04', '-0.09', ' 0.01', ' 0.01', ' 0.00', ' 0.01', '-0.02', ' 0.00', ' 0.03', ' 0.04', ' 0.04', '-0.04', '-0.01', ' 0.16', '-0.06', '-0.03', ' 0.00', ' 0.02', '-0.07', ' 0.00', ' 0.06', ' 0.08', ' 0.08', ' 0.47', '-0.15', ' 0.06', ' 0.01', ' 0.18', ' 0.00', '-0.03', ' 0.01', ' 0.00', '-0.02', '-0.06', '-0.06', '-0.04', ' 0.01', ' 0.09', '-0.08', '-0.10', ' 0.00', ' 0.05', '-0.18', ' 0.01', '-0.03', ' 0.12', ' 0.12', ' 0.03', ' 0.02', ' 0.12', '-0.08', '-0.11', ' 0.00', ' 0.03', '-0.14', ' 0.01', '-0.02', ' 0.10', ' 0.10', ' 0.73', '-0.24', '-0.26', '-0.44', '-0.89', '  NaN', ' 0.08', ' 0.45', ' 0.05', ' 0.14', ' 0.64', '-0.64', ' 1.71', ' 2.09', ' 1.86', ' 1.76', ' 0.13', '  NaN', ' 1.63', ' 1.92', ' 1.88', ' 1.60', ' 2.68', ' 2.68', ' 0.04', ' 0.00', ' 0.00', ' 0.01', ' 0.05', '  NaN', ' 0.00', ' 0.01', ' 0.00', ' 0.00', ' 0.03', ' 0.03', ' 0.39', ' 0.43', ' 0.36', ' 0.36', ' 0.06', ' 1.00', ' 0.26', ' 0.40', ' 0.36', ' 0.25', ' 0.57', ' 0.57'), .Dim = c(12L, 19L), .Dimnames = list(c('8', '19', '28', '39', '42', '57', '66', '80', '83', '87', '89', '93'), c('dfb.1_', 'dfb.Wght', 'dfb.Cyl4', 'dfb.Cyl5', 'dfb.Cyl6', 'dfb.Cyl8', 'dfb.Cyln', 'dfb.TypL', 'dfb.TypM', 'dfb.TypSm', 'dfb.TypSp', 'dfb.TypV', 'dfb.EngS', 'dfb.DrTF', 'dfb.DrTR', 'dffit', 'cov.r', 'cook.d', 'hat'))), cnternal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste011_34534ace7b59ff6e0e685b184f7584f2() {
        assertEval("argv <- list(list(character(0), character(0), character(0)), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste012_da7ae95b81738a4f4b05dd30963aefe5() {
        assertEval("argv <- list(list(c('Package:', 'Type:', 'Version:', 'Date:', 'License:', 'Depends:'), ' \\\\tab ', structure(c('myTst2', 'Package', '1.0', '2014-03-17', 'What license is it under?', 'methods'), .Names = c('Package', 'Type', 'Version', 'Date', 'License', 'Depends')), '\\\\cr'), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste013_d2a50585629d8f1ef1f27849a74b81d7() {
        assertEval("argv <- list(list(character(0), '$y'), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste014_2763f64f89765584d87fafc03ece4085() {
        assertEval("argv <- list(list(c('text> ', 'text> ', 'text> ', 'text+ '), c('## The following two examples use latin1 characters: these may not', '## appear correctly (or be omitted entirely).', 'plot(1:10, 1:10, main = \\'text(...) examples\\\\n~~~~~~~~~~~~~~\\',', '     sub = \\'R is GNU ©, but not ® ...\\')')), '\\n'); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste015_7352ddb2b0f401ecb5853b5d8d4a9eb9() {
        assertEval("argv <- list(list('cnstrO> ', 'constrOptim(c(2,-1,-1), fQP, gQP, ui = t(Amat), ci = bvec)'), '\\n'); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste02_b92e9ed16f3795f830c0bd6c1be89b3a() {
        assertEval("argv <- list(list(structure(c('-0.20', ' 0.07', ' 0.16', ' 0.55', ' 0.13', '-0.07', '-0.08', '-0.48', ' 0.22', ' 0.04', '-0.34', '-0.38', '-0.02', '-0.23', ' 0.09', '-0.02', ' 0.12', '-0.03', ' 0.23', '-1.02', '-0.46', '-0.25', ' 0.75', '-1.16', ' 0.65', ' 1.66', ' 0.51', ' 2.09', ' 0.04', ' 0.01', ' 0.10', ' 0.27', ' 0.04', ' 0.33', ' 0.06', ' 0.53'), .Dim = c(4L, 9L), .Dimnames = list(c('Chile', 'United States', 'Zambia', 'Libya'), c('dfb.1_', 'dfb.pp15', 'dfb.pp75', 'dfb.dpi', 'dfb.ddpi', 'dffit', 'cov.r', 'cook.d', 'hat'))), c('', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '_*', '', '', '', '_*', '_*', '_*', '_*', '_*', '', '', '', '', '', '_*', '', '_*')), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste03_bbfa316b88dc7ca9ae399ad493d89a28() {
        assertEval("argv <- list(list(c('\\'1\\'', '\\'2\\'', NA)), ','); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste04_e19fbe568bc46124144590de6db0559b() {
        assertEval("argv <- list(list('  ‘help.search()’ or ‘', '??'), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste05_82aa5d3a2f29add0579e525a6b8dc765() {
        assertEval("argv <- list(list(structure(c('coef.aov', 'extractAIC.aov', 'model.tables.aov', 'print.aov', 'proj.aov', 'se.contrast.aov', 'summary.aov', 'TukeyHSD.aov'), class = 'MethodsFunction', info = structure(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE), from = structure(c(9L, 9L, 9L, 9L, 9L, 9L, 7L, 7L), .Label = c('CheckExEnv', 'package:base', 'package:datasets', 'package:graphics', 'package:grDevices', 'package:methods', 'package:stats', 'package:utils', 'registered S3method'), class = 'factor')), .Names = c('visible', 'from'), row.names = c('coef.aov', 'extractAIC.aov', 'model.tables.aov', 'print.aov', 'proj.aov', 'se.contrast.aov', 'summary.aov', 'TukeyHSD.aov'), class = 'data.frame')), c('*', '*', '*', '*', '*', '*', '', '')), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste06_780513435573904f3d189e91f4da0262() {
        assertEval("argv <- list(list(character(0), character(0)), '\\n'); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste07_eef9cdf37b4bc261aa466e661fedcea7() {
        assertEval("argv <- list(list(), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpathexpand_testpathexpand1_1a68995a5581546a3639af338c7a6d87() {
        assertEval("argv <- list('/tmp/RtmptPgrXI/Pkgs/pkgA'); .Internal(path.expand(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpathexpand_testpathexpand2_d83c2f739e4661f9fb81bacc702e7257() {
        assertEval("argv <- list(c('/home/lzhao/hg/r-instrumented/tests/compiler.Rcheck', '/home/lzhao/R/x86_64-unknown-linux-gnu-library/3.0')); .Internal(path.expand(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpathexpand_testpathexpand3_ff7b424e39d830e16bdcda9e3ec5ba62() {
        assertEval("argv <- list(character(0)); .Internal(path.expand(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpathexpand_testpathexpand5_3332deacbe9136496cc93f45c0554c42() {
        assertEval("argv <- structure(list(path = '/tmp/RtmpagC9oa/Pkgs/exNSS4'),     .Names = 'path');do.call('path.expand', argv)");
    }

    @Test
    public void TestrGenBuiltinplus_Date_testplus_Date1_951c77dec6bb34ba9e3cda442fb59ad9() {
        assertEval("argv <- structure(list(e1 = structure(1, units = 'days', class = 'difftime'),     e2 = structure(14579, class = 'Date')), .Names = c('e1',     'e2'));do.call('+.Date', argv)");
    }

    @Test
    public void TestrGenBuiltinpmatch_testpmatch1_4fa2310cd81e29b80f38f8e4507dd9f2() {
        assertEval("argv <- list('kendall', c('pearson', 'kendall', 'spearman'), 0L, TRUE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmatch_testpmatch2_7eef0f043e23b1b8329986d35526b4e2() {
        assertEval("argv <- list('month', c('secs', 'mins', 'hours', 'days', 'weeks', 'months', 'years', 'DSTdays'), NA_integer_, FALSE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmatch_testpmatch3_0749573973ff3c02405efd8fb006ce16() {
        assertEval("argv <- list(c(NA_character_, NA_character_, NA_character_, NA_character_), 'NA', NA_integer_, TRUE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmatch_testpmatch4_6b8ff817b0f7f3efdf80533d50c1e210() {
        assertEval("argv <- list('maximum', 'euclidian', NA_integer_, FALSE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmatch_testpmatch5_e2740d93e8aac67c0f6a2ff2b49ed71e() {
        assertEval("argv <- list('fanny.object.', 'fanny.object', 0L, FALSE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmatch_testpmatch6_e7bd047e5190e0bce3596cf408f19cc6() {
        assertEval("argv <- list(c('alpha', 'col', 'border', 'lty', 'lwd'), c('col', 'border', 'alpha', 'size', 'height', 'angle', 'density'), NA_integer_, TRUE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmatch_testpmatch7_3e0ba970b44a4b95df9f2f19e0a1a560() {
        assertEval("argv <- list('unique.', 'unique.array', 0L, FALSE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmatch_testpmatch8_05d87f8539db78d8be2bc87e75cd0aaa() {
        assertEval("argv <- list(character(0), c('labels', 'col', 'alpha', 'adj', 'cex', 'lineheight', 'font'), NA_integer_, TRUE); .Internal(pmatch(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax1_577dbb437ac154628f077467816101fe() {
        assertEval("argv <- list(FALSE, 5L, 12); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax10_e76c5f2bff2d1ed705c10245445ec187() {
        assertEval("argv <- list(FALSE, c(1.05, 1.92, 0.36, 4.98, 4.56, 0.69, -5.97, 1.26, 5.58, -0.06, -4.92, -1.38, -0.3, 3.75, 1.11, 0.93, 3.33, 4.95, 0.99, 2.67, -0.75, -2.61, -0.66, 2.13, -6.78, 2.31, -0.15, 0.96, -1.92, 1.17, 0.57, -4.86, 1.11, 0.06, 2.91, -7.86, 0.45, 4.65, -4.23, -7.05, -1.29, 1.71, -1.98, -0.24, 0.06, 0.72, -0.99, -0.09, -3.39, 0.96, 4.65, 6.39, -0.3, -0.96, -2.01, 4.32, 0.12, -3.3, -2.85, -0.57, -2.04, -1.29, -2.52, 2.07, -1.95, 2.13, 0.57, 1.35, 1.35, -3.57, 3.9, 0.42, -1.08, -1.5, -1.41, -3.93, -3.06, 3.51, 4.53, -0.99, -0.03, -1.77, -0.84, -0.54, -3.21, 1.98, -2.13, 5.64, -0.42, -0.57, 2.52, 1.32, 3.99, -0.6, -1.35, 4.38, 3, -3.06, 2.04, 2.52), 0); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax11_4028665897dd35dd481469eba539d54c() {
        assertEval("argv <- list(FALSE, c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L), 7L, c(7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 6L)); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax12_e6edb5d0881bbda799bf365556658391() {
        assertEval("argv <- list(FALSE, 1:7, structure(c(2, 3, 4, 2, 2, 2), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('a', '')))); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax13_1600b3cabda6c0beb7c32b97933824dd() {
        assertEval("argv <- list(FALSE, cnternal(pmax(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax14_80e524df95a2776589a3d3ad4eea1117() {
        assertEval("argv <- list(FALSE, structure(c(0, 0, -0.0906283137921162, -0.0801994352402973, -0.0235093686536505, -0.131187875867331, -0.131187875867331, -0.131187875867331, -0.131187875867331, 0, 0, 0, -0.106539777104723, -0.106539777104723, -0.106539777104723, 0, 0, 0.126786975893341, 0.126786975893341, 0.126786975893341, 0, -0.131187875867331, -0.131187875867331, -0.131187875867331, 0, -0.106539777104723, -0.106539777104723, -0.106539777104723, 0, 0, 0, -0.106539777104723, 0.172297822926899, 0.172297822926899, 0, 0, 0, 0, 0, -0.106539777104723, -0.106539777104723, -0.106539777104723, -0.106539777104723, 0, 0, 0, 0.172297822926899, 0.172297822926899), .Dim = c(12L, 4L)), 0); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax2_17ea7566c426093659e50e7e5f08d0aa() {
        assertEval("argv <- list(FALSE, -100, structure(c(-Inf, 82.9775012103133, 8.55983483385341e+101, -Inf, 79.3831968838961, 8.55983483385341e+101), .Names = c('', '', '', '', '', ''))); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax3_e2111b6921e28636ab438e66f1b7aceb() {
        assertEval("argv <- list(FALSE, c(0L, 1L, 1L, 1L, 2L), 5L, c(6L, 5L, 5L, 5L, 4L)); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax4_c2a123a6b1fc765eba27203547ed16a4() {
        assertEval("argv <- list(FALSE, 0, numeric(0)); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax5_53770b6669953d0dc54a256d5f75a6d1() {
        assertEval("argv <- list(FALSE, structure(c(63.5607991023966, 46.8465846258113, 40.7088275958184, 31.3395189414991, 42.5666751143734, 47.0610532806931, 23.9315410227325, 43.0690616089581, 66.7869292908986, 49.2243580808943, 31.6784834018036, 24.3875466143556, 48.4619434336134, 53.5787701502931, 25.0466211495357, 45.0758464889871, 66.9256619232735, 49.3266089980428, 31.7843035976521, 24.4690118450696, 50.7406402769298, 56.0980619029545, 17.201254072711, 30.956714016252), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24')), 2.22044604925031e-16); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax6_463977440101226b958d5647d70733a7() {
        assertEval("argv <- list(FALSE, FALSE, FALSE); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax7_12e4d25d490485d4ce70627b29b17cf2() {
        assertEval("argv <- list(FALSE, 1L, c(15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L)); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax8_e23c4e0c8028a272a8a0fabc6dfc87cd() {
        assertEval("argv <- list(FALSE, structure(c(0.0193057433072215, 0.00434780301273374, 0.0549750394687487, 0.510714717273168, 0.0482077179041234, 0.349752997299534, 0.15114556457294, 0.614610341225044, 0.270367074042314, 0.376738504472563, 0.00100006670765362, 0.616978737736246, 0.000115089535300671, 0.114479803728228, 0.0345012755277619, 0.520238904129887, 0.0177036726480846, 0.00345369763623826, 0.0372744005491215, 0.245210198359521, 0.0651842100459408, 0.4506670448926, 0.178923774229777, 0.332256206500317, 0.402299202627705, 0.380395198873703, 0.000984316947253816, 0.403063829062269, 0.000174431720286923, 0.138958543973059, 0.0379750520636422, 0.379247258699123), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')), 0); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax9_c038e74f3e217137c0de9c9808766677() {
        assertEval("argv <- list(FALSE, structure(c(35.2592591597479, 59.4999999843455, 12.4507044164935, 2.53543312099158, 10.3703703404756, 42.0000005728299, 8.14084538858294, 34.04724471918, 7.77778142338517, 26.9999999889474, 6.70422536805755, 3.62204828940961, 2.59259259558406, 14.4999999939529, 6.70422536805755, 5.79527724426002, 32.7407408614199, 59.5000000376209, 13.54929592464, 4.46456690511876, 9.62962966454155, 42.0000006104361, 8.85915523787816, 59.9527554977598, 7.22222565443263, 27.0000000131229, 7.29577463400041, 6.37795443616981, 2.40740742585304, 14.500000006936, 7.29577463400041, 10.2047270647755), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')), 2.22044604925031e-16); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin1_72e68bfc3fae179c2ac94236955f06ae() {
        assertEval("argv <- list(FALSE, c(0, 0.25, 0.5, 0.75, 1), 1); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin10_04ee451767a8d8cae02fb34ae2a41eae() {
        assertEval("argv <- list(FALSE, 1, 0.341867139159); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin11_96e9aae810452d3c92e783cf262716d8() {
        assertEval("argv <- list(FALSE, c(2.35405350797934e-06, 0.000210159024072429, 0.000257684187404011, 0.000981478332360736, 0.00105260958830543, 0.00124148072892802, 0.00132598801923585, 0.00156850331255678, 0.00225455732762676, 0.003795380309271, 0.00611494315340942, 0.0161395372907077, 0.0330242962313738, 0.0353834177611007, 0.0523699658057458, 0.068319089314331, 0.0705922565893261, 0.0880512860101142, 0.0940103983967277, 0.112979808322889, 0.211501681388388, 0.492273640304204, 0.605329775053071, 0.626223946736039, 0.739515289321684, 0.828110328240387, 0.86333312789587, 1.19065433061771, 1.89079625396729, 2.05849377808347, 2.20921371984431, 2.85600042559897, 3.04889487308354, 4.66068200259841, 4.83080935233713, 4.92175460488491, 5.31945286062773, 5.75155046407955, 5.78319462345744), 0.943789021783783); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin2_e54be3c218a34fb4c1b808215121e317() {
        assertEval("argv <- list(FALSE, c(1.01547865839261, 1.01252937204691, 1.00644625408792, 0.998699246049516, 0.989861830865133, 0.980229984263028, 0.969980509594864, 0.959229159804225, 0.948056660278026, 0.948056660278026, 0.936413637553504, 0.924430242566905, 0.924430242566905, 0.912012661079992, 0.912012661079992, 0.912012661079992, 0.912012661079992, 0.912012661079992, 0.912012661079992, 0.89856564301575, 0.89856564301575, 0.89856564301575, 0.89856564301575, 0.884221004526004, 0.884221004526004, 0.884221004526004, 0.884221004526004, 0.868846889674391, 0.852918138766346, 0.852918138766346, 0.852918138766346, 0.836013989965276, 0.836013989965276, 0.818281118997659, 0.818281118997659, 0.799674858806929, 0.78048190648179, 0.760752205123712, 0.740524405390135, 0.698688252548957, 0.677121358432204, 0.677121358432204, 0.677121358432204, 0.653968759838845, 0.630226345284056, 0.60591293760604, 0.5810405538867, 0.5810405538867, 0.554772713636871, 0.554772713636871, 0.526885054753327, 0.526885054753327, 0.497124929362659, 0.497124929362659, 0.465290373327728, 0.431410832191818, 0.395597572090297, 0.358012869967492, 0.358012869967492, 0.358012869967492, 0.390645999939295, 0.390645999939295, 1.00856963764107, 1.00691545377429, 1.00354783420184, 0.994430782349702, 0.989161076962549, 0.983568844113983, 0.971651869906627, 0.965403818059832, 0.958998025317496, 0.952453588123512, 0.945785731840592, 0.939006829762577, 0.932127100227826, 0.925155098145928, 0.918098070593368, 0.910962219832367, 0.903752901643838, 0.896474777439562, 0.889131932689408, 0.874266085562073, 0.866749125736792, 0.85917963981466, 0.85917963981466, 0.85917963981466, 0.851432533571458, 0.851432533571458, 0.835646571743332, 0.819657377450186, 0.811591248493136, 0.811591248493136, 0.803403072648503, 0.803403072648503, 0.803403072648503, 0.79500789222886, 0.79500789222886, 0.78647848620035, 0.777810139927498, 0.777810139927498, 0.768997769554365, 0.760132009504045, 0.751214427604144, 0.751214427604144, 0.751214427604144, 0.742042333451995, 0.742042333451995, 0.732706928458195, 0.723314130803801, 0.713865427684027, 0.713865427684027, 0.704242881823747, 0.704242881823747, 0.694438026993695, 0.684573363315093, 0.674650164742493, 0.664669564073024, 0.664669564073024, 0.664669564073024, 0.654342845821626, 0.643951412016272, 0.633496370097346, 0.633496370097346, 0.622814395282618, 0.622814395282618, 0.611712238653597, 0.600530813249145, 0.589271296091113, 0.577934661160654, 0.577934661160654, 0.554603983179207, 0.542813560886543, 0.530698712197854, 0.530698712197854, 0.518231810914377, 0.518231810914377, 0.518231810914377, 0.505091485230836, 0.491816896403255, 0.478408881208852, 0.464867758182769, 0.464867758182769, 0.450831087639633, 0.43663736059032, 0.422285766886131, 0.422285766886131, 0.407334269006221, 0.392187384239101, 0.376842383287708, 0.376842383287708, 0.36074886771613, 0.344393472477708, 0.327769800745284, 0.310869313273075, 0.293681131444043, 0.27619182464681, 0.258385252532011, 0.240242648154923, 0.221743435532848, 0.202868148187672, 0.183607543425597, 0.183607543425597, 0.16434288099768, 0.16434288099768, 0.16434288099768, 0.16434288099768, 1.01958384078021, 1.0158820929578, 1.00818641731953, 0.998355892450852, 0.98711678103063, 0.974844224342501, 0.961762390694789, 0.94801800556359, 0.933713296997721, 0.918922795982771, 0.918922795982771, 0.903505632185222, 0.887664218536847, 0.8714385967694, 0.854601072478364, 0.837400228461143, 0.81986117753083, 0.80200434269104, 0.783846415628184, 0.765401054645917, 0.746679400612251, 0.727690462294359, 0.70844140545579, 0.688937769124757, 0.669183625153216, 0.649181692191925, 0.628933411668998, 0.608438990755048, 0.608438990755048, 0.587078835123946, 0.565417411428399, 0.543452081149807, 0.521178337588507, 0.498589701519445, 0.475677565090786, 0.475677565090786, 0.451501204504207, 0.426861888982249, 0.401742325799741, 0.376120821121693, 0.349971441565183, 0.323265236972233, 0.323265236972233, 0.294966951140867, 0.265661696527275, 0.265661696527275, 0.24198035833067, 0.229359831745471, NA, NA), 1); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin3_897bd631d9a55fa318b4b3de23375478() {
        assertEval("argv <- list(FALSE, c(19.7787405591752, 12504507.4953993, 12504507.4953993, 5.96190157728191e+41), 1); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin4_47bf1e411d8a55724829d60837438c00() {
        assertEval("argv <- list(FALSE, structure(c(2, 3, 4, 2, 2, 2), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('a', ''))), 1:7); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin5_2406b271107468c875aa9afae3f93b53() {
        assertEval("argv <- list(FALSE, structure(c(-2.30560410637911, -1.56788329848973, -0.885216282233891, -0.246592299284877, 0.350190802022645, 0.913941628350052, 1.44466017969734, 1.94895291106052), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')), 700); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin6_b00af5eb9844ca72a2a0c5e51c4b6be1() {
        assertEval("argv <- list(FALSE, 1, structure(numeric(0), .Dim = c(4L, 0L))); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin7_12e21777f7ad77dd64c735ce36ccc26c() {
        assertEval("argv <- list(FALSE, FALSE, FALSE); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin8_636bcd8067c2ba4023c0db564bad03dc() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(pmin(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin9_4ec25d509351b9f32214421601e1a414() {
        assertEval("argv <- list(FALSE, 48L, 19L); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot1_a4e8741b0d2003d978ab0e51bbe41355() {
        assertEval("argv <- list(1:2); .Internal(polyroot(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot2_d20692084f8b005f6ccd4c11912ac209() {
        assertEval("argv <- list(FALSE); .Internal(polyroot(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot3_b1546bf612d8703e9484476c76b78305() {
        assertEval("argv <- list(structure(c(1, 0.035205614861993, 0.237828814667385), .Names = c('', '', ''))); .Internal(polyroot(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot4_fdfc6ad09a4ee5deaf5df7ba216824e9() {
        assertEval("argv <- list(c(1, -1.16348488318732, 0.667550726251972, -0.342308178637008)); .Internal(polyroot(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot5_ff2fc3d87ee4382c27712c5bc1df637d() {
        assertEval("argv <- list(c(1, 0.0853462951557329, -0.433003162033324, 0.141816558560935, -0.268523717394886, -0.0970671649038473)); .Internal(polyroot(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot6_50b8cdf9a18ab7584669e0d574175105() {
        assertEval("argv <- list(c(1, 8, 28, 56, 70, 56, 28, 8, 1)); .Internal(polyroot(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinpretty_testpretty1_c23f2c6b50cc60e61b467e4afc8f808e() {
        assertEval("argv <- list(0L, 3L, 5, 1, 0.75, c(1.5, 2.75), 0); .Internal(pretty(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinpretty_testpretty2_c739b1c7e19b698c84aa9eff7e8703dd() {
        assertEval("argv <- list(-0.03, 1.11, 5, 1, 0.75, c(1.5, 2.75), 0); .Internal(pretty(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinpretty_testpretty3_f41f610e453ef5de72a0ad299177795a() {
        assertEval("argv <- list(-6.64448090063514e-06, 6.64454021993011e-06, 1, 0, 0.75, c(1.5, 2.75), 0); .Internal(pretty(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinpretty_testpretty4_f1466620b57e5d6dcf45b3ca7d1bed44() {
        assertEval("argv <- list(1.234e+100, 1.234e+100, 5, 1, 0.75, c(1.5, 2.75), 0); .Internal(pretty(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinprimUntrace_testprimUntrace1_ac44135078d6ab04298e590c5b38ccad() {
        assertEval("argv <- list(.Primitive('sum'));.primUntrace(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprint_testprint1_36087f21052e809a676b2e6a73dfe710() {
        assertEval("argv <- structure(list(x = 'The leverage of the points is'),     .Names = 'x');do.call('print', argv)");
    }

    @Test
    public void TestrGenBuiltinprint_testprint2_21b928ed59ed0a818fdfc695ec55aeee() {
        assertEval("argv <- structure(list(x = structure(list(modelID = 0L, terms = Species ~     Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,     class.lev = c('setosa', 'versicolor', 'virginica'), model = 'rf',     formula = Species ~ Sepal.Length + Sepal.Width + Petal.Length +         Petal.Width, noClasses = 3L, priorClassProb = c(0.333333333333333,         0.333333333333333, 0.333333333333333), avgTrainPrediction = 0,     noNumeric = 4L, noDiscrete = 1L, discAttrNames = 'Species',     discValNames = list(c('setosa', 'versicolor', 'virginica')),     numAttrNames = c('Sepal.Length', 'Sepal.Width', 'Petal.Length',         'Petal.Width'), discmap = 1L, nummap = 2:5, skipmap = integer(0)),     .Names = c('modelID', 'terms', 'class.lev', 'model', 'formula',         'noClasses', 'priorClassProb', 'avgTrainPrediction',         'noNumeric', 'noDiscrete', 'discAttrNames', 'discValNames',         'numAttrNames', 'discmap', 'nummap', 'skipmap'), class = 'CoreModel')),     .Names = 'x');do.call('print', argv)");
    }

    @Test
    public void TestrGenBuiltinprint_testprint3_415f3efb63323b27110a8621a1a67e68() {
        assertEval("argv <- structure(list(x = structure(list(CV = c(4.44258707232128,     1.3448257559694, 0.885694975057761, 0.838088461472644), mit = structure(list(p = structure(c(0.452549279246557,     0.13386271764225, 0.267245510599797, 0.146342492511396),     .Names = c('cmp1', 'cmp2', 'cmp3', 'cmp4')), mu = structure(c(0.381966097098555,     3.82765024730876, 1.80304880351015, 2.5878804906034, 2.61803339869107,     0.203368399460934, 1.05601823938856, 0.0596409214659023),     .Dim = c(4L, 2L), .Dimnames = list(c('cmp1', 'cmp2', 'cmp3',         'cmp4'), c('k1', 'k2'))), Sigma = structure(c(0.22917975838358,     0.847714717429939, 0.288537968483766, 0.738832302812549,     -0.400000241640847, -0.0861897092187198, -0.100073467783835,     -0.170562219060232, -0.400000241640847, -0.0861897092187198,     -0.100073467783835, -0.170562219060232, 1.57082072508295,     0.0727738502834565, 0.219785702621389, 0.217416957416503),     .Dim = c(4L, 4L), .Dimnames = list(c('cmp1', 'cmp2', 'cmp3',         'cmp4'), c('k1k1', 'k1k2', 'k2k1', 'k2k2'))), df = 1),     .Names = c('p', 'mu', 'Sigma', 'df')), summary = structure(list(H = c(1,     2, 3, 4), METHOD.mu = structure(c(1L, 1L, 1L, 1L), .Label = 'BFGS',     class = 'factor'), TIME.mu = c(1.301, 0.634, 1.148, 0.716000000000001),     METHOD.p = structure(c(1L, 2L, 2L, 2L), .Label = c('NONE',         'NLMINB'), class = 'factor'), TIME.p = c(0, 0.00600000000000023,         0.0129999999999981, 0.0309999999999988), CV = c(4.44258707232128,         1.3448257559694, 0.885694975057761, 0.838088461472644)),     .Names = c('H', 'METHOD.mu', 'TIME.mu', 'METHOD.p', 'TIME.p',         'CV'), row.names = c(NA, 4L), class = 'data.frame')),     .Names = c('CV', 'mit', 'summary'))), .Names = 'x');do.call('print', argv)");
    }

    @Test
    public void TestrGenBuiltinprint_testprint4_ff8b4551e6194de49140e5a45fdc35e6() {
        assertEval("argv <- structure(list(x = c(1.12029789965078, -0.718988837588323,     -0.799820795962862, 1.36325504609423, -0.877647212109208,     -1.46608694151033, -0.277315770575131, 0.49759016736751,     -1.49309981133256, 0.147586557048694, 1.32490895489118, -0.993328430480091,     -0.809428793397133, 1.39969712961021, 0.43065679489178, 0.19581824909626,     -0.0622842939729247, 0.57841339234696, 2.31951400192491,     2.93765523729633)), .Names = 'x');do.call('print', argv)");
    }

    @Test
    public void TestrGenBuiltinprint_testprint5_1578c83364ea19bcf2b97ba700ba97e7() {
        assertEval("argv <- structure(list(x = structure(list(statistic = structure(0.87901108669074,     .Names = 't'), parameter = structure(19, .Names = 'df'),     p.value = 0.390376937081292, conf.int = structure(c(-0.332667989442433,         0.814407243771461), conf.level = 0.95), estimate = structure(0.240869627164514,         .Names = 'mean of x'), null.value = structure(0, .Names = 'mean'),     alternative = 'two.sided', method = 'One Sample t-test',     data.name = 'x'), .Names = c('statistic', 'parameter', 'p.value',     'conf.int', 'estimate', 'null.value', 'alternative', 'method',     'data.name'), class = 'htest')), .Names = 'x');do.call('print', argv)");
    }

    @Test
    public void TestrGenBuiltinprintAsIs_testprintAsIs1_b2310df12778fa6236c5282fdb3d843b() {
        assertEval("argv <- structure(list(x = structure(c(2L, 5L), .Dim = 1:2, class = 'AsIs')),     .Names = 'x');do.call('print.AsIs', argv)");
    }

    @Test
    public void TestrGenBuiltinprintDeferredWarnings_testprintDeferredWarnings1_9d57a763c4d8b3a0c2a28b3867340b7f() {
        assertEval(" .Internal(printDeferredWarnings())");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault1_8035e1afca7a694d20dfb499572c06fb() {
        assertEval("argv <- list(structure(c('-3.001e+155', '-1.067e+107', ' -1.976e+62', '-9.961e+152', ' -2.059e+23', '  1.000e+00'), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault10_debed0ed7e3f01a1c9b38c30b28b14ff() {
        assertEval("argv <- list(structure(c(245L, 250L, 255L, 260L, 265L, 270L, 275L, 280L, 285L, 290L, 295L, 300L, 305L, 310L, 315L, 320L, 325L, 330L, 335L, 340L, 345L, 350L, 355L, 360L), .Dim = 2:4, .Dimnames = list(NULL, c('a', 'b', 'c'), NULL)), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault11_fff18ae211ec81454dbfb6c7fa7d9651() {
        assertEval("argv <- list(Inf, NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault12_eaba7de6f0345c99d4f72f5a287d052e() {
        assertEval("argv <- list(structure(c(' 79.53', '  6.00', ' 86.20', '  6.00', ' 69.77', '  5.00', ' 98.03', '  6.00', '108.03', '  6.00', ' 89.20', '  6.00', '114.20', '  6.00', '116.70', '  6.00', '110.37', '  6.00', '124.37', '  6.00', '126.37', '  6.00', '118.03', '  6.00'), .Dim = c(6L, 4L), .Dimnames = structure(list(V = c('Golden.rain', 'rep        ', 'Marvellous ', 'rep        ', 'Victory    ', 'rep        '), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N'))), NULL, FALSE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault13_2a24ecd809633ebe8d7a2fab1a1fc637() {
        assertEval("argv <- list('2014-03-17 13:47:59 EDT', NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault14_5dfd929919e8e43b125de2ca0ba57679() {
        assertEval("argv <- list(structure(1:120, .Dim = 2:5, .Dimnames = list(NULL, c('a', 'b', 'c'), NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault15_2eb347d14508384843a03f2f30c4d71a() {
        assertEval("argv <- list(structure(c('1', '2', '1'), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = '')), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault17_adf3e5b45d62c6143fa1b00e231ddc22() {
        assertEval("argv <- list(NULL, NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault18_7d7546758745d5b299e18a5d25ae5f58() {
        assertEval("argv <- list(quote(breaks ~ (wool + tension) - tension), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault19_e805e1cd6f15c4ba02a94c0582cf413b() {
        assertEval("argv <- list(c('2007-11-06', '2007-11-06'), NULL, TRUE, NULL, NULL, FALSE, 99999L, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault2_27174360a207a522fae66ced2ce8da07() {
        assertEval("argv <- list(structure(c(' 1', 'NA', ' 1', '1.1', ' NA', '2.0', '1.1+0i', '    NA', '3.0+0i', 'NA', 'NA', 'NA', 'FALSE', '   NA', ' TRUE', 'abc', NA, 'def'), .Dim = c(3L, 6L), .Dimnames = list(c('1', '2', '3'), c('A', 'B', 'C', 'D', 'E', 'F'))), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault20_678b62c688c1cadfe200447c4fbfc2d2() {
        assertEval("argv <- list(structure(c(NA, NA, 1L, 9L), .Names = c('size', 'current', 'direction', 'eval_depth')), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault21_a68b584a75d77dc4d708d78a6f135fdd() {
        assertEval("argv <- list(character(0), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault22_0f627e45d3c52657463cd1ad09c99649() {
        assertEval("argv <- list(structure('0.01587', .Names = '(Intercept)'), NULL, FALSE, NULL, 2, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault23_b30e52c67dfe3ffe71f84e37b1dbabb6() {
        assertEval("argv <- list(quote(Y ~ X), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault24_f65eb8d38408e35038adf456a2c709c1() {
        assertEval("argv <- list(c(0.944550219923258, 0.336629745550454, 0.629688071087003, 0.591416056267917), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault25_988e96057fa22eace51b735a957e593f() {
        assertEval("argv <- list(c('surname', 'nationality', 'deceased', 'title', 'other.author'), NULL, FALSE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault26_cec4fade4a795b697c881e853f77cddb() {
        assertEval("argv <- list(structure(c('-0.91', ' 0.81', '', '-0.97'), .Dim = c(2L, 2L), .Dimnames = list(c('x1', 'x3'), c('(Intercept)', 'x1'))), NULL, FALSE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault27_36e8770a7279149786e089ca506fbbcc() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault28_2e54c65c960e6cd4e3cd18db68641fa1() {
        assertEval("argv <- list(c(1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault29_c07c828534b882f795742b74a73660bb() {
        assertEval("argv <- list(structure(c('', ' 1', ' 1', ' 1', '', '  9.93', ' 26.79', '820.91', ' 47.97', ' 57.90', ' 74.76', '868.88', '24.974', '25.420', '28.742', '60.629'), .Dim = c(4L, 4L), .Dimnames = list(c('<none>', '- x4', '- x2', '- x1'), c('Df', 'Sum of Sq', 'RSS', 'AIC'))), NULL, FALSE, '', NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault3_10bb59d71383d577ec34c676ad64302e() {
        assertEval("argv <- list(structure(c('1', '2', '\\\\b', '4', '5', '\\\\040', '\\\\x20', 'c:\\\\spencer\\\\tests', '\\\\t', '\\\\n', '\\\\r'), .Dim = c(11L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'), 'TEST')), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault30_df344f2be7f9f62a9f8544f8fecc43ba() {
        assertEval("argv <- list(structure(c(78.7365206866197, 17, 98.5088731171753, 18, 113.842206450509, 18, 123.008873117175, 18), .Dim = c(2L, 4L), .Dimnames = list(c('', 'rep'), c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'))), 4L, TRUE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault31_0ccbf4015939043bb4c517a3af46a50e() {
        assertEval("argv <- list(structure(1:3, class = 'myClass'), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault32_a5a182e31db5352633b5bfb4fe8f1f48() {
        assertEval("argv <- list(structure(c(495L, 515L, 535L, 555L, 575L, 595L, 615L, 635L, 655L, 675L, 695L, 715L), .Dim = 3:4, .Dimnames = list(c('a', 'b', 'c'), NULL)), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault4_07a408c4f936125cc7834ead16815d31() {
        assertEval("argv <- list(quote(~a + b:c + d + e + e:d), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault5_95a8cbc9ecf7d4ce071eb164f1fc0d11() {
        assertEval("argv <- list(structure(c(-1.05715, -0.48359, 0.0799, 0.44239, 1.2699), .Names = c('Min', '1Q', 'Median', '3Q', 'Max')), 4L, TRUE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault6_34e55c8f6d989981cad39721a3a95a9d() {
        assertEval("argv <- list(quote(y ~ A:U + A:V - 1), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault7_c3fb3a6848f651750242692a255a062b() {
        assertEval("argv <- list(structure(c(NA, NA, NA, 'a', NA, NA, 'b', 'd', NA, '10', '12', '14'), .Dim = 3:4), NULL, TRUE, '----', NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault8_db719c261c43833a18399eb27b8295d2() {
        assertEval("argv <- list(c('Alb', 'Als', 'Arz', 'Ark', 'Clf', 'Clr', 'Cn', 'Dl', 'Fl', 'Gr', 'Hw', 'Id', 'Il', 'In', 'Iw', 'Kns', 'Knt', 'Ls', 'Man', 'Mr', 'Mssc', 'Mc', 'Mnn', 'Msss', 'Mssr', 'Mnt', 'Nb', 'Nv', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'Oh', 'Ok', 'Or', 'Pn', 'RI', 'SC', 'SD', 'Tn', 'Tx', 'Ut', 'Vrm', 'Vrg', 'Wsh', 'WV', 'Wsc', 'Wy'), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault9_ad3e9cdbbe7cbfef338c14d5524eabcd() {
        assertEval("argv <- list(structure(c('abc', 'def\\'gh'), .Dim = 1:2, .Dimnames = list('1', c('a', 'b'))), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction1_1021d86ad524e541a9e62f3bebedf3e3() {
        assertEval("argv <- list(.Primitive('+'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction2_7841a6fd4b7f2d015cae574dc09db85e() {
        assertEval("argv <- list(.Primitive('if'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction3_dab1c69d5d496ff15cb56eb6d8a68170() {
        assertEval("argv <- list(.Primitive('c'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction4_e6dc900fb27246048b43ec42f83eb5d0() {
        assertEval("argv <- list(.Primitive('.Internal'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction5_6be715f4c61b9c874a7c0f88aec283b5() {
        assertEval("argv <- list(.Primitive('log'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix1_60cb396f76ef6a0a993cbb6a8046f8b7() {
        assertEval("argv <- list(structure(c(1, 6, 9, 6, 4, 1, 1, 2, 1, 0.305397625390859, 0.00170825768891124, 8.51556634078892e-12, 0.64987756971621, 0.0197968749793939, 5.28672163823767e-10, 0.00471555351643001, 2.33367394341443e-13, 1.21630438148624e-64, 1, 1, 1), .Dim = c(3L, 7L), .Dimnames = list(NULL, c('time', 'n.risk', 'n.event', 'survival', 'std.err', 'lower 95% CI', 'upper 95% CI'))), c('', '', ''), c('time', 'n.risk', 'n.event', 'survival', 'std.err', 'lower 95% CI', 'upper 95% CI'), TRUE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix2_ebeed9735842cb288d5c6274d3905e4f() {
        assertEval("argv <- list(structure(FALSE, .Dim = c(1L, 1L)), NULL, NULL, TRUE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix3_c92fff4f442fac61d8bfb57b40e354ae() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 8, 11, 12, 15, 17, 22, 23, 21, 19, 17, 16, 14, 12, 8, 6, 4, 3, 2, 1, 2, 2, 1, 2, 2, 4, 2, 2, 1, 1, 1, 1, 0.904761904761905, 0.80952380952381, 0.761904761904762, 0.666666666666667, 0.571428571428571, 0.380952380952381, 0.285714285714286, 0.19047619047619, 0.142857142857143, 0.0952380952380952, 0.0476190476190476, 0, 0.0640564484890047, 0.0856890867468988, 0.0929428640903365, 0.102868899974728, 0.107989849431208, 0.105971169574131, 0.0985807941917649, 0.0856890867468988, 0.0763603548321212, 0.0640564484890047, 0.0464714320451682, NaN, 0.670045882235034, 0.568905059924173, 0.519391415328429, 0.425350435565247, 0.337976953859493, 0.183066548820394, 0.116561326436765, 0.0594817013611753, 0.0356573551906667, 0.016259260212247, 0.00332446304253118, NA, 0.975294149038113, 0.923888828559295, 0.893257109782487, 0.82504400879734, 0.749240709943216, 0.577788677745831, 0.481819648009025, 0.37743489058515, 0.321161574680869, 0.261249981968687, 0.197044905698946, NA), .Dim = c(12L, 7L), .Dimnames = list(NULL, c('time', 'n.risk', 'n.event', 'survival', 'std.err', 'lower 95% CI', 'upper 95% CI'))), c('', '', '', '', '', '', '', '', '', '', '', ''), c('time', 'n.risk', 'n.event', 'survival', 'std.err', 'lower 95% CI', 'upper 95% CI'), TRUE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix4_b248179e13be08e76e43608895dce796() {
        assertEval("argv <- list(structure(c(952L, 3622L, 202L, 406L), .Dim = c(2L, 2L), .Dimnames = list(c('subcohort', 'cohort'), c('1', '2'))), c('subcohort', 'cohort'), c('1', '2'), FALSE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix5_d5511f65bf3cef3bd9075a4969ad40f1() {
        assertEval("argv <- list(structure(c(-1.89646294299258, 1.16675019914746, -8.10054918052941, -5.02922966334328, -0.332284173685658, -0.370285767776029, -0.422218802914528, 0.27824687717147, NA, 0.150098588668891, 3.21153879975245, 0.000303372486059531, 0.00654384959664698, 0.717283460804982, 0.690536969224971, 0.655590578569862, 1.32081223535046, NA, 1.38078223740269, 0.565646487676971, 0.698724423746393, 0.770086232143856, 0.0568682431416458, 0.116409970657657, 0.0584328435912827, 0.0510212342180821, 0, -1.37346997348395, 2.06268442316178, -11.5933390979754, -6.53073571948212, -5.84305326362929, -3.1808767383421, -7.22571035337252, 5.45355049590036, NA, 0.17, 0.039, 0, 6.5e-11, 5.1e-09, 0.0015, 5e-13, 4.9e-08, NA), .Dim = c(9L, 5L), .Dimnames = list(c('toccfarm', 'toccoperatives', 'toccprofessional', 'toccsales', 'tocccraftsmen:education', 'toccfarm:education', 'toccoperatives:education', 'toccprofessional:education', 'toccsales:education'), c('coef', 'exp(coef)', 'se(coef)', 'z', 'p'))), c('toccfarm', 'toccoperatives', 'toccprofessional', 'toccsales', 'tocccraftsmen:education', 'toccfarm:education', 'toccoperatives:education', 'toccprofessional:education', 'toccsales:education'), c('coef', 'exp(coef)', 'se(coef)', 'z', 'p'), TRUE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix6_63a9003a721f9c1e855e025666d1abf2() {
        assertEval("argv <- list(structure(c('splines-package', 'as.polySpline', 'asVector', 'backSpline', 'bs', 'interpSpline', 'ns', 'periodicSpline', 'polySpline', 'predict.bs', 'predict.bSpline', 'predict.nbSpline', 'predict.npolySpline', 'predict.ns', 'predict.pbSpline', 'predict.ppolySpline', 'spline.des', 'splineDesign', 'splineKnots', 'splineOrder', 'splines', 'xyVector', 'splines-package', 'polySpline', 'asVector', 'backSpline', 'bs', 'interpSpline', 'ns', 'periodicSpline', 'polySpline', 'predict.bs', 'predict.bSpline', 'predict.bSpline', 'predict.bSpline', 'predict.bs', 'predict.bSpline', 'predict.bSpline', 'splineDesign', 'splineDesign', 'splineKnots', 'splineOrder', 'splines-package', 'xyVector'), .Dim = c(22L, 2L)), NULL, c('Column 1', 'Column 2', 'Column 3'), FALSE, TRUE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix7_91f847560597d197de0592dbb3433eb7() {
        assertEval("argv <- list(structure(c(' 0.228763', '-0.000666', '', '0.08909', '0.00426', '', '0.08899', '0.00426', '', '6.59', '0.02', '6.02', '1.00', '1.00', '3.06', '0.01', '0.88', '0.12'), .Dim = c(3L, 6L), .Dimnames = list(c('male', 'tt(agechf), linear', 'tt(agechf), nonlin'), c('coef', 'se(coef)', 'se2', 'Chisq', 'DF', 'p'))), c('male', 'tt(agechf), linear', 'tt(agechf), nonlin'), c('coef', 'se(coef)', 'se2', 'Chisq', 'DF', 'p'), FALSE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix8_93153d21355a549222312d399fa77443() {
        assertEval("argv <- list(structure(c(' 0.00561', '-1.65487', '', '0.012', '0.483', '', '0.00872', '0.38527', '', ' 0.22', '11.74', '20.33', ' 1.0', ' 1.0', '13.9', '0.64000', '0.00061', '0.12000'), .Dim = c(3L, 6L), .Dimnames = list(c('age', 'sex', 'frailty(id, dist = \\'t\\', c'), c('coef', 'se(coef)', 'se2', 'Chisq', 'DF', 'p'))), c('age', 'sex', 'frailty(id, dist = \\'t\\', c'), c('coef', 'se(coef)', 'se2', 'Chisq', 'DF', 'p'), FALSE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinprod_testprod1_e3c10d1288d5b888cbc0c7c52578d5e3() {
        assertEval("argv <- list(9L);prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod10_e1494e05b9107ae9c2d91b8ea3945c61() {
        assertEval("prod( );");
    }

    @Test
    public void TestrGenBuiltinprod_testprod11_444155a2fd66d2da798ec4400cbed401() {
        assertEval("argv <- list(numeric(0));prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod2_d5fed814f10821c421305e0e621257d9() {
        assertEval("argv <- list(c(1000L, 1000L));prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod3_9794849bdb6575f5379fbffa56c0639f() {
        assertEval("argv <- list(c(4, 2.5, 1.3, -1.20673076923077));prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod4_3d86cf121e4561b572662e1723a632bf() {
        assertEval("argv <- list(structure(c(4L, 4L, 2L), .Names = c('Hair', 'Eye', 'Sex')));prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod5_ddf539c72d5be0c972f23ef5743443b4() {
        assertEval("argv <- list(integer(0));prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod6_9de3cf7cd25bd6f50a017e40ee6796b2() {
        assertEval("argv <- list(structure(c(2, 0, 1, 2), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))));prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod7_472b609d0fff03bcbc5fe3f118074597() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))));prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod8_f63c0acc4c4aa52ea474e1811bc7a816() {
        assertEval("argv <- list(c(0.138260298853371, 0.000636169906925458));prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinprod_testprod9_1b54654e4fc4c2ca1eb33a3d5d9120f7() {
        assertEval("argv <- list(NA_integer_);prod(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinproptable_testproptable1_987a37a48367daa4900b5d7e1ddf4522() {
        assertEval("argv <- structure(list(x = structure(c(15L, 37L, 30L, 18L, 12L,     30L, 64L, 44L), .Dim = c(4L, 2L), .Dimnames = structure(list(Evaluation = c('very good',     'good', 'bad', 'very bad'), Location = c('city centre', 'suburbs')),     .Names = c('Evaluation', 'Location'))), margin = 2), .Names = c('x',     'margin'));do.call('prop.table', argv)");
    }

    @Test
    public void TestrGenBuiltinprovideDimnames_testprovideDimnames1_09df36894c3fc716aa574e8ea6299ba5() {
        assertEval("argv <- structure(list(x = structure(logical(0), .Dim = 0:1)),     .Names = 'x');do.call('provideDimnames', argv)");
    }

    @Test
    public void TestrGenBuiltinprovideDimnames_testprovideDimnames2_c4852a1021046650f22832eed2004a91() {
        assertEval("argv <- structure(list(x = structure(integer(0), .Dim = 0L, .Dimnames = structure(list(NULL),     .Names = ''), class = 'table')), .Names = 'x');do.call('provideDimnames', argv)");
    }

    @Test
    public void TestrGenBuiltinpsigamma_testpsigamma1_b3ce0b3a4e9f00cae261ee1e1fdf25fe() {
        assertEval("argv <- list(c(-100, -3, -2, -1, 0, 1, 2, -99.9, -7.7, -3, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.0999999999999996, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 5.1, 77), 1); .Internal(psigamma(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsigamma_testpsigamma2_b5501ab01e61fc203ea02dd23a8bf50f() {
        assertEval("argv <- list(c(1e+30, 1e+45, 1e+60, 1e+75, 1e+90), 2); .Internal(psigamma(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsigamma_testpsigamma3_82d1df5018204925e2ea7e2e7f75b101() {
        assertEval("argv <- list(c(1e+20, 1e+30, 1e+40, 1e+50, 1e+60), 5); .Internal(psigamma(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsigamma_testpsigamma4_b95dcdcb5d051b464b6c40439dc6c93a() {
        assertEval("argv <- list(c(-100, -3, -2, -1, 0, 1, 2, -99.9, -7.7, -3, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.0999999999999996, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 5.1, 77), 0); .Internal(psigamma(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort1_172f2c78025ed325182f497c9584531a() {
        assertEval("argv <- list(7:8, 1:2); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort10_e5ec8754c5ebb7064bf2ffe927cb7e00() {
        assertEval("argv <- list(c(-1.05715266611575, -0.873306430909872, -0.548705796690786, -0.288240908441576, -0.0649703574297026, 0.224762433374997, 0.3255545927283, 0.4813346401898, 0.530823516045489, 1.2699009772491), c(1L, 3L, 4L, 5L, 6L, 7L, 8L, 10L)); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort11_48b2eaf2776e92ef0affd17e60356d35() {
        assertEval("argv <- list(c(-1.05715266611575, -0.873306430909873, -0.548705796690787, -0.288240908441577, -0.0649703574297025, 0.224762433374994, 0.3255545927283, 0.481334640189799, 0.530823516045488, 1.2699009772491), c(1L, 3L, 4L, 5L, 6L, 7L, 8L, 10L)); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort12_57d6bd2c7042ca399ffcdefe60086ee0() {
        assertEval("argv <- list(c(-Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -4.17369555651928e+302, -2.72671165723473e+289, -2.21240023126594e+276, -2.24780296109123e+263, -2.88514442494869e+250, -4.72336572671053e+237, -9.96611412047338e+224, -2.74100158340596e+212, -9.94902790498679e+199, -4.83110332887119e+187, -3.18582547396557e+175, -2.90089508183654e+163, -3.71562599613334e+151, -6.83535188151783e+139, -1.84898368353639e+128, -7.55412056676629e+116, -4.80716085942859e+105, -4.9383857330861e+94, -8.54170618068872e+83, -2.61556777274611e+73, -1.5069799345972e+63, -1.76183826972506e+53, -4.60125024792566e+43, -3.04622557026196e+34, -6.08456909882282e+25, -473300382255715392, -21650982809.6744, -12820.0784261145, -1.12778377684043), c(1L, 13L, 14L, 26L, 38L, 39L, 51L)); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort13_604221e547b97e1d9794ea4ad42fa86f() {
        assertEval("argv <- list(c(0.5, 0.6, 1.2, 1.3, 1.6, 5.8, 6.2, 3.7, 5.1, 5, 4, 4, 5.3, 1.4, 6.6, 3.8, 2.6, 3.2, 2.9, 6.8, 10.6, 7.6, 9.3, 8, 10, 10, 8, 10.5, 10.5, 9.7, 9.7, 9.4, 8.9, 8.8, 8, 10.1, 8.5, 9.1, 7.5, 7.4, 7.5, 7.6, 8.4, 8.5, 10.8, 11.1, 12, 12, 18, 17.7, 16, 15, 14, 12.9, 12.7, 12.6, 17.9, 12.1, 17.7, 16.1, 13, 17.3, 17, 16.7, 13, 15.7, 19, 16, 17, 12, 12.2, 12.8, 14.6, 14.9, 17.6, 21, 20.5, 19.6, 20.2, 20.8, 21.1, 21.9, 20.5, 19.2, 22.5, 22, 23.2, 23, 22, 22, 23.4, 23.4, 23.5, 29, 26, 25, 28.5, 25.4, 29, 24.2, 23.9, 24.6, 25.7, 25.3, 28.6, 26.5, 29, 37.8, 30.9, 42, 31, 38.5, 41.4, 43.6, 46.7, 37.4, 45, 35.9, 36.1, 32, 44.4, 40.3, 30, 31, 32, 32.7, 36, 43.5, 33.1, 32.9, 36.3, 38.9, 30, 46.1, 45, 47.1, 47.7, 187, 147, 130, 49.2, 62, 141, 122, 105, 62, 64, 123, 112, 105, 63.6, 60, 49, 66, 87, 56.9, 60.7, 61.4, 156, 62, 64, 82, 88, 48.3, 109, 107, 85, 91, 148, 145, 53.1, 50, 92.2, 224, 293, 300, 211, 200, 197, 203, 359, 370), c(1L, 46L, 47L, 91L, 92L, 136L, 137L, 182L)); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort14_1f46479d96526c8280961374a4437883() {
        assertEval("argv <- list(c(-1.36919169254062, -0.667819876370237, -0.253162069270378, -0.0834190388782434, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, 0.0881443844426084, 0.170711734013213, 0.552921941721332), c(1L, 3L, 4L, 5L, 6L, 7L, 8L, 10L)); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort2_ffa274c0158bcb248ad74c3c91dbf08f() {
        assertEval("argv <- list(c(0.0499999999999972, 0.300000000000004, 1.1, 0.0500000000000007, 0, 0.25, 1, 2.15, 1.95, 2.09999999999999, 1.95, 2.04999999999999, 2.59999999999999, 2.59999999999999, 2.6, 4.25, 3.45, 2.65000000000001, 3.49999999999999, 3.75000000000001, 2.75, 3.05, 2.8, 4.45, 3.35, 7.7, 14.2), 14L); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort3_0f3c20da4c3fec6bc4e005ac32d2bcea() {
        assertEval("argv <- list(c(4.23272528138341e-16, 5.68989300120393e-16, 0.0499999999999982, 3.05311331771918e-16, 0.049999999999999, 0.0499999999999994, 3.05311331771918e-16, 0.0499999999999994, 0.100000000000001, 0.0999999999999994, 0.0999999999999994, 0.0500000000000006, 0.15, 0.15, 0.100000000000001, 0.0499999999999997, 0.150000000000001, 0.0999999999999995, 0.0999999999999993, 0.100000000000001, 0.0999999999999994, 0.100000000000001, 0.250000000000001, 0.250000000000001, 0.299999999999999, 0.199999999999999, 0.200000000000001, 0.3, 0.25, 0.199999999999999, 0.199999999999999, 0.150000000000001, 0.200000000000001, 0.199999999999998, 0.249999999999999, 0.199999999999999, 0.3, 0.350000000000001, 0.35, 0.300000000000001, 0.3, 0.350000000000002, 0.35, 0.35, 0.300000000000001, 0.350000000000001, 0.399999999999999, 0.4, 0.349999999999999, 0.350000000000001, 0.400000000000001, 0.300000000000001, 0.400000000000001, 0.449999999999999, 0.45, 0.450000000000001, 0.45, 0.450000000000001, 1.05, 0.7, 0.6, 1, 0.500000000000001, 0.5, 0.699999999999999, 1.05, 0.850000000000001, 0.650000000000001, 0.750000000000001, 0.75, 1, 0.699999999999999, 0.749999999999999, 1.05, 0.549999999999999, 0.500000000000001, 0.7, 0.8, 0.500000000000001, 0.650000000000001, 0.700000000000001, 0.599999999999999, 0.9, 0.75, 0.949999999999999, 0.899999999999999, 0.550000000000001, 1, 1.05, 1.05, 0.600000000000001, 0.6, 1.05, 0.749999999999999, 0.949999999999999, 1.1, 2.15, 1.45, 1.3, 2.1, 4.85, 3.7, 2.05, 1.2, 1.4, 1.3, 1.2, 1.85), 54:55); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort4_1eeecdb14cfb1f3797c171260ca41765() {
        assertEval("argv <- list(c(0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.0499999999999998, 0.05, 0.05, 0.05, 0.0499999999999999, 0.05, 0.0499999999999999, 0.05, 0.0499999999999999, 0.0499999999999999, 0.05, 0.0499999999999999, 0.0499999999999999, 0.05, 0.05, 0.0499999999999998, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.0499999999999999, 0.05, 0.05, 0.05, 0.0499999999999999, 0.0499999999999999, 0.0499999999999999, 0.05, 0.05, 0.0499999999999999, 0.05, 0.0499999999999999, 0.05, 0.05, 0.05, 0.0499999999999998, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.0555556, 0.05555554, 0.05555556, 0.05555556, 0.05555554, 0.0555556, 0.0555555, 0.0555556, 0.0555555, 0.0555556, 0.0555555, 0.0555556, 0.0555556, 0.0555555, 0.0555555999999999, 0.0555555000000001, 0.0555555999999999, 0.0555555000000001, 0.0555555999999999, 0.0555555, 0.0555556, 0.0555559999999999, 0.055555, 0.0555559999999999, 0.0526315, 0.05263162, 0.05263158, 0.05263158, 0.05263162, 0.0526315, 0.0526316, 0.0526316, 0.0526316, 0.0526316, 0.0526315, 0.0526316, 0.0526316, 0.0526316, 0.0526316, 0.0526315000000001, 0.0526316, 0.0526315999999999, 0.0526316, 0.0526315000000001, 0.0526316, 0.0526316, 0.052632, 0.0526310000000001, 0.0526319999999998, 0.08333333, 0.08333333, 0.08333334, 0.08333333, 0.08333333, 0.08333337, 0.0833333, 0.0833333, 0.0833333, 0.0833333, 0.0833333, 0.0833333, 0.0833333000000001, 0.0833333000000001, 0.0833333999999999, 0.0833333000000001, 0.0833333000000001, 0.0833333999999999, 0.0833333000000001, 0.0833333000000001, 0.0833333999999999, 0.0833333000000001, 0.0833333000000001, 0.0833330000000001, 0.0833330000000001), 76:77); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort5_a40a0e38ca26f6979dc545dcdafed14f() {
        assertEval("argv <- list(c(-3.35281542033775, -3.57533122743112, -3.23282496934355, -3.3903449466851, -3.39757437954971, -3.36251831175626, -3.22932468384763, -3.22295685034786, -3.21402130636699, -3.11638102275539, -3.09226646401048, -3.21757818016328, -3.0862187014408, -3.08484132891786), 7:8); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort6_8dcabc555fafc94927b76ab4d466d2db() {
        assertEval("argv <- list(cc(66L, 195L)); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort7_5990e812938cfd9eb62f0df0b062b0d9() {
        assertEval("argv <- list(c(1, 2, 2, 3, 3, 4, 4, 5), 1:8); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort8_946b48319923464cb51dd074faa98f7c() {
        assertEval("argv <- list(27:28, 1:2); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort9_b0e933f6019db4b3a3adda026c3a99e8() {
        assertEval("argv <- list(c(-Inf, -Inf, Inf, Inf), 1:4); .Internal(psort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinpushBackLength_testpushBackLength1_dcfa067b5a946b8102d8e24955cd3eb9() {
        assertEval("argv <- list(FALSE); .Internal(pushBackLength(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinputconst_testputconst1_905e389d73f4641d410a3185a03514a6() {
        assertEval("argv <- list(list(NULL), 0, NULL); .Internal(putconst(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinputconst_testputconst2_73c58d71316b1a0596190d1ecdc2c100() {
        assertEval("argv <- list(list(list(), NULL), 1, list()); .Internal(putconst(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinqr_testqr1_5e55b02e718782ee5db58f9f80b58a00() {
        assertEval("argv <- list(structure(list(qr = structure(c(-2.99896066496855+0i, 0.0864255261791181+0i, -0.13772470327145+0i, -0.49098351645158+0i, 0.249389337649224+0i, 1.17331892183982+0i, -1.54960102684918+0i, -0.573648421141553+0i, 0.376760682628698+0i, 0.412090084647403+0i, 0.603959683330493+0i, -0.0216928335770876+0i, -1.2469936242596+0i, 0.224366164923213+0i, 0.341798188737913+0i, 1.04294423444024+0i, 0.270564951504877+0i, -0.315381666175534+0i, 0.787566751532822+0i, 0.229154517629245+0i, -2.25109940279642+0i, 0.530750192641659+0i, -0.0977755443891602+0i, 0.6614171819615+0i, -0.0856949989622426+0i), .Dim = c(5L, 5L), .Dimnames = list(c('1', '2', '3', '4', '5'), c('c', 'a', 'd', 'b', 'e'))), rank = 5L, qraux = c(1.50410169966891+0i, 1.21888836143069+0i, 1.71355205288103+0i, 1.90021623833265+0i, 0+0i), pivot = c(3L, 1L, 4L, 2L, 5L)), .Names = c('qr', 'rank', 'qraux', 'pivot'), class = 'qr'), structure(1:5, .Dim = c(5L, 1L))); .Internal(qr_coef_cmplx(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqr_testqr2_6dcba0e0aead37a7ec4cb919f7a2a5c7() {
        assertEval("argv <- list(structure(list(qr = structure(c(-2.79657712283236, 0.0791500442336917, 0.123755637403102, 0.089607462331441, 0.175462651449591, 0.0695565565709435, 0.129006956605315, 0.206583197284758, 0.0227114114395308, 0.235970456809858, 0.0914077988155571, 0.226297607634113, 0.0934594628258066, 0.0899795540097744, 0.12841549388179, 0.240520185730483, 0.233009950431413, 0.105133974880502, 0.2095512974465, 0.258964862210899, -2.07025325833148, -1.85301582498188, 0.139094572499947, 0.342556683478902, -0.102024562608463, 0.360699451256097, 0.315324737973941, 0.0873752715112826, 0.2823485467872, -0.239863332146733, -0.00369181667619238, -0.172536775168022, 0.229736826805589, 0.0852501914884386, 0.230310089401495, -0.0314168397035678, 0.0849707357385819, 0.365804687920591, -0.0536336269418447, 0.0845797169641211, -2.03746531175251, -0.489461063366758, -1.40644653583967, -0.00873041883181913, 0.0708276075409328, 0.153420226417602, -0.370069917481653, -0.112816417432651, 0.240125650075004, 0.138426195987046, 0.128552669396225, 0.217325815608225, -0.0223361051263949, -0.0526633296159945, -0.296094517820351, -0.327346352864029, -0.249917267465335, -0.0672115093838751, 0.0654426021596298, -0.240131194574062, -2.06587739268838, -0.339470951293598, -0.49608488205654, 1.14277258876071, 0.201196269542128, 0.0348254315928563, 0.145314253550005, 0.131380830586619, -0.387015716398766, 0.283849139598354, -0.0827284627849877, 0.132994279479374, -0.113393410148955, 0.0518736136418599, -0.422882666833989, -0.141635274746576, -0.181291088091223, 0.196913259592121, -0.0460107390352923, 0.15597817986415), .Dim = c(20L, 4L)), rank = 4L, qraux = c(1.32642615746455, 1.10105053486773, 1.21513331337829, 1.21397558590595), pivot = c(4L, 1L, 3L, 2L)), .Names = c('qr', 'rank', 'qraux', 'pivot'), useLAPACK = TRUE, class = 'qr'), structure(c(0.434659484773874, 0.712514678714797, 0.399994368897751, 0.325352151878178, 0.757087148027495, 0.202692255144939, 0.711121222469956, 0.121691921027377, 0.245488513959572, 0.14330437942408, 0.239629415096715, 0.0589343772735447, 0.642288258532062, 0.876269212691113, 0.778914677444845, 0.79730882588774, 0.455274453619495, 0.410084082046524, 0.810870242770761, 0.604933290276676, 0.654723928077146, 0.353197271935642, 0.270260145887733, 0.99268406117335, 0.633493264438584, 0.213208135217428, 0.129372348077595, 0.478118034312502, 0.924074469832703, 0.59876096714288, 0.976170694921166, 0.731792511884123, 0.356726912083104, 0.431473690550774, 0.148211560677737, 0.0130775754805654, 0.715566066093743, 0.103184235747904, 0.446284348610789, 0.640101045137271, 1.00298403897323, 0.272296643047594, 0.67556063386146, 0.151371688628569, 0.340151631063782, 0.431371175684035, 0.0309030100004748, 0.457057784032077, 0.880189609760418, 0.426803491590545, 0.543544612638652, 0.655281779309735, 0.526419038954191, 0.231530745956115, 0.877417415869422, 0.686553374305367, 0.847202921006829, 0.115471200458705, 0.751486539305188, 0.432544381567277, 0.682788078673184, 0.601541217649356, 0.238868677755818, 0.258165926672518, 0.729309623362496, 0.452570831403136, 0.175126768415794, 0.746698269620538, 0.104987640399486, 0.864544949028641, 0.614644971676171, 0.557159538846463, 0.328777319053188, 0.453131445450708, 0.500440972624347, 0.180866361130029, 0.529630602803081, 0.0752757457084954, 0.277755932649598, 0.212699519237503, 0.0904899418726564, 0.0829104807786643, 0.140637623313814, 0.186663761837408, 0.0510252129565924, 0.195122500695288, 0.189470667047426, 0.14745507678017, 0.160610442608595, 0.0259712139610201, 0.0604781195987016, 0.0592939835228026, 0.157146221613511, 0.0842694476991892, 0.187063216743991, 0.126278517944738, 0.175293296081945, 0.202698964001611, 0.104955473728478, 0.1719400214497, 0.293730155099183, 0.19126010988839, 0.886450943304226, 0.503339485730976, 0.877057543024421, 0.189193622441962, 0.758103052387014, 0.724498892668635, 0.943724818294868, 0.547646587016061, 0.711743867723271, 0.388905099825934, 0.100873126182705, 0.927302088588476, 0.283232500310987, 0.59057315881364, 0.110360604943708, 0.840507032116875, 0.317963684443384, 0.782851336989552, 0.267508207354695, 0.218645284883678, 0.516796836396679, 0.268950592027977, 0.181168327340856, 0.518576137488708, 0.562782935798168, 0.129156854469329, 0.256367604015395, 0.717935275984928, 0.961409936426207, 0.100140846567228, 0.763222689507529, 0.947966354666278, 0.818634688388556, 0.308292330708355, 0.649579460499808, 0.953355451114476, 0.953732650028542, 0.339979203417897), .Dim = c(20L, 7L)), TRUE); .Internal(qr_qy_real(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort1_7b537b2f7433445efd77c9d3ec3b790b() {
        assertEval("argv <- list(3L, FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort10_ff147ff6575aaac6502a71f7e941d2d6() {
        assertEval("argv <- list(c(1, 13, 26, 38, 51, 14, 39), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort11_26b6c094621d4545c9cc22d019bcb146() {
        assertEval("argv <- list(c(-Inf, -Inf, -Inf, -Inf, -Inf, 0, 1, 2, 3, 4, Inf, Inf, Inf, Inf), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort12_d466c56eb29c28b1ba088d9084e2eb02() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort13_e9ed826951f853f0e59bbcdc5ffda716() {
        assertEval("argv <- list(c(63, 187, 64, 188), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort2_1aa071f2c58ce02b6f73dbf0557c29a3() {
        assertEval("argv <- list(c(306, 455, 1010, 210, 883, 1022, 218, 166, 170, 567, 144, 613, 707, 88, 301, 624, 371, 394, 574, 118, 390, 12, 26, 533, 53, 814, 93, 460, 583, 303, 519, 643, 189, 246, 689, 65, 132, 223, 175, 163, 428, 230, 840, 11, 176, 791, 95, 196, 806, 284, 147, 655, 239, 30, 179, 310, 477, 364, 107, 177, 156, 429, 15, 181, 283, 13, 212, 524, 288, 363, 442, 54, 558, 207, 92, 60, 202, 353, 267, 387, 457, 337, 404, 222, 458, 31, 229, 444, 329, 291, 292, 142, 413, 320, 285, 197, 180, 300, 259, 110, 286, 270, 81, 131, 225, 269, 279, 135, 59, 105, 237, 221, 185, 183, 116, 188, 191, 174), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort3_5b472027dadddd939494ac31fc52b038() {
        assertEval("argv <- list(numeric(0), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort4_445d53daa7494cf807aeee0fa73fef8e() {
        assertEval("argv <- list(c(1.64819754690779, 0.502718643389684, 0.845467412356198, 0.467247395729231, -0.402055063696625, 0.923526703253396, -0.0080556407117813, 1.03378423761425, -0.799126981726699, 1.00423302095334, -0.311973356192691, -0.88614958536232, -1.9222548962705, 1.61970074406333, 0.519269904664384, -0.055849931834021, 0.696417610118512), TRUE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort5_733d7ca9e3a4e2fc1cd05745154d86a1() {
        assertEval("argv <- list(c(1L, 7L, 11L, 12L, 13L, 19L, 25L, 3L, 8L), TRUE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort6_edf82063f39d7d60c84fbebc1aeb88c1() {
        assertEval("argv <- list(c(1, 2, 4, 6, 8, 3, 5, 7), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort7_d2b69f38a06503f8fa8ffe49c19127b7() {
        assertEval("argv <- list(c(1, 173, 346, 518, 691, 174, 519), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort8_fd648fbc1c53d26c3db961b13b45fca3() {
        assertEval("argv <- list(c(1, 42, 83, 124, 166, 43, 84, 125), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort9_0e9137109cb0b330c8e78d07d5edb347() {
        assertEval("argv <- list(c(-Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 1, 2, 3, 4, 5, Inf, Inf, Inf, Inf, Inf), FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort1_fe1a2a01b922c06c8309859de7af216e() {
        assertEval("argv <- list(structure(1L, .Label = c('Ctl', 'Trt'), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort2_358c949e727b1b7dd2ca071741ce125f() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort3_f73b54c6836e13bb4f2e62466ea5dd50() {
        assertEval("argv <- list(structure(c(3L, 7L, 1L, 5L, 10L, 8L, 2L, 6L, 4L, 9L), .Label = c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort5_5b4f8d55cb71b3d200570fbcb536500d() {
        assertEval("argv <- list(structure(c(64L, 67L, 92L, 71L, 74L, 69L, 78L, 94L, 95L, 80L, 119L, 114L, 97L, 72L, 75L, 96L, 99L, 54L, 101L, 93L, 58L, 138L, NA, 139L, 126L, 84L, 79L, 62L, 52L, 68L, 81L, 87L, 109L, 35L, 51L, 61L, 59L, 131L, 137L, 73L, 77L, 70L, 90L, 107L, 29L, 89L, 57L, 66L, 76L, 37L, 155L, 16L, 102L, 56L, 123L, 36L, 60L, 40L, 43L, 85L, 65L, 11L, 47L, 103L, 86L, 13L, 63L, 132L, 91L, 98L, 105L, 134L, 14L, 124L, 117L, 55L, 41L, 24L, 50L, 110L, 129L, 88L, 141L, 145L, 133L, 25L, 46L, 120L, 83L, 121L, 104L, 53L, 44L, 113L, 100L, 19L, 108L, 31L, 82L, 127L, 111L, 116L, 38L, 150L, 48L, 22L, 112L, 140L, 27L, 149L, 115L, 130L, 8L, 28L, 106L, 23L, 125L, 33L, 39L, 32L, 15L, 49L, 144L, 7L, 17L, 122L, 118L, 5L, 128L, 12L, 45L, 21L, 42L, 147L, 26L, 1L, 4L, 153L, 151L, 3L, 136L), .Label = c('(360,365]', '(365,370]', '(370,375]', '(375,380]', '(380,385]', '(385,390]', '(390,395]', '(395,400]', '(400,405]', '(405,410]', '(410,415]', '(415,420]', '(420,425]', '(425,430]', '(430,435]', '(435,440]', '(440,445]', '(445,450]', '(450,455]', '(455,460]', '(460,465]', '(465,470]', '(470,475]', '(475,480]', '(480,485]', '(485,490]', '(490,495]', '(495,500]', '(500,505]', '(505,510]', '(510,515]', '(515,520]', '(520,525]', '(525,530]', '(530,535]', '(535,540]', '(540,545]', '(545,550]', '(550,555]', '(555,560]', '(560,565]', '(565,570]', '(570,575]', '(575,580]', '(580,585]', '(585,590]', '(590,595]', '(595,600]', '(600,605]', '(605,610]', '(610,615]', '(615,620]', '(620,625]', '(625,630]', '(630,635]', '(635,640]', '(640,645]', '(645,650]', '(650,655]', '(655,660]', '(660,665]', '(665,670]', '(670,675]', '(675,680]', '(680,685]', '(685,690]', '(690,695]', '(695,700]', '(700,705]', '(705,710]', '(710,715]', '(715,720]', '(720,725]', '(725,730]', '(730,735]', '(735,740]', '(740,745]', '(745,750]', '(750,755]', '(755,760]', '(760,765]', '(765,770]', '(770,775]', '(775,780]', '(780,785]', '(785,790]', '(790,795]', '(795,800]', '(800,805]', '(805,810]', '(810,815]', '(815,820]', '(820,825]', '(825,830]', '(830,835]', '(835,840]', '(840,845]', '(845,850]', '(850,855]', '(855,860]', '(860,865]', '(865,870]', '(870,875]', '(875,880]', '(880,885]', '(885,890]', '(890,895]', '(895,900]', '(900,905]', '(905,910]', '(910,915]', '(915,920]', '(920,925]', '(925,930]', '(930,935]', '(935,940]', '(940,945]', '(945,950]', '(950,955]', '(955,960]', '(960,965]', '(965,970]', '(970,975]', '(975,980]', '(980,985]', '(985,990]', '(990,995]', '(995,1000]', '(1000,1005]', '(1005,1010]', '(1010,1015]', '(1015,1020]', '(1020,1025]', '(1025,1030]', '(1030,1035]', '(1035,1040]', '(1040,1045]', '(1045,1050]', '(1050,1055]', '(1055,1060]', '(1060,1065]', '(1065,1070]', '(1070,1075]', '(1075,1080]', '(1080,1085]', '(1085,1090]', '(1090,1095]', '(1095,1100]', '(1100,1105]', '(1105,1110]', '(1110,1115]', '(1115,1120]', '(1120,1125]', '(1125,1130]', '(1130,1135]'), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort6_6527ae8e8bfa9b6ef80afe1471d4a9c0() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrange_testrange1_95f6ba5e1e205865d332388bdf381467() {
        assertEval("argv <- list(c(0.0303542455381287, 0.030376780241572, 0.030376780241572, 0.0317964665585001, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0334189652064179, 0.0352217414818821, 0.0354245538128718, 0.0354245538128718, 0.0376780241572021, 0.0376780241572021, 0.0376780241572021, 0.0376780241572021, 0.0406300703082748, 0.0406300703082748, 0.0406300703082748, 0.0440778799351001, 0.048021453037678, 0.0524607896160087, 0.0524607896160087, 0.0524607896160087, 0.0628267531999279, 0.0693167477915991, 0.0981611681990265, 0.134937804218497, 0.179646655850009, 0.437804218496485), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange10_50d77fbfd0a7e8211b21107dda47c157() {
        assertEval("argv <- list(structure(c(-3.5527136788005e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.21724893790088e-15, -1.77635683940025e-15, -8.88178419700125e-16, -1.33226762955019e-15, -1.22124532708767e-15, -8.88178419700125e-16, -1.33226762955019e-15, -1.22124532708767e-15, -1.33226762955019e-15, -1.11022302462516e-15, -8.88178419700125e-16, -1.33226762955019e-15, -8.88178419700125e-16, -8.88178419700125e-16, -4.44089209850063e-16, -4.44089209850063e-16, -1.22124532708767e-15, -1.22124532708767e-15, -8.88178419700125e-16, -1.33226762955019e-15, -8.88178419700125e-16, -4.44089209850063e-16, -6.66133814775094e-16, -7.7715611723761e-16, -4.44089209850063e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -1.33226762955019e-15, -1.33226762955019e-15, -1.33226762955019e-15, -8.88178419700125e-16, -1.11022302462516e-15, -4.44089209850063e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -1.33226762955019e-15, -1.33226762955019e-15, -8.88178419700125e-16, -4.44089209850063e-16, -1.22124532708767e-15, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -1.33226762955019e-15, -1.22124532708767e-15, 5.91171556152403e-12, -1.59161572810262e-12, 4.54747350886464e-13, 1.02318153949454e-12, 1.13686837721616e-12, 4.54747350886464e-13, 9.09494701772928e-13, 9.09494701772928e-13, 1.02318153949454e-12, 9.09494701772928e-13, 0, 9.09494701772928e-13, 4.54747350886464e-13, 0, 0, 3.41060513164848e-13, 9.66338120633736e-13, 1.19371179607697e-12, 2.27373675443232e-13, 9.66338120633736e-13, 2.27373675443232e-13, 0, 4.54747350886464e-13, 9.66338120633736e-13, 0, 6.82121026329696e-13, 4.54747350886464e-13, 2.27373675443232e-13, 4.54747350886464e-13, 1.08002495835535e-12, 1.02318153949454e-12, 8.5265128291212e-13, 7.38964445190504e-13, 9.09494701772928e-13, 4.54747350886464e-13, 5.6843418860808e-13, 7.105427357601e-13, 3.41060513164848e-13, 0, 0, 9.66338120633736e-13, 1.02318153949454e-12, 0, 4.54747350886464e-13, 1.13686837721616e-12, 1.05160324892495e-12, 9.09494701772928e-13, 3.41060513164848e-13, 8.38440428196918e-13, 1.4210854715202e-12, 1.15463194561016e-14, -8.88178419700125e-16, -1.33226762955019e-15, -2.02615701994091e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 8.88178419700125e-16, 2.22044604925031e-15, 1.77635683940025e-15, 0, 1.33226762955019e-15, 8.88178419700125e-16, 2.22044604925031e-15, 2.22044604925031e-15, 1.77635683940025e-15, 1.77635683940025e-15, 8.88178419700125e-16, 4.44089209850063e-16, 0, 1.77635683940025e-15, 8.88178419700125e-16, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.11022302462516e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.55431223447522e-15, 1.66533453693773e-15, 2.66453525910038e-15, 8.88178419700125e-16, 8.88178419700125e-16, 8.88178419700125e-16, 8.88178419700125e-16, 8.88178419700125e-16, 8.88178419700125e-16, 1.77635683940025e-15, 2.22044604925031e-15, 8.88178419700125e-16, 2.22044604925031e-15, 3.77475828372553e-15, 1.77635683940025e-15, 0, 1.33226762955019e-15, 0, 2.66453525910038e-15), .Dim = c(50L, 4L), .Dimnames = list(c('Australia', 'Austria', 'Belgium', 'Bolivia', 'Brazil', 'Canada', 'Chile', 'China', 'Colombia', 'Costa Rica', 'Denmark', 'Ecuador', 'Finland', 'France', 'Germany', 'Greece', 'Guatamala', 'Honduras', 'Iceland', 'India', 'Ireland', 'Italy', 'Japan', 'Korea', 'Luxembourg', 'Malta', 'Norway', 'Netherlands', 'New Zealand', 'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Philippines', 'Portugal', 'South Africa', 'South Rhodesia', 'Spain', 'Sweden', 'Switzerland', 'Turkey', 'Tunisia', 'United Kingdom', 'United States', 'Venezuela', 'Zambia', 'Jamaica', 'Uruguay', 'Libya', 'Malaysia'), c('pop15', 'pop75', 'dpi', 'ddpi'))), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange11_69ed5df91e9420b3a2564f75bbdaa3ef() {
        assertEval("argv <- list(structure(c(4L, 5L, 1L, 5L, 3L, 4L, 5L, 3L, 2L, 4L), .Label = c('a', 'c', 'i', 's', 't'), class = c('ordered', 'factor')), structure(c(4L, 2L, 3L, 5L, 4L, 3L, 5L, 1L, 5L, 4L), .Label = c('a', 'c', 'i', 's', 't'), class = c('ordered', 'factor')), na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange12_83e6d67fe82289bfffd0da8c2bb638fd() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101), .Tsp = c(1, 101, 1), class = 'ts'), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange13_a6bcd01bfb554f1fa83fc60b021cd511() {
        assertEval("argv <- list(c(NA, 1, 2, 3, -Inf, NaN, Inf), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange14_3cb130d9fab66d6ae5325c61692d575e() {
        assertEval("argv <- list(c(14.43333, 65.7667), finite = TRUE, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange15_ca33af557f9f65ece5455d08667d5268() {
        assertEval("argv <- list(structure(c(1, 13, 31), .Dim = 3L, .Dimnames = list(c('1st', '2nd', '3rd'))), finite = TRUE, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange16_c6aec537e2da44ae13fb9e0e8ba97611() {
        assertEval("argv <- list(list(), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange17_50bd91c099c0512c4786b2764443f68d() {
        assertEval("argv <- list(structure(c(1012633320L, 1012633620L), class = c('POSIXct', 'POSIXt'), tzone = ''), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange18_579ff4b80053125d3d9eb42d91a28b20() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange19_17532a327c2ebd9a94c3aafe60e07348() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange2_1362736cb70ab0f34f0f333e9432899a() {
        assertEval("argv <- list(structure(c(52L, 52L), .Names = c('y', 'x')), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange20_772434a75f08cf2ecb4b077af62de65e() {
        assertEval("argv <- list(c(2.00256647265648e-308, 2.22284878464869e-308, 2.22507363599982e-308, 2.2250738585072e-308, 2.22507408101459e-308, 2.22729893236571e-308, 2.44758124435792e-308), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange21_4ba0cfb76b1b3e24a83c17c361f306c7() {
        assertEval("argv <- list(structure(c(12053, 12054, 12055, 12056, 12057, 12058, 12059, 12060, 12061, 12062), class = 'Date'), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange22_5b633751a5bba349521423ba544a71f8() {
        assertEval("argv <- list(structure(c(1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, NA, 1L, 1L, 2L, 1L, 1L, NA, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, NA, 2L, 2L, 1L, NA, 2L, 2L, NA, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L), .Dim = c(20L, 6L), .Dimnames = list(c('ant', 'bee', 'cat', 'cpl', 'chi', 'cow', 'duc', 'eag', 'ele', 'fly', 'fro', 'her', 'lio', 'liz', 'lob', 'man', 'rab', 'sal', 'spi', 'wha'), c('war', 'fly', 'ver', 'end', 'gro', 'hai'))), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange23_43b1c1ab220765390328bc4be46dc1fb() {
        assertEval("argv <- list(structure(c(13823, NA), class = 'Date'), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange24_eee651b51c64b5a1a3fba55059aa8c11() {
        assertEval("range( );");
    }

    @Test
    public void TestrGenBuiltinrange_testrange25_ee5e5b6cad1371347dac9cb7c17bc335() {
        assertEval("argv <- list(structure(c(1949, 1949.08333333333, 1949.16666666667, 1949.25, 1949.33333333333, 1949.41666666667, 1949.5, 1949.58333333333, 1949.66666666667, 1949.75, 1949.83333333333, 1949.91666666667, 1950, 1950.08333333333, 1950.16666666667, 1950.25, 1950.33333333333, 1950.41666666667, 1950.5, 1950.58333333333, 1950.66666666667, 1950.75, 1950.83333333333, 1950.91666666667, 1951, 1951.08333333333, 1951.16666666667, 1951.25, 1951.33333333333, 1951.41666666667, 1951.5, 1951.58333333333, 1951.66666666667, 1951.75, 1951.83333333333, 1951.91666666667, 1952, 1952.08333333333, 1952.16666666667, 1952.25, 1952.33333333333, 1952.41666666667, 1952.5, 1952.58333333333, 1952.66666666667, 1952.75, 1952.83333333333, 1952.91666666667, 1953, 1953.08333333333, 1953.16666666667, 1953.25, 1953.33333333333, 1953.41666666667, 1953.5, 1953.58333333333, 1953.66666666667, 1953.75, 1953.83333333333, 1953.91666666667, 1954, 1954.08333333333, 1954.16666666667, 1954.25, 1954.33333333333, 1954.41666666667, 1954.5, 1954.58333333333, 1954.66666666667, 1954.75, 1954.83333333333, 1954.91666666667, 1955, 1955.08333333333, 1955.16666666667, 1955.25, 1955.33333333333, 1955.41666666667, 1955.5, 1955.58333333333, 1955.66666666667, 1955.75, 1955.83333333333, 1955.91666666667, 1956, 1956.08333333333, 1956.16666666667, 1956.25, 1956.33333333333, 1956.41666666667, 1956.5, 1956.58333333333, 1956.66666666667, 1956.75, 1956.83333333333, 1956.91666666667, 1957, 1957.08333333333, 1957.16666666667, 1957.25, 1957.33333333333, 1957.41666666667, 1957.5, 1957.58333333333, 1957.66666666667, 1957.75, 1957.83333333333, 1957.91666666667, 1958, 1958.08333333333, 1958.16666666667, 1958.25, 1958.33333333333, 1958.41666666667, 1958.5, 1958.58333333333, 1958.66666666667, 1958.75, 1958.83333333333, 1958.91666666667, 1959, 1959.08333333333, 1959.16666666667, 1959.25, 1959.33333333333, 1959.41666666667, 1959.5, 1959.58333333333, 1959.66666666667, 1959.75, 1959.83333333333, 1959.91666666667, 1960, 1960.08333333333, 1960.16666666667, 1960.25, 1960.33333333333, 1960.41666666667, 1960.5, 1960.58333333333, 1960.66666666667, 1960.75, 1960.83333333333, 1960.91666666667, 1961, 1961.08333333333, 1961.16666666667, 1961.25, 1961.33333333333, 1961.41666666667, 1961.5, 1961.58333333333, 1961.66666666667, 1961.75, 1961.83333333333, 1961.91666666667, 1962, 1962.08333333333, 1962.16666666667, 1962.25, 1962.33333333333, 1962.41666666667, 1962.5, 1962.58333333333, 1962.66666666667, 1962.75, 1962.83333333333, 1962.91666666667), .Tsp = c(1949, 1962.91666666667, 12), class = 'ts'), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange26_c7d2bd70b884cb82f056c09219b3e0f4() {
        assertEval("argv <- list(c(1.47191076131574, 0.586694550701453, 0.258706725324317, 0.948371836939988, 0.396080061109718, 0.350912037541581), finite = TRUE, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange27_126a6575d96a29afa3a975e38e8aa25a() {
        assertEval("argv <- list(structure(c(-11.3814849918875, -11.9361690778798, 0.562602893455921, 11.5126028934559, 76.2209544348296, -8.66448499188751, -6.94502893455923, -5.28148499188751, -35.7665182531098, 6.35497106544077, -9.20908119253651, -0.898484991887508, -5.59380090589508, -6.12730922120065, -13.3061334505138, 58.6278831800973, -15.1098009058951, -8.29625696322337, -4.07211681990265, 3.7096551514332, 2.60151500811249, 6.24733923742563, -1.33911681990266, -2.14157287723094, -10.5984849918875, -8.12802893455923, 1.30028697944835, -15.7450289345592, 7.20569077879935, -12.6484849918875, 25.1810423201731, -4.42680090589508, -1.90886979448351), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange28_e01b3941375b3911bf122bef2bfe26b1() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange29_7369459f26f470e858c22f6787a64cf7() {
        assertEval("argv <- list(structure(c(1208822400, 1209168000, 1208822400, 1209168000), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange3_4289c23d042dd8efaa4b5d9e7fd3c226() {
        assertEval("argv <- list(c(-2.92498527625946, 2.46253591019012), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange30_15ae0b8e159ef110c0dce995ee0bc74c() {
        assertEval("argv <- list(c(1.86606598307361, 339033474310168, 6.15968019059533e+28, 1.11911250438065e+43, 2.03324321833028e+57, 3.69406826275609e+71, 6.71151400229846e+85, 1.21937162496937e+100, 2.2153975381282e+114, 4.02501267984465e+128, 7.31278553581751e+142, 1.32861276588395e+157, 2.41387071044804e+171, 4.38560576593759e+185, 7.96792382084694e+199, 1.44764060891943e+214, 2.63012470966353e+228, 4.77850368783602e+242, 8.6817546752692e+256, 1.57733192575377e+271), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange31_3ac1afb082bd87784fd8014ccb720338() {
        assertEval("argv <- list(structure(c(1, 0.666666666666667, 0.333333333333333, 0, -0.333333333333333, -0.666666666666667, -1, -1.33333333333333, -1.66666666666667, 1.5, 1, 0.5, 0, -0.5, -1, -1.5, -2, -2.5, 3, 2, 1, 0, -1, -2, -3, -4, -5, -Inf, -Inf, -Inf, NaN, Inf, Inf, Inf, Inf, Inf, -3, -2, -1, 0, 1, 2, 3, 4, 5, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, -1, -0.666666666666667, -0.333333333333333, 0, 0.333333333333333, 0.666666666666667, 1, 1.33333333333333, 1.66666666666667, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1, 1.25, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1), .Dim = c(9L, 9L)), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange4_e37a3d2afb86c64c2d3f34b91e8b52d7() {
        assertEval("argv <- list(c(1.4615016373309e+48, 5.70899077082384e+45, 2.23007451985306e+43, 8.71122859317602e+40, 3.40282366920938e+38, 1.32922799578492e+36, 5.19229685853483e+33, 2.02824096036517e+31, 7.92281625142643e+28, 3.09485009821345e+26, 1.20892581961463e+24, 4.72236648286965e+21, 18446744073709551616, 72057594037927936, 281474976710656, 1099511627776, 4294967296, 16777216, 65536, 256, 1, 0.00390625, 1.52587890625e-05, 5.96046447753906e-08, 2.3283064365387e-10, 9.09494701772928e-13, 3.5527136788005e-15, 1.38777878078145e-17, 5.42101086242752e-20, 2.11758236813575e-22, 8.27180612553028e-25), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange5_483d5a9433b8af77923bfc55085857b7() {
        assertEval("argv <- list(1:3, finite = TRUE, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange6_543a7d7f0eb4e10169280ee4e6d9f297() {
        assertEval("argv <- list(c(1L, 3L, 7L, 14L, 21L, 20L, 19L, 9L, 4L, 2L), 0, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange7_d23b14406a15403ccb13aec607da16dd() {
        assertEval("argv <- list(c(8.2, 9.7, 12.25, 16.5, 21.5, 14.5, 20, 23.45, 25.8, 27.3, 22.4, 24.5, 25.95, 27.3, 30.9), numeric(0), NULL, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange8_ed3c132e8605a668d3e363e592c434a9() {
        assertEval("argv <- list(structure(c(3L, 2L, 1L), .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrange_testrange9_50e22ebb3787e7b87ac286566ba149d6() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L), hour = c(8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L, 16L, 16L, 16L, 16L, 16L, 16L, 17L, 17L, 17L, 17L, 17L, 17L, 18L, 18L, 18L, 18L, 18L, 18L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 20L, 20L, 21L, 21L, 21L, 21L, 21L, 21L, 22L, 22L, 22L, 22L, 22L, 23L, 23L, 23L, 23L, 23L, 23L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L), mday = cmon = c(11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L), year = c(90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L), wday = c(3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L), yday = cisdst = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt')), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrank_testrank1_48a4b5446a8501dc2186dfdfff23c3e5() {
        assertEval("argv <- list(c(1, 2, 3), 3L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank10_df0c906064ab3f8e2500083304c7406d() {
        assertEval("argv <- list(c(0.0244473121385049, 0.0208069652959635, 0.00198363254553387, -0.0529221973952693, 0.0164890605562422, -0.00149317802331189, -0.00414458668937225, -0.0391260369607497, -0.0127200995448093, 0.0111183888673723, 0.03614459302116, -0.00273443474452932, 0.0103131254237995, -0.00143136127438401, -0.0366335514444555, -0.0110399906877088, -0.0104891914308669, -0.00157789861665007, 0.0292636842429564, 0.0203025627349537, -0.0043767777488601, -0.00674011381520054, 0.0185411324740319, 0.0148087639526725, -0.0183227857094651, -0.018821306675337, 0.00969887758262181, 0.0204450782737623, -0.00298871658962484, 0.0234398759771181, 0.0105907055191967, -0.0162815763859567, 0.00907471699575067, -0.0300441479633801, 0.0381223507996197, 0.0526840550960561, -0.00976909588473167, -0.0277768375074461, 0.0151561006764977, -0.00359282193318711, 0.0638896025542924, -0.0010438914218908, 0.0183489539666666, 0.00074493402929487, -0.0197731007347187, 0.00502239164768132, -0.048016837368221, 0.0389877686476984, 0.00407695805281634, 0.057797414062711, 0.0126498543239424, -0.0188865172686347, 0.0162469917717659, -0.0248495524200794, -0.0333500780212535, 0.00775326717655591, -0.0117927765447241, 2.9405377320478e-05, 0.00197768259858777, -0.0156828699257579, -0.0151281440045609, -0.00359612097150966, 0.0313403370108415, -0.0405310449252812, 0.0158005934542395, 0.00885739072926609, 0.0282813640022565, -0.00809212452705879, 0.00984351260718323, 0.00710555853883393, -0.0144325170007544, 0.0321325880127445, 0.0308698841001781, 0.0186275986571656, 0.0422141110037264, 0.0148572667758066, -0.033960845128472, -0.0152504283054679, -0.0325780457387957, -0.0125937520151832, -0.0165034507562293, 0.00112039744236678, -0.0242330078671155, 0.00420399766652167, -0.0174137422806726, 0.047014676147193, 0.0190663795644171, 0.0242131244754732, 0.0102203815371289, 0.0447504856843389, -0.0169123288643312, -0.0122810127527625, 0.0381026258511537, -0.0173103031132602, -0.00551689511296685, -0.0104497655309428, -0.00851268571043338, -0.00742517743166594, 0.0131467615666842, -0.00471747595278646, -1.01191492422851, 2.68607765034082, -0.429158817093737, -0.359113060086774, -0.200381482427124, 1.42533261410281, -0.147128808252653, -0.0752683429340958, -1.36332095751131, -0.648540544492638, 0.12032088086903, -1.17778897251933, 1.06299238526514, -3.03678816357357, 0.613115721579531, -3.07289964707517, -0.601952253673221, -1.05655980889001, -1.304189561362, -0.113793555694785, -3.82871885136002, 2.35316662403712, -3.32994487242401, -0.927060802944771, -2.23184021008569, -1.5016380023869, 4.17433309125669, 0.0347912393865033, -2.57260106086865, -3.28121106883716, 0.900374202545311, -0.037119665429276, -0.636136749087689, -1.8587242949074, -2.97492062028297, -2.15038459323136, 2.00005760742783, -1.24253338959365, -2.76885369476898, 3.73858124484716, 0.850200754744896, -0.477294201826066, 2.11696609741804, 1.77284530274987, -1.23848609646229, 4.41220492908093, -0.51005406028203, -2.84898930042562, -0.288799203908439, 0.41507667846469, 4.61595679811872, 0.211604735787423, 0.913997610846827, -0.154305870713062, -0.668001684733089, -0.0694520566225524, 1.57527921126032, 4.15049001730457, 2.05478487752754, 2.41581679677341, -2.46264684311609, 1.96779114010676, 0.439849607321303, -2.93450005818449, 1.04204548529628, -0.317509209432032, 2.92917462393959, -1.53216399920933, -0.860423507857093, -1.85221899475487, -0.354207922873081, 0.804023558972676, -1.46349634623921, 1.66074633596335, -2.41616557260893, -2.09596882561548, 2.88231541368856, -2.0316949306093, 0.82394942463503, -0.762152102217839, 0.818803679301868, 3.37774657240809, 3.17317686688394, -0.661815601365533, -4.57047107058493, 4.99532317966833, 1.33413233353099, 1.0826546719274, -0.0267990462918174, 1.02021684590585, -0.328751663539334, 0.841389286509026, -0.800493487955288, -2.74041575509492, 1.97567653490976, 3.03949005099909, -0.617481138451227, -2.50657951121538, 1.28448261135565, -0.0894182737879582), 200L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank11_307c7ca3820dfbd7de9ffcdec7964b6b() {
        assertEval("argv <- list(structure(c(4, 7, 6, 0, 0, 2, 4, 9, 3, 6, 0, 1, 5.5, 0.5, 4.5, 5.5, 0.5, 2.5, 0.5, 0.5, 2.5, 4.5, 9.5, 3.5, 1.5, 0.5, 5.5, 0.5, 1.5, 0.5, 0.5, 0.5, 1.5, 1.5, 0.5, 2.5, 2, 0, 7, 1, 1, 2, 0, 0, 0, 0, 3, 1, 0, 2, 0, 2, 0, 3, 2, 2, 0, 1, 3, 1, 4, 6, 0, 7, 0, 1, 2, 5, 11, 11, 9, 2), .Dim = 72L, .Dimnames = list(c('A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'))), 72L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank2_e96f4bc1436e47e4ba7c28e7ef589724() {
        assertEval("argv <- list(list(), 0L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank3_efb65e5226bdb9cf3130ca584be1d750() {
        assertEval("argv <- list(c(FALSE, FALSE), 2L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank4_8a5c34bac583832006afb3d9ea771c82() {
        assertEval("argv <- list(c(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60), 60L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank5_a3e4671ab4282ff6205f3cea7793ebc9() {
        assertEval("argv <- list(structure(c(9.96, 84.84, 93.4, 33.77, 5.16, 90.57, 92.85, 97.16, 97.67, 91.38, 98.61, 8.52, 2.27, 4.43, 2.82, 24.2, 3.3, 12.11, 2.15, 2.84, 5.23, 4.52, 15.14, 4.2, 5.23, 2.56, 7.72, 18.46, 6.1, 99.71, 99.68, 100, 98.96, 98.22, 99.06, 99.46, 96.83, 5.62, 13.79, 11.22, 16.92, 4.97, 8.65, 42.34, 50.43, 58.33), .Names = c('Courtelary', 'Delemont', 'Franches-Mnt', 'Moutier', 'Neuveville', 'Porrentruy', 'Broye', 'Glane', 'Gruyere', 'Sarine', 'Veveyse', 'Aigle', 'Aubonne', 'Avenches', 'Cossonay', 'Echallens', 'Grandson', 'Lausanne', 'La Vallee', 'Lavaux', 'Morges', 'Moudon', 'Nyone', 'Orbe', 'Payerne', 'Paysd'enhaut', 'Rolle', 'Vevey', 'Yverdon', 'Conthey', 'Entremont', 'Herens', 'Martigwy', 'Monthey', 'St Maurice', 'Sierre', 'Sion', 'Boudry', 'La Chauxdfnd', 'Le Locle', 'Neuchatel', 'Val de Ruz', 'ValdeTravers', 'V. De Geneve', 'Rive Droite', 'Rive Gauche')), 46L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank6_37a92e56c64fdd44c2cc0d2d8a870a7e() {
        assertEval("argv <- list(structure(c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5), .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')), 11L, 'max'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank7_3c88f1c0257cc66b5b6794363847a1b1() {
        assertEval("argv <- list(c('9', '9', '8', '7', '6', '5', '4', '3', '2', '1'), 10L, 'min'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank8_0547e2f92789138f7dd8d8a903bf4109() {
        assertEval("argv <- list(c(2, 1, 3, 4, 5), 5L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinrank_testrank9_061a8da99833b1bef5bcf0b2c3a0f511() {
        assertEval("argv <- list(structure(c('Tukey', 'Venables', 'Tierney', 'Ripley', 'Ripley', 'McNeil', 'R Core'), class = 'AsIs'), 7L, 'min'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinraw_testraw1_198dae97c505c2a18715490e28d60f70() {
        assertEval("argv <- structure(list(length = 0), .Names = 'length');do.call('raw', argv)");
    }

    @Test
    public void TestrGenBuiltinrawShift_testrawShift1_65fee20e09d47fbcdaf79ea8ac9ea101() {
        assertEval("argv <- structure(list(x = as.raw(c(109, 121, 32, 116, 101, 120,     116)), n = 0L), .Names = c('x', 'n'));do.call('rawShift', argv)");
    }

    @Test
    public void TestrGenBuiltinrawShift_testrawShift2_3b5a2b8299b545cdb15e035822c431f9() {
        assertEval("argv <- structure(list(x = as.raw(c(109, 121, 32, 116, 101, 120,     116)), n = 3L), .Names = c('x', 'n'));do.call('rawShift', argv)");
    }

    @Test
    public void TestrGenBuiltinrawToChar_testrawToChar1_f511c88a462763711e0d0997753aff12() {
        assertEval("argv <- structure(list(x = as.raw(c(115, 116, 114, 105, 110,     103))), .Names = 'x');do.call('rawToChar', argv)");
    }

    @Test
    public void TestrGenBuiltinrbind_testrbind1_9c2b3fbb1e37535159b42729f4b6e744() {
        assertEval("argv <- list(structure(c(3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,     8, 8, 8, 8, 8, 9, 9, 11, 11, 13, 13, 13, 13, 13, 13, 13,     14, 14, 14, 14, 16, 16, 31, 31, 31, 33, 33, 43, 43, 43, 61,     61, 61, 62, 62, 106, 106, 110, 110, 110, 110, 163, 163, 165,     165, 165, 168, 168, 172, 172, 172, 204, 204, 206, 206, 206,     206, 206, 211, 211, 241, 241, 241, 241, 244, 244, 249, 249,     250, 250, 250, 250, 252, 252, 252, 252, 252, 252, 252, 252,     252, 252, 252, 252, 256, 256, 265, 265, 265, 265, 265, 265,     265, 265, 265, 267, 267, 267, 269, 269, 269, 291, 291, 291,     291, 291, 291, 291, 312, 312, 312, 312, 312, 314, 314, 314,     314, 314, 2.484906649788, 6.27476202124194, 3.97029191355212,     3.98898404656427, 4.52178857704904, 0, 2.30258509299405,     4.59511985013459, 1.6094379124341, 2.94443897916644, 1.94591014905531,     2.99573227355399, 4.36944785246702, 1.38629436111989, 2.39789527279837,     3.98898404656427, 2.07944154167984, 5.64897423816121, 5.75574221358691,     2.89037175789616, 3.09104245335832, 4.70953020131233, 4.98360662170834,     1.6094379124341, 1.6094379124341, 4.70048036579242, 1.6094379124341,     4.54329478227, 1.6094379124341, 4.49980967033027, 5.62762111369064,     5.11799381241676, 2.39789527279837, 6.28785856016178, 5.4380793089232,     3.63758615972639, 5.76205138278018, 2.83321334405622, 5.7037824746562,     5.90263333340137, 3.40119738166216, 3.63758615972639, 4.31748811353631,     5.58724865840025, 5.32787616878958, 4.06044301054642, 6.22059017009974,     6.20455776256869, 5.2040066870768, 6.20253551718792, 3.78418963391826,     2.94443897916644, 2.63905732961526, 6.24804287450843, 2.63905732961526,     5.74620319054015, 1.79175946922805, 5.44241771052179, 4.99721227376411,     5.93753620508243, 4.02535169073515, 4.74493212836325, 5.90536184805457,     6.00388706710654, 4.91998092582813, 5.73979291217923, 3.13549421592915,     3.17805383034795, 3.58351893845611, 4.89783979995091, 4.49980967033027,     6.0913098820777, 5.75257263882563, 2.30258509299405, 2.77258872223978,     5.28826703069454, 6.10924758276437, 4.74493212836325, 6.16331480403464,     4.57471097850338, 3.55534806148941, 1.38629436111989, 4.46590811865458,     5.93224518744801, 0.693147180559945, 3.95124371858143, 4.0943445622221,     3.17805383034795, 2.484906649788, 5.15905529921453, 3.80666248977032,     2.484906649788, 3.3322045101752, 1.94591014905531, 2.77258872223978,     4.71849887129509, 6.23244801655052, 2.99573227355399, 3.71357206670431,     3.36729582998647, 5.64897423816121, 3.55534806148941, 0.693147180559945,     3.04452243772342, 4.30406509320417, 2.56494935746154, 3.61091791264422,     4.69134788222914, 5.93753620508243, 4.95582705760126, -0.693147180559945,     3.87120101090789, 6.31896811374643, 6.06145691892802, 1.79175946922805,     2.19722457733622, 2.07944154167984, 2.07944154167984, 1.94591014905531,     4.51085950651685, 5.85507192220243, 4.57471097850338, 0.693147180559945,     1.6094379124341, 4.36944785246702, 5.36129216570943, 4.40671924726425,     4.85981240436167, 3.61091791264422, 3.73766961828337, 1,     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,     0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0,     1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0,     1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,     0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,     1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,     1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,     0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,     1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1,     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1,     1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1,     0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,     1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1,     1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,     1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,     1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,     0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0,     1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1,     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1,     1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,     0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0,     0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,     1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,     1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,     0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1,     1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1), .Dim = c(130L, 10L)),     structure(c(316, 316, 316, 5.3890717298165, 2.39789527279837,         5.67332326717149, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0,         0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0), .Dim = c(3L, 10L)));do.call('rbind', argv)");
    }

    @Test
    public void TestrGenBuiltinrbind_testrbind2_01724b0566ea6f3632d7564162e3f8e4() {
        assertEval("argv <- list(c(0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,     1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,     1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 6L, 1L, 0L, 1L, 20L, 1L,     0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 4L, 0L, 0L, 3L,     6L, 2L, 0L, 14L, 1L, 0L, 16L, 0L, 1L, 0L, 5L, 1L, 0L, 2L,     4L, 0L, 0L, 5L, 0L, 2L, 0L, 1L, 7L, 2L, 0L, 0L, 2L, 0L, 0L,     0L, 0L, 0L, 0L, 1L, 2L, 0L, 0L, 0L, 4L, 0L, 0L, 4L, 0L, 0L,     0L, 0L, 5L, 0L, 18L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     5L, 0L, 10L, 0L, 2L, 2L, 6L, 0L, 5L, 7L, 0L, 3L, 0L, 1L,     0L, 3L, 2L, 0L, 5L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L,     3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L,     0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 3L, 0L, 1L, 3L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 4L, 5L, 0L, 0L,     0L, 4L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 2L, 0L,     0L, 2L), c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 1L, 5L, 1L, 0L, 1L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 7L, 0L, 0L, 0L, 0L, 7L, 0L, 0L, 1L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 8L, 3L, 3L, 0L, 0L, 1L, 0L,     0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 0L, 1L, 0L, 0L,     0L, 0L, 2L, 0L, 0L, 7L, 0L, 1L, 0L, 13L, 1L, 2L, 0L, 0L,     0L, 0L, 0L, 5L, 0L, 2L, 0L, 8L, 0L, 3L, 0L, 0L, 5L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,     10L, 0L, 0L, 27L, 3L, 1L, 0L, 0L, 0L, 0L, 2L, 3L, 0L, 1L,     1L, 0L, 4L, 7L, 6L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 14L, 8L,     0L, 0L, 19L, 0L, 0L, 0L, 1L, 0L, 2L, 0L, 6L, 2L, 2L, 0L,     0L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 1L, 1L, 8L, 0L, 0L, 2L,     0L, 4L, 0L, 2L, 0L, 0L, 0L, 3L, 0L, 8L, 0L, 0L, 1L, 0L, 1L,     1L, 0L));do.call('rbind', argv)");
    }

    @Test
    public void TestrGenBuiltinrbind_testrbind3_b8a72ff37f628ed5d1404370926cdb30() {
        assertEval("argv <- list(c(32L, 34L, 37L, 33L, 20L, 40L, 39L, 22L, 33L, 37L,     37L, 38L, 39L, 37L, 36L, 39L, 39L, 40L, 37L, 38L, 35L, 40L,     17L, 39L, 40L, 34L, 40L, 37L, 26L, 40L, 33L, 36L, 38L, 27L,     36L, 36L, 37L, 39L, 40L, 37L, 39L, 40L, 38L, 32L, 37L, 36L,     17L, 36L, 39L, 34L, 40L, 40L, 40L, 37L, 40L, 38L, 39L, 36L,     38L, 40L, 39L, 38L, 39L, 38L, 38L, 40L, 33L, 39L, 40L, 33L,     36L, 34L, 40L, 37L, 26L, 37L, 40L, 40L, 40L, 36L, 39L, 33L,     38L, 40L, 13L, 37L, 22L, 40L, 37L, 40L, 27L, 39L, 35L, 36L,     31L, 24L, 39L, 32L, 38L, 38L), c(8, 6, 3, 7, 20, 0, 1, 18,     7, 3, 3, 2, 1, 3, 4, 1, 1, 0, 3, 2, 5, 0, 23, 1, 0, 6, 0,     3, 14, 0, 7, 4, 2, 13, 4, 4, 3, 1, 0, 3, 1, 0, 2, 8, 3, 4,     23, 4, 1, 6, 0, 0, 0, 3, 0, 2, 1, 4, 2, 0, 1, 2, 1, 2, 2,     0, 7, 1, 0, 7, 4, 6, 0, 3, 14, 3, 0, 0, 0, 4, 1, 7, 2, 0,     27, 3, 18, 0, 3, 0, 13, 1, 5, 4, 9, 16, 1, 8, 2, 2));do.call('rbind', argv)");
    }

    @Test
    public void TestrGenBuiltinrcond_testrcond1_eef9e4dfda6e6cf09a217649ed5d38cb() {
        assertEval("argv <- structure(list(x = structure(c(FALSE, TRUE, FALSE, TRUE,     TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE,     TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE,     TRUE, TRUE, TRUE), .Dim = c(5L, 5L))), .Names = 'x');do.call('rcond', argv)");
    }

    @Test
    public void TestrGenBuiltinrcond_testrcond2_70b535c0a25a5c3e4452ff2b0c7941c7() {
        assertEval("argv <- structure(list(x = structure(c(0.483017750550061 + (0+0i),     0.399143285583705 + (0+0i), 0.0162145779468119 + (0+0i),     0.125083255348727 + (0+0i), 0.0706489166477695 + (0+0i),     0.504917626501992 + (0+0i), 0.327679358422756 + (0+0i), 0.411779605317861 +         (0+0i), 0.202413034392521 + (0+0i), 0.307096319855191 +         (0+0i), 0.642031987197697 + (0+0i), 0.276873307069764 +         (0+0i), 0.103556007146835 + (0+0i), 0.256002754438668 +         (0+0i), 0.179779380792752 + (0+0i), 0.247455857461318 +         (0+0i), 0.215011228807271 + (0+0i), 0.493673762306571 +         (0+0i), 0.653446026844904 + (0+0i), 0.573559894575737 +         (0+0i), 0.863887825980783 + (0+0i), 0.637789903208613 +         (0+0i), 0.0137805955018848 + (0+0i), 0.529164811130613 +         (0+0i), 0.271472703316249 + (0+0i)), .Dim = c(5L, 5L))),     .Names = 'x');do.call('rcond', argv)");
    }

    @Test
    public void TestrGenBuiltinreadChar_testreadChar1_f156fb5fd4a59405143b9121d2fccf9f() {
        assertEval("argv <- structure(list(con = as.raw(c(65, 66, 67, 68, 69, 70,     71, 72, 73, 74)), nchars = c(3, 3, 0, 3, 3, 3)), .Names = c('con',     'nchars'));do.call('readChar', argv)");
    }

    @Test
    public void TestrGenBuiltinregexec_testregexec1_3e88cb17b9f87db5c0838bf7c74781c7() {
        assertEval("argv <- list('^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)', 'http://stat.umn.edu:80/xyz', FALSE, FALSE, FALSE); .Internal(regexec(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr1_b6f240f11cc3b7b8fc6e7bc2efc9eb7f() {
        assertEval("argv <- list('package:', 'exNSS4', FALSE, FALSE, TRUE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr10_d1b7d2bb0a0f4cbd12d1f8326aad6f20() {
        assertEval("argv <- list('package:', 'environmental', FALSE, FALSE, TRUE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr12_81665c3fee70408c8fd6fa9609f05689() {
        assertEval("argv <- structure(list(pattern = '\\d', text = c('1', 'B', '3')),     .Names = c('pattern', 'text'));do.call('regexpr', argv)");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr13_9b4cf8a06a1646bb6c79081f3f2db52b() {
        assertEval("argv <- structure(list(pattern = '[a-z]', text = NA), .Names = c('pattern',     'text'));do.call('regexpr', argv)");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr2_37eb3a0d2845e2d64e3ffc123bd3ce86() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', FALSE, FALSE, TRUE, TRUE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr3_609f90bdd5d9471e4763c2fccc70a56d() {
        assertEval("argv <- list('package:', 'graphics', FALSE, FALSE, TRUE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr4_3a566ba77511d0c212fa6647f00b00a8() {
        assertEval("argv <- list('^.*\\\\{n', 'my(ugly[file{name', FALSE, FALSE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr5_0cce0e9702e8f5ac2c108458c357d258() {
        assertEval("argv <- list('(\\\\\\\\S4method\\\\{([._[:alnum:]]*|\\\\$|\\\\[\\\\[?|\\\\+|\\\\-|\\\\*|\\\\/|\\\\^|<=?|>=?|!=?|==|\\\\&|\\\\||\\\\%[[:alnum:][:punct:]]*\\\\%)\\\\}\\\\{((([._[:alnum:]]+|`[^`]+`),)*([._[:alnum:]]+|`[^`]+`))\\\\})', '\\nread.00Index(file)\\n', FALSE, FALSE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr6_6074b336e6e92e1b0a7c9f39675b6793() {
        assertEval("argv <- list('\\\\.([[:alnum:]]+)$', character(0), FALSE, FALSE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr7_86ce7be97fa8499d3879c357e8fbbf13() {
        assertEval("argv <- list('(?<first>[[:upper:]][[:lower:]]+) (?<last>[[:upper:]][[:lower:]]+)', c('  Ben Franklin and Jefferson Davis', '\\tMillard Fillmore'), FALSE, TRUE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr8_8b3efe350b2d09c965024ae2a6bd5c52() {
        assertEval("argv <- list('^[[:space:]]*@(?i)attribute', '% 4. Relevant Information Paragraph:', FALSE, TRUE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr9_5eee8b3990bbc5e93332018a33b16837() {
        assertEval("argv <- list('package:', 'dummy', FALSE, FALSE, TRUE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
    }

    @Test
    public void TestrGenBuiltinregmatchesassign__testregmatchesassign_1_e27bbabfb7758690fefca1451e5974fa() {
        assertEval("argv <- structure(list(x = c('A', 'B', 'C'), m = structure(c(1L,     -1L, 1L), match.length = c(1L, -1L, 1L), useBytes = TRUE),     value = c('A', 'C')), .Names = c('x', 'm', 'value'));do.call('regmatches<-', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep1_5e493322b4bfdd64b2fb95fe6a03e8c6() {
        assertEval("argv <- list(NA, 7); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep10_b7a5fa11e9dcec70c91ff849955a0d6a() {
        assertEval("argv <- list(c(NA, 3L, 4L), 3L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep11_79d039b793cf3e88291b3fe8e1cb8210() {
        assertEval("argv <- list(c(NA, NA, 30, -30), 4L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep12_3f14b0c0bca6186ed94b3278e97ee046() {
        assertEval("argv <- list(c(2, 3, 4, 5, 6, 7, 12, 22), 8L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep13_776ad0510cfff52576d2b20c978b09a8() {
        assertEval("argv <- list(c('50-54', '55-59', '60-64', '65-69', '70-74'), 20L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep14_be4fd5623a2368997245762295e06dd9() {
        assertEval("argv <- list(987.338461538462, 2L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep15_681303e0eea3dc333c43568cbcb72655() {
        assertEval("argv <- list(1:5, 15); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep16_e84dbb7d0ef75d4529e03c5bd7296462() {
        assertEval("argv <- list(c(NA, 'green', 'black', 'blue'), 4L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep17_8b56a1d3bc47d92eeb60e7bf9fda900e() {
        assertEval("argv <- list(1, 2L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep18_3629b7d2f81b6878c96475fb0a4d39b6() {
        assertEval("argv <- list(0, 0L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep19_c90d87666174b1cfb7ae81bcc7d07e42() {
        assertEval("argv <- list(FALSE, 1L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep2_bcb444aa19088f71b0d6b2b016b227fc() {
        assertEval("argv <- list(NA, 4L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep21_734d354322d652ef7fdaf77b8d9ec8a9() {
        assertEval("argv <- structure(list(1:5, each = 2), .Names = c('', 'each'));do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep22_b576fe388f958209677084c8f23cf426() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 2L, 2L, 2L), .Label = c('Batch1',     'Batch2'), class = 'factor'), 2);do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep23_2791c84ebb3b18213e896e5d96f1678e() {
        assertEval("argv <- list(structure(c(11.3164921459501, 9.56444166646261,     23.868524352596, 8.592077957758, 0.187318691429722, -11.3963997363604,     -6.26079624982537, 6.05560822307356, -6.03903226622761, 4.13503361306269),     .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')),     15);do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep24_e8ee4311f6549a790124e1938920ce65() {
        assertEval("argv <- list(0, 2000);do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep25_9626a75d1f63fe745c3dc735547f3d33() {
        assertEval("argv <- list(0 - (0+2i), 13);do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep26_ee71e4c771a6d7b5cae9e4cd299ff309() {
        assertEval("argv <- list(c(1, 2, 3, 4, 7), c(3, 4, 5, 4, 2));do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep27_b00ca7421c27761b7993676ee521d398() {
        assertEval("argv <- list(1:14, c(3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4));do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep28_f935635a62fb78858d7dbb66862d77bd() {
        assertEval("argv <- structure(list(c(2, 2, -1, -1, -1, -1, 0, 0), each = 48),     .Names = c('', 'each'));do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep29_d4c6824a40b2b677edf29419269067e7() {
        assertEval("argv <- list(c('A', 'B'), c(48L, 44L));do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep3_d2a3119b0e10744506c211eace51d218() {
        assertEval("argv <- list(-Inf, 1L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep30_88aa0c8edd73f6afcec009876bcb23cf() {
        assertEval("argv <- structure(list(c('a', 'b', 'c'), each = 3), .Names = c('',     'each'));do.call('rep', argv)");
    }

    @Test
    public void TestrGenBuiltinrep_testrep4_4218006633b3483f90e20df8b96786d8() {
        assertEval("argv <- list(list(), 0L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep5_10b307732bfe2bb0c3299565142503ce() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep6_85dd5457d73c966d7b92a10752cb66a4() {
        assertEval("argv <- list(c(4.60173175921079, 4.46741031725783, 4.30749719409961, 4.12438637683712, 4.51499342053481, 4.24874137138388, 3.92699081698724, 3.6052402625906, 3.92699081698724), 9L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep7_a315b6cdc653bb0b6be35ac49c198496() {
        assertEval("argv <- list(c(3L, 6L), 2L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep8_539f77294b46ae29056f304f387342a6() {
        assertEval("argv <- list(list(c('                  ', '                ')), 1L); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrep_testrep9_3cc63793e525424d43ae3ba907a85d7a() {
        assertEval("argv <- list(structure(1:4, .Label = c('A', 'B', 'C', 'D'), class = 'factor', .Names = c('a', 'b', 'c', 'd')), 10); .Internal(rep_len(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint1_fbe28e100992f28d660ee44ea6b19f9c() {
        assertEval("argv <- list(1, 6); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint10_dde17f705e40806f5b55beae204599b7() {
        assertEval("argv <- list(c(1L, 1L, 2L, 2L), 6); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint11_dc5555706a58d904ec53294c83e09cb1() {
        assertEval("argv <- list(NA_character_, 3L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint12_2fceba3e68686a96a699896208cf3bb3() {
        assertEval("argv <- list(NA_character_, 5L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint13_d31b70d4e01d550889ad6d9cb34b03cf() {
        assertEval("argv <- list(structure(1:4, .Label = c('A', 'B', 'C', 'D'), class = 'factor', .Names = c('a', 'b', 'c', 'd')), 2); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint14_eb20631d35776b024d237f0e37558b93() {
        assertEval("argv <- list(2e-08, 9); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint15_72dbe7ea9ad32b3c02d87025ccf0d013() {
        assertEval("argv <- list(c('A', 'B'), structure(list(A = 2L, B = 1L), .Names = c('A', 'B'))); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint16_6f01ab7fcbd2cdcbe7eadd25fae98baf() {
        assertEval("argv <- list(0.8625, 2); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint17_7a1213eafa82541b8a351bd5838a5af6() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint18_89d713aa24d3bbc416b09d5b3a7c0fcb() {
        assertEval("argv <- list(c(-1.74520963996789, -1.58308930128988, NA), 100L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint19_a0cb39e445a0be8ce39e2e8af9675046() {
        assertEval("argv <- list(structure(c(1974, 1974.08333333333, 1974.16666666667, 1974.25, 1974.33333333333, 1974.41666666667, 1974.5, 1974.58333333333, 1974.66666666667, 1974.75, 1974.83333333333, 1974.91666666667, 1975, 1975.08333333333, 1975.16666666667, 1975.25, 1975.33333333333, 1975.41666666667, 1975.5, 1975.58333333333, 1975.66666666667, 1975.75, 1975.83333333333, 1975.91666666667, 1976, 1976.08333333333, 1976.16666666667, 1976.25, 1976.33333333333, 1976.41666666667, 1976.5, 1976.58333333333, 1976.66666666667, 1976.75, 1976.83333333333, 1976.91666666667, 1977, 1977.08333333333, 1977.16666666667, 1977.25, 1977.33333333333, 1977.41666666667, 1977.5, 1977.58333333333, 1977.66666666667, 1977.75, 1977.83333333333, 1977.91666666667, 1978, 1978.08333333333, 1978.16666666667, 1978.25, 1978.33333333333, 1978.41666666667, 1978.5, 1978.58333333333, 1978.66666666667, 1978.75, 1978.83333333333, 1978.91666666667, 1979, 1979.08333333333, 1979.16666666667, 1979.25, 1979.33333333333, 1979.41666666667, 1979.5, 1979.58333333333, 1979.66666666667, 1979.75, 1979.83333333333, 1979.91666666667), .Tsp = c(1974, 1979.91666666667, 12), class = 'ts'), 3L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint2_ca8c9ff757cce553d63bd138ba246ff3() {
        assertEval("argv <- list(NA_integer_, 1L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint20_491b0390b66db6a67cedcc2a42873e5a() {
        assertEval("argv <- list(NA, 10L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint21_9def2cb6d04767c085709850cd2ffe4f() {
        assertEval("argv <- list(c('C', 'A', 'B'), structure(list(C = 1L, A = 1L, B = 1L), .Names = c('C', 'A', 'B'))); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint22_f2fd241b8d4ce0b1ff5bfb591fa47510() {
        assertEval("argv <- list(NA_real_, 4L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint23_bdda819c0da849cbde62418e7b2971da() {
        assertEval("argv <- list(0.26784, 49); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint24_8280666f60f8465e6eefa702e913cf63() {
        assertEval("argv <- list(3.1e-06, 49); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint25_c8eaf452f45b00ae42d98c734a5cfffd() {
        assertEval("argv <- list(NA, 5L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint26_ab3b24b0c9725d38798a7ad9e4076d5e() {
        assertEval("argv <- list(TRUE, 6L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint27_b45f722a4cdcfb40e5a382638ffba402() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101), .Tsp = c(1, 101, 1), class = 'ts'), 3L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint3_12ea0e40b7fdb3806e381d36b4426013() {
        assertEval("argv <- list(1L, 4L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint4_20bb6f9af6b07b4403c6affda51252a6() {
        assertEval("argv <- list(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), 1); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint5_cb990b8179a6fb9eaae1bb541f1d9486() {
        assertEval("argv <- list(FALSE, 0L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint6_60b5d716f4193007885ccd48d6926060() {
        assertEval("argv <- list('', 2L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint7_6887e9ead03307d35952a52816eb9b4c() {
        assertEval("argv <- list(TRUE, 1L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint8_9413b63b5614160b672d94658dba7cdd() {
        assertEval("argv <- list('   ', 8L); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint9_3889d482cede0ab2e2d07cba84508d13() {
        assertEval("argv <- list(c(-4L, 11L, 23L, -3L, -2L, -1L, -6L, 0L, 8L, -13L, 6L, -32L, -8L, NA, 0L), c(10L, 9L, 11L, 17L, 9L, 18L, 8L, 11L, 8L, 15L, 4L, 12L, 12L, 1L, 34L)); .Internal(rep.int(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinretracemem_testretracemem1_2962f142b007b2052ba94b324866fab4() {
        assertEval("argv <- list(FALSE, FALSE);retracemem(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinretracemem_testretracemem2_b724e20006280d50a74dedd24698da53() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')), structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));retracemem(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinrev_testrev1_d9e2eb52a16b7e3ac65796dcea84cd4f() {
        assertEval("argv <- structure(list(x = c('#FF0000FF', '#FFFF00FF', '#00FF00FF')),     .Names = 'x');do.call('rev', argv)");
    }

    @Test
    public void TestrGenBuiltinround_testround1_4ebde8b6d011c0a3be7cb6c2c9c4caf5() {
        assertEval("argv <- list(3.98778192287757, 3);do.call('round', argv)");
    }

    @Test
    public void TestrGenBuiltinround_testround2_0915a7976743a467c5864de4493a4c46() {
        assertEval("argv <- structure(list(c(37.9490090935718, 34.1981894015095),     digits = 3), .Names = c('', 'digits'));do.call('round', argv)");
    }

    @Test
    public void TestrGenBuiltinround_testround3_0bdbaf3aa20b3bf164e589d338af1828() {
        assertEval("argv <- list(structure(list(lowerNorm = c(1, 0.7074793118252,     0.703783359109958, 0.633667085530785, 0.629171386131588,     0.55900804989023, 0.553693829615336, 0.547917347996141, 0.470383100744677,     0.397621760007547, 0.390548442517381, 0.382779091361949,     0.374191514453686, 0.276654053495554, 0.186268067402784,     0.176381170003996, 0.152703583557352, 0.138281755556403,     0.121518607618675), upperNorm = c(1, 1, 1, 0.979778292620476,     0.984273992019672, 0.946874303050947, 0.952188523325841,     0.957965004945035, 0.910009056118068, 0.857280200776766,     0.864353518266933, 0.872122869422365, 0.880710446330628,     0.798976198605286, 0.710090476014583, 0.719977373413371,     0.743654959860015, 0.758076787860964, 0.774839935798692),     lowerNormS = c(0.910985448809634, 0.683392923012911, 0.679522139376878,         0.614273605024573, 0.609653530675358, 0.543887035370979,         0.538488520130148, 0.532620411085642, 0.459604218176941,         0.390811451215735, 0.383715321807271, 0.375920913978781,         0.367305641565109, 0.274783502246108, 0.188735721130942,         0.178848823732154, 0.15517123728551, 0.140749409284561,         0.123986261346832), upperNorms = c(1, 0.996879185830627,         1, 0.969960088452818, 0.974580162802033, 0.937905681715855,         0.943304196956687, 0.949172306001193, 0.902674026454245,         0.851952320959801, 0.859048450368266, 0.866842858196755,         0.875458130610427, 0.797245309278501, 0.712558129742741,         0.722445027141529, 0.746122613588173, 0.760544441589122,         0.77730758952685)), .Names = c('lowerNorm', 'upperNorm',     'lowerNormS', 'upperNorms'), row.names = c(NA, -19L), class = 'data.frame'),     3);do.call('round', argv)");
    }

    @Test
    public void TestrGenBuiltinrow_testrow1_5c4018cec2b22b156d9045a745051036() {
        assertEval("argv <- list(c(14L, 14L)); .Internal(row(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinrow_testrow2_af1faf60e4447806565d7ab283e7dcb5() {
        assertEval("argv <- list(c(4L, 3L)); .Internal(row(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinrow_testrow3_767666747903f41a8cf76b34905b7e08() {
        assertEval("argv <- list(0:1); .Internal(row(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinrowMeans_testrowMeans1_f2b11fb46152ced5234cd53b6c3721b5() {
        assertEval("argv <- list(structure(c(3, 3, NA, 3, 3, 3, 3, 3, 4, 3, NA, NA, 2, 3, 4, 5), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))), 8, 2, TRUE); .Internal(rowMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowMeans_testrowMeans2_afea9f4775c378f648a4877db86eff1d() {
        assertEval("argv <- list(structure(c(50.7138381326659, 6.51590327164277, 24.9887625571708, 6.50401666172534, 16.6227411608333, 24.2873904534041, 56.036205319809, 9.42637482307856, 6.7207351702689e-16, 6.51590327164276, 106.05353593478, 13.0563348605106, 29.556736958112, 26.535297847233, 83.1597312749807, 86.1180411620546, 4.28836475146602, 3.05748120025494e-16, 24.9887625571708, 13.0563348605107, 382.901882167719, 28.709795659465, 7.19910301202793, 51.849911207061, 76.6652389324741, 13.4232601222667, 9.57039987233639e-16, 6.50401666172536, 29.556736958112, 28.709795659465, 286.290790661071, 29.5533327979648, 105.611010510127, 106.256264404531, 22.4644024278478, 1.60164752950704e-15, 16.6227411608333, 26.535297847233, 7.19910301202793, 29.5533327979648, 611.022025519874, 52.7749434153259, 19.5698513619914, 23.9507376116895, 1.70761896956049e-15, 24.2873904534041, 83.1597312749807, 51.849911207061, 105.611010510127, 52.7749434153259, 736.165134132116, 133.440685552903, 91.9053353168322, 6.55258708668096e-15, 56.036205319809, 86.1180411620546, 76.6652389324741, 106.256264404531, 19.5698513619915, 133.440685552903, 1401.55449200362, 107.582093653927, 7.67029504004995e-15, 9.42637482307856, 4.28836475146602, 13.4232601222667, 22.4644024278478, 23.9507376116895, 91.9053353168321, 107.582093653927, 57.6052682140803, 4.10709057665822e-15, 6.7207351702689e-16, 3.05748120025493e-16, 9.57039987233639e-16, 1.60164752950703e-15, 1.70761896956049e-15, 6.55258708668095e-15, 7.67029504004995e-15, 4.10709057665822e-15, 2.92823790737107e-31), .Dim = c(9L, 9L)), 9, 9, FALSE); .Internal(rowMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowMeans_testrowMeans3_2e1c51d17a332a5d29882b8fd55f1197() {
        assertEval("argv <- list(structure(c(2, 2, NA, 2, 2, 2, 2, 2, -5, -5, NA, NA, -5, -5, -5, -5), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))), 8, 2, TRUE); .Internal(rowMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowSums_testrowSums1_04f3d92be3209b25c1d2beefd72183ca() {
        assertEval("argv <- list(structure(c(1L, 0L, 0L, 0L, 2L, 0L, 0L, 0L, 3L), .Dim = c(3L, 3L)), 3, 3, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowSums_testrowSums2_afdd0ae5c49672498b8348b7c5a18cc2() {
        assertEval("argv <- list(structure(c(0.999999999999996, -5.93240323105314e-31, -1.22690013807617e-30, -2.66771163434776e-30, 6.26446113912225e-17, -5.95448228496283e-17, -3.41105197331973e-17, 2.9023639112071e-17, -1.98544126594555e-18, 5.0222594521389e-17, -2.11849144310153e-17, 1.78452635853509e-17, -6.4482597529713e-30, -5.93240323105314e-31, 1, -2.70177878542148e-31, 4.10223078154481e-30, -7.29760565072095e-17, 4.21528303119361e-16, 1.69346505683726e-16, -8.46179388945247e-17, -2.12579366024309e-17, -1.08608258515243e-16, -1.91006916081825e-17, -1.09544412010741e-16, 1.52841800386571e-30, -1.22690013807617e-30, -2.70177878542148e-31, 1, 5.63751592936848e-30, 4.44597451723816e-17, -1.70262938021701e-16, -4.55196812407612e-17, 1.77744051006272e-17, -5.96596846288922e-17, 9.58999363873063e-17, -5.74900426053008e-17, 1.14815157965335e-16, -3.6669706141133e-30, -2.66771163434776e-30, 4.10223078154481e-30, 5.63751592936848e-30, 1, -5.9187048613625e-18, -1.70068399080916e-16, -6.90189597604163e-18, -6.36439216662415e-19, -4.18657854049523e-19, 3.0354538418548e-17, -7.42749951284567e-18, -8.90495022022045e-18, 1.55306990715387e-30, 6.26446113912225e-17, -7.29760565072095e-17, 4.44597451723816e-17, -5.9187048613625e-18, 0.55411820856073, -0.00247216583270833, -0.0121967562426746, -0.0136834443420207, 0.00612437416936414, -0.00919613834986896, -0.017907465564047, 0.0210800496836485, 0, -5.95448228496283e-17, 4.21528303119361e-16, -1.70262938021701e-16, -1.70068399080916e-16, -0.00247216583270833, 0.0915588872840349, 0.00402469784261988, 0.0225004116141538, 0.00428277377776577, 0.0217395090957974, 0.00506691575079725, -0.155787004553276, -1.57863385792422e-15, -3.41105197331973e-17, 1.69346505683726e-16, -4.55196812407612e-17, -6.90189597604163e-18, -0.0121967562426746, 0.00402469784261988, 0.00831687169973403, 0.00905869237132552, 0.00121203034126938, 0.00939616211925082, 0.00270063068023987, -0.0350427136160765, 1.66845523703974e-15, 2.9023639112071e-17, -8.46179388945247e-17, 1.77744051006272e-17, -6.36439216662415e-19, -0.0136834443420207, 0.0225004116141538, 0.00905869237132552, 0.0237646346509256, 0.0107094040391417, 0.0632843775518589, 0.0165995956409034, -0.317638195769953, 3.75582594532732e-16, -1.98544126594555e-18, -2.12579366024309e-17, -5.96596846288922e-17, -4.18657854049523e-19, 0.00612437416936414, 0.00428277377776577, 0.00121203034126938, 0.0107094040391417, 0.000250414165674235, 0.0118733901248423, 0.0032448838873885, -0.0719898325072222, -4.32029144045995e-15, 5.0222594521389e-17, -1.08608258515243e-16, 9.58999363873063e-17, 3.0354538418548e-17, -0.00919613834986896, 0.0217395090957974, 0.00939616211925082, 0.0632843775518589, 0.0118733901248423, 0.0578950164197554, 0.0182925914744869, -0.367565522079614, -1.23944977824402e-15, -2.11849144310153e-17, -1.91006916081825e-17, -5.74900426053008e-17, -7.42749951284567e-18, -0.017907465564047, 0.00506691575079725, 0.00270063068023987, 0.0165995956409034, 0.0032448838873885, 0.0182925914744869, 0.00349919192597366, -0.0788502030216034, 0, 1.78452635853509e-17, -1.09544412010741e-16, 1.14815157965335e-16, -8.90495022022045e-18, 0.0210800496836485, -0.155787004553276, -0.0350427136160765, -0.317638195769953, -0.0719898325072222, -0.367565522079614, -0.0788502030216034, 2.49598569418347, -8.69223914290117e-16, -6.4482597529713e-30, 1.52841800386571e-30, -3.6669706141133e-30, 1.55306990715387e-30, 0, -1.57863385792422e-15, 1.66845523703974e-15, 3.75582594532732e-16, -4.32029144045995e-15, -1.23944977824402e-15, 0, -8.69223914290117e-16, 1), .Dim = c(13L, 13L), .Dimnames = list(c('(Intercept)', 'fac2', 'fac3', 'fac4', '', '', '', '', '', '', '', '', ''), NULL)), 13, 13, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowSums_testrowSums3_61adb3b2a4f1e60aaca19178ceeaa542() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, TRUE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowSums_testrowSums4_ced4b843187a15d76b7b1e0a22f30da9() {
        assertEval("argv <- list(structure(cim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowSums_testrowSums5_01e2be80a89f008d7cdf7abc2f991f73() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 3L), .Dimnames = list(NULL, c('wt.loss', 'age', 'I(age)'))), 0, 3, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowSums_testrowSums6_530c0000fa80b684cdc0ffd3897eda4b() {
        assertEval("argv <- list(structure(c(1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), .Dim = c(61L, 4L), .Dimnames = list(c('190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250'), NULL)), 61, 4, FALSE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowSums_testrowSums7_536f1fe1efe9da8546620e09eb0770e9() {
        assertEval("argv <- list(structure(cim = c(16L, 16L), .Dimnames = list(NULL, NULL)), 16, 16, TRUE); .Internal(rowSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinrowSums_testrowSums9_388af929443a3a922f5973c5be9ebb47() {
        assertEval("argv <- structure(list(x = structure(numeric(0), .Dim = c(0L,     2L))), .Names = 'x');do.call('rowSums', argv)");
    }

    @Test
    public void TestrGenBuiltinrownames_testrownames1_03d0ab7f4cd05db13ad055bd3d667b43() {
        assertEval("argv <- structure(list(x = structure(list(x = 1:3, y = c(6.28318530717959,     3.14159265358979, 0)), .Names = c('x', 'y'), row.names = c(NA,     -3L), class = 'data.frame')), .Names = 'x');do.call('row.names', argv)");
    }

    @Test
    public void TestrGenBuiltinrownames_testrownames2_1164452ae55ad190e7a9bb2b8ccca27a() {
        assertEval("argv <- structure(list(x = structure(logical(0), .Dim = c(4L,     0L)), do.NULL = FALSE), .Names = c('x', 'do.NULL'));do.call('rownames', argv)");
    }

    @Test
    public void TestrGenBuiltinrownames_testrownames3_99ef302f8f7a7c27c3990de6e675309d() {
        assertEval("argv <- structure(list(x = structure(list(x = 3:4), .Names = 'x',     row.names = c(NA, -2L), class = 'data.frame')), .Names = 'x');do.call('rownames', argv)");
    }

    @Test
    public void TestrGenBuiltinrownamesdataframe_testrownamesdataframe1_f1c02510e5485c7533bf203903e66628() {
        assertEval("argv <- structure(list(x = structure(list(x = 3:4), .Names = 'x',     row.names = c(NA, -2L), class = 'data.frame')), .Names = 'x');do.call('row.names.data.frame', argv)");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum1_0037d75acd771be7e1c7bacbaf186765() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4), c('Y', 'X', 'Y'), c('X', 'Y'), FALSE, c('X', 'Y')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum2_e77888066b8558d6090381bac88a7e3b() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.83678930089809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.807183221448213, 0, 0, 0, 0, 0, 0, 0, 2.28512598329689, 0, 2.63247834995855, 0, 2.20238351041917, 0, 0.769295244943351, 0, 0, 0, 0, 0, 2.39247868547682, 2.35872046276927, 0, 1.96863683476113, 1.77908247814048, 0, 0, 0, 1.30635392456315, 0, 1.90387659717817, 0, 0.869405556702986, 1.81335102661978, 2.03683243726846, 0, 0.594853387563489, 0, 0, 0.546043346519582, 2.43847447982989, 0, 0, 2.01202685781755, 0, 2.67064226802904, 2.9177625705488, 0.566296850563958, 0, 1.07001449051313, 1.02747153153177, 0, 1.14719850081019, 2.56380862975493, 0.760732567403466, 0.778199262684211, 0, 0.871444851625711, 2.75724254851229, 1.6366914055543, 0.606628090143204, 1.09201998403296, 0.729518678388558, 2.26406822516583, 2.41699231159873, 1.90058654651511), .Names = c('7', '8', '12', '13', '19', '22', '26', '31', '34', '36', '38', '40', '42', '43', '44', '46', '50', '51', '57', '59', '60', '61', '64', '67', '68', '72', '75', '76', '77', '78', '84', '87', '89', '94', '95', '100', '101', '102', '107', '110', '114', '115', '122', '123', '129', '130', '131', '134', '136', '137', '141', '144', '146', '150', '153', '154', '157', '160', '161', '162', '166', '167', '172', '174', '176', '178', '179', '180', '183', '184', '185', '186', '187', '197', '199', '201', '203', '204', '205', '207', '208', '210', '211', '214', '217', '219', '220', '222', '226', '228')), structure(c(310, 361, 654, 728, 61, 81, 520, 473, 107, 122, 965, 731, 153, 433, 145, 95, 765, 735, 5, 687, 345, 444, 60, 208, 821, 305, 226, 426, 705, 363, 167, 641, 740, 245, 588, 166, 559, 450, 529, 351, 201, 524, 199, 550, 551, 543, 293, 511, 511, 371, 201, 62, 356, 340, 315, 182, 364, 376, 384, 268, 266, 194, 348, 382, 296, 186, 145, 269, 350, 272, 292, 332, 285, 243, 276, 79, 240, 202, 235, 224, 239, 173, 252, 92, 192, 211, 175, 203, 105, 177), .Names = c('7', '8', '12', '13', '19', '22', '26', '31', '34', '36', '38', '40', '42', '43', '44', '46', '50', '51', '57', '59', '60', '61', '64', '67', '68', '72', '75', '76', '77', '78', '84', '87', '89', '94', '95', '100', '101', '102', '107', '110', '114', '115', '122', '123', '129', '130', '131', '134', '136', '137', '141', '144', '146', '150', '153', '154', '157', '160', '161', '162', '166', '167', '172', '174', '176', '178', '179', '180', '183', '184', '185', '186', '187', '197', '199', '201', '203', '204', '205', '207', '208', '210', '211', '214', '217', '219', '220', '222', '226', '228')), c(5, 60, 61, 62, 79, 81, 92, 95, 105, 107, 122, 145, 153, 166, 167, 173, 175, 177, 182, 186, 192, 194, 199, 201, 202, 203, 208, 211, 224, 226, 235, 239, 240, 243, 245, 252, 266, 268, 269, 272, 276, 285, 292, 293, 296, 305, 310, 315, 332, 340, 345, 348, 350, 351, 356, 361, 363, 364, 371, 376, 382, 384, 426, 433, 444, 450, 473, 511, 520, 524, 529, 543, 550, 551, 559, 588, 641, 654, 687, 705, 728, 731, 735, 740, 765, 821, 965), FALSE, c('5', '60', '61', '62', '79', '81', '92', '95', '105', '107', '122', '145', '153', '166', '167', '173', '175', '177', '182', '186', '192', '194', '199', '201', '202', '203', '208', '211', '224', '226', '235', '239', '240', '243', '245', '252', '266', '268', '269', '272', '276', '285', '292', '293', '296', '305', '310', '315', '332', '340', '345', '348', '350', '351', '356', '361', '363', '364', '371', '376', '382', '384', '426', '433', '444', '450', '473', '511', '520', '524', '529', '543', '550', '551', '559', '588', '641', '654', '687', '705', '728', '731', '735', '740', '765', '821', '965')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum3_b49348678422be87022f6b41f7e0055c() {
        assertEval("argv <- list(numeric(0), numeric(0), numeric(0), FALSE, character(0)); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum4_4b94f446be24947b32223c727b09d1b6() {
        assertEval("argv <- list(structure(c(0.432389384893196, 2.31273022636069, 0, 2.31273022636069, 0.432389384893196, 0), .Names = c('1', '3', '4', '5', '6', '7')), structure(c(9, 1, 1, 6, 6, 8), .Names = c('1', '3', '4', '5', '6', '7')), c(1, 6, 8, 9), FALSE, c('1', '6', '8', '9')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum5_f3643fe89b210518899cf09f8f24ee0c() {
        assertEval("argv <- list(structure(c(0.102430555555556, 0.102430555555556, 0.102430555555556, 0.546875, -0.078125, 0.477430555555556, -0.0642361111111111, 0.102430555555556), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')), structure(1:8, .Label = c('1', '2', '3', '4', '5', '6', '7', '8'), class = 'factor'), structure(1:8, .Label = c('1', '2', '3', '4', '5', '6', '7', '8'), class = 'factor'), FALSE, c('1', '2', '3', '4', '5', '6', '7', '8')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum6_b46f61e9e4e3fe58cf0ee0cba39dfb19() {
        assertEval("argv <- list(structure(c(0, 0.719170679378362, -0.280829320621638, 0, -0.43834135875385, 0, -0.0525040127116955, 0.783590877798991, -0.365543432545085, -0.0525040127116955, -0.31303941983339, 0, 0, NA), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14')), c(3, 3, 4, 5, 5, 6, 6, 6, 7, 1, 1, 1, 1, 2), c(1, 2, 3, 4, 5, 6, 7), FALSE, c('1', '2', '3', '4', '5', '6', '7')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum7_d66396fb53df90189a0ddccdd4ffc3ed() {
        assertEval("argv <- list(structure(c(0.10270237599789, 2.6083215370191, 11.0196744330572, 2.6083215370191, 0.10270237599789, 0.10270237599789, 0.10270237599789, -0.441795512568419, 2.6083215370191, 0.10270237599789, -0.441795512568419), .Dim = c(11L, 1L), .Dimnames = list(c('11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21'), 'x')), structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Names = c('11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21')), c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), FALSE, c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum8_6573139ef6d44c9969a20e8b3b202a15() {
        assertEval("argv <- list(structure(c(1.33333333333333, -1.33333333333333, 1, 1.33333333333333, -2, 0.666666666666667, -0.666666666666667, 0.666666666666667, -0.666666666666667), .Dim = c(9L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9'), 'x')), structure(c(1, 1, 2, 2, 2, 2, 3, 4, 5), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9')), c(1, 2, 3, 4, 5), FALSE, c('1', '2', '3', '4', '5')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinsQuote_testsQuote1_e6a2155b5a4d76aff849baf6bb0a6160() {
        assertEval("argv <- structure(list(x = character(0)), .Names = 'x');do.call('sQuote', argv)");
    }

    @Test
    public void TestrGenBuiltinsample_testsample1_23543f512dec63d4d0321295beb65b7f() {
        assertEval("argv <- list(0L, 0L, FALSE, NULL); .Internal(sample(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsample_testsample2_376937b93fdfd3bcd6fe6b289d99a14e() {
        assertEval("argv <- list(1L, 1L, FALSE, NULL); .Internal(sample(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsample_testsample3_d3aa572ac3d9a73465f750a9bdb00661() {
        assertEval("argv <- list(2L, 499, TRUE, c(0, 0.525)); .Internal(sample(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsample_testsample5_fadd13cde143f5be826417df14a19129() {
        assertEval("argv <- structure(list(x = c(0, 0)), .Names = 'x');do.call('sample', argv)");
    }

    @Test
    public void TestrGenBuiltinscale_testscale1_f8525cee9c7fcb41335a5aa9e0f9e009() {
        assertEval("argv <- structure(list(x = structure(c(0.0280387932434678, 0.789736648323014,     0.825624888762832, 0.102816025260836, 0.290661531267688,     0.0517604837659746, 0.610383243998513, 0.78207225818187,     0.136790128657594, 0.8915234063752, 0.0216042066458613, 0.408875584136695,     0.69190051057376, 0.595735886832699, 0.936268283519894, 0.592950375983492,     0.852736486820504, 0.610123937483877, 0.600582004291937,     0.38303488586098, 0.412859325064346, 0.388432375853881, 0.457582515198737,     0.701614629011601, 0.449137942166999, 0.533179924823344,     0.317685069283471, 0.800954289967194, 0.0273033923003823,     0.496913943905383, 0.903582146391273, 0.725298138801008,     0.616459952667356, 0.341360273305327, 0.0613401387818158,     0.7339238144923, 0.720672776456922, 0.214702291414142, 0.283225567312911,     0.515186718199402, 0.558621872216463, 0.770191126968712,     0.959201833466068, 0.80451478343457, 0.307586128590629, 0.902739278972149,     0.992322677979246, 0.167487781029195, 0.796250741928816,     0.549091263208538, 0.0876540709286928, 0.424049312015995,     0.573274190537632, 0.763274750672281, 0.405174027662724,     0.828049632022157, 0.128607030957937, 0.479592794785276,     0.631105397362262, 0.406053610146046, 0.661386628635228,     0.958720558788627, 0.576542558381334, 0.0483133427333087,     0.615997062064707, 0.341076754732057, 0.901286069769412,     0.521056747529656, 0.92834516079165, 0.228773980634287, 0.458389508537948,     0.987496873131022, 0.0315267851110548, 0.872887850506231,     0.59517983533442, 0.935472247190773, 0.145392092177644, 0.255368477664888,     0.322336541488767, 0.507066876627505, 0.0745627176947892,     0.0313172969035804, 0.499229126842692, 0.868204665370286,     0.232835006900132, 0.422810809221119, 0.803322346881032,     0.00151223805733025, 0.175151102710515, 0.469289294909686),     .Dim = c(10L, 9L))), .Names = 'x');do.call('scale', argv)");
    }

    @Test
    public void TestrGenBuiltinsep_testsep1_06353b269fd1370b26199688ee5935dd() {
        assertEval("argv <- list(1, 1);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep10_9596f004e63a224f53f1c0735d3e7751() {
        assertEval("argv <- list(c(0, 9.88131291682493e-324, 1.03753785626662e-322, 1.02271588689138e-321, 1.02320995253722e-320, 1.02330876566639e-319, 1.02329394369701e-318, 1.02329295556572e-317, 1.02329300497229e-316, 1.02329299015032e-315, 1.02329299212658e-314, 1.0232929922748e-313, 1.02329299227974e-312, 1.02329299228073e-311, 1.02329299228073e-310, 1.02329299228073e-309, 1.02329299228073e-308, 1.02329299228073e-307), 1.02329299228075);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep11_9a29f18830b924d836e51cf4e1f44a1f() {
        assertEval("argv <- list(structure(c(29.35, 23.32, 23.8, 41.89, 42.19, 31.72, 39.74, 44.75, 46.64, 47.64, 24.42, 46.31, 27.84, 25.06, 23.31, 25.62, 46.05, 47.32, 34.03, 41.31, 31.16, 24.52, 27.01, 41.74, 21.8, 32.54, 25.95, 24.71, 32.61, 45.04, 43.56, 41.18, 44.19, 46.26, 28.96, 31.94, 31.92, 27.74, 21.44, 23.49, 43.42, 46.12, 23.27, 29.81, 46.4, 45.25, 41.12, 28.13, 43.69, 47.2, 2.86999999999999, 4.41, 4.43, 1.67, 0.829999999999999, 2.85, 1.34, 0.669999999999999, 1.06, 1.14, 3.93, 1.19, 2.37, 4.7, 3.35, 3.1, 0.869999999999999, 0.579999999999999, 3.08, 0.959999999999999, 4.19, 3.48, 1.91, 0.909999999999999, 3.73, 2.47, 3.67, 3.25, 3.17, 1.21, 1.2, 1.05, 1.28, 1.12, 2.85, 2.28, 1.52, 2.87, 4.54, 3.73, 1.08, 1.21, 4.46, 3.43, 0.899999999999999, 0.559999999999999, 1.73, 2.72, 2.07, 0.659999999999999, 2329.68000000001, 1507.99, 2108.47, 189.130000000001, 728.470000000001, 2982.88, 662.860000000001, 289.520000000001, 276.650000000001, 471.240000000001, 2496.53, 287.770000000001, 1681.25, 2213.82, 2457.12, 870.85, 289.710000000001, 232.440000000001, 1900.1, 88.940000000001, 1139.95, 1390, 1257.28, 207.680000000001, 2449.39, 601.050000000001, 2231.03, 1740.7, 1487.52, 325.540000000001, 568.560000000001, 220.560000000001, 400.060000000001, 152.010000000001, 579.51, 651.110000000001, 250.960000000001, 768.79, 3299.49, 2630.96, 389.660000000001, 249.870000000001, 1813.93, 4001.89, 813.390000000001, 138.330000000001, 380.470000000001, 766.54, 123.580000000001, 242.690000000001, 2.87000000000001, 3.93, 3.82, 0.219999999999998, 4.56, 2.43, 2.67, 6.51, 3.08, 2.8, 3.99, 2.19, 4.32, 4.52, 3.44, 6.28, 1.48, 3.19, 1.12, 1.54, 2.99, 3.54, 8.21, 5.81, 1.57, 8.12, 3.62, 7.66, 1.76, 2.48, 3.61, 1.03, 0.670000000000002, 2, 7.48, 2.19, 2, 4.35, 3.01, 2.7, 2.96, 1.13, 2.01, 2.45, 0.530000000000004, 5.14, 10.23, 1.88, 16.71, 5.08), .Dim = c(50L, 4L), .Dimnames = list(c('Australia', 'Austria', 'Belgium', 'Bolivia', 'Brazil', 'Canada', 'Chile', 'China', 'Colombia', 'Costa Rica', 'Denmark', 'Ecuador', 'Finland', 'France', 'Germany', 'Greece', 'Guatamala', 'Honduras', 'Iceland', 'India', 'Ireland', 'Italy', 'Japan', 'Korea', 'Luxembourg', 'Malta', 'Norway', 'Netherlands', 'New Zealand', 'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Philippines', 'Portugal', 'South Africa', 'South Rhodesia', 'Spain', 'Sweden', 'Switzerland', 'Turkey', 'Tunisia', 'United Kingdom', 'United States', 'Venezuela', 'Zambia', 'Jamaica', 'Uruguay', 'Libya', 'Malaysia'), c('pop15', 'pop75', 'dpi', 'ddpi'))), structure(c(29.35, 23.32, 23.8, 41.89, 42.19, 31.72, 39.74, 44.75, 46.64, 47.64, 24.42, 46.31, 27.84, 25.06, 23.31, 25.62, 46.05, 47.32, 34.03, 41.31, 31.16, 24.52, 27.01, 41.74, 21.8, 32.54, 25.95, 24.71, 32.61, 45.04, 43.56, 41.18, 44.19, 46.26, 28.96, 31.94, 31.92, 27.74, 21.44, 23.49, 43.42, 46.12, 23.27, 29.81, 46.4, 45.25, 41.12, 28.13, 43.69, 47.2, 2.87, 4.41, 4.43, 1.67, 0.83, 2.85, 1.34, 0.67, 1.06, 1.14, 3.93, 1.19, 2.37, 4.7, 3.35, 3.1, 0.87, 0.58, 3.08, 0.96, 4.19, 3.48, 1.91, 0.91, 3.73, 2.47, 3.67, 3.25, 3.17, 1.21, 1.2, 1.05, 1.28, 1.12, 2.85, 2.28, 1.52, 2.87, 4.54, 3.73, 1.08, 1.21, 4.46, 3.43, 0.9, 0.56, 1.73, 2.72, 2.07, 0.66, 2329.68, 1507.99, 2108.47, 189.130000000001, 728.470000000001, 2982.88, 662.860000000001, 289.520000000001, 276.650000000001, 471.240000000001, 2496.53, 287.770000000001, 1681.25, 2213.82, 2457.12, 870.85, 289.710000000001, 232.440000000001, 1900.1, 88.9400000000012, 1139.95, 1390, 1257.28, 207.680000000001, 2449.39, 601.050000000001, 2231.03, 1740.7, 1487.52, 325.540000000001, 568.560000000001, 220.560000000001, 400.060000000001, 152.010000000001, 579.51, 651.11, 250.960000000001, 768.79, 3299.49, 2630.96, 389.660000000001, 249.870000000001, 1813.93, 4001.89, 813.390000000001, 138.330000000001, 380.470000000001, 766.54, 123.580000000001, 242.690000000001, 2.87, 3.92999999999999, 3.82, 0.22, 4.56, 2.43, 2.67, 6.51, 3.08, 2.8, 3.99, 2.19, 4.32, 4.52, 3.44, 6.28, 1.48, 3.19, 1.12, 1.54, 2.99, 3.54, 8.21, 5.81, 1.57, 8.12, 3.62, 7.66, 1.76, 2.48, 3.61, 1.03, 0.670000000000002, 2, 7.48, 2.19, 2, 4.35, 3.01, 2.7, 2.96, 1.13, 2.01, 2.45, 0.530000000000002, 5.14, 10.23, 1.88, 16.71, 5.08), .Dim = c(50L, 4L), .Dimnames = list(NULL, c('pop15', 'pop75', 'dpi', 'ddpi'))));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep12_1625ec591dac90f3b7a85ff2f151ef29() {
        assertEval("argv <- list(1, c(6.25, 36, 36, 56.25, 64, 64, 256, 36, 25, 36, 784, 25, 90.25, 36, 20.25, 100, 196, 9, 20.25, 30.25, 9, 12.25, 36, 4, 9, 16, 36, 25, 42.25, 25, 100, 36, 324, 20.25, 400));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep13_3feeb0a231d4f13d3f69b87b6efe3590() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep14_65c05ddeeafeda38f6377c0a4512aa3a() {
        assertEval("argv <- list(structure(list(A = c(52L, 52L, 47L, 45L, 40L, 37L, 27L, 27L, 23L, 22L, 21L, 25L, 24L, 22L, 22L, 20L, 16L, 17L, 14L, 13L, 13L, 14L, 24L), F = c(42L, 44L, 48L, 49L, 50L, 54L, 58L, 54L, 59L, 59L, 60L, 53L, 54L, 55L, 56L, 58L, 62L, 57L, 54L, 55L, 52L, 47L, 56L), M = c(6L, 4L, 5L, 6L, 10L, 9L, 15L, 19L, 18L, 19L, 19L, 22L, 22L, 23L, 22L, 22L, 22L, 26L, 32L, 32L, 35L, 39L, 20L)), .Names = c('A', 'F', 'M'), class = 'data.frame', row.names = c(NA, 23L)), 100);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep15_ac422f08d33b8465c43c366701c79e63() {
        assertEval("argv <- list(c(1, 0), structure(c(1, 0, 0, 1), .Dim = c(2L, 2L)));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep16_04768845c16f7d46591acb6c2369960d() {
        assertEval("argv <- list(structure(c(126.49966838981, 123.340306958365, 124.994330270046, 129.001056705356, 131.639025779016, 124.408594738421, 125.475982014377, 125.929559340094, 126.630542479839, 127.249057014908, 127.661400038288, 128.403617480371, 129.888052364537, 131.702361667407, 133.516670970277, 135.001105854443, 135.990729110554, 137.310226785368, 144.127817178676, 144.648818160919, 147.114894939813, 142.21953431078, 139.936534657354, 152.343274976711), .Tsp = c(1949, 1950.91666666667, 12), class = 'ts'), structure(c(NA, NA, NA, NA, NA, NA, 126.791666666667, 127.25, 127.958333333333, 128.583333333333, 129, 129.75, 131.25, 133.083333333333, 134.916666666667, 136.416666666667, 137.416666666667, 138.75, NA, NA, NA, NA, NA, NA), .Tsp = c(1949, 1950.91666666667, 12), class = 'ts'));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep17_4f33c817c95506f86c1e898839e9a1d7() {
        assertEval("argv <- list(structure(c(17L, 29L, 17L, 20L, 1L, 15L, 0L, 1L), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')), structure(c(24L, 29L, 27L, 20L, 12L, 16L, 28L, 4L), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep18_d71358035d66cd37ae752478169e9aa7() {
        assertEval("argv <- list(c(2, 11, 14, 5, 5, 13, 20, 22, 6, 6, 15, 7, 14, 6, 32, 53, 57, 14, 16, 16, 17, 40, 43, 46, 8, 23, 23, 28, 34, 36, 38, 3, 5, 11, 24, 45, 5, 6, 6, 9, 13, 23, 25, 32, 53, 54, 5, 5, 11, 17, 19, 8, 13, 14, 20, 47, 48, 60, 81, 2, 1, 2, 3, 5, 10, 14, 21, 36, 40, 6, 17, 67, 1, 1, 2, 7, 11, 12, 1, 1, 5, 5, 5, 11, 17, 3, 4, 22, 30, 36, 8, 1, 1, 5, 7, 16, 27, 1, 30, 10, 14, 27, 41, 69, 25, 10, 11, 20, 33, 5, 7, 1, 1, 5, 5, 5, 5, 7, 11, 15, 5, 14, 6, 6, 7, 28, 1, 5, 14, 2, 2, 3, 8, 10, 12, 1, 1, 9, 22, 3, 3, 5, 15, 18, 22, 37), structure(c(7.89366449903379, 7.89366449903379, 7.89366449903379, 14.0829622414182, 14.0829622414182, 14.0829622414182, 14.0829622414182, 14.0829622414182, 9.97467561511911, 9.97467561511911, 9.97467561511911, 9.14061221811198, 9.14061221811198, 37.9214773068363, 37.9214773068363, 37.9214773068363, 37.9214773068363, 27.0457930153774, 27.0457930153774, 27.0457930153774, 27.0457930153774, 27.0457930153774, 27.0457930153774, 27.0457930153774, 27.142857142857, 27.142857142857, 27.142857142857, 27.142857142857, 27.142857142857, 27.142857142857, 27.142857142857, 5.51287534554956, 19.4425820919426, 19.4425820919426, 19.4425820919426, 19.4425820919426, 22.0114035979981, 22.0114035979981, 22.0114035979981, 22.0114035979981, 22.0114035979981, 22.0114035979981, 22.0114035979981, 22.0114035979981, 22.0114035979981, 22.0114035979981, 12.0888548389297, 12.0888548389297, 12.0888548389297, 12.0888548389297, 12.0888548389297, 35.9372148648542, 35.9372148648542, 35.9372148648542, 35.9372148648542, 35.9372148648542, 35.9372148648542, 35.9372148648542, 35.9372148648542, 2.39853649771773, 14.5555555555555, 14.5555555555555, 14.5555555555555, 14.5555555555555, 14.5555555555555, 14.5555555555555, 14.5555555555555, 14.5555555555555, 14.5555555555555, 34.0597534472672, 34.0597534472672, 34.0597534472672, 4.94649227492536, 4.94649227492536, 4.94649227492536, 4.94649227492536, 4.94649227492536, 4.94649227492536, 5.86945220571486, 5.86945220571486, 5.86945220571486, 5.86945220571486, 5.86945220571486, 5.86945220571486, 5.86945220571486, 4.2587413846383, 4.2587413846383, 28.3984573891039, 28.3984573891039, 28.3984573891039, 9.29091029891263, 9.29091029891263, 9.29091029891263, 9.29091029891263, 9.29091029891263, 9.29091029891263, 9.29091029891263, 27.2857142857143, 27.2857142857143, 27.2857142857143, 27.2857142857143, 27.2857142857143, 27.2857142857143, 27.2857142857143, 18.193214018835, 20.387398919001, 20.387398919001, 20.387398919001, 20.387398919001, 6.18095346485027, 6.18095346485027, 6.18095346485027, 6.18095346485027, 6.18095346485027, 6.18095346485027, 6.18095346485027, 6.18095346485027, 6.18095346485027, 6.18095346485027, 6.18095346485027, 10.4914673267343, 10.4914673267343, 10.4914673267343, 10.4914673267343, 10.4914673267343, 10.4914673267343, 6.30668950814617, 6.30668950814617, 6.30668950814617, 6.30668950814617, 6.30668950814617, 6.30668950814617, 6.30668950814617, 6.30668950814617, 6.30668950814617, 0.75368270571509, 13.5, 13.5, 13.5, 13.5, 13.5, 13.5, 13.5, 13.5, 13.5, 13.5), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146')));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep19_3290781ac13cd94f053f37d2835d7f24() {
        assertEval("argv <- list(0.5, c(576.899196412178, 48.2726847449981, 4.88037826224117, 1.31852084431627, 1.02614578306738));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep2_ba6d2e3600f93ad5a373fb7c3bdc3a2f() {
        assertEval("argv <- list(c(-3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L), c(-3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep20_d838620b11cf1a654915994614e6685e() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42')), 6);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep21_3492004af67f01cd5f43771180683427() {
        assertEval("argv <- list(structure(c(18, 17, 15, 20, 10, 20, 25, 13, 12), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9')), structure(c(18.3712737525013, 13.3333333333333, 18.2953929141735, 18.3712737525013, 13.3333333333333, 18.2953929141735, 18.3712737525013, 13.3333333333333, 18.2953929141735), .Dim = c(9L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9'), NULL)));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep22_c64350c8030902789a6a9f19d9ece167() {
        assertEval("argv <- list(c(0+6.28318530717959i, 0+12.5663706143592i, 0+18.8495559215388i, 0+25.1327412287183i, 0+31.4159265358979i, 0+37.6991118430775i, 0+43.9822971502571i, 0+50.2654824574367i, 0+56.5486677646163i, 0+62.8318530717959i, 0+69.1150383789754i, 0+75.398223686155i, 0+81.6814089933346i, 0+87.9645943005142i, 0+94.2477796076938i, 0+100.530964914873i), 16);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep23_3e54e1ac87607693efd38dd6a8068ba7() {
        assertEval("argv <- list(structure(c(1, 0, -1, 0.5, -0.5, NA, NA, NA, 0), .Dim = c(3L, 3L)), structure(c(1, 1, 1, 0.707106781186548, 0.707106781186548, 0.707106781186548, 0, 0, 0), .Dim = c(3L, 3L)));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep24_ee2e18ce4f819cdb8bca5a706ae0e76f() {
        assertEval("argv <- list(structure(c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')), 18.5);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep25_924baba3d81e602e48b58e0472742dbe() {
        assertEval("argv <- list(structure(c(1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')), structure(c(0.570290675249213, 0.61905127646042, 0.531618474288601, 0.790554080720526, 0.767014480135805, 0.550113874748024, 0.17684306547603, 0.582060475541574, 0.82418208155584, 0.508078873703881, 0.235692066937831, 0.434097271866188, 0.494627673369755, 0.72161667900813, 0.573653475332745, 0.56356507508215, 0.69807707842341, 0.78887268067876, 0.566927875165682, 0.661086277504564, 0.469406672743269, 0.365159870153793, 0.474450872868566, 0.63082107675278, 0.131445264348354, 0.640909477003375, 0.503034673578584, 0.565246475123916, 0.403832071114405, 0.577016275416276, 0.543388274580962, 0.239054867021362, 0.573653475332745, 0.514804473870944, 0.674537477838689, 0.0709148628447877, 0.536662674413898, 0.772058680261102, 0.274364267898443, 0.116312663972463, 0.439141471991485, 0.60728147616806, 0.400469271030873, 0.497990473453286, 0.514804473870944, 0.55179527478979, 0.455955472409143, 0.506397473662115, 0.321443469067883, 0.565246475123916, 0.772058680261102, 0.869579882683515, 0.494627673369755, 0.457636872450909, 0.398787870989108, 0.753563279801679, 0.518167273954475, 0.326487669193181, 0.351708669819667, 0.479495072993863, 0.397106470947342, 0.439141471991485, 0.37020407027909, 0.627458276669249, 0.402150671072639, 0.63082107675278, 0.543388274580962, 0.587104675666871, 0.587104675666871, 0.311355068817289, 0.730023679216959, 0.534981274372133, 0.450911272283846, 0.427371671699125, 0.432415871824422, 0.2911782683161, 0.339938869527307, 0.708165478674004, 0.76533308009404, 0.455955472409143, 0.509760273745647, 0.412239071323234, 0.464362472617972, 0.481176473035629, 0.331531869318478, 0.622414076543951, 0.392062270822045, 0.827544881639372, 0.487902073202692, 0.479495072993863, 0.652679277295735, 0.585423275625105, 0.735067879342256, 0.477813672952097, 0.435778671907954, 0.756926079885211, 0.679581677963987, 0.339938869527307, 0.625776876627483, 0.652679277295735), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep26_c4f824803870e041f321c15bafbb0b9d() {
        assertEval("argv <- list(structure(c(0L, 1L, 1L, 7L, 7L, 2L, 0L, 3L, 9L, 0L, 0L, 0L, 0L, 6L, 0L, 1L, 5L, 8L, 2L, 2L, 0L, 0L, 0L, 9L, 0L, 3L, 0L, 1L, 0L, 2L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 2L, 2L, 0L, 0L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 1L, 0L, 1L, 0L, 0L, 8L, 0L, 0L, 0L, 0L, 0L, 0L, 3L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 0L, 4L, 0L, 0L, 4L, 0L, 5L, 0L, 0L, 3L, 3L, 0L, 5L, 2L), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')), structure(c(1.25194092864295, 1.37418430529572, 1.15498928509075, 1.80414376800547, 1.74512972410413, 1.20135746244181, 0.265563337720594, 1.28144795059362, 1.88844954500738, 1.09597524118942, 0.413098447473938, 0.910502531785213, 1.06225293038865, 1.63131692515155, 1.26037150634314, 1.23507977324257, 1.57230288125021, 1.79992847915537, 1.24351035094276, 1.47956652654811, 0.999023597637219, 0.737675688931295, 1.01166946418751, 1.40369132724639, 0.151750538768014, 1.42898306034697, 1.08332937463913, 1.23929506209267, 0.834627332483493, 1.26880208404333, 1.18449630704142, 0.421529025174129, 1.26037150634314, 1.1128363965898, 1.51328883734888, 1.40164574169432e-07, 1.16763515164104, 1.75777559065442, 0.510050091026136, 0.113812939117154, 0.9231483983355, 1.34467728334505, 0.826196754783302, 1.07068350808884, 1.1128363965898, 1.2055727512919, 0.965301286836455, 1.09175995233932, 0.628078178828811, 1.23929506209267, 1.75777559065442, 2.00226234395996, 1.06225293038865, 0.969516575686551, 0.821981465933206, 1.71140741330337, 1.12126697428999, 0.640724045379098, 0.703953378130531, 1.02431533073779, 0.817766177083111, 0.9231483983355, 0.750321555481582, 1.3952607495462, 0.830412043633397, 1.40369132724639, 1.18449630704142, 1.29409381714391, 1.29409381714391, 0.602786445728238, 1.65239336940203, 1.16341986279095, 0.952655420286168, 0.893641376384831, 0.906287242935117, 0.552202979527091, 0.674446356179862, 1.59759461435079, 1.74091443525404, 0.965301286836455, 1.10019053003951, 0.855703776733971, 0.986377731086933, 1.02853061958789, 0.653369911929384, 1.38261488299591, 0.805120310532824, 1.89688012270757, 1.04539177498827, 1.02431533073779, 1.45849008229763, 1.28987852829381, 1.66503923595232, 1.0201000418877, 0.914717820635308, 1.71983799100356, 1.52593470389916, 0.674446356179862, 1.39104546069611, 1.45849008229763), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep27_287dcedb817648b438fcdd1c4c699fa9() {
        assertEval("argv <- list(998.602763134667, 78L);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep28_1b5cab2ac334a60a22d2a688d2438709() {
        assertEval("argv <- list(structure(c(0L, 1L, 1L, 7L, 7L, 2L, 0L, 3L, 9L, 0L, 0L, 0L, 0L, 6L, 0L, 1L, 5L, 8L, 2L, 2L, 0L, 0L, 0L, 9L, 0L, 3L, 0L, 1L, 0L, 2L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 2L, 2L, 0L, 0L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 1L, 0L, 1L, 0L, 0L, 8L, 0L, 0L, 0L, 0L, 0L, 0L, 3L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 0L, 4L, 0L, 0L, 4L, 0L, 5L, 0L, 0L, 3L, 3L, 0L, 5L, 2L), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')), structure(c(1.501181611548, 1.64776358195565, 1.38492694536262, 2.16332775373429, 2.09256404388232, 1.44052700310346, 0.318416746879368, 1.53656346647399, 2.26441876780853, 1.31416323551065, 0.495326021509292, 1.09176300454732, 1.27372682988096, 1.95609117488209, 1.51129071295543, 1.48096340873315, 1.88532746503012, 2.15827320303057, 1.49107251014058, 1.77412734954845, 1.19790856932527, 0.884526425695124, 1.21307222143641, 1.68314543688164, 0.181943877879142, 1.71347274110391, 1.29899958339952, 1.48601795943686, 1.0007810918805, 1.52139981436285, 1.42030880028861, 0.505435122916716, 1.51129071295543, 1.3343814383255, 1.81456375517815, -1.99474544941847e-05, 1.40009059747376, 2.10772769599345, 0.611580687694671, 0.136452921545733, 1.10692665665846, 1.61238172702967, 0.990671990473078, 1.28383593128838, 1.3343814383255, 1.44558155380717, 1.15747216369558, 1.30910868480694, 0.753108107398609, 1.48601795943686, 2.10772769599345, 2.40089163680876, 1.27372682988096, 1.16252671439929, 0.985617439769366, 2.05212763825262, 1.34449053973293, 0.768271759509746, 0.844090020065427, 1.22823587354755, 0.980562889065654, 1.10692665665846, 0.899690077806261, 1.67303633547421, 0.99572654117679, 1.68314543688164, 1.42030880028861, 1.55172711858512, 1.55172711858512, 0.722780803176337, 1.98136392840065, 1.39503604677005, 1.14230851158444, 1.07154480173247, 1.08670845384361, 0.662126194731792, 0.808708165139443, 1.91565476925239, 2.08750949317861, 1.15747216369558, 1.31921778621437, 1.02605384539906, 1.18274491721414, 1.23329042425126, 0.783435411620882, 1.65787268336308, 0.965399236954518, 2.27452786921595, 1.25350862706611, 1.22823587354755, 1.74885459602989, 1.54667256788141, 1.99652758051179, 1.22318132284384, 1.09681755525103, 2.06223673966004, 1.82972740728929, 0.808708165139443, 1.6679817847705, 1.74885459602989), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep3_c7decb1e0e451a0cab405ce8480a7f2e() {
        assertEval("argv <- list(structure(c(NA, 17.4716236802524, 0.424429400003, -2.45474630431729, -8.6855922903657, -11.7956139807344, -8.08147081196715, -13.3123167980156, -1.24650334752019, 21.281002075072, -5.32311940332657, 0.621869751489083, -19.2022951076469, -0.543162784063959, NA, NA, 15.344649382745, -9.74060313555005, 0.149375174081257, -5.85062482591874, -6.90563567110309, -9.96064651628744, 5.6326723568001, -8.78481137542338, -6.01565736147178, -15.543162784064, 2.34681552556734, -13.2465033475202, -3.82901961529671, 1.5226506664314, NA, -5.9777558474085, 22.7534966524798, 15.5010454558094, 4.13857256877024, -11.6855922903657, 11.6768805966734, -7.38893285382193, 10.8527157375375, -11.3889328538219, 14.1493751740813, -0.388932853821931, 13.0835617235859, -1.98225172690947, 5.96273742790618, -1.50975714950164, -1.38893285382193, 9.90772658272184, 7.3144077096343, -12.9822517269095, 2.02855087840155, -4.7956139807344, 3.14937517408126, -10.3231194033266, -2.25730595283121, 2.56685890630474, 4.27019946976097, 5.14937517408126, 0.0285508784015471, 5.85271573753749, 6.73189144185778, -6.38893285382193, 0.0285508784015471, -3.14728426246251, 15.1493751740813, 13.7869022870421, -7.27891116345324, 9.61106714617807, 4.84191313222647, -3.98225172690947, -6.38893285382193, 13.0285508784015, 5.13857256877024, -8.50975714950164, -0.619778839870337, -3.97144912159845, 23.1493751740813, -2.80641658604541, -1.03726257209382, 2.25939686444995, 4.25939686444995, -4.38893285382193, 6.38022116012966, -4.74060313555005, 2.02855087840155, -15.7956139807344, 8.21518862457662, -12.0264599667828, -2.1364816571515, 5.8635183428485, -14.729800530239, 4.80850749766416, -11.7848113754234, 9.45683721593604, -15.2573059528312, 5.28100207507198, 12.8635183428485, 6.50104545580937, 1.55605630099372, -7.44394369900628, 9.9735400332172, -11.2681085581422, 7.44603461062503, -8.14728426246251, -1.72980053023903, -3.90563567110309, 4.56685890630474, -5.37813024851092, -1.25730595283121, 10.7426940471688, NA, NA, 6.24343998511081, -21.9164382764141, -6.1364816571515, -15.8398222206077, -4.12567905184048, -7.94984391097642, -6.4773493335686, -5.65318447443266), .Tsp = c(1945, 1974.75, 4), class = 'ts'), 9.24492052298191);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep4_efff2fb3f229b450642c0aaf0b17355c() {
        assertEval("argv <- list(structure(-0.437222043740988, .Names = 'Var2'), 6.28318530717959);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep5_b85231486e0ba6e2260c710ddfb6d98c() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`/`(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep6_ca225cdd5bea5941ced776cf37109305() {
        assertEval("argv <- list(structure(c(25.1597633136098, 12.8284023668648), .Dim = 2L, .Dimnames = list(c('1', '2'))), c(13L, 13L));`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep7_40fa093a34da206b04e02aae8e7309a0() {
        assertEval("argv <- list(1e+05, 3);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep8_5dca4f10baf3ba907592cdac82d4cfea() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 6L, 2L, 4L, 3L, 7L, 2L, 8L, 4L, 2L, 2L, 1L, 3L, 3L, 4L, 3L, 2L, 1L, 2L, 3L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 4L, 1L, 1L, 1L, 1L, 2L, 1L, 5L, 2L, 1L, 3L, 2L, 1L, 1L, 6L, 2L, 1L, 2L, 5L, 2L, 2L, 2L, 4L, 4L, 1L, 1L, 3L, 4L, 2L, 2L, 2L, 1L, 5L, 4L, 1L, 3L, 1L, 1L, 4L, 2L, 3L, 2L, 1L, 8L, 1L, 5L, 1L, 3L, 4L, 4L, 1L, 3L, 1L, 2L, 6L, 1L, 1L, 1L, 1L, 1L, 6L, 2L, 2L, 1L, 1L, 2L, 3L, 1L, 1L, 1L, 1L), .Dim = 126L, .Dimnames = structure(list(fe = c('1.6', '1.667', '1.7', '1.733', '1.75', '1.783', '1.8', '1.817', '1.833', '1.85', '1.867', '1.883', '1.917', '1.933', '1.95', '1.967', '1.983', '2', '2.017', '2.033', '2.067', '2.083', '2.1', '2.133', '2.15', '2.167', '2.183', '2.2', '2.217', '2.233', '2.25', '2.267', '2.283', '2.3', '2.317', '2.333', '2.35', '2.367', '2.383', '2.4', '2.417', '2.483', '2.617', '2.633', '2.8', '2.883', '2.9', '3.067', '3.317', '3.333', '3.367', '3.417', '3.45', '3.5', '3.567', '3.6', '3.683', '3.717', '3.733', '3.75', '3.767', '3.817', '3.833', '3.85', '3.883', '3.917', '3.95', '3.966', '3.967', '4', '4.033', '4.05', '4.067', '4.083', '4.1', '4.117', '4.133', '4.15', '4.167', '4.183', '4.2', '4.233', '4.25', '4.267', '4.283', '4.3', '4.317', '4.333', '4.35', '4.366', '4.367', '4.383', '4.4', '4.417', '4.433', '4.45', '4.467', '4.483', '4.5', '4.517', '4.533', '4.55', '4.567', '4.583', '4.6', '4.617', '4.633', '4.65', '4.667', '4.7', '4.716', '4.733', '4.75', '4.767', '4.783', '4.8', '4.817', '4.833', '4.85', '4.883', '4.9', '4.933', '5', '5.033', '5.067', '5.1')), .Names = 'fe'), class = 'table'), 272L);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsep_testsep9_7105f4d2294ebb9e608ff8e8f1a9dd88() {
        assertEval("argv <- list(c(-20.7752893729399+0i, -22.2629231778254+0i, 30.2366932497517-0i, -17.7609104766206+0i, -12.009450871146+0i, -20.6744466063748+0i, -16.2509653806178-0i, 14.8872572302678-0i, -2.41214022512376e+00+5e-15i, 30.1945691318138-0i, -14.86107358966-0i, -75.7334659810725-0i, -31.7348183989382+0i, 33.742775143777-0i, 26.1570616797447-0i, 37.7317903854624+0i, -7.20820970337446-0i, 38.6698755921621-0i, -26.4295844393936-0i, 26.3000016960339+0i, -16.3754767271763+0i, -7.29593605495242-0i, 9.19886724090888+0i, -35.3925832738897+0i, 21.0943018303757+0i, 4.90714440628349-0i), 26L);`/`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq1_1838d3290bf788ad03372be6dca754d3() {
        assertEval("argv <- list(c('y', 'A', 'U', 'V'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq10_41ac8ce50d3fb9a1040b3c50b35855c8() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, NA, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, NA, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52), .Dim = c(98L, 2L), .Dimnames = list(NULL, c('intercept', 'trend'))));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq11_077ce4caac78cce009b6b914fed4b9a4() {
        assertEval("argv <- list(list(structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166, 171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194, 196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201, 204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 229, 242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432), .Tsp = c(1949, 1960.91666666667, 12), class = 'ts'), structure(c(419.147602949539, 391.474665943444, 435.919286153217, 443.935203034261, 455.023399013445, 517.28707821144, 589.71337277669, 582.999919227301, 484.573388713116, 428.878182738437, 368.526582998452, 406.728709993152, 415.660571294428, 388.716535970235, 433.006017658935, 440.885684396326, 451.651900136866, 513.051252429496, 584.327164324967, 577.055407135124, 479.076505013118, 423.494870357491, 363.43932958967, 400.592058645117), .Tsp = c(1961, 1962.91666666667, 12), class = 'ts'), structure(c(484.030717075782, 462.954959541421, 526.353307750503, 546.165638262644, 569.502470928676, 657.838443307596, 761.241730163307, 763.280655335144, 642.989004951864, 576.423799567567, 501.429012064338, 559.981301364233, 591.700754553767, 565.210772316967, 642.377841008703, 666.682421047093, 695.547100430962, 804.065022775202, 931.340589597203, 934.837830059897, 788.422986194072, 707.666678543854, 616.37838266375, 689.250456425465), .Tsp = c(1961, 1962.91666666667, 12), class = 'ts')));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq12_8aee206209e29402a65e45543330003d() {
        assertEval("argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq13_7b42a0c7080020fcbb61668ce4804b1d() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));seq_len(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq14_3a9fe20985c4b71e4c0ca17b91af5273() {
        assertEval("argv <- list(structure(list(g = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L), .Label = c('1', '2', '3', '4'), class = 'factor')), .Names = 'g'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq15_c494573f49d34eb5ed266da7eff0503d() {
        assertEval("argv <- list(structure(list(20), row.names = c(NA, -1L)));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq16_c72638ffe848df023ca0ed216dc0247c() {
        assertEval("argv <- list(list(list(c('', '', '\\036', '', 'New', 'print()', '(S3)', 'method', 'for', 'class', '\\'function\\',', '', '', '', '', '', '', '', 'also', 'used', 'for', 'auto-printing.', '', 'Further,', '.Primitive', '', '', '', '', '', '', '', 'functions', 'now', 'print', 'and', 'auto-print', 'identically.', '', 'The', 'new', 'method', '', '', '', '', '', '', '', 'is', 'based', 'on', 'code', 'suggestions', 'by', 'Romain', 'François.'))));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq17_a076be2ca1deac8397fd05f5b2c9f09f() {
        assertEval("argv <- list(structure(list(Topic = c('myTst-package', 'foo-class', 'myTst', 'show,foo-method', 'show,foo-method', 'show-methods'), File = c('myTst-package', 'foo-class', 'myTst-package', 'foo-class', 'show-methods', 'show-methods')), .Names = c('Topic', 'File'), row.names = c(3L, 1L, 4L, 2L, 6L, 5L)));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq18_e2a57076eef7d6f09449fbbf4f369833() {
        assertEval("argv <- list(structure(list(structure(' A Simple Plot and Legend Demo ', Rd_tag = 'TEXT')), Rd_tag = 'Rd', class = 'Rd'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq19_fe0da2d2d344d7a04e5668c6a7a46d39() {
        assertEval("argv <- list(structure(list(Topic = character(0), File = character(0), Title = character(0), Internal = character(0)), .Names = c('Topic', 'File', 'Title', 'Internal'), row.names = integer(0), class = 'data.frame'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq2_ed6d3d224b02f041d5b7d32f5923180a() {
        assertEval("argv <- list(structure(c(1, 2, 3, 0, 10, NA), .Dim = c(3L, 2L)));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq20_5a7371d3ba784c53d4ad56c773ef1bde() {
        assertEval("argv <- list(structure(c(2.21843970753346, 1.80732678656753, -1.09399175987006, 0.585986462327552, -5.68458926982395, 1.23352238598674, 0.457950438444482, 2.51599006679516, -2.28780372840319, 5.53596062467695, 2.17890565095959, -1.59611751350773, -2.9672978602151, 0.745175851232308, 1.93388282434376, -3.03559459078455, 2.19500990255906, 0.0725275773318347, -0.75336064096447, -1.15505962102859, -2.84782886882524, -1.41070341448251, -0.540252474026749, 4.87719739781058, 0.890715639552621, -0.968642103099399, 1.73177156113283, -0.993218102309356, -0.656454198323984, -1.5299506933835, -0.298424468882268, 6.51011264717937, 2.68326774833378, 1.99295445531679, -0.214079422583434, 6.73505308264589, -4.54579214489424, -2.3991834444486, -1.71479569181251, -6.47293095421849, -1.67116930820449, -11.5853328029437, -2.48588878138021, -0.888857646918452, 8.06807102468956, -0.216046323028316, 6.24682938323398, -1.74761908105831, 2.53082303181417, 2.31410662801887, 2.97453294161523, -2.88723068649699, -1.04144266580674, -0.835536300630093, -6.10229135345437, -4.37605802846523, -1.94289029309402e-16, 5.96619037131792, -1.1474434665393, 3.78819830631063, -3.01580771910632, -0.656454198323984, 1.50824785799851, -2.06401783962239, -3.02346226775125, 0.407243897855763, -3.96478352340807, -2.12718621336067, -0.78924288871239, -3.03559459078455, 0.457950438444496, -0.797900839851943, -3.38233849466459, 1.97815029009903, 0.745175851232309, -1.09645503136389, 0.341748714147263, 7.32472922782987, -1.33672649241008, 1.51931399477032, 0.00590129163826772, -4.09533092706814, 0.195481697042187, -2.7736762657602, -3.48737543915568, 0.536312040203338, 0.775871729180551, 4.37979177946206, 1.30271070089245, 4.2132287611068, 7.33457656622414, 3.28311350719274, -1.30271070089245), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq21_27f2d9b1f2cc6599b57eb3894205d30c() {
        assertEval("argv <- list(structure(list(surname = structure(integer(0), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(integer(0), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(integer(0), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = integer(0), class = 'data.frame'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq22_93e0190d2d5a2be508c457146d3ef01b() {
        assertEval("argv <- list(structure(list(A = 0:10, B = 10:20, `NA` = 20:30), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq23_718ba4d829e83539bd799f240ecde531() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq24_1fb0b85c2885bde093d933bdd8762299() {
        assertEval("argv <- list(structure(c(3, 8), .Dim = 2L, .Dimnames = structure(list(g = c('1', '2')), .Names = 'g'), call = quote(by.data.frame(data = X, INDICES = g, FUN = colMeans)), class = 'by'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq25_cccd5426988143670b1eab06cc2fd9ea() {
        assertEval("argv <- list(structure(list(.Data = 'numeric'), .Names = '.Data'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq26_d7e82848dde035e5b2c3487197aeb208() {
        assertEval("argv <- list(structure(2, .Names = 'Ind'));seq_len(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq27_33d7074d69dd54986cf2ac21b1a194f2() {
        assertEval("argv <- list(c(2L, 2L));do.call('seq_len', argv)");
    }

    @Test
    public void TestrGenBuiltinseq_testseq28_368fb08e35eb99763ceaa6827ba4175c() {
        assertEval("argv <- list(structure(list(num = 1:4, fac = structure(11:14,     .Label = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',         'k', 'l', 'm', 'n', 'o'), class = 'factor'), date = structure(c(15065,     15066, 15067, 15068), class = 'Date'), pv = structure(list(1:3,     4:5, 6:7, 8:10), class = c('package_version', 'numeric_version'))),     .Names = c('num', 'fac', 'date', 'pv'), row.names = c(NA,         -4L), class = 'data.frame'));do.call('seq_along', argv)");
    }

    @Test
    public void TestrGenBuiltinseq_testseq29_69e47c6f9f77631a5c2424ebd070df2e() {
        assertEval("argv <- structure(list(0, 38431.66015625, by = 1000), .Names = c('',     '', 'by'));do.call('seq', argv)");
    }

    @Test
    public void TestrGenBuiltinseq_testseq3_f622c48a80aefe66800ce2121d9bb58d() {
        assertEval("argv <- list(0L);seq_len(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq30_c8b0e242f36784c7e9c9a47425f2543b() {
        assertEval("argv <- structure(list(18000, 28000, length = 50L), .Names = c('',     '', 'length'));do.call('seq', argv)");
    }

    @Test
    public void TestrGenBuiltinseq_testseq4_3a3ca2ee01d1d004061b74d38447d0b7() {
        assertEval("argv <- list(structure(list(x = 1:3, y = structure(1:3, .Label = c('A', 'D', 'E'), class = 'factor'), z = c(6, 9, 10)), .Names = c('x', 'y', 'z'), row.names = c(NA, -3L), class = 'data.frame'));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq5_8690ea77d6330da7dd0dfc249188931e() {
        assertEval("argv <- list(FALSE);seq_len(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq7_963237089f2e55a9317c79b236ff2435() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq8_c33fd8f9fd4aa1611028694cf01c3e1a() {
        assertEval("argv <- list(structure(list(levels = c('1', '2', NA), class = 'factor'), .Names = c('levels', 'class')));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseq_testseq9_07861056337780629ae89b1d1e6c7be0() {
        assertEval("argv <- list(list(c(1+1i, 2+1.4142135623731i, 3+1.73205080756888i, 4+2i, 5+2.23606797749979i, 6+2.44948974278318i, 7+2.64575131106459i, 8+2.82842712474619i, 9+3i, 10+3.1622776601684i)));seq_along(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint1_435241438c86e9c56ceec5fdf6a97d01() {
        assertEval("argv <- list(16146, by = 1, length.out = 4);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint10_66bbbc8840fc8d6bc9839579f9e3b93f() {
        assertEval("argv <- list(from = 0, to = structure(-1, .Names = 'c0'));seq.int(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint11_a114d8b402777e5e88455d1482d84e78() {
        assertEval("argv <- list(10L, 99L, 1);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint12_26fe7f0beecb9fbbfeeb30313d6882f9() {
        assertEval("argv <- list(1L);seq.int(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint13_cf4cef5ca108663f00320bf6480ebd59() {
        assertEval("argv <- list(102L, 112L, 1L);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint14_4139d8550bf8db877b16669adb5eb01f() {
        assertEval("argv <- list(from = 0.95, by = -0.120360949612403, length.out = 6);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint15_875d4e8ce679548405c84bcca74b321a() {
        assertEval("argv <- list(list());seq.int(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint16_06484717074c2fe840538546ce023637() {
        assertEval("argv <- list(-0.2, 1, length.out = 7);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint17_2e3dd7f1248c8236567f810b8426346d() {
        assertEval("argv <- list(from = 0.070740277703696, to = 0.793110173512391, length.out = NULL);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint18_0dc53d8570353e0fd675d999c4e298cf() {
        assertEval("argv <- list(105L, 112L, 3L);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint19_03d81a4268949349dac6a33f66a0e7ca() {
        assertEval("argv <- list(0, length.out = 3L);seq.int(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint2_833837cd2c7024b84527e6cc6318ce3f() {
        assertEval("argv <- list(0.9, 0.95, length.out = 16);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint20_a25b0ed39884aee2ab5a0a4740d67644() {
        assertEval("argv <- list(0, structure(345600, tzone = 'GMT'), 43200);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint21_d329ffa06bd12e1895efdd679398d419() {
        assertEval("argv <- list(-7, 7, length.out = 11);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint22_b93e7ae613cf1991d4b0b207d70df9c2() {
        assertEval("argv <- list(4, 4L);seq.int(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint23_2ebe0685f9e788b6984f988da75b10a2() {
        assertEval("argv <- list(0L, 49, 1);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint24_77429da3fa30f07ffd3b524b0b623fa9() {
        assertEval("argv <- list(1, 1, by = 1);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint26_488070fe16f69270f82af8b2c99437a5() {
        assertEval("argv <- list(NaN, NaN);do.call('seq.int', argv)");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint27_516d48d00b6bfae3b7abc467e48b7a59() {
        assertEval("argv <- structure(list(1.2, 1, by = 1), .Names = c('', '', 'by'));do.call('seq.int', argv)");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint28_31dc8e95d9308b517d480a278bf6efe3() {
        assertEval("argv <- structure(list(to = NaN), .Names = 'to');do.call('seq.int', argv)");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint29_0d91be29fca815069028cd633566e7e5() {
        assertEval("argv <- list(NaN);do.call('seq.int', argv)");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint3_6ebfa066b0a3aedefc08f6cb45e6a547() {
        assertEval("argv <- list(FALSE);seq.int(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint4_a9b7d237bccf65b5720f185242dd8c18() {
        assertEval("argv <- list(1.2e+100, 1.3e+100, length.out = 2);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint5_50b3cd6c7c9aee92e159429d680fadeb() {
        assertEval("argv <- list(structure(0.88, .Names = 'Other'), structure(1, .Names = 'Vanilla Cream'), length.out = 24);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint6_1535acb6c16135e174e9d159863c4fa3() {
        assertEval("argv <- list(953553600, by = 86400, length.out = 10);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint7_e4636cba32da6fbde37b9dbe1eb04b30() {
        assertEval("argv <- list(25L);seq.int(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint8_be3e83933ddb4b697617f8977cd220c6() {
        assertEval("argv <- list(from = 2.0943951023932, to = 2.61799387799149, by = 0.0174532925199433);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint9_ced1e26637467cbe69e1d20121049d4d() {
        assertEval("argv <- list(from = 0, to = 0.793110173512391, length.out = FALSE);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinsetEncoding_testsetEncoding1_575410e6ad8803786ba9b9e5cb659549() {
        assertEval("argv <- list('abc', 'UTF-8'); .Internal(setEncoding(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsetEncoding_testsetEncoding2_20b05ee818fc836fe749c9486234902b() {
        assertEval("argv <- list(''', 'unknown'); .Internal(setEncoding(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsetEncoding_testsetEncoding3_368f1a8fdffd199bc14ab4e1112075f5() {
        assertEval("argv <- list('3.0.1', 'unknown'); .Internal(setEncoding(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsetEncoding_testsetEncoding4_45acb501e0d08be171b77f3f5a401738() {
        assertEval("argv <- list(structure(c('Matrix', '1.0-12', '2013-03-26', 'recommended', 'Sparse and Dense Matrix Classes and Methods', 'Douglas Bates <bates@stat.wisc.edu> and Martin Maechler\\n        <maechler@stat.math.ethz.ch>', 'Martin Maechler <mmaechler+Matrix@gmail.com>', 'Doug and Martin <Matrix-authors@R-project.org>', 'Classes and methods for dense and sparse matrices and\\n        operations on them using Lapack and SuiteSparse.', 'R (>= 2.15.0), stats, methods, utils, lattice', 'graphics, grid', 'expm, MASS', 'MatrixModels, graph, SparseM, sfsmisc', 'UTF-8', 'no', 'no longer available, since we use data/*.R *and* our\\nclasses', 'yes', 'no', 'GPL (>= 2)', 'The Matrix package includes libraries AMD, CHOLMOD,\\nCOLAMD, CSparse and SPQR from the SuiteSparse collection of Tim\\nDavis.  All sections of that code are covered by the GPL or\\nLGPL licenses.  See the directory doc/UFsparse for details.', 'http://Matrix.R-forge.R-project.org/', '2013-03-26 15:38:54 UTC; maechler', 'yes', 'CRAN', '2013-03-26 19:25:05', 'R 3.0.1; x86_64-unknown-linux-gnu; 2013-12-07 03:52:11 UTC; unix'), .Names = c('Package', 'Version', 'Date', 'Priority', 'Title', 'Author', 'Maintainer', 'Contact', 'Description', 'Depends', 'Imports', 'Suggests', 'Enhances', 'Encoding', 'LazyData', 'LazyDataNote', 'ByteCompile', 'BuildResaveData', 'License', 'LicenseDetails', 'URL', 'Packaged', 'NeedsCompilation', 'Repository', 'Date/Publication', 'Built')), structure('UTF-8', .Names = 'Encoding')); .Internal(setEncoding(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsetHook_testsetHook1_862b435b6fd61e2a7f2576a35eff11dc() {
        assertEval("argv <- structure(list(hookName = 'UserHook::stats4::onUnload',     value = function(pkgname, ...) cat('onUnload', sQuote(pkgname),         'B', '\\n')), .Names = c('hookName', 'value'));do.call('setHook', argv)");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object1_0ab55bb1bc045815c8938f2fed92bf45() {
        assertEval("argv <- list(structure('ObjectsWithPackage', class = structure('signature', package = 'methods'), .Names = '.Object', package = 'methods'), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object10_f1618bd52a1d19d12b81f01159dea332() {
        assertEval("argv <- list(structure(function (object) cat('I am a \\'foo\\'\\n'), target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('MethodDefinition', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object11_c9d4d5d9e8b0439e485064de85950760() {
        assertEval("argv <- list(structure(function (x = 1, nrow, ncol) standardGeneric('diag'), generic = character(0), package = character(0), group = list(), valueClass = character(0), signature = character(0), default = quote(`\\001NULL\\001`), skeleton = quote(`<undef>`()), class = structure('standardGeneric', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object12_ebdc141e1b9aa511ef1e612848e54ec6() {
        assertEval("argv <- list(structure(list(`NA` = structure(function (object) cat('I am a \\'foo\\'\\n'), target = structure('foo', .Names = 'object', package = 'myTst', class = structure('signature', package = 'methods')), defined = structure('foo', .Names = 'object', package = 'myTst', class = structure('signature', package = 'methods')), generic = structure('show', package = 'methods'), class = structure('MethodDefinition', package = 'methods'))), .Names = NA_character_, arguments = structure('object', simpleOnly = TRUE), signatures = list(), generic = structure(function (object) standardGeneric('show'), generic = structure('show', package = 'methods'), package = 'methods', group = list(), valueClass = character(0), signature = structure('object', simpleOnly = TRUE), default = structure(function (object) showDefault(object, FALSE), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), generic = structure('show', package = 'methods'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (object) showDefault(object, FALSE))(object)), class = structure('standardGeneric', package = 'methods')), class = structure('listOfMethods', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object13_14d9f7bd93f7f9ee8cd2510ca60e57c5() {
        assertEval("argv <- list(structure(function (x, type = c('O', 'I', 'F', 'M', '2')) {    if (identical('2', type)) {        svd(x, nu = 0L, nv = 0L)$d[1L]    } else .Internal(La_dlange(x, type))}, target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('derivedDefaultMethod', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object14_9aff3252b217942d4806b486dea68e81() {
        assertEval("argv <- list(structure(function (x, y, ...) UseMethod('plot'), target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('derivedDefaultMethod', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object2_ed883a7fd8b0bee8e11ee812189f7b75() {
        assertEval("argv <- list(structure(function (x, ...) standardGeneric('toeplitz'), generic = character(0), package = character(0), group = list(), valueClass = character(0), signature = character(0), default = quote(`\\001NULL\\001`), skeleton = quote(`<undef>`()), class = structure('standardGeneric', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object3_072c080448e33f0a49b36e5cd681a05d() {
        assertEval("argv <- list(structure(character(0), package = character(0), class = structure('ObjectsWithPackage', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object4_f0c5493b3da7d5cd4727d96805aadbb2() {
        assertEval("argv <- list(structure(function (qr, complete = FALSE, Dvec) standardGeneric('qr.Q'), generic = character(0), package = character(0), group = list(), valueClass = character(0), signature = character(0), default = quote(`\\001NULL\\001`), skeleton = quote(`<undef>`()), class = structure('standardGeneric', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object5_29afb062e3460024baf7c5ad554f2872() {
        assertEval("argv <- list(structure(c('nonStructure', 'ANY', 'ANY', 'ANY'), .Names = c(NA_character_, NA_character_, NA_character_, NA_character_), package = character(0), class = structure('signature', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object6_8dab2be22e76070a5a190d6e9692efef() {
        assertEval("argv <- list(structure(function (x) .Internal(drop(x)), target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('derivedDefaultMethod', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object7_25798037d870e60328f01dd63b909881() {
        assertEval("argv <- list(structure(function (x, y = NULL) .Internal(crossprod(x, y)), target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('derivedDefaultMethod', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object8_84be8f312b049b83a14d879ba3ed6500() {
        assertEval("argv <- list(structure(function (x, i, j, ...) x@aa[[i]], target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('MethodDefinition', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object9_f87ba8a0629ae6811587d0c11e0bcf2d() {
        assertEval("argv <- list(numeric(0), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetSessionTimeLimit_testsetSessionTimeLimit1_0d606561ef60b6a688844ab91b23932c() {
        assertEval("argv <- list(NULL, NULL); .Internal(setSessionTimeLimit(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsetSessionTimeLimit_testsetSessionTimeLimit2_3a41dc6c95029a1a3385b669b6ef7b3c() {
        assertEval("argv <- list(FALSE, Inf); .Internal(setSessionTimeLimit(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsetTimeLimit_testsetTimeLimit1_696c717ab745eadf821ecf540881f6c2() {
        assertEval("argv <- list(FALSE, Inf, FALSE); .Internal(setTimeLimit(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetdiff_testsetdiff1_2018521fc54b744e2cbe183b9fc5afdf() {
        assertEval("argv <- structure(list(x = c('bibtex', 'tex'), y = '.svn'), .Names = c('x',     'y'));do.call('setdiff', argv)");
    }

    @Test
    public void TestrGenBuiltinseterrmessage_testseterrmessage1_2970788180849cbc3a9e7baa853da53a() {
        assertEval("argv <- list('Error in cor(rnorm(10), NULL) : \\n  supply both 'x' and 'y' or a matrix-like 'x'\\n'); .Internal(seterrmessage(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinseterrmessage_testseterrmessage2_bdd2bd1edc78df6b3afdcaf9a7a33a3a() {
        assertEval("argv <- list('Error in as.POSIXlt.character(x, tz, ...) : \\n  character string is not in a standard unambiguous format\\n'); .Internal(seterrmessage(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinseterrmessage_testseterrmessage3_6b1137e46070ef431e77a376fc23fddb() {
        assertEval("argv <- list('Error in validObject(.Object) : \\n  invalid class “trackCurve” object: Unequal x,y lengths: 20, 10\\n'); .Internal(seterrmessage(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed1_2ef0ed43632aae054f81d4509ed1a12d() {
        assertEval("argv <- list(1000, 0L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed2_11d56d354a8058985c6d0474e7df1b9a() {
        assertEval("argv <- list(77, 2L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed3_22ab62314b1f3b2905e5a30da785c03b() {
        assertEval("argv <- list(123, 6L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed4_33a423903f4010ec520c9ae76ad3788b() {
        assertEval("argv <- list(77, 4L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed5_d77b22d093beac670d978d1481a1f327() {
        assertEval("argv <- list(1000, 1L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed6_7ec7ce14fa8b07fc3a8d562202198694() {
        assertEval("argv <- list(0, NULL, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed7_03b9f46d49e83b773bcc79c5a8506f7e() {
        assertEval("argv <- list(123, 7L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed8_29a18388ed13ad67e6d31a18468cd5cd() {
        assertEval("argv <- list(NULL, NULL, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinshQuote_testshQuote1_6dc838413742c948f85b0027f213aa96() {
        assertEval("argv <- structure(list(string = c('ABC', '\\'123\\'', 'a'b'), type = 'cmd'),     .Names = c('string', 'type'));do.call('shQuote', argv)");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames1_e417f693a9006971823c15f3ddbd1087() {
        assertEval("argv <- list(structure(list(c(8.44399377410362, 28.4640218366572, 12.2441566485997)), row.names = c(NA, -3L), class = 'data.frame'), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames11_61efbc87d8d87e59e59f37703e47eb8b() {
        assertEval("argv <- list(structure(list(age = c(40, 60, 80)), .Names = 'age', row.names = c(NA, -3L), class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames12_84570ffd33f41642537e1b94d56fa999() {
        assertEval("argv <- list(structure(list(surname = structure(integer(0), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(integer(0), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(integer(0), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = integer(0), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames13_8a0f7d2722ab79362fe23e012ed40ee1() {
        assertEval("argv <- list(structure(list(age = 1:65), .Names = 'age'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames14_e08690c271af7ae7abfd39835ac5153c() {
        assertEval("argv <- list(structure(list(variog = c(0.000474498531874882, 0.00702969158809408, 0.00702969158809408, 0.00398874346479977, 0.000383788683835002, 1.20172224431796e-06, 1.20172224431796e-06, 0.122905372955376, 0.378939119261529, 0.00604112083775904, 0.0365586576304611, 2.52242766079251e-05, 0.100345142776916, 0.00940165099100291, 0.149441544291522, 0.0295722090612792), dist = c(36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36)), .Names = c('variog', 'dist'), row.names = c('2.16', '3.16', '4.16', '1.16', '8.16', '5.16', '6.16', '7.16', '11.16', '9.16', '10.16', '12.16', '13.16', '15.16', '14.16', '16.16'), class = c('Variogram', 'data.frame')), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames15_c5b6d7c5abb3d494a3c6f4d3bc7ae2ae() {
        assertEval("argv <- list(structure(list(age = c(-1, -0.959071428571429, -0.918142857142857, -0.877214285714286, -0.836285714285714, -0.795357142857143, -0.754428571428571, -0.7135, -0.672571428571429, -0.631642857142857, -0.590714285714286, -0.549785714285714, -0.508857142857143, -0.467928571428571, -0.427, -0.386071428571429, -0.345142857142857, -0.304214285714286, -0.263285714285714, -0.222357142857143, -0.181428571428571, -0.1405, -0.0995714285714285, -0.0586428571428571, -0.0177142857142856, 0.0232142857142859, 0.0641428571428573, 0.105071428571429, 0.146, 0.186928571428572, 0.227857142857143, 0.268785714285714, 0.309714285714286, 0.350642857142857, 0.391571428571429, 0.4325, 0.473428571428572, 0.514357142857143, 0.555285714285714, 0.596214285714286, 0.637142857142857, 0.678071428571429, 0.719, 0.759928571428572, 0.800857142857143, 0.841785714285714, 0.882714285714286, 0.923642857142857, 0.964571428571429, 1.0055), Subject = structure(c(25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L, 25L), .Label = c('10', '26', '25', '9', '2', '6', '7', '17', '16', '15', '8', '20', '1', '18', '5', '23', '11', '21', '3', '24', '22', '12', '13', '14', '19', '4'), class = 'factor')), .Names = c('age', 'Subject'), out.attrs = structure(list(dim = structure(c(50L, 26L), .Names = c('age', 'Subject')), dimnames = structure(list(    age = c('age=-1.00000000', 'age=-0.95907143', 'age=-0.91814286', 'age=-0.87721429', 'age=-0.83628571', 'age=-0.79535714', 'age=-0.75442857', 'age=-0.71350000', 'age=-0.67257143', 'age=-0.63164286', 'age=-0.59071429', 'age=-0.54978571', 'age=-0.50885714', 'age=-0.46792857', 'age=-0.42700000', 'age=-0.38607143', 'age=-0.34514286', 'age=-0.30421429', 'age=-0.26328571', 'age=-0.22235714', 'age=-0.18142857', 'age=-0.14050000', 'age=-0.09957143', 'age=-0.05864286', 'age=-0.01771429', 'age= 0.02321429',     'age= 0.06414286', 'age= 0.10507143', 'age= 0.14600000', 'age= 0.18692857', 'age= 0.22785714', 'age= 0.26878571', 'age= 0.30971429', 'age= 0.35064286', 'age= 0.39157143', 'age= 0.43250000', 'age= 0.47342857', 'age= 0.51435714', 'age= 0.55528571', 'age= 0.59621429', 'age= 0.63714286', 'age= 0.67807143', 'age= 0.71900000', 'age= 0.75992857', 'age= 0.80085714', 'age= 0.84178571', 'age= 0.88271429', 'age= 0.92364286', 'age= 0.96457143', 'age= 1.00550000'), Subject = c('Subject=10', 'Subject=26',     'Subject=25', 'Subject=9', 'Subject=2', 'Subject=6', 'Subject=7', 'Subject=17', 'Subject=16', 'Subject=15', 'Subject=8', 'Subject=20', 'Subject=1', 'Subject=18', 'Subject=5', 'Subject=23', 'Subject=11', 'Subject=21', 'Subject=3', 'Subject=24', 'Subject=22', 'Subject=12', 'Subject=13', 'Subject=14', 'Subject=19', 'Subject=4')), .Names = c('age', 'Subject'))), .Names = c('dim', 'dimnames')), row.names = 1201:1250, class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames16_8855b6c5101a8b2f7a3ccd227e2f367b() {
        assertEval("argv <- list(structure(list(variog = structure(c('0.007239522', '0.014584634', '0.014207936', '0.018442267', '0.011128505', '0.019910082', '0.027072311', '0.034140379', '0.028320657', '0.037525507'), class = 'AsIs'), dist = structure(c(' 1', ' 6', ' 7', ' 8', '13', '14', '15', '20', '21', '22'), class = 'AsIs'), n.pairs = structure(c(' 16', ' 16', '144', ' 16', ' 16', '128', ' 16', ' 16', '112', ' 16'), .Dim = 10L, .Dimnames = structure(list(c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22')), .Names = ''))), .Names = c('variog', 'dist', 'n.pairs'), row.names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames17_bd3e6b152d8e38ab9250bfbb7628f3ea() {
        assertEval("argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames18_d5d51d8fe765d2cfcf70d64b5b0d455c() {
        assertEval("argv <- list(structure(list(surname = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia'), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'no', 'yes', 'no'), class = 'AsIs'), title = structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...'), class = 'AsIs'), other.author = structure(c(NA, NA, NA, NA, NA, 'Ripley'), class = 'AsIs')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c('1', '2', '3', '4', '5', '6'), class = 'data.frame'), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames19_c1b4442365fd42d110842fc913f6325c() {
        assertEval("argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor', contrasts = 'contr.treatment'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor', contrasts = 'contr.treatment')), .Names = c('cbind(X, M)', 'M.user', 'Temp'), terms = quote(cbind(X, M) ~ M.user + Temp + M.user:Temp), row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames2_e50605ae607ee9e49c6079a439e18019() {
        assertEval("argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), terms = quote(y ~ x * z - 1), row.names = c(NA, 10L), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames20_cb2e61a537531466bb73de253be122de() {
        assertEval("argv <- list(structure(list(height = numeric(0), weight = numeric(0)), .Names = c('height', 'weight'), row.names = integer(0), class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames21_5e65389edfd1c0cd066d48c27f0ea3f0() {
        assertEval("argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames22_bff659f6e3bd4aaab7340b6950b27cd9() {
        assertEval("argv <- list(structure(list(Hair = structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('Black', 'Brown', 'Red', 'Blond'), class = 'factor'), Eye = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('Hair', 'Eye', 'Sex'), out.attrs = structure(list(dim = structure(c(4L, 4L, 2L), .Names = c('Hair', 'Eye', 'Sex')), dimnames = structure(list(Hair = c('Hair=Black', 'Hair=Brown', 'Hair=Red', 'Hair=Blond'), Eye = c('Eye=Brown', 'Eye=Blue', 'Eye=Hazel', 'Eye=Green'), Sex = c('Sex=Male', 'Sex=Female')), .Names = c('Hair', 'Eye', 'Sex'))), .Names = c('dim', 'dimnames')), class = 'data.frame', row.names = c(NA, -32L)), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames23_ea1577a2b4a2eb4d8775095247e89489() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 2), Deviance = c(12.2441566485997, 8.44399377410362, 11.9670615295804), AIC = c(73.9421143635373, 72.1419514890412, 77.665019244518)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', 'Temp', 'Soft'), class = c('anova', 'data.frame'), heading = c('Single term additions', '\\nModel:', 'cbind(X, M) ~ M.user')), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames3_2e252a5884bdd262d02355f57f3018fe() {
        assertEval("argv <- list(structure(list(weight = c(4.17, 5.58), group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('weight', 'group'), row.names = 1:2, class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames4_777d90689166b825b3226ecff1db828c() {
        assertEval("argv <- list(structure(list(x = 1:3, y = structure(1:3, .Label = c('A', 'D', 'E'), class = 'factor'), z = c(6, 9, 10)), .Names = c('x', 'y', 'z'), row.names = c(NA, -3L), class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames5_6ad800fa0dc62a99bbb9658d334d1d11() {
        assertEval("argv <- list(structure(list(c('4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.0-3', '4.0-3', '4.0-3', '4.0-3', '4.0-3', '4.0-2', '4.0-2', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '3.1-55', '3.1-55', '3.1-55', '3.1-54', '3.1-53', '3.1-53', '3.1-52', '3.1-51'), c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), c('The C and R code has been reformatted for legibility.', 'The old compatibility function rpconvert() has been removed.', 'The cross-validation functions allow for user interrupt at the end\\nof evaluating each split.', 'Variable Reliability in data set car90 is corrected to be an\\nordered factor, as documented.', 'Surrogate splits are now considered only if they send two or more\\ncases _with non-zero weight_ each way.  For numeric/ordinal\\nvariables the restriction to non-zero weights is new: for\\ncategorical variables this is a new restriction.', 'Surrogate splits which improve only by rounding error over the\\ndefault split are no longer returned.  Where weights and missing\\nvalues are present, the splits component for some of these was not\\nreturned correctly.', 'A fit of class \\'rpart\\' now contains a component for variable\\n‘importance’, which is reported by the summary() method.', 'The text() method gains a minlength argument, like the labels()\\nmethod.  This adds finer control: the default remains pretty =\\nNULL, minlength = 1L.', 'The handling of fits with zero and fractional weights has been\\ncorrected: the results may be slightly different (or even\\nsubstantially different when the proportion of zero weights is\\nlarge).', 'Some memory leaks have been plugged.', 'There is a second vignette, longintro.Rnw, a version of the\\noriginal Mayo Tecnical Report on rpart.', 'Added dataset car90, a corrected version of the S-PLUS dataset\\ncar.all (used with permission).', 'This version does not use paste0{} and so works with R 2.14.x.', 'Merged in a set of Splus code changes that had accumulated at Mayo\\nover the course of a decade. The primary one is a change in how\\nindexing is done in the underlying C code, which leads to a major\\nspeed increase for large data sets.  Essentially, for the lower\\nleaves all our time used to be eaten up by bookkeeping, and this\\nwas replaced by a different approach.  The primary routine also\\nuses .Call{} so as to be more memory efficient.', 'The other major change was an error for asymmetric loss matrices,\\nprompted by a user query.  With L=loss asymmetric, the altered\\npriors were computed incorrectly - they were using L' instead of L.\\nUpshot - the tree would not not necessarily choose optimal splits\\nfor the given loss matrix.  Once chosen, splits were evaluated\\ncorrectly.  The printed “improvement” values are of course the\\nwrong ones as well.  It is interesting that for my little test\\ncase, with L quite asymmetric, the early splits in the tree are\\nunchanged - a good split still looks good.', 'Add the return.all argument to xpred.rpart().', 'Added a set of formal tests, i.e., cases with known answers to\\nwhich we can compare.', 'Add a usercode vignette, explaining how to add user defined\\nsplitting functions.', 'The class method now also returns the node probability.', 'Add the stagec data set, used in some tests.', 'The plot.rpart routine needs to store a value that will be visible\\nto the rpartco routine at a later time.  This is now done in an\\nenvironment in the namespace.', 'Force use of registered symbols in R >= 2.16.0', 'Update Polish translations.', 'Work on message formats.', 'Add Polish translations', 'rpart, rpart.matrix: allow backticks in formulae.', 'tests/backtick.R: regession test', 'src/xval.c: ensure unused code is not compiled in.', 'Change description of margin in ?plot.rpart as suggested by Bill\\nVenables.')), row.names = c(NA, -29L), class = 'data.frame'), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames6_87e2292f5191a1087334a16244a8aafb() {
        assertEval("argv <- list(structure(list(c(101, 32741, 2147483621, 1.70141183460469e+38, 8.98846567431158e+307)), row.names = c(NA, -5L), class = 'data.frame'), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames7_13b317736ad4ebfb88133a25f7e18138() {
        assertEval("argv <- list(structure(list(srcfile = '/home/lzhao/hg/r-instrumented/library/stats/R/stats', frow = 5139L, lrow = 5139L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames8_0d75affd88a60a07430b84cdb48a0200() {
        assertEval("argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'), 2L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames9_5b1caa90ff05536d66df3bd84acf57c5() {
        assertEval("argv <- list(structure(list(Topic = character(0), File = character(0), Title = character(0), Internal = character(0)), .Names = c('Topic', 'File', 'Title', 'Internal'), row.names = integer(0), class = 'data.frame'), 0L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsign_testsign1_2dcb378f86f461c4f465d16c975454b4() {
        assertEval("argv <- list(29);sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsign_testsign2_c3c9b9149d413778f2ebed3de9939f5b() {
        assertEval("argv <- list(-29);sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsign_testsign3_c82d822891a0e79eb25523f330206157() {
        assertEval("argv <- list(structure(-29.5, .Names = 'W'));sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsign_testsign4_21c141e8c61b25cdc4c37206ad8cfbdf() {
        assertEval("argv <- list(c(2, 1.5));sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsign_testsign5_2bf716b41bb3841689bfda97fcaebf97() {
        assertEval("argv <- list(structure(c(0.880860525591375, 0.639733585162877, 0.698114489497201, -0.163771828170666, 0.644716815673843, 0.434938037582636, -1.02532598809559, -0.414997803714266, 0.314897800466685, 0.824285322485286, 0.771220667991526, -1.0213685325144, 0.928795080183842, 0.819280413726459, -1.81676447087493, 0.750354069620072, 0.445075757764079, -0.708114061379466, 0.824862990562917, -0.538393491087728, 0.974198118249183, -1.44391305877857, -0.0570136982996023, -0.0628620473044737, 0.00599485749367468, 0.397443892596693, -0.670529694022941, -0.443694007369259, -1.60185734774623, -0.125754544304519, 0.726126214864875, -0.0167895964097286, -0.306643229540329, -0.216330373334122, -0.903891452322388, 0.326172148813803, -0.13510345952301, -0.897613228123322, 0.845413917001047, -0.831631251080141, 0.487109758044019, -2.39537135767952, -1.00899546383701, -0.15086268042785, 0.817762526779461, -0.0500097005975852, 0.489115737630558, -0.570402758036241, 0.837693310865448, 0.128079053272328, -0.543417844555625, -0.372441278809232, 0.0566412271335022, -0.292618377937407, 0.331718074329116, 0.424938499372394, 0.976537923557996, 0.463868773879129, -0.204612235294409, 0.635623103866607, 0.563790796039522, 0.102279312881195, -0.0139544456391161, 0.319200502078835, -0.348934065906413, 0.553375167400346, -0.448280809644608, -0.00983940055010783, -0.259698968965015, 0.919652420667434, -0.47355400612706, -0.135894354949879, -0.0129965646298911, 0.162878599329267, 0.243328472793848, -0.0718304876664265), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76')));sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsign_testsign6_08e620ed3159f0d3b387b641f1c3435e() {
        assertEval("argv <- list(structure(c(-Inf, Inf, -Inf), .Dim = 3L, .Dimnames = list(c('73', '312', '674'))));sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsign_testsign7_df19c8c79a3139ea3a35d57f6e82e25a() {
        assertEval("argv <- list(c(NA, 2L, 2L));sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsign_testsign8_d46bea5eb80678041724eb85442691db() {
        assertEval("argv <- list(c(-2.3, -0.9, -0.0666666666666667, 0.275, 0.12, 0.216666666666667, -0.228571428571429, -0.35, -0.188888888888889, -1.77635683940025e-16, 0.0272727272727272, -0.108333333333333, -0.246153846153846));sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsign_testsign9_07c6bd369d051fbd6e7f91e1513aa1a3() {
        assertEval("argv <- list(numeric(0));sign(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsignif_testsignif1_6489c4a389dc9834bdbf297ed8455a7c() {
        assertEval("argv <- list(structure(c(0, NaN, 0, 4.94065645841247e-324), class = 'integer64'));do.call('signif', argv)");
    }

    @Test
    public void TestrGenBuiltinsin_testsin1_bc036997586f217ec4ec8287a26889d4() {
        assertEval("argv <- list(c(-6.28318530717959, -6.1261056745001, -5.96902604182061, -5.81194640914112, -5.65486677646163, -5.49778714378214, -5.34070751110265, -5.18362787842316, -5.02654824574367, -4.86946861306418, -4.71238898038469, -4.5553093477052, -4.39822971502571, -4.24115008234622, -4.08407044966673, -3.92699081698724, -3.76991118430775, -3.61283155162826, -3.45575191894877, -3.29867228626928, -3.14159265358979, -2.9845130209103, -2.82743338823081, -2.67035375555132, -2.51327412287183, -2.35619449019234, -2.19911485751286, -2.04203522483337, -1.88495559215388, -1.72787595947439, -1.5707963267949, -1.41371669411541, -1.25663706143592, -1.09955742875643, -0.942477796076938, -0.785398163397448, -0.628318530717959, -0.471238898038469, -0.314159265358979, -0.15707963267949, 0, 0.15707963267949, 0.314159265358979, 0.471238898038469, 0.628318530717959, 0.785398163397448, 0.942477796076938, 1.09955742875643, 1.25663706143592, 1.41371669411541, 1.5707963267949, 1.72787595947439, 1.88495559215388, 2.04203522483337, 2.19911485751286, 2.35619449019234, 2.51327412287183, 2.67035375555133, 2.82743338823081, 2.9845130209103, 3.14159265358979, 3.29867228626928, 3.45575191894877, 3.61283155162826, 3.76991118430775, 3.92699081698724, 4.08407044966673, 4.24115008234622, 4.39822971502571, 4.5553093477052, 4.71238898038469, 4.86946861306418, 5.02654824574367, 5.18362787842316, 5.34070751110265, 5.49778714378214, 5.65486677646163, 5.81194640914112, 5.96902604182061, 6.1261056745001, 6.28318530717959, 6.44026493985908, 6.59734457253857, 6.75442420521805, 6.91150383789754, 7.06858347057704, 7.22566310325652, 7.38274273593601, 7.5398223686155, 7.69690200129499, 7.85398163397448, 8.01106126665397, 8.16814089933346, 8.32522053201295, 8.48230016469244, 8.63937979737193, 8.79645943005142, 8.95353906273091, 9.1106186954104, 9.26769832808989, 9.42477796076938));sin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsin_testsin2_2394041586848efd9c03c6a3b87e9660() {
        assertEval("argv <- list(c(0.0156298141969641, 0.0312596283939283, 0.0468894425908924, 0.0625192567878566, 0.0781490709848207, 0.0937788851817849, 0.109408699378749, 0.125038513575713, 0.140668327772677, 0.156298141969641, 0.171927956166606, 0.18755777036357, 0.203187584560534, 0.218817398757498, 0.234447212954462, 0.250077027151426, 0.26570684134839, 0.281336655545355, 0.296966469742319, 0.312596283939283, 0.328226098136247, 0.343855912333211, 0.359485726530175, 0.375115540727139, 0.390745354924104, 0.406375169121068, 0.422004983318032, 0.437634797514996, 0.45326461171196, 0.468894425908924, 0.484524240105888, 0.500154054302853, 0.515783868499817, 0.531413682696781, 0.547043496893745, 0.562673311090709, 0.578303125287673, 0.593932939484637, 0.609562753681602, 0.625192567878566, 0.64082238207553, 0.656452196272494, 0.672082010469458, 0.687711824666422, 0.703341638863387, 0.718971453060351, 0.734601267257315, 0.750231081454279, 0.765860895651243, 0.781490709848207, 0.797120524045171, 0.812750338242136, 0.8283801524391, 0.844009966636064, 0.859639780833028, 0.875269595029992, 0.890899409226956, 0.90652922342392, 0.922159037620885, 0.937788851817849, 0.953418666014813, 0.969048480211777, 0.984678294408741, 1.00030810860571, 1.01593792280267, 1.03156773699963, 1.0471975511966, 1.06282736539356, 1.07845717959053, 1.09408699378749, 1.10971680798445, 1.12534662218142, 1.14097643637838, 1.15660625057535, 1.17223606477231, 1.18786587896927, 1.20349569316624, 1.2191255073632, 1.23475532156017, 1.25038513575713, 1.2660149499541, 1.28164476415106, 1.29727457834802, 1.31290439254499, 1.32853420674195, 1.34416402093892, 1.35979383513588, 1.37542364933284, 1.39105346352981, 1.40668327772677, 1.42231309192374, 1.4379429061207, 1.45357272031767, 1.46920253451463, 1.48483234871159, 1.50046216290856, 1.51609197710552, 1.53172179130249, 1.54735160549945, 1.56298141969641));sin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsin_testsin3_fb642056a141b072804a3ec435abd308() {
        assertEval("argv <- list(c(0.560475646552213, 0.23017748948328, -1.55870831414912, -0.070508391424576, -0.129287735160946, -1.71506498688328, -0.460916205989202, 1.26506123460653, 0.686852851893526, 0.445661970099958, -1.22408179743946, -0.359813827057364, -0.400771450594052, -0.11068271594512, 0.555841134754075, -1.78691313680308, -0.497850478229239, 1.96661715662964, -0.701355901563686, 0.472791407727934, 1.06782370598685, 0.217974914658295, 1.02600444830724, 0.72889122929114, 0.625039267849257, 1.68669331074241, -0.837787044494525, -0.153373117836515, 1.13813693701195, -1.25381492106993, -0.426464221476814, 0.295071482992271, -0.895125661045022, -0.878133487533042, -0.821581081637487, -0.688640254100091, -0.553917653537589, 0.0619117105767217, 0.305962663739917, 0.380471001012383, 0.694706978920513, 0.207917278019599, 1.26539635156826, -2.16895596533851, -1.20796199830499, 1.12310858320335, 0.402884835299076, 0.466655353623219, -0.779965118336318, 0.0833690664718293, -0.253318513994755, 0.028546755348703, 0.0428704572913161, -1.36860228401446, 0.225770985659268, -1.51647060442954, 1.54875280423022, -0.584613749636069, -0.123854243844614, -0.215941568743973, -0.379639482759882, 0.502323453109302, 0.33320738366942, 1.01857538310709, 1.07179122647558, -0.303528641404258, -0.448209778629426, -0.0530042267305041, -0.922267467879738, -2.05008468562714, 0.491031166056535, 2.30916887564081, -1.00573852446226, 0.709200762582393, 0.688008616467358, -1.0255713696967, 0.284773007051009, 1.22071771225454, -0.18130347974915, 0.138891362439045, -0.00576418589988693, -0.38528040112633, 0.370660031792409, -0.644376548518833, 0.220486561818751, -0.331781963915697, -1.09683901314935, -0.435181490833803, 0.325931585531227, -1.14880761845109, -0.993503855962119, -0.54839695950807, -0.238731735111441, 0.627906076039371, -1.36065244853001, 0.600259587147127, -2.18733299301658, -1.53261062618519, 0.235700359100477));sin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsin_testsin4_4efd1ab76c9bc61aebe73d501519c71f() {
        assertEval("argv <- list(c(-1.88495559215388, 0.628318530717959, -2.51327412287183, 5.02654824574367, 0.942477796076938, -2.51327412287183, 1.5707963267949, 2.19911485751286, 1.88495559215388, -0.942477796076938, 4.71238898038469, 1.25663706143592, -1.88495559215388, -6.91150383789755, 3.45575191894877, 0, 0, 2.82743338823081, 2.51327412287183, 1.88495559215388, 2.82743338823081, 2.51327412287183, 0.314159265358979, -6.28318530717959, 1.88495559215388, -0.314159265358979, -0.628318530717959, -4.71238898038469, -1.5707963267949, 1.25663706143592));sin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsin_testsin5_e04e4807e4be85432755890ffeee5012() {
        assertEval("argv <- list(structure(c(-0.416146836547142, -0.989992496600445, -0.653643620863612, 0.283662185463226, 0.960170286650366, -0.416146836547142, 0.283662185463226, -0.839071529076452, -0.275163338051597, 0.64691932232864, 0.283662185463226, -0.759687912858821, 0.914742357804531, -0.918282786212119, 0.776685982021631), .Dim = c(5L, 3L)));sin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsin_testsin6_73cfc09ed0ecddd9cb2025432ac90614() {
        assertEval("argv <- list(c(-0.560475646552213-0.710406563699301i, -0.23017748948328+0.25688370915653i, 1.55870831414912-0.24669187846237i, 0.070508391424576-0.347542599397733i, 0.129287735160946-0.951618567265016i, 1.71506498688328-0.04502772480892i, 0.460916205989202-0.784904469457076i, -1.26506123460653-1.66794193658814i, -0.686852851893526-0.380226520287762i, -0.445661970099958+0.918996609060766i, 1.22408179743946-0.57534696260839i, 0.359813827057364+0.607964322225033i, 0.40077145059405-1.61788270828916i, 0.11068271594512-0.055561965524539i, -0.555841134754075+0.519407203943462i, 1.78691313680308+0.30115336216671i, 0.497850478229239+0.105676194148943i, -1.96661715662964-0.64070600830538i, 0.701355901563686-0.849704346033582i, -0.47279140772793-1.02412879060491i, -1.06782370598685+0.11764659710013i, -0.217974914658295-0.947474614184802i, -1.02600444830724-0.49055744370067i, -0.72889122929114-0.256092192198247i, -0.62503926784926+1.84386200523221i, -1.68669331074241-0.65194990169546i, 0.837787044494525+0.235386572284857i, 0.153373117836515+0.077960849563711i, -1.13813693701195-0.96185663413013i, 1.25381492106993-0.0713080861236i, 0.42646422147681+1.44455085842335i, -0.295071482992271+0.451504053079215i, 0.895125661045022+0.04123292199294i, 0.878133487533042-0.422496832339625i, 0.82158108163749-2.05324722154052i, 0.68864025410009+1.13133721341418i, 0.55391765353759-1.46064007092482i, -0.061911710576722+0.739947510877334i, -0.30596266373992+1.90910356921748i, -0.38047100101238-1.4438931609718i, -0.694706978920513+0.701784335374711i, -0.207917278019599-0.262197489402468i, -1.26539635156826-1.57214415914549i, 2.16895596533851-1.51466765378175i, 1.20796199830499-1.60153617357459i, -1.12310858320335-0.5309065221703i, -0.40288483529908-1.4617555849959i, -0.466655353623219+0.687916772975828i, 0.77996511833632+2.10010894052567i, -0.08336906647183-1.28703047603518i, 0.253318513994755+0.787738847475178i, -0.028546755348703+0.76904224100091i, -0.042870457291316+0.332202578950118i, 1.36860228401446-1.00837660827701i, -0.225770985659268-0.119452606630659i, 1.51647060442954-0.28039533517025i, -1.54875280423022+0.56298953322048i, 0.584613749636069-0.372438756103829i, 0.123854243844614+0.976973386685621i, 0.215941568743973-0.374580857767014i, 0.37963948275988+1.05271146557933i, -0.5023234531093-1.04917700666607i, -0.33320738366942-1.26015524475811i, -1.01857538310709+3.2410399349424i, -1.07179122647558-0.41685758816043i, 0.303528641404258+0.298227591540715i, 0.448209778629426+0.636569674033849i, 0.053004226730504-0.483780625708744i, 0.922267467879738+0.516862044313609i, 2.05008468562714+0.36896452738509i, -0.491031166056535-0.215380507641693i, -2.30916887564081+0.06529303352532i, 1.00573852446226-0.03406725373846i, -0.70920076258239+2.12845189901618i, -0.688008616467358-0.741336096272828i, 1.0255713696967-1.09599626707466i, -0.284773007051009+0.037788399171079i, -1.22071771225454+0.31048074944314i, 0.18130347974915+0.436523478910183i, -0.138891362439045-0.458365332711106i, 0.00576418589989-1.06332613397119i, 0.38528040112633+1.26318517608949i, -0.370660031792409-0.349650387953555i, 0.644376548518833-0.865512862653374i, -0.220486561818751-0.236279568941097i, 0.331781963915697-0.197175894348552i, 1.09683901314935+1.10992028971364i, 0.435181490833803+0.084737292197196i, -0.325931585531227+0.754053785184521i, 1.14880761845109-0.49929201717226i, 0.993503855962119+0.214445309581601i, 0.54839695950807-0.324685911490835i, 0.238731735111441+0.094583528173571i, -0.627906076039371-0.895363357977542i, 1.36065244853001-1.31080153332797i, -0.60025958714713+1.99721338474797i, 2.18733299301658+0.60070882367242i, 1.53261062618519-1.25127136162494i, -0.235700359100477-0.611165916680421i, -1.02642090030678-1.18548008459731i));sin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsin_testsin7_d46f4bfb8692b20bbe5df43fe244084f() {
        assertEval("argv <- list(Inf);sin(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsinh_testsinh1_469b091771c279b99367edbba7b94d2f() {
        assertEval("argv <- list(FALSE);sinh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsinh_testsinh2_0805f93651aa105e4f0b268d3355b3c5() {
        assertEval("argv <- list(c(-3, -2.96984924623116, -2.93969849246231, -2.90954773869347, -2.87939698492462, -2.84924623115578, -2.81909547738693, -2.78894472361809, -2.75879396984925, -2.7286432160804, -2.69849246231156, -2.66834170854271, -2.63819095477387, -2.60804020100502, -2.57788944723618, -2.54773869346734, -2.51758793969849, -2.48743718592965, -2.4572864321608, -2.42713567839196, -2.39698492462312, -2.36683417085427, -2.33668341708543, -2.30653266331658, -2.27638190954774, -2.24623115577889, -2.21608040201005, -2.18592964824121, -2.15577889447236, -2.12562814070352, -2.09547738693467, -2.06532663316583, -2.03517587939699, -2.00502512562814, -1.9748743718593, -1.94472361809045, -1.91457286432161, -1.88442211055276, -1.85427135678392, -1.82412060301508, -1.79396984924623, -1.76381909547739, -1.73366834170854, -1.7035175879397, -1.67336683417085, -1.64321608040201, -1.61306532663317, -1.58291457286432, -1.55276381909548, -1.52261306532663, -1.49246231155779, -1.46231155778894, -1.4321608040201, -1.40201005025126, -1.37185929648241, -1.34170854271357, -1.31155778894472, -1.28140703517588, -1.25125628140704, -1.22110552763819, -1.19095477386935, -1.1608040201005, -1.13065326633166, -1.10050251256281, -1.07035175879397, -1.04020100502513, -1.01005025125628, -0.979899497487437, -0.949748743718593, -0.919597989949749, -0.889447236180905, -0.859296482412061, -0.829145728643216, -0.798994974874372, -0.768844221105528, -0.738693467336684, -0.708542713567839, -0.678391959798995, -0.648241206030151, -0.618090452261307, -0.587939698492463, -0.557788944723618, -0.527638190954774, -0.49748743718593, -0.467336683417086, -0.437185929648241, -0.407035175879397, -0.376884422110553, -0.346733668341709, -0.316582914572864, -0.28643216080402, -0.256281407035176, -0.226130653266332, -0.195979899497488, -0.165829145728643, -0.135678391959799, -0.105527638190955, -0.0753768844221105, -0.0452261306532664, -0.0150753768844223, 0.0150753768844218, 0.0452261306532664, 0.0753768844221105, 0.105527638190955, 0.135678391959799, 0.165829145728643, 0.195979899497488, 0.226130653266332, 0.256281407035176, 0.28643216080402, 0.316582914572864, 0.346733668341709, 0.376884422110553, 0.407035175879397, 0.437185929648241, 0.467336683417085, 0.49748743718593, 0.527638190954774, 0.557788944723618, 0.587939698492462, 0.618090452261306, 0.648241206030151, 0.678391959798995, 0.708542713567839, 0.738693467336683, 0.768844221105527, 0.798994974874372, 0.829145728643216, 0.85929648241206, 0.889447236180904, 0.919597989949748, 0.949748743718593, 0.979899497487437, 1.01005025125628, 1.04020100502513, 1.07035175879397, 1.10050251256281, 1.13065326633166, 1.1608040201005, 1.19095477386935, 1.22110552763819, 1.25125628140704, 1.28140703517588, 1.31155778894472, 1.34170854271357, 1.37185929648241, 1.40201005025126, 1.4321608040201, 1.46231155778894, 1.49246231155779, 1.52261306532663, 1.55276381909548, 1.58291457286432, 1.61306532663317, 1.64321608040201, 1.67336683417085, 1.7035175879397, 1.73366834170854, 1.76381909547739, 1.79396984924623, 1.82412060301507, 1.85427135678392, 1.88442211055276, 1.91457286432161, 1.94472361809045, 1.9748743718593, 2.00502512562814, 2.03517587939698, 2.06532663316583, 2.09547738693467, 2.12562814070352, 2.15577889447236, 2.18592964824121, 2.21608040201005, 2.24623115577889, 2.27638190954774, 2.30653266331658, 2.33668341708543, 2.36683417085427, 2.39698492462312, 2.42713567839196, 2.4572864321608, 2.48743718592965, 2.51758793969849, 2.54773869346734, 2.57788944723618, 2.60804020100502, 2.63819095477387, 2.66834170854271, 2.69849246231156, 2.7286432160804, 2.75879396984925, 2.78894472361809, 2.81909547738693, 2.84924623115578, 2.87939698492462, 2.90954773869347, 2.93969849246231, 2.96984924623116, 3));sinh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsink_testsink1_1f2f54c86246d0e139afd22163c76df3() {
        assertEval("argv <- list(structure(2L, class = c('terminal', 'connection')), FALSE, TRUE, FALSE); .Internal(sink(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsink_testsink3_0d11da5ed60ecce0a15b0a8857faf2eb() {
        assertEval("argv <- list(-1L, FALSE, FALSE, FALSE); .Internal(sink(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsinknumber_testsinknumber1_8599c5fbb4d4e97c1b0e82b6b0732efc() {
        assertEval("argv <- list(FALSE); .Internal(sink.number(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinsolve_testsolve1_bb5b765a844f4949ff6bf0c46e4b4651() {
        assertEval("argv <- structure(list(a = structure(c(1, 0.5, 0, 0, 0, 0.5,     1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0,     0, 0.5, 1), .Dim = c(5L, 5L))), .Names = 'a');do.call('solve', argv)");
    }

    @Test
    public void TestrGenBuiltinsort_testsort1_79d6414d8526ee939b6eafee16761ed2() {
        assertEval("argv <- list('x1', FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort10_86aaa4288ff365a073e7d76723839ab2() {
        assertEval("argv <- list(c(0, 1, 2, 3, 4, 5, 10, 20, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 10.5, 20.5), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort11_daa9f7f33e05e6d032715e4940a6a86c() {
        assertEval("argv <- list(c(-2.19467484932178, -1.98568521098019, -1.77669557263859, -1.567705934297, -1.35871629595541, -1.14972665761382, -0.940737019272223, -0.73174738093063, -0.522757742589037, -0.313768104247444, -0.104778465905851, 0.104211172435742, 0.313200810777335, 0.522190449118928, 0.731180087460521, 0.940169725802114, 1.14915936414371), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort12_d4e253c96585f41d95e1bc8ee8a869db() {
        assertEval("argv <- list(numeric(0), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort13_62c5e3a80e40e017f73e998ecccba30b() {
        assertEval("argv <- list(c(3.2170141852258, 1.05106928690785, 1.66357940564162, 2.06079422122964, 4.14833588122863, 2.06378765307826, 2.36276370659185, 3.24215147884243, 2.83953129834327, 3.30869483883634, 5.46733964221407, 2.03767398891014, 2.85680802025857, 2.64551821042465, 4.67467308700083, 2.3927927372781, 3.08019075639266, 3.94941127449109, 2.10368712421998, 4.81745347591039, 3.83804007564263, 2.08807105063803, 3.61685546922612, 2.94897051693531, 3.47550643216271, 3.07230246315272, 4.23279369694672, 1.81117727446505, 2.63966096297246, 2.91308698241298, 2.16647893531705, 2.12232261640219, 3.14429741959172, 3.03010252731164, 0.612934885417947, 4.20285111588776, 3.41200339615357, 5.57848503331671, 3.84747589821948, 2.71531835120639, 5.95966880712648, 5.99450368408389, 1.9435658438782, 3.6313096161238, 2.95103074153623, 3.34932880672239, 3.38982038873719, 1.90037719729933, 3.44786724041094, 4.91152502331018, 2.99818765603358, 2.99935094946993, 4.56084966650585, 4.06067390085133, 1.51378284178709, 3.39083463343057, 4.81582489484611, 4.57755401008752, 3.58222926398261, 3.88349846728127, 1.9653424479797, 3.46240922704975, 2.20782872498056, 2.70425959207144, 4.09788134394798, 2.02538454847724, 3.42919591104144, 3.59060969963992, 3.21718963000801, 4.98446648200379, 2.13993033159313, 3.76840792160398, 3.07334709271771, 2.90144541633446, 3.62636889402076, 2.14187706948445, 1.84882674364997, 2.66779678468496, 4.91403480992383, 3.2180424347809, 3.49371205839627, 2.97243102249084, 3.6327703921222, 2.21059811715123, 4.32018812673702, 3.74698292040973, 2.35582483747667, 3.21683090598037, 3.8786092796675, 3.72000864222298, 4.64421167604526, 2.54928990527353, 4.27841427565877, 4.1988256701096, 2.99979452826552, 2.18635096734649, 2.07313246928386, 3.62006461811335, 3.09115092644749, 4.94138032701983), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort14_f165b750593324d78377df58a2d0333e() {
        assertEval("argv <- list(c(2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, -Inf, Inf), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort15_71f3b467028b5e516d8bb8ad10c8ce07() {
        assertEval("argv <- list(structure(c(74, 68, 56, 57, 60, 71, 53, 61, 67, 70, 63, 49, 50, 58, 72, 69, 73, 48, 62, 65, 66, 64, 59, 76, 75, 40, 51, 81, 55, 42, 44, 54, 80, 77, 47, 82, 46, 43, 39, 45, 52, 41), .Dim = c(42L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '8', '9', '10', '16', '17', '18', '22', '23', '24', '25', '31', '32', '33', '36', '37', '38', '40', '43', '46', '61', '74', '77', '79', '82', '83', '84', '107', '113', '129', '133', '149', '168', '174', '182', '186', '192', '217'), 'age')), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort17_4614c8e614ad705a7c0739ec5f3224f4() {
        assertEval("argv <- structure(list(x = c(2.14210348343477, 2.73273128271103,     2.99806873407215, -0.528692848049104, -2.21930913347751,     0.327189480420202, -0.761920109856874, -1.45133259287104,     2.58289965474978, 0.882365602534264, -0.678148102015257,     2.09740992262959, 1.11015366297215, 2.70643682219088, 0.185772243887186,     -2.38685618760064, -2.97262442205101, 0.473321800120175,     -1.20133379939944, 1.63897713040933, -1.89173630112782, 1.73645787220448,     -0.0272455788217485, -0.0804266170598567, 2.78059691889212,     -2.11383658647537, 0.0939270523376763, -0.390122111421078,     -2.80329246399924, 1.61059647146612, 2.74780045822263, -0.0192620046436787,     0.0169407553039491, -1.57991883857176, 1.76223263237625,     -2.21499892836437, 0.367137833498418, -0.284903160296381,     2.52876619063318, 0.633825332857668, 0.613207478541881, 2.08658177917823,     -2.96446485584602, -2.07629728876054, 0.46877646446228, 1.88368982356042,     0.416373030748218, 1.91595612186939, -2.8897425387986, -0.625228523276746,     0.134519706945866, -0.416335945017636, -2.52922565164044,     0.17425535665825, -1.39055569516495, -0.423170546069741,     2.93497854005545, -1.64256255235523, 0.708815339952707, -2.20641956990585,     1.95717442128807, -2.05757057340816, 2.76040208246559, 2.2406962341629,     -1.68299576221034, -1.50189629523084, 1.54184397496283, 0.0106206983327866,     -0.644365496467799, 1.71497052256018, -2.21753972489387,     -0.272966742049903, -0.0741098136641085, 2.63908819807693,     2.97978561837226, -1.19580693589523, -0.940262471325696,     0.556911027990282, -2.33519576629624, -0.223178054206073,     2.98530492978171, -2.27890933351591, 2.41673697670922, -2.31641680374742,     -0.397401746828109, -1.83408120274544, -0.934458317700773,     -2.91743992455304, -0.452570331282914, -1.79014129796997,     -2.82882511569187, 1.8992390432395, 1.25369117455557, -2.21495646424592,     -2.45502642402425, -2.67720098560676, -1.5648388476111, -0.0616166163235903,     2.89307818282396, -2.87064984021708)), .Names = 'x');do.call('sort', argv)");
    }

    @Test
    public void TestrGenBuiltinsort_testsort18_23c6e76999a9c14d3e2ff24c51f2143f() {
        assertEval("argv <- structure(list(x = structure(c(8092, 8092, 8048, 8093,     8066), origin = structure(c(1, 1, 1970), .Names = c('month',     'day', 'year')), class = c('dates', 'times'))), .Names = 'x');do.call('sort', argv)");
    }

    @Test
    public void TestrGenBuiltinsort_testsort2_708546602286120991b8e1a9db8a212b() {
        assertEval("argv <- list(1:10, TRUE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort3_15d9d561e8cd727f825b2c14c3c4d2bd() {
        assertEval("argv <- list(c(1L, 2L, 3L, 153L, 4L, 154L, 303L, 452L, 5L, 155L, 304L, 453L, 6L, 156L, 305L, 454L, 7L, 157L, 306L, 455L, 8L, 158L, 307L, 456L, 9L, 159L, 308L, 457L, 10L, 160L, 309L, 458L, 11L, 161L, 310L, 459L, 12L, 162L, 311L, 460L, 13L, 163L, 312L, 461L, 14L, 164L, 313L, 462L, 15L, 165L, 314L, 463L, 16L, 166L, 315L, 464L, 17L, 167L, 316L, 465L, 18L, 168L, 317L, 466L, 19L, 169L, 318L, 467L, 20L, 170L, 319L, 468L, 21L, 171L, 320L, 469L, 22L, 172L, 321L, 470L, 23L, 173L, 322L, 471L, 24L, 174L, 323L, 472L, 25L, 175L, 324L, 473L, 26L, 176L, 325L, 474L, 27L, 177L, 326L, 475L, 28L, 178L, 327L, 476L, 29L, 179L, 328L, 477L, 30L, 180L, 329L, 478L, 31L, 181L, 330L, 479L, 32L, 182L, 331L, 480L, 33L, 183L, 332L, 481L, 34L, 184L, 333L, 482L, 35L, 185L, 334L, 483L, 36L, 186L, 335L, 484L, 37L, 187L, 336L, 485L, 38L, 188L, 337L, 486L, 39L, 189L, 338L, 487L, 40L, 190L, 339L, 488L, 41L, 191L, 340L, 489L, 42L, 192L, 341L, 490L, 43L, 193L, 342L, 491L, 44L, 194L, 343L, 492L, 45L, 195L, 344L, 493L, 46L, 196L, 345L, 494L, 47L, 197L, 346L, 495L, 48L, 198L, 347L, 496L, 49L, 199L, 348L, 497L, 50L, 200L, 349L, 498L, 51L, 201L, 350L, 499L, 52L, 202L, 351L, 500L, 53L, 203L, 352L, 501L, 54L, 204L, 353L, 502L, 55L, 205L, 354L, 503L, 56L, 206L, 355L, 504L, 57L, 207L, 356L, 505L, 58L, 208L, 357L, 506L, 59L, 209L, 358L, 507L, 60L, 210L, 359L, 508L, 61L, 211L, 360L, 509L, 62L, 212L, 361L, 510L, 63L, 213L, 362L, 511L, 64L, 214L, 363L, 512L, 65L, 215L, 364L, 513L, 66L, 216L, 365L, 514L, 67L, 217L, 366L, 515L, 68L, 218L, 367L, 516L, 69L, 219L, 368L, 517L, 70L, 220L, 369L, 518L, 71L, 221L, 370L, 519L, 72L, 222L, 371L, 520L, 73L, 223L, 372L, 521L, 74L, 224L, 373L, 522L, 75L, 225L, 374L, 523L, 76L, 226L, 375L, 524L, 77L, 227L, 376L, 525L, 78L, 228L, 377L, 526L, 79L, 229L, 378L, 527L, 80L, 230L, 379L, 528L, 81L, 231L, 380L, 529L, 82L, 232L, 381L, 530L, 83L, 233L, 382L, 531L, 84L, 234L, 383L, 532L, 85L, 235L, 384L, 533L, 86L, 236L, 385L, 534L, 87L, 237L, 386L, 535L, 88L, 238L, 387L, 536L, 89L, 239L, 388L, 537L, 90L, 240L, 389L, 538L, 91L, 241L, 390L, 539L, 92L, 242L, 391L, 540L, 93L, 243L, 392L, 541L, 94L, 244L, 393L, 542L, 95L, 245L, 394L, 543L, 96L, 246L, 395L, 544L, 97L, 247L, 396L, 545L, 98L, 248L, 397L, 546L, 99L, 249L, 398L, 547L, 100L, 250L, 399L, 548L, 101L, 251L, 400L, 549L, 102L, 252L, 401L, 550L, 103L, 253L, 402L, 551L, 104L, 254L, 403L, 552L, 105L, 255L, 404L, 553L, 106L, 256L, 405L, 554L, 107L, 257L, 406L, 555L, 108L, 258L, 407L, 556L, 109L, 259L, 408L, 557L, 110L, 260L, 409L, 558L, 111L, 261L, 410L, 559L, 112L, 262L, 411L, 560L, 113L, 263L, 412L, 561L, 114L, 264L, 413L, 562L, 115L, 265L, 414L, 563L, 116L, 266L, 415L, 564L, 117L, 267L, 416L, 565L, 118L, 268L, 417L, 566L, 119L, 269L, 418L, 567L, 120L, 270L, 419L, 568L, 121L, 271L, 420L, 569L, 122L, 272L, 421L, 570L, 123L, 273L, 422L, 571L, 124L, 274L, 423L, 572L, 125L, 275L, 424L, 573L, 126L, 276L, 425L, 574L, 127L, 277L, 426L, 575L, 128L, 278L, 427L, 576L, 129L, 279L, 428L, 577L, 130L, 280L, 429L, 578L, 131L, 281L, 430L, 579L, 132L, 282L, 431L, 580L, 133L, 283L, 432L, 581L, 134L, 284L, 433L, 582L, 135L, 285L, 434L, 583L, 136L, 286L, 435L, 584L, 137L, 287L, 436L, 585L, 138L, 288L, 437L, 586L, 139L, 289L, 438L, 587L, 140L, 290L, 439L, 588L, 141L, 291L, 440L, 589L, 142L, 292L, 441L, 590L, 143L, 293L, 442L, 591L, 144L, 294L, 443L, 592L, 145L, 295L, 444L, 593L, 146L, 296L, 445L, 594L, 147L, 297L, 446L, 595L, 148L, 298L, 447L, 596L, 149L, 299L, 448L, 597L, 150L, 300L, 449L, 598L, 151L, 301L, 450L, 599L, 152L, 302L, 451L, 600L), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort4_17d1f5a0c8ed312a0f77f15c4f800fb4() {
        assertEval("argv <- list(c('graphics', 'lattice', 'stats'), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort5_3aea1d38e3b41d4c58dc9591ad995f14() {
        assertEval("argv <- list(1:54, FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort6_dc22613c6235ffad38daeae76c3318d4() {
        assertEval("argv <- list(c(8.41842881182087, 0.633658419345243, 0.55014003120899, 0.264811823419969, 2.45100807149625e-16, 1.4406901715276e-16), TRUE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort7_73facd058d48796b61d1c6d3fe37ddb2() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort8_a50114ea6a8caa0932904ee06bcb3a33() {
        assertEval("argv <- list(c(12784, 12815, 12843, 12874, 12904, 12935, 12965, 12996, 13027, 13057, 13088, 13118, 13149, 13180, 13208, 13239, 13269, 13300, 13330, 13361, 13392, 13422, 13453, 13483, 13514, 13545, 13573, 13604, 13634, 13665, 13695, 13726, 13757, 13787, 13818, 13848, 13879, 13910, 13939, 13970, 14000, 14031, 14061, 14092, 14123, 14153, 14184, 14214, 14245, 14276), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsort_testsort9_824c84a604cb744110ed9255ad9557e0() {
        assertEval("argv <- list(c('M.user', 'Soft'), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit1_20fa8ad195c599b35d20771e4afa647a() {
        assertEval("argv <- list(1:6, structure(1:2, .Label = c('1', '2'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit10_fe1259d1d240aecaadf3834c9389863a() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('1', '2', '3', '4'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit12_07b457009dad5981bca3a7b1d8f8f959() {
        assertEval("argv <- list(structure(c(95.7845839266016, 111.117917259935, 120.284583926602, 77.019531700964, 96.9521364368474, 112.285469770181, 121.452136436847, 77.019531700964, 96.9521364368474, 112.285469770181, 121.452136436847, 78.1870842112099, 98.1196889470933, 113.453022280427, 122.619688947093, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 78.1870842112099, 98.1196889470933, 113.453022280427, 122.619688947093, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 78.1870842112099, 98.1196889470933, 113.453022280427, 122.619688947093, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 78.1870842112099, 98.1196889470933, 113.453022280427, 122.619688947093, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 78.1870842112099, 98.1196889470933, 113.453022280427, 122.619688947093, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339, 79.3546367214558, 99.2872414573392, 114.620574790673, 123.787241457339), .Dim = c(71L, 1L), .Dimnames = list(c('2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72'), NULL)), structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('1', '2', '3', '4'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit14_d5f5ee939bde53323df5d127bf51a728() {
        assertEval("argv <- list(structure(c(123.48457192908, 239.059434652297, 290.055338401838, 18.397281603467, 6.57585722655537, 0.670931786731845, 0.178466148156965, 0.245410750178149, 0.363167328274208, 0.194808268742596, 2172.67583033103, 8.91763605923317e+38), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = '1', class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit15_894df85ef61c740797eff5749f2f7e96() {
        assertEval("argv <- list(character(0), structure(integer(0), .Label = character(0), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit16_9303f5e309a42a081e329ed5895ee7a1() {
        assertEval("argv <- list(structure(c(47.432, 12.482), .Names = c('(Intercept)', 'group2')), structure(1:2, .Label = c('0', '1'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit17_1b1dbe1bc3f831f51c2f3c2dabfc2512() {
        assertEval("argv <- structure(list(x = c(5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6,     5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4, 5.1, 5.7,     5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7, 4.8, 5.4,     5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4, 5, 5.1,     4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7, 6.3, 4.9,     6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2, 5.6, 5.9,     6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5, 5.5, 5.8,     6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5, 5.6, 5.7,     5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6, 4.9, 7.3,     6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7, 7.7, 6,     6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2, 7.4, 7.9,     6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9, 5.8, 6.8,     6.7, 6.7, 6.3, 6.5, 6.2, 5.9), f = structure(list(col2 = structure(c(3L,     2L, 2L, 2L, 3L, 3L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 3L, 3L,     3L, 3L, 3L, 3L, 2L, 3L, 3L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 2L,     2L, 3L, 3L, 2L, 2L, 3L, 3L, 2L, 2L, 3L, 1L, 2L, 3L, 3L, 2L,     3L, 2L, 3L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 1L,     2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 2L,     2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     1L, 2L, 1L, 3L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 3L, 2L, 1L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L),     .Label = c('2', '3', '4'), class = 'factor'), col5 = structure(c(1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L),     .Label = c('setosa', 'versicolor', 'virginica'), class = 'factor')),     .Names = c('col2', 'col5'))), .Names = c('x', 'f'));do.call('split', argv)");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit18_e9432b4d3ecf3d2cc4eec08be3207ee6() {
        assertEval("argv <- structure(list(x = structure(c(1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('setosa',     'versicolor', 'virginica'), class = 'factor'), f = c(1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L)),     .Names = c('x', 'f'));do.call('split', argv)");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit19_48018aa2c6bcbf964501ba64840f800e() {
        assertEval("argv <- list(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 26.3011774151224, 2.485452029809, 7.15323925419351, 16.761819986295, 10.2645644917686, 0.758337657329402, 29.4935619829433, 12.665970880074, 2.27782676164194e-08, 0.115876279686418), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L), .Label = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23', '25', '27', '29', '31', '33', '35', '37', '39', '41'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit2_77b862a4544358c0eeebb5e4cfdacb12() {
        assertEval("argv <- list(structure(c(-1.13864415195445, 0.574433648632919, 0.61125743366192, 0.291104607198021, 1.44367450704693, 0.408616385050392, -0.252815027721455, 0.73544465026571, -0.711029326417947, -0.611820918993561, -0.963259276248408, -0.28935033673839, -0.482346616963731, 0.575284398820533, 0.0664802498883062, 0.0889008730409177, -0.527009741835806, -0.572160487726669, 0.458433701366337, 0.0259549922279207, 0.79246010222197, 0.200856719794408, 0.681708382019133, 1.24959713166139, 2.28504683598586, 0.885201117877485, 0.275047494865858, 0.0611635446204713, -0.226340664609402, -0.701634984067551, -1.36331112409512, -0.470720710127998, 0.0116712292760789, 0.680960771805182, 1.25010637890252, -0.168484448953506, -0.703880448859559, -0.342493773069341, -0.359950801091045, 0.187018301421814, 0.332611568778467, 0.418088885897922, 1.52526747601546, 1.23881025318897, 1.97893910443604, 1.67980257496383, -0.0423836378777035, -0.085940264442189, 0.0751591419566941, 1.33615888669544, 1.29143414265875, 0.211686019646981, 0.107754613497605, -0.842122877395922, -0.363550334633855, -1.04260396788242, -1.00216202750311, -0.725219786582336, -0.702075395338802, -0.0588517433215815, 0.676181221812652, 0.606054389584641, -0.0722001122493283, -0.565579974058951, -1.50420998542363, -1.38835023347894, -1.6387526999868, -1.22317617387598, -2.6439685322602, -1.50311594814139, 0.58539278534518, 0.476423420506994, -0.229810354321508, -0.669629539423225, -0.500767918117353, -1.30780681405878, -0.0658147956438969, 0.619743292251259, 0.947409254626009, 0.137968713284014, -0.0705143536229389, -0.316245167388448, 0.423768217540825, -1.77132723836955, 0.437524374017483, 1.05217040293853, 1.29145821945076, 0.189519814277623, 0.405463210651828, -1.10579240546022, 0.470126971026959, 1.3013241742778, 1.57690948154138, 0.836753145709701, -0.0990436481848584, 0.305059193206195, 0.722542224965483, 0.497020187014643, -0.798519685959293, -0.162044448918511, -0.268976403560686, 0.471344909208507, 1.07960447064393, 0.816448434674936, 1.01857006703316, -0.19352270657549, 0.193745914189151, -0.0118346974247015, 0.515110447770272, 1.29117007883295, 0.484844437955959, 0.357506193819553, -1.95817055695569, -1.62102859205691, -2.13900473718215, -2.19173201733318, -1.86372596557808, -1.18864210270607, -1.19890597040604, 0.432503235072499, 0.594410727524479, 1.21432538936706, 2.15795981275539, 1.31528364302187, 0.38422055227912, 0.786869292659675, -0.703717985086569, -0.535651668024763, 0.34627858116184, 0.537117318247469, 0.901014803953916, 1.2151594352426, 0.827351473348557, -0.682186392255085, -1.33342351753519, -1.26893821314864, -1.4632463728941, -1.64736130434257, -1.21073183651285, -0.643396605364174), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140')), structure(c(9L, 9L, 9L, 9L, 9L, 9L, 9L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L, 14L, 14L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 17L, 17L, 17L, 17L, 17L, 17L, 17L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 12L, 12L, 12L, 12L, 12L, 12L, 12L), .Label = c('10', '8', '2', '6', '3', '5', '9', '7', '1', '4', '17', '20', '11', '12', '16', '13', '14', '18', '15', '19'), class = c('ordered', 'factor'))); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit3_2110887bdc67a33cdb74f2d637eba0d9() {
        assertEval("argv <- list(structure(c(1034.46153846154, 480.076923076923, 504.692307692308, 480.076923076923, 0, 0, 0, 0, 480.076923076923, 517.230769230769, 444.307692307692, 819.846153846154, 945.230769230769, 542.769230769231, 0, 0, 0, 1824.30769230769, 444.307692307692, 912.153846153846, 0, 0, 1514.07692307692, 0, 936, 0), .Dim = 26L, .Dimnames = list(c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2'))), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('1', '2'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit4_9ebbe941bcd9318354ba4b8b72328408() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 1.48219693752374e-323, 0, 0, 0, 0, 0), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = '1', class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit5_9a320b61d6ec695f1a620a875b64d959() {
        assertEval("argv <- list(c(1, 3, 5, 7, 8, 3, 5, NA, 4, 5, 7, 9), structure(c(8L, 6L, 3L, 2L, NA, 5L, 1L, 4L, 7L, 3L, NA, NA), .Label = c('0', '2', '6', '8', '15', '22', '29', '35'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit6_8c499e0bca4e56de70822007298be8df() {
        assertEval("argv <- list(c(41L, 36L, 12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L, 14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L, 45L, 115L, 37L, NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 135L, 49L, 32L, NA, 64L, 40L, 77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L, 79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L, 59L, 39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA, 44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA, 45L, 168L, 73L, NA, 76L, 118L, 84L, 85L, 96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L), .Label = c('1', '2', '3', '4', '5'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit7_c8635a0f41744cd3be693fd1f670d24b() {
        assertEval("argv <- list(structure(c('Sex/(Age + Eth * Lrn)', 'Sex + Sex:Age + Sex:Eth + Sex:Lrn + Sex:Eth:Lrn + Sex:Age:Lrn', 'Sex + Sex:Age + Sex:Eth + Sex:Lrn + Sex:Eth:Lrn + Sex:Age:Lrn + Sex:Age:Eth + Sex:Age:Eth:Lrn', '1.597991', '1.686899', '1.928360', '132', '128', '118', '-1063.025', '-1055.398', '-1039.324', '', '1 vs 2', '2 vs 3', '', ' 4', '10', '', ' 7.627279', '16.073723', '', '0.10622602', '0.09754136'), .Dim = c(3L, 8L)), structure(c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 7L, 7L, 7L, 8L, 8L, 8L), .Label = c('1', '2', '3', '4', '5', '6', '7', '8'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit8_fb4094f696d5528d8ccfeb9decc633bf() {
        assertEval("argv <- list(c(0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), structure(c(60L, 60L, 60L, 60L, 61L, 61L, 61L, 61L, 62L, 62L, 62L, 62L, 63L, 63L, 63L, 63L, 64L, 64L, 64L, 64L, 65L, 65L, 65L, 65L, 66L, 66L, 66L, 66L, 67L, 67L, 67L, 67L, 68L, 68L, 68L, 68L, 69L, 69L, 69L, 69L, 70L, 70L, 70L, 70L, 71L, 71L, 71L, 71L, 72L, 72L, 72L, 72L, 73L, 73L, 73L, 73L, 74L, 74L, 74L, 74L, 75L, 75L, 75L, 75L, 76L, 76L, 76L, 76L, 77L, 77L, 77L, 77L, 78L, 78L, 78L, 78L, 79L, 79L, 79L, 79L, 80L, 80L, 80L, 80L, 81L, 81L, 81L, 81L, 82L, 82L, 82L, 82L, 83L, 83L, 83L, 83L, 84L, 84L, 84L, 84L, 85L, 85L, 85L, 85L, 86L, 86L, 86L, 86L, 87L, 87L, 87L, 87L, 88L, 88L, 88L, 88L, 89L, 89L, 89L, 89L, 90L, 90L, 90L, 90L, 91L, 91L, 91L, 91L, 92L, 92L, 92L, 92L, 93L, 93L, 93L, 93L, 94L, 94L, 94L, 94L, 95L, 95L, 95L, 95L, 96L, 96L, 96L, 96L, 97L, 97L, 97L, 97L, 98L, 98L, 98L, 98L, 99L, 99L, 99L, 99L, 100L, 100L, 100L, 100L, 101L, 101L, 101L, 101L, 102L, 102L, 102L, 102L, 103L, 103L, 103L, 103L, 104L, 104L, 104L, 104L, 105L, 105L, 105L, 105L, 106L, 106L, 106L, 106L, 107L, 107L, 107L, 107L, 108L, 108L, 108L, 108L, 109L, 109L, 109L, 109L, 110L, 110L, 110L, 110L, 111L, 111L, 111L, 111L, 112L, 112L, 112L, 112L, 113L, 113L, 113L, 113L, 114L, 114L, 114L, 114L, 115L, 115L, 115L, 115L, 116L, 116L, 116L, 116L, 117L, 117L, 117L, 117L, 118L, 118L, 118L, 118L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L), .Label = c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit9_1b57cbe8f915a71b63e9b370cb6ce3da() {
        assertEval("argv <- list(structure(c(NA, NA), .Dim = 1:2), structure(1:2, .Label = c('1', '2'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf1_616a46b4d84336c3102cffdafbe6120b() {
        assertEval("argv <- list('%s is not TRUE', 'identical(fxy, c(1, 2, 3))'); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf10_6172749ae549a836aadb4dd013b21de5() {
        assertEval("argv <- list('%.0f%% said yes (out of a sample of size %.0f)', 66.666, 3); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf11_d23addb4a3134230d0dc4278eb1922e5() {
        assertEval("argv <- list('%1$d %1$x %1$X', 0:15); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf12_f4d7713d7b5a3f4a6b1a93394506cd3c() {
        assertEval("argv <- list('%03o', 1:255); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf13_478f180082d0ac4a879d1a33ff328f6b() {
        assertEval("argv <- list('%d y value <= 0 omitted from logarithmic plot', 1L); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf14_79114a50f7b2d99eaf7f123f770951a5() {
        assertEval("argv <- list('%o', 1:255); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf15_abe68cd9419b74554ccc9eefb2a5e000() {
        assertEval("argv <- list('%s-class.Rd', structure('foo', .Names = 'foo')); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf16_f2c00ebf15d0dde06e0056b870d0fbe6() {
        assertEval("argv <- list('checkRd: (%d) %s', -3, 'evalSource.Rd:157: Unnecessary braces at ‘{\\'sourceEnvironment\\'}’'); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf17_100d8c9855a2bd879eea0aa999086568() {
        assertEval("argv <- list('tools:::check_compiled_code(\\'%s\\')', '/home/lzhao/hg/r-instrumented/library/foreign'); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf18_7c78033017935e48884a106c97df1044() {
        assertEval("argv <- list('%5g', structure(c(18, 18, 0, 14, 4, 12, 12, 0, 4, 8, 26, 23, 3, 18, 5, 8, 5, 3, 0, 5, 21, 0, 21, 0, 0), .Dim = c(5L, 5L), .Dimnames = list(NULL, c('', '', '', '', '')))); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf19_8449b4ebb95f08588a64017df0462c09() {
        assertEval("argv <- list('%G', 3.14159265358979e-06); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf2_6f783f16dea8a9ca3ce36d08b5e20bd2() {
        assertEval("argv <- list('%1.0f', 3.14159265358979); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf21_cd80b4152fdc1920a37a8bcae34ab310() {
        assertEval("argv <- structure(list(fmt = '%9.4g', 12345.6789), .Names = c('fmt',     ''));do.call('sprintf', argv)");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf3_4500fd7dacd66c3f6fa9f34111311bc6() {
        assertEval("argv <- list('min 10-char string '%10s'', c('a', 'ABC', 'and an even longer one')); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf4_4ba398000579f50256b550139ded0f38() {
        assertEval("argv <- list('%o', integer(0)); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf5_64e1e861b692ffee9902ef9fbea83743() {
        assertEval("argv <- list('%*s', 1, ''); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf6_42afa56096704b74cdced3cc2cefb49d() {
        assertEval("argv <- list('p,L,S = (%2d,%2d,%2d): ', TRUE, TRUE, FALSE); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf7_a11bbe5e012da496a5b842776046cc72() {
        assertEval("argv <- list('p,L,S = (%2d,%2d,%2d): ', TRUE, FALSE, NA); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf8_06b6d94104e933b38193dbd93001fbf6() {
        assertEval("argv <- list('plot_%02g', 1L); .Internal(sprintf(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf9_5e5b031de333d0ce9390a4a857c270e9() {
        assertEval("argv <- list('tools:::.createExdotR(\\'%s\\', \\'%s\\', silent = TRUE, use_gct = %s, addTiming = %s)', structure('KernSmooth', .Names = 'Package'), '/home/lzhao/hg/r-instrumented/library/KernSmooth', FALSE, FALSE); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt1_5dda5164d550aa7c9c076ada2bbfafa7() {
        assertEval("argv <- list(12.8025995273675);sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt10_c5fe6f580d109ac9f509c00e53c05393() {
        assertEval("argv <- list(c(6L, 5L, 4L, 3L, 2L, 1L, 0L, -1L, -2L, -3L, -4L));sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt11_9908a933b068d0de08d8bc00c66b9f2d() {
        assertEval("argv <- list(0+1i);sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt2_86198485e1ddf1ed5a1f95af3b47e1c3() {
        assertEval("argv <- list(numeric(0));sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt3_fb6096a75af46e592011add4412ad05a() {
        assertEval("argv <- list(-17+0i);sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt4_c3553ee9dbe0cc029a7c53ffa9d9f995() {
        assertEval("argv <- list(1e+07);sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt5_5dbdc7518a9f43a7945fe7eb8408f153() {
        assertEval("argv <- list(1);sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt6_96cdf42e22d6df783b27e607fa15b84a() {
        assertEval("argv <- list(structure(c(0.0101832147522745, 0.0107298799092166, 0.0605795647466432, 7.03601392438852e-05), .Names = c('ar1', 'ar2', 'intercept', 'trend')));sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt7_300e338c3cadecc8daa738b60f0e5d37() {
        assertEval("argv <- list(structure(1:10, id = 'test 1', class = structure('withId', package = '.GlobalEnv')));sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt8_dcf2d8f698d67251623afa20dbd58a94() {
        assertEval("argv <- list(structure(c(660, 543, 711, 500, 410, 309, 546, 351, 269, 203, 370, 193, 181, 117, 243, 136, 117, 87, 154, 84), .Dim = 4:5, .Dimnames = list(c('Rural Male', 'Rural Female', 'Urban Male', 'Urban Female'), c('70-74', '65-69', '60-64', '55-59', '50-54'))));sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt9_9eb7089691129bd4fb7824790db35d24() {
        assertEval("argv <- list(c(6L, 5L, 4L, 3L, 2L, 1L, 0L, NA, NA, NA, NA));sqrt(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinstderr_teststderr1_7a012cad709ef080feb5977f7c4e5c4e() {
        assertEval(" .Internal(stderr())");
    }

    @Test
    public void TestrGenBuiltinstdin_teststdin1_0f1fda4fe13230393e2f22a90c351509() {
        assertEval(" .Internal(stdin())");
    }

    @Test
    public void TestrGenBuiltinstoragemode_teststoragemode1_8ac238a984a74a114cdb0c0cf5208f1e() {
        assertEval("argv <- structure(list(x = structure(c(1, 0.666666666666667,     0.333333333333333, 0, -0.333333333333333, -0.666666666666667,     -1, -1.33333333333333, -1.66666666666667, 1.5, 1, 0.5, 0,     -0.5, -1, -1.5, -2, -2.5, 3, 2, 1, 0, -1, -2, -3, -4, -5,     -Inf, -Inf, -Inf, NaN, Inf, Inf, Inf, Inf, Inf, -3, -2, -1,     0, 1, 2, 3, 4, 5, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5,     -1, -0.666666666666667, -0.333333333333333, 0, 0.333333333333333,     0.666666666666667, 1, 1.33333333333333, 1.66666666666667,     -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1, 1.25, -0.6, -0.4,     -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1), .Dim = c(9L, 9L))), .Names = 'x');do.call('storage.mode', argv)");
    }

    @Test
    public void TestrGenBuiltinstoragemodeassign_teststoragemodeassign1_6272e209857a868cc2dd7de3377492a9() {
        assertEval("argv <- list(structure(c(4L, 5L, 10L, 9L, 13L, 13L, 12L, 15L, 18L, 19L, 22L, 27L, 28L, 24L, 27L, 28L, 30L, 31L, 32L, 36L, 28L, 32L, 35L, 33L, 38L, 41L, 38L, 38L, 32L, 34L, 44L, 44L, 44L, 46L, 47L, 49L, 50L, 53L, 52L, 55L, 54L, 60L, 63L, 86L, 85L, 85L, 78L, 74L, 97L, 98L, 98L, 99L, 99L, 101L, 108L, 110L, 108L, 111L, 115L, 117L, 70L, 77L, 83L, 61L, 69L, 78L, 66L, 58L, 64L, 69L, 66L, 61L, 76L, 72L, 64L, 53L, 63L, 59L, 77L, 49L, 69L, 88L, 75L, 61L, 65L, 74L, 72L, 76L, 58L, 55L, 60L, 52L, 60L, 61L, 72L, 147L, 149L, 153L, 154L, 151L, 150L, 145L, 143L, 143L, 141L, 156L, 149L, 143L, 142L, 149L, 152L, 142L, 144L, 152L, 155L, 124L, 136L, 139L, 132L, 115L, 96L, 94L, 96L, 122L, 116L, 124L, 119L, 128L, 115L, 111L, 111L, 116L, 126L, 117L, 115L, 4L, 12L, 21L, 15L, 15L, 16L, 18L, 13L, 20L, 21L, 23L, 25L, 27L, 31L, 30L), .Dim = c(75L, 2L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75'), c('x', 'y'))), value = 'double');`storage.mode<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinstoragemodeassign_teststoragemodeassign2_ee539fca2156d13e0a846487f1b15d0d() {
        assertEval("argv <- list(3.14159265358979, value = 'complex');`storage.mode<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinstoragemodeassign_teststoragemodeassign3_49f221134e0cad67f91e55148990beae() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE), .Dim = c(4L, 4L)), value = 'integer');`storage.mode<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinstoragemodeassign_teststoragemodeassign4_84410a9ae1c42022d71f755b12c62dc5() {
        assertEval("argv <- list(structure(c(2, 0, 1, 2), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))), value = 'logical');`storage.mode<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinstoragemodeassign_teststoragemodeassign5_44f1213afd959902c1564613980ca8b7() {
        assertEval("argv <- list(structure(c(2.5, 0, 0.75, 0, 2.5, -2.5, 0.75, -2.5, 2.8), .Dim = c(3L, 3L)), value = 'double');`storage.mode<-`(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinstoragemodeassign__teststoragemodeassign_1_a8f6d4d1d3211bbf0ae6c4655d297c96() {
        assertEval("argv <- structure(list(structure(c(0, 1, 2), .Dim = c(3L, 1L)),     value = 'integer'), .Names = c('', 'value'));do.call('storage.mode<-', argv)");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime1_4c7df73e00bf777919be527eb390825b() {
        assertEval("argv <- list('2008-04-22 09:45', '%Y-%m-%d', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime10_6dc9bd093153d9606f4e578147b11345() {
        assertEval("argv <- list(c('1937/01/01', '1916/01/01', '1913/01/01', '1927/01/01', '1947/01/01', '1913/01/01', '1917/01/01', '1923/01/01', '1921/01/01', '1926/01/01', '1920/01/01', '1915/01/01', '1914/01/01', '1914/01/01', '1914/01/01', '1919/01/01', '1948/01/01', '1911/01/01', '1909/01/01', '1913/01/01', '1925/01/01', '1926/01/01', '1910/01/01', '1917/01/01', '1936/01/01', '1938/01/01', '1960/01/01', '1915/01/01', '1919/01/01', '1924/01/01', '1914/01/01', '1905/01/01', '1921/01/01', '1929/01/01', '1926/01/01', '1921/01/01', '1908/01/01', '1928/01/01', '1919/01/01', '1921/01/01', '1925/01/01', '1934/01/01', '1927/01/01', '1928/01/01', '1934/01/01', '1922/01/01', '1923/01/01', '1915/01/01', '1934/01/01', '1925/01/01', '1922/01/01', '1930/01/01', '1924/01/01', '1923/01/01', '1919/01/01', '1932/01/01', '1930/01/01', '1923/01/01', '1930/01/01', '1922/01/01', '1919/01/01', '1932/01/01', '1939/01/01', '1923/01/01', '1920/01/01', '1919/01/01', '1952/01/01', '1927/01/01', '1924/01/01', '1919/01/01', '1925/01/01', '1945/01/01', '1916/01/01', '1943/01/01', '1920/01/01', '1920/01/01', '1931/01/01', '1924/01/01', '1919/01/01', '1926/01/01', '1920/01/01', '1942/01/01', '1919/01/01', '1930/01/01', '1925/01/01', '1924/01/01', '1926/01/01', '1918/01/01', '1922/01/01', '1921/01/01', '1925/01/01', '1928/01/01', '1925/01/01', '1929/01/01', '1933/01/01', '1947/01/01', '1950/01/01', '1945/01/01', '1924/01/01', '1939/01/01', '1924/01/01', '1933/01/01', '1928/01/01'), '%Y/%m/%d', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime2_9b83a552c56f01b311df72a542a966a5() {
        assertEval("argv <- list(character(0), '%X', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime3_c2b5ec483173d04d6fcc728697c0c4dc() {
        assertEval("argv <- list('1970-01-01', '%Y-%m-%d %H:%M', 'GMT'); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime4_eba0c25175f23eebff50129ca141e271() {
        assertEval("argv <- list('2007-11-06', '%Y-%m-%d', 'GMT'); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime5_1490fa43b30ec006bc9b16cd90ea411c() {
        assertEval("argv <- list('1970-01-01', '%Y-%m-%d', 'GMT'); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime6_8c4c142eca3d59458c4be09920bda7a8() {
        assertEval("argv <- list(c('2007-11-06', NA), '%Y-%m-%d', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime7_0fa492444ae1aeaf2cdc57996aef2f9e() {
        assertEval("argv <- list(c('20010101', NA, NA, '20041026'), '%Y%m%d', 'GMT'); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime8_12cdb7fc9655b4169babb42de4ea6e4a() {
        assertEval("argv <- list('2002-02-02 02:02', '%Y-%m-%d %H:%M', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime9_14974f52a3b2e223c70762d0ba1f17fa() {
        assertEval("argv <- list(c('1890/01/01', '1891/01/01', '1892/01/01', '1893/01/01', '1894/01/01', '1895/01/01'), '%Y/%m/%d', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit1_448b961f5a1733beaa391a3177368109() {
        assertEval("argv <- list('exNSS4', '_', TRUE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit10_575c83bfde53fe0914403b6d440f0f0f() {
        assertEval("argv <- list('A shell of class documentation has been written to the file './myTst2/man/DocLink-class.Rd'.\\n', '[ \\t\\n]', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit11_c85911589c86839478dfc0ab22a937a6() {
        assertEval("argv <- list(structure('pkgB', .Names = 'name'), '_', TRUE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit12_5de2449138882559ccc5a074c2e9851f() {
        assertEval("argv <- list('Keywords:  utilities ', '\\n[ \\t\\n]*\\n', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit13_37e2fa57db5d7a3d63ef62c75f9fe817() {
        assertEval("argv <- list('x', '', FALSE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit14_415059cf37554e7268040a36e0a17582() {
        assertEval("argv <- list(c('* Edit the help file skeletons in 'man', possibly combining help files for multiple functions.', '* Edit the exports in 'NAMESPACE', and add necessary imports.', '* Put any C/C++/Fortran code in 'src'.', '* If you have compiled code, add a useDynLib() directive to 'NAMESPACE'.', '* Run R CMD build to build the package tarball.', '* Run R CMD check to check the package tarball.', '', 'Read \\'Writing R Extensions\\' for more information.'), '\\n[ \\t\\n]*\\n', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit15_677977956e5e5291bc42c15a6228a24a() {
        assertEval("argv <- list('  \\036  Complex arithmetic sometimes warned incorrectly about       producing NAs when there were NaNs in the input.', '[ \\t\\n]', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit16_2ea3c44cb1145cff944fd528beddda05() {
        assertEval("argv <- list(structure(c('1', '2', '3', '4', '5', '1', '2', '3', '4', '5'), .Dim = 10L), '.', TRUE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit2_98c21157c7a77e3b3ab458092b841b43() {
        assertEval("argv <- list(structure('x, row.names = NULL, ', Rd_tag = 'RCODE'), '', FALSE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit3_0d816b41818b324d788a52f13a14ca03() {
        assertEval("argv <- list('  \\036  isSeekable() now returns FALSE on connections       which have non-default encoding.  Although documented to       record if ‘in principle’ the connection supports seeking,       it seems safer to report FALSE when it may not work.', '[ \\t\\n]', FALSE, TRUE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit4_654c2292a6f7bb31c116d50e55ac8864() {
        assertEval("argv <- list('Keywords:  device ', '[ \\t\\n]', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit5_ced7f7dd6433c12941275eda3aa577a8() {
        assertEval("argv <- list('R CMD check now gives an error if the R code in a vignette fails to\\nrun, unless this is caused by a missing package.\\n\\n\\036R CMD check now unpacks tarballs in the same way as R CMD INSTALL,\\nincluding making use of the environment variable R_INSTALL_TAR to\\noverride the default behaviour.\\n\\n\\036R CMD check performs additional code analysis of package startup\\nfunctions, and notifies about incorrect argument lists and\\n(incorrect) calls to functions which modify the search path or\\ninappropriately generate messages.\\n\\n\\036R CMD check now also checks compiled code for symbols corresponding\\nto functions which might terminate R or write to stdout/stderr\\ninstead of the console.\\n\\n\\036R CMD check now uses a pdf() device when checking examples (rather\\nthan postscript()).\\n\\n\\036R CMD check now checks line-endings of makefiles and C/C++/Fortran\\nsources in subdirectories of src as well as in src itself.\\n\\n\\036R CMD check now reports as a NOTE what look like methods documented\\nwith their full names even if there is a namespace and they are\\nexported.  In almost all cases they are intended to be used only as\\nmethods and should use the \\\\method markup.  In the other rare cases\\nthe recommended form is to use a function such as coefHclust which\\nwould not get confused with a method, document that and register it\\nin the NAMESPACE file by s3method(coef, hclust, coefHclust).\\n\\n\\036The default for the environment variable _R_CHECK_COMPACT_DATA2_ is\\nnow true: thus if using the newer forms of compression introduced\\nin R 2.10.0 would be beneficial is now checked (by default).\\n\\n\\036Reference output for a vignette can be supplied when checking a\\npackage by R CMD check: see ‘Writing R Extensions’.\\n\\n\\036R CMD Rd2dvi allows the use of LaTeX package inputenx rather than\\ninputenc: the value of the environment variable RD2DVI_INPUTENC is\\nused.  (LaTeX package inputenx is an optional install which\\nprovides greater coverage of the UTF-8 encoding.)\\n\\n\\036Rscript on a Unix-alike now accepts file names containing spaces\\n(provided these are escaped or quoted in the shell).\\n\\n\\036R CMD build on a Unix-alike (only) now tries to preserve dates on\\nfiles it copies from its input directory.  (This was the\\nundocumented behaviour prior to R 2.13.0.)', '\\n\\036', TRUE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit6_a320151be4f63c10bc8a16907fea43d9() {
        assertEval("argv <- list(structure('Formal Methods and Classes', .Names = 'Title'), '\\n\\n', TRUE, FALSE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit7_c1054c01a38a718df1a22d3dc6da5081() {
        assertEval("argv <- list('', '', FALSE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit8_027f322702ffd271952f87c9dd4247bf() {
        assertEval("argv <- list('The \\\\usage entries for S3 methods should use the \\\\method markup and not their full name.\\n', '\\n', FALSE, FALSE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit9_15e7ac323c9c2f56d647974d51467988() {
        assertEval("argv <- list('M.user:Temp', ':', FALSE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
    }

    @Test
    public void TestrGenBuiltinstrtoi_teststrtoi1_932126fb56d63128a8fff131e80fdb80() {
        assertEval("argv <- list('0777', 8L); .Internal(strtoi(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtoi_teststrtoi2_3cac81ee83f43b33cebe79355169ea6f() {
        assertEval("argv <- list('700', 8L); .Internal(strtoi(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtoi_teststrtoi3_bcac6ad0b7bf34c4b9590e8a13249944() {
        assertEval("argv <- list(c('0xff', '077', '123'), 0L); .Internal(strtoi(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtoi_teststrtoi4_dcd5e78ea79fa15d211f9734f3c225e8() {
        assertEval("argv <- list('1.3', 16L); .Internal(strtoi(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtoi_teststrtoi5_6a90971d9e7f4ddd6a5de0999d87b8de() {
        assertEval("argv <- list(character(0), 8L); .Internal(strtoi(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim1_98dcf016763f0a8af2564185c4f61440() {
        assertEval("argv <- list(c('\\'time\\'', '\\'status\\''), 128); .Internal(strtrim(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim2_c68d207f987c1402c8eb1953a9b3b36c() {
        assertEval("argv <- list('2014-03-17 14:47:20', 8); .Internal(strtrim(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim3_c73b90d22523ecaef2b271fcc06b5533() {
        assertEval("argv <- list(c('\\'1\\'', '\\'2\\'', NA), 128); .Internal(strtrim(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim4_93ecb5198282d51ba5933e860ae3ef15() {
        assertEval("argv <- list(c('\\'gray17\\'', '\\'grey17\\''), 128); .Internal(strtrim(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim5_eacf1c8782bf006d75594e9b44d8461a() {
        assertEval("argv <- list(structure('\\'@CRAN@\\'', .Names = 'CRAN'), 128); .Internal(strtrim(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim6_136a6c56cb2710373560578e3ee15b23() {
        assertEval("argv <- list('FALSE', FALSE); .Internal(strtrim(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim8_8fdaa44e7c9944acc05b068ca7ede50a() {
        assertEval("argv <- list(character(0), 40L); .Internal(strtrim(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinstructure_teststructure1_9df14c1c2e0a59dd73ee3393acc49b1b() {
        assertEval("argv <- structure(list(.Data = structure(c(1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L), .Label = c('13',     '14', '15', '16', '17'), class = 'factor'), .Label = c('13',     '14', '15', '16', '17'), class = 'factor'), .Names = c('.Data',     '.Label', 'class'));do.call('structure', argv)");
    }

    @Test
    public void TestrGenBuiltinsub_testsub1_37aed69a5a1f49d174242092e9620544() {
        assertEval("argv <- list('^..dfd.', '', c('aa', '..dfd.row.names'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub10_8d6b7828b958f5447e6d29a1c78b3799() {
        assertEval("argv <- list('^[[:space:]]*([[:alnum:].]+).*$', '\\\\1', structure('MASS', .Names = 'Suggests'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub11_ed740f88acae2270accae03a8009df28() {
        assertEval("argv <- list(' +$', '', c(NA, '1', NA, '2', '1', NA, NA, '1', '4', '1', NA, '4', '1', '3', NA, '4', '2', '2', NA, '4', '4', '2', '4', '4', '2', '1', '4', '4', '3', '1', '1', '4', '1', '4', NA, '1', '4', '4', '2', '2', '4', '4', '3', '4', '2', '2', '3', '3', '4', '1', '1', '1', '4', '1', '4', '4', '4', '4', NA, '4', '4', '4', NA, '1', '2', '3', '4', '3', '4', '2', '4', '4', '1', '4', '1', '4', NA, '4', '2', '1', '4', '1', '1', '1', '4', '4', '2', '4', '1', '1', '1', '4', '1', '1', '1', '4', '3', '1', '4', '3', '2', '4', '3', '1', '4', '2', '4', NA, '4', '4', '4', '2', '1', '4', '4', NA, '2', '4', '4', '1', '1', '1', '1', '4', '1', '2', '3', '2', '1', '4', '4', '4', '1', NA, '4', '2', '2', '2', '4', '4', '3', '3', '4', '2', '4', '3', '1', '1', '4', '2', '4', '3', '1', '4', '3', '4', '4', '1', '1', '4', '4', '3', '1', '1', '2', '1', '3', '4', '2', '2', '2', '4', '4', '3', '2', '1', '1', '4', '1', '1', '2', NA, '2', '3', '3', '2', '1', '1', '1', '1', '4', '4', '4', '4', '4', '4', '2', '2', '1', '4', '1', '4', '3', '4', '2', '3', '1', '3', '1', '4', '1', '4', '1', '4', '3', '3', '4', '4', '1', NA, '3', '4', '4', '4', '4', '4', '4', '3', '4', '3', '4', '2', '4', '4', '1', '2', NA, '4', '4', '4', '4', '1', '2', '1', '1', '2', '1', '4', '2', '3', '1', '4', '4', '4', '1', '2', '1', '4', '2', '1', '3', '1', '2', '2', '1', '2', '1', NA, '3', '2', '2', '4', '1', '4', '4', '2', '4', '4', '4', '2', '1', '4', '2', '4', '4', '4', '4', '4', '1', '3', '4', '3', '4', '1', NA, '4', NA, '1', '1', '1', '4', '4', '4', '4', '2', '4', '3', '2', NA, '1', '4', '4', '3', '4', '4', '4', '2', '4', '2', '1', '4', '4', NA, '4', '4', '3', '3', '4', '2', '2', '4', '1', '4', '4', '4', '3', '4', '4', '4', '3', '2', '1', '3', '1', '4', '1', '4', '2', NA, '1', '4', '4', '3', '1', '4', '1', '4', '1', '4', '4', '1', '2', '2', '1', '4', '1', '1', '4', NA, '4', NA, '4', '4', '4', '1', '4', '2', '1', '2', '2', '2', '2', '1', '1', '2', '1', '4', '2', '3', '3', '1', '3', '1', '4', '1', '3', '2', '2', '4', '1', NA, '3', '4', '2', '4', '4', '4', '4', '4', '4', '3', '4', '4', '3', '2', '1', '4', '4', '2', '4', '2', '1', '2', '1', '1', '1', '1', '4', '4', '1', '1', '4', '1', '4', '4', '4', '1', '1', NA, '3', '2', '4', '4', '4', '4', '2', '3', '3', '2', NA, '4', '2', '4', '4', '1', '1', '4', '4', '1', '1', '4', '1', '2', '2', '2', '2', '1', '4', '4', '1', '2', '2', '2', '3', '4', '4', '3', '4', '1', '1', '4', '4', NA, '4', '1', '4', '4', '4', '1', '4', '4', '1', '2', '4', '4', '4', '4', '1', '2', '4', '4', '2', '1', '4', '2', '4', '2', '2', '4', '1', '3', '3', '2', '4', '1', '4', '4', '4', '1', NA, '4', '4', '2', '4', '4', '4', '4', '4', '2', NA, '4', '2', '4', '3', '1', '4', '4', '3', '4', '2', '4', '4', '1', '2', '1', '4', '1', '3', '3', '1', '4', '4', '2', '4', '4', '4', '4', '3', '2', '3', '3', '2', NA, '3', '4', '4', '3', '3', '4', '4', '4', '1', '4', '4', '4', '4', '4', '4', '4', '2', '4', '2', '3', '4', '1', '3', '1', NA, '4', '1', '2', '2', '1', '4', '3', '3', '4', '1', '1', '3'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub12_18c19215e492e38ebc1c19bacd9268cb() {
        assertEval("argv <- list('.* : ', '', structure('Error in rnorm(2, c(1, NA)) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(2, c(1, NA)))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub13_2d0b9be4f1cde89df2f4aa084df2c101() {
        assertEval("argv <- list('.* : ', '', structure('Error in rexp(2, numeric()) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rexp(2, numeric()))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub14_2d46a7cae6093ef511acd63305fecfbb() {
        assertEval("argv <- list('.* : ', '', structure('Error in rnorm(2, numeric()) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(2, numeric()))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub15_efadebb02fe28ae700fc046ae4ceef86() {
        assertEval("argv <- list('.* : ', '', structure('Error in rnorm(1, sd = Inf) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub16_dd71e3531c9968e87f3750ac189c6902() {
        assertEval("argv <- list('^ +', '', c('1_', 'Weight', 'Cylinders4', 'Cylinders5', 'Cylinders6', 'Cylinders8', 'Cylindersrotary', 'TypeLarge', 'TypeMidsize', 'TypeSmall', 'TypeSporty', 'TypeVan', 'EngineSize', 'DriveTrainFront', 'DriveTrainRear'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub17_80f9e2840d0a867ca64b619296c7d243() {
        assertEval("argv <- list('^msgstr[[:blank:]]+[\\'](.*)[\\'][[:blank:]]*$', '\\\\1', 'msgstr \\'<U+043E><U+0442><U+0440><U+0438><U+0446><U+0430><U+0442><U+0435><U+043B><U+044C><U+043D><U+044B><U+0435> <U+0432><U+0435><U+0441><U+0430> <U+043D><U+0435> <U+0440><U+0430><U+0437><U+0440><U+0435><U+0448><U+0435><U+043D><U+044B>\\'', FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub18_65cd5531a1824a8a9854980cb648276a() {
        assertEval("argv <- list('.*Content-Type:[^\\\\]*charset=([^\\\\[:space:]]*)[[:space:]]*\\\\\\\\n.*', '\\\\1', 'Project-Id-Version: lattice 0.20-10\\\\nReport-Msgid-Bugs-To: bugs@r-project.org\\\\nPOT-Creation-Date: 2012-03-10 14:42\\\\nPO-Revision-Date: 2012-08-31 16:36+0100\\\\nLast-Translator: \\305\\201ukasz Daniel <lukasz.daniel@gmail.com>\\\\nLanguage-Team: \\305\\201ukasz Daniel <lukasz.daniel@gmail.com>\\\\nLanguage: pl_PL\\\\nMIME-Version: 1.0\\\\nContent-Type: text/plain; charset=UTF-8\\\\nContent-Transfer-Encoding: 8bit\\\\nPlural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\\\\nX-Poedit-SourceCharset: iso-8859-1\\\\n', FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub19_648ae4a162a67e16c0df72ff338b5419() {
        assertEval("argv <- list('([^:]*):(.*)', '\\\\2', character(0), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub2_9dfdd6946d4cae513af36f5b752dcfa8() {
        assertEval("argv <- list('[b-e]', '.', c('The', 'licenses', 'for', 'most', 'software', 'are', 'designed', 'to', 'take', 'away', 'your', 'freedom', 'to', 'share', 'and', 'change', 'it.', '', 'By', 'contrast,', 'the', 'GNU', 'General', 'Public', 'License', 'is', 'intended', 'to', 'guarantee', 'your', 'freedom', 'to', 'share', 'and', 'change', 'free', 'software', '--', 'to', 'make', 'sure', 'the', 'software', 'is', 'free', 'for', 'all', 'its', 'users'), FALSE, TRUE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub3_5184c6e4c24fe9cf68e3e65fe28f1dbd() {
        assertEval("argv <- list('%bm', 'http://www.bioconductor.org', c('@CRAN@', 'http://www.stats.ox.ac.uk/pub/RWin', '%bm/packages/%v/bioc', '%bm/packages/%v/data/annotation', '%bm/packages/%v/data/experiment', '%bm/packages/%v/extra', 'http://www.omegahat.org/R', 'http://R-Forge.R-project.org', 'http://www.rforge.net'), FALSE, FALSE, TRUE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub4_051701130f7d75c599bc06e0668a0b59() {
        assertEval("argv <- list('^  \\036 ', '\\036', c('', '  \\036 Merged in a set of Splus code changes that had accumulated at Mayo', '    over the course of a decade. The primary one is a change in how', '    indexing is done in the underlying C code, which leads to a major', '    speed increase for large data sets.  Essentially, for the lower', '    leaves all our time used to be eaten up by bookkeeping, and this', '    was replaced by a different approach.  The primary routine also', '    uses .Call{} so as to be more memory efficient.', '', '  \\036 The other major change was an error for asymmetric loss matrices,', '    prompted by a user query.  With L=loss asymmetric, the altered', '    priors were computed incorrectly - they were using L' instead of L.', '    Upshot - the tree would not not necessarily choose optimal splits', '    for the given loss matrix.  Once chosen, splits were evaluated', '    correctly.  The printed “improvement” values are of course the', '    wrong ones as well.  It is interesting that for my little test', '    case, with L quite asymmetric, the early splits in the tree are', '    unchanged - a good split still looks good.', '', '  \\036 Add the return.all argument to xpred.rpart().', '', '  \\036 Added a set of formal tests, i.e., cases with known answers to', '    which we can compare.', '', '  \\036 Add a usercode vignette, explaining how to add user defined', '    splitting functions.', '', '  \\036 The class method now also returns the node probability.', '', '  \\036 Add the stagec data set, used in some tests.', '', '  \\036 The plot.rpart routine needs to store a value that will be visible', '    to the rpartco routine at a later time.  This is now done in an', '    environment in the namespace.', ''), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub5_41cbf72682e3c4c980edcba2a098309e() {
        assertEval("argv <- list('./', '', structure(c('./data', './html', './po/en@quot/LC_MESSAGES', './po/en@quot', './po/pl/LC_MESSAGES', './po/pl', './po/de/LC_MESSAGES', './po/de', './po', './doc/SuiteSparse', './doc', './Meta', './include', './R', './help', './libs', './external'), class = 'AsIs'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub6_3bb9daceb957e4b41ea3686268c1c93b() {
        assertEval("argv <- list('\\'', '\\\\\\'', '\\\\method{as.dist}{default}', FALSE, FALSE, TRUE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub7_ed68bd000c7a9a48ad26c645f528cc2f() {
        assertEval("argv <- list('(\\\\w)(\\\\w*)(\\\\w)', '\\\\U\\\\1\\\\E\\\\2\\\\U\\\\3', 'useRs may fly into JFK or laGuardia', FALSE, TRUE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub8_040dbe0982c43a6d8971fb226842136a() {
        assertEval("argv <- list('^(msgstr)\\\\[([[:digit:]]+)\\\\].*$', '\\\\1\\\\\\\\[\\\\2\\\\\\\\]', 'msgstr[0] \\'%d ligne de poids nul non comptabilis<U+00E9>e\\'', FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsub_testsub9_96541202337bd6721b51541d4ce00edc() {
        assertEval("argv <- list('[[:space:]]*$', '', 'identical() has a new argument, ignore.environment, used when\\ncomparing functions (with default FALSE as before).\\n\\n\\036There is a new option, options(CBoundsCheck=), which controls how\\n.C() and .Fortran() pass arguments to compiled code.  If true\\n(which can be enabled by setting the environment variable\\nR_C_BOUNDS_CHECK to yes), raw, integer, double and complex\\narguments are always copied, and checked for writing off either end\\nof the array on return from the compiled code (when a second copy\\nis made).  This also checks individual elements of character\\nvectors passed to .C().\\n\\nThis is not intended for routine use, but can be very helpful in\\nfinding segfaults in package code.\\n\\n\\036In layout(), the limits on the grid size have been raised (again).\\n\\n\\036New simple provideDimnames() utility function.\\n\\n\\036Where methods for length() return a double value which is\\nrepresentable as an integer (as often happens for package Matrix),\\nthis is converted to an integer.\\n\\n\\036Matrix indexing of dataframes by two-column numeric indices is now\\nsupported for replacement as well as extraction.\\n\\n\\036setNames() now has a default for its object argument, useful for a\\ncharacter result.\\n\\n\\036StructTS() has a revised additive constant in the loglik component\\nof the result: the previous definition is returned as the loglik0\\ncomponent.  However, the help page has always warned of a lack of\\ncomparability of log-likelihoods for non-stationary models.\\n(Suggested by Jouni Helske.)\\n\\n\\036The logic in aggregate.formula() has been revised.  It is now\\npossible to use a formula stored in a variable; previously, it had\\nto be given explicitly in the function call.\\n\\n\\036install.packages() has a new argument quiet to reduce the amount of\\noutput shown.\\n\\n\\036Setting an element of the graphics argument lwd to a negative or\\ninfinite value is now an error.  Lines corresponding to elements\\nwith values NA or NaN are silently omitted.\\n\\nPreviously the behaviour was device-dependent.\\n\\n\\036Setting graphical parameters cex, col, lty, lwd and pch in par()\\nnow requires a length-one argument.  Previously some silently took\\nthe first element of a longer vector, but not always when\\ndocumented to do so.\\n\\n\\036Sys.which() when used with inputs which would be unsafe in a shell\\n(e.g. absolute paths containing spaces) now uses appropriate\\nquoting.\\n\\n\\036as.tclObj() has been extended to handle raw vectors.  Previously,\\nit only worked in the other direction.  (Contributed by Charlie\\nFriedemann, PR#14939.)\\n\\n\\036New functions cite() and citeNatbib() have been added, to allow\\ngeneration of in-text citations from \\'bibentry\\' objects.  A cite()\\nfunction may be added to bibstyle() environments.\\n\\n\\036A sort() method has been added for \\'bibentry\\' objects.\\n\\n\\036The bibstyle() function now defaults to setting the default\\nbibliography style. The getBibstyle() function has been added to\\nreport the name of the current default style.\\n\\n\\036scatter.smooth() now has an argument lpars to pass arguments to\\nlines().\\n\\n\\036pairs() has a new log argument, to allow some or all variables to\\nbe plotted on logarithmic scale.  (In part, wish of PR#14919.)\\n\\n\\036split() gains a sep argument.\\n\\n\\036termplot() does a better job when given a model with interactions\\n(and no longer attempts to plot interaction terms).\\n\\n\\036The parser now incorporates code from Romain Francois' parser\\npackage, to support more detailed computation on the code, such as\\nsyntax highlighting, comment-based documentation, etc.  Functions\\ngetParseData() and getParseText() access the data.\\n\\n\\036There is a new function rep_len() analogous to rep.int() for when\\nspeed is required (and names are not).\\n\\n\\036The undocumented use rep(NULL, length.out = n) for n > 0 (which\\nreturns NULL) now gives a warning.\\n\\n\\036demo() gains an encoding argument for those packages with non-ASCII\\ndemos: it defaults to the package encoding where there is one.\\n\\n\\036strwrap() converts inputs with a marked encoding to the current\\nlocale: previously it made some attempt to pass through as bytes\\ninputs invalid in the current locale.\\n\\n\\036Specifying both rate and scale to [dpqr]gamma is a warning (if they\\nare essentially the same value) or an error.\\n\\n\\036merge() works in more cases where the data frames include matrices.\\n(Wish of PR#14974.)\\n\\n\\036optimize() and uniroot() no longer use a shared parameter object\\nacross calls.  (nlm(), nlminb() and optim() with numerical\\nderivatives still do, as documented.)\\n\\n\\036The all.equal() method for date-times is now documented: times are\\nregarded as equal (by default) if they differ by up to 1 msec.\\n\\n\\036duplicated() and unique() gain a nmax argument which can be used to\\nmake them much more efficient when it is known that there are only\\na small number of unique entries.  This is done automatically for\\nfactors.\\n\\n\\036Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),\\nrsignrank() and rwilcox() now return integer (not double) vectors.\\nThis halves the storage requirements for large simulations.\\n\\n\\036sort(), sort.int() and sort.list() now use radix sorting for\\nfactors of less than 100,000 levels when method is not supplied.\\nSo does order() if called with a single factor, unless na.last =\\nNA.\\n\\n\\036diag() as used to generate a diagonal matrix has been re-written in\\nC for speed and less memory usage.  It now forces the result to be\\nnumeric in the case diag(x) since it is said to have ‘zero\\noff-diagonal entries’.\\n\\n\\036backsolve() (and forwardsolve()) are now internal functions, for\\nspeed and support for large matrices.\\n\\n\\036More matrix algebra functions (e.g. chol() and solve()) accept\\nlogical matrices (and coerce to numeric).\\n\\n\\036sample.int() has some support for n >= 2^31: see its help for the\\nlimitations.\\n\\nA different algorithm is used for (n, size, replace = FALSE, prob =\\nNULL) for n > 1e7 and size <= n/2.  This is much faster and uses\\nless memory, but does give different results.\\n\\n\\036approxfun() and splinefun() now return a wrapper to an internal\\nfunction in the stats namespace rather than a .C() or .Call() call.\\nThis is more likely to work if the function is saved and used in a\\ndifferent session.\\n\\n\\036The functions .C(), .Call(), .External() and .Fortran() now give an\\nerror (rather than a warning) if called with a named first\\nargument.\\n\\n\\036Sweave() by default now reports the locations in the source file(s)\\nof each chunk.\\n\\n\\036clearPushBack() is now a documented interface to a long-existing\\ninternal call.\\n\\n\\036aspell() gains filters for R code, Debian Control Format and\\nmessage catalog files, and support for R level dictionaries.  In\\naddition, package utils now provides functions\\naspell_package_R_files() and aspell_package_C_files() for spell\\nchecking R and C level message strings in packages.\\n\\n\\036bibentry() gains some support for “incomplete” entries with a\\ncrossref field.\\n\\n\\036gray() and gray.colors() finally allow alpha to be specified.\\n\\n\\036monthplot() gains parameters to control the look of the reference\\nlines.  (Suggestion of Ian McLeod.)\\n\\n\\036Added support for new %~% relation (“is distributed as”) in\\nplotmath.\\n\\n\\036domain = NA is accepted by gettext() and ngettext(), analogously to\\nstop() etc.\\n\\n\\036termplot() gains a new argument plot = FALSE which returns\\ninformation to allow the plots to be modified for use as part of\\nother plots, but does not plot them.  (Contributed by Terry\\nTherneau, PR#15076.)\\n\\n\\036quartz.save(), formerly an undocumented part of R.app, is now\\navailable to copy a device to a quartz() device.  dev.copy2pdf()\\noptionally does this for PDF output: quartz.save() defaults to PNG.\\n\\n\\036The default method of pairs() now allows text.panel = NULL and the\\nuse of <foo>.panel = NULL is now documented.\\n\\n\\036setRefClass() and getRefClass() now return class generator\\nfunctions, similar to setClass(), but still with the reference\\nfields and methods as before (suggestion of Romain Francois).\\n\\n\\036New functions bitwNot(), bitwAnd(), bitwOr() and bitwXor(), using\\nthe internal interfaces previously used for classes \\'octmode\\' and\\n\\'hexmode\\'.\\n\\nAlso bitwShiftL() and bitwShiftR() for shifting bits in elements of\\ninteger vectors.\\n\\n\\036New option \\'deparse.cutoff\\' to control the deparsing of language\\nobjects such as calls and formulae when printing.  (Suggested by a\\ncomment of Sarah Goslee.)\\n\\n\\036colors() gains an argument distinct.\\n\\n\\036New demo(colors) and demo(hclColors), with utility functions.\\n\\n\\036list.files() (aka dir()) gains a new optional argument no.. which\\nallows to exclude \\'.\\' and \\'..\\' from listings.\\n\\n\\036Multiple time series are also of class \\'matrix\\'; consequently,\\nhead(), e.g., is more useful.\\n\\n\\036encodeString() preserves UTF-8 marked encodings.  Thus if factor\\nlevels are marked as UTF-8 an attempt is made to print them in\\nUTF-8 in RGui on Windows.\\n\\n\\036readLines() and scan() (and hence read.table()) in a UTF-8 locale\\nnow discard a UTF-8 byte-order-mark (BOM).  Such BOMs are allowed\\nbut not recommended by the Unicode Standard: however Microsoft\\napplications can produce them and so they are sometimes found on\\nwebsites.\\n\\nThe encoding name \\'UTF-8-BOM\\' for a connection will ensure that a\\nUTF-8 BOM is discarded.\\n\\n\\036mapply(FUN, a1, ..) now also works when a1 (or a further such\\nargument) needs a length() method (which the documented arguments\\nnever do).  (Requested by Hervé Pagès; with a patch.)\\n\\n\\036.onDetach() is supported as an alternative to .Last.lib.  Unlike\\n.Last.lib, this does not need to be exported from the package's\\nnamespace.\\n\\n\\036The srcfile argument to parse() may now be a character string, to\\nbe used in error messages.\\n\\n\\036The format() method for ftable objects gains a method argument,\\npropagated to write.ftable() and print(), allowing more compact\\noutput, notably for LaTeX formatting, thanks to Marius Hofert.\\n\\n\\036The utils::process.events() function has been added to trigger\\nimmediate event handling.\\n\\n\\036Sys.which() now returns NA (not \\'\\') for NA inputs (related to\\nPR#15147).\\n\\n\\036The print() method for class \\'htest\\' gives fewer trailing spaces\\n(wish of PR#15124).\\n\\nAlso print output from HoltWinters(), nls() and others.\\n\\n\\036loadNamespace() allows a version specification to be given, and\\nthis is used to check version specifications given in the Imports\\nfield when a namespace is loaded.\\n\\n\\036setClass() has a new argument, slots, clearer and less ambiguous\\nthan representation.  It is recommended for future code, but should\\nbe back-compatible.  At the same time, the allowed slot\\nspecification is slightly more general.  See the documentation for\\ndetails.\\n\\n\\036mget() now has a default for envir (the frame from which it is\\ncalled), for consistency with get() and assign().\\n\\n\\036close() now returns an integer status where available, invisibly.\\n(Wish of PR#15088.)\\n\\n\\036The internal method of tar() can now store paths too long for the\\nustar format, using the (widely supported) GNU extension.  It can\\nalso store long link names, but these are much less widely\\nsupported.  There is support for larger files, up to the ustar\\nlimit of 8GB.\\n\\n\\036Local reference classes have been added to package methods.  These\\nare a technique for avoiding unneeded copying of large components\\nof objects while retaining standard R functional behavior.  See\\n?LocalReferenceClasses.\\n\\n\\036untar() has a new argument restore_times which if false (not the\\ndefault) discards the times in the tarball.  This is useful if they\\nare incorrect (some tarballs submitted to CRAN have times in a\\nlocal timezone or many years in the past even though the standard\\nrequired them to be in UTC).\\n\\n\\036replayplot() cannot (and will not attempt to) replay plots recorded\\nunder R < 3.0.0.  It may crash the R session if an attempt is made\\nto replay plots created in a different build of R >= 3.0.0.\\n\\n\\036Palette changes get recorded on the display list, so replaying\\nplots (including when resizing screen devices and using dev.copy())\\nwill work better when the palette is changed during a plot.\\n\\n\\036chol(pivot = TRUE) now defaults to LAPACK, not LINPACK.\\n\\n\\036The parse() function has a new parameter keep.source, which\\ndefaults to options(\\'keep.source\\').\\n\\n\\036Profiling via Rprof() now optionally records information at the\\nstatement level, not just the function level.\\n\\n\\036The Rprof() function now quotes function names in in its output\\nfile on Windows, to be consistent with the quoting in Unix.\\n\\n\\036Profiling via Rprof() now optionally records information about time\\nspent in GC.\\n\\n\\036The HTML help page for a package now displays non-vignette\\ndocumentation files in a more accessible format.\\n\\n\\036To support options(stringsAsFactors = FALSE), model.frame(),\\nmodel.matrix() and replications() now automatically convert\\ncharacter vectors to factors without a warning.\\n\\n\\036The print method for objects of class \\'table\\' now detects tables\\nwith 0-extents and prints the results as, e.g., < table of extent 0\\nx 1 x 2 >. (Wish of PR#15198.)\\n\\n\\036Deparsing involving calls to anonymous functions and has been made\\ncloser to reversible by the addition of extra parentheses.\\n\\n\\036The function utils::packageName() has been added as a lightweight\\nversion of methods::getPackageName().\\n\\n\\036find.package(lib.loc = NULL) now treats loaded namespaces\\npreferentially in the same way as attached packages have been for a\\nlong time.\\n\\n\\036In Windows, the Change Directory dialog now defaults to the current\\nworking directory, rather than to the last directory chosen in that\\ndialog.\\n\\n\\036available.packages() gains a \\'license/restricts_use\\' filter which\\nretains only packages for which installation can proceed solely\\nbased on packages which are guaranteed not to restrict use.\\n\\n\\036New check_packages_in_dir() function in package tools for\\nconveniently checking source packages along with their reverse\\ndependencies.\\n\\n\\036R's completion mechanism has been improved to handle help requests\\n(starting with a question mark).  In particular, help prefixes are\\nnow supported, as well as quoted help topics.  To support this,\\ncompletion inside quotes are now handled by R by default on all\\nplatforms.\\n\\n\\036The memory manager now allows the strategy used to balance garbage\\ncollection and memory growth to be controlled by setting the\\nenvironment variable R_GC_MEM_GROW. See ?Memory for more details.\\n\\n\\036(‘For experts only’, as the introductory manual says.)  The use of\\nenvironment variables R_NSIZE and R_VSIZE to control the initial (=\\nminimum) garbage collection trigger for number of cons cels and\\nsize of heap has been restored: they can be overridden by the\\ncommand-line options --min-nsize and --min-vsize; see ?Memory.\\n\\n\\036On Windows, the device name for bitmap devices as reported by\\n.Device and .Devices no longer includes the file name.  This is for\\nconsistency with other platforms and was requested by the lattice\\nmaintainer.\\n\\nwin.metafile() still uses the file name: the exact form is used by\\npackage tkrplot.\\n\\n\\036set.seed(NULL) re-initializes .Random.seed as done at the beginning\\nof the session if not already set.  (Suggestion of Bill Dunlap.)\\n\\n\\036The breaks argument in hist.default() can now be a function that\\nreturns the breakpoints to be used (previously it could only return\\nthe suggested number of breakpoints).\\n\\n\\036File share/licenses/licenses.db has some clarifications, especially\\nas to which variants of ‘BSD’ and ‘MIT’ is intended and how to\\napply them to packages.  The problematic licence ‘Artistic-1.0’ has\\nbeen removed.\\n', FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset1_2965b748a3e24b276173eb4aa9f23391() {
        assertEval("argv <- list(structure(list(`Resid. Df` = c(4, 0), `Resid. Dev` = c(5.12914107700115, 7.54951656745095e-15), Df = c(NA, 4), Deviance = c(NA, 5.12914107700114), Rao = c(NA, 5.17320176026795)), .Names = c('Resid. Df', 'Resid. Dev', 'Df', 'Deviance', 'Rao'), row.names = c('1', '2'), class = 'data.frame'), 5L);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset10_0f1e10c13d753a93338a20f89ac50bd8() {
        assertEval("argv <- list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 1L, class = 'data.frame'), 1L);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset11_85c4a449ccc328e43b771b1afb28e897() {
        assertEval("argv <- list(structure(list(height = numeric(0), weight = numeric(0)), .Names = c('height', 'weight'), row.names = integer(0), class = 'data.frame'), 1:2);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset12_dcc42c2a40b618a307e9cca278cbf6ad() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/cloud.R'), frow = c(32L, 33L, 33L, 36L), lrow = c(32L, 33L, 33L, 36L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 4L), class = 'data.frame'), 'frow');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset13_9fa891d5001cad136ca0f6db1eba5c6d() {
        assertEval("argv <- list(structure(list(surname = structure(c(5L, 6L, 4L, 3L, 3L, 1L, 2L), .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), title = structure(c(2L, 5L, 4L, 6L, 7L, 3L, 1L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'title', 'other.author'), row.names = c(NA, -7L), class = 'data.frame'), 1L);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset14_3e137112463eb901bb1219dd118598af() {
        assertEval("argv <- list(structure(list(size = 1056, isdir = FALSE, mode = structure(420L, class = 'octmode'), mtime = structure(1393948130.23894, class = c('POSIXct', 'POSIXt')), ctime = structure(1393948130.23894, class = c('POSIXct', 'POSIXt')), atime = structure(1395074550.46596, class = c('POSIXct', 'POSIXt')), uid = 1001L, gid = 1001L, uname = 'roman', grname = 'roman'), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = '/home/roman/r-instrumented/library/grid/R/grid'), 'mtime');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset15_380284bc42693a9124ecdd36b46819ae() {
        assertEval("argv <- list(structure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7, 7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2, 7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9, 5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9), Sepal.Width = c(3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3, 3, 4, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3, 3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3, 3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2, 3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9, 2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8, 3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5, 2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3, 2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2, 3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3, 2.8, 3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1, 3, 3.1, 3.1, 3.1, 2.7, 3.2, 3.3, 3, 2.5, 3, 3.4, 3), Petal.Length = c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9, 5.7, 5.2, 5, 5.2, 5.4, 5.1), Petal.Width = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5, 1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2, 2.3, 1.8), Species = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('setosa', 'versicolor', 'virginica'), class = 'factor')), .Names = c('Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width', 'Species'), row.names = c(NA, -150L), class = 'data.frame'), c(FALSE, FALSE, FALSE, FALSE, TRUE));.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset16_1980283add80c713cace3ee56b7539d1() {
        assertEval("argv <- list(structure(list(VAR1 = c(1, 2, 3, 4, 5), VAR2 = c(5, 4, 3, 2, 1), VAR3 = c(1, 1, 1, 1, NA)), .Names = c('VAR1', 'VAR2', 'VAR3'), row.names = c(NA, -5L), class = 'data.frame'), c(1, 3));.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset17_890a990c36442ad4c9f3d5f10e257bf3() {
        assertEval("argv <- list(structure(list(ii = 1:10, xx = c(-9.42477796076938, -6.28318530717959, -3.14159265358979, 0, 3.14159265358979, 6.28318530717959, 9.42477796076938, 12.5663706143592, 15.707963267949, 18.8495559215388)), .Names = c('ii', 'xx'), row.names = c(NA, -10L), class = 'data.frame'), 'C');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset18_d8f5f1286793c26a13fb2655196c1fa5() {
        assertEval("argv <- list(structure(list(srcfile = c(NA, NA, '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/levelplot.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/levelplot.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/levelplot.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/levelplot.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/levelplot.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/levelplot.R', '/home/lzhao/tmp/RtmpGUHe0I/R.INSTALL2aa51f3e9d31/lattice/R/levelplot.R'), frow = c(NA, NA, 427L, 427L, 432L, 434L, 434L, 438L, 438L), lrow = c(NA, NA, 428L, 428L, 432L, 437L, 437L, 441L, 441L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 9L), class = 'data.frame'), 'lrow');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset19_f7de8f46eb70ec4fe3564d345d0d8173() {
        assertEval("argv <- list(structure(list(x = 1:3, y = structure(4:6, .Dim = c(3L, 1L), class = 'AsIs'), z = structure(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'), .Dim = c(3L, 3L), class = 'AsIs')), .Names = c('x', 'y', 'z'), row.names = c(NA, -3L), class = 'data.frame'), 'z');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset2_560c621f8a16dfa25c2346d3c023e02b() {
        assertEval("argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'), 3L);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset20_2666cb8374a0d027ad53970b3d63ac7c() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats'), frow = 21911:21912, lrow = 21911:21912), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), 'frow');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset21_3ea4ae9f745074681927670ddfa477f7() {
        assertEval("argv <- list(structure(list(z = c(-2.97525101631257, -2.48489962337717, -1.99157511113426, -1.4958325959814, -0.998253002608536, -0.499437269286478, 0, 0.499437269286499, 0.998253002608553, 1.49583259598141, 1.99157511113428, 2.48489962337718, 2.97525101631258), par.vals = structure(c(3.29998649934118, 3.26341935258893, 3.22450701705249, 3.18319718928165, 3.13944811066026, 3.09322935890527, 3.04452243772342, 2.99332114068265, 2.93963167421501, 2.88347253461377, 2.824874144162, 2.76387826147581, 2.70053719000543, -0.454255272277595, -0.454255272277596, -0.454255272277596, -0.454255272277598, -0.454255272277597, -0.454255272277596, -0.454255272277594, -0.454255272277597, -0.454255272277596, -0.454255272277596, -0.454255272277597, -0.454255272277596, -0.454255272277597, -0.292987124681473, -0.292987124681473, -0.292987124681474, -0.292987124681475, -0.292987124681474, -0.292987124681474, -0.292987124681473, -0.292987124681475, -0.292987124681474, -0.292987124681474, -0.292987124681474, -0.292987124681474, -0.292987124681474, -0.255464061617756, -0.218896914865511, -0.179984579329071, -0.138674751558221, -0.0949256729368359, -0.0487069211818519, 1.33790930192987e-15, 0.0512012970407721, 0.104890763508413, 0.161049903109653, 0.219648293561426, 0.280644176247611, 0.34398524771799, -0.599449309335745, -0.49954109111312, -0.399632872890496, -0.299724654667872, -0.199816436445247, -0.099908218222623, 1.42108546079721e-15, 0.0999082182226258, 0.19981643644525, 0.299724654667875, 0.399632872890499, 0.499541091113123, 0.599449309335748), .Dim = c(13L, 5L), .Dimnames = list(NULL, c('(Intercept)', 'outcome2', 'outcome3', 'treatment2', 'treatment3')))), .Names = c('z', 'par.vals'), row.names = c(NA, 13L), class = 'data.frame'), 'par.vals');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset22_08a821d7e7f002e86fb69005fffdcdcb() {
        assertEval("argv <- list(structure(3.14159265358979, class = 'testit'), structure(3.14159265358979, class = 'testit'));.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset23_7dd505f506360b4d0915877332a75dec() {
        assertEval("argv <- list(structure(list(Fertility = c(80.2, 83.1, 92.5, 85.8, 76.9), Agriculture = c(17, 45.1, 39.7, 36.5, 43.5), Examination = c(15L, 6L, 5L, 12L, 17L), Education = c(12L, 9L, 5L, 7L, 15L)), .Names = c('Fertility', 'Agriculture', 'Examination', 'Education'), row.names = c('Courtelary', 'Delemont', 'Franches-Mnt', 'Moutier', 'Neuveville'), class = 'data.frame'), 'Ferti');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset24_92aceae97074dc2ec6a77699c130b52c() {
        assertEval("argv <- list(structure(list(size = 131, isdir = FALSE, mode = structure(436L, class = 'octmode'), mtime = structure(1386583148.91412, class = c('POSIXct', 'POSIXt')), ctime = structure(1386583148.91712, class = c('POSIXct', 'POSIXt')), atime = structure(1386583149.16512, class = c('POSIXct', 'POSIXt')), uid = 501L, gid = 501L, uname = 'lzhao', grname = 'lzhao'), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = 'startup.Rs'), 'mtime');.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset26_afea6c42a340536107e6bf57e8eb6669() {
        assertEval("argv <- structure(list(x = structure(list(Ozone = c(41L, 36L,     12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L,     14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L,     45L, 115L, 37L, NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L,     NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA,     NA, NA, NA, NA, NA, NA, NA, 135L, 49L, 32L, NA, 64L, 40L,     77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L,     79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L,     59L, 39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA,     44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA,     45L, 168L, 73L, NA, 76L, 118L, 84L, 85L, 96L, 78L, 73L, 91L,     47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L,     18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L,     18L, 20L), Solar.R = c(190L, 118L, 149L, 313L, NA, NA, 299L,     99L, 19L, 194L, NA, 256L, 290L, 274L, 65L, 334L, 307L, 78L,     322L, 44L, 8L, 320L, 25L, 92L, 66L, 266L, NA, 13L, 252L,     223L, 279L, 286L, 287L, 242L, 186L, 220L, 264L, 127L, 273L,     291L, 323L, 259L, 250L, 148L, 332L, 322L, 191L, 284L, 37L,     120L, 137L, 150L, 59L, 91L, 250L, 135L, 127L, 47L, 98L, 31L,     138L, 269L, 248L, 236L, 101L, 175L, 314L, 276L, 267L, 272L,     175L, 139L, 264L, 175L, 291L, 48L, 260L, 274L, 285L, 187L,     220L, 7L, 258L, 295L, 294L, 223L, 81L, 82L, 213L, 275L, 253L,     254L, 83L, 24L, 77L, NA, NA, NA, 255L, 229L, 207L, 222L,     137L, 192L, 273L, 157L, 64L, 71L, 51L, 115L, 244L, 190L,     259L, 36L, 255L, 212L, 238L, 215L, 153L, 203L, 225L, 237L,     188L, 167L, 197L, 183L, 189L, 95L, 92L, 252L, 220L, 230L,     259L, 236L, 259L, 238L, 24L, 112L, 237L, 224L, 27L, 238L,     201L, 238L, 14L, 139L, 49L, 20L, 193L, 145L, 191L, 131L,     223L), Wind = c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8,     20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5,     9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4,     8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9,     9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7,     4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8, 4.1, 9.2, 9.2, 10.9,     4.6, 10.9, 5.1, 6.3, 5.7, 7.4, 8.6, 14.3, 14.9, 14.9, 14.3,     6.9, 10.3, 6.3, 5.1, 11.5, 6.9, 9.7, 11.5, 8.6, 8, 8.6, 12,     7.4, 7.4, 7.4, 9.2, 6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3,     8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9,     10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3,     6.3, 6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7,     14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6,     9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), Temp = c(67L,     72L, 74L, 62L, 56L, 66L, 65L, 59L, 61L, 69L, 74L, 69L, 66L,     68L, 58L, 64L, 66L, 57L, 68L, 62L, 59L, 73L, 61L, 61L, 57L,     58L, 57L, 67L, 81L, 79L, 76L, 78L, 74L, 67L, 84L, 85L, 79L,     82L, 87L, 90L, 87L, 93L, 92L, 82L, 80L, 79L, 77L, 72L, 65L,     73L, 76L, 77L, 76L, 76L, 76L, 75L, 78L, 73L, 80L, 77L, 83L,     84L, 85L, 81L, 84L, 83L, 83L, 88L, 92L, 92L, 89L, 82L, 73L,     81L, 91L, 80L, 81L, 82L, 84L, 87L, 85L, 74L, 81L, 82L, 86L,     85L, 82L, 86L, 88L, 86L, 83L, 81L, 81L, 81L, 82L, 86L, 85L,     87L, 89L, 90L, 90L, 92L, 86L, 86L, 82L, 80L, 79L, 77L, 79L,     76L, 78L, 78L, 77L, 72L, 75L, 79L, 81L, 86L, 88L, 97L, 94L,     96L, 94L, 91L, 92L, 93L, 93L, 87L, 84L, 80L, 78L, 75L, 73L,     81L, 76L, 77L, 71L, 71L, 78L, 67L, 76L, 68L, 82L, 64L, 71L,     81L, 69L, 63L, 70L, 77L, 75L, 76L, 68L), Month = c(5L, 5L,     5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,     5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L,     6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,     6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L,     7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,     7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,     8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L,     8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L,     8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,     9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,     9L), Day = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L,     12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L,     24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L,     6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L,     19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L,     1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L,     15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L,     27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,     9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L,     21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L,     2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L,     15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L,     27L, 28L, 29L, 30L)), .Names = c('Ozone', 'Solar.R', 'Wind',     'Temp', 'Month', 'Day'), class = 'data.frame', row.names = c(NA,     -153L)), cames = c('x', ''));do.call('subset', argv)");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset3_9dac7647c342f2d2180c8f1f2251bf50() {
        assertEval("argv <- list(structure(list(Var1 = c(1L, 2L, 3L, 0L, 1L, 2L, 0L, 1L, 0L), Var2 = c(0L, 0L, 0L, 1L, 1L, 1L, 2L, 2L, 3L)), .Names = c('Var1', 'Var2'), out.attrs = structure(list(dim = c(4L, 4L), dimnames = structure(list(Var1 = c('Var1=0', 'Var1=1', 'Var1=2', 'Var1=3'), Var2 = c('Var2=0', 'Var2=1', 'Var2=2', 'Var2=3')), .Names = c('Var1', 'Var2'))), .Names = c('dim', 'dimnames')), row.names = c(2L, 3L, 4L, 5L, 6L, 7L, 9L, 10L, 13L), class = 'data.frame'), 1);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset4_42edddef393f45d39518a5613eaf1ae9() {
        assertEval("argv <- list(structure(list(Population = c(3615, 365, 2212, 2110, 21198, 2541, 3100, 579, 8277, 4931, 868, 813, 11197, 5313, 2861, 2280, 3387, 3806, 1058, 4122, 5814, 9111, 3921, 2341, 4767, 746, 1544, 590, 812, 7333, 1144, 18076, 5441, 637, 10735, 2715, 2284, 11860, 931, 2816, 681, 4173, 12237, 1203, 472, 4981, 3559, 1799, 4589, 376), Income = c(3624, 6315, 4530, 3378, 5114, 4884, 5348, 4809, 4815, 4091, 4963, 4119, 5107, 4458, 4628, 4669, 3712, 3545, 3694, 5299, 4755, 4751, 4675, 3098, 4254, 4347, 4508, 5149, 4281, 5237, 3601, 4903, 3875, 5087, 4561, 3983, 4660, 4449, 4558, 3635, 4167, 3821, 4188, 4022, 3907, 4701, 4864, 3617, 4468, 4566), Illiteracy = c(2.1, 1.5, 1.8, 1.9, 1.1, 0.7, 1.1, 0.9, 1.3, 2, 1.9, 0.6, 0.9, 0.7, 0.5, 0.6, 1.6, 2.8, 0.7, 0.9, 1.1, 0.9, 0.6, 2.4, 0.8, 0.6, 0.6, 0.5, 0.7, 1.1, 2.2, 1.4, 1.8, 0.8, 0.8, 1.1, 0.6, 1, 1.3, 2.3, 0.5, 1.7, 2.2, 0.6, 0.6, 1.4, 0.6, 1.4, 0.7, 0.6), `Life Exp` = c(69.05, 69.31, 70.55, 70.66, 71.71, 72.06, 72.48, 70.06, 70.66, 68.54, 73.6, 71.87, 70.14, 70.88, 72.56, 72.58, 70.1, 68.76, 70.39, 70.22, 71.83, 70.63, 72.96, 68.09, 70.69, 70.56, 72.6, 69.03, 71.23, 70.93, 70.32, 70.55, 69.21, 72.78, 70.82, 71.42, 72.13, 70.43, 71.9, 67.96, 72.08, 70.11, 70.9, 72.9, 71.64, 70.08, 71.72, 69.48, 72.48, 70.29), Murder = c(15.1, 11.3, 7.8, 10.1, 10.3, 6.8, 3.1, 6.2, 10.7, 13.9, 6.2, 5.3, 10.3, 7.1, 2.3, 4.5, 10.6, 13.2, 2.7, 8.5, 3.3, 11.1, 2.3, 12.5, 9.3, 5, 2.9, 11.5, 3.3, 5.2, 9.7, 10.9, 11.1, 1.4, 7.4, 6.4, 4.2, 6.1, 2.4, 11.6, 1.7, 11, 12.2, 4.5, 5.5, 9.5, 4.3, 6.7, 3, 6.9), `HS Grad` = c(41.3, 66.7, 58.1, 39.9, 62.6, 63.9, 56, 54.6, 52.6, 40.6, 61.9, 59.5, 52.6, 52.9, 59, 59.9, 38.5, 42.2, 54.7, 52.3, 58.5, 52.8, 57.6, 41, 48.8, 59.2, 59.3, 65.2, 57.6, 52.5, 55.2, 52.7, 38.5, 50.3, 53.2, 51.6, 60, 50.2, 46.4, 37.8, 53.3, 41.8, 47.4, 67.3, 57.1, 47.8, 63.5, 41.6, 54.5, 62.9), Frost = c(20, 152, 15, 65, 20, 166, 139, 103, 11, 60, 0, 126, 127, 122, 140, 114, 95, 12, 161, 101, 103, 125, 160, 50, 108, 155, 139, 188, 174, 115, 120, 82, 80, 186, 124, 82, 44, 126, 127, 65, 172, 70, 35, 137, 168, 85, 32, 100, 149, 173), Area = c(50708, 566432, 113417, 51945, 156361, 103766, 4862, 1982, 54090, 58073, 6425, 82677, 55748, 36097, 55941, 81787, 39650, 44930, 30920, 9891, 7826, 56817, 79289, 47296, 68995, 145587, 76483, 109889, 9027, 7521, 121412, 47831, 48798, 69273, 40975, 68782, 96184, 44966, 1049, 30225, 75955, 41328, 262134, 82096, 9267, 39780, 66570, 24070, 54464, 97203)), .Names = c('Population', 'Income', 'Illiteracy', 'Life Exp', 'Murder', 'HS Grad', 'Frost', 'Area'), row.names = c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), class = 'data.frame'), c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE));.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset5_e21ecae22a103505c24ae74282c3fbd9() {
        assertEval("argv <- list(structure(list(war = c(1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0), fly = c(1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), ver = c(1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0), end = c(1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, NA, 1, 1, 0, 1, 1, NA, 0), gro = c(0, 0, 1, 1, 0, 0, 0, 1, 0, 1, NA, 0, 0, 1, NA, 0, 0, NA, 1, 0), hai = c(1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1)), .Names = c('war', 'fly', 'ver', 'end', 'gro', 'hai'), row.names = c('ant', 'bee', 'cat', 'cpl', 'chi', 'cow', 'duc', 'eag', 'ele', 'fly', 'fro', 'her', 'lio', 'liz', 'lob', 'man', 'rab', 'sal', 'spi', 'wha'), class = 'data.frame'), NULL);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset6_63769bbae2a01b9b38264fe69aa8585b() {
        assertEval("argv <- list(structure(list(surname = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c(NA, -6L), class = 'data.frame'), -1);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset7_0cd0e2f51749281ee02a10bc81e7e414() {
        assertEval("argv <- list(structure(list(a = c(1L, 2L, 3L, NA), b = c(NA, 3.14159265358979, 3.14159265358979, 3.14159265358979), c = c(TRUE, NA, FALSE, TRUE), d = c('aa', 'bb', NA, 'dd'), e = structure(c('a1', NA, NA, 'a4'), class = 'AsIs'), f = c('20010101', NA, NA, '20041026')), .Names = c('a', 'b', 'c', 'd', 'e', 'f'), row.names = c(NA, -4L), class = 'data.frame'), 3L);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset8_388f4801c95dbb636dae6b0d6925218d() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 1, 2), Deviance = c(32.825622681839, 12.2441566485997, 28.4640218366572, 32.4303239692005), AIC = c(92.5235803967766, 73.9421143635373, 90.1619795515948, 96.1282816841381)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '+ M.user', '+ Temp', '+ Soft'), class = c('anova', 'data.frame')), 3L);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset9_86173aee5bce29893f10f2e65508c5cf() {
        assertEval("argv <- list(structure(list(`1` = 0:10, `2` = 10:20, `3` = 20:30), .Names = c('1', '2', '3'), row.names = c(NA, -11L), class = 'data.frame'), -2);.subset(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset21_401728ff15faa0a563e033b207675e48() {
        assertEval("argv <- list(structure(list(par.vals = structure(c(43.6690361821048, 35.0518890362789, 30.2558850234373, 27.1664611723591, 24.9930921115624, 23.3776455926353, 22.122313646246, 21.1173217554787, 20.293145402391, 19.6041024133034, 19.0188803067124, 18.5152545044936, 18.0769941360739, 17.6919540860845, 17.3508558987268, 17.0464826391527, 0.924696372559026, 1.4577878275186, 1.99087928247818, 2.52397073743776, 3.05706219239734, 3.59015364735691, 4.12324510231649, 4.65633655727607, 5.18942801223565, 5.72251946719522, 6.2556109221548, 6.78870237711438, 7.32179383207396, 7.85488528703353, 8.38797674199311, 8.92106819695269), .Dim = c(16L, 2L), .Dimnames = list(NULL, c('ymax', 'xhalf')))), .Names = 'par.vals'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset211_ff9226f88b9e91f575035a7dfd31ec88() {
        assertEval("argv <- list(structure(list(V1 = structure(c(4L, 1L, 2L, 3L), .Label = c('1', '3', '6', 'head'), class = 'factor'), V2 = c(NA, 2L, 4L, 7L), V3 = c(NA, NA, 5L, 8L), V4 = c(NA, NA, NA, 9L)), .Names = c('V1', 'V2', 'V3', 'V4'), class = 'data.frame', row.names = c(NA, -4L)), 2L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset212_5bbcd4f192754d4aa470bd81083731a2() {
        assertEval("argv <- list(structure(list(Res.Df = c(20, 21), RSS = c(652424.52183908, 658770.746755654), Df = c(NA, -1), `Sum of Sq` = c(NA, -6346.22491657443), F = c(NA, 0.194542807762205), `Pr(>F)` = c(NA, 0.663893424608742)), .Names = c('Res.Df', 'RSS', 'Df', 'Sum of Sq', 'F', 'Pr(>F)'), row.names = c('1', '2'), class = c('anova', 'data.frame'), heading = c('Analysis of Variance Table\\n', 'Model 1: birthw ~ sex + sex:age - 1\\nModel 2: birthw ~ sex + age - 1')), 6L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset213_ce5ca1294d484fdcb12cbe52cb2a72cb() {
        assertEval("argv <- list(structure(list(a = structure('abc', class = 'AsIs'), b = structure('def\\'gh', class = 'AsIs')), .Names = c('a', 'b'), row.names = '1', class = 'data.frame'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset214_e20099eb554089d6b2832b23f40c0564() {
        assertEval("argv <- list(structure(list(mtime = structure(1395082258.61787, class = c('POSIXct', 'POSIXt'))), .Names = 'mtime'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset215_8ed0f42d294953bdd86e98089c1ecc58() {
        assertEval("argv <- list(structure(list(A = 0:10, `NA` = 20:30), .Names = c('A', NA), class = 'data.frame', row.names = c(NA, -11L)), 2L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset216_e6b7632e7460e4fab6c05aa7b1a581c7() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), class = 'data.frame', row.names = 1947:1962, terms = quote(Employed ~     GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year)), 3L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset217_44e77cc3d67653c3ae3ed1103b8bd05e() {
        assertEval("argv <- list(structure(list(y = c(1.08728092481538, 0.0420572471552261, 0.787502161306819, 0.512717751544676, 3.35376639535311, 0.204341510750309, -0.334930602487435, 0.80049208412789, -0.416177803375218, -0.777970346246018, 0.934996808181635, -0.678786709127108, 1.52621589791412, 0.5895781228122, -0.744496121210548, -1.99065153885627, 1.51286447692396, -0.750182409847851), A = c(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1), B = c(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0), U = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor'), V = structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('y', 'A', 'B', 'U', 'V'), class = 'data.frame', row.names = c(NA, 18L), terms = quote(y ~ (A + B):(U + V) - 1)), 4L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset218_2737d694efa6a8afffd57589198555f0() {
        assertEval("argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)), .Names = c('y', 'x'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x)), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset219_704c9702777a657ec537a6656e171eae() {
        assertEval("argv <- list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor'), title = structure(1L, .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(2L, .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = 1L, class = 'data.frame'), 4L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset22_8ea4d7b9f4d2cb2e8ec625e3e0af6720() {
        assertEval("argv <- list(structure(list(frow = c(NA, 2467L, 2468L, 2470L, 2470L, 2477L, 2478L, 2478L, 2480L, 2480L, 2482L, 2482L, 2482L, 2484L, 2484L, 2486L, 2486L, 2486L, 2490L, 2491L)), .Names = 'frow'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset220_402b1cec9a26967bb67d596f6a366277() {
        assertEval("argv <- list(structure(list(surname = structure(integer(0), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(integer(0), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(integer(0), .Label = c('no', 'yes'), class = 'factor'), title = structure(integer(0), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(integer(0), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = integer(0), class = 'data.frame'), 4L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset221_5e021c44fa665922a3a62c8e7916a1c0() {
        assertEval("argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 3L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset222_a720208691b0f3afb7ece19c4618a626() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 5L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset223_b9fcca8b529c3f30b3097a784b17b786() {
        assertEval("argv <- list(structure(list(srcfile = '/home/lzhao/tmp/RtmpS45wYI/R.INSTALL2aa62411bcd3/rpart/R/rpart.R', frow = 187L, lrow = 187L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'), 2L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset224_be736ffbd9f1ad001365746456d2bd9f() {
        assertEval("argv <- list(structure(list(y = c(78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1, 115.9, 83.8, 113.3, 109.4), x1 = c(7, 1, 11, 11, 7, 11, 3, 1, 2, 21, 1, 11, 10), x2 = c(26, 29, 56, 31, 52, 55, 71, 31, 54, 47, 40, 66, 68), x4 = c(60, 52, 20, 47, 33, 22, 6, 44, 22, 26, 34, 12, 12)), .Names = c('y', 'x1', 'x2', 'x4'), class = 'data.frame', row.names = c(NA, 13L), terms = quote(y ~ x1 + x2 + x4)), 3L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset225_d5ba052fc1bb6080b5d6363cc007c6d3() {
        assertEval("argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'), Soft = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L), .Label = c('Hard', 'Medium', 'Soft'), class = 'factor')), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), terms = quote(cbind(X, M) ~ M.user + Temp + Soft + M.user:Temp), row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), class = 'data.frame'), 'cbind(X, M)');.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset226_af1b274ee1bd7c312af702a9fc3a286b() {
        assertEval("argv <- list(structure(list(Df = 10L, `Sum Sq` = 2.74035772634541, `Mean Sq` = 0.274035772634541, `F value` = NA_real_, `Pr(>F)` = NA_real_), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), row.names = 'Residuals', class = c('anova', 'data.frame'), heading = c('Analysis of Variance Table\\n', 'Response: y')), 5L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset227_0e2664c92cd3bc6f1df321bcab58653e() {
        assertEval("argv <- list(structure(list(surname = structure(1:5, .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(c(1L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(NA_integer_, NA_integer_, NA_integer_, NA_integer_, NA_integer_), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA_integer_, NA_integer_, NA_integer_, NA_integer_, NA_integer_), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c(NA, -5L), class = 'data.frame'), 4L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset228_75e4822d42ca3310c7d260cb37de73a8() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 1, 1, 1), `Sum of Sq` = c(NA, 25.9509113775335, 2.97247824113524, 0.109090049888117, 0.246974722154086), RSS = c(47.863639350499, 73.8145507280325, 50.8361175916342, 47.9727294003871, 48.1106140726531), AIC = c(26.9442879283302, 30.5758847476115, 25.7275503692601, 24.9738836085411, 25.0111950072736)), .Names = c('Df', 'Sum of Sq', 'RSS', 'AIC'), row.names = c('<none>', '- x1', '- x2', '- x3', '- x4'), class = c('anova', 'data.frame')), 2L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset229_6a41e465c811d91aa16d8578736e378e() {
        assertEval("argv <- list(structure(list(mtime = structure(1342423171, class = c('POSIXct', 'POSIXt'))), .Names = 'mtime'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset23_6bd0dfa01353379afa0651da61d6e077() {
        assertEval("argv <- list(structure(list(x = c(0, 0, 1, 1), y = c(2, 2, 9, 9), z = c(0, 0, -3, -3), u = c(34, 35, 19, 37)), .Names = c('x', 'y', 'z', 'u'), row.names = c(2L, 90L, 25L, 50L), class = 'data.frame'), 4L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset230_ed64c3fd74a33c8d0a91bb13004e8139() {
        assertEval("argv <- list(structure(list(df0 = structure(list(structure(integer(0), .Label = character(0), class = 'factor')), row.names = character(0), class = 'data.frame')), .Names = 'df0', row.names = 'c0', class = 'data.frame'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset231_fb96544e265fef59a60f89dc429f4941() {
        assertEval("argv <- list(structure(list(y = structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), lag.quarterly.revenue = c(8.79636, 8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536), price.index = c(4.70997, 4.70217, 4.68944, 4.68558, 4.64019, 4.62553, 4.61991, 4.61654, 4.61407, 4.60766, 4.60227, 4.5896, 4.57592, 4.58661, 4.57997, 4.57176, 4.56104, 4.54906, 4.53957, 4.51018, 4.50352, 4.4936, 4.46505, 4.44924, 4.43966, 4.42025, 4.4106, 4.41151, 4.3981, 4.38513, 4.3732, 4.3277, 4.32023, 4.30909, 4.30909, 4.30552, 4.29627, 4.27839, 4.27789), income.level = c(5.8211, 5.82558, 5.83112, 5.84046, 5.85036, 5.86464, 5.87769, 5.89763, 5.92574, 5.94232, 5.95365, 5.9612, 5.97805, 6.00377, 6.02829, 6.03475, 6.03906, 6.05046, 6.05563, 6.06093, 6.07103, 6.08018, 6.08858, 6.10199, 6.11207, 6.11596, 6.12129, 6.122, 6.13119, 6.14705, 6.15336, 6.15627, 6.16274, 6.17369, 6.16135, 6.18231, 6.18768, 6.19377, 6.2003), market.potential = c(12.9699, 12.9733, 12.9774, 12.9806, 12.9831, 12.9854, 12.99, 12.9943, 12.9992, 13.0033, 13.0099, 13.0159, 13.0212, 13.0265, 13.0351, 13.0429, 13.0497, 13.0551, 13.0634, 13.0693, 13.0737, 13.077, 13.0849, 13.0918, 13.095, 13.0984, 13.1089, 13.1169, 13.1222, 13.1266, 13.1356, 13.1415, 13.1444, 13.1459, 13.152, 13.1593, 13.1579, 13.1625, 13.1664)), .Names = c('y', 'lag.quarterly.revenue', 'price.index', 'income.level', 'market.potential'), row.names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75'), class = 'data.frame'), 4L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset233_85c2d47894f9195a4586a7a01097d548() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')), 6L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset234_fb726398b379e933ea2e414efbed9fe9() {
        assertEval("argv <- list(structure(list(variog = c(0.00723952158228125, 0.014584633605134, 0.0142079356273193, 0.0184422668389517, 0.0111285046171491, 0.0199100817701382, 0.0270723108677323, 0.0341403794476899, 0.0283206569034573, 0.03752550654923), dist = c(1, 6, 7, 8, 13, 14, 15, 20, 21, 22), n.pairs = structure(c(16L, 16L, 144L, 16L, 16L, 128L, 16L, 16L, 112L, 16L), .Dim = 10L, .Dimnames = structure(list(c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22')), .Names = ''))), .Names = c('variog', 'dist', 'n.pairs'), collapse = TRUE, row.names = c(NA, 10L), class = c('Variogram', 'data.frame')), 3L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset24_38da53b024019d3b9fa62944656c9913() {
        assertEval("argv <- list(NULL, NULL);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset25_fb10f6c05ca8c80535c7a54d53576e01() {
        assertEval("argv <- list(structure(list(V1 = c(1L, 9L), V2 = c(NA, NA), V3 = c(23L, 87L), V4 = c(NA, 654L)), .Names = c('V1', 'V2', 'V3', 'V4'), class = 'data.frame', row.names = c(NA, -2L)), 2L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset26_e63b182efc6dc78f9be7acc4bcc12d28() {
        assertEval("argv <- list(structure(list(Df = c(NA, 2L, 2L), Deviance = c(NA, 5.45230478674972, 2.66453525910038e-15), `Resid. Df` = c(8L, 6L, 4L), `Resid. Dev` = c(10.5814458637509, 5.12914107700115, 5.12914107700115)), .Names = c('Df', 'Deviance', 'Resid. Df', 'Resid. Dev'), row.names = c('NULL', 'outcome', 'treatment'), class = c('anova', 'data.frame'), heading = 'Analysis of Deviance Table\\n\\nModel: poisson, link: log\\n\\nResponse: counts\\n\\nTerms added sequentially (first to last)\\n\\n'), 4L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset27_1fffada81dfe35bfa3cb076387dbf136() {
        assertEval("argv <- list(structure(list(surname = structure(c('Tukey', 'Venables', 'Tierney', 'Ripley', 'McNeil'), class = 'AsIs')), .Names = 'surname'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset28_2b9afe25abe40ad4bc0c6cf1a583c3c0() {
        assertEval("argv <- list(structure(list(surname = structure('R Core', class = 'AsIs'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 7L, class = 'data.frame'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset29_7aa7ec151c558554050cc5a345272e8c() {
        assertEval("argv <- list(structure(list(z = structure(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'), .Dim = c(3L, 3L), class = 'AsIs')), .Names = 'z'), 1L);.subset2(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr1_84ef372725403b5dd7529e876aecf7db() {
        assertEval("argv <- list('weight', 1L, 2L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr2_429b2d1cbdb7343993824e8773bd1986() {
        assertEval("argv <- list(c('        ', '        '), 1L, c(4L, -16L)); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr3_be06744b575a43acbb92581c4d9d702f() {
        assertEval("argv <- list(structure(c('as.formula', 'coef', 'makepredictcall', 'na.fail', 'predict'), .Names = c('as.formula', 'coef', 'makepredictcall', 'na.fail', 'predict')), 1L, 6L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr4_d18d5c0bb6dff3bfe5c077d2f425213f() {
        assertEval("argv <- list(character(0), 7L, 1000000L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr5_5c9a56a8fd6583281441f3a8429abbea() {
        assertEval("argv <- list(structure('to be supported).', Rd_tag = 'TEXT'), 17L, 17L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr6_76b9b2e9886ce859c57691c4152a6e7a() {
        assertEval("argv <- list(character(0), 1L, 5L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr7_6ce5674f5b00821171b03a31edbfee9c() {
        assertEval("argv <- list('', 1L, 2L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr8_afd3ca7daa5e737bb50a9a8317607cb7() {
        assertEval("argv <- list(structure(c('model.frame', 'predict', 'residuals'), .Names = c('model.frame', 'predict', 'residuals')), 1L, 6L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr9_0580e95b49f5dfc11b23699aac0148d3() {
        assertEval("argv <- list('> ### R code from vignette source 'parallel.Rnw'\\n> \\n> ###################################################\\n> ### code chunk number 1: parallel.Rnw:474-475 (eval = FALSE)\\n> ###################################################\\n> ## library(parallel)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 2: parallel.Rnw:500-507 (eval = FALSE)\\n> ###################################################\\n> ## library(boot)\\n> ## cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)\\n> ## cd4.mle <- list(m = colMeans(cd4), v = var(cd4))\\n> ## cd4.boot <- boot(cd4, corr, R = 999, sim = \\'parametric\\',\\n> ##                  ran.gen = cd4.rg, mle = cd4.mle)\\n> ## boot.ci(cd4.boot,  type = c(\\'norm\\', \\'basic\\', \\'perc\\'),\\n> ##         conf = 0.9, h = atanh, hinv = tanh)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 3: parallel.Rnw:512-522 (eval = FALSE)\\n> ###################################################\\n> ## cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)\\n> ## cd4.mle <- list(m = colMeans(cd4), v = var(cd4))\\n> ## run1 <- function(...) boot(cd4, corr, R = 500, sim = \\'parametric\\',\\n> ##                            ran.gen = cd4.rg, mle = cd4.mle)\\n> ## mc <- 2 # set as appropriate for your hardware\\n> ## ## To make this reproducible:\\n> ## set.seed(123, \\'L'Ecuyer\\')\\n> ## cd4.boot <- do.call(c, mclapply(seq_len(mc), run1) )\\n> ## boot.ci(cd4.boot,  type = c(\\'norm\\', \\'basic\\', \\'perc\\'),\\n> ##         conf = 0.9, h = atanh, hinv = tanh)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 4: parallel.Rnw:527-528 (eval = FALSE)\\n> ###################################################\\n> ## do.call(c, lapply(seq_len(mc), run1))\\n> \\n> \\n> ###################################################\\n> ### code chunk number 5: parallel.Rnw:532-547 (eval = FALSE)\\n> ###################################################\\n> ## run1 <- function(...) {\\n> ##    library(boot)\\n> ##    cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)\\n> ##    cd4.mle <- list(m = colMeans(cd4), v = var(cd4))\\n> ##    boot(cd4, corr, R = 500, sim = \\'parametric\\',\\n> ##         ran.gen = cd4.rg, mle = cd4.mle)\\n> ## }\\n> ## cl <- makeCluster(mc)\\n> ## ## make this reproducible\\n> ## clusterSetRNGStream(cl, 123)\\n> ## library(boot) # needed for c() method on master\\n> ## cd4.boot <- do.call(c, parLapply(cl, seq_len(mc), run1) )\\n> ## boot.ci(cd4.boot,  type = c(\\'norm\\', \\'basic\\', \\'perc\\'),\\n> ##         conf = 0.9, h = atanh, hinv = tanh)\\n> ## stopCluster(cl)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 6: parallel.Rnw:557-570 (eval = FALSE)\\n> ###################################################\\n> ## cl <- makeCluster(mc)\\n> ## cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)\\n> ## cd4.mle <- list(m = colMeans(cd4), v = var(cd4))\\n> ## clusterExport(cl, c(\\'cd4.rg\\', \\'cd4.mle\\'))\\n> ## junk <- clusterEvalQ(cl, library(boot)) # discard result\\n> ## clusterSetRNGStream(cl, 123)\\n> ## res <- clusterEvalQ(cl, boot(cd4, corr, R = 500,\\n> ##                     sim = \\'parametric\\', ran.gen = cd4.rg, mle = cd4.mle))\\n> ## library(boot) # needed for c() method on master\\n> ## cd4.boot <- do.call(c, res)\\n> ## boot.ci(cd4.boot,  type = c(\\'norm\\', \\'basic\\', \\'perc\\'),\\n> ##         conf = 0.9, h = atanh, hinv = tanh)\\n> ## stopCluster(cl)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 7: parallel.Rnw:575-589 (eval = FALSE)\\n> ###################################################\\n> ## R <- 999; M <- 999 ## we would like at least 999 each\\n> ## cd4.nest <- boot(cd4, nested.corr, R=R, stype=\\'w\\', t0=corr(cd4), M=M)\\n> ## ## nested.corr is a function in package boot\\n> ## op <- par(pty = \\'s\\', xaxs = \\'i\\', yaxs = \\'i\\')\\n> ## qqplot((1:R)/(R+1), cd4.nest$t[, 2], pch = \\'.\\', asp = 1,\\n> ##         xlab = \\'nominal\\', ylab = \\'estimated\\')\\n> ## abline(a = 0, b = 1, col = \\'grey\\')\\n> ## abline(h = 0.05, col = \\'grey\\')\\n> ## abline(h = 0.95, col = \\'grey\\')\\n> ## par(op)\\n> ## \\n> ## nominal <- (1:R)/(R+1)\\n> ## actual <- cd4.nest$t[, 2]\\n> ## 100*nominal[c(sum(actual <= 0.05), sum(actual < 0.95))]\\n> \\n> \\n> ###################################################\\n> ### code chunk number 8: parallel.Rnw:594-602 (eval = FALSE)\\n> ###################################################\\n> ## mc <- 9\\n> ## R <- 999; M <- 999; RR <- floor(R/mc)\\n> ## run2 <- function(...)\\n> ##     cd4.nest <- boot(cd4, nested.corr, R=RR, stype=\\'w\\', t0=corr(cd4), M=M)\\n> ## cd4.nest <- do.call(c, mclapply(seq_len(mc), run2, mc.cores = mc) )\\n> ## nominal <- (1:R)/(R+1)\\n> ## actual <- cd4.nest$t[, 2]\\n> ## 100*nominal[c(sum(actual <= 0.05), sum(actual < 0.95))]\\n> \\n> \\n> ###################################################\\n> ### code chunk number 9: parallel.Rnw:616-627 (eval = FALSE)\\n> ###################################################\\n> ## library(spatial)\\n> ## towns <- ppinit(\\'towns.dat\\')\\n> ## tget <- function(x, r=3.5) sum(dist(cbind(x$x, x$y)) < r)\\n> ## t0 <- tget(towns)\\n> ## R <- 1000\\n> ## c <- seq(0, 1, 0.1)\\n> ## ## res[1] = 0\\n> ## res <- c(0, sapply(c[-1], function(c)\\n> ##     mean(replicate(R, tget(Strauss(69, c=c, r=3.5))))))\\n> ## plot(c, res, type=\\'l\\', ylab=\\'E t\\')\\n> ## abline(h=t0, col=\\'grey\\')\\n> \\n> \\n> ###################################################\\n> ### code chunk number 10: parallel.Rnw:631-640 (eval = FALSE)\\n> ###################################################\\n> ## run3 <- function(c) {\\n> ##     library(spatial)\\n> ##     towns <- ppinit(\\'towns.dat\\') # has side effects\\n> ##     mean(replicate(R, tget(Strauss(69, c=c, r=3.5))))\\n> ## }\\n> ## cl <- makeCluster(10, methods = FALSE)\\n> ## clusterExport(cl, c(\\'R\\', \\'towns\\', \\'tget\\'))\\n> ## res <- c(0, parSapply(cl, c[-1], run3)) # 10 tasks\\n> ## stopCluster(cl)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 11: parallel.Rnw:644-648 (eval = FALSE)\\n> ###################################################\\n> ## cl <- makeForkCluster(10)  # fork after the variables have been set up\\n> ## run4 <- function(c)  mean(replicate(R, tget(Strauss(69, c=c, r=3.5))))\\n> ## res <- c(0, parSapply(cl, c[-1], run4))\\n> ## stopCluster(cl)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 12: parallel.Rnw:651-653 (eval = FALSE)\\n> ###################################################\\n> ## run4 <- function(c)  mean(replicate(R, tget(Strauss(69, c=c, r=3.5))))\\n> ## res <- c(0, unlist(mclapply(c[-1], run4, mc.cores = 10)))\\n> \\n> \\n> ###################################################\\n> ### code chunk number 13: parallel.Rnw:684-718 (eval = FALSE)\\n> ###################################################\\n> ## pkgs <- \\'<names of packages to be installed>\\'\\n> ## M <- 20 # number of parallel installs\\n> ## M <- min(M, length(pkgs))\\n> ## library(parallel)\\n> ## unlink(\\'install_log\\')\\n> ## cl <- makeCluster(M, outfile = \\'install_log\\')\\n> ## clusterExport(cl, c(\\'tars\\', \\'fakes\\', \\'gcc\\')) # variables needed by do_one\\n> ## \\n> ## ## set up available via a call to available.packages() for\\n> ## ## repositories containing all the packages involved and all their\\n> ## ## dependencies.\\n> ## DL <- utils:::.make_dependency_list(pkgs, available, recursive = TRUE)\\n> ## DL <- lapply(DL, function(x) x[x %in% pkgs])\\n> ## lens <- sapply(DL, length)\\n> ## ready <- names(DL[lens == 0L])\\n> ## done <- character() # packages already installed\\n> ## n <- length(ready)\\n> ## submit <- function(node, pkg)\\n> ##     parallel:::sendCall(cl[[node]], do_one, list(pkg), tag = pkg)\\n> ## for (i in 1:min(n, M)) submit(i, ready[i])\\n> ## DL <- DL[!names(DL) %in% ready[1:min(n, M)]]\\n> ## av <- if(n < M) (n+1L):M else integer() # available workers\\n> ## while(length(done) < length(pkgs)) {\\n> ##     d <- parallel:::recvOneResult(cl)\\n> ##     av <- c(av, d$node)\\n> ##     done <- c(done, d$tag)\\n> ##     OK <- unlist(lapply(DL, function(x) all(x %in% done) ))\\n> ##     if (!any(OK)) next\\n> ##     p <- names(DL)[OK]\\n> ##     m <- min(length(p), length(av)) # >= 1\\n> ##     for (i in 1:m) submit(av[i], p[i])\\n> ##     av <- av[-(1:m)]\\n> ##     DL <- DL[!names(DL) %in% p[1:m]]\\n> ## }\\n> \\n> \\n> ###################################################\\n> ### code chunk number 14: parallel.Rnw:731-748 (eval = FALSE)\\n> ###################################################\\n> ##     fn <- function(r) statistic(data, i[r, ], ...)\\n> ##     RR <- sum(R)\\n> ##     res <- if (ncpus > 1L && (have_mc || have_snow)) {\\n> ##         if (have_mc) {\\n> ##             parallel::mclapply(seq_len(RR), fn, mc.cores = ncpus)\\n> ##         } else if (have_snow) {\\n> ##             list(...) # evaluate any promises\\n> ##             if (is.null(cl)) {\\n> ##                 cl <- parallel::makePSOCKcluster(rep(\\'localhost\\', ncpus))\\n> ##                 if(RNGkind()[1L] == \\'L'Ecuyer-CMRG\\')\\n> ##                     parallel::clusterSetRNGStream(cl)\\n> ##                 res <- parallel::parLapply(cl, seq_len(RR), fn)\\n> ##                 parallel::stopCluster(cl)\\n> ##                 res\\n> ##             } else parallel::parLapply(cl, seq_len(RR), fn)\\n> ##         }\\n> ##     } else lapply(seq_len(RR), fn)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 15: parallel.Rnw:751-752 (eval = FALSE)\\n> ###################################################\\n> ##             list(...) # evaluate any promises\\n> \\n> ', 1L, 150L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinsubstrassign_testsubstrassign1_6c9bd83f72189c172a46f8dcbb1fb299() {
        assertEval("argv <- list('(0,5]', 1L, 1L, '['); .Internal(`substr<-`(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsubstrassign_testsubstrassign2_52b4aa2e496589d8e3038eb5f3f8f791() {
        assertEval("argv <- list(c('asfef', 'qwerty', 'yuiop[', 'b', 'stuff.blah.yech'), 2L, 1000000L, c('..', '+++')); .Internal(`substr<-`(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinsubstrassign__testsubstrassign_1_1c25503283a6bda4dc87404021f81e08() {
        assertEval("argv <- structure(list(x = c('NA', NA, 'BANANA'), start = 1,     stop = 2, value = 'na'), .Names = c('x', 'start', 'stop',     'value'));do.call('substr<-', argv)");
    }

    @Test
    public void TestrGenBuiltinsubstrassign__testsubstrassign_2_4fc504d37db399d7077f42f770f764ad() {
        assertEval("argv <- structure(list(x = 'abcde', start = NA, stop = 3, value = 'abc'),     .Names = c('x', 'start', 'stop', 'value'));do.call('substr<-', argv)");
    }

    @Test
    public void TestrGenBuiltinsubstring_testsubstring1_da601171908c1c239fd995b387b7769b() {
        assertEval("argv <- structure(list(text = c('NA', NA, 'BANANA'), first = 1,     last = 1), .Names = c('text', 'first', 'last'));do.call('substring', argv)");
    }

    @Test
    public void TestrGenBuiltinsubstring_testsubstring2_279e228a18d82e05d66fa1869e0dcdac() {
        assertEval("argv <- structure(list(text = 'abcdef', first = 1:6, last = 1:6),     .Names = c('text', 'first', 'last'));do.call('substring', argv)");
    }

    @Test
    public void TestrGenBuiltinsum_testsum1_cadbd70fb9a5af8900a2cb6a9f9e4df0() {
        assertEval("argv <- list(structure(313, .Names = ''));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum10_37cb58361c27df1360bf49a630e8a25e() {
        assertEval("argv <- list(structure(c(1.40573809911564e-05, 2.82275077233781e-31, 298891091593544, 127.398214346512, 1.96341150816547e-14, 0.100886417276321, 18137216711891664896, 75471627676.8224, 1.0423615801344e-05, 4184414.04436152, 0.00284364073413795, 0.124845661512668, 6.26689770279226e-09, 137507212543972912, 2.4515242751977e-06, 17279.5247449809, 9.31653241445582, 2.95260115615331e-07, 2.47540394744834e+33, 1.06282257391682e-08, 280.577969261283, 2.2306055461863e-12, 28194894.3770164, 3.27212932994522e+56, 2.35217223982607e-15, 1.93298541124412e-16, 3.82110080220967e-22, 0.020664532453814, 838.952367401989, 1.48989538272057, 58.0422958839475, 25315229.2305008, 1.14418993503202e-07, 0.141089233086962, 385551.97528297, 72589269069.5057, 3.63818589408037, 3.93055539198144e-15, 0.484224006687325, 0.00122384090262982, 509.681530848699, 1.09212481089264e-13, 4.20671904141446e-12, 1.41116557356417, 0.161225941178553, 0.369883152940699, 0.000211066453902523, 1536.88854142326, 1.21220206873588e-13, 18.2818077643159, 67.5636713643055, 33.0891402079429, 1.17150909115673e-23, 304202.728006006, 0.00353331875245541, 4.32607156718415e+28, 776642523346.066, 0.00115835488031795, 0.00496146869860724, 5.31574527522895e-12), .Dim = 60L, .Dimnames = list(c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum11_396113634297b8e258594fe2531462c5() {
        assertEval("argv <- list(1:10, 1+1i);sum(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum12_affd3a71efd35c59b2685e87793a269e() {
        assertEval("argv <- list(structure(c(2.19172926547288, 0.330877282992322, 2.43947034322552, 1.27858232527863, 1.34995699383497, 2.31589710162493, -0.100056357529734, 2.12383938264747, 1.1838950457512, 2.61258053432978, -0.0427077741902965, 3.32267292229042, 2.72078100200188, 1.50121623996352, 0.286636947273328, 0.276805761557996, 1.58770673719377, 1.2835349906538, 2.21171702752298, 0.371840556806206, 0.185048028214896, 0.083459109156465, 0.189963621072562, 0.342346999660209, -0.144296693248728, 0.352178185375541, 0.217818647266003, 2.22181318666033, 0.121145321065238, 0.289914009178438, 0.257143390127332, -0.0394307122851858, 2.17200902055199, 0.229288363933891, 1.6805330236497, -0.20328380754072, 0.25058926631711, 1.33428464681067, -0.00502156228152353, NaN, 3.26336745706726, 1.9882766360458, 0.117868259160127, 2.69303413653791, 2.56113239793806, 0.265336044890108, 3.07945609430521, 0.221095709171114, 0.0408573043900261, 0.278444292510551, 1.33428464681067, 1.06801925109484, 0.209625992503226, 3.06212550875829, 0.116229728207572, 1.39280910631599, 2.53602717112413, 0.0457728972476921, 4.7651657207987, 0.194879213930228, 0.114591197255017, 3.26336745706726, 0.0883747020141311, 1.88846207251023, 0.119506790112683, 1.87250223559585, 2.35968057412311, 0.29974519489377, 0.29974519489377, 0.031026118674694, 1.47173382020508, 2.41624560055216, 0.167024187736788, 3.40508627615607, 3.34290799326704, 0.0113637472440299, 0.0588811448681349, 1.54990439966979, 1.35522847629799, 3.07945609430521, 0.224372771076225, 0.129337975828015, 2.99455268975735, 2.83681720000879, 0.0506884901053581, 0.334154344897433, 3.91642660780075, 1.17486192682541, 2.77775688906243, 0.194879213930228, 1.77308062628823, 0.298106663941215, 1.45438038819124, 0.193240682977673, 3.30267449277716, 1.38194860291798, 1.66007135758589, 5.1096442273052, 0.337431406802543, 0.363647902043429), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum13_f2680c1ef1df3fad3d0a969174201ace() {
        assertEval("argv <- list(numeric(0));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum14_96f41bb7d276eb9d2e7caa27fc7a5dd6() {
        assertEval("argv <- list(c(49, 61, NA, NA));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum15_c2e76ce32d69699b3797bc0f497c9a70() {
        assertEval("argv <- list(1073741824L, 1073741824L, 0);sum(argv[[1]],argv[[2]],argv[[3]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum16_1fa4b5607c456d651c7fab1b023f809f() {
        assertEval("argv <- list(1073741824L, 1073741824L);sum(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum17_93e62c40a285ea88bfa643d288461b2b() {
        assertEval("argv <- list(structure(csp = c(1, 101, 1), class = 'ts'));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum18_f05c9601399b62fff5eb10945d0d96c4() {
        assertEval("argv <- list(c(1073741824L, 1073741824L));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum19_91d746fdb9da3a6f75df1b6433fefe7d() {
        assertEval("argv <- list(structure(c(0.0946626763551857, 1.56832184548816e-06, 0.226697441774756, 0.00453708504256956, 0.258320521579932, 2.57680524978307, 0.467122524211721, 5.16534267196331, 0.694563006492192, 0.197723848046524, 0.000799319848162311, 0.000570944537286636, 0.0654689540726797, 0.000146788076901938, 0.00669686464041458, 0.00765355286634145, 0.0786604017778045, 1.25812820036403e-06, 0.167435582495234, 0.00356206279639504, 0.25547689715822, 2.72165076185825, 0.488128793070721, 3.66078502081211, 0.898984802200849, 0.190804322887854, 0.00080933803412378, 0.000578096808847448, 0.0782510283683936, 0.000156595864868186, 0.00698171105046541, 0.00797910506602018), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32')));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum2_6623bd2a59ced617fc8b79d29ef0c929() {
        assertEval("argv <- list(structure(c(-3.02896519757699, -2.37177231827064, -2.49295252901048, -2.99672420295655, -2.59773735414265, -2.26026537208028, -2.74080517809177, -3.785668787425, -2.80120311135215, -2.57773983108655, -5.06092522358575, -2.25629807618983), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum20_03d9018b20423e6e9e079f74b6b8fffd() {
        assertEval("argv <- list(csum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum21_bd775482244eb79365a06a8b9f71044a() {
        assertEval("argv <- list(structure(c(6L, 12L, 18L, 24L, 30L, 36L, 42L, 48L, 54L, 60L, 66L, 72L, 78L, 84L, 90L, 96L, 102L, 108L, 114L, 120L), .Dim = 4:5, .Dimnames = list(NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum23_05557d3963d2adb2818ea17067b9c9b3() {
        assertEval("argv <- list(2, 3, NA);do.call('sum', argv)");
    }

    @Test
    public void TestrGenBuiltinsum_testsum3_6ec931afd55eec2037a9b2e197504bb4() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), class = 'table', .Dim = 60L, .Dimnames = structure(list(r = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60')), .Names = 'r')));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum4_75339cb5a0d324fa856fd60e30e08f20() {
        assertEval("argv <- list(structure(c(-1.94895827232912e-306, 0, 9.36477567902783e-210, 3.61651164350633e-272, 0, -6.24957292845831e-288, 8.01866432306958e-186, 8.68951728615672e-228, -4.51587577314873e-307, 3.44824066264446e-249, -3.07734214990199e-295, -1.63737039109249e-287, -6.4228533959362e-323, 1.99299936577426e-196, -3.77967355768316e-310, 2.99503783387623e-261, 3.69173164797792e-278, -1.16866860094119e-314, 3.18619635538936e-115, -9.28843414181544e-322, 2.14105998923225e-270, 0, 5.16415548974996e-245, 6.63795852562496, 0, 0, 0, -3.94804275684608e-291, 5.96425287032638e-268, 7.18607375106076e-283, 6.05285733998884e-274, 3.00167530091305e-245, -1.10890415661145e-316, -2.83304044404219e-287, 2.03740072057053e-254, 7.14727745939762e-228, 1.98119254926182e-280, 0, -4.86004310565019e-285, -5.29597124993551e-297, 4.62156398366003e-269, 0, 0, 4.73760851736069e-283, -5.12888870803705e-287, -1.74386324923243e-285, -1.06055701952213e-300, 1.32316178368225e-266, 0, 1.3776952356639e-276, 1.33745692946041e-273, 3.1799923028917e-275, 0, 6.14747062861386e-255, -8.73416235737445e-295, 5.68676829309248e-139, 1.04052519425852e-222, -4.06077295726178e-297, -4.44772889827087e-294, 0), .Dim = 60L, .Dimnames = list(c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum5_53cbf3efccac3d748894c91bc7fe87e9() {
        assertEval("argv <- list(c(2.24999999999999, 0.809999999999997, 3.24, 2.89, 0.0899999999999994, 1.96, 6.25, 0.490000000000001, 9.00000000000001, 0.00999999999999993, 0.249999999999998, 4.41000000000001, 3.24, 3.60999999999999));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum6_9d7c370b191b6ab1cd6f7060046e9eb8() {
        assertEval("argv <- list(structure(c(42L, 1L, 0L, 16L, 84L, 0L, 3L, 0L, 0L), .Dim = c(3L, 3L), .Dimnames = structure(list(c('(0,2.5]', '(2.5,4]', NA), c('(2,5.5]', '(5.5,10]', NA)), .Names = c('', '')), class = 'table'));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum7_46cdf021a6236df22f639c0cb1e4f263() {
        assertEval("argv <- list(structure(cim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4')), .Tsp = c(1, 101, 1), class = c('mts', 'ts', 'matrix')));sum(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum8_d527b757f773f64e68639c10e06fc846() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, 1, 0, 0, 0, 1), .Dim = c(3L, 3L)), extrarg = FALSE);sum(argv[[1]],argv[[2]]);");
    }

    @Test
    public void TestrGenBuiltinsum_testsum9_f0bd7ed3f65539aca4713ea3dddaf981() {
        assertEval("sum( );");
    }

    @Test
    public void TestrGenBuiltinsummary_testsummary1_15768e15274b3dba8a71991b8acaa138() {
        assertEval("argv <- structure(list(object = structure(c(4L, 4L, 4L, 4L, 4L,     3L, 4L, 4L, 4L, 4L, 3L, 4L, 3L, 4L, 4L, 4L, 4L, 2L, 4L, 3L,     4L, 4L, 4L, 2L), .Dim = c(6L, 4L), .Dimnames = structure(list(c('25-34',     '35-44', '45-54', '55-64', '65-74', '75+'), c('0-39g/day',     '40-79', '80-119', '120+')), .Names = c('', '')), class = 'table')),     .Names = 'object');do.call('summary', argv)");
    }

    @Test
    public void TestrGenBuiltinsummary_testsummary2_1f99eef26272ffa8cf1f440084f3da24() {
        assertEval("argv <- structure(list(object = c(5.1, 5, 5.4, 5.4, 5.8, 5.7,     5.4, 5.1, 5.7, 5.1, 5.1, 4.6, 5.2, 5.2, 5.5, 5.5, 4.9, 5,     5, 5.1, 5.1, 5.3)), .Names = 'object');do.call('summary', argv)");
    }

    @Test
    public void TestrGenBuiltinsummary_testsummary3_c4d1e7f58ac25dabb56fcb914550b9e3() {
        assertEval("argv <- structure(list(object = structure(list(Sepal.Length = c(5.1,     4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3,     5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5,     5, 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4,     5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4,     6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6,     6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8,     6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5,     5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8,     7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7,     5.8, 6.4, 6.5, 7.7, 7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2,     6.2, 6.1, 6.4, 7.2, 7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4,     6, 6.9, 6.7, 6.9, 5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9),     Sepal.Width = c(3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9,         3.1, 3.7, 3.4, 3, 3, 4, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4,         3.7, 3.6, 3.3, 3.4, 3, 3.4, 3.5, 3.4, 3.2, 3.1, 3.4,         4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3, 3.4, 3.5, 2.3, 3.2,         3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2, 3.2, 3.1, 2.3,         2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9, 2.9, 3.1,         3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8, 3,         2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5,         2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7,         3, 2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8,         3.2, 3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2,         2.8, 3, 2.8, 3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1,         3, 3.1, 3.1, 3.1, 2.7, 3.2, 3.3, 3, 2.5, 3, 3.4, 3),     Petal.Length = c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5,         1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7,         1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6,         1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3,         1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5,         4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 4.7,         3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3,         4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5,         4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3,         3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1,         5.1, 5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9,         6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6,         5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9,         5.7, 5.2, 5, 5.2, 5.4, 5.1), Petal.Width = c(0.2, 0.2,         0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1,         0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5,         0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2,         0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3,         0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6,         1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5, 1, 1.5, 1.1,         1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1, 1.1,         1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4,         1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1,         1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4,         2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8,         1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8,         1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2, 2.3,         1.8), Species = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L), .Label = c('setosa', 'versicolor', 'virginica'),         class = 'factor')), .Names = c('Sepal.Length', 'Sepal.Width',     'Petal.Length', 'Petal.Width', 'Species'), row.names = c(NA,     -150L), class = 'data.frame')), .Names = 'object');do.call('summary', argv)");
    }

    @Test
    public void TestrGenBuiltinsummaryconnection_testsummaryconnection1_8c97205334627ba90d66cdf7be082e86() {
        assertEval("argv <- list(structure(2L, class = c('terminal', 'connection'))); .Internal(summary.connection(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinsweep_testsweep1_804f5f0cbb45988235378c90538b36ac() {
        assertEval("argv <- structure(list(x = structure(integer(0), .Dim = c(5L,     0L)), MARGIN = 2, STATS = integer(0)), .Names = c('x', 'MARGIN',     'STATS'));do.call('sweep', argv)");
    }

    @Test
    public void TestrGenBuiltinswitch_testswitch1_ff79ae77afaf2ebeb8b3ab0375e8f65f() {
        assertEval("argv <- structure(list('forward', forward = 'posS', reverse = 'negS'),     .Names = c('', 'forward', 'reverse'));do.call('switch', argv)");
    }

    @Test
    public void TestrGenBuiltinswitch_testswitch2_f2f8260652e1e15f4bbd9d550ccbacc0() {
        assertEval("argv <- list(3L);do.call('switch', argv)");
    }

    @Test
    public void TestrGenBuiltinswitch_testswitch4_7e4b1da4d8baa662cf0961c2e61016b6() {
        assertEval("argv <- list(2L, TRUE, FALSE, FALSE);do.call('switch', argv)");
    }

    @Test
    public void TestrGenBuiltinsysonexit_testsysonexit1_0d4c9db5997c385cb40a542f86ba4e62() {
        assertEval(" .Internal(sys.on.exit())");
    }

    @Test
    public void TestrGenBuiltinsysparent_testsysparent1_3e20f19611bddc1971b8bd00194dbac8() {
        assertEval("argv <- list(2); .Internal(sys.parent(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltint_testt1_af67a8b6261834dd7371970aa52238b3() {
        assertEval("argv <- structure(list(x = c(-2.13777446721376, 1.17045456767922,     5.85180137819007)), .Names = 'x');do.call('t', argv)");
    }

    @Test
    public void TestrGenBuiltintabulate_testtabulate1_102d7e7e0b3f2b4fa4de42e2f1373091() {
        assertEval("argv <- list(1L, 1L); .Internal(tabulate(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintabulate_testtabulate2_feddaf0d44efd9a7d1a527c99bb5b053() {
        assertEval("argv <- list(1:6, 6L); .Internal(tabulate(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintabulate_testtabulate3_341d695494b43d1d262c736737411bdc() {
        assertEval("argv <- list(integer(0), 1L); .Internal(tabulate(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintabulate_testtabulate4_a611bb6091afebd1d281a99f55e7d258() {
        assertEval("argv <- list(c(1L, 9L, 13L, 25L, 11L, 24L, 3L, 20L, 20L, 15L, 20L, 14L, 24L, 19L, 12L, 8L, 1L, 11L, 4L, 3L, 21L, 25L, 10L, 3L, 12L), 25L); .Internal(tabulate(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintabulate_testtabulate5_d3a64506daf25236253f0a26305b3973() {
        assertEval("argv <- list(structure(1:49, .Label = c('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48'), class = 'factor'), 49L); .Internal(tabulate(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintabulate_testtabulate6_93c91da2aef4edca44d052ca098eeee8() {
        assertEval("argv <- list(integer(0), 0L); .Internal(tabulate(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintabulate_testtabulate8_86ca0f16a5397e588db9c582c56e3240() {
        assertEval("argv <- structure(list(bin = numeric(0)), .Names = 'bin');do.call('tabulate', argv)");
    }

    @Test
    public void TestrGenBuiltintan_testtan1_569f4f339801a0db973e92721d4cf8d2() {
        assertEval("argv <- list(c(2.19881034888372+1i, 1.31241297643351+1i, -0.26514505669635+1i, 0.54319405923209+1i, -0.41433994791886+1i, -0.47624689461558+1i, -0.78860283785024+1i, -0.59461726745951+1i, 1.65090746733669+1i, -0.05402812508544+1i, 0.11924523642758+1i, 0.24368742959909+1i, 1.23247587848534+1i, -0.51606383094478+1i, -0.99250715039204+1i, 1.67569693240319+1i, -0.44116321690529+1i, -0.72306596993987+1i, -1.23627311888329+1i, -1.2847157223178+1i, -0.57397347929799+1i, 0.61798581716653+1i, 1.10984813892972+1i, 0.70758835383559+1i, -0.36365729709525+1i, 0.0597499373846+1i, -0.70459646368007+1i, -0.71721816157401+1i, 0.88465049897692+1i, -1.01559257860354+1i, 1.95529396549246+1i, -0.09031959396585+1i, 0.21453882662922+1i, -0.73852770473957+1i, -0.57438868976327+1i, -1.31701613230524+1i, -0.18292538837273+1i, 0.41898240492446+1i, 0.32430434416138+1i, -0.78153648705475+1i, -0.788621970854+1i, -0.50219871834286+1i, 1.49606066984635+1i, -1.13730362066574+1i, -0.1790515943802+1i, 1.90236182167893+1i, -0.10097488532881+1i, -1.35984070382139+1i, -0.66476943527406+1i, 0.48545997890488+1i, -0.37560287166977+1i, -0.56187636354978+1i, -0.34391723412846+1i, 0.09049664713922+1i, 1.59850877114583+1i, -0.08856511213888+1i, 1.08079949615152+1i, 0.63075411565057+1i, -0.11363989550614+1i, -1.5329020028906+1i, -0.52111731755252+1i, -0.48987045313847+1i, 0.04715443276153+1i, 1.30019867766682+1i, 2.29307897383109+1i, 1.54758105898377+1i, -0.13315096432894+1i, -1.75652739555764+1i, -0.38877986407174+1i, 0.08920722307329+1i, 0.84501300406744+1i, 0.96252796848427+1i, 0.68430942941646+1i, -1.39527434979947+1i, 0.84964304563336+1i, -0.44655721642722+1i, 0.17480270016126+1i, 0.07455117717373+1i, 0.42816676497051+1i, 0.02467498282614+1i, -1.66747509758566+1i, 0.73649596477344+1i, 0.38602656834968+1i, -0.26565162527822+1i, 0.11814451104668+1i, 0.13403864536846+1i, 0.221019468561+1i, 1.64084616597749+1i, -0.21905037893348+1i, 0.16806538388466+1i, 1.16838387306909+1i, 1.05418102337692+1i, 1.14526311038036+1i, -0.57746800105956+1i, 2.00248273029283+1i, 0.06670087093018+1i, 1.86685184470686+1i, -1.35090268603071+1i, 0.02098358635424+1i, 1.24991457096922+1i));tan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintan_testtan2_ef5b4fe3f34aa4d3ea52e24fd1dc73dc() {
        assertEval("argv <- list(c(0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99));tan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintan_testtan3_49f9c21e16cfe9b59f79f726609f6c94() {
        assertEval("argv <- list(Inf);tan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintan_testtan4_61456f57ec58f78d4ce30165260aa1c3() {
        assertEval("argv <- list(c(-6.28318530717959, -6.15752160103599, -6.0318578948924, -5.90619418874881, -5.78053048260522, -5.65486677646163, -5.52920307031804, -5.40353936417444, -5.27787565803085, -5.15221195188726, -5.02654824574367, -4.90088453960008, -4.77522083345649, -4.64955712731289, -4.5238934211693, -4.39822971502571, -4.27256600888212, -4.14690230273853, -4.02123859659494, -3.89557489045134, -3.76991118430775, -3.64424747816416, -3.51858377202057, -3.39292006587698, -3.26725635973338, -3.14159265358979, -3.0159289474462, -2.89026524130261, -2.76460153515902, -2.63893782901543, -2.51327412287183, -2.38761041672824, -2.26194671058465, -2.13628300444106, -2.01061929829747, -1.88495559215388, -1.75929188601028, -1.63362817986669, -1.5079644737231, -1.38230076757951, -1.25663706143592, -1.13097335529233, -1.00530964914873, -0.879645943005142, -0.75398223686155, -0.628318530717958, -0.502654824574367, -0.376991118430775, -0.251327412287183, -0.125663706143591, 8.88178419700125e-16, 0.125663706143592, 0.251327412287184, 0.376991118430776, 0.502654824574368, 0.62831853071796, 0.753982236861551, 0.879645943005142, 1.00530964914873, 1.13097335529233, 1.25663706143592, 1.38230076757951, 1.5079644737231, 1.63362817986669, 1.75929188601028, 1.88495559215388, 2.01061929829747, 2.13628300444106, 2.26194671058465, 2.38761041672824, 2.51327412287183, 2.63893782901543, 2.76460153515902, 2.89026524130261, 3.0159289474462, 3.14159265358979, 3.26725635973339, 3.39292006587698, 3.51858377202057, 3.64424747816416, 3.76991118430775, 3.89557489045134, 4.02123859659494, 4.14690230273853, 4.27256600888212, 4.39822971502571, 4.5238934211693, 4.64955712731289, 4.77522083345649, 4.90088453960008, 5.02654824574367, 5.15221195188726, 5.27787565803085, 5.40353936417445, 5.52920307031804, 5.65486677646163, 5.78053048260522, 5.90619418874881, 6.0318578948924, 6.157521601036, 6.28318530717959));tan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintan_testtan5_fb04c25fd1ada8f2fe176e135a4deeb7() {
        assertEval("argv <- list(1+1000i);tan(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintanh_testtanh1_edd961811b796fcbe12fc269bb7d3f87() {
        assertEval("argv <- list(c(0.57459950307683, 1.3311607364495));tanh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintanh_testtanh2_375a802d82e03537aa707b1631e96ac9() {
        assertEval("argv <- list(FALSE);tanh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintanh_testtanh3_478078d9e56d432957202f074fd8cd0e() {
        assertEval("argv <- list(c(0.018063120710024, 0.202531388051386, 0.417573408622862, 1.63052300091743, 2.60085453772445, 2.75283670267494, 2.30083138197613, 1.47188976409943, 0.829803307993584, 0.295089115172324, 0.237719196109985, 0.617898787321681, 0.850777050382226, 0.516973890969527, 0.522699166681335, 0.850446724158497, 0.645479182912265, 0.193978409371909, 0.414456893353747, 0.492772947140595, 0.420563171733189, 0.369166401583374, 0.592867562934369, 1.21638206559229, 0.54564621330955, 0.672292186547141, 0.557193544541334, 0.112218530051911, -0.0391766542932368, 0.246991917518619, -0.0310729286667355, 0.100305401934259, 0.385595467685569, 0.347899688300561, 0.0900835492886662, -0.128526864819991));tanh(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod1_4314518b98c5af37eb020f0cc3022da1() {
        assertEval("argv <- list(structure(c(5, 2, 0, 2, 5, 2, 0, 2, 5), .Dim = c(3L, 3L)), structure(c(0, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 0, 1, 0, 0), .Dim = c(5L, 3L), .Dimnames = list(c('a', 'b', 'c', 'd', 'e'), NULL))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod2_e791b4ba5ff95c8d4b7152502910c736() {
        assertEval("argv <- list(structure(c(5, 2, 0, 2, 5, 2, 0, 2, 5), .Dim = c(3L, 3L), .Dimnames = list(c('A', 'B', 'C'), c('A', 'B', 'C'))), structure(c(0, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 0, 1, 0, 0), .Dim = c(5L, 3L), .Dimnames = list(NULL, c('A', 'B', 'C')))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod3_0a46978a95837c37264e7fb2582dff9d() {
        assertEval("argv <- list(structure(c(-1.67712982705863, -1.48498667828929, -1.66855080519244, -1.58355627712096, -1.82359988031979, -1.9949008033236, -0.0318360538544526, -0.560218641212122, 0.066207937805176, 0.499775901814107, -0.00128363357081381, -0.00713986667014182, 0.296776079992064, -0.138150806520963, 0.253601178172029, -0.170225064799926, -0.240191246767341, -0.00408674943172847, -0.242382276284081, 0.0729153527553058, 0.269807081327349, 0.0299339639014576, -0.077267349576335, -0.0293027062153706, -0.0099926992270607, 0.0334924583850379, -0.0453336990810482, 0.0438958486872448, -0.112099180250145, 0.089015596249019), .Dim = c(6L, 5L)), structure(c(-0.399602067979347, -0.353820997034499, -0.397557983601584, -0.377306725388702, -0.434500818950138, -0.47531590790431, -0.0422023061126668, -0.742633452454394, 0.087766143100416, 0.662509734796894, -0.00170160212505116, -0.00946470439441127, 0.584095849615428, -0.271899651454647, 0.499121747385523, -0.335026171424641, -0.472729171281292, -0.00804328091925277, -0.637436340955898, 0.191758639997983, 0.70956029179181, 0.0787227379500612, -0.2032038701195, -0.0770626058818733, -0.062340518587102, 0.208946269374942, -0.282819110829524, 0.273848927982668, -0.699342677207614, 0.555333279468297), .Dim = c(6L, 5L))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod4_8734f772dd52f75c834c2a0a502aab59() {
        assertEval("argv <- list(c(2, 3), structure(c(0, 0, 1, 0), .Dim = c(2L, 2L), .Dimnames = list(NULL, NULL))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod5_81cff9308b297ddba3d09efc2ea1c289() {
        assertEval("argv <- list(structure(c(-0.106539372596213, -2.87400113021639, 0.341152775291742, 1.88577541025803, 0.842201032082677, -1.43117364207636, -0.69348461621825, -2.41970841038843, -3.02719090531729, -0.226641199170227, -0.332680183991575, -1.62371869115524, -1.66979618600051, -1.10431770731054, 1.88731633228519, 2.05877121721062, -0.223853590000374, 2.00359231906507, 2.73128102907396, 0.539089155601206, -0.199828039026098, -1.05787977326062, 0.306997029957149, 1.45711168105796, 1.49857746263809, -0.757919845814536, 0.268252398125501, -0.535834002202256, -0.271560453176356, -2.05847896960824, 0.980553291004929, 0.685818887220841, -0.522933983909647, -0.337189871316714, 0.191459457586776, 1.89272736696455, -0.453746315234956, 0.612338437255857, 1.37687299952389, -1.15071450872488, -0.20817483353688, -0.081142998844394, -0.253631714967276, -0.410462721238244, -0.68459626706876, -0.624834027577721, 0.00753430632431097, -0.0556623066116985, -0.563702942039652, 0.0408500401240061, -0.420302429975138, 0.033747665813787, 0.339840694442255, -0.250248532584852, -0.31434827109732, 0.378366203759376, -0.193977362697154, -0.518701418701189, 1.24086430187875, 0.0626244079886504, -0.168813902431602, -0.233723461170579, -0.0800002226605061, -0.0555238917407563, -0.947495254278566, -0.0485572234634504, -0.0296030565974314, -0.095544458696536, 0.0295824037592777, 0.194854132525369, 0.267233992325682, -0.087254491408015, 0.126110082843019, 0.159157280802928, -0.155595903815538, 0.170585777111235, -0.160659663851048, -0.059679874503493, 0.0114766797349517, -0.288711739670586, 0.192267902822735, -0.558695699349865, -0.0862396209998433, 0.00725278175306798, -0.128294571915242, -0.130284537275488, -0.0857140300930927, -0.0514859262258765, -0.0490801347386973, 0.0204665694600954, -0.14875269796722, 0.196176132315475, -0.0529883263026191, -0.132778199491125, -0.228017010951841, 0.0529472898389869), .Dim = c(12L, 8L)), structure(c(-0.0185462290552347, -0.500302207222603, 0.059387411050087, 0.328273218183171, 0.146609210012521, -0.249136760776327, -0.120720858638907, -0.421219548532773, -0.526969274886959, -0.0394533916498165, -0.057912513881884, -0.282654740999492, -0.321354169237256, -0.212527194864884, 0.363216168017541, 0.396212855019715, -0.0430808772043306, 0.385593613508892, 0.525638130815129, 0.103748319223306, -0.0384571326787796, -0.203590161804909, 0.0590819264933657, 0.28042279511599, 0.416779971858557, -0.210790446196582, 0.0746055707690415, -0.149024582263218, -0.0755255973444945, -0.572498138010465, 0.272708607475933, 0.190737938906932, -0.145436866983219, -0.0937782587701373, 0.0532481432121619, 0.52639978807016, -0.204031585044791, 0.275344124552216, 0.61912476435818, -0.517430328944052, -0.0936079034183924, -0.0364867638890611, -0.114048046419078, -0.184568682552654, -0.307835583002935, -0.280962892162748, 0.0033878764630103, -0.0250291148686315, -0.338839482109357, 0.0245547883601272, -0.252642033739931, 0.0202855808510911, 0.204276820851501, -0.150423346865756, -0.188953431740463, 0.227434343460447, -0.116598981866977, -0.311789254542753, 0.745878344887204, 0.0376432698639114, -0.159472254176866, -0.220789915226282, -0.0755732534972413, -0.0524513683353668, -0.895063746796005, -0.0458702143055051, -0.0279649134231136, -0.0902573187573718, 0.0279454034502495, 0.184071497085901, 0.252446075441722, -0.0824260930614398, 0.167922807083695, 0.211927046257706, -0.207184868571959, 0.227144744458931, -0.21392755544038, -0.0794671752416819, 0.0152818571968794, -0.384436237535829, 0.256015738204522, -0.743935362069355, -0.114833000769291, 0.00965749481472171, -0.300640883681616, -0.30530409690622, -0.200859174058623, -0.120650267011609, -0.115012621802916, 0.0479606224687302, -0.348581720171566, 0.459712089888966, -0.124170937293853, -0.311147655218321, -0.534326859224339, 0.124074773921503), .Dim = c(12L, 8L))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod6_ddac5708483471742ea352332f0a82fd() {
        assertEval("argv <- list(structure(c(-1.22589324018138, -0.740548974281808, -0.54768368397833, -0.441021701509591, -0.370068251595057, -0.319690799411412, -0.282987166340516, -0.254112864677485, -0.230083320312515, 0.203647970189376, -0.0305516337408725, -0.0825170335109532, -0.0984577177107505, -0.100129992839015, -0.0988979642888749, -0.0945771185256416, -0.0902309571831907, -0.0871241228998968, -0.00955870050771132, 0.0197754782700907, 0.0125304440435148, 0.00419858922572787, -0.00191073996840182, -0.0061756059258365, -0.00956682744689523, -0.0127366531032827, -0.0131079781713544, 0.000214464770644159, -0.000956552371122151, 5.72249143534175e-05, 0.00029865136977495, 0.00077852017665313, 0.00142425180877207, 0.000491677810053133, -0.000120006753650731, -0.00247588122373662, 4.2574997724815e-05, -0.000297064220851874, 0.000399761711902461, 5.67830351414009e-05, -0.00026523273781528, 0.000320119491527155, -0.00026454073650643, -0.000195756422133707, 0.000192249930248858, -4.94461924222768e-07, 2.80125995838013e-05, -0.000119138513940463, 0.000151917649712048, -7.31975645151543e-05, 4.92140187851149e-05, -1.13604576670922e-05, -3.74519303853871e-05, 9.55915555684852e-06), .Dim = c(9L, 6L)), structure(c(-0.709851441473678, -0.428813651666777, -0.317135326144804, -0.255372882626744, -0.214287405483635, -0.185116425598763, -0.163863247924954, -0.147143631578904, -0.133229363887123, 0.633337192677659, -0.0950143815681878, -0.256624734846691, -0.306199636924392, -0.311400346924765, -0.307568786499592, -0.294131125799441, -0.280614734641737, -0.270952601985731, -0.28505721606605, 0.58973945020027, 0.373679821042009, 0.125209295460755, -0.0569816174886273, -0.184167401344961, -0.285299575647986, -0.379829336915808, -0.390902901787376, 0.0675695685124445, -0.301372718615498, 0.0180293609967187, 0.0940935153626058, 0.245281648154537, 0.448726753036158, 0.154908693733931, -0.0378094944843564, -0.780054577138554, 0.056333641054865, -0.393064241503382, 0.528949712019966, 0.0751331835725979, -0.350946016360591, 0.423570111428232, -0.350030386168567, -0.259017559788085, 0.254377901167792, -0.00226968135332679, 0.128583560874789, -0.546870143699694, 0.697333080468545, -0.335991790571385, 0.225902410856869, -0.0521468239901137, -0.171912019667483, 0.0438784789244046), .Dim = c(9L, 6L))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod7_d69f763e8621cd3655996220e07a7911() {
        assertEval("argv <- list(0, 0); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod8_fd4028b410685c9ccfcdf907e176e27e() {
        assertEval("argv <- list(structure(c(1.1173625565162, 1.46907016195074, 1.1173625565162, -0.59596185089264, -1.32605913508878e-308, 0.595961850892641), .Dim = c(3L, 2L)), structure(c(0.517876924314756, 0.680886908762812, 0.517876924314755, -0.707106781186547, -1.57336481399136e-308, 0.707106781186548), .Dim = c(3L, 2L))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault1_484be8b1d7ad518ca03bbd8f72b666a7() {
        assertEval("argv <- list(structure(c('D:', 'E:', 'F:', 'G:'), .Dim = c(4L, 1L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault10_f3f7c654a28cab3226b1d4a90f4b412f() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 74, 68, 56, 57, 60, 74, 53, 61, 57, 57, 67, 70, 63, 57, 67, 50, 58, 72, 60, 70, 53, 74, 73, 48, 61, 65, 74, 70, 68, 74, 63, 74, 63, 68, 58, 59, 62, 57, 48, 73, 69, 68, 68, 67, 63, 74, 40, 81, 73, 59, 55, 42, 44, 71, 61, 72, 63, 70, 66, 72, 69, 71, 64, 56, 63, 59, 66, 67, 55, 69, 44, 80, 76, 49, 68, 66, 80, 75, 72, 70, 66, 50, 64, 53, 47, 67, 56, 54, 56, 74, 76, 57, 71, 54, 82, 70, 60, 55, 69, 62, 63, 69, 63, 64, 46, 61, 65, 61, 56, 53, 56, 60, 39, 58, 64, 53, 72, 52, 50, 64, 71, 70, 64, 60, 73, 62, 69, 67, 69, 65, 65, 76, 67, 76, 77, 39, 66, 1, 0, 0, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 3, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 1, 1, 1, 2, 0, 1, 0, 2, 1, 0, 0, 0, 1, 1, 1, 1, 0, 2, 0, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 1, 0, 2, 0, 1, 1, 1, 1, 0, 0, 2, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 1), .Dim = c(137L, 3L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '9', '10', '11', '15', '16', '17', '18', '20', '21', '23', '24', '25', '27', '28', '29', '30', '32', '33', '35', '37', '39', '41', '45', '47', '48', '49', '52', '53', '54', '55', '56', '58', '62', '63', '65', '66', '69', '70', '71', '73', '74', '79', '80', '81', '82', '83', '85', '86', '88', '90', '91', '92', '93', '96', '97', '98', '99', '103', '104', '105', '106', '108', '109', '111', '112', '113', '116', '117', '118', '119', '120', '121', '124', '125', '126', '127', '128', '132', '133', '135', '138', '139', '140', '142', '143', '145', '147', '148', '149', '151', '152', '155', '156', '158', '159', '163', '164', '165', '168', '169', '170', '171', '173', '175', '177', '181', '182', '188', '189', '190', '191', '192', '193', '194', '195', '196', '198', '200', '202', '206', '209', '212', '213', '215', '216', '218', '221', '223', '224', '225', '227'), c('(Intercept)', 'age', 'ph.ecog')), assign = 0:2)); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault11_dfb326b2db541aaf0d14ea02b14ffa73() {
        assertEval("argv <- list(structure(c(NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), .Dim = c(20L, 20L), .Dimnames = list(c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_)))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault12_77ba6d03dcb038abeaf0e35b76474deb() {
        assertEval("argv <- list(structure('foo', .Dim = c(1L, 1L), .Dimnames = list(structure('object', simpleOnly = TRUE), NULL))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault13_92f115b08cef10b8b8b0c68910c97135() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 3.95252516672997e-323, 0, 0, 0, 0, 0), .Dim = c(12L, 1L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault14_244a400ef04182d49484e38e08920475() {
        assertEval("argv <- list(structure(c(794, 86, 150, 570), .Dim = c(2L, 2L), .Dimnames = structure(list(`1st Survey` = c('Approve', 'Disapprove'), `2nd Survey` = c('Approve', 'Disapprove')), .Names = c('1st Survey', '2nd Survey')))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault15_3bf8ed6c1fc32cfd3d4c88d9d135726c() {
        assertEval("argv <- list(structure(list(3, 3, 3, 3, 3, 'fred'), .Dim = 2:3)); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault16_15977dd9104f966c735b9e5ed654c521() {
        assertEval("argv <- list(1.28578345790245); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault17_519288a8b2a786d4223f90fe3f544995() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault18_198061f5782d515338f7e7c29c33145f() {
        assertEval("argv <- list(structure(c(0, 1954.88214285714, 557.144827586207, 0, 0, 1392.34285714286, 0, 0, 0), .Dim = c(3L, 3L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault19_b1e99a973c4728a1592b245757328a5f() {
        assertEval("argv <- list(c(3, 4)); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault2_9db7b02224702e06049e875c1ce9a13a() {
        assertEval("argv <- list(structure(c(0.63, -0.37, 0.4, -0.6, 0.85, -0.05, 1.02, -1.76, -1.62, -0.46, -0.57, 1.41, 0, -0.65, 0.57, -0.29, 1.22, 0.8, -0.5, 0.44, 1.63, -0.13, 0.17, 1.02, 0.11), .Dim = c(5L, 5L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault20_05b5618afd90d4ac995441ab39bfa4ee() {
        assertEval("argv <- list(structure(c(0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L), .Dim = c(4L, 4L), .Dimnames = list(c('Y', 'B', 'V', 'N'), c('B', 'V', 'N', 'V:N')))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault21_cc91eeb77fc367283629c51a17902694() {
        assertEval("argv <- list(-3:5); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault22_d2c2a099a76c7266501ec77260efbcbb() {
        assertEval("argv <- list(structure(c(8.3, 8.6, 8.8, 10.5, 10.7, 10.8, 11, 11, 11.1, 11.2, 11.3, 11.4, 11.4, 11.7, 12, 12.9, 12.9, 13.3, 13.7, 13.8, 14, 14.2, 14.5, 16, 16.3, 17.3, 17.5, 17.9, 18, 18, 20.6, 70, 65, 63, 72, 81, 83, 66, 75, 80, 75, 79, 76, 76, 69, 75, 74, 85, 86, 71, 64, 78, 80, 74, 72, 77, 81, 82, 80, 80, 80, 87, 10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 15.6, 18.2, 22.6, 19.9, 24.2, 21, 21.4, 21.3, 19.1, 22.2, 33.8, 27.4, 25.7, 24.9, 34.5, 31.7, 36.3, 38.3, 42.6, 55.4, 55.7, 58.3, 51.5, 51, 77), .Dim = c(31L, 3L), .Dimnames = list(NULL, c('Girth', 'Height', 'Volume')))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault23_12effa2ea22153b415abd808278c27fe() {
        assertEval("argv <- list(structure(list(), .Dim = 0L)); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault24_6a7c37fd02f02f5d480ad24085c00d2c() {
        assertEval("argv <- list(structure('Seed', .Dim = c(1L, 1L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault3_0187ca98dbbc490b77ca0ce667a77015() {
        assertEval("argv <- list(structure(NA, .Dim = c(1L, 1L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault4_7e6340588eef18e8e6011974c6ad6bf6() {
        assertEval("argv <- list(structure(c(0, 0, -0.51, 0, 0, 0, 0.18, -0.15, 0, 2.62, -2.77555756156289e-16, 0, 8.26162055433954e-17, 0.560000000000001, 0, 0, 0, 0, 0, 0, 1.79, 0, 0.05, 0, 0, 0, 0, 0, 0, -0.18, -1.47, 0, -5.55111512312578e-17, 0, 0, 0.23, 0, 2.206351421008e-17, -2.12, 0), .Dim = c(5L, 8L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault5_908778ccc0308160c8cc25f71d38e074() {
        assertEval("argv <- list(structure(c(NA, 0, NA, 0, NA, 0, NA, 0, NA, 0, NA, 0, NA, 0, NA, 0), .Dim = c(4L, 4L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault6_010e6c3625447ad4f63a06ac29c54eeb() {
        assertEval("argv <- list(structure(c(0, 10975969, 8779369, 10080625, 11148921, 7628644, 10732176, 6812100, 20115225, 8862529, 9180900, 20539024, 7579009, 15594601, 8208225, 5207524, 4748041, 9e+06, 667489, 15421329, 3964081, 0, 0, 1737124, 1758276, 1674436, 2244004, 4919524, 644809, 1373584, 4072324, 2220100, 1703025, 416025, 404496, 271441, 1028196, 1863225, 1067089, 2131600, 8225424, 3247204, 0, 0, 0, 41616, 339889, 42436, 933156, 458329, 5089536, 356409, 29584, 4343056, 476100, 2427364, 1022121, 855625, 558009, 81225, 2283121, 2611456, 1380625, 0, 0, 0, 0, 211600, 167281, 1290496, 558009, 4946176, 509796, 108900, 4210704, 546121, 2402500, 1121481, 1159929, 954529, 78400, 2762244, 3189796, 1907161, 0, 0, 0, 0, 0, 616225, 2387025, 727609, 4190209, 1243225, 534361, 3337929, 622521, 1814409, 1212201, 1461681, 1345600, 115600, 3218436, 4822416, 2521744, 0, 0, 0, 0, 0, 0, 577600, 2762244, 5934096, 211600, 72361, 5244100, 509796, 3111696, 1071225, 829921, 339889, 216225, 2241009, 1968409, 877969, 0, 0, 0, 0, 0, 0, 0, 2010724, 10214416, 211600, 72361, 8826841, 2125764, 6240004, 3161284, 2362369, 1218816, 1382976, 4202500, 422500, 2117025, 0, 0, 0, 0, 0, 0, 0, 0, 3900625, 1249924, 801025, 3748096, 24964, 2070721, 180625, 107584, 349281, 263169, 990025, 4276624, 1038361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8392609, 5895184, 456976, 3301489, 487204, 2866249, 4774225, 6579225, 3884841, 6922161, 15100996, 8844676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302500, 7134241, 1343281, 4831204, 2187441, 1532644, 648025, 769129, 3066001, 900601, 1334025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5198400, 744769, 2992900, 1399489, 1205604, 724201, 208849, 2832489, 2250000, 1452025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1387684, 446224, 3104644, 5062500, 6285049, 3236401, 7290000, 10439361, 8625969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1640961, 102400, 107584, 524176, 221841, 1098304, 4443664, 1338649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1338649, 2972176, 4040100, 1620529, 4397409, 10163344, 5803281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 381924, 1229881, 627264, 1022121, 5895184, 1857769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109561, 732736, 343396, 4782969, 806404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674041, 894916, 3076516, 183184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2178576, 3337929, 1560001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7327849, 1461681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4431025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(21L, 21L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault7_f423b93ccd388e47b737808bf79f2822() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault8_2542cdad988c78dc9e4038667355b627() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(4L, 4L), .Dimnames = list(NULL, NULL))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault9_0115bd9923ef7aa27763093f7a0009b2() {
        assertEval("argv <- list(structure(c(0.589872882227945+0i, 0.193623477236295+0i, 0.66266867945261+0i, 0.140441698505598+0i, -0.394596353845825+0i, 0.168331537203598+0i, 0.293129347035038+0i, -0.481237717889449+0i, 0.7985227152757+0i, -0.128496737541326+0i, -0.0231518691888815+0i, -0.892171028872675+0i, 0.158252886617681+0i, 0.418477841524233+0i, -0.0576815934568704+0i, 0.471807942431513+0i, -0.00978429568549377+0i, 0.0825499722933953+0i, 0.0943143868799564+0i, 0.872692289136496+0i, -0.632910525118973+0i, 0.283760916561723+0i, 0.545364104158516+0i, 0.398269626120626+0i, 0.25072556357658+0i), .Dim = c(5L, 5L))); .Internal(t.default(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintimes_difftime_testtimes_difftime1_445e64e340873e1d890583b87354e69b() {
        assertEval("argv <- structure(list(e1 = 2, e2 = structure(c(3.33333333333333,     683.25), units = 'mins', class = 'difftime')), .Names = c('e1',     'e2'));do.call('*.difftime', argv)");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower1_49d59726e1a184410a621309a7b8a8fc() {
        assertEval("argv <- list('show'); .Internal(tolower(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower2_e08bfa80e92b2fcb5e0102c741dd03f6() {
        assertEval("argv <- list('TRUE'); .Internal(tolower(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower3_b1b2faaf6c47b3e97fa58b7ddc86bbb1() {
        assertEval("argv <- list(c('title', 'author', 'year', 'note')); .Internal(tolower(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower4_e0ca856344333291d8c210e61162ccdd() {
        assertEval("argv <- list(c('ChangeLog', 'DESCRIPTION', 'INDEX', 'MD5', 'NAMESPACE', 'PORTING', '0aaa.R', 'agnes.q', 'clara.q', 'clusGap.R', 'coef.R', 'daisy.q', 'diana.q', 'ellipsoidhull.R', 'fanny.q', 'internal.R', 'mona.q', 'pam.q', 'plothier.q', 'plotpart.q', 'silhouette.R', 'zzz.R', 'README', 'agriculture.tab', 'animals.tab', 'chorSub.rda', 'flower.R', 'plantTraits.rda', 'pluton.tab', 'ruspini.tab', 'votes.repub.tab', 'xclara.rda', 'CITATION', 'R-cluster.mo', 'R-cluster.mo', 'R-cluster.mo', 'agnes.Rd', 'agnes.object.Rd', 'agriculture.Rd', 'animals.Rd', 'bannerplot.Rd', 'chorSub.Rd', 'clara.Rd', 'clara.object.Rd', 'clusGap.Rd', 'clusplot.default.Rd', 'clusplot.partition.Rd', 'cluster-internal.Rd', 'coef.hclust.Rd', 'daisy.Rd', 'diana.Rd', 'dissimilarity.object.Rd', 'ellipsoidhull.Rd', 'fanny.Rd', 'fanny.object.Rd', 'flower.Rd', 'lower.to.upper.tri.inds.Rd', 'mona.Rd', 'mona.object.Rd', 'pam.Rd', 'pam.object.Rd', 'partition.object.Rd', 'plantTraits.Rd', 'plot.agnes.Rd', 'plot.diana.Rd', 'plot.mona.Rd', 'plot.partition.Rd', 'pltree.Rd', 'pltree.twins.Rd', 'pluton.Rd', 'predict.ellipsoid.Rd', 'print.agnes.Rd', 'print.clara.Rd', 'print.diana.Rd', 'print.dissimilarity.Rd', 'print.fanny.Rd', 'print.mona.Rd', 'print.pam.Rd', 'ruspini.Rd', 'silhouette.Rd', 'sizeDiss.Rd', 'summary.agnes.Rd', 'summary.clara.Rd', 'summary.diana.Rd', 'summary.mona.Rd', 'summary.pam.Rd', 'twins.object.Rd', 'volume.ellipsoid.Rd', 'votes.repub.Rd', 'xclara.Rd', 'R-cluster.pot', 'R-de.po', 'R-en@quot.po', 'R-pl.po', 'update-me.sh', 'clara.c', 'cluster.h', 'daisy.f', 'dysta.f', 'fanny.c', 'ind_2.h', 'init.c', 'mona.f', 'pam.c', 'sildist.c', 'spannel.c', 'twins.c', 'agnes-ex.R', 'agnes-ex.Rout.save', 'clara-NAs.R', 'clara-NAs.Rout.save', 'clara-ex.R', 'clara.R', 'clara.Rout.save', 'clusplot-out.R', 'clusplot-out.Rout.save', 'daisy-ex.R', 'daisy-ex.Rout.save', 'diana-boots.R', 'diana-ex.R', 'diana-ex.Rout.save', 'ellipsoid-ex.R', 'ellipsoid-ex.Rout.save', 'fanny-ex.R', 'mona.R', 'mona.Rout.save', 'pam.R', 'pam.Rout.save', 'silhouette-default.R', 'silhouette-default.Rout.save', 'sweep-ex.R', '.', 'R', 'data', 'inst', 'LC_MESSAGES', 'LC_MESSAGES', 'LC_MESSAGES', 'man', 'po', 'src', 'tests')); .Internal(tolower(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower5_ce56c63a8f09ce11fc7cf1f034cabb9d() {
        assertEval("argv <- list(structure('base', .Names = 'Priority')); .Internal(tolower(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower6_6f17a87b5a1732e404bd66c1737aef8c() {
        assertEval("argv <- list(character(0)); .Internal(tolower(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower8_0b52a993e37cc2b92318b9264573537f() {
        assertEval("argv <- structure(list(x = c('NA', NA, 'BANANA')), .Names = 'x');do.call('tolower', argv)");
    }

    @Test
    public void TestrGenBuiltintoupper_testtoupper1_f69b864654824a38ed423cfd36444b84() {
        assertEval("argv <- list('UTF-8'); .Internal(toupper(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintoupper_testtoupper2_1f4285823dd82cd138853f560f9c8a6e() {
        assertEval("argv <- list(c('', '', 'remission', '', '', '', '', '', '')); .Internal(toupper(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintoupper_testtoupper3_9be0531b96c7f36fa48d1999065d9d74() {
        assertEval("argv <- list(character(0)); .Internal(toupper(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintoupper_testtoupper4_5162da4ebde0482d08855ebe19750136() {
        assertEval("argv <- list(structure(c('BasicClasses', 'Classes', 'Documentation', 'environment-class', 'GenericFunctions', 'language-class', 'LinearMethodsList-class', 'MethodDefinition-class', 'MethodWithNext-class', 'Methods', 'MethodsList-class', 'callNextMethod', 'ObjectsWithPackage-class', 'S3Part', 'S4groupGeneric', 'SClassExtension-class', 'StructureClasses', 'TraceClasses', 'as', 'callGeneric', 'canCoerce', 'cbind2', 'className', 'classRepresentation-class', 'classesToAM', 'dotsMethods', 'evalSource', 'findClass', 'findMethods', 'fixPre1.8', 'genericFunction-class', 'getClass', 'getMethod', 'getPackageName', 'hasArg', 'implicitGeneric', 'inheritedSlotNames', 'initialize-methods', 'is', 'isSealedMethod', 'LocalReferenceClasses', 'method.skeleton', 'new', 'nonStructure-class', 'promptClass', 'promptMethods', 'ReferenceClasses', 'representation', 'selectSuperClasses', 'setClass', 'setClassUnion', 'setGeneric', 'setLoadActions', 'setMethod', 'setOldClass', 'makeClassRepresentation', 'show', 'showMethods', 'signature-class', 'slot', 'envRefClass-class', 'testInheritedMethods', 'validObject', '.BasicFunsList'), .Names = c('/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/BasicClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/Classes.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/Documentation.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/EnvironmentClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/GenericFunctions.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/LanguageClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/LinearMethodsList-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/MethodDefinition-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/MethodWithNext-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/Methods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/MethodsList-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/NextMethod.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/ObjectsWithPackage-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/S3Part.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/S4groupGeneric.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/SClassExtension-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/StructureClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/TraceClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/as.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/callGeneric.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/canCoerce.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/cbind2.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/className.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/classRepresentation-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/classesToAM.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/dotsMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/evalSource.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/findClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/findMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/fixPrevious.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/genericFunction-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/getClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/getMethod.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/getPackageName.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/hasArg.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/implicitGeneric.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/inheritedSlotNames.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/initialize-methods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/is.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/isSealedMethod.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/localRefClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/method.skeleton.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/new.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/nonStructure-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/promptClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/promptMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/refClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/representation.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/selectSuperClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setClassUnion.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setGeneric.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setLoadActions.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setMethod.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setOldClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setSClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/show.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/showMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/signature-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/slot.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/stdRefClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/testInheritedMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/validObject.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/zBasicFunsList.tex'))); .Internal(toupper(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintoupper_testtoupper6_c121cd0671c5707cb2e6e2151a901505() {
        assertEval("argv <- structure(list(x = c('na', NA, 'banana')), .Names = 'x');do.call('toupper', argv)");
    }

    @Test
    public void TestrGenBuiltintrigamma_testtrigamma1_cba772bcfaa3a8133b1733a459d1e311() {
        assertEval("argv <- list(structure(c(9.16602362697115, 1.16602362697115, 3.16602362697115, 6.16602362697115, 6.16602362697115, 2.16602362697115, 8.16602362697115, 1.16602362697115, 7.16602362697115, 19.1660236269712, 2.16602362697115), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11')));trigamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintrigamma_testtrigamma2_d98a8040337197f30eba1e9255ab8962() {
        assertEval("argv <- list(structure(c(3.23454845691922, 12.2345484569192, 15.2345484569192, 6.23454845691922, 6.23454845691922, 14.2345484569192, 21.2345484569192, 23.2345484569192, 7.23454845691922, 7.23454845691922, 16.2345484569192, 8.23454845691922, 15.2345484569192, 7.23454845691922, 33.2345484569192, 54.2345484569192, 58.2345484569192, 15.2345484569192, 17.2345484569192, 17.2345484569192, 18.2345484569192, 41.2345484569192, 44.2345484569192, 47.2345484569192, 9.23454845691922, 24.2345484569192, 24.2345484569192, 29.2345484569192, 35.2345484569192, 37.2345484569192, 39.2345484569192, 4.23454845691922, 6.23454845691922, 12.2345484569192, 25.2345484569192, 46.2345484569192, 6.23454845691922, 7.23454845691922, 7.23454845691922, 10.2345484569192, 14.2345484569192, 24.2345484569192, 26.2345484569192, 33.2345484569192, 54.2345484569192, 55.2345484569192, 6.23454845691922, 6.23454845691922, 12.2345484569192, 18.2345484569192, 20.2345484569192, 9.23454845691922, 14.2345484569192, 15.2345484569192, 21.2345484569192, 48.2345484569192, 49.2345484569192, 61.2345484569192, 82.2345484569192, 3.23454845691922, 1.23454845691922, 3.23454845691922, 4.23454845691922, 6.23454845691922, 11.2345484569192, 15.2345484569192, 22.2345484569192, 37.2345484569192, 41.2345484569192, 7.23454845691922, 18.2345484569192, 68.2345484569192, 1.23454845691922, 1.23454845691922, 3.23454845691922, 8.23454845691922, 12.2345484569192, 13.2345484569192, 1.23454845691922, 1.23454845691922, 6.23454845691922, 6.23454845691922, 6.23454845691922, 12.2345484569192, 18.2345484569192, 4.23454845691922, 5.23454845691922, 23.2345484569192, 31.2345484569192, 37.2345484569192, 9.23454845691922, 1.23454845691922, 2.23454845691922, 6.23454845691922, 8.23454845691922, 17.2345484569192, 28.2345484569192, 1.23454845691922, 31.2345484569192, 11.2345484569192, 15.2345484569192, 28.2345484569192, 42.2345484569192, 70.2345484569192, 26.2345484569192, 11.2345484569192, 12.2345484569192, 21.2345484569192, 34.2345484569192, 6.23454845691922, 8.23454845691922, 1.23454845691922, 2.23454845691922, 6.23454845691922, 6.23454845691922, 6.23454845691922, 6.23454845691922, 8.23454845691922, 12.2345484569192, 16.2345484569192, 6.23454845691922, 15.2345484569192, 7.23454845691922, 7.23454845691922, 8.23454845691922, 29.2345484569192, 1.23454845691922, 6.23454845691922, 15.2345484569192, 3.23454845691922, 3.23454845691922, 4.23454845691922, 9.23454845691922, 11.2345484569192, 13.2345484569192, 2.23454845691922, 2.23454845691922, 10.2345484569192, 23.2345484569192, 4.23454845691922, 4.23454845691922, 6.23454845691922, 16.2345484569192, 19.2345484569192, 23.2345484569192, 38.2345484569192), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146')));trigamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintrigamma_testtrigamma3_e35b54aa032bd1ba44b4f9e6f1455d2f() {
        assertEval("argv <- list(c(1e+30, 1e+60, 1e+90, 1e+120, 1e+150, 1e+180, 1e+210, 1e+240, 1e+270, 1e+300));trigamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintrigamma_testtrigamma4_c7cef55147eeed5d89aa9c4ccb582272() {
        assertEval("argv <- list(c(-100, -3, -2, -1, 0, 1, 2, -99.9, -7.7, -3, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.0999999999999996, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 5.1, 77));trigamma(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintrunc_testtrunc1_3b502de0e9582f05fa2227cebe759365() {
        assertEval("argv <- list(8.5);trunc(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintrunc_testtrunc2_0662beb6fa9d5d74ea8cd9013fee2482() {
        assertEval("argv <- list(2819.50000004);trunc(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintrunc_testtrunc3_9014641495c8715f6ffcaaf05748be52() {
        assertEval("argv <- list(c(4.71622523386031, 1.10082330182195, 1.6348679328803, 1.0848926147446, 1.90544273355044, 0.359849020605907, 3.11383110354654, 0.867268502479419, 0.162947811186314, 0.450064289616421, 4.9159701296594, 4.6105394908227, 3.44404035480693, 1.26481729443185, 1.04007117450237, 2.98928162781522, 0.598357603885233, 3.89095719670877, 2.72964489413425, 2.9838975192979, 0.972001742338762, 3.45619874307886, 3.40639955131337, 1.64102643262595, 2.35728174913675, 0.473953454056755, 4.98228391283192, 4.91887083626352, 0.210240299347788, 2.26199432276189, 3.70630375458859, 3.81391524686478, 0.606464599259198, 4.40811770269647, 4.44661358138546, 2.80862170271575, 3.86814354802482, 3.88661664212123, 2.99017415847629, 2.74575827643275, 0.309161052573472, 3.80168808856979, 0.44893383863382, 4.61025935830548, 0.267928446410224, 2.24770340253599, 2.89542144862935, 0.558472302509472, 1.01390165626071, 4.68876871396787, 3.99585635983385, 0.118613908998668, 0.0555002887267619, 3.01412270753644, 1.23142387834378, 1.36282247491181, 4.64942723163404, 0.578164426842704, 2.22724793478847, 1.08748292084783, 1.14620470674708, 4.12017436814494, 0.320054858457297, 2.23438119865023, 4.76558442227542, 3.10512124677189, 1.74187473836355, 0.650008224183694, 3.97324822610244, 1.69624235597439, 4.7321886930149, 2.33042042935267, 0.96714960061945, 0.195004806155339, 0.781808936735615, 0.248751927865669, 1.19189711171202, 1.64329304476269, 4.17560710804537, 3.12169580138288, 4.66810682089999, 1.36349227512255, 0.602594048250467, 2.95277393539436, 3.86122465948574, 2.54265206633136, 4.36057312530465, 0.599795600865036, 0.397377072367817, 3.41722437064163, 0.29663014691323, 2.19461180153303, 4.06796077964827, 0.185917691560462, 2.69324880791828, 1.27729995292611, 2.07541133742779, 2.81013442203403, 0.629334823461249, 2.81195943942294));trunc(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintrunc_testtrunc4_e12db55cc85e3df7618a7599b17fba35() {
        assertEval("argv <- list(c(-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4));trunc(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltintruncDate_testtruncDate1_5da598ced0e9c421afe1d67b082e9332() {
        assertEval("argv <- structure(list(x = structure(-3620.8, class = 'Date')),     .Names = 'x');do.call('trunc.Date', argv)");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof1_d0bc211b4cb02240e0c3bdef0ab8a0e8() {
        assertEval("argv <- list(structure(c(1.23315637025077, 1.2394120713065, 1.46775472234056, 1.3131362441571, 0.834956748134462, 1.32096970624938, 1.38337762052736, 1.70911044284799, 1.23539395906175, 0.858346823253787, 1.52283660048288, 1.31313061976496, 1.12786658428867, 1.44366133143941, 1.27218165569433, 1.26731245914676, 1.42168796660342, 1.48945666726, 2.09136324227313, 1.36556393622446, 1.19497185571598, 1.3558872236906, 1.28486176009175, 0.896505382640118, 1.2920383545426, 1.43713738151143, 1.28325876023887, 1.8647069237969, 1.28069027865337, 1.3282363039678, 1.4132805261745, 0.646368078716031, 1.17057458108707, 1.35016461104197, 1.35509309393051, 0.62815321214884, 0.933778507736315, 1.38267166577057, 1.7643327299387, 0.662074713268515, 1.31638314484599, 0.127879987991043, 1.19108675802219, 1.27268759462974, 0.4383313914982, 1.4144264042562, 0.693758539302211, 1.47501143044129, 1.18104902231565, 1.31313716894023, 1.16251137109995, 1.33271580458282, 1.2645836556729, 1.27403739912758, 0.707073961081345, 1.02664693047896, NaN, 0.753985804351041, 1.38430649521587, 1.07546693634877, 1.19187230661588, 1.28069027865337, 1.31026717493666, 1.21822955912256, 1.13243112343561, 1.63256872758035, 1.02552404019857, 1.20828070506052, 1.33930727426782, 1.26731245914676, 1.38337762052736, 1.52793749920214, 1.07081398391753, 1.24912672913647, 1.44366133143941, 1.2823536700583, 1.38311795520175, 0.534347523417853, 1.25766711144813, 1.92388210662423, 1.52790220067279, 1.10639731743869, 1.88278431408355, 1.17178985993101, 1.13471940645093, 1.33429991787085, 1.59592895672966, 0.952232923176189, 2.67777307729144, 0.98546699757923, 0.534607888905458, 1.18840135978238, 2.67777307729144), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof10_7f6772a13074e8c8d3f29b1017b78546() {
        assertEval("argv <- list(c(NA, '1', NA, '2', '1', NA, NA, '1', '4', '1', NA, '4', '1', '3', NA, '4', '2', '2', NA, '4', '4', '2', '4', '4', '2', '1', '4', '4', '3', '1', '1', '4', '1', '4', NA, '1', '4', '4', '2', '2', '4', '4', '3', '4', '2', '2', '3', '3', '4', '1', '1', '1', '4', '1', '4', '4', '4', '4', NA, '4', '4', '4', NA, '1', '2', '3', '4', '3', '4', '2', '4', '4', '1', '4', '1', '4', NA, '4', '2', '1', '4', '1', '1', '1', '4', '4', '2', '4', '1', '1', '1', '4', '1', '1', '1', '4', '3', '1', '4', '3', '2', '4', '3', '1', '4', '2', '4', NA, '4', '4', '4', '2', '1', '4', '4', NA, '2', '4', '4', '1', '1', '1', '1', '4', '1', '2', '3', '2', '1', '4', '4', '4', '1', NA, '4', '2', '2', '2', '4', '4', '3', '3', '4', '2', '4', '3', '1', '1', '4', '2', '4', '3', '1', '4', '3', '4', '4', '1', '1', '4', '4', '3', '1', '1', '2', '1', '3', '4', '2', '2', '2', '4', '4', '3', '2', '1', '1', '4', '1', '1', '2', NA, '2', '3', '3', '2', '1', '1', '1', '1', '4', '4', '4', '4', '4', '4', '2', '2', '1', '4', '1', '4', '3', '4', '2', '3', '1', '3', '1', '4', '1', '4', '1', '4', '3', '3', '4', '4', '1', NA, '3', '4', '4', '4', '4', '4', '4', '3', '4', '3', '4', '2', '4', '4', '1', '2', NA, '4', '4', '4', '4', '1', '2', '1', '1', '2', '1', '4', '2', '3', '1', '4', '4', '4', '1', '2', '1', '4', '2', '1', '3', '1', '2', '2', '1', '2', '1', NA, '3', '2', '2', '4', '1', '4', '4', '2', '4', '4', '4', '2', '1', '4', '2', '4', '4', '4', '4', '4', '1', '3', '4', '3', '4', '1', NA, '4', NA, '1', '1', '1', '4', '4', '4', '4', '2', '4', '3', '2', NA, '1', '4', '4', '3', '4', '4', '4', '2', '4', '2', '1', '4', '4', NA, '4', '4', '3', '3', '4', '2', '2', '4', '1', '4', '4', '4', '3', '4', '4', '4', '3', '2', '1', '3', '1', '4', '1', '4', '2', NA, '1', '4', '4', '3', '1', '4', '1', '4', '1', '4', '4', '1', '2', '2', '1', '4', '1', '1', '4', NA, '4', NA, '4', '4', '4', '1', '4', '2', '1', '2', '2', '2', '2', '1', '1', '2', '1', '4', '2', '3', '3', '1', '3', '1', '4', '1', '3', '2', '2', '4', '1', NA, '3', '4', '2', '4', '4', '4', '4', '4', '4', '3', '4', '4', '3', '2', '1', '4', '4', '2', '4', '2', '1', '2', '1', '1', '1', '1', '4', '4', '1', '1', '4', '1', '4', '4', '4', '1', '1', NA, '3', '2', '4', '4', '4', '4', '2', '3', '3', '2', NA, '4', '2', '4', '4', '1', '1', '4', '4', '1', '1', '4', '1', '2', '2', '2', '2', '1', '4', '4', '1', '2', '2', '2', '3', '4', '4', '3', '4', '1', '1', '4', '4', NA, '4', '1', '4', '4', '4', '1', '4', '4', '1', '2', '4', '4', '4', '4', '1', '2', '4', '4', '2', '1', '4', '2', '4', '2', '2', '4', '1', '3', '3', '2', '4', '1', '4', '4', '4', '1', NA, '4', '4', '2', '4', '4', '4', '4', '4', '2', NA, '4', '2', '4', '3', '1', '4', '4', '3', '4', '2', '4', '4', '1', '2', '1', '4', '1', '3', '3', '1', '4', '4', '2', '4', '4', '4', '4', '3', '2', '3', '3', '2', NA, '3', '4', '4', '3', '3', '4', '4', '4', '1', '4', '4', '4', '4', '4', '4', '4', '2', '4', '2', '3', '4', '1', '3', '1', NA, '4', '1', '2', '2', '1', '4', '3', '3', '4', '1', '1', '3')); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof11_64192767f8f0028b10734d18443bb478() {
        assertEval("argv <- list(structure(list(base = c(11L, 11L, 6L, 8L, 66L, 27L, 12L, 52L, 23L, 10L, 52L, 33L, 18L, 42L, 87L, 50L, 18L, 111L, 18L, 20L, 12L, 9L, 17L, 28L, 55L, 9L, 10L, 47L, 76L, 38L, 19L, 10L, 19L, 24L, 31L, 14L, 11L, 67L, 41L, 7L, 22L, 13L, 46L, 36L, 38L, 7L, 36L, 11L, 151L, 22L, 41L, 32L, 56L, 24L, 16L, 22L, 25L, 13L, 12L)), .Names = 'base', row.names = c(1L, 5L, 9L, 13L, 17L, 21L, 25L, 29L, 33L, 37L, 41L, 45L, 49L, 53L, 57L, 61L, 65L, 69L, 73L, 77L, 81L, 85L, 89L, 93L, 97L, 101L, 105L, 109L, 113L, 117L, 121L, 125L, 129L, 133L, 137L, 141L, 145L, 149L, 153L, 157L, 161L, 165L, 169L, 173L, 177L, 181L, 185L, 189L, 193L, 197L, 201L, 205L, 209L, 213L, 217L, 221L, 225L, 229L, 233L))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof12_870bbb98dd49f99f2f2ca2640cc327a6() {
        assertEval("argv <- list(structure(c('Min.   : 1.000  ', '1st Qu.: 9.000  ', 'Median :18.000  ', 'Mean   :14.742  ', '3rd Qu.:20.000  ', 'Max.   :23.000  ', NA, 'Min.   :5.0000  ', '1st Qu.:5.3000  ', 'Median :6.1000  ', 'Mean   :6.0841  ', '3rd Qu.:6.6000  ', 'Max.   :7.7000  ', NA, 'Min.   :  1.000  ', '1st Qu.: 24.250  ', 'Median : 56.500  ', 'Mean   : 56.928  ', '3rd Qu.: 86.750  ', 'Max.   :117.000  ', 'NA's   :16  ', 'Min.   :  0.500  ', '1st Qu.: 11.325  ', 'Median : 23.400  ', 'Mean   : 45.603  ', '3rd Qu.: 47.550  ', 'Max.   :370.000  ', NA, 'Min.   :0.00300  ', '1st Qu.:0.04425  ', 'Median :0.11300  ', 'Mean   :0.15422  ', '3rd Qu.:0.21925  ', 'Max.   :0.81000  ', NA), .Dim = c(7L, 5L), .Dimnames = list(c('', '', '', '', '', '', ''), c('    event', '     mag', '   station', '     dist', '    accel')))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof13_7335c33e4525204b64a3a0a85b613e0d() {
        assertEval("argv <- list(c(2L, 1L, NA)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof14_8db64e42f030b013419b080865800f26() {
        assertEval("argv <- list(raw(0)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof15_bdd6177cdbb5c9172be825d9465ff461() {
        assertEval("argv <- list(c(1.1+0i, NA, 3+0i)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof16_926953e0de456d6724beeb4815a26c46() {
        assertEval("argv <- list(1e+05); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof17_e051be0967dce5983c00bdb8c68b7bcf() {
        assertEval("argv <- list(structure(c(' ', '***'), legend = '0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1', class = 'noquote')); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof18_0b21f1e0239146bb6d1e8288d35a8d74() {
        assertEval("argv <- list(structure(c(1+1i, 2+1.4142135623731i, 3+1.73205080756888i, 4+2i, 5+2.23606797749979i, 6+2.44948974278318i, 7+2.64575131106459i, 8+2.82842712474619i, 9+3i, 10+3.1622776601684i), id = character(0), class = structure('withId', package = '.GlobalEnv'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof19_51ed1aa7d0164983333e80dd91d99266() {
        assertEval("argv <- list(structure(list(x = structure(1L, .Label = '1.3', class = 'factor')), .Names = 'x', row.names = c(NA, -1L), class = 'data.frame')); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof2_4792d624ffba2c7f13198c7534d40216() {
        assertEval("argv <- list(structure(c(1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts')); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof20_c93be545522fba28e747c906a44c6d6a() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof21_bce1108061269fc3f29261f8bf4d98da() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a', .Tsp = c(1, 1, 1), class = 'ts')); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof22_a70882eb362d30353b62755788635eee() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof23_c594a24c5c94a2c5d381b0d2e83432eb() {
        assertEval("argv <- list(2.22044604925031e-16); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof24_33aa49c209e9c3fa6b782dfb67ee8ab0() {
        assertEval("argv <- list(structure(list(c0 = logical(0)), .Names = 'c0', row.names = integer(0))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof25_0ad9f467f80f97deb513d6519532b94c() {
        assertEval("argv <- list(structure(3.14159265358979, comment = 'Start with pi', class = structure('num1', package = '.GlobalEnv'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof26_0bd9eba1766a116fa7fcda8452300f97() {
        assertEval("argv <- list(structure(c(NA, 0.1945), .Names = c('1', '2'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof27_bd48a93a99e5301332a53330b31d7b55() {
        assertEval("argv <- list(structure(c(1L, 1L), .Label = 'Ctl', class = 'factor')); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof28_639791afaf02f5917923ea261485c4bb() {
        assertEval("argv <- list(c(1L, NA, 1L)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof29_07b764ba7bd9d17c14d4657658741887() {
        assertEval("argv <- list(c(NA, NA, NA)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof3_d53fd74be914f4d94f91d1f7b2385d96() {
        assertEval("argv <- list(structure(c(NA, 9, 3, 3), .Names = c('<none>', 'Hair:Eye', 'Hair:Sex', 'Eye:Sex'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof31_780cb70dab5fc3c7d034d6d2c32ff8ae() {
        assertEval("argv <- list(structure(list(Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L), B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor')), .Names = c('Y', 'B', 'V', 'N'), terms = quote(Y ~ B + V + N + V:N), row.names = 2:72)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof32_ded2c501c59bbbd85bda89dac7e0be18() {
        assertEval("argv <- list(structure(c(-3.001e+155, -1.067e+107, -1.976e+62, -9.961e+152, -2.059e+23, 1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof33_7fdda89d47d79a3f6ec5acd4c29a94a2() {
        assertEval("argv <- structure(list(x = c(1.1 + (0+0i), NA, 3 + (0+0i))),     .Names = 'x');do.call('typeof', argv)");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof34_6fe0f18625e934443586e965c139a11c() {
        assertEval("argv <- structure(list(x = c(NA_integer_, NA_integer_, NA_integer_)),     .Names = 'x');do.call('typeof', argv)");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof35_b50e3d65dd4f48d724fb60e494c9b309() {
        assertEval("argv <- structure(list(x = function(file = ifelse(onefile, 'Rplots.pdf',     'Rplot%03d.pdf'), width, height, onefile, family, title,     fonts, version, paper, encoding, bg, fg, pointsize, pagecentre,     colormodel, useDingbats, useKerning, fillOddEven, compress) {    initPSandPDFfonts()    new <- list()    if (!missing(width)) new$width <- width    if (!missing(height)) new$height <- height    if (!missing(onefile)) new$onefile <- onefile    if (!missing(title)) new$title <- title    if (!missing(fonts)) new$fonts <- fonts    if (!missing(version)) new$version <- version    if (!missing(paper)) new$paper <- paper    if (!missing(encoding)) new$encoding <- encoding    if (!missing(bg)) new$bg <- bg    if (!missing(fg)) new$fg <- fg    if (!missing(pointsize)) new$pointsize <- pointsize    if (!missing(pagecentre)) new$pagecentre <- pagecentre    if (!missing(colormodel)) new$colormodel <- colormodel    if (!missing(useDingbats)) new$useDingbats <- useDingbats    if (!missing(useKerning)) new$useKerning <- useKerning    if (!missing(fillOddEven)) new$fillOddEven <- fillOddEven    if (!missing(compress)) new$compress <- compress    old <- check.options(new, name.opt = '.PDF.Options', envir = .PSenv)    if (!missing(family) && (inherits(family, 'Type1Font') ||         inherits(family, 'CIDFont'))) {        enc <- family$encoding        if (inherits(family, 'Type1Font') && !is.null(enc) &&             enc != 'default' && (is.null(old$encoding) || old$encoding ==             'default')) old$encoding <- enc        family <- family$metrics    }    if (is.null(old$encoding) || old$encoding == 'default') old$encoding <- guessEncoding()    if (!missing(family)) {        if (length(family) == 4L) {            family <- c(family, 'Symbol.afm')        } else if (length(family) == 5L) {        } else if (length(family) == 1L) {            pf <- pdfFonts(family)[[1L]]            if (is.null(pf)) stop(gettextf('unknown family '%s'',                 family), domain = NA)            matchFont(pf, old$encoding)        } else stop('invalid 'family' argument')        old$family <- family    }    version <- old$version    versions <- c('1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7',         '2.0')    if (version %in% versions) version <- as.integer(strsplit(version,         '[.]')[[1L]]) else stop('invalid PDF version')    onefile <- old$onefile    if (!checkIntFormat(file)) stop(gettextf('invalid 'file' argument '%s'',         file), domain = NA)    .External(C_PDF, file, old$paper, old$family, old$encoding,         old$bg, old$fg, old$width, old$height, old$pointsize,         onefile, old$pagecentre, old$title, old$fonts, version[1L],         version[2L], old$colormodel, old$useDingbats, old$useKerning,         old$fillOddEven, old$compress)    invisible()}), .Names = 'x');do.call('typeof', argv)");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof4_ae34edc347bf43e32930fd67214bce28() {
        assertEval("argv <- list(structure(function (x, y = NULL) standardGeneric('tcrossprod'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof5_77d489413ad84767c5ba7bf17b4acb61() {
        assertEval("argv <- list(structure(c('Min.   :    0.060  ', '1st Qu.:    0.320  ', 'Median :    0.630  ', 'Mean   :  909.592  ', '3rd Qu.:    0.905  ', 'Max.   :10000.000  '), .Dim = c(6L, 1L), .Dimnames = list(c('', '', '', '', '', ''), '      x'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof6_391297bbda40c5a9b22d27953a177b14() {
        assertEval("argv <- list(structure(c(-0.0529307911108286, -0.200175675120066), .Names = c('(Intercept)', 'xTRUE'))); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof7_fbb34ca066fcfab01904b3c51cc738af() {
        assertEval("argv <- list(complex(0)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof8_ab47348c6c370e8194f1f8d43832ba61() {
        assertEval("argv <- list(structure(list(is.array = FALSE, is.atomic = FALSE, is.call = FALSE, is.character = FALSE, is.complex = FALSE, is.data.frame = FALSE, is.double = FALSE, is.environment = FALSE, is.expression = FALSE, is.factor = FALSE, is.finite = NA, is.function = FALSE, is.infinite = NA, is.integer = FALSE, is.language = FALSE, is.list = TRUE, is.logical = FALSE, is.matrix = FALSE, is.na = structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('coefficients', 'residuals', 'effects', 'rank', 'fitted.values', 'assign', 'qr', 'df.residual', 'xlevels', 'call', 'terms', 'model')), is.name = FALSE, is.nan = NA, is.null = FALSE, is.numeric = FALSE, is.numeric_version = FALSE, is.object = TRUE, is.ordered = FALSE, is.package_version = FALSE, is.pairlist = FALSE, is.primitive = FALSE, is.qr = FALSE, is.raw = FALSE, is.recursive = TRUE, is.symbol = FALSE, is.table = FALSE, is.vector = FALSE), .Names = c('is.array', 'is.atomic', 'is.call', 'is.character', 'is.complex', 'is.data.frame', 'is.double', 'is.environment', 'is.expression', 'is.factor', 'is.finite', 'is.function', 'is.infinite', 'is.integer', 'is.language', 'is.list', 'is.logical', 'is.matrix', 'is.na', 'is.name', 'is.nan', 'is.null', 'is.numeric', 'is.numeric_version', 'is.object', 'is.ordered', 'is.package_version', 'is.pairlist', 'is.primitive', 'is.qr', 'is.raw', 'is.recursive', 'is.symbol', 'is.table', 'is.vector'), class = 'isList')); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof9_4cef708046ddaddc4385528c922e1606() {
        assertEval("argv <- list(c(-21.222245139688+176.377752294836i, -21.222245139688-176.377752294836i, 61.0965873274467+76.779430575699i, 61.0965873274467-76.779430575699i, -11.7486843755171+0i)); .Internal(typeof(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass1_4d46dc74b60db0a18b25777dd0fe192a() {
        assertEval("argv <- list(c(-1, -1));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass10_c5df816c86ac2bfb16807d65bb4588fb() {
        assertEval("argv <- list(structure(list(GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), row.names = 1947:1962));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass11_050a05a07604c532e4d9a5f55803796e() {
        assertEval("argv <- list(structure(list(y = c(0.219628047744843, 0.360454661130887, -1.14267533343616, 0.772374419482067, 0.681741904304867, 0.171869265068012, 2.08409180391906, 0.367547276775469), x1 = c(1L, 2L, 5L, 6L, 7L, 8L, 9L, 10L), x2 = c(1L, 2L, 5L, 6L, 7L, 8L, 9L, 10L), `(weights)` = c(0, 1, 1, 1, 1, 1, 1, 1)), .Names = c('y', 'x1', 'x2', '(weights)'), terms = quote(y ~ x1 + x2), row.names = c('a', 'b', 'e', 'f', 'g', 'h', 'i', 'j'), na.action = structure(3:4, .Names = c('c', 'd'), class = 'omit')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass12_764a8bc86f3cdcdee4acf3f202b3562a() {
        assertEval("argv <- list(structure(list(`log(x)` = c(0, 0.693147180559945, 1.09861228866811, 1.38629436111989, 1.6094379124341, 1.79175946922805, 1.94591014905531, 2.07944154167984, 2.19722457733622, 2.30258509299405, 2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809), `log(z)` = c(2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809, 4.61512051684126, 4.62497281328427, 4.63472898822964, 4.64439089914137, 4.65396035015752, 4.66343909411207, 4.67282883446191, 4.68213122712422, 4.69134788222914, 4.70048036579242)), .Names = c('log(x)', 'log(z)'), row.names = c(NA, 100L), terms = quote(~log(x) + log(z))));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass13_c9a078a8a83eb28341f971b032bb7914() {
        assertEval("argv <- list(structure(list(Df = c(NA, 0L), Deviance = c(NA, 0), `Resid. Df` = c(10L, 10L), `Resid. Dev` = c(2.74035772634541, 2.74035772634541)), .Names = c('Df', 'Deviance', 'Resid. Df', 'Resid. Dev'), row.names = c('NULL', 'x'), heading = 'Analysis of Deviance Table\\n\\nModel: gaussian, link: identity\\n\\nResponse: y\\n\\nTerms added sequentially (first to last)\\n\\n'));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass14_690f6fad5e4b28126086c38091f955a6() {
        assertEval("argv <- list(list(structure(list(title = 'foreign: Read Data Stored by Minitab, S, SAS, SPSS, Stata, Systat, dBase,\\n...', author = structure(list(structure(list(given = 'R Core Team', family = NULL, role = c('aut', 'cph', 'cre'), email = 'R-core@R-project.org', comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment'))), class = 'person'), year = '2013', note = 'R package version 0.8-53', url = 'http://CRAN.R-project.org/package=foreign'), .Names = c('title', 'author', 'year', 'note', 'url'), bibtype = 'Manual', textVersion = 'R Core Team (2013). foreign: Read Data Stored by Minitab, S, SAS, SPSS, Stata, Systat, dBase,\\n.... R package version 0.8-53. http://CRAN.R-project.org/package=foreign', header = 'To cite package ‘foreign’ in publications use:')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass15_9b7313f2691bc27403426ccc7e72eccd() {
        assertEval("argv <- list(structure(c(8.79236, 8.79137, 8.81486, 8.81301, 8.90751, 8.93673, 8.96161, 8.96044, 9.00868, 9.03049, 9.06906, 9.05871, 9.10698, 9.12685, 9.17096, 9.18665, 9.23823, 9.26487, 9.28436, 9.31378, 9.35025, 9.35835, 9.39767, 9.4215, 9.44223, 9.48721, 9.52374, 9.5398, 9.58123, 9.60048, 9.64496, 9.6439, 9.69405, 9.69958, 9.68683, 9.71774, 9.74924, 9.77536, 9.79424), .Tsp = c(1962.25, 1971.75, 4)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass16_debb2b9281a6f014a5462967bcf521cc() {
        assertEval("argv <- list(structure(list(structure(9L, members = 1L, height = 0, label = 9L, leaf = TRUE, value = 2L), structure(list(structure(10L, label = 10L, members = 1L, height = 0, leaf = TRUE, value = 1L), structure(1L, label = 1L, members = 1L, height = 0, leaf = TRUE, value = 10L)), members = 2L, midpoint = 0.5, height = 0.114813676452255, value = 5.5)), members = 3L, midpoint = 0.75, height = 0.241190881793568, value = 3.75));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass17_dfbd97634541071e40ba35fe3cf4d732() {
        assertEval("argv <- list(c(-1.6, -0.9));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass18_f9b40f1672c6fa5a9004c5615e941efb() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/base/R/base', '/home/lzhao/hg/r-instrumented/library/base/R/base'), frow = 5852:5853, lrow = c(5852L, 5854L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass19_73436a7059ef60fbf05daf2f89349a67() {
        assertEval("argv <- list(structure(list(b = structure(c(3L, 1L, 2L), .Label = c('A', 'B', 'C'), class = 'factor'), a = structure(c(1386423981.90268, 1386403981.90268, 1386413981.90268), class = c('POSIXct', 'POSIXt'))), .Names = c('b', 'a'), row.names = c(3L, 1L, 2L)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass2_7c7ca0ca3d8df49ebef4cedfb1f43f49() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), terms = quote(Employed ~ GNP.deflator + GNP + Unemployed +     Armed.Forces + Population + Year), row.names = 1947:1962));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass20_e774e5fad26496ce8cd0f66cd97700b1() {
        assertEval("argv <- list(c(-2.20207097779183e-13, -2.19098062290287e-13, -2.17989026801391e-13, -2.16879991312495e-13, -2.15770955823599e-13, -2.14661920334703e-13, -2.13552884845807e-13, -2.12443849356911e-13, -2.11334813868015e-13, -2.10225778379119e-13, -2.09116742890223e-13, -2.08007707401327e-13, -2.06898671912432e-13, -2.05789636423536e-13, -2.0468060093464e-13, -2.03571565445744e-13, -2.02462529956848e-13, -2.01353494467952e-13, -2.00244458979056e-13, -1.9913542349016e-13, -1.98026388001264e-13, -1.96917352512368e-13, -1.95808317023472e-13, -1.94699281534576e-13, -1.93590246045681e-13, -1.92481210556785e-13, -1.91372175067889e-13, -1.90263139578993e-13, -1.89154104090097e-13, -1.88045068601201e-13, -1.86936033112305e-13, -1.85826997623409e-13, -1.84717962134513e-13, -1.83608926645617e-13, -1.82499891156721e-13, -1.81390855667826e-13, -1.8028182017893e-13, -1.79172784690034e-13, -1.78063749201138e-13, -1.76954713712242e-13, -1.75845678223346e-13, -1.7473664273445e-13, -1.73627607245554e-13, -1.72518571756658e-13, -1.71409536267762e-13, -1.70300500778866e-13, -1.6919146528997e-13, -1.68082429801075e-13, -1.66973394312179e-13, -1.65864358823283e-13, -1.64755323334387e-13, -1.63646287845491e-13, -1.62537252356595e-13, -1.61428216867699e-13, -1.60319181378803e-13, -1.59210145889907e-13, -1.58101110401011e-13, -1.56992074912115e-13, -1.5588303942322e-13, -1.54774003934324e-13, -1.53664968445428e-13, -1.52555932956532e-13, -1.51446897467636e-13, -1.5033786197874e-13, -1.49228826489844e-13, -1.48119791000948e-13, -1.47010755512052e-13, -1.45901720023156e-13, -1.4479268453426e-13, -1.43683649045365e-13, -1.42574613556469e-13, -1.41465578067573e-13, -1.40356542578677e-13, -1.39247507089781e-13, -1.38138471600885e-13, -1.37029436111989e-13, -1.35920400623093e-13, -1.34811365134197e-13, -1.33702329645301e-13, -1.32593294156405e-13, -1.3148425866751e-13, -1.30375223178614e-13, -1.29266187689718e-13, -1.28157152200822e-13, -1.27048116711926e-13, -1.2593908122303e-13, -1.24830045734134e-13, -1.23721010245238e-13, -1.22611974756342e-13, -1.21502939267446e-13, -1.2039390377855e-13, -1.19284868289654e-13, -1.18175832800759e-13, -1.17066797311863e-13, -1.15957761822967e-13, -1.14848726334071e-13, -1.13739690845175e-13, -1.12630655356279e-13, -1.11521619867383e-13, -1.10412584378487e-13, -1.09303548889591e-13, -1.08194513400695e-13, -1.07085477911799e-13, -1.05976442422904e-13, -1.04867406934008e-13, -1.03758371445112e-13, -1.02649335956216e-13, -1.0154030046732e-13, -1.00431264978424e-13, -9.9322229489528e-14, -9.82131940006321e-14, -9.71041585117362e-14, -9.59951230228403e-14, -9.48860875339444e-14, -9.37770520450484e-14, -9.26680165561525e-14, -9.15589810672566e-14, -9.04499455783607e-14, -8.93409100894648e-14, -8.82318746005689e-14, -8.7122839111673e-14, -8.60138036227771e-14, -8.49047681338812e-14, -8.37957326449853e-14, -8.26866971560894e-14, -8.15776616671935e-14, -8.04686261782975e-14, -7.93595906894016e-14, -7.82505552005057e-14, -7.71415197116098e-14, -7.60324842227139e-14, -7.49234487338179e-14, -7.3814413244922e-14, -7.27053777560261e-14, -7.15963422671302e-14, -7.04873067782343e-14, -6.93782712893384e-14, -6.82692358004425e-14, -6.71602003115466e-14, -6.60511648226507e-14, -6.49421293337547e-14, -6.38330938448588e-14, -6.27240583559629e-14, -6.1615022867067e-14, -6.05059873781711e-14, -5.93969518892752e-14, -5.82879164003793e-14, -5.71788809114834e-14, -5.60698454225874e-14, -5.49608099336915e-14, -5.38517744447956e-14, -5.27427389558997e-14, -5.16337034670038e-14, -5.05246679781079e-14, -4.9415632489212e-14, -4.83065970003161e-14, -4.71975615114202e-14, -4.60885260225244e-14, -4.49794905336287e-14, -4.38704550447331e-14, -4.27614195558379e-14, -4.16523840669435e-14, -4.05433485780505e-14, -3.94343130891604e-14, -3.83252776002761e-14, -3.72162421114035e-14, -3.61072066225542e-14, -3.49981711337514e-14, -3.38891356450417e-14, -3.27801001565183e-14, -3.16710646683675e-14, -3.05620291809617e-14, -2.9452993695046e-14, -2.83439582121106e-14, -2.72349227351356e-14, -2.61258872700815e-14, -2.50168518288693e-14, -2.39078164353409e-14, -2.27987811371798e-14, -2.16897460297536e-14, -2.05807113037972e-14, -1.94716773407802e-14, -1.83626449036421e-14, -1.72536155182618e-14, -1.61445922363971e-14, -1.50355811615637e-14, -1.39265945007928e-14, -1.28176566681469e-14, -1.1708816491751e-14, -1.0600171627855e-14, -9.49191738895913e-15));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass21_dd080544114669b1ebe77c2668e54848() {
        assertEval("argv <- list(structure(c(325, 285, 706, 885), .Dim = c(1L, 4L), row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(Class = c('1st', '2nd', '3rd', 'Crew')), .Names = 'Class')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass22_80171dc01732bec268e5c94dac267bb7() {
        assertEval("argv <- list(c(10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 1e+05, 110000, 120000, 130000, 140000, 150000, 160000, 170000, 180000, 190000, 2e+05, 210000, 220000, 230000, 240000, 250000, 260000, 270000, 280000, 290000, 3e+05, 310000, 320000, 330000, 340000, 350000, 360000, 370000, 380000, 390000, 4e+05, 410000, 420000, 430000, 440000, 450000, 460000, 470000, 480000, 490000, 5e+05, 510000, 520000, 530000, 540000, 550000, 560000, 570000, 580000, 590000, 6e+05, 610000, 620000, 630000, 640000, 650000, 660000, 670000, 680000, 690000, 7e+05, 710000, 720000, 730000, 740000, 750000, 760000, 770000, 780000, 790000, 8e+05, 810000, 820000, 830000, 840000, 850000, 860000, 870000, 880000, 890000, 9e+05, 910000, 920000, 930000, 940000, 950000, 960000, 970000, 980000, 990000, 1e+06));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass23_e355f17cff3f1df163857548d5ca9995() {
        assertEval("argv <- list(quote(y ~ a + b:c + d + e + e:d));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass24_ea619d66e008a10dd6b0cc85372e61a7() {
        assertEval("argv <- list(structure(c('Min.   :14.00  ', '1st Qu.:26.00  ', 'Median :29.50  ', 'Mean   :36.39  ', '3rd Qu.:49.25  ', 'Max.   :70.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool'))));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass25_2daae08beb325301e01b1e9ec5acfc78() {
        assertEval("argv <- list(structure(list(srcfile = '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/negbin.R', frow = 135L, lrow = 137L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass26_fb09ecfada4d63ab789ff35a5dffdfbc() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass27_2f415e16e81b782e86d57c91bc4c7a99() {
        assertEval("argv <- list(list(structure(list(label = 'FALSE', x = structure(0, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = c('left', 'centre'), hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'GRID.text.106', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc'))));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass28_53c3bb212f40e80cc281362cb669f11e() {
        assertEval("argv <- list(structure(c('0', 'list', 'list'), .Names = c('Length', 'Class', 'Mode')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass29_1260690d2a61b4028298f4e77a61db8a() {
        assertEval("argv <- list(structure(list(surname = structure('R Core', class = 'AsIs'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 7L));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass3_82a3969871acb0e54b87f1408f59809d() {
        assertEval("argv <- list(structure(list(x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)), .Names = 'x', row.names = c(NA, 10L)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass31_77b7f7e76b159e14d46c842fa5becd87() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = c(NA, -10L), terms = quote(~0)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass32_6add8fd2ad31c7357525c0421e3abc15() {
        assertEval("argv <- list(quote(breaks ~ (wool + tension)^2));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass33_04d15faf34540d3b15ff9330615e731f() {
        assertEval("argv <- list(structure(c(1L, 2L, 1L), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = '')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass34_a14c27890263e329a9068f79ad678a89() {
        assertEval("argv <- list(structure(list(`cbind(A, B, C, D)` = structure(c(0.696706709347165, 0.362357754476673, -0.0291995223012888, 0.696706709347165, 0.696706709347165, -0.0291995223012888, 0.696706709347165, -0.0291995223012888, 0.362357754476673, 0.696706709347165, -0.0291995223012888, 0.362357754476673, -0.416146836547142, 0.362357754476673, 0.696706709347165, 0.696706709347165, 0.362357754476673, -0.416146836547142, -0.0291995223012888, -0.416146836547142, 0.696706709347165, -0.416146836547142, 0.362357754476673, -0.0291995223012888, 0.717356090899523, 0.932039085967226, 0.999573603041505, 0.717356090899523, 0.717356090899523, 0.999573603041505, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.909297426825682, 0.932039085967226, 0.717356090899523, 0.717356090899523, 0.932039085967226, 0.909297426825682, 0.999573603041505, 0.909297426825682, 0.717356090899523, 0.909297426825682, 0.932039085967226, 0.999573603041505, -0.0291995223012888, -0.737393715541246, -0.998294775794753, -0.0291995223012888, -0.0291995223012888, -0.998294775794753, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.653643620863612, -0.737393715541246, -0.0291995223012888, -0.0291995223012888, -0.737393715541246, -0.653643620863612, -0.998294775794753, -0.653643620863612, -0.0291995223012888, -0.653643620863612, -0.737393715541246, -0.998294775794753, 0.999573603041505, 0.67546318055115, -0.0583741434275801, 0.999573603041505, 0.999573603041505, -0.0583741434275801, 0.999573603041505, -0.0583741434275801, 0.67546318055115, 0.999573603041505, -0.0583741434275801, 0.67546318055115, -0.756802495307928, 0.67546318055115, 0.999573603041505, 0.999573603041505, 0.67546318055115, -0.756802495307928, -0.0583741434275801, -0.756802495307928, 0.999573603041505, -0.756802495307928, 0.67546318055115, -0.0583741434275801), .Dim = c(24L, 4L), .Dimnames = list(NULL, c('A', 'B', 'C', 'D'))), groups = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor')), .Names = c('cbind(A, B, C, D)', 'groups'), terms = quote(cbind(A, B, C, D) ~ groups), row.names = c(NA, 24L)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass35_9e6cf7a568e6e9123ea5470c7bf22044() {
        assertEval("argv <- list(structure(list(group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = 'group', row.names = 1:2, terms = quote(~group)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass36_4b5aea621c2da6c20db6339a2a8b2a33() {
        assertEval("argv <- list(structure(c(2671, 6.026e+77, 3.161e+152, 3.501e+299, 2.409e+227, 1.529e+302), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass4_19ad21dba530b902071f33b093710517() {
        assertEval("argv <- list(structure(list(X1.10 = 1:10, z = structure(list(x = 1:10, yyy = 11:20), .Names = c('x', 'yyy'), row.names = c(NA, -10L), class = 'data.frame')), .Names = c('X1.10', 'z'), row.names = c(NA, -10L)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass5_23f1e5fa8f77173dbf02485b5fc6ec43() {
        assertEval("argv <- list(structure(list(Df = c(1, 1, 1, NA, 1), `Sum of Sq` = c(0.109090049888117, 0.246974722154086, 2.97247824113524, NA, 25.9509113775335), RSS = c(47.9727294003871, 48.1106140726531, 50.8361175916342, 47.863639350499, 73.8145507280325), AIC = c(24.9738836085411, 25.0111950072736, 25.7275503692601, 26.9442879283302, 30.5758847476115)), .Names = c('Df', 'Sum of Sq', 'RSS', 'AIC'), row.names = c('- x3', '- x4', '- x2', '<none>', '- x1')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass6_9344162405436c5cd2aff424385a12d8() {
        assertEval("argv <- list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 7L));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass7_75dd2c4267303e373f84a13afa3a0089() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), row.names = c('1', '2', '3')));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass8_e3a29c8e4b4f13242dfda5f928d7cef8() {
        assertEval("argv <- list(structure(list(`cbind(w = weight, w2 = weight^2)` = structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), terms = quote(cbind(w = weight, w2 = weight^2) ~ group), row.names = c(NA, 20L)));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass9_297fed0824a1d9b4e506ecc094e489c8() {
        assertEval("argv <- list(structure(c('Min.   : 1.00  ', '1st Qu.: 3.25  ', 'Median : 5.50  ', 'Mean   : 5.50  ', '3rd Qu.: 7.75  ', 'Max.   :10.00  ', 'Min.   : 1.00    Min.   :11.00  ', '1st Qu.: 3.25    1st Qu.:13.25  ', 'Median : 5.50    Median :15.50  ', 'Mean   : 5.50    Mean   :15.50  ', '3rd Qu.: 7.75    3rd Qu.:17.75  ', 'Max.   :10.00    Max.   :20.00  '), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    X1.10', '      z.x             z.yyy     '))));unclass(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinunique_testunique1_91c13bc436f48956d378ed0fa6c34219() {
        assertEval("argv <- list(character(0), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique10_ef111fccb616ec71870922f6bfe58d9c() {
        assertEval("argv <- list(c(1L, 2L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 2L), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique11_0f0afad996049368a67f37536ded7d8b() {
        assertEval("argv <- list(structure(c(20.65, NA, NA, 40.25, 61.9, 55.27, 58.13, 54.04, 21.15, 18.32, NA, 65.84, 58.77, 53.99, 63.37, 64.81, 47.11, 9.65, 67.1, 48.83, 57.92, 69.5, 73.95, 5.46, 49.92, 54.21, 61.38, 56.66, 60.14, 56.68, NA, 53.13, 39.7, 74.83, 59.73, NA, 67.06, 67.99, 60.6, 4.63, 71.09, 43.4, 21.9, 61.45, 77.98, 36.67, 69.95, 55.26, 63.24, NA), .Names = c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming')), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique12_8612fb1cced87a07f667c14877b4ca0e() {
        assertEval("argv <- list(c(1.5, 1.5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique13_466ce4857e42db108185182d4b376855() {
        assertEval("argv <- list(list(NULL, NULL, NULL, NULL, NULL), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique14_d281c16643388c586de96818115fa5df() {
        assertEval("argv <- list(c(9.18429112061858e-05, 0.0238094009226188, 0.0498038685764186), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique15_08dac8e6c97aa3b0947c6cefa7d84585() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), contrasts = structure(c(-0.666666666666667, 0.333333333333333, 0.333333333333333, -0.333333333333333, -0.333333333333333, 0.666666666666667), .Dim = c(3L, 2L), .Dimnames = list(c('placebo', 'drug', 'drug+'), c('drug', 'encourage'))), .Label = c('placebo', 'drug', 'drug+'), class = 'factor'), FALSE, FALSE, 4L); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique16_65c5ed167a6dcf5f992fdb9b692b80ef() {
        assertEval("argv <- list(cnternal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique17_e99720ca87d3f995d025ceff78dd7ba8() {
        assertEval("argv <- list(c('2.21', '7.6', '18.19', '19.78', '20.23', '27.01', '28.06', '29.28', '32.79', '37.06', '39.72', '41.26', '41.76', '42.5', '42.82', '43.59', '45.29', '47.09', '47.12', '47.68', '48.52', '48.93', '49.26', '49.45', '49.58', '49.69', '51.01', '51.18', '52.24', '52.39', '55.06', '55.25', '55.76', '57.02', '57.21', '57.71', '58.33', '58.84', '59.63', '59.83', '61.54', '62.16', '62.26', '65.35', '72.03', '75.37', '78.22', NA), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique18_eb2d891bdbdeeb0b2c961e4d3154ecc9() {
        assertEval("argv <- list(c(3, 4, 5, 11, 10, 9, 8, 8, 9, 10, 11, 12, 13), FALSE, TRUE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique19_934f306c157abdb78159f17c0d3b744a() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4), .Tsp = c(1945, 1974.75, 4), class = 'ts'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique2_ac2895891ed0fff68bd07e7be2d6c109() {
        assertEval("argv <- list(c('a', 'b', 'c', 'c', 'b', 'a', 'NA', 'd', 'd', NA), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique20_f7916729a7c0e5d627513fdfa82ef90f() {
        assertEval("argv <- list(c(4L, 6L, 9L, 15L, NA), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique21_683edeadccde1e6d4f1c955b6902f18a() {
        assertEval("argv <- list(structure(list(A = c(3L, 5L), B = c(3L, 5L), C = c(3L, 5L), D = c(3L, 5L)), .Names = c('A', 'B', 'C', 'D')), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique22_d91900f7e3cba12b7ee8dcd6f4f61156() {
        assertEval("argv <- list(c(25, 50, 100, 250, 500, 1e+05), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique23_0bff3075a98ff3fd606aaca877c2c90d() {
        assertEval("argv <- list(c(1, 2, NA, 2), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique24_eebb204d276475a1fc3e17ee62af5475() {
        assertEval("argv <- list(list('numeric_version', 'numeric_version'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique25_5b14aff6b14152235430c9bd3799c5c8() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique26_1a7b4529c09610720ed8391bef23c2e9() {
        assertEval("argv <- list(list('Math2', 'round', 'signif'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique27_6831b4b1e51babf88414d36f56dc11cc() {
        assertEval("argv <- list(list(structure('Math2', package = 'methods'), 'round', 'signif'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique28_9173b02bb5078f911c317bf4112c74a2() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L), .Names = c('vector', 'data.frameRowLabels', 'SuperClassMethod', 'atomicVector')), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique29_bcdd1cd86c9694fb6cb5506781ab7ee6() {
        assertEval("argv <- list(NULL, FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique3_75fcd051181688ff9210cfb256ba4147() {
        assertEval("argv <- list(c(1, 2, 4, 6, 8, 9, 11, 13, 14, 16, 3, 5, 7, 9, 10, 12, 14, 15, 17, 17), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique30_a589ab3b1d20af19b878b86ff693805f() {
        assertEval("argv <- list(c(TRUE, FALSE, TRUE, TRUE), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique31_1ab159c6f2860b2ec00695eddfd6cd4a() {
        assertEval("argv <- list(c(2L, 1L, NA), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique33_dc7982f7d8ad764b1b73a06b45fbd49a() {
        assertEval("argv <- structure(list(x = structure(c(15, 37, 30, 18, 8, 20,     42.7, 29.3), .Dim = c(4L, 2L), .Dimnames = structure(list(Evaluation = c('very good',     'good', 'bad', 'very bad'), Location = c('city centre', 'suburbs')),     .Names = c('Evaluation', 'Location')))), .Names = 'x');do.call('unique', argv)");
    }

    @Test
    public void TestrGenBuiltinunique_testunique4_10eb84e0d2dcb2035b9f0336a68e2238() {
        assertEval("argv <- list(list(c(9L, 9L), c(9L, 9L), c(9L, 9L), c(9L, 9L), c(9L, 9L), c(9L, 9L)), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique5_4b7c7b382e93d7d0e03973cbe0edfb30() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), FALSE, FALSE, 5L); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique6_27cc55187d9a9bad2a23663050d3a2c0() {
        assertEval("argv <- list(c('colors', 'colours'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique7_082eba594b16036fba4b798f0c39c014() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique8_b1bb75a1b9d1ac957e1cefc57122311c() {
        assertEval("argv <- list(c(1, 258, 516, 774, 1032, 1290, 1548, 1806, 2064, 2322, 2580, 2838, 3096, 3354, 3612, 3870, 4128, 4386, 4644, 4902, 5160, 1, 259, 517, 775, 1033, 1291, 1549, 1807, 2065, 2323, 2581, 2839, 3097, 3355, 3613, 3871, 4129, 4387, 4645, 4903, 5160), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunique_testunique9_687732fcbebb2f8bd30a841a31f4d5a4() {
        assertEval("argv <- list(list(FALSE), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
    }

    @Test
    public void TestrGenBuiltinunitsassign__testunitsassign_1_2c87fe903851db3f18f0b22fb1584518() {
        assertEval("argv <- structure(list(x = structure(500, units = 'secs', class = 'difftime',     .Names = 'a'), value = 'mins'), .Names = c('x', 'value'));do.call('units<-', argv)");
    }

    @Test
    public void TestrGenBuiltinunitsassign_difftime_testunitsassign_difftime1_89ecf98c73b6274d721260d35b2439ea() {
        assertEval("argv <- structure(list(x = structure(500, units = 'secs', class = 'difftime',     .Names = 'a'), value = 'mins'), .Names = c('x', 'value'));do.call('units<-.difftime', argv)");
    }

    @Test
    public void TestrGenBuiltinunlink_testunlink1_5ead42fd735cfdc73231e3241d3171cb() {
        assertEval("argv <- list('/tmp/RtmptPgrXI/Pkgs', TRUE, FALSE); .Internal(unlink(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlink_testunlink2_d0c60d3877e7fcf81d9cd4025cd65eb7() {
        assertEval("argv <- list(character(0), FALSE, FALSE); .Internal(unlink(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlink_testunlink3_9749c93d8450efa94a884a7afc15da08() {
        assertEval("argv <- list('/home/lzhao/tmp/Rtmphu0Cms/file74e1676db2e7', FALSE, FALSE); .Internal(unlink(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlink_testunlink5_230f648ba6f937741a2d84efc174c2a5() {
        assertEval("argv <- structure(list(x = '/tmp/RtmpHjOdmd/file7ac7792619bc'),     .Names = 'x');do.call('unlink', argv)");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist1_462a8b5b48a836fbabdf797000939a79() {
        assertEval("argv <- list(list('yaxp'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist10_d408ae7f928eb107b40a12dfa3a841f6() {
        assertEval("argv <- list(structure('     \\'Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)\\')\\n', Rd_tag = 'RCODE'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist11_8d14d2b710fe2eb57218a1ee28e220fa() {
        assertEval("argv <- list(structure(list(`1 sec` = 345600, `2 secs` = 172800, `5 secs` = 69120, `10 secs` = 34560, `15 secs` = 23040, `30 secs` = 11520, `1 min` = 5760, `2 mins` = 2880, `5 mins` = 1152, `10 mins` = 576, `15 mins` = 384, `30 mins` = 192, `1 hour` = 96, `3 hours` = 32, `6 hours` = 16, `12 hours` = 8, `1 DSTday` = 4, `2 DSTdays` = 2, `1 week` = 0.571428571428571, halfmonth = 0.262833675564682, `1 month` = 0.131416837782341, `3 months` = 0.0438056125941136, `6 months` = 0.0219028062970568, `1 year` = 0.0109514031485284,     `2 years` = 0.0054757015742642, `5 years` = 0.00219028062970568, `10 years` = 0.00109514031485284, `20 years` = 0.00054757015742642, `50 years` = 0.000219028062970568, `100 years` = 0.000109514031485284, `200 years` = 5.4757015742642e-05, `500 years` = 2.19028062970568e-05, `1000 years` = 1.09514031485284e-05), .Names = c('1 sec', '2 secs', '5 secs', '10 secs', '15 secs', '30 secs', '1 min', '2 mins', '5 mins', '10 mins', '15 mins', '30 mins', '1 hour', '3 hours', '6 hours', '12 hours', '1 DSTday', '2 DSTdays', '1 week', 'halfmonth', '1 month', '3 months', '6 months', '1 year', '2 years', '5 years', '10 years', '20 years', '50 years', '100 years', '200 years', '500 years', '1000 years')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist12_85d06985c85e64784174987e13a99f4a() {
        assertEval("argv <- list(structure(list(vector = TRUE, atomicVector = TRUE, index = TRUE, numIndex = TRUE, numLike = TRUE, number = TRUE, replValue = TRUE), .Names = c('vector', 'atomicVector', 'index', 'numIndex', 'numLike', 'number', 'replValue')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist13_9d6d7ff50cb7c1aa8ff96b10b64cd554() {
        assertEval("argv <- list(structure(list(a = 6:10), .Names = 'a', row.names = 6:10), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist14_e8fc45595bcdcf7f18877ce66be8cb5d() {
        assertEval("argv <- list(structure(list(`2005` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2006` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2007` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2008` = structure(c(31L, 29L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2009` = structure(1L, .Dim = 1L, .Dimnames = structure(list('01'), .Names = ''), class = 'table')), .Names = c('2005', '2006', '2007', '2008', '2009')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist15_e68e9d14482d9697d63ad9e689108814() {
        assertEval("argv <- list(list(structure(list(structure(c(1395082040.29392, 1395082040.29392, 1395082040.29392, 1395082040.29392, 1395082040.29392), class = c('AsIs', 'POSIXct', 'POSIXt'))), row.names = c(NA, -5L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist16_3518b37ddf6d7bb6cbec438ac99b48b0() {
        assertEval("argv <- list(structure('print(.leap.seconds, tz = \\'PST8PDT\\')  # and in Seattle's\\n', Rd_tag = 'RCODE'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist17_68d3a5935e03f2754906437f2c98ff76() {
        assertEval("argv <- list(list(TRUE, TRUE, TRUE, TRUE), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist18_cf16fc3321cb43d813f1225989a268e9() {
        assertEval("argv <- list(list(c(NA_real_, NA_real_), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'),     c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist19_e90230a57eda2ea70728cf949b1c690f() {
        assertEval("argv <- list(list(structure(list('/home/lzhao/tmp/RtmpTzriDZ/R.INSTALL30d4108a07be/mgcv/R/gamm.r'), row.names = c(NA, -1L), class = 'data.frame'), structure(list(1522L), row.names = c(NA, -1L), class = 'data.frame'), structure(list(1522L), row.names = c(NA, -1L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist2_0cdeaeab670601c854e7eb393afe4cad() {
        assertEval("argv <- list(list(c(13823, NA)), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist20_ec280af06edcb2c8983e759d5e539d6c() {
        assertEval("argv <- list(structure(list(`1` = 2.47032822920623e-323), .Names = '1'), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist21_ee8b04513172989cbdbc2e49afe9d0e3() {
        assertEval("argv <- list(structure(list(`1` = 5900.92307692308, `2` = 6784.76923076923), .Names = c('1', '2')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist22_0e410f0f509e89fa627f4eeae4615b5a() {
        assertEval("argv <- list(list(structure(list(surname = structure(c('Tukey', 'Venables', 'Tierney', 'Ripley', 'Ripley', 'McNeil'), class = 'AsIs'), nationality = structure(c(3L, 1L, 3L, 2L, 2L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(2L, 1L, 1L, 1L, 1L, 1L), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = c('1', '2', '3', '4', '4.1', '5'), class = 'data.frame'), structure(list(title = structure(c(2L, 5L, 4L, 6L, 7L, 3L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = c(NA, 6L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist23_7f64e1694a3712c52909400d5fc9b3b1() {
        assertEval("argv <- list(list(structure(c(-Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, -Inf, 0, 0, 1, 1, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, Inf, -Inf, -Inf, -Inf, -Inf, 0, 1, 1, 1, Inf, -Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.6, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.4, 0.8, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.533333333333334, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.525, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, 0, 0, 1, 2, Inf, Inf, Inf, -Inf, -Inf, 0, 0.5, 1, 2, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 1, 2, 2, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.8, 1.6, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.3, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.4, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.2, 1.9, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.499999999999999, 1.33333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.325, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.6, 2.7, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.1, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.2, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.13333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.125, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, 0, 1, 3, 4, Inf, Inf, Inf, -Inf, -Inf, 0, 1.5, 3, 4, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 4, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.4, 3.8, Inf, Inf, Inf, -Inf, -Inf, 0.100000000000001, 1.5, 2.9, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1.5, 3, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 1.5, 2.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.0666666666666664, 1.5, 2.93333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.0750000000000002, 1.5, 2.925, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 3, 5, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1.5, 3.2, 4.9, Inf, Inf, Inf, -Inf, -Inf, 0.300000000000001, 2, 3.7, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 2, 3.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.4, 2, 3.6, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.266666666666667, 2, 3.73333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.275, 2, 3.725, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL))), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist24_a0828428f1fcba3b6e4eb7e6864fd104() {
        assertEval("argv <- list(structure('# everything ', Rd_tag = 'VERB'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist25_c75b1ed028849b364b236e8a9b07d057() {
        assertEval("argv <- list(structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_), .Names = c('sec', 'min', 'hour')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist26_da27e26962e02bb734113c1cf3b91fe7() {
        assertEval("argv <- list(structure(list(a = list(1:5, c('A', 'B', 'C', 'D', 'E')), b = 'Z', c = NA), .Names = c('a', 'b', 'c')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist27_9271d18bb2626124efbee2123a7ba802() {
        assertEval("argv <- list(list(structure(list(structure(c(0.398105880367068, -0.612026393250771, 0.341119691424425, -1.12936309608079, 1.43302370170104, 1.98039989850586, -0.367221476466509, -1.04413462631653, 0.569719627442413, -0.135054603880824, 2.40161776050478, -0.0392400027331692, 0.689739362450777, 0.0280021587806661, -0.743273208882405, 0.188792299514343, -1.80495862889104, 1.46555486156289, 0.153253338211898, 2.17261167036215, 0.475509528899663, -0.709946430921815, 0.610726353489055, -0.934097631644252, -1.2536334002391, 0.291446235517463, -0.443291873218433, 0.00110535163162413, 0.0743413241516641, -0.589520946188072, -0.568668732818502, -0.135178615123832, 1.1780869965732, -1.52356680042976, 0.593946187628422, 0.332950371213518, 1.06309983727636, -0.304183923634301, 0.370018809916288, 0.267098790772231, -0.54252003099165, 1.20786780598317, 1.16040261569495, 0.700213649514998, 1.58683345454085, 0.558486425565304, -1.27659220845804, -0.573265414236886, -1.22461261489836, -0.473400636439312, -0.620366677224124, 0.0421158731442352, -0.910921648552446, 0.158028772404075, -0.654584643918818, 1.76728726937265, 0.716707476017206, 0.910174229495227, 0.384185357826345, 1.68217608051942, -0.635736453948977, -0.461644730360566, 1.43228223854166, -0.650696353310367, -0.207380743601965, -0.392807929441984, -0.319992868548507, -0.279113302976559, 0.494188331267827, -0.177330482269606, -0.505957462114257, 1.34303882517041, -0.214579408546869, -0.179556530043387, -0.100190741213562, 0.712666307051405, -0.0735644041263263, -0.0376341714670479, -0.681660478755657, -0.324270272246319, 0.0601604404345152, -0.588894486259664, 0.531496192632572, -1.51839408178679, 0.306557860789766, -1.53644982353759, -0.300976126836611, -0.528279904445006, -0.652094780680999, -0.0568967778473925, -1.91435942568001, 1.17658331201856, -1.664972436212, -0.463530401472386, -1.11592010504285, -0.750819001193448, 2.08716654562835, 0.0173956196932517, -1.28630053043433, -1.64060553441858), .Label = structure(list(c(-1.91442143130152, -0.573203408615382), c(-0.934159637265755, -0.300914121215107), c(-0.568730738440006, 0.0174576253147555), c(-0.279175308598063, 0.384247363447848), c(0.0279401531591622, 1.16046462131646), c(0.398043874745564, 2.40167976612628)), class = 'shingleLevel'), class = 'shingle')), row.names = c(NA, -100L), class = 'data.frame'), structure(list(c(0.450187101272656, -0.018559832714638, -0.318068374543844, -0.929362147453702, -1.48746031014148, -1.07519229661568, 1.00002880371391, -0.621266694796823, -1.38442684738449, 1.86929062242358, 0.425100377372448, -0.238647100913033, 1.05848304870902, 0.886422651374936, -0.619243048231147, 2.20610246454047, -0.255027030141015, -1.42449465021281, -0.144399601954219, 0.207538339232345, 2.30797839905936, 0.105802367893711, 0.456998805423414, -0.077152935356531, -0.334000842366544, -0.0347260283112762, 0.787639605630162, 2.07524500865228, 1.02739243876377, 1.2079083983867, -1.23132342155804, 0.983895570053379, 0.219924803660651, -1.46725002909224, 0.521022742648139, -0.158754604716016, 1.4645873119698, -0.766081999604665, -0.430211753928547, -0.926109497377437, -0.17710396143654, 0.402011779486338, -0.731748173119606, 0.830373167981674, -1.20808278630446, -1.04798441280774, 1.44115770684428, -1.01584746530465, 0.411974712317515, -0.38107605110892, 0.409401839650934, 1.68887328620405, 1.58658843344197, -0.330907800682766, -2.28523553529247, 2.49766158983416, 0.667066166765493, 0.5413273359637, -0.0133995231459087, 0.510108422952926, -0.164375831769667, 0.420694643254513, -0.400246743977644, -1.37020787754746, 0.987838267454879, 1.51974502549955, -0.308740569225614, -1.25328975560769, 0.642241305677824, -0.0447091368939791, -1.73321840682484, 0.00213185968026965, -0.630300333928146, -0.340968579860405, -1.15657236263585, 1.80314190791747, -0.331132036391221, -1.60551341225308, 0.197193438739481, 0.263175646405474, -0.985826700409291, -2.88892067167955, -0.640481702565115, 0.570507635920485, -0.05972327604261, -0.0981787440052344, 0.560820728620116, -1.18645863857947, 1.09677704427424, -0.00534402827816569, 0.707310667398079, 1.03410773473746, 0.223480414915304, -0.878707612866019, 1.16296455596733, -2.00016494478548, -0.544790740001725, -0.255670709156989, -0.166121036765006, 1.02046390878411)), row.names = c(NA, -100L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist28_5368038ae812d2ff830abc92574fa036() {
        assertEval("argv <- list(list(NULL), TRUE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist29_2a60ac9955ad900823d69f11809e1696() {
        assertEval("argv <- list(structure(list(a = 'a', b = 2, c = 3.14159265358979+2i), .Names = c('a', 'b', 'c')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist3_ab1a74c746c3cf44665790b5325ba276() {
        assertEval("argv <- list(structure('A', .Names = 'x', package = '.GlobalEnv'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist30_80061cf3b5c20975e86672864aab592d() {
        assertEval("argv <- list(structure(list(`1` = c(2, 1), `2` = c(3, 1.5, 1.5, 4), `3` = c(4, 2.5, 2.5, 5, 1), `4` = c(5, 3.5, 3.5, 7, 1.5, 6, 1.5), `5` = c(5, 3.5, 3.5, 8, 1.5, 6.5, 1.5, 6.5), `6` = c(6, 4.5, 4.5, 10, 2.5, 8.5, 2.5, 8.5, 1, 7), `7` = c(7, 5.5, 5.5, 11, 3.5, 9.5, 3.5, 9.5, 2, 8, 1)), .Dim = 7L, .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7'))), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist31_4f88039b76f3acc8f328f70dd669db4e() {
        assertEval("argv <- list(list(c(TRUE, TRUE), c(TRUE, TRUE), c(TRUE, TRUE), c(TRUE, TRUE), c(1, 2, 3)), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist32_c77f9788585d653156db95c336680a5a() {
        assertEval("argv <- list(structure(list(mean = c(0, 1), vcov = structure(c(1, 1, 1, 0), .Dim = c(2L, 2L))), .Names = c('mean', 'vcov'), class = c('relistable', 'list')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist33_e85233b20e2aaeb5b0287bc6ee251b1e() {
        assertEval("argv <- list(list(c('  \\036 The ‘internal’ graphics device invoked by .Call(\\'R_GD_nullDevice\\',', '    package = \\'grDevices\\') has been removed: use pdf(file = NULL)', '    instead.')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist34_e092b41837a80a264a8be9d3f48eeb19() {
        assertEval("argv <- list(structure(list(surname = structure(c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'US', 'US', 'Australia'), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'yes', 'no'), class = 'AsIs'), title = structure(c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), class = 'AsIs'), other.author = structure(c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), class = 'AsIs')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c('1', '2', '3', '4', '5')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist35_9f134e9d48d623bc91ee18721a1e6622() {
        assertEval("argv <- list(list(structure(list(Ozone = c(96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L), Solar.R = c(167L, 197L, 183L, 189L, 95L, 92L, 252L, 220L, 230L, 259L, 236L, 259L, 238L, 24L, 112L, 237L, 224L, 27L, 238L, 201L, 238L, 14L, 139L, 49L, 20L, 193L, 145L, 191L, 131L, 223L), Wind = c(6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7, 14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6, 9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), Temp = c(91L, 92L, 93L, 93L, 87L, 84L, 80L, 78L, 75L, 73L, 81L, 76L, 77L, 71L, 71L, 78L, 67L, 76L, 68L, 82L, 64L, 71L, 81L, 69L, 63L, 70L, 77L, 75L, 76L, 68L), Month = c(9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L), Day = 1:30), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day'), row.names = 124:153, class = 'data.frame'), structure(list(c(2.67385465817826, 1.92826057080163, 1.7211511020859, 2.46674518946253, 0.6441818647641, 0.0228534586169083, -0.474209266300845, -0.349943585071407, -0.432787372557699, -0.308521691328261, 0.519916183534662, -0.432787372557699, -0.142834116355676, -0.929850097475453, -0.764162522502868, 0.602759971020954, -0.557053053787138, -0.764162522502868, -0.308521691328261, -0.63989684127343, -0.764162522502868, -0.349943585071407, 0.188541033589493, -1.01269388496175, -0.722740628759722, -0.059990328869384, NA, -0.722740628759722, -0.557053053787138, -0.474209266300845)), row.names = c(NA, -30L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist36_e506625ad174caedb6881d35716d0c73() {
        assertEval("argv <- list(list(c(5.87030131383818+0i, 1.5889879152884+1.34124369386909i, 2.11222603449395-1.81528547759475i, 2.90982451403972-3.07851581383191i, -0.93444299242086+4.19201264862077i, -2.47319172794455-3.70050127054969i, 3.40387225833387-2.03794044354999i, 0.964146923537224+0.43683199768595i, 0.964146923537223-0.43683199768595i, 3.40387225833387+2.03794044354999i, -2.47319172794455+3.70050127054969i, -0.93444299242086-4.19201264862077i, 2.90982451403972+3.07851581383191i, 2.11222603449395+1.81528547759475i, 1.5889879152884-1.34124369386909i), c(-0.198575181429756+0i, 3.06901469564285-0.28753262878135i, 2.52792606446531+0.34832983414202i, -0.22897831647696+4.34107190550675i, -1.1328140942159+1.10933827962707i, -2.13015831304915-3.19551716353477i, 1.66248610578085-2.34843556657312i, 2.53273081248013+0.345339148259i, 2.53273081248013-0.345339148259i, 1.66248610578085+2.34843556657312i, -2.13015831304915+3.19551716353477i, -1.1328140942159-1.10933827962708i, -0.22897831647696-4.34107190550675i, 2.52792606446531-0.34832983414202i, 3.06901469564285+0.28753262878135i), c(-0.177389766587854+0i, -0.750507869921238-0.968112891774716i, 2.01908494011385-1.61353499070386i, -1.32842557557029+1.87677956172028i, 0.278793972604843+0.060190561256586i, 0.06482045217871+2.780245561063i, -3.05075608405522+4.21179315999883i, -0.12202595251607-1.65218285338028i, -0.12202595251607+1.65218285338028i, -3.05075608405522-4.21179315999883i, 0.06482045217871-2.780245561063i, 0.278793972604844-0.060190561256586i, -1.32842557557029-1.87677956172028i, 2.01908494011385+1.61353499070386i, -0.750507869921237+0.968112891774715i), c(-1.93496831243286+0i, -4.87879352188084-3.06857420991118i, 0.91348359987171+2.30355482564816i, 2.7631069926811+6.2396752311874i, -0.9934286053847-5.99510259160787i, 0.39705745560005+3.84166415349047i, -1.5293697261841+2.76025815484515i, 3.48992984345714-5.88708433976428i, 3.48992984345714+5.88708433976428i, -1.5293697261841-2.76025815484515i, 0.39705745560005-3.84166415349047i, -0.99342860538471+5.99510259160787i, 2.7631069926811-6.2396752311874i, 0.91348359987171-2.30355482564816i, -4.87879352188084+3.06857420991118i), c(1.6954625122129+0i, 0.96480086806796-2.54002409930623i, -3.5054253146275-7.05689416264505i, -2.10114573645889-1.07773818646711i, 1.81179418950692+1.03308206229221i, 0.84721205589596-4.740786425434i, -1.90295630545443-1.68686014535334i, -2.43557705822344-1.63964363160433i, -2.43557705822344+1.63964363160433i, -1.90295630545443+1.68686014535334i, 0.84721205589596+4.740786425434i, 1.81179418950692-1.03308206229221i, -2.10114573645889+1.07773818646711i, -3.50542531462751+7.05689416264504i, 0.96480086806796+2.54002409930623i)), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist37_0f95051ca08351dae18481fe46543be5() {
        assertEval("argv <- list(structure(list(inner = integer(0), outer = integer(0)), .Names = c('inner', 'outer')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist38_5f64c3dae7767b102c864136e51809f5() {
        assertEval("argv <- list(structure(c('mode', 'length', 'x', 'mode', 'x', 'mode'), .Dim = 2:3), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist39_1d5e99dafdc029ed6aa358eae7c83fb0() {
        assertEval("argv <- list(list(structure(list(b = structure(2L, .Label = c('C', 'D'), class = 'factor')), .Names = 'b', row.names = 2L, class = 'data.frame'), structure(list(a = structure(NA_real_, class = c('POSIXct', 'POSIXt'))), .Names = 'a', row.names = 'NA', class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist4_a00944e89f084d30168495fc507d084a() {
        assertEval("argv <- list(list(list(structure(function (e1, e2) standardGeneric('Ops'), generic = structure('Ops', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = c('e1', 'e2'), default = quote(`\\001NULL\\001`), skeleton = quote((function (e1, e2) stop('invalid call in method dispatch to 'Ops' (no default method)', domain = NA))(e1, e2)), groupMembers = list('Arith', 'Compare', 'Logic'), class = structure('groupGenericFunction', package = 'methods')))), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist40_7b8c66b7861a23cabf2f2b2cb8e59113() {
        assertEval("argv <- list(list(structure(list(structure(c('0.007239522', '0.014584634', '0.014207936', '0.018442267', '0.011128505', '0.019910082', '0.027072311', '0.034140379', '0.028320657', '0.037525507'), class = 'AsIs')), row.names = c(NA, -10L), class = 'data.frame'), structure(list(structure(c(' 1', ' 6', ' 7', ' 8', '13', '14', '15', '20', '21', '22'), class = 'AsIs')), row.names = c(NA, -10L), class = 'data.frame'), structure(list(structure(c(' 16', ' 16', '144', ' 16', ' 16', '128', ' 16', ' 16', '112', ' 16'), .Dim = 10L, .Dimnames = structure(list(c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22')), .Names = ''))), row.names = c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22'), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist41_74b3504ae4d46736cfd2aa1f197ef8b3() {
        assertEval("argv <- list(structure(list(N = 84L, ZXrows = 18, ZXcols = 5, Q = 1L, StrRows = 18, qvec = structure(c(1, 0, 0), .Names = c('Seed', '', '')), ngrps = structure(c(14L, 1L, 1L), .Names = c('Seed', 'X', 'y')), DmOff = structure(c(0, 1, 10), .Names = c('', 'Seed', '')), ncol = structure(c(1, 3, 1), .Names = c('Seed', '', '')), nrot = structure(c(4, 1, 0), .Names = c('', '', '')), ZXoff = structure(list(Seed = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), X = structure(18, .Names = 'Seed'), y = structure(72, .Names = '')), .Names = c('Seed', 'X', 'y')), ZXlen = structure(list(Seed = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5), X = 18, y = 18), .Names = c('Seed', 'X', 'y')), SToff = structure(list(Seed = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), X = structure(32, .Names = 'Seed'), y = structure(89, .Names = '')), .Names = c('Seed', 'X', 'y')), DecOff = structure(list(Seed = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), X = structure(18, .Names = 'Seed'), y = structure(72, .Names = '')), .Names = c('Seed', 'X', 'y')), DecLen = structure(list(    Seed = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5), X = 18, y = 18), .Names = c('Seed', 'X', 'y'))), .Names = c('N', 'ZXrows', 'ZXcols', 'Q', 'StrRows', 'qvec', 'ngrps', 'DmOff', 'ncol', 'nrot', 'ZXoff', 'ZXlen', 'SToff', 'DecOff', 'DecLen')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist42_d9b9aabe88fe01a4da857f87a1ad2c19() {
        assertEval("argv <- list(structure(list(structure('\\n', Rd_tag = 'RCODE'), structure('Sys.timezone()\\n', Rd_tag = 'RCODE'), structure('\\n', Rd_tag = 'RCODE'), structure('#ifdef windows not active', Rd_tag = 'COMMENT'), structure(list(structure('\\n', Rd_tag = 'VERB'), structure('## need to supply a suitable file path (if any) for your system\\n', Rd_tag = 'VERB'), structure('tzfile <- \\'/usr/share/zoneinfo/zone.tab\\'\\n', Rd_tag = 'VERB'), structure('tzones <- read.delim(tzfile, row.names = NULL, header = FALSE,\\n', Rd_tag = 'VERB'),     structure('    col.names = c(\\'country\\', \\'coords\\', \\'name\\', \\'comments\\'),\\n', Rd_tag = 'VERB'), structure('    as.is = TRUE, fill = TRUE, comment.char = \\'#\\')\\n', Rd_tag = 'VERB'), structure('str(tzones$name)\\n', Rd_tag = 'VERB')), Rd_tag = '\\\\dontrun'), structure('\\n', Rd_tag = 'RCODE')), Rd_tag = '\\\\examples'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist43_4fa4fd309c4941c6aee15839d6fc6521() {
        assertEval("argv <- list(structure(list(`1` = 8.91763605923317e+38), .Names = '1'), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist44_25fa144c92150c9594d00efc724c5fc2() {
        assertEval("argv <- list(list(c(0, 0), c(0, 0, 0, 1), NULL, c(1, 1)), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist45_fd7ca258b6f76f89dd5edfc815ab9a10() {
        assertEval("argv <- list(list(structure(list(structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame'), structure(list(structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame'), structure(list(structure(c('no', 'no', 'no', 'no', 'yes', 'no'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame'), structure(list(structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame'), structure(list(structure(c(NA, NA, NA, NA, NA, 'Ripley'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist46_95e6c0b469183d3a065137caa2dee4d7() {
        assertEval("argv <- list(list(structure(list(surname = structure(c(4L, 5L, 3L, 2L, 2L, 1L, 6L), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables', 'R Core'), class = 'factor'), nationality = structure(c(3L, 1L, 3L, 2L, 2L, 1L, NA), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(2L, 1L, 1L, 1L, 1L, 1L, NA), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = c('1', '2', '3', '4', '4.1', '5', '7'), class = 'data.frame'),     structure(list(title = structure(c(2L, 5L, 4L, 6L, 7L, 3L, 1L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = c(NA, 7L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist47_5ea4c56cdf00ba28ef8fc04e18094dd1() {
        assertEval("argv <- list(list(structure(list(structure('DateTimeClasses', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('print.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('print.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('summary.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('summary.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('+.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('-.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('Ops.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('Math.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('Summary.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('Math.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('Summary.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[<-.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[[.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[<-.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('as.data.frame.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('as.data.frame.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('as.list.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('.leap.seconds', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('is.na.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('c.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('c.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(        structure('as.matrix.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('length.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('mean.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('mean.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('str.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('check_tzones', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('duplicated.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('unique.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('split.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('names.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('names<-.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('date-time', Rd_tag = 'VERB')), Rd_tag = '\\\\alias')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist48_96ac9fd88185f3c4e65a2f4446a73181() {
        assertEval("argv <- list(structure(list(c(3L, 0L, 0L)), class = 'numeric_version'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist49_a372f4aa0e6e20cdc2ae9550b9f7684c() {
        assertEval("argv <- list(list(structure(list(x = 1L, y = structure(1L, .Label = c('A', 'D', 'E'), class = 'factor'), z = 6), .Names = c('x', 'y', 'z'), row.names = 1L, class = 'data.frame'), structure(list(), .Names = character(0), row.names = 1L, class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist5_f2e05326492d9e0a912fd77a4313b62f() {
        assertEval("argv <- list(structure(list(sec = c(8.40000009536743, 8.80000019073486), min = c(14L, 14L), hour = c(22L, 22L)), .Names = c('sec', 'min', 'hour')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist6_0a3e7470006afaffe8594e580f443c45() {
        assertEval("argv <- list(list(structure(list(c(NA, 0L)), row.names = c(NA, -2L), class = 'data.frame'), structure(list(c(NA, 0)), row.names = c(NA, -2L), class = 'data.frame'), structure(list(c(10L, 10L)), row.names = c(NA, -2L), class = 'data.frame'), structure(list(c(2.74035772634541, 2.74035772634541)), row.names = c(NA, -2L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist7_41d12eb4e1fdbf2c2b9125c8238d06a5() {
        assertEval("argv <- list(structure(list(diagonalMatrix = 1, lMatrix = 1, sparseMatrix = 2, Matrix = 2, mMatrix = 4), .Names = c('diagonalMatrix', 'lMatrix', 'sparseMatrix', 'Matrix', 'mMatrix')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist8_fe37fc7b365236baa39cbebfdbece429() {
        assertEval("argv <- list(list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'), structure(list(height = numeric(0), weight = numeric(0)), .Names = c('height', 'weight'), row.names = integer(0), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist9_6fedda4eeb203d008f152567af7e6c5d() {
        assertEval("argv <- list(list(c(TRUE, FALSE, FALSE, FALSE, FALSE), c(TRUE, TRUE, TRUE, TRUE, NA)), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
    }

    @Test
    public void TestrGenBuiltinutf8ToInt_testutf8ToInt1_63a27d481481a00dad84e929f539c36c() {
        assertEval("argv <- list('lasy'); .Internal(utf8ToInt(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinutf8ToInt_testutf8ToInt3_5be39d31b7134e0cc6ffda9f7cef0a53() {
        assertEval("argv <- structure(list(x = NA_character_), .Names = 'x');do.call('utf8ToInt', argv)");
    }

    @Test
    public void TestrGenBuiltinvector_testvector1_9eba6c0004e7af7ce42cff661a071ea7() {
        assertEval("argv <- list('integer', 0L); .Internal(vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinvector_testvector10_2e993bba51c7b9a7f3f6f152edc9aaa6() {
        assertEval("argv <- list('list', structure(1L, .Names = '\\\\c')); .Internal(vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinvector_testvector11_7ee9a8983c7e8f214e428a5c8176649d() {
        assertEval("argv <- structure(list(mode = 'complex', length = 7), .Names = c('mode',     'length'));do.call('vector', argv)");
    }

    @Test
    public void TestrGenBuiltinvector_testvector2_983b42d77a0575ec695b72baceb6c5e8() {
        assertEval("argv <- list('double', 17.1); .Internal(vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinvector_testvector3_740a8cc65d94f7bc6b23c6a291b7c88a() {
        assertEval("argv <- list('list', 1L); .Internal(vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinvector_testvector4_348338610d325be7d984dd3c9c2cc3f1() {
        assertEval("argv <- list('logical', 15L); .Internal(vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinvector_testvector5_c83b8a785a5f66fa17f40ceae6513be4() {
        assertEval("argv <- list('double', 2); .Internal(vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinvector_testvector9_3ec6b6e35abf3a65efefe2397e0034e4() {
        assertEval("argv <- list('raw', 0L); .Internal(vector(argv[[1]], argv[[2]]))");
    }

    @Test
    public void TestrGenBuiltinwarning_testwarning1_34fbe2e558b975829460c2ad85dee3a1() {
        assertEval("argv <- list('OGXAGDISZSNLYDBXLBQMQHECNODETNWRASXQCXRDTYKHGFOTROVTAJBUYOWPRNTXVBABWOIYPNJIVBJWSRJODUXFUPYENWWAZMKKCEKIKHOEYBJZQBKLNLQDXOODTMUBVHHQYAJKLSXQXTDDELCFOKOVQKSCHPEWWMUHBLMIENAUOQMHLUPKVIPLGOGOLDQODOLLVSLNGBKAWZSVXOOHRGHSSEHJCSODZOUWWUQQHAKJKEIKTHDAUMUCCDTTZQHFUSFTWNPYYRBVMKHGKYGOFFSIDBYODOOVSOSTJHNGVKBYFKQQIDXPTXNJBWNFJFLGDBRHDZKKQXFOSKCQAFRWUDKUSPDOLTAFWCZKWXMSMZBEUOKZGNCVJUFYINCXYBMFWNAHIPGBCSYICIQLUHOBESVNOADWCGZPGPADSBQYCZASLOWOTQIKFWPTOHTOINVNFWJHUTVOAMOVSOBDRCFJWGSCUGOAUIXJZJMMAQNIPQLESTVNHLJGRYHQNPAADACMFVGMQEVLGHEPDEIEKPRVJYAPMJWBWEFWBGZRLJLURMBGGFBMGTOYCYSXPEESPIUIWPKYMCMZYLWHUUKJQWRNDPBMTTBLNHPTSDOUGSVDYTVEAWXDMMSBTKLSMZVVTCVVZBTKPVAAZTIVZFQLYZLFSOPLLPLYVFKKAJKESATLTABKQFVSXKKGJGYMBUIORHBLPZZCMKKIRHKZUIVFNEDXCWHAUJATALGMQCECVQQKLJUXQPIBPETHQDGVUBWDPMOSMZZKPILFAABTMWPEPXUNKRXXEGCUCVUYMYUWKCHSJJANDXBUWAHQUKYKLHPOBTFRNQQHFOZIIANPTYMCGWWVYQMESCLYVSDPZQHBBWJYONYCVJOICUFRLFZLAYWPHVYWDZOADAVUYJZVUQZMXKLYRAEMLZXISXRQDPHLFGQMEHSPDBZJRVGAPVJIQYPNEVFRQBYPWNGPURMMQLPAZKDWOWAWSUWNYFAIRIYUIMKUMAQGTHXWMBPPZIRYORCWNFKXMRHVGJGYKDXJWDJGBUFKIPOZGTZOKVCNLHEWOOPSQPBOPQQCCRVDUMZMOJNBOYNLAABEMUHTNHARBVDRVGDTFGNMJUOEZGDFJJHBYOFWMOUQDIYETLDFRDKLQGMEWECXHTKLEDDNMQLBAFWGPPZETGIAZLZFCGRPKSOPPFCTPYYTLELTXXVFBMPCYEXDRUTRDWQVEAIHVYDXPKRTNKZBDSSCMQKZRIDHCAITYKNBQJLZRSEFWVSHFMNFTASVYRHFWAWNLYEJDDROMVZNSEJBDCHKQSIZSEJHLVGKZDQSPZBZTLDLELVBIVBUZRAMSAVTGTRERYWURPKDVSUAEPCSOHKRECNCCQOHGQVBZAEIWEUWMQIMYGAZGRBZXWLUHHZZMTIGQIBZRWMDRAEXDGGIFAXYYLLBJXJNNEOCPOFXFKWGHWQWMXEQSEORXIOAJQPVDRFPSNJSMGLCGOAFQSUBCYYXQEXXEBOJLMUVHSMBAGFKOSGXMGIRSOWKFMJGYMAYJAZJZDOUFSOAGMYZFOQXTPFXUIFRTMWREAWCILQIPVIJPMCVLTUKATBNDRBURGEBAVGBJPUIDUWZRGQLFPZFLIACKBAEJPIMTEVIGIUGXDFQGSTGOXSVXHQDWRTIRMQUXNEHDGSQLQNIUQUEKZJCNYWORNYCMUWXVDSTRXKYLFPENKVOLFMGIWLLMVAICVMNKLCAACJTTCZDMOYVNJOUQCEVMUVHFQJXDEQERNTICKOTEPMYXDHSTNFEIBRTGMBCXPQLHYAEZUZGPBUWXAGPJSBRFHTEKRKOLDAEUDBAKWILKJYYHSFYBZFIDPRZFVQZLSBQFXVWVKZMMIBXFHROZCOXWXUEDDLUXLVMRTRWIECAXUCCENTDCOHLDXTLRHRJRKSHTOAJLKOWTBDIITDZWPXAUXCMRMWKOQHXDOGBTPIXPYXKSVXDBZKSNKSWDJUFQJPOSVLJVNTWLKWSPSTGHFYHMAUKLYKTUFBIRTQYAJQCADTWIGGYMSXPGXSBQWDYBEAKSRMCZOSHUQXKITSLUHXQUSRSFPTGRCTYRRKDMCTJOJFNKWCBEYLRAMBQWFHWAULCXETLREWBFGTKHCNLZDVAUFDEFYZIDRPIVHVDWBLRFYJQERTMWVZRQBEAWLVDKSBIUVWYJYSKKFTLLCJXOAKCHSJQMUPEYBCVKSTZYDRAMUJYRLVULIOWPQTSWCPGMHXKOCYTMESPBBLEMZFSDNVDVGCERRDZDYSOGIVXNXSLHZDRVFPEKGNRXIGIFDGYBNUVOGPDMCHRFKUFBURNFEPBFVHAZCTVAWOIIQDIPTORJXZTANUFKOTIILHQBPKBZQVKYJVAWBVPRSHRHOBJMNVNWPNQHOZXUVXPJTMARKYDJXUNAGHRCZWHLIJHXHWVEFRMCDIPYKYCWGHEACDFVAKXAILOXNTQFNBUFWNGVBAPWLNFSNBVGNICWQWDRPYPHYVLMTGVVKXBVMHQIQXOQKUWJMXMFRTQFYAXCVOPVGBDCEYFIRSHHLJXNPNNLFIGAFZLZGDOLWXQVHXDDPZNDEUQOTIKJQEGYZNBPSPNJCDJPGAICGDJDOOEYQBERXVLEEMKUUKQKJQYMQHKLHZWVSEBCWJUXQPBGKVJLODARVYBRKODGISEDOBLMMMTZVCWORUKWEMDFXMOZZRUASXLSVMVMALMPLHRPZEZPTWQSZWTDCNFTMDVYHDSOCOPOKKXRYDOCQGMMVXOYHQQQGKENPCSPRHJQYJFGMKIJRWMPMRRCCYKOYFFQVVDCUYQLRWNNUJYAIDIMTUKAYXPXQDDRXDXLBVZUHFFJFECQUBCADYEZSIIUMMGYRSHPYANWHJXCNKELEWRDDHYYEXBWBYEPSHASIWMZCAOPATBMYBYUWFZSHVYXDBVWBFSCAXBWDKFUOFLLXMYKUTIYNILMVYMJFASSAENEGXJZSDPWTMNOFXEPMFZIBTOAHWGBSNKLXXFOBOCTCFTKOWSTPCVTWCVHIXEASAVXEFUXGLKRHUIGAJPIEZGODRLJKKVXTJRNAQQIAZZBNZCJMXOAWVWVACVFAOTWBFKKPYZDHVZRCDIGGUEPRXRHABEWBHXOUYRKZYNDQVDPZFKCHNIPZPDSRILHVPUHDXAOZGZAGGYZTHKFTTMRTUPKRWLDQMYGUTROPWMZBOEHVFPKHMTZEDPDFIGSSUHEMOQMDWZWWJQNATVBXJSSRHHMBMPGZEOKDJZUJYSMVRJMPSJPNPXWVEIYYQUOBHMLYQAAHHVSRJEFSGFPDBAVUAPHPFYCDDHPFLLJZAWCELSEDFEWTOWDJIAKSGQEUMBUWPPKBQNUOLVRBDVKNIQPFQJLKFGELPKXHFOJYQLHAOIMVFCUEUAWVXJHXIYPPTKJLISGWYMAYLVNMDBQJABVTBSAPFQONGJHEQADNMNRZYYRTYFRCMTAECUJQTGJISODHKNPIJYOPGKQJMEMYAJGPBQBHILLZPIWIRXVCHNJVWRNUBGFVVVHAQTNJIJJOQKPSXYKQECOVTOZZIEJOVSXSGITFHXEDTOOSQTHZZATJJATECSLAXULDVSKEAIEOPHYSHSPKEAEPFBXWVPSUWSIMUKPHDHFFNXPGJOERAARFJESPBKCKLQCIAIUTVBDQKEDDQNMWETFEDXRLSSQXFLAESTLJMAWQEOWFIUGBKFQQKDELKBAWHZRWLYTHRXTRTCBJNYYQINRWOCSVKFGANPPXLGNBRTFEWHZSYTIJAXNIVUUNCXDVOOTKVWUKESCBAQSEUUQYDBYWJKZCSOWTQEMLEVHQMOPCMELROGHAHSBZUXNIMCFJKRDMDOAUVFOPDSWYTAUIKAIILVRJUJYUHGEXOXZOIRWZKTILGSKRYBQTRWUWZOUPBMDOBTACXZIQQPWUHBLLQTPMFLTGSUKICMTNYAXPVLIKHDHHIATLPCAEAYMUOCALFUNOYBAOCGDDOBQTJSBPGEHPKQYNGTNDGDCQTLDVZANUNGMHZSTAKLDGDKFNXNLHFBUYXHGIIPQCMBRYYXMJKYRKMTTMKKRRBLNEHFDWIBQTNNTXVNUFJKCAKEWPLNBTRDPQIROHXBXVIKNOBIGCZIYVKUGUCFZBORHMWMDITBYRKDYGTAGZSQGCHOUHIYMZVZCIYQZZSKRGIVRUIQPFGWUATXXDZXGXVLBWIGVZFCQWENJVMGHVAKPNRNOVIAVUWBAPWLAKJMDMGMXNSBRUAAPUTGULEPVUCBYCFLUWQKDWWINMUXPVUHNHWSJZSGQIUIGBOAHHVDGLYIUDMNXJMLSBSRRMHJCGBMIFTGKSCDZZTAZTXFHPITBXUWYIEDCMVWBTZISPBLQUOWALMUHPEUPHUPYEAJUOECWDQLYPBNRMQMWGKUWOIPIENADEIJWJYMWIIEQEOFCIPRFKDFTMGULEEZNNRUSWDGXJYIQNOMNJPGQROITWJLWKMNBKLORRXRNIADNNCGEHDLFCWFFIITOEVXGTFVHTDVVWAAHIBSAVNTYOYIHZGUHSTHAKPLINFHANKZBQMAEQNXRNHKDJHYGTBJFWLIKEQUXPQRYZGHXJSVDVRACLVIHXKOGDFNYKVCTGNBUXTCYEURKTKPIQJWKLXQARGZLRCFYOKPDMEGVRZDLMOLESXHTYANGMKVDWKQDWQNQZUYRLYRJJALNBTDIJXQWKSFNXHHLXRLVGJDGRZVSNEZVZNTUNNSMHNPRYHGGLLKOJJHQEDCBRZURRIQKDUWKQOXKKICSXODXKDXLLKIDUVFLGCTHNDMWAZUGTMAPKZLAAHDCLKHKOGBZEPYZPUCCDFIPFHCQWTPRTLFGLCAQNVRMWUJZFZLIWSOGNTMMNPMFNXBMWIPMTNZYODGZKFJOAAIGATUSBRTIKAMDUKYTLUJJRLSLRNXYYGLKENYCREGPCRQWFIKYBFSBZANWHQOLYJIYCXHECCGWKSYHTRHAJGNRHMJCEVMWVESLPTYUYHAETQNABEZUNBHCSKXJLBLSVDOLSKLTGMFLXYPQYTYRGSMXYMLPSZMHVXPHLYNGKFNWAVGSRPQPRZVBNELCCVYKJLLZTHMZOCBXVQFJDLUXVYJBHZLZSHXMVGYMDUDORONYFAHIXODFCWBINIWWXUXLKJNBSGVZCMRVTLYSIMZXFHJBZVRKGYJONYNQGJXTUICYLOEAFIPBGAFNITYFZCTHHBFTISFBSGIWALDNZRWTNXMUNCOJNQGLCACFDVKOPBUPULQTSZHBLHLLQAGMXHHZMABYMVVTPONGQWTEJTCRSWFHVHWQGQBXXRYOUUGHFWSDWQOBHPYBLKNBWGLFYSKHSFHXMYUWOBNXACQMZTUKZLZOTRVRABYLQPYSFJRGPCYGHLMGFSKQQBMQISXKKMBIEJLEBRKCMHCENENJVINGIKQBSOITGCJCFZDPRNKKNRZNMHEIHJMJLFBWONQFNSAQTLURPETKCEUDMJMOYEKLWAAIIWODBDVKZSGXQZCUZTUZIJEKKPKCRAEZNHAIWEJOMSVKFNHVGMCHVMLFGOSEEXDAHRNIEZTKCRPQTPCSAZYVGPIZWSUTIXBOITQKWOWNQGHZZHPJZXNMKWXHWMQKCEAJSGKUUKTMFFBPZBSAZZSULTRANTASWMGULWQLNZRVKXAJRLFERRKPKNWGRKOZPEWIWCBCWKWJJGMFVKTWWJOCDDEAGBBFEEPDSZSYXZGUSLRDADRIJXMTQVNLMBPQEKHJUZNVZKXARKHVOQJPXWZLWJBKMTGKKUNCMCXOYUQIUHGAKQVEZRVYPIUTWLVQJDORBXEZCDLSJHSSTLFKHTOUNPRRDQGPSNTVLTYUYWGSULVDNIOEZJVHNKSDJGVQTPZIJVJBARWYMIDQFHMMIUGECHFSNREUFXCUCDFORINMIVXPHORLQRWDWIVYFTOEHCBEQSQRCHYJEVVJRMDQVLLGCIFDORIXGPRULGOLOLYBINRRATGXMBJTMTHKTSFCNPCAEQSYMYKAASYJJMYACQFHWQJLMDOQKSYNLSGIDXZJNHEWKWQTAPBYLEOWBYWNVSZSNWEFBVSBXZVHLJBPICAKINJJAZOANLNWBFBLDZDAMFLCHTHFCRGGDLRUYORAXHITCZVDDKCMUGKCEZRYPCVAVKDRQLUWZKJDZYYKUKAKYNRANTLTOTSISOWBJQAFQXMETAQODBBEGUEZMKNVBCYYKMKFTRNFTNEOJWWHHJMOMVEZQYNVZAEVQUTGGHBCOMHNNBLBKODDHJFVIIRODTKDVXYVLXIISBNSSTYZJYPICEDTHZJDDFXYEZGPDBLHKWSZAMJGHQWOEEESYXLNUTLPYRKKCWZPXHRTKVPMEAYYNFWJMYOAXDHFECOWAXWRRIDIOHLHLRAVCIRQVAXNIEQWRWCAFVIHDLWVOTUFHQFIEXUBQUMXLAUTLJHOHKITBVXSDLHIELTKQPRFVSFEOBJPERMWHTYPZTZEUDGCTNUTWVUYNQELWGVPEMUJGGIEJEYYLPLIRBCOCIBMPKSUNMTLSZPWXOPGOWLEFMIUBIKJRREOKKPKBPHRJXWIYXABSGECTQJRSCCNYEORABQUZMYDYMEKVJZBRHHLUBWQGXUUGFXGRIRSPMBEVBZSKDNRMNKTGWXCSWRTUJJMBRYTEBNYXCKAZVABMKVCSAOIVTRQOGAMVLSMLIAQPDJQQJJJXTDIGEZCBTDAWIMOCCWNMTEAPEFYEGPEQFNIOOHGXPMTBQQUKFQLOTDNDPFNWORMYDKOQIVYXHOOVAOGRFEXMLPOQQDHTQQYPTETUFKOMPHGUOEZMEFSCDKQADGSLCJNNXEKKLAXTZXZJJUDNTFRLXHOAOOYROETHRDMCHDJMALXFBIHMJRXKNIVEJRYFRCSYVEBOMVPRFINYGHPBATPTGUVEAINZKKVVBLHITASDQBPDBSUTPMAGLRVETLGKVYIVQFVTQFGKUSYAEQLHVGFABOIEWYCPKEVRNNSWYXVDSQREDOUVSXRDNHCAOTXTHTAPZQHIWFTJYZMPJJYQZIQXOUUAGHRBENJMUUFDUCRKYBZUHIQCYJPTGXEXXQZRDSOZBDNRJJMXZYCARBZHHMFFNJXGJZDFNKALBXWHRCAWTXABIKQLBMXIXEGWWJPMTFTVCHAPZVPIQADNWCZYYTALDLOTTXHOFUPOEXZZADSCAAIPYGWWCABPNREBRAEPBBIDCHWSJCMEXBZJMFQYXOLZDJVUBLKHIYHXAHHCXOIYGWGAEAOOSWYLBHQYLZPODKNPDJTEEBNIATQZWMUTWTCRLNMNTRLKKDYGWWBIJKEYZSIGWXNPOQRULMUMSQBJHIHVHTWNYVEBSBDLHKQVLIGBCPJENVSBEASLDGHZREGLFQMUNIVYKEBUGRGDEMQYZGUGLWSIYLJUTOSILYNITUMTJIHZPKMBJLOQFVFTXHEZQYEHKBQFESSGPUJEPCNTFOCJOLEJMABCETPTWZOBEJIMWSSDUPVFQNWBEEQFJRPWXESEGMJJENMHIIUHILTNTTIPYRNEGMNOECTFEIXNAADXJQGSXRMPQATNOMVARUTBBJDBAHKWYMEJQXRXPJKFGRGRNWXDFMLROFUCKATMBMTINMDBAUJOTHQIJUNJOZFVNFODGTPMQTSETNRMQVMPRJCJTOHGZPHCAIXVHMSXPNWVEQDHWUEVBEUPMYZOQTJXGPYBCLTUSEHJYIFAMUQEZCTGYHGPBBVDBHCNSWMHUQYWVAQKSUOLYUNLUUEONJANOIBXLXKRVJGHGEAGTKWQKZYUIGEWPCTEBDBMNARXATBWQMVWJQXVHGLGXRMDNZEPNTGQAYEIKLOOWLNNLIWVZLMMWNREMRAJEPHNDQDRIQVUEGOIKRUENWLKHMVEWWNQZQMIZGLGBYCMEZYNYSRFQWHJGSGCETHRGASFUDYVASRFJKKUBBMNFPQRDDZGFRKOCUJVZOJZSOEQYRRDGOPJJPSMFIRDYEXAQPQLRTVPQGSHTCPFTZNTVCIAOHNRDPXGDGXPDSEZUKMKARYGAVGCBOHANSJKHYLDPCFXAOEBATTFZRDWEMESUYNHREUTPORPDRMPGSCCDRVZCMIIVSQXTMQSLIAGHICXJYZDOOGRVCRPMIKALTMHTBOZGUUWGOXAEGUBXIXPLSTNABRSLFSAOCXULPTFLATSCSSLJFQCEHSJZEYDVWGHQQLPARKIJSMOHXTOZGWYTKNONYWQXTHAVCDEDPYTNCNUVZKWFEODBGIYLLBJOWGYWFKQDHPEMWNJPSJEJPTAYDAVLGVMDDWBJKTSYEVOXYAKCMSMEPHTXGOTNFKOBTADKPQQCKAIXGSXRCVSSLDCXFCEIRQKPXSMVHFHCEDMSFIMRRWAGIVQGMTCNRFMVWTQFFNTZJFSLXXJDTZBGAHAMOWAZARZTQCPOMAXKKYUKOMHNELAOMBBIIJDSOPXFVUFXACKODFHHQRMUZQNHWWEWKEUQTDCYGPMWLQHLCUYDUBWGNPWIRILVGICVQFVKKFEIUDDRKWMPVYBBSFESJTNQMYLYEBQIQBIDSPYQQFUQRGUPROKKQETIFRPIWJGDMILMXGFJODKUGZZIQRWYSJVJZTNEVLXHXEZRPLNZPAWTVFQKRDVSBXXREEPYYLPOGMIKMNEDMWMTKNQVMCIWIPHSHIHFGHEWPWNYXMEFTYGBQLASFDXBVRNYMGHGMEGYHGYFUFZHVHLSQQPRXGJTZAGWLPLIKRZCGGSOBBDMUMDKNCEWJBDBMHOYJOAPIKAPFTRTHXDFULBREUQJATSHPJUVVACPLVAJWTYGXOMNLMKCVLGFFJRWFHLMTOZLEUEMHOZESJRGFRCWSIZAHFHEWWZOAYNRNBTRSFJNYLBLLJKZAYZEWPWWNWSEFXCGXOTOOAOLKAUAOQKQSVIQPGTFPUBYMUMPIMQYTAWVJLJDEUVEPQFOUOFAROYILGVDHDVFPXFTKPWYFYKVFDQYRKNKJ');do.call('warning', argv)");
    }

    @Test
    public void TestrGenBuiltinweekdaysDate_testweekdaysDate1_974ad4aa789463fd5fccdd0c9d96b64d() {
        assertEval("argv <- structure(list(x = structure(16352, class = 'Date')),     .Names = 'x');do.call('weekdays.Date', argv)");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich1_6ffd58c2382fb329db8a247df22067c2() {
        assertEval("argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich2_e6065f72e60c9a304328bf154266e911() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B')))); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich3_038ceb9c56616d25695275d25965ce76() {
        assertEval("argv <- list(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich4_dab6a1d1d7e8fdc8bc2f723fd7e78105() {
        assertEval("argv <- list(structure(TRUE, .Names = 'V1')); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich5_6aef65a1ab8178b217ae32f8504ced22() {
        assertEval("argv <- list(logical(0)); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich6_93d3fd981b8395b30b099b866b42b77e() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L))); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich7_5ae2018f20142d7d07b6d7642d0d5460() {
        assertEval("argv <- list(c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE)); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich8_1d8c38fe3541060706bbd073c2bdda2b() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE), .Dim = 12L)); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhich_testwhich9_0c431803ab55f27309549cbc5947f2f2() {
        assertEval("argv <- list(structure(FALSE, .Names = 'signature-class.Rd')); .Internal(which(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax1_8740c7e2a30ff1913fccb1a3e392add0() {
        assertEval("argv <- list(structure(c(TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = 4:5, .Dimnames = list(c('I(a)', 'b', 'c', 'a'), c('I(a)', 'b', 'c', 'b:c', 'a:x')))); .Internal(which.max(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax2_bc0064f5ce6fe0559a90a7d2c6ae0003() {
        assertEval("argv <- list(structure(c(TRUE, FALSE), .Names = c('d', 'I(as.numeric(d)^2)'))); .Internal(which.max(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax3_d76a0b61080251e97a3ac59ae938c10f() {
        assertEval("argv <- list(c(7985.84636551931, 7366.07281363396, 7342.71367123673, 7315.48787041648, 7290.90503004105)); .Internal(which.max(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax4_ab75935a3fe576e9409934730c64f62a() {
        assertEval("argv <- list(structure(c(NA, 87, 82, 75, 63, 50, 43, 32, 35, 60, 54, 55, 36, 39, NA, NA, 69, 57, 57, 51, 45, 37, 46, 39, 36, 24, 32, 23, 25, 32, NA, 32, 59, 74, 75, 60, 71, 61, 71, 57, 71, 68, 79, 73, 76, 71, 67, 75, 79, 62, 63, 57, 60, 49, 48, 52, 57, 62, 61, 66, 71, 62, 61, 57, 72, 83, 71, 78, 79, 71, 62, 74, 76, 64, 62, 57, 80, 73, 69, 69, 71, 64, 69, 62, 63, 46, 56, 44, 44, 52, 38, 46, 36, 49, 35, 44, 59, 65, 65, 56, 66, 53, 61, 52, 51, 48, 54, 49, 49, 61, NA, NA, 68, 44, 40, 27, 28, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts')); .Internal(which.max(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax5_79fb02f2a6b85572fd6cc6c025b88103() {
        assertEval("argv <- list(NULL); .Internal(which.max(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax6_7fc83a1e01e81a96f76d8220a4a5d2e2() {
        assertEval("argv <- list(list()); .Internal(which.max(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax8_24ddc8e936890e4195144d97992d2338() {
        assertEval("argv <- structure(list(x = c(NA, NA)), .Names = 'x');do.call('which.max', argv)");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin1_d6176c9b59aa6bb735350689a65f6902() {
        assertEval("argv <- list(structure(c(345595, 172795, 69115, 34555, 23035, 11515, 5755, 2875, 1147, 571, 379, 187, 91, 27, 11, 3, 1, 3, 4.42857142857143, 4.73716632443532, 4.86858316221766, 4.95619438740589, 4.97809719370294, 4.98904859685147, 4.99452429842574, 4.99780971937029, 4.99890485968515, 4.99945242984257, 4.99978097193703, 4.99989048596851, 4.99994524298426, 4.9999780971937, 4.99998904859685), .Names = c('1 sec', '2 secs', '5 secs', '10 secs', '15 secs', '30 secs', '1 min', '2 mins', '5 mins', '10 mins', '15 mins', '30 mins', '1 hour', '3 hours', '6 hours', '12 hours', '1 DSTday', '2 DSTdays', '1 week', 'halfmonth', '1 month', '3 months', '6 months', '1 year', '2 years', '5 years', '10 years', '20 years', '50 years', '100 years', '200 years', '500 years', '1000 years'))); .Internal(which.min(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin2_d37d291f96c4c6f2e09346cb620e9770() {
        assertEval("argv <- list(structure(c(295, 145, 55, 25, 15, 5, 0, 2.5, 4, 4.5, 4.66666666666667, 4.83333333333333, 4.91666666666667, 4.97222222222222, 4.98611111111111, 4.99305555555556, 4.99652777777778, 4.99826388888889, 4.99950396825397, 4.99977184576774, 4.99988592288387, 4.99996197429462, 4.99998098714731, 4.99999049357366, 4.99999524678683, 4.99999809871473, 4.99999904935737, 4.99999952467868, 4.99999980987147, 4.99999990493574, 4.99999995246787, 4.99999998098715, 4.99999999049357), .Names = c('1 sec', '2 secs', '5 secs', '10 secs', '15 secs', '30 secs', '1 min', '2 mins', '5 mins', '10 mins', '15 mins', '30 mins', '1 hour', '3 hours', '6 hours', '12 hours', '1 DSTday', '2 DSTdays', '1 week', 'halfmonth', '1 month', '3 months', '6 months', '1 year', '2 years', '5 years', '10 years', '20 years', '50 years', '100 years', '200 years', '500 years', '1000 years'))); .Internal(which.min(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin3_486bf281a1e82b07ad35b247d7369c9d() {
        assertEval("argv <- list(NULL); .Internal(which.min(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin4_1bc7b4a571c1e2d2012691bb7c08f068() {
        assertEval("argv <- list(list()); .Internal(which.min(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin5_41a9a1ccc68a580857ce6de332825860() {
        assertEval("argv <- list(c(NA, 0.951840581382975, 0.805577027554469, 0.663985017923499, 0.53717416750558, 0.496765449963868, 0.472038350505409, 0.463306413812878, 0.485896454097402, 0.520777596351646, 0.524391122960607, 0.492063804965834, 0.513821989320989, 0.521702559081969, 0.533525525673351)); .Internal(which.min(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin6_1c622637b29a8cffa713c704cf8db17b() {
        assertEval("argv <- list(structure(c(NA, 87, 82, 75, 63, 50, 43, 32, 35, 60, 54, 55, 36, 39, NA, NA, 69, 57, 57, 51, 45, 37, 46, 39, 36, 24, 32, 23, 25, 32, NA, 32, 59, 74, 75, 60, 71, 61, 71, 57, 71, 68, 79, 73, 76, 71, 67, 75, 79, 62, 63, 57, 60, 49, 48, 52, 57, 62, 61, 66, 71, 62, 61, 57, 72, 83, 71, 78, 79, 71, 62, 74, 76, 64, 62, 57, 80, 73, 69, 69, 71, 64, 69, 62, 63, 46, 56, 44, 44, 52, 38, 46, 36, 49, 35, 44, 59, 65, 65, 56, 66, 53, 61, 52, 51, 48, 54, 49, 49, 61, NA, NA, 68, 44, 40, 27, 28, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts')); .Internal(which.min(argv[[1]]))");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin8_22fd81cf01f30d2d212de0ba7a3e637f() {
        assertEval("argv <- structure(list(x = c(NA, NA, Inf)), .Names = 'x');do.call('which.min', argv)");
    }

    @Test
    public void TestrGenBuiltinwithdefault_testwithdefault1_e007ba6ec7062ded3bb6ebf6205fa7cc() {
        assertEval("argv <- structure(list(data = structure(list(X = 22.1693750707316,     Y = -0.652127930273561, Z = 1.03034043827436, a = -2.66666666666667,     b = -10, c = 28), .Names = c('X', 'Y', 'Z', 'a', 'b', 'c')),     expr = expression({        dX <- a * X + Y * Z        dY <- b * (Y - Z)        dZ <- -X * Y + c * Y - Z        list(c(dX, dY, dZ))    })), .Names = c('data', 'expr'));do.call('with.default', argv)");
    }

    @Test
    public void TestrGenBuiltinwithin_testwithin1_848180660a72bcab410265b73db45ed4() {
        assertEval("argv <- structure(list(data = structure(list(a = 1:5, b = 2:6,     c = 3:7), .Names = c('a', 'b', 'c'), row.names = c(NA, -5L),     class = 'data.frame')), .Names = 'data');do.call('within', argv)");
    }

    @Test
    public void TestrGenBuiltinwriteLines_testwriteLines1_d6f43d236f0f017f994619383dfd8fbc() {
        assertEval("argv <- structure(list(text = ' \\'  A  \\'; \\'B\\' ;\\'C\\';\\' D \\';\\'E \\';  F  ;G  ',     con = 'foo'), .Names = c('text', 'con'));do.call('writeLines', argv)");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm1_3b92963ab424a885d5c6f528462f1f42() {
        assertEval("argv <- list(structure(c(4L, 5L, 3L, 2L, 1L), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm10_f8f0943e85c01d94ad9001ab6a6b8ffa() {
        assertEval("argv <- list(structure(c(-0.00456054471709705, -0.0386783362736307, -0.0164476694679408, -0.191054486056936, -0.648560736432306, -0.0674820314025517, -0.0740415039370447, -0.0243389397466521, -0.00751319716764208, -2.290078352999e-05, -0.0207911295071267, -0.0697881087827301, -0.00348607275095251, -0.00951045408299201, -0.00166106374745221, -0.0259659490166321, -0.0293880116898911, -0.0140288480262381, -0.0027358575950958, -0.000491817024731849, -0.00823790481253382, -0.00148071888751321, -0.00122448210109329, -0.0168483392795904, -0.0206872529040578, -0.000471241810355829, -0.00239800266383851, -0.00875711097940079, -0.0461679706262251, -0.0100810672498937, -0.0758745277496017, -0.0537304828043233, -0.0171367489531612, -0.01057973675541, -0.0676085282986778, -0.069201293818924, -0.00065957876422003, -1.97617272327839e-05, -0.00439039022584134), .Names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75')));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm11_726960ee2f1187190691a56ecc43c4b6() {
        assertEval("argv <- list(structure(list(c(2L, 10L, 0L), c(2L, 10L, 1L), c(2L, 10L, 1L, 1L), c(2L, 11L, 0L), c(2L, 11L, 1L), c(2L, 11L, 1L, 1L), c(2L, 12L, 0L), c(2L, 12L, 1L), c(2L, 12L, 2L), c(2L, 12L, 2L, 1L), c(2L, 13L, 0L), c(2L, 13L, 1L), c(2L, 13L, 2L), c(2L, 14L, 0L), c(2L, 14L, 1L), c(2L, 14L, 2L), c(2L, 15L, 0L), c(2L, 15L, 1L), c(2L, 15L, 2L), c(2L, 15L, 3L), c(3L, 0L, 0L), c(3L, 0L, 1L)), class = 'numeric_version'));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm12_81ff59eb39910cc2fe0d247d89009bc8() {
        assertEval("argv <- list(structure(list(c(2L, 11L, 0L)), class = 'numeric_version'));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm13_ff0a798c69ed5b019fef5b0c5ebdf27f() {
        assertEval("argv <- list(structure(c(607L, 30L, 3L, 11L, 44L, 67L, 17L, 16L, 67L, 6L, 1L, 13L, 672L, 46L, 8L, 18L, 10L, 22L, 16L, 5L, 55L, 2L), .Dim = 22L, .Dimnames = structure(list(c('BUG FIXES', 'C-LEVEL FACILITIES', 'CODE MIGRATION', 'COMPRESSION', 'DEPRECATED & DEFUNCT', 'DEPRECATED AND DEFUNCT', 'GRAPHICS DEVICES', 'HELP & Rd FILE CHANGES', 'INSTALLATION', 'INTERNATIONALIZATION', 'LICENCE', 'LONG VECTORS', 'NEW FEATURES', 'PACKAGE INSTALLATION', 'PACKAGE parallel', 'PERFORMANCE IMPROVEMENTS', 'REGULAR EXPRESSIONS', 'SIGNIFICANT USER-VISIBLE CHANGES', 'SWEAVE & VIGNETTES', 'SWEAVE CHANGES', 'UTILITIES', 'WINDOWS-SPECIFIC CHANGES')), .Names = ''), class = 'table'));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm15_8541016496aacf9a5f574ea002ea5f39() {
        assertEval("argv <- list(structure(1:3, id = 'An Example', class = structure('numWithId',     package = '.GlobalEnv')));do.call('xtfrm', argv)");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm2_b94a50966ea5e19698742d3e4c472f73() {
        assertEval("argv <- list(structure(c('Tukey', 'Venables', 'Tierney', 'Ripley', 'Ripley', 'McNeil', 'R Core'), class = 'AsIs'));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm3_97dbd1c548746bab47ac2deb0726f3c6() {
        assertEval("argv <- list(c('9', '9', '8', '7', '6', '5', '4', '3', '2', '1'));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm4_96c35e16b58d24b3e6506531adb92c89() {
        assertEval("argv <- list(list());xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm5_1717ab01bb2368f6d10a950d12bf9feb() {
        assertEval("argv <- list(NULL);xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm6_469f3bdc584c134e8095e29b6e93181f() {
        assertEval("argv <- list(structure(c(11354, 11382, 11413), class = 'Date'));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm7_dff11923cc8e38d39e14a1d82396b6ed() {
        assertEval("argv <- list(structure(1:3, id = 'An Example', class = structure('numWithId', package = '.GlobalEnv')));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm8_1f852c9d39f4b7de7a4f70b94b8477c1() {
        assertEval("argv <- list(structure(1:48, .Label = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48'), class = 'factor'));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm9_5cc89686f3f0feb71aa223976d6bfa28() {
        assertEval("argv <- list(structure(c(0.00318983494910604, -0.0111499005186203, -0.00684577108225438, -0.0259425874127965, 0.0236273472621072, 0.0160653568112268, 0.0169512728197135, -0.0108668370208327, 0.0075620519889718, 0.000382355180538597, 0.0147085004994818, -0.0237528559595188, -0.00450253418485462, -0.00933970368616398, -0.00295998622541489, -0.0142621134100646, 0.0149334478604598, 0.0102146485133766, 0.00423575454949581, -0.00284331639280456, 0.0113535382887161, -0.00395897382574548, -0.00413390950862867, -0.0165713012838917, -0.018012405938438, 0.00225076128639717, 0.00786949110453678, 0.00890171601854386, 0.0241231688586559, 0.0104325796748375, 0.0267124035293778, -0.0242586202225146, 0.011564413201586, -0.00791916545648325, -0.020000071186273, -0.0160024870044187, 0.00243365269147765, 0.000371702019451462, 0.00543854321166064), .Names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75')));xtfrm(argv[[1]]);");
    }

    @Test
    public void TestrGenBuiltinxtfrmdefault_testxtfrmdefault1_279c8e29341f8e7b1b03093beced41c9() {
        assertEval("argv <- structure(list(x = structure(1:3, id = 'An Example',     class = structure('numWithId', package = '.GlobalEnv'))),     .Names = 'x');do.call('xtfrm.default', argv)");
    }

}

