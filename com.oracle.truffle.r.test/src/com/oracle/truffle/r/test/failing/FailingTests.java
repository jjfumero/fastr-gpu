// DO NOT EDIT, update using 'mx rignoredtests'
// This contains a copy of the @Ignore tests one micro-test per method
package com.oracle.truffle.r.test.failing;

import java.util.*;

import org.junit.*;

import com.oracle.truffle.r.test.*;

//Checkstyle: stop
public class FailingTests extends TestBase {

    private static final ArrayList<String> passingTests = new ArrayList<>();

    private static void check(String name) {
        if (!microTestFailed) {
            passingTests.add(name);
        }
        microTestFailed = false;
    }

    @AfterClass
    public static void afterClass() {
        for (String test : passingTests) {
            System.out.println("passing: " + test);
        }
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_e56646664ed3ccebd0b978a474ccae3c() {
        assertEvalWarning("{ x <- 2147483647L ; x + 1L }");
        check("TestSimpleArithmetic_testIntegerOverflow_e56646664ed3ccebd0b978a474ccae3c");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_9cc3316d11cb57fdb9d71e833e43dcd6() {
        assertEvalWarning("{ x <- 2147483647L ; x * x }");
        check("TestSimpleArithmetic_testIntegerOverflow_9cc3316d11cb57fdb9d71e833e43dcd6");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_a5d2e40a03d44363ee0bf4afb8a3a70d() {
        assertEvalWarning("{ x <- -2147483647L ; x - 2L }");
        check("TestSimpleArithmetic_testIntegerOverflow_a5d2e40a03d44363ee0bf4afb8a3a70d");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_52bf15e78c97dfea203e3a3a75c0c096() {
        assertEvalWarning("{ x <- -2147483647L ; x - 1L }");
        check("TestSimpleArithmetic_testIntegerOverflow_52bf15e78c97dfea203e3a3a75c0c096");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_4a27f3f0ef1c0e73ea1ae4a599818778() {
        assertEvalWarning("{ 2147483647L + 1:3 }");
        check("TestSimpleArithmetic_testIntegerOverflow_4a27f3f0ef1c0e73ea1ae4a599818778");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_d17b51eaa8f9d85088d30f7b59888e01() {
        assertEvalWarning("{ 2147483647L + c(1L,2L,3L) }");
        check("TestSimpleArithmetic_testIntegerOverflow_d17b51eaa8f9d85088d30f7b59888e01");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_a208f558c3d55c2d86aa5cfe699b218a() {
        assertEvalWarning("{ 1:3 + 2147483647L }");
        check("TestSimpleArithmetic_testIntegerOverflow_a208f558c3d55c2d86aa5cfe699b218a");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_1444a6f9919138380d32057ddfa36eec() {
        assertEvalWarning("{ c(1L,2L,3L) + 2147483647L }");
        check("TestSimpleArithmetic_testIntegerOverflow_1444a6f9919138380d32057ddfa36eec");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_dd77dbcef3cf523fc2aa46c4c0deaf5c() {
        assertEvalWarning("{ 1:3 + c(2147483647L,2147483647L,2147483647L) }");
        check("TestSimpleArithmetic_testIntegerOverflow_dd77dbcef3cf523fc2aa46c4c0deaf5c");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_72a5d4dd67ed5a21396516c0968edf6e() {
        assertEvalWarning("{ c(2147483647L,2147483647L,2147483647L) + 1:3 }");
        check("TestSimpleArithmetic_testIntegerOverflow_72a5d4dd67ed5a21396516c0968edf6e");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_6fd7e6825d4c56f715061fbb7124628a() {
        assertEvalWarning("{ c(1L,2L,3L) + c(2147483647L,2147483647L,2147483647L) }");
        check("TestSimpleArithmetic_testIntegerOverflow_6fd7e6825d4c56f715061fbb7124628a");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_6b9734a08caf45fad14bde9d7b10a97c() {
        assertEvalWarning("{ c(2147483647L,2147483647L,2147483647L) + c(1L,2L,3L) }");
        check("TestSimpleArithmetic_testIntegerOverflow_6b9734a08caf45fad14bde9d7b10a97c");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_8b60212b3b68acfddf00f22ea65883db() {
        assertEvalWarning("{ 1:4 + c(2147483647L,2147483647L) }");
        check("TestSimpleArithmetic_testIntegerOverflow_8b60212b3b68acfddf00f22ea65883db");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_ffe1faa265bec1af2b8c1f1c4d9fc343() {
        assertEvalWarning("{ c(2147483647L,2147483647L) + 1:4 }");
        check("TestSimpleArithmetic_testIntegerOverflow_ffe1faa265bec1af2b8c1f1c4d9fc343");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_8894beb2d0cbaf7303c2efa930d6684b() {
        assertEvalWarning("{ c(1L,2L,3L,4L) + c(2147483647L,2147483647L) }");
        check("TestSimpleArithmetic_testIntegerOverflow_8894beb2d0cbaf7303c2efa930d6684b");
    }

    @Test
    public void TestSimpleArithmetic_testIntegerOverflow_68d4c3db613629f473aa7128bff2c5a8() {
        assertEvalWarning("{ c(2147483647L,2147483647L) + c(1L,2L,3L,4L) }");
        check("TestSimpleArithmetic_testIntegerOverflow_68d4c3db613629f473aa7128bff2c5a8");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplexIgnore_274e34fe67c827c3a3481eeb929fd942() {
        assertEval("{ (1+2i)^(-2) }");
        check("TestSimpleArithmetic_testScalarsComplexIgnore_274e34fe67c827c3a3481eeb929fd942");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplexIgnore_685e18553e73232fd903f34faa58ec02() {
        assertEval("{ ((1+0i)/(0+0i)) ^ (-3) }");
        check("TestSimpleArithmetic_testScalarsComplexIgnore_685e18553e73232fd903f34faa58ec02");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsComplexIgnore_a86889b885428d4aeed5f5abec2fb487() {
        assertEval("{ ((1+1i)/(0+0i)) ^ (-3) }");
        check("TestSimpleArithmetic_testScalarsComplexIgnore_a86889b885428d4aeed5f5abec2fb487");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRealIgnore_706f889093f4841d307059b60cb81c13() {
        assertEval("{ 1000000000*100000000000 }");
        check("TestSimpleArithmetic_testScalarsRealIgnore_706f889093f4841d307059b60cb81c13");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRealIgnore_85c78d2d490e3d28bc72254fbec91949() {
        assertEval("{ 1000000000L*1000000000 }");
        check("TestSimpleArithmetic_testScalarsRealIgnore_85c78d2d490e3d28bc72254fbec91949");
    }

    @Test
    public void TestSimpleArithmetic_testScalarsRealIgnore_846b21508ff7d445e01b13f78cc32dba() {
        assertEval("{ 1000000000L*1000000000L }");
        check("TestSimpleArithmetic_testScalarsRealIgnore_846b21508ff7d445e01b13f78cc32dba");
    }

    @Test
    public void TestSimpleArithmetic_testVectorizedLogicalAttributesIgnore_6ca96306ddcf6d79c3645b1dcdb13321() {
        assertEval("{ x<-1:4; dim(x)<-c(2,2); y<-21:28; x | y }");
        check("TestSimpleArithmetic_testVectorizedLogicalAttributesIgnore_6ca96306ddcf6d79c3645b1dcdb13321");
    }

    @Test
    public void TestSimpleAssignment_testAssignFunctionLookup1_af5ff7016009f392e234cca594160ea3() {
        assertEval("f <- function(b) { c <- 42; c(1,1); }; f(0); f(1)");
        check("TestSimpleAssignment_testAssignFunctionLookup1_af5ff7016009f392e234cca594160ea3");
    }

    @Test
    public void TestSimpleAssignment_testAssignFunctionLookup1_2346e3897adeba694188ec2ab21c1070() {
        assertEval("f <- function(b) { if (b) c <- 42; c(1,1); }; f(0); f(1)");
        check("TestSimpleAssignment_testAssignFunctionLookup1_2346e3897adeba694188ec2ab21c1070");
    }

    @Test
    public void TestSimpleAssignment_testAssignShadowBuiltin1_f2d5da3c45411e2c079849343ea84875() {
        assertEval("f <- function(b) { c <- function(x,y) 42; c(1,1); }; f(0); f(1)");
        check("TestSimpleAssignment_testAssignShadowBuiltin1_f2d5da3c45411e2c079849343ea84875");
    }

    @Test
    public void TestSimpleAssignment_testAssignShadowBuiltin1_b9c9722029283827d0a91f19bac45918() {
        assertEval("f <- function(b) { if (b) c <- function(x,y) 42; c(1,1); }; f(0); f(1)");
        check("TestSimpleAssignment_testAssignShadowBuiltin1_b9c9722029283827d0a91f19bac45918");
    }

    @Test
    public void TestSimpleAttributes_testBuiltinPropagationIgnore_df9b3724960b222fffd20b6a1ef94ed5() {
        assertEval("{ m <- matrix(c(1,1,1,1), nrow=2) ; attr(m,\"a\") <- 1 ;  r <- eigen(m) ; r$vectors <- round(r$vectors, digits=5) ; r  }");
        check("TestSimpleAttributes_testBuiltinPropagationIgnore_df9b3724960b222fffd20b6a1ef94ed5");
    }

    @Test
    public void TestSimpleBuiltins_testAbsIgnore_261d7e173c1caffcac87b3030f93a81c() {
        assertEval("{ abs(c(0/0,1i)) }");
        check("TestSimpleBuiltins_testAbsIgnore_261d7e173c1caffcac87b3030f93a81c");
    }

    @Test
    public void TestSimpleBuiltins_testAbsIgnore_0ab2d0f2d7030b273cd0e45daf435b57() {
        assertEval("{ abs(1:3) }");
        check("TestSimpleBuiltins_testAbsIgnore_0ab2d0f2d7030b273cd0e45daf435b57");
    }

    @Test
    public void TestSimpleBuiltins_testAbsIgnore_eb0e93fa1cbdf12456e6b7c849b0f670() {
        assertEval("{ abs(-1:-3) }");
        check("TestSimpleBuiltins_testAbsIgnore_eb0e93fa1cbdf12456e6b7c849b0f670");
    }

    @Test
    public void TestSimpleBuiltins_testAbsIgnore_f9ca5d8354239b619dbd0b67d729e220() {
        assertEvalError("{ abs(NULL) }");
        check("TestSimpleBuiltins_testAbsIgnore_f9ca5d8354239b619dbd0b67d729e220");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_1cad38b2b58506e86b3faf337282af34() {
        assertEval("{ all(TRUE, TRUE, NA,  na.rm=TRUE) }");
        check("TestSimpleBuiltins_testAllIgnore_1cad38b2b58506e86b3faf337282af34");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_2b56cf245fc3518ca8c3daa8c70c7441() {
        assertEval("{ all(1) }");
        check("TestSimpleBuiltins_testAllIgnore_2b56cf245fc3518ca8c3daa8c70c7441");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_91a6f9d5d41dc450755861f6e318c869() {
        assertEval("{ all(0) }");
        check("TestSimpleBuiltins_testAllIgnore_91a6f9d5d41dc450755861f6e318c869");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_b5c51ccc3f58394e01320c7b59736d24() {
        assertEval("{ all(TRUE,c(TRUE,TRUE),1) }");
        check("TestSimpleBuiltins_testAllIgnore_b5c51ccc3f58394e01320c7b59736d24");
    }

    @Test
    public void TestSimpleBuiltins_testAllIgnore_e11f439dffd428996b1d680fede13a41() {
        assertEval("{ all(TRUE,c(TRUE,TRUE),1,0) }");
        check("TestSimpleBuiltins_testAllIgnore_e11f439dffd428996b1d680fede13a41");
    }

    @Test
    public void TestSimpleBuiltins_testAnyIgnore_a5514afb3c27ad5fad71696cb1db96a9() {
        assertEval("{ any(FALSE, NA,  na.rm=TRUE) }");
        check("TestSimpleBuiltins_testAnyIgnore_a5514afb3c27ad5fad71696cb1db96a9");
    }

    @Test
    public void TestSimpleBuiltins_testAnyIgnore_91043dd22cb7d3aab79a22019a52ea3f() {
        assertEvalWarning("{ any(1) }");
        check("TestSimpleBuiltins_testAnyIgnore_91043dd22cb7d3aab79a22019a52ea3f");
    }

    @Test
    public void TestSimpleBuiltins_testAnyIgnore_b0a96f7fb16a6bf50fba85a11a8da034() {
        assertEvalWarning("{ any(0) }");
        check("TestSimpleBuiltins_testAnyIgnore_b0a96f7fb16a6bf50fba85a11a8da034");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_c803fc23a52fdc9950e5603f439b132f() {
        assertEval("{ as.character(list(1,2,3)) }");
        check("TestSimpleBuiltins_testAsCharacterIgnore_c803fc23a52fdc9950e5603f439b132f");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_03efd474c6b2ac63cfa1f6d497c9cf80() {
        assertEval("{ as.character(list(c(\"hello\", \"hi\"))) }");
        check("TestSimpleBuiltins_testAsCharacterIgnore_03efd474c6b2ac63cfa1f6d497c9cf80");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_2f45a0dc44e788e9eaea83ed3fc488ad() {
        assertEval("{ as.character(list(list(c(\"hello\", \"hi\")))) }");
        check("TestSimpleBuiltins_testAsCharacterIgnore_2f45a0dc44e788e9eaea83ed3fc488ad");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_f0e99f0b6485990390645c5a6f6b13c3() {
        assertEval("{ as.character(list(c(2L, 3L))) }");
        check("TestSimpleBuiltins_testAsCharacterIgnore_f0e99f0b6485990390645c5a6f6b13c3");
    }

    @Test
    public void TestSimpleBuiltins_testAsCharacterIgnore_2ef5afd90d532194c1e0775974b91525() {
        assertEval("{ as.character(list(c(2L, 3L, 5L))) }");
        check("TestSimpleBuiltins_testAsCharacterIgnore_2ef5afd90d532194c1e0775974b91525");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplexIgnore_a234b535de865dc1374d86dc2a304cb0() {
        assertEval("{ as.complex(\"1e10+5i\") }");
        check("TestSimpleBuiltins_testAsComplexIgnore_a234b535de865dc1374d86dc2a304cb0");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplexIgnore_f959c2432167aba7516572589c2a297b() {
        assertEval("{ as.complex(\"-.1e10+5i\") }");
        check("TestSimpleBuiltins_testAsComplexIgnore_f959c2432167aba7516572589c2a297b");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplexIgnore_4fff4d142baeef1724a393317f422bfe() {
        assertEval("{ as.complex(\"1e-2+3i\") }");
        check("TestSimpleBuiltins_testAsComplexIgnore_4fff4d142baeef1724a393317f422bfe");
    }

    @Test
    public void TestSimpleBuiltins_testAsComplexIgnore_ca81945b0033de54e397d1df1719f69a() {
        assertEval("{ as.complex(\"+.1e+2-3i\") }");
        check("TestSimpleBuiltins_testAsComplexIgnore_ca81945b0033de54e397d1df1719f69a");
    }

    @Test
    public void TestSimpleBuiltins_testCatIgnore_f979ff1eaf80c178d2d1b3159eb94792() {
        assertEvalNoNL("{ cat(c(\"a\", \"b\", \"c\"), \"d\", sep=c(\"-\", \"+\")) }");
        check("TestSimpleBuiltins_testCatIgnore_f979ff1eaf80c178d2d1b3159eb94792");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_864e89c688384c8cc67d1b4676ff314d() {
        assertEval("{ tolower(1E100) }");
        check("TestSimpleBuiltins_testCharUtilsIgnore_864e89c688384c8cc67d1b4676ff314d");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_69433b6491feff8204434af6a79f9307() {
        assertEval("{ toupper(1E100) }");
        check("TestSimpleBuiltins_testCharUtilsIgnore_69433b6491feff8204434af6a79f9307");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_8f5f00293e9bfb6ac9aab0e3e6c88cf8() {
        assertEval("{ m <- matrix(\"hi\") ; toupper(m) }");
        check("TestSimpleBuiltins_testCharUtilsIgnore_8f5f00293e9bfb6ac9aab0e3e6c88cf8");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_e5ad5f71aaa8302b8bcddddde53fd68e() {
        assertEval("{ toupper(c(a=\"hi\", \"hello\")) }");
        check("TestSimpleBuiltins_testCharUtilsIgnore_e5ad5f71aaa8302b8bcddddde53fd68e");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_ec31b79bc63b78f141adde800c2de5ab() {
        assertEval("{ tolower(c(a=\"HI\", \"HELlo\")) }");
        check("TestSimpleBuiltins_testCharUtilsIgnore_ec31b79bc63b78f141adde800c2de5ab");
    }

    @Test
    public void TestSimpleBuiltins_testCharUtilsIgnore_ddbafed30934d43a3a0e4862fb6bd0db() {
        assertEval("{ tolower(NA) }");
        check("TestSimpleBuiltins_testCharUtilsIgnore_ddbafed30934d43a3a0e4862fb6bd0db");
    }

    @Test
    public void TestSimpleBuiltins_testChol_0c871276d1ef0a12733f4763eca31305() {
        assertEval("{ chol(1) }");
        check("TestSimpleBuiltins_testChol_0c871276d1ef0a12733f4763eca31305");
    }

    @Test
    public void TestSimpleBuiltins_testChol_56c7d9d1a9d02d3730de6ef5e4b085b8() {
        assertEval("{ round( chol(10), digits=5) }");
        check("TestSimpleBuiltins_testChol_56c7d9d1a9d02d3730de6ef5e4b085b8");
    }

    @Test
    public void TestSimpleBuiltins_testChol_7b9b9fe7c5e51dfc97d44dd7ce4cc95a() {
        assertEval("{ m <- matrix(c(5,1,1,3),2) ; round( chol(m), digits=5 ) }");
        check("TestSimpleBuiltins_testChol_7b9b9fe7c5e51dfc97d44dd7ce4cc95a");
    }

    @Test
    public void TestSimpleBuiltins_testChol_887c0d3033dcb17c875cf7a89313563c() {
        assertEvalError("{ m <- matrix(c(5,-5,-5,3),2,2) ; chol(m) }");
        check("TestSimpleBuiltins_testChol_887c0d3033dcb17c875cf7a89313563c");
    }

    @Test
    public void TestSimpleBuiltins_testColIgnore_8406be06fb724e25d072bc0cda3c46f9() {
        assertEval("{ col(c(1,2,3)) }");
        check("TestSimpleBuiltins_testColIgnore_8406be06fb724e25d072bc0cda3c46f9");
    }

    @Test
    public void TestSimpleBuiltins_testColMeansIgnore_1e146b3cdde30114bb9bdd12bbfd4a51() {
        assertEval("{colMeans(matrix(c(NaN,4+5i,2+0i,5+10i),nrow=2,ncol=2), na.rm = TRUE)}");
        check("TestSimpleBuiltins_testColMeansIgnore_1e146b3cdde30114bb9bdd12bbfd4a51");
    }

    @Test
    public void TestSimpleBuiltins_testCombineBroken_d365e1ffe5f8c886f6d1911c69b3af00() {
        assertEval("{ c(1i,0/0) }");
        check("TestSimpleBuiltins_testCombineBroken_d365e1ffe5f8c886f6d1911c69b3af00");
    }

    @Test
    public void TestSimpleBuiltins_testComplexIgnore_6c296b051839b1865e7b24f04e0f89d5() {
        assertEval("{ x <- 1:2 ; attr(x,\"my\") <- 2 ; Im(x) }");
        check("TestSimpleBuiltins_testComplexIgnore_6c296b051839b1865e7b24f04e0f89d5");
    }

    @Test
    public void TestSimpleBuiltins_testComplexIgnore_ebb6e003d79ccc9419c0bbc4c4601d12() {
        assertEval("{ x <- c(1+2i,3-4i) ; attr(x,\"my\") <- 2 ; Im(x) }");
        check("TestSimpleBuiltins_testComplexIgnore_ebb6e003d79ccc9419c0bbc4c4601d12");
    }

    @Test
    public void TestSimpleBuiltins_testComplexIgnore_0a640363497df7e0fff841acd48b8679() {
        assertEval("{ x <- 1:2 ; attr(x,\"my\") <- 2 ; Re(x) }");
        check("TestSimpleBuiltins_testComplexIgnore_0a640363497df7e0fff841acd48b8679");
    }

    @Test
    public void TestSimpleBuiltins_testComplexIgnore_cd6019c801f0cbbb3b00ecbde91958c5() {
        assertEval("{ x <- c(1+2i,3-4i) ; attr(x,\"my\") <- 2 ; Re(x) }");
        check("TestSimpleBuiltins_testComplexIgnore_cd6019c801f0cbbb3b00ecbde91958c5");
    }

    @Test
    public void TestSimpleBuiltins_testCrossprodIgnore_3ef941ecde27e59a4984254d989a1d99() {
        assertEval("{ x <- matrix(c(NaN,2+3i,3,4+1i,5,NA), nrow=3); crossprod(x) }");
        check("TestSimpleBuiltins_testCrossprodIgnore_3ef941ecde27e59a4984254d989a1d99");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMaxIgnore_2f6f91ad8c5d7ca01467c196f33b080e() {
        assertEval("{ cummax(c(1+1i,2-3i,4+5i)) }");
        check("TestSimpleBuiltins_testCumulativeMaxIgnore_2f6f91ad8c5d7ca01467c196f33b080e");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMaxIgnore_80eddc53556e008ace29ab00e165f768() {
        assertEval("{ cummax(c(1+1i, NA, 2+3i)) }");
        check("TestSimpleBuiltins_testCumulativeMaxIgnore_80eddc53556e008ace29ab00e165f768");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMinIgnore_b5b948bfcb858f80485301067b4a3cb5() {
        assertEval("{ cummin(c(1+1i,2-3i,4+5i)) }");
        check("TestSimpleBuiltins_testCumulativeMinIgnore_b5b948bfcb858f80485301067b4a3cb5");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeMinIgnore_9fe29fb5f8789df82d6740ac7b77830f() {
        assertEval("{ cummin(c(1+1i, NA, 2+3i)) }");
        check("TestSimpleBuiltins_testCumulativeMinIgnore_9fe29fb5f8789df82d6740ac7b77830f");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_29fdcc5a5db08a57fa538ba6ea36df62() {
        assertEval("{ cumsum(c(1,2,3,0/0,5)) }");
        check("TestSimpleBuiltins_testCumulativeSumBroken_29fdcc5a5db08a57fa538ba6ea36df62");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_c4e74421afc1541ec09c1258dd016111() {
        assertEval("{ cumsum(c(1,0/0,5+1i)) }");
        check("TestSimpleBuiltins_testCumulativeSumBroken_c4e74421afc1541ec09c1258dd016111");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_c798b06052d4528aca37769d38a0f9af() {
        assertEval("{ cumsum(as.raw(1:6)) }");
        check("TestSimpleBuiltins_testCumulativeSumBroken_c798b06052d4528aca37769d38a0f9af");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_24579242149f490e91e8b1b7fc76f4e9() {
        assertEval("{ cumsum(rep(1e308, 3) ) }");
        check("TestSimpleBuiltins_testCumulativeSumBroken_24579242149f490e91e8b1b7fc76f4e9");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_9e68f6a2cfecca2814fd572d9d3dc519() {
        assertEval("{ cumsum(c(1e308, 1e308, NA, 1, 2)) }");
        check("TestSimpleBuiltins_testCumulativeSumBroken_9e68f6a2cfecca2814fd572d9d3dc519");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_e1af5bf2238f58b9e00ba5f815e46a59() {
        assertEval("{ cumsum(c(2000000000L, 2000000000L)) }");
        check("TestSimpleBuiltins_testCumulativeSumBroken_e1af5bf2238f58b9e00ba5f815e46a59");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_e41ac0de20a9dba0b5c5c897e46d2ddb() {
        assertEval("{ cumsum(c(-2147483647L, -1L)) }");
        check("TestSimpleBuiltins_testCumulativeSumBroken_e41ac0de20a9dba0b5c5c897e46d2ddb");
    }

    @Test
    public void TestSimpleBuiltins_testCumulativeSumBroken_598bb2dd748d2cd878a7312e7a0935c9() {
        assertEval("{ cumsum((1:6)*(1+1i)) }");
        check("TestSimpleBuiltins_testCumulativeSumBroken_598bb2dd748d2cd878a7312e7a0935c9");
    }

    @Test
    public void TestSimpleBuiltins_testDateIgnore_dc2d15503c397a52d19f8f822448e08d() {
        assertEval("{date()}");
        check("TestSimpleBuiltins_testDateIgnore_dc2d15503c397a52d19f8f822448e08d");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssignIgnore_79fb1d399e2b39a496dac5a9749fb873() {
        assertEval("{ h <- new.env(parent=emptyenv()) ; delayedAssign(\"x\", y, h, h) ; assign(\"y\", 2, h) ; get(\"x\", h) }");
        check("TestSimpleBuiltins_testDelayedAssignIgnore_79fb1d399e2b39a496dac5a9749fb873");
    }

    @Test
    public void TestSimpleBuiltins_testDelayedAssignIgnore_af327b1b6a16f6b664839a659452d6ff() {
        assertEval("{ h <- new.env(parent=emptyenv()) ; assign(\"x\", 1, h) ; delayedAssign(\"x\", y, h, h) ; assign(\"y\", 2, h) ; get(\"x\", h) }");
        check("TestSimpleBuiltins_testDelayedAssignIgnore_af327b1b6a16f6b664839a659452d6ff");
    }

    @Test
    public void TestSimpleBuiltins_testDeparseIgnore_9e5a5fc2f13f5ca564f74ada29302b9d() {
        assertEval("{ f <- function() 23 ; deparse(f) }");
        check("TestSimpleBuiltins_testDeparseIgnore_9e5a5fc2f13f5ca564f74ada29302b9d");
    }

    @Test
    public void TestSimpleBuiltins_testDeparseIgnore_ae0471e19b56e163c3b0f1d27722a535() {
        assertEval("{ deparse(nrow) }");
        check("TestSimpleBuiltins_testDeparseIgnore_ae0471e19b56e163c3b0f1d27722a535");
    }

    @Test
    public void TestSimpleBuiltins_testDeparseIgnore_dcfc3947162214c236e4caaf5dff89d7() {
        assertEval("{ e <- new.env(); assign(\"a\", 1, e); assign(\"b\", 2, e); le <- as.list(e); deparse(le)}");
        check("TestSimpleBuiltins_testDeparseIgnore_dcfc3947162214c236e4caaf5dff89d7");
    }

    @Test
    public void TestSimpleBuiltins_testDet_0119e3eeb33ab4a029ba7826ddc06536() {
        assertEval("{ det(matrix(c(1,2,4,5),nrow=2)) }");
        check("TestSimpleBuiltins_testDet_0119e3eeb33ab4a029ba7826ddc06536");
    }

    @Test
    public void TestSimpleBuiltins_testDet_5e1459250de6d93f03e5e5eaaccd1afc() {
        assertEval("{ det(matrix(c(1,-3,4,-5),nrow=2)) }");
        check("TestSimpleBuiltins_testDet_5e1459250de6d93f03e5e5eaaccd1afc");
    }

    @Test
    public void TestSimpleBuiltins_testDet_9c562345cefeea163f138973f9d0f2a1() {
        assertEval("{ det(matrix(c(1,0,4,NA),nrow=2)) }");
        check("TestSimpleBuiltins_testDet_9c562345cefeea163f138973f9d0f2a1");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_5f76ba83937083ccca6e7d8fca5c8d43() {
        assertEval("{ r <- eigen(matrix(rep(1,4), nrow=2), only.values=FALSE) ; round( r$vectors, digits=5 ) }");
        check("TestSimpleBuiltins_testEigen_5f76ba83937083ccca6e7d8fca5c8d43");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_3a0973319dd9e19b5d218165db6c191e() {
        assertEval("{ r <- eigen(matrix(rep(1,4), nrow=2), only.values=FALSE) ; round( r$values, digits=5 ) }");
        check("TestSimpleBuiltins_testEigen_3a0973319dd9e19b5d218165db6c191e");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_115e6b72c47df2b5d5700b273b70c533() {
        assertEval("{ eigen(10, only.values=FALSE) }");
        check("TestSimpleBuiltins_testEigen_115e6b72c47df2b5d5700b273b70c533");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_0449327e2827cfc14c352f69bb2d6863() {
        assertEval("{ r <- eigen(matrix(c(1,2,2,3), nrow=2), only.values=FALSE); round( r$vectors, digits=5 ) }");
        check("TestSimpleBuiltins_testEigen_0449327e2827cfc14c352f69bb2d6863");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_1807792fd12f35acb23589be46cf6b57() {
        assertEval("{ r <- eigen(matrix(c(1,2,2,3), nrow=2), only.values=FALSE); round( r$values, digits=5 ) }");
        check("TestSimpleBuiltins_testEigen_1807792fd12f35acb23589be46cf6b57");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_a7d1b10ab33353c276caf5c71013af50() {
        assertEval("{ r <- eigen(matrix(c(1,2,3,4), nrow=2), only.values=FALSE); round( r$vectors, digits=5 ) }");
        check("TestSimpleBuiltins_testEigen_a7d1b10ab33353c276caf5c71013af50");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_83d97801023043df2de8fa2831ea80e5() {
        assertEval("{ r <- eigen(matrix(c(1,2,3,4), nrow=2), only.values=FALSE); round( r$values, digits=5 ) }");
        check("TestSimpleBuiltins_testEigen_83d97801023043df2de8fa2831ea80e5");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_e1ef8addd5b3fea26321432b42bf54e5() {
        assertEval("{ r <- eigen(matrix(c(3,-2,4,-1), nrow=2), only.values=FALSE); round( r$vectors, digits=5 ) }");
        check("TestSimpleBuiltins_testEigen_e1ef8addd5b3fea26321432b42bf54e5");
    }

    @Test
    public void TestSimpleBuiltins_testEigen_19ec900b70611f935fb95e980df000f3() {
        assertEval("{ r <- eigen(matrix(c(3,-2,4,-1), nrow=2), only.values=FALSE); round( r$values, digits=5 ) }");
        check("TestSimpleBuiltins_testEigen_19ec900b70611f935fb95e980df000f3");
    }

    @Test
    public void TestSimpleBuiltins_testEnvironmentIgnore_14d25c1c38347070f388d2f433245dab() {
        assertEvalError("{ as.environment(as.environment) }");
        check("TestSimpleBuiltins_testEnvironmentIgnore_14d25c1c38347070f388d2f433245dab");
    }

    @Test
    public void TestSimpleBuiltins_testEvalIgnore_f79ee7a886f19a4068d7065c3fd49edf() {
        assertEval("eval({ xx <- pi; xx^2}) ; xx");
        check("TestSimpleBuiltins_testEvalIgnore_f79ee7a886f19a4068d7065c3fd49edf");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_8e866be378d6495f8d649996dcb5bb3c() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x > \"a\" }");
        check("TestSimpleBuiltins_testFactorIgnore_8e866be378d6495f8d649996dcb5bb3c");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_cab09968ee0783bc157730e05358ed0c() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x + \"a\" }");
        check("TestSimpleBuiltins_testFactorIgnore_cab09968ee0783bc157730e05358ed0c");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_7cd2b27121f6c77b417a436d60108819() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x > c(\"a\", \"b\") }");
        check("TestSimpleBuiltins_testFactorIgnore_7cd2b27121f6c77b417a436d60108819");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_a34678ac5082e00e15dd97ecd53f0e12() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\")); x + c(\"a\", \"b\") }");
        check("TestSimpleBuiltins_testFactorIgnore_a34678ac5082e00e15dd97ecd53f0e12");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_7b9d1da1c475fe180c3d19653a62003e() {
        assertEvalWarning("{ x<-factor(c(\"a\", \"b\", \"a\"), ordered=TRUE); x + \"a\" }");
        check("TestSimpleBuiltins_testFactorIgnore_7b9d1da1c475fe180c3d19653a62003e");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_e1f4890b0e585468d589f92e64e8fe43() {
        assertEvalWarning("{ x<-c(1L, 2L, 1L); class(x)<-c(\"factor\", \"ordered\"); levels(x)<-c(\"a\", \"b\"); x > \"a\" }");
        check("TestSimpleBuiltins_testFactorIgnore_e1f4890b0e585468d589f92e64e8fe43");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_442949c79222d476ad19ed8d25f6d67b() {
        assertEvalWarning("{ x<-c(1L, 2L, 1L); class(x)<-c(\"ordered\", \"factor\"); levels(x)<-c(\"a\", \"b\"); x + \"a\" }");
        check("TestSimpleBuiltins_testFactorIgnore_442949c79222d476ad19ed8d25f6d67b");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_b998c6b80f80df4ef39a60ff889bc0e4() {
        assertEvalWarning("{ x<-c(1L, 2L, 1L); class(x)<-c(\"factor\", \"ordered\"); levels(x)<-c(\"a\", \"b\"); x + \"a\" }");
        check("TestSimpleBuiltins_testFactorIgnore_b998c6b80f80df4ef39a60ff889bc0e4");
    }

    @Test
    public void TestSimpleBuiltins_testFactorIgnore_79abe62e1800fec0bdfb1ee89b43889b() {
        assertEvalWarning("{ x<-structure(c(1,2,1), .Label=c(\"a\", \"b\"), class = c('factor'), .Names=c(\"111\",\"112\",\"113\")); y<-structure(c(1,2,1), .Label=c(\"a\", \"b\"), class = c('factor'), .Names=c(\"111\",\"112\",\"113\")); x+y }");
        check("TestSimpleBuiltins_testFactorIgnore_79abe62e1800fec0bdfb1ee89b43889b");
    }

    @Test
    public void TestSimpleBuiltins_testFileListingIgnore_de580ef8e4242ba05e2ab96a9e21d936() {
        assertEval("{ list.files(\"test/r/simple/data/tree1\", pattern=\"*.tx\") }");
        check("TestSimpleBuiltins_testFileListingIgnore_de580ef8e4242ba05e2ab96a9e21d936");
    }

    @Test
    public void TestSimpleBuiltins_testIdenticalIgnore_0538458b54dce047351d6fe4728461d7() {
        assertEval("{ identical(0/0,1[2]) }");
        check("TestSimpleBuiltins_testIdenticalIgnore_0538458b54dce047351d6fe4728461d7");
    }

    @Test
    public void TestSimpleBuiltins_testIdenticalIgnore_e9828bc94f4f46dc68f975a39942f654() {
        assertEval("{ identical(list(1, list(2)), list(list(1), 1)) }");
        check("TestSimpleBuiltins_testIdenticalIgnore_e9828bc94f4f46dc68f975a39942f654");
    }

    @Test
    public void TestSimpleBuiltins_testIdenticalIgnore_1bd4e6954bc44911ff58137eb71e3c2c() {
        assertEval("{ identical(list(1, list(2)), list(1, list(2))) }");
        check("TestSimpleBuiltins_testIdenticalIgnore_1bd4e6954bc44911ff58137eb71e3c2c");
    }

    @Test
    public void TestSimpleBuiltins_testIdenticalIgnore_3dd8c26fc61d38a1308e5199dfaeb876() {
        assertEval("{ x <- 1 ; attr(x, \"my\") <- 10; identical(x, 1) }");
        check("TestSimpleBuiltins_testIdenticalIgnore_3dd8c26fc61d38a1308e5199dfaeb876");
    }

    @Test
    public void TestSimpleBuiltins_testIdenticalIgnore_905c81c2be1d34a4bba411f19c71b4ae() {
        assertEval("{ x <- 1 ; attr(x, \"my\") <- 10; y <- 1 ; attr(y, \"my\") <- 11 ; identical(x,y) }");
        check("TestSimpleBuiltins_testIdenticalIgnore_905c81c2be1d34a4bba411f19c71b4ae");
    }

    @Test
    public void TestSimpleBuiltins_testInheritsIgnore_d0dc6389c924878311546ba61d753a22() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, 2, c(TRUE)) ;}");
        check("TestSimpleBuiltins_testInheritsIgnore_d0dc6389c924878311546ba61d753a22");
    }

    @Test
    public void TestSimpleBuiltins_testInheritsIgnore_89e7444d88aeaed136ad761742bfd5e4() {
        assertEval("{x <- 10;class(x) <- c(\"a\", \"b\");inherits(x, \"a\", 1) ;}");
        check("TestSimpleBuiltins_testInheritsIgnore_89e7444d88aeaed136ad761742bfd5e4");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_6024770f1412c264dd004f2fa8bc6fbf() {
        assertEval("{ round( rnorm(1,), digits = 5 ) }");
        check("TestSimpleBuiltins_testInvocationIgnore_6024770f1412c264dd004f2fa8bc6fbf");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_e7dd2cd652f2b8c1a31a90832603d4c5() {
        assertEvalError("{ matrix(x=1) }");
        check("TestSimpleBuiltins_testInvocationIgnore_e7dd2cd652f2b8c1a31a90832603d4c5");
    }

    @Test
    public void TestSimpleBuiltins_testInvocationIgnore_53d1bf6a3bf98883a70a360da169055c() {
        assertEvalError("{ max(1,2,) }");
        check("TestSimpleBuiltins_testInvocationIgnore_53d1bf6a3bf98883a70a360da169055c");
    }

    @Test
    public void TestSimpleBuiltins_testIsFactorIgnore_9b6189d7740f2b58ed5ac90834facc44() {
        assertEval("{x<-1;class(x)<-\"factor\";is.factor(x)}");
        check("TestSimpleBuiltins_testIsFactorIgnore_9b6189d7740f2b58ed5ac90834facc44");
    }

    @Test
    public void TestSimpleBuiltins_testLogIgnore_052ed04e88403025c80c488866a0f346() {
        assertEval("{ m <- matrix(1:4, nrow=2) ; round( log10(m), digits=5 )  }");
        check("TestSimpleBuiltins_testLogIgnore_052ed04e88403025c80c488866a0f346");
    }

    @Test
    public void TestSimpleBuiltins_testLogIgnore_6568d70e4d076fc4b14b58158162a0ea() {
        assertEval("{ x <- c(a=1, b=10) ; round( c(log(x), log10(x), log2(x)), digits=5 ) }");
        check("TestSimpleBuiltins_testLogIgnore_6568d70e4d076fc4b14b58158162a0ea");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_7623faf4c356905dacd205a8b10eac15() {
        assertEval("{ g <- function() { assign(\"myfunc\", function(i) { sum(i) });  f <- function() { lapply(2, \"myfunc\") } ; f() } ; g() }");
        check("TestSimpleBuiltins_testLookupIgnore_7623faf4c356905dacd205a8b10eac15");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_2c371d6a6d4b74a871402788dbf16cf8() {
        assertEval("{ myfunc <- function(i) { sum(i) } ; g <- function() { assign(\"z\", 1);  f <- function() { lapply(2, \"myfunc\") } ; f() } ; g() }");
        check("TestSimpleBuiltins_testLookupIgnore_2c371d6a6d4b74a871402788dbf16cf8");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_fc0e56627d1b08ab2d6c38875a68a1f0() {
        assertEval("{ g <- function() { f <- function() { assign(\"myfunc\", function(i) { sum(i) }); lapply(2, \"myfunc\") } ; f() } ; g() }");
        check("TestSimpleBuiltins_testLookupIgnore_fc0e56627d1b08ab2d6c38875a68a1f0");
    }

    @Test
    public void TestSimpleBuiltins_testLookupIgnore_2deae78feff592acd7d61159c8e39ea7() {
        assertEval("{ g <- function() { myfunc <- function(i) { i+i } ; f <- function() { lapply(2, \"myfunc\") } ; f() } ; g() }");
        check("TestSimpleBuiltins_testLookupIgnore_2deae78feff592acd7d61159c8e39ea7");
    }

    @Test
    public void TestSimpleBuiltins_testLowerTriangular_d0f253a7c6e1e06bb5cf39dbff9f01da() {
        assertEval("{ m <- matrix(1:6, nrow=2) ;  lower.tri(m, diag=TRUE) }");
        check("TestSimpleBuiltins_testLowerTriangular_d0f253a7c6e1e06bb5cf39dbff9f01da");
    }

    @Test
    public void TestSimpleBuiltins_testLowerTriangular_0ba0d133686dd0481614017fbd5e5b41() {
        assertEval("{ m <- matrix(1:6, nrow=2) ;  lower.tri(m, diag=FALSE) }");
        check("TestSimpleBuiltins_testLowerTriangular_0ba0d133686dd0481614017fbd5e5b41");
    }

    @Test
    public void TestSimpleBuiltins_testLowerTriangular_44ba325a12bc689011ed5350658dabb6() {
        assertEval("{ lower.tri(1:3, diag=TRUE) }");
        check("TestSimpleBuiltins_testLowerTriangular_44ba325a12bc689011ed5350658dabb6");
    }

    @Test
    public void TestSimpleBuiltins_testLowerTriangular_29e7f74c119f3fd2dff006792c5fa9a1() {
        assertEval("{ lower.tri(1:3, diag=FALSE) }");
        check("TestSimpleBuiltins_testLowerTriangular_29e7f74c119f3fd2dff006792c5fa9a1");
    }

    @Test
    public void TestSimpleBuiltins_testMatMultIgnore_500c9fe5e23232d488b23dea0ffe60e6() {
        assertEval("{ matrix(c(3+3i,1-1i,2+2i,0-0i,1+1i,2-2i),2) %*% c(1+1i,0-0i,4+4i) }");
        check("TestSimpleBuiltins_testMatMultIgnore_500c9fe5e23232d488b23dea0ffe60e6");
    }

    @Test
    public void TestSimpleBuiltins_testMatMultIgnore_bd7d1161309480785b4881fa0f001408() {
        assertEval("{ c(1+1i,0-0i,4+4i) %*% matrix(c(3+3i,1-1i,2+2i,0-0i,1+1i,2-2i),3) }");
        check("TestSimpleBuiltins_testMatMultIgnore_bd7d1161309480785b4881fa0f001408");
    }

    @Test
    public void TestSimpleBuiltins_testMatrixIgnore_b8b7fe21147f05355c681ebdcad2082c() {
        assertEval("{ matrix(c(NaN,4+5i,2+0i,5+10i)} ");
        check("TestSimpleBuiltins_testMatrixIgnore_b8b7fe21147f05355c681ebdcad2082c");
    }

    @Test
    public void TestSimpleBuiltins_testMatrixIgnore_f5dba0a59ab80b80d211e6e6fee198de() {
        assertEvalWarning("{ matrix(c(1,2,3,4),3,2) }");
        check("TestSimpleBuiltins_testMatrixIgnore_f5dba0a59ab80b80d211e6e6fee198de");
    }

    @Test
    public void TestSimpleBuiltins_testMatrixIgnore_8daf811c43e5de9f9027463997632ce6() {
        assertEvalWarning("{ matrix(1:4,3,2) }");
        check("TestSimpleBuiltins_testMatrixIgnore_8daf811c43e5de9f9027463997632ce6");
    }

    @Test
    public void TestSimpleBuiltins_testNArgsIgnore_ee082d552ee9efa22803929c01c73692() {
        assertEval("{  f <- function (a, b, c) { nargs() }; f(,,a) }");
        check("TestSimpleBuiltins_testNArgsIgnore_ee082d552ee9efa22803929c01c73692");
    }

    @Test
    public void TestSimpleBuiltins_testOuterIgnore_fa7bab756255d002e9b280b544ccabdb() {
        assertEval("{ foo <- function (x,y) { x + y * 1i } ; outer(3,3,\"foo\") }");
        check("TestSimpleBuiltins_testOuterIgnore_fa7bab756255d002e9b280b544ccabdb");
    }

    @Test
    public void TestSimpleBuiltins_testParen_499acebd19ac76555ed92ca7ecc3ec53() {
        assertEval("{ a = array(1,c(3,3,3)); (a[1,2,3] = 3) }");
        check("TestSimpleBuiltins_testParen_499acebd19ac76555ed92ca7ecc3ec53");
    }

    @Test
    public void TestSimpleBuiltins_testProdNa_75349670d382cb12b8cdbbfa32158e8a() {
        assertEval("{prod(c(2,4,NA))}");
        check("TestSimpleBuiltins_testProdNa_75349670d382cb12b8cdbbfa32158e8a");
    }

    @Test
    public void TestSimpleBuiltins_testProdNa_568e8381169ab3f99f187e83583f8455() {
        assertEval("{prod(c(2,4,3,NA),TRUE)}");
        check("TestSimpleBuiltins_testProdNa_568e8381169ab3f99f187e83583f8455");
    }

    @Test
    public void TestSimpleBuiltins_testProdNa_9bbd7d1d1e4ccf2057fefdbf93dd46a4() {
        assertEval("{prod(c(1,2,3,4,5,NA),FALSE)}");
        check("TestSimpleBuiltins_testProdNa_9bbd7d1d1e4ccf2057fefdbf93dd46a4");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_4c61546a62c6441af95effa50e76e062() {
        assertEval(" { x <- qr(cbind(1:10,2:11), LAPACK=TRUE) ; round( qr.coef(x, 1:10), digits=5 ) }");
        check("TestSimpleBuiltins_testQrIgnore_4c61546a62c6441af95effa50e76e062");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_0cb51ae181bc178bf223d49001723552() {
        assertEval("{ x <- qr(t(cbind(1:10,2:11)), LAPACK=TRUE) ; qr.coef(x, 1:2) }");
        check("TestSimpleBuiltins_testQrIgnore_0cb51ae181bc178bf223d49001723552");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_abe3bd72b9a9dc9279dace1511a3fac8() {
        assertEval("{ qr(10, LAPACK=TRUE) }");
        check("TestSimpleBuiltins_testQrIgnore_abe3bd72b9a9dc9279dace1511a3fac8");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_2e522fbe7c114da3cb368c5f7274cf12() {
        assertEval("{ round( qr(matrix(1:6,nrow=2), LAPACK=TRUE)$qr, digits=5) }");
        check("TestSimpleBuiltins_testQrIgnore_2e522fbe7c114da3cb368c5f7274cf12");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_eb7d6b94998592915901ccdc876f3e5e() {
        assertEval("{ x <- qr(c(3,1,2), LAPACK=TRUE) ; round( qr.coef(x, c(1,3,2)), digits=5 ) }");
        check("TestSimpleBuiltins_testQrIgnore_eb7d6b94998592915901ccdc876f3e5e");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_b833c099f54f44df2488c463c5977c69() {
        assertEval("{ x <- qr(t(cbind(1:10,2:11)), LAPACK=FALSE) ; qr.coef(x, 1:2) }");
        check("TestSimpleBuiltins_testQrIgnore_b833c099f54f44df2488c463c5977c69");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_faacf8177a822d44074aa43fd81139d5() {
        assertEval("{ x <- qr(c(3,1,2), LAPACK=FALSE) ; round( qr.coef(x, c(1,3,2)), digits=5 ) }");
        check("TestSimpleBuiltins_testQrIgnore_faacf8177a822d44074aa43fd81139d5");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_e2d68b4592f13f68f031a68d95f80d75() {
        assertEval("{ round( qr.solve(qr(c(1,3,4,2)), c(1,2,3,4)), digits=5 ) }");
        check("TestSimpleBuiltins_testQrIgnore_e2d68b4592f13f68f031a68d95f80d75");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_46728c69e8381944b3e3b0272b971935() {
        assertEval("{ round( qr.solve(c(1,3,4,2), c(1,2,3,4)), digits=5) }");
        check("TestSimpleBuiltins_testQrIgnore_46728c69e8381944b3e3b0272b971935");
    }

    @Test
    public void TestSimpleBuiltins_testQrIgnore_cb5a4156797fb35468b2a52c03675858() {
        assertEvalError("{ x <- qr(cbind(1:10,2:11), LAPACK=TRUE) ; qr.coef(x, 1:2) }");
        check("TestSimpleBuiltins_testQrIgnore_cb5a4156797fb35468b2a52c03675858");
    }

    @Test
    public void TestSimpleBuiltins_testRank_ac4677bb60d34cb54b0855ff9af216fe() {
        assertEval("{ rank(c(10,100,100,1000)) }");
        check("TestSimpleBuiltins_testRank_ac4677bb60d34cb54b0855ff9af216fe");
    }

    @Test
    public void TestSimpleBuiltins_testRank_b661e996c8bab94a49a1b912170e269c() {
        assertEval("{ rank(c(1000,100,100,100, 10)) }");
        check("TestSimpleBuiltins_testRank_b661e996c8bab94a49a1b912170e269c");
    }

    @Test
    public void TestSimpleBuiltins_testRank_8119ffd7c473890dd5a8fb4bb4eb27dd() {
        assertEval("{ rank(c(a=2,b=1,c=3,40)) }");
        check("TestSimpleBuiltins_testRank_8119ffd7c473890dd5a8fb4bb4eb27dd");
    }

    @Test
    public void TestSimpleBuiltins_testRank_79652345882c62a61705a5fc72b80f6c() {
        assertEval("{ rank(c(a=2,b=1,c=3,d=NA,e=40), na.last=NA) }");
        check("TestSimpleBuiltins_testRank_79652345882c62a61705a5fc72b80f6c");
    }

    @Test
    public void TestSimpleBuiltins_testRank_d933b8b9599a925bdbfc61565085f049() {
        assertEval("{ rank(c(a=2,b=1,c=3,d=NA,e=40), na.last=\"keep\") }");
        check("TestSimpleBuiltins_testRank_d933b8b9599a925bdbfc61565085f049");
    }

    @Test
    public void TestSimpleBuiltins_testRank_920ad82c4f789e0f160e9bec2592a796() {
        assertEval("{ rank(c(a=2,b=1,c=3,d=NA,e=40), na.last=TRUE) }");
        check("TestSimpleBuiltins_testRank_920ad82c4f789e0f160e9bec2592a796");
    }

    @Test
    public void TestSimpleBuiltins_testRank_71d5d62deb1ac8f050666be28cc69770() {
        assertEval("{ rank(c(a=2,b=1,c=3,d=NA,e=40), na.last=FALSE) }");
        check("TestSimpleBuiltins_testRank_71d5d62deb1ac8f050666be28cc69770");
    }

    @Test
    public void TestSimpleBuiltins_testRank_25cc554304f5043b71318c6e7db78796() {
        assertEval("{ rank(c(a=1,b=1,c=3,d=NA,e=3), na.last=FALSE, ties.method=\"max\") }");
        check("TestSimpleBuiltins_testRank_25cc554304f5043b71318c6e7db78796");
    }

    @Test
    public void TestSimpleBuiltins_testRank_71c5bf762cec2ebaac51f86364fad786() {
        assertEval("{ rank(c(a=1,b=1,c=3,d=NA,e=3), na.last=NA, ties.method=\"min\") }");
        check("TestSimpleBuiltins_testRank_71c5bf762cec2ebaac51f86364fad786");
    }

    @Test
    public void TestSimpleBuiltins_testRank_4b9cea01de60a8694a6b5606f91cf6e5() {
        assertEval("{ rank(c(1000, 100, 100, NA, 1, 20), ties.method=\"first\") }");
        check("TestSimpleBuiltins_testRank_4b9cea01de60a8694a6b5606f91cf6e5");
    }

    @Test
    public void TestSimpleBuiltins_testRegExprComplex_2fca97d9886cab7c0e522032fbfaa9c4() {
        assertEval("gregexpr(\"(a)[^a]\\\\1\", c(\"andrea apart\", \"amadeus\", NA))");
        check("TestSimpleBuiltins_testRegExprComplex_2fca97d9886cab7c0e522032fbfaa9c4");
    }

    @Test
    public void TestSimpleBuiltins_testRegExprComplex_57c9bddc6da7a895a2d9c30bdf47b906() {
        assertEval("regexpr(\"(a)[^a]\\\\1\", c(\"andrea apart\", \"amadeus\", NA))");
        check("TestSimpleBuiltins_testRegExprComplex_57c9bddc6da7a895a2d9c30bdf47b906");
    }

    @Test
    public void TestSimpleBuiltins_testRegExprIgnore_72408e09ac9c484ede969026b2eec870() {
        assertEval("regexpr(\"e\",c(\"arm\",\"foot\",\"lefroo\", \"bafoobar\"))");
        check("TestSimpleBuiltins_testRegExprIgnore_72408e09ac9c484ede969026b2eec870");
    }

    @Test
    public void TestSimpleBuiltins_testRegExprIgnore_aed64085f066f3404115215e0fded1c4() {
        assertEval("gregexpr(\"e\",c(\"arm\",\"foot\",\"lefroo\", \"bafoobar\"))");
        check("TestSimpleBuiltins_testRegExprIgnore_aed64085f066f3404115215e0fded1c4");
    }

    @Test
    public void TestSimpleBuiltins_testRepIntIgnore_c27e773981d2951d5ec60b9e681b20f9() {
        assertEval("{ rep.int(c(1,2,3),c(2,8)) }");
        check("TestSimpleBuiltins_testRepIntIgnore_c27e773981d2951d5ec60b9e681b20f9");
    }

    @Test
    public void TestSimpleBuiltins_testRoundIgnore_bb594f5dd03efc19fa1dbee51b5324da() {
        assertEval("{ round(1.123456,digit=2.8) }");
        check("TestSimpleBuiltins_testRoundIgnore_bb594f5dd03efc19fa1dbee51b5324da");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeansIgnore_1d83557bfc6a9792419b6f87c844133e() {
        assertEval("{rowMeans(matrix(NA,NA,NA),TRUE)}");
        check("TestSimpleBuiltins_testRowMeansIgnore_1d83557bfc6a9792419b6f87c844133e");
    }

    @Test
    public void TestSimpleBuiltins_testRowMeansIgnore_80aaaab0a28cbb6472de7b973b40187b() {
        assertEval("{x<-matrix(c(\"1\",\"2\",\"3\",\"4\"),ncol=2);rowMeans(x)}");
        check("TestSimpleBuiltins_testRowMeansIgnore_80aaaab0a28cbb6472de7b973b40187b");
    }

    @Test
    public void TestSimpleBuiltins_testRowSumsIgnore_fc993b3be8ff0e09bc78bbb22bcf0aec() {
        assertEval("{x<-matrix(c(\"1\",\"2\",\"3\",\"4\"),ncol=2);rowSums(x)}");
        check("TestSimpleBuiltins_testRowSumsIgnore_fc993b3be8ff0e09bc78bbb22bcf0aec");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_ff42abcbf4f968c27e32a7dd28eda044() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\");x <- c(5) ; prob <- c(1, 2, 3, 4, 5) ; sample(x, 5, TRUE, prob) ; }");
        check("TestSimpleBuiltins_testSampleIgnore_ff42abcbf4f968c27e32a7dd28eda044");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_c0abb95d78ba54d518dba3716e78f683() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\");x <- c(5) ; prob <- c(1, 2, 3, 4, 5) ; sample(x, 5, FALSE, prob) ; }");
        check("TestSimpleBuiltins_testSampleIgnore_c0abb95d78ba54d518dba3716e78f683");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_c90feee3f3b3a20606e1b43eab8afb31() {
        assertEval("{ set.seed(4357, \"default\"); x <- c(5) ; prob <- c(1, 2, 3, 4, 5) ; sample(x, 5, TRUE, prob) ; }");
        check("TestSimpleBuiltins_testSampleIgnore_c90feee3f3b3a20606e1b43eab8afb31");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_18482bc15a1e30cd46e5be81317a3374() {
        assertEval("{ set.seed(4357, \"default\"); x <- c(5) ; prob <- c(1, 2, 3, 4, 5) ; sample(x, 5, FALSE, prob) ; }");
        check("TestSimpleBuiltins_testSampleIgnore_18482bc15a1e30cd46e5be81317a3374");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_38b963b6f50f4a4d9e1250d1df321b43() {
        assertEval("{ set.seed(4357, \"default\"); x <- 5 ; sample(x, 6, FALSE, NULL) ;}");
        check("TestSimpleBuiltins_testSampleIgnore_38b963b6f50f4a4d9e1250d1df321b43");
    }

    @Test
    public void TestSimpleBuiltins_testSampleIgnore_2935bb73d988381d4ae52f265101577a() {
        assertEval("{ set.seed(9567, \"Marsaglia-Multicarry\"); x <- 5 ; sample(x, 6, FALSE, NULL) ;}");
        check("TestSimpleBuiltins_testSampleIgnore_2935bb73d988381d4ae52f265101577a");
    }

    @Test
    public void TestSimpleBuiltins_testSetAttrIgnore_4c035922fa30fd65161fe53e1af97368() {
        assertEval("{ x <- NULL; levels(x)<-\"dog\"; levels(x)}");
        check("TestSimpleBuiltins_testSetAttrIgnore_4c035922fa30fd65161fe53e1af97368");
    }

    @Test
    public void TestSimpleBuiltins_testSource_5c17b4de1a98b4e6a8cfa7815d97f7e4() {
        assertEval("{ source(\"test/r/simple/data/tree2/setx.r\") ; x }");
        check("TestSimpleBuiltins_testSource_5c17b4de1a98b4e6a8cfa7815d97f7e4");
    }

    @Test
    public void TestSimpleBuiltins_testSource_d4a38dfd161547e3c0a27bad69e1cbf8() {
        assertEval("{ source(\"test/r/simple/data/tree2/setx.r\", local=TRUE) ; x }");
        check("TestSimpleBuiltins_testSource_d4a38dfd161547e3c0a27bad69e1cbf8");
    }

    @Test
    public void TestSimpleBuiltins_testSource_be101f4a7d5eb393d6100a7da3b04018() {
        assertEval("{ x <- 1; f <- function() { source(\"test/r/simple/data/tree2/setx.r\", local=TRUE) ; x } ; c(f(), x) }");
        check("TestSimpleBuiltins_testSource_be101f4a7d5eb393d6100a7da3b04018");
    }

    @Test
    public void TestSimpleBuiltins_testSource_f8c23fa44e5be57cccce50c2c2c77af6() {
        assertEval("{ x <- 1; f <- function() { source(\"test/r/simple/data/tree2/setx.r\", local=FALSE) ; x } ; c(f(), x) }");
        check("TestSimpleBuiltins_testSource_f8c23fa44e5be57cccce50c2c2c77af6");
    }

    @Test
    public void TestSimpleBuiltins_testSource_47529aa6f5e299a286137b552e7163dc() {
        assertEval("{ x <- 1; f <- function() { source(\"test/r/simple/data/tree2/incx.r\", local=FALSE) ; x } ; c(f(), x) }");
        check("TestSimpleBuiltins_testSource_47529aa6f5e299a286137b552e7163dc");
    }

    @Test
    public void TestSimpleBuiltins_testSource_e52eebdb86410e47576dc1c11b4690b0() {
        assertEval("{ x <- 1; f <- function() { source(\"test/r/simple/data/tree2/incx.r\", local=TRUE) ; x } ; c(f(), x) }");
        check("TestSimpleBuiltins_testSource_e52eebdb86410e47576dc1c11b4690b0");
    }

    @Test
    public void TestSimpleBuiltins_testSqrtBroken_cae4a927d1bb1f88b88550ba795899f5() {
        assertEval("{ sqrt(-1L) }");
        check("TestSimpleBuiltins_testSqrtBroken_cae4a927d1bb1f88b88550ba795899f5");
    }

    @Test
    public void TestSimpleBuiltins_testSqrtBroken_d1949f3b9fbc81f7fe02ad4b8719bcaa() {
        assertEval("{ sqrt(-1) }");
        check("TestSimpleBuiltins_testSqrtBroken_d1949f3b9fbc81f7fe02ad4b8719bcaa");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_0902579a0dce5fa8d7a808155b8c09b0() {
        assertEval("{ gsub(\"a\",\"aa\", \"prague alley\", fixed=TRUE) }");
        check("TestSimpleBuiltins_testSubIgnore_0902579a0dce5fa8d7a808155b8c09b0");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_fa9e3d4d6577b70532d26a56fc343b17() {
        assertEval("{ sub(\"a\",\"aa\", \"prague alley\", fixed=TRUE) }");
        check("TestSimpleBuiltins_testSubIgnore_fa9e3d4d6577b70532d26a56fc343b17");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_dca0ae0449dfa1c58f334818a4b87673() {
        assertEval("{ gsub(\"a\",\"aa\", \"prAgue alley\", fixed=TRUE) }");
        check("TestSimpleBuiltins_testSubIgnore_dca0ae0449dfa1c58f334818a4b87673");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_3d79a5bb75bf60e95350618f5485daa6() {
        assertEval("{ gsub(\"a\",\"aa\", \"prAgue alley\", fixed=TRUE, ignore.case=TRUE) }");
        check("TestSimpleBuiltins_testSubIgnore_3d79a5bb75bf60e95350618f5485daa6");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_d1977e782dbbd1ca4da912d5f56d63ed() {
        assertEval("{ gsub(\"a\",\"aa\", \"prAgue alley\", ignore.case=TRUE) }");
        check("TestSimpleBuiltins_testSubIgnore_d1977e782dbbd1ca4da912d5f56d63ed");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_fec73fb8a79be7e6b705d46bbc16a617() {
        assertEval("{ gsub(\"([a-e])\",\"\\\\1\\\\1\", \"prague alley\") }");
        check("TestSimpleBuiltins_testSubIgnore_fec73fb8a79be7e6b705d46bbc16a617");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_8df24d5d1e0149a6b232c373b6057aa7() {
        assertEval("{ gsub(\"h\",\"\", c(\"hello\", \"hi\", \"bye\")) }");
        check("TestSimpleBuiltins_testSubIgnore_8df24d5d1e0149a6b232c373b6057aa7");
    }

    @Test
    public void TestSimpleBuiltins_testSubIgnore_42529469f0a7019b2a56e1e5312e0577() {
        assertEval("{ gsub(\"h\",\"\", c(\"hello\", \"hi\", \"bye\"), fixed=TRUE) }");
        check("TestSimpleBuiltins_testSubIgnore_42529469f0a7019b2a56e1e5312e0577");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_d84d47dddb7bd0bf96bf16437eadd619() {
        assertEval("{ f <- function(y) { substitute(y) } ; f() }");
        check("TestSimpleBuiltins_testSubstituteIgnore_d84d47dddb7bd0bf96bf16437eadd619");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_b9b9e1994091af7e565e035d8c87b9ef() {
        assertEval("{ substitute(function(x, a) { x + a }, list(a = quote(x + y), x = 1)) }");
        check("TestSimpleBuiltins_testSubstituteIgnore_b9b9e1994091af7e565e035d8c87b9ef");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_9d646fcf10648fbae8e8087bb65a9bd6() {
        assertEval("{ substitute(a[x], list(a = quote(x + y), x = 1)) }");
        check("TestSimpleBuiltins_testSubstituteIgnore_9d646fcf10648fbae8e8087bb65a9bd6");
    }

    @Test
    public void TestSimpleBuiltins_testSubstituteIgnore_c46aeeda682d7d02536ec492e776a43a() {
        assertEval("{ substitute(x <- x + 1, list(x = 1) }");
        check("TestSimpleBuiltins_testSubstituteIgnore_c46aeeda682d7d02536ec492e776a43a");
    }

    @Test
    public void TestSimpleBuiltins_testSweepBroken_403bf44c1ac2aaf3d8cdb91d68b2345d() {
        assertEval("{ A <- matrix(1:50, nrow=4); sweep(A, 1, 5, '-') }");
        check("TestSimpleBuiltins_testSweepBroken_403bf44c1ac2aaf3d8cdb91d68b2345d");
    }

    @Test
    public void TestSimpleBuiltins_testSweepBroken_542d39a4358474b0ed5e7284b7652493() {
        assertEval("{ A <- matrix(7:1, nrow=5); sweep(A, 1, -1, '*') }");
        check("TestSimpleBuiltins_testSweepBroken_542d39a4358474b0ed5e7284b7652493");
    }

    @Test
    public void TestSimpleBuiltins_testSweepBroken_ee1961081fcfca53ea506fa81009d5b5() {
        assertEval("{rowMeans(matrix(c(NaN,4+5i,2+0i,5+10i),nrow=2,ncol=2), na.rm = FALSE)}");
        check("TestSimpleBuiltins_testSweepBroken_ee1961081fcfca53ea506fa81009d5b5");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_7cbf9b612d6ed31bbb101daf73e590f7() {
        assertEval("{ f <- function(x) sys.call() ; f(2) }");
        check("TestSimpleBuiltins_testSysCallIgnore_7cbf9b612d6ed31bbb101daf73e590f7");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_13208aaa10f5c6ede2ca1043542e65d3() {
        assertEval("{ f <- function(x) sys.call() ; g <- function() 23 ; f(g()) }");
        check("TestSimpleBuiltins_testSysCallIgnore_13208aaa10f5c6ede2ca1043542e65d3");
    }

    @Test
    public void TestSimpleBuiltins_testSysCallIgnore_f44ee9a6ea3efb3dd3af1c314ae8b266() {
        assertEval("{ (function() sys.call())() }");
        check("TestSimpleBuiltins_testSysCallIgnore_f44ee9a6ea3efb3dd3af1c314ae8b266");
    }

    @Test
    public void TestSimpleBuiltins_testSysNFrameIgnore_17d834568c640b6a0227e3d10a88da86() {
        assertEval("{ u <- function() sys.nframe() ; f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=u()) g(z) ; h() }");
        check("TestSimpleBuiltins_testSysNFrameIgnore_17d834568c640b6a0227e3d10a88da86");
    }

    @Test
    public void TestSimpleBuiltins_testSysParentsIgnore_6117cb26d3f09dce59533ba94919f49a() {
        assertEval("{ u <- function() sys.parents() ; f <- function(x) x ; g <- function(y) f(y) ; h <- function(z=u()) g(z) ; h() }");
        check("TestSimpleBuiltins_testSysParentsIgnore_6117cb26d3f09dce59533ba94919f49a");
    }

    @Test
    public void TestSimpleBuiltins_testTriangular_41ca685d92138926005a9f7fb6ca8478() {
        assertEval("{ m <- { matrix( as.character(1:6), nrow=2 ) } ; diag(m) <- c(1,2) ; m }");
        check("TestSimpleBuiltins_testTriangular_41ca685d92138926005a9f7fb6ca8478");
    }

    @Test
    public void TestSimpleBuiltins_testTriangular_f1776e942214f71194d5c31b1a80996e() {
        assertEval("{ m <- { matrix( (1:6) * (1+3i), nrow=2 ) } ; diag(m) <- c(1,2) ; m }");
        check("TestSimpleBuiltins_testTriangular_f1776e942214f71194d5c31b1a80996e");
    }

    @Test
    public void TestSimpleBuiltins_testTriangular_e3c989be96bfd58a83c33b08e911de62() {
        assertEval("{ m <- { matrix( as.raw(11:16), nrow=2 ) } ; diag(m) <- c(as.raw(1),as.raw(2)) ; m }");
        check("TestSimpleBuiltins_testTriangular_e3c989be96bfd58a83c33b08e911de62");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClassIgnore_de2b6cfc60c31afa53dbd74ec10d3136() {
        assertEval("{x<-c(1,2,3,4); class(x)<-\"array\"; class(x)<-\"matrix\";}");
        check("TestSimpleBuiltins_testUpdateClassIgnore_de2b6cfc60c31afa53dbd74ec10d3136");
    }

    @Test
    public void TestSimpleBuiltins_testUpdateClassIgnore_dfbd07abb7b6feb1f2afd25c4ad019ef() {
        assertEval("{x<-1;attr(x,\"class\")<-c(1,2,3);}");
        check("TestSimpleBuiltins_testUpdateClassIgnore_dfbd07abb7b6feb1f2afd25c4ad019ef");
    }

    @Test
    public void TestSimpleBuiltins_testUseMethodLocalVars_cd724107886a7c9d25ae3b6aad713cb6() {
        assertEval("{f <- function(x){ y<-2;locFun <- function(){cat(\"local\")}; UseMethod(\"f\"); }; f.second <- function(x){cat(\"f second\",x);locFun();}; obj <-1; attr(obj,\"class\")  <- \"second\"; f(obj);}");
        check("TestSimpleBuiltins_testUseMethodLocalVars_cd724107886a7c9d25ae3b6aad713cb6");
    }

    @Test
    public void TestSimpleDataFrames_testAsDataFrameIgnore_0f990604bed45f9a868ddd4f5616f9ee() {
        assertEvalError("{ x<-1; class(x)<-\"foo\"; y<-as.data.frame(x) }");
        check("TestSimpleDataFrames_testAsDataFrameIgnore_0f990604bed45f9a868ddd4f5616f9ee");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_6ff99329ff4c5405259dd094d456df82() {
        assertEval("{ x <- function(a,b) { a^b } ; f <- function() { x <- 211 ; sapply(1, x, 2) } ; f() }");
        check("TestSimpleFunctions_testDefinitionsIgnore_6ff99329ff4c5405259dd094d456df82");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_90214c174a4cd064fcdf43a64bba6f73() {
        assertEval("{ x <- function(a,b) { a^b } ; dummy <- sum ; f <- function() { x <- \"dummy\" ; sapply(1, x, 2) } ; f() }");
        check("TestSimpleFunctions_testDefinitionsIgnore_90214c174a4cd064fcdf43a64bba6f73");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_ba4a8d210d2bcdac8ede803b28c13172() {
        assertEval("{ x <- function(a,b) { a^b } ; dummy <- sum ; f <- function() { x <- \"dummy\" ; dummy <- 200 ; sapply(1, x, 2) } ; f() }");
        check("TestSimpleFunctions_testDefinitionsIgnore_ba4a8d210d2bcdac8ede803b28c13172");
    }

    @Test
    public void TestSimpleFunctions_testDefinitionsIgnore_1c3efc0657001d0ce5000a68b2e7b18d() {
        assertEval("{ foo <- function (x) { x } ; foo(1,2,3) }");
        check("TestSimpleFunctions_testDefinitionsIgnore_1c3efc0657001d0ce5000a68b2e7b18d");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_581191e3ee585752a4393b1dd5c20af3() {
        assertEval("{ f <- function(...) { substitute(..1) } ;  f(x+y) }");
        check("TestSimpleFunctions_testDotsIgnore_581191e3ee585752a4393b1dd5c20af3");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_a3678db1544ef8395deec4ed02acdb3d() {
        assertEvalError("{ g <- function(a,b,x) { a + b * x } ; f <- function(...) { g(x=4, ..., 10) }  ; f(b=1,a=2) }");
        check("TestSimpleFunctions_testDotsIgnore_a3678db1544ef8395deec4ed02acdb3d");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_76837b302e412d60cdec11289bac184b() {
        assertEvalError("{ lapply(1:3, \"dummy\") }");
        check("TestSimpleFunctions_testDotsIgnore_76837b302e412d60cdec11289bac184b");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_601a671e48fcffae9a23e5b3466aa324() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ..., x=2) } ; g(1) }");
        check("TestSimpleFunctions_testDotsIgnore_601a671e48fcffae9a23e5b3466aa324");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_c42cdbf8980cb24618b0e81c71c76f87() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ..., x=2,z=3) } ; g(1) }");
        check("TestSimpleFunctions_testDotsIgnore_c42cdbf8980cb24618b0e81c71c76f87");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_673e885ab1ad8a737dbc0b05d6a34eed() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ..., xxx=2) } ; g(1) }");
        check("TestSimpleFunctions_testDotsIgnore_673e885ab1ad8a737dbc0b05d6a34eed");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_4ef97fc6760900dfba4abef33ebb3620() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, xxx=2, ...) } ; g(1) }");
        check("TestSimpleFunctions_testDotsIgnore_4ef97fc6760900dfba4abef33ebb3620");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_3df181a7e78ef23b092f1aba322bbfa1() {
        assertEvalError("{ f <- function(a, barg, bextra, dummy) { a + barg } ; g <- function(...) { f(a=1, ...,,,) } ; g(1) }");
        check("TestSimpleFunctions_testDotsIgnore_3df181a7e78ef23b092f1aba322bbfa1");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_abcc928e40684f62d0ad26ee2f35b057() {
        assertEvalError("{ f <- function(...) { ..2 + ..2 } ; f(1,,2) }");
        check("TestSimpleFunctions_testDotsIgnore_abcc928e40684f62d0ad26ee2f35b057");
    }

    @Test
    public void TestSimpleFunctions_testDotsIgnore_408a647f1319d8f5216323761b223a47() {
        assertEvalError("{ f <- function(...) { ..1 + ..2 } ; f(1,,3) }");
        check("TestSimpleFunctions_testDotsIgnore_408a647f1319d8f5216323761b223a47");
    }

    @Test
    public void TestSimpleFunctions_testEmptyParamNameIgnore_4322ce67ff05a08129fa1498efde1fd9() {
        assertEvalError("{ function(''=123) 4 }");
        check("TestSimpleFunctions_testEmptyParamNameIgnore_4322ce67ff05a08129fa1498efde1fd9");
    }

    @Test
    public void TestSimpleFunctions_testErrorsIgnore_bf29c1dae99e04f8cd11a340f54e1287() {
        assertEvalError("{ f <- function(a,b,c,d) { a + b } ; f(1,x=1,2,3,4) }");
        check("TestSimpleFunctions_testErrorsIgnore_bf29c1dae99e04f8cd11a340f54e1287");
    }

    @Test
    public void TestSimpleFunctions_testErrorsIgnore_97c1046334e0c7a03ba92803615fccd6() {
        assertEvalError("{ x<-function(){1} ; x(y=1) }");
        check("TestSimpleFunctions_testErrorsIgnore_97c1046334e0c7a03ba92803615fccd6");
    }

    @Test
    public void TestSimpleFunctions_testErrorsIgnore_e45fc91400caff4d8a5596ec8cd2edfc() {
        assertEvalError("{ x<-function(y, b){1} ; x(y=1, 2, 3, z = 5) }");
        check("TestSimpleFunctions_testErrorsIgnore_e45fc91400caff4d8a5596ec8cd2edfc");
    }

    @Test
    public void TestSimpleFunctions_testErrorsIgnore_9c686da74e6a9bfda861ec6e834613e8() {
        assertEvalError("{ x<-function(a){1} ; x(1,) }");
        check("TestSimpleFunctions_testErrorsIgnore_9c686da74e6a9bfda861ec6e834613e8");
    }

    @Test
    public void TestSimpleFunctions_testErrorsIgnore_1f3190100b071debf5b11ed7f2fae959() {
        assertEvalError("{ f <- function(a,a) {1} }");
        check("TestSimpleFunctions_testErrorsIgnore_1f3190100b071debf5b11ed7f2fae959");
    }

    @Test
    public void TestSimpleFunctions_testFunctionPrintingIgnore_ce0b9f76f47f6752297f2228240d69f9() {
        assertEval("{ exists }");
        check("TestSimpleFunctions_testFunctionPrintingIgnore_ce0b9f76f47f6752297f2228240d69f9");
    }

    @Test
    public void TestSimpleLists_testListArgumentEvaluation_f62339e36ed620e527abf492790cea00() {
        assertEval("{ a <- c(0,0,0) ; f <- function() { g <- function() { a[2] <<- 9 } ; g() } ; u <- function() { a <- c(1,1,1) ; f() ; a } ; list(a,u()) }");
        check("TestSimpleLists_testListArgumentEvaluation_f62339e36ed620e527abf492790cea00");
    }

    @Test
    public void TestSimpleLoop_testLoops3Ignore_569178ca1ef4a4eb52481f6da3753a5a() {
        assertEval("{ l <- quote(for(i in s) { x <- i }) ; s <- 1:3 ; eval(l) ; s <- NULL ; eval(l) ; x }");
        check("TestSimpleLoop_testLoops3Ignore_569178ca1ef4a4eb52481f6da3753a5a");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrorsIgnore_f394e8f19fc73574a5c55ba7f8e03973() {
        assertEvalError("{ l <- quote(for(i in s) { x <- i }) ; s <- 1:3 ; eval(l) ; s <- function(){} ; eval(l) ; x }");
        check("TestSimpleLoop_testLoopsErrorsIgnore_f394e8f19fc73574a5c55ba7f8e03973");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrorsIgnore_2b1a508671083a1b18d0ddb3fe0979c2() {
        assertEvalError("{ l <- function(s) { for(i in s) { x <- i } ; x } ; l(1:3) ; s <- function(){} ; l(s) ; x }");
        check("TestSimpleLoop_testLoopsErrorsIgnore_2b1a508671083a1b18d0ddb3fe0979c2");
    }

    @Test
    public void TestSimpleLoop_testLoopsErrorsIgnore_eb72a8fa37e3e5c2ac10481c6173a724() {
        assertEvalError("{ l <- quote({ for(i in s) { x <- i } ; x }) ; f <- function(s) { eval(l) } ; f(1:3) ; s <- function(){} ; f(s) ; x }");
        check("TestSimpleLoop_testLoopsErrorsIgnore_eb72a8fa37e3e5c2ac10481c6173a724");
    }

    @Test
    public void TestSimpleVectors_testComplexIndexIgnore_ee8c1f9af263214be7bfa6591824f335() {
        assertEvalError("{ x<-c(1,2,3,4); x[[1+1i]]<-NULL }");
        check("TestSimpleVectors_testComplexIndexIgnore_ee8c1f9af263214be7bfa6591824f335");
    }

    @Test
    public void TestSimpleVectors_testListIndexIgnore_2223add8510c9d9c0c26ffc36fbf858e() {
        assertEvalError("{ z<-1:4; z[[list()]]<-NULL }");
        check("TestSimpleVectors_testListIndexIgnore_2223add8510c9d9c0c26ffc36fbf858e");
    }

    @Test
    public void TestSimpleVectors_testListUpdateIgnore_942201d73db7111f1ae9c68deaed4964() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ; f(list(1,2,list(3)), c(3,1), 4) ; f(c(1,2,3), 2L, NULL) }");
        check("TestSimpleVectors_testListUpdateIgnore_942201d73db7111f1ae9c68deaed4964");
    }

    @Test
    public void TestSimpleVectors_testListUpdateIgnore_b0c34f83e997bfdf47a82b1531934031() {
        assertEvalError("{ f <- function(b,i,v) { b[[i]] <- v ; b } ;  f(list(1,2,b=list(a=1)),c(\"b\",\"a\"),10) ; f(c(a=1,b=2),\"b\",NULL) }");
        check("TestSimpleVectors_testListUpdateIgnore_b0c34f83e997bfdf47a82b1531934031");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsNonDet_27d35661168c4e6b3bed381c312a2bc7() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1,1]]<-NULL; x }");
        check("TestSimpleVectors_testMoreVectorsNonDet_27d35661168c4e6b3bed381c312a2bc7");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsNonDet_f0678151c819bc4f3eb4dae6db644bec() {
        assertEvalError("{ b<-as.list(3:5); dim(b) <- c(1,3) ; b[[c(1,2)]] <- NULL ; b }");
        check("TestSimpleVectors_testMoreVectorsNonDet_f0678151c819bc4f3eb4dae6db644bec");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsNonDet_5aef7d4499818ad9eb2d54802279c67c() {
        assertEvalError("{ x<-c(1,2,3); x[[-4]]<-NULL }");
        check("TestSimpleVectors_testMoreVectorsNonDet_5aef7d4499818ad9eb2d54802279c67c");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsNonDet_bca1724c712508f88f83bf6d4187daee() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[as.raw(1), 1]]<-NULL }");
        check("TestSimpleVectors_testMoreVectorsNonDet_bca1724c712508f88f83bf6d4187daee");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_7ee80d10536234dea050bd3a45a963b1() {
        assertEval("{ x <- c(1); x[[-4]] <- NULL }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_7ee80d10536234dea050bd3a45a963b1");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_c24d10e5b756a7869655b4f8f0960bd4() {
        assertEval("{ x <- c(1,2,3); x[[-1]] <- NULL }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_c24d10e5b756a7869655b4f8f0960bd4");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_461a050f655ae44ddfc5d11f6a011e93() {
        assertEvalError("{ x<-1:4; x[[1]]<-NULL; x }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_461a050f655ae44ddfc5d11f6a011e93");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_5a63039e693f0bcdb40f33a133932ebd() {
        assertEvalError("{ x<-1:4; x[[0]]<-NULL; x }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_5a63039e693f0bcdb40f33a133932ebd");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_3b27f8602ed093e9302f1ed670a155cf() {
        assertEvalError("{ b<-3:5; dim(b) <- c(1,3) ; b[[c(1)]] <- NULL ; b }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_3b27f8602ed093e9302f1ed670a155cf");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_4b570d690c92236829b8974bae01fe3e() {
        assertEvalError("{ b<-3:5; dim(b) <- c(1,3) ; b[[0]] <- NULL ; b }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_4b570d690c92236829b8974bae01fe3e");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_fe5461bdd4035e24804d4c684b9bb20f() {
        assertEvalError("{ x <- integer() ; x[[NA]] <- NULL ; x }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_fe5461bdd4035e24804d4c684b9bb20f");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_f09061c93f11ca4a2ec5ecd4f85f7548() {
        assertEvalError("{ x <- c(1) ; x[[NA]] <- NULL ; x }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_f09061c93f11ca4a2ec5ecd4f85f7548");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_4eea10efa7dfc459fce3420e5cf8d9fc() {
        assertEvalError("{ x <- c(1,2) ; x[[NA]] <- NULL ; x }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_4eea10efa7dfc459fce3420e5cf8d9fc");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_ad453b3eec6a2d91d42ea4c78a0c9356() {
        assertEvalError("{ x <- c(1,2,3) ; x[[NA]] <- NULL ; x }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_ad453b3eec6a2d91d42ea4c78a0c9356");
    }

    @Test
    public void TestSimpleVectors_testMoreVectorsOtherIgnore_d5bbba1f1bb5b771dbc80175679415c5() {
        assertEvalError("{ x<-c(1,2,3,4); dim(x)<-c(2,2); x[[1]]<-NULL; x }");
        check("TestSimpleVectors_testMoreVectorsOtherIgnore_d5bbba1f1bb5b771dbc80175679415c5");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_e664dced4050c3b0ec79ddfad13762d3() {
        assertEval("{ x <- NULL; x[[0]] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_e664dced4050c3b0ec79ddfad13762d3");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_6623dfd61adfbed1969aa6def31d48bd() {
        assertEval("{ x <- NULL; x[[1]] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_6623dfd61adfbed1969aa6def31d48bd");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_115c835bb82f854eb9298f29030c50fb() {
        assertEval("{ x <- NULL; x[[c(1,0)]] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_115c835bb82f854eb9298f29030c50fb");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_d6b24d15ca8bbc2d8898f2893ee48922() {
        assertEval("{ x <- NULL; x[[c(1,2)]] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_d6b24d15ca8bbc2d8898f2893ee48922");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_2cb0c5508e6c5487d7ab3f34797f13b1() {
        assertEval("{ x <- NULL; x[[c(0,1)]] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_2cb0c5508e6c5487d7ab3f34797f13b1");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_54147238425f466cc178d17eae76ceda() {
        assertEval("{ x <- NULL; x[[c(0,2)]] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_54147238425f466cc178d17eae76ceda");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_9f6574f3776434274b3282c3b7cf4b9f() {
        assertEval("{ x <- NULL; x[[0]] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_9f6574f3776434274b3282c3b7cf4b9f");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_8cc751e6274d005bc4c6d552cc83eca0() {
        assertEval("{ x <- NULL; x[[1]] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_8cc751e6274d005bc4c6d552cc83eca0");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_a2f92f0914beffd008980e24f8d926a3() {
        assertEval("{ x <- NULL; x[[c(1,0)]] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_a2f92f0914beffd008980e24f8d926a3");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_a0030d7c00203e4877a612e07291cd0b() {
        assertEval("{ x <- NULL; x[[c(1,2)]] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_a0030d7c00203e4877a612e07291cd0b");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_0dca78f42826ed2ca5c82bb0dfcfe98d() {
        assertEval("{ x <- NULL; x[[c(0,1)]] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_0dca78f42826ed2ca5c82bb0dfcfe98d");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_9286dc5a5e867285d67162938029e66a() {
        assertEval("{ x <- NULL; x[[c(0,2)]] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_9286dc5a5e867285d67162938029e66a");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_2ff2bb5063043781e2dd4a5643e76e3f() {
        assertEval("{ x <- NULL; x[[0]] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_2ff2bb5063043781e2dd4a5643e76e3f");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_b642a755473c66405719474adff409b5() {
        assertEval("{ x <- NULL; x[[1]] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_b642a755473c66405719474adff409b5");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_64931012b5b20bfc8a8cf3d64429f520() {
        assertEval("{ x <- NULL; x[[c(1,0)]] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_64931012b5b20bfc8a8cf3d64429f520");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_111c7e91a1ec07a73078de391361e157() {
        assertEval("{ x <- NULL; x[[c(1,2)]] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_111c7e91a1ec07a73078de391361e157");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_057fc7addb0f7dc3a0e6c02e64fa2100() {
        assertEval("{ x <- NULL; x[[c(0,1)]] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_057fc7addb0f7dc3a0e6c02e64fa2100");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_b10a18e2590314639aab86131ed765c9() {
        assertEval("{ x <- NULL; x[[c(0,2)]] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_b10a18e2590314639aab86131ed765c9");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_eead23a44fc9d89e024143584819856b() {
        assertEval("{ x <- NULL; x[0] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_eead23a44fc9d89e024143584819856b");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_95c2d54d689c1811ed66aae4d8a4af71() {
        assertEval("{ x <- NULL; x[1] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_95c2d54d689c1811ed66aae4d8a4af71");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_4c0165b06588940c8aa1d829ff87f93a() {
        assertEval("{ x <- NULL; x[c(1,0)] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_4c0165b06588940c8aa1d829ff87f93a");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_a9d3ab6f0969676b3da1051c915b6f92() {
        assertEval("{ x <- NULL; x[c(1,2)] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_a9d3ab6f0969676b3da1051c915b6f92");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_3af3768ad0bdc831c3045b43219067af() {
        assertEval("{ x <- NULL; x[c(0,1)] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_3af3768ad0bdc831c3045b43219067af");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_950084e021745a08ae3e14d398be6b88() {
        assertEval("{ x <- NULL; x[c(0,2)] <- c(); x; }");
        check("TestSimpleVectors_testNullUpdate_950084e021745a08ae3e14d398be6b88");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_65d3b6d2fe5a6f900abe16f53b8c3597() {
        assertEval("{ x <- NULL; x[0] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_65d3b6d2fe5a6f900abe16f53b8c3597");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_b3d51e938f7a8337dfdc84de7e9c7794() {
        assertEval("{ x <- NULL; x[1] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_b3d51e938f7a8337dfdc84de7e9c7794");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_551d3ebbb6ac9fe58e4d30355fd2ec74() {
        assertEval("{ x <- NULL; x[c(1,0)] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_551d3ebbb6ac9fe58e4d30355fd2ec74");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_6e81bd750316716655c2d14c6064ee61() {
        assertEval("{ x <- NULL; x[c(1,2)] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_6e81bd750316716655c2d14c6064ee61");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_fbe98cd1ce1c05710193e4f8c95d6f1c() {
        assertEval("{ x <- NULL; x[c(0,1)] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_fbe98cd1ce1c05710193e4f8c95d6f1c");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_7257cb3decb49c4dac158dd8d90b5c09() {
        assertEval("{ x <- NULL; x[c(0,2)] <- c(5); x; }");
        check("TestSimpleVectors_testNullUpdate_7257cb3decb49c4dac158dd8d90b5c09");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_2bfe43cdec831af749d3ec2ef32287cb() {
        assertEval("{ x <- NULL; x[0] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_2bfe43cdec831af749d3ec2ef32287cb");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_d2e82b16d1a6c84e2b7aae9b8e297565() {
        assertEval("{ x <- NULL; x[1] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_d2e82b16d1a6c84e2b7aae9b8e297565");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_dd9025a6b2e780cc03a7f92800512f84() {
        assertEval("{ x <- NULL; x[c(1,0)] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_dd9025a6b2e780cc03a7f92800512f84");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_a0e0dbeaa4bbcce1c45933d0368aa77a() {
        assertEval("{ x <- NULL; x[c(1,2)] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_a0e0dbeaa4bbcce1c45933d0368aa77a");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_1f8c18cc93d9cec8047e76c15e8c8eca() {
        assertEval("{ x <- NULL; x[c(0,1)] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_1f8c18cc93d9cec8047e76c15e8c8eca");
    }

    @Test
    public void TestSimpleVectors_testNullUpdate_a2146a5c80766a6d5cc2f40c06202033() {
        assertEval("{ x <- NULL; x[c(0,2)] <- c(1,5); x; }");
        check("TestSimpleVectors_testNullUpdate_a2146a5c80766a6d5cc2f40c06202033");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_01eabfb2c4e15bb5a7006319a4337fd2() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); `[.factor`(x, 1) }");
        check("TestSimpleVectors_testObjectDirectAccess_01eabfb2c4e15bb5a7006319a4337fd2");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_6f3b4849970406b2315eabe72503d201() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); `[.factor`(x, 1, drop=TRUE) }");
        check("TestSimpleVectors_testObjectDirectAccess_6f3b4849970406b2315eabe72503d201");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_1be9c6acb933e025c3d74895ff9d7d02() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); `[.factor`(x, 1, drop=FALSE) }");
        check("TestSimpleVectors_testObjectDirectAccess_1be9c6acb933e025c3d74895ff9d7d02");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_b79b4f8ad5b7cc5a833d720266dd1a1d() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); `[[.factor`(x, 1) }");
        check("TestSimpleVectors_testObjectDirectAccess_b79b4f8ad5b7cc5a833d720266dd1a1d");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_660880a286cd3118a6c3ffb5f976c827() {
        assertEval("{ x<-factor(c(\"a\", z=\"b\", \"a\")); `[[.factor`(x, \"z\") }");
        check("TestSimpleVectors_testObjectDirectAccess_660880a286cd3118a6c3ffb5f976c827");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_c1ed9317efa96b573485632db9fb0241() {
        assertEval("{ x<-factor(c(\"a\", zz=\"b\", \"a\")); `[[.factor`(x, \"z\", exact=FALSE) }");
        check("TestSimpleVectors_testObjectDirectAccess_c1ed9317efa96b573485632db9fb0241");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_4833fbe2c62756ace2e149c452458e59() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); `[`(x, 1) }");
        check("TestSimpleVectors_testObjectDirectAccess_4833fbe2c62756ace2e149c452458e59");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_4eccdd1f73e019373d9d154b833fece5() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); `[`(x, 1, drop=FALSE) }");
        check("TestSimpleVectors_testObjectDirectAccess_4eccdd1f73e019373d9d154b833fece5");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_945fe85394239f5303dea1a491a918d1() {
        assertEval("{ x<-factor(c(\"a\", \"b\", \"a\")); `[[`(x, 1) }");
        check("TestSimpleVectors_testObjectDirectAccess_945fe85394239f5303dea1a491a918d1");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_b51fa52db3d6fc7ed30f6cffba2dadff() {
        assertEval("{ x<-factor(c(\"a\", zz=\"b\", \"a\")); `[[`(x, \"z\", exact=FALSE) }");
        check("TestSimpleVectors_testObjectDirectAccess_b51fa52db3d6fc7ed30f6cffba2dadff");
    }

    @Test
    public void TestSimpleVectors_testObjectDirectAccess_68b89b4e74c36289fd7aef12dbd3c682() {
        assertEvalError("{ x<-factor(c(\"a\", zz=\"b\", \"a\")); `[[.factor`(x, \"z\", exact=TRUE) }");
        check("TestSimpleVectors_testObjectDirectAccess_68b89b4e74c36289fd7aef12dbd3c682");
    }

    @Test
    public void TestSimpleVectors_testScalarIndexIgnored_c5bf8fe63f55705b2cb57df329d3fc2d() {
        assertEval("{ x<-1:4; x[c(-0.5)] }");
        check("TestSimpleVectors_testScalarIndexIgnored_c5bf8fe63f55705b2cb57df329d3fc2d");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_56fb30c1f1e1c458babb43d54682aec0() {
        assertEval("{ x<-c(1,2,3); x[-0.1] }");
        check("TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_56fb30c1f1e1c458babb43d54682aec0");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_75ebae7c0fbc6f076571ecc1eca34950() {
        assertEval("{ x<-c(1L,2L,3L); x[-0.1] }");
        check("TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_75ebae7c0fbc6f076571ecc1eca34950");
    }

    @Test
    public void TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_824bad7757ef4527e818848c9a152ddb() {
        assertEval("{ x<-1:3; x[-0.1] }");
        check("TestSimpleVectors_testScalarOutOfBoundsOnVectorIgnored_824bad7757ef4527e818848c9a152ddb");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdateIgnore_ea7d1aaf03e73608bdd0d9114c96e3a8() {
        assertEvalError("{ f <- function(b,v) { b[[2]] <- v ; b } ; f(c(\"a\",\"b\"),\"d\") ; f(c(\"a\",\"b\"),NULL) }");
        check("TestSimpleVectors_testScalarUpdateIgnore_ea7d1aaf03e73608bdd0d9114c96e3a8");
    }

    @Test
    public void TestSimpleVectors_testScalarUpdateIgnore_5d198ef5c0421165963dc6da0d622857() {
        assertEvalError("{ x <- 4:10 ; x[[\"z\"]] <- NULL ; x }");
        check("TestSimpleVectors_testScalarUpdateIgnore_5d198ef5c0421165963dc6da0d622857");
    }

    @Test
    public void TestSimpleVectors_testVectorUpdateIgnore_dfb7b60a1fc99c12c275f5b97da0d293() {
        assertEval("{ f <- function(a) { a }; x<-1:5 ; x[x[4]<-2] <- ({x[4]<-100; f(x)[4]}) ; x }");
        check("TestSimpleVectors_testVectorUpdateIgnore_dfb7b60a1fc99c12c275f5b97da0d293");
    }

    @Test
    public void TestStats_testRandomIgnore_784f02d69de0bfc6b26f80cc27b3eaf0() {
        assertEval("{ round( rnorm(3,c(1000,2,3),c(10,11)), digits = 5 ) }");
        check("TestStats_testRandomIgnore_784f02d69de0bfc6b26f80cc27b3eaf0");
    }

    @Test
    public void TestStats_testRandomIgnore_b2e35c06b054d504b83a29fdc0f2c77a() {
        assertEval("{ round( runif(3), digits = 5 ) }");
        check("TestStats_testRandomIgnore_b2e35c06b054d504b83a29fdc0f2c77a");
    }

    @Test
    public void TestStats_testRandomIgnore_38f6214fa41def07b060c01b29004277() {
        assertEval("{ round( runif(3,1,10), digits = 5 ) }");
        check("TestStats_testRandomIgnore_38f6214fa41def07b060c01b29004277");
    }

    @Test
    public void TestStats_testRandomIgnore_f1a576fe16d8967d5d94472745eb8757() {
        assertEval("{ round( runif(3,1:3,3:2), digits = 5 ) }");
        check("TestStats_testRandomIgnore_f1a576fe16d8967d5d94472745eb8757");
    }

    @Test
    public void TestStats_testRandomIgnore_b1cb39289a32d016a5e4d8fd0369a06b() {
        assertEval("{ round( rgamma(3,1), digits = 5 ) }");
        check("TestStats_testRandomIgnore_b1cb39289a32d016a5e4d8fd0369a06b");
    }

    @Test
    public void TestStats_testRandomIgnore_98b47b95df69a17bd9bfaf2a24c9cffd() {
        assertEval("{ round( rgamma(3,0.5,scale=1:3), digits = 5 ) }");
        check("TestStats_testRandomIgnore_98b47b95df69a17bd9bfaf2a24c9cffd");
    }

    @Test
    public void TestStats_testRandomIgnore_fd28dcd349e0cca475812e380ef658bf() {
        assertEval("{ round( rgamma(3,0.5,rate=1:3), digits = 5 ) }");
        check("TestStats_testRandomIgnore_fd28dcd349e0cca475812e380ef658bf");
    }

    @Test
    public void TestStats_testRandomIgnore_e0ebcb975feabfb978612a64a771116e() {
        assertEval("{ round( rbinom(3,3,0.9), digits = 5 ) }");
        check("TestStats_testRandomIgnore_e0ebcb975feabfb978612a64a771116e");
    }

    @Test
    public void TestStats_testRandomIgnore_8c7daa50068479e536d478513c940605() {
        assertEval("{ round( rbinom(3,10,(1:5)/5), digits = 5 ) }");
        check("TestStats_testRandomIgnore_8c7daa50068479e536d478513c940605");
    }

    @Test
    public void TestStats_testRandomIgnore_7d00e32e71b1e734a6bf82d8e5ad1e59() {
        assertEval("{ round( rlnorm(3), digits = 5 ) }");
        check("TestStats_testRandomIgnore_7d00e32e71b1e734a6bf82d8e5ad1e59");
    }

    @Test
    public void TestStats_testRandomIgnore_b35e5af9e87e8a17b87bad6537a48322() {
        assertEval("{ round( rlnorm(3,sdlog=c(10,3,0.5)), digits = 5 ) }");
        check("TestStats_testRandomIgnore_b35e5af9e87e8a17b87bad6537a48322");
    }

    @Test
    public void TestStats_testRandomIgnore_9e1f8a6e4a70c5688947e9205b449a9e() {
        assertEval("{ round( rcauchy(3), digits = 5 ) }");
        check("TestStats_testRandomIgnore_9e1f8a6e4a70c5688947e9205b449a9e");
    }

    @Test
    public void TestStats_testRandomIgnore_df5e70f5779809e68123bd1f1474d2de() {
        assertEval("{ round( rcauchy(3, scale=4, location=1:3), digits = 5 ) }");
        check("TestStats_testRandomIgnore_df5e70f5779809e68123bd1f1474d2de");
    }

    @Test
    public void TestrGenBuiltinArg_testArg1_53fffbb7c52c1ba577a8291133bbfdf8() {
        assertEval("argv <- list(1+2i);Arg(argv[[1]]);");
        check("TestrGenBuiltinArg_testArg1_53fffbb7c52c1ba577a8291133bbfdf8");
    }

    @Test
    public void TestrGenBuiltinArg_testArg2_e284f15d362634951ccd75fb1038bb02() {
        assertEval("argv <- list(c(1554.86976865791+337.57296578684i, 1953.0195914094+434.16395869265i, 2020.8001333202+267.40279521531i, 12019.4947666225+397.6223289386i, 40989.2104557418+1079.1450107273i, 59779.5384921205+1460.5074297272i, 40703.4141691824+1049.8100128697i, 12234.4562968499+469.0052365648i, 2311.58538965355+142.56529231224i, 2158.93441543181+94.80017111005i, 2768.79882180339+256.05759156168i, 3234.20673958634+282.64174433659i, 2796.76248579155+64.23534085425i, 2030.22757739534-164.56566766766i, 1522.09271008314-273.51503749101i, 1109.23177636373-215.24298332377i, 714.154122222449-75.284630456206i, 509.684427096512-24.577531288476i, 628.214718823948+42.431050163574i, 1053.2295477549+190.4802567974i, 1388.73708931304+133.04405268816i, 1213.97041311196-135.67196064028i, 790.469479873384-232.737914916798i, 503.424076694357-99.275737105817i, 430.214847703846+45.250156289826i, 640.795334515383+121.961327286573i, 794.927869993865+100.643091831764i, 554.394621183915-15.753680159958i, 286.476583987294-104.634488576316i, 232.82067569803-92.469328935268i, 229.472155078088-54.85406188579i, 253.438957119958-65.123390974834i, 285.141954428461-79.653095359009i, 257.168942241366-34.332533775171i, 214.215071612655+18.001149572355i, 199.882436088191+0i));Arg(argv[[1]]);");
        check("TestrGenBuiltinArg_testArg2_e284f15d362634951ccd75fb1038bb02");
    }

    @Test
    public void TestrGenBuiltinArg_testArg3_62ab5a71bf6d7347d372dc295ef3ea2e() {
        assertEval("argv <- list(c(-12.561836573133-726.935211685406i, -19.15961591777-1315.40822424617i, -666.84872452586-2013.90899841237i, -5775.9038598237-11495.8986046958i, -19052.0606820086-36788.5714510618i, -27954.209922899-52600.8398855356i, -19930.6456597181-35739.3494902644i, -7168.9170917163-10787.9325286278i, -2331.00733468417-1545.77448035635i, -1953.77845230855-212.90200115993i, -1953.60071030304+1420.43983282655i, -1700.4015174326+2765.31423009739i, -862.10275212019+2693.95914108523i, 163.24691179114+1837.1971341258i, 824.29498680332+1155.03126302727i, 939.495937605926+679.549172893055i, 686.101881005818+305.166761591578i, 460.339323160381-14.067413050801i, 533.688543397269-293.997358985575i, 773.041200043657-698.096300485637i, 716.84959340189-1127.39175172066i, 226.23728166311-1110.40349894929i, -203.687633095422-740.924670781257i, -271.865544904439-437.858153233594i, -316.769706633022-279.671035520361i, -624.842102639273-228.211019456587i, -806.31350008813-164.912647906911i, -506.559675826232+24.376187336594i, -142.784303570554+217.087547410547i, -44.704338624059+260.225831716256i, 10.565037460572+219.942519605707i, 143.643627814428+218.823069474359i, 232.58540850813+214.905815487636i, 223.286482103748+175.139821578561i, 185.008902762186+116.519845434485i, 171.150234739785-0i));Arg(argv[[1]]);");
        check("TestrGenBuiltinArg_testArg3_62ab5a71bf6d7347d372dc295ef3ea2e");
    }

    @Test
    public void TestrGenBuiltinArg_testArg4_8dbce6d8ad11f5abcb022249c52f3481() {
        assertEval("argv <- list(logical(0));Arg(argv[[1]]);");
        check("TestrGenBuiltinArg_testArg4_8dbce6d8ad11f5abcb022249c52f3481");
    }

    @Test
    public void TestrGenBuiltinArg_testArg5_574cfd79b8ec434d34dc4153642208da() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));Arg(argv[[1]]);");
        check("TestrGenBuiltinArg_testArg5_574cfd79b8ec434d34dc4153642208da");
    }

    @Test
    public void TestrGenBuiltinArg_testArg6_3e9e9b79224b0ce45e5adea9e0fe0b47() {
        assertEval("argv <- list(FALSE);Arg(argv[[1]]);");
        check("TestrGenBuiltinArg_testArg6_3e9e9b79224b0ce45e5adea9e0fe0b47");
    }

    @Test
    public void TestrGenBuiltinArg_testArg8_ae3990f745d5b058fb01f72a63bb18a8() {
        assertEval("argv <- list(-1);do.call('Arg', argv)");
        check("TestrGenBuiltinArg_testArg8_ae3990f745d5b058fb01f72a63bb18a8");
    }

    @Test
    public void TestrGenBuiltinConj_testConj1_0e5548c50179ddefd1a7e46fa4ae32e0() {
        assertEval("argv <- list(NA_complex_);Conj(argv[[1]]);");
        check("TestrGenBuiltinConj_testConj1_0e5548c50179ddefd1a7e46fa4ae32e0");
    }

    @Test
    public void TestrGenBuiltinConj_testConj2_0a6659c9b1a639ebb84ae75d70f6cbca() {
        assertEval("argv <- list(c(-1.18540307978262+0i, 1.21560120163195-1.53371687180917i, 2.77616253887119+2.49241439707552i, -0.34590612779948+5.91601304866405i, -4.79620377219434-5.1021793804514i, -0.76948538129694-3.75787028288235i, 7.35246399396265+3.06008718716048i, 3.29255418488526-1.70891939683671i, -4.06380659430245+3.06999922353505i, -3.09223641978001-1.96417605896538i, -0.92141308753853+1.40901240924205i, -2.00249720671212-2.68610936520658i, -0.36243789137685+2.82396143864819i, 0.970540333825845-0.827296527575657i, -0.71012351273056-1.58808368514905i, 0.65264999887605-1.47950735242131i, 2.37634963276553+0.56734038764123i, 1.07643410940103-0.27130380644466i, -0.75915222215558-1.26274988364837i, 0.27719717365392+1.892240358725i, -0.486365810527362+0.32331047458147i, 0.458815916572034+0.775988009981045i, -1.62795265860628+1.25968253919881i, -0.31369767965175+2.67392540646143i, 1.35480053490252+0i, -0.31369767965175-2.67392540646143i, -1.62795265860628-1.25968253919881i, 0.458815916572035-0.775988009981044i, -0.486365810527364-0.323310474581469i, 0.27719717365392-1.892240358725i, -0.75915222215558+1.26274988364837i, 1.07643410940103+0.27130380644466i, 2.37634963276553-0.56734038764123i, 0.65264999887605+1.47950735242131i, -0.71012351273056+1.58808368514905i, 0.970540333825845+0.827296527575658i, -0.36243789137685-2.82396143864819i, -2.00249720671212+2.68610936520658i, -0.92141308753853-1.40901240924205i, -3.09223641978001+1.96417605896538i, -4.06380659430245-3.06999922353505i, 3.29255418488526+1.70891939683671i, 7.35246399396266-3.06008718716047i, -0.76948538129694+3.75787028288235i, -4.79620377219434+5.10217938045139i, -0.34590612779948-5.91601304866405i, 2.77616253887119-2.49241439707552i, 1.21560120163195+1.53371687180917i));Conj(argv[[1]]);");
        check("TestrGenBuiltinConj_testConj2_0a6659c9b1a639ebb84ae75d70f6cbca");
    }

    @Test
    public void TestrGenBuiltinConj_testConj3_3475858a17219d350c90b79dbb2f17da() {
        assertEval("argv <- list(structure(c(0.087699990825051-0.22507396943778i, 0.543948655831334+0.33174688242063i, 0.162724647304311-0.15004931295852i, 0.433366361691124+0.22116458828042i, 0.237749303783571-0.07502465647926i, 0.322784067550914+0.11058229414021i, 0.312773960262831+0i, 0.212201773410704-0i, 0.387798616742091+0.07502465647926i, 0.101619479270494-0.11058229414021i, 0.462823273221351+0.15004931295852i, -0.008962814869716-0.22116458828042i, 0.537847929700611+0.22507396943778i, -0.119545109009926-0.33174688242063i), .Dim = c(2L, 7L)));Conj(argv[[1]]);");
        check("TestrGenBuiltinConj_testConj3_3475858a17219d350c90b79dbb2f17da");
    }

    @Test
    public void TestrGenBuiltinConj_testConj4_9a3bc737541cebcaf3921b9495bbbe3d() {
        assertEval("argv <- list(c(1+0i, 0.985449458355365-0.138495889434283i, 0.942642872008266-0.270298493966801i, 0.874055380411015-0.389154527907249i, 0.783616834775482-0.489658143691394i, 0.676434265976222-0.567595743096322i, 0.558433187362516-0.620202886580765i, 0.435944803381395-0.646314749919218i, 0.315270204563124-0.646399711551264i, 0.202254248593737-0.622474571220695i, 0.101900933636988-0.577908912337521i, 0.018058735786294-0.517134531945579i, -0.046801131817278-0.445283024979697i, -0.091697846014566-0.367779972441526i, -0.117138246792619-0.289927334668645i, -0.125-0.21650635094611i, -0.118311211562746-0.151431445234362i, -0.1009450259937-0.097481478474725i, -0.0772542485937368-0.0561284970724482i, -0.0516755705617768-0.027476388254185i, -0.0283351996132097-0.0103131692411995i, -0.0106874359562526-0.0022716846399295i, -1.21500794451954e-03-8.496163204619e-05i, -1.21500794451956e-03+8.49616320463e-05i, -0.0106874359562525+0.0022716846399297i, -0.0283351996132096+0.0103131692411996i, -0.0516755705617767+0.0274763882541851i, -0.0772542485937367+0.0561284970724481i, -0.1009450259937+0.097481478474725i, -0.118311211562746+0.151431445234362i, -0.125+0.21650635094611i, -0.117138246792619+0.289927334668644i, -0.091697846014566+0.367779972441526i, -0.046801131817278+0.445283024979697i, 0.018058735786294+0.517134531945579i, 0.101900933636988+0.577908912337521i, 0.202254248593737+0.622474571220695i, 0.315270204563124+0.646399711551264i, 0.435944803381395+0.646314749919218i, 0.558433187362516+0.620202886580765i, 0.676434265976221+0.567595743096322i, 0.783616834775482+0.489658143691394i, 0.874055380411015+0.389154527907249i, 0.942642872008266+0.270298493966801i, 0.985449458355365+0.138495889434283i));Conj(argv[[1]]);");
        check("TestrGenBuiltinConj_testConj4_9a3bc737541cebcaf3921b9495bbbe3d");
    }

    @Test
    public void TestrGenBuiltinConj_testConj5_2cc5e68e85d29c1e311ea6502b53f7e4() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));Conj(argv[[1]]);");
        check("TestrGenBuiltinConj_testConj5_2cc5e68e85d29c1e311ea6502b53f7e4");
    }

    @Test
    public void TestrGenBuiltinConj_testConj6_d9a4ab8140d0d1b613eeee859a91a41c() {
        assertEval("argv <- list(FALSE);Conj(argv[[1]]);");
        check("TestrGenBuiltinConj_testConj6_d9a4ab8140d0d1b613eeee859a91a41c");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt1_e9d67dbb4cf514bd8b9c18cbb53d29e8() {
        assertEval("argv <- list(structure(c(14712, 14712), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt1_e9d67dbb4cf514bd8b9c18cbb53d29e8");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt2_9c0e3f153c5ad4d97a73eaa87acfb627() {
        assertEval("argv <- list(structure(c(11323, NA, NA, 12717), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt2_9c0e3f153c5ad4d97a73eaa87acfb627");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt3_fba12ed33293983225e078b7d44deba6() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt3_fba12ed33293983225e078b7d44deba6");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt4_bd639259bea77fad892d6d0e1b0a673b() {
        assertEval("argv <- list(structure(c(FALSE, FALSE), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt4_bd639259bea77fad892d6d0e1b0a673b");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt5_ceb868684ad3d7c1310ffae6d5c30066() {
        assertEval("argv <- list(NULL); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt5_ceb868684ad3d7c1310ffae6d5c30066");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt6_b11d7825ea46ea0b0e7cacbd478097bd() {
        assertEval("argv <- list(character(0)); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt6_b11d7825ea46ea0b0e7cacbd478097bd");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt7_1259bfd5708bd7f10a45556efcdc34f9() {
        assertEval("argv <- list(structure(11323.9154302836, class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt7_1259bfd5708bd7f10a45556efcdc34f9");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt8_9bc49dc939b9ace7d99616800b8d1cc0() {
        assertEval("argv <- list(structure(c(-21915, -21550, -21185, -20819, -20454, -20089, -19724, -19358, -18993, -18628, -18263, -17897, -17532, -17167, -16802, -16436, -16071, -15706, -15341, -14975, -14610, -14245, -13880, -13514, -13149, -12784, -12419, -12053, -11688, -11323, -10958, -10592, -10227, -9862, -9497, -9131, -8766, -8401, -8036, -7670, -7305, -6940, -6575, -6209, -5844, -5479, -5114, -4748, -4383, -4018, -3653, -3287, -2922, -2557, -2192, -1826, -1461, -1096, -731, -365, 0, 365, 730, 1096, 1461, 1826, 2191, 2557, 2922, 3287, 3652, 4018, 4383, 4748, 5113, 5479, 5844, 6209, 6574, 6940, 7305, 7670, 8035, 8401, 8766, 9131, 9496, 9862, 10227, 10592), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt8_9bc49dc939b9ace7d99616800b8d1cc0");
    }

    @Test
    public void TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt9_bf3dde227e3258e44e9b499785adf609() {
        assertEval("argv <- list(structure(c(11354, 11382, 11413), class = 'Date')); .Internal(Date2POSIXlt(argv[[1]]))");
        check("TestrGenBuiltinDate2POSIXlt_testDate2POSIXlt9_bf3dde227e3258e44e9b499785adf609");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding1_4467cf1f6dabf42a77c4a7a6cf7d7bc7() {
        assertEval("argv <- list('Byte Code Compiler'); .Internal(Encoding(argv[[1]]))");
        check("TestrGenBuiltinEncoding_testEncoding1_4467cf1f6dabf42a77c4a7a6cf7d7bc7");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding2_4e78ef1b1b4588f13ca257df54d0dca6() {
        assertEval("argv <- list(c('\\n', '\\n', '## These cannot be run by examples() but should be OK when pasted\\n', '## into an interactive R session with the tcltk package loaded\\n', '\\n', 'tt <- tktoplevel()\\n', 'tkpack(txt.w <- tktext(tt))\\n', 'tkinsert(txt.w, \\'0.0\\', \\'plot(1:10)\\')\\n', '\\n', '# callback function\\n', 'eval.txt <- function()\\n', '   eval(parse(text = tclvalue(tkget(txt.w, \\'0.0\\', \\'end\\'))))\\n', 'tkpack(but.w <- tkbutton(tt, text = \\'Submit\\', command = eval.txt))\\n', '\\n', '## Try pressing the button, edit the text and when finished:\\n', '\\n', 'tkdestroy(tt)\\n', '\\n', '\\n')); .Internal(Encoding(argv[[1]]))");
        check("TestrGenBuiltinEncoding_testEncoding2_4e78ef1b1b4588f13ca257df54d0dca6");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding3_5992647ba797230372a412e39cfdd0e8() {
        assertEval("argv <- list('detaching ‘package:nlme’, ‘package:splines’'); .Internal(Encoding(argv[[1]]))");
        check("TestrGenBuiltinEncoding_testEncoding3_5992647ba797230372a412e39cfdd0e8");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding4_e733dc96477d1f79666b1666b3c4fd4e() {
        assertEval("argv <- list(structure(character(0), class = 'check_code_usage_in_package')); .Internal(Encoding(argv[[1]]))");
        check("TestrGenBuiltinEncoding_testEncoding4_e733dc96477d1f79666b1666b3c4fd4e");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding5_90f446f75e96e650fee7029603e82cf5() {
        assertEval("argv <- list(structure('Type 'demo(PKG::FOO)' to run demonstration 'PKG::FOO'.', .Names = 'demo')); .Internal(Encoding(argv[[1]]))");
        check("TestrGenBuiltinEncoding_testEncoding5_90f446f75e96e650fee7029603e82cf5");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding6_7449fff508d037d2046c2d4efb7fa810() {
        assertEval("argv <- list('A shell of class documentation has been written to the file './myTst2/man/DocLink-class.Rd'.\\n'); .Internal(Encoding(argv[[1]]))");
        check("TestrGenBuiltinEncoding_testEncoding6_7449fff508d037d2046c2d4efb7fa810");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding7_4d932eb25388709f0291f720f54a9c70() {
        assertEval("argv <- list(c('* Edit the help file skeletons in 'man', possibly combining help files for multiple functions.', '* Edit the exports in 'NAMESPACE', and add necessary imports.', '* Put any C/C++/Fortran code in 'src'.', '* If you have compiled code, add a useDynLib() directive to 'NAMESPACE'.', '* Run R CMD build to build the package tarball.', '* Run R CMD check to check the package tarball.', '', 'Read \\'Writing R Extensions\\' for more information.')); .Internal(Encoding(argv[[1]]))");
        check("TestrGenBuiltinEncoding_testEncoding7_4d932eb25388709f0291f720f54a9c70");
    }

    @Test
    public void TestrGenBuiltinEncoding_testEncoding9_319db9824e5c4511b17d5729ea8df27d() {
        assertEval("argv <- structure(list(x = 'abc'), .Names = 'x');do.call('Encoding', argv)");
        check("TestrGenBuiltinEncoding_testEncoding9_319db9824e5c4511b17d5729ea8df27d");
    }

    @Test
    public void TestrGenBuiltinEncodingassign__testEncodingassign_1_d9e73901a0a16c5e8e711375a3a2c926() {
        assertEval("argv <- structure(list(x = 'abc', value = 'UTF-8'), .Names = c('x',     'value'));do.call('Encoding<-', argv)");
        check("TestrGenBuiltinEncodingassign__testEncodingassign_1_d9e73901a0a16c5e8e711375a3a2c926");
    }

    @Test
    public void TestrGenBuiltinISOdatetime_testISOdatetime1_b2aba79edae5b1cd517e9ac6cce5d98e() {
        assertEval("argv <- structure(list(year = 1970, month = 1, day = 1, hour = 0,     min = 0, sec = 0, tz = 'GMT'), .Names = c('year', 'month',     'day', 'hour', 'min', 'sec', 'tz'));do.call('ISOdatetime', argv)");
        check("TestrGenBuiltinISOdatetime_testISOdatetime1_b2aba79edae5b1cd517e9ac6cce5d98e");
    }

    @Test
    public void TestrGenBuiltinISOdatetime_testISOdatetime2_ad1225dee2d59d669dce212d20b07cc1() {
        assertEval("argv <- structure(list(year = 2002, month = 6, day = 24, hour = 0,     min = 0, sec = 10), .Names = c('year', 'month', 'day', 'hour',     'min', 'sec'));do.call('ISOdatetime', argv)");
        check("TestrGenBuiltinISOdatetime_testISOdatetime2_ad1225dee2d59d669dce212d20b07cc1");
    }

    @Test
    public void TestrGenBuiltinIm_testIm2_166a0fbf32802990f21c015412732aeb() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));Im(argv[[1]]);");
        check("TestrGenBuiltinIm_testIm2_166a0fbf32802990f21c015412732aeb");
    }

    @Test
    public void TestrGenBuiltinIm_testIm3_d27ce0f974803d2f8fd0655b08226bc7() {
        assertEval("argv <- list(FALSE);Im(argv[[1]]);");
        check("TestrGenBuiltinIm_testIm3_d27ce0f974803d2f8fd0655b08226bc7");
    }

    @Test
    public void TestrGenBuiltinIm_testIm5_daa6f6a7561f0e16ca1b0adc0888bd87() {
        assertEval("argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))));Im(argv[[1]]);");
        check("TestrGenBuiltinIm_testIm5_daa6f6a7561f0e16ca1b0adc0888bd87");
    }

    @Test
    public void TestrGenBuiltinIm_testIm6_ceaffdfb48f484191e3c465d7d171154() {
        assertEval("argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i));Im(argv[[1]]);");
        check("TestrGenBuiltinIm_testIm6_ceaffdfb48f484191e3c465d7d171154");
    }

    @Test
    public void TestrGenBuiltinLa_testLa1_a2aefe263aade4050c793d072b09f428() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0), .Dim = c(18L, 7L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18'), c('(Intercept)', 'Rail2', 'Rail5', 'Rail1', 'Rail6', 'Rail3', 'Rail4')))); .Internal(La_qr(argv[[1]]))");
        check("TestrGenBuiltinLa_testLa1_a2aefe263aade4050c793d072b09f428");
    }

    @Test
    public void TestrGenBuiltinLa_testLa2_82030ef6446bf50aaa3b9b6f8b894e03() {
        assertEval("argv <- list(structure(c(-4.47213595499958, 0, -6.70820393249937, 2.23606797749979), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('Intercept', 'X'))), structure(c(1, 0, 0, 1), .Dim = c(2L, 2L)), 2.22044604925031e-16); .Internal(La_solve(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinLa_testLa2_82030ef6446bf50aaa3b9b6f8b894e03");
    }

    @Test
    public void TestrGenBuiltinLa_testLa3_eeae722616d628fd6eb05793b1e3c58f() {
        assertEval("argv <- list(structure(c(-21.2222451396881, 306.936914624821, 0, 0, 0, -101.353437863947, -21.2222451396881, 0, 0, 0, 45.8768670002026, 63.2672432400162, -11.7486843755171, 0, 0, 65.1621918666428, 125.787781278037, -111.869521123473, 61.0965873274467, -54.389932439947, -26.0785375270079, -209.347244886481, 112.817924425406, 108.385517228532, 61.0965873274467), .Dim = c(5L, 5L), .Dimnames = list(NULL, NULL)), FALSE); .Internal(La_rg(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinLa_testLa3_eeae722616d628fd6eb05793b1e3c58f");
    }

    @Test
    public void TestrGenBuiltinLa_testLa4_93e4ac1f4bb285b0ed312b1d5e9813a1() {
        assertEval("argv <- list('S', structure(c(1, 0, 0, 0, 0, 1.4142135623731, 0, 0, 0, 0, 1.73205080756888, 0, 0, 0, 0, 2), .Dim = c(4L, 4L), Dimnames = list(character(0), character(0))), c(2, 1.73205080756888, 1.4142135623731, 1), structure(c(0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0), .Dim = c(4L, 4L)), structure(c(0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0), .Dim = c(4L, 4L))); .Internal(La_svd(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinLa_testLa4_93e4ac1f4bb285b0ed312b1d5e9813a1");
    }

    @Test
    public void TestrGenBuiltinLa_testLa5_10537d2a8b634e27f7aa11ddfa10a5c6() {
        assertEval("argv <- list(structure(c(0.842723988615538, 1, 0, 1, 0.636010690700881, 1, 0, 1, 0.842723988615537), .Dim = c(3L, 3L)), FALSE); .Internal(La_rs(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinLa_testLa5_10537d2a8b634e27f7aa11ddfa10a5c6");
    }

    @Test
    public void TestrGenBuiltinLa_testLa6_02451222db08157c94b3c22f03639c30() {
        assertEval("argv <- list('S', structure(c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(5L, 5L)), c(3.37916576339493, 1.53572230863579, 1.41421356237309, 0.472012430194285, 3.04287016253022e-18), structure(c(-0.38209344041777, -0.441911867608196, -0.441911867608196, -0.563415484445979, -0.38209344041777, -0.594200765232569, 0.307687929858406, 0.307687929858405, 0.32327569786942, -0.594200765232566, 0.499999999999999, -0.5, 0.500000000000001, 7.42461647718073e-16, -0.500000000000001, 0.0304967766615352, 0.45830343560406, 0.458303435604061, -0.760299819185526, 0.0304967766615352, -0.5, -0.5, 0.5, -1.11022302462516e-16, 0.5), .Dim = c(5L, 5L)), structure(c(-0.41058086214689, 0.0239384830763564, -0.707106781186547, -0.575195883735897, 0, -0.428282990831553, 0.611211774620929, 9.15933995315754e-16, 0.331150287627506, 0.577350269189626, -0.41058086214689, 0.0239384830763538, 0.707106781186548, -0.575195883735897, 5.55111512312578e-17, -0.226146609649533, -0.773838814336698, -1.55431223447522e-15, 0.129220226886747, 0.577350269189625, -0.654429600481086, -0.162627039715767, -5.27355936696949e-16, 0.460370514514253, -0.577350269189626), .Dim = c(5L, 5L))); .Internal(La_svd(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinLa_testLa6_02451222db08157c94b3c22f03639c30");
    }

    @Test
    public void TestrGenBuiltinLa_testLa7_b81d60ca77e69ea47558506a09873227() {
        assertEval("argv <- list(structure(c(1, 1, 3, 3), .Dim = c(2L, 2L)), 'O'); .Internal(La_dgecon(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinLa_testLa7_b81d60ca77e69ea47558506a09873227");
    }

    @Test
    public void TestrGenBuiltinLa_testLa8_6b7d703bb8b3674554638959f10ddc63() {
        assertEval("argv <- list('N', structure(c(-4, 0, 0, 0, 0, 0, 0, -406.725, 41.7955066364795, 0, 0, 0, 0, 0, -1550.79375, 381.717151319926, 49.8228991342168, 0, 0, 0, 0, -1277.325, 224.617432123818, -31.1858918860748, -282.060212912726, 0, 0, 0, -1042.675, 125.261805546114, -29.9849484767744, 164.425554254677, -170.353263600129, 0, 0, -469.696, 26.3795103523805, 4.19691803785862, -3.18974110831568, 0.0462484557378925, 1.46320172717486, 0, -7818, 18.2758880432689, 1.77525956575195, -1.45298766739792, -0.449176219307484, -0.281900648530911, -0.669305080560524), .Dim = c(7L, 7L), .Dimnames = list(c('1947', '1948', '1949', '1950', '1951', '1952', '1953'), c('(Intercept)', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'))), c(8164.12940108939, 457.24498274114, 324.584423503013, 134.312174464868, 4.95553195929945, 1.41954832076337, 0.000342370904183799), structure(0, .Dim = c(1L, 1L)), structure(0, .Dim = c(1L, 1L))); .Internal(La_svd(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinLa_testLa8_6b7d703bb8b3674554638959f10ddc63");
    }

    @Test
    public void TestrGenBuiltinLa_testLa9_c611268ab5b6a208a3f74df32460fb07() {
        assertEval("argv <- list(structure(c(-9.64365076099295, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, 0.103695169473043, -29634.0055320061, -5658.08855789941, 0.0595010632288954, 0.0648032071760975, 0.106336668095848, -0.0279843118999398, 0.0762911857283688, 0.188519899277481, 0.0807096390177039, 0.102801905464379, 0.158474416910002, -0.0969121832135675, -0.0447744343994132, 0.0356414154664858, 0.0276881995456826, -5.08106330417909, 3.14280306547868, 3.64768208463163, 0.0962151262827947, -0.216651778533863, -0.0914289830351174, 0.0855052819309283, -0.0191216590449975, 0.0813861110263642, 0.0607902565035442, 0.00888870310603775, -0.027169916923919, -0.0757761335977742, 0.123401654252917, -0.143330536432624, -0.207390338946085, -0.18719988871654, -0.127596387499216, 1.38045811630541, 0.0118370110620473, 0.00504893180870276, 0.0281684584122627, 0.0338400772620966, 0.0283917504929648, 0.0295082108964754, 0.0323216911133222, 0.00156557534974961, 0.00420042190203468, 0.0261141712698031, 0.00786241202554953, -3.21455025366432, -2.66432733346907, -2.18217405946767, -1.0459324747522, 2.77707906967759, -0.000588115022584812, -0.0784367740030637, -0.0437014732535189, -0.0770692424774911, 0.28985899050302, 0.307089887725235, -0.0219216068215179, -0.00578473481976082, -0.0910180640383319, 0.0166427821996303, -0.725866186311298, -0.943724610301472, -0.197997366006898, -0.255325765345392, -1.99736582726463, 1.22009740929232, -0.000660179745382102, 0.118090770461339, 0.00401505451472504, -0.265276591063721, -0.206368639386371, -0.0413572976755921, 0.0138104665936721, -0.0436723349383677, 0.0904843084594291, -0.103695169473043, 0.0314422837299137, -0.171533212490836, -0.0271695331685966, -0.234884785308008, -0.455412006973628, -0.833981960018826, -0.0497205266764892, -0.00169048456815939, 0.0359873442560765, 0.0111849454624309, 0.0174129325629219, -0.00581471075176227, 0.0183876477886015, -0.0380971980704758, -1.14064686420347, -1.21031412747477, -0.546078284372325, -0.385964209884133, -0.535335872363138, 0.617909299639904, 0.034437791264286, -2.66782912116871, -0.0707120154460491, 0.170259689757997, -0.200116024334743, -0.0120487035676503, -0.00787104751465206, -0.0743232096613527, -0.00206481367828156, -2.28129372840694, -1.27183039972242, -0.162921372163874, 0.194143545128708, 0.405329624202872, -0.0239884453210967, 0.161826508366356, 1.47283157923894, -3.57122150532158, 0.0184573285734211, 0.0768346205272587, -0.00300367200170235, -0.047539037475449, -0.0955077077363865, 0.170580587807138, -2.17759855893389, 2.82091161681306, -0.529126651121425, 0.00648102843720064, -0.227590137804697, 0.429332016819553, 0.315382802791974, -0.0921680424483324, 0.358484158960907, 2.74734594573339, -0.00180797874108619, 0.211048746835586, 0.146553774483952, 0.0892496085418831, 0.02104367339158, -1.4517323726226, 0.428703993666521, -0.198393471445493, -0.178300389025286, -0.0518091667043893, 0.133208332446864, -1.01393441911662, 0.520772381447608, 0.936102434059857, -1.6420319436063, 2.59716822825227, 0.194828402482676, 0.15057424104202, -0.232155536267878, -0.0298159890277092, -0.933256525257383, -1.20515451427884, 0.0125087156504907, 0.421920000319943, 0.452875082015975, -0.655679104390575, 0.284781968418535, 0.643096539054797, 1.38165893036928, 0.447700892848835, -0.482856979100538, 1.73960015308741, 0.115853953901054, 0.107343556163412, -0.0385322695831968, -25.7267715462619, -8.40853040573162, -1.45105839286435, -1.58984152452525, -1.59606771970776, 2.79428919380473, 0.596892611732863, -1.03839368638655, -0.0376487500979583, -0.507302835476536, 0.184174590388395, -0.70905481454677, -3.32884312972433, 0.134236291836065, -0.0993249017707237, -6.94757635469386, 1.58613921242054, 0.195741168102286, 0.638223445194413, 1.07571321411184, 0.659104584950073, 0.199707908602043, -0.565980943574209, -0.967985377031296, -0.112927393875596, -0.934672543429794, 0.198159847509218, 0.275086401661377, 3.44668029704689, -0.05066048099299, -1.65912271156868, -1.17593571026872, -0.20132598039105, -0.42732880950559, -1.20727437557593, 0.102943259109259, -0.697974199306205, 0.103630431164098, -0.0620963660266192, -0.16978912837867, 0.739571733406047, -0.872308493604205, -0.757980967070979, -2.00985526447536, -1.92891236077264), .Dim = c(15L, 15L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15'), c('(Intercept)', 'Weight', 'Cylinders4', 'Cylinders5', 'Cylinders6', 'Cylinders8', 'Cylindersrotary', 'TypeLarge', 'TypeMidsize', 'TypeSmall', 'TypeSporty', 'TypeVan', 'EngineSize', 'DriveTrainFront', 'DriveTrainRear'))), 15L); .Internal(La_chol2inv(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinLa_testLa9_c611268ab5b6a208a3f74df32460fb07");
    }

    @Test
    public void TestrGenBuiltinMod_testMod1_fb3b185716d13b0bfe23a137e50488a1() {
        assertEval("argv <- list(c(0+0i, 0-1.70620776722167e-16i, 0+3.59617031290993e-17i, 3.33066907387547e-16-8.7147236198461e-17i, 3.33066907387547e-16-4.4517026198843e-17i, 5.55111512312578e-16-1.81766397811914e-16i, -2.22044604925031e-16+3.76574595498641e-16i, 3.33066907387547e-16+2.8373545612348e-17i, -6.66133814775094e-16-1.98666621484541e-16i, 1.11022302462516e-15+1.3900988495185e-16i, 0+0i, 1.11022302462516e-16+0i, 0-4.88556439671224e-17i, 1.4432899320127e-15+5.4401706444201e-16i, -6.66133814775094e-16+4.18075097302204e-16i, -1.11022302462516e-15-3.7758383211069e-16i, 1.11022302462516e-16+1.21021749072872e-16i, 5.55111512312578e-16-9.7601012134884e-17i, 0+3.64949907708171e-17i, 2.99760216648792e-15-3.2254749723992e-16i));Mod(argv[[1]]);");
        check("TestrGenBuiltinMod_testMod1_fb3b185716d13b0bfe23a137e50488a1");
    }

    @Test
    public void TestrGenBuiltinMod_testMod2_dc96f0723575f35d2789efa269c5f470() {
        assertEval("argv <- list(c(1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000));Mod(argv[[1]]);");
        check("TestrGenBuiltinMod_testMod2_dc96f0723575f35d2789efa269c5f470");
    }

    @Test
    public void TestrGenBuiltinMod_testMod3_489e9c3eb0124d4f71c85c0c2a88d0c2() {
        assertEval("argv <- list(structure(c(-0.00275201701154004+0i, 0.73267342182576+1.53432836384434i, 1.19603180664097+2.58954103250214i, -1.78551995785074+3.6927974843213i, -0.21286727655171-2.24663622584203i, 1.71166744547715-2.14519629896288i, -1.56293209739181+1.57166915011841i, -1.58375104473686+3.6829699402818i, -2.00504145581753-1.3546174582843i, 0.683574008984187+0.815530349018154i, -1.53010401343571-2.36562392372444i, 0.99061039704013+3.53936165201907i, 1.67472443120722-1.95559489480179i, -0.68341618370449-2.47704044044817i, 1.48062655483323-1.57686725056915i, 2.87299425968444+2.35949377337065i, 1.8028932379829+0.54336001329155i, 0.8410445275115-2.79377726088858i, -0.85630340738898+1.95000905938152i, -0.070268282309003-0.407774647142381i, 0.87904100084727+1.42913449570069i, -0.5398835286832-1.49689799587001i, -4.20150499254585-1.17770608296304i, -4.20150499254585+1.17770608296304i, -0.5398835286832+1.49689799587001i, 0.87904100084727-1.42913449570068i, -0.070268282309002+0.407774647142381i, -0.85630340738898-1.95000905938152i, 0.8410445275115+2.79377726088858i, 1.8028932379829-0.54336001329155i, 2.87299425968444-2.35949377337065i, 1.48062655483323+1.57686725056915i, -0.68341618370449+2.47704044044817i, 1.67472443120722+1.95559489480179i, 0.99061039704013-3.53936165201907i, -1.53010401343571+2.36562392372443i, 0.683574008984187-0.815530349018153i, -2.00504145581753+1.3546174582843i, -1.58375104473686-3.6829699402818i, -1.56293209739181-1.57166915011841i, 1.71166744547714+2.14519629896288i, -0.21286727655171+2.24663622584203i, -1.78551995785073-3.6927974843213i, 1.19603180664097-2.58954103250214i, 0.73267342182576-1.53432836384434i), .Dim = c(45L, 1L), '`scaled:center`' = -0.00488570008479763));Mod(argv[[1]]);");
        check("TestrGenBuiltinMod_testMod3_489e9c3eb0124d4f71c85c0c2a88d0c2");
    }

    @Test
    public void TestrGenBuiltinMod_testMod4_011e96e22fc7f31b107ddaf032dd099c() {
        assertEval("argv <- list(logical(0));Mod(argv[[1]]);");
        check("TestrGenBuiltinMod_testMod4_011e96e22fc7f31b107ddaf032dd099c");
    }

    @Test
    public void TestrGenBuiltinMod_testMod5_2b50c65c21649a39ef945c735a7f9b8c() {
        assertEval("argv <- list(c(1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1.12400072777761e+21, 2.5852016738885e+22, 6.20448401733239e+23, 1.5511210043331e+25, 4.03291461126606e+26, 1.08888694504184e+28, 3.04888344611714e+29, 8.8417619937397e+30, 2.65252859812191e+32, 8.22283865417792e+33, 2.63130836933694e+35, 8.68331761881189e+36, 2.95232799039604e+38, 1.03331479663861e+40, 3.71993326789901e+41, 1.37637530912263e+43, 5.23022617466601e+44, 2.03978820811974e+46, 8.15915283247898e+47, 3.34525266131638e+49, 1.40500611775288e+51, 6.04152630633738e+52, 2.65827157478845e+54, 1.1962222086548e+56, 5.50262215981209e+57, 2.58623241511168e+59, 1.24139155925361e+61, 6.08281864034268e+62, 3.04140932017134e+64, 1.55111875328738e+66, 8.06581751709439e+67, 4.27488328406003e+69, 2.30843697339241e+71, 1.26964033536583e+73, 7.10998587804863e+74, 4.05269195048772e+76, 2.35056133128288e+78, 1.3868311854569e+80, 8.32098711274139e+81, 5.07580213877225e+83, 3.14699732603879e+85, 1.98260831540444e+87, 1.26886932185884e+89, 8.24765059208247e+90, 5.44344939077443e+92, 3.64711109181887e+94, 2.48003554243683e+96, 1.71122452428141e+98, 1.19785716699699e+100, 8.50478588567862e+101, 6.12344583768861e+103, 4.47011546151268e+105, 3.30788544151939e+107, 2.48091408113954e+109, 1.88549470166605e+111, 1.45183092028286e+113, 1.13242811782063e+115, 8.94618213078298e+116, 7.15694570462638e+118, 5.79712602074737e+120, 4.75364333701284e+122, 3.94552396972066e+124, 3.31424013456535e+126, 2.81710411438055e+128, 2.42270953836727e+130, 2.10775729837953e+132, 1.85482642257398e+134, 1.65079551609085e+136, 1.48571596448176e+138, 1.3520015276784e+140, 1.24384140546413e+142, 1.15677250708164e+144, 1.08736615665674e+146, 1.03299784882391e+148, 9.9167793487095e+149, 9.61927596824821e+151, 9.42689044888325e+153, 9.33262154439442e+155, 9.33262154439442e+157, 9.42594775983836e+159, 9.61446671503513e+161, 9.90290071648618e+163, 1.02990167451456e+166, 1.08139675824029e+168, 1.14628056373471e+170, 1.22652020319614e+172, 1.32464181945183e+174, 1.44385958320249e+176, 1.58824554152274e+178, 1.76295255109024e+180, 1.97450685722107e+182, 2.23119274865981e+184, 2.54355973347219e+186, 2.92509369349302e+188, 3.3931086844519e+190, 3.96993716080872e+192, 4.68452584975429e+194, 5.57458576120761e+196));Mod(argv[[1]]);");
        check("TestrGenBuiltinMod_testMod5_2b50c65c21649a39ef945c735a7f9b8c");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date1_c82ebe1758603c6cfc0331e7dfb6b681() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), mday = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), mon = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), year = c(37L, 16L, 13L, 27L, 47L, 13L, 17L, 23L, 21L, 26L, 20L, 15L, 14L, 14L, 14L, 19L, 48L, 11L, 9L, 13L, 25L, 26L, 10L, 17L, 36L, 38L, 60L, 15L, 19L, 24L, 14L, 5L, 21L, 29L, 26L, 21L, 8L, 28L, 19L, 21L, 25L, 34L, 27L, 28L, 34L, 22L, 23L, 15L, 34L, 25L, 22L, 30L, 24L, 23L, 19L, 32L, 30L, 23L, 30L, 22L, 19L, 32L, 39L, 23L, 20L, 19L, 52L, 27L, 24L, 19L, 25L, 45L, 16L, 43L, 20L, 20L, 31L, 24L, 19L, 26L, 20L, 42L, 19L, 30L, 25L, 24L, 26L, 18L, 22L, 21L, 25L, 28L, 25L, 29L, 33L, 47L, 50L, 45L, 24L, 39L, 24L, 33L, 28L), wday = c(5L, 6L, 3L, 6L, 3L, 3L, 1L, 1L, 6L, 5L, 4L, 5L, 4L, 4L, 4L, 3L, 4L, 0L, 5L, 3L, 4L, 5L, 6L, 1L, 3L, 6L, 5L, 5L, 3L, 2L, 4L, 0L, 6L, 2L, 5L, 6L, 3L, 0L, 3L, 6L, 4L, 1L, 6L, 0L, 1L, 0L, 1L, 5L, 1L, 4L, 0L, 3L, 2L, 1L, 3L, 5L, 3L, 1L, 3L, 0L, 3L, 5L, 0L, 1L, 4L, 3L, 2L, 6L, 2L, 3L, 4L, 1L, 6L, 5L, 4L, 4L, 4L, 2L, 3L, 5L, 4L, 4L, 3L, 3L, 4L, 2L, 5L, 2L, 0L, 6L, 4L, 0L, 4L, 2L, 0L, 3L, 0L, 1L, 2L, 0L, 2L, 0L, 0L), yday = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), isdst = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date1_c82ebe1758603c6cfc0331e7dfb6b681");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date10_e6077f7ea345f94f07782d6b962053d5() {
        assertEval("argv <- list(structure(list(sec = 33.1798663139343, min = 47L, hour = 14L, mday = 17L, mon = 2L, year = 114L, wday = 1L, yday = 75L, isdst = 1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT'))); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date10_e6077f7ea345f94f07782d6b962053d5");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date2_9b70b097891341078c7ac3dab244742d() {
        assertEval("argv <- list(structure(list(sec = c(0, NA), min = c(0L, NA), hour = c(0L, NA), mday = c(6L, NA), mon = c(10L, NA), year = c(107L, NA), wday = c(2L, NA), yday = c(309L, NA), isdst = c(0L, -1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date2_9b70b097891341078c7ac3dab244742d");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date3_740afb98118f8d74dd5e20cb76d838f2() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date3_740afb98118f8d74dd5e20cb76d838f2");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date4_9e105e2633d2cea3f6fa583eed648af4() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 79L, wday = 1L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date4_9e105e2633d2cea3f6fa583eed648af4");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date5_cf0f678e09dfe011d52de2e8ed0d8a51() {
        assertEval("argv <- list(structure(list(sec = c(0, NA, NA, 0), min = c(0L, NA, NA, 0L), hour = c(0L, NA, NA, 0L), mday = c(1L, NA, NA, 26L), mon = c(0L, NA, NA, 9L), year = c(101L, NA, NA, 104L), wday = c(1L, NA, NA, 2L), yday = c(0L, NA, NA, 299L), isdst = c(0L, -1L, -1L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT')); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date5_cf0f678e09dfe011d52de2e8ed0d8a51");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date6_b7ab6b6f393888cd0b7c5ce50c88e360() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = c(0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36), year = 100L, wday = 6L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC')); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date6_b7ab6b6f393888cd0b7c5ce50c88e360");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date7_f57cfa661d06a99778abe1215030336d() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), mday = 1, mon = c(0, 0.5, 1, 1.5, 2, 2.5, 3), year = c(101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102), wday = c(3L, 0L, 6L, 4L, 2L, 0L, 5L, 3L, 1L, 6L, 4L), yday = c(9L, 111L, 12L, 24L, 36L, 48L, 60L, 72L, 84L, 96L, 108L), isdst = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC')); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date7_f57cfa661d06a99778abe1215030336d");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date8_9ce4b6ff85a11e255209b4e564736888() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 109L, wday = 4L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'))); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date8_9ce4b6ff85a11e255209b4e564736888");
    }

    @Test
    public void TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date9_8f6981305a5c0c94ba02cd526c71a6db() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L), mday = 22:26, mon = c(3L, 3L, 3L, 3L, 3L), year = c(108L, 108L, 108L, 108L, 108L), wday = 2:6, yday = 112:116, isdst = c(-1L, -1L, -1L, -1L, -1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT')); .Internal(POSIXlt2Date(argv[[1]]))");
        check("TestrGenBuiltinPOSIXlt2Date_testPOSIXlt2Date9_8f6981305a5c0c94ba02cd526c71a6db");
    }

    @Test
    public void TestrGenBuiltinPrimitive_testPrimitive1_5059794090fe569a9f6b92a2a4a81997() {
        assertEval("argv <- list('c');.Primitive(argv[[1]]);");
        check("TestrGenBuiltinPrimitive_testPrimitive1_5059794090fe569a9f6b92a2a4a81997");
    }

    @Test
    public void TestrGenBuiltinRe_testRe2_9a7ed4d21d9aba632838b9e48f6bb172() {
        assertEval("argv <- list(structure(c(3+2i, 3+2i, NA, 3+2i, 3+2i, 3+2i, 3+2i, 3+2i, 4-5i, 3-5i, NA, NA, 2-5i, 3-5i, 4-5i, 5-5i), .Dim = c(8L, 2L), .Dimnames = list(NULL, c('x1', 'x2'))));Re(argv[[1]]);");
        check("TestrGenBuiltinRe_testRe2_9a7ed4d21d9aba632838b9e48f6bb172");
    }

    @Test
    public void TestrGenBuiltinRe_testRe4_b28c6570823c222bbecec308cf7070cc() {
        assertEval("argv <- list(c(0.923879532511287+0.38268343236509i, 0.707106781186548+0.707106781186547i, 0.38268343236509+0.923879532511287i, 0+1i, -0.38268343236509+0.923879532511287i, -0.707106781186547+0.707106781186548i, -0.923879532511287+0.38268343236509i, -1+0i, -0.923879532511287-0.38268343236509i, -0.707106781186548-0.707106781186547i, -0.38268343236509-0.923879532511287i, 0-1i, 0.38268343236509-0.923879532511287i, 0.707106781186547-0.707106781186548i, 0.923879532511287-0.38268343236509i, 1-0i));Re(argv[[1]]);");
        check("TestrGenBuiltinRe_testRe4_b28c6570823c222bbecec308cf7070cc");
    }

    @Test
    public void TestrGenBuiltinRe_testRe5_d4d00a88b6ce482ef8691821fa66e1bd() {
        assertEval("argv <- list(logical(0));Re(argv[[1]]);");
        check("TestrGenBuiltinRe_testRe5_d4d00a88b6ce482ef8691821fa66e1bd");
    }

    @Test
    public void TestrGenBuiltinRe_testRe6_cf742d40ae39c895c4709acd08d93023() {
        assertEval("argv <- list(FALSE);Re(argv[[1]]);");
        check("TestrGenBuiltinRe_testRe6_cf742d40ae39c895c4709acd08d93023");
    }

    @Test
    public void TestrGenBuiltinReduce_testReduce1_c625550da029520d4fafd5b5027e5da0() {
        assertEval("argv <- structure(list(f = '+', x = 1:7, accumulate = TRUE),     .Names = c('f', 'x', 'accumulate'));do.call('Reduce', argv)");
        check("TestrGenBuiltinReduce_testReduce1_c625550da029520d4fafd5b5027e5da0");
    }

    @Test
    public void TestrGenBuiltinReduce_testReduce2_68d707d9c4b93d3fb0e16facc6d179cb() {
        assertEval("argv <- structure(list(f = function(f, ...) f(...), x = list(.Primitive('log'),     .Primitive('exp'), .Primitive('acos'), .Primitive('cos')),     init = 0, right = TRUE), .Names = c('f', 'x', 'init', 'right'));do.call('Reduce', argv)");
        check("TestrGenBuiltinReduce_testReduce2_68d707d9c4b93d3fb0e16facc6d179cb");
    }

    @Test
    public void TestrGenBuiltinSyschmod_testSyschmod1_40f07fd2d60a448a3cc4d6f3f7b28367() {
        assertEval("argv <- list(character(0), structure(integer(0), class = 'octmode'), TRUE); .Internal(Sys.chmod(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinSyschmod_testSyschmod1_40f07fd2d60a448a3cc4d6f3f7b28367");
    }

    @Test
    public void TestrGenBuiltinSysgetenv_testSysgetenv1_3d26373139ce17678ed43e72c0d74835() {
        assertEval("argv <- list('EDITOR', ''); .Internal(Sys.getenv(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinSysgetenv_testSysgetenv1_3d26373139ce17678ed43e72c0d74835");
    }

    @Test
    public void TestrGenBuiltinSysglob_testSysglob1_fc87be3ca00889f3e32af348c28c2351() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/src/library/utils/man/unix/*.rd', FALSE); .Internal(Sys.glob(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinSysglob_testSysglob1_fc87be3ca00889f3e32af348c28c2351");
    }

    @Test
    public void TestrGenBuiltinSyssetenv_testSyssetenv1_d65915a4f194756781adf4ae91003f30() {
        assertEval("argv <- list('_R_NS_LOAD_', 'Matrix'); .Internal(Sys.setenv(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinSyssetenv_testSyssetenv1_d65915a4f194756781adf4ae91003f30");
    }

    @Test
    public void TestrGenBuiltinSyssetenv_testSyssetenv2_ae39e9c51d2b3ad4538841bf2aa0dac9() {
        assertEval("argv <- list('_R_NS_LOAD_', 'methods'); .Internal(Sys.setenv(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinSyssetenv_testSyssetenv2_ae39e9c51d2b3ad4538841bf2aa0dac9");
    }

    @Test
    public void TestrGenBuiltinSyssetenv_testSyssetenv3_c83106efda39d2bc13cd2e78ce92bd9d() {
        assertEval("argv <- list(c('BIBINPUTS', 'add'), c('.:.:/home/lzhao/hg/r-instrumented/share/texmf/bibtex/bib::/home/lzhao/hg/r-instrumented/share/texmf/bibtex/bib:', 'TRUE')); .Internal(Sys.setenv(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinSyssetenv_testSyssetenv3_c83106efda39d2bc13cd2e78ce92bd9d");
    }

    @Test
    public void TestrGenBuiltinSyssetenv_testSyssetenv5_3946419a55d36a5cbafa78eac9d8a1d3() {
        assertEval("argv <- structure(list(TZ = 'EST5EDT'), .Names = 'TZ');do.call('Sys.setenv', argv)");
        check("TestrGenBuiltinSyssetenv_testSyssetenv5_3946419a55d36a5cbafa78eac9d8a1d3");
    }

    @Test
    public void TestrGenBuiltinSyssetlocale_testSyssetlocale1_ace760dcc6919d504aaeee687218bd42() {
        assertEval("argv <- list(3L, 'C'); .Internal(Sys.setlocale(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinSyssetlocale_testSyssetlocale1_ace760dcc6919d504aaeee687218bd42");
    }

    @Test
    public void TestrGenBuiltinSyssetlocale_testSyssetlocale3_90c86b0a13d6d106a6b4423b54bd2ee0() {
        assertEval("argv <- structure(list(category = 'LC_TIME', locale = 'C'), .Names = c('category',     'locale'));do.call('Sys.setlocale', argv)");
        check("TestrGenBuiltinSyssetlocale_testSyssetlocale3_90c86b0a13d6d106a6b4423b54bd2ee0");
    }

    @Test
    public void TestrGenBuiltinSyssleep_testSyssleep2_095aa5ae488fb09a47367d68bd6461ac() {
        assertEval("argv <- list(FALSE); .Internal(Sys.sleep(argv[[1]]))");
        check("TestrGenBuiltinSyssleep_testSyssleep2_095aa5ae488fb09a47367d68bd6461ac");
    }

    @Test
    public void TestrGenBuiltinSysunsetenv_testSysunsetenv1_ce54c1613ddcccac859ad16f260d079a() {
        assertEval("argv <- list('_R_NS_LOAD_'); .Internal(Sys.unsetenv(argv[[1]]))");
        check("TestrGenBuiltinSysunsetenv_testSysunsetenv1_ce54c1613ddcccac859ad16f260d079a");
    }

    @Test
    public void TestrGenBuiltinSysunsetenv_testSysunsetenv3_aa503b4de73e8d108e2f067e5b8e7b6c() {
        assertEval("argv <- list(character(0)); .Internal(Sys.unsetenv(argv[[1]]))");
        check("TestrGenBuiltinSysunsetenv_testSysunsetenv3_aa503b4de73e8d108e2f067e5b8e7b6c");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate1_3f8f60358d2852dd79ac261204d4a455() {
        assertEval("argv <- list('text', 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate1_3f8f60358d2852dd79ac261204d4a455");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate10_a13dd2733dd648acb226104e63710036() {
        assertEval("argv <- list('filled.contour', 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate10_a13dd2733dd648acb226104e63710036");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate11_b298483fb0dea97de75b038946c13bfe() {
        assertEval("argv <- list(c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), 5, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate11_b298483fb0dea97de75b038946c13bfe");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate12_0cedf2b34efe78f02041ea02771fef5f() {
        assertEval("argv <- list('dtrMatrix-class', 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate12_0cedf2b34efe78f02041ea02771fef5f");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate2_8ef2508350d61e869159fb1bced52268() {
        assertEval("argv <- list(c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), 3, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate2_8ef2508350d61e869159fb1bced52268");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate3_580ddff10a0a301ebe71f2a52baf10b6() {
        assertEval("argv <- list('glm', 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate3_580ddff10a0a301ebe71f2a52baf10b6");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate4_a56b774e334eb18474503a585fce66c3() {
        assertEval("argv <- list(c('(Intercept)', 'sin(2 * pi * Time)', 'cos(2 * pi * Time)'), 6, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate4_a56b774e334eb18474503a585fce66c3");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate5_0af714c5ca5e93f532f86ce88af44784() {
        assertEval("argv <- list(c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), 4L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate5_0af714c5ca5e93f532f86ce88af44784");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate6_6a1b4d9720b96acb1c54dbca06ea0759() {
        assertEval("argv <- list(c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), 3L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate6_6a1b4d9720b96acb1c54dbca06ea0759");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate7_fd5f0f39da664491433b226014651c8f() {
        assertEval("argv <- list(c('1_', 'Weight', 'Cylinders4', 'Cylinders5', 'Cylinders6', 'Cylinders8', 'Cylindersrotary', 'TypeLarge', 'TypeMidsize', 'TypeSmall', 'TypeSporty', 'TypeVan', 'EngineSize', 'DriveTrainFront', 'DriveTrainRear'), 4L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate7_fd5f0f39da664491433b226014651c8f");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate8_74442740ebecb8edfdbcd6b7b8b9c6e8() {
        assertEval("argv <- list(c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), 1L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate8_74442740ebecb8edfdbcd6b7b8b9c6e8");
    }

    @Test
    public void TestrGenBuiltinabbreviate_testabbreviate9_dd51a4be360dd74734620aa055df07b4() {
        assertEval("argv <- list(character(0), 4L, TRUE); .Internal(abbreviate(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinabbreviate_testabbreviate9_dd51a4be360dd74734620aa055df07b4");
    }

    @Test
    public void TestrGenBuiltinabs_testabs10_08b98ef9f06bcf064f86f944e67fee55() {
        assertEval("argv <- list(structure(c(-7.38958333333333, NA, 1.69041666666667, -16.5495833333333, 8.82041666666667, 8.84041666666667, -2.24958333333333, 9.15041666666667, 0.950416666666669, -12.5095833333333, NA, 8.86041666666667, 1.05041666666667, 3.80041666666667, 5.92041666666667, 16.1404166666667, 3.45041666666667, -32.1695833333333, 12.7504166666667, 1.18041666666667, -6.72958333333333, 14.4804166666667, 1.89041666666667, -37.9795833333333, -0.299583333333331, 2.49041666666667, 7.31041666666667, 0.66041666666667, 2.78041666666667, 3.89041666666667, 3.13041666666667, -6.08958333333333, -1.00958333333333, -1.07958333333333, 9.01041666666667, 7.84041666666667, 8.30041666666668, 9.36041666666667, -6.32958333333333, -47.3395833333333, 4.30041666666667, -2.11958333333333, -4.10958333333333, -2.29958333333333, 11.0004166666667, -1.96958333333333, 11.1804166666667, 2.55041666666667, -2.35958333333333, 7.80041666666667), .Names = c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming')));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs10_08b98ef9f06bcf064f86f944e67fee55");
    }

    @Test
    public void TestrGenBuiltinabs_testabs12_89bc29cab4456ce9ffd4baf8e12b985a() {
        assertEval("argv <- list(structure(c(1.47191076131574, 0.586694550701453, NA, 0.258706725324317, 0.948371836939988, 0.396080061109718, NA, 0.350912037541581), .Dim = c(4L, 2L), .Dimnames = list(c('(Intercept)', 'x1', 'x2', 'x3'), c('Estimate', 'Std. Error'))));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs12_89bc29cab4456ce9ffd4baf8e12b985a");
    }

    @Test
    public void TestrGenBuiltinabs_testabs15_42e368ad587471ee7343923834e662fd() {
        assertEval("argv <- list(structure(c(NA, NA), .Dim = 1:2, .Dimnames = list('x', c('Estimate', 'Std. Error'))));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs15_42e368ad587471ee7343923834e662fd");
    }

    @Test
    public void TestrGenBuiltinabs_testabs16_24080b327fd1cbc078975d14c69b4b04() {
        assertEval("argv <- list(-3.31827701955945e-05);abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs16_24080b327fd1cbc078975d14c69b4b04");
    }

    @Test
    public void TestrGenBuiltinabs_testabs18_89a19797216cf436f5dc8cd2d8c25ef9() {
        assertEval("argv <- list(structure(c(8, 7, 6, 5, 4, 3, 2, 1, 0, -1), .Tsp = c(2, 11, 1), class = 'ts'));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs18_89a19797216cf436f5dc8cd2d8c25ef9");
    }

    @Test
    public void TestrGenBuiltinabs_testabs21_c8f67db4b1012da2b88cce063f8df68b() {
        assertEval("argv <- list(structure(c(2671, 6.026e+77, 3.161e+152, 3.501e+299, 2.409e+227, 1.529e+302), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs21_c8f67db4b1012da2b88cce063f8df68b");
    }

    @Test
    public void TestrGenBuiltinabs_testabs3_61a9e748aec4fab2ea5137b170509030() {
        assertEval("argv <- list(c(-0.510763209393394, Inf, 1, 1, Inf, 1, 0, -1.95785440613009, -48.49854545454, -Inf, 1, 1, 0.342969776609699, 0.00707175387211123));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs3_61a9e748aec4fab2ea5137b170509030");
    }

    @Test
    public void TestrGenBuiltinabs_testabs4_f91888988f43bddc96c668cab13e929b() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs4_f91888988f43bddc96c668cab13e929b");
    }

    @Test
    public void TestrGenBuiltinabs_testabs6_3bc89c2550f27d0855af5dc0db5feb91() {
        assertEval("argv <- list(structure(c(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149), .Tsp = c(4, 153, 1), class = 'ts'));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs6_3bc89c2550f27d0855af5dc0db5feb91");
    }

    @Test
    public void TestrGenBuiltinabs_testabs7_25211be9b225f212b2c567aa23f96ae0() {
        assertEval("argv <- list(structure(c(3.5527136788005e-15+2.4168586625265e-16i, 2.4980018054066e-16-2.28189378671807e-16i, 0-6.89814774385614e-17i, 0-1.77454768520688e-17i), .Dim = c(2L, 2L)));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs7_25211be9b225f212b2c567aa23f96ae0");
    }

    @Test
    public void TestrGenBuiltinabs_testabs8_9a62d3bd8e4044a39df40e320957aacb() {
        assertEval("argv <- list(1e+07);abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs8_9a62d3bd8e4044a39df40e320957aacb");
    }

    @Test
    public void TestrGenBuiltinabs_testabs9_c51f8b5e2b9ab2909e26c0abdecd1518() {
        assertEval("argv <- list(structure(c(56.8666666666667, 52.8833333333333), .Dim = 2L, .Dimnames = structure(list(K = c('0', '1')), .Names = 'K')));abs(argv[[1]]);");
        check("TestrGenBuiltinabs_testabs9_c51f8b5e2b9ab2909e26c0abdecd1518");
    }

    @Test
    public void TestrGenBuiltinacos_testacos2_c1f5aef3c39bb3074ce27fda997574df() {
        assertEval("argv <- list(1.54308063481524+0i);acos(argv[[1]]);");
        check("TestrGenBuiltinacos_testacos2_c1f5aef3c39bb3074ce27fda997574df");
    }

    @Test
    public void TestrGenBuiltinacos_testacos3_8836442fa650e9d601a948339bcfce62() {
        assertEval("argv <- list(c(-0.7104065636993+1i, 0.25688370915653+1i, -0.24669187846237+1i, -0.34754259939773+1i, -0.95161856726502+1i, -0.04502772480892+1i, -0.78490446945708+1i, -1.66794193658814+1i, -0.38022652028776+1i, 0.91899660906077+1i, -0.57534696260839+1i, 0.60796432222503+1i, -1.61788270828916+1i, -0.05556196552454+1i, 0.51940720394346+1i, 0.30115336216671+1i, 0.10567619414894+1i, -0.64070600830538+1i, -0.84970434603358+1i, -1.02412879060491+1i, 0.11764659710013+1i, -0.9474746141848+1i, -0.49055744370067+1i, -0.25609219219825+1i, 1.84386200523221+1i, -0.65194990169546+1i, 0.23538657228486+1i, 0.07796084956371+1i, -0.96185663413013+1i, -0.0713080861236+1i, 1.44455085842335+1i, 0.45150405307921+1i, 0.04123292199294+1i, -0.42249683233962+1i, -2.05324722154052+1i, 1.13133721341418+1i, -1.46064007092482+1i, 0.73994751087733+1i, 1.90910356921748+1i, -1.4438931609718+1i, 0.70178433537471+1i, -0.26219748940247+1i, -1.57214415914549+1i, -1.51466765378175+1i, -1.60153617357459+1i, -0.5309065221703+1i, -1.4617555849959+1i, 0.68791677297583+1i, 2.10010894052567+1i, -1.28703047603518+1i, 0.78773884747518+1i, 0.76904224100091+1i, 0.33220257895012+1i, -1.00837660827701+1i, -0.11945260663066+1i, -0.28039533517025+1i, 0.56298953322048+1i, -0.37243875610383+1i, 0.97697338668562+1i, -0.37458085776701+1i, 1.05271146557933+1i, -1.04917700666607+1i, -1.26015524475811+1i, 3.2410399349424+1i, -0.41685758816043+1i, 0.29822759154072+1i, 0.63656967403385+1i, -0.48378062570874+1i, 0.51686204431361+1i, 0.36896452738509+1i, -0.21538050764169+1i, 0.06529303352532+1i, -0.03406725373846+1i, 2.12845189901618+1i, -0.74133609627283+1i, -1.09599626707466+1i, 0.03778839917108+1i, 0.31048074944314+1i, 0.43652347891018+1i, -0.45836533271111+1i, -1.06332613397119+1i, 1.26318517608949+1i, -0.34965038795355+1i, -0.86551286265337+1i, -0.2362795689411+1i, -0.19717589434855+1i, 1.10992028971364+1i, 0.0847372921972+1i, 0.75405378518452+1i, -0.49929201717226+1i, 0.2144453095816+1i, -0.32468591149083+1i, 0.09458352817357+1i, -0.89536335797754+1i, -1.31080153332797+1i, 1.99721338474797+1i, 0.60070882367242+1i, -1.25127136162494+1i, -0.61116591668042+1i, -1.18548008459731+1i));acos(argv[[1]]);");
        check("TestrGenBuiltinacos_testacos3_8836442fa650e9d601a948339bcfce62");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh1_6417e4c770e5dd9138567c123e915f2c() {
        assertEval("argv <- list(FALSE);acosh(argv[[1]]);");
        check("TestrGenBuiltinacosh_testacosh1_6417e4c770e5dd9138567c123e915f2c");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh2_34cde32b8509e28f6d93d1c99ffa1b12() {
        assertEval("argv <- list(logical(0));acosh(argv[[1]]);");
        check("TestrGenBuiltinacosh_testacosh2_34cde32b8509e28f6d93d1c99ffa1b12");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh3_1812134e9fa54f36f09013a65afa2c65() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));acosh(argv[[1]]);");
        check("TestrGenBuiltinacosh_testacosh3_1812134e9fa54f36f09013a65afa2c65");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh4_b350d6aea0039cca836edd272bf1a418() {
        assertEval("argv <- list(c(0+2i, 0.0001+2i, 0-2i, 0-2.0001i));acosh(argv[[1]]);");
        check("TestrGenBuiltinacosh_testacosh4_b350d6aea0039cca836edd272bf1a418");
    }

    @Test
    public void TestrGenBuiltinacosh_testacosh5_c0722300f2990f4da52ef2da956f429b() {
        assertEval("argv <- list(c(10.0676619957778, 9.77014619112734, 9.48151278613522, 9.20149937354487, 8.92985138285227, 8.66632184886646, 8.41067118718443, 8.16266697637608, 7.92208374668136, 7.68870277502741, 7.46231188617936, 7.242705259844, 7.02968324355098, 6.82305217114139, 6.62262418669875, 6.42821707376226, 6.23965408966708, 6.05676380486112, 5.87937994705209, 5.70734125004322, 5.54049130712027, 5.37867842885638, 5.22175550520566, 5.06957987175999, 4.92201318004762, 4.77892127175541, 4.64017405676061, 4.50564539486112, 4.3752129810968, 4.24875823455752, 4.12616619057689, 4.00732539621364, 3.89212780892567, 3.78046869834458, 3.67224655106143, 3.56736297833717, 3.46572262665382, 3.36723309102506, 3.27180483098748, 3.17935108919603, 3.0897878125497, 3.00303357577581, 2.91900950740325, 2.83763921805753, 2.75884873101238, 2.68256641493482, 2.60872291876243, 2.53725110865378, 2.46808600695458, 2.40116473312406, 2.33642644656803, 2.27381229132637, 2.21326534256499, 2.1547305548233, 2.09815471197041, 2.04348637882435, 1.99067585439045, 1.93967512667636, 1.89043782904258, 1.84291919804882, 1.7970760327579, 1.75286665546022, 1.71025087378301, 1.66918994414995, 1.62964653655797, 1.59158470063915, 1.55496983297695, 1.51976864564695, 1.48594913595357, 1.45348055733525, 1.42233339141161, 1.39247932114721, 1.36389120510748, 1.33654305278346, 1.31041000096287, 1.28546829112601, 1.26169524784609, 1.23906925817407, 1.21756975198963, 1.19717718330002, 1.17787301247016, 1.15963968936754, 1.14246063740672, 1.12632023847902, 1.11120381875343, 1.09709763533618, 1.0839888637765, 1.07186558640748, 1.06071678151125, 1.05053231329877, 1.04130292269496, 1.033020218921, 1.02567667186589, 1.01926560524059, 1.01378119050839, 1.00921844158588, 1.00557321031002, 1.00284218266684, 1.00102287577853, 1.00011363564622, 1.00011363564622, 1.00102287577853, 1.00284218266684, 1.00557321031002, 1.00921844158588, 1.01378119050839, 1.01926560524059, 1.02567667186589, 1.033020218921, 1.04130292269496, 1.05053231329877, 1.06071678151125, 1.07186558640748, 1.0839888637765, 1.09709763533618, 1.11120381875343, 1.12632023847902, 1.14246063740672, 1.15963968936754, 1.17787301247016, 1.19717718330002, 1.21756975198963, 1.23906925817407, 1.26169524784609, 1.28546829112601, 1.31041000096287, 1.33654305278346, 1.36389120510748, 1.39247932114721, 1.42233339141161, 1.45348055733525, 1.48594913595357, 1.51976864564695, 1.55496983297695, 1.59158470063915, 1.62964653655796, 1.66918994414995, 1.71025087378301, 1.75286665546022, 1.7970760327579, 1.84291919804882, 1.89043782904258, 1.93967512667636, 1.99067585439045, 2.04348637882435, 2.09815471197041, 2.1547305548233, 2.21326534256499, 2.27381229132637, 2.33642644656803, 2.40116473312406, 2.46808600695458, 2.53725110865378, 2.60872291876243, 2.68256641493482, 2.75884873101238, 2.83763921805753, 2.91900950740325, 3.00303357577581, 3.0897878125497, 3.17935108919602, 3.27180483098748, 3.36723309102506, 3.46572262665381, 3.56736297833717, 3.67224655106143, 3.78046869834458, 3.89212780892567, 4.00732539621364, 4.12616619057689, 4.24875823455752, 4.3752129810968, 4.50564539486111, 4.64017405676061, 4.77892127175541, 4.92201318004762, 5.06957987175999, 5.22175550520565, 5.37867842885638, 5.54049130712027, 5.70734125004322, 5.87937994705209, 6.05676380486112, 6.23965408966708, 6.42821707376226, 6.62262418669875, 6.82305217114139, 7.02968324355097, 7.242705259844, 7.46231188617936, 7.68870277502741, 7.92208374668136, 8.16266697637608, 8.41067118718443, 8.66632184886646, 8.92985138285226, 9.20149937354487, 9.48151278613522, 9.77014619112734, 10.0676619957778));acosh(argv[[1]]);");
        check("TestrGenBuiltinacosh_testacosh5_c0722300f2990f4da52ef2da956f429b");
    }

    @Test
    public void TestrGenBuiltinadist_testadist1_20f330e1a3c56749a78545125e8a8d9c() {
        assertEval("argv <- list(list(c(107L, 105L, 116L, 116L, 101L, 110L)), list(c(115L, 105L, 116L, 116L, 105L, 110L, 103L)), structure(c(1, 1, 1), .Names = c('insertions', 'deletions', 'substitutions')), FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(adist(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinadist_testadist1_20f330e1a3c56749a78545125e8a8d9c");
    }

    @Test
    public void TestrGenBuiltinadist_testadist2_01d983ea87a1f9111ebf0d1d90692dc2() {
        assertEval("argv <- list(list(c(107L, 105L, 116L, 116L, 101L, 110L), c(115L, 105L, 116L, 116L, 105L, 110L, 103L)), list(c(107L, 105L, 116L, 116L, 101L, 110L), c(115L, 105L, 116L, 116L, 105L, 110L, 103L)), structure(c(1, 1, 1), .Names = c('insertions', 'deletions', 'substitutions')), TRUE, TRUE, FALSE, FALSE, FALSE); .Internal(adist(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinadist_testadist2_01d983ea87a1f9111ebf0d1d90692dc2");
    }

    @Test
    public void TestrGenBuiltinadist_testadist3_80e43d8a43e882613fad25fd88d3d6e1() {
        assertEval("argv <- list('lasy', '1 lazy 2', c(1L, 1L, 1L), FALSE, TRUE, TRUE, FALSE, FALSE); .Internal(adist(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinadist_testadist3_80e43d8a43e882613fad25fd88d3d6e1");
    }

    @Test
    public void TestrGenBuiltinadist_testadist4_5cb4c371cce1ef3c985da481867d9904() {
        assertEval("argv <- list(list(), list(), structure(c(1, 1, 1), .Names = c('insertions', 'deletions', 'substitutions')), FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(adist(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinadist_testadist4_5cb4c371cce1ef3c985da481867d9904");
    }

    @Test
    public void TestrGenBuiltinagrep_testagrep3_33d528b314749f42953d0f4bac45d56b() {
        assertEval("argv <- list('lasy', c(' 1 lazy 2', '1 lasy 2'), FALSE, FALSE, c(1L, 1L, 1L), structure(c(NA, 0.1, 0.1, 0, 0.1), .Names = c('cost', 'insertions', 'deletions', 'substitutions', 'all')), FALSE, TRUE); .Internal(agrep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinagrep_testagrep3_33d528b314749f42953d0f4bac45d56b");
    }

    @Test
    public void TestrGenBuiltinagrep_testagrep4_380a2fc13b70e43d0e289a5420f8149c() {
        assertEval("argv <- list('laysy', c('1 lazy', '1', '1 LAZY'), FALSE, TRUE, c(1L, 1L, 1L), c(2, NA, NA, NA, NA), FALSE, TRUE); .Internal(agrep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinagrep_testagrep4_380a2fc13b70e43d0e289a5420f8149c");
    }

    @Test
    public void TestrGenBuiltinagrep_testagrep5_9c364500a91a276278593a8605406fea() {
        assertEval("argv <- list('laysy', c('1 lazy', '1', '1 LAZY'), TRUE, FALSE, c(1L, 1L, 1L), c(2, NA, NA, NA, NA), FALSE, TRUE); .Internal(agrep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinagrep_testagrep5_9c364500a91a276278593a8605406fea");
    }

    @Test
    public void TestrGenBuiltinall_testall3_4230759bcd3e2b5fecbe340fe103917a() {
        assertEval("argv <- list(c(1, 1, 3, 1, 1, 3, 3, 3, 3), FALSE, NULL);all(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinall_testall3_4230759bcd3e2b5fecbe340fe103917a");
    }

    @Test
    public void TestrGenBuiltinall_testall4_2f46bb1732b004009986f99a5653f807() {
        assertEval("argv <- list(structure(c(0, 0, 3, 0, 0, 0, 1, 0, 0, 2, 2, 3.2, -1, 1, 3.2, 4, 3, 0, 0, 0, 0, 3.2, 0, 0, 3.2, 0, 202, 0, 0, 0, 241, 0, 243, 0, 0), .Dim = c(5L, 7L), .Dimnames = list(c('r1', 'r2', 'r3', 'r4', 'r5'), c('c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7'))));all(argv[[1]]);");
        check("TestrGenBuiltinall_testall4_2f46bb1732b004009986f99a5653f807");
    }

    @Test
    public void TestrGenBuiltinallequalPOSIXt_testallequalPOSIXt1_7794d4288c2e86a1333c51371fee2e39() {
        assertEval("argv <- structure(list(target = structure(1412833061.16639, class = c('POSIXct',     'POSIXt')), current = structure(1412833061.16839, class = c('POSIXct',     'POSIXt'))), .Names = c('target', 'current'));do.call('all.equal.POSIXt', argv)");
        check("TestrGenBuiltinallequalPOSIXt_testallequalPOSIXt1_7794d4288c2e86a1333c51371fee2e39");
    }

    @Test
    public void TestrGenBuiltinallequalPOSIXt_testallequalPOSIXt2_01a0f550f6faaf9ef6896423d050ba55() {
        assertEval("argv <- structure(list(target = structure(1412833061.16639, class = c('POSIXct',     'POSIXt')), current = structure(list(sec = 41.1663863658905,     min = 37L, hour = 1L, mday = 9L, mon = 9L, year = 114L, wday = 4L,     yday = 281L, isdst = 1L, zone = 'EDT', gmtoff = -14400L),     .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday',         'yday', 'isdst', 'zone', 'gmtoff'), class = c('POSIXlt',         'POSIXt'), tzone = c('', 'EST', 'EDT'))), .Names = c('target',     'current'));do.call('all.equal.POSIXt', argv)");
        check("TestrGenBuiltinallequalPOSIXt_testallequalPOSIXt2_01a0f550f6faaf9ef6896423d050ba55");
    }

    @Test
    public void TestrGenBuiltinallequalfactor_testallequalfactor1_b2458111773a805367c3689c3f07da95() {
        assertEval("argv <- structure(list(target = structure(c(4L, 5L, 1L, 5L, 3L,     4L, 5L, 3L, 2L, 4L), .Label = c('a', 'c', 'i', 's', 't'),     class = 'factor', contrasts = structure(c(1, 0, 0, 0, -1,         0, 1, 0, 0, -1, -0.247125681008604, -0.247125681008604,         -0.149872105789645, 0.891249148815458, -0.247125681008604,         0.268816352031209, 0.268816352031209, -0.881781351530059,         0.0753322954364324, 0.268816352031209), .Dim = c(5L,         4L), .Dimnames = list(c('a', 'c', 'i', 's', 't'), NULL))),     current = structure(c(4L, 5L, 1L, 5L, 3L, 4L, 5L, 3L, 2L,         4L), .Label = c('a', 'c', 'i', 's', 't'), class = 'factor',         contrasts = structure(c(1, 0, 0, 0, -1, 0, 1, 0, 0, -1,             -0.247125681008604, -0.247125681008604, -0.149872105789645,             0.891249148815458, -0.247125681008604, 0.268816352031209,             0.268816352031209, -0.881781351530059, 0.0753322954364324,             0.268816352031209), .Dim = c(5L, 4L), .Dimnames = list(c('a',             'c', 'i', 's', 't'), NULL)))), .Names = c('target',     'current'));do.call('all.equal.factor', argv)");
        check("TestrGenBuiltinallequalfactor_testallequalfactor1_b2458111773a805367c3689c3f07da95");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames1_91d2bc6274a765dc9039b8316f7baaa7() {
        assertEval("argv <- list(quote(y ~ ((g1) * exp((log(g2/g1)) * (1 - exp(-k * (x - Ta)))/(1 - exp(-k * (Tb - Ta)))))), FALSE, -1L, TRUE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinallnames_testallnames1_91d2bc6274a765dc9039b8316f7baaa7");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames2_37e29563eceee41b9f93dab8ef411e65() {
        assertEval("argv <- list(logical(0), logical(0), -1L, TRUE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinallnames_testallnames2_37e29563eceee41b9f93dab8ef411e65");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames3_a741436ee90e9dc24d0f9b448e681420() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), TRUE, -1L, FALSE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinallnames_testallnames3_a741436ee90e9dc24d0f9b448e681420");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames4_8502c9c9f94dcf67fc2422000a687a70() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), -1L, FALSE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinallnames_testallnames4_8502c9c9f94dcf67fc2422000a687a70");
    }

    @Test
    public void TestrGenBuiltinallnames_testallnames5_b7e1ba66ca7346427de4997ca58ae852() {
        assertEval("argv <- list(0.1, FALSE, -1L, TRUE); .Internal(all.names(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinallnames_testallnames5_b7e1ba66ca7346427de4997ca58ae852");
    }

    @Test
    public void TestrGenBuiltinallvars_testallvars1_639b4c2ec17d95b654fedb05e999dbab() {
        assertEval("argv <- structure(list(expr = expression(quote(temp[1, ] ~ 3))),     .Names = 'expr');do.call('all.vars', argv)");
        check("TestrGenBuiltinallvars_testallvars1_639b4c2ec17d95b654fedb05e999dbab");
    }

    @Test
    public void TestrGenBuiltinand_octmode_testand_octmode1_4a7df79937a53ae14143411150f6cf7c() {
        assertEval("argv <- structure(list(a = structure(integer(0), class = 'octmode'),     b = '400'), .Names = c('a', 'b'));do.call('&.octmode', argv)");
        check("TestrGenBuiltinand_octmode_testand_octmode1_4a7df79937a53ae14143411150f6cf7c");
    }

    @Test
    public void TestrGenBuiltinany_testany17_58be436b003b48508d76dfe0ba27580a() {
        assertEval("argv <- list('NA');do.call('any', argv)");
        check("TestrGenBuiltinany_testany17_58be436b003b48508d76dfe0ba27580a");
    }

    @Test
    public void TestrGenBuiltinany_testany5_34add2b2779dda21f8751fdf1b5df823() {
        assertEval("argv <- list(structure(c(14, 2, 0, 2, -7, 0), .Dim = c(3L, 2L)));any(argv[[1]]);");
        check("TestrGenBuiltinany_testany5_34add2b2779dda21f8751fdf1b5df823");
    }

    @Test
    public void TestrGenBuiltinanyDuplicated_testanyDuplicated18_930a4b7780b08bcf243f2950eab883b1() {
        assertEval("argv <- structure(list(x = structure(c(3, 2, 7, 2, 6, 2, 7, 2),     .Dim = c(4L, 2L), .Dimnames = list(c('A', 'B', 'C', 'D'),         c('M', 'F'))), MARGIN = 0), .Names = c('x', 'MARGIN'));do.call('anyDuplicated', argv)");
        check("TestrGenBuiltinanyDuplicated_testanyDuplicated18_930a4b7780b08bcf243f2950eab883b1");
    }

    @Test
    public void TestrGenBuiltinanyDuplicatedmatrix_testanyDuplicatedmatrix1_1bad66c68c3401eb999d5cdd3b1e96d5() {
        assertEval("argv <- structure(list(x = structure(c(3, 2, 7, 2, 6, 2, 7, 2),     .Dim = c(4L, 2L), .Dimnames = list(c('A', 'B', 'C', 'D'),         c('M', 'F'))), MARGIN = 0), .Names = c('x', 'MARGIN'));do.call('anyDuplicated.matrix', argv)");
        check("TestrGenBuiltinanyDuplicatedmatrix_testanyDuplicatedmatrix1_1bad66c68c3401eb999d5cdd3b1e96d5");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm1_96b2cdeb00518e3fe3eaa70cb032ccd8() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Dim = c(5L, 14L), .Dimnames = list(c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'), NULL)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm1_96b2cdeb00518e3fe3eaa70cb032ccd8");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm10_37e09863e2671c0d1f8ec9eff515bfb0() {
        assertEval("argv <- list(structure(c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8), .Dim = c(4L, 4L, 2L), .Dimnames = structure(list(Hair = c('Black', 'Brown', 'Red', 'Blond'), Eye = c('Brown', 'Blue', 'Hazel', 'Green'), Sex = c('Male', 'Female')), .Names = c('Hair', 'Eye', 'Sex')), class = 'table'), c(3L, 1L, 2L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm10_37e09863e2671c0d1f8ec9eff515bfb0");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm13_e391bcfbff0caf4cbdeb67dd49b34c1e() {
        assertEval("argv <- list(structure(c('    Null deviance:', 'Residual deviance:', '3.118557', '0.012672', ' on', ' on', '8', '7', ' degrees of freedom\\n', ' degrees of freedom\\n'), .Dim = c(2L, 5L), .Dimnames = list(c('null.deviance', 'deviance'), NULL)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm13_e391bcfbff0caf4cbdeb67dd49b34c1e");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm15_cef9555938417a65760cac0c3cb61fe6() {
        assertEval("argv <- list(structure(cim = c(5L, 20L), .Dimnames = list(c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'), NULL)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm15_cef9555938417a65760cac0c3cb61fe6");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm16_a579fb8cc6bd8d6e2935c7b4d1d100e4() {
        assertEval("argv <- list(structure(c(0.537261763078809+0i, 0.305061935059249+0.040985454461732i, 0.320062315956695-0.375563080684187i, 0.339383913939873+0.23302799386284i, -0.286918674221019+0.348301421162371i, 0.333809303929022+0i, -0.026432475532662-0.117484096686937i, 0.337897321317337+0.476009430788475i, -0.104431629205049-0.683873316213355i, -0.076600108155357+0.221030150757328i, 0.0283375771475593+0i, -0.439625821284244+0.725562264268455i, -0.093252555843956-0.328135936730845i, 0.099659684890077-0.362886081139892i, -0.146024566266657+0.013219412797458i, 0.437826208287688+0i, -0.047393587739568+0.297523229473226i, 0.053640336864496+0.244704251340016i, 0.189395328272566+0.197948900656662i, 0.744900728861518-0.157648587806964i, -0.63829956885596+0i, 0.190923866036828+0.209348060979014i, 0.478761262752136+0.086103851005322i, 0.365383456834977-0.041833555661111i, 0.222902888615007+0.301211043305794i), .Dim = c(5L, 5L)), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm16_a579fb8cc6bd8d6e2935c7b4d1d100e4");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm19_04dc84bdcf3d22a59a3ef718a56bbb0f() {
        assertEval("argv <- list(structure(c(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 4000, 8000, 12000, 16000, 20000, 24000, 28000, 32000, 36000, 40000, 44000, 48000, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 8000, 16000, 24000, 32000, 40000, 48000, 56000, 64000, 72000, 80000, 88000, 96000, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144, 12000, 24000, 36000, 48000, 60000, 72000, 84000, 96000, 108000, 120000, 132000, 144000, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 16000, 32000, 48000, 64000, 80000, 96000, 112000, 128000, 144000, 160000, 176000, 192000, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 20000, 40000, 60000, 80000, 1e+05, 120000, 140000, 160000, 180000, 2e+05, 220000, 240000, 24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 264, 288, 24000, 48000, 72000, 96000, 120000, 144000, 168000, 192000, 216000, 240000, 264000, 288000, 28, 56, 84, 112, 140, 168, 196, 224, 252, 280, 308, 336, 28000, 56000, 84000, 112000, 140000, 168000, 196000, 224000, 252000, 280000, 308000, 336000, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 32000, 64000, 96000, 128000, 160000, 192000, 224000, 256000, 288000, 320000, 352000, 384000, 36, 72, 108, 144, 180, 216, 252, 288, 324, 360, 396, 432, 36000, 72000, 108000, 144000, 180000, 216000, 252000, 288000, 324000, 360000, 396000, 432000, 40, 80, 120, 160, 200, 240, 280, 320, 360, 400, 440, 480, 40000, 80000, 120000, 160000, 2e+05, 240000, 280000, 320000, 360000, 4e+05, 440000, 480000, 44, 88, 132, 176, 220, 264, 308, 352, 396, 440, 484, 528, 44000, 88000, 132000, 176000, 220000, 264000, 308000, 352000, 396000, 440000, 484000, 528000, 48, 96, 144, 192, 240, 288, 336, 384, 432, 480, 528, 576, 48000, 96000, 144000, 192000, 240000, 288000, 336000, 384000, 432000, 480000, 528000, 576000, 52, 104, 156, 208, 260, 312, 364, 416, 468, 520, 572, 624, 52000, 104000, 156000, 208000, 260000, 312000, 364000, 416000, 468000, 520000, 572000, 624000, 56, 112, 168, 224, 280, 336, 392, 448, 504, 560, 616, 672, 56000, 112000, 168000, 224000, 280000, 336000, 392000, 448000, 504000, 560000, 616000, 672000, 60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 60000, 120000, 180000, 240000, 3e+05, 360000, 420000, 480000, 540000, 6e+05, 660000, 720000, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 64000, 128000, 192000, 256000, 320000, 384000, 448000, 512000, 576000, 640000, 704000, 768000, 68, 136, 204, 272, 340, 408, 476, 544, 612, 680, 748, 816, 68000, 136000, 204000, 272000, 340000, 408000, 476000, 544000, 612000, 680000, 748000, 816000, 72, 144, 216, 288, 360, 432, 504, 576, 648, 720, 792, 864, 72000, 144000, 216000, 288000, 360000, 432000, 504000, 576000, 648000, 720000, 792000, 864000, 76, 152, 228, 304, 380, 456, 532, 608, 684, 760, 836, 912, 76000, 152000, 228000, 304000, 380000, 456000, 532000, 608000, 684000, 760000, 836000, 912000, 80, 160, 240, 320, 400, 480, 560, 640, 720, 800, 880, 960, 80000, 160000, 240000, 320000, 4e+05, 480000, 560000, 640000, 720000, 8e+05, 880000, 960000, 84, 168, 252, 336, 420, 504, 588, 672, 756, 840, 924, 1008, 84000, 168000, 252000, 336000, 420000, 504000, 588000, 672000, 756000, 840000, 924000, 1008000, 88, 176, 264, 352, 440, 528, 616, 704, 792, 880, 968, 1056, 88000, 176000, 264000, 352000, 440000, 528000, 616000, 704000, 792000, 880000, 968000, 1056000, 92, 184, 276, 368, 460, 552, 644, 736, 828, 920, 1012, 1104, 92000, 184000, 276000, 368000, 460000, 552000, 644000, 736000, 828000, 920000, 1012000, 1104000, 96, 192, 288, 384, 480, 576, 672, 768, 864, 960, 1056, 1152, 96000, 192000, 288000, 384000, 480000, 576000, 672000, 768000, 864000, 960000, 1056000, 1152000), .Dim = c(3L, 4L, 2L, 3L, 4L, 2L), .Dimnames = list(c('A', 'B', 'C'), c('D', 'E', 'F', 'G'), c('frequentist', 'bayesian'), NULL, NULL, c('happy', 'sad'))), c(4L, 1L, 5L, 2L, 6L, 3L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm19_04dc84bdcf3d22a59a3ef718a56bbb0f");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm20_a60260052b25fde56101fe8dbd0e68d8() {
        assertEval("argv <- list(structure(1:24, .Dim = c(4L, 6L), .Dimnames = structure(list(happy = c('a', 'b', 'c', 'd'), sad = c('A', 'B', 'C', 'D', 'E', 'F')), .Names = c('happy', 'sad'))), c(2, 1), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm20_a60260052b25fde56101fe8dbd0e68d8");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm21_ce4c8e2814e108f6506868be605410c5() {
        assertEval("argv <- list(structure(1:120, .Dim = 2:5, .Dimnames = list(NULL, c('a', 'b', 'c'), NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))), 1:4, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm21_ce4c8e2814e108f6506868be605410c5");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm22_64d5bebb43aff8cefa15f42e5f425cb4() {
        assertEval("argv <- list(structure(c('    Null deviance:', 'Residual deviance:', '67.5316', ' 4.5512', ' on', ' on', '9', '7', ' degrees of freedom\\n', ' degrees of freedom\\n'), .Dim = c(2L, 5L), .Dimnames = list(c('null.deviance', 'deviance'), NULL)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm22_64d5bebb43aff8cefa15f42e5f425cb4");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm24_bbec9b3d0b9ac37bc11289bead4a9a49() {
        assertEval("argv <- list(structure(c(3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5), .Dim = c(8L, 2L), .Dimnames = list(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), c('x1', 'x2'))), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm24_bbec9b3d0b9ac37bc11289bead4a9a49");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm25_1c60d8417af5ed2e2eb30ec63ebc0415() {
        assertEval("argv <- list(structure(c(0, 1.23517986278748, 1.95771376416406, 2.47035972557496, 2.86799882564536, 3.19289362695154, 3.46758826742286, 3.70553958836244, 3.91542752832811, 4.10317868843284, 4.27302027203108, 4.42807348973901, 4.57070862330685, 4.70276813021034, 4.82571258980942, 4.94071945114991, 5.04875179140451, 5.15060739111559, 5.2469545231864, 5.33835855122032, 5.42530203158692, 5.50820013481856, 5.58741263619316, 5.66325335252649, 5.73599765129073, 5.80588848609433, 5.87314129249217, 5.93794799299782, 6.00048029898585, 6.0608924525969, 6.11932351888589, 6.17589931393739, 6.23073403619514, 6.28393165419199, 6.33558709306823, 6.38578725390307, 6.43461189335533, 6.48213438597388, 6.52842238747091, 6.5735384140078, 6.61754034994095, 6.6604818943744, 6.70241295516147, 6.74337999760604, 6.78342635397348, 6.82259249898064, 6.86091629565604, 6.89843321531397, 6.93517653484573, 6.97117751407821, 7.00646555556857, 7.04106834888181, 7.07501200112497, 7.10832115527965, 7.14101909767645, 7.1731278557853, 7.20466828735046, 7.23566016177333, 7.26612223453848, 7.29607231538438, 7.3255273308395, 7.35450338167337, 7.38301579575098, 7.41107917672487, 7.43870744895221, 7.46591389898262, 7.49271121392624, 7.51911151697947, 7.54512640035722, 7.57076695585571, 7.59604380324749, 7.62096711669055, 7.64554664931599, 7.66979175614282, 7.69371141545478, 7.71731424876136, 7.74060853945395, 7.76360225025839, 7.78630303957574, 7.80871827679528, 7.83085505665623, 7.85272021272842, 7.87432033007586, 7.89566175716188, 7.91675061704988, 7.93759281794895, 7.95819406314991, 7.97855986039352, 7.99869553070936, 8.01860621676096, 8.03829689072971, 8.05777236176812, 8.07703728304995, 8.09609615844352, 8.11495334883177, 8.13361307810145, 8.15207943882202, 8.17035639763321, 8.1884478003592, 8.20635737686569, 5.76558893216369, 5.5342688729893, 5.69366159038267, 6.17674775070929, 6.08762735966107, 6.68653280779044, 6.70253591217234, 6.32938323618963, 6.81735284786279, 6.64835766778347, 6.91213030655848, 7.1496842781073, 7.25682341590407, 7.46164094256645, 7.37149913131863, 7.56470707593246, 7.71334191900841, 7.71375128844693, 7.82793409372511, 7.90749319121623, 7.96255733207686, 8.11381187364273, 8.21211505208663, 8.18427543602736, 8.29133399017863, 8.31295002652197, 8.345677476918, 8.39053879616249, 8.40857122007675, 8.48086068897741, 8.7064475146364, 8.66563269607315, 8.79435721712053, 8.7996087849725, 8.82443395257555, 8.91314507957224, 8.8999544270272, 8.96760168103462, 8.93548690078514, 9.01332239000153, 9.07083338712431, 9.15422051683385, 9.20109302097792, 9.2062218972166, 9.31170984199071, 9.30909253379462, 9.35447695163181, 9.45333740615033, 9.41458248768079, 9.46983861007334, 9.51652628670815, 9.5301888386762, 9.59497468213833, 9.61268143770055, 9.64141492393412, 9.68857453461133, 9.77580537125637, 9.79816256416163, 9.79128849346381, 9.80699184934282, 9.91833626833319, 9.95487179604373, 9.88086373278725, 9.93505313047982, 9.97034080826287, 9.97752630228797, 10.1165750634827, 10.0977558023188, 10.1414502841663, 10.129071787117, 10.166774063688, 10.1792762662323, 10.2172491181904, 10.2670710204409, 10.2742314938915, 10.287876622612, 10.3447249333494, 10.4075370351282, 10.3465199067119, 10.4404223214255, 10.422301774768, 10.4739543513507, 10.5314461891317, 10.4813429169605, 10.5097541699286, 10.5389544549716, 10.5752633644781, 10.6133054015308, 10.6776080133421, 10.6266190058322, 10.6657950921482, 10.7067723709738, 10.7424707425861, 10.7418659657784, 10.7335163259687, 10.780101845273, 10.8334343829096, 10.8616735406708, 10.8535694508523, 10.8900668188725), .Dim = c(100L, 2L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'), c('log(x)', 'log(z)'))), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm25_1c60d8417af5ed2e2eb30ec63ebc0415");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm27_2ca8f90aa0f603db60de31becde6f5da() {
        assertEval("argv <- structure(list(a = structure(c(0.124248979591837, 0.266432653061224,     0.404342857142857, 0.0992163265306122, 0.0851836734693878,     0.0937632653061225, 0.0163551020408163, 0.182897959183673,     0.303289795918367, 0.010330612244898, 0.0557795918367347,     0.0490938775510204, 0.0992163265306122, 0.0851836734693878,     0.0937632653061225, 0.143689795918367, 0.098469387755102,     0.104004081632653, 0.0116979591836735, 0.0826530612244898,     0.0713795918367347, 0.00929795918367347, 0.0412040816326531,     0.0476285714285714, 0.0163551020408163, 0.182897959183673,     0.303289795918367, 0.0116979591836735, 0.0826530612244898,     0.0713795918367347, 0.0301591836734694, 0.220816326530612,     0.304587755102041, 0.00606938775510204, 0.0731020408163265,     0.0488244897959184, 0.010330612244898, 0.0557795918367347,     0.0490938775510204, 0.00929795918367347, 0.0412040816326531,     0.0476285714285714, 0.00606938775510204, 0.0731020408163265,     0.0488244897959184, 0.0111061224489796, 0.0391061224489796,     0.0754326530612245), .Dim = c(3L, 4L, 4L), .Dimnames = structure(list(Species = c('setosa',     'versicolor', 'virginica'), c('Sepal.Length', 'Sepal.Width',     'Petal.Length', 'Petal.Width'), c('Sepal.Length', 'Sepal.Width',     'Petal.Length', 'Petal.Width')), .Names = c('Species', '',     ''))), perm = c(2, 3, 1)), .Names = c('a', 'perm'));do.call('aperm', argv)");
        check("TestrGenBuiltinaperm_testaperm27_2ca8f90aa0f603db60de31becde6f5da");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm3_f17586cf0eb015a2ca039df0ea6abad8() {
        assertEval("argv <- list(structure(c(0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667, 0.666666666666667), .Dim = c(1L, 9L)), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm3_f17586cf0eb015a2ca039df0ea6abad8");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm4_52333812e34adc3069f9ed6ff713dc9f() {
        assertEval("argv <- list(structure(c(0L, 0L, 0L, 1L, 0L, 1L, 1L, 1L), .Dim = c(1L, 8L), .Dimnames = list('strata(enum)', c('rx', 'size', 'number', 'strata(enum)', 'cluster(id)', 'rx:strata(enum)', 'size:strata(enum)', 'number:strata(enum)'))), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm4_52333812e34adc3069f9ed6ff713dc9f");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm5_ebefdb50f4875645f072968aa04168d8() {
        assertEval("argv <- list(structure(c(9.2319289524956, -0.470372045488369, 186.857050189827), .Dim = c(1L, 3L), .Dimnames = list('118', c('age', 'sex', 'meal.cal'))), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm5_ebefdb50f4875645f072968aa04168d8");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm6_6e6d59a35e60fbcb22d33282bbe6caa3() {
        assertEval("argv <- list(structure(c(414L, 439L, 382L, 388L, 383L, 364L, 364L, 363L, 349L, 371L, 102L, 388L, 388L, 363L, 367L, 365L, 382L, 362L, 373L, 385L, 376L, 360L, 306L, 160L, 316L, 316L, 315L, 357L, 360L, 347L, 353L, 308L, 327L, 329L, 343L, 251L, 318L, 304L, 316L, 335L, 365L, 336L, 350L, 356L, 339L, 301L, 330L, 300L, 300L, 312L, 334L, 270L, 347L, 293L, 303L, 337L, 287L, 293L, 293L, 318L, 359L, 351L, 322L, 343L, 269L, 286L, 286L, 273L, 297L, 273L, 273L, 273L, 294L, 303L, 281L, 273L, 255L, 269L, 270L, 270L, 276L, 264L, 245L, 261L, 270L, 273L, 306L, 274L, 279L, 278L, 278L, 284L, 276L, 265L, 294L, 277L, 259L, 287L, 263L, 240L, 217L, 271L, 252L, 331L, 255L, 271L, 254L, 185L, 213L, 210L, 203L, 288L, 269L, 269L, 91L, 91L, 192L, 199L, 195L, 198L, 207L, 200L, 197L, 243L, 203L, 197L, 227L, 227L, 219L, 8L, NA, NA, 246L, NA, 292L, NA, 294L, NA, 19L, 373L, NA, 211L, 82L, NA, 334L, 18L, NA, 280L, NA, NA, NA, NA, 146L, NA, NA, NA, 267L, 206L, 175L, NA, NA, NA, NA, 118L, NA, NA, NA, NA, 274L, NA, NA, 187L, NA, 6L, NA, NA, 146L, 304L, NA, 52L, 67L, NA, 265L, NA, 91L, NA, NA, NA, 318L, 57L, 226L, 65L, NA, 264L, NA, NA, NA, 236L, NA, 207L, NA, NA, NA, NA, NA, NA, 23L, NA, NA, NA, NA, NA, NA, 113L, 99L, NA, NA, 14L, NA, NA, NA, NA, NA, NA, NA, 4L, NA, 167L, NA, NA, NA, NA, NA, NA, NA, NA, NA, 165L, NA, NA, NA, NA, NA, NA, NA, NA, 11L, NA, NA, 168L, NA, NA, 120L, NA, 104L, NA, 373L, 26L, NA, NA, 253L, NA, NA, NA, NA, NA, NA, NA, NA, 260L, 114L, NA, 370L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 280L, NA, NA, NA, NA, 240L, NA, NA, NA, NA, 361L, NA, NA, NA, NA, NA, NA, NA, 188L, NA, NA, 65L, 248L, NA, NA, NA, 121L, NA, NA, NA, NA, 121L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 306L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 159L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 22L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 152L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 265L, 337L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 255L, 250L, NA, NA, NA, 203L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 213L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 169L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 241L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 269L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 284L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 249L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 307L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 322L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 350L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = c(128L, 8L), .Dimnames = list(    NULL, c('futime', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7'))), c(2L, 1L), TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm6_6e6d59a35e60fbcb22d33282bbe6caa3");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm8_4f2fd1ab6e0cf58806847f2f810ba2b9() {
        assertEval("argv <- list(structure(c(544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 544.790381900886, 398.486952468991, 440.879079007027, 273.26068924187, -165.547292067734, -289.908895455829, -336.563851641157, -433.491123254512, -446.830170210184, -229.698549757081, 7.43503106965538, 237.187718724823, 1539.44739946315, 1548.66655077773, 1557.88570209231, 1566.45228027983, 1575.01885846735, 1583.14083472285, 1591.26281097836, 1599.26100149451, 1607.25919201066, 1611.39689466313, 1615.5345973156, 1612.61129444623, 1609.68799157686, 1603.44643859537, 1597.20488561388, 1588.73002343463, 1580.25516125537, 1570.86127478964, 1561.46738832392, 1549.89535441445, 1538.32332050498, 1524.62526591843, 1510.92721133189, 1499.65830819836, 1488.38940506483, 1479.31388700637, 1470.23836894792, 1460.03887936132, 1449.83938977473, 1441.27547309544, 1432.71155641615, 1432.51830671501, 1432.32505701387, 1433.15763708544, 1433.99021715701, 1434.96142536256, 1435.9326335681, 1435.47421580154, 1435.01579803498, 1433.4368629411, 1431.85792784722, 1430.85617066215, 1429.85441347709, 1432.59097206397, 1435.32753065085, 1440.49425642708, 1445.66098220331, 1448.76676550395, 1451.87254880459, 1452.9163236715, 1453.96009853841, 1454.6961768366, 1455.43225513478, 1452.22362902495, 1449.01500291512, 1442.43484036078, 1435.85467780644, 1426.50159512644, 1417.14851244644, 1409.58997614642, 1402.0314398464, 1397.59624058751, 1393.16104132862, 1386.64426440334, 1380.12748747807, 1371.71107833433, 1363.2946691906, 1354.59002807904, 1345.88538696748, 1336.94914699242, 1328.01290701735, 1318.64960669271, 49.7622186359663, -84.1535032467218, -121.764781099341, 37.2870304782966, 82.528433600382, -44.2319392670254, 25.3010406627996, -34.7698782399993, 48.5709781995188, 110.301655093951, -1.96962838525201, -3.7990131710535, -51.4783734777507, 135.066608935635, 114.916035379091, -28.990712676497, -11.7078691876363, 7.04762066618673, -38.9035366827579, 16.5957688400649, -38.4931502947952, 52.0732838386475, 26.6377575984557, 329.153973076816, -13.1797869657194, 872.199160524634, 371.882552045056, -254.299568603192, -95.2920977069916, 8.63342236039193, 16.852295225008, -29.0271834604991, 13.5051131963112, 4.54091267164154, 25.5747517733375, 386.850855912621, 259.276984531009, -199.961168270532, -153.894877042003, 94.302447817031, -20.3106357794875, 21.0527247936745, -6.29056183593116, 13.9001511905426, -29.4973604406664, -31.7957066699985, -224.096013272965, -30.9544842287708, 22.3370692945275, 432.596723859509, 47.1608224545594, -304.956866078466, 50.1150369329559, 24.6852664308792, -14.4511512739648, -4.94371710626865, -19.024507596255, -56.8030453693573, -314.583543516094, 165.222305128756, 316.17817825271, 23.9168069434991, 11.9598796643579, -128.904953645213, 0.419804589665318, -6.80218287850425, 29.2691824505584, 53.9010951754703, 40.9447832426993, -26.2505972353374, -41.4479380870087, -214.837325417531, 2134, 1863, 1877, 1877, 1492, 1249, 1280, 1131, 1209, 1492, 1621, 1846, 2103, 2137, 2153, 1833, 1403, 1288, 1186, 1133, 1053, 1347, 1545, 2066, 2020, 2750, 2283, 1479, 1189, 1160, 1113, 970, 999, 1208, 1467, 2059, 2240, 1634, 1722, 1801, 1246, 1162, 1087, 1013, 959, 1179, 1229, 1655, 2019, 2284, 1942, 1423, 1340, 1187, 1098, 1004, 970, 1140, 1110, 1812, 2263, 1820, 1846, 1531, 1215, 1075, 1056, 975, 940, 1081, 1294, 1341), .Dim = c(72L, 4L), .Dimnames = list(NULL, c('STL.seasonal', 'STL.trend', 'STL.remainder', 'data')), .Tsp = c(1974, 1979.91666666667, 12), class = c('mts', 'ts', 'matrix')), 1:2, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm8_4f2fd1ab6e0cf58806847f2f810ba2b9");
    }

    @Test
    public void TestrGenBuiltinaperm_testaperm9_24f3176a36b0c1834e883156b6faf749() {
        assertEval("argv <- list(structure(c(0.36376697930799, 0.252815298286177, 0.144820268657847, 0.059950033165656, 0.0137701755391906, 0.00220408917547991, 6.22489401973083e-05, -0.36376697846279, -0.252815298708777, -0.144820267390048, -0.0599500327958813, -0.0137701747732286, -0.00220408987788688, -6.22486118855004e-05), .Dim = c(7L, 2L, 1L)), 1:3, TRUE); .Internal(aperm(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinaperm_testaperm9_24f3176a36b0c1834e883156b6faf749");
    }

    @Test
    public void TestrGenBuiltinappend_testappend1_88044ff0906016f8294b3bc2e7230739() {
        assertEval("argv <- structure(list(x = 1:5, values = 0:1, after = 3), .Names = c('x',     'values', 'after'));do.call('append', argv)");
        check("TestrGenBuiltinappend_testappend1_88044ff0906016f8294b3bc2e7230739");
    }

    @Test
    public void TestrGenBuiltinaregexec_testaregexec1_2f4a7b39aaa55c7bd0f4dd1ce1c70f08() {
        assertEval("argv <- list('FALSE', 'FALSE', c(0.1, NA, NA, NA, NA), c(1L, 1L, 1L), FALSE, FALSE, FALSE); .Internal(aregexec(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinaregexec_testaregexec1_2f4a7b39aaa55c7bd0f4dd1ce1c70f08");
    }

    @Test
    public void TestrGenBuiltinaregexec_testaregexec2_6fdabd1a68055d50c3fb04be336568e7() {
        assertEval("argv <- list('(lay)(sy)', c('1 lazy', '1', '1 LAZY'), c(2, NA, NA, NA, NA), c(1L, 1L, 1L), FALSE, FALSE, FALSE); .Internal(aregexec(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinaregexec_testaregexec2_6fdabd1a68055d50c3fb04be336568e7");
    }

    @Test
    public void TestrGenBuiltinargs_testargs2_295551fb8ac5be183e6f303f793009ac() {
        assertEval("argv <- list(character(0)); .Internal(args(argv[[1]]))");
        check("TestrGenBuiltinargs_testargs2_295551fb8ac5be183e6f303f793009ac");
    }

    @Test
    public void TestrGenBuiltinargs_testargs3_1afbe22821276d1edad56f8b6ad497c8() {
        assertEval("argv <- list(.Primitive(':')); .Internal(args(argv[[1]]))");
        check("TestrGenBuiltinargs_testargs3_1afbe22821276d1edad56f8b6ad497c8");
    }

    @Test
    public void TestrGenBuiltinarray_testarray1_a1de33c4f6f10bac0607e47de645a30b() {
        assertEval("argv <- list(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L), 59L, structure(list(dr = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59.5')), .Names = 'dr')); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray1_a1de33c4f6f10bac0607e47de645a30b");
    }

    @Test
    public void TestrGenBuiltinarray_testarray10_4c587381aa04d4159bcaf425098f91df() {
        assertEval("argv <- list(cc(5L, 16L), list(c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray10_4c587381aa04d4159bcaf425098f91df");
    }

    @Test
    public void TestrGenBuiltinarray_testarray11_fc08ff0006f401ec4eba037c38fe4082() {
        assertEval("argv <- list(list(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL), 8L, list(c('1', '2', '3', '4', '5', '6', '7', '8'))); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray11_fc08ff0006f401ec4eba037c38fe4082");
    }

    @Test
    public void TestrGenBuiltinarray_testarray12_2595909c5219d3b538eb8ff98f62df10() {
        assertEval("argv <- list(c(-Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 3, 5, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1.5, 3.2, 4.9, Inf, Inf, Inf, -Inf, -Inf, 0.300000000000001, 2, 3.7, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 2, 3.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.4, 2, 3.6, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.266666666666667, 2, 3.73333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.275, 2, 3.725, Inf, Inf, Inf, Inf), c(9L, 9L), list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray12_2595909c5219d3b538eb8ff98f62df10");
    }

    @Test
    public void TestrGenBuiltinarray_testarray13_d42dcb8c47dba787b7b37eb7c7d1131f() {
        assertEval("argv <- list(NA, 1L, list('1')); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray13_d42dcb8c47dba787b7b37eb7c7d1131f");
    }

    @Test
    public void TestrGenBuiltinarray_testarray16_f502898424bd642a8c883c6cb7ebd14a() {
        assertEval("argv <- list(c(1L, 0L), 2L, structure(list(object = c('FALSE', NA)), .Names = 'object')); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray16_f502898424bd642a8c883c6cb7ebd14a");
    }

    @Test
    public void TestrGenBuiltinarray_testarray19_7ed10b153596c00ee4ab46e0d5cc5c8f() {
        assertEval("argv <- list(structure(c(31.9166666666667, -5.77777777777778, -10.4101831674686, -2.63888888888889, NA), .Names = c('(Intercept)', 'woolB', 'tens.L', 'tensionM', 'tensionH')), c(5L, 1L), list(c('(Intercept)', 'woolB', 'tens.L', 'tensionM', 'tensionH'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray19_7ed10b153596c00ee4ab46e0d5cc5c8f");
    }

    @Test
    public void TestrGenBuiltinarray_testarray20_db0e867b3dfd32fd0467655e85128c59() {
        assertEval("argv <- list(c(0.92317305817397+0i, 0.160449395256071+0.220125597679977i, 0.40353715410585+2.39063261466203i, -3.64092275386503+3.51619480964107i, -0.30877433127864+1.37503901638266i, -0.5590368753986+2.95994484328048i, 2.07117052177259-1.58552086053907i, 5.12796916272868+5.50114308371867i, 0.71791019962021-4.36295436036464i, 3.6182846955548+0.01693946731429i, 5.86560669896785+3.41674024963709i, 7.14153164455803+0i, 5.86560669896785-3.41674024963709i, 3.6182846955548-0.01693946731429i, 0.71791019962021+4.36295436036464i, 5.12796916272868-5.50114308371867i, 2.07117052177259+1.58552086053907i, -0.5590368753986-2.95994484328048i, -0.30877433127864-1.37503901638266i, -3.64092275386503-3.51619480964107i, 0.40353715410585-2.39063261466203i, 0.160449395256071-0.220125597679976i, 0.994686860835215+0i, -0.711636086238366+0.034977366507257i, -3.47255638259391-3.00654729467177i, -1.61617641806619-2.52564108817258i, -1.83729841635945+1.24025696654912i, -0.05940773912914+1.99807537840182i, 2.14861624215501+1.14547234755584i, -0.18935885218927+5.11711397439959i, 3.55025883223277-3.01463113510177i, 0.37587194655463-4.62160286369829i, -0.57999032040714+3.57394816552023i, -3.22078701201057+0i, -0.57999032040714-3.57394816552023i, 0.37587194655463+4.62160286369829i, 3.55025883223277+3.01463113510177i, -0.18935885218927-5.11711397439959i, 2.14861624215501-1.14547234755584i, -0.05940773912914-1.99807537840182i, -1.83729841635945-1.24025696654912i, -1.61617641806619+2.52564108817258i, -3.47255638259391+3.00654729467177i, -0.711636086238366-0.034977366507256i, -0.376031201145236+0i, 0.36561036190112-2.94822783523588i, 2.53378536984825+1.14599403212998i, -0.59345500414631-1.46249091231517i, -5.47371957596241-2.40983118775265i, 0.994698295196402+0.827012883372647i, 4.88614691865207-0.66440097322583i, -1.22869446246947-1.85036568311679i, 4.54719422944744-1.7507307644741i, -1.25805718969215-0.46461775748286i, -6.6950163960079-1.32606545879492i, -1.8510470181104-0i, -6.6950163960079+1.32606545879492i, -1.25805718969215+0.46461775748286i, 4.54719422944744+1.7507307644741i, -1.22869446246947+1.85036568311679i, 4.88614691865207+0.66440097322583i, 0.994698295196402-0.827012883372647i, -5.47371957596241+2.40983118775265i, -0.59345500414631+1.46249091231517i, 2.53378536984825-1.14599403212998i, 0.36561036190112+2.94822783523588i, 1.86949363581639+0i, 3.2510927680528+3.7297126359622i, 5.77117909703734-0.58113122596059i, -2.73489323319193-2.03739778844743i, 1.59256247378073-3.23882870600546i, -2.21652163259476+3.70287191787544i, -6.80966667821261-4.74346958471693i, -0.48551953206469-3.42445496113818i, -4.95350216815663-1.60107509096991i, -0.651322462114205+0.588393022429161i, 3.32067078328635+3.75999833207777i, -1.35013798358527+0i, 3.32067078328635-3.75999833207777i, -0.651322462114205-0.588393022429161i, -4.95350216815663+1.60107509096991i, -0.48551953206469+3.42445496113818i, -6.80966667821261+4.74346958471693i, -2.21652163259476-3.70287191787544i, 1.59256247378073+3.23882870600546i, -2.73489323319193+2.03739778844743i, 5.77117909703734+0.58113122596059i, 3.2510927680528-3.7297126359622i, -3.90806827793786+0i, -4.10078155861753-4.25996878161911i, -0.63461032994351-2.08074582601136i, -0.10593736514835-3.82022652091785i, 6.14817602783479+2.33657685886581i, 0.64431546852762-1.776774088028i, 3.43771282488202-3.00904523977379i, -3.6812061457129+3.53944567666635i, 3.07722382691467+4.5373840425762i, 3.3679046040028+7.20820407858926i, 7.47003475089893-0.4463480891006i, 13.9322715624418-0i, 7.47003475089893+0.4463480891006i, 3.3679046040028-7.20820407858926i, 3.07722382691467-4.5373840425762i, -3.6812061457129-3.53944567666635i, 3.43771282488202+3.00904523977379i, 0.64431546852762+1.776774088028i, 6.14817602783479-2.33657685886581i, -0.10593736514835+3.82022652091785i, -0.63461032994351+2.08074582601136i, -4.10078155861753+4.25996878161911i), c(22, 5), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray20_db0e867b3dfd32fd0467655e85128c59");
    }

    @Test
    public void TestrGenBuiltinarray_testarray23_4f99c09a2eb948557496cb06b9c93143() {
        assertEval("argv <- list(c(1L, 2L, 1L), 3L, structure(list(c('1', '2', NA)), .Names = '')); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray23_4f99c09a2eb948557496cb06b9c93143");
    }

    @Test
    public void TestrGenBuiltinarray_testarray3_de32a339b0dc2af9cf47144c650e041b() {
        assertEval("argv <- list(2.10239639473973e-05, c(1L, 1L), NULL); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray3_de32a339b0dc2af9cf47144c650e041b");
    }

    @Test
    public void TestrGenBuiltinarray_testarray5_3e426c5821c83699fa2f43bfa0339c27() {
        assertEval("argv <- list(structure(list(`1` = structure(list(lower = 13.2743449189798, est. = 24.8054653131966, upper = 46.3534067526313), .Names = c('lower', 'est.', 'upper'), row.names = 'reStruct.Rail.sd((Intercept))', class = 'data.frame')), .Names = '1'), c(1L, 1L), list('1', NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray5_3e426c5821c83699fa2f43bfa0339c27");
    }

    @Test
    public void TestrGenBuiltinarray_testarray7_a97bb51db6a4ceaec74f44e9243dc584() {
        assertEval("argv <- list(c(10L, 10L, 11L, 10L, 12L, 11L, 13L, 12L, 14L, 13L, 15L, 14L, 16L, 15L, 17L, 16L, 18L, 17L, 19L, 18L, 20L, 19L, 21L, 20L, 22L, 21L, 23L, 22L, 24L, 23L, 25L, 24L, 26L, 25L, 27L, 26L, 28L, 27L, 29L, 28L, 30L, 29L, 31L, 30L, 32L, 31L, 33L, 32L, 34L, 33L, 35L, 34L, 36L, 35L, 37L, 36L, 38L, 36L, 39L, 38L, 40L, 39L), c(2L, 31L), list(c('target', 'actual'), NULL)); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray7_a97bb51db6a4ceaec74f44e9243dc584");
    }

    @Test
    public void TestrGenBuiltinarray_testarray9_f29da9896c8c017d472961825e98baf2() {
        assertEval("argv <- list(integer(0), c(1L, 0L), structure(list('1', NULL), .Names = c('', ''))); .Internal(array(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinarray_testarray9_f29da9896c8c017d472961825e98baf2");
    }

    @Test
    public void TestrGenBuiltinasDatecharacter_testasDatecharacter1_1de334b367b7edc0cbcf4352ec6d771b() {
        assertEval("argv <- structure(list(x = c('2007-11-06', NA)), .Names = 'x');do.call('as.Date.character', argv)");
        check("TestrGenBuiltinasDatecharacter_testasDatecharacter1_1de334b367b7edc0cbcf4352ec6d771b");
    }

    @Test
    public void TestrGenBuiltinasDatedefault_testasDatedefault1_41308bdbae914222f7d0c43f4166e5ea() {
        assertEval("argv <- structure(list(x = logical(0)), .Names = 'x');do.call('as.Date.default', argv)");
        check("TestrGenBuiltinasDatedefault_testasDatedefault1_41308bdbae914222f7d0c43f4166e5ea");
    }

    @Test
    public void TestrGenBuiltinasDatefactor_testasDatefactor1_d7bfae7382ad614d33004cb7269d93e7() {
        assertEval("argv <- structure(list(x = structure(1L, .Label = '2000-01-02',     class = 'factor')), .Names = 'x');do.call('as.Date.factor', argv)");
        check("TestrGenBuiltinasDatefactor_testasDatefactor1_d7bfae7382ad614d33004cb7269d93e7");
    }

    @Test
    public void TestrGenBuiltinasDatenumeric_testasDatenumeric1_3a9c06e6f03b657208314ce67770e778() {
        assertEval("argv <- structure(list(x = 0.5, origin = '1969-12-31'), .Names = c('x',     'origin'));do.call('as.Date.numeric', argv)");
        check("TestrGenBuiltinasDatenumeric_testasDatenumeric1_3a9c06e6f03b657208314ce67770e778");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct1_1c500c86dface041952a145584c63c2e() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 109L, wday = 4L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), 'UTC'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct1_1c500c86dface041952a145584c63c2e");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct10_6dfad3439678f8b9925922d32bd6d5e2() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1, mon = 1L, year = 109L, wday = 0L, yday = 31L, isdst = -1), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), 'UTC'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct10_6dfad3439678f8b9925922d32bd6d5e2");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct11_c7c8157329310d8d280f066b7ff799a9() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), year = 105L, wday = 6L, yday = 0L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), 'UTC'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct11_c7c8157329310d8d280f066b7ff799a9");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct12_a6fc18d74036edb3971879e59186fe09() {
        assertEval("argv <- list(structure(list(sec = 0, min = 2L, hour = 2L, mday = 2L, mon = 1L, year = c(102L, 1102L), wday = 6L, yday = 32L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), ''); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct12_a6fc18d74036edb3971879e59186fe09");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct13_bb025be8ae52c06488f607f8c080f413() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = c(2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L, 24L, 26L, 28L, 30L, 32L), mon = 1L, year = 102L, wday = 6L, yday = 32L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), ''); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct13_bb025be8ae52c06488f607f8c080f413");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct2_b62827b33dc8c91662f48606de611b14() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1, mon = c(11, 12, 13, 14), year = 100L, wday = 0L, yday = 365L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct2_b62827b33dc8c91662f48606de611b14");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct3_0d65533602d92caa782bd7c735504cab() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = -3L, mon = 1L, year = 102L, wday = 6L, yday = 32L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), ''); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct3_0d65533602d92caa782bd7c735504cab");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct4_48bf2e027fc478152fffa7cd3cc4df32() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 12L, mday = 1L, mon = 0L, year = c(70L, 75L, 80L, 85L, 90L, 95L, 100L, 105L, 110L, 115L), wday = 4L, yday = 0L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct4_48bf2e027fc478152fffa7cd3cc4df32");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct5_fa3202990ad8785e47e61c5b7d40f715() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt')), ''); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct5_fa3202990ad8785e47e61c5b7d40f715");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct6_e1bce99d059a06199c61fbdd45f53300() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = -5L, wday = 2L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct6_e1bce99d059a06199c61fbdd45f53300");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct7_31b4a35e00fc72a0fd76538e2d5731cd() {
        assertEval("argv <- list(structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_, mday = NA_integer_, mon = NA_integer_, year = NA_integer_, wday = NA_integer_, yday = NA_integer_, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct7_31b4a35e00fc72a0fd76538e2d5731cd");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct8_3bdcede3f03657e1f6ba172f3757d99f() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 70L, wday = 4L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct8_3bdcede3f03657e1f6ba172f3757d99f");
    }

    @Test
    public void TestrGenBuiltinasPOSIXct_testasPOSIXct9_6fc3b32d94b37559931f24ab21576d10() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 22:27, mon = 3L, year = 108L, wday = 2L, yday = 112L, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXct(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXct_testasPOSIXct9_6fc3b32d94b37559931f24ab21576d10");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt1_00f4e9d0e427a431044a5950735dc978() {
        assertEval("argv <- list(structure(c(2147483648.4, 2147483648.8), class = c('POSIXct', 'POSIXt'), tzone = ''), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt1_00f4e9d0e427a431044a5950735dc978");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt10_9ffeb4cfe131ce48ac5ffaf8ea44d725() {
        assertEval("argv <- list(character(0), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt10_9ffeb4cfe131ce48ac5ffaf8ea44d725");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt11_ac0307df91add091731446ecf15395cc() {
        assertEval("argv <- list(NULL, ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt11_ac0307df91add091731446ecf15395cc");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt2_e4eb7330a95043a34482b38f18f977ee() {
        assertEval("argv <- list(structure(c(FALSE, FALSE), class = c('POSIXct', 'POSIXt')), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt2_e4eb7330a95043a34482b38f18f977ee");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt3_191ee8bdf9c2eaadb31bbb9b1fc300d1() {
        assertEval("argv <- list(structure(1041324768, class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt3_191ee8bdf9c2eaadb31bbb9b1fc300d1");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt4_194e051794fdbd53a792e13196afa3ed() {
        assertEval("argv <- list(structure(c(1208865600, 1208952000, 1209038400, 1209124800, 1209211200), tzone = 'GMT', class = c('POSIXct', 'POSIXt')), 'GMT'); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt4_194e051794fdbd53a792e13196afa3ed");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt5_8ae3a1410937f690b8025d898298c6ab() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt5_8ae3a1410937f690b8025d898298c6ab");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt6_05e50fdeac8692aeef0965c86952a8c3() {
        assertEval("argv <- list(structure(32569542120, class = c('POSIXct', 'POSIXt')), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt6_05e50fdeac8692aeef0965c86952a8c3");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt7_26776a81744f30b28265ad599ddd1405() {
        assertEval("argv <- list(structure(c(1012798800, 1013403600, 1014008400, 1014613200), class = c('POSIXct', 'POSIXt'), tzone = ''), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt7_26776a81744f30b28265ad599ddd1405");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt8_53bbe098ec0b9a7e3c85e948f405f103() {
        assertEval("argv <- list(structure(c(-1893412800, -1861876800, -1830340800, -1798718400, -1767182400, -1735646400, -1704110400, -1672488000, -1640952000, -1609416000, -1577880000, -1546257600, -1514721600, -1483185600, -1451649600, -1420027200, -1388491200, -1356955200, -1325419200, -1293796800, -1262260800, -1230724800, -1199188800, -1167566400, -1136030400, -1104494400, -1072958400, -1041336000, -1009800000, -978264000, -946728000, -915105600, -883569600, -852033600, -820497600, -788875200, -757339200, -725803200, -694267200, -662644800, -631108800, -599572800, -568036800, -536414400, -504878400, -473342400, -441806400, -410184000, -378648000, -347112000, -315576000, -283953600, -252417600, -220881600, -189345600, -157723200, -126187200, -94651200, -63115200, -31492800, 43200, 31579200, 63115200, 94737600, 126273600, 157809600, 189345600, 220968000, 252504000, 284040000, 315576000, 347198400, 378734400, 410270400, 441806400, 473428800, 504964800, 536500800, 568036800, 599659200, 631195200, 662731200, 694267200, 725889600, 757425600, 788961600, 820497600, 852120000, 883656000, 915192000), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), 'GMT'); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt8_53bbe098ec0b9a7e3c85e948f405f103");
    }

    @Test
    public void TestrGenBuiltinasPOSIXlt_testasPOSIXlt9_f67f755c24187b6eedba0e4de4d7a058() {
        assertEval("argv <- list(list(), ''); .Internal(as.POSIXlt(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasPOSIXlt_testasPOSIXlt9_f67f755c24187b6eedba0e4de4d7a058");
    }

    @Test
    public void TestrGenBuiltinasS4_testasS41_ce9331c055f36be6f839c584d1afc2ca() {
        assertEval("argv <- structure(list(object = structure(NA, .Dim = c(1L, 1L))),     .Names = 'object');do.call('asS4', argv)");
        check("TestrGenBuiltinasS4_testasS41_ce9331c055f36be6f839c584d1afc2ca");
    }

    @Test
    public void TestrGenBuiltinascall_testascall1_75dad11a1d07a7a5fd405091a76cfe2d() {
        assertEval("argv <- list(list(quote(quote), c(0.568, 1.432, -1.08, 1.08)));as.call(argv[[1]]);");
        check("TestrGenBuiltinascall_testascall1_75dad11a1d07a7a5fd405091a76cfe2d");
    }

    @Test
    public void TestrGenBuiltinascall_testascall2_449d54ebb2b0ae08e77ca684b2cbd4ae() {
        assertEval("argv <- list(list(quote(quote), FALSE));as.call(argv[[1]]);");
        check("TestrGenBuiltinascall_testascall2_449d54ebb2b0ae08e77ca684b2cbd4ae");
    }

    @Test
    public void TestrGenBuiltinascall_testascall3_576f6deb6494b95f0406b343929fc8a4() {
        assertEval("argv <- list(list(quote(quote), list(NULL, c('time', 'status'))));as.call(argv[[1]]);");
        check("TestrGenBuiltinascall_testascall3_576f6deb6494b95f0406b343929fc8a4");
    }

    @Test
    public void TestrGenBuiltinascall_testascall5_051693b1bebf4f33d3241d651c72f4d3() {
        assertEval("argv <- list(list(quote(quote), 80L));as.call(argv[[1]]);");
        check("TestrGenBuiltinascall_testascall5_051693b1bebf4f33d3241d651c72f4d3");
    }

    @Test
    public void TestrGenBuiltinascall_testascall6_a95ff22c9ef3ec6e77ee48b0335377c7() {
        assertEval("argv <- list(list(quote(quote), NA));as.call(argv[[1]]);");
        check("TestrGenBuiltinascall_testascall6_a95ff22c9ef3ec6e77ee48b0335377c7");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter14_b618dc1d6e4030d027f9e589707f3220() {
        assertEval("argv <- list(structure('Estimates a probability density function,  \\n', Rd_tag = 'TEXT'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter14_b618dc1d6e4030d027f9e589707f3220");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter16_768a231ba5495283935e93ca485b4d82() {
        assertEval("argv <- list(structure(-841, class = 'Date'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter16_768a231ba5495283935e93ca485b4d82");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter17_5e4050134c816b4b48d5edcd7a65f1e3() {
        assertEval("argv <- list(structure(list(list(structure('x', Rd_tag = 'TEXT')), list(structure('an R object representing a hierarchical clustering.\\n', Rd_tag = 'TEXT'), structure('    For the default method, an object of class ', Rd_tag = 'TEXT'), structure(list(structure('\\'', Rd_tag = 'RCODE'), structure(list(structure('hclust', Rd_tag = 'TEXT')), Rd_tag = '\\\\link'), structure('\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' or\\n', Rd_tag = 'TEXT'), structure('    with a method for ', Rd_tag = 'TEXT'), structure(list(    structure(list(structure('as.hclust', Rd_tag = 'TEXT')), Rd_tag = '\\\\link'), structure('()', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' such as\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(structure('\\'', Rd_tag = 'RCODE'), structure(list(structure('agnes', Rd_tag = 'TEXT')), Rd_tag = '\\\\link', Rd_option = structure('cluster', Rd_tag = 'TEXT')), structure('\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' in package ', Rd_tag = 'TEXT'), structure(c('\\\\href{http://CRAN.R-project.org/package=#1}{\\\\pkg{#1}}', 'cluster'), Rd_tag = 'USERMACRO'), structure(list(list(structure('http://CRAN.R-project.org/package=cluster', Rd_tag = 'VERB')), list(structure(list(structure('cluster', Rd_tag = 'TEXT')), Rd_tag = '\\\\pkg'))), Rd_tag = '\\\\href'), structure('.', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter17_5e4050134c816b4b48d5edcd7a65f1e3");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter18_dcdfc842ff66734c6f72fd5ef017a0cd() {
        assertEval("argv <- list(list(epsilon = 1e-08, maxit = 25, trace = FALSE));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter18_dcdfc842ff66734c6f72fd5ef017a0cd");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter19_dc0a0964223c6be5f65112cd869cf0e0() {
        assertEval("argv <- list(structure(list(structure(list(given = c('George', 'E.', 'P.'), family = 'Box', role = NULL, email = NULL, comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment')), structure(list(given = c('David', 'R.'), family = 'Cox', role = NULL, email = NULL, comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment'))), class = 'person'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter19_dc0a0964223c6be5f65112cd869cf0e0");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter2_d0d9d9f37ecbe7234fc7edee2ef45a8c() {
        assertEval("argv <- list(structure(c(12784, 12874, 12965, 13057, 13149, 13239, 13330, 13422, 13514, 13604, 13695, 13787, 13879, 13970, 14061, 14153, 14245), class = 'Date'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter2_d0d9d9f37ecbe7234fc7edee2ef45a8c");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter20_d79960a6ddad66b405918a3fdffda8de() {
        assertEval("argv <- list(structure(list(structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure('coerce', Rd_tag = 'TEXT')), list(structure(list(structure('signature(from = \\'dgCMatrix\\', to =\\n', Rd_tag = 'RCODE'), structure('\\t\\'ngCMatrix\\')', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', and many similar ones; typically you should\\n', Rd_tag = 'TEXT'), structure('      coerce to ', Rd_tag = 'TEXT'), structure(list(structure('\\'nsparseMatrix\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'),     structure(' (or ', Rd_tag = 'TEXT'), structure(list(structure('\\'nMatrix\\'', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(').  Note that\\n', Rd_tag = 'TEXT'), structure('      coercion to a sparse pattern matrix records all the potential\\n', Rd_tag = 'TEXT'), structure('      non-zero entries, i.e., explicit (', Rd_tag = 'TEXT'), structure(list(structure('non-structural', Rd_tag = 'TEXT')), Rd_tag = '\\\\dQuote'), structure(') zeroes\\n', Rd_tag = 'TEXT'), structure('      are coerced to ', Rd_tag = 'TEXT'),     structure(list(structure('TRUE', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', not ', Rd_tag = 'TEXT'), structure(list(structure('FALSE', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', see the example.\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure('t', Rd_tag = 'TEXT')), list(structure(list(structure('signature(x = \\'ngCMatrix\\')', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'),     structure(': returns the transpose\\n', Rd_tag = 'TEXT'), structure('      of ', Rd_tag = 'TEXT'), structure(list(structure('x', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure('which', Rd_tag = 'TEXT')), list(structure(list(structure('signature(x = \\'lsparseMatrix\\')', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(', semantically\\n', Rd_tag = 'TEXT'),     structure('      equivalent to ', Rd_tag = 'TEXT'), structure(list(structure('base', Rd_tag = 'TEXT')), Rd_tag = '\\\\pkg'), structure(' function ', Rd_tag = 'TEXT'), structure(list(structure(list(structure('which', Rd_tag = 'TEXT')), Rd_tag = '\\\\link'), structure('(x, arr.ind)', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(';\\n', Rd_tag = 'TEXT'), structure('      for details, see the ', Rd_tag = 'TEXT'), structure(list(structure(list(structure('lMatrix', Rd_tag = 'TEXT')), Rd_tag = '\\\\linkS4class')), Rd_tag = '\\\\code'),     structure(' class documentation.', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT')), Rd_tag = '\\\\describe'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter20_d79960a6ddad66b405918a3fdffda8de");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter22_57067e2c0d6c38282b57535adb101e14() {
        assertEval("argv <- list(structure(list(structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure(list(structure('languageEl', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(':', Rd_tag = 'TEXT')), list(structure('\\n', Rd_tag = 'TEXT'), structure('      extract an element of a language object, consistently for\\n', Rd_tag = 'TEXT'), structure('      different kinds of objects.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The 1st., etc. elements of a function are the corresponding formal\\n', Rd_tag = 'TEXT'),     structure('      arguments, with the default expression if any as value.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The first element of a call is the name or the function object\\n', Rd_tag = 'TEXT'), structure('      being called.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The 2nd, 3rd, etc. elements are the 1st, 2nd, etc. arguments\\n', Rd_tag = 'TEXT'), structure('      expressions.  Note that the form of the extracted name is\\n', Rd_tag = 'TEXT'),     structure('      different for R and S-Plus.  When the name (the first element) of\\n', Rd_tag = 'TEXT'), structure('      a call is replaced, the languageEl replacement function coerces a\\n', Rd_tag = 'TEXT'), structure('      character string to the internal form for each system.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The 1st, 2nd, 3rd elements of an ', Rd_tag = 'TEXT'), structure(list(structure('if', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' expression are the\\n', Rd_tag = 'TEXT'),     structure('      test, first, and second branch.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('      The 1st element of a ', Rd_tag = 'TEXT'), structure(list(structure('for', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' object is the name (symbol) being\\n', Rd_tag = 'TEXT'), structure('      used in the loop, the second is the expression for the range of\\n', Rd_tag = 'TEXT'), structure('      the loop, the third is the body of the loop.\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'),     structure('      The first element of a ', Rd_tag = 'TEXT'), structure(list(structure('while', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'), structure(' object is the loop test, and\\n', Rd_tag = 'TEXT'), structure('      the second the body of the loop.\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'), structure(list(list(structure(list(structure('isGrammarSymbol', Rd_tag = 'RCODE')), Rd_tag = '\\\\code'),     structure(':', Rd_tag = 'TEXT')), list(structure('\\n', Rd_tag = 'TEXT'), structure('      Checks whether the symbol is part of the grammar.\\n', Rd_tag = 'TEXT'), structure('      Don't use this function directly.\\n', Rd_tag = 'TEXT'), structure('    ', Rd_tag = 'TEXT'))), Rd_tag = '\\\\item'), structure('\\n', Rd_tag = 'TEXT'), structure('  ', Rd_tag = 'TEXT')), Rd_tag = '\\\\describe'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter22_57067e2c0d6c38282b57535adb101e14");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter24_fa6e2ffc98f3b422be091992652cc063() {
        assertEval("argv <- list(structure(list(4L), class = c('package_version', 'numeric_version')));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter24_fa6e2ffc98f3b422be091992652cc063");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter28_be987cc5e86462dab4ec1574a5c96efd() {
        assertEval("argv <- list(structure(c(11323, 11330, 11337, 11344, 11351, 11358, 11365, 11372, 11379, 11386), class = 'Date'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter28_be987cc5e86462dab4ec1574a5c96efd");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter31_af72e6e6773af7dbdd47e72d67d32db7() {
        assertEval("argv <- list(structure(c(1338523200, 1338609600, 1338696000, 1338782400, 1338868800, 1338955200, 1339041600), class = c('POSIXct', 'POSIXt'), tzone = ''));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter31_af72e6e6773af7dbdd47e72d67d32db7");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter32_a11a635f4f38ef064bbb2362dbb2872f() {
        assertEval("argv <- list(structure(1:4, class = 'roman'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter32_a11a635f4f38ef064bbb2362dbb2872f");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter34_a673b801889dbc1428aae9fe0b85dbfc() {
        assertEval("argv <- list(structure(c(1104537600, 1107216000, 1109635200, 1112313600, 1114905600, 1117584000, 1120176000, 1122854400, 1125532800, 1128124800, 1130803200, 1133395200, 1136073600, 1138752000, 1141171200, 1143849600, 1146441600, 1149120000, 1151712000, 1154390400, 1157068800, 1159660800, 1162339200, 1164931200, 1167609600, 1170288000, 1172707200, 1175385600, 1177977600, 1180656000, 1183248000, 1185926400, 1188604800, 1191196800, 1193875200, 1196467200, 1199145600, 1201824000, 1204329600, 1207008000, 1209600000, 1212278400, 1214870400, 1217548800, 1220227200, 1222819200, 1225497600, 1228089600, 1230768000), class = c('POSIXct', 'POSIXt'), tzone = 'UTC'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter34_a673b801889dbc1428aae9fe0b85dbfc");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter36_d62bef6853e53de40aaca7bd0f19cdef() {
        assertEval("argv <- list(list(exit.code = 0L, send = NULL));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter36_d62bef6853e53de40aaca7bd0f19cdef");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter38_945a289b35a64af860b30dc13577f0f7() {
        assertEval("argv <- list(structure(c(978307200, 978912000, 979516800, 980121600, 980726400, 981331200, 981936000, 982540800, 983145600, 983750400), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter38_945a289b35a64af860b30dc13577f0f7");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter39_d18e175683c639c331c42f4c7a5a5aed() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));as.character(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinascharacter_testascharacter39_d18e175683c639c331c42f4c7a5a5aed");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter4_b0efabdea893c5e3c24e0d077282fc6b() {
        assertEval("argv <- list(c('### Encoding: UTF-8', '', '### Name: text', '### Title: Add Text to a Plot', '### Aliases: text text.default', '### Keywords: aplot', '', '### ** Examples', '', 'plot(-1:1, -1:1, type = \\'n\\', xlab = \\'Re\\', ylab = \\'Im\\')', 'K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)', '', '## The following two examples use latin1 characters: these may not', '## appear correctly (or be omitted entirely).', 'plot(1:10, 1:10, main = \\'text(...) examples\\\\n~~~~~~~~~~~~~~\\',', '     sub = \\'R is GNU ©, but not ® ...\\')', 'mtext(\\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\\', side = 3)', 'points(c(6,2), c(2,1), pch = 3, cex = 4, col = \\'red\\')', 'text(6, 2, \\'the text is CENTERED around (x,y) = (6,2) by default\\',', '     cex = .8)', 'text(2, 1, \\'or Left/Bottom - JUSTIFIED at (2,1) by 'adj = c(0,0)'\\',', '     adj = c(0,0))', 'text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))', 'text(4, 8.4, \\'expression(hat(beta) == (X^t * X)^{-1} * X^t * y)\\',', '     cex = .75)', 'text(4, 7, expression(bar(x) == sum(frac(x[i], n), i==1, n)))', '', '## Two more latin1 examples', 'text(5, 10.2,', '     \\'Le français, c'est façile: Règles, Liberté, Egalité, Fraternité...\\')', 'text(5, 9.8,', '     \\'Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)\\')', '', '', ''));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter4_b0efabdea893c5e3c24e0d077282fc6b");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter40_2b19c43c5220d4933e35afa1bcc7236c() {
        assertEval("argv <- list(structure(list(), class = 'numeric_version'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter40_2b19c43c5220d4933e35afa1bcc7236c");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter42_4cd3aed711e78cfcab749a3f20dca4ba() {
        assertEval("argv <- list(structure(c(12784, 13879), class = 'Date'));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter42_4cd3aed711e78cfcab749a3f20dca4ba");
    }

    @Test
    public void TestrGenBuiltinascharacter_testascharacter5_2c93fd2ee5e7cb09eb618554731299b9() {
        assertEval("argv <- list(structure(1395082040.29392, class = c('POSIXct', 'POSIXt')));as.character(argv[[1]]);");
        check("TestrGenBuiltinascharacter_testascharacter5_2c93fd2ee5e7cb09eb618554731299b9");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex10_30e49ba1acb87ff4056fe35381a55a76() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a'));as.complex(argv[[1]]);");
        check("TestrGenBuiltinascomplex_testascomplex10_30e49ba1acb87ff4056fe35381a55a76");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex3_6b1a5856287e1b6f81d7fb7816559fd8() {
        assertEval("argv <- list(' ');as.complex(argv[[1]]);");
        check("TestrGenBuiltinascomplex_testascomplex3_6b1a5856287e1b6f81d7fb7816559fd8");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex4_6b7f43ff80f5b6bce19734fce23ab66e() {
        assertEval("argv <- list(structure(c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492, -0.305388387156356, 1.51178116845085, 0.389843236411431, -0.621240580541804, -2.2146998871775, 1.12493091814311, -0.0449336090152309, -0.0161902630989461, 0.943836210685299, 0.821221195098089, 0.593901321217509, 0.918977371608218, 0.782136300731067, 0.0745649833651906, -1.98935169586337, 0.61982574789471), .Dim = c(5L, 5L), .Dimnames = list(c('1', '2', '3', '4', '5'), c('a', 'b', 'c', 'd', 'e'))));as.complex(argv[[1]]);");
        check("TestrGenBuiltinascomplex_testascomplex4_6b7f43ff80f5b6bce19734fce23ab66e");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex6_6fba59c292c0f19676b228cbf4c35773() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));as.complex(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinascomplex_testascomplex6_6fba59c292c0f19676b228cbf4c35773");
    }

    @Test
    public void TestrGenBuiltinascomplex_testascomplex7_5fe78ce599bd28e6b314c3eca83c918e() {
        assertEval("argv <- list(NA_complex_);as.complex(argv[[1]]);");
        check("TestrGenBuiltinascomplex_testascomplex7_5fe78ce599bd28e6b314c3eca83c918e");
    }

    @Test
    public void TestrGenBuiltinasdataframetable_testasdataframetable1_8bbd665649f9d07a7c2d6f8392d71df8() {
        assertEval("argv <- structure(list(x = structure(integer(0), .Dim = 0L, .Dimnames = structure(list(NULL),     .Names = ''), class = 'table')), .Names = 'x');do.call('as.data.frame.table', argv)");
        check("TestrGenBuiltinasdataframetable_testasdataframetable1_8bbd665649f9d07a7c2d6f8392d71df8");
    }

    @Test
    public void TestrGenBuiltinasdifftime_testasdifftime1_de9e4a13c6f3d916ecf80e65f68b46be() {
        assertEval("argv <- structure(list(tim = c('0:3:20', '11:23:15')), .Names = 'tim');do.call('as.difftime', argv)");
        check("TestrGenBuiltinasdifftime_testasdifftime1_de9e4a13c6f3d916ecf80e65f68b46be");
    }

    @Test
    public void TestrGenBuiltinasdifftime_testasdifftime2_a14825c4254594b901790d1ee37c6d5c() {
        assertEval("argv <- structure(list(tim = c('3:20', '23:15', '2:'), format = '%H:%M'),     .Names = c('tim', 'format'));do.call('as.difftime', argv)");
        check("TestrGenBuiltinasdifftime_testasdifftime2_a14825c4254594b901790d1ee37c6d5c");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble11_888f0cba047d3b8e1059f6862b221d2e() {
        assertEval("argv <- list(c(NA, '0.0021'));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble11_888f0cba047d3b8e1059f6862b221d2e");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble14_70b49c2c7ddf9261cf5c8025bb4af88f() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707712e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.96881154539801e-173, 0, 8.23599653846971e-150, 0, 0, 0, 0, 6.51733217171342e-10, 0, 2.36840184577368e-67, 0, 9.43484083575241e-307, 0, 1.59959906013772e-89, 0, 8.73836857865035e-286, 7.09716190970993e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044552e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.07028772732371e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.75227273320951e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble14_70b49c2c7ddf9261cf5c8025bb4af88f");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble16_aecc96e5426db7d2f179d188c23f236c() {
        assertEval("argv <- list(structure(28, units = 'days', class = 'difftime'), units = 'secs');as.double(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinasdouble_testasdouble16_aecc96e5426db7d2f179d188c23f236c");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble18_c5d23a4a19328f2300a28b0ea088a129() {
        assertEval("argv <- list(c(0.0099, 0.099, 0.99, 9.9, 99, 990, 9900, 99000, 990000, 9900000, 9.9e+07, 9.9e+08, 9.9e+09, 9.9e+10));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble18_c5d23a4a19328f2300a28b0ea088a129");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble19_1c0639528f35ceceb26fe3eac156aa8a() {
        assertEval("argv <- list(structure(180.958333333333, units = 'days', class = 'difftime'), units = 'secs');as.double(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinasdouble_testasdouble19_1c0639528f35ceceb26fe3eac156aa8a");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble2_0bfae9e14e6f29807a45929a9d755a1e() {
        assertEval("argv <- list(c('10', '2.7404', '0.27404', ''));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble2_0bfae9e14e6f29807a45929a9d755a1e");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble21_5a423bbbaa3b3d9af3d1b35ac7725497() {
        assertEval("argv <- list(structure(list(foo = 5L, Species = 2L), .Names = c('foo', 'Species'), out.attrs = structure(list(dim = structure(c(6L, 3L), .Names = c('foo', 'Species')), dimnames = structure(list(foo = c('foo=1', 'foo=2', 'foo=3', 'foo=4', 'foo=5', 'foo=6'), Species = c('Species=1', 'Species=2', 'Species=3')), .Names = c('foo', 'Species'))), .Names = c('dim', 'dimnames')), row.names = 11L, class = 'data.frame'));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble21_5a423bbbaa3b3d9af3d1b35ac7725497");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble26_a6bb7c79ffe4e8b071f239d5f3350fa6() {
        assertEval("argv <- list(c(NaN, 9.51350769866873, 4.5908437119988, 2.99156898768759, 2.21815954375769, 1.77245385090552, 1.48919224881282, 1.29805533264756, 1.1642297137253, 1.06862870211932, 1));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble26_a6bb7c79ffe4e8b071f239d5f3350fa6");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble3_989f5b7197ccb6c5baa05f4684e7374e() {
        assertEval("argv <- list(structure(4, tzone = 'GMT', units = 'days', class = 'difftime'), units = 'secs');as.double(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinasdouble_testasdouble3_989f5b7197ccb6c5baa05f4684e7374e");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble6_752d38d8a75436778dc2a1a3f8ecca88() {
        assertEval("argv <- list(c(856722023.658297, 302896976.260735, 107090252.958018, 37862122.0336249, 13386281.6212132, 4732765.25626924, 1673285.20557359, 591595.661165903, 209160.656540579, 73949.4659102332, 26145.0937553316, 9243.69976775411, 3268.16009484595, 1155.49552841673, 408.56675987247, 144.503039869403, 51.1642500846007, 18.1945635811076, 6.57944169516568, 2.52146555042134, 1.10249557516018, 0.395623281358704, -0.367112032460934, 0.27396220835345, -0.0693674921217567, 0.0814543296800769, 0.0923699793060252, 0.0504684833914985, -0.0498360425475413, 0.00273531641447061, -0.00392881268836618));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble6_752d38d8a75436778dc2a1a3f8ecca88");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble7_4d29d409a409fed21c1bda98325ac766() {
        assertEval("argv <- list(c(1.90069420068965e+68, 1.85614668036113e+65, 1.81264324254072e+62, 1.77015941654582e+59, 1.72867130522891e+56, 1.68815557154536e+53, 1.64858942546521e+50, 1.60995061130567e+47, 1.57221739580551e+44, 1.53536855821758e+41, 1.49938338742443e+38, 1.46424170564914e+35, 1.42992399523352e+32, 1.39641192722393e+29, 1.36369045875401e+26, 1.33175605805513e+23, 1.30064886911081e+20, 127057845771019376, 124241617095379, 121963623349.57, 121618014.278689, 129184.542208039, 178.330555907964, 0.906701004569228, -0.0905266041439205, 0.141777480680994, 0.0921442943441807, 0.0658533118803105, -0.0402995417166551, 0.0244881559995369, -0.0194680918617461));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble7_4d29d409a409fed21c1bda98325ac766");
    }

    @Test
    public void TestrGenBuiltinasdouble_testasdouble8_8eade01b937fb096c73488398e8454f4() {
        assertEval("argv <- list(c(3.69420518444359e+25, 2.30887824027777e+24, 1.44304890017492e+23, 9.01905562612606e+21, 5.63690976641081e+20, 35230686042118275072, 2201917878145066496, 137619867512235136, 8601241751556820, 537577617482832, 33598603095309.8, 2099913194115.17, 131244699796.888, 8202825028.58974, 512684387.219832, 32044730.0464007, 2003284.70114408, 125327.674230857, 7863.68742857025, 499.272560819512, 33.2784230289721, 2.7659432263306, 0.488936768533843, -0.282943224311172, 7.32218543045282e-05, -0.00636442868227041, -0.0483709204009262, -0.0704795507649514, 0.0349437746169591, -0.0264830837608839, 0.0200901469411759));as.double(argv[[1]]);");
        check("TestrGenBuiltinasdouble_testasdouble8_8eade01b937fb096c73488398e8454f4");
    }

    @Test
    public void TestrGenBuiltinasdoubledifftime_testasdoubledifftime1_2f442f4b40bf7b7ec96499b8c71bca24() {
        assertEval("argv <- structure(list(x = structure(16351.8259046444, units = 'days',     class = 'difftime', origin = structure(0, class = c('POSIXct',         'POSIXt'), tzone = 'GMT'))), .Names = 'x');do.call('as.double.difftime', argv)");
        check("TestrGenBuiltinasdoubledifftime_testasdoubledifftime1_2f442f4b40bf7b7ec96499b8c71bca24");
    }

    @Test
    public void TestrGenBuiltinasin_testasin2_491c4b3e1cb2ac77763d88264422d3f4() {
        assertEval("argv <- list(c(2+0i, 2-0.0001i, -2+0i, -2+0.0001i));asin(argv[[1]]);");
        check("TestrGenBuiltinasin_testasin2_491c4b3e1cb2ac77763d88264422d3f4");
    }

    @Test
    public void TestrGenBuiltinasin_testasin3_4b79981613e436caf0aa2740956b68dd() {
        assertEval("argv <- list(logical(0));asin(argv[[1]]);");
        check("TestrGenBuiltinasin_testasin3_4b79981613e436caf0aa2740956b68dd");
    }

    @Test
    public void TestrGenBuiltinasinh_testasinh1_17b231c174eb6826c7a3339e6d3a6538() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));asinh(argv[[1]]);");
        check("TestrGenBuiltinasinh_testasinh1_17b231c174eb6826c7a3339e6d3a6538");
    }

    @Test
    public void TestrGenBuiltinasinh_testasinh2_16feec78b53e130c27fcea5ecdaf5fed() {
        assertEval("argv <- list(FALSE);asinh(argv[[1]]);");
        check("TestrGenBuiltinasinh_testasinh2_16feec78b53e130c27fcea5ecdaf5fed");
    }

    @Test
    public void TestrGenBuiltinasinh_testasinh3_fd62a29e7b6704ee7f1c2825c236b191() {
        assertEval("argv <- list(c(-10.0178749274099, -9.71883514604503, -9.428631115578, -9.14699900083883, -8.87368275970178, -8.60843391030797, -8.35101130516145, -8.10118091189307, -7.85871560049306, -7.62339493681878, -7.39500498218993, -7.17333809888897, -6.95819276139009, -6.74937337314489, -6.54669008875839, -6.34995864139355, -6.15900017524753, -5.9736410829473, -5.79371284771676, -5.61905189017195, -5.44949941960501, -5.28490128962169, -5.12510785800119, -4.96997385065093, -4.81935822953248, -4.67312406443873, -4.53113840850555, -4.39327217734495, -4.25940003168967, -4.12940026344266, -4.00315468502777, -3.88054852194104, -3.76147030840502, -3.64581178603109, -3.53346780539777, -3.42433623045557, -3.31831784567124, -3.21531626582739, -3.11523784839505, -3.01799160839986, -2.92348913570423, -2.83164451463048, -2.74237424585168, -2.65559717047939, -2.57123439627907, -2.48920922594631, -2.40944708737842, -2.33187546587824, -2.25642383822831, -2.18302360857567, -2.1116080460688, -2.04211222419016, -1.97447296172911, -1.90862876534153, -1.84451977364398, -1.78208770279149, -1.72127579348957, -1.66202875939226, -1.60429273683927, -1.54801523588655, -1.49314509258573, -1.43963242246912, -1.38742857519786, -1.33648609033215, -1.2867586541832, -1.23820105770775, -1.19076915540686, -1.1444198251916, -1.0991109291792, -1.05480127538394, -1.01145058026799, -0.969019432118151, -0.927469255215247, -0.886762274763496, -0.84686148254806, -0.807730603289509, -0.769334061664634, -0.731636949963607, -0.6946049963541, -0.658204533723497, -0.622402469070884, -0.587166253420983, -0.55246385223268, -0.518263716275245, -0.484534752945762, -0.451246298001703, -0.41836808768293, -0.385870231197804, -0.353723183548358, -0.321897718669858, -0.290364902860306, -0.25909606847575, -0.22806278786747, -0.19723684753736, -0.166590222487993, -0.13609505074407, -0.105723608022064, -0.0754482825250618, -0.0452415498398571, -0.0150759479134945, 0.015075947913494, 0.0452415498398571, 0.0754482825250618, 0.105723608022064, 0.136095050744069, 0.166590222487993, 0.19723684753736, 0.22806278786747, 0.259096068475749, 0.290364902860306, 0.321897718669858, 0.353723183548358, 0.385870231197804, 0.41836808768293, 0.451246298001702, 0.484534752945762, 0.518263716275245, 0.55246385223268, 0.587166253420983, 0.622402469070883, 0.658204533723497, 0.6946049963541, 0.731636949963607, 0.769334061664634, 0.807730603289509, 0.84686148254806, 0.886762274763496, 0.927469255215247, 0.96901943211815, 1.01145058026799, 1.05480127538394, 1.0991109291792, 1.1444198251916, 1.19076915540686, 1.23820105770775, 1.2867586541832, 1.33648609033215, 1.38742857519786, 1.43963242246912, 1.49314509258573, 1.54801523588655, 1.60429273683927, 1.66202875939226, 1.72127579348957, 1.78208770279149, 1.84451977364398, 1.90862876534153, 1.97447296172911, 2.04211222419016, 2.1116080460688, 2.18302360857567, 2.25642383822831, 2.33187546587824, 2.40944708737842, 2.48920922594631, 2.57123439627907, 2.65559717047939, 2.74237424585168, 2.83164451463048, 2.92348913570423, 3.01799160839985, 3.11523784839505, 3.21531626582738, 3.31831784567124, 3.42433623045557, 3.53346780539777, 3.64581178603109, 3.76147030840502, 3.88054852194104, 4.00315468502777, 4.12940026344266, 4.25940003168967, 4.39327217734494, 4.53113840850555, 4.67312406443873, 4.81935822953248, 4.96997385065093, 5.12510785800119, 5.28490128962168, 5.44949941960501, 5.61905189017195, 5.79371284771676, 5.9736410829473, 6.15900017524753, 6.34995864139355, 6.54669008875838, 6.74937337314489, 6.95819276139008, 7.17333809888896, 7.39500498218993, 7.62339493681878, 7.85871560049306, 8.10118091189307, 8.35101130516145, 8.60843391030797, 8.87368275970177, 9.14699900083883, 9.428631115578, 9.71883514604503, 10.0178749274099));asinh(argv[[1]]);");
        check("TestrGenBuiltinasinh_testasinh3_fd62a29e7b6704ee7f1c2825c236b191");
    }

    @Test
    public void TestrGenBuiltinasinh_testasinh4_b3a04ee92591d9476b3e306bb9ba5957() {
        assertEval("argv <- list(c(0+2i, 0.0001+2i, 0-2i, 0-2.0001i));asinh(argv[[1]]);");
        check("TestrGenBuiltinasinh_testasinh4_b3a04ee92591d9476b3e306bb9ba5957");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger10_1339eee6cc2fbd993df70a1fa8c5959d() {
        assertEval("argv <- list(c('1', NA, '0'));as.integer(argv[[1]]);");
        check("TestrGenBuiltinasinteger_testasinteger10_1339eee6cc2fbd993df70a1fa8c5959d");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger11_ba3f5ab0028149747c7aeb88e4a1f518() {
        assertEval("argv <- list(c('3', '14159265358979'));as.integer(argv[[1]]);");
        check("TestrGenBuiltinasinteger_testasinteger11_ba3f5ab0028149747c7aeb88e4a1f518");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger17_b642a15a779bdcbfaf08ebd6b26a6dc7() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));as.integer(argv[[1]]);");
        check("TestrGenBuiltinasinteger_testasinteger17_b642a15a779bdcbfaf08ebd6b26a6dc7");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger2_09af24ca667cda5ae39d663dacb91980() {
        assertEval("argv <- list(c('   33', '   34', '   35', '   36', '   37', '   38', '   18', '   19', '   20', '   21', '   22', '   23', '   36', '   37', '   38', '   39'));as.integer(argv[[1]]);");
        check("TestrGenBuiltinasinteger_testasinteger2_09af24ca667cda5ae39d663dacb91980");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger3_d1dff7e5bb6c4e0191e64cd0294206c7() {
        assertEval("argv <- list(c(-Inf, -8.5, -2.83333333333333, -1.41666666666667, -0.85, -0.566666666666666, -0.404761904761905, -0.303571428571428, -0.236111111111111, -0.188888888888889));as.integer(argv[[1]]);");
        check("TestrGenBuiltinasinteger_testasinteger3_d1dff7e5bb6c4e0191e64cd0294206c7");
    }

    @Test
    public void TestrGenBuiltinasinteger_testasinteger7_9e449efb52d7355d0d205d0c066c6d01() {
        assertEval("argv <- list(NULL);as.integer(argv[[1]]);");
        check("TestrGenBuiltinasinteger_testasinteger7_9e449efb52d7355d0d205d0c066c6d01");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector11_d827720825cadd44936157d0200afa8a() {
        assertEval("argv <- list(structure(c(0.00290239468554411, 0.00140705152597282, 0.00182415100508824, 0.000171517300342798, 0.0747454613066297, 0.00103234723292905, 0.000179983318697139, 0.035258608446556, 0.00336847595628205, 0.0640696486471418, 0.0132108002751951, 0.00194778778741288, 0.00351950115137134, 0.00070046832029645, 0.00252844357734999, 0.014372012195495, 0.00923422554274329, 7.64817786749709e-06, 0.00387339857745524, 0.00121246491006704, 0.00624917129689857, 0.00187753034805145, 0.000103002251547081, 0.0136703020254034, 0.000349542811339765, 0.00120367047056318, 0.00194205014408536, 0.00462815827742801, 0.000149291834133955, 0.00193441236645678, 9.00084520363788e-05, 0.0160915134527436, 0.00346675958538611, 0.00481936427422656, 3.13343033856204e-05, 0.0564685345533007, 0.00929771993193244, 0.0103876340982415, 0.0133005891226512, 0.0325989357511189, 0.00228122925969392, 0.0460976655088242, 0.00300363745967821, 0.000271060875811077, 0.0301696315261026, 4.72002631048228e-05, 0.0262321004865233, 0.00594174673473013, 0.00288915040856096, 0.00635277836091399, 0.00569342819072193, 0.0163907345734163, 0.000360581939026215, 0.00023772587191537, 0.0164062036225435, 0.0238391417439454, NaN, 0.0421542087325977, 0.00133954856768466, 0.0113421570571088, 0.0081824228772913, 0.000149291834133955, 0.00162069399881579, 0.0018026229128858, 0.0043164627226381, 0.000407784303899559, 0.00876301280354452, 0.00179253664026376, 0.000416739394150718, 0.014372012195495, 0.000179983318697139, 0.00115986529332945, 0.00377736311314377, 0.00219491136307178, 0.00070046832029645, 0.000522557531637993, 9.86336244510646e-05, 0.0216346027446621, 0.000659639144027202, 0.0137501462695058, 5.91425796335962e-08, 0.0279425064631674, 0.000170828237014775, 0.0042454690355613, 0.0114879015536739, 0.000173346990819198, 0.00138111062254461, 0.00772582941114727, 0.0277947034678616, 0.00892024547056825, 0.0618577709874562, 0.0125790610228498, 0.0277947034678616), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector11_d827720825cadd44936157d0200afa8a");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector12_8c045543b2c27854107e4c12f57d7721() {
        assertEval("argv <- list(structure(c(0.164593338447767, 0.182090654313858, NA, 0.484947927602608), .Names = c('(Intercept)', 'x1', 'x2', 'x3')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector12_8c045543b2c27854107e4c12f57d7721");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector13_6e7b2cdcf0c9e1f08df457ed8da0e8ad() {
        assertEval("argv <- list('', 'double'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector13_6e7b2cdcf0c9e1f08df457ed8da0e8ad");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector15_641808a599c15d882621332b563c020b() {
        assertEval("argv <- list(quote(sqrt(abs(`Standardized residuals`))), 'expression'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector15_641808a599c15d882621332b563c020b");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector17_bce9cbaab33ec90e3982ca66cb3d44cf() {
        assertEval("argv <- list(quote(list(X[[2L]])), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector17_bce9cbaab33ec90e3982ca66cb3d44cf");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector19_f43e9760a94a58c683196032eac74b60() {
        assertEval("argv <- list(NULL, 'double'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector19_f43e9760a94a58c683196032eac74b60");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector20_f05fa7e354e24d68f1be267ef2a34300() {
        assertEval("argv <- list(quote(list(x = c(1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 11, 12), y = c(73, 73, 70, 74, 75, 115, 105, 107, 124, 107, 116, 125, 102, 144, 178, 149, 177, 124, 157, 128, 169, 165, 186, 152, 181, 139, 173, 151, 138, 181, 152, 188, 173, 196, 180, 171, 188, 174, 198, 172, 176, 162, 188, 182, 182, 141, 191, 190, 159, 170, 163, 197), weight = c(1, rep(0.1, 51)))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector20_f05fa7e354e24d68f1be267ef2a34300");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector21_02e138c727ac2284c29f7c70e86a3c53() {
        assertEval("argv <- list(NULL, 'integer'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector21_02e138c727ac2284c29f7c70e86a3c53");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector26_fc2120753af46a7f80df4f69719e978b() {
        assertEval("argv <- list(quote(list(V1 = c('a', 'd e', 'h'), V2 = c('b'', 'f', 'i'), V3 = c('c', 'g', 'j\\nk l m'))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector26_fc2120753af46a7f80df4f69719e978b");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector3_7b639093518aafa976e5da469a309b55() {
        assertEval("argv <- list(quote(list(ya, x[rep.int(NA_integer_, nyy), nm.x, drop = FALSE])), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector3_7b639093518aafa976e5da469a309b55");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector30_148f0bdece4c46d21a45243cfb1720b3() {
        assertEval("argv <- list(list('a', 'b', 'c'), 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector30_148f0bdece4c46d21a45243cfb1720b3");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector32_a21d54f394149e88a72b425a3c0d3e13() {
        assertEval("argv <- list(quote(list(x = c(2:3, NA), y = c(3:4, NA))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector32_a21d54f394149e88a72b425a3c0d3e13");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector33_7f02cce69ded51871ea4562243a768b3() {
        assertEval("argv <- list(quote(list(cut(Dtimes, '3 months'))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector33_7f02cce69ded51871ea4562243a768b3");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector34_39b5fdb7e9ed8b85f87931734024b0f0() {
        assertEval("argv <- list(quote(list(a = I('abc'), b = I('def\\'gh'))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector34_39b5fdb7e9ed8b85f87931734024b0f0");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector38_7aaa2111f301458b947f5f450287e0ae() {
        assertEval("argv <- list(integer(0), 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector38_7aaa2111f301458b947f5f450287e0ae");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector40_54eb0c6e97d2cacbe99e0af5d062ddc3() {
        assertEval("argv <- list(c(NA, NaN), 'logical'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector40_54eb0c6e97d2cacbe99e0af5d062ddc3");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector41_4f49b0ae20115ed8d685c3d0265a7d0e() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'), 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector41_4f49b0ae20115ed8d685c3d0265a7d0e");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector43_92a9d1327d200ede7313eb484607b72d() {
        assertEval("argv <- list(list('GRID.VP.12'), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector43_92a9d1327d200ede7313eb484607b72d");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector44_9283e342c57c7060c14e47b1c11a79d7() {
        assertEval("argv <- list(NULL, 'logical'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector44_9283e342c57c7060c14e47b1c11a79d7");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector5_6d566c7b1dd7159a7bb04b7fefe16017() {
        assertEval("argv <- list(structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector5_6d566c7b1dd7159a7bb04b7fefe16017");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector52_8054ead9a6d6b3bd61e8e2db369f50eb() {
        assertEval("argv <- list(structure(c(5.4278733372119e-07, 0.000257866433233453, NA), .Names = c('x', 'm', 'Residuals')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector52_8054ead9a6d6b3bd61e8e2db369f50eb");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector53_d69fd12a90e8e09f1c201c45d26054e6() {
        assertEval("argv <- list('1.3', 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector53_d69fd12a90e8e09f1c201c45d26054e6");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector54_c4f9125801103a20de2ccf57a275b64b() {
        assertEval("argv <- list(1L, 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector54_c4f9125801103a20de2ccf57a275b64b");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector56_ff7eee66728f5134d1531ae9e5151258() {
        assertEval("argv <- list(quote(list(expand.grid(Hair = lab$Hair, Eye = lab$Eye, Sex = lab$Sex, stringsAsFactors = TRUE), Fr = as.vector(HairEyeColor))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector56_ff7eee66728f5134d1531ae9e5151258");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector57_74bb53e8b04fa97bfe2d982e1e8feee8() {
        assertEval("argv <- list(FALSE, 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector57_74bb53e8b04fa97bfe2d982e1e8feee8");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector59_9511156e20adbcb6e12a269c51acf406() {
        assertEval("argv <- list(structure(list(`character(0)` = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'character(0)', row.names = character(0), class = 'data.frame'), 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector59_9511156e20adbcb6e12a269c51acf406");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector61_f2fcfcf4db960a5ba9838cbb61e8e2f7() {
        assertEval("argv <- list(c('The C and R code has been reformatted for legibility.', 'The old compatibility function rpconvert() has been removed.', 'The cross-validation functions allow for user interrupt at the end\\nof evaluating each split.', 'Variable Reliability in data set car90 is corrected to be an\\nordered factor, as documented.', 'Surrogate splits are now considered only if they send two or more\\ncases _with non-zero weight_ each way.  For numeric/ordinal\\nvariables the restriction to non-zero weights is new: for\\ncategorical variables this is a new restriction.', 'Surrogate splits which improve only by rounding error over the\\ndefault split are no longer returned.  Where weights and missing\\nvalues are present, the splits component for some of these was not\\nreturned correctly.', 'A fit of class \\'rpart\\' now contains a component for variable\\n‘importance’, which is reported by the summary() method.', 'The text() method gains a minlength argument, like the labels()\\nmethod.  This adds finer control: the default remains pretty =\\nNULL, minlength = 1L.', 'The handling of fits with zero and fractional weights has been\\ncorrected: the results may be slightly different (or even\\nsubstantially different when the proportion of zero weights is\\nlarge).', 'Some memory leaks have been plugged.', 'There is a second vignette, longintro.Rnw, a version of the\\noriginal Mayo Tecnical Report on rpart.', 'Added dataset car90, a corrected version of the S-PLUS dataset\\ncar.all (used with permission).', 'This version does not use paste0{} and so works with R 2.14.x.', 'Merged in a set of Splus code changes that had accumulated at Mayo\\nover the course of a decade. The primary one is a change in how\\nindexing is done in the underlying C code, which leads to a major\\nspeed increase for large data sets.  Essentially, for the lower\\nleaves all our time used to be eaten up by bookkeeping, and this\\nwas replaced by a different approach.  The primary routine also\\nuses .Call{} so as to be more memory efficient.', 'The other major change was an error for asymmetric loss matrices,\\nprompted by a user query.  With L=loss asymmetric, the altered\\npriors were computed incorrectly - they were using L' instead of L.\\nUpshot - the tree would not not necessarily choose optimal splits\\nfor the given loss matrix.  Once chosen, splits were evaluated\\ncorrectly.  The printed “improvement” values are of course the\\nwrong ones as well.  It is interesting that for my little test\\ncase, with L quite asymmetric, the early splits in the tree are\\nunchanged - a good split still looks good.', 'Add the return.all argument to xpred.rpart().', 'Added a set of formal tests, i.e., cases with known answers to\\nwhich we can compare.', 'Add a usercode vignette, explaining how to add user defined\\nsplitting functions.', 'The class method now also returns the node probability.', 'Add the stagec data set, used in some tests.', 'The plot.rpart routine needs to store a value that will be visible\\nto the rpartco routine at a later time.  This is now done in an\\nenvironment in the namespace.', 'Force use of registered symbols in R >= 2.16.0', 'Update Polish translations.', 'Work on message formats.', 'Add Polish translations', 'rpart, rpart.matrix: allow backticks in formulae.', 'tests/backtick.R: regession test', 'src/xval.c: ensure unused code is not compiled in.', 'Change description of margin in ?plot.rpart as suggested by Bill\\nVenables.'), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector61_f2fcfcf4db960a5ba9838cbb61e8e2f7");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector64_eed65ad16c886bf6e267c8cd02185c19() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector64_eed65ad16c886bf6e267c8cd02185c19");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector66_adb214adde85e83927d547331de5e0cd() {
        assertEval("argv <- list(3.18309886183776e-301, 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector66_adb214adde85e83927d547331de5e0cd");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector67_76929df5f8f314aff439af51175fb2c0() {
        assertEval("argv <- list(quote(list(a = 1:3, b = letters[1:3])), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector67_76929df5f8f314aff439af51175fb2c0");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector69_0013804c7331698e824c0b96b8f4ea76() {
        assertEval("argv <- list(c(200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 1e+05, 2e+05, 5e+05), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector69_0013804c7331698e824c0b96b8f4ea76");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector7_e28d9fbf78037c44d738f3d43d251045() {
        assertEval("argv <- list(quote(list(ii = 1:10, xx = pi * -3:6)), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector7_e28d9fbf78037c44d738f3d43d251045");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector70_61c460361f3764e904cc6b61551e05b6() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L)), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector70_61c460361f3764e904cc6b61551e05b6");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector71_9db988c90976aaa6a4b78d004a0bd5a5() {
        assertEval("argv <- list(structure(c(2.2250738585072e-308, 1.79769313486232e+308), .Names = c('double.xmin', 'double.xmax')), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector71_9db988c90976aaa6a4b78d004a0bd5a5");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector73_faf54fb5fd22ae70e95ee6c7d865dba7() {
        assertEval("argv <- list(structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor'), 'any'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector73_faf54fb5fd22ae70e95ee6c7d865dba7");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector75_8404b961cc1eef89fae8a8981a56db6b() {
        assertEval("argv <- list(3.14159265358979, 'pairlist'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector75_8404b961cc1eef89fae8a8981a56db6b");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector76_82c4e8b63b58404186231e6e216abf15() {
        assertEval("argv <- list(structure(list(c0 = structure(character(0), class = 'AsIs')), .Names = 'c0', row.names = character(0), class = 'data.frame'), 'character'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector76_82c4e8b63b58404186231e6e216abf15");
    }

    @Test
    public void TestrGenBuiltinasvector_testasvector9_7676f2a631f4a36e921e0abfa4f463f7() {
        assertEval("argv <- list(quote(list(x = 1:100, z = 1:100 + rnorm(100, 10))), 'list'); .Internal(as.vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinasvector_testasvector9_7676f2a631f4a36e921e0abfa4f463f7");
    }

    @Test
    public void TestrGenBuiltinatan_testatan3_12cb5a85d0e92250b0e18fc3b3776819() {
        assertEval("argv <- list(c(0+2i, 0.0001+2i, 0-2i, 0-2.0001i));atan(argv[[1]]);");
        check("TestrGenBuiltinatan_testatan3_12cb5a85d0e92250b0e18fc3b3776819");
    }

    @Test
    public void TestrGenBuiltinatan_testatan6_e949562583eb064fc97cceca512f8ed4() {
        assertEval("argv <- list(-1.46941282670977e-16);atan(argv[[1]]);");
        check("TestrGenBuiltinatan_testatan6_e949562583eb064fc97cceca512f8ed4");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan21_ae2e63ba01b311a54346821d48b14d33() {
        assertEval("argv <- list(structure(0.142857142857143, .Names = 'Var2'), structure(1.75510204081633, .Names = 'Var1')); .Internal(atan2(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinatan2_testatan21_ae2e63ba01b311a54346821d48b14d33");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan22_68106313fd1758e602266636ed644cf6() {
        assertEval("argv <- list(structure(-0.224489795918367, .Names = 'Var2'), structure(-0.816326530612245, .Names = 'Var1')); .Internal(atan2(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinatan2_testatan22_68106313fd1758e602266636ed644cf6");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan23_1691a85681428b29f2b8e93909606e43() {
        assertEval("argv <- list(c(-1.95681154249341, -2.88854075894443, -2.84850921846233, -2.14635417317387, -1.72790445779804, -0.92649412488672, -0.261537463816701, 0.948205247045638, 1.0990096500205, 2.09024037060933, 2.90928417418961, 4.00425294069879, 1.70515935701163), c(-3.2406391957027, -2.61163262017643, -0.21977838696678, 1.24931893031091, 1.6032898858835, 2.16902716372255, 2.15792786802985, 2.10075226013806, 2.04989923648162, 1.49269068253165, 0.515893014329757, -2.61745072267338, -4.64929811590859)); .Internal(atan2(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinatan2_testatan23_1691a85681428b29f2b8e93909606e43");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan24_c446d53bd8c4c893f98362165043ce44() {
        assertEval("argv <- list(0+1i, 0+0i); .Internal(atan2(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinatan2_testatan24_c446d53bd8c4c893f98362165043ce44");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan25_e61d7a90cbac83910e9739b5f4bce322() {
        assertEval("argv <- list(2.43782895752771e-05, 0.999996523206508); .Internal(atan2(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinatan2_testatan25_e61d7a90cbac83910e9739b5f4bce322");
    }

    @Test
    public void TestrGenBuiltinatan2_testatan26_2faa23c0efa0572ba47394d813dd43b3() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(atan2(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinatan2_testatan26_2faa23c0efa0572ba47394d813dd43b3");
    }

    @Test
    public void TestrGenBuiltinatanh_testatanh1_b6e397b36295a6744d6d5a94d225288e() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));atanh(argv[[1]]);");
        check("TestrGenBuiltinatanh_testatanh1_b6e397b36295a6744d6d5a94d225288e");
    }

    @Test
    public void TestrGenBuiltinatanh_testatanh2_2c9a509396fa6fd1bf0c79240856d8f7() {
        assertEval("argv <- list(c(0.667355731370168, 0.757545006911892, 0.835315653735585, 0.984260691393257, 0.997724361757832, 0.998320334761744, 0.995857200407461, 0.978447456936914, 0.924289918318784, 0.794303899816803, 0.772144244057747, 0.886598050753707, 0.927287003572071, 0.862971883028345, 0.864426227271356, 0.927240697865085, 0.892356439729065, 0.753876685479294, 0.834371238466667, 0.856663357154979, 0.836217049107607, 0.820080611345367, 0.881122397467922, 0.964328668319385, 0.870112695225674, 0.897689370465451, 0.872889563044137, 0.716354206299899, 0.634385015212608, 0.77586178284932, 0.639202570327528, 0.710504816816848, 0.825388608284517, 0.812993921221196, 0.705406278672692, 0.577944207218662));atanh(argv[[1]]);");
        check("TestrGenBuiltinatanh_testatanh2_2c9a509396fa6fd1bf0c79240856d8f7");
    }

    @Test
    public void TestrGenBuiltinatanh_testatanh3_4d272f9885ca71b427cfa2ef95e1a057() {
        assertEval("argv <- list(-0.133190890463189);atanh(argv[[1]]);");
        check("TestrGenBuiltinatanh_testatanh3_4d272f9885ca71b427cfa2ef95e1a057");
    }

    @Test
    public void TestrGenBuiltinatanh_testatanh4_654a64df970645a5797c9f8d6ac2db07() {
        assertEval("argv <- list(c(2+0i, 2-0.0001i, -2+0i, -2+0.0001i));atanh(argv[[1]]);");
        check("TestrGenBuiltinatanh_testatanh4_654a64df970645a5797c9f8d6ac2db07");
    }

    @Test
    public void TestrGenBuiltinattr_testattr10_acf8f061727bb70d2da211edd7c1edcd() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), terms = quote(Employed ~ GNP.deflator + GNP + Unemployed +     Armed.Forces + Population + Year), row.names = 1947:1962, class = 'data.frame'), 'terms');attr(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattr_testattr10_acf8f061727bb70d2da211edd7c1edcd");
    }

    @Test
    public void TestrGenBuiltinattr_testattr13_89046959ae7c784cffcbd22083886607() {
        assertEval("argv <- list(quote(cbind(X, M) ~ 1), 'term.labels');attr(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattr_testattr13_89046959ae7c784cffcbd22083886607");
    }

    @Test
    public void TestrGenBuiltinattr_testattr17_23228c504a51c4f2373362d0208d59f4() {
        assertEval("argv <- list(structure(c(0.5, 0.5, 0.5, 0.5), gradient = structure(c(NaN, NaN, NaN, NaN), .Dim = c(4L, 1L), .Dimnames = list(NULL, 'L75'))), 'gradient');attr(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattr_testattr17_23228c504a51c4f2373362d0208d59f4");
    }

    @Test
    public void TestrGenBuiltinattr_testattr23_6c484ce28a8ca024d92e01f591414c95() {
        assertEval("argv <- list(structure(list(y = c(73, 73, 70, 74, 75, 115, 105, 107, 124, 107, 116, 125, 102, 144, 178, 149, 177, 124, 157, 128, 169, 165, 186, 152, 181, 139, 173, 151, 138, 181, 152, 188, 173, 196, 180, 171, 188, 174, 198, 172, 176, 162, 188, 182, 182, 141, 191, 190, 159, 170, 163, 197), x = c(1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 11, 12), Ta = 1, Tb = 12), .Names = c('y', 'x', 'Ta', 'Tb'), terms = quote(~y +     x)), 'terms');attr(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattr_testattr23_6c484ce28a8ca024d92e01f591414c95");
    }

    @Test
    public void TestrGenBuiltinattr_testattr32_812e0a38ea6db8eef66392b6b41b0392() {
        assertEval("argv <- list(structure(1:10, date = structure(200171400, class = c('POSIXct', 'POSIXt'), tzone = ''), class = 'stamped'), 'date');attr(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattr_testattr32_812e0a38ea6db8eef66392b6b41b0392");
    }

    @Test
    public void TestrGenBuiltinattr_testattr5_ae75e342a79dc0f8c76efbfeadc5b247() {
        assertEval("argv <- list(structure(list(title = structure(1L, .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(2L, .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = 1L, class = 'data.frame'), 'row.names');attr(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattr_testattr5_ae75e342a79dc0f8c76efbfeadc5b247");
    }

    @Test
    public void TestrGenBuiltinattr_testattr8_9eba0a5cb6d4ad7791f92bc24a39d8f3() {
        assertEval("argv <- list(structure(c(72.8922646699554, 72.8922646699554, 72.8922646699554, 72.8922646699554, 72.8922646699554, 99.6344113579063, 99.6344113579063, 122.561298550713, 122.561298550713, 122.561298550713, 122.561298550713, 122.561298550713, 122.561298550713, 140.590935258431, 140.590935258431, 140.590935258431, 153.976908924618, 153.976908924618, 153.976908924618, 153.976908924618, 163.542360717164, 163.542360717164, 163.542360717164, 163.542360717164, 163.542360717164, 163.542360717164, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 170.206309375934, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 174.771283819687, 177.863643456281, 177.863643456281, 177.863643456281, 177.863643456281, 177.863643456281, 181.334266157228, 182.262171017221), gradient = structure(c(0, 0, 0, 0, 0, 57.4245712142609, 57.4245712142609, 92.0663000396056, 92.0663000396056, 92.0663000396056, 92.0663000396056, 92.0663000396056, 92.0663000396056, 102.603355837019, 102.603355837019, 102.603355837019, 96.1864486469068, 96.1864486469068, 96.1864486469068, 96.1864486469068, 80.9127637202515, 80.9127637202515, 80.9127637202515, 80.9127637202515, 80.9127637202515, 80.9127637202515, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 62.7567863240641, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 45.2165616754423, 29.9327435335998, 29.9327435335998, 29.9327435335998, 29.9327435335998, 29.9327435335998, 7.54853144661603, 0, 0.999999995832131, 0.999999995832131, 0.999999995832131, 0.999999995832131, 0.999999995832131, 0.900752404767751, 0.900752404767751, 0.72805882604922, 0.72805882604922, 0.72805882604922, 0.72805882604922, 0.72805882604922, 0.72805882604922, 0.546325339398677, 0.546325339398677, 0.546325339398677, 0.388712482407919, 0.388712482407919, 0.388712482407919, 0.388712482407919, 0.265313345750221, 0.265313345750221, 0.265313345750221, 0.265313345750221, 0.265313345750221, 0.265313345750221, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.174363797963106, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.109797198736723, 0.0650421524858363, 0.0650421524858363, 0.0650421524858363, 0.0650421524858363, 0.0650421524858363, 0.0138547080588812, -2.61666809427403e-08, 0, 0, 0, 0, 0, 0.186415683651876, 0.186415683651876, 0.381271875735367, 0.381271875735367, 0.381271875735367, 0.381271875735367, 0.381271875735367, 0.381271875735367, 0.552874143045278, 0.552874143045278, 0.552874143045278, 0.689351882872836, 0.689351882872836, 0.689351882872836, 0.689351882872836, 0.791184856858009, 0.791184856858009, 0.791184856858009, 0.791184856858009, 0.791184856858009, 0.791184856858009, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.864120807233518, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.914989166321596, 0.949854646587551, 0.949854646587551, 0.949854646587551, 0.949854646587551, 0.949854646587551, 0.989368022459573, 0.999999988297389), .Dim = c(52L, 3L))), 'gradient');attr(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattr_testattr8_9eba0a5cb6d4ad7791f92bc24a39d8f3");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign1_04d2ca7126ca8b16489fda461b4053f0() {
        assertEval("argv <- list(structure(1, foo = structure(list(a = 'a'), .Names = 'a')), 'foo', value = structure(list(a = 'a'), .Names = 'a'));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign1_04d2ca7126ca8b16489fda461b4053f0");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign10_ea8fa32ae9b5f46cc52903a11c737421() {
        assertEval("argv <- list(structure(list(a = 1:3, b = structure(1:3, .Label = c('a', 'b', 'c'), class = 'factor')), .Names = c('a', 'b'), row.names = c(NA, -3L), class = 'data.frame', foo = 10), 'foo', value = 10);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign10_ea8fa32ae9b5f46cc52903a11c737421");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign11_7f441a46a01ebba5aa1acb7d3c4ee512() {
        assertEval("argv <- list(structure(c(50.566057038188, 50.566057038188, 102.811023011144, 102.811023011144, 134.361651733496, 134.361651733496, 164.684698598908, 164.684698598908, 190.832887571642, 190.832887571642, 200.968775266774, 200.968775266774), gradient = structure(c(0.237752464043283, 0.237752464043283, 0.483398854556726, 0.483398854556726, 0.631744210319564, 0.631744210319564, 0.774317697987532, 0.774317697987532, 0.897261758147131, 0.897261758147131, 0.944918870762493, 0.944918870762493, -601.11023288912, -601.11023288912, -828.312179323201, -828.312179323201, -771.656323378267, -771.656323378267, -579.628530513078, -579.628530513078, -305.762593240759, -305.762593240759, -172.635625621456, -172.635625621456), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('Vm', 'K')))), 'gradient', value = structure(c(0.237752464043283, 0.237752464043283, 0.483398854556726, 0.483398854556726, 0.631744210319564, 0.631744210319564, 0.774317697987532, 0.774317697987532, 0.897261758147131, 0.897261758147131, 0.944918870762493, 0.944918870762493, -601.11023288912, -601.11023288912, -828.312179323201, -828.312179323201, -771.656323378267, -771.656323378267, -579.628530513078, -579.628530513078, -305.762593240759, -305.762593240759, -172.635625621456, -172.635625621456), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('Vm', 'K'))));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign11_7f441a46a01ebba5aa1acb7d3c4ee512");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign12_eebb5dc99978390f979913f24736360e() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 20L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign12_eebb5dc99978390f979913f24736360e");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign13_161227039b81862755943625a1ee3a7d() {
        assertEval("argv <- list(structure(cim = c(19L, 22L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign13_161227039b81862755943625a1ee3a7d");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign14_5d3a70529bb7c719fd0ba7d907306e43() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 20L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign14_5d3a70529bb7c719fd0ba7d907306e43");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign15_e7a94642f8935e6167fccae31b9ee078() {
        assertEval("argv <- list(structure(c('8189464 kB', '52252 kB', '237240 kB', '6704452 kB', '5868 kB', '3947300 kB', '3641700 kB', '521488 kB', '126264 kB', '3425812 kB', '3515436 kB', '0 kB', '0 kB', '20603324 kB', '20546156 kB', '1964 kB', '0 kB', '645292 kB', '12420 kB', '76 kB', '343696 kB', '303404 kB', '40292 kB', '2344 kB', '8464 kB', '0 kB', '0 kB', '0 kB', '24698056 kB', '1053308 kB', '34359738367 kB', '301080 kB', '34359386948 kB', '0 kB', '0', '0', '0', '0', '2048 kB', '7488 kB', '8376320 kB'), .Names = c('MemTotal', 'MemFree', 'Buffers', 'Cached', 'SwapCached', 'Active', 'Inactive', 'Active(anon)', 'Inactive(anon)', 'Active(file)', 'Inactive(file)', 'Unevictable', 'Mlocked', 'SwapTotal', 'SwapFree', 'Dirty', 'Writeback', 'AnonPages', 'Mapped', 'Shmem', 'Slab', 'SReclaimable', 'SUnreclaim', 'KernelStack', 'PageTables', 'NFS_Unstable', 'Bounce', 'WritebackTmp', 'CommitLimit', 'Committed_AS', 'VmallocTotal', 'VmallocUsed', 'VmallocChunk', 'HardwareCorrupted', 'HugePages_Total', 'HugePages_Free', 'HugePages_Rsvd', 'HugePages_Surp', 'Hugepagesize', 'DirectMap4k', 'DirectMap2M'), Name = '/proc/meminfo'), 'Name', value = '/proc/meminfo');`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign15_e7a94642f8935e6167fccae31b9ee078");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign16_48ce7a0a9b50187eae4cada4d3353f3a() {
        assertEval("argv <- list(structure(c(0, -187, -34, 0, 165, 0, -95, 121, 107, 0, 41, 0, 0, 93, 0), .Dim = c(5L, 3L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign16_48ce7a0a9b50187eae4cada4d3353f3a");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign2_abd86ae29ccfc9b40b4737b8e494dfa8() {
        assertEval("argv <- list(structure(c(-99, 123, 0, -27, 0, 136, 3.5527136788005e-14, 0, -89, -59, 54.9999999999999, -260, 30, 47, 0), .Dim = c(5L, 3L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign2_abd86ae29ccfc9b40b4737b8e494dfa8");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign3_1a9c2fe875d816a85f2166d16f0fa5b6() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, NA, 1, 0, 0, 0, 7, 1, 0, 3, 0, 0, 1), .Dim = c(4L, 4L)), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign3_1a9c2fe875d816a85f2166d16f0fa5b6");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign4_b98acf7c3923b80e14228ab644b0a8cc() {
        assertEval("argv <- list(structure(c(51.4483279898675, 51.4483279898675, 103.874299440142, 103.874299440142, 135.181084465022, 135.181084465022, 165.022949241512, 165.022949241512, 190.564205234787, 190.564205234787, 200.417426252912, 200.417426252912), gradient = structure(c(0.242941154845256, 0.242941154845256, 0.490498782967253, 0.490498782967253, 0.638330730196604, 0.638330730196604, 0.779245262792577, 0.779245262792577, 0.899852140987463, 0.899852140987463, 0.946379462411014, 0.946379462411014, -624.945810835795, -624.945810835795, -849.17029094943, -849.17029094943, -784.456730502965, -784.456730502965, -584.515233856856, -584.515233856856, -306.213585850174, -306.213585850174, -172.428123740936, -172.428123740936), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('Vm', 'K'))), hessian = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.95102023587733, -2.95102023587733, -4.00981760153928, -4.00981760153928, -3.70423746466663, -3.70423746466663, -2.76010536174851, -2.76010536174851, -1.44595334935665, -1.44595334935665, -0.814212806248508, -0.814212806248508, -2.95102023587733, -2.95102023587733, -4.00981760153928, -4.00981760153928, -3.70423746466663, -3.70423746466663, -2.76010536174851, -2.76010536174851, -1.44595334935665, -1.44595334935665, -0.814212806248508, -0.814212806248508, 15182.5057000153, 15182.5057000153, 13883.8998080881, 13883.8998080881, 9104.41522890179, 9104.41522890179, 4140.73388193682, 4140.73388193682, 984.096252952598, 984.096252952598, 296.69533645543, 296.69533645543), .Dim = c(12L, 2L, 2L), .Dimnames = list(NULL, c('Vm', 'K'), c('Vm', 'K')))), 'hessian', value = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.95102023587733, -2.95102023587733, -4.00981760153928, -4.00981760153928, -3.70423746466663, -3.70423746466663, -2.76010536174851, -2.76010536174851, -1.44595334935665, -1.44595334935665, -0.814212806248508, -0.814212806248508, -2.95102023587733, -2.95102023587733, -4.00981760153928, -4.00981760153928, -3.70423746466663, -3.70423746466663, -2.76010536174851, -2.76010536174851, -1.44595334935665, -1.44595334935665, -0.814212806248508, -0.814212806248508, 15182.5057000153, 15182.5057000153, 13883.8998080881, 13883.8998080881, 9104.41522890179, 9104.41522890179, 4140.73388193682, 4140.73388193682, 984.096252952598, 984.096252952598, 296.69533645543, 296.69533645543), .Dim = c(12L, 2L, 2L), .Dimnames = list(NULL, c('Vm', 'K'), c('Vm', 'K'))));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign4_b98acf7c3923b80e14228ab644b0a8cc");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign5_ea7b8da877cef1d0bb9be5bbed138167() {
        assertEval("argv <- list(structure(c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = 3:4), 'dimnames', value = NULL);`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign5_ea7b8da877cef1d0bb9be5bbed138167");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign6_a42c0b9527192cfdaa1d529d11fbcda1() {
        assertEval("argv <- list(structure(c('o', 'p', 'v', 'i', 'r', 'w', 'b', 'm', 'f', 's'), date = structure(1224086400, class = c('POSIXct', 'POSIXt'), tzone = '')), 'date', value = structure(1224086400, class = c('POSIXct', 'POSIXt'), tzone = ''));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign6_a42c0b9527192cfdaa1d529d11fbcda1");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign7_bd847e61e37d7f5dcfbd609c2cec37e4() {
        assertEval("argv <- list(structure(list(structure(list(structure(13L, label = 'Illinois', members = 1L, height = 0, leaf = TRUE), structure(32L, label = 'New York', members = 1L, height = 0, leaf = TRUE)), members = 2L, midpoint = 0.5, height = 6.23698645180507), structure(list(structure(22L, label = 'Michigan', members = 1L, height = 0, leaf = TRUE), structure(28L, label = 'Nevada', members = 1L, height = 0, leaf = TRUE)), members = 2L, midpoint = 0.5, height = 13.2973681606549)), members = 4L, midpoint = 1.5, height = 18.4173313943456, class = 'dendrogram', edgePar = structure(list(    p.col = 'plum'), .Names = 'p.col'), edgetext = '4 members'), 'edgetext', value = '4 members');`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign7_bd847e61e37d7f5dcfbd609c2cec37e4");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign8_7f59cde2ae97f9157ae509f2c9eeba78() {
        assertEval("argv <- list(structure(4, '`Object created`' = 'Sat Dec  7 00:26:20 2013'), 'Object created', value = 'Sat Dec  7 00:26:20 2013');`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign8_7f59cde2ae97f9157ae509f2c9eeba78");
    }

    @Test
    public void TestrGenBuiltinattrassign_testattrassign9_c350d08c3f819e62094d9790f710eb94() {
        assertEval("argv <- list(structure(1:3, .Names = c('a', 'b', 'c')), 'names', value = list('a', 'b', 'c'));`attr<-`(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinattrassign_testattrassign9_c350d08c3f819e62094d9790f710eb94");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes11_ce8131cc90c422c0b246f4d9189e67ef() {
        assertEval("argv <- list(structure(c(4L, 5L, 1L, 5L, 3L, 4L, 5L, 3L, 2L, 4L), .Label = c('a', 'c', 'i', 's', 't'), class = 'factor', contrasts = structure(c(1, 0, 0, 0, -1, 0, 1, 0, 0, -1, -0.247125681008604, -0.247125681008604, -0.149872105789645, 0.891249148815458, -0.247125681008604, 0.268816352031209, 0.268816352031209, -0.881781351530059, 0.0753322954364324, 0.268816352031209), .Dim = c(5L, 4L), .Dimnames = list(c('a', 'c', 'i', 's', 't'), NULL))));attributes(argv[[1]]);");
        check("TestrGenBuiltinattributes_testattributes11_ce8131cc90c422c0b246f4d9189e67ef");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes17_970081fe154ebc5ac8f25f250898a0bc() {
        assertEval("argv <- list(structure(list(L = structure(c('Min.   :14.00  ', '1st Qu.:26.00  ', 'Median :29.50  ', 'Mean   :36.39  ', '3rd Qu.:49.25  ', 'Max.   :70.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool')), class = 'table'), M = structure(c('Min.   :12.00  ', '1st Qu.:18.25  ', 'Median :27.00  ', 'Mean   :26.39  ', '3rd Qu.:33.75  ', 'Max.   :42.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool')), class = 'table'), H = structure(c('Min.   :10.00  ', '1st Qu.:15.25  ', 'Median :20.50  ', 'Mean   :21.67  ', '3rd Qu.:25.50  ', 'Max.   :43.00  ', 'A:9  ', 'B:9  ', NA, NA, NA, NA), .Dim = c(6L, 2L), .Dimnames = list(c('', '', '', '', '', ''), c('    breaks', 'wool')), class = 'table')), .Dim = 3L, .Dimnames = structure(list(`warpbreaks[, 'tension']` = c('L', 'M', 'H')), .Names = 'warpbreaks[, \\'tension\\']')));attributes(argv[[1]]);");
        check("TestrGenBuiltinattributes_testattributes17_970081fe154ebc5ac8f25f250898a0bc");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes20_15c0bda1f1e62ec9ad81a15e3f7adade() {
        assertEval("argv <- list(structure(c(-0.927486533732408, -0.13045118082262, -1.45825662858798, -1.81793776180039, -1.62313249921887, 1.26834845395072, -0.994859212587552, -0.60437576902456, -1.06120404454492, 0.877124074149983, 0.824787552890982, 0.704014030529726, -0.702775741558964, 0.544818578451748, 1.48964468805446, 0.13432541283722, -0.128923575804159, -0.354052007275421, 1.0711307633823, -1.33461699082502, 0.380875114294515, -1.07786690183251, 0.810306659502442, -2.17501201437322, -0.407604875801864, -0.462999392844433, 0.194880873045067, 2.65407152575046, 0.564656783773942, 0.906337761254496, -0.631531096896236, -1.27819755429098, -0.538330333636237, 1.00231821330914, -0.286364553583536, 0.469006850788945, 1.05885815169124, 1.21503113231427, 1.44216953152086, 0.486588338054406, 0.268701510628534, -0.463411907566429, 1.02436199321322, -1.39004777906874, 0.999688613035661, -0.916808034628566, -0.502852003923634, 0.212379391073633, -0.0134736853666567, 1.31736970279298, -0.0944249611837457, 0.806746464646202, 0.315038937675493, -1.17340599897154, 0.482494016048211, -0.791050343541626, 0.808325470742601, 0.588652339988029, 1.10512245024341, 1.12322151831428, 0.208749082415184, -0.357070741737234, 0.572101015785145, -0.533738015097777, -0.360034768896796, 0.0342776735716719, -1.99368868442296, 2.04525110526828, 0.854582964377424, -0.292897401378698, -1.18433316855268, -0.376789959833897, -0.538288068463758, -0.232305057346106, -0.375870899318979, -0.359017335348666, -0.741816586737615, -0.269774297924449, -0.796951579131833, 0.0323594165086663, 0.439067375500569, 0.466080486767734, -1.49275492910805, 0.947406234969688, 0.182071046143441, 0.445836300099003, 2.02477378068589, -1.70432399838533, -0.440962927710655, 0.831168740087201, 2.13610340066555, -1.8137969168688, 1.22501979912183, 0.795942206968001, 1.87235555725712, -1.26557065145048, 0.378275537740316, 0.789728084675539, 0.99886763527649, 2.29736830042939, -0.00228198643744461, 0.161544616498807, -1.14848457105275, -1.08025155036982, -1.03819987128219, -0.856130938839897, 1.0042164519591, -0.843667376942675, -1.21154108350058, 0.460882948229546, -0.468389916732288, -0.946568852822378, 1.17783540515932, -0.973911234750034, -0.0639785174878419, -1.1045450251553, 0.442020873295079, 0.0831991221894004, 0.269053190969569, 0.901338595939942, -0.086250034518703, 0.478492308026563, -0.925167039266549, -0.658186865278783, 1.0337884593443, -0.434569632901449, 2.038954875659, 0.202381377518746, 0.484762177881311, -0.360074615793248, -0.129300783906607, 0.651643789311553, 0.934922268235395, -0.0934722501709123, -0.0103213567459648, 1.61917070438612, -1.06268414268298, 0.696244014590397, 0.992388229201836, 0.697363816464206, 0.250252166543902, -0.557960198745092, 0.221087284404152, 0.10961920608307, 0.259174711435693, -0.70162900779778, 1.92431317758909, -0.578758205883074, 1.59171854092147, 0.902876390823624, 0.840275033814991, 1.77586917630517, 0.403033282757909, 0.0539091417299491, -1.26615014148617, 0.0148781649233171, 0.256100494565364, -1.01942222514274, 0.549839939376835, -0.724728578424903, 0.151976282801212, 0.326791648750199, 0.748909789058061, -1.85444018168148, 0.0869984536340467, 1.25350587157032, 0.962041461790638, 0.120578653081864, -0.11935793490114, 0.6951267107979, -1.39729724662012, 1.03310979193329, -0.619324332563388, 0.60759513170927, 0.665670243263983, 1.34746787641065, 0.213814029897928, -0.43608749915348, -0.196912890515945, -0.474024803180795, -0.0932220458288109, -0.739450980689706, -0.299196422560384, -0.765918956807232, -0.374980670595253, 0.65328744055362, -0.552631311606602, -1.24532249102801, 1.50941913047883, -1.79189867145273, -0.892183862327233, 1.20950581962313, 0.454528744013934, 0.266817155028672, 1.65771215541012, 1.00893183514602, 0.761621316769915, 0.262896620317128, -0.128241496594234, 0.980274347240293), .Label = structure(list(c(-2.17503193782145, -0.474004879732569), c(-0.97393115819826, -0.0932021223805848), c(-0.468409840180514, 0.266837078476898), c(-0.086269957966929, 0.696263938038623), c(0.268681587180308, 1.02438191666144), c(0.697343893015979, 2.65409144919869)), class = 'shingleLevel'), class = 'shingle'));attributes(argv[[1]]);");
        check("TestrGenBuiltinattributes_testattributes20_15c0bda1f1e62ec9ad81a15e3f7adade");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes23_a0a64aefea633b3e370519ba743289ce() {
        assertEval("argv <- list(structure(list(), .Names = character(0), arguments = structure('object', simpleOnly = TRUE), signatures = list(), generic = structure(function (object) standardGeneric('show'), generic = structure('show', package = 'methods'), package = 'methods', group = list(), valueClass = character(0), signature = structure('object', simpleOnly = TRUE), default = structure(function (object) showDefault(object, FALSE), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), generic = structure('show', package = 'methods'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (object) showDefault(object, FALSE))(object)), class = structure('standardGeneric', package = 'methods')), class = structure('listOfMethods', package = 'methods')));attributes(argv[[1]]);");
        check("TestrGenBuiltinattributes_testattributes23_a0a64aefea633b3e370519ba743289ce");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes5_5324182e13fb719c21932cc844773123() {
        assertEval("argv <- list(structure(c('o', 'p', 'v', 'i', 'r', 'w', 'b', 'm', 'f', 's'), date = structure(1224086400, class = c('POSIXct', 'POSIXt'), tzone = ''), .S3Class = 'stamped', class = structure('stamped', package = '.GlobalEnv')));attributes(argv[[1]]);");
        check("TestrGenBuiltinattributes_testattributes5_5324182e13fb719c21932cc844773123");
    }

    @Test
    public void TestrGenBuiltinattributes_testattributes7_e20ed84eef25740977ac77c9dc39ffc5() {
        assertEval("argv <- list(NULL);attributes(argv[[1]]);");
        check("TestrGenBuiltinattributes_testattributes7_e20ed84eef25740977ac77c9dc39ffc5");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign1_99fdb96ba57d4a61390aecd2dd80e91a() {
        assertEval("argv <- list(NULL, NULL);`attributes<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattributesassign_testattributesassign1_99fdb96ba57d4a61390aecd2dd80e91a");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign2_dd6c0c71d97a9e1c13c4c26816cc6cd8() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`attributes<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattributesassign_testattributesassign2_dd6c0c71d97a9e1c13c4c26816cc6cd8");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign3_fb43af51dd5ca868167e7ca42f1d90f4() {
        assertEval("argv <- list(NA, value = NULL);`attributes<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattributesassign_testattributesassign3_fb43af51dd5ca868167e7ca42f1d90f4");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign4_bf2b722bef5b6a3b671dee345f89e8ba() {
        assertEval("argv <- list(1:6, value = NULL);`attributes<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattributesassign_testattributesassign4_bf2b722bef5b6a3b671dee345f89e8ba");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign5_d63d100b6eef343732550c12ce558b17() {
        assertEval("argv <- list(c(2.63548374681491, 2.5910646070265, 2.66370092538965, 2.70586371228392, 2.78247262416629, 2.79379038469082, 2.72835378202123, 2.67394199863409, 2.66370092538965, 2.6222140229663, 2.59217675739587, 2.62013605497376, 2.60745502321467, 2.55870857053317, 2.60959440922522, 2.66558099101795, 2.74741180788642, 2.73878055848437, 2.67394199863409, 2.6232492903979, 2.59769518592551, 2.60852603357719, 2.53402610605613, 2.55630250076729, 2.52762990087134, 2.49136169383427, 2.55509444857832, 2.60638136511061, 2.70329137811866, 2.69108149212297, 2.63848925695464, 2.55990662503611, 2.54157924394658, 2.55870857053317, 2.50242711998443, 2.53147891704225, 2.52633927738984, 2.48429983934679, 2.54032947479087, 2.60638136511061, 2.66931688056611, 2.66745295288995, 2.62531245096167, 2.55022835305509, 2.54157924394658, 2.55144999797288, 2.47856649559384, 2.4983105537896, 2.48572142648158, 2.43296929087441, 2.48572142648158, 2.55022835305509, 2.60745502321467, 2.6159500516564, 2.57287160220048, 2.50242711998443, 2.49554433754645, 2.50105926221775, 2.44247976906445, 2.45331834004704, 2.44404479591808, 2.3747483460101, 2.43775056282039, 2.49415459401844, 2.54032947479087, 2.56110138364906, 2.4983105537896, 2.43136376415899, 2.42975228000241, 2.42651126136458, 2.36735592102602, 2.38381536598043, 2.35983548233989, 2.30749603791321, 2.35983548233989, 2.41329976408125, 2.46686762035411, 2.48000694295715, 2.42160392686983, 2.36921585741014, 2.35602585719312, 2.37106786227174, 2.27415784926368, 2.3096301674259, 2.30319605742049, 2.25527250510331, 2.32428245529769, 2.3747483460101, 2.4345689040342, 2.42160392686983, 2.38560627359831, 2.35983548233989, 2.37106786227174, 2.37291200297011, 2.29225607135648, 2.29225607135648, 2.28780172993023, 2.23552844690755, 2.28103336724773, 2.32014628611105, 2.38381536598043, 2.36172783601759, 2.3384564936046, 2.26245108973043, 2.25767857486918, 2.28555730900777, 2.25527250510331, 2.23299611039215, 2.22010808804005, 2.16435285578444, 2.20951501454263, 2.26481782300954, 2.29885307640971, 2.29885307640971, 2.25042000230889, 2.23552844690755, 2.21218760440396, 2.25042000230889, 2.17609125905568, 2.16136800223497, 2.14612803567824, 2.05690485133647, 2.12385164096709, 2.19865708695442, 2.23044892137827, 2.23044892137827, 2.17318626841227, 2.09691001300806, 2.13033376849501, 2.14921911265538, 2.10037054511756, 2.06069784035361, 2.07188200730613, 2.01703333929878, 2.07554696139253, 2.13353890837022, 2.17026171539496, 2.17026171539496, 2.13033376849501, 2.08278537031645, 2.11058971029925, 2.12057393120585, 2.07188200730613, 2.04921802267018), value = structure(list(tsp = c(1949, 1960.91666666667, 12), class = 'ts'), .Names = c('tsp', 'class')));`attributes<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattributesassign_testattributesassign5_d63d100b6eef343732550c12ce558b17");
    }

    @Test
    public void TestrGenBuiltinattributesassign_testattributesassign6_867b0f1e8d3971e8dbde6e10fdab6fc0() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 2, 3), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('I', 'a')), foo = 'bar', class = 'matrix'), value = structure(list(class = 'matrix', foo = 'bar', dimnames = list(NULL, c('I', 'a')), dim = c(3L, 2L)), .Names = c('class', 'foo', 'dimnames', 'dim')));`attributes<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinattributesassign_testattributesassign6_867b0f1e8d3971e8dbde6e10fdab6fc0");
    }

    @Test
    public void TestrGenBuiltinattributesassign__testattributesassign_1_22a4cf353cdd2268046d1d2d5d7191eb() {
        assertEval("argv <- structure(list(structure(list(), class = structure('L',     package = '.GlobalEnv')), value = NULL), .Names = c('', 'value'));do.call('attributes<-', argv)");
        check("TestrGenBuiltinattributesassign__testattributesassign_1_22a4cf353cdd2268046d1d2d5d7191eb");
    }

    @Test
    public void TestrGenBuiltinbacksolve_testbacksolve1_5ee3505c4c1ea73736916d63ec9ac952() {
        assertEval("argv <- list(structure(c(-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0421675318334475, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0421675318334475, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.445407110781343, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510819156714975, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510819156714975, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510819156714975, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592753100948471, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.428419619610855, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.252201198430086, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.428419619610855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510819156714975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592753100948472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592753100948472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, -0.252201198430086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, -0.252201198430086, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, -0.0421675318334475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, -0.0421675318334475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, -0.0486697428190666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, -0.0486697428190666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, -0.0486697428190666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, -0.0486697428190666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.935285871700694), .Dim = c(22L, 22L), .Dimnames = list(c('StripS01', 'StripS02', 'StripS03', 'StripS04', 'StripS05', 'StripS06', 'StripS07', 'StripS08', 'StripS09', 'StripS10', 'StripS11', 'StripS12', 'StripS13', 'StripS14', 'StripS15', 'StripS16', 'StripS17', 'StripS18', 'StripS19', 'StripS20', 'StripS21', ''), c('3', '4', '5', '6', '9', '10', '11', '12', '13', '14', '15', '16', '19', '20', '21', '25', '26', '27', '31', '32', '33', '39'))), structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00019677474442243), .Dim = c(22L, 1L)), 22L, FALSE, FALSE); .Internal(backsolve(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinbacksolve_testbacksolve1_5ee3505c4c1ea73736916d63ec9ac952");
    }

    @Test
    public void TestrGenBuiltinbacksolve_testbacksolve2_3893cbdf564a0850304c651909a2e046() {
        assertEval("argv <- list(structure(c(-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0421590411210753, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0421590411210753, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.445373554228914, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510781706167877, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510781706167877, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510781706167877, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592635069735823, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.428392065749892, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.252172670570357, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.428392065749892, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.510781706167877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592635069735823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, 0, -0.0592635069735823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, 0, -0.252172670570357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.4142135623731, 0, 0, 0, 0, 0, 0, -0.252172670570357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, -0.0421590411210753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, -0.0421590411210753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, 0, -0.0486599542810648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, 0, -0.0486599542810647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, 0, -0.0486599542810648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.73205080756888, -0.0486599542810648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.935253697073914), .Dim = c(22L, 22L), .Dimnames = list(c('StripS01', 'StripS02', 'StripS03', 'StripS04', 'StripS05', 'StripS06', 'StripS07', 'StripS08', 'StripS09', 'StripS10', 'StripS11', 'StripS12', 'StripS13', 'StripS14', 'StripS15', 'StripS16', 'StripS17', 'StripS18', 'StripS19', 'StripS20', 'StripS21', ''), c('3', '4', '5', '6', '9', '10', '11', '12', '13', '14', '15', '16', '19', '20', '21', '25', '26', '27', '31', '32', '33', '39'))), structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.20033559004316e-05), .Dim = c(22L, 1L)), 22L, FALSE, FALSE); .Internal(backsolve(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinbacksolve_testbacksolve2_3893cbdf564a0850304c651909a2e046");
    }

    @Test
    public void TestrGenBuiltinbacksolve_testbacksolve3_693d57e0a462d771e6a8554ddcc2183a() {
        assertEval("argv <- list(structure(c(-0.91092349872819, -1.26769315823132, 0, -1.11965595698793), .Dim = c(2L, 2L)), structure(c(-0.000210872744086474, 0.000210873298561107), .Dim = c(2L, 1L)), 2L, FALSE, FALSE); .Internal(backsolve(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinbacksolve_testbacksolve3_693d57e0a462d771e6a8554ddcc2183a");
    }

    @Test
    public void TestrGenBuiltinbcVersion_testbcVersion1_729bb985e45c4d519860190fb06be4f8() {
        assertEval(" .Internal(bcVersion())");
        check("TestrGenBuiltinbcVersion_testbcVersion1_729bb985e45c4d519860190fb06be4f8");
    }

    @Test
    public void TestrGenBuiltinbesselI_testbesselI1_c5436c69ddc343ef1a18f4a59c2ba9be() {
        assertEval("argv <- list(FALSE, FALSE, 1); .Internal(besselI(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinbesselI_testbesselI1_c5436c69ddc343ef1a18f4a59c2ba9be");
    }

    @Test
    public void TestrGenBuiltinbesselI_testbesselI2_56930bf6e5bb6a9cab80491083105b87() {
        assertEval("argv <- list(logical(0), logical(0), 1); .Internal(besselI(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinbesselI_testbesselI2_56930bf6e5bb6a9cab80491083105b87");
    }

    @Test
    public void TestrGenBuiltinbesselJ_testbesselJ1_8bea88bac4fe5a1faffa80aa611e7ac7() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(besselJ(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbesselJ_testbesselJ1_8bea88bac4fe5a1faffa80aa611e7ac7");
    }

    @Test
    public void TestrGenBuiltinbesselJ_testbesselJ2_f6dd8d79d9f0e261e4301bacbcb9ba3e() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(besselJ(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbesselJ_testbesselJ2_f6dd8d79d9f0e261e4301bacbcb9ba3e");
    }

    @Test
    public void TestrGenBuiltinbesselJ_testbesselJ3_09686dced4665337d6e44904ca794b90() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), 2.5); .Internal(besselJ(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbesselJ_testbesselJ3_09686dced4665337d6e44904ca794b90");
    }

    @Test
    public void TestrGenBuiltinbesselK_testbesselK1_4ffe35847579aa54f93d6f2f4ffcecca() {
        assertEval("argv <- list(FALSE, FALSE, 1); .Internal(besselK(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinbesselK_testbesselK1_4ffe35847579aa54f93d6f2f4ffcecca");
    }

    @Test
    public void TestrGenBuiltinbesselK_testbesselK2_f0b03c5877b9cab6dc1769f67437773e() {
        assertEval("argv <- list(logical(0), logical(0), 1); .Internal(besselK(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinbesselK_testbesselK2_f0b03c5877b9cab6dc1769f67437773e");
    }

    @Test
    public void TestrGenBuiltinbesselK_testbesselK3_f5a232be0559e3c6e7bf8beb20e9c397() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), 3, 1); .Internal(besselK(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinbesselK_testbesselK3_f5a232be0559e3c6e7bf8beb20e9c397");
    }

    @Test
    public void TestrGenBuiltinbesselK_testbesselK4_c8f80482f9b97234e6627d284f49d204() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), 3.5, 1); .Internal(besselK(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinbesselK_testbesselK4_c8f80482f9b97234e6627d284f49d204");
    }

    @Test
    public void TestrGenBuiltinbesselY_testbesselY1_2549a2d2eb9b4979431ff63fd45c822c() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), 20.5); .Internal(besselY(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbesselY_testbesselY1_2549a2d2eb9b4979431ff63fd45c822c");
    }

    @Test
    public void TestrGenBuiltinbesselY_testbesselY2_342040860b9d1b3bd1d5accfa4eb4519() {
        assertEval("argv <- list(2, c(3, 8.94, 14.88, 20.82, 26.76, 32.7, 38.64, 44.58, 50.52, 56.46, 62.4, 68.34, 74.28, 80.22, 86.16, 92.1, 98.04, 103.98, 109.92, 115.86, 121.8, 127.74, 133.68, 139.62, 145.56, 151.5, 157.44, 163.38, 169.32, 175.26, 181.2, 187.14, 193.08, 199.02, 204.96, 210.9, 216.84, 222.78, 228.72, 234.66, 240.6, 246.54, 252.48, 258.42, 264.36, 270.3, 276.24, 282.18, 288.12, 294.06, 300)); .Internal(besselY(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbesselY_testbesselY2_342040860b9d1b3bd1d5accfa4eb4519");
    }

    @Test
    public void TestrGenBuiltinbesselY_testbesselY3_921e6908d967f09d63ec52e6a52145f7() {
        assertEval("argv <- list(c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10), -0.2); .Internal(besselY(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbesselY_testbesselY3_921e6908d967f09d63ec52e6a52145f7");
    }

    @Test
    public void TestrGenBuiltinbesselY_testbesselY4_89fd2343995ff9367e3bad0f94f0c0cc() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(besselY(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbesselY_testbesselY4_89fd2343995ff9367e3bad0f94f0c0cc");
    }

    @Test
    public void TestrGenBuiltinbeta_testbeta1_198092df6f4981dfea50a44b5128f572() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(beta(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbeta_testbeta1_198092df6f4981dfea50a44b5128f572");
    }

    @Test
    public void TestrGenBuiltinbeta_testbeta2_b1b30c00bfaa20461c510f1709b9e6e6() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(beta(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbeta_testbeta2_b1b30c00bfaa20461c510f1709b9e6e6");
    }

    @Test
    public void TestrGenBuiltinbeta_testbeta4_25e19750b10a7810737253cbf8c38dda() {
        assertEval("argv <- structure(list(a = 0.01, b = 171), .Names = c('a', 'b'));do.call('beta', argv)");
        check("TestrGenBuiltinbeta_testbeta4_25e19750b10a7810737253cbf8c38dda");
    }

    @Test
    public void TestrGenBuiltinbeta_testbeta5_63f4fae1f746b3b5fa05418759f95209() {
        assertEval("argv <- structure(list(a = 1e-200, b = 1e-200), .Names = c('a',     'b'));do.call('beta', argv)");
        check("TestrGenBuiltinbeta_testbeta5_63f4fae1f746b3b5fa05418759f95209");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode1_e436ea1d3aaab4fefa12e74d662f7f1e() {
        assertEval("argv <- list(c(-1, -1, -1, -1, -1), c(-1.001, -1, -0.999), TRUE, FALSE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinbincode_testbincode1_e436ea1d3aaab4fefa12e74d662f7f1e");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode2_b6b741af966ede0491e114e53bae64a0() {
        assertEval("argv <- list(c(8.70599232813489e-06, 7.24187268717448e-10, 7.84878459581784e-14), c(0, 0.001, 0.01, 0.05, 0.1, 1), TRUE, TRUE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinbincode_testbincode2_b6b741af966ede0491e114e53bae64a0");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode3_abc0e4f9c61cf542638957a3c2d9769d() {
        assertEval("argv <- list(c(0.00316901674455053, 0.000313731190323184, 2.12051012154177e-05, 0.000158772845963692), c(0, 0.001, 0.01, 0.05, 0.1, 1), TRUE, TRUE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinbincode_testbincode3_abc0e4f9c61cf542638957a3c2d9769d");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode4_7763740072b90c291fec944f5de861a4() {
        assertEval("argv <- list(c(NA, 0.0654707112145736, 0.999999999999999), c(0, 0.001, 0.01, 0.05, 0.1, 1), TRUE, TRUE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinbincode_testbincode4_7763740072b90c291fec944f5de861a4");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode5_3c74b1204b51b8fcc56aa5910ae2c82b() {
        assertEval("argv <- list(structure(c(3.00863041155973, 0.411191886071604, -0.690490615408105, -4.08011169113016, -1.74096111020938, 0.149871643848704, -0.617403399223794, 1.77225991336381, 0.70873696276922, 0.831384833755618, 0.760421822835713, -1.43576852408133, -1.06684579764157, 0.112230570314199, 1.7784773190779, 0.601241755061942, 3.2084694607557, 1.30812378137844, 0.548795030131126, -4.19457515085108, -2.57754314942853, -2.82255910587143, -1.79648698551886, 8.02186933983834, -1.32562596449111, 1.07620193452922, 0.454145574974766, -1.70834615344098, -1.67960999025708, -0.580565722061994, 1.46027792034151, 0.274978829340024), class = 'table', .Dim = c(4L, 4L, 2L), .Dimnames = structure(list(Hair = c('Black', 'Brown', 'Red', 'Blond'), Eye = c('Brown', 'Blue', 'Hazel', 'Green'), Sex = c('Male', 'Female')), .Names = c('Hair', 'Eye', 'Sex'))), c(-Inf, -4, -2, 0, 2, 4, Inf), TRUE, FALSE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinbincode_testbincode5_3c74b1204b51b8fcc56aa5910ae2c82b");
    }

    @Test
    public void TestrGenBuiltinbincode_testbincode6_6f46fc965845d88d707b390d6d15afbb() {
        assertEval("argv <- list(c(4L, 8L, 7L, 4L, 8L, 7L, NA, 7L, 6L, 7L, 7L, 8L, 8L, 6L, 7L, 8L, 5L, 4L, 8L, 7L, 5L, 6L, 5L, 6L, 5L, 6L, 7L, 6L, 5L, 7L, 4L, 6L, 6L, 5L, 7L, 5L, 5L, 6L, 6L, 6L, 5L, 7L, 5L, 7L, 5L, 3L, 7L, 6L, 5L, 5L, 6L, 5L, 5L, 6L, 10L, 10L, 6L, 3L, 5L, 8L, 7L, 5L, 6L, 5L, 5L, 5L, 6L, 5L, 6L, 5L, 5L, 6L, 7L, 7L, 6L, 7L, 7L, 8L, 9L, 7L, 8L, 6L, 4L, 7L, 7L, 6L, NA, 8L, 5L, 7L, 6L, 5L, NA, 7L, 6L, 7L, 7L, 9L, 5L, 8L, 6L, 8L, 9L, 6L, 6L, 7L, 8L, 8L, 8L, 7L, 8L, 7L, 6L, 6L, 9L, 7L, 6L, 8L, 5L, 7L, 8L, 8L, 7L, 7L, 7L, 8L, 5L, 6L, 6L, 5L, 7L, 5L, 7L, 7L, 4L, 5L, 8L, 5L, 5L, 6L, 7L, 5L, 9L, 5L, 6L, 7L), c(2, 5.5, 10), TRUE, FALSE); .Internal(bincode(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinbincode_testbincode6_6f46fc965845d88d707b390d6d15afbb");
    }

    @Test
    public void TestrGenBuiltinbindtextdomain_testbindtextdomain1_bcf59789c1abf6ce64eef4f6f8a0b970() {
        assertEval("argv <- list('splines', '/home/roman/r-instrumented/library/translations'); .Internal(bindtextdomain(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbindtextdomain_testbindtextdomain1_bcf59789c1abf6ce64eef4f6f8a0b970");
    }

    @Test
    public void TestrGenBuiltinbindtextdomain_testbindtextdomain2_8961295a914ee0581df6a90cb6841dd6() {
        assertEval("argv <- list('utils', '/home/lzhao/hg/r-instrumented/library/translations'); .Internal(bindtextdomain(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbindtextdomain_testbindtextdomain2_8961295a914ee0581df6a90cb6841dd6");
    }

    @Test
    public void TestrGenBuiltinbitwiseAnd_testbitwiseAnd1_aa2f5a12e5456739afbe05df58e66002() {
        assertEval("argv <- list(structure(cclass = 'octmode'), structure(256L, class = 'octmode')); .Internal(bitwiseAnd(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbitwiseAnd_testbitwiseAnd1_aa2f5a12e5456739afbe05df58e66002");
    }

    @Test
    public void TestrGenBuiltinbitwiseAnd_testbitwiseAnd2_8337f9a47e6be7ee56fb9e4048479be1() {
        assertEval("argv <- list(structure(integer(0), class = 'hexmode'), structure(integer(0), class = 'hexmode')); .Internal(bitwiseAnd(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbitwiseAnd_testbitwiseAnd2_8337f9a47e6be7ee56fb9e4048479be1");
    }

    @Test
    public void TestrGenBuiltinbitwiseNot_testbitwiseNot1_6f4621a85f41aeed410087846823e620() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(bitwiseNot(argv[[1]]))");
        check("TestrGenBuiltinbitwiseNot_testbitwiseNot1_6f4621a85f41aeed410087846823e620");
    }

    @Test
    public void TestrGenBuiltinbitwiseOr_testbitwiseOr1_2fc068352a4607103b67148f6f3ad61c() {
        assertEval("argv <- list(15L, 7L); .Internal(bitwiseOr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbitwiseOr_testbitwiseOr1_2fc068352a4607103b67148f6f3ad61c");
    }

    @Test
    public void TestrGenBuiltinbitwiseShiftR_testbitwiseShiftR1_ca7b2aa43f08bec7efe9c8fed9d5d0b7() {
        assertEval("argv <- list(-1, 1:31); .Internal(bitwiseShiftR(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbitwiseShiftR_testbitwiseShiftR1_ca7b2aa43f08bec7efe9c8fed9d5d0b7");
    }

    @Test
    public void TestrGenBuiltinbitwiseXor_testbitwiseXor1_67d355fb00ab2f9ad9cb963a329fe194() {
        assertEval("argv <- list(-1L, 1L); .Internal(bitwiseXor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinbitwiseXor_testbitwiseXor1_67d355fb00ab2f9ad9cb963a329fe194");
    }

    @Test
    public void TestrGenBuiltinbody_testbody1_10aef9003d5613516e7b26cc2253360b() {
        assertEval("argv <- list(function (x, y) {    c(x, y)}); .Internal(body(argv[[1]]))");
        check("TestrGenBuiltinbody_testbody1_10aef9003d5613516e7b26cc2253360b");
    }

    @Test
    public void TestrGenBuiltinbody_testbody2_a717bfb76f7c264fe48c9545caa714cb() {
        assertEval("argv <- list(function (object) TRUE); .Internal(body(argv[[1]]))");
        check("TestrGenBuiltinbody_testbody2_a717bfb76f7c264fe48c9545caa714cb");
    }

    @Test
    public void TestrGenBuiltinbody_testbody3_0411bf3456f1132e57c60df35346ad29() {
        assertEval("argv <- list(function (from, strict = TRUE) from); .Internal(body(argv[[1]]))");
        check("TestrGenBuiltinbody_testbody3_0411bf3456f1132e57c60df35346ad29");
    }

    @Test
    public void TestrGenBuiltinbody_testbody4_b7e309a14448bf6e2de664cba5aa149e() {
        assertEval("argv <- list(.Primitive('/')); .Internal(body(argv[[1]]))");
        check("TestrGenBuiltinbody_testbody4_b7e309a14448bf6e2de664cba5aa149e");
    }

    @Test
    public void TestrGenBuiltinc_testc10_3698492e4eab2b3a3a2db687ff216bec() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'supply both 'x' and 'y' or a matrix-like 'x'', call = quote(cor(rnorm(10), NULL))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc10_3698492e4eab2b3a3a2db687ff216bec");
    }

    @Test
    public void TestrGenBuiltinc_testc13_7e670b990ae67b0f24254abc7119fa3c() {
        assertEval("argv <- list(structure(1208822400, class = c('POSIXct', 'POSIXt')), structure(1209168000, class = c('POSIXct', 'POSIXt')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc13_7e670b990ae67b0f24254abc7119fa3c");
    }

    @Test
    public void TestrGenBuiltinc_testc14_506a02475a8de3228c830a64becefd5c() {
        assertEval("argv <- list(`Grand mean` = structure(103.87323943662, class = 'mtable'), structure(list(N = structure(c(78.7365206866197, 98.5088731171753, 113.842206450509, 123.008873117175), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'), class = 'mtable'), `V:N` = structure(c(79.5323303457107, 86.1989970123773, 69.7732394366197, 98.0323303457106, 108.032330345711, 89.1989970123773, 114.198997012377, 116.698997012377, 110.365663679044, 124.365663679044, 126.365663679044, 118.032330345711), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')), class = 'mtable')), .Names = c('N', 'V:N')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc14_506a02475a8de3228c830a64becefd5c");
    }

    @Test
    public void TestrGenBuiltinc_testc15_d681f80055f55318ccbe86713f7dbd71() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rexp(2, numeric()))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc15_d681f80055f55318ccbe86713f7dbd71");
    }

    @Test
    public void TestrGenBuiltinc_testc18_19851a01de6938ae0a9873f9fa8a09ee() {
        assertEval("argv <- list(structure(list(V1 = c(1L, 1L, 2L, 3L), V2 = structure(c(1L, 1L, 2L, 3L), .Label = c('A', 'D', 'E'), class = 'factor'), V3 = c(6, 6, 9, 10)), .Names = c('V1', 'V2', 'V3'), row.names = c(NA, 4L), class = 'data.frame'), sep = '\\r');c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc18_19851a01de6938ae0a9873f9fa8a09ee");
    }

    @Test
    public void TestrGenBuiltinc_testc20_9d3caf528f6a98a69bf26725a8ebc298() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'non-numeric argument to mathematical function', call = quote(log('a'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc20_9d3caf528f6a98a69bf26725a8ebc298");
    }

    @Test
    public void TestrGenBuiltinc_testc21_45e9d2fc217e3ac6ce4f45742d3e75e0() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = ''x' is empty', call = quote(cor(Z[, FALSE], use = 'pairwise.complete.obs', method = 'kendall'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc21_45e9d2fc217e3ac6ce4f45742d3e75e0");
    }

    @Test
    public void TestrGenBuiltinc_testc22_55e3dd5f98ae0d4f5b719e08fbb043f4() {
        assertEval("argv <- list(structure(list(N = structure(c(17, 18, 18, 18), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'))), .Names = 'N'), structure(list(`V:N` = structure(c(6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')))), .Names = 'V:N'));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc22_55e3dd5f98ae0d4f5b719e08fbb043f4");
    }

    @Test
    public void TestrGenBuiltinc_testc24_60d55ae1b0437e9ee8d5ce03bfda13c5() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'undefined columns selected', call = quote(`[.data.frame`(dd, , 'C'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc24_60d55ae1b0437e9ee8d5ce03bfda13c5");
    }

    @Test
    public void TestrGenBuiltinc_testc25_b0de35f7a0b133ecefc289a9555804c4() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'line 1 did not have 4 elements', call = quote(scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, flush, fill, strip.white, quiet, blank.lines.skip, multi.line, comment.char, allowEscapes, encoding))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc25_b0de35f7a0b133ecefc289a9555804c4");
    }

    @Test
    public void TestrGenBuiltinc_testc28_273f26b579648467b0e4eb9c9ecab497() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc28_273f26b579648467b0e4eb9c9ecab497");
    }

    @Test
    public void TestrGenBuiltinc_testc3_5439a00c192768df623645c6942391d2() {
        assertEval("argv <- list(0.1, 1e+60);c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc3_5439a00c192768df623645c6942391d2");
    }

    @Test
    public void TestrGenBuiltinc_testc30_f7132b514812013e2045b7d520186ae2() {
        assertEval("argv <- list(structure(c(2.8709968773466e-06, -0.000158359165766342, 0.00727428858396739, -0.000819679205658397, -0.000777694946526408, -0.00356554678621684, 0.000131355545630207, 0.0114265093267527, -0.000158359165766342, 5.43254707707774e-06, -0.000158630865337517, 9.73709585506688e-05, 0.000111529300368063, 5.13485783500411e-05, -6.33871099330885e-05, -0.000383481109923256, 0.00727428858396739, -0.000158630865337517, -1.56486391901245e-05, -0.00236056684784514, -0.00652700637569598, 0.00050199030070891, 0.00218994696407579, 0.0203300594009954, -0.000819679205658397, 9.73709585506688e-05, -0.00236056684784514, 7.93209373295412e-07, 0.00187235412049774, 0.00143329638746881, -3.6749249077872e-05, -0.0118829190788863, -0.000777694946526408, 0.000111529300368063, -0.00652700637569598, 0.00187235412049774, 4.25289264915918e-06, 0.00235407805712873, -0.000833270910443051, -0.00229252218256459, -0.00356554678621684, 5.13485783500411e-05, 0.00050199030070891, 0.00143329638746881, 0.00235407805712873, -3.00860514170775e-05, -0.00105162168837414, -0.00640852176345075, 0.000131355545630207, -6.33871099330885e-05, 0.00218994696407579, -3.6749249077872e-05, -0.000833270910443051, -0.00105162168837414, 2.63610545947479e-06, 0.00637158302982355, 0.0114265093267527, -0.000383481109923256, 0.0203300594009954, -0.0118829190788863, -0.00229252218256459, -0.00640852176345075, 0.00637158302982355, -9.55643771360926e-05), .Dim = c(8L, 8L), .Dimnames = list(c('height', 'arm.span', 'forearm', 'lower.leg', 'weight', 'bitro.diameter', 'chest.girth', 'chest.width'), c('height', 'arm.span', 'forearm', 'lower.leg', 'weight', 'bitro.diameter', 'chest.girth', 'chest.width'))));c(argv[[1]]);");
        check("TestrGenBuiltinc_testc30_f7132b514812013e2045b7d520186ae2");
    }

    @Test
    public void TestrGenBuiltinc_testc31_1e2061d029a9a9798a1c732e6f59bdfe() {
        assertEval("argv <- list(c(-Inf, 2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, Inf), c(NaN, NA));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc31_1e2061d029a9a9798a1c732e6f59bdfe");
    }

    @Test
    public void TestrGenBuiltinc_testc32_19414b3d9b13941cbdfc7060dde57232() {
        assertEval("argv <- list(list(structure(list(Ozone = c(NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L, NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), Solar.R = c(286L, 287L, 242L, 186L, 220L, 264L, 127L, 273L, 291L, 323L, 259L, 250L, 148L, 332L, 322L, 191L, 284L, 37L, 120L, 137L, 150L, 59L, 91L, 250L, 135L, 127L, 47L, 98L, 31L, 138L), Wind = c(8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8), Temp = c(78L, 74L, 67L, 84L, 85L, 79L, 82L, 87L, 90L, 87L, 93L, 92L, 82L, 80L, 79L, 77L, 72L, 65L, 73L, 76L, 77L, 76L, 76L, 76L, 75L, 78L, 73L, 80L, 77L, 83L), Month = c(6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), Day = 1:30), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day'), row.names = 32:61, class = 'data.frame')), structure(list(Oz.Z = structure(c(NA, NA, NA, NA, NA, NA, -0.0244094233987339, NA, 2.28228108778162, 0.52480260307278, NA, NA, -0.353936639281642, NA, NA, -0.463779044575945, 0.414960197778477, -0.518700247223096, -0.958069868400307, -0.903148665753156, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = c(30L, 1L), '`scaled:center`' = 29.4444444444444, '`scaled:scale`' = 18.2079042664931)), .Names = 'Oz.Z'));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc32_19414b3d9b13941cbdfc7060dde57232");
    }

    @Test
    public void TestrGenBuiltinc_testc33_a6db28e5d98589dc140cdbda8dcd24d2() {
        assertEval("argv <- list(list('*', ' ', 'skipping installation test', '\\n'), sep = '');c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc33_a6db28e5d98589dc140cdbda8dcd24d2");
    }

    @Test
    public void TestrGenBuiltinc_testc39_c59c5db7a032e1ed28c2c178902823e9() {
        assertEval("argv <- list(structure(list(c(1L, 2L, 4L), 1:3, c(2L, 1L)), class = c('package_version', 'numeric_version')));c(argv[[1]]);");
        check("TestrGenBuiltinc_testc39_c59c5db7a032e1ed28c2c178902823e9");
    }

    @Test
    public void TestrGenBuiltinc_testc41_c4b3650a24121cf377e32a42c7b605bf() {
        assertEval("argv <- list(structure(list(1:3), class = c('package_version', 'numeric_version')), structure(list(c(2L, 1L)), class = c('package_version', 'numeric_version')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc41_c4b3650a24121cf377e32a42c7b605bf");
    }

    @Test
    public void TestrGenBuiltinc_testc43_d815967bd21a32cecae15d8138588d5e() {
        assertEval("argv <- list(list(structure(list(u = c(5, 10, 15, 20, 30, 40, 60, 80, 100), lot1 = c(118, 58, 42, 35, 27, 25, 21, 19, 18), lot2 = c(69, 35, 26, 21, 18, 16, 13, 12, 12)), .Names = c('u', 'lot1', 'lot2'), row.names = c(NA, -9L), class = 'data.frame')), structure(list(max.level = 0, give.attr = FALSE, digits = 3), .Names = c('max.level', 'give.attr', 'digits')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc43_d815967bd21a32cecae15d8138588d5e");
    }

    @Test
    public void TestrGenBuiltinc_testc44_241c155db6e02bde18e0d42fda6000db() {
        assertEval("argv <- list(list(structure(list(structure('vpl1', class = c('vpListing', 'gridVectorListing', 'gridListing')), structure('1', class = c('vpUpListing', 'gridVectorListing', 'gridListing'))), class = c('gridListListing', 'gridListing'))), list(structure('vpl2', class = c('vpListing', 'gridVectorListing', 'gridListing'))));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc44_241c155db6e02bde18e0d42fda6000db");
    }

    @Test
    public void TestrGenBuiltinc_testc49_f69e518ac26a9bd750cefa243054199a() {
        assertEval("argv <- list(cstructure(c(3.3032627879465, 3.28768675817403, 3.28198500972868, 3.26064954685429, 3.28230636466286, 3.29427556805693, 3.28140319515598, 3.31501132729969, 3.29996451963546, 3.3405648068776, 3.3615463372345, 3.37238152179651, 3.32652089130696, 3.31449399159178, 3.31051950313397, 3.29704421073007, 3.31063284281209, 3.31814807478072, 3.3100622663054, 3.33117177869743, 3.32172069914554, 3.34722215914612, 3.36040087649739, 3.36720656884446), .Tsp = c(1983, 1984.91666666667, 12), class = 'ts'), logical(0));c(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinc_testc49_f69e518ac26a9bd750cefa243054199a");
    }

    @Test
    public void TestrGenBuiltinc_testc51_fb4a174c4ea6283b35ecc00d37667108() {
        assertEval("argv <- list(list('1: In matrix(1:7, 3, 4) :\\n  data length [7] is not a sub-multiple or multiple of the number of rows [3]'), list(), fill = TRUE);c(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinc_testc51_fb4a174c4ea6283b35ecc00d37667108");
    }

    @Test
    public void TestrGenBuiltinc_testc56_54a85870042357920fc143339f08944b() {
        assertEval("argv <- list(369.430769230769, 4.99999999999983);c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc56_54a85870042357920fc143339f08944b");
    }

    @Test
    public void TestrGenBuiltinc_testc57_d343b21f361fd447fcf56deba09d9d4d() {
        assertEval("argv <- list(structure(list(structure(list(title = 'boot: Bootstrap R (S-PLUS) Functions', author = structure(list(structure(list(given = 'Angelo', family = 'Canty', role = 'aut', email = NULL, comment = 'S original'), .Names = c('given', 'family', 'role', 'email', 'comment')), structure(list(given = c('Brian', 'D.'), family = 'Ripley', role = c('aut', 'trl', 'cre'), email = 'ripley@stats.ox.ac.uk', comment = 'R port, author of parallel support'), .Names = c('given', 'family', 'role', 'email', 'comment'))), class = 'person'),     year = '2012', note = 'R package version 1.3-4', url = 'http://CRAN.R-project.org/package=boot'), .Names = c('title', 'author', 'year', 'note', 'url'), bibtype = 'Manual', key = 'boot-package')), class = 'bibentry'), structure(list(structure(list(title = 'Bootstrap Methods and Their Applications', author = structure(list(structure(list(given = c('Anthony', 'C.'), family = 'Davison', role = 'aut', email = NULL, comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment')), structure(list(    given = c('David', 'V.'), family = 'Hinkley', role = 'aut', email = NULL, comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment'))), class = 'person'), year = '1997', publisher = 'Cambridge University Press', address = 'Cambridge', isbn = '0-521-57391-2', url = 'http://statwww.epfl.ch/davison/BMA/'), .Names = c('title', 'author', 'year', 'publisher', 'address', 'isbn', 'url'), bibtype = 'Book', key = 'boot-book')), class = 'bibentry'));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc57_d343b21f361fd447fcf56deba09d9d4d");
    }

    @Test
    public void TestrGenBuiltinc_testc61_2dc91c47b53879aa7acf309eb1a19905() {
        assertEval("argv <- list(structure(list(`ANY#ANY` = .Primitive('==')), .Names = 'ANY#ANY'), list());c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc61_2dc91c47b53879aa7acf309eb1a19905");
    }

    @Test
    public void TestrGenBuiltinc_testc64_33cd5cddf08f0b34a933c44cf32ac58a() {
        assertEval("argv <- list(structure(1386393974.25184, class = c('POSIXct', 'POSIXt')), structure(1386393974.25184, class = c('POSIXct', 'POSIXt')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc64_33cd5cddf08f0b34a933c44cf32ac58a");
    }

    @Test
    public void TestrGenBuiltinc_testc67_6490c980148fcca0cf688502481f5377() {
        assertEval("argv <- list(structure(c(0.06, 0.32, 0.63), .Names = c('0%', '25%', '50%')), 909.591818181818, structure(c(0.905, 10000), .Names = c('75%', '100%')));c(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinc_testc67_6490c980148fcca0cf688502481f5377");
    }

    @Test
    public void TestrGenBuiltinc_testc70_bf9e648e6ae102f91db275af3e6de5a1() {
        assertEval("argv <- list(structure(list(Topic = character(0), File = character(0)), .Names = c('Topic', 'File'), class = 'data.frame', row.names = integer(0)), sep = '\\r');c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc70_bf9e648e6ae102f91db275af3e6de5a1");
    }

    @Test
    public void TestrGenBuiltinc_testc71_1da295315d7894b55682648e0b474e3e() {
        assertEval("argv <- list(structure(list(Subject = structure(c(1L, 3L, 6L, 2L, 4L, 5L), .Label = c('1', '4', '2', '5', '6', '3'), class = c('ordered', 'factor')), conc.0.25 = c(1.5, 2.03, 2.72, 1.85, 2.05, 2.31), conc.0.5 = c(0.94, 1.63, 1.49, 1.39, 1.04, 1.44), conc.0.75 = c(0.78, 0.71, 1.16, 1.02, 0.81, 1.03), conc.1 = c(0.48, 0.7, 0.8, 0.89, 0.39, 0.84), conc.1.25 = c(0.37, 0.64, 0.8, 0.59, 0.3, 0.64), conc.2 = c(0.19, 0.36, 0.39, 0.4, 0.23, 0.42)), row.names = c(1L, 12L, 23L, 34L, 45L, 56L), .Names = c('Subject', 'conc.0.25', 'conc.0.5', 'conc.0.75', 'conc.1', 'conc.1.25', 'conc.2')), list(NULL));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc71_1da295315d7894b55682648e0b474e3e");
    }

    @Test
    public void TestrGenBuiltinc_testc72_2a6782ea4aeb0791c02a3fb8ec21aac6() {
        assertEval("argv <- list(structure(list(x.limits = c(-2.46408176011189, 2.92512533057276), y.limits = structure(c(1386479490.57927, 1387608090.57927), class = c('POSIXct', 'POSIXt')), x.used.at = NULL, y.used.at = NULL, x.num.limit = NULL, y.num.limit = NULL, aspect.ratio = 1, prepanel.default = 'prepanel.default.xyplot', prepanel = NULL), .Names = c('x.limits', 'y.limits', 'x.used.at', 'y.used.at', 'x.num.limit', 'y.num.limit', 'aspect.ratio', 'prepanel.default', 'prepanel')), structure(list(index.cond = list(1:3),     perm.cond = 1L), .Names = c('index.cond', 'perm.cond')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc72_2a6782ea4aeb0791c02a3fb8ec21aac6");
    }

    @Test
    public void TestrGenBuiltinc_testc73_7c9d27f7d87d43feb9c87a478f41573f() {
        assertEval("argv <- list(structure(list(coefficients = structure(c(-0.0529307911108286, -0.200175675120066), .Names = c('(Intercept)', 'xTRUE')), residuals = structure(c(0.196977726701894, -0.102864715594501, -1.21764591766838, -0.425219263997792, 0.671048026430597, 1.41161034263987, 0.150318738887899, 0.440602402670198, 0.19930142564799, -1.32412876571778), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), effects = structure(c(0.483887391035467, -0.316505532770654, -1.29088865053614, -0.430233412486575, 0.597805293562832, 1.40659619415109, 0.0770760060201344, 0.435588254181415, 0.126058692780225, -1.32914291420656), .Names = c('(Intercept)', 'xTRUE', '', '', '', '', '', '', '', '')), rank = 2L), .Names = c('coefficients', 'residuals', 'effects', 'rank')), structure(list(fitted.values = structure(c(-0.253106466230895, -0.0529307911108286, -0.253106466230895, -0.0529307911108285, -0.253106466230895, -0.0529307911108285, -0.253106466230895, -0.0529307911108285, -0.253106466230895, -0.0529307911108285), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), assign = 0:1, qr = structure(list(qr = structure(c(-3.16227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, -1.58113883008419, 1.58113883008419, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634, -0.240253073352042, 0.392202458681634), .Dim = c(10L, 2L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), c('(Intercept)', 'xTRUE')), assign = 0:1, contrasts = structure(list(x = 'contr.treatment'), .Names = 'x')), qraux = c(1.31622776601684, 1.39220245868163), pivot = 1:2, tol = 1e-07, rank = 2L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 8L), .Names = c('fitted.values', 'assign', 'qr', 'df.residual')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc73_7c9d27f7d87d43feb9c87a478f41573f");
    }

    @Test
    public void TestrGenBuiltinc_testc74_daacdfe4d9d32355603ed5db03b02fe2() {
        assertEval("argv <- list(structure(list(object = c('time', 'status')), .Names = 'object'), structure(list(max.level = NA, vec.len = 4, digits.d = 3, nchar.max = 128, give.attr = TRUE, give.head = TRUE, width = 80L, envir = NULL, strict.width = 'no', formatNum = function (x, ...) format(x, trim = TRUE, drop0trailing = TRUE, ...), list.len = 99), .Names = c('max.level', 'vec.len', 'digits.d', 'nchar.max', 'give.attr', 'give.head', 'width', 'envir', 'strict.width', 'formatNum', 'list.len')), structure(list(give.length = TRUE, nest.lev = 2, indent.str = '  .. ..'), .Names = c('give.length', 'nest.lev', 'indent.str')));c(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinc_testc74_daacdfe4d9d32355603ed5db03b02fe2");
    }

    @Test
    public void TestrGenBuiltinc_testc9_877d21ddde2b9e653bd8ff400df9eba1() {
        assertEval("argv <- list(NULL, structure(list(class = 'try-error', condition = structure(list(message = 'more columns than column names', call = quote(read.table('foo6', header = TRUE))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), .Names = c('class', 'condition')));c(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinc_testc9_877d21ddde2b9e653bd8ff400df9eba1");
    }

    @Test
    public void TestrGenBuiltincache_testcache1_45dfd711de8f6014b6f7c2c8b1f1385a() {
        assertEval("argv <- list('ddenseMatrix', c('ddenseMatrix', 'dMatrix', 'denseMatrix', 'Matrix', 'mMatrix'));.cache_class(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltincache_testcache1_45dfd711de8f6014b6f7c2c8b1f1385a");
    }

    @Test
    public void TestrGenBuiltincache_testcache2_4f69f78c4dae96b1c05ec2c77be1a3da() {
        assertEval("argv <- list('numeric', c('numeric', 'vector', 'atomicVector'));.cache_class(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltincache_testcache2_4f69f78c4dae96b1c05ec2c77be1a3da");
    }

    @Test
    public void TestrGenBuiltincat_testcat2_d47e73fbfd0eaf8d20a64590d67e2d4f() {
        assertEval("argv <- list(list('Loading required package: splines\\n'), structure(2L, class = c('terminal', 'connection')), '', FALSE, NULL, FALSE); .Internal(cat(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltincat_testcat2_d47e73fbfd0eaf8d20a64590d67e2d4f");
    }

    @Test
    public void TestrGenBuiltincbind_testcbind2_13b893ae2b3e6a52c37c9032ca637942() {
        assertEval("argv <- list(structure(c(-0.0296690260968828, 0.200337918547016,     -0.38901358729166, 0.076054310915896, -0.5953576286578, 1.55058467328697,     -0.189955959788191, -1.31965097077132, 0.596281133731208,     1.22982396127581), .Dim = c(10L, 1L), .Dimnames = list(NULL,     'runif.10...pi.2..pi.2.'), circularp = structure(list(type = 'angles',     units = 'radians', template = 'none', modulo = 'asis', zero = 0,     rotation = 'counter'), .Names = c('type', 'units', 'template',     'modulo', 'zero', 'rotation')), class = c('circular', 'matrix')),     structure(c(-0.0296690260968828, 0.200337918547016, -0.38901358729166,         0.076054310915896, -0.5953576286578, 1.55058467328697,         -0.189955959788191, -1.31965097077132, 0.596281133731208,         1.22982396127581), .Dim = c(10L, 1L), .Dimnames = list(NULL,         'runif.10...pi.2..pi.2.'), circularp = structure(list(type = 'angles',         units = 'radians', template = 'none', modulo = 'asis',         zero = 0, rotation = 'counter'), .Names = c('type', 'units',         'template', 'modulo', 'zero', 'rotation')), class = c('circular',         'matrix')));do.call('cbind', argv)");
        check("TestrGenBuiltincbind_testcbind2_13b893ae2b3e6a52c37c9032ca637942");
    }

    @Test
    public void TestrGenBuiltincbind_testcbind4_8dbbb8aa377716fcc0f0266d5c335cb1() {
        assertEval("argv <- list(structure(list(Sepal.Length = c(5.1, 4.9, 4.7, 4.6,     5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4,     5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7,     4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4,     5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7,     6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2,     5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5,     5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5,     5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6,     4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7,     7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2,     7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9,     5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9), Sepal.Width = c(4,     3, 3, 3, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4,     3, 4, 4, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 4, 3, 3, 4, 4, 3,     3, 4, 2, 3, 4, 4, 3, 4, 3, 4, 3, 3, 3, 3, 2, 3, 3, 3, 2,     3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 3,     3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 3, 2, 3, 3,     3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 4, 3, 3, 3, 2, 3,     3, 3, 4, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3,     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3), Petal.Length = c(1.4,     1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4,     1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9,     1.6, 1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3,     1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5,     1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5,     4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7,     4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5,     4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3,     4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1,     5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9,     5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1,     5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9, 5.7, 5.2, 5, 5.2,     5.4, 5.1), Petal.Width = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4,     0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3,     0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2,     0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3,     0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3,     1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5,     1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5,     1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4,     1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8,     2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4, 2.3, 1.8,     2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6,     1.9, 2, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3,     1.9, 2.3, 2.5, 2.3, 1.9, 2, 2.3, 1.8), Species = structure(c(1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L),     .Label = c('setosa', 'versicolor', 'virginica'), class = 'factor')),     .Names = c('Sepal.Length', 'Sepal.Width', 'Petal.Length',         'Petal.Width', 'Species'), row.names = c(NA, -150L),     class = 'data.frame'), structure(c(3, 2, 2, 2, 3, 3, 2, 2,     2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 2, 2,     3, 2, 2, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 1, 2, 3, 3, 2,     3, 2, 3, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2,     2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2,     2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2,     2, 2, 2, 1, 2, 1, 3, 2, 2, 2, 1, 2, 2, 2, 3, 2, 1, 2, 2,     2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2,     2, 2, 2, 2, 2, 1, 2, 2, 2), .Names = c('4', '3', '3', '3',     '4', '4', '3', '3', '3', '3', '4', '3', '3', '3', '4', '4',     '4', '4', '4', '4', '3', '4', '4', '3', '3', '3', '3', '4',     '3', '3', '3', '3', '4', '4', '3', '3', '4', '4', '3', '3',     '4', '2', '3', '4', '4', '3', '4', '3', '4', '3', '3', '3',     '3', '2', '3', '3', '3', '2', '3', '3', '2', '3', '2', '3',     '3', '3', '3', '3', '2', '2', '3', '3', '2', '3', '3', '3',     '3', '3', '3', '3', '2', '2', '3', '3', '3', '3', '3', '2',     '3', '2', '3', '3', '3', '2', '3', '3', '3', '3', '2', '3',     '3', '3', '3', '3', '3', '3', '2', '3', '2', '4', '3', '3',     '3', '2', '3', '3', '3', '4', '3', '2', '3', '3', '3', '3',     '3', '3', '3', '3', '3', '3', '3', '4', '3', '3', '3', '3',     '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '2', '3',     '3', '3')));do.call('cbind', argv)");
        check("TestrGenBuiltincbind_testcbind4_8dbbb8aa377716fcc0f0266d5c335cb1");
    }

    @Test
    public void TestrGenBuiltinceiling_testceiling7_2fb13b9335b8e0692e5224868afa548b() {
        assertEval("argv <- list(1e+05);ceiling(argv[[1]]);");
        check("TestrGenBuiltinceiling_testceiling7_2fb13b9335b8e0692e5224868afa548b");
    }

    @Test
    public void TestrGenBuiltincharToRaw_testcharToRaw1_f6ac05ee10c8b34d9c24558aed17abd0() {
        assertEval("argv <- list(''); .Internal(charToRaw(argv[[1]]))");
        check("TestrGenBuiltincharToRaw_testcharToRaw1_f6ac05ee10c8b34d9c24558aed17abd0");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr1_9279f1e8c0c7e17436b2b5348cb0e604() {
        assertEval("argv <- list('.', '.', c('0.02', '0.06', '0.11', '0.22', '0.56', '1.1')); .Internal(chartr(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinchartr_testchartr1_9279f1e8c0c7e17436b2b5348cb0e604");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr2_6b8cc756870f6234be361a5a2c033e15() {
        assertEval("argv <- list('iXs', 'why', 'MiXeD cAsE 123'); .Internal(chartr(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinchartr_testchartr2_6b8cc756870f6234be361a5a2c033e15");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr3_d9509ba59c460fd40fd43ef3dec4924f() {
        assertEval("argv <- list('a-cX', 'D-Fw', 'MiXeD cAsE 123'); .Internal(chartr(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinchartr_testchartr3_d9509ba59c460fd40fd43ef3dec4924f");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr4_f13328602f093d30f684732048aa532f() {
        assertEval("argv <- list('.', '.', character(0)); .Internal(chartr(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinchartr_testchartr4_f13328602f093d30f684732048aa532f");
    }

    @Test
    public void TestrGenBuiltinchartr_testchartr6_2f6b10c422bc7dedf0c97e06b6142980() {
        assertEval("argv <- structure(list(old = 'NA', new = 'na', x = c('NA', NA,     'BANANA')), .Names = c('old', 'new', 'x'));do.call('chartr', argv)");
        check("TestrGenBuiltinchartr_testchartr6_2f6b10c422bc7dedf0c97e06b6142980");
    }

    @Test
    public void TestrGenBuiltinchol_testchol1_e12f4a9ee34c78d44e31100959f5751a() {
        assertEval("argv <- structure(list(x = structure(c(1.66666666666667, -1.33333333333333,     1, -0.666666666666667, 0.333333333333333, -1.33333333333333,     2.66666666666667, -2, 1.33333333333333, -0.666666666666667,     1, -2, 3, -2, 1, -0.666666666666667, 1.33333333333333, -2,     2.66666666666667, -1.33333333333333, 0.333333333333333, -0.666666666666667,     1, -1.33333333333333, 1.66666666666667), .Dim = c(5L, 5L))),     .Names = 'x');do.call('chol', argv)");
        check("TestrGenBuiltinchol_testchol1_e12f4a9ee34c78d44e31100959f5751a");
    }

    @Test
    public void TestrGenBuiltinchoose_testchoose1_44e127902a215294ccfeae0cb5b8aa75() {
        assertEval("argv <- list(-1, 3); .Internal(choose(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinchoose_testchoose1_44e127902a215294ccfeae0cb5b8aa75");
    }

    @Test
    public void TestrGenBuiltinchoose_testchoose2_671ebdf57cc92ec28ded2847d0ecde16() {
        assertEval("argv <- list(9L, c(-14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)); .Internal(choose(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinchoose_testchoose2_671ebdf57cc92ec28ded2847d0ecde16");
    }

    @Test
    public void TestrGenBuiltinchoose_testchoose3_079022733e336ef3136461b44fec0f89() {
        assertEval("argv <- list(logical(0), logical(0)); .Internal(choose(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinchoose_testchoose3_079022733e336ef3136461b44fec0f89");
    }

    @Test
    public void TestrGenBuiltinchoose_testchoose4_59bd8875f1d732ab6e0a9ffe3ec36a41() {
        assertEval("argv <- list(0.5, 0:10); .Internal(choose(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinchoose_testchoose4_59bd8875f1d732ab6e0a9ffe3ec36a41");
    }

    @Test
    public void TestrGenBuiltinclass_testclass1_d5e1922da90ab1236e08268a69a020ce() {
        assertEval("argv <- list(structure(function (x) standardGeneric('exp', .Primitive('exp')), generic = structure('exp', package = 'base'), package = 'base', group = list('Math'), valueClass = character(0), signature = 'x', default = .Primitive('exp'), skeleton = quote(.Primitive('exp')(x)), class = structure('standardGeneric', package = 'methods')));class(argv[[1]]);");
        check("TestrGenBuiltinclass_testclass1_d5e1922da90ab1236e08268a69a020ce");
    }

    @Test
    public void TestrGenBuiltinclass_testclass12_c23f9e29277c3c4eb8c491f9c088cf07() {
        assertEval("argv <- list(structure(function (qr, y) .Call(sparseQR_resid_fitted, qr, y, TRUE), target = structure(c('sparseQR', 'ddenseMatrix'), .Names = c('qr', 'y'), package = c('Matrix', 'Matrix'), class = structure('signature', package = 'methods')), defined = structure(c('sparseQR', 'ddenseMatrix'), .Names = c('qr', 'y'), package = c('Matrix', 'Matrix'), class = structure('signature', package = 'methods')), generic = structure('qr.resid', package = 'base'), class = structure('MethodDefinition', package = 'methods')));class(argv[[1]]);");
        check("TestrGenBuiltinclass_testclass12_c23f9e29277c3c4eb8c491f9c088cf07");
    }

    @Test
    public void TestrGenBuiltinclass_testclass23_0821b526eb4132338803c209df9fe70a() {
        assertEval("argv <- list(structure(function (a, b, ...) standardGeneric('solve'), generic = structure('solve', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = c('a', 'b'), default = structure(function (a, b, ...) UseMethod('solve'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'a', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'a', package = 'methods'), generic = structure('solve', package = 'base'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (a, b, ...) UseMethod('solve'))(a, b, ...)), class = structure('standardGeneric', package = 'methods')));class(argv[[1]]);");
        check("TestrGenBuiltinclass_testclass23_0821b526eb4132338803c209df9fe70a");
    }

    @Test
    public void TestrGenBuiltinclass_testclass25_e9d559b4affb116e734cf903b2e517e1() {
        assertEval("argv <- list(structure(function (x, type, ...) .Call(dgeMatrix_norm, as(x, 'dgeMatrix'), type), target = structure(c('matrix', 'character'), .Names = c('x', 'type'), package = c('methods', 'methods'), class = structure('signature', package = 'methods')), defined = structure(c('matrix', 'character'), .Names = c('x', 'type'), package = c('methods', 'methods'), class = structure('signature', package = 'methods')), generic = structure('norm', package = 'base'), class = structure('MethodDefinition', package = 'methods')));class(argv[[1]]);");
        check("TestrGenBuiltinclass_testclass25_e9d559b4affb116e734cf903b2e517e1");
    }

    @Test
    public void TestrGenBuiltinclass_testclass26_f1880f9b154b8ebdd15f843d5e7aca15() {
        assertEval("argv <- list(structure(function (x, mode = 'any') .Internal(as.vector(x, mode)), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')));class(argv[[1]]);");
        check("TestrGenBuiltinclass_testclass26_f1880f9b154b8ebdd15f843d5e7aca15");
    }

    @Test
    public void TestrGenBuiltinclass_testclass27_0a25331c90c4cf31686b5d1179bcbd91() {
        assertEval("argv <- list(structure(function (x, uplo) {    if (uplo == x@uplo) x else t(x)}, target = structure(c('nsCMatrix', 'character'), .Names = c('x', 'uplo'), package = c('Matrix', 'methods'), class = structure('signature', package = 'methods')), defined = structure(c('nsCMatrix', 'character'), .Names = c('x', 'uplo'), package = c('Matrix', 'methods'), class = structure('signature', package = 'methods')), generic = structure('forceSymmetric', package = 'Matrix'), class = structure('MethodDefinition', package = 'methods')));class(argv[[1]]);");
        check("TestrGenBuiltinclass_testclass27_0a25331c90c4cf31686b5d1179bcbd91");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign1_de061a60340f3f539d6ca430bc12a4ac() {
        assertEval("argv <- list(structure(function (x, mode = 'any') .Internal(as.vector(x, mode)), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign1_de061a60340f3f539d6ca430bc12a4ac");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign10_198eeb8cea17bbf0690d6e8f4ea6ba5f() {
        assertEval("argv <- list(structure(c('o', 'p', 'v', 'i', 'r', 'w', 'b', 'm', 'f', 's'), date = structure(1224086400, class = c('POSIXct', 'POSIXt'), tzone = ''), class = 'stamped'), value = 'stamped');`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign10_198eeb8cea17bbf0690d6e8f4ea6ba5f");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign11_94e6631dce59f50b35fa383e95ded7f5() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')), structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign11_94e6631dce59f50b35fa383e95ded7f5");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign13_0b8b3c700a1c7295f81b886f1731ccae() {
        assertEval("argv <- list(structure(function (qr, y, k = qr$rank) standardGeneric('qr.fitted'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'qr', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'qr', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign13_0b8b3c700a1c7295f81b886f1731ccae");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign14_d32f4beaf1ef3258805491fdc2b58d1d() {
        assertEval("argv <- list(structure(function (x = 1, nrow, ncol) standardGeneric('diag'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign14_d32f4beaf1ef3258805491fdc2b58d1d");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign16_302fecacff77ed8b1433b4987b90b1bd() {
        assertEval("argv <- list(structure(function (x, y, ...) standardGeneric('plot'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign16_302fecacff77ed8b1433b4987b90b1bd");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign17_2b608d746bee2050e015f9471e882173() {
        assertEval("argv <- list(structure(function (x, logarithm = TRUE, ...) UseMethod('determinant'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign17_2b608d746bee2050e015f9471e882173");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign18_c9916c88ca1c01ca81cf81fac2ea6a5f() {
        assertEval("argv <- list(structure(function (x, y = NULL) .Internal(crossprod(x, y)), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign18_c9916c88ca1c01ca81cf81fac2ea6a5f");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign19_546f785b6e71e56b9e145ee91803d75b() {
        assertEval("argv <- list(structure(function (obj, force = FALSE) standardGeneric('unname'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'obj', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'obj', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods')), value = structure('MethodDefinition', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign19_546f785b6e71e56b9e145ee91803d75b");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign2_edd86ab610b77aec088ad3ae7fca2183() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign2_edd86ab610b77aec088ad3ae7fca2183");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign5_28413f4a48f41766956da855b9e8c3b0() {
        assertEval("argv <- list(structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), value = structure('signature', package = 'methods'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign5_28413f4a48f41766956da855b9e8c3b0");
    }

    @Test
    public void TestrGenBuiltinclassassign_testclassassign9_d2c3b1b6171abd4b6d56ad38962c3c96() {
        assertEval("argv <- list(structure(c(1, 0, 0, 0, 1, 0, 0, 0, 1), .Dim = c(3L, 3L), class = structure('mmat2', package = '.GlobalEnv')), value = structure('mmat2', package = '.GlobalEnv'));`class<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinclassassign_testclassassign9_d2c3b1b6171abd4b6d56ad38962c3c96");
    }

    @Test
    public void TestrGenBuiltinclearPushBack_testclearPushBack1_60dce03e9c3d4232985f47a71bf13e03() {
        assertEval("argv <- list(FALSE); .Internal(clearPushBack(argv[[1]]))");
        check("TestrGenBuiltinclearPushBack_testclearPushBack1_60dce03e9c3d4232985f47a71bf13e03");
    }

    @Test
    public void TestrGenBuiltincnoquote_testcnoquote1_00254251aa7367b2c69432c596e00186() {
        assertEval("argv <- structure(list(structure(c('.', '.', '|', '.', '.', '|',     '.', '.'), .Dim = c(2L, 4L), .Dimnames = list(NULL, c('',     '', '', '')), class = 'noquote')), .Names = '');do.call('c.noquote', argv)");
        check("TestrGenBuiltincnoquote_testcnoquote1_00254251aa7367b2c69432c596e00186");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans10_eaa4ece5285fc47d6ee6e502482147a3() {
        assertEval("argv <- list(structure(c(NA, 30.6929824561403, 25.6929824561403, 18.6929824561403, 6.69298245614035, -6.30701754385965, -13.3070175438597, -24.3070175438597, -21.3070175438597, 3.69298245614035, -2.30701754385965, -1.30701754385965, -20.3070175438597, -17.3070175438597, NA, NA, 12.6929824561403, 0.692982456140349, 0.692982456140349, -5.30701754385965, -11.3070175438597, -19.3070175438597, -10.3070175438597, -17.3070175438597, -20.3070175438597, -32.3070175438597, -24.3070175438597, -33.3070175438597, -31.3070175438597, -24.3070175438597, NA, -24.3070175438597, 2.69298245614035, 17.6929824561403, 18.6929824561403, 3.69298245614035, 14.6929824561403, 4.69298245614035, 14.6929824561403, 0.692982456140349, 14.6929824561403, 11.6929824561403, 22.6929824561403, 16.6929824561403, 19.6929824561403, 14.6929824561403, 10.6929824561403, 18.6929824561403, 22.6929824561403, 5.69298245614035, 6.69298245614035, 0.692982456140349, 3.69298245614035, -7.30701754385965, -8.30701754385965, -4.30701754385965, 0.692982456140349, 5.69298245614035, 4.69298245614035, 9.69298245614035, 14.6929824561403, 5.69298245614035, 4.69298245614035, 0.692982456140349, 15.6929824561403, 26.6929824561403, 14.6929824561403, 21.6929824561403, 22.6929824561403, 14.6929824561403, 5.69298245614035, 17.6929824561403, 19.6929824561403, 7.69298245614035, 5.69298245614035, 0.692982456140349, 23.6929824561403, 16.6929824561403, 12.6929824561403, 12.6929824561403, 14.6929824561403, 7.69298245614035, 12.6929824561403, 5.69298245614035, 6.69298245614035, -10.3070175438597, -0.307017543859651, -12.3070175438597, -12.3070175438597, -4.30701754385965, -18.3070175438597, -10.3070175438597, -20.3070175438597, -7.30701754385965, -21.3070175438597, -12.3070175438597, 2.69298245614035, 8.69298245614035, 8.69298245614035, -0.307017543859651, 9.69298245614035, -3.30701754385965, 4.69298245614035, -4.30701754385965, -5.30701754385965, -8.30701754385965, -2.30701754385965, -7.30701754385965, -7.30701754385965, 4.69298245614035, NA, NA, 11.6929824561403, -12.3070175438597, -16.3070175438597, -29.3070175438597, -28.3070175438597, -31.3070175438597, -32.3070175438597, -32.3070175438597), .Dim = c(120L, 1L), '`scaled:center`' = 56.3070175438597, .Dimnames = list(NULL, 'Series 1'), .Tsp = c(1, 120, 1), class = 'ts'), 120, 1, TRUE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltincolMeans_testcolMeans10_eaa4ece5285fc47d6ee6e502482147a3");
    }

    @Test
    public void TestrGenBuiltincolMeans_testcolMeans8_02a9f5d93f6a558022b5b467a1ff2724() {
        assertEval("argv <- list(structure(c(234.505586749024, 30.477338238484, 110.520869124744, 10.8182256360112, 147.313169560589, 97.6285379622695, 176.128082322087, 47.2454421006426, 1.90674769458181e-15, 30.477338238484, 416.975499504725, 31.7861370189749, 190.703952476833, 120.117506711705, 442.506661969244, 239.889830502368, 22.2127533877541, 8.96469890623342e-16, 110.520869124744, 31.7861370189749, 1515.40698347813, 93.4417828515041, 178.042033105564, 210.514489336906, 228.304319294085, 24.2402628282532, 9.78296809359315e-16, 10.8182256360112, 190.703952476833, 93.4417828515041, 1736.17011782569, 171.990208955525, 616.163154757563, 314.295577560061, 190.513839846008, 7.68882264110221e-15, 147.313169560589, 120.117506711705, 178.042033105564, 171.990208955525, 4391.22673539453, 270.845832643245, 258.906125067947, 151.459157745218, 6.11264043711995e-15, 97.6285379622695, 442.506661969244, 210.514489336906, 616.163154757563, 270.845832643245, 3843.51687278644, 444.735756817902, 537.305365376654, 2.16847535162432e-14, 176.128082322087, 239.889830502368, 228.304319294085, 314.295577560062, 258.906125067947, 444.735756817902, 5767.34674134268, 307.533224133396, 1.24115309340219e-14, 47.2454421006426, 22.2127533877541, 24.2402628282532, 190.513839846008, 151.459157745218, 537.305365376655, 307.533224133396, 264.760049944031, 1.06852765558369e-14, 1.90674769458181e-15, 8.96469890623341e-16, 9.78296809359316e-16, 7.6888226411022e-15, 6.11264043711995e-15, 2.16847535162432e-14, 1.24115309340219e-14, 1.06852765558369e-14, 4.31240042063952e-31), .Dim = c(9L, 9L)), 9, 9, FALSE); .Internal(colMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltincolMeans_testcolMeans8_02a9f5d93f6a558022b5b467a1ff2724");
    }

    @Test
    public void TestrGenBuiltincolSums_testcolSums7_e4d186b078b2fe26b3b24325db350af8() {
        assertEval("argv <- list(structure(c(-7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, -421.875, -274.625, -166.375, -91.125, -42.875, -15.625, -3.375, -0.125, 0.125, 3.375, 15.625, 42.875, 91.125, 166.375, 274.625, 421.875, -9187.5, -2866.5, -445.499999999999, -4.5, -283.5, -562.5, -541.5, -220.5, 220.5, 541.5, 562.5, 283.5, 4.49999999999999, 445.5, 2866.5, 9187.5, -139741.875, -4844.38499999995, -10122.255, -28872.045, -28539.315, -15800.625, -4325.535, -178.605, 178.605, 4325.535, 15800.625, 28539.315, 28872.045, 10122.255, 4844.38500000001, 139741.875), .Dim = c(16L, 4L)), 16, 4, FALSE); .Internal(colSums(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltincolSums_testcolSums7_e4d186b078b2fe26b3b24325db350af8");
    }

    @Test
    public void TestrGenBuiltincomment_testcomment1_c77b95f769037774163181fe113edc3d() {
        assertEval("argv <- list(NULL); .Internal(comment(argv[[1]]))");
        check("TestrGenBuiltincomment_testcomment1_c77b95f769037774163181fe113edc3d");
    }

    @Test
    public void TestrGenBuiltincomment_testcomment2_c728dc42f3f20134f999f56ab33d24ce() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0'))); .Internal(comment(argv[[1]]))");
        check("TestrGenBuiltincomment_testcomment2_c728dc42f3f20134f999f56ab33d24ce");
    }

    @Test
    public void TestrGenBuiltincomment_testcomment3_ba1b2dbce7f2b9ab05cb3baf2da79e07() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(comment(argv[[1]]))");
        check("TestrGenBuiltincomment_testcomment3_ba1b2dbce7f2b9ab05cb3baf2da79e07");
    }

    @Test
    public void TestrGenBuiltincomment_testcomment4_8cdd9bed472bd6b60605081bf8a10a7b() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4, comment = c('This is my very important data from experiment #0234', 'Jun 5, 1998'))); .Internal(comment(argv[[1]]))");
        check("TestrGenBuiltincomment_testcomment4_8cdd9bed472bd6b60605081bf8a10a7b");
    }

    @Test
    public void TestrGenBuiltincommentassign_testcommentassign1_451988423f92f80e38c9ce01b33e468e() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4, comment = c('This is my very important data from experiment #0234', 'Jun 5, 1998')), c('This is my very important data from experiment #0234', 'Jun 5, 1998')); .Internal(`comment<-`(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincommentassign_testcommentassign1_451988423f92f80e38c9ce01b33e468e");
    }

    @Test
    public void TestrGenBuiltincommentassign_testcommentassign2_6bff4e1a724433a88f03217bd665d0d1() {
        assertEval("argv <- list(character(0), NULL); .Internal(`comment<-`(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincommentassign_testcommentassign2_6bff4e1a724433a88f03217bd665d0d1");
    }

    @Test
    public void TestrGenBuiltincommentassign_testcommentassign3_b5cccdd811618e3b3b05560c13209f25() {
        assertEval("argv <- list(logical(0), NULL); .Internal(`comment<-`(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincommentassign_testcommentassign3_b5cccdd811618e3b3b05560c13209f25");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex2_ba0f6ed54256cdb17391e415f3b76e2d() {
        assertEval("argv <- list(FALSE, FALSE, numeric(0)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltincomplex_testcomplex2_ba0f6ed54256cdb17391e415f3b76e2d");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex3_b283041a4c005998f8ef9050e5986b9f() {
        assertEval("argv <- list(0L, 1:10, c(1, 1.4142135623731, 1.73205080756888, 2, 2.23606797749979, 2.44948974278318, 2.64575131106459, 2.82842712474619, 3, 3.16227766016838)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltincomplex_testcomplex3_b283041a4c005998f8ef9050e5986b9f");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex5_0b2b7428e26e9fb5ca8cf36b981a6159() {
        assertEval("argv <- list(0L, c(-0.560475646552213, -0.23017748948328, 1.55870831414912, 0.070508391424576, 0.129287735160946, 1.71506498688328, 0.460916205989202, -1.26506123460653, -0.686852851893526, -0.445661970099958, 1.22408179743946, 0.359813827057364, 0.400771450594052, 0.11068271594512, -0.555841134754075, 1.78691313680308, 0.497850478229239, -1.96661715662964, 0.701355901563686, -0.472791407727934, -1.06782370598685, -0.217974914658295, -1.02600444830724, -0.72889122929114, -0.625039267849257, -1.68669331074241, 0.837787044494525, 0.153373117836515, -1.13813693701195, 1.25381492106993, 0.426464221476814, -0.295071482992271, 0.895125661045022, 0.878133487533042, 0.821581081637487, 0.688640254100091, 0.553917653537589, -0.0619117105767217, -0.305962663739917, -0.380471001012383, -0.694706978920513, -0.207917278019599, -1.26539635156826, 2.16895596533851, 1.20796199830499, -1.12310858320335, -0.402884835299076, -0.466655353623219, 0.779965118336318, -0.0833690664718293, 0.253318513994755, -0.028546755348703, -0.0428704572913161, 1.36860228401446, -0.225770985659268, 1.51647060442954, -1.54875280423022, 0.584613749636069, 0.123854243844614, 0.215941568743973, 0.379639482759882, -0.502323453109302, -0.33320738366942, -1.01857538310709, -1.07179122647558, 0.303528641404258, 0.448209778629426, 0.0530042267305041, 0.922267467879738, 2.05008468562714, -0.491031166056535, -2.30916887564081, 1.00573852446226, -0.709200762582393, -0.688008616467358, 1.0255713696967, -0.284773007051009, -1.22071771225454, 0.18130347974915, -0.138891362439045, 0.00576418589988693, 0.38528040112633, -0.370660031792409, 0.644376548518833, -0.220486561818751, 0.331781963915697, 1.09683901314935, 0.435181490833803, -0.325931585531227, 1.14880761845109, 0.993503855962119, 0.54839695950807, 0.238731735111441, -0.627906076039371, 1.36065244853001, -0.600259587147127, 2.18733299301658, 1.53261062618519, -0.235700359100477, -1.02642090030678), c(-0.710406563699301, 0.25688370915653, -0.246691878462374, -0.347542599397733, -0.951618567265016, -0.0450277248089203, -0.784904469457076, -1.66794193658814, -0.380226520287762, 0.918996609060766, -0.575346962608392, 0.607964322225033, -1.61788270828916, -0.0555619655245394, 0.519407203943462, 0.301153362166714, 0.105676194148943, -0.640706008305376, -0.849704346033582, -1.02412879060491, 0.117646597100126, -0.947474614184802, -0.490557443700668, -0.256092192198247, 1.84386200523221, -0.651949901695459, 0.235386572284857, 0.0779608495637108, -0.961856634130129, -0.0713080861235987, 1.44455085842335, 0.451504053079215, 0.0412329219929399, -0.422496832339625, -2.05324722154052, 1.13133721341418, -1.46064007092482, 0.739947510877334, 1.90910356921748, -1.4438931609718, 0.701784335374711, -0.262197489402468, -1.57214415914549, -1.51466765378175, -1.60153617357459, -0.530906522170303, -1.4617555849959, 0.687916772975828, 2.10010894052567, -1.28703047603518, 0.787738847475178, 0.76904224100091, 0.332202578950118, -1.00837660827701, -0.119452606630659, -0.280395335170247, 0.56298953322048, -0.372438756103829, 0.976973386685621, -0.374580857767014, 1.05271146557933, -1.04917700666607, -1.26015524475811, 3.2410399349424, -0.416857588160432, 0.298227591540715, 0.636569674033849, -0.483780625708744, 0.516862044313609, 0.368964527385086, -0.215380507641693, 0.0652930335253153, -0.034067253738464, 2.12845189901618, -0.741336096272828, -1.09599626707466, 0.0377883991710788, 0.310480749443137, 0.436523478910183, -0.458365332711106, -1.06332613397119, 1.26318517608949, -0.349650387953555, -0.865512862653374, -0.236279568941097, -0.197175894348552, 1.10992028971364, 0.0847372921971965, 0.754053785184521, -0.499292017172261, 0.214445309581601, -0.324685911490835, 0.0945835281735714, -0.895363357977542, -1.31080153332797, 1.99721338474797, 0.600708823672418, -1.25127136162494, -0.611165916680421, -1.18548008459731)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltincomplex_testcomplex5_0b2b7428e26e9fb5ca8cf36b981a6159");
    }

    @Test
    public void TestrGenBuiltincomplex_testcomplex7_4ebf0fe01af6e2020d0ae9aebe00e041() {
        assertEval("argv <- list(0L, NULL, numeric(0)); .Internal(complex(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltincomplex_testcomplex7_4ebf0fe01af6e2020d0ae9aebe00e041");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr10_01391651584ab36a196be5f448299419() {
        assertEval("argv <- list(structure(list(Df = c(1, 1, 1, 1, 16), `Sum Sq` = c(309.6845, 0.420500000000001, 4.90050000000001, 3.9605, 64.924), `Mean Sq` = c(309.6845, 0.420500000000001, 4.90050000000001, 3.9605, 4.05775), `F value` = c(76.3192656028586, 0.103628858357464, 1.20768899020393, 0.976033516111146, NA), `Pr(>F)` = c(1.73825946976405e-07, 0.751685166772039, 0.288052080502172, 0.337885793589305, NA)), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), class = c('anova', 'data.frame'), row.names = c('(Intercept)  ', 'rate         ', 'additive     ', 'rate:additive', 'Residuals    ')), structure(list(Df = NULL, `Sum Sq` = NULL, `Mean Sq` = NULL, `F value` = NULL, `Pr(>F)` = NULL), .Names = c('Df', 'Sum Sq', 'Mean Sq', 'F value', 'Pr(>F)'), class = c('anova', 'data.frame'), row.names = c('(Intercept)  ', 'rate         ', 'additive     ', 'rate:additive', 'Residuals    '))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr10_01391651584ab36a196be5f448299419");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr11_6c5242f61b0eb0b91cfb6dd7132dc6f3() {
        assertEval("argv <- list(structure(list(srcfile = c(NA, '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats', '/home/lzhao/hg/r-instrumented/library/stats/R/stats'), frow = c(NA, 2228L, 2369L, 2379L), lrow = c(NA, 2228L, 2369L, 2380L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 4L), class = 'data.frame'), structure(list(srcfile = NULL, frow = NULL, lrow = NULL), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 4L), class = 'data.frame')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr11_6c5242f61b0eb0b91cfb6dd7132dc6f3");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr12_03c64cb8758a9289891e9d90cfba4daa() {
        assertEval("argv <- list(structure(list(y = c(73, 73, 70, 74, 75, 115, 105, 107, 124, 107, 116, 125, 102, 144, 178, 149, 177, 124, 157, 128, 169, 165, 186, 152, 181, 139, 173, 151, 138, 181, 152, 188, 173, 196, 180, 171, 188, 174, 198, 172, 176, 162, 188, 182, 182, 141, 191, 190, 159, 170, 163, 197), x = c(1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 11, 12)), .Names = c('y', 'x'), class = 'data.frame', row.names = c(NA, 52L), terms = quote(~y + x)), structure(list(y = NULL, x = NULL), .Names = c('y', 'x'), class = 'data.frame', row.names = c(NA, 52L), terms = quote(~y + x))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr12_03c64cb8758a9289891e9d90cfba4daa");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr13_c47695dfcfef753f96549dfb4237a266() {
        assertEval("argv <- list(structure(list(x = 1:10, y = c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492, -0.305388387156356), z = structure(c(9L, 3L, 6L, 2L, 10L, 5L, 1L, 4L, 8L, 7L), .Label = c('a', 'c', 'f', 'h', 'i', 'p', 'v', 'x', 'y', 'z'), class = 'factor')), .Names = c('x', 'y', 'z'), row.names = c(NA, 10L), .S3Class = 'data.frame', timestamps = structure(1386392033.84327, class = c('POSIXct', 'POSIXt')), class = structure('myFrame', package = '.GlobalEnv')), structure(list(x = NULL, y = NULL, z = NULL), .Names = c('x', 'y', 'z'), row.names = c(NA, 10L), .S3Class = 'data.frame', timestamps = structure(1386392033.84327, class = c('POSIXct', 'POSIXt')), class = structure('myFrame', package = '.GlobalEnv'))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr13_c47695dfcfef753f96549dfb4237a266");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr14_7f10f9cbbedfd4ce1ef44c09b43a58ed() {
        assertEval("argv <- list(structure(list(y = c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434)), .Names = 'y', class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ 0)), structure(list(y = NULL), .Names = 'y', class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ 0))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr14_7f10f9cbbedfd4ce1ef44c09b43a58ed");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr15_dab7fd2b52400b1ed6d86c6df3465550() {
        assertEval("argv <- list(structure(list(`cbind(w = weight, w2 = weight^2)` = structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), class = 'data.frame', row.names = c(NA, 20L), terms = quote(cbind(w = weight, w2 = weight^2) ~ group)), structure(list(`cbind(w = weight, w2 = weight^2)` = NULL, group = NULL), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), class = 'data.frame', row.names = c(NA, 20L), terms = quote(cbind(w = weight, w2 = weight^2) ~ group))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr15_dab7fd2b52400b1ed6d86c6df3465550");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr16_696badc92940bd654fb9a3360cff004a() {
        assertEval("argv <- list(structure(list(Y = c(130L, 157L, 174L, 117L, 114L, 161L, 141L, 105L, 140L, 118L, 156L, 61L, 91L, 97L, 100L, 70L, 108L, 126L, 149L, 96L, 124L, 121L, 144L, 68L, 64L, 112L, 86L, 60L, 102L, 89L, 96L, 89L, 129L, 132L, 124L, 74L, 89L, 81L, 122L, 64L, 103L, 132L, 133L, 70L, 89L, 104L, 117L, 62L, 90L, 100L, 116L, 80L, 82L, 94L, 126L, 63L, 70L, 109L, 99L, 53L, 74L, 118L, 113L, 89L, 82L, 86L, 104L, 97L, 99L, 119L, 121L), B = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L), .Label = c('I', 'II', 'III', 'IV', 'V', 'VI'), class = 'factor'), V = structure(c(3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L), .Label = c('Golden.rain', 'Marvellous', 'Victory'), class = 'factor'), N = structure(c(2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'), class = 'factor')), .Names = c('Y', 'B', 'V', 'N'), terms = quote(Y ~ B + V + N + V:N), row.names = 2:72, class = 'data.frame'), structure(list(Y = NULL, B = NULL, V = NULL, N = NULL), .Names = c('Y', 'B', 'V', 'N'), terms = quote(Y ~ B + V + N + V:N), row.names = 2:72, class = 'data.frame')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr16_696badc92940bd654fb9a3360cff004a");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr17_1ffdce0a2aeb8529b4bf0b2f95854194() {
        assertEval("argv <- list(structure(list(Fr = c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8), Hair = structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('Black', 'Brown', 'Red', 'Blond'), class = 'factor'), Eye = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('Fr', 'Hair', 'Eye', 'Sex'), class = 'data.frame', row.names = c(NA, 32L), terms = quote(Fr ~ (Hair + Eye + Sex)^2)), structure(list(Fr = NULL, Hair = NULL, Eye = NULL, Sex = NULL), .Names = c('Fr', 'Hair', 'Eye', 'Sex'), class = 'data.frame', row.names = c(NA, 32L), terms = quote(Fr ~ (Hair + Eye + Sex)^2))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr17_1ffdce0a2aeb8529b4bf0b2f95854194");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr18_ed93cd98b2b1d54aa877c66fdd18a7b7() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), class = 'data.frame', row.names = 1947:1962, terms = quote(Employed ~     GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year)), structure(list(Employed = NULL, GNP.deflator = NULL, GNP = NULL, Unemployed = NULL, Armed.Forces = NULL, Population = NULL, Year = NULL), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), class = 'data.frame', row.names = 1947:1962, terms = quote(Employed ~ GNP.deflator + GNP + Unemployed + Armed.Forces + Population + Year))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr18_ed93cd98b2b1d54aa877c66fdd18a7b7");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr19_ca805d6f8e051ad3465e8daa8f4c1797() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 1, 2), Deviance = c(12.2441566485997, 32.825622681839, 8.44399377410362, 11.9670615295804), AIC = c(73.9421143635373, 92.5235803967766, 72.1419514890412, 77.665019244518)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user', '+ Temp', '+ Soft'), class = c('anova', 'data.frame')), structure(list(Df = NULL, Deviance = NULL, AIC = NULL), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user', '+ Temp', '+ Soft'), class = c('anova', 'data.frame'))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr19_ca805d6f8e051ad3465e8daa8f4c1797");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr2_8303d0877782ef9729ca639780a1a257() {
        assertEval("argv <- list(structure(list(y = c(2.30923841792462, 3.23011719303818, 2.9161246695212, 3.35931329373059, 5.3777049208621, 5.63518136825043, 7.37725908636056, 7.75621985157329, 10.1175871700049, 8.86877085545769), x1 = 1:10, x2 = 1:10, x3 = c(0.1, 0.4, 0.9, 1.6, 2.5, 3.6, 4.9, 6.4, 8.1, 10)), .Names = c('y', 'x1', 'x2', 'x3'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x1 + x2 + x3)), structure(list(y = NULL, x1 = NULL, x2 = NULL, x3 = NULL), .Names = c('y', 'x1', 'x2', 'x3'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x1 + x2 + x3))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr2_8303d0877782ef9729ca639780a1a257");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr20_bc61b11b3c96b333a959060f4d8bc936() {
        assertEval("argv <- list(structure(list(`cbind(X, M)` = structure(c(68, 42, 37, 24, 66, 33, 47, 23, 63, 29, 57, 19, 42, 30, 52, 43, 50, 23, 55, 47, 53, 27, 49, 29), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('X', 'M'))), M.user = structure(c(1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L), .Label = c('N', 'Y'), class = 'factor'), Temp = structure(c(2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L), .Label = c('High', 'Low'), class = 'factor'), Soft = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L), .Label = c('Hard', 'Medium', 'Soft'), class = 'factor')), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), class = 'data.frame', row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), terms = quote(cbind(X, M) ~ M.user + Temp + Soft)), structure(list(`cbind(X, M)` = NULL, M.user = NULL, Temp = NULL, Soft = NULL), .Names = c('cbind(X, M)', 'M.user', 'Temp', 'Soft'), class = 'data.frame', row.names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), terms = quote(cbind(X,     M) ~ M.user + Temp + Soft))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr20_bc61b11b3c96b333a959060f4d8bc936");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr3_d96137928fe2c219335c64bc0b1f4069() {
        assertEval("argv <- list(structure(list(y = c(-0.0561287395290008, -0.155795506705329, -1.47075238389927, -0.47815005510862, 0.417941560199702, 1.35867955152904, -0.102787727342996, 0.387671611559369, -0.0538050405829051, -1.37705955682861), x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE), z = 1:10), .Names = c('y', 'x', 'z'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x * z)), structure(list(y = NULL, x = NULL, z = NULL), .Names = c('y', 'x', 'z'), class = 'data.frame', row.names = c(NA, 10L), terms = quote(y ~ x * z))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr3_d96137928fe2c219335c64bc0b1f4069");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr5_790637be127d2d13ea042e4385752121() {
        assertEval("argv <- list(structure(list(A = 0:10, B = 10:20, `NA` = 20:30), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame'), structure(list(A = NULL, B = NULL, `NA` = NULL), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame')); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr5_790637be127d2d13ea042e4385752121");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr6_fccb37a8a88d55fe4891481dbdf37b3d() {
        assertEval("argv <- list(structure(list(`Surv(stop, status * as.numeric(event), type = 'mstate')` = structure(c(760, 2160, 5441, 277, 1815, 2587, 547, 1125, 2010, 2422, 6155, 1767, 61, 60, 7807, 7732, 6126, 7921, 3590, 5231, 5384, 5934, 6415, 6789, 6778, 3561, 4505, 3987, 4726, 5550, 5216, 5757, 2345, 6931, 6760, 5796, 4810, 5143, 3091, 3316, 700, 1706, 5088, 944, 2466, 1706, 7364, 1857, 9510, 9603, 31, 7479, 2006, 2588, 2983, 8761, 3932, 4201, 5293, 273, 2223, 4249, 5308, 8327, 499, 5789, 7417, 3242, 3275, 10359, 10852, 362, 9993, 1795, 3562, 4139, 4840, 4959, 547, 4119, 8308, 1674, 2953, 3776, 1369, 7911, 7519, 9318, 4370, 7301, 1642, 4169, 7417, 6117, 4536, 7235, 6723, 7397, 7428, 2084, 4066, 1673, 2860, 0, 3773, 4810, 4206, 2314, 4065, 8961, 6143, 517, 3837, 7498, 2815, 8806, 7668, 12457, 8600, 7003, 2435, 1826, 2403, 3805, 4901, 365, 6642, 3318, 3012, 1431, 2223, 4962, 5982, 638, 3346, 4996, 6800, 7454, 8887, 5024, 2833, 4232, 5238, 3186, 3380, 3382, 8100, 1766, 7184, 8059, 6008, 5047, 2236, 8165, 4224, 2844, 6256, 7370, 3560, 4939, 4941, 2230, 3068, 152, 10122, 3226, 3943, 518, 8569, 845, 2099, 8006, 8052, 9560, 0, 7965, 7470, 8133, 809, 153, 1851, 3010, 2121, 7085, 5068, 7093, 5930, 6878, 8080, 791, 6626, 3962, 1116, 1249, 9257, 1077, 566, 174, 4627, 5022, 2070, 3012, 1625, 6607, 8381, 8389, 1005, 3895, 4236, 6970, 8497, 2861, 8487, 3227, 8030, 8023, 31, 2435, 518, 4758, 7958, 7884, 4453, 6349, 7862, 1392, 3167, 6025, 4656, 1767, 7736, 2678, 2191, 3658, 7758, 8009, 2556, 3511, 7954, 822, 4321, 5151, 7545, 7576, 32, 7875, 5236, 7106, 2802, 7898, 3014, 7867, 5354, 2989, 7555, 6089, 8697, 6479, 1826, 5917, 792, 1431, 1434, 4763, 2910, 6209, 5824, 2400, 1400, 3027, 7198, 7247, 2557, 3855, 61, 7410, 1492, 7160, 7899, 5181, 7280, 3448, 7381, 2434, 6763, 7065, 1218, 1554, 7533, 7288, 2922, 5988, 2495, 5234, 9598, 2953, 2961, 4539, 3775, 6524, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 0, 2, 1, 2, 2, 0, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 2, 2, 0, 2, 1, 2, 2, 0, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 0, 0, 2, 0, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 0, 0, 2, 2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 1, 2, 1, 2, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 2, 1, 2, 2, 2, 0, 0, 2, 1, 2, 1, 0, 1, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 0, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 0, 0, 1, 2, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 1, 2, 0, 0, 1, 2, 1, 2, 0, 1, 2, 2, 1, 2), .Dim = c(300L, 2L), .Dimnames = list(NULL, c('time', 'status')), type = 'mright', states = c('1', '2'), class = 'Surv')), .Names = 'Surv(stop, status * as.numeric(event), type = \\'mstate\\')', class = 'data.frame', row.names = c(NA, 300L)), structure(list(`Surv(stop, status * as.numeric(event), type = 'mstate')` = NULL), .Names = 'Surv(stop, status * as.numeric(event), type = \\'mstate\\')', class = 'data.frame', row.names = c(NA, 300L))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr6_fccb37a8a88d55fe4891481dbdf37b3d");
    }

    @Test
    public void TestrGenBuiltincopyDFattr_testcopyDFattr9_7ba67d8fea5f18da8b43b712312b01b5() {
        assertEval("argv <- list(structure(list(Version = c('2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0', '2.11.0'), Date = c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), Category = c('BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES', 'BUG FIXES'), Text = c('Using with(), eval() etc with a list with some unnamed elements now\\n works.  (PR#14035)', 'cor(A, B) where A is n x 1 and B a 1-dimensional array segfaulted or\\n gave an internal error.  (The case cor(B, A) was PR#7116.)', 'cut.POSIXt() applied to a start value after the DST transition on a\\n DST-change day could give the wrong time for argument breaks in\\n units of days or longer.  (PR#14208)', 'do_par() UNPROTECTed too early (PR#14214)', 'Subassignment x[[....]] <- y didn't check for a zero-length right\\n hand side, and inserted a rubbish value.  (PR#14217)', 'Extreme tail behavior of, pbeta() {and hence pf()}, e.g., pbeta(x,\\n 3, 2200, lower.tail=FALSE, log.p=TRUE) now returns finite values\\n instead of jumping to -Inf too early.  (PR#14230).', 'read.fwf() misread multi-line records when n was specified.\\n (PR#14241)', 'gzcon( <textConnection> ), an error, no longer damages the\\n connection (in a way to have it segfault).  (PR#14237)', 'If xy[z].coords (used internally by many graphics functions) are\\n given a list as x, they now check that the list has suitable names\\n and give a more informative error message.  (PR#13936)')), .Names = c('Version', 'Date', 'Category', 'Text'), bad = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), package = 'R', row.names = c(1473L, 1483L, 1484L, 1485L, 1486L, 1493L, 1499L, 1503L, 1505L), class = c('news_db_from_Rd', 'news_db', 'data.frame')), structure(list(Version = NULL, Date = NULL, Category = NULL, Text = NULL), .Names = c('Version', 'Date', 'Category', 'Text'), bad = c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), package = 'R', row.names = c(1473L, 1483L, 1484L, 1485L, 1486L, 1493L, 1499L, 1503L, 1505L), class = c('news_db_from_Rd', 'news_db', 'data.frame'))); .Internal(copyDFattr(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincopyDFattr_testcopyDFattr9_7ba67d8fea5f18da8b43b712312b01b5");
    }

    @Test
    public void TestrGenBuiltincos_testcos1_bf4698ad3ab0a3b8360d7770383b6471() {
        assertEval("argv <- list(c(-6.28318530717959, -6.1261056745001, -5.96902604182061, -5.81194640914112, -5.65486677646163, -5.49778714378214, -5.34070751110265, -5.18362787842316, -5.02654824574367, -4.86946861306418, -4.71238898038469, -4.5553093477052, -4.39822971502571, -4.24115008234622, -4.08407044966673, -3.92699081698724, -3.76991118430775, -3.61283155162826, -3.45575191894877, -3.29867228626928, -3.14159265358979, -2.9845130209103, -2.82743338823081, -2.67035375555132, -2.51327412287183, -2.35619449019234, -2.19911485751286, -2.04203522483337, -1.88495559215388, -1.72787595947439, -1.5707963267949, -1.41371669411541, -1.25663706143592, -1.09955742875643, -0.942477796076938, -0.785398163397448, -0.628318530717959, -0.471238898038469, -0.314159265358979, -0.15707963267949, 0, 0.15707963267949, 0.314159265358979, 0.471238898038469, 0.628318530717959, 0.785398163397448, 0.942477796076938, 1.09955742875643, 1.25663706143592, 1.41371669411541, 1.5707963267949, 1.72787595947439, 1.88495559215388, 2.04203522483337, 2.19911485751286, 2.35619449019234, 2.51327412287183, 2.67035375555133, 2.82743338823081, 2.9845130209103, 3.14159265358979, 3.29867228626928, 3.45575191894877, 3.61283155162826, 3.76991118430775, 3.92699081698724, 4.08407044966673, 4.24115008234622, 4.39822971502571, 4.5553093477052, 4.71238898038469, 4.86946861306418, 5.02654824574367, 5.18362787842316, 5.34070751110265, 5.49778714378214, 5.65486677646163, 5.81194640914112, 5.96902604182061, 6.1261056745001, 6.28318530717959, 6.44026493985908, 6.59734457253857, 6.75442420521805, 6.91150383789754, 7.06858347057704, 7.22566310325652, 7.38274273593601, 7.5398223686155, 7.69690200129499, 7.85398163397448, 8.01106126665397, 8.16814089933346, 8.32522053201295, 8.48230016469244, 8.63937979737193, 8.79645943005142, 8.95353906273091, 9.1106186954104, 9.26769832808989, 9.42477796076938));cos(argv[[1]]);");
        check("TestrGenBuiltincos_testcos1_bf4698ad3ab0a3b8360d7770383b6471");
    }

    @Test
    public void TestrGenBuiltincos_testcos2_339a77b6e10125d7528921979c37ab17() {
        assertEval("argv <- list(c(0-3i, 0-2.96984924623116i, 0-2.93969849246231i, 0-2.90954773869347i, 0-2.87939698492462i, 0-2.84924623115578i, 0-2.81909547738693i, 0-2.78894472361809i, 0-2.75879396984925i, 0-2.7286432160804i, 0-2.69849246231156i, 0-2.66834170854271i, 0-2.63819095477387i, 0-2.60804020100502i, 0-2.57788944723618i, 0-2.54773869346734i, 0-2.51758793969849i, 0-2.48743718592965i, 0-2.4572864321608i, 0-2.42713567839196i, 0-2.39698492462312i, 0-2.36683417085427i, 0-2.33668341708543i, 0-2.30653266331658i, 0-2.27638190954774i, 0-2.24623115577889i, 0-2.21608040201005i, 0-2.18592964824121i, 0-2.15577889447236i, 0-2.12562814070352i, 0-2.09547738693467i, 0-2.06532663316583i, 0-2.03517587939699i, 0-2.00502512562814i, 0-1.9748743718593i, 0-1.94472361809045i, 0-1.91457286432161i, 0-1.88442211055276i, 0-1.85427135678392i, 0-1.82412060301508i, 0-1.79396984924623i, 0-1.76381909547739i, 0-1.73366834170854i, 0-1.7035175879397i, 0-1.67336683417085i, 0-1.64321608040201i, 0-1.61306532663317i, 0-1.58291457286432i, 0-1.55276381909548i, 0-1.52261306532663i, 0-1.49246231155779i, 0-1.46231155778894i, 0-1.4321608040201i, 0-1.40201005025126i, 0-1.37185929648241i, 0-1.34170854271357i, 0-1.31155778894472i, 0-1.28140703517588i, 0-1.25125628140704i, 0-1.22110552763819i, 0-1.19095477386935i, 0-1.1608040201005i, 0-1.13065326633166i, 0-1.10050251256281i, 0-1.07035175879397i, 0-1.04020100502513i, 0-1.01005025125628i, 0-0.979899497487437i, 0-0.949748743718593i, 0-0.919597989949749i, 0-0.889447236180905i, 0-0.859296482412061i, 0-0.829145728643216i, 0-0.798994974874372i, 0-0.768844221105528i, 0-0.738693467336684i, 0-0.70854271356784i, 0-0.678391959798995i, 0-0.648241206030151i, 0-0.618090452261307i, 0-0.587939698492463i, 0-0.557788944723618i, 0-0.527638190954774i, 0-0.49748743718593i, 0-0.467336683417086i, 0-0.437185929648241i, 0-0.407035175879397i, 0-0.376884422110553i, 0-0.346733668341709i, 0-0.316582914572864i, 0-0.28643216080402i, 0-0.256281407035176i, 0-0.226130653266332i, 0-0.195979899497488i, 0-0.165829145728643i, 0-0.135678391959799i, 0-0.105527638190955i, 0-0.0753768844221105i, 0-0.0452261306532664i, 0-0.0150753768844223i, 0+0.0150753768844218i, 0+0.0452261306532664i, 0+0.0753768844221105i, 0+0.105527638190955i, 0+0.135678391959799i, 0+0.165829145728643i, 0+0.195979899497488i, 0+0.226130653266332i, 0+0.256281407035176i, 0+0.28643216080402i, 0+0.316582914572864i, 0+0.346733668341709i, 0+0.376884422110553i, 0+0.407035175879397i, 0+0.437185929648241i, 0+0.467336683417085i, 0+0.49748743718593i, 0+0.527638190954774i, 0+0.557788944723618i, 0+0.587939698492462i, 0+0.618090452261306i, 0+0.648241206030151i, 0+0.678391959798995i, 0+0.708542713567839i, 0+0.738693467336683i, 0+0.768844221105527i, 0+0.798994974874372i, 0+0.829145728643216i, 0+0.85929648241206i, 0+0.889447236180904i, 0+0.919597989949748i, 0+0.949748743718593i, 0+0.979899497487437i, 0+1.01005025125628i, 0+1.04020100502513i, 0+1.07035175879397i, 0+1.10050251256281i, 0+1.13065326633166i, 0+1.1608040201005i, 0+1.19095477386935i, 0+1.22110552763819i, 0+1.25125628140704i, 0+1.28140703517588i, 0+1.31155778894472i, 0+1.34170854271357i, 0+1.37185929648241i, 0+1.40201005025126i, 0+1.4321608040201i, 0+1.46231155778894i, 0+1.49246231155779i, 0+1.52261306532663i, 0+1.55276381909548i, 0+1.58291457286432i, 0+1.61306532663317i, 0+1.64321608040201i, 0+1.67336683417085i, 0+1.7035175879397i, 0+1.73366834170854i, 0+1.76381909547739i, 0+1.79396984924623i, 0+1.82412060301507i, 0+1.85427135678392i, 0+1.88442211055276i, 0+1.91457286432161i, 0+1.94472361809045i, 0+1.9748743718593i, 0+2.00502512562814i, 0+2.03517587939698i, 0+2.06532663316583i, 0+2.09547738693467i, 0+2.12562814070352i, 0+2.15577889447236i, 0+2.18592964824121i, 0+2.21608040201005i, 0+2.24623115577889i, 0+2.27638190954774i, 0+2.30653266331658i, 0+2.33668341708543i, 0+2.36683417085427i, 0+2.39698492462312i, 0+2.42713567839196i, 0+2.4572864321608i, 0+2.48743718592965i, 0+2.51758793969849i, 0+2.54773869346734i, 0+2.57788944723618i, 0+2.60804020100502i, 0+2.63819095477387i, 0+2.66834170854271i, 0+2.69849246231156i, 0+2.7286432160804i, 0+2.75879396984925i, 0+2.78894472361809i, 0+2.81909547738693i, 0+2.84924623115578i, 0+2.87939698492462i, 0+2.90954773869347i, 0+2.93969849246231i, 0+2.96984924623116i, 0+3i));cos(argv[[1]]);");
        check("TestrGenBuiltincos_testcos2_339a77b6e10125d7528921979c37ab17");
    }

    @Test
    public void TestrGenBuiltincos_testcos4_cd1e0548b716bf3adea131c4306fe8e6() {
        assertEval("argv <- list(Inf);cos(argv[[1]]);");
        check("TestrGenBuiltincos_testcos4_cd1e0548b716bf3adea131c4306fe8e6");
    }

    @Test
    public void TestrGenBuiltincos_testcos5_03fe7fa09a10338ab1ba2184765ea57b() {
        assertEval("argv <- list(c(3.14159265358979, 6.28318530717959, 1.5707963267949, 3.14159265358979, 4.71238898038469, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 0.785398163397448, 1.5707963267949, 2.35619449019234, 3.14159265358979, 3.92699081698724, 4.71238898038469, 5.49778714378214, 6.28318530717959, 2.0943951023932, 4.18879020478639, 6.28318530717959, 3.14159265358979, 6.28318530717959, 0.897597901025655, 1.79519580205131, 2.69279370307697, 3.59039160410262, 4.48798950512828, 5.38558740615393, 6.28318530717959, 2.0943951023932, 4.18879020478639, 6.28318530717959, 1.25663706143592, 2.51327412287183, 3.76991118430775, 5.02654824574367, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 2.0943951023932, 4.18879020478639, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 1.25663706143592, 2.51327412287183, 3.76991118430775, 5.02654824574367, 6.28318530717959, 3.14159265358979, 6.28318530717959, 2.0943951023932, 4.18879020478639, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959, 3.14159265358979, 6.28318530717959));cos(argv[[1]]);");
        check("TestrGenBuiltincos_testcos5_03fe7fa09a10338ab1ba2184765ea57b");
    }

    @Test
    public void TestrGenBuiltincos_testcos6_08b6658fe8d63c9a74d13b67013518d0() {
        assertEval("argv <- list(logical(0));cos(argv[[1]]);");
        check("TestrGenBuiltincos_testcos6_08b6658fe8d63c9a74d13b67013518d0");
    }

    @Test
    public void TestrGenBuiltincosh_testcosh1_20ccc954af21fb9b8111f1f0f1137b1c() {
        assertEval("argv <- list(logical(0));cosh(argv[[1]]);");
        check("TestrGenBuiltincosh_testcosh1_20ccc954af21fb9b8111f1f0f1137b1c");
    }

    @Test
    public void TestrGenBuiltincosh_testcosh2_984508ed4a4b936c7642567475ef5555() {
        assertEval("argv <- list(FALSE);cosh(argv[[1]]);");
        check("TestrGenBuiltincosh_testcosh2_984508ed4a4b936c7642567475ef5555");
    }

    @Test
    public void TestrGenBuiltincosh_testcosh3_755ab1bec442f9e66324f126ef1547ba() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));cosh(argv[[1]]);");
        check("TestrGenBuiltincosh_testcosh3_755ab1bec442f9e66324f126ef1547ba");
    }

    @Test
    public void TestrGenBuiltincosh_testcosh4_d597223fb0b3486e140eaabfe5036fd2() {
        assertEval("argv <- list(c(-3, -2.96984924623116, -2.93969849246231, -2.90954773869347, -2.87939698492462, -2.84924623115578, -2.81909547738693, -2.78894472361809, -2.75879396984925, -2.7286432160804, -2.69849246231156, -2.66834170854271, -2.63819095477387, -2.60804020100502, -2.57788944723618, -2.54773869346734, -2.51758793969849, -2.48743718592965, -2.4572864321608, -2.42713567839196, -2.39698492462312, -2.36683417085427, -2.33668341708543, -2.30653266331658, -2.27638190954774, -2.24623115577889, -2.21608040201005, -2.18592964824121, -2.15577889447236, -2.12562814070352, -2.09547738693467, -2.06532663316583, -2.03517587939699, -2.00502512562814, -1.9748743718593, -1.94472361809045, -1.91457286432161, -1.88442211055276, -1.85427135678392, -1.82412060301508, -1.79396984924623, -1.76381909547739, -1.73366834170854, -1.7035175879397, -1.67336683417085, -1.64321608040201, -1.61306532663317, -1.58291457286432, -1.55276381909548, -1.52261306532663, -1.49246231155779, -1.46231155778894, -1.4321608040201, -1.40201005025126, -1.37185929648241, -1.34170854271357, -1.31155778894472, -1.28140703517588, -1.25125628140704, -1.22110552763819, -1.19095477386935, -1.1608040201005, -1.13065326633166, -1.10050251256281, -1.07035175879397, -1.04020100502513, -1.01005025125628, -0.979899497487437, -0.949748743718593, -0.919597989949749, -0.889447236180905, -0.859296482412061, -0.829145728643216, -0.798994974874372, -0.768844221105528, -0.738693467336684, -0.708542713567839, -0.678391959798995, -0.648241206030151, -0.618090452261307, -0.587939698492463, -0.557788944723618, -0.527638190954774, -0.49748743718593, -0.467336683417086, -0.437185929648241, -0.407035175879397, -0.376884422110553, -0.346733668341709, -0.316582914572864, -0.28643216080402, -0.256281407035176, -0.226130653266332, -0.195979899497488, -0.165829145728643, -0.135678391959799, -0.105527638190955, -0.0753768844221105, -0.0452261306532664, -0.0150753768844223, 0.0150753768844218, 0.0452261306532664, 0.0753768844221105, 0.105527638190955, 0.135678391959799, 0.165829145728643, 0.195979899497488, 0.226130653266332, 0.256281407035176, 0.28643216080402, 0.316582914572864, 0.346733668341709, 0.376884422110553, 0.407035175879397, 0.437185929648241, 0.467336683417085, 0.49748743718593, 0.527638190954774, 0.557788944723618, 0.587939698492462, 0.618090452261306, 0.648241206030151, 0.678391959798995, 0.708542713567839, 0.738693467336683, 0.768844221105527, 0.798994974874372, 0.829145728643216, 0.85929648241206, 0.889447236180904, 0.919597989949748, 0.949748743718593, 0.979899497487437, 1.01005025125628, 1.04020100502513, 1.07035175879397, 1.10050251256281, 1.13065326633166, 1.1608040201005, 1.19095477386935, 1.22110552763819, 1.25125628140704, 1.28140703517588, 1.31155778894472, 1.34170854271357, 1.37185929648241, 1.40201005025126, 1.4321608040201, 1.46231155778894, 1.49246231155779, 1.52261306532663, 1.55276381909548, 1.58291457286432, 1.61306532663317, 1.64321608040201, 1.67336683417085, 1.7035175879397, 1.73366834170854, 1.76381909547739, 1.79396984924623, 1.82412060301507, 1.85427135678392, 1.88442211055276, 1.91457286432161, 1.94472361809045, 1.9748743718593, 2.00502512562814, 2.03517587939698, 2.06532663316583, 2.09547738693467, 2.12562814070352, 2.15577889447236, 2.18592964824121, 2.21608040201005, 2.24623115577889, 2.27638190954774, 2.30653266331658, 2.33668341708543, 2.36683417085427, 2.39698492462312, 2.42713567839196, 2.4572864321608, 2.48743718592965, 2.51758793969849, 2.54773869346734, 2.57788944723618, 2.60804020100502, 2.63819095477387, 2.66834170854271, 2.69849246231156, 2.7286432160804, 2.75879396984925, 2.78894472361809, 2.81909547738693, 2.84924623115578, 2.87939698492462, 2.90954773869347, 2.93969849246231, 2.96984924623116, 3));cosh(argv[[1]]);");
        check("TestrGenBuiltincosh_testcosh4_d597223fb0b3486e140eaabfe5036fd2");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod2_edbdbf76aa8a1d0221e1c34b76704969() {
        assertEval("argv <- list(numeric(0), numeric(0)); .Internal(crossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincrossprod_testcrossprod2_edbdbf76aa8a1d0221e1c34b76704969");
    }

    @Test
    public void TestrGenBuiltincrossprod_testcrossprod8_6cd3666a64d15a75044342b441f542b2() {
        assertEval("argv <- list(structure(c(-0.0972759604917099, -0.0972759604917099, -0.197781705719934, -0.197781705719934, -0.258476920906799, -0.258476920906799, -0.31681058743414, -0.31681058743414, -0.36711291168933, -0.36711291168933, -0.386611727075222, -0.386611727075222, -0.339690730499459, -0.33969073049946, -0.392353467475584, -0.392353467475584, -0.277328754578855, -0.277328754578855, -0.062581948827679, -0.062581948827679, 0.204605005658209, 0.204605005658209, 0.32860008733551, 0.32860008733551, 0.504748197638673, 0.504748197638673, 0.0398546163039329, 0.039854616303933, -0.269613788250837, -0.269613788250837, -0.312096598983548, -0.312096598983548, 0.0190548270250438, 0.0190548270250438, 0.270521530002251, 0.270521530002251), .Dim = c(12L, 3L)), structure(c(-2.82631170793264, -2.82631170793264, -3.89457420977924, -3.89457420977924, -3.62818861156626, -3.62818861156626, -2.72530862462141, -2.72530862462141, -1.437640468988, -1.437640468988, -0.811701520293695, -0.811701520293695, 14291.543903102, 14291.543903102, 13346.8386233407, 13346.8386233407, 8863.44390274002, 8863.44390274002, 4080.15117667984, 4080.15117667984, 979.818149952962, 979.818149952962, 296.593928028368, 296.593928028368), .Dim = c(12L, 2L), .Dimnames = list(NULL, c('Vm', 'K')))); .Internal(crossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltincrossprod_testcrossprod8_6cd3666a64d15a75044342b441f542b2");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax2_e88327f3ca38d52e61049f7c03f9d9b6() {
        assertEval("argv <- list(c(1.4124321047876e-05, 0.00123993824202733, 0.00149456828694326, 0.00559442649445619, 0.00589461369451042, 0.00682814400910408, 0.00716033530387356, 0.00831306755655091, 0.0117236981036592, 0.0193564395772821, 0.0305747157670471, 0.0790837327244679, 0.158516621910594, 0.166302063477173, 0.240901842706431, 0.30743590191449, 0.310605928993035, 0.378620529843491, 0.394843673266257, 0.463217214123843, 0.846006725553553, 1.91986719718639, 2.30025314520167, 2.31702860292334, 2.66225504155806, 2.89838614884136, 2.93533263484596, 3.92915929103845, 6.05054801269533, 6.38133071205875, 6.62764115953293, 8.28240123423701, 8.53690564463391, 12.5838414070157, 12.5601043160765, 12.3043865122123, 12.7666868655065, 13.228566067383, 12.7230281716064, 12.9903781159995, 12.727240095027, 12.2523157614464, 11.8051459071199, 11.7060028009859, 11.5037817968679, 12.2693077958414, 11.5842811936712, 11.6626896867753, 10.9424154292091, 10.3816792396216));cummax(argv[[1]]);");
        check("TestrGenBuiltincummax_testcummax2_e88327f3ca38d52e61049f7c03f9d9b6");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax3_5020287ebc0d6f79ae90f4c53533f49b() {
        assertEval("argv <- list(list());cummax(argv[[1]]);");
        check("TestrGenBuiltincummax_testcummax3_5020287ebc0d6f79ae90f4c53533f49b");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax5_f778a9778b592554044e72e9dea8c595() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));cummax(argv[[1]]);");
        check("TestrGenBuiltincummax_testcummax5_f778a9778b592554044e72e9dea8c595");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax6_9af39ec7776a8c7b39a3e651c5d2f951() {
        assertEval("argv <- list(NULL);cummax(argv[[1]]);");
        check("TestrGenBuiltincummax_testcummax6_9af39ec7776a8c7b39a3e651c5d2f951");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax7_ad5b5b276fe8ff3b170420c1844e6649() {
        assertEval("argv <- list(character(0));cummax(argv[[1]]);");
        check("TestrGenBuiltincummax_testcummax7_ad5b5b276fe8ff3b170420c1844e6649");
    }

    @Test
    public void TestrGenBuiltincummax_testcummax8_22ebd9e10da90fc68829e323c0d06ba1() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));cummax(argv[[1]]);");
        check("TestrGenBuiltincummax_testcummax8_22ebd9e10da90fc68829e323c0d06ba1");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin2_c8fb106e3bdea040b6736d80089e0599() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));cummin(argv[[1]]);");
        check("TestrGenBuiltincummin_testcummin2_c8fb106e3bdea040b6736d80089e0599");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin3_8b2324730fcf1be9dc471d6c1a45386b() {
        assertEval("argv <- list(c(0.943789021783783, 0.931269398230562, 0.936135627032134, 0.76691878645786, 0.751187345517812, 0.732102071759373, 0.736981399184748, 0.745009176294265, 0.742307320914255, 0.711777799810146, 0.726511637567943, 0.690091181919273, 0.656233947317988, 0.662510996891949, 0.657978635660952, 0.44347561790306, 0.428400063839846, 0.342071801782345, 0.329359004493355, 0.312959379967, 0.204112170963036, 0.153481444959266, 0.152881906752072, 0.141986935549763, 0.125244789347208, 0.126329692184989, 0.107405157884553, 0.0483432414602031, 0.0271151539974933, 0.0237499953844365, 0.0234803429360305, 0.0199319312722803, 0.0204957267942993, 0.0167583890578386, 0.0121314575180917, 0.0121935863008149, 0.00645581491628309, 0.00266833883057866, 0.00182178254845008, 0.00120243057473427, 0.000941101987534066, 0.000909248927476008, 0.000993184583142412, 0.00101050520477321, 0.00117777399883288, 0.000412294699846418, 0.000504381657773829, 1.12994568383008e-05));cummin(argv[[1]]);");
        check("TestrGenBuiltincummin_testcummin3_8b2324730fcf1be9dc471d6c1a45386b");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin4_4af18cddd7d30ef6ff6b608feba77782() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));cummin(argv[[1]]);");
        check("TestrGenBuiltincummin_testcummin4_4af18cddd7d30ef6ff6b608feba77782");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin5_5046057aaf673e398ea07866d9018f1d() {
        assertEval("argv <- list(logical(0));cummin(argv[[1]]);");
        check("TestrGenBuiltincummin_testcummin5_5046057aaf673e398ea07866d9018f1d");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin6_aa92d67fba07ba69fc3802b31648d35f() {
        assertEval("argv <- list(character(0));cummin(argv[[1]]);");
        check("TestrGenBuiltincummin_testcummin6_aa92d67fba07ba69fc3802b31648d35f");
    }

    @Test
    public void TestrGenBuiltincummin_testcummin7_d0e6506a3d5fcc64094c04e797bafde6() {
        assertEval("argv <- list(NULL);cummin(argv[[1]]);");
        check("TestrGenBuiltincummin_testcummin7_d0e6506a3d5fcc64094c04e797bafde6");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod2_d026178a9359de54125a8dc9c8322a6f() {
        assertEval("argv <- list(c(0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i, 0.2853725+0.3927816i));cumprod(argv[[1]]);");
        check("TestrGenBuiltincumprod_testcumprod2_d026178a9359de54125a8dc9c8322a6f");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod3_527c41663c53321801df6929cd09354c() {
        assertEval("argv <- list(c(1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49));cumprod(argv[[1]]);");
        check("TestrGenBuiltincumprod_testcumprod3_527c41663c53321801df6929cd09354c");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod5_3934815317abc9da531aa6bc50d4ade1() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));cumprod(argv[[1]]);");
        check("TestrGenBuiltincumprod_testcumprod5_3934815317abc9da531aa6bc50d4ade1");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod7_ac2f65845ff68f5ea676d359f6291667() {
        assertEval("argv <- list(structure(list(), .Names = character(0)));cumprod(argv[[1]]);");
        check("TestrGenBuiltincumprod_testcumprod7_ac2f65845ff68f5ea676d359f6291667");
    }

    @Test
    public void TestrGenBuiltincumprod_testcumprod8_29a226c1ef3f74cd0525a361e76d00ca() {
        assertEval("argv <- list(NULL);cumprod(argv[[1]]);");
        check("TestrGenBuiltincumprod_testcumprod8_29a226c1ef3f74cd0525a361e76d00ca");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum3_aecce4763dc43e0b775a6f4803029558() {
        assertEval("argv <- list(structure(c(79.3831968838961, 8.55983483385341e+101), .Names = c('', '')));cumsum(argv[[1]]);");
        check("TestrGenBuiltincumsum_testcumsum3_aecce4763dc43e0b775a6f4803029558");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum5_6ea15d6d7d928dc01be41f5c71bae0d6() {
        assertEval("argv <- list(NULL);cumsum(argv[[1]]);");
        check("TestrGenBuiltincumsum_testcumsum5_6ea15d6d7d928dc01be41f5c71bae0d6");
    }

    @Test
    public void TestrGenBuiltincumsum_testcumsum7_5f3ec5a67c3c5a2950029dfb8aea181a() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')));cumsum(argv[[1]]);");
        check("TestrGenBuiltincumsum_testcumsum7_5f3ec5a67c3c5a2950029dfb8aea181a");
    }

    @Test
    public void TestrGenBuiltincut_testcut1_bc0f1bf353ddcc07862b52ddaf70175e() {
        assertEval("argv <- structure(list(x = c(1.0346112150611, 0.0440203704340609,     -1.18549563351614, 0.649014015685885, -0.790829522519262,     1.17598399721214, 0.983434156282803, 0.541081558957578, -0.192970091592294,     -0.606426057996866, -0.548929268331095, 0.063509821468168,     -0.0758711318520365, -0.587354948512591, 0.68016119925159,     -0.00101371953355839, -2.04690635406766, -1.15419169868302,     1.57552198814761, -1.2826021432906, -0.0106456026122299,     -1.45914938013444, -0.0877132204592902, 0.644476581366902,     -0.174036946316013, 0.70686472456958, -0.800624461731312,     0.708086372571733, -0.297996173821721, 0.0138099804238364,     0.380733372967531, 0.128771481990839, 0.323047326927391,     -0.311589835954256, 0.12558341704142, -0.298476619409494,     -0.102902974277467, -1.68917669167977, -1.42657554846613,     -0.833840095454306, 0.0781210754813429, 0.0966440325613869,     0.471427686648137, -0.755241646713195, -1.09526706499915,     0.226011761333169, -2.00335228166377, 0.871788133884678,     -0.17604759041044, -0.392043928011201, 1.52493115014745,     0.696042602954131, 0.929759768084036, -0.937385053991658,     -0.505487042445614, 0.658795125401, -0.530682170997639, 1.35048133622788,     1.1503422698982, -1.03530396801882, 0.222351695228838, -0.439226819350318,     0.829770867923565, -0.843987984792906, 0.634088156420345,     0.940832655747169, -0.0115852787804222, -0.410726945127659,     -0.0645734442095184, -0.285424906860716, -0.132298134315469,     2.015980478747, -0.49752866007857, 0.461543245850607, 0.372715664260582,     0.911907622481186, 1.75893179717408, -0.111357338665413,     0.390438066934087, -0.15682295730562, 0.249796941030751,     -0.986665869092954, 0.342284950759752, 0.814635047060746,     -0.0433704725852363, 0.0953296428157898, -0.710060187690398,     0.0162693336595326, 0.406214045314364, -0.85345069761213,     0.294458010294818, -0.381515531303645, -0.341521027080523,     0.221675587474675, -1.33867071234436, 0.807929975242687,     -0.126382937192597, -0.0352338330882248, -1.4928897757059,     -0.235586522320615), breaks = structure(c(-2.04690635406766,     -0.511785824583621, -0.0234095559343235, 0.488841154725497,     2.015980478747), .Names = c('0%', '25%', '50%', '75%', '100%')),     labels = FALSE), .Names = c('x', 'breaks', 'labels'));do.call('cut', argv)");
        check("TestrGenBuiltincut_testcut1_bc0f1bf353ddcc07862b52ddaf70175e");
    }

    @Test
    public void TestrGenBuiltincut_testcut2_697bcd874f03a13aa87864e907dc4a93() {
        assertEval("argv <- structure(list(x = structure(c(50, 47, 37, 71, 62, 53,     49, 56, 50, 47, 30, 20, 44, 33, 34, 39, 54, 40, 35, 33, 31,     47, 37, 27, 66, 44, 73, 26, 40, 61, 27, 77, 50, 31, 23, 72,     90, 46, 56, 43, 62, 59, 69, 30, 55, 39, 55, 59, 54, 47, 32,     72, 22, 43, 62, 52, 59, 26, 59, 22, 77, 60, 41, 77, 42, 81,     40, 70, 47, 77, 23, 39, 33, 56, 45, 42, 28, 53, 39, 51, 26,     18, 55, 64, 42, 71, 43, 68, 72, 74, 55, 53, 67, 47, 28, 32,     38, 42, 38, 64, 44, 18, 61, 67, 75, 70, 27, 42, 45, 62, 47,     27, 28, 58, 34, 42, 24, 43, 43, 72, 22, 73, 61, 55, 43, 25,     21, 19, 45, 62, 52, 51, 20, 24, 88, 32, 66, 73, 21, 63, 77,     77, 26, 52, 67, 68, 47, 46, 64, 51, 46, 23, 39, 22, 28, 74,     68, 23, 29, 80, 43, 58, 55, 78, 58, 45, 49, 29, 58, 27, 40,     34, 23, 62, 18, 19, 66, 81, 25, 53, 28, 36, 47, 44, 37, 63,     37, 71, 47, 38, 56, 44, 64, 59, 55, 35, 31, 47, 21, 76, 62,     86, 43, 56, 20, 34, 23, 45, 58, 19, 53, 24, 30, 50, 63, 47,     73, 41, 62, 82, 21, 38, 50, 66, 59, 63, 25, 38, 28, 67, 60,     62, 48, 44, 59, 39, 82, 61, 54, 51, 35, 54, 58, 27, 58, 40,     22, 19, 68, 65, 76, 69, 25, 65, 56, 39, 82, 77, 23, 51, 40,     78, 48, 46, 73, 51, 50, 37, 56, 46, 20, 30, 25, 65, 31, 70,     52, 22, 38, 53, 48, 29, 52, 60, 80, 57, 63, 61, 36, 23, 78,     28, 26, 35, 66, 50, 34, 60, 50, 45, 54, 42, 25, 31, 30, 41,     55, 62, 74, 47, 41, 48, 71, 38, 39, 61, 73, 41, 41, 41, 24,     28, 49, 58, 27, 57, 52, 54, 35, 53, 45, 19, 37, 38, 78, 57,     55, 32, 24, 47, 46, 22, 51, 39, 46, 38, 20, 53, 82, 33, 62,     72, 44, 76, 31, 24, 78, 70, 28, 70, 69, 56, 32, 35, 53, 79,     83, 63, 28, 44, 38, 24, 41, 46, 39, 62, 63, 33, 54, 27, 27,     75, 42, 88, 52, 46, 25, 49, 58, 28, 27, 50, 74, 59, 49, 41,     33, 51, 50, 72, 65, 55, 51, 88, 52, 48, 25, 62, 34, 25, 77,     65, 48, 33, 58, 46, 34, 55, 75, 24, 73, 65, 50, 63, 24, 52,     72, 31, 53, 51, 26, 42, 29, 25, 58, 34, 46, 64, 28, 57, 45,     33, 39, 68, 76, 41, 23, 45, 28, 66, 57, 64, 48, 38, 43, 68,     62, 32, 56, 55, 58, 24, 26, 81, 33, 73, 36, 65, 69, 19, 67,     40, 46, 35, 23, 79, 32, 58, 59, 53, 43, 31, 32, 28, 23, 35,     75, 22, 63, 25, 39, 24, 24, 67, 52, 56, 34, 54, 29, 56, 37,     46, 24, 35, 65, 20, 24, 35, 82, 29, 53, 45, 40, 51, 46, 60,     65, 75, 22, 49, 29, 29, 43, 43, 45, 76, 39, 58, 49, 51, 40,     41, 44, 43, 62, 48, 65, 23, 48, 52, 63, 69, 49, 58, 19, 79,     28, 25, 43, 76, 44, 29, 65, 20, 41, 35, 37, 38, 28, 56, 38,     57, 57, 52, 72, 70, 58, 67, 77, 42, 46, 31, 55, 28, 41, 18,     49, 56, 51, 21, 56, 47, 61, 83, 36, 63, 66, 56, 19, 34, 30,     55, 70, 48, 62, 67, 44, 48, 26, 20, 35, 63, 38, 83, 56, 56,     57, 40, 64, 57, 31, 34, 38, 27, 64, 56, 48, 57, 25, 62, 35,     63, 50, 33, 52, 84, 38, 82, 44, 22, 70, 57, 47, 56, 74, 53,     57, 27, 21, 45, 68, 22, 61, 18, 30, 64, 31, 23, 74, 54, 21,     69, 38, 33, 27, 48, 58, 62, 64, 41, 41, 23, 48, 31, 46, 84,     21, 45, 21, 78, 41, 33, 21, 37, 44, 47, 23, 36, 39, 61, 25,     27, 27, 57, 26, 46, 40, 31, 42, 42, 71, 60, 19, 49, 40, 52,     58, 61, 25, 60, 77, 63, 26, 27, 45, 56, 36, 19, 26, 61, 56,     19, 38, 48, 45, 36, 83, 65, 35, 63, 63, 29, 81, 26, 19, 25,     26, 78, 47, 57, 23, 28, 20, 19, 50, 49, 25, 44, 60, 55, 51,     41, 46, 57, 43, 49, 62, 25, 37, 31, 41, 50, 39, 60, 45, 30,     49, 58, 23, 30, 46, 36, 76, 41, 77, 45, 70, 45, 47, 39, 29,     36, 66, 31, 54, 24, 22, 31, 35, 62, 37, 33, 37, 87, 28, 42,     27, 60, 65, 32, 42, 36, 65, 39, 57, 51, 68, 33, 33, 23, 61,     50, 55, 53, 22, 67, 74, 36, 26, 42, 66, 48, 46, 55, 49, 48,     58, 39, 61, 82, 59, 29, 46, 81, 57, 85, 64, 59, 19, 42, 76,     38, 29, 27, 48, 53, 35, 60, 53, 52, 77, 52, 57, 64, 56, 44,     77, 52, 84, 58, 74, 52, 51, 74, 28, 43, 64, 64, 34, 63, 55,     54, 18, 46, 29, 88, 29, 22, 53, 35, 86, 48, 29, 41, 46, 79,     69, 34, 43, 50, 45, 31, 39, 56, 32, 80, 46, 49, 20, 57, 44,     76, 24, 32, 45, 62, 65, 61, 61, 39, 63, 54, 64, 75, 53, 60,     63, 36, 47, 46, 35, 52, 43, 52, 77, 40, 63, 29, 61, 65, 55,     28, 19, 75, 34, 51, 69, 41, 40, 74, 62, 86, 19, 63, 29, 52,     68, 50, 64, 43, 27, 66, 23, 40, 41, 39, 28, 48, 37, 29, 58,     65, 51, 27, 67, 83, 35, 73, 38, 66, 18, 47, 71, 49, 68, 71,     18, 59, 19, 37, 22, 71, 20, 40, 30, 44, 28, 29, 52, 20, 40,     23, 64, 38, 57, 52, 44, 35, 37, 32, 37, 38, 69, 19, 30, 77,     58, 31, 80, 29, 79, 57, 42, 20, 33, 28, 49, 65, 48, 90, 57,     43, 51, 32, 60, 73, 50, 23, 57, 38, 24, 65, 51, 28, 33, 56,     26, 61, 51, 45, 64, 41, 33, 34, 39, 31, 22, 55, 59, 54, 66,     40, 72, 45, 79, 46, 21, 82, 67, 52, 24, 57, 30, 57, 63, 50,     33, 56, 53, 67, 54, 67, 43, 51, 22, 53, 45, 21, 47, 63, 44,     51, 25, 57, 56, 21, 28, 23, 54, 20, 63, 65, 53, 54, 82, 66,     54, 68, 55, 31, 31, 36, 61, 25, 31, 36, 77, 39, 49, 55, 30,     51, 34, 44, 36, 35, 24, 23, 45, 30, 35, 20, 25, 66, 36, 41,     69, 19, 75, 50, 29, 49, 33, 20, 19, 52, 54, 53, 67, 51, 48,     82, 34, 45, 36, 41, 34, 32, 48, 49, 86, 63, 61, 40, 50, 63,     49, 25, 44, 25, 64, 64, 78, 58, 23, 61, 41, 76, 44, 54, 70,     39, 44, 64, 19, 56, 28, 39, 26, 33, 29, 34, 49, 46, 30, 59,     48, 21, 33, 44, 21, 49, 31, 20, 84, 55, 24, 50, 26, 63, 50,     44, 65, 28, 24, 22, 55, 42, 26, 44, 22, 35, 71, 66, 23, 42,     50, 24, 56, 66, 47, 50), value.labels = structure(c(99, 98,     0), .Names = c('89. RF', '88. DK', '00. NA'))), c(0, 25,     35, 45, 55, 65, 99)), .Names = c('x', ''));do.call('cut', argv)");
        check("TestrGenBuiltincut_testcut2_697bcd874f03a13aa87864e907dc4a93");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse1_7ae61a4f4be1c4b4d86e1415251bd2c3() {
        assertEval("argv <- list(quote(rsp), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse1_7ae61a4f4be1c4b4d86e1415251bd2c3");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse10_cd1e1bc0422783123d12c2c80f3815b6() {
        assertEval("argv <- list(quote(1:10), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse10_cd1e1bc0422783123d12c2c80f3815b6");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse11_9b2a35fa73423a17a2fcab54b586ea7a() {
        assertEval("argv <- list(quote(x[[i]]), 500L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse11_9b2a35fa73423a17a2fcab54b586ea7a");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse12_30845a3b9b1112ca17301586dad021df() {
        assertEval("argv <- list(quote(t1 - 4), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse12_30845a3b9b1112ca17301586dad021df");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse13_8fc268a320fcdf031fb33102b081cd81() {
        assertEval("argv <- list(quote(read.table('foo1')), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse13_8fc268a320fcdf031fb33102b081cd81");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse14_4970db23380dafd3acfcca4c3eaaca24() {
        assertEval("argv <- list(quote(`[.data.frame`(dd, , 'x')), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse14_4970db23380dafd3acfcca4c3eaaca24");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse15_2c2f3aaf0b6c48f604ea265d681bb53f() {
        assertEval("argv <- list(1e-07, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse15_2c2f3aaf0b6c48f604ea265d681bb53f");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse16_e45cc6e67e33cce70ced05c64e86f1b3() {
        assertEval("argv <- list('coef.corStruct', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse16_e45cc6e67e33cce70ced05c64e86f1b3");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse17_75fe9d57f9b240c0000903c5a1d4617d() {
        assertEval("argv <- list('Version of 'graph' is too old --- no tests done here!\\n', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse17_75fe9d57f9b240c0000903c5a1d4617d");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse18_44481931a91fff22b73921a5e9604597() {
        assertEval("argv <- list(Inf, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse18_44481931a91fff22b73921a5e9604597");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse19_0cae08a0b7588af95925c4c8427c1e79() {
        assertEval("argv <- list(structure(list(Sex = structure(c(2L, 2L, 1L, 1L, 2L, 2L), .Label = c('Female', 'Male'), class = 'factor'), age = c(15, 20, 10, 12, 2, 4), Subject = structure(c(2L, 2L, 1L, 1L, 3L, 3L), .Label = c('F30', 'M01', 'M04'), class = 'factor')), .Names = c('Sex', 'age', 'Subject'), row.names = c(NA, -6L), class = 'data.frame'), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse19_0cae08a0b7588af95925c4c8427c1e79");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse2_a87859f9f0b6057892823c6b6438da57() {
        assertEval("argv <- list(quote(rnorm(1, sd = Inf)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse2_a87859f9f0b6057892823c6b6438da57");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse20_432130c3fbc28e0a271e9be3923336dd() {
        assertEval("argv <- list(TRUE, 500L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse20_432130c3fbc28e0a271e9be3923336dd");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse21_1155a0796d6a6f3294123cd8e56fa45a() {
        assertEval("argv <- list(.Primitive('interactive'), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse21_1155a0796d6a6f3294123cd8e56fa45a");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse22_33ac29ab628e9983ded5b0f946c3edd5() {
        assertEval("argv <- list(0+1i, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse22_33ac29ab628e9983ded5b0f946c3edd5");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse23_488a683b049d80acbbf7c29ad0a0f5a1() {
        assertEval("argv <- list(quote(cor(Z[, FALSE], use = 'pairwise.complete.obs', method = 'kendall')), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse23_488a683b049d80acbbf7c29ad0a0f5a1");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse24_e198632176b3a427c25dcedc82e12ef4() {
        assertEval("argv <- list(c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5, 9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4, 8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9, 9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7, 4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8, 6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3, 8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9, 10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3, 6.3, 6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7, 14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6, 9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse24_e198632176b3a427c25dcedc82e12ef4");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse25_779fcd632c0ec46a745ee45c21b0b48f() {
        assertEval("argv <- list(1e+05, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse25_779fcd632c0ec46a745ee45c21b0b48f");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse26_f484f6617e69cdfc523d02a61c2dc7c9() {
        assertEval("argv <- list(structure(list(distance = c(26, 25, 29, 31, 21.5, 22.5), age = c(8, 10, 12, 14, 8, 10), Subject = structure(c(2L, 2L, 2L, 2L, 1L, 1L), .Label = c('M02', 'M01'), class = c('ordered', 'factor')), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('distance', 'age', 'Subject', 'Sex'), row.names = c('1', '2', '3', '4', '5', '6'), class = 'data.frame'), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse26_f484f6617e69cdfc523d02a61c2dc7c9");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse27_b48753672f4d4a49a099f4e47444a113() {
        assertEval("argv <- list('\\t *ERROR* !!\\n', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse27_b48753672f4d4a49a099f4e47444a113");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse28_48e26f281df241471bea409e949990bc() {
        assertEval("argv <- list('\\n\\f\\n', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse28_48e26f281df241471bea409e949990bc");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse29_a2aadf67ecca2bab00d0b5c251d4afbc() {
        assertEval("argv <- list(' +\\\\.', 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse29_a2aadf67ecca2bab00d0b5c251d4afbc");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse3_754683fb01ea52f4cb99fe7aab211dcc() {
        assertEval("argv <- list(quote(rnorm(2, c(1, NA))), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse3_754683fb01ea52f4cb99fe7aab211dcc");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse30_bd96596fb124b6dcb823a4c9189d02a2() {
        assertEval("argv <- list(structure(FALSE, .Dim = 1L), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse30_bd96596fb124b6dcb823a4c9189d02a2");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse31_4196bfc79e33f9f637ef031e9b2b1319() {
        assertEval("argv <- list(c(0, 0.587785252292473, 0.951056516295154, 0.951056516295154, 0.587785252292473, 1.22464679914735e-16, -0.587785252292473, -0.951056516295154, -0.951056516295154, -0.587785252292473, -2.44929359829471e-16, 0.587785252292473, 0.951056516295154), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse31_4196bfc79e33f9f637ef031e9b2b1319");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse32_ab009b68cd09e62904ae4bf32cb60d9d() {
        assertEval("argv <- list(structure(c(39.384847580955, 40.3469409309138, 42.6018205723052, 46.6665176252597, 51.3438205965467, 60.0069972599329, 64.6480892875058, 62.5709232928432, 57.679739382496, 49.5060394945433, 43.474726406114, 39.8236314289602, 38.361391396627, 37.9275637097922, 43.6868952734483, 45.1919846859641, 51.722520194987, 59.3399821539983, 61.9345241730145, 62.1515308754468, 57.6561604617486, 49.2849925780811, 42.606775772378, 39.6394677676018, 38.6328048791077, 38.4418602988203, 43.1520834957543, 45.6551746936999, 51.7999631155049, 59.5021948495759, 62.9217123388139, 62.0751910659837, 57.8048619656866, 49.5091658164884, 42.8045075272742, 40.2515159054665), .Tsp = c(1937, 1939.91666666667, 12), class = 'ts'), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse32_ab009b68cd09e62904ae4bf32cb60d9d");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse33_dfb17cc2d1b6d1a8b29fa1a9f290952b() {
        assertEval("argv <- list(NA_real_, 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse33_dfb17cc2d1b6d1a8b29fa1a9f290952b");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse34_baf9120031c9a91b15009eb0ee6cb37e() {
        assertEval("argv <- list(quote(lm(formula = y ~ x1 + x2 + x3)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse34_baf9120031c9a91b15009eb0ee6cb37e");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse35_42f0244360834a25e6cc46affd79ffa2() {
        assertEval("argv <- list(structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166, 171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194, 196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201, 204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 229, 242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 419.147602949539, 391.474665943444, 435.919286153217, 443.935203034261, 455.023399013445, 517.28707821144, 589.71337277669, 582.999919227301, 484.573388713116, 428.878182738437, 368.526582998452, 406.728709993152, 415.660571294428, 388.716535970235, 433.006017658935, 440.885684396326, 451.651900136866, 513.051252429496, 584.327164324967, 577.055407135124, 479.076505013118, 423.494870357491, 363.43932958967, 400.592058645117, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 484.030717075782, 462.954959541421, 526.353307750503, 546.165638262644, 569.502470928676, 657.838443307596, 761.241730163307, 763.280655335144, 642.989004951864, 576.423799567567, 501.429012064338, 559.981301364233, 591.700754553767, 565.210772316967, 642.377841008703, 666.682421047093, 695.547100430962, 804.065022775202, 931.340589597203, 934.837830059897, 788.422986194072, 707.666678543854, 616.37838266375, 689.250456425465), .Dim = c(168L, 3L), .Dimnames = list(NULL, c('structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, ', 'structure(c(419.147602949539, 391.474665943444, 435.919286153217, ', 'structure(c(484.030717075782, 462.954959541421, 526.353307750503, ')), .Tsp = c(1949, 1962.91666666667, 12), class = c('mts', 'ts', 'matrix')), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse35_42f0244360834a25e6cc46affd79ffa2");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse36_46119f0ae8d107bff03cbcc039babfa1() {
        assertEval("argv <- list(numeric(0), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse36_46119f0ae8d107bff03cbcc039babfa1");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse37_178005eb5188b54c4b7cf6a85b8a7e1d() {
        assertEval("argv <- list(0:12, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse37_178005eb5188b54c4b7cf6a85b8a7e1d");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse38_4cf9485403d3449b436689e452490705() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse38_4cf9485403d3449b436689e452490705");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse39_b0de79fadb65a2d071f9580391c84ae6() {
        assertEval("argv <- list(NA, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse39_b0de79fadb65a2d071f9580391c84ae6");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse4_fa0bbfe31a2db219d167908688741736() {
        assertEval("argv <- list(quote(unclass(x)), 500, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse4_fa0bbfe31a2db219d167908688741736");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse40_25b2d5f06b44a03edaa3ec556d624994() {
        assertEval("argv <- list(logical(0), logical(0), FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse40_25b2d5f06b44a03edaa3ec556d624994");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse41_9228c5da5749430b9ce5b6d95bfcbcef() {
        assertEval("argv <- list(FALSE, 50L, FALSE, 69, 2L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse41_9228c5da5749430b9ce5b6d95bfcbcef");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse42_d3e2f069e992239a91955b159fcf315f() {
        assertEval("argv <- list(c(FALSE, FALSE), 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse42_d3e2f069e992239a91955b159fcf315f");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse43_41753e19f3646fae0856097348637c85() {
        assertEval("argv <- list(quote(glm(formula = y ~ x, family = poisson(identity), start = c(1, 0))), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse43_41753e19f3646fae0856097348637c85");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse44_20082db53bb6d9abd9e399d7757394fa() {
        assertEval("argv <- list(quote(lm(formula = 1000/MPG.city ~ Weight + Cylinders + Type + EngineSize + DriveTrain, data = Cars93)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse44_20082db53bb6d9abd9e399d7757394fa");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse45_79171d035d8ae6785f1ed3270c07d236() {
        assertEval("argv <- list(0.333333333333333, 60L, FALSE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse45_79171d035d8ae6785f1ed3270c07d236");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse46_13d24ad485cf5ef61c563fd1e619f790() {
        assertEval("argv <- list(quote(Fr ~ (Hair + Eye + Sex)^2), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse46_13d24ad485cf5ef61c563fd1e619f790");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse47_f647df210f1d05f3d2ec0885eae4a457() {
        assertEval("argv <- list(quote(glm(formula = cbind(X, M) ~ M.user + Temp + M.user:Temp, family = binomial, data = detg1)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse47_f647df210f1d05f3d2ec0885eae4a457");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse5_6e7ee541c99dcc23234ca7fb3c6be010() {
        assertEval("argv <- list(quote(cor(rnorm(10), NULL)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse5_6e7ee541c99dcc23234ca7fb3c6be010");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse6_e88fa87223f550b4600b60d4249b9219() {
        assertEval("argv <- list(quote(5 * exp(-x)), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse6_e88fa87223f550b4600b60d4249b9219");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse7_6e9ac472093e9b62411a594d4785594b() {
        assertEval("argv <- list(quote(y ~ ((g1) * exp((log(g2/g1)) * (1 - exp(-k * (x - Ta)))/(1 - exp(-k * (Tb - Ta)))))), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse7_6e9ac472093e9b62411a594d4785594b");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse8_206a5412e5a18813064a97da71237bc1() {
        assertEval("argv <- list(quote(tt <- table(c(rep(0, 7), rep(1, 4), rep(5, 3)))), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse8_206a5412e5a18813064a97da71237bc1");
    }

    @Test
    public void TestrGenBuiltindeparse_testdeparse9_c38fd230efc5fbeef93dba49f21bd19e() {
        assertEval("argv <- list(quote(utils::str), 60L, TRUE, 69, -1L); .Internal(deparse(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltindeparse_testdeparse9_c38fd230efc5fbeef93dba49f21bd19e");
    }

    @Test
    public void TestrGenBuiltindet_testdet1_a27f74f97071a95b0cc464c97b5af70f() {
        assertEval("argv <- list(structure(c(FALSE, TRUE, TRUE, FALSE), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))), TRUE); .Internal(det_ge_real(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindet_testdet1_a27f74f97071a95b0cc464c97b5af70f");
    }

    @Test
    public void TestrGenBuiltindet_testdet2_93f9a336427be46ee880f88e91d8e7e9() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))), TRUE); .Internal(det_ge_real(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindet_testdet2_93f9a336427be46ee880f88e91d8e7e9");
    }

    @Test
    public void TestrGenBuiltindet_testdet3_0cdaab5297f5d77bcece794dee4ccb32() {
        assertEval("argv <- list(structure(c(2, 1, 1, 2), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))), TRUE); .Internal(det_ge_real(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindet_testdet3_0cdaab5297f5d77bcece794dee4ccb32");
    }

    @Test
    public void TestrGenBuiltindet_testdet5_806af52c714345a50efaabc235e19c9e() {
        assertEval("argv <- structure(list(x = structure(c(0, 0, 0, 0, 0, 0, NA,     0, 0, NA, NA, 0, 0, 0, 0, 1), .Dim = c(4L, 4L))), .Names = 'x');do.call('det', argv)");
        check("TestrGenBuiltindet_testdet5_806af52c714345a50efaabc235e19c9e");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn1_f1697fb2af517deb029200b5c9d556ae() {
        assertEval("argv <- list(''f' is deprecated.\\nUse 'convertY' instead.\\nSee help(\\'Deprecated\\')', NULL); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn1_f1697fb2af517deb029200b5c9d556ae");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn10_496ced09b4bc31ecb0004845fe98b8af() {
        assertEval("argv <- list(''x' is neither a vector nor a matrix: using as.numeric(x)', quote(dotchart(table(infert$education)))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn10_496ced09b4bc31ecb0004845fe98b8af");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn11_d9723c64de09d287610ec58014e8b2b8() {
        assertEval("argv <- list('Invalid file name(s) for R code in ./myTst/R:\\n  'file55711ba85492'\\n are now renamed to 'z<name>.R'', quote(package.skeleton('myTst', code_files = tmp))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn11_d9723c64de09d287610ec58014e8b2b8");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn12_0d266dfcfa18dea174b0cf2c2651b847() {
        assertEval("argv <- list('incomplete final line found by readTableHeader on 'foo4'', quote(read.table('foo4', header = TRUE))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn12_0d266dfcfa18dea174b0cf2c2651b847");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn2_1c1c654619fed5304352eb9a6edb4c1f() {
        assertEval("argv <- list('bessel_y(2,nu=288.12): precision lost in result', quote(besselY(2, nu = nu <- seq(3, 300, len = 51)))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn2_1c1c654619fed5304352eb9a6edb4c1f");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn3_f8a16d1072620ab00a1a523d135e9be1() {
        assertEval("argv <- list('glm.fit: algorithm stopped at boundary value', NULL); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn3_f8a16d1072620ab00a1a523d135e9be1");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn4_70190ede9f79f44b95547557bcb59d52() {
        assertEval("argv <- list('header and 'col.names' are of different lengths', quote(read.table('foo3', header = TRUE, col.names = letters[1:4]))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn4_70190ede9f79f44b95547557bcb59d52");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn5_7650df3f6fd1bca4622fc4f01a7de0b6() {
        assertEval("argv <- list('‘graphics’ namespace cannot be unloaded:\\n  namespace ‘graphics’ is imported by ‘stats’ so cannot be unloaded', NULL); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn5_7650df3f6fd1bca4622fc4f01a7de0b6");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn6_76e512cadea250843b7d50181d84701c() {
        assertEval("argv <- list('NaNs produced', quote(log(ifelse(y == 0, 1, y/mu)))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn6_76e512cadea250843b7d50181d84701c");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn7_54c04621103e396452234ead834cb506() {
        assertEval("argv <- list(''drop' argument will be ignored', quote(`[.data.frame`(women, 'height', drop = FALSE))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn7_54c04621103e396452234ead834cb506");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn8_3da9fa8d645a6d1c3b36e05705a8f985() {
        assertEval("argv <- list('prediction from a rank-deficient fit may be misleading', quote(predict.lm(object, newdata, se.fit, scale = residual.scale, type = ifelse(type == 'link', 'response', type), terms = terms, na.action = na.action))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn8_3da9fa8d645a6d1c3b36e05705a8f985");
    }

    @Test
    public void TestrGenBuiltindfltWarn_testdfltWarn9_b5132a898a7b9fe484376a1938df66d5() {
        assertEval("argv <- list('1 y value <= 0 omitted from logarithmic plot', quote(xy.coords(x, NULL, log = log))); .Internal(.dfltWarn(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltindfltWarn_testdfltWarn9_b5132a898a7b9fe484376a1938df66d5");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag1_2cf53a7b80c10d00d3e9d568fa60f11e() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 4L, 1L), .Dim = 5L), 5L, 5L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag1_2cf53a7b80c10d00d3e9d568fa60f11e");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag10_6936852e307afa7eb18ec9f64aa19841() {
        assertEval("argv <- list(structure(c(-268.831499270454, 5.6415423423032, 14.3443760756611, -6.07661158322081, -7.61383061715105, 3.28804653251744, 13.7579673886322, 2.89856286229343, -9.75713414208632, 4.61320568224165), .Names = c('(Intercept)', 'block2', 'block3', 'block4', 'block5', 'block6', 'N1', 'P1', 'K1', 'N1:P1')), 24L, 10L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag10_6936852e307afa7eb18ec9f64aa19841");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag11_fb2b9ee0e9ec83629adcc07220610963() {
        assertEval("argv <- list(structure(c(0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285, 0.00284900284900285), .Dim = 10L, .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))), 10L, 10L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag11_fb2b9ee0e9ec83629adcc07220610963");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag12_e5201367e1710a44426acb3e705dbb58() {
        assertEval("argv <- list(list(1, 1, 1), 3L, 3L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag12_e5201367e1710a44426acb3e705dbb58");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag13_f65d784ab56b6f9ec814137fc2e420e2() {
        assertEval("argv <- list(list(), 0L, 0L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag13_f65d784ab56b6f9ec814137fc2e420e2");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag14_a9a938a94b31748f71849e3ce0d47f26() {
        assertEval("argv <- list(character(0), 0L, 0L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag14_a9a938a94b31748f71849e3ce0d47f26");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag16_22bea56fe4e0be79699b2ba54f28f82f() {
        assertEval("argv <- structure(list(x = structure(c(25707905.8534307, -1396341.94003231,     107590.673887047, 1282255.68405509, 990152.618275206, -1396341.94003231,     23207928.6679172, -602948.854263649, -750498.277752946, -97557.914173682,     107590.673887047, -602948.854263649, 25224155.0868383, -1446668.75346658,     3085225.85187065, 1282255.68405509, -750498.277752946, -1446668.75346658,     22221045.9258222, -1069907.07413189, 990152.618275206, -97557.914173682,     3085225.85187065, -1069907.07413189, 27302989.4318488), .Dim = c(5L,     5L))), .Names = 'x');do.call('diag', argv)");
        check("TestrGenBuiltindiag_testdiag16_22bea56fe4e0be79699b2ba54f28f82f");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag2_1c9b37b819d68b346b4c55be76ce2c25() {
        assertEval("argv <- list(NULL, 0L, 0L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag2_1c9b37b819d68b346b4c55be76ce2c25");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag3_2b525912e9ac50630dc47425ecf6c99e() {
        assertEval("argv <- list(structure(c(0.00258017518312032, 0.00371592854270272, 4.74358130918145e-05, 0.00490111130607204, 0.000101990092933588, 0.00674107947251412, 0.000239828967315095, 0.00980847069198632, 0.000617541923597065, 0.0155189333862593, 0.00178497855501229, 0.0281274123275302, 0.00633033372222146, 0.0642581517771313, 0.0351608933185668, 0.151097171670205, 0.967636582993474, 0.0809667077153405), .Names = c('Xr1', 'Xr2', 'Xr3', 'Xr4', 'Xr5', 'Xr6', 'Xr7', 'Xr8', 'Xr9', 'Xr10', 'Xr11', 'Xr12', 'Xr13', 'Xr14', 'Xr15', 'Xr16', 'Xr17', 'Xr18')), 18L, 18L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag3_2b525912e9ac50630dc47425ecf6c99e");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag4_0dea8eecba555ce5748bf6bce5e066fb() {
        assertEval("argv <- list(c(FALSE, TRUE, TRUE, TRUE), 4L, 4L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag4_0dea8eecba555ce5748bf6bce5e066fb");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag5_f123c582c1ff3d8b1fddd02682c8af84() {
        assertEval("argv <- list(c(-2.80063713410797-0i, 2.40432724210166-0i, -1.40502612938985+0i, 1.39344241164891+0i, 0.785422253492721+0i), 5L, 5L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag5_f123c582c1ff3d8b1fddd02682c8af84");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag6_5989b4cdb499e5cca58c45e3e7681a2d() {
        assertEval("argv <- list(structure(c(0.662193594830517, 0.883082096514931, 0.80211645621425, 0.806993241239092, 0.593615611337433, 0.55837479933202, 0.531727869384763, 0.696607367099979, 0.506321785494117, 0.489681023915914, 0.742249020738322, 0.65965217395585, 0.700437655250271, 0.80388520340336, 0.834325796707322, 0.741083805719802, 0.77320911661894, 0.76968452857621, 0.872531808824412, 0.769100148773066, 0.763385216756006, 0.775173380089108, 0.705125971098107, 0.706916424657676), .Names = c('VisualPerception', 'Cubes', 'PaperFormBoard', 'Flags', 'GeneralInformation', 'PargraphComprehension', 'SentenceCompletion', 'WordClassification', 'WordMeaning', 'Addition', 'Code', 'CountingDots', 'StraightCurvedCapitals', 'WordRecognition', 'NumberRecognition', 'FigureRecognition', 'ObjectNumber', 'NumberFigure', 'FigureWord', 'Deduction', 'NumericalPuzzles', 'ProblemReasoning', 'SeriesCompletion', 'ArithmeticProblems')), 24L, 24L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag6_5989b4cdb499e5cca58c45e3e7681a2d");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag7_a2bfe1c42bd44e520df419a87fba51e1() {
        assertEval("argv <- list(1, 0L, 0L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag7_a2bfe1c42bd44e520df419a87fba51e1");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag8_75c15ca9b4479ad1ad1d9365178ff7f9() {
        assertEval("argv <- list(structure(c(0.553622032575332, 1.83583330034692, 0.540309168173204, 0.347171956892285), .Names = c('A', 'B', 'C', 'D')), 4L, 4L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag8_75c15ca9b4479ad1ad1d9365178ff7f9");
    }

    @Test
    public void TestrGenBuiltindiag_testdiag9_9a54cc1fac7d63b62cf56fea77305c8f() {
        assertEval("argv <- list(structure(c(-875.251472917967, 12.8319913648351, -28.2155558559225, -27.6015982680416, -70.4377976184188, -98.9293825275015, 32.8291346503008, -20.6544753576079, 26.3486263439148, -42.5376299218819, -131.164911564755, -12.7775395276621, 3.34207338870892, -6.39516049903921, 5.97199502480298, 9.16451921253422, 4.70193189358059), .Names = c('(Intercept)', 'BII', 'BIII', 'BIV', 'BV', 'BVI', 'VMarvellous', 'VVictory', 'N0.2cwt', 'N0.4cwt', 'N0.6cwt', 'VMarvellous:N0.2cwt', 'VVictory:N0.2cwt', 'VMarvellous:N0.4cwt', 'VVictory:N0.4cwt', 'VMarvellous:N0.6cwt', 'VVictory:N0.6cwt')), 71L, 17L); .Internal(diag(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindiag_testdiag9_9a54cc1fac7d63b62cf56fea77305c8f");
    }

    @Test
    public void TestrGenBuiltindiagassign__testdiagassign_1_eb4a1fd1bfc4dabc0f48e829cd2ba3cc() {
        assertEval("argv <- structure(list(x = structure(numeric(0), .Dim = c(0L,     4L)), value = numeric(0)), .Names = c('x', 'value'));do.call('diag<-', argv)");
        check("TestrGenBuiltindiagassign__testdiagassign_1_eb4a1fd1bfc4dabc0f48e829cd2ba3cc");
    }

    @Test
    public void TestrGenBuiltindiagassign__testdiagassign_3_ffed8bed15c8d532e7c88d196cc8b9c6() {
        assertEval("argv <- structure(list(x = structure(c(0, 0, 0, 0, 0, 0, 0.215098376664487,     0, 0, 0, -1.65637081299852, 0, 0, 0, 0, 0, -0.414332953459613,     0, 0, -1.40806198482254, 0, 0, 0, 0, 0, 0, 0, 0, -0.856525152312943,     0, 0, 0, 0, 0, 0, 0, 0, -0.0763379828255197, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0.566886579526715, 0, 0, 0, 0, 0, 0.6662762965807,     -1.0108032000459, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.27827012429586,     0, 0, 0, 0, 0, 2.58429591514953, 0, 0, 2.11417636787577,     -0.433540727336897, 0, -1.2168073873217, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, -0.739899226286947, 0, 1.63831140634344, 0.940796284653334,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.27827012429586, 0, 0,     0, -1.53221105110478, 0, 0.0842634801991399, 0, 0, 0, 0,     0, 0, 0, 0.46436714586526, 0, 0, 0.215098376664487, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.20702771149749, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, -1.53221105110478, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0.797128455296496, 0, 0, -0.856525152312943,     0.566886579526715, 0, -0.739899226286947, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, -0.53717285365944, 0, 0, -1.78309634885893,     0, 0, 0, 0, 0, 0.0842634801991399, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0.0654058852501743, 0, 0, 0, -1.65637081299852, 0,     0, 0, 1.63831140634344, 0, 0, 0, 0, 0, 0, -0.211859819992765,     1.70777682244235, 0, 0, 0.899304333370124, 0, 0, 0.696790958441438,     0, 0, 0, 0, 2.58429591514953, 0.940796284653334, 0, 0, 0,     0, 0, -0.211859819992765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 1.70777682244235, 0, 0, 0, 0, 0,     0, 2.70925832108517, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, -0.218019634714546, 0, 0, 0.6662762965807,     2.11417636787577, 0, 0, 1.20702771149749, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, -0.431663950618028, 0, 0, 0, -1.0108032000459,     -0.433540727336897, 0, 0, 0, 0, 0, 0, 0.899304333370124,     0, 0, 0, 0, 0, 1.84823959064644, 0, 0, 0, -0.414332953459613,     0, 0, 0, 0, 0, 0, 0, -0.53717285365944, 0.0654058852501743,     0, 0, 0, 0, 0, 1.84823959064644, 0.487718131057368, 0, 0,     0, 0, -0.0763379828255197, 0, -1.2168073873217, 0, 0.46436714586526,     0, 0, 0, 0, 0, 0, 2.70925832108517, 0, 0, 0, 0, 0, 0, 0.89955019874646,     0, 0, 0, 0, 0, 0, 0, 0.797128455296496, 0, 0, 0.696790958441438,     0, 0, 0, -0.431663950618028, 0, 0, 0, 0, 0, -1.40806198482254,     0, 0, 0, 0, 0, 0, 0, -1.78309634885893, 0, 0, 0, 0, -0.218019634714546,     0, 0, 0, 0.89955019874646, 0, 0), .Dim = c(20L, 20L)), value = 1),     .Names = c('x', 'value'));do.call('diag<-', argv)");
        check("TestrGenBuiltindiagassign__testdiagassign_3_ffed8bed15c8d532e7c88d196cc8b9c6");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma1_e32f802ab40f75a90f63bcc0b243b64f() {
        assertEval("argv <- list(structure(c(3.80516394437114, 12.8051639443711, 15.8051639443711, 6.80516394437114, 6.80516394437114, 14.8051639443711, 21.8051639443711, 23.8051639443711, 7.80516394437114, 7.80516394437114, 16.8051639443711, 8.80516394437114, 15.8051639443711, 7.80516394437114, 33.8051639443711, 54.8051639443711, 58.8051639443711, 15.8051639443711, 17.8051639443711, 17.8051639443711, 18.8051639443711, 41.8051639443711, 44.8051639443711, 47.8051639443711, 9.80516394437114, 24.8051639443711, 24.8051639443711, 29.8051639443711, 35.8051639443711, 37.8051639443711, 39.8051639443711, 4.80516394437114, 6.80516394437114, 12.8051639443711, 25.8051639443711, 46.8051639443711, 6.80516394437114, 7.80516394437114, 7.80516394437114, 10.8051639443711, 14.8051639443711, 24.8051639443711, 26.8051639443711, 33.8051639443711, 54.8051639443711, 55.8051639443711, 6.80516394437114, 6.80516394437114, 12.8051639443711, 18.8051639443711, 20.8051639443711, 9.80516394437114, 14.8051639443711, 15.8051639443711, 21.8051639443711, 48.8051639443711, 49.8051639443711, 61.8051639443711, 82.8051639443711, 3.80516394437114, 1.80516394437114, 3.80516394437114, 4.80516394437114, 6.80516394437114, 11.8051639443711, 15.8051639443711, 22.8051639443711, 37.8051639443711, 41.8051639443711, 7.80516394437114, 18.8051639443711, 68.8051639443711, 1.80516394437114, 1.80516394437114, 3.80516394437114, 8.80516394437114, 12.8051639443711, 13.8051639443711, 1.80516394437114, 1.80516394437114, 6.80516394437114, 6.80516394437114, 6.80516394437114, 12.8051639443711, 18.8051639443711, 4.80516394437114, 5.80516394437114, 23.8051639443711, 31.8051639443711, 37.8051639443711, 9.80516394437114, 1.80516394437114, 2.80516394437114, 6.80516394437114, 8.80516394437114, 17.8051639443711, 28.8051639443711, 1.80516394437114, 31.8051639443711, 11.8051639443711, 15.8051639443711, 28.8051639443711, 42.8051639443711, 70.8051639443711, 26.8051639443711, 11.8051639443711, 12.8051639443711, 21.8051639443711, 34.8051639443711, 6.80516394437114, 8.80516394437114, 1.80516394437114, 2.80516394437114, 6.80516394437114, 6.80516394437114, 6.80516394437114, 6.80516394437114, 8.80516394437114, 12.8051639443711, 16.8051639443711, 6.80516394437114, 15.8051639443711, 7.80516394437114, 7.80516394437114, 8.80516394437114, 29.8051639443711, 1.80516394437114, 6.80516394437114, 15.8051639443711, 3.80516394437114, 3.80516394437114, 4.80516394437114, 9.80516394437114, 11.8051639443711, 13.8051639443711, 2.80516394437114, 2.80516394437114, 10.8051639443711, 23.8051639443711, 4.80516394437114, 4.80516394437114, 6.80516394437114, 16.8051639443711, 19.8051639443711, 23.8051639443711, 38.8051639443711), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146')));digamma(argv[[1]]);");
        check("TestrGenBuiltindigamma_testdigamma1_e32f802ab40f75a90f63bcc0b243b64f");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma2_38076dd6fdca87ce2c2023a9c5f4acae() {
        assertEval("argv <- list(structure(c(9.16602330897621, 9.16602330897621, 1.16602330897621, 1.16602330897621, 3.16602330897621, 3.16602330897621, 6.16602330897621, 6.16602330897621, 6.16602330897621, 6.16602330897621, 2.16602330897621, 2.16602330897621, 8.16602330897621, 8.16602330897621, 1.16602330897621, 1.16602330897621, 7.16602330897621, 7.16602330897621, 19.1660233089762, 19.1660233089762, 2.16602330897621, 2.16602330897621), .Names = c('1', '1.1', '2', '2.1', '3', '3.1', '4', '4.1', '5', '5.1', '6', '6.1', '7', '7.1', '8', '8.1', '9', '9.1', '10', '10.1', '11', '11.1')));digamma(argv[[1]]);");
        check("TestrGenBuiltindigamma_testdigamma2_38076dd6fdca87ce2c2023a9c5f4acae");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma3_35bc2b429287d7c3663bca301962ffee() {
        assertEval("argv <- list(FALSE);digamma(argv[[1]]);");
        check("TestrGenBuiltindigamma_testdigamma3_35bc2b429287d7c3663bca301962ffee");
    }

    @Test
    public void TestrGenBuiltindigamma_testdigamma4_cf92788d674cba9c1ad909bfdf8fed1c() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));digamma(argv[[1]]);");
        check("TestrGenBuiltindigamma_testdigamma4_cf92788d674cba9c1ad909bfdf8fed1c");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign1_3eead01e130c9d1d0b1ec749a83e79c2() {
        assertEval("argv <- list(structure(c(300, 3000, 400, 4000), .Dim = c(2L, 2L, 1L)), value = c(2, 2, 1));`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign1_3eead01e130c9d1d0b1ec749a83e79c2");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign10_f061f5e4e077d48fa7f9fcb163102022() {
        assertEval("argv <- list(structure(c(1, 0.870865388077469, -0.224541709419829, -0.331803324650025, -0.493630926048296, -0.413999601257247, 0.00943216495885559, -0.569185666759019, 0.183501080823027, -0.658299946719611, -0.563901271084431, -0.104454834691276, 0.715158727414282, -0.0805825981616209, -0.773816895694757, -0.253034783981378, -0.783775136777695, -0.439357063536005, -0.941680494841322, 0.227158249206389, -0.50752863656701, -0.0658964161620369, -0.0689244902651806, 0.185611518464636, 0.378167766177418, -0.0629003710494349, 0.487507055153686, -0.148876486655171), .Dim = c(1L, 28L)), value = c(1, 28));`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign10_f061f5e4e077d48fa7f9fcb163102022");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign11_70bfb5d8e830bdd4b6b23b9e8f39a2eb() {
        assertEval("argv <- list(structure(NA, .Dim = c(1L, 1L)), value = c(1L, 1L));`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign11_70bfb5d8e830bdd4b6b23b9e8f39a2eb");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign2_179396ed607465d5099dd6183bdfe3a5() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L)), value = c(0L, 0L));`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign2_179396ed607465d5099dd6183bdfe3a5");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign3_23de6f8b26a12ea0166df91fdae43298() {
        assertEval("argv <- list(structure(1:12, .Dim = 12L), value = 12L);`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign3_23de6f8b26a12ea0166df91fdae43298");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign4_c28644b1576feb38f0fb71ea8b49996c() {
        assertEval("argv <- list(structure(list(1:3, 4:6, 3.14159265358979, c('a', 'b', 'c')), .Dim = c(2L, 2L)), value = c(2, 2));`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign4_c28644b1576feb38f0fb71ea8b49996c");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign5_1e03916cb62f6bb0e9d7b2d2f163c66f() {
        assertEval("argv <- list(structure(list(NULL, NULL, NULL, NULL, NULL, NULL), .Dim = 2:3), value = c(2, 3));`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign5_1e03916cb62f6bb0e9d7b2d2f163c66f");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign6_eecec1df4c04a202c8ed7f2c0b42d49c() {
        assertEval("argv <- list(structure(list(1L, 3.14159265358979, 3+5i, 'testit', TRUE, structure(1L, .Label = 'foo', class = 'factor')), .Dim = c(1L, 6L)), value = c(1, 6));`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign6_eecec1df4c04a202c8ed7f2c0b42d49c");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign7_1583db6ffa1027613c4879b74aa827a7() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4), value = 3:4);`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign7_1583db6ffa1027613c4879b74aa827a7");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign8_6a4f2e50c1edf9a2e317a8810f1618b7() {
        assertEval("argv <- list(NULL, NULL);`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign8_6a4f2e50c1edf9a2e317a8810f1618b7");
    }

    @Test
    public void TestrGenBuiltindimassign_testdimassign9_4c2875c3873ef5256c0b15362aec5209() {
        assertEval("argv <- list(structure(c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 1L, 2L, 3L, 4L, 5L, 6L, 7L), .Dim = c(3L, 4L, 2L)), value = c(3, 4, 2));`dim<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimassign_testdimassign9_4c2875c3873ef5256c0b15362aec5209");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames10_da41734c9ce715711b88d9e542001083() {
        assertEval("argv <- list(structure(list(Ozone = c(41L, 36L, 12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L, 14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L, 45L, 115L, 37L), Solar.R = c(190L, 118L, 149L, 313L, NA, NA, 299L, 99L, 19L, 194L, NA, 256L, 290L, 274L, 65L, 334L, 307L, 78L, 322L, 44L, 8L, 320L, 25L, 92L, 66L, 266L, NA, 13L, 252L, 223L, 279L), Wind = c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8, 20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5, 9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4), Temp = c(67L, 72L, 74L, 62L, 56L, 66L, 65L, 59L, 61L, 69L, 74L, 69L, 66L, 68L, 58L, 64L, 66L, 57L, 68L, 62L, 59L, 73L, 61L, 61L, 57L, 58L, 57L, 67L, 81L, 79L, 76L), Month = c(5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L), Day = 1:31, Oz.Z = c(0.782229292792786, 0.557251841325834, -0.522639925715534, -0.252666983955192, NA, 0.197287918978711, -0.0276895324882403, -0.207671493661802, -0.702621886889095, NA, -0.747617377182486, -0.342657964541973, -0.567635416008924, -0.432648945128753, -0.252666983955192, -0.432648945128753, 0.467260860739053, -0.792612867475876, 0.287278899565492, -0.567635416008924, -1.01759031894283, -0.567635416008924, -0.882603848062657, 0.377269880152273, NA, NA, NA, -0.0276895324882403, 0.962211253966347, 4.11189557450367, 0.602247331619224)), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day', 'Oz.Z'), row.names = c(NA, 31L), class = 'data.frame'));dimnames(argv[[1]]);");
        check("TestrGenBuiltindimnames_testdimnames10_da41734c9ce715711b88d9e542001083");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames11_f44840df0061cd2baa8b1ca6f6ae5e28() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));dimnames(argv[[1]]);");
        check("TestrGenBuiltindimnames_testdimnames11_f44840df0061cd2baa8b1ca6f6ae5e28");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames16_d637972cb33388cff355751ef752ceac() {
        assertEval("argv <- list(structure(c('4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.0-3', '4.0-3', '4.0-3', '4.0-3', '4.0-3', '4.0-2', '4.0-2', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '3.1-55', '3.1-55', '3.1-55', '3.1-54', '3.1-53', '3.1-53', '3.1-52', '3.1-51', NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 'The C and R code has been reformatted for legibility.', 'The old compatibility function rpconvert() has been removed.', 'The cross-validation functions allow for user interrupt at the end\\nof evaluating each split.', 'Variable Reliability in data set car90 is corrected to be an\\nordered factor, as documented.', 'Surrogate splits are now considered only if they send two or more\\ncases _with non-zero weight_ each way.  For numeric/ordinal\\nvariables the restriction to non-zero weights is new: for\\ncategorical variables this is a new restriction.', 'Surrogate splits which improve only by rounding error over the\\ndefault split are no longer returned.  Where weights and missing\\nvalues are present, the splits component for some of these was not\\nreturned correctly.', 'A fit of class \\'rpart\\' now contains a component for variable\\n‘importance’, which is reported by the summary() method.', 'The text() method gains a minlength argument, like the labels()\\nmethod.  This adds finer control: the default remains pretty =\\nNULL, minlength = 1L.', 'The handling of fits with zero and fractional weights has been\\ncorrected: the results may be slightly different (or even\\nsubstantially different when the proportion of zero weights is\\nlarge).', 'Some memory leaks have been plugged.', 'There is a second vignette, longintro.Rnw, a version of the\\noriginal Mayo Tecnical Report on rpart.', 'Added dataset car90, a corrected version of the S-PLUS dataset\\ncar.all (used with permission).', 'This version does not use paste0{} and so works with R 2.14.x.', 'Merged in a set of Splus code changes that had accumulated at Mayo\\nover the course of a decade. The primary one is a change in how\\nindexing is done in the underlying C code, which leads to a major\\nspeed increase for large data sets.  Essentially, for the lower\\nleaves all our time used to be eaten up by bookkeeping, and this\\nwas replaced by a different approach.  The primary routine also\\nuses .Call{} so as to be more memory efficient.', 'The other major change was an error for asymmetric loss matrices,\\nprompted by a user query.  With L=loss asymmetric, the altered\\npriors were computed incorrectly - they were using L' instead of L.\\nUpshot - the tree would not not necessarily choose optimal splits\\nfor the given loss matrix.  Once chosen, splits were evaluated\\ncorrectly.  The printed “improvement” values are of course the\\nwrong ones as well.  It is interesting that for my little test\\ncase, with L quite asymmetric, the early splits in the tree are\\nunchanged - a good split still looks good.', 'Add the return.all argument to xpred.rpart().', 'Added a set of formal tests, i.e., cases with known answers to\\nwhich we can compare.', 'Add a usercode vignette, explaining how to add user defined\\nsplitting functions.', 'The class method now also returns the node probability.', 'Add the stagec data set, used in some tests.', 'The plot.rpart routine needs to store a value that will be visible\\nto the rpartco routine at a later time.  This is now done in an\\nenvironment in the namespace.', 'Force use of registered symbols in R >= 2.16.0', 'Update Polish translations.', 'Work on message formats.', 'Add Polish translations', 'rpart, rpart.matrix: allow backticks in formulae.', 'tests/backtick.R: regession test', 'src/xval.c: ensure unused code is not compiled in.', 'Change description of margin in ?plot.rpart as suggested by Bill\\nVenables.'), .Dim = c(29L, 4L)));dimnames(argv[[1]]);");
        check("TestrGenBuiltindimnames_testdimnames16_d637972cb33388cff355751ef752ceac");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames18_04ea7e0965e5d50325e7f2cb47d24b91() {
        assertEval("argv <- list(structure(list(Ozone = c(39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA, 44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA, 45L, 168L, 73L, NA, 76L, 118L, 84L, 85L), Solar.R = c(83L, 24L, 77L, NA, NA, NA, 255L, 229L, 207L, 222L, 137L, 192L, 273L, 157L, 64L, 71L, 51L, 115L, 244L, 190L, 259L, 36L, 255L, 212L, 238L, 215L, 153L, 203L, 225L, 237L, 188L), Wind = c(6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3, 8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9, 10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3, 6.3), Temp = c(81L, 81L, 82L, 86L, 85L, 87L, 89L, 90L, 90L, 92L, 86L, 86L, 82L, 80L, 79L, 77L, 79L, 76L, 78L, 78L, 77L, 72L, 75L, 79L, 81L, 86L, 88L, 97L, 94L, 96L, 94L), Month = c(8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L), Day = 1:31, Oz.Z = c(-0.528248463997741, -1.28427378861836, -1.10786787954022, 0.454584458009066, -0.629051840613824, 0.152174328160817, 1.56342160078598, 0.731793743703293, 1.26101147093773, NA, NA, -0.402244243227638, -0.805457749691969, 0.126973484006797, NA, -0.956662814616093, -0.0242315809173275, -0.931461970462072, -0.729855217229907, -0.402244243227638, -0.981863658770114, -1.28427378861836, NA, -0.377043399073617, 2.72266043187093, 0.328580237238962, NA, 0.404182769701024, 1.46261822416989, 0.60578952293319, 0.63099036708721)), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day', 'Oz.Z'), row.names = 93:123, class = 'data.frame'));dimnames(argv[[1]]);");
        check("TestrGenBuiltindimnames_testdimnames18_04ea7e0965e5d50325e7f2cb47d24b91");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames21_c04fd9b9915522614a7bfc6b06ffd8f2() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 1, 2), Deviance = c(12.2441566485997, 32.825622681839, 8.44399377410362, 11.9670615295804), AIC = c(73.9421143635373, 92.5235803967766, 72.1419514890412, 77.665019244518)), .Names = c('Df', 'Deviance', 'AIC'), row.names = c('<none>', '- M.user', '+ Temp', '+ Soft'), class = c('anova', 'data.frame')));dimnames(argv[[1]]);");
        check("TestrGenBuiltindimnames_testdimnames21_c04fd9b9915522614a7bfc6b06ffd8f2");
    }

    @Test
    public void TestrGenBuiltindimnames_testdimnames8_28f564b6e9cdfd539566df046ae8ab02() {
        assertEval("argv <- list(structure(list(visible = c(TRUE, TRUE, TRUE, TRUE, TRUE), from = structure(c(2L, 2L, 2L, 2L, 2L), .Label = c('CheckExEnv', 'package:base', 'package:datasets', 'package:graphics', 'package:grDevices', 'package:methods', 'package:stats', 'package:utils'), class = 'factor')), .Names = c('visible', 'from'), row.names = c('[[.data.frame', '[[.Date', '[[.factor', '[[.numeric_version', '[[.POSIXct'), class = 'data.frame'));dimnames(argv[[1]]);");
        check("TestrGenBuiltindimnames_testdimnames8_28f564b6e9cdfd539566df046ae8ab02");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign1_85a4bcd14ac2f0302bbcd5b6ee789a64() {
        assertEval("argv <- list(structure(c(300, 3000, 400, 4000), .Dim = c(2L, 2L, 1L), .Dimnames = list(c('happy', 'sad'), NULL, '')), value = list(c('happy', 'sad'), NULL, ''));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign1_85a4bcd14ac2f0302bbcd5b6ee789a64");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign10_fecdd3f25422c943a3c93559f1d67428() {
        assertEval("argv <- list(structure(1:9, .Dim = c(3L, 3L), .Dimnames = list(c('x', 'y', NA), c('1', NA, '3'))), value = list(c('x', 'y', NA), c('1', NA, '3')));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign10_fecdd3f25422c943a3c93559f1d67428");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign11_195379d284b3534b1d8ca733a2a27f13() {
        assertEval("argv <- list(structure(c(0-0.5i, 0-0.577350269189626i, 0-0.707106781186548i, 0-1i, Inf+0i, 1+0i, 0.707106781186548+0i, 0.577350269189626+0i, 0.5+0i, 0.447213595499958+0i, 0.408248290463863+0i, 0.377964473009227+0i, 0.353553390593274+0i, 0.333333333333333+0i, 0.316227766016838+0i, 0.301511344577764+0i, 0.288675134594813+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 1+0i, 0+2i, 0+1.73205080756888i, 0+1.41421356237309i, 0+1i, 0+0i, 1+0i, 1.41421356237309+0i, 1.73205080756888+0i, 2+0i, 2.23606797749979+0i, 2.44948974278318+0i, 2.64575131106459+0i, 2.82842712474619+0i, 3+0i, 3.16227766016838+0i, 3.3166247903554+0i, 3.46410161513775+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, 0-8i, 0-5.19615242270663i, 0-2.82842712474619i, 0-1i, 0+0i, 1+0i, 2.82842712474619+0i, 5.19615242270663+0i, 8+0i, 11.1803398874989+0i, 14.6969384566991+0i, 18.5202591774521+0i, 22.6274169979695+0i, 27+0i, 31.6227766016838+0i, 36.4828726939094+0i, 41.5692193816531+0i, 16+0i, 9+0i, 4+0i, 1+0i, 0+0i, 1+0i, 4+0i, 9+0i, 16+0i, 25+0i, 36+0i, 49+0i, 64+0i, 81+0i, 100+0i, 121+0i, 144+0i), .Dim = c(17L, 6L), .Dimnames = structure(list(c('-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'), `^` = c('-0.5', '0', '0.5', '1', '1.5', '2')), .Names = c('', '^'))), value = structure(list(c('-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'), `^` = c('-0.5', '0', '0.5', '1', '1.5', '2')), .Names = c('', '^')));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign11_195379d284b3534b1d8ca733a2a27f13");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign12_320da4e5ed35221c7e08dc50b8d5848d() {
        assertEval("argv <- list(structure(list(fair = c(326L, 688L, 343L, 98L), red = c(38L, 116L, 84L, 48L), medium = c(241L, 584L, 909L, 403L), dark = c(110L, 188L, 412L, 681L), black = c(3L, 4L, 26L, 85L)), .Names = c('fair', 'red', 'medium', 'dark', 'black'), class = 'data.frame', row.names = c('blue', 'light', 'medium', 'dark')), value = list(c('blue', 'light', 'medium', 'dark'), c('F', 'R', 'M', 'D', 'B')));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign12_320da4e5ed35221c7e08dc50b8d5848d");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign13_a76c2982657b5ba62c5d7b8b5e1726a1() {
        assertEval("argv <- list(structure(c(4L, 96L, 0L, 99L, 0L, 1L, 91L, 0L, 9L, 99L, 0L, 1L, 4L, 0L, 96L, 82L, 18L, 0L, 87L, 13L, 0L, 92L, 0L, 8L, 2L, 1L, 97L, 81L, 19L, 0L, 44L, 56L, 0L, 12L, 88L, 0L, 22L, 78L, 0L, 5L, 95L, 0L, 1L, 99L, 0L, 57L, 43L, 0L, 24L, 76L, 0L, 1L, 99L, 0L, 13L, 87L, 0L, 2L, 0L, 98L, 4L, 0L, 96L, 4L, 0L, 96L, 8L, 0L, 92L, 2L, 0L, 98L), .Dim = c(3L, 24L), .Dimnames = structure(list(cluster = c('1', '2', '3'), obs = c('  30', ' 243', ' 245', ' 309', ' 562', ' 610', ' 708', ' 727', ' 770', '1038', '1081', '1120', '1248', '1289', '1430', '1610', '1644', '1683', '1922', '2070', '2380', '2662', '2821', '2983')), .Names = c('cluster', 'obs'))), value = structure(list(cluster = c('1', '2', '3'), obs = c('  30', ' 243', ' 245', ' 309', ' 562', ' 610', ' 708', ' 727', ' 770', '1038', '1081', '1120', '1248', '1289', '1430', '1610', '1644', '1683', '1922', '2070', '2380', '2662', '2821', '2983')), .Names = c('cluster', 'obs')));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign13_a76c2982657b5ba62c5d7b8b5e1726a1");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign14_79176686a8205a5b942a062a6f6cdf29() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0), .Dim = c(2L, 2L), .Dimnames = list(NULL, c('A', 'B'))), value = list(NULL, c('A', 'B')));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign14_79176686a8205a5b942a062a6f6cdf29");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign15_2fec4a61520a7cdef28d061f2124d41e() {
        assertEval("argv <- list(structure(c('NULL', 'double', 'integer', 'complex', 'list', 'list', 'pairlist', 'builtin', 'closure', 'symbol', 'symbol', 'language', 'language', 'symbol', 'symbol', 'NULL', 'double', 'integer', 'complex', 'list', 'list', 'pairlist', 'function', 'function', 'symbol', 'symbol', 'language', 'language', 'symbol', 'symbol', 'NULL', 'numeric', 'numeric', 'complex', 'list', 'list', 'pairlist', 'function', 'function', 'name', 'name', 'call', '(', 'name', 'name'), .Dim = c(15L, 3L), .Dimnames = list(    c('NULL', '1', '1:1', '1i', 'list(1)', 'data.frame(x = 1)', 'pairlist(pi)', 'c', 'lm', 'formals(lm)[[1]]', 'formals(lm)[[2]]', 'y ~ x', 'expression((1))[[1]]', '(y ~ x)[[1]]', 'expression(x <- pi)[[1]][[1]]'), c('typeof(.)', 'storage.mode(.)', 'mode(.)'))), value = list(c('NULL', '1', '1:1', '1i', 'list(1)', 'data.frame(x = 1)', 'pairlist(pi)', 'c', 'lm', 'formals(lm)[[1]]', 'formals(lm)[[2]]', 'y ~ x', 'expression((1))[[1]]', '(y ~ x)[[1]]', 'expression(x <- pi)[[1]][[1]]'), c('typeof(.)', 'storage.mode(.)', 'mode(.)')));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign15_2fec4a61520a7cdef28d061f2124d41e");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign2_4251a701e45fc2053b85ce4a2fc3b2f2() {
        assertEval("argv <- list(structure(1:24, .Dim = 2:4, .Dimnames = list(c('A', 'B'), NULL, NULL)), value = list(c('A', 'B'), NULL, NULL));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign2_4251a701e45fc2053b85ce4a2fc3b2f2");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign3_bcc5c5fefc9508adde5f97b51ea68153() {
        assertEval("argv <- list(structure(c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), .Dim = 3:4), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign3_bcc5c5fefc9508adde5f97b51ea68153");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign4_999d9b3fdc47c06993e12bafb99a00e0() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 20L)), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign4_999d9b3fdc47c06993e12bafb99a00e0");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign5_f8344ff7cf66a126932cf5f9a6e8e30b() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 25, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 38, 39, 0, 0, 0, 0, 0, 86, 0, 0, 0, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 114, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 128, 129, 0, 0, 132, 133, 0, 0, 0, 0, 138, 0, 0, 141, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 187, 0, 1, 0, 0, 0, 193, 0, 0, 196, 0, 0, 0, 1, 1, 202, 0, 0, 3, 0, 208, 0, 2, 0, 212, 0, 0, 0, 0, 0, 218, 0, 220, 1, 0, 0, 0, 0, 226, 227, 0, 2, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 250, 251, 0, 0, 0, 255, 256, 257, 0, 0, 0, 261, 262, 0, 264, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 275, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 287, 0, 0, 290, 0, 292, 293, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0, 0, 324, 0, 0, 0, 328, 329, 0, 0, 0, 0, 0, 335, 0, 0, 0, 339, 340, 0, 0, 343, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 354, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 0, 0, 0, 0, 0, 379, 0, 0, 0, 0, 0, 385, 0, 387, 0, 389, 0, 391, 0, 393, 394, 395, 396, 0, 0, 399, 0, 0, 0, 0, 405, 1, 407, 408, 0, 2, 0, 0, 0, 414, 415, 0, 417, 0, 0, 0, 0, 0, 0, 424, 0, 0, 0, 428, 1, 0, 431, 0, 433, 0, 435, 0, 0, 0, 439, 1, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 452, 0, 0, 0, 0, 457, 0, 0, 0, 461, 0, 463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 473, 474, 475, 0, 477, 0, 0, 0, 0, 482, 484, 0, 0, 487, 0, 0, 490, 491, 492, 0, 0, 0, 0, 0, 0, 499, 0, 501, 502, 0, 0, 0, 0, 0, 0, 0, 510, 0, 0, 0, 0, 515, 516, 0, 0, 519, 0, 0, 522, 524, 0, 0, 527, 528, 529, 530, 0, 532, 533, 0, 0, 0, 0, 538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 548, 0, 0, 0, 0, 553, 0, 555, 0, 0, 0, 0, 560, 561, 0, 564, 0, 566, 0, 568, 0, 570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 580, 0, 0, 0, 0, 0, 586, 0, 0, 589, 0, 0, 592, 593, 594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 608, 0, 0, 0, 0, 0, 614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 625, 626, 0, 628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 645, 1, 0, 648, 0, 0, 0, 0, 653, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 0, 0, 670, 671, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 695, 0, 697, 0, 0, 700, 0, 702, 0, 0, 0, 0, 0, 708, 0, 710, 711, 0, 0, 0, 0, 716, 0, 718, 0, 0, 0, 722, 0, 0, 0, 727, 728, 729, 0, 731, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 745, 0, 747, 0, 0, 750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 0, 0, 764, 0, 2, 0, 0, 0, 0, 0, 772, 0, 0, 0, 776, 777, 0, 0, 0, 1, 0, 0, 784, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 1), .Dim = c(39L, 19L)), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign5_f8344ff7cf66a126932cf5f9a6e8e30b");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign6_cb86439752d354feeda3bd68427a8c76() {
        assertEval("argv <- list(structure(c(-75, 0, 103, 0, 124, -1, 0, -2.77555756156289e-17, 0, -1.66533453693773e-16, 0, 0, 0, 178, 0), .Dim = c(5L, 3L)), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign6_cb86439752d354feeda3bd68427a8c76");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign7_47b50de393c11c26b384b2e6d037878c() {
        assertEval("argv <- list(structure(c(-0.0124410638457178, NA, 0.00669768951701377, NA, 0.00669754897238661, NA, 3.45036480545864, 2.52673085623929, 1, 2.64771226663238, 0.0632378108418818, 0.404928794321981), .Dim = c(2L, 6L), .Dimnames = list(c('linear', 'nonlin'), NULL)), value = list(c('linear', 'nonlin'), NULL));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign7_47b50de393c11c26b384b2e6d037878c");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign8_e437904b8ed2d74ac08e0e359881eb80() {
        assertEval("argv <- list(structure(c(300, 3000, 400, 4000), .Dim = c(2L, 2L)), value = NULL);`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign8_e437904b8ed2d74ac08e0e359881eb80");
    }

    @Test
    public void TestrGenBuiltindimnamesassign_testdimnamesassign9_26f351722c791bca85c2f501f0768985() {
        assertEval("argv <- list(structure(c(1259, 1360, 845, 1053, 719, 774, 390, 413), .Dim = c(2L, 4L), .Dimnames = list(c('a', 'b'), NULL)), value = list(c('a', 'b')));`dimnames<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltindimnamesassign_testdimnamesassign9_26f351722c791bca85c2f501f0768985");
    }

    @Test
    public void TestrGenBuiltindir_testdir1_1ac0962c74720bfc328a94da894c1c34() {
        assertEval("argv <- structure(list(path = '.', pattern = 'myTst_.*tar\\.gz$'),     .Names = c('path', 'pattern'));do.call('dir', argv)");
        check("TestrGenBuiltindir_testdir1_1ac0962c74720bfc328a94da894c1c34");
    }

    @Test
    public void TestrGenBuiltindircreate_testdircreate1_330a42e830fe7a29c1ad63a7b51eb8d2() {
        assertEval("argv <- list('/home/lzhao/tmp/RtmptS6o2G/translations', FALSE, FALSE, structure(511L, class = 'octmode')); .Internal(dir.create(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltindircreate_testdircreate1_330a42e830fe7a29c1ad63a7b51eb8d2");
    }

    @Test
    public void TestrGenBuiltindirname_testdirname4_ff3263428c608fd317fde2029f463c35() {
        assertEval("argv <- list(c('ChangeLog', 'DESCRIPTION', 'INDEX', 'MD5', 'NAMESPACE', 'PORTING', 'R/0aaa.R', 'R/agnes.q', 'R/clara.q', 'R/clusGap.R', 'R/coef.R', 'R/daisy.q', 'R/diana.q', 'R/ellipsoidhull.R', 'R/fanny.q', 'R/internal.R', 'R/mona.q', 'R/pam.q', 'R/plothier.q', 'R/plotpart.q', 'R/silhouette.R', 'R/zzz.R', 'README', 'data/agriculture.tab', 'data/animals.tab', 'data/chorSub.rda', 'data/flower.R', 'data/plantTraits.rda', 'data/pluton.tab', 'data/ruspini.tab', 'data/votes.repub.tab', 'data/xclara.rda', 'inst/CITATION', 'inst/po/de/LC_MESSAGES/R-cluster.mo', 'inst/po/en@quot/LC_MESSAGES/R-cluster.mo', 'inst/po/pl/LC_MESSAGES/R-cluster.mo', 'man/agnes.Rd', 'man/agnes.object.Rd', 'man/agriculture.Rd', 'man/animals.Rd', 'man/bannerplot.Rd', 'man/chorSub.Rd', 'man/clara.Rd', 'man/clara.object.Rd', 'man/clusGap.Rd', 'man/clusplot.default.Rd', 'man/clusplot.partition.Rd', 'man/cluster-internal.Rd', 'man/coef.hclust.Rd', 'man/daisy.Rd', 'man/diana.Rd', 'man/dissimilarity.object.Rd', 'man/ellipsoidhull.Rd', 'man/fanny.Rd', 'man/fanny.object.Rd', 'man/flower.Rd', 'man/lower.to.upper.tri.inds.Rd', 'man/mona.Rd', 'man/mona.object.Rd', 'man/pam.Rd', 'man/pam.object.Rd', 'man/partition.object.Rd', 'man/plantTraits.Rd', 'man/plot.agnes.Rd', 'man/plot.diana.Rd', 'man/plot.mona.Rd', 'man/plot.partition.Rd', 'man/pltree.Rd', 'man/pltree.twins.Rd', 'man/pluton.Rd', 'man/predict.ellipsoid.Rd', 'man/print.agnes.Rd', 'man/print.clara.Rd', 'man/print.diana.Rd', 'man/print.dissimilarity.Rd', 'man/print.fanny.Rd', 'man/print.mona.Rd', 'man/print.pam.Rd', 'man/ruspini.Rd', 'man/silhouette.Rd', 'man/sizeDiss.Rd', 'man/summary.agnes.Rd', 'man/summary.clara.Rd', 'man/summary.diana.Rd', 'man/summary.mona.Rd', 'man/summary.pam.Rd', 'man/twins.object.Rd', 'man/volume.ellipsoid.Rd', 'man/votes.repub.Rd', 'man/xclara.Rd', 'po/R-cluster.pot', 'po/R-de.po', 'po/R-en@quot.po', 'po/R-pl.po', 'po/update-me.sh', 'src/clara.c', 'src/cluster.h', 'src/daisy.f', 'src/dysta.f', 'src/fanny.c', 'src/ind_2.h', 'src/init.c', 'src/mona.f', 'src/pam.c', 'src/sildist.c', 'src/spannel.c', 'src/twins.c', 'tests/agnes-ex.R', 'tests/agnes-ex.Rout.save', 'tests/clara-NAs.R', 'tests/clara-NAs.Rout.save', 'tests/clara-ex.R', 'tests/clara.R', 'tests/clara.Rout.save', 'tests/clusplot-out.R', 'tests/clusplot-out.Rout.save', 'tests/daisy-ex.R', 'tests/daisy-ex.Rout.save', 'tests/diana-boots.R', 'tests/diana-ex.R', 'tests/diana-ex.Rout.save', 'tests/ellipsoid-ex.R', 'tests/ellipsoid-ex.Rout.save', 'tests/fanny-ex.R', 'tests/mona.R', 'tests/mona.Rout.save', 'tests/pam.R', 'tests/pam.Rout.save', 'tests/silhouette-default.R', 'tests/silhouette-default.Rout.save', 'tests/sweep-ex.R')); .Internal(dirname(argv[[1]]))");
        check("TestrGenBuiltindirname_testdirname4_ff3263428c608fd317fde2029f463c35");
    }

    @Test
    public void TestrGenBuiltindoTrace_testdoTrace1_ddcd3f64b9f15a9d7ab031d4fd632472() {
        assertEval("argv <- list(c(1, 1, 2));.doTrace(argv[[1]]);");
        check("TestrGenBuiltindoTrace_testdoTrace1_ddcd3f64b9f15a9d7ab031d4fd632472");
    }

    @Test
    public void TestrGenBuiltindoTrace_testdoTrace3_6b8a56a41d2daff624a3b8ffe219753f() {
        assertEval("argv <- structure(list(expr = expression(quote(x <- c(1, x)))),     .Names = 'expr');do.call('.doTrace', argv)");
        check("TestrGenBuiltindoTrace_testdoTrace3_6b8a56a41d2daff624a3b8ffe219753f");
    }

    @Test
    public void TestrGenBuiltindput_testdput1_13e57556ea92b275460a4cf536a7c6fa() {
        assertEval("argv <- list(logical(0), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindput_testdput1_13e57556ea92b275460a4cf536a7c6fa");
    }

    @Test
    public void TestrGenBuiltindput_testdput2_49535106681b131c08bed169ad6eee4b() {
        assertEval("argv <- list(structure(1, .Dim = 1L), structure(1L, class = c('terminal', 'connection')), 95); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindput_testdput2_49535106681b131c08bed169ad6eee4b");
    }

    @Test
    public void TestrGenBuiltindput_testdput3_09fa7b5e74174c70851c49ad93ae7635() {
        assertEval("argv <- list(character(0), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindput_testdput3_09fa7b5e74174c70851c49ad93ae7635");
    }

    @Test
    public void TestrGenBuiltindput_testdput4_f7a75e3bfd9049b64077a13f2659cd55() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindput_testdput4_f7a75e3bfd9049b64077a13f2659cd55");
    }

    @Test
    public void TestrGenBuiltindput_testdput5_73817a9226702e69b6277c05bec3ae8d() {
        assertEval("argv <- list(NULL, structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindput_testdput5_73817a9226702e69b6277c05bec3ae8d");
    }

    @Test
    public void TestrGenBuiltindput_testdput6_79110d5bdc310dc7e12d4ca11f48da06() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindput_testdput6_79110d5bdc310dc7e12d4ca11f48da06");
    }

    @Test
    public void TestrGenBuiltindput_testdput7_de1647a0d34feff88308694be2816ac6() {
        assertEval("argv <- list(FALSE, structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindput_testdput7_de1647a0d34feff88308694be2816ac6");
    }

    @Test
    public void TestrGenBuiltindput_testdput8_06ac0c8f01e2f86cb8f043b347b3a042() {
        assertEval("argv <- list(c(0.00508571428571428, 0.876285714285715), structure(1L, class = c('terminal', 'connection')), 69); .Internal(dput(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltindput_testdput8_06ac0c8f01e2f86cb8f043b347b3a042");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop1_435233a57444df0f45863f7b8b1b6ad6() {
        assertEval("argv <- list(structure(c(1.50117937791368, 1.64775918264914, 1.38492642933039, 2.16331573723593, 2.09255307288088, 1.44052566560935, 0.318431987979291, 1.53656071009121, 2.26440525774314, 1.31416376497534, 0.495338648866914, 1.09176681985947, 1.27372795677245, 1.95608222019614, 1.5112883299644, 1.48096147381224, 1.88531955584109, 2.15826126121057, 1.49107042586296, 1.77412108328316, 1.19791081639204, 0.884533302819684, 1.21307424446813, 1.68314051482667, 0.181961135294554, 1.71346737097883, 1.29900033689926, 1.4860159498376, 1.00078625140298, 1.52139728201513, 1.42030776150791, 0.505447600917635, 1.5112883299644, 1.33438166907678, 1.81455689148604, -1.61842961254877e-09, 1.40008985740647, 2.10771650095696, 0.611591597450209, 0.136470851066308, 1.10693024793555, 1.61237785047162, 0.990677299352257, 1.28383690882317, 1.33438166907678, 1.44558014163472, 1.15747500818916, 1.30910928894998, 0.753116926160307, 1.4860159498376, 2.10771650095696, 2.40087611042788, 1.27372795677245, 1.16252948421452, 0.985622823326897, 2.05211726467799, 1.3444906211275, 0.768280354236389, 0.844097494616799, 1.22823767254421, 0.980568347301536, 1.10693024793555, 0.899696730895766, 1.67303156277594, 0.995731775377618, 1.68314051482667, 1.42030776150791, 1.55172413816729, 1.55172413816729, 0.722790070008143, 1.98135460032294, 1.39503538138111, 1.14231158011308, 1.07154891575803, 1.08671234383411, 0.662136357703815, 0.808716162439274, 1.91564641199326, 2.08749859685552, 1.15747500818916, 1.3192182410007, 1.02605863152978, 1.18274738831596, 1.23329214856957, 0.783443782312471, 1.65786813469986, 0.965404919225454, 2.27451420979386, 1.25351005267101, 1.22823767254421, 1.74884870315635, 1.54666966214193, 1.99651802839903, 1.22318319651885, 1.09682129588483, 2.06222621672871, 1.82972031956212, 0.808716162439274, 1.66797708675058, 1.74884870315635), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop1_435233a57444df0f45863f7b8b1b6ad6");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop10_b2d97f724d1dfde490e0b550e91dc5bf() {
        assertEval("argv <- list(structure(c(-2.12168716972669e-05, 7.51519194600216e-05, -6.21732236176711e-06), .Dim = c(3L, 1L))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop10_b2d97f724d1dfde490e0b550e91dc5bf");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop11_dd679b9a609f4fb003b37d3b053c3905() {
        assertEval("argv <- list(structure(c(' 16', ' 16', '144', ' 16', ' 16', '128', ' 16', ' 16', '112', ' 16'), .Dim = 10L, .Dimnames = structure(list(c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22')), .Names = ''))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop11_dd679b9a609f4fb003b37d3b053c3905");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop2_639fdca1d0b5d22b4845f579ecb2fa9d() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE), .Dim = c(40L, 1L), .Dimnames = list(c('r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15', 'r16', 'r17', 'r18', 'r19', 'r20', 'r21', 'r22', 'r23', 'r24', 'r25', 'r26', 'r27', 'r28', 'r29', 'r30', 'r31', 'r32', 'r33', 'r34', 'r35', 'r36', 'r37', 'r38', 'r39', 'r40'), 'c1'))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop2_639fdca1d0b5d22b4845f579ecb2fa9d");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop3_48afea2c0db4a591b2689306fa2b2014() {
        assertEval("argv <- list(structure(c(-0.146170181357627, 24.3243243243243, NA, 84.2105263157895, 2.13784643479304), .Dim = c(5L, 1L))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop3_48afea2c0db4a591b2689306fa2b2014");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop4_d4365e445536d969a0e444bcc82d14fd() {
        assertEval("argv <- list(structure(1, .Dim = c(1L, 1L))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop4_d4365e445536d969a0e444bcc82d14fd");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop5_c1e1cfd2a3a4207e864c703843d7784b() {
        assertEval("argv <- list(structure(1:4, .Dim = c(4L, 1L), .Dimnames = list(c('a', 'b', 'c', 'd'), NULL))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop5_c1e1cfd2a3a4207e864c703843d7784b");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop6_a6b5e8feda8f1ba92b7dc96d419b63c9() {
        assertEval("argv <- list(structure(c(0.0394556761478965, 0.0353930191803619, 0.0421772348795039, 0.0302920451103359, 0.0377457762283076, 0.0338591835815583, 0.0403493901288877, 0.0289792716248635, 0.0342125137383397, 0.0306897327119817, 0.0365724115929804, 0.0262666138482847, 0.0422657427158027, 0.0379137398889158, 0.0451811331581029, 0.032449470138841), .Dim = c(1L, 4L, 4L), .Dimnames = list('1', c('DAX', 'SMI', 'CAC', 'FTSE'), c('DAX', 'SMI', 'CAC', 'FTSE')))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop6_a6b5e8feda8f1ba92b7dc96d419b63c9");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop7_b9790c234e422b9e1e9c75d711fc8586() {
        assertEval("argv <- list(c(10.8924449093617, 19.1956646477802, 5.83862354833301, 8.94491073999977, 10.0151293814506)); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop7_b9790c234e422b9e1e9c75d711fc8586");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop8_8ba3a8cad6f3b271481cc8936dd99036() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0'))); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop8_8ba3a8cad6f3b271481cc8936dd99036");
    }

    @Test
    public void TestrGenBuiltindrop_testdrop9_1e829615fd7d3b3e88a407a5ee0c79c6() {
        assertEval("argv <- list(structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts')); .Internal(drop(argv[[1]]))");
        check("TestrGenBuiltindrop_testdrop9_1e829615fd7d3b3e88a407a5ee0c79c6");
    }

    @Test
    public void TestrGenBuiltinenc2native_testenc2native1_a6da7a9fef635308ebd71b543b33fbf5() {
        assertEval("argv <- list(character(0));enc2native(argv[[1]]);");
        check("TestrGenBuiltinenc2native_testenc2native1_a6da7a9fef635308ebd71b543b33fbf5");
    }

    @Test
    public void TestrGenBuiltinenc2native_testenc2native3_4f2b48aeefda7af6afa824204677a599() {
        assertEval("argv <- list(structure(character(0), .Names = character(0)));enc2native(argv[[1]]);");
        check("TestrGenBuiltinenc2native_testenc2native3_4f2b48aeefda7af6afa824204677a599");
    }

    @Test
    public void TestrGenBuiltinenc2native_testenc2native4_e57d82a06016614422ffb0154b4bbd51() {
        assertEval("argv <- list('José Pinheiro [aut] (S version)');enc2native(argv[[1]]);");
        check("TestrGenBuiltinenc2native_testenc2native4_e57d82a06016614422ffb0154b4bbd51");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf81_eab3b90f52ba25877d127108892fb87f() {
        assertEval("argv <- list('Add Text to a Plot');enc2utf8(argv[[1]]);");
        check("TestrGenBuiltinenc2utf8_testenc2utf81_eab3b90f52ba25877d127108892fb87f");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf82_cf0b7dd72652f6d19f39f30bff83d0ec() {
        assertEval("argv <- list('Modes');enc2utf8(argv[[1]]);");
        check("TestrGenBuiltinenc2utf8_testenc2utf82_cf0b7dd72652f6d19f39f30bff83d0ec");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf83_910f21599e1a260c1ed408534d623827() {
        assertEval("argv <- list(c('', '(De)compress I/O Through Connections'));enc2utf8(argv[[1]]);");
        check("TestrGenBuiltinenc2utf8_testenc2utf83_910f21599e1a260c1ed408534d623827");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf84_0675cbb9c58edf63fe728dd3932430f7() {
        assertEval("argv <- list(character(0));enc2utf8(argv[[1]]);");
        check("TestrGenBuiltinenc2utf8_testenc2utf84_0675cbb9c58edf63fe728dd3932430f7");
    }

    @Test
    public void TestrGenBuiltinenc2utf8_testenc2utf86_ab404304f65f3deabd8f2ca91e8168c5() {
        assertEval("argv <- list(NA_character_);do.call('enc2utf8', argv)");
        check("TestrGenBuiltinenc2utf8_testenc2utf86_ab404304f65f3deabd8f2ca91e8168c5");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString10_f20b8b448850faf4a0e67af782ad3288() {
        assertEval("argv <- list('\\'class\\' is a reserved slot name and cannot be redefined', 0L, '\\'', 0L, FALSE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinencodeString_testencodeString10_f20b8b448850faf4a0e67af782ad3288");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString11_a186848248673e940f898376211d6f40() {
        assertEval("argv <- list(structure(character(0), .Dim = c(0L, 0L)), 0L, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinencodeString_testencodeString11_a186848248673e940f898376211d6f40");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString12_eb815ee5980af6899684228ad9431e6e() {
        assertEval("argv <- list(character(0), logical(0), '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinencodeString_testencodeString12_eb815ee5980af6899684228ad9431e6e");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString13_a9d38a032220f760686d7c3cb8761b7c() {
        assertEval("argv <- list(structure('integer(0)', .Names = 'c0', row.names = character(0)), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinencodeString_testencodeString13_a9d38a032220f760686d7c3cb8761b7c");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString7_41925f2c48f3be3975a935c14068f397() {
        assertEval("argv <- list('ab\\bc\\ndef', 0L, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinencodeString_testencodeString7_41925f2c48f3be3975a935c14068f397");
    }

    @Test
    public void TestrGenBuiltinencodeString_testencodeString9_402192e57b16c2e06288758280cb1ec9() {
        assertEval("argv <- list(structure('integer(0)', .Names = 'c0', row.names = character(0)), 0L, '', 0L, TRUE); .Internal(encodeString(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinencodeString_testencodeString9_402192e57b16c2e06288758280cb1ec9");
    }

    @Test
    public void TestrGenBuiltinenvironmentassign_testenvironmentassign1_e7d1897ac0f6b1cd0f4b3d8d7187eec3() {
        assertEval("argv <- list(NULL, NULL);`environment<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinenvironmentassign_testenvironmentassign1_e7d1897ac0f6b1cd0f4b3d8d7187eec3");
    }

    @Test
    public void TestrGenBuiltinexists_testexists1_f048c8e191a9ca92fa7722dee8ade8e2() {
        assertEval("argv <- structure(list(x = '.Device'), .Names = 'x');do.call('exists', argv)");
        check("TestrGenBuiltinexists_testexists1_f048c8e191a9ca92fa7722dee8ade8e2");
    }

    @Test
    public void TestrGenBuiltinexp_testexp10_37d07ab33adb8aa318383f2302accf5f() {
        assertEval("argv <- list(c(47.5645940356179, -6.38155741912049, -4.72835558025993, -9.12276173822938, 16.7269898773273, 1.72738845624351, 2.57214256243276, -6.38155741912049, 54.3235157345705, -1.01577550708815, 1.03229146110395, -7.85550713095368, -0.907238963715769, -0.92327375484205, -4.72835558025993, -1.01577550708815, 46.5450612116912, 4.59443066488959, -2.69397762349353, -13.3238428844397, -4.89920529326131, -9.12276173822938, 1.03229146110395, 4.59443066488959, 47.7416929123262, -3.84567249122941, -9.99434616922533, -0.0518296900644576, 16.7269898773273, -7.85550713095368, -2.69397762349353, -3.84567249122941, 49.4381847193856, 8.76151535039852, 0.371991514317358, 1.72738845624351, -0.907238963715769, -13.3238428844397, -9.99434616922533, 8.76151535039852, 50.1823716395239, -1.41801229530673, 2.57214256243276, -0.92327375484205, -4.89920529326131, -0.0518296900644576, 0.371991514317358, -1.41801229530673, 44.6019728197531));exp(argv[[1]]);");
        check("TestrGenBuiltinexp_testexp10_37d07ab33adb8aa318383f2302accf5f");
    }

    @Test
    public void TestrGenBuiltinexp_testexp11_8bfb5fb384aa724444aeb2b3f699aa64() {
        assertEval("argv <- list(c(-745, -744, -743, -742, -741, -740, -730, -720, -710, -709, -708, -707, -706, -705));exp(argv[[1]]);");
        check("TestrGenBuiltinexp_testexp11_8bfb5fb384aa724444aeb2b3f699aa64");
    }

    @Test
    public void TestrGenBuiltinexp_testexp3_526113e4ff81742afe10d844db202818() {
        assertEval("argv <- list(structure(c(-0.00324566582797463, -0.0174366299092001, -0.0697465196367962, -0.00678668749718479, -0.0364599944879883, -0.145839977951944, -0.014190964081224, -0.0762378512927396, -0.304951405170939, -0.0296733069908004, -0.159413352946301, -0.637653411785165, -0.0620468872115091, -0.333333333333361, -1.33333333333336, -0.129740045955487, -0.697000025766712, -2.78800010306667, -0.271286446121824, -1.45742710775627, -5.8297084310247, -0.567259979811165, -3.04748019497741, -12.1899207799089, -1.18614066163432, -6.37228132326786, -25.4891252930698), .Dim = c(3L, 9L), .Dimnames = list(c('x', 'x', ''), NULL)));exp(argv[[1]]);");
        check("TestrGenBuiltinexp_testexp3_526113e4ff81742afe10d844db202818");
    }

    @Test
    public void TestrGenBuiltinexp_testexp5_8f48399be0133d423dce07c8c94b08f2() {
        assertEval("argv <- list(c(0+0.392699081698724i, 0+0.785398163397448i, 0+1.17809724509617i, 0+1.5707963267949i, 0+1.96349540849362i, 0+2.35619449019234i, 0+2.74889357189107i, 0+3.14159265358979i, 0+3.53429173528852i, 0+3.92699081698724i, 0+4.31968989868597i, 0+4.71238898038469i, 0+5.10508806208341i, 0+5.49778714378214i, 0+5.89048622548086i, 0+6.28318530717959i));exp(argv[[1]]);");
        check("TestrGenBuiltinexp_testexp5_8f48399be0133d423dce07c8c94b08f2");
    }

    @Test
    public void TestrGenBuiltinexp_testexp6_dd0f0e60e688b17f8f079377818c4449() {
        assertEval("argv <- list(c(-0.1, -3.16227766016838, -100));exp(argv[[1]]);");
        check("TestrGenBuiltinexp_testexp6_dd0f0e60e688b17f8f079377818c4449");
    }

    @Test
    public void TestrGenBuiltinexp_testexp8_47ea460679ebf012ce9bd2a35e00dc81() {
        assertEval("argv <- list(logical(0));exp(argv[[1]]);");
        check("TestrGenBuiltinexp_testexp8_47ea460679ebf012ce9bd2a35e00dc81");
    }

    @Test
    public void TestrGenBuiltinexpm1_testexpm12_2ba9235989f7f326def41dca4adc1ff8() {
        assertEval("argv <- list(-1.5314339531682e-113);expm1(argv[[1]]);");
        check("TestrGenBuiltinexpm1_testexpm12_2ba9235989f7f326def41dca4adc1ff8");
    }

    @Test
    public void TestrGenBuiltinexpm1_testexpm14_037d8ddcf55f9ef5e60e1cb0e06f13c5() {
        assertEval("argv <- list(logical(0));expm1(argv[[1]]);");
        check("TestrGenBuiltinexpm1_testexpm14_037d8ddcf55f9ef5e60e1cb0e06f13c5");
    }

    @Test
    public void TestrGenBuiltinextract_dollar_assign_dataframe_testextract_dollar_assign_dataframe1_0fd543517e542dd7c19e0b3ad8c2d103() {
        assertEval("argv <- structure(list(x = structure(list(hours = c(216.27793530786,     14.3454081012111, 16.2639155548331, 77.062914516272, 42.3463070611469,     8.07456175870417, 42.818290162948, 84.9982217741369, 6.97921341420927,     143.155918813582, 16.0908251257365, 214.204015006233)), .Names = 'hours',     row.names = c('1', '2', '3', '4', '5', '6', '7', '8', '9',         '10', '11', '12'), class = 'data.frame'), name = 'hours',     value = c(216.27793530786, 14.3454081012111, 16.2639155548331,         77.062914516272, 42.3463070611469, 8.07456175870417,         42.818290162948, 84.9982217741369, 6.97921341420927,         143.155918813582, 16.0908251257365, 214.204015006233)),     .Names = c('x', 'name', 'value'));do.call('$<-.data.frame', argv)");
        check("TestrGenBuiltinextract_dollar_assign_dataframe_testextract_dollar_assign_dataframe1_0fd543517e542dd7c19e0b3ad8c2d103");
    }

    @Test
    public void TestrGenBuiltinextract_dollar_assign_dataframe_testextract_dollar_assign_dataframe2_38574d9996d636120d0be02718b49368() {
        assertEval("argv <- structure(list(x = structure(list(distance = c(26, 25,     29, 31, 21.5, 22.5, 23, 26.5, 23, 22.5, 24, 27.5, 25.5, 27.5,     26.5, 27, 20, 23.5, 22.5, 26, 24.5, 25.5, 27, 28.5, 22, 22,     24.5, 26.5, 24, 21.5, 24.5, 25.5, 23, 20.5, 31, 26, 27.5,     28, 31, 31.5, 23, 23, 23.5, 25, 21.5, 23.5, 24, 28, 17, 24.5,     26, 29.5, 22.5, 25.5, 25.5, 26, 23, 24.5, 26, 30, 22, 21.5,     23.5, 25, 21, 20, 21.5, 23, 21, 21.5, 24, 25.5, 20.5, 24,     24.5, 26, 23.5, 24.5, 25, 26.5, 21.5, 23, 22.5, 23.5, 20,     21, 21, 22.5, 21.5, 22.5, 23, 25, 23, 23, 23.5, 24, 20, 21,     22, 21.5, 16.5, 19, 19, 19.5, 24.5, 25, 28, 28), age = c(8,     10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14), Subject = structure(c(15L,     15L, 15L, 15L, 3L, 3L, 3L, 3L, 7L, 7L, 7L, 7L, 14L, 14L,     14L, 14L, 2L, 2L, 2L, 2L, 13L, 13L, 13L, 13L, 5L, 5L, 5L,     5L, 6L, 6L, 6L, 6L, 11L, 11L, 11L, 11L, 16L, 16L, 16L, 16L,     4L, 4L, 4L, 4L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L,     10L, 10L, 12L, 12L, 12L, 12L, 1L, 1L, 1L, 1L, 20L, 20L, 20L,     20L, 23L, 23L, 23L, 23L, 25L, 25L, 25L, 25L, 26L, 26L, 26L,     26L, 21L, 21L, 21L, 21L, 19L, 19L, 19L, 19L, 22L, 22L, 22L,     22L, 24L, 24L, 24L, 24L, 18L, 18L, 18L, 18L, 17L, 17L, 17L,     17L, 27L, 27L, 27L, 27L), .Label = c('M16', 'M05', 'M02',     'M11', 'M07', 'M08', 'M03', 'M12', 'M13', 'M14', 'M09', 'M15',     'M06', 'M04', 'M01', 'M10', 'F10', 'F09', 'F06', 'F01', 'F05',     'F07', 'F02', 'F08', 'F03', 'F04', 'F11'), class = c('ordered',     'factor')), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male',     'Female'), class = 'factor'), newAge = c(-3, -1, 1, 3, -3,     -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,     1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1,     3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3,     -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3,     -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,     1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1,     3)), .Names = c('distance', 'age', 'Subject', 'Sex', 'newAge'),     row.names = c('1', '2', '3', '4', '5', '6', '7', '8', '9',         '10', '11', '12', '13', '14', '15', '16', '17', '18',         '19', '20', '21', '22', '23', '24', '25', '26', '27',         '28', '29', '30', '31', '32', '33', '34', '35', '36',         '37', '38', '39', '40', '41', '42', '43', '44', '45',         '46', '47', '48', '49', '50', '51', '52', '53', '54',         '55', '56', '57', '58', '59', '60', '61', '62', '63',         '64', '65', '66', '67', '68', '69', '70', '71', '72',         '73', '74', '75', '76', '77', '78', '79', '80', '81',         '82', '83', '84', '85', '86', '87', '88', '89', '90',         '91', '92', '93', '94', '95', '96', '97', '98', '99',         '100', '101', '102', '103', '104', '105', '106', '107',         '108'), outer = ~Sex, formula = distance ~ age | Subject,     labels = structure(list(x = 'Age', y = 'Distance from pituitary to pterygomaxillary fissure'),         .Names = c('x', 'y')), units = structure(list(x = '(yr)',         y = '(mm)'), .Names = c('x', 'y')), FUN = function(x) max(x,         na.rm = TRUE), order.groups = TRUE, class = c('nfnGroupedData',         'nfGroupedData', 'groupedData', 'data.frame')), name = 'newAge',     value = c(-3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1,         1, 3, -3, -1, 1, 3, -3, -1, 1, 3, -3, -1, 1, 3)), .Names = c('x',     'name', 'value'));do.call('$<-.data.frame', argv)");
        check("TestrGenBuiltinextract_dollar_assign_dataframe_testextract_dollar_assign_dataframe2_38574d9996d636120d0be02718b49368");
    }

    @Test
    public void TestrGenBuiltinextract_dollar_dataframe_testextract_dollar_dataframe1_6ca2c6109777747a59181ad8bdb3293c() {
        assertEval("argv <- structure(list(x = structure(list(distance = c(26, 25,     29, 31, 21.5, 22.5, 23, 26.5, 23, 22.5, 24, 27.5, 25.5, 27.5,     26.5, 27, 20, 23.5, 22.5, 26, 24.5, 25.5, 27, 28.5, 22, 22,     24.5, 26.5, 24, 21.5, 24.5, 25.5, 23, 20.5, 31, 26, 27.5,     28, 31, 31.5, 23, 23, 23.5, 25, 21.5, 23.5, 24, 28, 17, 24.5,     26, 29.5, 22.5, 25.5, 25.5, 26, 23, 24.5, 26, 30, 22, 21.5,     23.5, 25, 21, 20, 21.5, 23, 21, 21.5, 24, 25.5, 20.5, 24,     24.5, 26, 23.5, 24.5, 25, 26.5, 21.5, 23, 22.5, 23.5, 20,     21, 21, 22.5, 21.5, 22.5, 23, 25, 23, 23, 23.5, 24, 20, 21,     22, 21.5, 16.5, 19, 19, 19.5, 24.5, 25, 28, 28), age = c(8,     10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14,     8, 10, 12, 14, 8, 10, 12, 14, 8, 10, 12, 14), Subject = structure(c(15L,     15L, 15L, 15L, 3L, 3L, 3L, 3L, 7L, 7L, 7L, 7L, 14L, 14L,     14L, 14L, 2L, 2L, 2L, 2L, 13L, 13L, 13L, 13L, 5L, 5L, 5L,     5L, 6L, 6L, 6L, 6L, 11L, 11L, 11L, 11L, 16L, 16L, 16L, 16L,     4L, 4L, 4L, 4L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L,     10L, 10L, 12L, 12L, 12L, 12L, 1L, 1L, 1L, 1L, 20L, 20L, 20L,     20L, 23L, 23L, 23L, 23L, 25L, 25L, 25L, 25L, 26L, 26L, 26L,     26L, 21L, 21L, 21L, 21L, 19L, 19L, 19L, 19L, 22L, 22L, 22L,     22L, 24L, 24L, 24L, 24L, 18L, 18L, 18L, 18L, 17L, 17L, 17L,     17L, 27L, 27L, 27L, 27L), .Label = c('M16', 'M05', 'M02',     'M11', 'M07', 'M08', 'M03', 'M12', 'M13', 'M14', 'M09', 'M15',     'M06', 'M04', 'M01', 'M10', 'F10', 'F09', 'F06', 'F01', 'F05',     'F07', 'F02', 'F08', 'F03', 'F04', 'F11'), class = c('ordered',     'factor')), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male',     'Female'), class = 'factor')), .Names = c('distance', 'age',     'Subject', 'Sex'), row.names = c('1', '2', '3', '4', '5',     '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16',     '17', '18', '19', '20', '21', '22', '23', '24', '25', '26',     '27', '28', '29', '30', '31', '32', '33', '34', '35', '36',     '37', '38', '39', '40', '41', '42', '43', '44', '45', '46',     '47', '48', '49', '50', '51', '52', '53', '54', '55', '56',     '57', '58', '59', '60', '61', '62', '63', '64', '65', '66',     '67', '68', '69', '70', '71', '72', '73', '74', '75', '76',     '77', '78', '79', '80', '81', '82', '83', '84', '85', '86',     '87', '88', '89', '90', '91', '92', '93', '94', '95', '96',     '97', '98', '99', '100', '101', '102', '103', '104', '105',     '106', '107', '108'), outer = ~Sex, class = c('nfnGroupedData',     'nfGroupedData', 'groupedData', 'data.frame'), formula = distance ~     age | Subject, labels = structure(list(x = 'Age', y = 'Distance from pituitary to pterygomaxillary fissure'),     .Names = c('x', 'y')), units = structure(list(x = '(yr)',     y = '(mm)'), .Names = c('x', 'y')), FUN = function(x) max(x,     na.rm = TRUE), order.groups = TRUE), name = 'age'), .Names = c('x',     'name'));do.call('$.data.frame', argv)");
        check("TestrGenBuiltinextract_dollar_dataframe_testextract_dollar_dataframe1_6ca2c6109777747a59181ad8bdb3293c");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_Date_testextract_parentasis_Date1_677d86047a9393cde9cd22b1445e80b5() {
        assertEval("argv <- structure(list(x = structure(c(14579, 14580), class = 'Date'),     2), .Names = c('x', ''));do.call('[.Date', argv)");
        check("TestrGenBuiltinextract_parentasis_Date_testextract_parentasis_Date1_677d86047a9393cde9cd22b1445e80b5");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_assign_factor_testextract_parentasis_assign_factor1_6ab7f28cbfdde795b5454d7c3e767116() {
        assertEval("argv <- structure(list(x = structure(c(4L, 1L, 4L, 4L, 6L, 4L,     5L, 5L, 4L, 6L, 6L, 2L, 3L, 6L, 4L, 2L, 1L, 6L, 1L, 3L, 3L,     5L, 2L, 2L, 2L, 5L, 3L, 3L, 1L, 2L, 5L, 6L, 6L, 6L, 6L, 2L,     6L, 1L, 5L, 1L, 2L, 4L, 4L, 6L, 5L, 5L, 2L, 6L, 4L, 6L, 5L,     1L, 2L, 5L, 1L, 1L, 4L, 3L, 3L, 4L, 4L, 2L, 5L, 3L, 4L, 5L,     4L, 6L, 4L, 5L, 2L, 6L, 2L, 4L, 2L, 2L, 4L, 4L, 1L, 6L, 2L,     1L, 5L, 3L, 5L, 1L, 2L, 2L, 4L, 2L, 4L, 2L, 5L, 6L, 5L, 6L,     3L, 1L, 2L, 4L, 6L, 6L, 3L, 3L, 2L, 6L, 2L, 5L, 3L, 4L, 3L,     4L, 6L, 3L, 4L, 2L, 3L, 1L, 6L, 2L, 4L, 4L, 1L, 3L, 4L, 3L,     4L, 1L, 4L, 1L, 3L, 5L, 5L, 5L, 4L, 4L, 6L, 2L, 6L, 3L, 2L,     1L, 1L, 6L, 2L, 2L, 5L, 1L, 5L, 3L, 2L, 2L, 5L, 1L, 6L, 3L,     6L, 4L, 2L, 2L, 5L, 6L, 6L, 1L, 1L, 6L, 6L, 5L, 2L, 5L, 6L,     5L, 4L, 6L, 2L, 5L, 4L, 3L, 5L, 1L, 3L, 4L, 4L, 3L, 1L, 1L,     5L, 4L, 1L, 3L, 5L, 4L, 5L, 4L, 6L, 6L, 2L, 4L, 3L, 3L),     .Label = c('a', 'b', 'c', 'd', 'e', 'f'), class = 'factor'),     c(189L, 84L, 154L, 9L, 130L, 44L, 137L, 12L, 50L, 1L, 42L,         174L, 194L, 131L, 157L, 101L, 37L, 128L, 117L, 181L,         51L, 109L, 110L, 67L, 69L, 124L, 192L, 65L, 171L, 168L),     value = NA), .Names = c('x', '', 'value'));do.call('[<-.factor', argv)");
        check("TestrGenBuiltinextract_parentasis_assign_factor_testextract_parentasis_assign_factor1_6ab7f28cbfdde795b5454d7c3e767116");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_dataframe_testextract_parentasis_dataframe1_b62183b96921d7174a56f16f6dc89057() {
        assertEval("argv <- structure(list(x = structure(list(ID = c(13, 41, 121,     202, 247, 292, 415, 492), Location = c(0.15998329123474,     0.533277637449134, 1.5998329123474, 2.6797201281819, 3.27965747031217,     3.87959481244245, 5.51942354759854, 6.54598299968812), Peak_Value = c(0.997547264684804,     0.949162789397664, 0.990440013891923, 0.973478735915337,     0.93861267739627, 0.957347289323235, 0.924803043529451, 0.968307855031101)),     .Names = c('ID', 'Location', 'Peak_Value'), row.names = c(NA,         -8L), class = 'data.frame'), i = 2), .Names = c('x',     'i'));do.call('[.data.frame', argv)");
        check("TestrGenBuiltinextract_parentasis_dataframe_testextract_parentasis_dataframe1_b62183b96921d7174a56f16f6dc89057");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_dataframe_testextract_parentasis_dataframe2_5a2ab0c147f4f04db1c0405c273b36bf() {
        assertEval("argv <- structure(list(x = structure(list(Satellites = c(8L,     0L, 9L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 11L, 0L, 14L,     8L, 1L, 1L, 0L, 5L, 4L, 3L, 1L, 2L, 3L, 0L, 3L, 5L, 0L, 0L,     4L, 0L, 0L, 8L, 5L, 0L, 0L, 6L, 0L, 6L, 3L, 5L, 6L, 5L, 9L,     4L, 6L, 4L, 3L, 3L, 5L, 5L, 6L, 4L, 5L, 15L, 3L, 3L, 0L,     0L, 0L, 5L, 3L, 5L, 1L, 8L, 10L, 0L, 0L, 3L, 7L, 1L, 0L,     6L, 0L, 0L, 3L, 4L, 0L, 5L, 0L, 0L, 0L, 4L, 0L, 3L, 0L, 0L,     0L, 0L, 5L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,     4L, 1L, 1L, 1L, 1L, 2L, 4L, 3L, 6L, 0L, 2L, 2L, 0L, 12L,     0L, 5L, 6L, 6L, 2L, 0L, 2L, 3L, 0L, 3L, 4L, 2L, 6L, 6L, 0L,     4L, 10L, 7L, 0L, 5L, 5L, 6L, 6L, 7L, 3L, 3L, 0L, 0L, 8L,     4L, 4L, 10L, 9L, 4L, 0L, 0L, 0L, 0L, 4L, 0L, 2L, 0L, 4L,     4L, 3L, 8L, 0L, 7L, 0L, 0L, 2L, 3L, 4L, 0L, 0L, 0L), Width = c(28.3,     22.5, 26, 24.8, 26, 23.8, 26.5, 24.7, 23.7, 25.6, 24.3, 25.8,     28.2, 21, 26, 27.1, 25.2, 29, 24.7, 27.4, 23.2, 25, 22.5,     26.7, 25.8, 26.2, 28.7, 26.8, 27.5, 24.9, 29.3, 25.8, 25.7,     25.7, 26.7, 23.7, 26.8, 27.5, 23.4, 27.9, 27.5, 26.1, 27.7,     30, 28.5, 28.9, 28.2, 25, 28.5, 30.3, 24.7, 27.7, 27.4, 22.9,     25.7, 28.3, 27.2, 26.2, 27.8, 25.5, 27.1, 24.5, 27, 26, 28,     30, 29, 26.2, 26.5, 26.2, 25.6, 23, 23, 25.4, 24.2, 22.9,     26, 25.4, 25.7, 25.1, 24.5, 27.5, 23.1, 25.9, 25.8, 27, 28.5,     25.5, 23.5, 24, 29.7, 26.8, 26.7, 28.7, 23.1, 29, 25.5, 26.5,     24.5, 28.5, 28.2, 24.5, 27.5, 24.7, 25.2, 27.3, 26.3, 29,     25.3, 26.5, 27.8, 27, 25.7, 25, 31.9, 23.7, 29.3, 22, 25,     27, 23.8, 30.2, 26.2, 24.2, 27.4, 25.4, 28.4, 22.5, 26.2,     24.9, 24.5, 25.1, 28, 25.8, 27.9, 24.9, 28.4, 27.2, 25, 27.5,     33.5, 30.5, 29, 24.3, 25.8, 25, 31.7, 29.5, 24, 30, 27.6,     26.2, 23.1, 22.9, 24.5, 24.7, 28.3, 23.9, 23.8, 29.8, 26.5,     26, 28.2, 25.7, 26.5, 25.8, 24.1, 26.2, 26.1, 29, 28, 27,     24.5), Dark = structure(c(1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L,     1L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L,     2L, 2L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L,     2L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 2L,     2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 2L,     2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,     1L, 1L, 2L, 2L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 2L,     1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 2L,     1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L,     2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 1L),     .Label = c('no', 'yes'), class = 'factor'), GoodSpine = structure(c(1L,     1L, 2L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 2L,     1L, 1L, 1L, 1L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L,     1L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 1L,     1L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L,     1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,     2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 2L, 2L,     2L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L,     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,     2L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L,     2L, 1L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 2L, 1L, 1L, 1L, 1L,     1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L,     1L, 1L, 1L, 1L, 2L, 1L, 2L), .Label = c('no', 'yes'), class = 'factor'),     Rep1 = c(2, 4, 5, 6, 6, 8, 9, 9, 10, 10, 11, 11, 13, 15,         15, 15, 15, 15, 17, 18, 19, 19, 19, 20, 20, 21, 21, 22,         23, 25, 25, 26, 27, 27, 28, 29, 29, 31, 33, 33, 36, 39,         40, 40, 41, 42, 43, 44, 45, 45, 49, 50, 51, 53, 55, 55,         56, 56, 56, 58, 59, 59, 60, 60, 62, 63, 64, 64, 64, 65,         66, 66, 67, 68, 70, 70, 71, 74, 75, 76, 76, 77, 79, 79,         79, 80, 80, 81, 82, 83, 83, 84, 87, 88, 88, 91, 92, 95,         97, 97, 97, 98, 98, 99, 100, 100, 101, 101, 103, 103,         103, 106, 107, 107, 111, 112, 112, 113, 113, 116, 116,         117, 117, 120, 122, 122, 122, 124, 125, 126, 127, 128,         128, 129, 130, 131, 133, 134, 134, 135, 141, 144, 146,         147, 147, 153, 153, 154, 154, 155, 155, 155, 156, 157,         157, 161, 163, 163, 164, 164, 164, 165, 167, 168, 168,         169, 170, 170, 170, 171, 171, 173, 173), Rep2 = c(2,         5, 6, 6, 8, 8, 9, 11, 12, 13, 13, 15, 15, 15, 16, 17,         17, 18, 19, 20, 23, 24, 24, 24, 25, 25, 26, 26, 27, 28,         29, 30, 30, 32, 33, 34, 38, 39, 39, 41, 42, 47, 48, 49,         49, 51, 54, 55, 55, 56, 57, 59, 59, 62, 63, 65, 67, 68,         69, 69, 70, 73, 75, 76, 76, 77, 78, 79, 81, 82, 83, 84,         85, 85, 85, 86, 87, 88, 89, 91, 92, 92, 92, 92, 96, 98,         98, 99, 100, 101, 101, 102, 103, 104, 104, 104, 105,         107, 107, 107, 108, 109, 109, 110, 111, 111, 111, 112,         112, 112, 113, 113, 115, 116, 117, 120, 122, 123, 123,         124, 124, 125, 125, 126, 128, 130, 131, 131, 131, 131,         132, 133, 133, 134, 134, 136, 137, 138, 139, 139, 141,         143, 144, 144, 145, 145, 150, 150, 150, 152, 152, 153,         154, 155, 155, 156, 157, 157, 158, 159, 160, 161, 163,         163, 166, 167, 169, 170, 172, 173, 173, 173, 173)), .Names = c('Satellites',     'Width', 'Dark', 'GoodSpine', 'Rep1', 'Rep2'), row.names = c(NA,     -173L), class = 'data.frame'), i = c(2, 4, 5, 6, 6, 8, 9,     9, 10, 10, 11, 11, 13, 15, 15, 15, 15, 15, 17, 18, 19, 19,     19, 20, 20, 21, 21, 22, 23, 25, 25, 26, 27, 27, 28, 29, 29,     31, 33, 33, 36, 39, 40, 40, 41, 42, 43, 44, 45, 45, 49, 50,     51, 53, 55, 55, 56, 56, 56, 58, 59, 59, 60, 60, 62, 63, 64,     64, 64, 65, 66, 66, 67, 68, 70, 70, 71, 74, 75, 76, 76, 77,     79, 79, 79, 80, 80, 81, 82, 83, 83, 84, 87, 88, 88, 91, 92,     95, 97, 97, 97, 98, 98, 99, 100, 100, 101, 101, 103, 103,     103, 106, 107, 107, 111, 112, 112, 113, 113, 116, 116, 117,     117, 120, 122, 122, 122, 124, 125, 126, 127, 128, 128, 129,     130, 131, 133, 134, 134, 135, 141, 144, 146, 147, 147, 153,     153, 154, 154, 155, 155, 155, 156, 157, 157, 161, 163, 163,     164, 164, 164, 165, 167, 168, 168, 169, 170, 170, 170, 171,     171, 173, 173), j = c(-5L, -6L)), .Names = c('x', 'i', 'j'));do.call('[.data.frame', argv)");
        check("TestrGenBuiltinextract_parentasis_dataframe_testextract_parentasis_dataframe2_5a2ab0c147f4f04db1c0405c273b36bf");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_extract_parentasis_assign_factor_testextract_parentasis_extract_parentasis_assign_factor1_5605f01dadc0e5f8b00b150f5ce0d8fd() {
        assertEval("argv <- structure(list(x = structure(c(2L, 2L, 3L), .Label = c('One',     'Two', 'Three'), class = 'factor'), 2, value = 'One'), .Names = c('x',     '', 'value'));do.call('[[<-.factor', argv)");
        check("TestrGenBuiltinextract_parentasis_extract_parentasis_assign_factor_testextract_parentasis_extract_parentasis_assign_factor1_5605f01dadc0e5f8b00b150f5ce0d8fd");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_extract_parentasis_factor_testextract_parentasis_extract_parentasis_factor1_5fced93c42220fd5b3326690c2f82d6b() {
        assertEval("argv <- structure(list(x = structure(2:4, .Label = c('A', 'B',     'C', 'D', 'E'), class = 'factor'), 2), .Names = c('x', ''));do.call('[[.factor', argv)");
        check("TestrGenBuiltinextract_parentasis_extract_parentasis_factor_testextract_parentasis_extract_parentasis_factor1_5fced93c42220fd5b3326690c2f82d6b");
    }

    @Test
    public void TestrGenBuiltinextract_parentasis_factor_testextract_parentasis_factor1_3ede514eacaf473da1f649221ef7a410() {
        assertEval("argv <- structure(list(x = structure(c(111L, 88L, 93L, 74L, 138L,     103L, 46L, 114L, 112L, 24L, 99L, 97L, 57L, 40L, 86L, 37L,     124L, 9L, 20L, 54L, 145L, 3L, 7L, 134L, 98L, 143L, 131L,     47L, 128L, 116L, 137L, 5L, 132L, 21L, 81L, 58L, 108L, 17L,     107L, 126L, 2L, 18L, 75L, 4L, 63L, 121L, 84L, 101L, 123L,     102L, 36L, 48L, 12L, 105L, 100L, 90L, 34L, 55L, 68L, 10L,     52L, 91L, 146L, 127L, 1L, 29L, 106L, 26L, 115L, 118L, 25L,     82L, 16L, 45L, 95L, 69L, 72L, 15L, 120L, 104L, 125L, 6L,     140L, 65L, 62L, 39L, 35L, 38L, 83L, 117L, 42L, 13L, 87L,     22L, 53L, 41L, 113L, 73L, 133L, 23L, 80L, 8L, 19L, 78L, 60L,     31L, 33L, 147L, 139L, 56L, 130L, 64L, 71L, 43L, 136L, 89L,     94L, 96L, 70L, 59L, 129L, 27L, 92L, 51L, 77L, 50L, 66L, 119L,     135L, 110L, 144L, 109L, 67L, 44L, 32L, 141L, 76L, 79L, 49L,     142L, 30L, 14L, 85L, 28L, 11L, 61L, 122L), .Label = c('1415787_at',     '1415904_at', '1415993_at', '1416164_at', '1416181_at', '1416221_at',     '1416481_s_at', '1416812_at', '1416855_at', '1416949_s_at',     '1417129_a_at', '1417425_at', '1417447_at', '1417466_at',     '1417572_at', '1417624_at', '1417667_a_at', '1417964_at',     '1418084_at', '1418382_at', '1418424_at', '1418471_at', '1418479_at',     '1418486_at', '1418516_at', '1418560_at', '1418649_at', '1418835_at',     '1419361_at', '1419430_at', '1419686_at', '1419833_s_at',     '1420011_s_at', '1420643_at', '1420886_a_at', '1421045_at',     '1421180_at', '1421773_at', '1422018_at', '1422557_s_at',     '1422671_s_at', '1422809_at', '1422850_at', '1422979_at',     '1423095_s_at', '1423110_at', '1423123_at', '1423124_x_at',     '1423176_at', '1423319_at', '1423852_at', '1423924_s_at',     '1424107_at', '1424186_at', '1424212_at', '1424243_at', '1424474_a_at',     '1424749_at', '1425494_s_at', '1425534_at', '1425779_a_at',     '1426083_a_at', '1426295_at', '1426371_at', '1426485_at',     '1426510_at', '1426628_at', '1426845_at', '1427120_at', '1427208_at',     '1427256_at', '1427314_at', '1427672_a_at', '1428922_at',     '1428942_at', '1429177_x_at', '1429514_at', '1429859_a_at',     '1431830_at', '1433512_at', '1434326_x_at', '1434485_a_at',     '1434831_a_at', '1434920_a_at', '1435129_at', '1435327_at',     '1435357_at', '1436392_s_at', '1436528_at', '1436886_x_at',     '1437163_x_at', '1437223_s_at', '1437434_a_at', '1437455_a_at',     '1438312_s_at', '1438651_a_at', '1439148_a_at', '1439373_x_at',     '1439381_x_at', '1439962_at', '1448131_at', '1448143_at',     '1448147_at', '1448259_at', '1448269_a_at', '1448466_at',     '1448601_s_at', '1448630_a_at', '1448823_at', '1448943_at',     '1448995_at', '1449059_a_at', '1449376_at', '1449623_at',     '1449630_s_at', '1449697_s_at', '1449699_s_at', '1449755_at',     '1449773_s_at', '1449885_at', '1450070_s_at', '1450723_at',     '1450846_at', '1450857_a_at', '1450941_at', '1451103_at',     '1451266_at', '1451317_at', '1451332_at', '1451415_at', '1451418_a_at',     '1451532_s_at', '1451536_at', '1452003_at', '1452110_at',     '1452183_a_at', '1452665_at', '1452671_s_at', '1452869_at',     '1453030_at', '1455056_at', '1455517_at', '1456174_x_at',     '1456393_at', '1456434_x_at', '1460260_s_at', '1460359_at'),     class = 'factor'), 1:25), .Names = c('x', ''));do.call('[.factor', argv)");
        check("TestrGenBuiltinextract_parentasis_factor_testextract_parentasis_factor1_3ede514eacaf473da1f649221ef7a410");
    }

    @Test
    public void TestrGenBuiltinfileinfo_testfileinfo1_a99b095a177ec7e9005fb967dfaec9a9() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/library/codetools/data'); .Internal(file.info(argv[[1]]))");
        check("TestrGenBuiltinfileinfo_testfileinfo1_a99b095a177ec7e9005fb967dfaec9a9");
    }

    @Test
    public void TestrGenBuiltinfileinfo_testfileinfo2_708c61ffc98b05b30ad963c97d62ca84() {
        assertEval("argv <- list(character(0)); .Internal(file.info(argv[[1]]))");
        check("TestrGenBuiltinfileinfo_testfileinfo2_708c61ffc98b05b30ad963c97d62ca84");
    }

    @Test
    public void TestrGenBuiltinfindInterval_testfindInterval1_e0dec5063cbb7dee5518f5e2ec455b18() {
        assertEval("argv <- list(c(1, 2, 3, 4, 5, 6, 7, 8, 9), c(3, 3.25, 3.5, 3.75, 4, 4.25, 4.5, 4.75, 5, 5.25, 5.5, 5.75, 6), FALSE, FALSE); .Internal(findInterval(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinfindInterval_testfindInterval1_e0dec5063cbb7dee5518f5e2ec455b18");
    }

    @Test
    public void TestrGenBuiltinfindInterval_testfindInterval2_07ddf6b4673e54fe2d0a9931982938ad() {
        assertEval("argv <- list(NA_real_, NA_real_, FALSE, FALSE); .Internal(findInterval(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinfindInterval_testfindInterval2_07ddf6b4673e54fe2d0a9931982938ad");
    }

    @Test
    public void TestrGenBuiltinfindInterval_testfindInterval3_ef2bb28755527226b38a27050a632fc6() {
        assertEval("argv <- list(numeric(0), numeric(0), FALSE, FALSE); .Internal(findInterval(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinfindInterval_testfindInterval3_ef2bb28755527226b38a27050a632fc6");
    }

    @Test
    public void TestrGenBuiltinfindInterval_testfindInterval4_8b524104567c383bbd58f9bb60e35690() {
        assertEval("argv <- list(c(5, 10, 15), c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), FALSE, FALSE); .Internal(findInterval(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinfindInterval_testfindInterval4_8b524104567c383bbd58f9bb60e35690");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor4_f528a920e5b4dfa2c269af223cfeafd6() {
        assertEval("argv <- list(structure(c(1920.5, 1920.5833, 1920.6667, 1920.75, 1920.8333, 1920.9167, 1921, 1921.0833, 1921.1667, 1921.25), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));floor(argv[[1]]);");
        check("TestrGenBuiltinfloor_testfloor4_f528a920e5b4dfa2c269af223cfeafd6");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor8_7b7dd783ca8b1592a2ce4332b6f92e94() {
        assertEval("argv <- list(structure(c(1976, 1976.0833, 1976.1667, 1976.25, 1976.3333, 1976.4167, 1976.5, 1976.5833, 1976.6667, 1976.75, 1976.8333, 1976.9167, 1977, 1977.0833, 1977.1667, 1977.25, 1977.3333, 1977.4167, 1977.5, 1977.5833, 1977.6667, 1977.75, 1977.8333, 1977.9167, 1978), .Tsp = c(1976, 1978, 12), class = 'ts'));floor(argv[[1]]);");
        check("TestrGenBuiltinfloor_testfloor8_7b7dd783ca8b1592a2ce4332b6f92e94");
    }

    @Test
    public void TestrGenBuiltinfloor_testfloor9_e3dc151195686912a99ef5cdb618d0bd() {
        assertEval("argv <- list(logical(0));floor(argv[[1]]);");
        check("TestrGenBuiltinfloor_testfloor9_e3dc151195686912a99ef5cdb618d0bd");
    }

    @Test
    public void TestrGenBuiltinflush_testflush1_62a79a5a829dfd705d4a2fce830b5f61() {
        assertEval("argv <- list(structure(1L, class = c('terminal', 'connection'))); .Internal(flush(argv[[1]]))");
        check("TestrGenBuiltinflush_testflush1_62a79a5a829dfd705d4a2fce830b5f61");
    }

    @Test
    public void TestrGenBuiltinflush_testflush2_da52d0b7accd547c69fae6d1a7d265e2() {
        assertEval("argv <- list(structure(2L, class = c('terminal', 'connection'))); .Internal(flush(argv[[1]]))");
        check("TestrGenBuiltinflush_testflush2_da52d0b7accd547c69fae6d1a7d265e2");
    }

    @Test
    public void TestrGenBuiltinformals_testformals2_8a64ee0c4211f679fdf6007427609b58() {
        assertEval("argv <- list(logical(0)); .Internal(formals(argv[[1]]))");
        check("TestrGenBuiltinformals_testformals2_8a64ee0c4211f679fdf6007427609b58");
    }

    @Test
    public void TestrGenBuiltinformals_testformals3_6ccf46eb1cfc68ddb502cbc6507ddbd1() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(formals(argv[[1]]))");
        check("TestrGenBuiltinformals_testformals3_6ccf46eb1cfc68ddb502cbc6507ddbd1");
    }

    @Test
    public void TestrGenBuiltinformals_testformals4_fb0e228a262455d61c48088dda3fa8a3() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame')); .Internal(formals(argv[[1]]))");
        check("TestrGenBuiltinformals_testformals4_fb0e228a262455d61c48088dda3fa8a3");
    }

    @Test
    public void TestrGenBuiltinformat_testformat1_a6c317e3ccc98d283572f1fc7c06f4db() {
        assertEval("argv <- list(structure(c(0, 72.7, 56.4, 72.7, 0, 63.3, 56.4, 63.3, 0), .Dim = c(3L, 3L), .Dimnames = list(c('Girth', 'Height', 'Volume'), c('Girth', 'Height', 'Volume'))), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat1_a6c317e3ccc98d283572f1fc7c06f4db");
    }

    @Test
    public void TestrGenBuiltinformat_testformat11_66856e3cd12ec5a5a3141bc567dd660a() {
        assertEval("argv <- list(structure(c(1L, 2L, 1L), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = '')), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat11_66856e3cd12ec5a5a3141bc567dd660a");
    }

    @Test
    public void TestrGenBuiltinformat_testformat12_34233dd4aa9e3cc90ae4208b0dd61975() {
        assertEval("argv <- list(c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.'), FALSE, NULL, 0L, NULL, 0L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat12_34233dd4aa9e3cc90ae4208b0dd61975");
    }

    @Test
    public void TestrGenBuiltinformat_testformat14_4f62576bac9db986d57e08b6dee333b3() {
        assertEval("argv <- list(structure(c(NA, 1, 1, 1), .Names = c('<none>', '- x4', '- x2', '- x1')), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat14_4f62576bac9db986d57e08b6dee333b3");
    }

    @Test
    public void TestrGenBuiltinformat_testformat15_8dc93a27f7955ed280c983fb98764a4f() {
        assertEval("argv <- list(2.22044604925031e-16, FALSE, 1, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat15_8dc93a27f7955ed280c983fb98764a4f");
    }

    @Test
    public void TestrGenBuiltinformat_testformat17_7006548c9195832e9fc9b74506ebaab4() {
        assertEval("argv <- list(c(2.3e-05, 4.5e-06), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat17_7006548c9195832e9fc9b74506ebaab4");
    }

    @Test
    public void TestrGenBuiltinformat_testformat2_f6ef8361fee0499b29434699fee374f9() {
        assertEval("argv <- list('\\\\ab\\\\c', FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat2_f6ef8361fee0499b29434699fee374f9");
    }

    @Test
    public void TestrGenBuiltinformat_testformat23_02f91866c8ca2d894b4c94302ce7c0a1() {
        assertEval("argv <- list(c(NA, 2L, 4L, 7L), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat23_02f91866c8ca2d894b4c94302ce7c0a1");
    }

    @Test
    public void TestrGenBuiltinformat_testformat24_2edaeb1fc36007ae10c643e105f90fc7() {
        assertEval("argv <- list(c(1.1+0i, NA, 3+0i), FALSE, NULL, 0L, NULL, 3L, FALSE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat24_2edaeb1fc36007ae10c643e105f90fc7");
    }

    @Test
    public void TestrGenBuiltinformat_testformat27_1cc79e9dc7f5f26a2892efc843d3453c() {
        assertEval("argv <- list(structure(c(142L, 104L, 71L, 250L), .Dim = 4L, .Dimnames = structure(list(c('(1) Approve STRONGLY', '(2) Approve SOMEWHAT', '(3) Disapprove SOMEWHAT', '(4) Disapprove STRONGLY')), .Names = '')), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat27_1cc79e9dc7f5f26a2892efc843d3453c");
    }

    @Test
    public void TestrGenBuiltinformat_testformat28_461389e9acea0b8a68568773e9048049() {
        assertEval("argv <- list(structure(c('***', '*', ' ', ' ', ' '), legend = '0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1', class = 'noquote'), FALSE, NULL, 0L, NULL, 0L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat28_461389e9acea0b8a68568773e9048049");
    }

    @Test
    public void TestrGenBuiltinformat_testformat29_9452d2b344aba593e81f244ee327e204() {
        assertEval("argv <- list(structure(c(0, 5, 118, 57, 0, 1, 4, 140, 0, 11, 154, 14, 0, 13, 13, 80, 35, 13, 387, 75, 17, 14, 89, 76, 0, 0, 670, 192, 0, 0, 3, 20), .Dim = c(1L, 32L), row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(Class = c('1st', '2nd', '3rd', 'Crew'), Sex = c('Male', 'Female'), Age = c('Child', 'Adult'), Survived = c('No', 'Yes')), .Names = c('Class', 'Sex', 'Age', 'Survived'))), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat29_9452d2b344aba593e81f244ee327e204");
    }

    @Test
    public void TestrGenBuiltinformat_testformat3_99a2a6623dbee8b0d0b4ae8ba99d4aca() {
        assertEval("argv <- list(c('Inf', '-Inf', 'NaN', 'NA'), FALSE, NULL, 0L, 4, 1L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat3_99a2a6623dbee8b0d0b4ae8ba99d4aca");
    }

    @Test
    public void TestrGenBuiltinformat_testformat30_a2e67ed543a241e9635a898e228c3615() {
        assertEval("argv <- list(c('', '', '\\'Adult\\'', '\\'No\\'', '', '387'), FALSE, NULL, 0L, NULL, 1L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat30_a2e67ed543a241e9635a898e228c3615");
    }

    @Test
    public void TestrGenBuiltinformat_testformat31_e679c52ca84336f14651365b9e8b0ecf() {
        assertEval("argv <- list(2.2250738585072e-308, TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat31_e679c52ca84336f14651365b9e8b0ecf");
    }

    @Test
    public void TestrGenBuiltinformat_testformat32_564f3f0835c39663b9863ed7cecdd68f() {
        assertEval("argv <- list(c(-0.318309886183791+0i, 0-0.564189583547756i, 1+0i, 0+1.77245385090552i, -3.14159265358979+0i), TRUE, 2, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat32_564f3f0835c39663b9863ed7cecdd68f");
    }

    @Test
    public void TestrGenBuiltinformat_testformat33_a51c14c289f8d5aba09e63def94da3db() {
        assertEval("argv <- list(0+1i, TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat33_a51c14c289f8d5aba09e63def94da3db");
    }

    @Test
    public void TestrGenBuiltinformat_testformat34_a3f66c5a92c04bf290549711f083c8b0() {
        assertEval("argv <- list(structure(c(-Inf, -Inf, -2.248e+263, -Inf, -3.777e+116, -1), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat34_a3f66c5a92c04bf290549711f083c8b0");
    }

    @Test
    public void TestrGenBuiltinformat_testformat37_16d5c15cfad16e060ba5e6dad2ba14b4() {
        assertEval("argv <- list(structure(c(213198964, 652424.52183908), .Names = c('null.deviance', 'deviance')), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat37_16d5c15cfad16e060ba5e6dad2ba14b4");
    }

    @Test
    public void TestrGenBuiltinformat_testformat38_738c71770669352f00cac777676b9c79() {
        assertEval("argv <- list(structure(integer(0), .Dim = c(1L, 0L), row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(df0 = NULL), .Names = 'df0')), FALSE, 7L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat38_738c71770669352f00cac777676b9c79");
    }

    @Test
    public void TestrGenBuiltinformat_testformat4_acdd5e79e5a4aa0b40e0b9ba902f8854() {
        assertEval("argv <- list(structure(c('axx', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), .Dim = c(2L, 4L)), FALSE, NULL, 0L, NULL, 1L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat4_acdd5e79e5a4aa0b40e0b9ba902f8854");
    }

    @Test
    public void TestrGenBuiltinformat_testformat40_441455babedf9f5c230fbad6f959658b() {
        assertEval("argv <- list(1e-07, TRUE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat40_441455babedf9f5c230fbad6f959658b");
    }

    @Test
    public void TestrGenBuiltinformat_testformat42_cd88964f0ad50b515c252a3b9cbf9858() {
        assertEval("argv <- list(c(2.5, 97.5), TRUE, 3, 0L, NULL, 3L, TRUE, FALSE); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat42_cd88964f0ad50b515c252a3b9cbf9858");
    }

    @Test
    public void TestrGenBuiltinformat_testformat43_14c58c1e783fcf23dc375364b7800428() {
        assertEval("argv <- list(structure(c(9.4, 10.2, 9.2, 4.4, 3.5, 2.7), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('Estimate', 'Std.Err'))), FALSE, 2, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat43_14c58c1e783fcf23dc375364b7800428");
    }

    @Test
    public void TestrGenBuiltinformat_testformat46_4e6148de5c1f2f3182f9d30560610a34() {
        assertEval("argv <- list(1.2e+07, FALSE, NULL, 9L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat46_4e6148de5c1f2f3182f9d30560610a34");
    }

    @Test
    public void TestrGenBuiltinformat_testformat47_f701b122cac00dd351c59fea448dd861() {
        assertEval("argv <- list(-0.01234+3.14159265358979i, FALSE, NULL, 14L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat47_f701b122cac00dd351c59fea448dd861");
    }

    @Test
    public void TestrGenBuiltinformat_testformat49_e5b8308012067f5e6258700142a2f70f() {
        assertEval("argv <- list(3.141, FALSE, NULL, 13L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat49_e5b8308012067f5e6258700142a2f70f");
    }

    @Test
    public void TestrGenBuiltinformat_testformat51_824eb64b80a9cd5f4c92000f270e70e2() {
        assertEval("argv <- list(structure(c(2, NA), .Names = c('N:P:K', 'Residuals')), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat51_824eb64b80a9cd5f4c92000f270e70e2");
    }

    @Test
    public void TestrGenBuiltinformat_testformat52_acf7177d968484917ff6e4593e61618d() {
        assertEval("argv <- list(structure('def\\'gh', class = 'AsIs'), FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat52_acf7177d968484917ff6e4593e61618d");
    }

    @Test
    public void TestrGenBuiltinformat_testformat55_5aa9cd93366d2ef32c58e7447d7fc8ea() {
        assertEval("argv <- list(1e-11, FALSE, NULL, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat55_5aa9cd93366d2ef32c58e7447d7fc8ea");
    }

    @Test
    public void TestrGenBuiltinformat_testformat56_3fc16590fe746a7d2228f762c3c79ad2() {
        assertEval("argv <- structure(list(x = 0.04, digits = 3, nsmall = 3), .Names = c('x',     'digits', 'nsmall'));do.call('format', argv)");
        check("TestrGenBuiltinformat_testformat56_3fc16590fe746a7d2228f762c3c79ad2");
    }

    @Test
    public void TestrGenBuiltinformat_testformat6_231ca0602afea092e4fe9c9dac9c4150() {
        assertEval("argv <- list(structure(c(47.97, 57.9, 74.76, 868.88), .Names = c('<none>', '- x4', '- x2', '- x1')), FALSE, 5L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat6_231ca0602afea092e4fe9c9dac9c4150");
    }

    @Test
    public void TestrGenBuiltinformat_testformat7_a6d605b0310b67e55c4c0a58ab3f4d3b() {
        assertEval("argv <- list(c('a', 'NA', NA, 'b'), FALSE, NULL, 0L, NULL, 0L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat7_a6d605b0310b67e55c4c0a58ab3f4d3b");
    }

    @Test
    public void TestrGenBuiltinformat_testformat8_304270986a3de2993a3e66f0cdccaee3() {
        assertEval("argv <- list(NA_real_, FALSE, 4L, 0L, NULL, 3L, TRUE, NA); .Internal(format(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltinformat_testformat8_304270986a3de2993a3e66f0cdccaee3");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC1_bd7a557060cd5a3ab0f34b0aad496b22() {
        assertEval("argv <- list(c(3.14159265358979, 3.1415926535898, 1), 'double', 10, 4L, 'g', '', c(12L, 12L, 12L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC1_bd7a557060cd5a3ab0f34b0aad496b22");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC10_7e2f803907747c949ea546a5221ff168() {
        assertEval("argv <- list(c(20, 30, 40, 50, 60, 70, 80, 90, 100), 'double', 1, 7L, 'fg', '', c(15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 15L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC10_7e2f803907747c949ea546a5221ff168");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC11_ccf0cdc249847f056ed1a264c6007359() {
        assertEval("argv <- list(c(0, 25, 50, 75, 100), 'double', 1, 6L, 'fg', '', c(14L, 13L, 13L, 13L, 13L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC11_ccf0cdc249847f056ed1a264c6007359");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC12_9e9819c4a2fb3e09fbad617bd26a77f7() {
        assertEval("argv <- list(5L, 'integer', 2, 2L, 'd', '', 10L); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC12_9e9819c4a2fb3e09fbad617bd26a77f7");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC13_03a2dec900d7d715899c39a38a87425f() {
        assertEval("argv <- list(c(3.14159265358979e-05, 0.000314159265358979, 0.00314159265358979, 0.0314159265358979, 0.314159265358979, 3.14159265358979, 31.4159265358979, 314.159265358979, 3141.59265358979, 31415.9265358979), 'double', 5, 4, 'fg', '', c(15, 14, 13, 12, 11, 10, 9, 9, 9, 9)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC13_03a2dec900d7d715899c39a38a87425f");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC14_21bbac62acd44703aba6b8805e56d60c() {
        assertEval("argv <- list(structure(c(1962.25, 1962.5, 1962.75, 1963, 1963.25, 1963.5, 1963.75, 1964, 1964.25, 1964.5, 1964.75, 1965, 1965.25, 1965.5, 1965.75, 1966, 1966.25, 1966.5, 1966.75, 1967, 1967.25, 1967.5, 1967.75, 1968, 1968.25, 1968.5, 1968.75, 1969, 1969.25, 1969.5, 1969.75, 1970, 1970.25, 1970.5, 1970.75, 1971, 1971.25, 1971.5, 1971.75), .Tsp = c(1962.25, 1971.75, 4), class = 'ts'), 'double', 1, 4L, 'g', '', c(12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L, 12L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC14_21bbac62acd44703aba6b8805e56d60c");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC2_678523811eba4bed56c354e38f6e583a() {
        assertEval("argv <- list(1, 'double', 8, 5, 'g', '-', 13); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC2_678523811eba4bed56c354e38f6e583a");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC3_ece303f2ddc7cc7c6df4e68a3feb63b8() {
        assertEval("argv <- list(structure(c(1.5, 13.3414265412268, 1e-15, 8, 1, 500, 28), .Dim = c(7L, 1L), .Dimnames = list(c('m.ship.expon.', 'objective', 'tolerance', 'iterations', 'converged', 'maxit', 'n'), ' ')), 'double', 8L, 7L, 'g', '', c(15L, 15L, 15L, 15L, 15L, 15L, 15L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC3_ece303f2ddc7cc7c6df4e68a3feb63b8");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC4_4c0260136615fc31af18166e8e089291() {
        assertEval("argv <- list(c(1000, 1e+07, 1), 'double', 5, 4L, 'g', '', c(12L, 12L, 12L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC4_4c0260136615fc31af18166e8e089291");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC5_68e13fb70e755f43ae4bbdeaf7e8d947() {
        assertEval("argv <- list(c(-3, -2, -1, 0, 1, 2, 3), 'double', 1L, 4L, 'g', '', c(12L, 12L, 12L, 12L, 12L, 12L, 12L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC5_68e13fb70e755f43ae4bbdeaf7e8d947");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC6_6fa2892fcd8f80bdaf44016d691b096c() {
        assertEval("argv <- list(3L, 'integer', 3, 2L, 'd', '0', 10L); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC6_6fa2892fcd8f80bdaf44016d691b096c");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC7_ec7629c2ed63f2159f58d6029355d607() {
        assertEval("argv <- list(c(0, 25, 50, 75, 100), 'double', 1, 7L, 'fg', '', c(16L, 15L, 15L, 15L, 15L)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC7_ec7629c2ed63f2159f58d6029355d607");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC8_6e81ff5de54c57eeb8f785702db441c6() {
        assertEval("argv <- list(structure(48.4333681840033, .Names = 'value'), 'double', 5L, 4L, 'g', '', 12L); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC8_6e81ff5de54c57eeb8f785702db441c6");
    }

    @Test
    public void TestrGenBuiltinformatC_testformatC9_fd98253fa4006b6a866a101a837e2996() {
        assertEval("argv <- list(c(0.0599, 0.00599, 0.000599, 5.99e-05, 5.99e-06, 5.99e-07), 'double', 3, -2, 'fg', '#', c(10, 11, 12, 13, 14, 15)); .Internal(formatC(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinformatC_testformatC9_fd98253fa4006b6a866a101a837e2996");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt1_7cc49787e49d64ce0c328250ee3df4c8() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L), mday = c(1L, 1L, 1L, 1L, 1L), mon = c(0L, 0L, 0L, 0L, 0L), year = 105:109, wday = c(6L, 0L, 1L, 2L, 4L), yday = c(0L, 0L, 0L, 0L, 0L), isdst = c(0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), '%Y-%m-%d', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt1_7cc49787e49d64ce0c328250ee3df4c8");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt2_618d6b93f0d6301c0ac99d428c9613e2() {
        assertEval("argv <- list(structure(list(sec = 10.7712235450745, min = 48L, hour = 14L, mday = 17L, mon = 2L, year = 114L, wday = 1L, yday = 75L, isdst = 1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), '%Y-%m-%d', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt2_618d6b93f0d6301c0ac99d428c9613e2");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt3_8220b474a017ef4be8079adff0ad19f1() {
        assertEval("argv <- list(structure(list(sec = 59.7693939208984, min = 47L, hour = 18L, mday = 17L, mon = 2L, year = 114L, wday = 1L, yday = 75L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'), '%Y-%m-%d %H:%M:%S', TRUE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt3_8220b474a017ef4be8079adff0ad19f1");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt4_a8c206210ddaf4f613af4d98541d8d13() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L), mday = c(30L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 30L, 30L, 30L, 31L, 30L, 31L, 31L, 31L, 30L), mon = c(5L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 5L, 5L, 5L, 5L, 11L, 11L, 11L, 5L, 5L, 5L, 11L, 5L, 11L, 11L, 11L, 5L), year = c(72L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 81L, 82L, 83L, 85L, 87L, 89L, 90L, 92L, 93L, 94L, 95L, 97L, 98L, 105L, 108L, 112L), wday = c(5L, 0L, 1L, 2L, 3L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 0L, 4L, 0L, 1L, 2L, 3L, 4L, 0L, 1L, 4L, 6L, 3L, 6L), yday = c(181L, 365L, 364L, 364L, 364L, 365L, 364L, 364L, 364L, 180L, 180L, 180L, 180L, 364L, 364L, 364L, 181L, 180L, 180L, 364L, 180L, 364L, 364L, 365L, 181L), isdst = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), '%Y-%m-%d %H:%M:%S', TRUE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt4_a8c206210ddaf4f613af4d98541d8d13");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt5_b1f3c5b53e70df36d35f99e0a12b13eb() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 19L, mday = 31L, mon = 11L, year = 69L, wday = 3L, yday = 364L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), '%Y-%m-%d %H:%M:%S', TRUE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt5_b1f3c5b53e70df36d35f99e0a12b13eb");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt6_e1345bc5ba72d75ef3c8389d8fe46f93() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L), hour = c(0L, 0L, 0L, 0L, 0L, 0L), mday = 6:11, mon = 0:5, year = -10:-5, wday = c(1L, 6L, 2L, 0L, 4L, 2L), yday = c(5L, 37L, 67L, 98L, 129L, 161L), isdst = c(0L, 0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), '%Y', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt6_e1345bc5ba72d75ef3c8389d8fe46f93");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt7_2376a795a93f62dbddd2e9af32a51ceb() {
        assertEval("argv <- list(structure(list(sec = c(0, NA, NA, 0), min = c(0L, NA, NA, 0L), hour = c(0L, NA, NA, 0L), mday = c(1L, NA, NA, 26L), mon = c(0L, NA, NA, 9L), year = c(101L, NA, NA, 104L), wday = c(1L, NA, NA, 2L), yday = c(0L, NA, NA, 299L), isdst = c(0L, -1L, -1L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), '%Y-%m-%d', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt7_2376a795a93f62dbddd2e9af32a51ceb");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt8_75cd49d9918e433136df2406ca59410f() {
        assertEval("argv <- list(structure(list(sec = 11.3034093379974, min = 37L, hour = 7L, mday = 7L, mon = 11L, year = 113L, wday = 6L, yday = 340L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')), '%H:%M:%OS3', FALSE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt8_75cd49d9918e433136df2406ca59410f");
    }

    @Test
    public void TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt9_513125df94e8f7e95e17d9524967da07() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'UTC'), '%Y-%m-%d', TRUE); .Internal(format.POSIXlt(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatPOSIXlt_testformatPOSIXlt9_513125df94e8f7e95e17d9524967da07");
    }

    @Test
    public void TestrGenBuiltinformatdifftime_testformatdifftime1_b67b6a7d49df06d569ab1cab65dc1c58() {
        assertEval("argv <- structure(list(x = structure(c(0, 30, 60), units = 'mins',     class = 'difftime')), .Names = 'x');do.call('format.difftime', argv)");
        check("TestrGenBuiltinformatdifftime_testformatdifftime1_b67b6a7d49df06d569ab1cab65dc1c58");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo1_b142f7c9c7c086832b3e99225b1af15c() {
        assertEval("argv <- list(c(0.099999994, 0.2), 7L, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo1_b142f7c9c7c086832b3e99225b1af15c");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo10_519a6135aa7ce22f4afbcd865d83853b() {
        assertEval("argv <- list(structure(c(2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 6, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y')), NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo10_519a6135aa7ce22f4afbcd865d83853b");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo11_344b2c8629595ce4b6c1507a40fa3d9c() {
        assertEval("argv <- list(structure(c(-3.14159265358979e-05, 3.14159265358979e-05, -0.000314159265358979, 0.000314159265358979, -0.00314159265358979, 0.00314159265358979, -0.0314159265358979, 0.0314159265358979, -0.314159265358979, 0.314159265358979, -3.14159265358979, 3.14159265358979, -31.4159265358979, 31.4159265358979, -314.159265358979, 314.159265358979, -3141.59265358979, 3141.59265358979, -31415.9265358979, 31415.9265358979, -314159.265358979, 314159.265358979, -1e-05, 1e-05, -1e-04, 1e-04, -0.001, 0.001, -0.01, 0.01, -0.1, 0.1), .Dim = c(2L, 16L)), NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo11_344b2c8629595ce4b6c1507a40fa3d9c");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo12_caced8cffbf9008b9f5dd456065219cb() {
        assertEval("argv <- list(c(NaN, NA), NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo12_caced8cffbf9008b9f5dd456065219cb");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo14_8df26dc259817ed8acd961107e3688ec() {
        assertEval("argv <- structure(list(x = complex(real = Inf, imaginary = Inf)),     .Names = 'x');do.call('format.info', argv)");
        check("TestrGenBuiltinformatinfo_testformatinfo14_8df26dc259817ed8acd961107e3688ec");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo15_efe64083370d69ab19e80502bd855c0c() {
        assertEval("argv <- structure(list(x = c(complex(real = NaN, imaginary = NaN),     NA)), .Names = 'x');do.call('format.info', argv)");
        check("TestrGenBuiltinformatinfo_testformatinfo15_efe64083370d69ab19e80502bd855c0c");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo2_af31558d035f21b11bccaf076d2fe46a() {
        assertEval("argv <- list(c(0.099999994, 0.2), 6L, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo2_af31558d035f21b11bccaf076d2fe46a");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo3_7a660d51fdfb66339a935a5ce4255565() {
        assertEval("argv <- list(c(Inf, -Inf), NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo3_7a660d51fdfb66339a935a5ce4255565");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo4_d06e86184a351c9455b2d0edf9470128() {
        assertEval("argv <- list(FALSE, NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo4_d06e86184a351c9455b2d0edf9470128");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo5_39c34bd94eed85a62a7912525f2379e9() {
        assertEval("argv <- list(3.14159265358979e-10, NULL, 8); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo5_39c34bd94eed85a62a7912525f2379e9");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo6_e1c61760a0e144328bce2c3d8c1e734f() {
        assertEval("argv <- list(1e+08, NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo6_e1c61760a0e144328bce2c3d8c1e734f");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo7_b33a6a563f156588908896e0152f8ead() {
        assertEval("argv <- list(1e+222, NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo7_b33a6a563f156588908896e0152f8ead");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo8_1c612fbf884c7c00a586bf1517c3a5e3() {
        assertEval("argv <- list(31.4159265358979, NULL, 8); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo8_1c612fbf884c7c00a586bf1517c3a5e3");
    }

    @Test
    public void TestrGenBuiltinformatinfo_testformatinfo9_d7a265e3dcfdde1e1a8705246eba6e24() {
        assertEval("argv <- list(712L, NULL, 0L); .Internal(format.info(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinformatinfo_testformatinfo9_d7a265e3dcfdde1e1a8705246eba6e24");
    }

    @Test
    public void TestrGenBuiltinformatpval_testformatpval1_8dfd94d6174890d833b7fa604cc1010c() {
        assertEval("argv <- structure(list(pv = 0.200965994008331, digits = 3), .Names = c('pv',     'digits'));do.call('format.pval', argv)");
        check("TestrGenBuiltinformatpval_testformatpval1_8dfd94d6174890d833b7fa604cc1010c");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma1_4473df9bd72c23be2ed976ce0c151278() {
        assertEval("argv <- list(c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1));gamma(argv[[1]]);");
        check("TestrGenBuiltingamma_testgamma1_4473df9bd72c23be2ed976ce0c151278");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma2_3c1e6c332ebaf637fa5a376412ad2e4f() {
        assertEval("argv <- list(FALSE);gamma(argv[[1]]);");
        check("TestrGenBuiltingamma_testgamma2_3c1e6c332ebaf637fa5a376412ad2e4f");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma3_c8855947f731e45b12c1022a76d9fc34() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));gamma(argv[[1]]);");
        check("TestrGenBuiltingamma_testgamma3_c8855947f731e45b12c1022a76d9fc34");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma5_7e0de8863fa730bf16f1a456f762a037() {
        assertEval("argv <- list(101);gamma(argv[[1]]);");
        check("TestrGenBuiltingamma_testgamma5_7e0de8863fa730bf16f1a456f762a037");
    }

    @Test
    public void TestrGenBuiltingamma_testgamma6_18d2777c36611ccc829aaa07cf7944a7() {
        assertEval("argv <- list(c(-3.000001, -3, -3, -2.999999, -2.965, -2.93, -2.895, -2.86, -2.825, -2.79, -2.755, -2.72, -2.685, -2.65, -2.615, -2.58, -2.545, -2.51, -2.475, -2.44, -2.405, -2.37, -2.335, -2.3, -2.265, -2.23, -2.195, -2.16, -2.125, -2.09, -2.055, -2.02, -2.000001, -2, -1.999999, -1.985, -1.95, -1.915, -1.88, -1.845, -1.81, -1.775, -1.74, -1.705, -1.67, -1.635, -1.6, -1.565, -1.53, -1.495, -1.46, -1.425, -1.39, -1.355, -1.32, -1.285, -1.25, -1.215, -1.18, -1.145, -1.11, -1.075, -1.04, -1.005, -1.000001, -1, -0.999999, -0.97, -0.935, -0.9, -0.865, -0.83, -0.795, -0.76, -0.725, -0.69, -0.655, -0.62, -0.585, -0.55, -0.515, -0.48, -0.445, -0.41, -0.375, -0.34, -0.305, -0.27, -0.235, -0.2, -0.165, -0.13, -0.0949999999999998, -0.0599999999999996, -0.0249999999999999, -1e-06, 0, 1e-06, 0.0100000000000002, 0.0450000000000004, 0.0800000000000001, 0.115, 0.15, 0.185, 0.22, 0.255, 0.29, 0.325, 0.36, 0.395, 0.43, 0.465, 0.5, 0.535, 0.57, 0.605, 0.640000000000001, 0.675, 0.71, 0.745000000000001, 0.78, 0.815, 0.850000000000001, 0.885, 0.92, 0.955000000000001, 0.99, 1.025, 1.06, 1.095, 1.13, 1.165, 1.2, 1.235, 1.27, 1.305, 1.34, 1.375, 1.41, 1.445, 1.48, 1.515, 1.55, 1.585, 1.62, 1.655, 1.69, 1.725, 1.76, 1.795, 1.83, 1.865, 1.9, 1.935, 1.97, 2.005, 2.04, 2.075, 2.11, 2.145, 2.18, 2.215, 2.25, 2.285, 2.32, 2.355, 2.39, 2.425, 2.46, 2.495, 2.53, 2.565, 2.6, 2.635, 2.67, 2.705, 2.74, 2.775, 2.81, 2.845, 2.88, 2.915, 2.95, 2.985, 3.02, 3.055, 3.09, 3.125, 3.16, 3.195, 3.23, 3.265, 3.3, 3.335, 3.37, 3.405, 3.44, 3.475, 3.51, 3.545, 3.58, 3.615, 3.65, 3.685, 3.72, 3.755, 3.79, 3.825, 3.86, 3.895, 3.93, 3.965, 4));gamma(argv[[1]]);");
        check("TestrGenBuiltingamma_testgamma6_18d2777c36611ccc829aaa07cf7944a7");
    }

    @Test
    public void TestrGenBuiltingcinfo_testgcinfo1_b2679704d2e2bea4b77293ecd030ef48() {
        assertEval("argv <- list(list()); .Internal(gcinfo(argv[[1]]))");
        check("TestrGenBuiltingcinfo_testgcinfo1_b2679704d2e2bea4b77293ecd030ef48");
    }

    @Test
    public void TestrGenBuiltingcinfo_testgcinfo2_0779a52aeb463f411790aaa4a825b3fd() {
        assertEval("argv <- list(FALSE); .Internal(gcinfo(argv[[1]]))");
        check("TestrGenBuiltingcinfo_testgcinfo2_0779a52aeb463f411790aaa4a825b3fd");
    }

    @Test
    public void TestrGenBuiltingctorture2_testgctorture21_e3e9375b04b511497bc2ab9a8841f2a4() {
        assertEval("argv <- list(NULL, NULL, FALSE); .Internal(gctorture2(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltingctorture2_testgctorture21_e3e9375b04b511497bc2ab9a8841f2a4");
    }

    @Test
    public void TestrGenBuiltingctorture2_testgctorture22_6c6266118bdd19a452f184283188d78b() {
        assertEval("argv <- list(FALSE, FALSE, FALSE); .Internal(gctorture2(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltingctorture2_testgctorture22_6c6266118bdd19a452f184283188d78b");
    }

    @Test
    public void TestrGenBuiltingetRestart_testgetRestart1_05c269c4e9ce65babe2285b34e6070b2() {
        assertEval("argv <- list(2L); .Internal(.getRestart(argv[[1]]))");
        check("TestrGenBuiltingetRestart_testgetRestart1_05c269c4e9ce65babe2285b34e6070b2");
    }

    @Test
    public void TestrGenBuiltingetRestart_testgetRestart2_5a1b43cdb8efed31809e39583630da8b() {
        assertEval("argv <- list(1L); .Internal(.getRestart(argv[[1]]))");
        check("TestrGenBuiltingetRestart_testgetRestart2_5a1b43cdb8efed31809e39583630da8b");
    }

    @Test
    public void TestrGenBuiltingetconst_testgetconst1_1c8d7b8f47e3a5d04dc34b03e40855ba() {
        assertEval("argv <- list(list(list(), NULL), 1); .Internal(getconst(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltingetconst_testgetconst1_1c8d7b8f47e3a5d04dc34b03e40855ba");
    }

    @Test
    public void TestrGenBuiltingetconst_testgetconst2_1887a2463f5a964af3e11d158b66282c() {
        assertEval("argv <- list(list(FALSE), 1); .Internal(getconst(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltingetconst_testgetconst2_1887a2463f5a964af3e11d158b66282c");
    }

    @Test
    public void TestrGenBuiltingettext_testgettext3_d94760f57357114c95e9b840712881ce() {
        assertEval("argv <- list(NULL, 'The following object is masked from ‘package:base’:\\n\\n    det\\n'); .Internal(gettext(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltingettext_testgettext3_d94760f57357114c95e9b840712881ce");
    }

    @Test
    public void TestrGenBuiltingettext_testgettext6_c0981cbb8176433c2aacfa88540062b1() {
        assertEval("argv <- list(NULL, NULL); .Internal(gettext(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltingettext_testgettext6_c0981cbb8176433c2aacfa88540062b1");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr1_8ebb964270131521a289c8b842b3fcba() {
        assertEval("argv <- list('', 'abc', FALSE, FALSE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr1_8ebb964270131521a289c8b842b3fcba");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr10_10685022731e163e4d3e036a4d36259c() {
        assertEval("argv <- list('(?<first>[[:upper:]][[:lower:]]+) (?<last>[[:upper:]][[:lower:]]+)', c('  Ben Franklin and Jefferson Davis', '\\tMillard Fillmore'), FALSE, TRUE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr10_10685022731e163e4d3e036a4d36259c");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr11_e7b8ea8fe8346e4d530edf2d4a4e7c6d() {
        assertEval("argv <- list('?', 'utils::data', FALSE, FALSE, TRUE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr11_e7b8ea8fe8346e4d530edf2d4a4e7c6d");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr12_53bc669706df0f168f4787b0d37c4bed() {
        assertEval("argv <- list('[[', 'utils:::.show_help_on_topic_', FALSE, FALSE, TRUE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr12_53bc669706df0f168f4787b0d37c4bed");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr14_a4aa92afb0e6c6f52512e4d9afbf4f8c() {
        assertEval("argv <- structure(list(pattern = '', text = 'abc', fixed = TRUE),     .Names = c('pattern', 'text', 'fixed'));do.call('gregexpr', argv)");
        check("TestrGenBuiltingregexpr_testgregexpr14_a4aa92afb0e6c6f52512e4d9afbf4f8c");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr15_28a488abd7e1543d280ce5e3f8400d6f() {
        assertEval("argv <- structure(list(pattern = '', text = 'abc'), .Names = c('pattern',     'text'));do.call('gregexpr', argv)");
        check("TestrGenBuiltingregexpr_testgregexpr15_28a488abd7e1543d280ce5e3f8400d6f");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr16_4811602af4acd32262f665f03d89c947() {
        assertEval("argv <- structure(list(pattern = '', text = 'abc', perl = TRUE),     .Names = c('pattern', 'text', 'perl'));do.call('gregexpr', argv)");
        check("TestrGenBuiltingregexpr_testgregexpr16_4811602af4acd32262f665f03d89c947");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr2_bca95179bee7fb70c744060ab2dcbc4b() {
        assertEval("argv <- list('[^\\\\.\\\\w:?$@[\\\\]]+', 'version$m', FALSE, TRUE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr2_bca95179bee7fb70c744060ab2dcbc4b");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr3_3d5ebc42c16e2fd7abdb096d6054ef5c() {
        assertEval("argv <- list('$', 'version$m', FALSE, FALSE, TRUE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr3_3d5ebc42c16e2fd7abdb096d6054ef5c");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr4_1a125740d7a3da09fcf8564bdfabefba() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', FALSE, FALSE, TRUE, TRUE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr4_1a125740d7a3da09fcf8564bdfabefba");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr5_f764145d181601e386edf4bf100ea063() {
        assertEval("argv <- list('', 'abc', FALSE, TRUE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr5_f764145d181601e386edf4bf100ea063");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr6_c0be4735e63ad80413f96c0e2efba3e4() {
        assertEval("argv <- list('', 'abc', FALSE, FALSE, TRUE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr6_c0be4735e63ad80413f96c0e2efba3e4");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr7_d7b33db339b072daf4ce027a0e0b256a() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', TRUE, FALSE, FALSE, TRUE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr7_d7b33db339b072daf4ce027a0e0b256a");
    }

    @Test
    public void TestrGenBuiltingregexpr_testgregexpr9_97cda4c85bdd67d9fb77194ec7b4438a() {
        assertEval("argv <- list('\\\\[[^]]*\\\\]', 'FALSE', FALSE, FALSE, FALSE, FALSE); .Internal(gregexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltingregexpr_testgregexpr9_97cda4c85bdd67d9fb77194ec7b4438a");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep10_bf80b8be3e8617de496a7c73791f704d() {
        assertEval("argv <- list('-package$', structure(c('bkde', 'bkde2D', 'bkfe', 'dpih', 'dpik', 'dpill', 'locpoly'), .Names = c('/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/bkde.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/bkde2D.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/bkfe.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/dpih.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/dpik.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/dpill.tex', '/home/lzhao/tmp/RtmphvE7Uy/ltxf49c4960bf/locpoly.tex')), FALSE, FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltingrep_testgrep10_bf80b8be3e8617de496a7c73791f704d");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep2_7ff292414afc18691db76a418ba76343() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', TRUE, FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltingrep_testgrep2_7ff292414afc18691db76a418ba76343");
    }

    @Test
    public void TestrGenBuiltingrep_testgrep7_50dd34ac32afe0b8905f9f6eb5352e40() {
        assertEval("argv <- list(''', structure('exNSS4_1.0.tar.gz', .Names = ''), FALSE, FALSE, FALSE, FALSE, FALSE, FALSE); .Internal(grep(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltingrep_testgrep7_50dd34ac32afe0b8905f9f6eb5352e40");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl12_e165cdc58aaf33023de8e5b430f01040() {
        assertEval("argv <- structure(list(pattern = 'length', x = 'Lengths: 0, 1',     ignore.case = TRUE), .Names = c('pattern', 'x', 'ignore.case'));do.call('grepl', argv)");
        check("TestrGenBuiltingrepl_testgrepl12_e165cdc58aaf33023de8e5b430f01040");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl5_4d07c02b6dea1f8845449f732ae53ed7() {
        assertEval("argv <- list('\\n', c('### Encoding: UTF-8', '', '### Name: text', '### Title: Add Text to a Plot', '### Aliases: text text.default', '### Keywords: aplot', '', '### ** Examples', '', 'plot(-1:1, -1:1, type = \\'n\\', xlab = \\'Re\\', ylab = \\'Im\\')', 'K <- 16; text(exp(1i * 2 * pi * (1:K) / K), col = 2)', '', '## The following two examples use latin1 characters: these may not', '## appear correctly (or be omitted entirely).', 'plot(1:10, 1:10, main = \\'text(...) examples\\\\n~~~~~~~~~~~~~~\\',', '     sub = \\'R is GNU ©, but not ® ...\\')', 'mtext(\\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\\', side = 3)', 'points(c(6,2), c(2,1), pch = 3, cex = 4, col = \\'red\\')', 'text(6, 2, \\'the text is CENTERED around (x,y) = (6,2) by default\\',', '     cex = .8)', 'text(2, 1, \\'or Left/Bottom - JUSTIFIED at (2,1) by 'adj = c(0,0)'\\',', '     adj = c(0,0))', 'text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))', 'text(4, 8.4, \\'expression(hat(beta) == (X^t * X)^{-1} * X^t * y)\\',', '     cex = .75)', 'text(4, 7, expression(bar(x) == sum(frac(x[i], n), i==1, n)))', '', '## Two more latin1 examples', 'text(5, 10.2,', '     \\'Le français, c'est façile: Règles, Liberté, Egalité, Fraternité...\\')', 'text(5, 9.8,', '     \\'Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)\\')', '', '', ''), FALSE, FALSE, FALSE, TRUE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltingrepl_testgrepl5_4d07c02b6dea1f8845449f732ae53ed7");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl7_e07b8a94fb311d6d9f0f627db2941ff4() {
        assertEval("argv <- list('^[[:space:]]*## No test:', 'Diagonal(3)', FALSE, FALSE, TRUE, FALSE, TRUE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltingrepl_testgrepl7_e07b8a94fb311d6d9f0f627db2941ff4");
    }

    @Test
    public void TestrGenBuiltingrepl_testgrepl8_da254da3d31bc434df2292be5942a03c() {
        assertEval("argv <- list('\\\\\\\\keyword\\\\{\\\\s*internal\\\\s*\\\\}', c('\\\\inputencoding{utf8}', '\\\\HeaderA{condest}{Compute Approximate CONDition number and 1-Norm of (Large) Matrices}{condest}', '\\\\aliasA{onenormest}{condest}{onenormest}', '%', '\\\\begin{Description}\\\\relax', '``Estimate'', i.e. compute approximately the CONDition number of', 'a (potentially large, often sparse) matrix \\\\code{A}.', 'It works by apply a fast approximation of the 1-norm,', '\\\\code{norm(A,\\'1\\')}, through \\\\code{onenormest(.)}.', '\\\\end{Description}', '%', '\\\\begin{Usage}', '\\\\begin{verbatim}', 'condest(A, t = min(n, 5), normA = norm(A, \\'1\\'),', '        silent = FALSE, quiet = TRUE)', '', 'onenormest(A, t = min(n, 5), A.x, At.x, n,', '           silent = FALSE, quiet = silent,', '           iter.max = 10, eps = 4 * .Machine$double.eps)', '\\\\end{verbatim}', '\\\\end{Usage}', '%', '\\\\begin{Arguments}', '\\\\begin{ldescription}', '\\\\item[\\\\code{A}] a square matrix, optional for \\\\code{onenormest()}, where', 'instead of \\\\code{A}, \\\\code{A.x} and \\\\code{At.x} can be specified,', 'see there.', '\\\\item[\\\\code{t}] number of columns to use in the iterations.', '\\\\item[\\\\code{normA}] number; (an estimate of) the 1-norm of \\\\code{A}, by', 'default \\\\code{\\\\LinkA{norm}{norm}(A, \\'1\\')}; may be replaced by an estimate.', '\\\\item[\\\\code{silent}] logical indicating if warning and (by default)', 'convergence messages should be displayed.', '\\\\item[\\\\code{quiet}] logical indicating if convergence messages should be', 'displayed.', '\\\\item[\\\\code{A.x, At.x}] when \\\\code{A} is missing, these two must be given as', 'functions which compute \\\\code{A \\\\%\\\\% x}, or \\\\code{t(A) \\\\%\\\\% x},', 'respectively.', '\\\\item[\\\\code{n}] \\\\code{ == nrow(A)}, only needed when \\\\code{A} is not specified.', '\\\\item[\\\\code{iter.max}] maximal number of iterations for the 1-norm estimator.', '\\\\item[\\\\code{eps}] the relaive change that is deemed irrelevant.', '\\\\end{ldescription}', '\\\\end{Arguments}', '%', '\\\\begin{Value}', 'Both functions return a \\\\code{\\\\LinkA{list}{list}};', '\\\\code{onenormest()} with components,', '\\\\begin{ldescription}', '\\\\item[\\\\code{est}] a number \\\\eqn{> 0}{}, the estimated \\\\code{norm(A, \\'1\\')}.', '\\\\item[\\\\code{v}] the maximal \\\\eqn{A X}{} column.', '', '\\\\end{ldescription}', 'The function \\\\code{condest()} returns a list with components,', '\\\\begin{ldescription}', '\\\\item[\\\\code{est}] a number \\\\eqn{> 0}{}, the estimated condition number', '\\\\eqn{\\\\hat\\\\kappa}{}; when \\\\eqn{r :=}{}\\\\code{rcond(A)},', '\\\\eqn{1/\\\\hat\\\\kappa \\\\approx r}{}.', '\\\\item[\\\\code{v}] integer vector length \\\\code{n}, with an \\\\code{1} at the index', '\\\\code{j} with maximal column \\\\code{A[,j]} in \\\\eqn{A}{}.', '\\\\item[\\\\code{w}] numeric vector, the largest \\\\eqn{A x}{} found.', '\\\\item[\\\\code{iter}] the number of iterations used.', '\\\\end{ldescription}', '\\\\end{Value}', '%', '\\\\begin{Author}\\\\relax', 'This is based on octave's \\\\code{condest()} and', '\\\\code{onenormest()} implementations with original author', 'Jason Riedy, U Berkeley; translation to \\\\R{} and', 'adaption by Martin Maechler.', '\\\\end{Author}', '%', '\\\\begin{References}\\\\relax', '', 'Nicholas J. Higham and Fran\\303\\247oise Tisseur (2000).', 'A Block Algorithm for Matrix 1-Norm Estimation, with an Application to 1-Norm', 'Pseudospectra.', '\\\\emph{SIAM J. Matrix Anal. Appl.} \\\\bold{21}, 4, 1185--1201.', '\\\\url{http://dx.doi.org/10.1137/S0895479899356080}', '', '', 'William W. Hager (1984).', 'Condition Estimates.', '\\\\emph{SIAM J. Sci. Stat. Comput.} \\\\bold{5}, 311--316.', '\\\\end{References}', '%', '\\\\begin{SeeAlso}\\\\relax', '\\\\code{\\\\LinkA{norm}{norm}}, \\\\code{\\\\LinkA{rcond}{rcond}}.', '\\\\end{SeeAlso}', '%', '\\\\begin{Examples}', '\\\\begin{ExampleCode}', 'data(KNex)', 'mtm <- with(KNex, crossprod(mm))', 'system.time(ce <- condest(mtm))', '## reciprocal', '1 / ce$est', 'system.time(rc <- rcond(mtm)) # takes ca  3 x  longer', 'rc', 'all.equal(rc, 1/ce$est) # TRUE -- the approxmation was good', '\\\\end{ExampleCode}', '\\\\end{Examples}'), FALSE, FALSE, TRUE, FALSE, FALSE, FALSE); .Internal(grepl(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]]))");
        check("TestrGenBuiltingrepl_testgrepl8_da254da3d31bc434df2292be5942a03c");
    }

    @Test
    public void TestrGenBuiltingrowconst_testgrowconst1_2dba37c5effe26a881d42ae71454c753() {
        assertEval("argv <- list(list(list())); .Internal(growconst(argv[[1]]))");
        check("TestrGenBuiltingrowconst_testgrowconst1_2dba37c5effe26a881d42ae71454c753");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub10_7529e46e81c5d0bbdbbf668805584e03() {
        assertEval("argv <- list('a*', 'x', 'baaac', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub10_7529e46e81c5d0bbdbbf668805584e03");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub13_9848cd82002f6b6237e971853fab0753() {
        assertEval("argv <- list('\\\\b', '|', 'The quick brown èé', FALSE, TRUE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub13_9848cd82002f6b6237e971853fab0753");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub14_7f464b230b39683811a6f51cd43771bc() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/src/library/utils', '', '/home/lzhao/hg/r-instrumented/src/library/utils/vignettes', FALSE, FALSE, TRUE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub14_7f464b230b39683811a6f51cd43771bc");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub15_036914d1301004274b1056eaf2d9b03b() {
        assertEval("argv <- list('(‘|’)', ''', c('', '', '> library(survival)', 'Loading required package: splines', '> options(na.action=na.exclude) # preserve missings', '> options(contrasts=c('contr.treatment', 'contr.poly')) #ensure constrast type', '> ', '> #', '> # Simple tests of concordance.  These numbers were derived in multiple', '> #   codes.', '> #', '> aeq <- function(x,y, ...) all.equal(as.vector(x), as.vector(y), ...)', '> ', '> grank <- function(x, time, grp, wt) ', '+     unlist(tapply(x, grp, rank))', '> grank2 <- function(x, time, grp, wt) {  #for case weights', '+     if (length(wt)==0) wt <- rep(1, length(x))', '+     z <- double(length(x))', '+     for (i in unique(grp)) {', '+         indx <- which(grp==i)', '+         temp <- tapply(wt[indx], x[indx], sum)', '+         temp <- temp/2  + c(0, cumsum(temp)[-length(temp)])', '+         z[indx] <- temp[match(x[indx], names(temp))]', '+     }', '+     z', '+ }', '> ', '> ', '> tdata <- aml[aml$x=='Maintained',]', '> tdata$y <- c(1,6,2,7,3,7,3,8,4,4,5)', '> tdata$wt <- c(1,2,3,2,1,2,3,4,3,2,1)', '> fit <- survConcordance(Surv(time, status) ~y, tdata)', '> aeq(fit$stats[1:4], c(14,24,2,0))', '[1] TRUE', '> cfit <- coxph(Surv(time, status) ~ tt(y), tdata, tt=grank, method='breslow',', '+               iter=0, x=T)', '> cdt <- coxph.detail(cfit)', '> aeq(4*sum(cdt$imat),fit$stats[5]^2) ', '[1] TRUE', '> aeq(2*sum(cdt$score), diff(fit$stats[2:1]))', '[1] TRUE', '> ', '> ', '> # Lots of ties', '> tempx <- Surv(c(1,2,2,2,3,4,4,4,5,2), c(1,0,1,0,1,0,1,1,0,1))', '> tempy <- c(5,5,4,4,3,3,7,6,5,4)', '> fit2 <- survConcordance(tempx ~ tempy)', '> aeq(fit2$stats[1:4], c(13,13,5,2))', '[1] TRUE', '> cfit2 <-  coxph(tempx ~ tt(tempy), tt=grank, method='breslow', iter=0)', '> aeq(4/cfit2$var, fit2$stats[5]^2)', '[1] TRUE', '> ', '> # Bigger data', '> fit3 <- survConcordance(Surv(time, status) ~ age, lung)', '> aeq(fit3$stats[1:4], c(10717, 8706, 591, 28))', '[1] TRUE', '> cfit3 <- coxph(Surv(time, status) ~ tt(age), lung, ', '+                iter=0, method='breslow', tt=grank, x=T)', '> cdt <- coxph.detail(cfit3)', '> aeq(4*sum(cdt$imat),fit3$stats[5]^2) ', '[1] TRUE', '> aeq(2*sum(cdt$score), diff(fit3$stats[2:1]))', '[1] TRUE', '> ', '> ', '> # More ties', '> fit4 <- survConcordance(Surv(time, status) ~ ph.ecog, lung)', '> aeq(fit4$stats[1:4], c(8392, 4258, 7137, 28))', '[1] TRUE', '> cfit4 <- coxph(Surv(time, status) ~ tt(ph.ecog), lung, ', '+                iter=0, method='breslow', tt=grank)', '> aeq(4/cfit4$var, fit4$stats[5]^2)', '[1] TRUE', '> ', '> # Case weights', '> fit5 <- survConcordance(Surv(time, status) ~ y, tdata, weight=wt)', '> fit6 <- survConcordance(Surv(time, status) ~y, tdata[rep(1:11,tdata$wt),])', '> aeq(fit5$stats[1:4], c(70, 91, 7, 0))  # checked by hand', '[1] TRUE', '> aeq(fit5$stats[1:3], fit6$stats[1:3])  #spurious \\'tied on time\\' value, ignore', '[1] TRUE', '> aeq(fit5$std, fit6$std)', '[1] TRUE', '> cfit5 <- coxph(Surv(time, status) ~ tt(y), tdata, weight=wt, ', '+                iter=0, method='breslow', tt=grank2)', '> cfit6 <- coxph(Surv(time, status) ~ tt(y), tdata[rep(1:11,tdata$wt),], ', '+                iter=0, method='breslow', tt=grank)', '> aeq(4/cfit6$var, fit6$stats[5]^2)', '[1] TRUE', '> aeq(cfit5$var, cfit6$var)', '[1] TRUE', '> ', '> # Start, stop simplest cases', '> fit7 <- survConcordance(Surv(rep(0,11), time, status) ~ y, tdata)', '> aeq(fit7$stats, fit$stats)', '[1] TRUE', '> aeq(fit7$std.err, fit$std.err)', '[1] TRUE', '> fit7 <- survConcordance(Surv(rep(0,11), time, status) ~ y, tdata, weight=wt)', '> aeq(fit5$stats, fit7$stats)', '[1] TRUE', '> ', '> # Multiple intervals for some, but same risk sets as tdata', '> tdata2 <- data.frame(time1=c(0,3, 5,  6,7,   0,  4,17,  7,  0,16,  2,  0, ', '+                              0,9, 5),', '+                      time2=c(3,9, 13, 7,13, 18, 17,23, 28, 16,31, 34, 45, ', '+                              9,48, 60),', '+                      status=c(0,1, 1, 0,0,  1,  0,1, 0, 0,1, 1, 0, 0,1, 0),', '+                      y = c(1,1, 6, 2,2, 7, 3,3, 7, 3,3, 8, 4, 4,4, 5),', '+                      wt= c(1,1, 2, 3,3, 2, 1,1, 2, 3,3, 4, 3, 2,2, 1))', '> fit8 <- survConcordance(Surv(time1, time2, status) ~y, tdata2, weight=wt)', '> aeq(fit5$stats, fit8$stats)', '[1] TRUE', '> aeq(fit5$std.err, fit8$std.err)', '[1] TRUE', '> cfit8 <- coxph(Surv(time1, time2, status) ~ tt(y), tdata2, weight=wt, ', '+                iter=0, method='breslow', tt=grank2)', '> aeq(4/cfit8$var, fit8$stats[5]^2)', '[1] TRUE', '> aeq(fit8$stats[5]/(2*sum(fit8$stats[1:3])), fit8$std.err)', '[1] TRUE', '> ', '> # Stratified', '> tdata3 <- data.frame(time1=c(tdata2$time1, rep(0, nrow(lung))),', '+                      time2=c(tdata2$time2, lung$time),', '+                      status = c(tdata2$status, lung$status -1),', '+                      x = c(tdata2$y, lung$ph.ecog),', '+                      wt= c(tdata2$wt, rep(1, nrow(lung))),', '+                      grp=rep(1:2, c(nrow(tdata2), nrow(lung))))', '> fit9 <- survConcordance(Surv(time1, time2, status) ~x + strata(grp),', '+                         data=tdata3, weight=wt)', '> aeq(fit9$stats[1,], fit5$stats)', '[1] TRUE', '> aeq(fit9$stats[2,], fit4$stats)', '[1] TRUE', '> '), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub15_036914d1301004274b1056eaf2d9b03b");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub16_ba0a2be2b395794769c80eeea930b1ae() {
        assertEval("argv <- list('[[:blank:][:cntrl:]]*', '', structure(' unix\\n', Rd_tag = 'TEXT'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub16_ba0a2be2b395794769c80eeea930b1ae");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub17_bdee42f75dcb4d58f9c68dd3a445d499() {
        assertEval("argv <- list('(\\\\w)(\\\\w*)', '\\\\U\\\\1\\\\L\\\\2', 'a test of capitalizing', FALSE, TRUE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub17_bdee42f75dcb4d58f9c68dd3a445d499");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub18_b5ecae04757fba9c37c2e55fd07ce7ca() {
        assertEval("argv <- list('\\\\.', '\\\\\\\\.', '^*.t??$', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub18_b5ecae04757fba9c37c2e55fd07ce7ca");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub19_2b2431b050b9ec10955f081079ed0d48() {
        assertEval("argv <- list('(\\\\w)(\\\\w*)(\\\\w)', '\\\\U\\\\1\\\\E\\\\2\\\\U\\\\3', 'useRs may fly into JFK or laGuardia', FALSE, TRUE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub19_2b2431b050b9ec10955f081079ed0d48");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub2_c034d1455969b903307358fa6716203b() {
        assertEval("argv <- list('\\\\\\\\(link|var)\\\\{([^}]+)\\\\}', '\\\\2', structure('     \\'Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)\\')\\n', Rd_tag = 'RCODE'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub2_c034d1455969b903307358fa6716203b");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub20_557dade81f3bfa6ee72071a19f0727bf() {
        assertEval("argv <- list('([&$%_#])', '\\\\\\\\\\\\1', structure('with 5% of the range added to each end.\\n', Rd_tag = 'TEXT'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub20_557dade81f3bfa6ee72071a19f0727bf");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub22_047f249a051be625467ba4b83220245b() {
        assertEval("argv <- list('^\\\\s+', '', ' utilities ', FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub22_047f249a051be625467ba4b83220245b");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub23_c827d7a2b0952230ea4e05cad718f20b() {
        assertEval("argv <- list('([^\\\\])\\\\[', '\\\\1\\\\\\\\[', '^.*[.*$', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub23_c827d7a2b0952230ea4e05cad718f20b");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub25_e759254c5e5d6da45f534f8e03283b99() {
        assertEval("argv <- list('%', '\\\\\\\\%', structure('foo', .Names = 'object'), FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub25_e759254c5e5d6da45f534f8e03283b99");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub26_a6631bc9f1b0c1f13b46d61f09bc359e() {
        assertEval("argv <- list('\\\\\\\\(l|)dots', '...', structure('plot(1:10, 1:10, main = \\'text(...) examples\\\\n~~~~~~~~~~~~~~\\',\\n', Rd_tag = 'RCODE'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub26_a6631bc9f1b0c1f13b46d61f09bc359e");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub27_abf221cb6ca381e202b1dd98ead58967() {
        assertEval("argv <- list('.__T__(.*):([^:]+(.*))', '\\\\2', c('.__T__!:base', '.__T__%%:base', '.__T__%*%:base', '.__T__%/%:base', '.__T__&:base', '.__T__*:base', '.__T__+:base', '.__T__-:base', '.__T__/:base', '.__T__Arith:base', '.__T__BunchKaufman:Matrix', '.__T__Cholesky:Matrix', '.__T__Compare:methods', '.__T__Logic:base', '.__T__Math2:methods', '.__T__Math:base', '.__T__Ops:base', '.__T__Schur:Matrix', '.__T__Summary:base', '.__T__[:base', '.__T__[<-:base', '.__T__^:base', '.__T__all.equal:base', '.__T__all:base', '.__T__any:base', '.__T__as.array:base', '.__T__as.integer:base', '.__T__as.logical:base', '.__T__as.matrix:base', '.__T__as.numeric:base', '.__T__as.vector:base', '.__T__band:Matrix', '.__T__cbind2:methods', '.__T__chol2inv:base', '.__T__chol:base', '.__T__coerce:methods', '.__T__coerce<-:methods', '.__T__colMeans:base', '.__T__colSums:base', '.__T__cov2cor:stats', '.__T__crossprod:base', '.__T__determinant:base', '.__T__diag:base', '.__T__diag<-:base', '.__T__diff:base', '.__T__dim:base', '.__T__dim<-:base', '.__T__dimnames:base', '.__T__dimnames<-:base', '.__T__drop:base', '.__T__expand:Matrix', '.__T__expm:Matrix', '.__T__facmul:Matrix', '.__T__forceSymmetric:Matrix', '.__T__format:base', '.__T__head:utils', '.__T__image:graphics', '.__T__initialize:methods', '.__T__is.finite:base', '.__T__is.infinite:base', '.__T__is.na:base', '.__T__isDiagonal:Matrix', '.__T__isSymmetric:base', '.__T__isTriangular:Matrix', '.__T__kronecker:base', '.__T__length:base', '.__T__lu:Matrix', '.__T__mean:base', '.__T__nnzero:Matrix', '.__T__norm:base', '.__T__pack:Matrix', '.__T__print:base', '.__T__prod:base', '.__T__qr.Q:base', '.__T__qr.R:base', '.__T__qr.coef:base', '.__T__qr.fitted:base', '.__T__qr.qty:base', '.__T__qr.qy:base', '.__T__qr.resid:base', '.__T__qr:base', '.__T__rbind2:methods', '.__T__rcond:base', '.__T__rep:base', '.__T__rowMeans:base', '.__T__rowSums:base', '.__T__show:methods', '.__T__skewpart:Matrix', '.__T__solve:base', '.__T__sum:base', '.__T__summary:base', '.__T__symmpart:Matrix', '.__T__t:base', '.__T__tail:utils', '.__T__tcrossprod:base', '.__T__toeplitz:stats', '.__T__tril:Matrix', '.__T__triu:Matrix', '.__T__unname:base', '.__T__unpack:Matrix', '.__T__update:stats', '.__T__updown:Matrix', '.__T__which:base', '.__T__writeMM:Matrix', '.__T__zapsmall:base'), FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub27_abf221cb6ca381e202b1dd98ead58967");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub28_2786109e8ceb268fe75e04680d783361() {
        assertEval("argv <- list('([^\\\\])\\\\(', '\\\\1\\\\\\\\(', '^.*{n.*$', FALSE, FALSE, FALSE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub28_2786109e8ceb268fe75e04680d783361");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub3_605ecb1828d714a8f1d642c31dfebab5() {
        assertEval("argv <- list('\\\\bsl', '\\\\bsl{}', structure('     knots).\\n', Rd_tag = 'TEXT'), FALSE, FALSE, TRUE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub3_605ecb1828d714a8f1d642c31dfebab5");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub30_da596c3d040074b084d41cf23d1d4ea8() {
        assertEval("argv <- structure(list(pattern = 'a*', replacement = 'x', x = 'baaaac',     perl = TRUE), .Names = c('pattern', 'replacement', 'x', 'perl'));do.call('gsub', argv)");
        check("TestrGenBuiltingsub_testgsub30_da596c3d040074b084d41cf23d1d4ea8");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub31_e978d2b66288517bc0c00b4ab66afc60() {
        assertEval("argv <- structure(list(pattern = 'a*', replacement = 'x', x = 'baaaac'),     .Names = c('pattern', 'replacement', 'x'));do.call('gsub', argv)");
        check("TestrGenBuiltingsub_testgsub31_e978d2b66288517bc0c00b4ab66afc60");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub4_992637880a818a82e4bc9fc17014c01e() {
        assertEval("argv <- list('\\\\bsl', '\\\\bsl{}', structure('  ', Rd_tag = 'TEXT'), FALSE, FALSE, TRUE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub4_992637880a818a82e4bc9fc17014c01e");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub5_8c0f11bb2f8aaf2acb931c9da4d16e43() {
        assertEval("argv <- list('([{}$#_])', '\\\\\\\\\\\\1', structure('2013-03-19 13:18:58', .Names = 'Date/Publication'), FALSE, FALSE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub5_8c0f11bb2f8aaf2acb931c9da4d16e43");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub6_e97bd074be3d9178ffea993c6e0a6de8() {
        assertEval("argv <- list('é', 'gh', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', FALSE, FALSE, TRUE, FALSE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub6_e97bd074be3d9178ffea993c6e0a6de8");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub7_fee8d53b32d8c0dad2fad676cb70dfad() {
        assertEval("argv <- list('([&$%_#])', '\\\\\\\\\\\\1', structure(', then ', Rd_tag = 'TEXT'), FALSE, TRUE, FALSE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub7_fee8d53b32d8c0dad2fad676cb70dfad");
    }

    @Test
    public void TestrGenBuiltingsub_testgsub9_9394983adf7c6d99ae5ff180e19b7171() {
        assertEval("argv <- list('\\\\', '\\\\bsl', structure('range specified by ', Rd_tag = 'TEXT'), FALSE, FALSE, TRUE, TRUE); .Internal(gsub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltingsub_testgsub9_9394983adf7c6d99ae5ff180e19b7171");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv2_83efbe1df805ba105c39fda056c8d672() {
        assertEval("argv <- list('façile'   , 'latin1', 'ASCII', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltiniconv_testiconv2_83efbe1df805ba105c39fda056c8d672");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv3_cb446fe63500870751ff30f909956f3c() {
        assertEval("argv <- list(c('% This file is part of the 'foreign' package for R', '% It is distributed under the GPL version 2 or later', '', '\\\\name{S3 read functions}', '\\\\alias{data.restore}', '\\\\alias{read.S}', '\\\\title{Read an S3 Binary or data.dump File}', '\\\\description{', '  Reads binary data files or \\\\code{data.dump} files that were produced', '  in S version 3.', '}', '\\\\usage{', '  data.restore(file, print = FALSE, verbose = FALSE, env = .GlobalEnv)', '  read.S(file)', '}', '\\\\arguments{', '  \\\\item{file}{the filename of the S-PLUS \\\\code{data.dump} or binary', '    file.}', '  \\\\item{print}{whether to print the name of each object as read from the', '    file.}', '  \\\\item{verbose}{whether to print the name of every subitem within each', '    object.}', '  \\\\item{env}{environment within which to create the restored object(s).}', '}', '\\\\value{', '  For \\\\code{read.S}, an R version of the S3 object.', '', '  For \\\\code{data.restore}, the name of the file.', '}', '\\\\details{', '  \\\\code{read.S} can read the binary files produced in some older', '  versions of S-PLUS on either Windows (versions 3.x, 4.x, 2000) or Unix', '  (version 3.x with 4 byte integers).  It automatically detects whether', '  the file was produced on a big- or little-endian machine and adapts', '  itself accordingly.', '', '  \\\\code{data.restore} can read a similar range of files produced by', '  \\\\code{data.dump} and for newer versions of S-PLUS, those from', '  \\\\code{data.dump(....., oldStyle=TRUE)}.', '', '  Not all S3 objects can be handled in the current version.  The most', '  frequently encountered exceptions are functions and expressions; you', '  will also have trouble with objects that contain model formulas.  In', '  particular, comments will be lost from function bodies, and the', '  argument lists of functions will often be changed.', '}', '\\\\author{', '  Duncan Murdoch', '}', '\\\\examples{', '\\\\dontrun{read.S(file.path(\\'_Data\\', \\'myobj\\'))', 'data.restore(\\'dumpdata\\', print = TRUE)', '}}', '\\\\keyword{data}', '\\\\keyword{file}'), '', 'ASCII', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltiniconv_testiconv3_cb446fe63500870751ff30f909956f3c");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv6_e13a6b665d6f41270fe5914650017137() {
        assertEval("argv <- list(list(), 'latin1', 'ASCII', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltiniconv_testiconv6_e13a6b665d6f41270fe5914650017137");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv7_5136fb34863ba18cfa72ee2fa450f451() {
        assertEval("argv <- list('façile'   , 'latin1', 'ASCII', '', TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltiniconv_testiconv7_5136fb34863ba18cfa72ee2fa450f451");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv8_60993ad6adafa3101de15be38263cffc() {
        assertEval("argv <- list(structure('Prediction matrix for soap film smooth', Rd_tag = 'TEXT'), 'UTF-8', 'ASCII', NA_character_, FALSE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltiniconv_testiconv8_60993ad6adafa3101de15be38263cffc");
    }

    @Test
    public void TestrGenBuiltiniconv_testiconv9_4ddd37a63b4115f8f20cea7195287015() {
        assertEval("argv <- list(structure(c('Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance', 'Q.1 Opinion of president's job performance'), .Names = c('Q1_MISSING_NONE', 'Q1_MISSING_1', 'Q1_MISSING_2', 'Q1_MISSING_3', 'Q1_MISSING_RANGE', 'Q1_MISSING_LOW', 'Q1_MISSING_HIGH', 'Q1_MISSING_RANGE_1', 'Q1_MISSING_LOW_1', 'Q1_MISSING_HIGH_1')), 'latin1', '', NA_character_, TRUE, FALSE); .Internal(iconv(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltiniconv_testiconv9_4ddd37a63b4115f8f20cea7195287015");
    }

    @Test
    public void TestrGenBuiltinicuSetCollate_testicuSetCollate1_e6b72f4268a1f77ea1f1aa28a891c91f() {
        assertEval(" .Internal(icuSetCollate())");
        check("TestrGenBuiltinicuSetCollate_testicuSetCollate1_e6b72f4268a1f77ea1f1aa28a891c91f");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical11_dfb7b3054dcb75166b6daa12eeecceee() {
        assertEval("argv <- list(NULL, '\\\\link', TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical11_dfb7b3054dcb75166b6daa12eeecceee");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical13_a57349cf39ffef9133cde9aacb3d55ef() {
        assertEval("argv <- list(NA_complex_, NA_complex_, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical13_a57349cf39ffef9133cde9aacb3d55ef");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical14_64c0a8092307ad9d5a2738803b159969() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 2, 3), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('I', 'a')), foo = 'bar', class = 'matrix'), structure(c(1, 1, 1, 1, 2, 3), .Dim = c(3L, 2L), class = 'matrix', foo = 'bar', .Dimnames = list(NULL, c('I', 'a'))), TRUE, TRUE, FALSE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical14_64c0a8092307ad9d5a2738803b159969");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical15_838fbb2684b3da3926a311ed019f4137() {
        assertEval("argv <- list(structure(list(x = 1L), .Names = 'x', row.names = c(NA, -1L), class = 'data.frame'), structure(list(x = 1L), .Names = 'x', row.names = c(NA, -1L), class = 'data.frame'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical15_838fbb2684b3da3926a311ed019f4137");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical16_d75fe7faf37da9b7c9ccf7de042689c7() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L), .Label = c('1', '2'), class = 'factor'), structure(list(f = structure(c(1L, 1L, 1L), .Label = c('1', '2'), class = 'factor'), u = structure(12:14, unit = 'kg', class = 'avector')), .Names = c('f', 'u'), row.names = 2:4, class = 'data.frame'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical16_d75fe7faf37da9b7c9ccf7de042689c7");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical20_1af12ffb649546231e8f20d7f6b93c6a() {
        assertEval("argv <- list(NaN, NaN, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical20_1af12ffb649546231e8f20d7f6b93c6a");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical24_67b2fe6dbf438c15ec908556159f926d() {
        assertEval("argv <- list(list(c('r1', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15', 'r16', 'r17', 'r18', 'r19', 'r20', 'r21', 'r22', 'r23', 'r24', 'r25', 'r26', 'r27', 'r28', 'r29', 'r30', 'r31', 'r32', 'r33', 'r34', 'r35', 'r36', 'r37', 'r38', 'r39', 'r40'), c('c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'c10', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'c17', 'c18', 'c19', 'c20')), list(character(0), character(0)), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical24_67b2fe6dbf438c15ec908556159f926d");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical28_de293a9e5ae455f54063652ce73ddd52() {
        assertEval("argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, -10L), class = 'data.frame'), structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 3L, 2L, 3L, 3L, 1L, 2L, 3L, 2L, 2L), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = c(NA, 10L), class = 'data.frame'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical28_de293a9e5ae455f54063652ce73ddd52");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical32_f812c0ab82842b9131b133ac2fcaedeb() {
        assertEval("argv <- list(structure(function (x) standardGeneric('cosh', .Primitive('cosh')), generic = structure('cosh', package = 'base'), package = 'base', group = list('Math'), valueClass = character(0), signature = 'x', default = .Primitive('cosh'), skeleton = quote(.Primitive('cosh')(x)), class = structure('standardGeneric', package = 'methods')), FALSE, TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical32_f812c0ab82842b9131b133ac2fcaedeb");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical35_d2d075a5f33e5a3ba19ae07a4bec8357() {
        assertEval("argv <- structure(list(x = expression(exp(-0.5 * u^2)), y = expression(exp(-0.5 *     u^2))), .Names = c('x', 'y'));do.call('identical', argv)");
        check("TestrGenBuiltinidentical_testidentical35_d2d075a5f33e5a3ba19ae07a4bec8357");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical36_79850059a8f4d13ddcd947f591a2321a() {
        assertEval("argv <- structure(list(x = structure(list(X1.4 = 1:4), .Names = 'X1.4',     row.names = c(NA, -4L), class = 'data.frame'), y = structure(list(X1.4 = 1:4),     .Names = 'X1.4', row.names = c('1', '2', '3', '4'), class = 'data.frame')),     .Names = c('x', 'y'));do.call('identical', argv)");
        check("TestrGenBuiltinidentical_testidentical36_79850059a8f4d13ddcd947f591a2321a");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical37_8c45751cd06e41fd83a4f22150cac4ef() {
        assertEval("argv <- structure(list(x = structure(list(a = NA, b = NA_integer_,     c = NA_real_, d = NA_complex_, e = 1, f = 1L, g = 1:3, h = c(NA,         1L, 2L, 3L), i = NA_character_, j = c('foo', NA, 'bar')),     .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')),     y = structure(list(a = NA, b = NA_integer_, c = NA_real_,         d = NA_complex_, e = 1, f = 1L, g = 1:3, h = c(NA, 1L,             2L, 3L), i = NA_character_, j = c('foo', NA, 'bar')),         .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',             'j'))), .Names = c('x', 'y'));do.call('identical', argv)");
        check("TestrGenBuiltinidentical_testidentical37_8c45751cd06e41fd83a4f22150cac4ef");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical5_a49793f9fcd10d986b6fbda840ab252c() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')), structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical5_a49793f9fcd10d986b6fbda840ab252c");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical6_c5726d2da35d0f9d79c0ca28babc7a3a() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'), structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical6_c5726d2da35d0f9d79c0ca28babc7a3a");
    }

    @Test
    public void TestrGenBuiltinidentical_testidentical8_efe4e4741e3c2e339c2f713c30cfe015() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a', .Tsp = c(1, 1, 1), class = 'ts'), structure(list(a = 1), .Names = 'a', .Tsp = c(1, 1, 1), class = 'ts'), TRUE, TRUE, TRUE, TRUE, FALSE); .Internal(identical(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinidentical_testidentical8_efe4e4741e3c2e339c2f713c30cfe015");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits12_1f7dbbb7c4fdb734473fe1f498b037a0() {
        assertEval("argv <- list(quote(y ~ a + b:c + d + e + e:d), 'formula', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltininherits_testinherits12_1f7dbbb7c4fdb734473fe1f498b037a0");
    }

    @Test
    public void TestrGenBuiltininherits_testinherits32_c391f3a754cfff3c7aa64e12633ddfca() {
        assertEval("argv <- list(quote(breaks ~ (wool + tension) - tension), 'formula', FALSE); .Internal(inherits(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltininherits_testinherits32_c391f3a754cfff3c7aa64e12633ddfca");
    }

    @Test
    public void TestrGenBuiltinintToBits_testintToBits1_8dcf932acd5e3b3ccf1448cb2645ddb7() {
        assertEval("argv <- list(list()); .Internal(intToBits(argv[[1]]))");
        check("TestrGenBuiltinintToBits_testintToBits1_8dcf932acd5e3b3ccf1448cb2645ddb7");
    }

    @Test
    public void TestrGenBuiltinintToBits_testintToBits2_9ca4884c79d6174b2ebb62f73a8f41ad() {
        assertEval("argv <- list(NULL); .Internal(intToBits(argv[[1]]))");
        check("TestrGenBuiltinintToBits_testintToBits2_9ca4884c79d6174b2ebb62f73a8f41ad");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf81_85be9fa767479aa6a70148af54a747bb() {
        assertEval("argv <- list(NULL, FALSE); .Internal(intToUtf8(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinintToUtf8_testintToUtf81_85be9fa767479aa6a70148af54a747bb");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf82_852fb44f5b58696388588b830de7c7b6() {
        assertEval("argv <- list(list(), FALSE); .Internal(intToUtf8(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinintToUtf8_testintToUtf82_852fb44f5b58696388588b830de7c7b6");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf83_337738aec4a636878fbe8338a9232e10() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(intToUtf8(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinintToUtf8_testintToUtf83_337738aec4a636878fbe8338a9232e10");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf85_008af971249ec5dd878fd1a48dfd58bc() {
        assertEval("argv <- structure(list(x = NA_integer_, multiple = TRUE), .Names = c('x',     'multiple'));do.call('intToUtf8', argv)");
        check("TestrGenBuiltinintToUtf8_testintToUtf85_008af971249ec5dd878fd1a48dfd58bc");
    }

    @Test
    public void TestrGenBuiltinintToUtf8_testintToUtf86_8dbb635372374f7c1b23dbd9693dea5a() {
        assertEval("argv <- structure(list(x = NA_integer_), .Names = 'x');do.call('intToUtf8', argv)");
        check("TestrGenBuiltinintToUtf8_testintToUtf86_8dbb635372374f7c1b23dbd9693dea5a");
    }

    @Test
    public void TestrGenBuiltininteractive_testinteractive1_1d0f813e4dd9214aa77a2b4f61230e94() {
        assertEval("argv <- list();do.call('interactive', argv)");
        check("TestrGenBuiltininteractive_testinteractive1_1d0f813e4dd9214aa77a2b4f61230e94");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible13_975c56f76490a5754564443a34069769() {
        assertEval("argv <- list(structure(function (...) new('test1', ...), className = structure('test1', package = '.GlobalEnv'), package = '.GlobalEnv', class = structure('classGeneratorFunction', package = 'methods')));invisible(argv[[1]]);");
        check("TestrGenBuiltininvisible_testinvisible13_975c56f76490a5754564443a34069769");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible16_632474aa60f9f8e86c2c21909b6d0576() {
        assertEval("argv <- list(structure('Error in cor(Z[, FALSE], use = \\'pairwise.complete.obs\\', method = \\'kendall\\') : \\n  'x' is empty\\n', class = 'try-error', condition = structure(list(message = ''x' is empty', call = quote(cor(Z[, FALSE], use = 'pairwise.complete.obs', method = 'kendall'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
        check("TestrGenBuiltininvisible_testinvisible16_632474aa60f9f8e86c2c21909b6d0576");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible2_c67b2ec11dd97e94653c8734488c781f() {
        assertEval("argv <- list(structure('Error in cov(rnorm(10), NULL) : \\n  supply both 'x' and 'y' or a matrix-like 'x'\\n', class = 'try-error', condition = structure(list(message = 'supply both 'x' and 'y' or a matrix-like 'x'', call = quote(cov(rnorm(10), NULL))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))));invisible(argv[[1]]);");
        check("TestrGenBuiltininvisible_testinvisible2_c67b2ec11dd97e94653c8734488c781f");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible21_cec5e2edce17bb8145b060a6eba3bd65() {
        assertEval("argv <- list(quote(~a + b:c + d + e + e:d));invisible(argv[[1]]);");
        check("TestrGenBuiltininvisible_testinvisible21_cec5e2edce17bb8145b060a6eba3bd65");
    }

    @Test
    public void TestrGenBuiltininvisible_testinvisible5_8f52a048e7a1cec98a3a0b5a0e5cc34e() {
        assertEval("argv <- list(structure(c('Min.   : 1.000  ', '1st Qu.: 9.000  ', 'Median :18.000  ', 'Mean   :14.742  ', '3rd Qu.:20.000  ', 'Max.   :23.000  ', NA, 'Min.   :5.0000  ', '1st Qu.:5.3000  ', 'Median :6.1000  ', 'Mean   :6.0841  ', '3rd Qu.:6.6000  ', 'Max.   :7.7000  ', NA, 'Min.   :  1.000  ', '1st Qu.: 24.250  ', 'Median : 56.500  ', 'Mean   : 56.928  ', '3rd Qu.: 86.750  ', 'Max.   :117.000  ', 'NA's   :16  ', 'Min.   :  0.500  ', '1st Qu.: 11.325  ', 'Median : 23.400  ', 'Mean   : 45.603  ', '3rd Qu.: 47.550  ', 'Max.   :370.000  ', NA, 'Min.   :0.00300  ', '1st Qu.:0.04425  ', 'Median :0.11300  ', 'Mean   :0.15422  ', '3rd Qu.:0.21925  ', 'Max.   :0.81000  ', NA), .Dim = c(7L, 5L), .Dimnames = list(c('', '', '', '', '', '', ''), c('    event', '     mag', '   station', '     dist', '    accel')), class = 'table'));invisible(argv[[1]]);");
        check("TestrGenBuiltininvisible_testinvisible5_8f52a048e7a1cec98a3a0b5a0e5cc34e");
    }

    @Test
    public void TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv1_1118796780eb467db770c3578d5271c0() {
        assertEval("argv <- list(FALSE); .Internal(isNamespaceEnv(argv[[1]]))");
        check("TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv1_1118796780eb467db770c3578d5271c0");
    }

    @Test
    public void TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv2_ef0ec9653df3ba8cc68cec0a9ccafe4c() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L))); .Internal(isNamespaceEnv(argv[[1]]))");
        check("TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv2_ef0ec9653df3ba8cc68cec0a9ccafe4c");
    }

    @Test
    public void TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv3_2f32d4a6a135fac444e8c9f6d951a185() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame')); .Internal(isNamespaceEnv(argv[[1]]))");
        check("TestrGenBuiltinisNamespaceEnv_testisNamespaceEnv3_2f32d4a6a135fac444e8c9f6d951a185");
    }

    @Test
    public void TestrGenBuiltinisOpen_testisOpen1_5a795842bfaa3be0d7b7f7c5a95f4edc() {
        assertEval("argv <- list(structure(2L, class = c('terminal', 'connection')), 0L); .Internal(isOpen(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinisOpen_testisOpen1_5a795842bfaa3be0d7b7f7c5a95f4edc");
    }

    @Test
    public void TestrGenBuiltinisOpen_testisOpen3_1fa961444bd5aaedc5e755eec3fe9aa6() {
        assertEval("argv <- list(FALSE, 2L); .Internal(isOpen(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinisOpen_testisOpen3_1fa961444bd5aaedc5e755eec3fe9aa6");
    }

    @Test
    public void TestrGenBuiltinisR_testisR1_65d9866a66c1fdff3672e8ceb08fcb8d() {
        assertEval("argv <- list();do.call('is.R', argv)");
        check("TestrGenBuiltinisR_testisR1_65d9866a66c1fdff3672e8ceb08fcb8d");
    }

    @Test
    public void TestrGenBuiltiniscall_testiscall26_753ff719553b6809d09c4ecb670b117d() {
        assertEval("argv <- list(quote(cbind(X, M) ~ M.user + Temp + M.user:Temp));is.call(argv[[1]]);");
        check("TestrGenBuiltiniscall_testiscall26_753ff719553b6809d09c4ecb670b117d");
    }

    @Test
    public void TestrGenBuiltiniscomplex_testiscomplex4_7f99f72176d8256c0360850982256f99() {
        assertEval("argv <- list(NA_complex_);is.complex(argv[[1]]);");
        check("TestrGenBuiltiniscomplex_testiscomplex4_7f99f72176d8256c0360850982256f99");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite10_a54ba2260a5c0bbf3588f18e608b5096() {
        assertEval("argv <- list(structure(c(-32.6915744137254, -24.6945405669482, -24.6945405669482, -357.79068676373), .Dim = c(2L, 2L)));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite10_a54ba2260a5c0bbf3588f18e608b5096");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite13_2a107a5b4998978c3c23deab93132e9a() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L)));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite13_2a107a5b4998978c3c23deab93132e9a");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite14_a884b2a8cf5fc7ccc5357176c8cf5dc0() {
        assertEval("argv <- list(structure(2L, .Label = c('Northeast', 'South', 'North Central', 'West'), class = 'factor'));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite14_a884b2a8cf5fc7ccc5357176c8cf5dc0");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite16_9fc9d36f86b99b9abad740b8ffdc4f14() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite16_9fc9d36f86b99b9abad740b8ffdc4f14");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite19_525d6af261dc35fb6b967b8e5e0bdef7() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite19_525d6af261dc35fb6b967b8e5e0bdef7");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite20_d32f8543c755faee4b81fd27c1eae483() {
        assertEval("argv <- list(structure(c(100L, 0L, NA, NA, NA, 3L, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite20_d32f8543c755faee4b81fd27c1eae483");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite22_c5a79ff572df7b2853a67b1278b288dd() {
        assertEval("argv <- list(structure(1:7, .Dim = c(1L, 7L)));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite22_c5a79ff572df7b2853a67b1278b288dd");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite23_e0e28e2d33c142874a4d372c08259afd() {
        assertEval("argv <- list(structure(c(-4, 0, 0, 0, 0, 0, 0, -406.725, 41.7955066364795, 0, 0, 0, 0, 0, -1550.79375, 381.717151319926, 49.8228991342168, 0, 0, 0, 0, -1277.325, 224.617432123818, -31.1858918860748, -282.060212912726, 0, 0, 0, -1042.675, 125.261805546114, -29.9849484767744, 164.425554254677, -170.353263600129, 0, 0, -469.696, 26.3795103523805, 4.19691803785862, -3.18974110831568, 0.0462484557378925, 1.46320172717486, 0, -7818, 18.2758880432689, 1.77525956575195, -1.45298766739792, -0.449176219307484, -0.281900648530911, -0.669305080560524), .Dim = c(7L, 7L), .Dimnames = list(c('1947', '1948', '1949', '1950', '1951', '1952', '1953'), c('(Intercept)', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'))));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite23_e0e28e2d33c142874a4d372c08259afd");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite3_f084456956dc7ed4a7f1daf485d1396c() {
        assertEval("argv <- list(structure(485.051413351662, .Names = 'value'));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite3_f084456956dc7ed4a7f1daf485d1396c");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite6_6013de97886e633dc2f3906d44fcde8f() {
        assertEval("argv <- list(structure(1.27861470300044, .Dim = c(1L, 1L), .Dimnames = list('(Intercept)', '(Intercept)')));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite6_6013de97886e633dc2f3906d44fcde8f");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite8_a65e1c1ac1bf0df95fa6d07ef5e4443a() {
        assertEval("argv <- list(c(96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite8_a65e1c1ac1bf0df95fa6d07ef5e4443a");
    }

    @Test
    public void TestrGenBuiltinisfinite_testisfinite9_93add09c39c9f62fc3ce16cdf807599f() {
        assertEval("argv <- list(structure(c(0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.0220588235294118, 0.00735294117647059, 0.0147058823529412, 0.0110294117647059, 0.0257352941176471, 0.00735294117647059, 0.0294117647058824, 0.0147058823529412, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.0110294117647059, 0.0110294117647059, 0.0147058823529412, 0.0110294117647059, 0.00735294117647059, 0.00367647058823529, 0.00735294117647059, 0.0110294117647059, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00367647058823529, 0.0110294117647059, 0.00367647058823529, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00735294117647059, 0.0147058823529412, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.00367647058823529, 0.0183823529411765, 0.00735294117647059, 0.00367647058823529, 0.0110294117647059, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.0220588235294118, 0.00735294117647059, 0.00367647058823529, 0.00735294117647059, 0.0183823529411765, 0.00735294117647059, 0.00735294117647059, 0.00735294117647059, 0.0147058823529412, 0.0147058823529412, 0.00367647058823529, 0.00367647058823529, 0.0110294117647059, 0.0147058823529412, 0.00735294117647059, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.0183823529411765, 0.0147058823529412, 0.00367647058823529, 0.0110294117647059, 0.00367647058823529, 0.00367647058823529, 0.0147058823529412, 0.00735294117647059, 0.0110294117647059, 0.00735294117647059, 0.00367647058823529, 0.0294117647058824, 0.00367647058823529, 0.0183823529411765, 0.00367647058823529, 0.0110294117647059, 0.0147058823529412, 0.0147058823529412, 0.00367647058823529, 0.0110294117647059, 0.00367647058823529, 0.00735294117647059, 0.0220588235294118, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.0220588235294118, 0.00735294117647059, 0.00735294117647059, 0.00367647058823529, 0.00367647058823529, 0.00735294117647059, 0.0110294117647059, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529, 0.00367647058823529), class = 'table', .Dim = 126L, .Dimnames = structure(list(fe = c('1.6', '1.667', '1.7', '1.733', '1.75', '1.783', '1.8', '1.817', '1.833', '1.85', '1.867', '1.883', '1.917', '1.933', '1.95', '1.967', '1.983', '2', '2.017', '2.033', '2.067', '2.083', '2.1', '2.133', '2.15', '2.167', '2.183', '2.2', '2.217', '2.233', '2.25', '2.267', '2.283', '2.3', '2.317', '2.333', '2.35', '2.367', '2.383', '2.4', '2.417', '2.483', '2.617', '2.633', '2.8', '2.883', '2.9', '3.067', '3.317', '3.333', '3.367', '3.417', '3.45', '3.5', '3.567', '3.6', '3.683', '3.717', '3.733', '3.75', '3.767', '3.817', '3.833', '3.85', '3.883', '3.917', '3.95', '3.966', '3.967', '4', '4.033', '4.05', '4.067', '4.083', '4.1', '4.117', '4.133', '4.15', '4.167', '4.183', '4.2', '4.233', '4.25', '4.267', '4.283', '4.3', '4.317', '4.333', '4.35', '4.366', '4.367', '4.383', '4.4', '4.417', '4.433', '4.45', '4.467', '4.483', '4.5', '4.517', '4.533', '4.55', '4.567', '4.583', '4.6', '4.617', '4.633', '4.65', '4.667', '4.7', '4.716', '4.733', '4.75', '4.767', '4.783', '4.8', '4.817', '4.833', '4.85', '4.883', '4.9', '4.933', '5', '5.033', '5.067', '5.1')), .Names = 'fe')));is.finite(argv[[1]]);");
        check("TestrGenBuiltinisfinite_testisfinite9_93add09c39c9f62fc3ce16cdf807599f");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction15_dd13fdc47c7f20e0567c1f3aaf36d13a() {
        assertEval("argv <- list(structure(function (x) standardGeneric('dim', .Primitive('dim')), generic = structure('dim', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = 'x', default = .Primitive('dim'), skeleton = quote(.Primitive('dim')(x)), class = structure('standardGeneric', package = 'methods')));is.function(argv[[1]]);");
        check("TestrGenBuiltinisfunction_testisfunction15_dd13fdc47c7f20e0567c1f3aaf36d13a");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction16_b764d9f0f945e0d31b68b3867f95d2ea() {
        assertEval("argv <- list(structure(function (x, na.rm = FALSE, dims = 1, ...) standardGeneric('rowMeans'), generic = structure('rowMeans', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = c('x', 'na.rm', 'dims'), default = structure(function (x, na.rm = FALSE, dims = 1, ...) base::rowMeans(x, na.rm = na.rm, dims = dims, ...), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = structure('rowMeans', package = 'base'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (x, na.rm = FALSE, dims = 1, ...) base::rowMeans(x, na.rm = na.rm, dims = dims, ...))(x, na.rm, dims, ...)), class = structure('standardGeneric', package = 'methods')));is.function(argv[[1]]);");
        check("TestrGenBuiltinisfunction_testisfunction16_b764d9f0f945e0d31b68b3867f95d2ea");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction22_e8a64e8583a5ed0477e9df7eab1f61fd() {
        assertEval("argv <- list(function(e1, e2) {    ok <- switch(.Generic, `<` = , `>` = , `<=` = , `>=` = ,         `==` = , `!=` = TRUE, FALSE)    if (!ok) {        warning(sprintf(''%s' is not meaningful for ordered factors',             .Generic))        return(rep.int(NA, max(length(e1), if (!missing(e2)) length(e2))))    }    if (.Generic %in% c('==', '!=')) return(NextMethod(.Generic))    nas <- is.na(e1) | is.na(e2)    ord1 <- FALSE    ord2 <- FALSE    if (nzchar(.Method[1L])) {        l1 <- levels(e1)        ord1 <- TRUE    }    if (nzchar(.Method[2L])) {        l2 <- levels(e2)        ord2 <- TRUE    }    if (all(nzchar(.Method)) && (length(l1) != length(l2) ||         !all(l2 == l1))) stop('level sets of factors are different')    if (ord1 && ord2) {        e1 <- as.integer(e1)        e2 <- as.integer(e2)    } else if (!ord1) {        e1 <- match(e1, l2)        e2 <- as.integer(e2)    } else if (!ord2) {        e2 <- match(e2, l1)        e1 <- as.integer(e1)    }    value <- get(.Generic, mode = 'function')(e1, e2)    value[nas] <- NA    value});do.call('is.function', argv)");
        check("TestrGenBuiltinisfunction_testisfunction22_e8a64e8583a5ed0477e9df7eab1f61fd");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction23_01c2680c730e08c5d4fcf565f4d73441() {
        assertEval("argv <- list(function(x, width = 0.9 * getOption('width'), indent = 0,     exdent = 0, prefix = '', simplify = TRUE, initial = prefix) {    if (!is.character(x)) x <- as.character(x)    indentString <- paste(rep.int(' ', indent), collapse = '')    exdentString <- paste(rep.int(' ', exdent), collapse = '')    y <- list()    UB <- TRUE    if (all(Encoding(x) == 'UTF-8')) UB <- FALSE else {        enc <- Encoding(x) %in% c('latin1', 'UTF-8')        if (length(enc)) x[enc] <- enc2native(x[enc])    }    z <- lapply(strsplit(x, '\\n[ 	\\n]*\\n', perl = TRUE, useBytes = UB),         strsplit, '[ 	\\n]', perl = TRUE, useBytes = UB)    for (i in seq_along(z)) {        yi <- character()        for (j in seq_along(z[[i]])) {            words <- z[[i]][[j]]            nc <- nchar(words, type = 'w')            if (anyNA(nc)) {                nc0 <- nchar(words, type = 'b')                nc[is.na(nc)] <- nc0[is.na(nc)]            }            if (any(nc == 0L)) {                zLenInd <- which(nc == 0L)                zLenInd <- zLenInd[!(zLenInd %in% (grep('[.?!][)\\'']{0,1}$',                   words, perl = TRUE, useBytes = TRUE) + 1L))]                if (length(zLenInd)) {                  words <- words[-zLenInd]                  nc <- nc[-zLenInd]                }            }            if (!length(words)) {                yi <- c(yi, '', initial)                next            }            currentIndex <- 0L            lowerBlockIndex <- 1L            upperBlockIndex <- integer()            lens <- cumsum(nc + 1L)            first <- TRUE            maxLength <- width - nchar(initial, type = 'w') -                 indent            while (length(lens)) {                k <- max(sum(lens <= maxLength), 1L)                if (first) {                  first <- FALSE                  maxLength <- width - nchar(prefix, type = 'w') -                     exdent                }                currentIndex <- currentIndex + k                if (nc[currentIndex] == 0L) upperBlockIndex <- c(upperBlockIndex,                   currentIndex - 1L) else upperBlockIndex <- c(upperBlockIndex,                   currentIndex)                if (length(lens) > k) {                  if (nc[currentIndex + 1L] == 0L) {                    currentIndex <- currentIndex + 1L                    k <- k + 1L                  }                  lowerBlockIndex <- c(lowerBlockIndex, currentIndex +                     1L)                }                if (length(lens) > k) lens <- lens[-seq_len(k)] -                   lens[k] else lens <- NULL            }            nBlocks <- length(upperBlockIndex)            s <- paste0(c(initial, rep.int(prefix, nBlocks -                 1L)), c(indentString, rep.int(exdentString, nBlocks -                 1L)))            initial <- prefix            for (k in seq_len(nBlocks)) s[k] <- paste0(s[k],                 paste(words[lowerBlockIndex[k]:upperBlockIndex[k]],                   collapse = ' '))            yi <- c(yi, s, prefix)        }        y <- if (length(yi)) c(y, list(yi[-length(yi)])) else c(y,             '')    }    if (simplify) y <- as.character(unlist(y))    y});do.call('is.function', argv)");
        check("TestrGenBuiltinisfunction_testisfunction23_01c2680c730e08c5d4fcf565f4d73441");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction24_d9aa5798393f86fb7ef28b62462d550d() {
        assertEval("argv <- list(function(..., na.rm) {    coerceTimeUnit <- function(x) {        as.vector(switch(attr(x, 'units'), secs = x, mins = 60 *             x, hours = 60 * 60 * x, days = 60 * 60 * 24 * x,             weeks = 60 * 60 * 24 * 7 * x))    }    ok <- switch(.Generic, max = , min = , sum = , range = TRUE,         FALSE)    if (!ok) stop(gettextf(''%s' not defined for \\'difftime\\' objects',         .Generic), domain = NA)    x <- list(...)    Nargs <- length(x)    if (Nargs == 0) {        .difftime(do.call(.Generic), 'secs')    } else {        units <- sapply(x, function(x) attr(x, 'units'))        if (all(units == units[1L])) {            args <- c(lapply(x, as.vector), na.rm = na.rm)        } else {            args <- c(lapply(x, coerceTimeUnit), na.rm = na.rm)            units <- 'secs'        }        .difftime(do.call(.Generic, args), units[[1L]])    }});do.call('is.function', argv)");
        check("TestrGenBuiltinisfunction_testisfunction24_d9aa5798393f86fb7ef28b62462d550d");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction26_6933b91e5c086b56c930fcdf2c0b9be3() {
        assertEval("argv <- list(function(x, format = '', usetz = FALSE, ...) {    if (!inherits(x, 'POSIXlt')) stop('wrong class')    if (format == '') {        times <- unlist(unclass(x)[1L:3L])        secs <- x$sec        secs <- secs[!is.na(secs)]        np <- getOption('digits.secs')        if (is.null(np)) np <- 0L else np <- min(6L, np)        if (np >= 1L) for (i in seq_len(np) - 1L) if (all(abs(secs -             round(secs, i)) < 1e-06)) {            np <- i            break        }        format <- if (all(times[!is.na(times)] == 0)) '%Y-%m-%d' else if (np ==             0L) '%Y-%m-%d %H:%M:%S' else paste0('%Y-%m-%d %H:%M:%OS',             np)    }    y <- .Internal(format.POSIXlt(x, format, usetz))    names(y) <- names(x$year)    y});do.call('is.function', argv)");
        check("TestrGenBuiltinisfunction_testisfunction26_6933b91e5c086b56c930fcdf2c0b9be3");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction27_aef35926778d3a4cc2e0a6763065f6c9() {
        assertEval("argv <- list(function(name, cond = NULL) {    i <- 1L    repeat {        r <- .Internal(.getRestart(i))        if (is.null(r)) return(NULL) else if (name == r[[1L]] &&             (is.null(cond) || is.null(r$test) || r$test(cond))) return(r) else i <- i +             1L    }});do.call('is.function', argv)");
        check("TestrGenBuiltinisfunction_testisfunction27_aef35926778d3a4cc2e0a6763065f6c9");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction28_598a8f892760f397840e7c5ed44d8fae() {
        assertEval("argv <- list(function(x, width = 12, ...) {    if (is.character(x)) return(format.default(x, ...))    if (is.null(width)) width = 12L    n <- length(x)    rvec <- rep.int(NA_character_, n)    for (i in seq_len(n)) {        y <- x[[i]]        cl <- oldClass(y)        if (m <- match('AsIs', cl, 0L)) oldClass(y) <- cl[-m]        rvec[i] <- toString(y, width = width, ...)    }    dim(rvec) <- dim(x)    dimnames(rvec) <- dimnames(x)    format.default(rvec, justify = 'right')});do.call('is.function', argv)");
        check("TestrGenBuiltinisfunction_testisfunction28_598a8f892760f397840e7c5ed44d8fae");
    }

    @Test
    public void TestrGenBuiltinisfunction_testisfunction31_11866f44e059cdb8d1fb3411015d00ed() {
        assertEval("argv <- list(function(qr, y) {    if (!is.qr(qr)) stop('first argument must be a QR decomposition')    n <- as.integer(nrow(qr$qr))    if (is.na(n)) stop('invalid nrow(qr$qr)')    p <- as.integer(ncol(qr$qr))    if (is.na(p)) stop('invalid ncol(qr$qr)')    k <- as.integer(qr$rank)    if (is.na(k)) stop('invalid ncol(qr$rank)')    im <- is.matrix(y)    if (!im) y <- as.matrix(y)    ny <- as.integer(ncol(y))    if (is.na(ny)) stop('invalid ncol(y)')    if (p == 0L) return(if (im) matrix(0, p, ny) else numeric())    ix <- if (p > n) c(seq_len(n), rep(NA, p - n)) else seq_len(p)    if (is.complex(qr$qr)) {        coef <- matrix(NA_complex_, nrow = p, ncol = ny)        coef[qr$pivot, ] <- .Internal(qr_coef_cmplx(qr, y))[ix,             ]        return(if (im) coef else c(coef))    }    if (isTRUE(attr(qr, 'useLAPACK'))) {        coef <- matrix(NA_real_, nrow = p, ncol = ny)        coef[qr$pivot, ] <- .Internal(qr_coef_real(qr, y))[ix,             ]        return(if (im) coef else c(coef))    }    if (k == 0L) return(if (im) matrix(NA, p, ny) else rep.int(NA,         p))    storage.mode(y) <- 'double'    if (nrow(y) != n) stop(''qr' and 'y' must have the same number of rows')    z <- .Fortran(.F_dqrcf, as.double(qr$qr), n, k, as.double(qr$qraux),         y, ny, coef = matrix(0, nrow = k, ncol = ny), info = integer(1L),         NAOK = TRUE)[c('coef', 'info')]    if (z$info) stop('exact singularity in 'qr.coef'')    if (k < p) {        coef <- matrix(NA_real_, nrow = p, ncol = ny)        coef[qr$pivot[seq_len(k)], ] <- z$coef    } else coef <- z$coef    if (!is.null(nam <- colnames(qr$qr))) if (k < p) rownames(coef)[qr$pivot] <- nam else rownames(coef) <- nam    if (im && !is.null(nam <- colnames(y))) colnames(coef) <- nam    if (im) coef else drop(coef)});do.call('is.function', argv)");
        check("TestrGenBuiltinisfunction_testisfunction31_11866f44e059cdb8d1fb3411015d00ed");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite1_916582d63a82f7a69dc06e75cd480704() {
        assertEval("argv <- list(structure(c(100L, 0L, NA, NA, NA, 3L, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite1_916582d63a82f7a69dc06e75cd480704");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite10_01a212eca696cbaf20d1f527b70eb29e() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite10_01a212eca696cbaf20d1f527b70eb29e");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite11_9c296861ac65b4ef655c523ca32c19f0() {
        assertEval("argv <- list(structure(c(0.140840156507829, 0.04056135019562, 0.0029302031336855, 0.244192917875952, 0.613916838192149, 0.0888451715064135, 0.0786481028238466, 0.000549230092684491, 0.00048785961836479, 0.235214398525727, 0.000402612842061681, 0.00423992719924668, 0.0355604120039037, 0.00432748168352161, 0.170388213068447, 0.466682597016338), .Names = c('1947', '1948', '1949', '1950', '1951', '1952', '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962')));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite11_9c296861ac65b4ef655c523ca32c19f0");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite13_d9ec13b8644d211fa07bd8d52f11583b() {
        assertEval("argv <- list(structure(1:24, .Dim = 2:4));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite13_d9ec13b8644d211fa07bd8d52f11583b");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite14_4874e151ae66dd14368e5a9bd78318c9() {
        assertEval("argv <- list(structure(c(1, 0.5, 0.5, 1), .Dim = c(2L, 2L), .Dimnames = list(c('A', 'B'), c('A', 'B'))));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite14_4874e151ae66dd14368e5a9bd78318c9");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite3_e9b6f5d320af80742d6bbd98d0b84c9e() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L)));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite3_e9b6f5d320af80742d6bbd98d0b84c9e");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite4_60c792df0e06d97bbb168d46ec958a97() {
        assertEval("argv <- list(structure(c(0.00241725013897913, 2.73568372449633e-07, 0.00400531454105884, 0.0305181933571734, 0.022064930648429, 0.000416097494498381, 0.0186357510997526, 0.00896237344987589, 0.00202331168264955, 0.00279067096737535, 0.0447487811957221, 0.000577210896095096, 0.00782925975125774, 0.033211430744327, 0.0093483442273581, 0.00136284952207105, 0.0275004422708864, 0.0135979349769553, 0.000181644594904405, 0.00803803085466393, 0.00350275333198457, 0.014998898960339, 5.39459255498146e-05, 0.00123860219686858, 1.13323906102913e-05, 0.0297916373848854, 0.0312890114433758, 5.85350754663798e-05, 0.0131002435454964, 0.00277072267615578, 0.0222123285012571, 0.00194205331979335, 0.0103231522531299, 0.0261098279661105, 0.0358853728812373, 1.13323906102913e-05, 0.0486308859679786, 0.000674881587747117, 0.0218633172580077, 0.000558592420498928, 0.000802158707806158, 0.0581913205761545, 0.000436809276845313, 0.00631994234432259, 0.000141965876420771, 0.000262833357340149, 0.0055965687842748, 0.000654737007593888, 0.0140931986366498, 0.00241538552182261, 0.00414822230660342, 0.00884150659070285, 0.0647626092888162, 0.0935599413167129, 0.00117891119201738, 0.00742609802768654, 0.0306399064130622, 0.0274290617824389, 0.00217883778937331, 0.0108387379377857, 0.0242348837396833, 0.0168720396936779, 0.022211269097018, 0.0355286679037712, 0.00017126708391638, 0.00443642409999561, 0.0068913158904869, 0.0635882367317516, 0.0566932963429416, 0.00904861729235097, 0.00038919481466495), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71')));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite4_60c792df0e06d97bbb168d46ec958a97");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite5_f03ade80b432565603edd692566c6f97() {
        assertEval("argv <- list(structure(c(80, 80, 75, 62, 62, 62, 62, 62, 58, 58, 58, 58, 58, 58, 50, 50, 50, 50, 50, 56, 70, 27, 27, 25, 24, 22, 23, 24, 24, 23, 18, 18, 17, 18, 19, 18, 18, 19, 19, 20, 20, 20, 89, 88, 90, 87, 87, 87, 93, 93, 87, 80, 89, 88, 82, 93, 89, 86, 72, 79, 80, 82, 91, 42, 37, 37, 28, 18, 18, 19, 20, 15, 14, 14, 13, 11, 12, 8, 7, 8, 8, 9, 15, 15), .Dim = c(21L, 4L), .Dimnames = list(NULL, c('Air.Flow', 'Water.Temp', 'Acid.Conc.', 'stack.loss'))));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite5_f03ade80b432565603edd692566c6f97");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite6_7c185cb2979af2ca62ef273fb43c76bb() {
        assertEval("argv <- list(structure(c(1.12411954394441, -0.567321126080105, 1.28594901629635, -0.519809468914999, -1.485548782458, -0.435305441405687, -0.281625943801696, -0.527525498975648, 2.60041695299567, NA), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite6_7c185cb2979af2ca62ef273fb43c76bb");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite8_a9d6033608b9c036c49a85d29d905676() {
        assertEval("argv <- list(structure(c(0.00544194018731062, 0.00542949133552226, 1.20718999105839e-05, 0.00505497198006266, 0.827687885653788, 0.00315385274195005, 0.0023164952286401, 0.00117183915211372, 2.09167441982205, 0.00193959227691399, 0.00358084102808485, 3.39138861812986e-05, 0.00163051710052444, 0.00168735925488057, 0.0167253073891896, 0.237074502262169, 0.0118967636015583, 0.00307437031103621, 0.00114371252369823, 0.000860763872820255, 0.00028432076263802, 0.00329557354736053, 0.000123683950933913, 0.00026114238659798, 0.00471892942651347, 0.00317288091968884, 6.76955217513137e-05, 0.0119061189538054, 0.00233356124758579, 0.00672098496026968, 0.134965372025281, 0.00102115420103838, 0.00114816901125044), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite8_a9d6033608b9c036c49a85d29d905676");
    }

    @Test
    public void TestrGenBuiltinisinfinite_testisinfinite9_5d40116aebd0246ba08e197374041229() {
        assertEval("argv <- list(structure(c(0.648648743252693, 0.52170345712821, -0.338075767187078, 0.169770656775468, -1.86324282017776, 0.362268009067608, 0.136032794890515, 0.901814933704047, -0.671639624694386, 1.79387977353953, 0.714576709724596, -0.471811539980989, -0.857026690426369, 0.226899513968796, 0.568565310101759, -0.944564385994918, 0.693403222263985, 0.02231307737364, -0.276817414323803, -0.344452836733253, -0.844829717537689, -0.421779195680793, -0.154748062715674, 1.43960300137753, 0.256965508768852, -0.295370227475694, 0.507911869619344, -0.346156318366332, -0.187948961031579, -0.454073164294974, -0.0895014237058297, 1.91227371168715, 0.779246572061347, 0.606406152381391, -0.0628430973426908, 2.1063179091687, -1.32672093069913, -0.754254955100625, -0.59565543740158, -1.95946772292555, -0.495798772099865, -3.58086046245482, -0.721772682345538, -0.254468243441054, 2.41750264738881, -0.0647957309150968, 1.87354174039771, -0.552199273430865, 0.732944502427441, 0.703597322009966, 0.875011400025303, -0.916329805907907, -0.297942295133666, -0.239141969395332, -1.79620422664673, -1.34633804643361, -Inf, 1.84762640960041, -0.344523591926435, 1.12935189480329, -0.902874350916712, -0.187948961031579, 0.444184743731147, -0.595767030989317, -0.878351658910786, 0.131398128073247, -1.16349118303155, -0.612790192876235, -0.231519954928205, -0.944564385994918, 0.136032794890519, -0.250233723215235, -0.972829009134415, 0.576852333601859, 0.226899513968797, -0.316245505808486, 0.101419270213227, 2.16953626752671, -0.383691077846572, 0.547999893193889, 0.00183871707028874, -1.28758691932778, 0.0676445397107313, -0.809987759639438, -1.04896153736838, 0.156556073105978, 0.248659709506608, 1.27246860456928, 0.554771572109539, 1.2326801378144, 2.2926344791142, 1.00034303387372, -0.554771572109538), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93')));is.infinite(argv[[1]]);");
        check("TestrGenBuiltinisinfinite_testisinfinite9_5d40116aebd0246ba08e197374041229");
    }

    @Test
    public void TestrGenBuiltinislist_testislist1_0bf5b5d95d10bfb449f032407218a5a6() {
        assertEval("argv <- list(structure(function (e1, e2) standardGeneric('/', .Primitive('/')), generic = structure('/', package = 'base'), package = 'base', group = list('Arith'), valueClass = character(0), signature = c('e1', 'e2'), default = .Primitive('/'), skeleton = quote(.Primitive('/')(e1, e2)), class = structure('standardGeneric', package = 'methods')));is.list(argv[[1]]);");
        check("TestrGenBuiltinislist_testislist1_0bf5b5d95d10bfb449f032407218a5a6");
    }

    @Test
    public void TestrGenBuiltinislist_testislist8_0866b83ae49166e4e8c454247513ea1d() {
        assertEval("argv <- list(structure(list(title = structure(1L, .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(2L, .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = 1L, class = 'data.frame'));is.list(argv[[1]]);");
        check("TestrGenBuiltinislist_testislist8_0866b83ae49166e4e8c454247513ea1d");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor1_11e42d3fdb31e174af970cd806b20e0e() {
        assertEval("argv <- list(list(structure(list(structure('R Core', class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame'), structure(list(structure(NA_character_, class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame'), structure(list(structure(NA_character_, class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame'), structure(list(structure('An Introduction to R', class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame'), structure(list(structure('Venables & Smith', class = 'AsIs')), row.names = c(NA, -1L), class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor1_11e42d3fdb31e174af970cd806b20e0e");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor10_2a8d8eb6392df15688244afca7f2edab() {
        assertEval("argv <- list(list(structure(c(0, 1, 1, 2, 2, 4, NA), .Names = c('ddiMatrix', 'diagonalMatrix', 'dMatrix', 'sparseMatrix', 'Matrix', 'mMatrix', 'ANY')), structure(c(0, 1, 1, 1, 2, 2, 2, 3, 4, NA), .Names = c('dgCMatrix', 'CsparseMatrix', 'dsparseMatrix', 'generalMatrix', 'dMatrix', 'sparseMatrix', 'compMatrix', 'Matrix', 'mMatrix', 'ANY'))), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor10_2a8d8eb6392df15688244afca7f2edab");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor11_e03f9fe5b02cecc1c013f17910a74046() {
        assertEval("argv <- list(list(structure(0, .Dim = c(1L, 1L)), structure(-4.9497224423095e-07, .Dim = c(1L, 1L)), structure(0, .Dim = c(1L, 1L)), structure(-7.44931694456399e-07, .Dim = c(1L, 1L))), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor11_e03f9fe5b02cecc1c013f17910a74046");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor12_6b31e3550a2a6b06373bdab71efda50b() {
        assertEval("argv <- list(structure(list(event = c('Min.   : 1.00  ', '1st Qu.: 9.00  ', 'Median :18.00  ', 'Mean   :14.74  ', '3rd Qu.:20.00  ', 'Max.   :23.00  ', NA), mag = c('Min.   :5.000  ', '1st Qu.:5.300  ', 'Median :6.100  ', 'Mean   :6.084  ', '3rd Qu.:6.600  ', 'Max.   :7.700  ', NA), station = c('117    :  5  ', '1028   :  4  ', '113    :  4  ', '112    :  3  ', '135    :  3  ', '(Other):147  ', 'NA's   : 16  '), dist = c('Min.   :  0.50  ', '1st Qu.: 11.32  ', 'Median : 23.40  ', 'Mean   : 45.60  ', '3rd Qu.: 47.55  ', 'Max.   :370.00  ', NA), accel = c('Min.   :0.00300  ', '1st Qu.:0.04425  ', 'Median :0.11300  ', 'Mean   :0.15422  ', '3rd Qu.:0.21925  ', 'Max.   :0.81000  ', NA)), .Names = c('event', 'mag', 'station', 'dist', 'accel')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor12_6b31e3550a2a6b06373bdab71efda50b");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor13_6e172d4486c1d4b1ebdbf88990fea80b() {
        assertEval("argv <- list(structure(list(`1` = 1.97626258336499e-323), .Names = '1'), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor13_6e172d4486c1d4b1ebdbf88990fea80b");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor14_cbcca9f80f4a7a82f0125ca89f1ab028() {
        assertEval("argv <- list(structure(list(name = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), title = structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...'), class = 'AsIs'), other.author = structure(c(NA, NA, NA, NA, NA, 'Ripley'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia'), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'no', 'yes', 'no'), class = 'AsIs')), .Names = c('name', 'title', 'other.author', 'nationality', 'deceased'), row.names = c('1', '2', '3', '4', '5', '6')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor14_cbcca9f80f4a7a82f0125ca89f1ab028");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor15_c1bc23c40d6d56921ab2f902c93fa1ae() {
        assertEval("argv <- list(structure(list(`1` = 8.91763605923317e+38), .Names = '1'), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor15_c1bc23c40d6d56921ab2f902c93fa1ae");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor16_9098c50a1d8e9a99857bc8e6aa56814b() {
        assertEval("argv <- list(structure(list(V1 = c(0.908207789994776, 0.62911404389888, 0.205974574899301), V2 = c(0.125555095961317, 0.86969084572047, 0.482080115471035), V3 = c(0.553036311641335, 0.7323137386702, 0.477619622135535), V4 = c(0.332394674187526, 0.0842469143681228, 0.339072937844321), V5 = c(0.325352151878178, 0.245488513959572, 0.239629415096715)), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(4L, 9L, 11L)), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor16_9098c50a1d8e9a99857bc8e6aa56814b");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor17_1d82f55cc4296469207e51563e99d021() {
        assertEval("argv <- list(structure(list(V1 = c(0.497699242085218, 0.991906094830483), V2 = c(0.668466738192365, 0.107943625887856), V3 = c(0.0994661601725966, 0.518634263193235), V4 = c(0.892198335845023, 0.389989543473348), V5 = c(0.79730882588774, 0.410084082046524)), .Names = c('V1', 'V2', 'V3', 'V4', 'V5'), row.names = c(16L, 18L)), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor17_1d82f55cc4296469207e51563e99d021");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor18_1007193d145eb1792cb580a17cb3e2a9() {
        assertEval("argv <- list(list(structure(list(structure('rm', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('remove', Rd_tag = 'VERB')), Rd_tag = '\\\\alias')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor18_1007193d145eb1792cb580a17cb3e2a9");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor19_285181287efed16bd5fa2cd276fc7007() {
        assertEval("argv <- list(list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render')), structure(c(FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('#ifdef', '\\\\Sexpr', 'build', 'install', 'render'))), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor19_285181287efed16bd5fa2cd276fc7007");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor2_704f71ef7f34671dd86d105a76a03456() {
        assertEval("argv <- list(list(c(TRUE, FALSE, FALSE, FALSE, FALSE), c(TRUE, TRUE, TRUE, TRUE, NA)), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor2_704f71ef7f34671dd86d105a76a03456");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor20_b798a712b7d5e0e143b3010162eadf3e() {
        assertEval("argv <- list(list(c(0.92317305817397+0i, 0.160449395256071+0.220125597679977i, 0.40353715410585+2.39063261466203i, -3.64092275386503+3.51619480964107i, -0.30877433127864+1.37503901638266i, -0.5590368753986+2.95994484328048i, 2.07117052177259-1.58552086053907i, 5.12796916272868+5.50114308371867i, 0.71791019962021-4.36295436036464i, 3.6182846955548+0.01693946731429i, 5.86560669896785+3.41674024963709i, 7.14153164455803+0i, 5.86560669896785-3.41674024963709i, 3.6182846955548-0.01693946731429i, 0.71791019962021+4.36295436036464i, 5.12796916272868-5.50114308371867i, 2.07117052177259+1.58552086053907i, -0.5590368753986-2.95994484328048i, -0.30877433127864-1.37503901638266i, -3.64092275386503-3.51619480964107i, 0.40353715410585-2.39063261466203i, 0.160449395256071-0.220125597679976i), c(0.994686860835215+0i, -0.711636086238366+0.034977366507257i, -3.47255638259391-3.00654729467177i, -1.61617641806619-2.52564108817258i, -1.83729841635945+1.24025696654912i, -0.05940773912914+1.99807537840182i, 2.14861624215501+1.14547234755584i, -0.18935885218927+5.11711397439959i, 3.55025883223277-3.01463113510177i, 0.37587194655463-4.62160286369829i, -0.57999032040714+3.57394816552023i, -3.22078701201057+0i, -0.57999032040714-3.57394816552023i, 0.37587194655463+4.62160286369829i, 3.55025883223277+3.01463113510177i, -0.18935885218927-5.11711397439959i, 2.14861624215501-1.14547234755584i, -0.05940773912914-1.99807537840182i, -1.83729841635945-1.24025696654912i, -1.61617641806619+2.52564108817258i, -3.47255638259391+3.00654729467177i, -0.711636086238366-0.034977366507256i), c(-0.376031201145236+0i, 0.36561036190112-2.94822783523588i, 2.53378536984825+1.14599403212998i, -0.59345500414631-1.46249091231517i, -5.47371957596241-2.40983118775265i, 0.994698295196402+0.827012883372647i, 4.88614691865207-0.66440097322583i, -1.22869446246947-1.85036568311679i, 4.54719422944744-1.7507307644741i, -1.25805718969215-0.46461775748286i, -6.6950163960079-1.32606545879492i, -1.8510470181104-0i, -6.6950163960079+1.32606545879492i, -1.25805718969215+0.46461775748286i, 4.54719422944744+1.7507307644741i, -1.22869446246947+1.85036568311679i, 4.88614691865207+0.66440097322583i, 0.994698295196402-0.827012883372647i, -5.47371957596241+2.40983118775265i, -0.59345500414631+1.46249091231517i, 2.53378536984825-1.14599403212998i, 0.36561036190112+2.94822783523588i), c(1.86949363581639+0i, 3.2510927680528+3.7297126359622i, 5.77117909703734-0.58113122596059i, -2.73489323319193-2.03739778844743i, 1.59256247378073-3.23882870600546i, -2.21652163259476+3.70287191787544i, -6.80966667821261-4.74346958471693i, -0.48551953206469-3.42445496113818i, -4.95350216815663-1.60107509096991i, -0.651322462114205+0.588393022429161i, 3.32067078328635+3.75999833207777i, -1.35013798358527+0i, 3.32067078328635-3.75999833207777i, -0.651322462114205-0.588393022429161i, -4.95350216815663+1.60107509096991i, -0.48551953206469+3.42445496113818i, -6.80966667821261+4.74346958471693i, -2.21652163259476-3.70287191787544i, 1.59256247378073+3.23882870600546i, -2.73489323319193+2.03739778844743i, 5.77117909703734+0.58113122596059i, 3.2510927680528-3.7297126359622i),     c(-3.90806827793786+0i, -4.10078155861753-4.25996878161911i, -0.63461032994351-2.08074582601136i, -0.10593736514835-3.82022652091785i, 6.14817602783479+2.33657685886581i, 0.64431546852762-1.776774088028i, 3.43771282488202-3.00904523977379i, -3.6812061457129+3.53944567666635i, 3.07722382691467+4.5373840425762i, 3.3679046040028+7.20820407858926i, 7.47003475089893-0.4463480891006i, 13.9322715624418-0i, 7.47003475089893+0.4463480891006i, 3.3679046040028-7.20820407858926i, 3.07722382691467-4.5373840425762i,     -3.6812061457129-3.53944567666635i, 3.43771282488202+3.00904523977379i, 0.64431546852762+1.776774088028i, 6.14817602783479-2.33657685886581i, -0.10593736514835+3.82022652091785i, -0.63461032994351+2.08074582601136i, -4.10078155861753+4.25996878161911i)), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor20_b798a712b7d5e0e143b3010162eadf3e");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor21_3afbb38616984e26266943404c131210() {
        assertEval("argv <- list(structure(list(), .Names = character(0)), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor21_3afbb38616984e26266943404c131210");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor22_159e67ec14852a9a3690b970aecceb18() {
        assertEval("argv <- list(structure(list(a = 'a', b = 2, c = 3.14159265358979+2i), .Names = c('a', 'b', 'c')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor22_159e67ec14852a9a3690b970aecceb18");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor23_ac38f19802468836f4005883b96a1525() {
        assertEval("argv <- list(list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 1L, class = 'data.frame'), structure(list(title = structure(1L, .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(2L, .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = 1L, class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor23_ac38f19802468836f4005883b96a1525");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor25_562825b2f061ee0db050701aabe6e44a() {
        assertEval("argv <- list(list(structure(list(structure(c('', '+ M.user', '+ Temp', '+ M.user:Temp'), class = 'AsIs')), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(NA, -1, -1, -1)), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(NA, 20.5814660332393, 3.80016287449608, 2.78794934284365)), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(11, 10, 9, 8)), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(32.825622681839, 12.2441566485997, 8.44399377410362, 5.65604443125997)), row.names = c(NA, -4L), class = 'data.frame'), structure(list(c(92.5235803967766, 73.9421143635373, 72.1419514890413, 71.3540021461976)), row.names = c(NA, -4L), class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor25_562825b2f061ee0db050701aabe6e44a");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor26_fd88fb80b8a7575ff3d5aa064219b6c8() {
        assertEval("argv <- list(structure(list(`2005` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2006` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2007` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2008` = structure(c(31L, 29L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2009` = structure(1L, .Dim = 1L, .Dimnames = structure(list('01'), .Names = ''), class = 'table')), .Names = c('2005', '2006', '2007', '2008', '2009')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor26_fd88fb80b8a7575ff3d5aa064219b6c8");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor27_9824b8abcad7928d0f355630b27477f1() {
        assertEval("argv <- list(structure('mtext(\\'«Latin-1 accented chars»: éè øØ å<Å æ<Æ\\', side = 3)\\n', Rd_tag = 'RCODE'), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor27_9824b8abcad7928d0f355630b27477f1");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor28_d9a89f240020611a863ca072bc71c833() {
        assertEval("argv <- list(structure(list(V1 = structure(c('head', '1', '3', '6'), class = 'AsIs'), V2 = structure(c('NA', ' 2', ' 4', ' 7'), class = 'AsIs'), V3 = structure(c('NA', 'NA', ' 5', ' 8'), class = 'AsIs'), V4 = structure(c('NA', 'NA', 'NA', ' 9'), class = 'AsIs')), .Names = c('V1', 'V2', 'V3', 'V4'), row.names = c('1', '2', '3', '4')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor28_d9a89f240020611a863ca072bc71c833");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor29_46c11b5a9d7bb9bb992e67a05ed2b6ac() {
        assertEval("argv <- list(structure(list(`1 sec` = 345600, `2 secs` = 172800, `5 secs` = 69120, `10 secs` = 34560, `15 secs` = 23040, `30 secs` = 11520, `1 min` = 5760, `2 mins` = 2880, `5 mins` = 1152, `10 mins` = 576, `15 mins` = 384, `30 mins` = 192, `1 hour` = 96, `3 hours` = 32, `6 hours` = 16, `12 hours` = 8, `1 DSTday` = 4, `2 DSTdays` = 2, `1 week` = 0.571428571428571, halfmonth = 0.262833675564682, `1 month` = 0.131416837782341, `3 months` = 0.0438056125941136, `6 months` = 0.0219028062970568, `1 year` = 0.0109514031485284,     `2 years` = 0.0054757015742642, `5 years` = 0.00219028062970568, `10 years` = 0.00109514031485284, `20 years` = 0.00054757015742642, `50 years` = 0.000219028062970568, `100 years` = 0.000109514031485284, `200 years` = 5.4757015742642e-05, `500 years` = 2.19028062970568e-05, `1000 years` = 1.09514031485284e-05), .Names = c('1 sec', '2 secs', '5 secs', '10 secs', '15 secs', '30 secs', '1 min', '2 mins', '5 mins', '10 mins', '15 mins', '30 mins', '1 hour', '3 hours', '6 hours', '12 hours', '1 DSTday', '2 DSTdays', '1 week', 'halfmonth', '1 month', '3 months', '6 months', '1 year', '2 years', '5 years', '10 years', '20 years', '50 years', '100 years', '200 years', '500 years', '1000 years')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor29_46c11b5a9d7bb9bb992e67a05ed2b6ac");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor3_d8292e70762644e8793b001f9b4c18db() {
        assertEval("argv <- list(structure(list(a = 6:10), .Names = 'a', row.names = 6:10), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor3_d8292e70762644e8793b001f9b4c18db");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor4_21fc784e9c177b5f9e48207f9bf7cc10() {
        assertEval("argv <- list(structure(list(k = 0.413311097189709, g1 = 72.8306629700373, g2 = 181.793153976139), .Names = c('k', 'g1', 'g2')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor4_21fc784e9c177b5f9e48207f9bf7cc10");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor5_75b22e55966cb2f065ed523bc0b523a2() {
        assertEval("argv <- list(list(structure(list(structure('text', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('text.default', Rd_tag = 'VERB')), Rd_tag = '\\\\alias')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor5_75b22e55966cb2f065ed523bc0b523a2");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor6_ddd1b417b71ccb33b951f1fc1f03cfe5() {
        assertEval("argv <- list(list(structure(list(surname = structure(c(4L, 5L, 3L, 2L, 2L, 1L, 6L), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables', 'R Core'), class = 'factor'), nationality = structure(c(3L, 1L, 3L, 2L, 2L, 1L, NA), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(2L, 1L, 1L, 1L, 1L, 1L, NA), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = c('1', '2', '3', '4', '4.1', '5', '7'), class = 'data.frame'),     structure(list(title = structure(c(2L, 5L, 4L, 6L, 7L, 3L, 1L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = c(NA, 7L), class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor6_ddd1b417b71ccb33b951f1fc1f03cfe5");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor7_76122c593e5959d5f57a314601361b65() {
        assertEval("argv <- list(list(c('     The binary arithmetic operators are generic functions: methods can', '     be written for them individually or via the ‘Ops’ group generic', '     function.  (See ‘Ops’ for how dispatch is computed.)')), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor7_76122c593e5959d5f57a314601361b65");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor8_63def84a0ffa79732d4fad9d531278f4() {
        assertEval("argv <- list(list(structure(list(structure(1:4, .Label = c('0', '1', '2', '3'), class = 'factor')), row.names = c(NA, -4L), class = 'data.frame')), FALSE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor8_63def84a0ffa79732d4fad9d531278f4");
    }

    @Test
    public void TestrGenBuiltinislistfactor_testislistfactor9_4c59dc0a1fca5a3e86054aadedcf83e2() {
        assertEval("argv <- list(structure(list(`1` = c(2, 1, 4, 3), `2` = c(3, 1.5, 5, 4, 1.5), `3` = c(6.5, 1.5, 9, 8, 1.5, 6.5, 4, 4, 4), `4` = c(7, 1.5, 10, 9, 1.5, 7, 4, 4, 4, 7)), .Dim = 4L, .Dimnames = list(c('1', '2', '3', '4'))), TRUE); .Internal(islistfactor(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinislistfactor_testislistfactor9_4c59dc0a1fca5a3e86054aadedcf83e2");
    }

    @Test
    public void TestrGenBuiltinismatrix_testismatrix2_24d3c1c015000b8897c2e601ecd8d5f1() {
        assertEval("argv <- list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 1L, class = 'data.frame'));is.matrix(argv[[1]]);");
        check("TestrGenBuiltinismatrix_testismatrix2_24d3c1c015000b8897c2e601ecd8d5f1");
    }

    @Test
    public void TestrGenBuiltinisna_testisna13_1a5ea677fcf7838e65232d60dc685a93() {
        assertEval("argv <- list(structure(list(VAR1 = c(1, 2, 3, 4, 5), VAR3 = c(1, 1, 1, 1, NA)), .Names = c('VAR1', 'VAR3'), class = 'data.frame', row.names = c(NA, -5L)));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna13_1a5ea677fcf7838e65232d60dc685a93");
    }

    @Test
    public void TestrGenBuiltinisna_testisna20_7e7410bf8b5627962fcc4d0622a5bd04() {
        assertEval("argv <- list(structure(list(conc = c(NA, 1.4, NA, NA, NA, NA, NA, NA, 2.2, NA, NA, 0.6)), .Names = 'conc', row.names = 407:418, class = 'data.frame'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna20_7e7410bf8b5627962fcc4d0622a5bd04");
    }

    @Test
    public void TestrGenBuiltinisna_testisna23_41b3186fdac0bca647f163b1e86b8e2e() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 105L, wday = 6L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna23_41b3186fdac0bca647f163b1e86b8e2e");
    }

    @Test
    public void TestrGenBuiltinisna_testisna24_0a2422ef574162a9ab887775f3975750() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna24_0a2422ef574162a9ab887775f3975750");
    }

    @Test
    public void TestrGenBuiltinisna_testisna25_e0ae32baaa99ed736ec6689db23bd043() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 60L, wday = 5L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna25_e0ae32baaa99ed736ec6689db23bd043");
    }

    @Test
    public void TestrGenBuiltinisna_testisna26_2a434b0ada52407a9e835d2698ae4088() {
        assertEval("argv <- list(structure(list(conc = c(NA, NA, NA, NA, NA, NA, NA, 1.4, NA, NA, NA, NA, NA, NA, NA, 3)), .Names = 'conc', row.names = c(NA, 16L), class = 'data.frame'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna26_2a434b0ada52407a9e835d2698ae4088");
    }

    @Test
    public void TestrGenBuiltinisna_testisna28_84b0514d3ad0bdabdceba5bbfdd9ed99() {
        assertEval("argv <- list(structure(list(conc = c(NA, 3.6)), .Names = 'conc', row.names = 419:420, class = 'data.frame'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna28_84b0514d3ad0bdabdceba5bbfdd9ed99");
    }

    @Test
    public void TestrGenBuiltinisna_testisna29_9d0f053684ba87cbe5eb248372acea93() {
        assertEval("argv <- list(NULL);is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna29_9d0f053684ba87cbe5eb248372acea93");
    }

    @Test
    public void TestrGenBuiltinisna_testisna3_3a76894b87301cd131b3ccc6beb02b8a() {
        assertEval("argv <- list(structure(c(17L, 18L, 18L, 18L), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N')));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna3_3a76894b87301cd131b3ccc6beb02b8a");
    }

    @Test
    public void TestrGenBuiltinisna_testisna30_02682b27be50ef5425c8edd7a6bd73ea() {
        assertEval("argv <- list(structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_, mday = NA_integer_, mon = NA_integer_, year = NA_integer_, wday = NA_integer_, yday = NA_integer_, isdst = -1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna30_02682b27be50ef5425c8edd7a6bd73ea");
    }

    @Test
    public void TestrGenBuiltinisna_testisna32_20c3552db16069719f196255548a41c8() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 12L, mon = 2L, year = 112L, wday = 1L, yday = 71L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna32_20c3552db16069719f196255548a41c8");
    }

    @Test
    public void TestrGenBuiltinisna_testisna34_e26dee73698813118118fe9b6a849231() {
        assertEval("argv <- list(structure(c('Min.   : 1.00  ', '1st Qu.: 9.00  ', 'Median :18.00  ', 'Mean   :14.74  ', '3rd Qu.:20.00  ', 'Max.   :23.00  ', NA, 'Min.   :5.000  ', '1st Qu.:5.300  ', 'Median :6.100  ', 'Mean   :6.084  ', '3rd Qu.:6.600  ', 'Max.   :7.700  ', NA, '117    :  5  ', '1028   :  4  ', '113    :  4  ', '112    :  3  ', '135    :  3  ', '(Other):147  ', 'NA's   : 16  ', 'Min.   :  0.50  ', '1st Qu.: 11.32  ', 'Median : 23.40  ', 'Mean   : 45.60  ', '3rd Qu.: 47.55  ', 'Max.   :370.00  ', NA, 'Min.   :0.00300  ', '1st Qu.:0.04425  ', 'Median :0.11300  ', 'Mean   :0.15422  ', '3rd Qu.:0.21925  ', 'Max.   :0.81000  ', NA), .Dim = c(7L, 5L), .Dimnames = list(c('', '', '', '', '', '', ''), c('    event', '     mag', '   station', '     dist', '    accel')), class = 'table'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna34_e26dee73698813118118fe9b6a849231");
    }

    @Test
    public void TestrGenBuiltinisna_testisna35_3a958646dfd6addce10492f5e23b6947() {
        assertEval("argv <- list(NA_complex_);is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna35_3a958646dfd6addce10492f5e23b6947");
    }

    @Test
    public void TestrGenBuiltinisna_testisna37_1dee0e5e27f42092b55314e66ddc2e5c() {
        assertEval("argv <- list(structure(list(sec = 40, min = 24L, hour = 11L, mday = 15L, mon = 11L, year = 100L, wday = 5L, yday = 349L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt')));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna37_1dee0e5e27f42092b55314e66ddc2e5c");
    }

    @Test
    public void TestrGenBuiltinisna_testisna38_2357f4b62dba8861119a17a95e31748f() {
        assertEval("argv <- list(structure(c(2L, 6L, 2L, 5L, 4L, 2L, 5L, 4L), .Dim = 8L, .Dimnames = structure(list(statef = c('act', 'nsw', 'nt', 'qld', 'sa', 'tas', 'vic', 'wa')), .Names = 'statef'), class = 'table'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna38_2357f4b62dba8861119a17a95e31748f");
    }

    @Test
    public void TestrGenBuiltinisna_testisna39_9f8a962233b053dc539d9519852d5b05() {
        assertEval("argv <- list(structure(c(2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0), .Dim = 3:4, .Dimnames = structure(list(x1 = c('a', 'b', 'c'), x2 = c('a', 'b', 'c', NA)), .Names = c('x1', 'x2')), class = c('xtabs', 'table')));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna39_9f8a962233b053dc539d9519852d5b05");
    }

    @Test
    public void TestrGenBuiltinisna_testisna44_9f4ecab2273d91a954b8f023ab2c59f2() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 1L, mon = 0L, year = 70L, wday = 4L, yday = 0L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = 'GMT'));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna44_9f4ecab2273d91a954b8f023ab2c59f2");
    }

    @Test
    public void TestrGenBuiltinisna_testisna7_384496152a4a590ca86a7655b5c6aca2() {
        assertEval("argv <- list(structure(list(sec = 0, min = 0L, hour = 0L, mday = 9L, mon = 9L, year = 103L, wday = 4L, yday = 281L, isdst = 1L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt')));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna7_384496152a4a590ca86a7655b5c6aca2");
    }

    @Test
    public void TestrGenBuiltinisna_testisna8_f36aa043bdbd7d62cb9a7b6fbdff82cf() {
        assertEval("argv <- list(structure(c(23L, 24L, 47L, 48L, 71L, 72L, 95L, 96L, 119L, 120L), .Dim = c(2L, 5L), .Dimnames = list(NULL, c('V5', 'V6', 'V7', 'V8', 'V9'))));is.na(argv[[1]]);");
        check("TestrGenBuiltinisna_testisna8_f36aa043bdbd7d62cb9a7b6fbdff82cf");
    }

    @Test
    public void TestrGenBuiltinisnaPOSIXlt_testisnaPOSIXlt1_fe72c0f5737fa6b57256c327a9603120() {
        assertEval("argv <- structure(list(x = structure(list(sec = 0, min = 0L,     hour = 0L, mday = 11L, mon = 7L, year = 3L, wday = 2L, yday = 222L,     isdst = 0L, zone = 'EST', gmtoff = NA_integer_), .Names = c('sec',     'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst',     'zone', 'gmtoff'), class = c('POSIXlt', 'POSIXt'), tzone = c('EST5EDT',     'EST', 'EDT'))), .Names = 'x');do.call('is.na.POSIXlt', argv)");
        check("TestrGenBuiltinisnaPOSIXlt_testisnaPOSIXlt1_fe72c0f5737fa6b57256c327a9603120");
    }

    @Test
    public void TestrGenBuiltinisnaassign_default_testisnaassign_default2_9e3e856bc4c97a51fc96d24752d08e91() {
        assertEval("argv <- structure(list(x = structure(c('A', '3', 'C'), class = 'AsIs'),     value = 2), .Names = c('x', 'value'));do.call('is.na<-.default', argv)");
        check("TestrGenBuiltinisnaassign_default_testisnaassign_default2_9e3e856bc4c97a51fc96d24752d08e91");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan10_ac1aae3fc8a6bffc4887ffa94dba3a5d() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1), .Dim = 1:3));is.nan(argv[[1]]);");
        check("TestrGenBuiltinisnan_testisnan10_ac1aae3fc8a6bffc4887ffa94dba3a5d");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan2_590632285048b0eb0ad330c5d0abf1a6() {
        assertEval("argv <- list(structure(1:7, .Names = c('a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7')));is.nan(argv[[1]]);");
        check("TestrGenBuiltinisnan_testisnan2_590632285048b0eb0ad330c5d0abf1a6");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan3_f4ed9ecd1bdabc11bbaa46c6fe47cac0() {
        assertEval("argv <- list(1:3);is.nan(argv[[1]]);");
        check("TestrGenBuiltinisnan_testisnan3_f4ed9ecd1bdabc11bbaa46c6fe47cac0");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan4_da2b4392fba4e3a55021d23db0c7a264() {
        assertEval("argv <- list(structure(NaN, .Dim = c(1L, 1L)));is.nan(argv[[1]]);");
        check("TestrGenBuiltinisnan_testisnan4_da2b4392fba4e3a55021d23db0c7a264");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan7_09d8b88da3658280c474240252fce4e6() {
        assertEval("argv <- list(structure(1:3, .Dim = c(3L, 1L)));is.nan(argv[[1]]);");
        check("TestrGenBuiltinisnan_testisnan7_09d8b88da3658280c474240252fce4e6");
    }

    @Test
    public void TestrGenBuiltinisnan_testisnan9_2b940567bf3f4e734a1a778e1edea354() {
        assertEval("argv <- list(c(-Inf, 2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, Inf, NaN, NA));is.nan(argv[[1]]);");
        check("TestrGenBuiltinisnan_testisnan9_2b940567bf3f4e734a1a778e1edea354");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull14_50434f5c1b341684b0b42a3e1175c33d() {
        assertEval("argv <- list(NA_complex_);do.call('is.null', argv)");
        check("TestrGenBuiltinisnull_testisnull14_50434f5c1b341684b0b42a3e1175c33d");
    }

    @Test
    public void TestrGenBuiltinisnull_testisnull16_6aed923cc68e227d5514bf5a366ffbb7() {
        assertEval("argv <- list(function(file = ifelse(onefile, 'Rplots.pdf', 'Rplot%03d.pdf'),     width, height, onefile, family, title, fonts, version, paper,     encoding, bg, fg, pointsize, pagecentre, colormodel, useDingbats,     useKerning, fillOddEven, compress) {    initPSandPDFfonts()    new <- list()    if (!missing(width)) new$width <- width    if (!missing(height)) new$height <- height    if (!missing(onefile)) new$onefile <- onefile    if (!missing(title)) new$title <- title    if (!missing(fonts)) new$fonts <- fonts    if (!missing(version)) new$version <- version    if (!missing(paper)) new$paper <- paper    if (!missing(encoding)) new$encoding <- encoding    if (!missing(bg)) new$bg <- bg    if (!missing(fg)) new$fg <- fg    if (!missing(pointsize)) new$pointsize <- pointsize    if (!missing(pagecentre)) new$pagecentre <- pagecentre    if (!missing(colormodel)) new$colormodel <- colormodel    if (!missing(useDingbats)) new$useDingbats <- useDingbats    if (!missing(useKerning)) new$useKerning <- useKerning    if (!missing(fillOddEven)) new$fillOddEven <- fillOddEven    if (!missing(compress)) new$compress <- compress    old <- check.options(new, name.opt = '.PDF.Options', envir = .PSenv)    if (!missing(family) && (inherits(family, 'Type1Font') ||         inherits(family, 'CIDFont'))) {        enc <- family$encoding        if (inherits(family, 'Type1Font') && !is.null(enc) &&             enc != 'default' && (is.null(old$encoding) || old$encoding ==             'default')) old$encoding <- enc        family <- family$metrics    }    if (is.null(old$encoding) || old$encoding == 'default') old$encoding <- guessEncoding()    if (!missing(family)) {        if (length(family) == 4L) {            family <- c(family, 'Symbol.afm')        } else if (length(family) == 5L) {        } else if (length(family) == 1L) {            pf <- pdfFonts(family)[[1L]]            if (is.null(pf)) stop(gettextf('unknown family '%s'',                 family), domain = NA)            matchFont(pf, old$encoding)        } else stop('invalid 'family' argument')        old$family <- family    }    version <- old$version    versions <- c('1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7',         '2.0')    if (version %in% versions) version <- as.integer(strsplit(version,         '[.]')[[1L]]) else stop('invalid PDF version')    onefile <- old$onefile    if (!checkIntFormat(file)) stop(gettextf('invalid 'file' argument '%s'',         file), domain = NA)    .External(C_PDF, file, old$paper, old$family, old$encoding,         old$bg, old$fg, old$width, old$height, old$pointsize,         onefile, old$pagecentre, old$title, old$fonts, version[1L],         version[2L], old$colormodel, old$useDingbats, old$useKerning,         old$fillOddEven, old$compress)    invisible()});do.call('is.null', argv)");
        check("TestrGenBuiltinisnull_testisnull16_6aed923cc68e227d5514bf5a366ffbb7");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric13_868f8d2fea575e42581615cece943f06() {
        assertEval("argv <- list(structure(c(39.7, 27.7, 43.5, 89.7, 70.2, 63.5, 36.5, 15.2, 35.3, 45.2, 1.2, 49.5, 63.1, 34, 17, 17.6, 67.8, 45.1, 50.9, 64.9, 59.8, 73, 37.6, 60.7, 60.8, 69.3, 71.2, 64.5, 75.9, 7.7, 72.6, 18.7, 78.2, 55.1, 58.1, 62, 53.3, 85.9, 67.5, 16.7, 46.6, 84.9, 19.4, 38.4, 5, 22, 17, 5, 16, 6, 12, 31, 9, 16, 37, 15, 13, 17, 15, 35, 14, 6, 22, 7, 22, 19, 15, 19, 16, 22, 12, 14, 9, 29, 18, 25, 12, 14, 14, 21, 12, 3, 14, 22, 16, 7, 26, 26, 5, 29, 15, 2, 7, 3, 7, 20, 7, 13, 53, 8, 13, 8, 12, 32, 8, 9, 12, 3, 10, 9, 7, 12, 10, 5, 1, 6, 9, 11, 2, 7, 6, 3, 8, 12, 7, 2, 7, 13, 29, 6, 28, 12, 93.4, 58.33, 5.16, 100, 92.85, 2.56, 33.77, 2.15, 90.57, 91.38, 42.34, 6.1, 96.83, 3.3, 9.96, 16.92, 97.16, 84.84, 15.14, 98.22, 5.23, 2.84, 4.97, 4.43, 7.72, 2.82, 2.4, 98.61, 99.06, 13.79, 24.2, 8.65, 98.96, 4.52, 5.23, 8.52, 97.67, 99.71, 2.27, 11.22, 50.43, 99.68, 12.11, 5.62, 20.2, 19.3, 20.6, 18.3, 23.6, 18, 20.3, 10.8, 26.6, 24.4, 18, 22.5, 18.1, 20, 22.2, 23, 24.9, 22.2, 16.7, 20.2, 18, 20, 20, 22.7, 16.3, 18.7, 21, 24.5, 17.8, 20.5, 21.2, 19.5, 19.4, 22.4, 23.8, 16.5, 21, 15.1, 19.1, 18.9, 18.2, 19.8, 20.2, 20.3), .Dim = c(44L, 5L), .Dimnames = list(c('Franches-Mnt', 'Rive Gauche', 'Neuveville', 'Herens', 'Broye', 'Paysd'enhaut', 'Moutier', 'La Vallee', 'Porrentruy', 'Sarine', 'V. De Geneve', 'Yverdon', 'Sion', 'Grandson', 'Courtelary', 'Neuchatel', 'Glane', 'Delemont', 'Nyone', 'Monthey', 'Morges', 'Lavaux', 'Val de Ruz', 'Avenches', 'Rolle', 'Cossonay', 'Oron', 'Veveyse', 'St Maurice', 'La Chauxdfnd', 'Echallens', 'ValdeTravers', 'Martigwy', 'Moudon', 'Payerne', 'Aigle', 'Gruyere', 'Conthey', 'Aubonne', 'Le Locle', 'Rive Droite', 'Entremont', 'Lausanne', 'Boudry'), c('Agriculture', 'Examination', 'Education', 'Catholic', 'Infant.Mortality'))));is.numeric(argv[[1]]);");
        check("TestrGenBuiltinisnumeric_testisnumeric13_868f8d2fea575e42581615cece943f06");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric14_0d4c589b64aa0937df11da7a713fe795() {
        assertEval("argv <- list(structure(c(1386439154.20645, 1386469154.20645, 1386499154.20645, 1386529154.20645, 1386559154.20645, 1386589154.20645, 1386619154.20645, 1386649154.20645, 1386679154.20645, 1386709154.20645, 1386739154.20645, 1386769154.20645, 1386799154.20645, 1386829154.20645, 1386859154.20645, 1386889154.20645, 1386919154.20645, 1386949154.20645, 1386979154.20645, 1387009154.20645, 1387039154.20645, 1387069154.20645, 1387099154.20645, 1387129154.20645, 1387159154.20645, 1387189154.20645, 1387219154.20645, 1387249154.20645, 1387279154.20645, 1387309154.20645, 1387339154.20645, 1387369154.20645, 1387399154.20645, 1387429154.20645), class = c('POSIXct', 'POSIXt')));is.numeric(argv[[1]]);");
        check("TestrGenBuiltinisnumeric_testisnumeric14_0d4c589b64aa0937df11da7a713fe795");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric2_65df4b81dfebff773417ef0966f2eb24() {
        assertEval("argv <- list(structure(c(12784, 12874, 12965, 13057, 13149, 13239, 13330, 13422, 13514, 13604, 13695, 13787, 13879, 13970, 14061, 14153, 14245, 14335), class = 'Date'));is.numeric(argv[[1]]);");
        check("TestrGenBuiltinisnumeric_testisnumeric2_65df4b81dfebff773417ef0966f2eb24");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric21_6162f05d2d6b02de4d99d1614956adba() {
        assertEval("argv <- list(structure(16146, class = 'Date'));is.numeric(argv[[1]]);");
        check("TestrGenBuiltinisnumeric_testisnumeric21_6162f05d2d6b02de4d99d1614956adba");
    }

    @Test
    public void TestrGenBuiltinisnumeric_testisnumeric24_cf0964db56237cbe4e5f3252352381cd() {
        assertEval("argv <- list(structure(16352, class = 'Date'));do.call('is.numeric', argv)");
        check("TestrGenBuiltinisnumeric_testisnumeric24_cf0964db56237cbe4e5f3252352381cd");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted14_7b561f72cf279b021f1a3a70b2476bbc() {
        assertEval("argv <- structure(list(x = structure(list(x = 3:4, y = 1:2),     .Names = c('x', 'y'), row.names = c(NA, -2L), class = 'data.frame')),     .Names = 'x');do.call('is.unsorted', argv)");
        check("TestrGenBuiltinisunsorted_testisunsorted14_7b561f72cf279b021f1a3a70b2476bbc");
    }

    @Test
    public void TestrGenBuiltinisunsorted_testisunsorted7_40e5a970eb27718fdd45159ea51d915e() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), FALSE); .Internal(is.unsorted(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinisunsorted_testisunsorted7_40e5a970eb27718fdd45159ea51d915e");
    }

    @Test
    public void TestrGenBuiltinjulianDate_testjulianDate1_e2611ffbc0bb4eb7d2e9db89106c26d1() {
        assertEval("argv <- structure(list(x = structure(16352, class = 'Date'),     origin = -2440588), .Names = c('x', 'origin'));do.call('julian.Date', argv)");
        check("TestrGenBuiltinjulianDate_testjulianDate1_e2611ffbc0bb4eb7d2e9db89106c26d1");
    }

    @Test
    public void TestrGenBuiltinlabels_testlabels1_9429b8f435fb4d93c055e4d34115a4bb() {
        assertEval("argv <- structure(list(object = structure(c(-469.098459411633,     469.356672501203, -0.429918004252249, 0.00364370239091614,     -0.256875513692359, -0.0204799335117722, 2.00613934942808),     .Names = c('(Intercept)', 'gravity', 'ph', 'osmo', 'conduct',         'urea', 'log(calc)'))), .Names = 'object');do.call('labels', argv)");
        check("TestrGenBuiltinlabels_testlabels1_9429b8f435fb4d93c055e4d34115a4bb");
    }

    @Test
    public void TestrGenBuiltinlazyLoadDBflush_testlazyLoadDBflush1_cef4a1af4e9fa39cdf8f736e988487cd() {
        assertEval("argv <- list('/home/roman/r-instrumented/library/tools/R/tools.rdb'); .Internal(lazyLoadDBflush(argv[[1]]))");
        check("TestrGenBuiltinlazyLoadDBflush_testlazyLoadDBflush1_cef4a1af4e9fa39cdf8f736e988487cd");
    }

    @Test
    public void TestrGenBuiltinlazyLoadDBflush_testlazyLoadDBflush2_9a5760c0187e982262284ceb02d2e117() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/library/stats4/R/stats4.rdb'); .Internal(lazyLoadDBflush(argv[[1]]))");
        check("TestrGenBuiltinlazyLoadDBflush_testlazyLoadDBflush2_9a5760c0187e982262284ceb02d2e117");
    }

    @Test
    public void TestrGenBuiltinlbeta_testlbeta1_09a92ce71a1f383c2304c1f8fc433817() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(lbeta(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinlbeta_testlbeta1_09a92ce71a1f383c2304c1f8fc433817");
    }

    @Test
    public void TestrGenBuiltinlchoose_testlchoose1_aea5cb7166dbc2c24ee4d66a3285b134() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(lchoose(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinlchoose_testlchoose1_aea5cb7166dbc2c24ee4d66a3285b134");
    }

    @Test
    public void TestrGenBuiltinlchoose_testlchoose2_eef92f0b2715df9ec5ebab185e89a3b8() {
        assertEval("argv <- list(50L, 0:48); .Internal(lchoose(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinlchoose_testlchoose2_eef92f0b2715df9ec5ebab185e89a3b8");
    }

    @Test
    public void TestrGenBuiltinlchoose_testlchoose3_1c1480efe394bbd1018556b13b24cb31() {
        assertEval("argv <- list(0.5, 1:9); .Internal(lchoose(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinlchoose_testlchoose3_1c1480efe394bbd1018556b13b24cb31");
    }

    @Test
    public void TestrGenBuiltinlength_testlength12_9301367856ba463ffbd2cf050e2c249d() {
        assertEval("argv <- list(quote(cbind(X, M) ~ M.user + Temp + M.user:Temp));length(argv[[1]]);");
        check("TestrGenBuiltinlength_testlength12_9301367856ba463ffbd2cf050e2c249d");
    }

    @Test
    public void TestrGenBuiltinlength_testlength26_48abde75e1aa7d159270fa39ef5d6099() {
        assertEval("argv <- list(structure(list(sec = numeric(0), min = integer(0), hour = integer(0), mday = integer(0), mon = integer(0), year = integer(0), wday = integer(0), yday = integer(0), isdst = integer(0)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')));length(argv[[1]]);");
        check("TestrGenBuiltinlength_testlength26_48abde75e1aa7d159270fa39ef5d6099");
    }

    @Test
    public void TestrGenBuiltinlength_testlength3_098f5d0995cf8297ff6a5d72d907402e() {
        assertEval("argv <- list(structure('     \\'Le français, c'est façile: Règles, Liberté, Egalité, Fraternité...\\')\\n', Rd_tag = 'RCODE'));length(argv[[1]]);");
        check("TestrGenBuiltinlength_testlength3_098f5d0995cf8297ff6a5d72d907402e");
    }

    @Test
    public void TestrGenBuiltinlength_testlength37_e2bf4ac1f3ea08efd2d9ec31702ac637() {
        assertEval("argv <- list(function(file = ifelse(onefile, 'Rplots.pdf', 'Rplot%03d.pdf'),     width, height, onefile, family, title, fonts, version, paper,     encoding, bg, fg, pointsize, pagecentre, colormodel, useDingbats,     useKerning, fillOddEven, compress) {    initPSandPDFfonts()    new <- list()    if (!missing(width)) new$width <- width    if (!missing(height)) new$height <- height    if (!missing(onefile)) new$onefile <- onefile    if (!missing(title)) new$title <- title    if (!missing(fonts)) new$fonts <- fonts    if (!missing(version)) new$version <- version    if (!missing(paper)) new$paper <- paper    if (!missing(encoding)) new$encoding <- encoding    if (!missing(bg)) new$bg <- bg    if (!missing(fg)) new$fg <- fg    if (!missing(pointsize)) new$pointsize <- pointsize    if (!missing(pagecentre)) new$pagecentre <- pagecentre    if (!missing(colormodel)) new$colormodel <- colormodel    if (!missing(useDingbats)) new$useDingbats <- useDingbats    if (!missing(useKerning)) new$useKerning <- useKerning    if (!missing(fillOddEven)) new$fillOddEven <- fillOddEven    if (!missing(compress)) new$compress <- compress    old <- check.options(new, name.opt = '.PDF.Options', envir = .PSenv)    if (!missing(family) && (inherits(family, 'Type1Font') ||         inherits(family, 'CIDFont'))) {        enc <- family$encoding        if (inherits(family, 'Type1Font') && !is.null(enc) &&             enc != 'default' && (is.null(old$encoding) || old$encoding ==             'default')) old$encoding <- enc        family <- family$metrics    }    if (is.null(old$encoding) || old$encoding == 'default') old$encoding <- guessEncoding()    if (!missing(family)) {        if (length(family) == 4L) {            family <- c(family, 'Symbol.afm')        } else if (length(family) == 5L) {        } else if (length(family) == 1L) {            pf <- pdfFonts(family)[[1L]]            if (is.null(pf)) stop(gettextf('unknown family '%s'',                 family), domain = NA)            matchFont(pf, old$encoding)        } else stop('invalid 'family' argument')        old$family <- family    }    version <- old$version    versions <- c('1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7',         '2.0')    if (version %in% versions) version <- as.integer(strsplit(version,         '[.]')[[1L]]) else stop('invalid PDF version')    onefile <- old$onefile    if (!checkIntFormat(file)) stop(gettextf('invalid 'file' argument '%s'',         file), domain = NA)    .External(C_PDF, file, old$paper, old$family, old$encoding,         old$bg, old$fg, old$width, old$height, old$pointsize,         onefile, old$pagecentre, old$title, old$fonts, version[1L],         version[2L], old$colormodel, old$useDingbats, old$useKerning,         old$fillOddEven, old$compress)    invisible()});do.call('length', argv)");
        check("TestrGenBuiltinlength_testlength37_e2bf4ac1f3ea08efd2d9ec31702ac637");
    }

    @Test
    public void TestrGenBuiltinlength_testlength5_bea1d3b9768614cdcd4d033fb443548f() {
        assertEval("argv <- list(structure(list(`log(x)` = c(0, 0.693147180559945, 1.09861228866811, 1.38629436111989, 1.6094379124341, 1.79175946922805, 1.94591014905531, 2.07944154167984, 2.19722457733622, 2.30258509299405, 2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809), `log(z)` = c(2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809, 4.61512051684126, 4.62497281328427, 4.63472898822964, 4.64439089914137, 4.65396035015752, 4.66343909411207, 4.67282883446191, 4.68213122712422, 4.69134788222914, 4.70048036579242)), .Names = c('log(x)', 'log(z)'), class = 'data.frame', row.names = c(NA, 100L), terms = quote(~log(x) + log(z))));length(argv[[1]]);");
        check("TestrGenBuiltinlength_testlength5_bea1d3b9768614cdcd4d033fb443548f");
    }

    @Test
    public void TestrGenBuiltinlength_testlength6_5059a25bf1b1d3661d481a4ea56e7924() {
        assertEval("argv <- list(list('Residuals vs Fitted', 'Normal Q-Q', 'Scale-Location', 'Cook's distance', 'Residuals vs Leverage', expression('Cook's dist vs Leverage  ' * h[ii]/(1 - h[ii]))));length(argv[[1]]);");
        check("TestrGenBuiltinlength_testlength6_5059a25bf1b1d3661d481a4ea56e7924");
    }

    @Test
    public void TestrGenBuiltinlength_testlength7_55a83c0818d69a7b7df3c3826e85718b() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L), mday = c(30L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 30L, 30L, 30L, 31L, 30L, 31L, 31L, 31L, 30L), mon = c(5L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 5L, 5L, 5L, 5L, 11L, 11L, 11L, 5L, 5L, 5L, 11L, 5L, 11L, 11L, 11L, 5L), year = c(72L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 81L, 82L, 83L, 85L, 87L, 89L, 90L, 92L, 93L, 94L, 95L, 97L, 98L, 105L, 108L, 112L), wday = c(5L, 0L, 1L, 2L, 3L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 0L, 4L, 0L, 1L, 2L, 3L, 4L, 0L, 1L, 4L, 6L, 3L, 6L), yday = c(181L, 365L, 364L, 364L, 364L, 365L, 364L, 364L, 364L, 180L, 180L, 180L, 180L, 364L, 364L, 364L, 181L, 180L, 180L, 364L, 180L, 364L, 364L, 365L, 181L), isdst = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')));length(argv[[1]]);");
        check("TestrGenBuiltinlength_testlength7_55a83c0818d69a7b7df3c3826e85718b");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign1_1481d9482e1473ce157eb39230fd0d48() {
        assertEval("argv <- list(c('A', 'B'), value = 5);`length<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlengthassign_testlengthassign1_1481d9482e1473ce157eb39230fd0d48");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign2_4b74e5d4e2ac239ec628941b8135d6b2() {
        assertEval("argv <- list(list(list(2, 2, 6), list(2, 2, 0)), value = 0);`length<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlengthassign_testlengthassign2_4b74e5d4e2ac239ec628941b8135d6b2");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign3_fb7e9cceeb4e47802113806aa49cb1a4() {
        assertEval("argv <- list(list(list(2, 2, 6), list(1, 3, 9), list(1, 3, -1)), value = 1);`length<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlengthassign_testlengthassign3_fb7e9cceeb4e47802113806aa49cb1a4");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign4_8dce4e78e2538e574d9a637fd328c8de() {
        assertEval("argv <- list(c(28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), value = 0L);`length<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlengthassign_testlengthassign4_8dce4e78e2538e574d9a637fd328c8de");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign5_6fada3a1873cba1852cb1cddccd5e4a8() {
        assertEval("argv <- list(c(0L, 1L, 2L, 3L, 4L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 5L, 6L), value = 0L);`length<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlengthassign_testlengthassign5_6fada3a1873cba1852cb1cddccd5e4a8");
    }

    @Test
    public void TestrGenBuiltinlengthassign_testlengthassign6_ca074e784907db67ace5265cf4864a14() {
        assertEval("argv <- list(list(), value = 0L);`length<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlengthassign_testlengthassign6_ca074e784907db67ace5265cf4864a14");
    }

    @Test
    public void TestrGenBuiltinlengthassign__testlengthassign_1_8a86c8479100c5c1c7e318b61b46cbcc() {
        assertEval("argv <- structure(list(1:3, value = TRUE), .Names = c('', 'value'));do.call('length<-', argv)");
        check("TestrGenBuiltinlengthassign__testlengthassign_1_8a86c8479100c5c1c7e318b61b46cbcc");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign1_32eaaa5f66a2124bd48f233b7d004572() {
        assertEval("argv <- list(structure(1:2, .Label = c('a', 'b'), class = 'factor'), value = structure(list(C = 'C', A = 'a', B = 'b'), .Names = c('C', 'A', 'B')));`levels<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlevelsassign_testlevelsassign1_32eaaa5f66a2124bd48f233b7d004572");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign2_87535052709adcabc481eb8c7a94c28b() {
        assertEval("argv <- list(structure(c(24L, 13L, 15L, 68L, 39L, 74L, 22L, 1L, 8L, 55L, 24L, 20L, 51L, 13L, 3L, 4L, 5L, 6L, 15L, 2L, 8L, 60L, 67L, 23L, 58L, 24L, 22L, 21L, 37L, 74L, 59L, 39L, 14L, 14L, 19L, 23L, 70L, 21L, 22L, 31L, 29L, 30L, 45L, 58L, 17L, 7L, 19L, 26L, 39L, 74L, 57L, 59L, 12L, 72L, 70L, 37L, 64L, 16L, 18L, 21L, 22L, 8L, 62L, 61L, 63L, 71L, 105L, 64L, 10L, 41L, 8L, 27L, 11L, 34L, 32L, 33L, 68L, 107L, NA, 66L, NA, 65L, 48L, 52L, 43L, 47L, 46L, 44L, 41L, 54L, 28L, 50L, 40L, NA, 69L, NA, 75L, 109L, NA, 86L, 112L, 110L, 104L, 24L, 111L, 87L, NA, NA, 92L, 73L, 85L, 90L, 89L, NA, 83L, NA, 102L, NA, 108L, 88L, 91L, 93L, NA, 94L, 84L, NA, 106L, NA, 95L, 82L, 56L, 87L, 109L, 75L, 104L, 110L, 112L, 111L, 24L, 73L, 85L, 86L, 90L, 89L, 102L, 88L, 92L, 9L, 49L, 42L, 38L, 35L, 36L, 25L, NA, NA, 9L, 49L, 42L, NA, 36L, 38L, 25L, 53L, 79L, 78L, 103L, 77L, 80L, 114L, 97L, 113L, 76L, 96L, 81L, 116L, 99L, 117L, 115L, 98L, 101L, 100L), .Label = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'), class = 'factor'), value = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'));`levels<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlevelsassign_testlevelsassign2_87535052709adcabc481eb8c7a94c28b");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign4_2f1ede8e983680131664ece8e9e96e2e() {
        assertEval("argv <- list(structure(c(1L, 1L, 2L, 2L, 3L, 3L, 1L, 1L, 2L, 2L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor'), value = structure(list(A = c(1, 3), B = 2), .Names = c('A', 'B')));`levels<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlevelsassign_testlevelsassign4_2f1ede8e983680131664ece8e9e96e2e");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign5_934190e4c01e8683a4f138e15ee5129f() {
        assertEval("argv <- list(structure(FALSE, .Label = FALSE), FALSE);`levels<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlevelsassign_testlevelsassign5_934190e4c01e8683a4f138e15ee5129f");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign6_76f3c73d8ae11833c5a065ddae27d835() {
        assertEval("argv <- list(NULL, NULL);`levels<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlevelsassign_testlevelsassign6_76f3c73d8ae11833c5a065ddae27d835");
    }

    @Test
    public void TestrGenBuiltinlevelsassign_testlevelsassign7_232e9f1995c24d418cd95448f6b30997() {
        assertEval("argv <- list(structure(list(), .Label = list()), list());`levels<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlevelsassign_testlevelsassign7_232e9f1995c24d418cd95448f6b30997");
    }

    @Test
    public void TestrGenBuiltinlevelsassign__testlevelsassign_1_f2b397fbeef96c0856c4b1bee7b85573() {
        assertEval("argv <- structure(list(structure(c(4L, 4L, 3L, 6L, 5L, 4L, 4L,     5L, 4L, 4L, 2L, 1L, 3L, 2L, 2L, 3L, 4L, 3L, 2L, 2L, 2L, 4L,     3L, 2L, 6L, 3L, 6L, 2L, 3L, 5L, 2L, 6L, 4L, 2L, 1L, 6L, 6L,     4L, 5L, 3L, 5L, 5L, 6L, 2L, 4L, 3L, 4L, 5L, 4L, 4L, 2L, 6L,     1L, 3L, 5L, 4L, 5L, 2L, 5L, 1L, 6L, 5L, 3L, 6L, 3L, 6L, 3L,     6L, 4L, 6L, 1L, 3L, 2L, 5L, 3L, 3L, 2L, 4L, 3L, 4L, 2L, 1L,     4L, 5L, 3L, 6L, 3L, 6L, 6L, 6L, 4L, 4L, 6L, 4L, 2L, 2L, 3L,     3L, 3L, 5L, 3L, 1L, 5L, 6L, 6L, 6L, 2L, 3L, 3L, 5L, 4L, 2L,     2L, 5L, 2L, 3L, 1L, 3L, 3L, 6L, 1L, 6L, 5L, 4L, 3L, 1L, 1L,     1L, 3L, 5L, 4L, 4L, 1L, 1L, 6L, 2L, 6L, 6L, 1L, 5L, 6L, 6L,     2L, 4L, 6L, 6L, 4L, 4L, 5L, 4L, 4L, 1L, 3L, 1L, 2L, 6L, 6L,     1L, 2L, 6L, 3L, 5L, 4L, 6L, 5L, 3L, 4L, 2L, 5L, 2L, 3L, 2L,     1L, 5L, 1L, 1L, 6L, 6L, 1L, 4L, 2L, 3L, 4L, 3L, 3L, 5L, 3L,     6L, 4L, 3L, 5L, 3L, 5L, 5L, 4L, 2L, 2L, 4L, 1L, 6L, 5L, 6L,     3L, 5L, 1L, 2L, 1L, 3L, 5L, 1L, 4L, 1L, 2L, 4L, 5L, 4L, 6L,     3L, 5L, 6L, 1L, 3L, 4L, 6L, 5L, 5L, 1L, 3L, 2L, 6L, 5L, 5L,     4L, 3L, 5L, 3L, 6L, 5L, 4L, 4L, 2L, 4L, 5L, 2L, 5L, 3L, 1L,     1L, 6L, 5L, 6L, 6L, 1L, 5L, 5L, 3L, 6L, 6L, 1L, 4L, 3L, 6L,     4L, 4L, 6L, 4L, 4L, 3L, 5L, 4L, 1L, 2L, 1L, 5L, 2L, 6L, 4L,     1L, 3L, 4L, 4L, 2L, 4L, 5L, 6L, 5L, 5L, 5L, 3L, 1L, 6L, 2L,     2L, 2L, 6L, 4L, 2L, 5L, 4L, 3L, 4L, 3L, 1L, 2L, 2L, 3L, 4L,     5L, 6L, 4L, 3L, 4L, 6L, 3L, 3L, 5L, 6L, 3L, 3L, 3L, 1L, 2L,     4L, 5L, 2L, 5L, 4L, 4L, 2L, 4L, 3L, 1L, 3L, 3L, 6L, 5L, 4L,     2L, 1L, 4L, 4L, 1L, 4L, 3L, 4L, 3L, 1L, 4L, 6L, 2L, 5L, 6L,     3L, 6L, 2L, 1L, 6L, 6L, 2L, 6L, 6L, 5L, 2L, 2L, 4L, 6L, 6L,     5L, 2L, 3L, 3L, 1L, 3L, 4L, 3L, 5L, 5L, 2L, 4L, 2L, 2L, 6L,     3L, 6L, 4L, 4L, 1L, 4L, 5L, 2L, 2L, 4L, 6L, 5L, 4L, 3L, 2L,     4L, 4L, 6L, 5L, 4L, 4L, 6L, 4L, 4L, 1L, 5L, 2L, 1L, 6L, 5L,     4L, 2L, 5L, 4L, 2L, 4L, 6L, 1L, 6L, 5L, 4L, 5L, 1L, 4L, 6L,     2L, 4L, 4L, 2L, 3L, 2L, 1L, 5L, 2L, 4L, 5L, 2L, 5L, 3L, 2L,     3L, 6L, 6L, 3L, 1L, 3L, 2L, 6L, 5L, 5L, 4L, 3L, 3L, 6L, 5L,     2L, 5L, 4L, 5L, 1L, 2L, 6L, 2L, 6L, 3L, 5L, 6L, 1L, 6L, 3L,     4L, 2L, 1L, 6L, 2L, 5L, 5L, 4L, 3L, 2L, 2L, 2L, 1L, 2L, 6L,     1L, 5L, 1L, 3L, 1L, 1L, 6L, 4L, 5L, 2L, 4L, 2L, 5L, 3L, 4L,     1L, 2L, 5L, 1L, 1L, 2L, 6L, 2L, 4L, 3L, 3L, 4L, 4L, 5L, 5L,     6L, 1L, 4L, 2L, 2L, 3L, 3L, 3L, 6L, 3L, 5L, 4L, 4L, 3L, 3L,     3L, 3L, 5L, 4L, 5L, 1L, 4L, 4L, 5L, 6L, 4L, 5L, 1L, 6L, 2L,     1L, 3L, 6L, 3L, 2L, 5L, 1L, 3L, 2L, 3L, 3L, 2L, 5L, 3L, 5L,     5L, 4L, 6L, 6L, 5L, 6L, 6L, 3L, 4L, 2L, 4L, 2L, 3L, 1L, 4L,     5L, 4L, 1L, 5L, 4L, 5L, 6L, 3L, 5L, 6L, 5L, 1L, 2L, 2L, 4L,     6L, 4L, 5L, 6L, 3L, 4L, 2L, 1L, 2L, 5L, 3L, 6L, 5L, 5L, 5L,     3L, 5L, 5L, 2L, 2L, 3L, 2L, 5L, 5L, 4L, 5L, 1L, 5L, 2L, 5L,     4L, 2L, 4L, 6L, 3L, 6L, 3L, 1L, 6L, 5L, 4L, 5L, 6L, 4L, 5L,     2L, 1L, 3L, 6L, 1L, 5L, 1L, 2L, 5L, 2L, 1L, 6L, 4L, 1L, 6L,     3L, 2L, 2L, 4L, 5L, 5L, 5L, 3L, 3L, 1L, 4L, 2L, 4L, 6L, 1L,     3L, 1L, 6L, 3L, 2L, 1L, 3L, 3L, 4L, 1L, 3L, 3L, 5L, 1L, 2L,     2L, 5L, 2L, 4L, 3L, 2L, 3L, 3L, 6L, 5L, 1L, 4L, 3L, 4L, 5L,     5L, 1L, 5L, 6L, 5L, 2L, 2L, 3L, 5L, 3L, 1L, 2L, 5L, 5L, 1L,     3L, 4L, 3L, 3L, 6L, 5L, 2L, 5L, 5L, 2L, 6L, 2L, 1L, 1L, 2L,     6L, 4L, 5L, 1L, 2L, 1L, 1L, 4L, 4L, 1L, 3L, 5L, 4L, 4L, 3L,     4L, 5L, 3L, 4L, 5L, 1L, 3L, 2L, 3L, 4L, 3L, 5L, 3L, 2L, 4L,     5L, 1L, 2L, 4L, 3L, 6L, 3L, 6L, 3L, 6L, 3L, 4L, 3L, 2L, 3L,     6L, 2L, 4L, 1L, 1L, 2L, 2L, 5L, 3L, 2L, 3L, 6L, 2L, 3L, 2L,     5L, 5L, 2L, 3L, 3L, 5L, 3L, 5L, 4L, 6L, 2L, 2L, 1L, 5L, 4L,     4L, 4L, 1L, 6L, 6L, 3L, 2L, 3L, 6L, 4L, 4L, 4L, 4L, 4L, 5L,     3L, 5L, 6L, 5L, 2L, 4L, 6L, 5L, 6L, 5L, 5L, 1L, 3L, 6L, 3L,     2L, 2L, 4L, 4L, 2L, 5L, 4L, 4L, 6L, 4L, 5L, 5L, 5L, 3L, 6L,     4L, 6L, 5L, 6L, 4L, 4L, 6L, 2L, 3L, 5L, 5L, 2L, 5L, 4L, 4L,     1L, 4L, 2L, 6L, 2L, 1L, 4L, 2L, 6L, 4L, 2L, 3L, 4L, 6L, 6L,     2L, 3L, 4L, 3L, 2L, 3L, 5L, 2L, 6L, 4L, 4L, 1L, 5L, 3L, 6L,     1L, 2L, 3L, 5L, 5L, 5L, 5L, 3L, 5L, 4L, 5L, 6L, 4L, 5L, 5L,     3L, 4L, 4L, 2L, 4L, 3L, 4L, 6L, 3L, 5L, 2L, 5L, 5L, 4L, 2L,     1L, 6L, 2L, 4L, 6L, 3L, 3L, 6L, 5L, 6L, 1L, 5L, 2L, 4L, 6L,     4L, 5L, 3L, 2L, 6L, 1L, 3L, 3L, 3L, 2L, 4L, 3L, 2L, 5L, 5L,     4L, 2L, 6L, 6L, 2L, 6L, 3L, 6L, 1L, 4L, 6L, 4L, 6L, 6L, 1L,     5L, 1L, 3L, 1L, 6L, 1L, 3L, 2L, 3L, 2L, 2L, 4L, 1L, 3L, 1L,     5L, 3L, 5L, 4L, 3L, 2L, 3L, 2L, 3L, 3L, 6L, 1L, 2L, 6L, 5L,     2L, 6L, 2L, 6L, 5L, 3L, 1L, 2L, 2L, 4L, 5L, 4L, 6L, 5L, 3L,     4L, 2L, 5L, 6L, 4L, 1L, 5L, 3L, 1L, 5L, 4L, 2L, 2L, 5L, 2L,     5L, 4L, 3L, 5L, 3L, 2L, 2L, 3L, 2L, 1L, 4L, 5L, 4L, 6L, 3L,     6L, 3L, 6L, 4L, 1L, 6L, 6L, 4L, 1L, 5L, 2L, 5L, 5L, 4L, 2L,     5L, 4L, 6L, 4L, 6L, 3L, 4L, 1L, 4L, 3L, 1L, 4L, 5L, 3L, 4L,     1L, 5L, 5L, 1L, 2L, 1L, 4L, 1L, 5L, 5L, 4L, 4L, 6L, 6L, 4L,     6L, 4L, 2L, 2L, 3L, 5L, 1L, 2L, 3L, 6L, 3L, 4L, 4L, 2L, 4L,     2L, 3L, 3L, 2L, 1L, 1L, 3L, 2L, 2L, 1L, 1L, 6L, 3L, 3L, 6L,     1L, 6L, 4L, 2L, 4L, 2L, 1L, 1L, 4L, 4L, 4L, 6L, 4L, 4L, 6L,     2L, 3L, 3L, 3L, 2L, 2L, 4L, 4L, 6L, 5L, 5L, 3L, 4L, 5L, 4L,     1L, 3L, 1L, 5L, 5L, 6L, 5L, 1L, 5L, 3L, 6L, 3L, 4L, 6L, 3L,     3L, 5L, 1L, 5L, 2L, 3L, 2L, 2L, 2L, 2L, 4L, 4L, 2L, 5L, 4L,     1L, 2L, 3L, 1L, 4L, 2L, 1L, 6L, 4L, 1L, 4L, 2L, 5L, 4L, 3L,     5L, 2L, 1L, 1L, 4L, 3L, 2L, 3L, 1L, 2L, 6L, 6L, 1L, 3L, 4L,     1L, 5L, 6L, 4L, 4L), .Label = c('(0,25]', '(25,35]', '(35,45]',     '(45,55]', '(55,65]', '(65,99]'), class = 'factor'), value = c('age1824',     'age2534', 'age3544', 'age4554', 'age5564', 'age6599')),     .Names = c('', 'value'));do.call('levels<-', argv)");
        check("TestrGenBuiltinlevelsassign__testlevelsassign_1_f2b397fbeef96c0856c4b1bee7b85573");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma1_e95a91f28a8a65ed9285324833de381f() {
        assertEval("argv <- list(structure(c(2, 1, 1, 1, 3, 1, 1, 1, 4), .Dim = c(3L, 3L)));lgamma(argv[[1]]);");
        check("TestrGenBuiltinlgamma_testlgamma1_e95a91f28a8a65ed9285324833de381f");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma2_541d5022d92bebe4392512ddba8a4fe5() {
        assertEval("argv <- list(structure(c(2, 3, 2, 1, 4, 4, 7, 2, 11, 11, 15, 10, 7, 8, 13, 12), .Dim = c(4L, 4L), .Dimnames = structure(list(income = c('< 15k', '15-25k', '25-40k', '> 40k'), satisfaction = c('VeryD', 'LittleD', 'ModerateS', 'VeryS')), .Names = c('income', 'satisfaction'))));lgamma(argv[[1]]);");
        check("TestrGenBuiltinlgamma_testlgamma2_541d5022d92bebe4392512ddba8a4fe5");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma4_fea0f0854c103e5b079d4af35013e0a7() {
        assertEval("argv <- list(0.999935539560166);lgamma(argv[[1]]);");
        check("TestrGenBuiltinlgamma_testlgamma4_fea0f0854c103e5b079d4af35013e0a7");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma7_6c68b8e517127bdb8de22aa4b23c1458() {
        assertEval("argv <- list(structure(c(11.4065045686104, 9.40650456861037, 8.40650456861037, 11.4065045686104, 9.40650456861037, 6.40650456861036, 15.4065045686104, 9.40650456861037, 9.40650456861037, 8.40650456861037, 6.40650456861036, 7.40650456861036, 8.40650456861037, 7.40650456861036, 9.40650456861037, 13.4065045686104, 10.4065045686104, 11.4065045686104, 14.4065045686104, 10.4065045686104, 16.4065045686104, 10.4065045686104, 7.40650456861036, 9.40650456861037, 7.40650456861036, 13.4065045686104, 17.4065045686104, 4.40650456861036, 10.4065045686104, 5.40650456861036, 6.40650456861036, 4.40650456861036, 5.40650456861036, 4.40650456861036, 4.40650456861036, 8.40650456861037, 9.40650456861037, 5.40650456861036, 9.40650456861037, 7.40650456861036, 7.40650456861036, 8.40650456861037), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42')));lgamma(argv[[1]]);");
        check("TestrGenBuiltinlgamma_testlgamma7_6c68b8e517127bdb8de22aa4b23c1458");
    }

    @Test
    public void TestrGenBuiltinlgamma_testlgamma9_be6e1c7ee2606642e5baeeef275b5bdf() {
        assertEval("argv <- list(Inf);do.call('lgamma', argv)");
        check("TestrGenBuiltinlgamma_testlgamma9_be6e1c7ee2606642e5baeeef275b5bdf");
    }

    @Test
    public void TestrGenBuiltinlist_testlist1_65944132382d44701c1261f0a0b25eee() {
        assertEval("argv <- list(surname = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables', 'R Core'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia', NA), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'no', 'yes', 'no', NA), class = 'AsIs'), title = structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...', 'An Introduction to R'), class = 'AsIs'), other.author = structure(c(NA, NA, NA, NA, NA, 'Ripley', 'Venables & Smith'), class = 'AsIs'));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
        check("TestrGenBuiltinlist_testlist1_65944132382d44701c1261f0a0b25eee");
    }

    @Test
    public void TestrGenBuiltinlist_testlist10_0d91de5fcb12ceb1b94df1e95266e389() {
        assertEval("argv <- list(linkfun = function (mu) .Call(C_logit_link, mu), linkinv = function (eta) .Call(C_logit_linkinv, eta), mu.eta = function (eta) .Call(C_logit_mu_eta, eta), valideta = function (eta) TRUE, name = 'logit');list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
        check("TestrGenBuiltinlist_testlist10_0d91de5fcb12ceb1b94df1e95266e389");
    }

    @Test
    public void TestrGenBuiltinlist_testlist11_606357090d4876929a9f1b147d4d012b() {
        assertEval("argv <- list(linkfun = function (mu) log(mu), linkinv = function (eta) pmax(exp(eta), .Machine$double.eps), mu.eta = function (eta) pmax(exp(eta), .Machine$double.eps), valideta = function (eta) TRUE, name = 'log');list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]]);");
        check("TestrGenBuiltinlist_testlist11_606357090d4876929a9f1b147d4d012b");
    }

    @Test
    public void TestrGenBuiltinlist_testlist12_c9a9c06a59bcfbcc26056a024fa8f34b() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(2, numeric()))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist12_c9a9c06a59bcfbcc26056a024fa8f34b");
    }

    @Test
    public void TestrGenBuiltinlist_testlist13_e0df2faaf5e788dce11bc91c59bea571() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = 'undefined columns selected', call = quote(`[.data.frame`(dd, , 'x'))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist13_e0df2faaf5e788dce11bc91c59bea571");
    }

    @Test
    public void TestrGenBuiltinlist_testlist14_9d1e92da0bd42ea748d9dfddfdaec73b() {
        assertEval("argv <- list(error = function (e) -1);list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist14_9d1e92da0bd42ea748d9dfddfdaec73b");
    }

    @Test
    public void TestrGenBuiltinlist_testlist15_b3059bdb14bfb3e116caddd2d5b47397() {
        assertEval("argv <- list(error = function (e) warning(gettextf('%s namespace cannot be unloaded:\\n  ', sQuote(pkgname)), conditionMessage(e), call. = FALSE, domain = NA));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist15_b3059bdb14bfb3e116caddd2d5b47397");
    }

    @Test
    public void TestrGenBuiltinlist_testlist16_fcd9aa17d77c957c43e29af4028b0ba2() {
        assertEval("argv <- list(aa = structure(c('1', '2', '3'), class = 'AsIs'), ..dfd.row.names = structure(c('4', '5', '6', '7', '8', '9'), .Dim = c(3L, 2L), .Dimnames = list(NULL, c('a', 'b'))));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist16_fcd9aa17d77c957c43e29af4028b0ba2");
    }

    @Test
    public void TestrGenBuiltinlist_testlist18_9373dc5de31b96619dee3afffa3c1d99() {
        assertEval("argv <- list(date = structure(1065672000, class = c('POSIXct', 'POSIXt'), tzone = ''));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist18_9373dc5de31b96619dee3afffa3c1d99");
    }

    @Test
    public void TestrGenBuiltinlist_testlist19_29ed23ccf1ca95ee0a511ae40ef50e31() {
        assertEval("argv <- list(arguments = structure('object', simpleOnly = TRUE), generic = structure(function (object) standardGeneric('show'), generic = structure('show', package = 'methods'), package = 'methods', group = list(), valueClass = character(0), signature = structure('object', simpleOnly = TRUE), default = structure(function (object) showDefault(object, FALSE), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), generic = structure('show', package = 'methods'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (object) showDefault(object, FALSE))(object)), class = structure('standardGeneric', package = 'methods')));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist19_29ed23ccf1ca95ee0a511ae40ef50e31");
    }

    @Test
    public void TestrGenBuiltinlist_testlist20_ceb11b13da5bb4a3654ebbde24fbe656() {
        assertEval("argv <- list('Residuals vs Fitted', 'Normal Q-Q', 'Scale-Location', 'Cook's distance', 'Residuals vs Leverage', expression('Cook's dist vs Leverage  ' * h[ii]/(1 - h[ii])));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]]);");
        check("TestrGenBuiltinlist_testlist20_ceb11b13da5bb4a3654ebbde24fbe656");
    }

    @Test
    public void TestrGenBuiltinlist_testlist24_63693ede58a1f13ade4fef7fa41e43d4() {
        assertEval("argv <- list(structure(1:5, .Tsp = c(-1, 3, 1), class = 'ts'), structure(1:5, .Tsp = c(1, 5, 1), class = 'ts'));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist24_63693ede58a1f13ade4fef7fa41e43d4");
    }

    @Test
    public void TestrGenBuiltinlist_testlist25_4ecd613920cab7b38e6e0da43bbb3b69() {
        assertEval("argv <- list(structure(list(x = 1L, y = structure(1L, .Label = c('A', 'D', 'E'), class = 'factor'), z = 6), .Names = c('x', 'y', 'z'), row.names = 1L, class = 'data.frame'), structure(list(), .Names = character(0), row.names = 1L, class = 'data.frame'));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist25_4ecd613920cab7b38e6e0da43bbb3b69");
    }

    @Test
    public void TestrGenBuiltinlist_testlist27_07f5ff63af8a66f0ff454aec8a76e873() {
        assertEval("argv <- list(structure(c(24L, 13L, 15L, 68L, 39L, 74L, 22L, 1L, 8L, 55L, 24L, 20L, 51L, 13L, 3L, 4L, 5L, 6L, 15L, 2L, 8L, 60L, 67L, 23L, 58L, 24L, 22L, 21L, 37L, 74L, 59L, 39L, 14L, 14L, 19L, 23L, 70L, 21L, 22L, 31L, 29L, 30L, 45L, 58L, 17L, 7L, 19L, 26L, 39L, 74L, 57L, 59L, 12L, 72L, 70L, 37L, 64L, 16L, 18L, 21L, 22L, 8L, 62L, 61L, 63L, 71L, 105L, 64L, 10L, 41L, 8L, 27L, 11L, 34L, 32L, 33L, 68L, 107L, NA, 66L, NA, 65L, 48L, 52L, 43L, 47L, 46L, 44L, 41L, 54L, 28L, 50L, 40L, NA, 69L, NA, 75L, 109L, NA, 86L, 112L, 110L, 104L, 24L, 111L, 87L, NA, NA, 92L, 73L, 85L, 90L, 89L, NA, 83L, NA, 102L, NA, 108L, 88L, 91L, 93L, NA, 94L, 84L, NA, 106L, NA, 95L, 82L, 56L, 87L, 109L, 75L, 104L, 110L, 112L, 111L, 24L, 73L, 85L, 86L, 90L, 89L, 102L, 88L, 92L, 9L, 49L, 42L, 38L, 35L, 36L, 25L, NA, NA, 9L, 49L, 42L, NA, 36L, 38L, 25L, 53L, 79L, 78L, 103L, 77L, 80L, 114L, 97L, 113L, 76L, 96L, 81L, 116L, 99L, 117L, 115L, 98L, 101L, 100L), .Label = c('1008', '1011', '1013', '1014', '1015', '1016', '1027', '1028', '1030', '1032', '1051', '1052', '1083', '1093', '1095', '1096', '110', '1102', '111', '1117', '112', '113', '116', '117', '1219', '125', '1250', '1251', '126', '127', '128', '1291', '1292', '1293', '1298', '1299', '130', '1308', '135', '1376', '1377', '1383', '1408', '1409', '141', '1410', '1411', '1413', '1418', '1422', '1438', '1445', '1456', '1492', '2001', '2316', '262', '266', '269', '270', '2708', '2714', '2715', '272', '2728', '2734', '280', '283', '286', '290', '3501', '411', '412', '475', '5028', '5042', '5043', '5044', '5045', '5047', '5049', '5050', '5051', '5052', '5053', '5054', '5055', '5056', '5057', '5058', '5059', '5060', '5061', '5062', '5066', '5067', '5068', '5069', '5070', '5072', '5073', '5115', '5160', '5165', '655', '724', '885', '931', '942', '952', '955', '958', 'c118', 'c168', 'c203', 'c204', 'c266'), class = 'factor'));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist27_07f5ff63af8a66f0ff454aec8a76e873");
    }

    @Test
    public void TestrGenBuiltinlist_testlist29_34d4615e7ae4dcbb36f04e41af7ce028() {
        assertEval("argv <- list(assign = c(0L, 1L, 1L, 1L), qr = structure(list(qr = structure(c(-28.8270706107991, 0.273146306828071, 0.312206540911182, 0.247733407426682, 0.216636580341913, 0.0849718577324175, 0.298411357268471, 0.294351149612123, 0.247733407426682, 0.308328048219576, 0.125075187976724, 0.138758462627192, 0.190002850064127, 0.1835601922086, 0.232705016165824, 0.069379231313596, 0.120168353625222, 0.222121918799273, 0.190002850064127, 0.247733407426682, 0.0917800961043001, -10.2334366187554, 13.7940847818881, 0.190374922931528, 0.151060987411652, 0.132099001405849, -0.125761881229701, -0.441661211981173, -0.435651935890569, -0.366655739827817, -0.45633832676795, -0.185116476853374, 0.084611076858457, 0.115858488525451, 0.111929933764425, 0.141897089628727, 0.0423055384292285, 0.0732753420009814, 0.13544380924692, 0.115858488525451, 0.151060987411652, 0.0559649668822123, -4.26682272578616, -3.16543363464969, 9.7352069177467, 0.118607830555703, 0.10371953900067, 0.00616533725634264, 0.0216519528674631, 0.0213573547475655, 0.0179748924786157, 0.0223714822011986, 0.00907513071804667, -0.344446140042991, -0.471652301867824, -0.45565941330494, -0.577653737792655, -0.172223070021495, 0.0575332486360618, 0.106345765721762, 0.0909680534393656, 0.118607830555703, 0.0439417444752447, -4.89123580760852, -3.62866782508622, -3.32364207119197, 9.63649238427318, 0.135617489972887, 0.00806142768852949, 0.0283108036266689, 0.0279256046761512, 0.0235028985277947, 0.0292516173165799, 0.0118661002643811, 0.0254562434016423, 0.0348573968510539, 0.0336754446773372, 0.0426914180233895, 0.0127281217008212, -0.284250391934964, -0.525414891452651, -0.449439332155022, -0.585997195035538, -0.217099822893807), assign = c(0L, 1L, 1L, 1L), contrasts = structure(list(trt = 'contr.treatment'), .Names = 'trt'), .Dim = c(21L, 4L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21'), c('(Intercept)', 'trt2', 'trt3', 'trt4'))), qraux = c(1.21663658034191, 1.16655707135303, 1.14947576464323, 1.15508453302121), pivot = 1:4, tol = 1e-07, rank = 4L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 17L);list(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinlist_testlist29_34d4615e7ae4dcbb36f04e41af7ce028");
    }

    @Test
    public void TestrGenBuiltinlist_testlist3_8edad12272a87d59515743661ee54343() {
        assertEval("argv <- list(x = c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), y = c(3.69420518444359e+25, 2.30887824027777e+24, 1.44304890017492e+23, 9.01905562612606e+21, 5.63690976641081e+20, 35230686042118275072, 2201917878145066496, 137619867512235136, 8601241751556820, 537577617482832, 33598603095309.8, 2099913194115.17, 131244699796.888, 8202825028.58974, 512684387.219832, 32044730.0464007, 2003284.70114408, 125327.674230857, 7863.68742857025, 499.272560819512, 33.2784230289721, 2.7659432263306, 0.488936768533843, -0.282943224311172, 7.32218543045282e-05, -0.00636442868227041, -0.0483709204009262, -0.0704795507649514, 0.0349437746169591, -0.0264830837608839, 0.0200901469411759), xlab = NULL, ylab = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
        check("TestrGenBuiltinlist_testlist3_8edad12272a87d59515743661ee54343");
    }

    @Test
    public void TestrGenBuiltinlist_testlist30_f4754177d06cebd5d79b82e41866666d() {
        assertEval("argv <- list(function (x, i, j, ...) x@aa[[i]]);list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist30_f4754177d06cebd5d79b82e41866666d");
    }

    @Test
    public void TestrGenBuiltinlist_testlist32_4d167ac0dfe64bfcdcc76a228afa547a() {
        assertEval("argv <- list(structure(function (e1, e2) standardGeneric('Ops'), generic = structure('Ops', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = c('e1', 'e2'), default = quote(`\\001NULL\\001`), skeleton = quote((function (e1, e2) stop('invalid call in method dispatch to 'Ops' (no default method)', domain = NA))(e1, e2)), groupMembers = list('Arith', 'Compare', 'Logic'), class = structure('groupGenericFunction', package = 'methods')));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist32_4d167ac0dfe64bfcdcc76a228afa547a");
    }

    @Test
    public void TestrGenBuiltinlist_testlist33_406d36e77264830713bc65f7f714ff95() {
        assertEval("argv <- list(tables = structure(list(`Grand mean` = 103.87323943662, N = structure(c(78.7365206866197, 98.5088731171753, 113.842206450509, 123.008873117175), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'), class = 'mtable'), `V:N` = structure(c(79.5323303457107, 86.1989970123773, 69.7732394366197, 98.0323303457106, 108.032330345711, 89.1989970123773, 114.198997012377, 116.698997012377, 110.365663679044, 124.365663679044, 126.365663679044, 118.032330345711), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')), class = 'mtable')), .Names = c('Grand mean', 'N', 'V:N')), n = structure(list(N = structure(c(17, 18, 18, 18), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N')), `V:N` = structure(c(6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6), .Dim = 3:4, .Dimnames = structure(list(V = c('Golden.rain', 'Marvellous', 'Victory'), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N')))), .Names = c('N', 'V:N')));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist33_406d36e77264830713bc65f7f714ff95");
    }

    @Test
    public void TestrGenBuiltinlist_testlist35_50462cb2c743764a9dafd135bfb1acec() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = 'more columns than column names', call = quote(read.table('foo6', header = TRUE))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist35_50462cb2c743764a9dafd135bfb1acec");
    }

    @Test
    public void TestrGenBuiltinlist_testlist39_6b37a56e317d3893c6da994c28fc51cb() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils', '/home/lzhao/hg/r-instrumented/library/utils/R/utils'), frow = c(6889L, 6893L, 6897L, 6901L, 6902L, 6903L, 6903L, 6917L, 6918L, 6919L, 6919L, 6927L, 6928L), lrow = c(6889L, 6893L, 6900L, 6901L, 6902L, 6903L, 6903L, 6917L, 6918L, 6919L, 6919L, 6927L, 6928L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 13L), class = 'data.frame'), structure(list(    srcfile = '/home/lzhao/hg/r-instrumented/library/utils/R/utils', frow = 6928L, lrow = 6928L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist39_6b37a56e317d3893c6da994c28fc51cb");
    }

    @Test
    public void TestrGenBuiltinlist_testlist4_d9d0349db6a6cf11ebfa764878f9793a() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = 'line 1 did not have 4 elements', call = quote(scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings, flush, fill, strip.white, quiet, blank.lines.skip, multi.line, comment.char, allowEscapes, encoding))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist4_d9d0349db6a6cf11ebfa764878f9793a");
    }

    @Test
    public void TestrGenBuiltinlist_testlist41_c5b0b665bdce6d19b95fd76a087b6953() {
        assertEval("argv <- list(properties = structure(list(.Data = 'numeric', comment = 'character'), .Names = c('.Data', 'comment')), prototype = structure(3.14159265358979, comment = 'Start with pi'));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist41_c5b0b665bdce6d19b95fd76a087b6953");
    }

    @Test
    public void TestrGenBuiltinlist_testlist43_b64ca362409030a667ca156deb17fb99() {
        assertEval("argv <- list(raster = structure('#000000', .Dim = c(1L, 1L), class = 'raster'), x = structure(0, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = NULL, height = NULL, just = 'centre', hjust = NULL, vjust = NULL, interpolate = TRUE, name = NULL, gp = structure(list(), class = 'gpar'), vp = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]],argv[[8]],argv[[9]],argv[[10]],argv[[11]],argv[[12]]);");
        check("TestrGenBuiltinlist_testlist43_b64ca362409030a667ca156deb17fb99");
    }

    @Test
    public void TestrGenBuiltinlist_testlist44_4a5d7768a000d47fabc9464a9ef26fb7() {
        assertEval("argv <- list(trace = 0, fnscale = 1, parscale = 1, ndeps = 0.001, maxit = 100L, abstol = -Inf, reltol = 1.49011611938477e-08, alpha = 1, beta = 0.5, gamma = 2, REPORT = 10, type = 1, lmm = 5, factr = 1e+07, pgtol = 0, tmax = 10, temp = 10);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]],argv[[8]],argv[[9]],argv[[10]],argv[[11]],argv[[12]],argv[[13]],argv[[14]],argv[[15]],argv[[16]],argv[[17]]);");
        check("TestrGenBuiltinlist_testlist44_4a5d7768a000d47fabc9464a9ef26fb7");
    }

    @Test
    public void TestrGenBuiltinlist_testlist45_72dab5449d87d4d567bf6a84441b8a5b() {
        assertEval("argv <- list(error = function (...) {});list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist45_72dab5449d87d4d567bf6a84441b8a5b");
    }

    @Test
    public void TestrGenBuiltinlist_testlist46_f1d3dc269e74b9cc9dc41830ba680647() {
        assertEval("argv <- list(structure(list(srcfile = c(NA, '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R'), frow = c(NA, 832L, 833L, 834L, 842L, 845L, 845L, 849L, 858L, 860L, 862L, 863L), lrow = c(NA, 832L, 833L, 834L, 842L, 846L, 846L, 851L, 859L, 860L, 862L, 863L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, 12L), class = 'data.frame'), structure(list(    srcfile = '/home/lzhao/tmp/RtmptukZK0/R.INSTALL2ccc3a5cba55/nlme/R/lmList.R', frow = 863L, lrow = 863L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist46_f1d3dc269e74b9cc9dc41830ba680647");
    }

    @Test
    public void TestrGenBuiltinlist_testlist48_26d67bf37ae3bc21b10c95570f25244b() {
        assertEval("argv <- list(structure(list(Month = c(5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L)), .Names = 'Month', class = 'data.frame', row.names = c(1L, 2L, 3L, 4L, 6L, 7L, 8L, 9L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 28L, 29L, 30L, 31L, 38L, 40L, 41L, 44L, 47L, 48L, 49L, 50L, 51L, 62L, 63L, 64L, 66L, 67L, 68L, 69L, 70L, 71L, 73L, 74L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L, 104L, 105L, 106L, 108L, 109L, 110L, 111L, 112L, 113L, 114L, 116L, 117L, 118L, 120L, 121L, 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L, 132L, 133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L, 144L, 145L, 146L, 147L, 148L, 149L, 151L, 152L, 153L)));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist48_26d67bf37ae3bc21b10c95570f25244b");
    }

    @Test
    public void TestrGenBuiltinlist_testlist5_6fca78e57d388cc155e7fb56357c6e5d() {
        assertEval("argv <- list(structure(list(Hair = structure(c(1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L, 1L, 2L, 3L, 4L), .Label = c('Black', 'Brown', 'Red', 'Blond'), class = 'factor'), Eye = structure(c(1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L), .Label = c('Brown', 'Blue', 'Hazel', 'Green'), class = 'factor'), Sex = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Male', 'Female'), class = 'factor')), .Names = c('Hair', 'Eye', 'Sex'), out.attrs = structure(list(dim = structure(c(4L, 4L, 2L), .Names = c('Hair', 'Eye', 'Sex')), dimnames = structure(list(Hair = c('Hair=Black', 'Hair=Brown', 'Hair=Red', 'Hair=Blond'), Eye = c('Eye=Brown', 'Eye=Blue', 'Eye=Hazel', 'Eye=Green'), Sex = c('Sex=Male', 'Sex=Female')), .Names = c('Hair', 'Eye', 'Sex'))), .Names = c('dim', 'dimnames')), class = 'data.frame', row.names = c(NA, -32L)), Fr = c(32, 53, 10, 3, 11, 50, 10, 30, 10, 25, 7, 5, 3, 15, 7, 8, 36, 66, 16, 4, 9, 34, 7, 64, 5, 29, 7, 5, 2, 14, 7, 8));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist5_6fca78e57d388cc155e7fb56357c6e5d");
    }

    @Test
    public void TestrGenBuiltinlist_testlist52_6835c28230d6b56ec666e683fbbebf58() {
        assertEval("argv <- list(structure(1386392034.50546, class = c('POSIXct', 'POSIXt')));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist52_6835c28230d6b56ec666e683fbbebf58");
    }

    @Test
    public void TestrGenBuiltinlist_testlist53_eb76241f6d6432c150f4fb4dbcca24e9() {
        assertEval("argv <- list(structure(list(sec = 54.5054557323456, min = 53L, hour = 23L, mday = 6L, mon = 11L, year = 113L, wday = 5L, yday = 339L, isdst = 0L), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist53_eb76241f6d6432c150f4fb4dbcca24e9");
    }

    @Test
    public void TestrGenBuiltinlist_testlist54_84ecc4e1bb9ddeae41aea8fd438ee141() {
        assertEval("argv <- list(values = c(0.266917355843816, 0.00557315714782281, 0.00229578896250102, 0.000615239459643172, 8.19421206363694e-05), vectors = structure(c(-0.452472222108953, -0.386550651250976, -0.453293999783174, -0.439775552409852, -0.496960255453506, -0.157430201026812, 0.910628681750865, -0.204120426456847, -0.072367418669335, -0.314752194584169, 0.437863914035591, 0.0975567326834968, -0.370843683888789, -0.67178336056532, 0.458192050652246, 0.752103796361061, -0.0893037594956476, 0.0198033027727173, 0.0214021063919376, -0.652314722415877, 0.114453887261006, -0.0619800003080987, -0.784182499538679, 0.591277842073673, 0.136040832629847), .Dim = c(5L, 5L)));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist54_84ecc4e1bb9ddeae41aea8fd438ee141");
    }

    @Test
    public void TestrGenBuiltinlist_testlist55_597ad833137e56c8f697416c3a92b072() {
        assertEval("argv <- list(object = c(0, 0, 0, 0, 0, 1.75368801162502e-134, 0, 0, 0, 2.60477585273833e-251, 1.16485035372295e-260, 0, 1.53160350210786e-322, 0.333331382328728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.44161262707711e-123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.968811545398e-173, 0, 8.2359965384697e-150, 0, 0, 0, 0, 6.51733217171341e-10, 0, 2.36840184577368e-67, 0, 9.4348408357524e-307, 0, 1.59959906013771e-89, 0, 8.73836857865034e-286, 7.09716190970992e-54, 0, 0, 0, 1.530425353017e-274, 8.57590058044551e-14, 0.333333106397154, 0, 0, 1.36895217898448e-199, 2.0226102635783e-177, 5.50445388209462e-42, 0, 0, 0, 0, 1.07846402051283e-44, 1.88605464411243e-186, 1.09156111051203e-26, 0, 3.0702877273237e-124, 0.333333209689785, 0, 0, 0, 0, 0, 0, 3.09816093866831e-94, 0, 0, 4.7522727332095e-272, 0, 0, 2.30093251441394e-06, 0, 0, 1.27082826644707e-274, 0, 0, 0, 0, 0, 0, 0, 4.5662025456054e-65, 0, 2.77995853978268e-149, 0, 0, 0));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist55_597ad833137e56c8f697416c3a92b072");
    }

    @Test
    public void TestrGenBuiltinlist_testlist57_abfd321152229b78af86a9b83cb8c3cd() {
        assertEval("argv <- list(structure(list(srcfile = c('/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R'), frow = 164:165, lrow = c(164L, 169L)), .Names = c('srcfile', 'frow', 'lrow'), row.names = 1:2, class = 'data.frame'), structure(list(srcfile = '/home/lzhao/tmp/Rtmpe5iuYI/R.INSTALL2aa854a74188/foreign/R/spss.R', frow = 170L, lrow = 177L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L), class = 'data.frame'));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist57_abfd321152229b78af86a9b83cb8c3cd");
    }

    @Test
    public void TestrGenBuiltinlist_testlist58_6661234bd12ddd632ed34fb8e88598e7() {
        assertEval("argv <- list(structure(FALSE, .Names = 'Series 1', .Tsp = c(0, 0, 1), class = 'ts'), structure(FALSE, .Names = 'Series 1', .Tsp = c(1, 1, 1), class = 'ts'));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist58_6661234bd12ddd632ed34fb8e88598e7");
    }

    @Test
    public void TestrGenBuiltinlist_testlist59_ad6b0a2f60cb8fbea8659597bc59e579() {
        assertEval("argv <- list(structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts'), structure(FALSE, .Tsp = c(1, 1, 1), class = 'ts'));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist59_ad6b0a2f60cb8fbea8659597bc59e579");
    }

    @Test
    public void TestrGenBuiltinlist_testlist6_93b61fc100f555c4e5c217b8c362ccf7() {
        assertEval("argv <- list(deviance.resid = structure(c(0.979005810350303, 0.190415231217834, -0.262041786489909, -1.18856115310823, -0.0713326116251696, 0.258231444611709, 0.637403312181204, -1.72855514890285, -0.632723785156881, -0.819071604478243, 2.23780874325045, -0.472376375886729), .Names = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')), coefficients = structure(c(0.291009862544455, -0.575062166945441, 0.0881289026086606, 0.127412648101879, 3.30209334202984, -4.5133836829576, 0.00095966129066828, 6.38014475989249e-06), .Dim = c(2L, 4L), .Dimnames = list(c('(Intercept)', 'M.userY'), c('Estimate', 'Std. Error', 'z value', 'Pr(>|z|)'))), aliased = structure(c(FALSE, FALSE), .Names = c('(Intercept)', 'M.userY')), dispersion = 1, df = c(2L, 10L, 2L), cov.unscaled = structure(c(0.00776670347500679, -0.00776670347500679, -0.00776670347500679, 0.0162339828963334), .Dim = c(2L, 2L), .Dimnames = list(c('(Intercept)', 'M.userY'), c('(Intercept)', 'M.userY'))), cov.scaled = structure(c(0.00776670347500679, -0.00776670347500679, -0.00776670347500679, 0.0162339828963334), .Dim = c(2L, 2L), .Dimnames = list(c('(Intercept)', 'M.userY'), c('(Intercept)', 'M.userY'))));list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]]);");
        check("TestrGenBuiltinlist_testlist6_93b61fc100f555c4e5c217b8c362ccf7");
    }

    @Test
    public void TestrGenBuiltinlist_testlist61_deed697ac277f9b718644ae227607a84() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(12L, 1L), .Dimnames = structure(list(`  p L s` = c('. . .', '| . .', '. | .', '| | .', '. . |', '| . |', '. | |', '| | |', '. . ?', '| . ?', '. | ?', '| | ?'), NULL), .Names = c('  p L s', ''))));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist61_deed697ac277f9b718644ae227607a84");
    }

    @Test
    public void TestrGenBuiltinlist_testlist62_89e0f10f5d47b77f291683f2cfefcbc3() {
        assertEval("argv <- list(values = c(-2572.90550008339+0i, -915.064609071159+0i, -456.632018115023+0i, 419.980933101553+0i, -366.745362912885+0i, -308.301779528581+0i, -258.104614655539+0i, -208.43876984087+0i, -174.152165416129+0i, 166.131403923756+0i, -153.932564395224+31.248756965275i, -153.932564395224-31.248756965275i, -145.261798316303+0i, -140.969649074553+0i, -109.026224585292+37.27313202252i, -109.026224585292-37.27313202252i, -95.4200045428049+0i, -94.2845517186135+0i, 93.6287479850051+0i, -83.7083948970612+39.7221174209657i, -83.7083948970612-39.7221174209657i, -89.7405335285911+14.6972603541884i, -89.7405335285911-14.6972603541884i, -90.4677652619726+0i, 80.9227484547009+0i, -79.2808369338756+0i, -67.7641499054793+34.4882180369511i, -67.7641499054793-34.4882180369511i, -74.7131802385517+0i, -72.7892236613541+0i, -70.8748882290923+0i, -65.326216345093+24.6325729497989i, -65.326216345093-24.6325729497989i, -65.6613463045206+12.2012477360608i, -65.6613463045206-12.2012477360608i, -64.009437139127+0i, -53.8555784147338+28.3814233344012i, -53.8555784147338-28.3814233344012i, -60.372612826631+0i, -55.598407412763+0i, -53.8337490558365+13.1765372798343i, -53.8337490558365-13.1765372798343i, -48.7010835501729+24.5244827641945i, -48.7010835501729-24.5244827641945i, -51.620171425175+0i, -49.1047272072286+7.0804434036442i, -49.1047272072286-7.0804434036442i, -44.0755122578262+21.8965512206582i, -44.0755122578262-21.8965512206582i, -47.6686025497685+0i, -47.0350049752776+0i, 43.2054741656531+0i, -42.0546965543942+0i, -41.4311176038551+0i, -36.4574226401686+16.1634950480082i, -36.4574226401686-16.1634950480082i, -39.2901755793811+0i, -36.5376333751307+11.2152902727145i, -36.5376333751307-11.2152902727145i, -38.0398197891428+0i, -32.9946255929378+12.9867445602001i, -32.9946255929378-12.9867445602001i, -34.7321001383969+0i, -32.0667502593492+12.342590095597i, -32.0667502593492-12.342590095597i, -27.2830437098322+11.6992356475951i, -27.2830437098322-11.6992356475951i, -29.1247671355682+2.0847233845627i, -29.1247671355682-2.0847233845627i, -28.1216021055426+0i, -27.0745572919711+0i, 26.1565478253913+0i, -23.4210302095847+1.8723763695687i, -23.4210302095847-1.8723763695687i, 20.782836979896+0i, 16.5058357149619+0i, -15.9316203363047+0i, 13.2377600042936+0i, -11.9119569568831+0i, -11.1832867499603+0i, 8.99100195370794+0i, 7.62805946796798+0i, -7.44159556589097+0i, -6.46699019595805+0i, 5.57838460483725+0i, 5.07382264677001+0i, -4.77172378340461+0i, 4.21976444063592+0i, -2.86123099075901+0i, -2.69814683135512+0i, -2.29820560404041+0i, 2.05951624519943+0i, -1.8306332549612+0i, 1.66021670517454+0i, 1.03505989993491+0i, -0.773887754953459+0i, -0.416100454072758+0i, 0.213086170361661+0i, -3.42336062193255e-06+0i, 3.42336057523814e-06+0i), vectors = NULL);list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist62_89e0f10f5d47b77f291683f2cfefcbc3");
    }

    @Test
    public void TestrGenBuiltinlist_testlist64_776b21324b07dad034b97f2090e8bb61() {
        assertEval("argv <- list(fit = structure(numeric(0), .Dim = c(10L, 0L), constant = 0), se.fit = structure(numeric(0), .Dim = c(10L, 0L)), df = 10L, residual.scale = 0.523484262069588);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
        check("TestrGenBuiltinlist_testlist64_776b21324b07dad034b97f2090e8bb61");
    }

    @Test
    public void TestrGenBuiltinlist_testlist65_9d360c20fd362699811b32986b23c4e6() {
        assertEval("argv <- list(ANY = structure(function (x, y = NULL) .Internal(crossprod(x, y)), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = structure('crossprod', package = 'base'), class = structure('derivedDefaultMethod', package = 'methods')));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist65_9d360c20fd362699811b32986b23c4e6");
    }

    @Test
    public void TestrGenBuiltinlist_testlist7_a7db077994e64d0c603e8f245c1891b2() {
        assertEval("argv <- list(class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition')));list(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinlist_testlist7_a7db077994e64d0c603e8f245c1891b2");
    }

    @Test
    public void TestrGenBuiltinlist_testlist8_762414fc367763cc9598767d3fd83093() {
        assertEval("argv <- list(upper = quote(~M.user * Temp * Soft));list(argv[[1]]);");
        check("TestrGenBuiltinlist_testlist8_762414fc367763cc9598767d3fd83093");
    }

    @Test
    public void TestrGenBuiltinlist_testlist9_28502366b65077f736dbe37796188c4d() {
        assertEval("argv <- list(label = '', x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = 'centre', hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = NULL, gp = structure(list(), class = 'gpar'), vp = NULL);list(argv[[1]],argv[[2]],argv[[3]],argv[[4]],argv[[5]],argv[[6]],argv[[7]],argv[[8]],argv[[9]],argv[[10]],argv[[11]]);");
        check("TestrGenBuiltinlist_testlist9_28502366b65077f736dbe37796188c4d");
    }

    @Test
    public void TestrGenBuiltinlistdirs_testlistdirs1_507c79e25c5ba58e0585049412e0c824() {
        assertEval("argv <- list('/home/lzhao/hg/r-instrumented/library/rpart/doc', TRUE, FALSE); .Internal(list.dirs(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinlistdirs_testlistdirs1_507c79e25c5ba58e0585049412e0c824");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog104_59f55d661983699bc555ecc87c9868cb() {
        assertEval("argv <- list(c(0.0654707112145738, 0.999999999999999));log10(argv[[1]]);");
        check("TestrGenBuiltinlog10_testlog104_59f55d661983699bc555ecc87c9868cb");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog105_e6ea277d55371da6a195368c6435e823() {
        assertEval("argv <- list(structure(c(160.1, 129.7, 84.8, 120.1, 160.1, 124.9, 84.8, 116.9, 169.7, 140.9, 89.7, 123.3, 187.3, 144.1, 92.9, 120.1, 176.1, 147.3, 89.7, 123.3, 185.7, 155.3, 99.3, 131.3, 200.1, 161.7, 102.5, 136.1, 204.9, 176.1, 112.1, 140.9, 227.3, 195.3, 115.3, 142.5, 244.9, 214.5, 118.5, 153.7, 244.9, 216.1, 188.9, 142.5, 301, 196.9, 136.1, 267.3, 317, 230.5, 152.1, 336.2, 371.4, 240.1, 158.5, 355.4, 449.9, 286.6, 179.3, 403.4, 491.5, 321.8, 177.7, 409.8, 593.9, 329.8, 176.1, 483.5, 584.3, 395.4, 187.3, 485.1, 669.2, 421, 216.1, 509.1, 827.7, 467.5, 209.7, 542.7, 840.5, 414.6, 217.7, 670.8, 848.5, 437, 209.7, 701.2, 925.3, 443.4, 214.5, 683.6, 917.3, 515.5, 224.1, 694.8, 989.4, 477.1, 233.7, 730, 1087, 534.7, 281.8, 787.6, 1163.9, 613.1, 347.4, 782.8), .Tsp = c(1960, 1986.75, 4), class = 'ts'));log10(argv[[1]]);");
        check("TestrGenBuiltinlog10_testlog105_e6ea277d55371da6a195368c6435e823");
    }

    @Test
    public void TestrGenBuiltinlog10_testlog107_503c096025a4b93a75b0148ebd7255ba() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(20L, 0L), .Dimnames = list(c('ant', 'bee', 'cat', 'cpl', 'chi', 'cow', 'duc', 'eag', 'ele', 'fly', 'fro', 'her', 'lio', 'liz', 'lob', 'man', 'rab', 'sal', 'spi', 'wha'), NULL)));log10(argv[[1]]);");
        check("TestrGenBuiltinlog10_testlog107_503c096025a4b93a75b0148ebd7255ba");
    }

    @Test
    public void TestrGenBuiltinlog1p_testlog1p1_c023c918bddc95b0e1cfd60af87a9763() {
        assertEval("argv <- list(c(-0.160475096572577, -0.953101214495634, -0.329547420118877, -0.234819677566528, -0.108178529791777, -0.0994458210555148, -0.282992873965743, -0.731707656126625, -0.866467764292465, -0.76039953639421, -0.3580569675068, -0.52382260076554, -0.240530699925064, -0.236619747356161, -0.811827419307205, -0.154911720192001, -0.97472580847241, -0.464016625026599, -0.58493655376716, -0.230096919024049));log1p(argv[[1]]);");
        check("TestrGenBuiltinlog1p_testlog1p1_c023c918bddc95b0e1cfd60af87a9763");
    }

    @Test
    public void TestrGenBuiltinlog1p_testlog1p2_81b25cc10d353414f1f37782c032d890() {
        assertEval("argv <- list(-7e-04);log1p(argv[[1]]);");
        check("TestrGenBuiltinlog1p_testlog1p2_81b25cc10d353414f1f37782c032d890");
    }

    @Test
    public void TestrGenBuiltinlog2_testlog22_43b705a6a4c410cceffa89c5116e2edd() {
        assertEval("argv <- list(FALSE);log2(argv[[1]]);");
        check("TestrGenBuiltinlog2_testlog22_43b705a6a4c410cceffa89c5116e2edd");
    }

    @Test
    public void TestrGenBuiltinmapply_testmapply1_4c9b17d42aa71ef6fbf0ca38186bc614() {
        assertEval("argv <- list(.Primitive('c'), list(list(), list(), list()), NULL); .Internal(mapply(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinmapply_testmapply1_4c9b17d42aa71ef6fbf0ca38186bc614");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch11_ad5a24d20daaf4db398e63fff34a57d2() {
        assertEval("argv <- list('g', 'l', NA_character_, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmatch_testmatch11_ad5a24d20daaf4db398e63fff34a57d2");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch14_7c330871ec8b196a483f4903400f3702() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmatch_testmatch14_7c330871ec8b196a483f4903400f3702");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch19_a89b2507cc4a06ba1f61c1d516284135() {
        assertEval("argv <- list(structure(list(col = 1, cellvp = structure(list(structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = c(1L, 1L), layout.pos.col = c(1L, 1L), valid.just = c(0.5, 0.5), valid.pos.row = c(1L, 1L), valid.pos.col = c(1L, 1L), name = 'GRID.VP.8'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport'), structure(list(x = structure(1, unit = 'lines', valid.unit = 3L, data = list(NULL), class = 'unit'), y = structure(1, unit = 'lines', valid.unit = 3L, data = list(    NULL), class = 'unit'), width = structure(list(fname = '-', arg1 = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), arg2 = structure(list(fname = 'sum', arg1 = structure(c(1, 1), unit = c('lines', 'lines'), valid.unit = c(3L, 3L), data = list(NULL, NULL), class = 'unit'), arg2 = NULL), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit'))), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit')), height = structure(list(fname = '-', arg1 = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'),     arg2 = structure(list(fname = 'sum', arg1 = structure(c(1, 1), unit = c('lines', 'lines'), valid.unit = c(3L, 3L), data = list(NULL, NULL), class = 'unit'), arg2 = NULL), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit'))), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit')), justification = c('left', 'bottom'), gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL,     layout.pos.col = NULL, valid.just = c(0, 0), valid.pos.row = NULL, valid.pos.col = NULL, name = 'GRID.VP.9'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport')), class = c('vpStack', 'viewport'))), .Names = c('col', 'cellvp')), c('children', 'childrenOrder'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmatch_testmatch19_a89b2507cc4a06ba1f61c1d516284135");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch22_6ea69490e3c0b9d94d2f4df21d5ce4ef() {
        assertEval("argv <- list(c(NA, NA, 3, 4, 5), c(NA, NA, 4, 5), 0L, NA); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmatch_testmatch22_6ea69490e3c0b9d94d2f4df21d5ce4ef");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch24_2e0690ab98bb8e121fd4f5fa1fab0cf2() {
        assertEval("argv <- list(structure(list(framevp = structure(list(x = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), width = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), height = structure(1, unit = 'npc', valid.unit = 0L, class = 'unit'), justification = 'centre', gp = structure(list(), class = 'gpar'), clip = FALSE, xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = structure(list(nrow = 1L, ncol = 1L, widths = structure(list(    fname = 'sum', arg1 = structure(c(1, 1, 1), unit = c('lines', 'lines', 'lines'), valid.unit = c(3L, 3L, 3L), data = list(NULL, NULL, NULL), class = 'unit'), arg2 = NULL), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit')), heights = structure(list(fname = 'sum', arg1 = structure(c(1, 1, 1), unit = c('lines', 'lines', 'lines'), valid.unit = c(3L, 3L, 3L), data = list(NULL, NULL, NULL), class = 'unit'), arg2 = NULL), .Names = c('fname', 'arg1', 'arg2'), class = c('unit.arithmetic', 'unit')), respect = FALSE, valid.respect = 0L, respect.mat = structure(0L, .Dim = c(1L, 1L)), just = 'centre', valid.just = c(0.5, 0.5)), .Names = c('nrow', 'ncol', 'widths', 'heights', 'respect', 'valid.respect', 'respect.mat', 'just', 'valid.just'), class = 'layout'), layout.pos.row = NULL, layout.pos.col = NULL, valid.just = c(0.5, 0.5), valid.pos.row = NULL, valid.pos.col = NULL, name = 'GRID.VP.33'), .Names = c('x', 'y', 'width', 'height', 'justification', 'gp', 'clip', 'xscale', 'yscale', 'angle', 'layout', 'layout.pos.row', 'layout.pos.col', 'valid.just', 'valid.pos.row', 'valid.pos.col', 'name'), class = 'viewport')), .Names = 'framevp'), c('children', 'childrenOrder'), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmatch_testmatch24_2e0690ab98bb8e121fd4f5fa1fab0cf2");
    }

    @Test
    public void TestrGenBuiltinmatch_testmatch25_6678ace6d7395396f5a017a6ae4c25da() {
        assertEval("argv <- list(' *** Run successfully completed ***', c('', '> ### R code from vignette source 'Design-issues.Rnw'', '> ', '> ###################################################', '> ### code chunk number 1: preliminarie .... [TRUNCATED] ', '', '> ###################################################', '> ### code chunk number 2: diag-class', '> ###################################################', '> li .... [TRUNCATED] ', 'Loading required package: lattice', '', 'Attaching package: ‘Matrix’', '', 'The following object is masked from ‘package:base’:', '', '    det', '', '', '> (D4 <- Diagonal(4, 10*(1:4)))', '4 x 4 diagonal matrix of class \\'ddiMatrix\\'', '     [,1] [,2] [,3] [,4]', '[1,]   10    .    .    .', '[2,]    .   20    .    .', '[3,]    .    .   30    .', '[4,]    .    .    .   40', '', '> str(D4)', 'Formal class 'ddiMatrix' [package \\'Matrix\\'] with 4 slots', '  ..@ diag    : chr \\'N\\'', '  ..@ Dim     : int [1:2] 4 4', '  ..@ Dimnames:List of 2', '  .. ..$ : NULL', '  .. ..$ : NULL', '  ..@ x       : num [1:4] 10 20 30 40', '', '> diag(D4)', '[1] 10 20 30 40', '', '> ###################################################', '> ### code chunk number 3: diag-2', '> ###################################################', '> diag(D .... [TRUNCATED] ', '', '> D4', '4 x 4 diagonal matrix of class \\'ddiMatrix\\'', '     [,1] [,2] [,3] [,4]', '[1,]   11    .    .    .', '[2,]    .   22    .    .', '[3,]    .    .   33    .', '[4,]    .    .    .   44', '', '> ###################################################', '> ### code chunk number 4: unit-diag', '> ###################################################', '> str .... [TRUNCATED] ', 'Formal class 'ddiMatrix' [package \\'Matrix\\'] with 4 slots', '  ..@ diag    : chr \\'U\\'', '  ..@ Dim     : int [1:2] 3 3', '  ..@ Dimnames:List of 2', '  .. ..$ : NULL', '  .. ..$ : NULL', '  ..@ x       : num(0) ', '', '> getClass(\\'diagonalMatrix\\') ## extending \\'denseMatrix\\'', 'Virtual Class \\'diagonalMatrix\\' [package \\'Matrix\\']', '', 'Slots:', '                                    ', 'Name:       diag       Dim  Dimnames', 'Class: character   integer      list', '', 'Extends: ', 'Class \\'sparseMatrix\\', directly', 'Class \\'Matrix\\', by class \\'sparseMatrix\\', distance 2', 'Class \\'mMatrix\\', by class \\'Matrix\\', distance 3', '', 'Known Subclasses: \\'ddiMatrix\\', \\'ldiMatrix\\'', '', '> ###################################################', '> ### code chunk number 5: Matrix-ex', '> ###################################################', '> (M  .... [TRUNCATED] ', '4 x 4 sparse Matrix of class \\'dgTMatrix\\'', '            ', '[1,] . . 4 .', '[2,] . 1 . .', '[3,] 4 . . .', '[4,] . . . 8', '', '> m <- as(M, \\'matrix\\')', '', '> (M. <- Matrix(m)) # dsCMatrix (i.e. *symmetric*)', '4 x 4 sparse Matrix of class \\'dsCMatrix\\'', '            ', '[1,] . . 4 .', '[2,] . 1 . .', '[3,] 4 . . .', '[4,] . . . 8', '', '> ###################################################', '> ### code chunk number 6: sessionInfo', '> ###################################################', '> t .... [TRUNCATED] ', '\\\\begin{itemize}\\\\raggedright', '  \\\\item R version 3.0.1 (2013-05-16), \\\\verb|x86_64-unknown-linux-gnu|', '  \\\\item Locale: \\\\verb|LC_CTYPE=en_US.UTF-8|, \\\\verb|LC_NUMERIC=C|, \\\\verb|LC_TIME=en_US.UTF-8|, \\\\verb|LC_COLLATE=C|, \\\\verb|LC_MONETARY=en_US.UTF-8|, \\\\verb|LC_MESSAGES=en_US.UTF-8|, \\\\verb|LC_PAPER=C|, \\\\verb|LC_NAME=C|, \\\\verb|LC_ADDRESS=C|, \\\\verb|LC_TELEPHONE=C|, \\\\verb|LC_MEASUREMENT=en_US.UTF-8|, \\\\verb|LC_IDENTIFICATION=C|', '  \\\\item Base packages: base, datasets, grDevices, graphics,', '    methods, stats, utils', '  \\\\item Other packages: Matrix~1.0-12, lattice~0.20-15', '  \\\\item Loaded via a namespace (and not attached): grid~3.0.1,', '    tools~3.0.1', '\\\\end{itemize}', '', ' *** Run successfully completed ***', '> proc.time()', '   user  system elapsed ', '157.417   4.183 161.773 '), 0L, NULL); .Internal(match(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmatch_testmatch25_6678ace6d7395396f5a017a6ae4c25da");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix13_5bc9087ec092f4378bfbcdc1f03fd169() {
        assertEval("argv <- list(c(0, 0, 0, 0), 4L, 0L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix13_5bc9087ec092f4378bfbcdc1f03fd169");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix23_99a98909f36d6952fbe497c259b0467d() {
        assertEval("argv <- list(character(0), 0L, 17L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix23_99a98909f36d6952fbe497c259b0467d");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix24_593fcf38d2384a24b7ece626a1275db0() {
        assertEval("argv <- list(c(TRUE, FALSE, FALSE, TRUE), 2L, 2L, TRUE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix24_593fcf38d2384a24b7ece626a1275db0");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix25_02c656525f8d9af8a83980a72d34fb51() {
        assertEval("argv <- list(c(0.342020143325669, 0, -0.939692620785908, 0, 1, 0, 0.939692620785908, 0, 0.342020143325669), 3, 3, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix25_02c656525f8d9af8a83980a72d34fb51");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix28_41e0446a1e0ca65f255d4d46f04b6f03() {
        assertEval("argv <- list(NA_complex_, 5L, 1L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix28_41e0446a1e0ca65f255d4d46f04b6f03");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix29_eb80b03f9fa1526f108b3e3ab317fd08() {
        assertEval("argv <- list(NA_character_, 4L, 17L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix29_eb80b03f9fa1526f108b3e3ab317fd08");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix30_a92ef267a111bca7ffc2045040cd4c2f() {
        assertEval("argv <- list(c(2.8421709430404e-14, 0, 0, 0, 0, 0, 0, -4.44089209850063e-16, 0, 0, 0, 0, 0, 0, 4.44089209850063e-16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.105427357601e-15), 6L, 6L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix30_a92ef267a111bca7ffc2045040cd4c2f");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix33_21a29d0ff4b7c9df7579311e16a9997c() {
        assertEval("argv <- list(c(1+2i, 3-4i, 5+0i, -6+0i), 2L, 2L, TRUE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix33_21a29d0ff4b7c9df7579311e16a9997c");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix36_2a0583afdbde06aa275d16f2da8d090c() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 0, 4.94065645841247e-324, 0, 0, 0, 0, 0), structure(12L, .Names = '1'), 1L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix36_2a0583afdbde06aa275d16f2da8d090c");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix37_a7d353e4c41d248a0e708e7f3224bf20() {
        assertEval("argv <- list(1:7, 3, 4, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix37_a7d353e4c41d248a0e708e7f3224bf20");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix39_53c38f6077dd7aaca90c51c383503499() {
        assertEval("argv <- list(c(-1, 4, 4, 9, 5, 1, 4, 8, 8, 2, 6, 0, 2, 3, 8, 8, 4, 4, 2, 3, 4, 0, -1, 7, 2, 4, 2, 3, 5, 6, 6, 5, 4, 3, 7, -1, 3, 1, -1, 2, 32, 1, 4, 4), 2L, 5L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix39_53c38f6077dd7aaca90c51c383503499");
    }

    @Test
    public void TestrGenBuiltinmatrix_testmatrix42_fa537b7a32d8b9000388c2008d68fb0c() {
        assertEval("argv <- list(NA_character_, 1L, 17L, FALSE, NULL, FALSE, FALSE); .Internal(matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinmatrix_testmatrix42_fa537b7a32d8b9000388c2008d68fb0c");
    }

    @Test
    public void TestrGenBuiltinmax_testmax11_8608c8811b4335b2c8da107e4440edf0() {
        assertEval("argv <- list(numeric(0));max(argv[[1]]);");
        check("TestrGenBuiltinmax_testmax11_8608c8811b4335b2c8da107e4440edf0");
    }

    @Test
    public void TestrGenBuiltinmax_testmax15_0cbe44fbb30efebcb583382fe042cea9() {
        assertEval("argv <- list(c(1.2e+100, 1.3e+100));max(argv[[1]]);");
        check("TestrGenBuiltinmax_testmax15_0cbe44fbb30efebcb583382fe042cea9");
    }

    @Test
    public void TestrGenBuiltinmax_testmax16_5a290edcdd81e3b471f2df6b0f5b65cf() {
        assertEval("argv <- list(structure(c(11368.8306749654, 11347.7238090355, 11341.9182102121, 11392.4878842821, 11367.3445285107, 11337.9245694652, 11332.0560643654, 11356.4682624019, 11387.6852128883, 11364.9132677, 11391.3319486445, 11374.2254758319, 11347.9708838458, 11353.2031583386, 11333.3748092474, 11323.9154302836, 11373.0896246266, 11330.2228965024, 11354.2399044028, 11367.8070731596, 11392.4287034031, 11357.6915504499, 11356.9044667059, 11335.1409634408, 11375.8374661156, 11354.7726842454, 11358.781884864, 11337.5281579299, 11339.0060699913, 11364.6998397419, 11363.2410538797, 11328.3945066198, 11325.487840571, 11367.9956844538, 11388.0030639744, 11364.8664695648, 11362.2630523606, 11359.821940674, 11391.9566656714, 11358.5349275633, 11370.7951655071, 11365.1078852355, 11339.7208074429, 11341.0716148671, 11374.0516736354, 11354.6799581982, 11335.2588737891, 11375.2688788734, 11330.349134828, 11383.518146432, 11366.0251480173, 11362.0011677193, 11346.0144123337, 11354.7192011815, 11358.0308680837, 11335.6606452791, 11360.0741421962, 11328.2693021996, 11342.4429152855, 11337.8889663466, 11342.9353336683, 11385.6565872063, 11354.2364726327, 11377.5989422849, 11384.6433324409, 11351.9186946652, 11327.4665936357, 11346.4841244179, 11373.6608162634, 11346.6330733448, 11367.1289885738, 11381.8430187805, 11382.9292165297, 11350.3951496719, 11349.6345719923, 11385.6811798196, 11368.1021034038, 11374.8755054101, 11365.3712412571, 11386.2157128048, 11343.5611108569, 11336.3882076922, 11385.0515660313, 11358.2337640012, 11384.3940280117, 11336.2435535709, 11376.0672136671, 11373.7149224868, 11389.0607372806, 11361.3352610911, 11372.8220707406, 11350.2233569878, 11330.0611188328, 11387.9111462012, 11342.8262750218, 11364.340121117, 11330.7252423461, 11381.8354922482, 11345.257457911, 11377.7995935893), class = 'Date'), na.rm = TRUE);max(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmax_testmax16_5a290edcdd81e3b471f2df6b0f5b65cf");
    }

    @Test
    public void TestrGenBuiltinmax_testmax17_846546dbc304f70557403d1282159159() {
        assertEval("argv <- list(structure(c(3L, 2L, 1L), .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')), na.rm = FALSE);max(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmax_testmax17_846546dbc304f70557403d1282159159");
    }

    @Test
    public void TestrGenBuiltinmax_testmax18_85d9a59ed8eff6f67794e6d1917503eb() {
        assertEval("argv <- list(structure(c(1338544800L, 1338566400L, 1338588000L, 1338609600L, 1338631200L, 1338652800L, 1338674400L, 1338696000L, 1338717600L, 1338739200L, 1338760800L, 1338782400L, 1338804000L, 1338825600L, 1338847200L, 1338868800L, 1338890400L, 1338912000L, 1338933600L, 1338955200L, 1338976800L, 1338998400L, 1339020000L, 1339041600L), class = c('POSIXct', 'POSIXt'), tzone = ''), na.rm = TRUE);max(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmax_testmax18_85d9a59ed8eff6f67794e6d1917503eb");
    }

    @Test
    public void TestrGenBuiltinmax_testmax19_1107df5692a44807570b7e1e965400bd() {
        assertEval("argv <- list(structure(list(c(1L, 2L, 4L), 1:3, c(2L, 1L)), class = c('package_version', 'numeric_version')), na.rm = FALSE);max(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmax_testmax19_1107df5692a44807570b7e1e965400bd");
    }

    @Test
    public void TestrGenBuiltinmax_testmax2_9e35ea358a88ecb88dd7f0f80d0db911() {
        assertEval("argv <- list(structure(c(1208822400, 1209168000, 1208822400, 1209168000), class = c('POSIXct', 'POSIXt')), na.rm = TRUE);max(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmax_testmax2_9e35ea358a88ecb88dd7f0f80d0db911");
    }

    @Test
    public void TestrGenBuiltinmax_testmax20_821788b353e2614d4780d52d65a432e5() {
        assertEval("argv <- list(structure(c(1208822400, 1209168000), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), na.rm = FALSE);max(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmax_testmax20_821788b353e2614d4780d52d65a432e5");
    }

    @Test
    public void TestrGenBuiltinmax_testmax21_d39d45770d39e8317748f016d8b9ab72() {
        assertEval("argv <- list(structure(c(13823, NA), class = 'Date'), na.rm = TRUE);max(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmax_testmax21_d39d45770d39e8317748f016d8b9ab72");
    }

    @Test
    public void TestrGenBuiltinmax_testmax5_5ebe9da0be4eef7e8bde44e34019b2e2() {
        assertEval("max( );");
        check("TestrGenBuiltinmax_testmax5_5ebe9da0be4eef7e8bde44e34019b2e2");
    }

    @Test
    public void TestrGenBuiltinmax_testmax9_6b37ac20bbd5f6968bbbd7156f6f87c5() {
        assertEval("argv <- list(structure(list(x = c(-1, 1, 1, -1, -1, 1, 1, -1), y = c(-0.701149425287356, -0.701149425287356, -0.701149425287356, -0.701149425287356, 0.701149425287356, 0.701149425287356, 0.701149425287356, 0.701149425287356), z = c(-0.4, -0.4, 0.4, 0.4, -0.4, -0.4, 0.4, 0.4)), .Names = c('x', 'y', 'z'), row.names = c(NA, -8L), class = 'data.frame'), na.rm = FALSE);max(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmax_testmax9_6b37ac20bbd5f6968bbbd7156f6f87c5");
    }

    @Test
    public void TestrGenBuiltinmaxcol_testmaxcol1_df8662b0e48cf725d3be6b778572cdc3() {
        assertEval("argv <- list(structure(c(80.2, 17, 15, 12, 9.96, 22.2, 83.1, 45.1, 6, 9, 84.84, 22.2, 92.5, 39.7, 5, 5, 93.4, 20.2, 85.8, 36.5, 12, 7, 33.77, 20.3, 76.9, 43.5, 17, 15, 5.16, 20.6, 76.1, 35.3, 9, 7, 90.57, 26.6, 83.8, 70.2, 16, 7, 92.85, 23.6, 92.4, 67.8, 14, 8, 97.16, 24.9, 82.4, 53.3, 12, 7, 97.67, 21, 82.9, 45.2, 16, 13, 91.38, 24.4, 87.1, 64.5, 14, 6, 98.61, 24.5, 64.1, 62, 21, 12, 8.52, 16.5, 66.9, 67.5, 14, 7, 2.27, 19.1, 68.9, 60.7, 19, 12, 4.43, 22.7, 61.7, 69.3, 22, 5, 2.82, 18.7, 68.3, 72.6, 18, 2, 24.2, 21.2, 71.7, 34, 17, 8, 3.3, 20, 55.7, 19.4, 26, 28, 12.11, 20.2, 54.3, 15.2, 31, 20, 2.15, 10.8, 65.1, 73, 19, 9, 2.84, 20, 65.5, 59.8, 22, 10, 5.23, 18, 65, 55.1, 14, 3, 4.52, 22.4, 56.6, 50.9, 22, 12, 15.14, 16.7, 57.4, 54.1, 20, 6, 4.2, 15.3, 72.5, 71.2, 12, 1, 2.4, 21, 74.2, 58.1, 14, 8, 5.23, 23.8, 72, 63.5, 6, 3, 2.56, 18, 60.5, 60.8, 16, 10, 7.72, 16.3, 58.3, 26.8, 25, 19, 18.46, 20.9, 65.4, 49.5, 15, 8, 6.1, 22.5, 75.5, 85.9, 3, 2, 99.71, 15.1, 69.3, 84.9, 7, 6, 99.68, 19.8, 77.3, 89.7, 5, 2, 100, 18.3, 70.5, 78.2, 12, 6, 98.96, 19.4, 79.4, 64.9, 7, 3, 98.22, 20.2, 65, 75.9, 9, 9, 99.06, 17.8, 92.2, 84.6, 3, 3, 99.46, 16.3, 79.3, 63.1, 13, 13, 96.83, 18.1, 70.4, 38.4, 26, 12, 5.62, 20.3, 65.7, 7.7, 29, 11, 13.79, 20.5, 72.7, 16.7, 22, 13, 11.22, 18.9, 64.4, 17.6, 35, 32, 16.92, 23, 77.6, 37.6, 15, 7, 4.97, 20, 67.6, 18.7, 25, 7, 8.65, 19.5, 35, 1.2, 37, 53, 42.34, 18, 44.7, 46.6, 16, 29, 50.43, 18.2, 42.8, 27.7, 22, 29, 58.33, 19.3), .Dim = c(6L, 47L), .Dimnames = list(c('Fertility', 'Agriculture', 'Examination', 'Education', 'Catholic', 'Infant.Mortality'), c('Courtelary', 'Delemont', 'Franches-Mnt', 'Moutier', 'Neuveville', 'Porrentruy', 'Broye', 'Glane', 'Gruyere', 'Sarine', 'Veveyse', 'Aigle', 'Aubonne', 'Avenches', 'Cossonay', 'Echallens', 'Grandson', 'Lausanne', 'La Vallee', 'Lavaux', 'Morges', 'Moudon', 'Nyone', 'Orbe', 'Oron', 'Payerne', 'Paysd'enhaut', 'Rolle', 'Vevey', 'Yverdon', 'Conthey', 'Entremont', 'Herens', 'Martigwy', 'Monthey', 'St Maurice', 'Sierre', 'Sion', 'Boudry', 'La Chauxdfnd', 'Le Locle', 'Neuchatel', 'Val de Ruz', 'ValdeTravers', 'V. De Geneve', 'Rive Droite', 'Rive Gauche'))), 1L); .Internal(max.col(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinmaxcol_testmaxcol1_df8662b0e48cf725d3be6b778572cdc3");
    }

    @Test
    public void TestrGenBuiltinmaxcol_testmaxcol2_3e069e10258ed1d236f496c702d847de() {
        assertEval("argv <- list(structure(c(0.0140185568997224, 0.0152950000405453, 0.013933189413423, 0.0141545247888734, 0.0144656253644622, 0.0138841285101751, 0.014995293880605, 0.0135531935867069, 0.0136464824425927, 0.0139216121812551, 0.0150015663096977, 0.0141230892456885, 0.013614290948012, 0.0169498879707739, 0.0167919904349555, 0.0164281655519131, 0.0145450130659148, 0.0154935322596005, 0.0140566103751186, 0.0137862479562347, 0.0138916844301758, 0.0144143878263478, 0.0153699249520618, 0.0156955405518398, 0.0143684930741837, 0.991123944314599, 0.772371856665358, 0.998388573397845, 0.997744681008954, 0.935000528851613, 0.995759465226583, 0.998319991897437, 0.998446741491899, 0.997291233910865, 0.998453850443283, 0.449550979690061, 0.99765492178392, 0.0744670889060699, 0.997953251276348, 0.998367231220745, 0.998303801028119, 0.996490251221358, 0.987068752837462, 0.963362766144961, 0.997745619693091, 0.998180187351627, 0.995230116685749, 0.99834615324817, 0.998224606721368, 0.998138182928866, 0.000101796455995556, 0.0169548122668949, 0.00010041243364593, 0.994976075194857, 0.000116262428296307, 0.000266333816370553, 0.000213420942072358, 0.000150164062855871, 9.91852669694001e-05, 0.962237984681016, 0.000109709045973819, 0.363503438381572, 0.000165884012322677, 0.000404227768170316, 0.000101407372837694, 0.000138346452367636, 0.76867700377653, 0.000101067307394145, 0.000798310678132636, 0.439735407970107, 0.000105640126458538, 0.000103729730504055, 0.000157422658078269, 0.00062878104546921, 0.000140302481934868, 0.987636544924171, 0.986762198204236, 0.987695606647598, 0.987542563977846, 0.987328468487257, 0.987729584212166, 0.986966061808917, 0.987959390267427, 0.987894530108167, 0.987703622276188, 0.986961786481457, 0.987564327481863, 0.987916920251847, 0.98565103396999, 0.98575611086066, 0.985998830615913, 0.98727397408636, 0.986627618096195, 0.987610242071539, 0.987797448350422, 0.987724349638781, 0.987363673212559, 0.986711269247982, 0.986491053812255, 0.987395229430566, 0.0127450421932153, 0.00673790924500044, 0.0168765170487183, 0.015797380803532, 0.00875985277873091, 0.0142537568101031, 0.0172964637554702, 0.0177648866573519, 0.0158550778308362, 0.0172334564486378, 0.00522951225361075, 0.016267073149734, 0.00347221059583105, 0.0218803200901225, 0.0183403081414579, 0.0180163362514856, 0.0146261930363668, 0.0119682371438135, 0.00971509310832369, 0.0157071233034631, 0.017455515535567, 0.0139105878597395, 0.0174050248646065, 0.0173796025035352, 0.0168918350504782, 0.00106971573173608, 0.0026383344434856, 0.00106703814487522, 0.0135614845327103, 0.0010949673490627, 0.00126684800065677, 0.0012190851300456, 0.00114670950680761, 0.00106469628452917, 0.00946684926508704, 0.00108427378412549, 0.00489096395354091, 0.00116581741675497, 0.00136406369196257, 0.00106938597766297, 0.00112914854449728, 0.00664571845549644, 0.00106837166942789, 0.00153810249624049, 0.0051794966429432, 0.00107683746869901, 0.00107356047093305, 0.00115632815053843, 0.001475874716352, 0.00113310775095649, 0.000705529701133523, 0.000706190813132159, 0.000705483416292851, 0.000705607277564461, 0.000705767694047911, 0.000705456690994395, 0.000706040550884142, 0.000705277731844386, 0.000705325918720134, 0.00070547711802582, 0.000706043725519247, 0.000705586003991082, 0.000705308033747408, 0.000706976814055453, 0.000706900888924168, 0.000706734153004456, 0.000705809204506355, 0.000706288779684405, 0.000705550244606539, 0.000705403095546089, 0.000705460812978617, 0.000705740784771567, 0.000706233802920496, 0.000706387215078423, 0.000705716602186515, 0.00537527373619432, 0.193553056279976, 0.000869791621482113, 0.00126068143747944, 0.0477132994644455, 0.00247011263414166, 0.000876993026210466, 0.000793804652755058, 0.00147446124252569, 0.000818798505743392, 0.527720370257185, 0.0012613575859543, 0.931485133910046, 0.000794860447953985, 0.000799403966921179, 0.000843774285071599, 0.00203097055872496, 0.00804383321163345, 0.0255537088264535, 0.00126855734163029, 0.000930853589102135, 0.00281671019786704, 0.000858777960111907, 0.000915470358337216, 0.000986308498091386, 0.999944492377256, 0.98624753604171, 0.999945310582066, 0.00303527549384713, 0.999935958318038, 0.99984366374275, 0.999876760118408, 0.999915533835607, 0.999946031942947, 0.0270168111120999, 0.999939809617296, 0.622685795280626, 0.999906081646851, 0.999754847875723, 0.999944697838299, 0.999922757726417, 0.198924025871316, 0.99994491987507, 0.99948964681356, 0.539122196215121, 0.999942224996369, 0.999943338667082, 0.999911124821608, 0.999605022779117, 0.999921489451661), .Dim = c(75L, 3L), .Dimnames = list(    NULL, c('c', 's', 'v'))), 1L); .Internal(max.col(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinmaxcol_testmaxcol2_3e069e10258ed1d236f496c702d847de");
    }

    @Test
    public void TestrGenBuiltinmaxcol_testmaxcol3_207ddcc22fe384dfefb0977a8c29e2d4() {
        assertEval("argv <- list(structure(list(), .Dim = 0:1), 1L); .Internal(max.col(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinmaxcol_testmaxcol3_207ddcc22fe384dfefb0977a8c29e2d4");
    }

    @Test
    public void TestrGenBuiltinmean_testmean17_3ff1f045467adce67fbf87c1dec8e1f2() {
        assertEval("argv <- list(c(1.77635683940025e-15, 7.105427357601e-14, 4.54747350886464e-13, 4.54747350886464e-13, 1.81898940354586e-12, 7.27595761418343e-12, 7.27595761418343e-12, 1.45519152283669e-11, 2.91038304567337e-11, 5.82076609134674e-11)); .Internal(mean(argv[[1]]))");
        check("TestrGenBuiltinmean_testmean17_3ff1f045467adce67fbf87c1dec8e1f2");
    }

    @Test
    public void TestrGenBuiltinmean_testmean19_6620b77cdd646a0c73fb0012b5450b0f() {
        assertEval("argv <- structure(list(x = structure(c(31, NA, NA, 31), units = 'days',     class = 'difftime'), na.rm = TRUE), .Names = c('x', 'na.rm'));do.call('mean', argv)");
        check("TestrGenBuiltinmean_testmean19_6620b77cdd646a0c73fb0012b5450b0f");
    }

    @Test
    public void TestrGenBuiltinmean_testmean2_5b80432d7da7d000026ef5f85256359c() {
        assertEval("argv <- list(c(0.104166666666667, 0.285714285714286, 0.285714285714286, NA)); .Internal(mean(argv[[1]]))");
        check("TestrGenBuiltinmean_testmean2_5b80432d7da7d000026ef5f85256359c");
    }

    @Test
    public void TestrGenBuiltinmean_testmean21_9c2cc664d81f105e3d43c7182593c447() {
        assertEval("argv <- structure(list(x = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,     50), trim = 0.5), .Names = c('x', 'trim'));do.call('mean', argv)");
        check("TestrGenBuiltinmean_testmean21_9c2cc664d81f105e3d43c7182593c447");
    }

    @Test
    public void TestrGenBuiltinmean_testmean22_d3aa4559fd58c87a42a16684ced65048() {
        assertEval("argv <- structure(list(x = structure(c(2L, 1L, 2L, 2L), .Label = c('FALSE',     'TRUE'), class = 'factor')), .Names = 'x');do.call('mean', argv)");
        check("TestrGenBuiltinmean_testmean22_d3aa4559fd58c87a42a16684ced65048");
    }

    @Test
    public void TestrGenBuiltinmean_testmean7_242eb54544a2161448a58f7f14b6dbd6() {
        assertEval("argv <- list(1.47130567537631e-314); .Internal(mean(argv[[1]]))");
        check("TestrGenBuiltinmean_testmean7_242eb54544a2161448a58f7f14b6dbd6");
    }

    @Test
    public void TestrGenBuiltinmeanPOSIXct_testmeanPOSIXct1_5cdc4a7e081ae1ca274e59ebfd63e627() {
        assertEval("argv <- structure(list(x = structure(1412795929.08562, class = c('POSIXct',     'POSIXt'))), .Names = 'x');do.call('mean.POSIXct', argv)");
        check("TestrGenBuiltinmeanPOSIXct_testmeanPOSIXct1_5cdc4a7e081ae1ca274e59ebfd63e627");
    }

    @Test
    public void TestrGenBuiltinmeandefault_testmeandefault1_aff5510f988974e3de95c8cf8b010743() {
        assertEval("argv <- structure(list(x = structure(c(2L, 1L, 2L, 2L), .Label = c('FALSE',     'TRUE'), class = 'factor')), .Names = 'x');do.call('mean.default', argv)");
        check("TestrGenBuiltinmeandefault_testmeandefault1_aff5510f988974e3de95c8cf8b010743");
    }

    @Test
    public void TestrGenBuiltinmeandifftime_testmeandifftime1_8c979d698513e418dd8055b2c9a377b9() {
        assertEval("argv <- structure(list(x = structure(c(31, NA, NA, 31), units = 'days',     class = 'difftime'), na.rm = TRUE), .Names = c('x', 'na.rm'));do.call('mean.difftime', argv)");
        check("TestrGenBuiltinmeandifftime_testmeandifftime1_8c979d698513e418dd8055b2c9a377b9");
    }

    @Test
    public void TestrGenBuiltinmemDecompress_testmemDecompress1_e671c3385759ba61495ddb5408e18509() {
        assertEval("argv <- structure(list(from = as.raw(c(253, 55, 122, 88, 90,     0, 0, 1, 105, 34, 222, 54, 2, 0, 33, 1, 28, 0, 0, 0, 16,     207, 88, 204, 224, 7, 207, 0, 28, 93, 0, 24, 140, 130, 182,     196, 17, 52, 92, 78, 225, 221, 115, 179, 63, 98, 20, 119,     183, 90, 101, 43, 5, 112, 179, 75, 69, 222, 0, 0, 155, 136,     185, 16, 0, 1, 52, 208, 15, 0, 0, 0, 105, 254, 40, 141, 62,     48, 13, 139, 2, 0, 0, 0, 0, 1, 89, 90)), type = 'xz', asChar = TRUE),     .Names = c('from', 'type', 'asChar'));do.call('memDecompress', argv)");
        check("TestrGenBuiltinmemDecompress_testmemDecompress1_e671c3385759ba61495ddb5408e18509");
    }

    @Test
    public void TestrGenBuiltinmerge_testmerge1_67f3d35bee7a44212d18c4947fe9cd45() {
        assertEval("argv <- list(c(0L, 0L, 0L, 0L, 0L), 0L, FALSE, TRUE); .Internal(merge(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmerge_testmerge1_67f3d35bee7a44212d18c4947fe9cd45");
    }

    @Test
    public void TestrGenBuiltinmerge_testmerge2_5e73e0cf406f0165a44a7bd568061a10() {
        assertEval("argv <- list(c(0L, 0L, 0L, 0L, 0L), 0L, TRUE, FALSE); .Internal(merge(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmerge_testmerge2_5e73e0cf406f0165a44a7bd568061a10");
    }

    @Test
    public void TestrGenBuiltinmerge_testmerge3_ab877162a6a6d8ad05f8a857a91d8755() {
        assertEval("argv <- list(c(0L, 0L, 0L, 3L, 4L), c(0L, 0L, 0L, 3L, 4L), FALSE, FALSE); .Internal(merge(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinmerge_testmerge3_ab877162a6a6d8ad05f8a857a91d8755");
    }

    @Test
    public void TestrGenBuiltinmerge_testmerge5_84e059f757cce8c6aacf4d0e6f024007() {
        assertEval("argv <- structure(list(x = structure(list(gender = structure(c(1L,     1L, 2L), .Label = c('F', 'M'), class = 'factor'), age = c(20,     30, 40), filename = structure(1:3, .Label = c('q1.csv', 'q2.csv',     'q3.csv'), class = 'factor')), .Names = c('gender', 'age',     'filename'), row.names = c(NA, -3L), class = 'data.frame'),     y = structure(list(effsize = c(3.5, 2, 1.7), constraint = c(0.40625,         0.5, 0.882), outdegree = c(4, 2, 2), indegree = c(4,         2, 3), efficiency = c(0.625, 0.5, 0.444444444444444),         hierarchy = c(0, 0, 0.333333333333333), centralization = c(0.833333333333333,             1, 0.333333333333333), gden = c(0.5, 0.666666666666667,             0.666666666666667), ego.gden = c(0.166666666666667,             0, 0.5), filename = structure(1:3, .Label = c('q1.csv',             'q2.csv', 'q3.csv'), class = 'factor')), .Names = c('effsize',         'constraint', 'outdegree', 'indegree', 'efficiency',         'hierarchy', 'centralization', 'gden', 'ego.gden', 'filename'),         row.names = c('q1.csv', 'q2.csv', 'q3.csv'), class = 'data.frame'),     by = 'filename'), .Names = c('x', 'y', 'by'));do.call('merge', argv)");
        check("TestrGenBuiltinmerge_testmerge5_84e059f757cce8c6aacf4d0e6f024007");
    }

    @Test
    public void TestrGenBuiltinmin_testmin10_3eff33ade5effcf4f29e3a2b76c52f0e() {
        assertEval("argv <- list(c(2.00256647265648e-308, 2.22284878464869e-308, 2.22507363599982e-308, 2.2250738585072e-308, 2.22507408101459e-308, 2.22729893236571e-308, 2.44758124435792e-308));min(argv[[1]]);");
        check("TestrGenBuiltinmin_testmin10_3eff33ade5effcf4f29e3a2b76c52f0e");
    }

    @Test
    public void TestrGenBuiltinmin_testmin13_341893ea4787c250bc3e31fa673bb2f5() {
        assertEval("min( );");
        check("TestrGenBuiltinmin_testmin13_341893ea4787c250bc3e31fa673bb2f5");
    }

    @Test
    public void TestrGenBuiltinmin_testmin14_268ff60da1e88efcacbc32726f1ff677() {
        assertEval("argv <- list(structure(c(13823, NA), class = 'Date'), na.rm = TRUE);min(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmin_testmin14_268ff60da1e88efcacbc32726f1ff677");
    }

    @Test
    public void TestrGenBuiltinmin_testmin15_e4f80ff9bce87b9dc26b274dbfdd036c() {
        assertEval("argv <- list(structure(c(1208822400, 1209168000), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), na.rm = FALSE);min(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmin_testmin15_e4f80ff9bce87b9dc26b274dbfdd036c");
    }

    @Test
    public void TestrGenBuiltinmin_testmin18_3dcb0e94d45cec63699680dc9ec09005() {
        assertEval("argv <- list(c(4.5241870901798, 0.211646098116025, 1.86003798801034e-43));min(argv[[1]]);");
        check("TestrGenBuiltinmin_testmin18_3dcb0e94d45cec63699680dc9ec09005");
    }

    @Test
    public void TestrGenBuiltinmin_testmin20_574784a10aa58b754300bd8152cf28f2() {
        assertEval("argv <- list(numeric(0));min(argv[[1]]);");
        check("TestrGenBuiltinmin_testmin20_574784a10aa58b754300bd8152cf28f2");
    }

    @Test
    public void TestrGenBuiltinmin_testmin5_cea78acf4c8889e24182ccb6af340f77() {
        assertEval("argv <- list(structure(list(c(1L, 2L, 4L), 1:3, c(2L, 1L)), class = c('package_version', 'numeric_version')), na.rm = FALSE);min(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmin_testmin5_cea78acf4c8889e24182ccb6af340f77");
    }

    @Test
    public void TestrGenBuiltinmin_testmin6_a4ec5c86068ddf5916f2532ecc622948() {
        assertEval("argv <- list(structure(c(1338544800L, 1338566400L, 1338588000L, 1338609600L, 1338631200L, 1338652800L, 1338674400L, 1338696000L, 1338717600L, 1338739200L, 1338760800L, 1338782400L, 1338804000L, 1338825600L, 1338847200L, 1338868800L, 1338890400L, 1338912000L, 1338933600L, 1338955200L, 1338976800L, 1338998400L, 1339020000L, 1339041600L), class = c('POSIXct', 'POSIXt'), tzone = ''), na.rm = TRUE);min(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmin_testmin6_a4ec5c86068ddf5916f2532ecc622948");
    }

    @Test
    public void TestrGenBuiltinmin_testmin7_63b353dc1cec76c9466ce39a256673e1() {
        assertEval("argv <- list(1.234e+100);min(argv[[1]]);");
        check("TestrGenBuiltinmin_testmin7_63b353dc1cec76c9466ce39a256673e1");
    }

    @Test
    public void TestrGenBuiltinmin_testmin8_64e6a569096300db1b5d75de4779ab74() {
        assertEval("argv <- list(structure(c(3L, 2L, 1L), .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')), na.rm = FALSE);min(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmin_testmin8_64e6a569096300db1b5d75de4779ab74");
    }

    @Test
    public void TestrGenBuiltinmin_testmin9_6a1c474d9c4291af3bd1ac906811bb9e() {
        assertEval("argv <- list(structure(c(11368.8306749654, 11347.7238090355, 11341.9182102121, 11392.4878842821, 11367.3445285107, 11337.9245694652, 11332.0560643654, 11356.4682624019, 11387.6852128883, 11364.9132677, 11391.3319486445, 11374.2254758319, 11347.9708838458, 11353.2031583386, 11333.3748092474, 11323.9154302836, 11373.0896246266, 11330.2228965024, 11354.2399044028, 11367.8070731596, 11392.4287034031, 11357.6915504499, 11356.9044667059, 11335.1409634408, 11375.8374661156, 11354.7726842454, 11358.781884864, 11337.5281579299, 11339.0060699913, 11364.6998397419, 11363.2410538797, 11328.3945066198, 11325.487840571, 11367.9956844538, 11388.0030639744, 11364.8664695648, 11362.2630523606, 11359.821940674, 11391.9566656714, 11358.5349275633, 11370.7951655071, 11365.1078852355, 11339.7208074429, 11341.0716148671, 11374.0516736354, 11354.6799581982, 11335.2588737891, 11375.2688788734, 11330.349134828, 11383.518146432, 11366.0251480173, 11362.0011677193, 11346.0144123337, 11354.7192011815, 11358.0308680837, 11335.6606452791, 11360.0741421962, 11328.2693021996, 11342.4429152855, 11337.8889663466, 11342.9353336683, 11385.6565872063, 11354.2364726327, 11377.5989422849, 11384.6433324409, 11351.9186946652, 11327.4665936357, 11346.4841244179, 11373.6608162634, 11346.6330733448, 11367.1289885738, 11381.8430187805, 11382.9292165297, 11350.3951496719, 11349.6345719923, 11385.6811798196, 11368.1021034038, 11374.8755054101, 11365.3712412571, 11386.2157128048, 11343.5611108569, 11336.3882076922, 11385.0515660313, 11358.2337640012, 11384.3940280117, 11336.2435535709, 11376.0672136671, 11373.7149224868, 11389.0607372806, 11361.3352610911, 11372.8220707406, 11350.2233569878, 11330.0611188328, 11387.9111462012, 11342.8262750218, 11364.340121117, 11330.7252423461, 11381.8354922482, 11345.257457911, 11377.7995935893), class = 'Date'), na.rm = TRUE);min(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinmin_testmin9_6a1c474d9c4291af3bd1ac906811bb9e");
    }

    @Test
    public void TestrGenBuiltinminus_Date_testminus_Date1_83c5161cacbf2f9f38a80584b3e88064() {
        assertEval("argv <- structure(list(e1 = structure(14580, class = 'Date'),     e2 = structure(1, units = 'days', class = 'difftime')), .Names = c('e1',     'e2'));do.call('-.Date', argv)");
        check("TestrGenBuiltinminus_Date_testminus_Date1_83c5161cacbf2f9f38a80584b3e88064");
    }

    @Test
    public void TestrGenBuiltinnames_testnames9_6e1968ccfccc93a03e8acbbbb8051d44() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L), hour = c(20L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 19L, 19L, 19L, 20L, 20L, 20L, 19L, 20L, 19L, 19L, 19L, 20L), mday = c(30L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 31L, 30L, 30L, 30L, 30L, 31L, 31L, 31L, 30L, 30L, 30L, 31L, 30L, 31L, 31L, 31L, 30L), mon = c(5L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 5L, 5L, 5L, 5L, 11L, 11L, 11L, 5L, 5L, 5L, 11L, 5L, 11L, 11L, 11L, 5L), year = c(72L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 81L, 82L, 83L, 85L, 87L, 89L, 90L, 92L, 93L, 94L, 95L, 97L, 98L, 105L, 108L, 112L), wday = c(5L, 0L, 1L, 2L, 3L, 5L, 6L, 0L, 1L, 2L, 3L, 4L, 0L, 4L, 0L, 1L, 2L, 3L, 4L, 0L, 1L, 4L, 6L, 3L, 6L), yday = c(181L, 365L, 364L, 364L, 364L, 365L, 364L, 364L, 364L, 180L, 180L, 180L, 180L, 364L, 364L, 364L, 181L, 180L, 180L, 364L, 180L, 364L, 364L, 365L, 181L), isdst = c(1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt'), tzone = c('', 'EST', 'EDT')));names(argv[[1]]);");
        check("TestrGenBuiltinnames_testnames9_6e1968ccfccc93a03e8acbbbb8051d44");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign1_c44fb91da1834d486b0a8d373c6bf3e4() {
        assertEval("argv <- list(structure(list(happy = c('a', 'b', 'c', 'd'), sad = c('A', 'B', 'C', 'D', 'E', 'F')), .Names = c('happy', 'sad')), value = c('happy', 'sad'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign1_c44fb91da1834d486b0a8d373c6bf3e4");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign10_1f4572801fee52230ec08e51f3383ab0() {
        assertEval("argv <- list(structure(list(), .Names = character(0)), character(0));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign10_1f4572801fee52230ec08e51f3383ab0");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign11_60898f011311f7c472fd9b77cb639a40() {
        assertEval("argv <- list(structure(list(save.object = NULL, panel.error = NULL, drop.unused.levels = NULL, default.theme = NULL, legend.bbox = NULL, banking = NULL, default.args = NULL, axis.padding = NULL, skip.boundary.labels = NULL, interaction.sep = NULL, panel.contourplot = NULL, panel.levelplot = NULL, panel.levelplot.raster = NULL, panel.parallel = NULL, panel.densityplot = NULL, panel.splom = NULL, panel.wireframe = NULL, panel.dotplot = NULL, panel.qq = NULL, panel.stripplot = NULL, panel.xyplot = NULL, panel.qqmath = NULL,     panel.barchart = NULL, panel.bwplot = NULL, panel.histogram = NULL, panel.cloud = NULL, panel.pairs = NULL, prepanel.default.bwplot = NULL, prepanel.default.cloud = NULL, prepanel.default.densityplot = NULL, prepanel.default.histogram = NULL, prepanel.default.levelplot = NULL, prepanel.default.parallel = NULL, prepanel.default.qq = NULL, prepanel.default.qqmath = NULL, prepanel.default.splom = NULL, prepanel.default.xyplot = NULL, prepanel.default.dotplot = NULL, prepanel.default.barchart = NULL,     prepanel.default.wireframe = NULL, prepanel.default.contourplot = NULL, axis.units = NULL, layout.heights = NULL, layout.widths = NULL, highlight.gpar = NULL), .Names = c('save.object', 'panel.error', 'drop.unused.levels', 'default.theme', 'legend.bbox', 'banking', 'default.args', 'axis.padding', 'skip.boundary.labels', 'interaction.sep', 'panel.contourplot', 'panel.levelplot', 'panel.levelplot.raster', 'panel.parallel', 'panel.densityplot', 'panel.splom', 'panel.wireframe', 'panel.dotplot', 'panel.qq', 'panel.stripplot', 'panel.xyplot', 'panel.qqmath', 'panel.barchart', 'panel.bwplot', 'panel.histogram', 'panel.cloud', 'panel.pairs', 'prepanel.default.bwplot', 'prepanel.default.cloud', 'prepanel.default.densityplot', 'prepanel.default.histogram', 'prepanel.default.levelplot', 'prepanel.default.parallel', 'prepanel.default.qq', 'prepanel.default.qqmath', 'prepanel.default.splom', 'prepanel.default.xyplot', 'prepanel.default.dotplot', 'prepanel.default.barchart', 'prepanel.default.wireframe', 'prepanel.default.contourplot', 'axis.units', 'layout.heights', 'layout.widths', 'highlight.gpar')), value = c('save.object', 'panel.error', 'drop.unused.levels', 'default.theme', 'legend.bbox', 'banking', 'default.args', 'axis.padding', 'skip.boundary.labels', 'interaction.sep', 'panel.contourplot', 'panel.levelplot', 'panel.levelplot.raster', 'panel.parallel', 'panel.densityplot', 'panel.splom', 'panel.wireframe', 'panel.dotplot', 'panel.qq', 'panel.stripplot', 'panel.xyplot', 'panel.qqmath', 'panel.barchart', 'panel.bwplot', 'panel.histogram', 'panel.cloud', 'panel.pairs', 'prepanel.default.bwplot', 'prepanel.default.cloud', 'prepanel.default.densityplot', 'prepanel.default.histogram', 'prepanel.default.levelplot', 'prepanel.default.parallel', 'prepanel.default.qq', 'prepanel.default.qqmath', 'prepanel.default.splom', 'prepanel.default.xyplot', 'prepanel.default.dotplot', 'prepanel.default.barchart', 'prepanel.default.wireframe', 'prepanel.default.contourplot', 'axis.units', 'layout.heights', 'layout.widths', 'highlight.gpar'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign11_60898f011311f7c472fd9b77cb639a40");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign12_e3d0daa8144432e6fedd2a4f5e011407() {
        assertEval("argv <- list(structure(c(100, -1e-13, Inf, -Inf, NaN, 3.14159265358979, NA), .Names = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA')), value = c(' 100', '-1e-13', ' Inf', '-Inf', ' NaN', '3.14', '  NA'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign12_e3d0daa8144432e6fedd2a4f5e011407");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign13_c7cf2abd9ec68e911725ad041ff08e7a() {
        assertEval("argv <- list(structure(list(A = 0:10, B = 10:20, `NA` = 20:30), .Names = c('A', 'B', NA), row.names = c(NA, -11L), class = 'data.frame'), value = c('A', 'B', NA));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign13_c7cf2abd9ec68e911725ad041ff08e7a");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign15_3e225c9fab805c5b349c8be6d91fba69() {
        assertEval("argv <- list(structure(list(surname = structure(c(5L, 6L, 4L, 3L, 3L, 1L, 2L), .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), title = structure(c(2L, 5L, 4L, 6L, 7L, 3L, 1L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'title', 'other.author'), row.names = c(NA, -7L), class = 'data.frame'), value = c('surname', 'title', 'other.author'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign15_3e225c9fab805c5b349c8be6d91fba69");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign16_dff1df9e7c45c2fe150395b86ab66d9c() {
        assertEval("argv <- list(structure(1:3, .Names = c('foo', 'bar', 'baz')), value = c('foo', 'bar', 'baz'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign16_dff1df9e7c45c2fe150395b86ab66d9c");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign17_4ccd1d67e1bca4cd0ce4f0154f00805f() {
        assertEval("argv <- list(structure(c(1+1i, 1.2+10i), .Names = c('a', 'b')), value = c('a', 'b'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign17_4ccd1d67e1bca4cd0ce4f0154f00805f");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign18_3a82f6c15e080877ecdfc4e91e18c506() {
        assertEval("argv <- list(structure(c(67L, 34L), .Dim = 2L, .Dimnames = list(c('\\'actual\\'', 'virtual')), class = 'table'), value = c('\\'actual\\'', 'virtual'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign18_3a82f6c15e080877ecdfc4e91e18c506");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign2_fef1858659664db592c6d712de19a5d1() {
        assertEval("argv <- list(structure(list(population = c(3615, 365, 2212, 2110, 21198, 2541, 3100, 579, 8277, 4931, 868, 813, 11197, 5313, 2861, 2280, 3387, 3806, 1058, 4122, 5814, 9111, 3921, 2341, 4767, 746, 1544, 590, 812, 7333, 1144, 18076, 5441, 637, 10735, 2715, 2284, 11860, 931, 2816, 681, 4173, 12237, 1203, 472, 4981, 3559, 1799, 4589, 376), income = c(3624, 6315, 4530, 3378, 5114, 4884, 5348, 4809, 4815, 4091, 4963, 4119, 5107, 4458, 4628, 4669, 3712, 3545, 3694, 5299, 4755, 4751, 4675, 3098, 4254, 4347, 4508, 5149, 4281, 5237, 3601, 4903, 3875, 5087, 4561, 3983, 4660, 4449, 4558, 3635, 4167, 3821, 4188, 4022, 3907, 4701, 4864, 3617, 4468, 4566), illiteracy = c(2.1, 1.5, 1.8, 1.9, 1.1, 0.7, 1.1, 0.9, 1.3, 2, 1.9, 0.6, 0.9, 0.7, 0.5, 0.6, 1.6, 2.8, 0.7, 0.9, 1.1, 0.9, 0.6, 2.4, 0.8, 0.6, 0.6, 0.5, 0.7, 1.1, 2.2, 1.4, 1.8, 0.8, 0.8, 1.1, 0.6, 1, 1.3, 2.3, 0.5, 1.7, 2.2, 0.6, 0.6, 1.4, 0.6, 1.4, 0.7, 0.6), life.exp = c(69.05, 69.31, 70.55, 70.66, 71.71, 72.06, 72.48, 70.06, 70.66, 68.54, 73.6, 71.87, 70.14, 70.88, 72.56, 72.58, 70.1, 68.76, 70.39, 70.22, 71.83, 70.63, 72.96, 68.09, 70.69, 70.56, 72.6, 69.03, 71.23, 70.93, 70.32, 70.55, 69.21, 72.78, 70.82, 71.42, 72.13, 70.43, 71.9, 67.96, 72.08, 70.11, 70.9, 72.9, 71.64, 70.08, 71.72, 69.48, 72.48, 70.29), murder = c(15.1, 11.3, 7.8, 10.1, 10.3, 6.8, 3.1, 6.2, 10.7, 13.9, 6.2, 5.3, 10.3, 7.1, 2.3, 4.5, 10.6, 13.2, 2.7, 8.5, 3.3, 11.1, 2.3, 12.5, 9.3, 5, 2.9, 11.5, 3.3, 5.2, 9.7, 10.9, 11.1, 1.4, 7.4, 6.4, 4.2, 6.1, 2.4, 11.6, 1.7, 11, 12.2, 4.5, 5.5, 9.5, 4.3, 6.7, 3, 6.9), hs.grad = c(41.3, 66.7, 58.1, 39.9, 62.6, 63.9, 56, 54.6, 52.6, 40.6, 61.9, 59.5, 52.6, 52.9, 59, 59.9, 38.5, 42.2, 54.7, 52.3, 58.5, 52.8, 57.6, 41, 48.8, 59.2, 59.3, 65.2, 57.6, 52.5, 55.2, 52.7, 38.5, 50.3, 53.2, 51.6, 60, 50.2, 46.4, 37.8, 53.3, 41.8, 47.4, 67.3, 57.1, 47.8, 63.5, 41.6, 54.5, 62.9), frost = c(20, 152, 15, 65, 20, 166, 139, 103, 11, 60, 0, 126, 127, 122, 140, 114, 95, 12, 161, 101, 103, 125, 160, 50, 108, 155, 139, 188, 174, 115, 120, 82, 80, 186, 124, 82, 44, 126, 127, 65, 172, 70, 35, 137, 168, 85, 32, 100, 149, 173), area = c(50708, 566432, 113417, 51945, 156361, 103766, 4862, 1982, 54090, 58073, 6425, 82677, 55748, 36097, 55941, 81787, 39650, 44930, 30920, 9891, 7826, 56817, 79289, 47296, 68995, 145587, 76483, 109889, 9027, 7521, 121412, 47831, 48798, 69273, 40975, 68782, 96184, 44966, 1049, 30225, 75955, 41328, 262134, 82096, 9267, 39780, 66570, 24070, 54464, 97203), region = structure(c(2L, 4L, 4L, 2L, 4L, 4L, 1L, 2L, 2L, 2L, 4L, 4L, 3L, 3L, 3L, 3L, 2L, 2L, 1L, 2L, 1L, 3L, 3L, 2L, 3L, 4L, 3L, 4L, 1L, 1L, 4L, 1L, 2L, 3L, 3L, 2L, 4L, 1L, 1L, 2L, 3L, 2L, 2L, 4L, 1L, 2L, 4L, 2L, 3L, 4L), .Label = c('Northeast', 'South', 'North Central', 'West'), class = 'factor')), .Names = c('population', 'income', 'illiteracy', 'life.exp', 'murder', 'hs.grad', 'frost', 'area', 'region'), row.names = c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'), class = 'data.frame'), value = c('population', 'income', 'illiteracy', 'life.exp', 'murder', 'hs.grad', 'frost', 'area', 'region'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign2_fef1858659664db592c6d712de19a5d1");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign3_ec03de1267625939fcd9937f724189ff() {
        assertEval("argv <- list(structure(list(`Sepal Length` = c(5.1, 4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5, 5, 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4, 5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4, 6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8, 7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7, 7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2, 7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6, 6.9, 6.7, 6.9, 5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9), `Sepal Width` = c(3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3, 3, 4, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3, 3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3, 3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2, 3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9, 2.9, 3.1, 3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8, 3, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5, 2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7, 3, 2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8, 3.2, 3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3, 2.8, 3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1, 3, 3.1, 3.1, 3.1, 2.7, 3.2, 3.3, 3, 2.5, 3, 3.4, 3), `Petal Length` = c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5, 4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3, 4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3, 3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9, 6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9, 5.7, 5.2, 5, 5.2, 5.4, 5.1), `Petal Width` = c(0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5, 1, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1, 1.1, 1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2, 2.3, 1.8), Species = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('setosa', 'versicolor', 'virginica'), class = 'factor')), .Names = c('Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width', 'Species'), row.names = c(NA, -150L), class = 'data.frame'), value = c('Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width', 'Species'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign3_ec03de1267625939fcd9937f724189ff");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign4_571457ff282b2b58734f08c37e80fe16() {
        assertEval("argv <- list(structure(list(y = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962, Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551)), .Names = c('y', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'), row.names = 1947:1962, class = 'data.frame'), value = c('y', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year', 'Employed'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign4_571457ff282b2b58734f08c37e80fe16");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign5_bde39c5ab7dde3476ffcf87c2751ce07() {
        assertEval("argv <- list(c(-3.21402130636699, 101.08748330158, -8.50234284659562), value = NULL);`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign5_bde39c5ab7dde3476ffcf87c2751ce07");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign6_0cf4c2e0535758cbacbc67772a034b0b() {
        assertEval("argv <- list(structure(1:3, .Names = c(NA, 'b', NA)), value = c(NA, 'b'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign6_0cf4c2e0535758cbacbc67772a034b0b");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign7_df031072453201d0946b8bca52750b0c() {
        assertEval("argv <- list(structure(c(3.14159265358979e-10, 0.0314159265358979, 3.14159265358979, 31.4159265358979, 314.159265358979, 314159265.358979, 3.14159265358979e+20), .Names = c('3.14e-10', '0.0314', '3.14', '31.4', '314', '3.14e+08', '3.14e+20')), value = c('3.14e-10', '0.0314', '3.14', '31.4', '314', '3.14e+08', '3.14e+20'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign7_df031072453201d0946b8bca52750b0c");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign8_3efb9d815294bd2f6ecd3caba5d856f3() {
        assertEval("argv <- list(structure(c('variable1', 'variable2'), .Names = c('variable1', 'variable2')), value = c('variable1', 'variable2'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign8_3efb9d815294bd2f6ecd3caba5d856f3");
    }

    @Test
    public void TestrGenBuiltinnamesassign_testnamesassign9_b5e889e6c25360b1386457344188535d() {
        assertEval("argv <- list(structure(c(NA, FALSE, TRUE), .Names = c(NA, 'FALSE', 'TRUE')), value = c(NA, 'FALSE', 'TRUE'));`names<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinnamesassign_testnamesassign9_b5e889e6c25360b1386457344188535d");
    }

    @Test
    public void TestrGenBuiltinnormalizePath_testnormalizePath1_defa49a5aa65d3b1cd9f4f65281f4477() {
        assertEval("argv <- list(c('/home/lzhao/hg/r-instrumented/library', '/home/lzhao/R/x86_64-unknown-linux-gnu-library/3.0', '/home/lzhao/hg/r-instrumented/library'), '/', NA); .Internal(normalizePath(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinnormalizePath_testnormalizePath1_defa49a5aa65d3b1cd9f4f65281f4477");
    }

    @Test
    public void TestrGenBuiltinnzchar_testnzchar9_dc3c4901c7dd8fd1d7f6b2192e5c78da() {
        assertEval("argv <- list(c('  \\036 The other major change was an error for asymmetric loss matrices,', '    prompted by a user query.  With L=loss asymmetric, the altered', '    priors were computed incorrectly - they were using L' instead of L.', '    Upshot - the tree would not not necessarily choose optimal splits', '    for the given loss matrix.  Once chosen, splits were evaluated', '    correctly.  The printed “improvement” values are of course the', '    wrong ones as well.  It is interesting that for my little test', '    case, with L quite asymmetric, the early splits in the tree are', '    unchanged - a good split still looks good.'));nzchar(argv[[1]]);");
        check("TestrGenBuiltinnzchar_testnzchar9_dc3c4901c7dd8fd1d7f6b2192e5c78da");
    }

    @Test
    public void TestrGenBuiltinoldClassassign_testoldClassassign1_6991d782cda33c6d2408210d55154932() {
        assertEval("argv <- list(list(), NULL);`oldClass<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoldClassassign_testoldClassassign1_6991d782cda33c6d2408210d55154932");
    }

    @Test
    public void TestrGenBuiltinoldClassassign_testoldClassassign2_d28917eb4a217d340a8f63b40b45fd24() {
        assertEval("argv <- list(NULL, NULL);`oldClass<-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoldClassassign_testoldClassassign2_d28917eb4a217d340a8f63b40b45fd24");
    }

    @Test
    public void TestrGenBuiltinoldClassassign__testoldClassassign_1_873c1c2d762b7ba43a935de0a76abf45() {
        assertEval("argv <- structure(list(structure(1:10, class = 'foo'), value = character(0)),     .Names = c('', 'value'));do.call('oldClass<-', argv)");
        check("TestrGenBuiltinoldClassassign__testoldClassassign_1_873c1c2d762b7ba43a935de0a76abf45");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators102_e392242864b10272f401db17c62e9107() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 0L);`<=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators102_e392242864b10272f401db17c62e9107");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators105_de95372e5d098bc1f1a0fe7801412028() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`<=`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators105_de95372e5d098bc1f1a0fe7801412028");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators107_52d36541c4857242e673678de2671c5c() {
        assertEval("argv <- list(structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'), 0);`<=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators107_52d36541c4857242e673678de2671c5c");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators108_8181ca7c1c37c1e17e3a5c89f7e343b4() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96), .Dim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4')), .Tsp = c(1, 101, 1), class = c('mts', 'ts', 'matrix')), 0);`<=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators108_8181ca7c1c37c1e17e3a5c89f7e343b4");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators109_92586c40bacb2026c7d5368eaee757ed() {
        assertEval("argv <- list(structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, 178, 199, 199, 184, 162, 146, 166, 171, 180, 193, 181, 183, 218, 230, 242, 209, 191, 172, 194, 196, 196, 236, 235, 229, 243, 264, 272, 237, 211, 180, 201, 204, 188, 235, 227, 234, 264, 302, 293, 259, 229, 203, 229, 242, 233, 267, 269, 270, 315, 364, 347, 312, 274, 237, 278, 284, 277, 317, 313, 318, 374, 413, 405, 355, 306, 271, 306, 315, 301, 356, 348, 355, 422, 465, 467, 404, 347, 305, 336, 340, 318, 362, 348, 363, 435, 491, 505, 404, 359, 310, 337, 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 419.147602949539, 391.474665943444, 435.919286153217, 443.935203034261, 455.023399013445, 517.28707821144, 589.71337277669, 582.999919227301, 484.573388713116, 428.878182738437, 368.526582998452, 406.728709993152, 415.660571294428, 388.716535970235, 433.006017658935, 440.885684396326, 451.651900136866, 513.051252429496, 584.327164324967, 577.055407135124, 479.076505013118, 423.494870357491, 363.43932958967, 400.592058645117, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 484.030717075782, 462.954959541421, 526.353307750503, 546.165638262644, 569.502470928676, 657.838443307596, 761.241730163307, 763.280655335144, 642.989004951864, 576.423799567567, 501.429012064338, 559.981301364233, 591.700754553767, 565.210772316967, 642.377841008703, 666.682421047093, 695.547100430962, 804.065022775202, 931.340589597203, 934.837830059897, 788.422986194072, 707.666678543854, 616.37838266375, 689.250456425465), .Dim = c(168L, 3L), .Dimnames = list(NULL, c('structure(c(112, 118, 132, 129, 121, 135, 148, 148, 136, 119, ', 'structure(c(419.147602949539, 391.474665943444, 435.919286153217, ', 'structure(c(484.030717075782, 462.954959541421, 526.353307750503, ')), .Tsp = c(1949, 1962.91666666667, 12), class = c('mts', 'ts', 'matrix')), 0);`<=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators109_92586c40bacb2026c7d5368eaee757ed");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators110_5e09a2dbdb2811ad41daadd0ac7279bd() {
        assertEval("argv <- list(structure(list(Fertility = c(80.2, 83.1, 92.5, 85.8, 76.9), Agriculture = c(17, 45.1, 39.7, 36.5, 43.5), Examination = c(15L, 6L, 5L, 12L, 17L), Education = c(12L, 9L, 5L, 7L, 15L)), .Names = c('Fertility', 'Agriculture', 'Examination', 'Education'), row.names = c('Courtelary', 'Delemont', 'Franches-Mnt', 'Moutier', 'Neuveville'), class = 'data.frame'), 6);`<=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators110_5e09a2dbdb2811ad41daadd0ac7279bd");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators112_3963dd31b169d53844495e248c650658() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`!`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators112_3963dd31b169d53844495e248c650658");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators113_01361d047460f0e4f1c56abbee309be7() {
        assertEval("argv <- list(structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c('fm2', 'original'), class = c('ordered', 'factor')), 'original');`!=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators113_01361d047460f0e4f1c56abbee309be7");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators117_f4d25de202ad38dda3ae11229b98daf1() {
        assertEval("argv <- list(structure(c(9L, 4L, 6L, 5L, 3L, 10L, 5L, 3L, 5L), .Dim = 9L, .Dimnames = structure(list(x = c('0', '1', '2', '3', '4', '5', '6', '7', '8')), .Names = 'x'), class = 'table'), c(9, 4, 6, 5, 3, 10, 5, 3, 5));`==`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators117_f4d25de202ad38dda3ae11229b98daf1");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators118_b18ea452ac5c1a357275e5976a3933e6() {
        assertEval("argv <- list(structure(c('white', 'aquamarine3', 'bisque2', 'blueviolet', 'burlywood4', 'chartreuse4', 'coral4', 'cyan3', 'darkgreen', 'darkorange1', 'aliceblue', 'white', 'white', 'white', 'white', 'chocolate', 'cornflowerblue', 'cyan4', 'darkgrey', 'darkorange2', 'antiquewhite', 'white', 'white', 'white', 'white', 'chocolate1', 'cornsilk', 'darkblue', 'darkkhaki', 'darkorange3', 'antiquewhite1', 'white', 'white', 'white', 'white', 'chocolate2', 'cornsilk1', 'darkcyan', 'darkmagenta', 'darkorange4', 'antiquewhite2', 'azure2', 'blanchedalmond', 'brown3', 'cadetblue3', 'chocolate3', 'cornsilk2', 'darkgoldenrod', 'darkolivegreen', 'darkorchid', 'antiquewhite3', 'azure3', 'blue', 'brown4', 'cadetblue4', 'chocolate4', 'cornsilk3', 'darkgoldenrod1', 'darkolivegreen1', 'darkorchid1', 'antiquewhite4', 'azure4', 'blue1', 'burlywood', 'chartreuse', 'coral', 'cornsilk4', 'darkgoldenrod2', 'darkolivegreen2', 'darkorchid2', 'aquamarine', 'beige', 'blue2', 'burlywood1', 'chartreuse1', 'coral1', 'cyan', 'darkgoldenrod3', 'darkolivegreen3', 'darkorchid3', 'aquamarine1', 'bisque', 'blue3', 'burlywood2', 'chartreuse2', 'coral2', 'cyan1', 'darkgoldenrod4', 'darkolivegreen4', 'darkorchid4', 'aquamarine2', 'bisque1', 'blue4', 'burlywood3', 'chartreuse3', 'coral3', 'cyan2', 'darkgray', 'darkorange', 'darkred'), .Dim = c(10L, 10L), class = 'raster'), 'white');`==`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators118_b18ea452ac5c1a357275e5976a3933e6");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators120_571abbafc889c01f539529e23ed0df5e() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), .Tsp = c(1959, 1997.91666666667, 12), class = 'ts'), 10L);`==`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators120_571abbafc889c01f539529e23ed0df5e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators126_b247bd4cada9ea987df987f69c0254ca() {
        assertEval("argv <- list(structure(list(cde = 2L, cd = 4L), .Names = c('cde', 'cd'), row.names = 'ab', class = 'data.frame'), c(2, 4));`==`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators126_b247bd4cada9ea987df987f69c0254ca");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators130_3c02add1a8cf420daac6027427811d6e() {
        assertEval("argv <- list(2, structure(list(2L), class = structure('L', package = '.GlobalEnv')));`==`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators130_3c02add1a8cf420daac6027427811d6e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators133_e32b26a50a63f1258a04c3a15f9dcf48() {
        assertEval("argv <- list(structure(c(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2), .Dim = 5:6), structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Dim = 5:6, .Dimnames = structure(list(blocks = c('1', '2', '3', '4', '5'), varieties = c('1', '2', '3', '4', '5', '6')), .Names = c('blocks', 'varieties')), class = 'table'));`==`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators133_e32b26a50a63f1258a04c3a15f9dcf48");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators137_d7562afd541b429a3dd6aa47e2c317ed() {
        assertEval("argv <- list(structure(c(2, 1, 0, 1, 2), .Tsp = c(-1, 3, 1), class = 'ts'), 1e-05);`>`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators137_d7562afd541b429a3dd6aa47e2c317ed");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators142_465d2b76c425c07e19e8cc91d98b7adf() {
        assertEval("argv <- list(structure(list(c(3L, 0L, 1L)), class = c('R_system_version', 'package_version', 'numeric_version')), structure('2.13.2', .Names = 'SweaveListingUtils'));`>`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators142_465d2b76c425c07e19e8cc91d98b7adf");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators144_2c2a189933293f0c5f22857e79b2ce05() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`>`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators144_2c2a189933293f0c5f22857e79b2ce05");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators147_462aea9b8c69f122f1fbbf5284cb92ad() {
        assertEval("argv <- list(structure(0, .Tsp = c(1, 1, 1), class = 'ts'), 1e-05);`>`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators147_462aea9b8c69f122f1fbbf5284cb92ad");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators149_87fdd96024fbf3cfb8357070b43cc815() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`>=`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators149_87fdd96024fbf3cfb8357070b43cc815");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators15_be9fcc00dbcfc2be825cda4e77962a47() {
        assertEval("argv <- list(structure(c(1976, 1976.08333333333, 1976.16666666667, 1976.25, 1976.33333333333, 1976.41666666667, 1976.5, 1976.58333333333, 1976.66666666667, 1976.75, 1976.83333333333, 1976.91666666667, 1977, 1977.08333333333, 1977.16666666667, 1977.25, 1977.33333333333, 1977.41666666667, 1977.5, 1977.58333333333, 1977.66666666667, 1977.75, 1977.83333333333, 1977.91666666667, 1978), .Tsp = c(1976, 1978, 12), class = 'ts'), 0.001);`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators15_be9fcc00dbcfc2be825cda4e77962a47");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators151_3209b807e669f4a6a3baf1f44553e5a9() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 6L, 2L, 4L, 3L, 7L, 2L, 8L, 4L, 2L, 2L, 1L, 3L, 3L, 4L, 3L, 2L, 1L, 2L, 3L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 4L, 1L, 1L, 1L, 1L, 2L, 1L, 5L, 2L, 1L, 3L, 2L, 2L, 6L, 2L, 1L, 2L, 5L, 2L, 2L, 2L, 4L, 4L, 1L, 1L, 3L, 4L, 2L, 2L, 2L, 1L, 5L, 4L, 4L, 1L, 1L, 4L, 2L, 3L, 2L, 1L, 8L, 1L, 5L, 1L, 3L, 4L, 4L, 1L, 3L, 1L, 2L, 6L, 1L, 1L, 1L, 1L, 1L, 6L, 2L, 2L, 1L, 1L, 2L, 3L, 1L, 1L, 1L, 1L), .Dim = 124L, .Dimnames = structure(list(ne60 = c('96', '100', '102', '104', '105', '107', '108', '109', '110', '111', '112', '113', '115', '116', '117', '118', '119', '120', '121', '122', '124', '125', '126', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '149', '157', '158', '168', '173', '174', '184', '199', '200', '202', '205', '207', '210', '214', '216', '221', '223', '224', '225', '226', '229', '230', '231', '233', '235', '237', '238', '240', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '293', '294', '296', '300', '302', '304', '306')), .Names = 'ne60'), class = 'table'), 4);`>=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators151_3209b807e669f4a6a3baf1f44553e5a9");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators153_53bf623e542834ecf368110a92e1b750() {
        assertEval("argv <- list(structure(list(2L), class = 'numeric_version'), '2');`>=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators153_53bf623e542834ecf368110a92e1b750");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators157_d8f8ba1efa573693d94bd11b792c7b0e() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`%%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators157_d8f8ba1efa573693d94bd11b792c7b0e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators16_b33d95bb17cd4c1e8d54410f54d9518b() {
        assertEval("argv <- list(1.678932e-305, 0+0i);`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators16_b33d95bb17cd4c1e8d54410f54d9518b");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators168_9356a73e37f1d5b19b01f02fad7cfd07() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`%%`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators168_9356a73e37f1d5b19b01f02fad7cfd07");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators169_f1b2742960c9b0c8374d37ebe067c38e() {
        assertEval("argv <- list(structure(1:3, .Label = c('1', '2', NA), class = 'factor'), structure(1:3, .Label = c('1', '2', NA), class = 'factor'));`!=`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators169_f1b2742960c9b0c8374d37ebe067c38e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators171_e4cdd0497655c9b378c2cbdbe765935b() {
        assertEval("argv <- list(structure(c(1960.08433333333, 1960.16766666667, 1960.251, 1960.33433333333, 1960.41766666667, 1960.501, 1960.58433333333, 1960.66766666667, 1960.751, 1960.83433333333, 1960.91766666667, 1961.001, 1961.08433333333, 1961.16766666667, 1961.251, 1961.33433333333, 1961.41766666667, 1961.501, 1961.58433333333, 1961.66766666667), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'), 1);`%%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators171_e4cdd0497655c9b378c2cbdbe765935b");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators178_e404a08113583901f6b0ee9f40642ff9() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0), .Dim = c(12L, 4L), .Dimnames = list(c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), c('(Intercept)', 'M.userY', 'TempLow', 'M.userY:TempLow')), assign = 0:3, contrasts = structure(list(M.user = 'contr.treatment', Temp = 'contr.treatment'), .Names = c('M.user', 'Temp'))), c(0.262364229584951, -0.851832547542732, 0.0441056253109867, 0.444266588736502));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators178_e404a08113583901f6b0ee9f40642ff9");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators179_94961e98abe4ea3c17f840200b6529e8() {
        assertEval("argv <- list(structure(c(1976.001, 1976.08433333333, 1976.16766666667, 1976.251, 1976.33433333333, 1976.41766666667, 1976.501, 1976.58433333333, 1976.66766666667, 1976.751, 1976.83433333333, 1976.91766666667, 1977.001, 1977.08433333333, 1977.16766666667, 1977.251, 1977.33433333333, 1977.41766666667, 1977.501, 1977.58433333333, 1977.66766666667, 1977.751, 1977.83433333333, 1977.91766666667, 1978.001), .Tsp = c(1976, 1978, 12), class = 'ts'), 1);`%%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators179_94961e98abe4ea3c17f840200b6529e8");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators18_a5183b1ed31b7c2449b7c920f7faa7be() {
        assertEval("argv <- list(100.35609040323, c(16.9869197055322, 32.9569269674228, 63.9409059420178, 124.054025326065, 240.681625836759, 466.954980809107, 905.955962962971, 1757.67737910411, 3410.13238536472, 6616.11910351861, 12836.1679387595, 24903.9058659644, 48316.9533415093, 93741.4393055559, 181871.099797343, 352854.587965931, 684585.733452663, 1328189.12501195, 2576866.95120412, 4999471.20418434, 9699651.86203691, 18818639.4925072, 36510711.6612103, 70835729.9973146, 137430918.652385, 266634612.255063, 517307292.635014, 1003646273.64047, 1947209824.67014, 3777851022.69026, 7329543107.69234, 14220307218.2724, 27589323701.4766, 53527027976.3571, 103849690372.38, 201482477136.65, 390903318513.094, 758405428581.828, 1471409340525, 2854733584163.2, 5538570139592.47, 10745576876721.9, 20847875806089.6, 40447705191861.9, 78474031143733.8, 152250258320878, 295386140114522, 573089154225693, 1111870646888807, 2157179779616058, 4185221198711724, 8119896472079771, 15753699885107074, 30564313341110788, 59298911165416064, 115047926192872144, 223208572655883520, 433054888999496256, 840185189372140416, 1630073162483360512, 3162562907154039296, 6135800755390145536, 11904285231665293312, 23095927088628809728, 44809229424741679104, 86935979401654583296, 1.68667585038894e+20, 3.27237979472409e+20, 6.34886040400066e+20, 1.23176498322335e+21, 2.3897910449238e+21, 4.63651858608037e+21, 8.99547458123233e+21, 1.74524401098118e+22, 3.38600996574481e+22, 6.56931833943232e+22, 1.2745368112143e+23, 2.47277418935474e+23, 4.79751713543167e+23, 9.30783359186e+23, 1.80584589336672e+24, 3.50358583273485e+24, 6.79743145992125e+24, 1.31879384887967e+25, 2.55863884188836e+25, 4.96410620111801e+25, 9.63103896202531e+25, 1.8685521165353e+26, 3.62524440610747e+26, 7.03346558424191e+26, 1.36458766866515e+27, 2.64748506006045e+27, 5.13647990832267e+27, 9.96546732089944e+27, 1.93343575165167e+28, 3.75112745382766e+28, 7.27769576146466e+28, 1.41197163381895e+29, 2.73941637580644e+29, 5.31483912303488e+29));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators18_a5183b1ed31b7c2449b7c920f7faa7be");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators182_7ccd4493bbbe1b9fc4ee89461780fe08() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.35, 0.64, 0.12, 1.66, 1.52, 0.23, -1.99, 0.42, 1.86, -0.02, -1.64, -0.46, -0.1, 1.25, 0.37, 0.31, 1.11, 1.65, 0.33, 0.89, -0.25, -0.87, -0.22, 0.71, -2.26, 0.77, -0.05, 0.32, -0.64, 0.39, 0.19, -1.62, 0.37, 0.02, 0.97, -2.62, 0.15, 1.55, -1.41, -2.35, -0.43, 0.57, -0.66, -0.08, 0.02, 0.24, -0.33, -0.03, -1.13, 0.32, 1.55, 2.13, -0.1, -0.32, -0.67, 1.44, 0.04, -1.1, -0.95, -0.19, -0.68, -0.43, -0.84, 0.69, -0.65, 0.71, 0.19, 0.45, 0.45, -1.19, 1.3, 0.14, -0.36, -0.5, -0.47, -1.31, -1.02, 1.17, 1.51, -0.33, -0.01, -0.59, -0.28, -0.18, -1.07, 0.66, -0.71, 1.88, -0.14, -0.19, 0.84, 0.44, 1.33, -0.2, -0.45, 1.46, 1, -1.02, 0.68, 0.84), .Dim = c(100L, 2L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'), c('(Intercept)', 'x')), assign = 0:1), c(1.15937252188199, 0.442508987631707));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators182_7ccd4493bbbe1b9fc4ee89461780fe08");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators183_b023dc44c55f056cf7a6b66b76a1eaff() {
        assertEval("argv <- list(c(-3, -2, -1, 0, 1, 2, 3, 4, 5), structure(c(-3, -2, -1, 0, 1, 2, 3, 4, 5), .Dim = c(1L, 9L)));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators183_b023dc44c55f056cf7a6b66b76a1eaff");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators185_fb8e8d4281a54bf250bed4f01eefbfab() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(10L, 0L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), NULL)), structure(numeric(0), .Names = character(0)));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators185_fb8e8d4281a54bf250bed4f01eefbfab");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators186_8ac8d377f486f1b899533c7cc99143d1() {
        assertEval("argv <- list(structure(c(0.553622032575332, 0, 0, 0, 0, 1.83583330034692, 0, 0, 0, 0, 0.540309168173204, 0, 0, 0, 0, 0.347171956892285), .Dim = c(4L, 4L)), structure(c(3.26267089696047, -0.712693854979374, 2.39769041729195, 5.15111718577956, -0.712693854979374, 0.296710908544859, -1.00753262176762, -0.987904999293151, 2.39769041729195, -1.00753262176762, 3.42543180838832, 3.32535677689614, 5.15111718577956, -0.987904999293151, 3.32535677689614, 8.29680198510459), .Dim = c(4L, 4L), .Dimnames = list(c('A', 'B', 'C', 'D'), c('A', 'B', 'C', 'D'))));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators186_8ac8d377f486f1b899533c7cc99143d1");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators19_35579b6bb06ebf62a6bd7cd24bb396bb() {
        assertEval("argv <- list(structure(csp = c(1971, 2000, 1), class = 'ts'), structure(c(96.1627886140128, 99.5328179233045, 102.792420797859, 105.951789523417, 109.019638748919, 112.00348906474, 114.909884224142, 117.744560053261, 120.512577567101, 123.218429147578, 125.866124161059, 128.459258681722, 131.001072784874, 133.494498015905, 135.942197018618, 138.34659685001, 140.70991716901, 143.034194231449, 145.321301429523, 147.572966965162, 149.790789131479, 151.976249586445, 154.130724932091, 156.255496856342, 158.351761049736, 160.420635073182, 162.463165323754, 164.480333221768, 166.473060722972, 168.442215243699), .Tsp = c(1971, 2000, 1), class = 'ts'));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators19_35579b6bb06ebf62a6bd7cd24bb396bb");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators192_aa8cb7d7de7b90b7539ec5efc857a229() {
        assertEval("argv <- list(structure(c(TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, NA), .Dim = c(5L, 2L), .Dimnames = list(NULL, c('VAR1', 'VAR3'))), structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE), .Dim = c(5L, 2L), .Dimnames = list(NULL, c('VAR1', 'VAR3'))));`&`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators192_aa8cb7d7de7b90b7539ec5efc857a229");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators195_1f782bffbabe014b420a84d687c86893() {
        assertEval("argv <- list(7);`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators195_1f782bffbabe014b420a84d687c86893");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators196_142ffc9dea969943aeb191a1afc8cbfb() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('NA', 'a', 'b'), class = 'factor'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators196_142ffc9dea969943aeb191a1afc8cbfb");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators197_18c86837ef5f2eba92f53fec19141f30() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators197_18c86837ef5f2eba92f53fec19141f30");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators198_602c14ccaf426a573c611426bbd5ffb2() {
        assertEval("argv <- list(structure(c(0.500999999999976, 0.584333333333234, 0.667666666666719, 0.750999999999976, 0.834333333333234, 0.917666666666719, 0.000999999999976353, 0.0843333333332339, 0.167666666666719, 0.250999999999976), .Tsp = c(1920.5, 1921.25, 12), class = 'ts'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators198_602c14ccaf426a573c611426bbd5ffb2");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators20_07aa2ed9c77431e83e27219551fdf866() {
        assertEval("argv <- list(structure(978350400, class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), c(1605796.39468342, 2250605.34500331, 3464617.14155227, 5492840.71388841, 1219772.31891453, 5433460.81468463, 5713396.02452517, 3996505.04896045, 3804881.73750043, 373683.36378783, 1245734.22899097, 1067815.23929536, 4155114.17658627, 2323059.28775668, 4656000.90815127, 3010085.0161314, 4340156.73798323, 5999048.06153476, 2298452.76521891, 4701988.69854212, 5653097.23772854, 1283037.96871752, 3941322.93728739, 759357.220374048, 1616150.60446411, 2335218.03170443, 80984.7349449992, 2312682.3643595, 5259890.2349174, 2058430.73196709, 2915620.53836882, 3626174.11217093, 2984937.82503158, 1126244.053334, 5003953.83093506, 4042886.83258742, 4803562.677674, 652843.049369752, 4377003.8016513, 2487387.75048405, 4965083.1868127, 3913420.05222291, 4735177.34632641, 3344763.6128068, 3203744.02103573, 4774026.48925781, 141107.11171478, 2886287.43334115, 4429033.49147737, 4189640.45360684, 2888643.47467571, 5208594.91588175, 2649611.30449176, 1480533.93148631, 427466.877132654, 601571.336723864, 1912811.28504127, 3136700.02379268, 4003806.70217425, 2460508.97211581, 5521073.589921, 1775713.19845319, 2776429.51241881, 2010322.98948616, 3936464.58484232, 1560485.48977822, 2894241.66157097, 4634646.93606645, 509525.338098407, 5293943.40406358, 2050713.12808245, 5076935.23793668, 2096741.74243212, 2018670.78146338, 2880972.33020514, 5396015.5351907, 5227525.11837333, 2358656.75892681, 4701235.58655381, 5809817.647174, 2628820.56391239, 4309288.77686709, 2419165.9430936, 1967729.81455922, 4578863.07127029, 1225882.75911659, 4300861.15349829, 735992.738373578, 1484714.53242749, 866704.886756837, 1449278.70250493, 356435.113750398, 3884559.38760191, 5299676.19835585, 4710875.96918643, 4822123.77896905, 2753499.89549071, 2480188.52821738, 4904143.22827756, 3658636.53959334));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators20_07aa2ed9c77431e83e27219551fdf866");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators200_5366838236a082b9786d7f10e8ca6b3c() {
        assertEval("argv <- list(structure(list(coefficients = structure(NA_real_, .Names = 'x'), residuals = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), effects = structure(c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), .Names = c('', '', '', '', '', '', '', '', '', '')), rank = 0L, fitted.values = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), assign = 1L, qr = structure(list(qr = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(10L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), 'x'), assign = 1L), qraux = 0, pivot = 1L, tol = 1e-07, rank = 0L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 10L, xlevels = structure(list(), .Names = character(0)), call = quote(lm(formula = y ~ x + 0)), terms = quote(y ~ x + 0), model = structure(list(y = c(-0.667819876370237, 0.170711734013213, 0.552921941721332, -0.253162069270378, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, -1.36919169254062, 0.0881443844426084, -0.0834190388782434), x = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)), .Names = c('y', 'x'), terms = quote(y ~ x + 0), row.names = c(NA, 10L), class = 'data.frame')), .Names = c('coefficients', 'residuals', 'effects', 'rank', 'fitted.values', 'assign', 'qr', 'df.residual', 'xlevels', 'call', 'terms', 'model'), class = 'lm'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators200_5366838236a082b9786d7f10e8ca6b3c");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators202_b3fbde75053cf8633e601c73255f8b01() {
        assertEval("argv <- list(structure(list(A = c(1, NA, 1), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA_integer_, NA_integer_, NA_integer_), E = c(FALSE, NA, TRUE), F = c('abc', NA, 'def')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators202_b3fbde75053cf8633e601c73255f8b01");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators203_40af1d5a95cb0b7cc8dc9bc1497098f5() {
        assertEval("argv <- list(structure(1395082079.73982, class = c('POSIXct', 'POSIXt')));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators203_40af1d5a95cb0b7cc8dc9bc1497098f5");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators204_b266862648145727fc3cdb5da5b70ae1() {
        assertEval("argv <- list(quote(y ~ a + b:c + d + e + e:d));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators204_b266862648145727fc3cdb5da5b70ae1");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators205_f7746e8d4d0d3c6b787e72d1c465d3fd() {
        assertEval("argv <- list(structure(c(-Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, 0, 0, 1, 1, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, Inf, -Inf, -Inf, -Inf, -Inf, 0, 1, 1, 1, Inf, -Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.6, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.4, 0.8, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.533333333333334, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.525, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 0, 1, 2, Inf, Inf, Inf, -Inf, -Inf, 0, 0.5, 1, 2, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 1, 2, 2, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.8, 1.6, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.3, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.4, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.2, 1.9, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.499999999999999, 1.33333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.325, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.6, 2.7, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.1, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.2, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.13333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.125, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 3, 4, Inf, Inf, Inf, -Inf, -Inf, 0, 1.5, 3, 4, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 4, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.4, 3.8, Inf, Inf, Inf, -Inf, -Inf, 0.100000000000001, 1.5, 2.9, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1.5, 3, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 1.5, 2.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.0666666666666664, 1.5, 2.93333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.0750000000000002, 1.5, 2.925, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 3, 5, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1.5, 3.2, 4.9, Inf, Inf, Inf, -Inf, -Inf, 0.300000000000001, 2, 3.7, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 2, 3.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.4, 2, 3.6, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.266666666666667, 2, 3.73333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.275, 2, 3.725, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L, 6L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL, NULL)));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators205_f7746e8d4d0d3c6b787e72d1c465d3fd");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators206_5b1d50338aecad5d6bc7dd1668bf3be7() {
        assertEval("argv <- list(structure(character(0), .Dim = c(0L, 7L), .Dimnames = list(NULL, c('description', 'class', 'mode', 'text', 'isopen', 'can read', 'can write'))));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators206_5b1d50338aecad5d6bc7dd1668bf3be7");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators207_aaa3ff64d428394173323d4657ee2d20() {
        assertEval("argv <- list(structure(list(coefficients = structure(c(1.47191076131574, 0.586694550701453, NA, 0.258706725324317), .Names = c('(Intercept)', 'x1', 'x2', 'x3')), residuals = structure(c(0.224762433374997, 0.4813346401898, -0.548705796690786, -0.873306430909872, 0.3255545927283, -0.288240908441576, 0.530823516045489, -0.0649703574297026, 1.2699009772491, -1.05715266611575), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), effects = structure(c(-18.0083860263211, 7.91372047070235, 0.594462796282497, -0.733976126666906, 0.546582698364345, -0.032332374655677, 0.774795104738016, 0.120246912926227, 1.34954655602521, -1.1298961521627), .Names = c('(Intercept)', 'x1', 'x3', '', '', '', '', '', '', '')), rank = 3L, fitted.values = structure(c(2.08447598454963, 2.74878255284838, 3.46483046621199, 4.23261972464046, 5.0521503281338, 5.923422276692, 6.84643557031507, 7.821190209003, 8.84768619275579, 9.92592352157344), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')), assign = 0:3, qr = structure(list(    qr = structure(c(-3.16227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, 0.316227766016838, -17.3925271309261, 9.08295106229247, 0.15621147358221, 0.0461150970695743, -0.0639812794430617, -0.174077655955698, -0.284174032468334, -0.39427040898097, -0.504366785493606, -0.614463162006242, -12.1747689916483, 9.99124616852172, 2.29782505861521, 0.388354773181155, 0.471167347118467, 0.46694109307793,     0.375676011059543, 0.197372101063308, -0.0679706369107753, -0.420352202862709, -17.3925271309261, 9.08295106229247, 1.30962518065979e-16, -1.00907321685019e-15, 0.0501848681992808, -0.170313338748631, 0.0400139169574381, -0.419073670426332, -0.887431917453648, -0.0447724572319277), .Dim = c(10L, 4L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), c('(Intercept)', 'x1', 'x3', 'x2')), assign = 0:3), qraux = c(1.31622776601684, 1.26630785009485, 1.21850337126599, 1.04136435435488    ), pivot = c(1L, 2L, 4L, 3L), tol = 1e-07, rank = 3L), .Names = c('qr', 'qraux', 'pivot', 'tol', 'rank'), class = 'qr'), df.residual = 7L, xlevels = structure(list(), .Names = character(0)), call = quote(lm(formula = y ~ x1 + x2 + x3)), terms = quote(y ~ x1 + x2 + x3), model = structure(list(y = c(2.30923841792462, 3.23011719303818, 2.9161246695212, 3.35931329373059, 5.3777049208621, 5.63518136825043, 7.37725908636056, 7.75621985157329, 10.1175871700049, 8.86877085545769), x1 = 1:10, x2 = 1:10,     x3 = c(0.1, 0.4, 0.9, 1.6, 2.5, 3.6, 4.9, 6.4, 8.1, 10)), .Names = c('y', 'x1', 'x2', 'x3'), terms = quote(y ~ x1 + x2 + x3), row.names = c(NA, 10L), class = 'data.frame')), .Names = c('coefficients', 'residuals', 'effects', 'rank', 'fitted.values', 'assign', 'qr', 'df.residual', 'xlevels', 'call', 'terms', 'model'), class = 'lm'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators207_aaa3ff64d428394173323d4657ee2d20");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators208_d6135a5c1fd8c793308d0a92ea418c1a() {
        assertEval("argv <- list(structure(c(1L, 2L, 1L), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = ''), class = 'table'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators208_d6135a5c1fd8c793308d0a92ea418c1a");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators210_5fee067a6a6c55474cc3d775a8abfea9() {
        assertEval("argv <- list(5, c(0.90483741803596, 0.042329219623205, 3.72007597602068e-44));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators210_5fee067a6a6c55474cc3d775a8abfea9");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators214_e86dfb64edf5c64c80b37aab6ef2ff32() {
        assertEval("argv <- list(0+6.28318530717959i, 1:16);`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators214_e86dfb64edf5c64c80b37aab6ef2ff32");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators215_22855dfc79710f2336fabc9d12331c1f() {
        assertEval("argv <- list(10, structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators215_22855dfc79710f2336fabc9d12331c1f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators22_c319a61658a9bb5ea5bc872037a09b0b() {
        assertEval("argv <- list(1, structure(list(x = 1:9, y = c(-0.626453810742332, 0.183643324222082, -0.835628612410047, 1.59528080213779, 0.329507771815361, -0.820468384118015, 0.487429052428485, 0.738324705129217, 0.575781351653492)), .Names = c('x', 'y'), row.names = c(NA, -9L), class = 'data.frame'));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators22_c319a61658a9bb5ea5bc872037a09b0b");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators220_5263155c59a61b91d81ea9cfd5dd43bc() {
        assertEval("argv <- list(structure(11323, class = 'Date'), c(12, 24, 36, 48, 60, 72, 84, 96, 108));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators220_5263155c59a61b91d81ea9cfd5dd43bc");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators226_1a3b907b3ae8e622718ee00e0bb4e27f() {
        assertEval("argv <- list(1, structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8), .Tsp = c(1960.08333333333, 1961.66666666667, 12), class = 'ts'));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators226_1a3b907b3ae8e622718ee00e0bb4e27f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators230_9b8fcc67ae4bc76690c713e51ddb4e64() {
        assertEval("argv <- list(structure(1:10, .Tsp = c(1920.5, 1921.25, 12), class = 'ts'), 1);`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators230_9b8fcc67ae4bc76690c713e51ddb4e64");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators233_2f935b5e8e410108e11f647cdc663a73() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Tsp = c(3, 10, 1), class = 'ts'), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Tsp = c(3, 10, 1), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators233_2f935b5e8e410108e11f647cdc663a73");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators234_712dc2f75f71128c9b32cabf45b45568() {
        assertEval("argv <- list(c(-1.04843842027757e+143, -9.998687937523e+136, -9.53549188377803e+130, -9.09375370386458e+124, -8.67247934711978e+118, -8.27072081298779e+112, -7.88757401780305e+106, -7.52217676063816e+100, -7.17370678430818e+94, -6.84137992972049e+88, -6.5244483891549e+82, -6.22219909169008e+76, -5.93395235884653e+70, -5.65906136797865e+64, -5.39691448428537e+58, -5.14694833309681e+52, -4.90870165301755e+46, -4.68202458334831e+40, -4.46788150641526e+34, -4.27143012156591e+28, -4.11397031483551e+22, -40816513889983680, -45637199262.2201, -83492.8982026505, -1.56717399085881, -0.0019371698216247, -0.0388983050293216, 0.00184649674288725, -0.049895679671468, 0.0161192923654623, -0.0169866996250208));`-`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators234_712dc2f75f71128c9b32cabf45b45568");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators236_8c9f50adf9e2f881ade79b39fa098979() {
        assertEval("argv <- list(structure(1395082079.75887, class = c('POSIXct', 'POSIXt')), 3600);`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators236_8c9f50adf9e2f881ade79b39fa098979");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators238_861e6ce652bbbabc9f8e1cff5660a21f() {
        assertEval("argv <- list(structure(2:10, .Tsp = c(2, 10, 1), class = 'ts'), structure(1:9, .Tsp = c(2, 10, 1), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators238_861e6ce652bbbabc9f8e1cff5660a21f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators239_e51bfdc9a9d8984829ec62ef60b55381() {
        assertEval("argv <- list(structure(0:100, .Tsp = c(1, 101, 1), class = 'ts'), 4);`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators239_e51bfdc9a9d8984829ec62ef60b55381");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators240_aae6e5e7305a3bb322f3ea667431da37() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 4L)), structure(numeric(0), .Dim = c(0L, 4L)));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators240_aae6e5e7305a3bb322f3ea667431da37");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators241_ae3ad235a8d0266f24112d4d0b6f0c0a() {
        assertEval("argv <- list(structure(c(1L, 0L, 0L, 1L), .Dim = c(2L, 2L), .Dimnames = structure(list(x = c('1', '2'), y = c('1', '2')), .Names = c('x', 'y')), class = 'table'), 1);`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators241_ae3ad235a8d0266f24112d4d0b6f0c0a");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators244_9a65cfac70238a0414e8b3c3b5e589bf() {
        assertEval("argv <- list(10, structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), .Tsp = c(1, 10, 1), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators244_9a65cfac70238a0414e8b3c3b5e589bf");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators247_9fdf83a940a8bcab06a67e3de62b8e6f() {
        assertEval("argv <- list(50, 51);`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators247_9fdf83a940a8bcab06a67e3de62b8e6f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators248_85f4772e959deebbadece4f185c7ee15() {
        assertEval("argv <- list(-1, 1);`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators248_85f4772e959deebbadece4f185c7ee15");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators249_cda9a5e8de2675d38da1f68773327db1() {
        assertEval("argv <- list(1L, structure(15L, .Names = 'nc'));`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators249_cda9a5e8de2675d38da1f68773327db1");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators25_94848b7ea7d53e36131ab0bc83cf147f() {
        assertEval("argv <- list(c(-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -1000, -10000, -1e+05, -1e+06, -1e+07, -1e+08, -1e+09, -1e+10, -1e+20, -1e+50, -1e+150, -1e+250, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1000, 10000, 1e+05, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+20, 1e+50, 1e+150, 1e+250));`+`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators25_94848b7ea7d53e36131ab0bc83cf147f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators250_27d6c85002551534a37a3c6fddf4e7a8() {
        assertEval("argv <- list(-20, 10);`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators250_27d6c85002551534a37a3c6fddf4e7a8");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators251_4acd567774644f8db8d564451d988926() {
        assertEval("argv <- list(-7L, -1L);`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators251_4acd567774644f8db8d564451d988926");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators257_2a7b56ed5b37bd0f3f27ae78c16117bb() {
        assertEval("argv <- list(structure(c(1, 1.4142135623731, 1.73205080756888, 2, 2.23606797749979, 2.44948974278318, 2.64575131106459, 2.82842712474619, 3, 3.16227766016838), id = 'test 1', class = structure('withId', package = '.GlobalEnv')), 1);`%%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators257_2a7b56ed5b37bd0f3f27ae78c16117bb");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators26_afc6633c2f1cbf34a1ded26bfdb5f905() {
        assertEval("argv <- list(structure(c(1+1i, 2+2i, 1.2+10i, 2.4+20i), .Dim = c(2L, 2L), .Dimnames = list(c('x', ''), c('a', 'b'))), 3.14159265358979);`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators26_afc6633c2f1cbf34a1ded26bfdb5f905");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators261_cba752dcaf75cdd4235e6d15b592d9fa() {
        assertEval("argv <- list(structure(list(VAR1 = c(1, 2, 3, 4, 5), VAR3 = c(1, 1, 1, 1, NA)), .Names = c('VAR1', 'VAR3'), class = 'data.frame', row.names = c(NA, -5L)), 1);`==`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators261_cba752dcaf75cdd4235e6d15b592d9fa");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators272_b8f9baa9b9d7a0fe22ff221de6356d02() {
        assertEval("argv <- list(structure(c(4, 3, 2, 1, 0), .Tsp = c(-1, 3, 1), class = 'ts'), 1e-05);`>`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators272_b8f9baa9b9d7a0fe22ff221de6356d02");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators275_29b7b05d53003db4b3a2643bf427ddca() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8), .Tsp = c(3, 11, 1), class = 'ts'), 1e-05);`>`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators275_29b7b05d53003db4b3a2643bf427ddca");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators278_792332dbd82da01c08d0f16ca5dba9e2() {
        assertEval("argv <- list(2, c(1, 53.6315789473684, 106.263157894737, 158.894736842105, 211.526315789474, 264.157894736842, 316.789473684211, 369.421052631579, 422.052631578947, 474.684210526316, 527.315789473684, 579.947368421053, 632.578947368421, 685.210526315789, 737.842105263158, 790.473684210526, 843.105263157895, 895.736842105263, 948.368421052632, 1001));`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators278_792332dbd82da01c08d0f16ca5dba9e2");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators281_675f8f4e7f7bd537b62f36ad4ed49a8e() {
        assertEval("argv <- list(c(2, 13954490295224484, 9.73638996997572e+31, 6.79331796732739e+47, 4.73986448237219e+63, 3.30711964599708e+79, 2.30745845026066e+95, 1.60997032753976e+111, 1.12331576556267e+127, 7.83764947450857e+142, 5.46852017646992e+158, 3.8155205865895e+174, 2.66218224983966e+190, 1.85746981847535e+206, 1.29600222777925e+222, 9.04252525506755e+237, 6.30919154580821e+253, 4.40207760983472e+269, 3.07143746426322e+285, 2.14301721437253e+301), 0.9);`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators281_675f8f4e7f7bd537b62f36ad4ed49a8e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators283_08daf5a5098696a0e77f2715e68cca0b() {
        assertEval("argv <- list(10, structure(c(2.62236698682835, 2.59270366218715, 2.63940608371058, 2.64731958493827, 2.65803373028597, 2.71373162990423, 2.77064097627242, 2.76566849458896, 2.68535956033309, 2.6323339540094, 2.56646882037186, 2.60930482928073, 2.61873883018004, 2.58963301587663, 2.63649393196055, 2.64432599746861, 2.65480384168506, 2.71016075212057, 2.76665607635342, 2.76121751481566, 2.68040487260442, 2.62684815424423, 2.56043192269559, 2.60270233556967), .Tsp = c(1961, 1962.91666666667, 12), class = 'ts'));`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators283_08daf5a5098696a0e77f2715e68cca0b");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators284_43753229a309be4dc33d779a1b8db7c0() {
        assertEval("argv <- list(10, -324:-307);`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators284_43753229a309be4dc33d779a1b8db7c0");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators286_ff3ef1d5b2c96bd936ec4586644beb36() {
        assertEval("argv <- list(c(-0.672916599964862, -0.584338371560402, 0.572115715156077, -0.341116997543456, -0.218053452331652, 0.603114283893957, -0.415268358002702, -0.0134950134274691, 0.76321585191833, 0.804319710846886, 0.0536892937002835, 1.74635019377278, -0.471646028332481, 1.63758588525433, -0.578351427808452, 0.946667542637206, -0.329423655668059, -0.187791022191408, 0.794323068130594, 0.894218687970535, -1.22656982031204, 1.0590522527981, 0.612808669537666, -0.939425042488798, 2.69005530237799, -5.30421668373535, 2.81829750013497, -0.200427817155017, 0.828486397910241, 0.279395276763307, 0.0200169554117855, -0.787735991519008, -1.29364959334893, -0.511638483749587, 0.113049755514737, 1.10102046217428, -0.306657900899176, 0.268100169311174, -0.305146107712725, 0.396162277846222, 0.0150939553276523, 1.49211381144096, -1.92447564755755, 0.872283353434605, -1.19828539105242, 0.249023119183754, -0.888972367366677, -0.343085496017779, -0.789859289813313, 2.25212409468034, 2.24112978772768, -0.268185452742113, -0.258069470254978, -1.83609460856723, -0.0896167695808968, -0.0862703217063487, -0.00265875112142955, -0.414323880711934, -0.87767314293053, -2.22003587446461, -0.8313148988929, 0.832662806275473, -0.671837383858861, -1.85809916947114, -0.433937023889368, -0.851823367571459, -1.57641862799745, -0.880161315252144, -0.658071675968036, -1.21910415241982, -0.103154147995399, -1.92102359833593, 0.794527839025225, -1.0143657782449, 0.633288668140732, -0.0981774734963654, -0.927622152862583, -1.15272382197142, 3.28038998456465, -2.43807429671523, 0.0242203067253644, -0.377015290181077, 1.18353877313309, -5.69817122824189, -0.316441438096387, -0.0880345184260629, -0.161984388003683, -1.04890926431944, 3.34283466347557, -1.14655469197163, -0.0469559138168916, 4.57732396845363, -1.10972642208237, 6.74369483998494, -4.51689622564278, -0.942648739247179, 2.19288903907033, 1.26921808442688, -0.705352464586085, 0.00567568850361933), 2);`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators286_ff3ef1d5b2c96bd936ec4586644beb36");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators289_19fc834348250e6c771211b9164d49d4() {
        assertEval("argv <- list(0+0i, -3:3);`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators289_19fc834348250e6c771211b9164d49d4");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators293_568ce8a6aca5a836a71cd668a1f5efe3() {
        assertEval("argv <- list(c(NA, -2L, -1L, 0L, 1L, 2L, NA, NA, NA), 0L);`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators293_568ce8a6aca5a836a71cd668a1f5efe3");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators294_1cd1748b71932f9d34d8b2c9ef3c983d() {
        assertEval("argv <- list(c(-4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i, -4+0i, -3+0i, -2+0i, -1+0i, 0+0i, 1+0i, 2+0i, 3+0i, 4+0i, 5+0i, 6+0i, 7+0i, 8+0i, 9+0i, 10+0i, 11+0i, 12+0i), c(-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2));`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators294_1cd1748b71932f9d34d8b2c9ef3c983d");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators296_51f2c48689a0bed4d74857a288e4a9a8() {
        assertEval("argv <- list(17L, c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 77L, 50L, 49L, 48L, 47L, 46L, 45L, 44L, 43L, 42L, 41L, 40L, 10L));`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators296_51f2c48689a0bed4d74857a288e4a9a8");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators298_34c8f553c73b10b2f2843a40e4dd7eac() {
        assertEval("argv <- list(structure(c(4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L), .Dim = 27L, .Dimnames = structure(list(groups = c('M01', 'M02', 'M03', 'M04', 'M05', 'M06', 'M07', 'M08', 'M09', 'M10', 'M11', 'M12', 'M13', 'M14', 'M15', 'M16', 'F01', 'F02', 'F03', 'F04', 'F05', 'F06', 'F07', 'F08', 'F09', 'F10', 'F11')), .Names = 'groups'), class = 'table'), 2);`^`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators298_34c8f553c73b10b2f2843a40e4dd7eac");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators3_c66be1d536a6f13e7f65182c12d8efdf() {
        assertEval("argv <- list(2.2250738585072e-308, c(0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 1e+05, 1e+10));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators3_c66be1d536a6f13e7f65182c12d8efdf");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators30_0bfe9d1e193d8b5ba535dfcd6894b791() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0i, 1.39139505579429+0i, 0.928710764113827+0i, -0.469267985412949+0i, 0.7424437487+0i, 0.460916205989202+0i, -0.452623703774585+0i, -0.0945011868321433+0i, -0.331818442379127+0i, 1.39139505579429+0i, -0.452623703774585+0i, 0.400771450594052+0i, -0.927967220342259+0i, -0.790922791530657+0i, 0.928710764113827+0i, -0.0945011868321433+0i, -0.927967220342259+0i, 0.701355901563686+0i, -0.600841318509537+0i, -0.469267985412949+0i, -0.331818442379127+0i, -0.790922791530657+0i, -0.600841318509537+0i, -0.625039267849257+0i), .Dim = c(5L, 5L)), c(0-1.68669331074241i, 0+0.837787044494525i, 0+0.153373117836515i, 0-1.13813693701195i, 0+1.25381492106993i, 0+0.426464221476814i, 0-0.295071482992271i, 0+0.895125661045022i, 0+0.878133487533042i, 0+0.821581081637487i, 0+0.688640254100091i, 0+0.553917653537589i, 0-0.0619117105767217i, 0-0.305962663739917i, 0-0.380471001012383i, 0-0.694706978920513i, 0-0.207917278019599i, 0-1.26539635156826i, 0+2.16895596533851i, 0+1.20796199830499i, 0-1.12310858320335i, 0-0.402884835299076i, 0-0.466655353623219i, 0+0.779965118336318i, 0-0.0833690664718293i));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators30_0bfe9d1e193d8b5ba535dfcd6894b791");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators303_5bcf0f1b3564d3793debc5b173a9e2fc() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`^`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators303_5bcf0f1b3564d3793debc5b173a9e2fc");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators307_97f4b55ca348d8b64508588c17130859() {
        assertEval("argv <- list(logical(0), structure(logical(0), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)));`|`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators307_97f4b55ca348d8b64508588c17130859");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators31_259b3b45a792b07127e7cd32b902540e() {
        assertEval("argv <- list(structure(FALSE, class = structure('foo', package = '.GlobalEnv')), NA);`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators31_259b3b45a792b07127e7cd32b902540e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators312_f0e28dda5fd6a79f4fce4f88da41e681() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0), .Dim = c(6L, 3L), .Dimnames = structure(list(`  p L s` = c('. . .', '. | .', '. . |', '. | |', '. . ?', '. | ?'), c('perm', 'LDL', 'super')), .Names = c('  p L s', ''))), c(4, 2, 1));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators312_f0e28dda5fd6a79f4fce4f88da41e681");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators313_752d12f515bacd25ca236c8fb4b76e1f() {
        assertEval("argv <- list(structure(c(NA, FALSE, TRUE, NA, FALSE, TRUE, NA, FALSE, TRUE), .Names = c(NA, 'FALSE', 'TRUE', NA, 'FALSE', 'TRUE', NA, 'FALSE', 'TRUE')), structure(c(NA, NA, NA, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE), .Names = c(NA, NA, NA, 'FALSE', 'FALSE', 'FALSE', 'TRUE', 'TRUE', 'TRUE')));`|`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators313_752d12f515bacd25ca236c8fb4b76e1f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators314_9be667d83c3750672072fb07114a3b67() {
        assertEval("argv <- list(structure(120L, class = 'octmode'), '644');`|`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators314_9be667d83c3750672072fb07114a3b67");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators315_56ce43a2563e7f87e2d356df25867b95() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1), .Dim = c(9L, 5L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9'), c('(Intercept)', 'outcome2', 'outcome3', 'treatment2', 'treatment3')), assign = c(0L, 1L, 1L, 2L, 2L), contrasts = structure(list(outcome = 'contr.treatment', treatment = 'contr.treatment'), .Names = c('outcome', 'treatment'))), c(3.04452243772342, -0.454255272277594, -0.292987124681473, 1.33790930192987e-15, 1.42108546079721e-15));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators315_56ce43a2563e7f87e2d356df25867b95");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators318_cc9d41b8e5eef0396492bba89e9b17f4() {
        assertEval("argv <- list(structure(c(0.94232064077615, 0.62152295589611, 0.178333356339776, 0.0222599883329273), .Dim = c(4L, 1L)), structure(c(0.941251786864296, 0.603637002512359, 0.159215730735261, 0.0172717433258791), .Dim = c(1L, 4L)));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators318_cc9d41b8e5eef0396492bba89e9b17f4");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators319_4ffa5f7a2e3b74ef1e6bc38226056fb0() {
        assertEval("argv <- list(numeric(0), structure(numeric(0), .Dim = c(1L, 0L)));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators319_4ffa5f7a2e3b74ef1e6bc38226056fb0");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators320_8d5e6b6029ca80c38dd0fb444ba7b92c() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 68, 56, 60, 68, 71, 61, 68, 60, 63, 56, 49, 58, 72, 60, 70, 74, 73, 48, 60, 61, 62, 65, 74, 73, 59, 60, 76, 74, 74, 63, 68, 58, 62, 65, 57, 75, 68, 67, 64, 68, 63, 74, 51, 81, 73, 59, 61, 72, 63, 69, 72, 70, 58, 59, 75, 69, 75, 76, 49, 68, 66, 75, 60, 72, 70, 77, 48, 47, 67, 74, 56, 56, 73, 76, 71, 82, 59, 60, 62, 55, 69, 62, 62, 69, 57, 46, 65, 58, 43, 56, 74, 60, 39, 66, 51, 45, 72, 58, 53, 52, 70, 52, 63, 50, 63, 62, 55, 50, 60, 64, 76, 70, 57, 39, 75, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, NA, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(115L, 5L), .Dimnames = list(c('2', '3', '5', '7', '8', '10', '12', '14', '18', '19', '22', '24', '25', '27', '28', '30', '32', '33', '34', '35', '36', '37', '39', '42', '43', '44', '46', '47', '49', '52', '53', '54', '56', '57', '58', '61', '66', '67', '68', '69', '71', '73', '77', '79', '80', '81', '88', '90', '91', '95', '96', '100', '101', '105', '110', '111', '114', '116', '117', '118', '119', '121', '122', '124', '125', '129', '130', '133', '135', '136', '138', '140', '141', '143', '147', '149', '150', '152', '153', '155', '156', '158', '161', '163', '166', '168', '170', '172', '174', '177', '180', '181', '182', '183', '185', '186', '187', '188', '190', '192', '196', '199', '203', '204', '205', '206', '207', '208', '211', '214', '218', '219', '220', '225', '226'), c('(Intercept)', 'age', 'factor(ph.ecog)1', 'factor(ph.ecog)2', 'factor(ph.ecog)3')), assign = c(0L, 1L, 2L, 2L, 2L), contrasts = structure(list(`factor(ph.ecog)` = 'contr.treatment'), .Names = 'factor(ph.ecog)')), structure(c(6.76534252253894, -0.00731543889899693, -0.256632132912267, -0.629047717825279, -1.48257717514349), .Names = c('(Intercept)', 'age', 'factor(ph.ecog)1', 'factor(ph.ecog)2', 'factor(ph.ecog)3')));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators320_8d5e6b6029ca80c38dd0fb444ba7b92c");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators322_ed681ed33cdeef811466737c3229607a() {
        assertEval("argv <- list(c(-1, 1), structure(c(1e-05, 1e-04, 0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 1e+05), .Dim = c(1L, 11L)));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators322_ed681ed33cdeef811466737c3229607a");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators323_e8ea49f245470e4d26873635f08e993f() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L)), structure(c(0.63829956885596+0i, -0.190923866036828-0.209348060979014i, -0.478761262752136-0.086103851005322i, -0.365383456834977+0.041833555661111i, -0.222902888615007-0.301211043305794i, 0.537261763078809+0i, 0.305061935059249+0.040985454461732i, 0.320062315956695-0.375563080684186i, 0.339383913939873+0.23302799386284i, -0.286918674221019+0.348301421162371i, 0.428338589082996+0.09065231252407i, -0.107969030611945+0.281263066654197i, 0.001811723298003+0.250507832255811i, 0.144305664871353+0.232873855829054i, 0.761400139936914+0i, -0.050390571101999+0.329984002238884i, 0.120127927801654-0.008394623232215i, -0.521562263306688+0.262168616442556i, 0.691801039177503+0i, -0.206933988216912-0.109088169082914i, -0.014684754774299-0.0242358465049725i, 0.848358097780775+0i, -0.232315601522623+0.249797304698912i, -0.362004462885974+0.102815998405382i, 0.086977040883207+0.118037795588006i), .Dim = c(5L, 5L)));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators323_e8ea49f245470e4d26873635f08e993f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators324_744b448ab3e9e46915e83b1eb4e308d2() {
        assertEval("argv <- list(c(0, 0, 0, 0, 0, 0, 4.94065645841247e-324, 0, 0, 0, 0, 0), structure(c(73.0102287440125, 79.6161885135717, 81.5497837663961, 53.9710956454646, 43.6831159601594, 20.8581884349194, 7.6155030786098, 10.8008470888011, 14.7201505829463, 8.49167208457355, 101.686214382123, 921.711710792497), .Names = c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1')));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators324_744b448ab3e9e46915e83b1eb4e308d2");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators325_6668953f1fc8490e749d28b763fc05cd() {
        assertEval("argv <- list(-97.5074316406251, structure(c(73.0102287440125, 79.6161885135717, 81.5497837663961, 53.9710956454646, 43.6831159601594, 20.8581884349194, 7.6155030786098, 10.8008470888011, 14.7201505829463, 8.49167208457355, 101.686214382123, 921.711710792497), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))));`%*%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators325_6668953f1fc8490e749d28b763fc05cd");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators326_f247208782bd8a99a4f6e62217b5255f() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Tsp = c(1959, 1997.91666667, 12), class = 'ts'), 3);`%/%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators326_f247208782bd8a99a4f6e62217b5255f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators33_387f9c3bc12cdddae9e3506225704deb() {
        assertEval("argv <- list(c(20.8, 11.2, 6.2, 12.8, 43.4), c(10.4, 5.6, 3.1, 6.4, 21.7, 0, 10.4, 5.6, 3.1, 6.4, 21.7));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators33_387f9c3bc12cdddae9e3506225704deb");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators332_4b661d693bc24e5b6c1cf0482e8f57ad() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`%/%`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators332_4b661d693bc24e5b6c1cf0482e8f57ad");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators333_83e8ac52e6dbb558fd0e9f9b2b4c1ac9() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`%/%`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators333_83e8ac52e6dbb558fd0e9f9b2b4c1ac9");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators335_4513ed2131010d4541a678d4e469a791() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)));`&`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators335_4513ed2131010d4541a678d4e469a791");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators336_84591dff930b3cd2863d554b6e159dc8() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`&`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators336_84591dff930b3cd2863d554b6e159dc8");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators337_0a2327b7e83d6accfbb3a38e14d5e48a() {
        assertEval("argv <- list(c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE), c(TRUE, TRUE, TRUE, NA, FALSE, FALSE, TRUE, NA));`&`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators337_0a2327b7e83d6accfbb3a38e14d5e48a");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators34_a9431d2364dde2ac140f6f17c920c1ad() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators34_a9431d2364dde2ac140f6f17c920c1ad");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators340_5de6be3139e1e0e5b5026fe8834a3ed0() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Tsp = c(1790, 1970, 0.1), class = 'ts'), c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE));`&`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators340_5de6be3139e1e0e5b5026fe8834a3ed0");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators341_7aebbf647e9c2fe68e5efbab86240d11() {
        assertEval("argv <- list(structure(cim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4')), .Tsp = c(1, 101, 1), class = c('mts', 'ts', 'matrix')), structure(cim = c(101L, 3L), .Dimnames = list(NULL, c('t1', '10 * t1', 't1 - 4'))));`&`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators341_7aebbf647e9c2fe68e5efbab86240d11");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators342_21dec62d790ce46198eed22072f9caab() {
        assertEval("argv <- list(structure(c(NA, FALSE, TRUE, NA, FALSE, TRUE, NA, FALSE, TRUE), .Names = c(NA, 'FALSE', 'TRUE', NA, 'FALSE', 'TRUE', NA, 'FALSE', 'TRUE')), structure(c(NA, NA, NA, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE), .Names = c(NA, NA, NA, 'FALSE', 'FALSE', 'FALSE', 'TRUE', 'TRUE', 'TRUE')));`&`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators342_21dec62d790ce46198eed22072f9caab");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators343_3d4847ee88a4b4979dc54cafab35e84a() {
        assertEval("argv <- list(structure(508L, class = 'octmode'), '755');`&`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators343_3d4847ee88a4b4979dc54cafab35e84a");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators345_a476b48d092a98b21d8ad887beeed08d() {
        assertEval("argv <- list(structure(cames = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146')));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators345_a476b48d092a98b21d8ad887beeed08d");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators347_1a6bed128c33140ae5f6a70936a745bf() {
        assertEval("argv <- list(c(1-0i, 1+0i, 1+0i, 9.99999999999989e-01-5e-15i, 1+0i, 1+0i, 1-0i, 1e+00+9e-16i, 9.99999999999999e-01+3e-15i, 9.99999999999997e-01-3e-15i, 1e+00-1e-15i, 1+0i, 1+0i, 1e+00+1e-15i, 1+0i, 1+0i, 1+0i, 1-0i, 1+0i, 1e+00-5e-15i, 1-0i, 1+0i, 1+0i, 1+0i));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators347_1a6bed128c33140ae5f6a70936a745bf");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators348_cd8f8ec9fbb0a04a43be226a60707ff1() {
        assertEval("argv <- list(structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Tsp = c(1959, 1997.91666667, 12), class = 'ts'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators348_cd8f8ec9fbb0a04a43be226a60707ff1");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators350_a66990bf7e845b028582f04842722d5e() {
        assertEval("argv <- list(c(-Inf, 2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, Inf, NaN, NA));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators350_a66990bf7e845b028582f04842722d5e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators351_8cf32aacc01e6b2ace8b819878dc8625() {
        assertEval("argv <- list(.Primitive('log'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators351_8cf32aacc01e6b2ace8b819878dc8625");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators352_b5dd8cea1c51a401abfff6601fe327b1() {
        assertEval("argv <- list(structure(NA, .Dim = c(1L, 1L)));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators352_b5dd8cea1c51a401abfff6601fe327b1");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators353_adf9f5554ce1ffd74a5c3e6486b3c9bb() {
        assertEval("argv <- list(structure(c(NA, 2, NA, 1, NA, 0), .Dim = 2:3));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators353_adf9f5554ce1ffd74a5c3e6486b3c9bb");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators354_70c9a579d18440b16c9bdad49315dcb3() {
        assertEval("argv <- list(structure(list(A = c(1L, NA, 1L), B = c(1.1, NA, 2), C = c(1.1+0i, NA, 3+0i), D = c(NA, NA, NA), E = c(FALSE, NA, TRUE), F = structure(c(1L, NA, 2L), .Label = c('abc', 'def'), class = 'factor')), .Names = c('A', 'B', 'C', 'D', 'E', 'F'), class = 'data.frame', row.names = c('1', '2', '3')));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators354_70c9a579d18440b16c9bdad49315dcb3");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators355_c86e91fabf47d6ef8bc249654ea515a6() {
        assertEval("argv <- list(structure(NA, .Dim = c(1L, 1L), name = 'Sam', class = structure('Foo', package = '.GlobalEnv')));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators355_c86e91fabf47d6ef8bc249654ea515a6");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators356_ecee1d15848f5d89b938900ee0b4a7af() {
        assertEval("argv <- list(structure(list(x = numeric(0), y = numeric(0), fac = structure(integer(0), .Label = c('A', 'B', 'C'), class = 'factor')), .Names = c('x', 'y', 'fac'), row.names = integer(0), class = 'data.frame'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators356_ecee1d15848f5d89b938900ee0b4a7af");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators357_19050f75331a154db43726b1d2e60849() {
        assertEval("argv <- list(structure(list(x = c(-2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2), y = c(1, 4, 5, 9, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 8, 8, 9, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 0, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 1, 2, 3, 5, 5, 10), z = c(-2, 5, -1, 7, -8, 17, -4, -2, -1, 0, -8, -3, 6, -9, 4, -10, 4, -9, -3, 4, -3, 8, 2, 8, 14, -14, -2, -1, 8, 9, -13, -12, -9, 0, 0, 5, 12, 14, -3, -1, 3, 4, 6, 18, 2, 8, 12, -23, 0, 2, 3, 13, -12, -6, -2, 3, 5, 8, -1, 12, 15, -11, 3, 4, 8, 10, 0, -8, -5, 7, 8, 1, -11, -10, -7, -3, 2, 4, 18, -5, -3, 0, -18, -7, -16, -10, -5, -6, -5, -3, -3, -11, -1, 2, 20, 0, -7, -1, 9, 3), u = c(12, 2, 6, 36, 17, 38, 24, 25, 19, 21, 6, 5, 28, 41, 28, 10, 6, 48, 33, 2, 45, 45, 37, 0, 29, 8, 23, 21, 1, 48, 20, 24, 26, 34, 35, 5, 35, 26, 33, 20, 7, 17, 40, 9, 17, 48, 50, 47, 46, 42, 28, 1, 14, 17, 32, 48, 14, 20, 2, 19, 27, 37, 44, 41, 23, 50, 30, 19, 42, 16, 12, 35, 38, 30, 33, 17, 32, 4, 41, 13, 9, 41, 39, 31, 32, 32, 36, 33, 32, 19, 37, 27, 17, 39, 19, 48, 33, 33, 42, 44)), .Names = c('x', 'y', 'z', 'u'), row.names = c(67L, 84L, 24L, 14L, 81L, 28L, 97L, 98L, 99L, 72L, 46L, 74L, 91L, 75L, 1L, 45L, 35L, 6L, 3L, 58L, 54L, 65L, 80L, 13L, 52L, 71L, 12L, 86L, 32L, 89L, 78L, 5L, 88L, 2L, 90L, 57L, 66L, 76L, 77L, 41L, 62L, 23L, 27L, 16L, 33L, 29L, 47L, 82L, 26L, 79L, 49L, 53L, 34L, 38L, 17L, 42L, 69L, 7L, 36L, 37L, 10L, 64L, 51L, 60L, 100L, 30L, 85L, 48L, 8L, 44L, 92L, 22L, 9L, 31L, 94L, 63L, 20L, 87L, 21L, 73L, 39L, 59L, 55L, 40L, 96L, 68L, 15L, 43L, 83L, 25L, 50L, 18L, 19L, 93L, 56L, 70L, 4L, 61L, 95L, 11L), class = 'data.frame'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators357_19050f75331a154db43726b1d2e60849");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators358_05697e03a2d3c814c02dc993266134ee() {
        assertEval("argv <- list(structure(list(x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1), y = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), fac = structure(c(1L, 2L, 2L, 3L, 1L, 3L, 3L, 2L, 2L, 1L), .Label = c('A', 'B', 'C'), class = 'factor'), char = structure(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'), class = 'AsIs')), .Names = c('x', 'y', 'fac', 'char'), row.names = c(NA, -10L), class = 'data.frame'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators358_05697e03a2d3c814c02dc993266134ee");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators359_3f252a21ebcd0b7100ba72debb0bd167() {
        assertEval("argv <- list(c('«L', 'tin-1 ', '', '', 'ented ', 'h', 'rs»: éè øØ å<Å æ<Æ é éè'));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators359_3f252a21ebcd0b7100ba72debb0bd167");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators36_393411150d7d235ce6042d7b8fc25908() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`+`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators36_393411150d7d235ce6042d7b8fc25908");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators361_a33df53e888079e0f847f2a7f2588c43() {
        assertEval("argv <- list(structure(c(6.36917889425777, 5.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 4.36917889425777, 5.36917889425777, 5.36917889425777, 6.36917889425777, 6.36917889425777, 4.36917889425777, 5.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 5.36917889425777, 6.36917889425777, 4.36917889425777, 5.36917889425777, 5.36917889425777), .Dim = 38L, .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38'))));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators361_a33df53e888079e0f847f2a7f2588c43");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators362_a9b4729b7ef08573a3554910ac113ecb() {
        assertEval("argv <- list(structure(cim = c(14L, 11L), .Dimnames = list(c('0-18', '18-19', '19-20', '20-21', '21-22', '22-23', '23-24', '24-25', '25-26', '26-27', '27-28', '28-29', '29-30', '30-31'), c('1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964'))));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators362_a9b4729b7ef08573a3554910ac113ecb");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators363_cc36bb60b0bda47b76e479e8781483f8() {
        assertEval("argv <- list(structure(NA, .Tsp = c(1, 1, 1), .S3Class = 'ts', class = structure('ts', package = 'methods')));`(`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators363_cc36bb60b0bda47b76e479e8781483f8");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators367_3cf392c34b45b624cb1ea835f4e26482() {
        assertEval("argv <- list(c(2.80068140446062, 1.8317224411983, 1.22900361620513, 0.0769946405427206, 2.80068140446062e-07), structure(c(-0.579458297883801, 0.378144472053104, 0.289151395420297, -0.322488635437406, 0.577604873429495, -0.439515769918701, -0.563213485796381, 0.19897761279598, -0.497766353148047, -0.449725499265461, -0.183421202297383, -0.367349618966443, -0.8113056422696, -0.10946638264776, 0.401511127970965, 0.369976492463818, -0.594590295135748, 0.453781444579942, 0.0303676587408212, 0.550218122031705, 0.548204365705284, 0.22652586176497, -0.112538595641497, -0.797072552569732, 0.012977588540091), .Dim = c(5L, 5L)));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators367_3cf392c34b45b624cb1ea835f4e26482");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators369_3d8814961cb52c9a6eec5d1906bd4170() {
        assertEval("argv <- list(structure(c(0.853345363892062, -0.0256071578412401, -0.0612813871821256, -0.0612813871821256, -0.0256071578412401, -0.0612813871821256, -0.0256071578412401, -0.0612813871821256, -0.0256071578412401, 0, 0, 0.0786725879812683, 0.0786725879812683, 0.22692030644121, -0.254660745352065, -0.106413026892124, -0.254660745352065, -0.106413026892124, 0, 0, 0.11837902431235, 0.11837902431235, 0.243512113989909, -0.322431463531475, -0.134731829015137, -0.322431463531475, -0.134731829015137, 0, 0, 0.186882435497702, 0.186882435497702, 0.272137080615963, -0.439352693506895, -0.18358875815211, -0.439352693506895, -0.18358875815211, 0, 0, 0, 0, 0, 0, 0, 0.172822903136154, -0.345645806272308), .Dim = c(9L, 5L)), structure(c(1.03259546878074, -0.967404531219257, 0.032595468780743, 0.032595468780743, -0.967404531219257, 0.032595468780743, -0.967404531219257, 0.032595468780743, -0.967404531219257, 1.15961954033819, -0.840380459661814, 0.159619540338186, 0.159619540338186, -0.840380459661814, 0.159619540338186, -0.840380459661814, 0.159619540338186, -0.840380459661814, 1.16167819481816, -0.838321805181836, 0.161678194818164, 0.161678194818164, -0.838321805181836, 0.161678194818164, -0.838321805181836, 0.161678194818164, -0.838321805181836, 1.1652298823369, -0.834770117663101, 0.165229882336899, 0.165229882336899, -0.834770117663101, 0.165229882336899, -0.834770117663101, 0.165229882336899, -0.834770117663101, 1.17282290313615, -0.827177096863846, 0.172822903136154, 0.172822903136154, -0.827177096863846, 0.172822903136154, -0.827177096863846, 0.172822903136154, -0.827177096863846), .Dim = c(9L, 5L)));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators369_3d8814961cb52c9a6eec5d1906bd4170");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators370_cfe2c46217b6bded9aad304c663f829e() {
        assertEval("argv <- list(0.5, structure(c(-1.12095129310443+0i, 1.4848874974+0.41132282301771i, 2.78279011158859-0.53526713626358i, 1.85742152822765-0.44342995809143i, -0.9385359708259+2.37692350427328i, 1.4848874974-0.41132282301771i, 0.921832411978405+0i, -0.90524740754917+0.341208007507433i, -0.18900237366429+1.08605076555264i, -0.66363688475825+1.22446591693656i, 2.78279011158859+0.53526713626358i, -0.90524740754917-0.341208007507433i, 0.801542901188104+0i, -1.85593444068452+0.95943368782835i, -1.58184558306131+0.08618435261084i, 1.85742152822765+0.44342995809143i, -0.18900237366429-1.08605076555264i, -1.85593444068452-0.95943368782835i, 1.40271180312737+0i, -1.20168263701907+0.42799687996867i, -0.9385359708259-2.37692350427328i, -0.66363688475825-1.22446591693656i, -1.58184558306131-0.08618435261084i, -1.20168263701907-0.42799687996867i, -1.25007853569851+0i), .Dim = c(5L, 5L)));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators370_cfe2c46217b6bded9aad304c663f829e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators372_c5d80ae20fcf4ba75c360f9c13256170() {
        assertEval("argv <- list(structure(1.6768574855882, .Names = 'x'), c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators372_c5d80ae20fcf4ba75c360f9c13256170");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators373_986bb5c9ad613c5c848601d3f10439b5() {
        assertEval("argv <- list(structure(c(2134, 1863, 1877, 1877, 1492, 1249, 1280, 1131, 1209, 1492, 1621, 1846, 2103, 2137, 2153, 1833, 1403, 1288, 1186, 1133, 1053, 1347, 1545, 2066, 2020, 2750, 2283, 1479, 1189, 1160, 1113, 970, 999, 1208, 1467, 2059, 2240, 1634, 1722, 1801, 1246, 1162, 1087, 1013, 959, 1179, 1229, 1655, 2019, 2284, 1942, 1423, 1340, 1187, 1098, 1004, 970, 1140, 1110, 1812, 2263, 1820, 1846, 1531, 1215, 1075, 1056, 975), .Tsp = c(1974, 1979.58333333333, 12), class = 'ts'), c(-33.5, -32.5, -31.5, -30.5, -29.5, -28.5, -27.5, -26.5, -25.5, -24.5, -23.5, -22.5, -21.5, -20.5, -19.5, -18.5, -17.5, -16.5, -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.5, -8.5, -7.5, -6.5, -5.5, -4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators373_986bb5c9ad613c5c848601d3f10439b5");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators374_fdf08b71abd4499ba6010e31a9aeebf7() {
        assertEval("argv <- list(c(0.0125360439090882, 0.109084258765985, 0.283058130441221, 0.5, 0.716941869558779, 0.890915741234015, 0.987463956090912, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.987463956090912, 0.890915741234015, 0.716941869558779, 0.5, 0.283058130441221, 0.109084258765985, 0.0125360439090882), structure(c(430.689117199391, 165.5304253221, 185.371733444809, 191.213041567518, -187.945650309773, -425.104342187064, -388.263034064356, -531.421725941647, -447.580417818938, -158.739109696229, -23.8978015735202, 206.943506549189, 469.784814671898, 509.626122794606, 531.467430917315, 217.308739040024, -206.849952837267, -316.008644714558, -412.167336591849, -459.32602846914, -533.484720346432, -233.643412223723, -29.8021041010139, 497.039204021695, 456.880512144404, 1192.72182026711, 731.563128389821, -66.5955634874696, -350.754255364761, -373.912947242052, -415.071639119343, -552.230330996634, -517.389022873925, -302.547714751216, -37.7064066285076, 560.134901494201, 746.97620961691, 146.817517739619, 240.658825862328, 325.500133985037, -223.658557892254, -301.817249769546, -370.975941646837, -439.134633524128, -487.293325401419, -261.45201727871, -205.610709156001, 226.230598966708, 596.071907089416, 866.913215212125, 530.754523334834, 17.5958314575429, -59.5628604197482, -206.721552297039, -289.880244174331, -378.038936051622, -406.197627928913, -230.356319806204, -254.515011683495, 453.326296439214, 910.167604561923, 473.008912684631, 504.85022080734, 195.691528930049, -114.467162947242, -248.625854824533, -261.784546701824, -336.943238579115, -366.101930456407, -219.260622333698, -0.419314210988802, 52.4219939117201), .Tsp = c(1974, 1979.91666666667, 12), class = 'ts'));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators374_fdf08b71abd4499ba6010e31a9aeebf7");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators375_770aa8990070feabf2be7828a67eb84d() {
        assertEval("argv <- list(structure(c(12L, 23L), .Dim = 2L, .Dimnames = structure(list(c('1', '2')), .Names = ''), class = 'table'), 1:2);`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators375_770aa8990070feabf2be7828a67eb84d");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators379_9a343c37cef7e71237404a338a047007() {
        assertEval("argv <- list(structure(c(125.462606837607, 127.867786930034, 130.144676735994, 132.324464274255, 134.336734211717, 136.082072800639, 137.721118421779, 140.845055930758, 143.28591535884, 145.768223343737, 146.185327931547, 145.802002908545, 149.002460060179, 153.598715100046, 155.183805036251, 159.724429366298, 161.673726141005, 170.116738471067, 169.947660568386, 170.006973600711, 170.719702563484, 171.765986080317, 174.613600436266, 179.048948110372, 179.883872548102, 181.827282092545, 184.331859119525, 182.743207226061, 183.03021399043, 184.153788490888, 191.745076839764, 194.148810101473, 199.10701170422, 199.286358868728, 202.588173234443, 206.570808710438, 208.901416980527, 210.197793333945, 208.990030330146, 213.988947898492, 221.910492791482, 225.858547195805, 224.629928649936, 225.693827143939, 226.925133971988, 227.909074259919, 228.294198948883, 226.413286455683, 224.858486784216, 224.205996780539, 218.296565215286, 217.952397420454, 218.203297324152, 222.634503912979, 229.136665168488, 238.199012563706, 241.084558136518, 244.474599589944, 246.541678441215, 249.943070595034, 252.738029658228, 257.655553126827, 261.948737901648, 259.38828865138, 260.581624400595, 261.35845107056, 266.721536928548, 274.727021103557, 279.519739428079, 285.613419212625, 290.081183406543, 292.578703689536, 298.536510073918, 301.854944861174, 306.72012690062, 308.552564035999, 308.960906756251, 310.45531361152, 314.471901471993, 316.180279500694, 321.131980519447, 324.487238338646, 326.432439140534, 330.587069598829, 332.257828918305, 334.897103376149, 336.500107838622, 341.040184577164, 343.37680996925, 346.04109648055, 350.540519967376, 353.909804788829, 360.713606630499, 365.246028758837, 368.653301499587, 371.870254918956, 371.890026901483, 370.974100279234, 368.423988230309, 364.248564265975, 359.879991232458, 359.533794053725, 361.493423852232, 366.272105696357, 374.712558672268, 373.691234302716, 377.311059795731, 378.958918379956, 378.434557854932, 383.493556594665, 388.051875855736, 394.72909801417, 399.975945122541, 406.14684914494, 404.223720368284, 407.657133649615, 412.1384117511, 418.253339402259, 423.102585806067, 430.610654889479, 439.381586214864, 443.452574204404, 446.154893648303, 437.948767898975, 448.065211483223, 452.98477480065, 456.22724907891, 460.426882491713, 459.053158913271, 461.490725714314, 468.825080012951, 470.090114620358), .Tsp = c(1950, 1960.91666666667, 12), class = 'ts'), structure(c(0.885377815022177, 0.956702662008391, 1.05604790005129, 0.99999180855271, 0.919180306022048, 1.08513403180744, 1.17950860096112, 1.17526020717901, 1.07399050289666, 0.935173924204861, 0.814655016855593, 0.918977224438701, 0.904886860495219, 0.974651014130265, 1.07318431817519, 1.01267995772422, 0.926294652616773, 1.09129604332202, 1.2136804527299, 1.19513265851781, 1.09196097114148, 0.920716625833028, 0.792428126174694, 0.944665370656132, 0.947060673767712, 0.975861204272186, 1.11889468518085, 1.01760687119493, 1.00966041750694, 1.06261400924208, 1.18646278417314, 1.17953219321689, 1.08299041001682, 0.934768432861068, 0.819582111385122, 0.933541960135008, 0.949299218066574, 0.984712956742138, 1.07274478711742, 1.00035738265237, 1.00344619530389, 1.136720297344, 1.19466716852011, 1.22110179994975, 1.06180417436075, 0.949583554116272, 0.837964127353819, 0.93707048913996, 0.942302022727904, 0.95126138690835, 1.10787035072032, 1.06044554393152, 1.0212841877174, 1.09777947829535, 1.18237485006198, 1.21101795468964, 1.05077474260124, 0.934482494680629, 0.806219558496273, 0.905507672627939, 0.919955309911582, 0.877743501942818, 1.0879384725907, 1.04844380534261, 1.05308404040641, 1.15209925173403, 1.2652951992685, 1.2229795664526, 1.06552999327079, 0.93588195611389, 0.816986956383517, 0.912235531149947, 0.943381852486145, 0.894360852742568, 1.04386693859046, 1.0412387923364, 1.04235110100738, 1.18519852082375, 1.32667886524828, 1.24804193460951, 1.09707745322343, 0.950576085705186, 0.817003170713368, 0.935893112057161, 0.94836946371363, 0.908951898620782, 1.03731973240637, 1.02419763657726, 1.03406277428866, 1.19743269363204, 1.31822462831668, 1.26862748613699, 1.10235655952769, 0.945803515760855, 0.82528228386107, 0.929397385899463, 0.948173569563647, 0.902518233330453, 1.05026106742455, 1.02180458893893, 1.03392834532348, 1.21128679495018, 1.32344975581348, 1.30039314766586, 1.11343783106856, 0.948475302349546, 0.826576551185179, 0.912962090088511, 0.926561968385747, 0.87353380715788, 1.00678775995668, 0.979149663293728, 1.01788806209298, 1.21041189004384, 1.34524520684843, 1.34901427843594, 1.0909897186673, 0.956150231433401, 0.823434379283845, 0.897915761073492, 0.942043948926554, 0.884990150921632, 1.03141421940795, 0.994229969777015, 1.03800763998638, 1.17962620510919, 1.3518161330406, 1.3629765592452, 1.11127249087291, 0.966786065425125, 0.843497574054032, 0.924445014403716), .Tsp = c(1950, 1960.91666666667, 12), class = 'ts'));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators379_9a343c37cef7e71237404a338a047007");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators39_59a97f812dab51944914195424a8c0df() {
        assertEval("argv <- list(structure(c(-24.5833333333333, -5.08333333333333, 10.25, 19.4166666666667), .Dim = 4L, .Dimnames = structure(list(N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = 'N'), strata = structure('Within', .Names = 'N'), class = 'mtable'), structure(103.972222222222, class = 'mtable'));`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators39_59a97f812dab51944914195424a8c0df");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators4_127bc640f730d79c6d94fa078081d44e() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`*`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators4_127bc640f730d79c6d94fa078081d44e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators44_75fd2f5250d77fabf7fff7354b33670a() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0i, 1.39139505579429+0i, 0.928710764113827+0i, -0.469267985412949+0i, 0.7424437487+0i, 0.460916205989202+0i, -0.452623703774585+0i, -0.0945011868321433+0i, -0.331818442379127+0i, 1.39139505579429+0i, -0.452623703774585+0i, 0.400771450594052+0i, -0.927967220342259+0i, -0.790922791530657+0i, 0.928710764113827+0i, -0.0945011868321433+0i, -0.927967220342259+0i, 0.701355901563686+0i, -0.600841318509537+0i, -0.469267985412949+0i, -0.331818442379127+0i, -0.790922791530657+0i, -0.600841318509537+0i, -0.625039267849257+0i), .Dim = c(5L, 5L)), structure(c(-0.560475646552213+0i, 0.742443748700001+0i, 1.39139505579429+0i, 0.928710764113827+0i, -0.469267985412949+0i, 0.742443748700001+0i, 0.460916205989202+0i, -0.452623703774585+0i, -0.094501186832143+0i, -0.331818442379127+0i, 1.39139505579429+0i, -0.452623703774585+0i, 0.400771450594052+0i, -0.927967220342258+0i, -0.790922791530656+0i, 0.928710764113827+0i, -0.094501186832143+0i, -0.927967220342258+0i, 0.701355901563685+0i, -0.600841318509537+0i, -0.469267985412949+0i, -0.331818442379127+0i, -0.790922791530656+0i, -0.600841318509537+0i, -0.625039267849256+0i), .Dim = c(5L, 5L)));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators44_75fd2f5250d77fabf7fff7354b33670a");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators49_ff8926894b4e2be54401ffce65e0f538() {
        assertEval("argv <- list(7.12801378828154e+22);`-`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators49_ff8926894b4e2be54401ffce65e0f538");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators5_7a41350b82fb48cc09b7c6a7562749da() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`*`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators5_7a41350b82fb48cc09b7c6a7562749da");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators50_30436ed25394cd65c2763b6febb31068() {
        assertEval("argv <- list(structure(c(315.42, 316.31, 316.5, 317.56, 318.13, 318, 316.39, 314.65, 313.68, 313.18, 314.66, 315.43, 316.27, 316.81, 317.42, 318.87, 319.87, 319.43, 318.01, 315.74, 314, 313.68, 314.84, 316.03), .Tsp = c(1959, 1960.91666666667, 12), class = 'ts'), structure(c(-0.234444444444459, 0.192638888888913, 0.743888888888894, 2.15972222222219, 3.13138888888888, 2.65888888888892, 0.480138888888822, -1.31611111111111, -2.34527777777775, -2.93819444444447, -1.58527777777776, -0.947361111111074, -0.234444444444459, 0.192638888888913, 0.743888888888894, 2.15972222222219, 3.13138888888888, 2.65888888888892, 0.480138888888822, -1.31611111111111, -2.34527777777775, -2.93819444444447, -1.58527777777776, -0.947361111111074), .Tsp = c(1959, 1960.91666666667, 12), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators50_30436ed25394cd65c2763b6febb31068");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators51_67e818b19655041f681c5fe551540318() {
        assertEval("argv <- list(structure(c(94694400, 126230400, 157766400, 189302400, 220924800, 252460800, 283996800, 315532800, 362793600, 394329600, 425865600, 489024000, 567993600, 631152000, 662688000, 709948800, 741484800, 773020800, 820454400, 867715200, 915148800, 1136073600, 1230768000, 1341100800), class = c('POSIXct', 'POSIXt')), structure(c(78796800, 94694400, 126230400, 157766400, 189302400, 220924800, 252460800, 283996800, 315532800, 362793600, 394329600, 425865600, 489024000, 567993600, 631152000, 662688000, 709948800, 741484800, 773020800, 820454400, 867715200, 1136073600, 1230768000, 1341100800), class = c('POSIXct', 'POSIXt')));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators51_67e818b19655041f681c5fe551540318");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators52_0ae639664f63b4b213e6235475e82a0a() {
        assertEval("argv <- list(structure(c(9, 12, 12, 15, 9, 9, 13, 11, 15, 10, 13, 13, 13, 15, 8, 13, 13, 10, 7, 9, 6, 11, 3, 5, 9, 3, 5, 1, 1, 2, NA, 10, 1, 4, 7, 4, NA, NA, 5, 2, 4, 3, 3, 6, 1, 1, 63, 41, 59, 50, 290, 226, 60, 36, 32, 121, 70, 51, 79, 32, 42, 39, 76, 60, 56, 88, 57, 309, 254, 146, 43, 78, 88, 314, 149, 78, NA, 238, 153, 159, 222, 203, NA, NA, 74, 100, 111, 9, 180, 50, 256, 107), .Dim = c(23L, 4L), .Dimnames = list(NULL, c('V1', 'V2', 'V3', 'V4'))), structure(c(10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 10.8260869565217, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 3.85, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 95.2608695652174, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9, 137.9), .Dim = c(23L, 4L)));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators52_0ae639664f63b4b213e6235475e82a0a");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators54_7eab8aab925a8f7cd595f02382af0f44() {
        assertEval("argv <- list(0+1e-04i);`-`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators54_7eab8aab925a8f7cd595f02382af0f44");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators56_e107f5595f71e9658509b9604452bd28() {
        assertEval("argv <- list(structure(c(-50, 175, 149, 214, 247, 237, 225, 329, 729, 809, 530, 489, 540, 457, 195, 176, 337, 239, 128, 102, 232, 429, 3, 98, 43, -141, -77, -13, 125, 361, -45, 184), .Tsp = c(1951, 1958.75, 4), class = 'ts'), structure(c(NA, NA, 159.125, 204, 221.25, 245.125, 319.75, 451.5, 561.125, 619.25, 615.625, 548, 462.125, 381.125, 316.625, 264, 228.375, 210.75, 188.375, 199, 207.125, 191, 166.875, 72, -9.25, -33.125, -36.75, 36.25, 103, 131.625, NA, NA), .Tsp = c(1951, 1958.75, 4), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators56_e107f5595f71e9658509b9604452bd28");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators58_db0f2e287893afc566c292115e43b72c() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 1L);`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators58_db0f2e287893afc566c292115e43b72c");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators63_3284f8169b83e55f63c16b6a572bf1b4() {
        assertEval("argv <- list(structure(list(war = c(1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L), fly = c(1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), ver = c(1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 1L, 2L), end = c(1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, NA, 1L, 1L, 2L, 1L, 1L, NA, 2L), gro = c(2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, NA, 2L, 2L, 1L, NA, 2L, 2L, NA, 1L, 2L), hai = c(1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L)), .Names = c('war', 'fly', 'ver', 'end', 'gro', 'hai'), class = 'data.frame', row.names = c('ant', 'bee', 'cat', 'cpl', 'chi', 'cow', 'duc', 'eag', 'ele', 'fly', 'fro', 'her', 'lio', 'liz', 'lob', 'man', 'rab', 'sal', 'spi', 'wha')), 1);`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators63_3284f8169b83e55f63c16b6a572bf1b4");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators64_529a2b478d936e5c96057f626febbb41() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`-`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators64_529a2b478d936e5c96057f626febbb41");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators66_867b493aca979de2a18f3f040a27eebf() {
        assertEval("argv <- list(structure(c(0.163529648037515, 0.690300939958932, 1.33873438218701, 1.66977334065937, 2.08385700655167, 1.90103052674775, 1.24826888183738, -0.346530864750065, -2.02114485014442, -1.391176571206, -0.974900546993623, -0.592397172772186, 1.12800897451332, 1.28932367812798, 1.52806194332292, 0.902674841819288, -0.592397172772186, -1.58883249200006, -2.79944983904467, -2.38660462363888, 1.11301751209174, 0.656516272159253, 0.0219290473645453, -0.905668755424301, -1.30280742075591, -1.17239032526075, -0.455509560368709, -0.00488221008611145, 1.01557266990962, 1.33518324209154, 1.7902682423845, 1.2223240303426, -0.642532985196542, -2.3156528876666, -2.94255068268534, -2.71429203070436, -2.52857488490927, -1.36967036598504, -0.673867141366977, 0.557834355527559, -1.17239032526075, -0.455509560368709, -0.00488221008611145, 1.01557266990962, 1.33518324209154, 1.7902682423845, 1.2223240303426, -0.642532985196542, -2.3156528876666, -2.94255068268534, -2.71429203070436, -2.52857488490927, -1.36967036598504, -0.673867141366977, 0.557834355527559, 1.69565743430218, 1.55297632585292, -0.231087508986891, -1.95215197865747, -1.57567440742255, 1.27884061694483, 1.52424121861625, -1.01140094921315, -0.834671205684972, -0.234500481583131, 0.163529648037515, 0.690300939958932, 1.33873438218701, 1.66977334065937, 2.08385700655167, 1.90103052674775, 1.24826888183738, -0.346530864750065, -2.02114485014442, -1.391176571206, -0.974900546993623, -0.592397172772186, 1.12800897451332, 1.28932367812798, 1.52806194332292, -0.720008297364832, -0.01169886906521, 0.795118935598027, 1.30411137828236, 1.35630335130608, 1.05258722945331, -0.0781544111924379, -0.905668755424301, -1.14228052378938, -1.10485411827026, -0.292564282537893, 0.785919238699603, 1.49889320873226, 2.20687990315498, 1.74950266694519, -0.073778036592639, -1.06484878365656, -0.447016940323056, -0.725579342414288, 0.0582966915354195, 1.55297632585292, -0.231087508986891, -1.95215197865747, -1.57567440742255, -0.647687635785206, 0.0245710568273836, 0.569377384809234, 1.54435558280902, 2.246266557697, 2.14425394955264, 1.63506382167997, 0.909232242365448, -0.762567911783628, -0.660691720208413), .Dim = c(114L, 1L), .Dimnames = list(NULL, 'Series 1'), .Tsp = c(1, 114, 1), class = 'ts'), structure(c(-1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16, -1.79193891693885e-16), .Dim = c(114L, 1L)));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators66_867b493aca979de2a18f3f040a27eebf");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators69_3e4d9eaf39e34462e19dbfa8d2c7b211() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators69_3e4d9eaf39e34462e19dbfa8d2c7b211");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators70_cb674c96a72fd23a2806d6bcfde9279d() {
        assertEval("argv <- list(1, structure(c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59), .Tsp = c(0, 59, 1), class = 'ts'));`-`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators70_cb674c96a72fd23a2806d6bcfde9279d");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators71_70a913feb66e0efec9f0702fc6af8acd() {
        assertEval("argv <- list(-3.14159265358979, 3.14159265358979);`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators71_70a913feb66e0efec9f0702fc6af8acd");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators72_431e8cc2a0b044fc61ea748ab8c3aa75() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 2L, 2L, 2L), .Label = c('1', '2'), class = 'factor'), structure(c(1L, 1L, 2L, 2L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor'));`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators72_431e8cc2a0b044fc61ea748ab8c3aa75");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators74_5b50a50a9885bf8dcc8824cfcc05e747() {
        assertEval("argv <- list(0.5, -0.5);`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators74_5b50a50a9885bf8dcc8824cfcc05e747");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators75_0ce7c915b675de1f6c7fea9721dffc1f() {
        assertEval("argv <- list(101L, 1L);`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators75_0ce7c915b675de1f6c7fea9721dffc1f");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators76_f10b2d4f6acf109ab618ca932a774116() {
        assertEval("argv <- list(FALSE, 1);`:`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators76_f10b2d4f6acf109ab618ca932a774116");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators84_0b8c0a2654c4ce5e45e8671469b93766() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`<`(argv[[1]]);");
        check("TestrGenBuiltinoperators_testoperators84_0b8c0a2654c4ce5e45e8671469b93766");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators86_ee952f9a096e44a2b425997a9508cd7e() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), 1L);`<`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators86_ee952f9a096e44a2b425997a9508cd7e");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators9_a4164cd5db80ec4decee818ad0c32ff3() {
        assertEval("argv <- list(structure(1:10, class = structure('NumericNotStructure', package = '.GlobalEnv')), 1);`+`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators9_a4164cd5db80ec4decee818ad0c32ff3");
    }

    @Test
    public void TestrGenBuiltinoperators_testoperators91_ea8f9fb6c82f6c1347f50271dd107aab() {
        assertEval("argv <- list(structure(list(c(3L, 0L, 1L)), class = c('R_system_version', 'package_version', 'numeric_version')), structure('3.1', .Names = 'gridSVG2'));`<`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinoperators_testoperators91_ea8f9fb6c82f6c1347f50271dd107aab");
    }

    @Test
    public void TestrGenBuiltinoptions_testoptions4_e4b37bd554474a05d6e509754da1ca16() {
        assertEval("argv <- list('ts.eps'); .Internal(options(argv[[1]]))");
        check("TestrGenBuiltinoptions_testoptions4_e4b37bd554474a05d6e509754da1ca16");
    }

    @Test
    public void TestrGenBuiltinoptions_testoptions5_cea0be88dce9581c7f5cb930acc71943() {
        assertEval("argv <- list(NULL); .Internal(options(argv[[1]]))");
        check("TestrGenBuiltinoptions_testoptions5_cea0be88dce9581c7f5cb930acc71943");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste1_2f14ba48a54847e70d98312ef3c6b446() {
        assertEval("argv <- list(list('%%  ~~objects to See Also as', '\\\\code{\\\\link{~~fun~~}}, ~~~'), ' ', NULL); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinpaste_testpaste1_2f14ba48a54847e70d98312ef3c6b446");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste2_6bee94b7e42df245ee0c1dbf2b8d68b7() {
        assertEval("argv <- list(list(c('[', 'cox.zph', NA)), ' ', '\\r'); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinpaste_testpaste2_6bee94b7e42df245ee0c1dbf2b8d68b7");
    }

    @Test
    public void TestrGenBuiltinpaste_testpaste6_b7cad175a29bf140378fe64d7d07837e() {
        assertEval("argv <- list(list(c('dotplot', 'table', NA)), ' ', '\\r'); .Internal(paste(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinpaste_testpaste6_b7cad175a29bf140378fe64d7d07837e");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste011_34534ace7b59ff6e0e685b184f7584f2() {
        assertEval("argv <- list(list(character(0), character(0), character(0)), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpaste0_testpaste011_34534ace7b59ff6e0e685b184f7584f2");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste012_da7ae95b81738a4f4b05dd30963aefe5() {
        assertEval("argv <- list(list(c('Package:', 'Type:', 'Version:', 'Date:', 'License:', 'Depends:'), ' \\\\tab ', structure(c('myTst2', 'Package', '1.0', '2014-03-17', 'What license is it under?', 'methods'), .Names = c('Package', 'Type', 'Version', 'Date', 'License', 'Depends')), '\\\\cr'), NULL); .Internal(paste0(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpaste0_testpaste012_da7ae95b81738a4f4b05dd30963aefe5");
    }

    @Test
    public void TestrGenBuiltinpaste0_testpaste014_2763f64f89765584d87fafc03ece4085() {
        assertEval("argv <- list(list(c('text> ', 'text> ', 'text> ', 'text+ '), c('## The following two examples use latin1 characters: these may not', '## appear correctly (or be omitted entirely).', 'plot(1:10, 1:10, main = \\'text(...) examples\\\\n~~~~~~~~~~~~~~\\',', '     sub = \\'R is GNU ©, but not ® ...\\')')), '\\n'); .Internal(paste0(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpaste0_testpaste014_2763f64f89765584d87fafc03ece4085");
    }

    @Test
    public void TestrGenBuiltinplus_Date_testplus_Date1_951c77dec6bb34ba9e3cda442fb59ad9() {
        assertEval("argv <- structure(list(e1 = structure(1, units = 'days', class = 'difftime'),     e2 = structure(14579, class = 'Date')), .Names = c('e1',     'e2'));do.call('+.Date', argv)");
        check("TestrGenBuiltinplus_Date_testplus_Date1_951c77dec6bb34ba9e3cda442fb59ad9");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax14_80e524df95a2776589a3d3ad4eea1117() {
        assertEval("argv <- list(FALSE, structure(c(0, 0, -0.0906283137921162, -0.0801994352402973, -0.0235093686536505, -0.131187875867331, -0.131187875867331, -0.131187875867331, -0.131187875867331, 0, 0, 0, -0.106539777104723, -0.106539777104723, -0.106539777104723, 0, 0, 0.126786975893341, 0.126786975893341, 0.126786975893341, 0, -0.131187875867331, -0.131187875867331, -0.131187875867331, 0, -0.106539777104723, -0.106539777104723, -0.106539777104723, 0, 0, 0, -0.106539777104723, 0.172297822926899, 0.172297822926899, 0, 0, 0, 0, 0, -0.106539777104723, -0.106539777104723, -0.106539777104723, -0.106539777104723, 0, 0, 0, 0.172297822926899, 0.172297822926899), .Dim = c(12L, 4L)), 0); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinpmax_testpmax14_80e524df95a2776589a3d3ad4eea1117");
    }

    @Test
    public void TestrGenBuiltinpmax_testpmax2_17ea7566c426093659e50e7e5f08d0aa() {
        assertEval("argv <- list(FALSE, -100, structure(c(-Inf, 82.9775012103133, 8.55983483385341e+101, -Inf, 79.3831968838961, 8.55983483385341e+101), .Names = c('', '', '', '', '', ''))); .Internal(pmax(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinpmax_testpmax2_17ea7566c426093659e50e7e5f08d0aa");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin11_96e9aae810452d3c92e783cf262716d8() {
        assertEval("argv <- list(FALSE, c(2.35405350797934e-06, 0.000210159024072429, 0.000257684187404011, 0.000981478332360736, 0.00105260958830543, 0.00124148072892802, 0.00132598801923585, 0.00156850331255678, 0.00225455732762676, 0.003795380309271, 0.00611494315340942, 0.0161395372907077, 0.0330242962313738, 0.0353834177611007, 0.0523699658057458, 0.068319089314331, 0.0705922565893261, 0.0880512860101142, 0.0940103983967277, 0.112979808322889, 0.211501681388388, 0.492273640304204, 0.605329775053071, 0.626223946736039, 0.739515289321684, 0.828110328240387, 0.86333312789587, 1.19065433061771, 1.89079625396729, 2.05849377808347, 2.20921371984431, 2.85600042559897, 3.04889487308354, 4.66068200259841, 4.83080935233713, 4.92175460488491, 5.31945286062773, 5.75155046407955, 5.78319462345744), 0.943789021783783); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinpmin_testpmin11_96e9aae810452d3c92e783cf262716d8");
    }

    @Test
    public void TestrGenBuiltinpmin_testpmin2_e54be3c218a34fb4c1b808215121e317() {
        assertEval("argv <- list(FALSE, c(1.01547865839261, 1.01252937204691, 1.00644625408792, 0.998699246049516, 0.989861830865133, 0.980229984263028, 0.969980509594864, 0.959229159804225, 0.948056660278026, 0.948056660278026, 0.936413637553504, 0.924430242566905, 0.924430242566905, 0.912012661079992, 0.912012661079992, 0.912012661079992, 0.912012661079992, 0.912012661079992, 0.912012661079992, 0.89856564301575, 0.89856564301575, 0.89856564301575, 0.89856564301575, 0.884221004526004, 0.884221004526004, 0.884221004526004, 0.884221004526004, 0.868846889674391, 0.852918138766346, 0.852918138766346, 0.852918138766346, 0.836013989965276, 0.836013989965276, 0.818281118997659, 0.818281118997659, 0.799674858806929, 0.78048190648179, 0.760752205123712, 0.740524405390135, 0.698688252548957, 0.677121358432204, 0.677121358432204, 0.677121358432204, 0.653968759838845, 0.630226345284056, 0.60591293760604, 0.5810405538867, 0.5810405538867, 0.554772713636871, 0.554772713636871, 0.526885054753327, 0.526885054753327, 0.497124929362659, 0.497124929362659, 0.465290373327728, 0.431410832191818, 0.395597572090297, 0.358012869967492, 0.358012869967492, 0.358012869967492, 0.390645999939295, 0.390645999939295, 1.00856963764107, 1.00691545377429, 1.00354783420184, 0.994430782349702, 0.989161076962549, 0.983568844113983, 0.971651869906627, 0.965403818059832, 0.958998025317496, 0.952453588123512, 0.945785731840592, 0.939006829762577, 0.932127100227826, 0.925155098145928, 0.918098070593368, 0.910962219832367, 0.903752901643838, 0.896474777439562, 0.889131932689408, 0.874266085562073, 0.866749125736792, 0.85917963981466, 0.85917963981466, 0.85917963981466, 0.851432533571458, 0.851432533571458, 0.835646571743332, 0.819657377450186, 0.811591248493136, 0.811591248493136, 0.803403072648503, 0.803403072648503, 0.803403072648503, 0.79500789222886, 0.79500789222886, 0.78647848620035, 0.777810139927498, 0.777810139927498, 0.768997769554365, 0.760132009504045, 0.751214427604144, 0.751214427604144, 0.751214427604144, 0.742042333451995, 0.742042333451995, 0.732706928458195, 0.723314130803801, 0.713865427684027, 0.713865427684027, 0.704242881823747, 0.704242881823747, 0.694438026993695, 0.684573363315093, 0.674650164742493, 0.664669564073024, 0.664669564073024, 0.664669564073024, 0.654342845821626, 0.643951412016272, 0.633496370097346, 0.633496370097346, 0.622814395282618, 0.622814395282618, 0.611712238653597, 0.600530813249145, 0.589271296091113, 0.577934661160654, 0.577934661160654, 0.554603983179207, 0.542813560886543, 0.530698712197854, 0.530698712197854, 0.518231810914377, 0.518231810914377, 0.518231810914377, 0.505091485230836, 0.491816896403255, 0.478408881208852, 0.464867758182769, 0.464867758182769, 0.450831087639633, 0.43663736059032, 0.422285766886131, 0.422285766886131, 0.407334269006221, 0.392187384239101, 0.376842383287708, 0.376842383287708, 0.36074886771613, 0.344393472477708, 0.327769800745284, 0.310869313273075, 0.293681131444043, 0.27619182464681, 0.258385252532011, 0.240242648154923, 0.221743435532848, 0.202868148187672, 0.183607543425597, 0.183607543425597, 0.16434288099768, 0.16434288099768, 0.16434288099768, 0.16434288099768, 1.01958384078021, 1.0158820929578, 1.00818641731953, 0.998355892450852, 0.98711678103063, 0.974844224342501, 0.961762390694789, 0.94801800556359, 0.933713296997721, 0.918922795982771, 0.918922795982771, 0.903505632185222, 0.887664218536847, 0.8714385967694, 0.854601072478364, 0.837400228461143, 0.81986117753083, 0.80200434269104, 0.783846415628184, 0.765401054645917, 0.746679400612251, 0.727690462294359, 0.70844140545579, 0.688937769124757, 0.669183625153216, 0.649181692191925, 0.628933411668998, 0.608438990755048, 0.608438990755048, 0.587078835123946, 0.565417411428399, 0.543452081149807, 0.521178337588507, 0.498589701519445, 0.475677565090786, 0.475677565090786, 0.451501204504207, 0.426861888982249, 0.401742325799741, 0.376120821121693, 0.349971441565183, 0.323265236972233, 0.323265236972233, 0.294966951140867, 0.265661696527275, 0.265661696527275, 0.24198035833067, 0.229359831745471, NA, NA), 1); .Internal(pmin(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinpmin_testpmin2_e54be3c218a34fb4c1b808215121e317");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot1_a4e8741b0d2003d978ab0e51bbe41355() {
        assertEval("argv <- list(1:2); .Internal(polyroot(argv[[1]]))");
        check("TestrGenBuiltinpolyroot_testpolyroot1_a4e8741b0d2003d978ab0e51bbe41355");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot2_d20692084f8b005f6ccd4c11912ac209() {
        assertEval("argv <- list(FALSE); .Internal(polyroot(argv[[1]]))");
        check("TestrGenBuiltinpolyroot_testpolyroot2_d20692084f8b005f6ccd4c11912ac209");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot3_b1546bf612d8703e9484476c76b78305() {
        assertEval("argv <- list(structure(c(1, 0.035205614861993, 0.237828814667385), .Names = c('', '', ''))); .Internal(polyroot(argv[[1]]))");
        check("TestrGenBuiltinpolyroot_testpolyroot3_b1546bf612d8703e9484476c76b78305");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot4_fdfc6ad09a4ee5deaf5df7ba216824e9() {
        assertEval("argv <- list(c(1, -1.16348488318732, 0.667550726251972, -0.342308178637008)); .Internal(polyroot(argv[[1]]))");
        check("TestrGenBuiltinpolyroot_testpolyroot4_fdfc6ad09a4ee5deaf5df7ba216824e9");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot5_ff2fc3d87ee4382c27712c5bc1df637d() {
        assertEval("argv <- list(c(1, 0.0853462951557329, -0.433003162033324, 0.141816558560935, -0.268523717394886, -0.0970671649038473)); .Internal(polyroot(argv[[1]]))");
        check("TestrGenBuiltinpolyroot_testpolyroot5_ff2fc3d87ee4382c27712c5bc1df637d");
    }

    @Test
    public void TestrGenBuiltinpolyroot_testpolyroot6_50b8cdf9a18ab7584669e0d574175105() {
        assertEval("argv <- list(c(1, 8, 28, 56, 70, 56, 28, 8, 1)); .Internal(polyroot(argv[[1]]))");
        check("TestrGenBuiltinpolyroot_testpolyroot6_50b8cdf9a18ab7584669e0d574175105");
    }

    @Test
    public void TestrGenBuiltinpretty_testpretty1_c23f2c6b50cc60e61b467e4afc8f808e() {
        assertEval("argv <- list(0L, 3L, 5, 1, 0.75, c(1.5, 2.75), 0); .Internal(pretty(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinpretty_testpretty1_c23f2c6b50cc60e61b467e4afc8f808e");
    }

    @Test
    public void TestrGenBuiltinpretty_testpretty2_c739b1c7e19b698c84aa9eff7e8703dd() {
        assertEval("argv <- list(-0.03, 1.11, 5, 1, 0.75, c(1.5, 2.75), 0); .Internal(pretty(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinpretty_testpretty2_c739b1c7e19b698c84aa9eff7e8703dd");
    }

    @Test
    public void TestrGenBuiltinpretty_testpretty3_f41f610e453ef5de72a0ad299177795a() {
        assertEval("argv <- list(-6.64448090063514e-06, 6.64454021993011e-06, 1, 0, 0.75, c(1.5, 2.75), 0); .Internal(pretty(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinpretty_testpretty3_f41f610e453ef5de72a0ad299177795a");
    }

    @Test
    public void TestrGenBuiltinpretty_testpretty4_f1466620b57e5d6dcf45b3ca7d1bed44() {
        assertEval("argv <- list(1.234e+100, 1.234e+100, 5, 1, 0.75, c(1.5, 2.75), 0); .Internal(pretty(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinpretty_testpretty4_f1466620b57e5d6dcf45b3ca7d1bed44");
    }

    @Test
    public void TestrGenBuiltinprimUntrace_testprimUntrace1_ac44135078d6ab04298e590c5b38ccad() {
        assertEval("argv <- list(.Primitive('sum'));.primUntrace(argv[[1]]);");
        check("TestrGenBuiltinprimUntrace_testprimUntrace1_ac44135078d6ab04298e590c5b38ccad");
    }

    @Test
    public void TestrGenBuiltinprint_testprint2_21b928ed59ed0a818fdfc695ec55aeee() {
        assertEval("argv <- structure(list(x = structure(list(modelID = 0L, terms = Species ~     Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,     class.lev = c('setosa', 'versicolor', 'virginica'), model = 'rf',     formula = Species ~ Sepal.Length + Sepal.Width + Petal.Length +         Petal.Width, noClasses = 3L, priorClassProb = c(0.333333333333333,         0.333333333333333, 0.333333333333333), avgTrainPrediction = 0,     noNumeric = 4L, noDiscrete = 1L, discAttrNames = 'Species',     discValNames = list(c('setosa', 'versicolor', 'virginica')),     numAttrNames = c('Sepal.Length', 'Sepal.Width', 'Petal.Length',         'Petal.Width'), discmap = 1L, nummap = 2:5, skipmap = integer(0)),     .Names = c('modelID', 'terms', 'class.lev', 'model', 'formula',         'noClasses', 'priorClassProb', 'avgTrainPrediction',         'noNumeric', 'noDiscrete', 'discAttrNames', 'discValNames',         'numAttrNames', 'discmap', 'nummap', 'skipmap'), class = 'CoreModel')),     .Names = 'x');do.call('print', argv)");
        check("TestrGenBuiltinprint_testprint2_21b928ed59ed0a818fdfc695ec55aeee");
    }

    @Test
    public void TestrGenBuiltinprint_testprint3_415f3efb63323b27110a8621a1a67e68() {
        assertEval("argv <- structure(list(x = structure(list(CV = c(4.44258707232128,     1.3448257559694, 0.885694975057761, 0.838088461472644), mit = structure(list(p = structure(c(0.452549279246557,     0.13386271764225, 0.267245510599797, 0.146342492511396),     .Names = c('cmp1', 'cmp2', 'cmp3', 'cmp4')), mu = structure(c(0.381966097098555,     3.82765024730876, 1.80304880351015, 2.5878804906034, 2.61803339869107,     0.203368399460934, 1.05601823938856, 0.0596409214659023),     .Dim = c(4L, 2L), .Dimnames = list(c('cmp1', 'cmp2', 'cmp3',         'cmp4'), c('k1', 'k2'))), Sigma = structure(c(0.22917975838358,     0.847714717429939, 0.288537968483766, 0.738832302812549,     -0.400000241640847, -0.0861897092187198, -0.100073467783835,     -0.170562219060232, -0.400000241640847, -0.0861897092187198,     -0.100073467783835, -0.170562219060232, 1.57082072508295,     0.0727738502834565, 0.219785702621389, 0.217416957416503),     .Dim = c(4L, 4L), .Dimnames = list(c('cmp1', 'cmp2', 'cmp3',         'cmp4'), c('k1k1', 'k1k2', 'k2k1', 'k2k2'))), df = 1),     .Names = c('p', 'mu', 'Sigma', 'df')), summary = structure(list(H = c(1,     2, 3, 4), METHOD.mu = structure(c(1L, 1L, 1L, 1L), .Label = 'BFGS',     class = 'factor'), TIME.mu = c(1.301, 0.634, 1.148, 0.716000000000001),     METHOD.p = structure(c(1L, 2L, 2L, 2L), .Label = c('NONE',         'NLMINB'), class = 'factor'), TIME.p = c(0, 0.00600000000000023,         0.0129999999999981, 0.0309999999999988), CV = c(4.44258707232128,         1.3448257559694, 0.885694975057761, 0.838088461472644)),     .Names = c('H', 'METHOD.mu', 'TIME.mu', 'METHOD.p', 'TIME.p',         'CV'), row.names = c(NA, 4L), class = 'data.frame')),     .Names = c('CV', 'mit', 'summary'))), .Names = 'x');do.call('print', argv)");
        check("TestrGenBuiltinprint_testprint3_415f3efb63323b27110a8621a1a67e68");
    }

    @Test
    public void TestrGenBuiltinprint_testprint5_1578c83364ea19bcf2b97ba700ba97e7() {
        assertEval("argv <- structure(list(x = structure(list(statistic = structure(0.87901108669074,     .Names = 't'), parameter = structure(19, .Names = 'df'),     p.value = 0.390376937081292, conf.int = structure(c(-0.332667989442433,         0.814407243771461), conf.level = 0.95), estimate = structure(0.240869627164514,         .Names = 'mean of x'), null.value = structure(0, .Names = 'mean'),     alternative = 'two.sided', method = 'One Sample t-test',     data.name = 'x'), .Names = c('statistic', 'parameter', 'p.value',     'conf.int', 'estimate', 'null.value', 'alternative', 'method',     'data.name'), class = 'htest')), .Names = 'x');do.call('print', argv)");
        check("TestrGenBuiltinprint_testprint5_1578c83364ea19bcf2b97ba700ba97e7");
    }

    @Test
    public void TestrGenBuiltinprintAsIs_testprintAsIs1_b2310df12778fa6236c5282fdb3d843b() {
        assertEval("argv <- structure(list(x = structure(c(2L, 5L), .Dim = 1:2, class = 'AsIs')),     .Names = 'x');do.call('print.AsIs', argv)");
        check("TestrGenBuiltinprintAsIs_testprintAsIs1_b2310df12778fa6236c5282fdb3d843b");
    }

    @Test
    public void TestrGenBuiltinprintDeferredWarnings_testprintDeferredWarnings1_9d57a763c4d8b3a0c2a28b3867340b7f() {
        assertEval(" .Internal(printDeferredWarnings())");
        check("TestrGenBuiltinprintDeferredWarnings_testprintDeferredWarnings1_9d57a763c4d8b3a0c2a28b3867340b7f");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault12_eaba7de6f0345c99d4f72f5a287d052e() {
        assertEval("argv <- list(structure(c(' 79.53', '  6.00', ' 86.20', '  6.00', ' 69.77', '  5.00', ' 98.03', '  6.00', '108.03', '  6.00', ' 89.20', '  6.00', '114.20', '  6.00', '116.70', '  6.00', '110.37', '  6.00', '124.37', '  6.00', '126.37', '  6.00', '118.03', '  6.00'), .Dim = c(6L, 4L), .Dimnames = structure(list(V = c('Golden.rain', 'rep        ', 'Marvellous ', 'rep        ', 'Victory    ', 'rep        '), N = c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt')), .Names = c('V', 'N'))), NULL, FALSE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault12_eaba7de6f0345c99d4f72f5a287d052e");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault15_2eb347d14508384843a03f2f30c4d71a() {
        assertEval("argv <- list(structure(c('1', '2', '1'), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = '')), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault15_2eb347d14508384843a03f2f30c4d71a");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault2_27174360a207a522fae66ced2ce8da07() {
        assertEval("argv <- list(structure(c(' 1', 'NA', ' 1', '1.1', ' NA', '2.0', '1.1+0i', '    NA', '3.0+0i', 'NA', 'NA', 'NA', 'FALSE', '   NA', ' TRUE', 'abc', NA, 'def'), .Dim = c(3L, 6L), .Dimnames = list(c('1', '2', '3'), c('A', 'B', 'C', 'D', 'E', 'F'))), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault2_27174360a207a522fae66ced2ce8da07");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault3_10bb59d71383d577ec34c676ad64302e() {
        assertEval("argv <- list(structure(c('1', '2', '\\\\b', '4', '5', '\\\\040', '\\\\x20', 'c:\\\\spencer\\\\tests', '\\\\t', '\\\\n', '\\\\r'), .Dim = c(11L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'), 'TEST')), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault3_10bb59d71383d577ec34c676ad64302e");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault30_df344f2be7f9f62a9f8544f8fecc43ba() {
        assertEval("argv <- list(structure(c(78.7365206866197, 17, 98.5088731171753, 18, 113.842206450509, 18, 123.008873117175, 18), .Dim = c(2L, 4L), .Dimnames = list(c('', 'rep'), c('0.0cwt', '0.2cwt', '0.4cwt', '0.6cwt'))), 4L, TRUE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault30_df344f2be7f9f62a9f8544f8fecc43ba");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault4_07a408c4f936125cc7834ead16815d31() {
        assertEval("argv <- list(quote(~a + b:c + d + e + e:d), NULL, TRUE, NULL, NULL, FALSE, NULL, TRUE, TRUE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault4_07a408c4f936125cc7834ead16815d31");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault5_95a8cbc9ecf7d4ce071eb164f1fc0d11() {
        assertEval("argv <- list(structure(c(-1.05715, -0.48359, 0.0799, 0.44239, 1.2699), .Names = c('Min', '1Q', 'Median', '3Q', 'Max')), 4L, TRUE, NULL, NULL, FALSE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault5_95a8cbc9ecf7d4ce071eb164f1fc0d11");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault7_c3fb3a6848f651750242692a255a062b() {
        assertEval("argv <- list(structure(c(NA, NA, NA, 'a', NA, NA, 'b', 'd', NA, '10', '12', '14'), .Dim = 3:4), NULL, TRUE, '----', NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault7_c3fb3a6848f651750242692a255a062b");
    }

    @Test
    public void TestrGenBuiltinprintdefault_testprintdefault9_ad3e9cdbbe7cbfef338c14d5524eabcd() {
        assertEval("argv <- list(structure(c('abc', 'def\\'gh'), .Dim = 1:2, .Dimnames = list('1', c('a', 'b'))), NULL, FALSE, NULL, NULL, TRUE, NULL, TRUE, FALSE); .Internal(print.default(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]], argv[[8]], argv[[9]]))");
        check("TestrGenBuiltinprintdefault_testprintdefault9_ad3e9cdbbe7cbfef338c14d5524eabcd");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction1_1021d86ad524e541a9e62f3bebedf3e3() {
        assertEval("argv <- list(.Primitive('+'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinprintfunction_testprintfunction1_1021d86ad524e541a9e62f3bebedf3e3");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction2_7841a6fd4b7f2d015cae574dc09db85e() {
        assertEval("argv <- list(.Primitive('if'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinprintfunction_testprintfunction2_7841a6fd4b7f2d015cae574dc09db85e");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction3_dab1c69d5d496ff15cb56eb6d8a68170() {
        assertEval("argv <- list(.Primitive('c'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinprintfunction_testprintfunction3_dab1c69d5d496ff15cb56eb6d8a68170");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction4_e6dc900fb27246048b43ec42f83eb5d0() {
        assertEval("argv <- list(.Primitive('.Internal'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinprintfunction_testprintfunction4_e6dc900fb27246048b43ec42f83eb5d0");
    }

    @Test
    public void TestrGenBuiltinprintfunction_testprintfunction5_6be715f4c61b9c874a7c0f88aec283b5() {
        assertEval("argv <- list(.Primitive('log'), TRUE); .Internal(print.function(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinprintfunction_testprintfunction5_6be715f4c61b9c874a7c0f88aec283b5");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix1_60cb396f76ef6a0a993cbb6a8046f8b7() {
        assertEval("argv <- list(structure(c(1, 6, 9, 6, 4, 1, 1, 2, 1, 0.305397625390859, 0.00170825768891124, 8.51556634078892e-12, 0.64987756971621, 0.0197968749793939, 5.28672163823767e-10, 0.00471555351643001, 2.33367394341443e-13, 1.21630438148624e-64, 1, 1, 1), .Dim = c(3L, 7L), .Dimnames = list(NULL, c('time', 'n.risk', 'n.event', 'survival', 'std.err', 'lower 95% CI', 'upper 95% CI'))), c('', '', ''), c('time', 'n.risk', 'n.event', 'survival', 'std.err', 'lower 95% CI', 'upper 95% CI'), TRUE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinprmatrix_testprmatrix1_60cb396f76ef6a0a993cbb6a8046f8b7");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix2_ebeed9735842cb288d5c6274d3905e4f() {
        assertEval("argv <- list(structure(FALSE, .Dim = c(1L, 1L)), NULL, NULL, TRUE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinprmatrix_testprmatrix2_ebeed9735842cb288d5c6274d3905e4f");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix3_c92fff4f442fac61d8bfb57b40e354ae() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 8, 11, 12, 15, 17, 22, 23, 21, 19, 17, 16, 14, 12, 8, 6, 4, 3, 2, 1, 2, 2, 1, 2, 2, 4, 2, 2, 1, 1, 1, 1, 0.904761904761905, 0.80952380952381, 0.761904761904762, 0.666666666666667, 0.571428571428571, 0.380952380952381, 0.285714285714286, 0.19047619047619, 0.142857142857143, 0.0952380952380952, 0.0476190476190476, 0, 0.0640564484890047, 0.0856890867468988, 0.0929428640903365, 0.102868899974728, 0.107989849431208, 0.105971169574131, 0.0985807941917649, 0.0856890867468988, 0.0763603548321212, 0.0640564484890047, 0.0464714320451682, NaN, 0.670045882235034, 0.568905059924173, 0.519391415328429, 0.425350435565247, 0.337976953859493, 0.183066548820394, 0.116561326436765, 0.0594817013611753, 0.0356573551906667, 0.016259260212247, 0.00332446304253118, NA, 0.975294149038113, 0.923888828559295, 0.893257109782487, 0.82504400879734, 0.749240709943216, 0.577788677745831, 0.481819648009025, 0.37743489058515, 0.321161574680869, 0.261249981968687, 0.197044905698946, NA), .Dim = c(12L, 7L), .Dimnames = list(NULL, c('time', 'n.risk', 'n.event', 'survival', 'std.err', 'lower 95% CI', 'upper 95% CI'))), c('', '', '', '', '', '', '', '', '', '', '', ''), c('time', 'n.risk', 'n.event', 'survival', 'std.err', 'lower 95% CI', 'upper 95% CI'), TRUE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinprmatrix_testprmatrix3_c92fff4f442fac61d8bfb57b40e354ae");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix4_b248179e13be08e76e43608895dce796() {
        assertEval("argv <- list(structure(c(952L, 3622L, 202L, 406L), .Dim = c(2L, 2L), .Dimnames = list(c('subcohort', 'cohort'), c('1', '2'))), c('subcohort', 'cohort'), c('1', '2'), FALSE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinprmatrix_testprmatrix4_b248179e13be08e76e43608895dce796");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix5_d5511f65bf3cef3bd9075a4969ad40f1() {
        assertEval("argv <- list(structure(c(-1.89646294299258, 1.16675019914746, -8.10054918052941, -5.02922966334328, -0.332284173685658, -0.370285767776029, -0.422218802914528, 0.27824687717147, NA, 0.150098588668891, 3.21153879975245, 0.000303372486059531, 0.00654384959664698, 0.717283460804982, 0.690536969224971, 0.655590578569862, 1.32081223535046, NA, 1.38078223740269, 0.565646487676971, 0.698724423746393, 0.770086232143856, 0.0568682431416458, 0.116409970657657, 0.0584328435912827, 0.0510212342180821, 0, -1.37346997348395, 2.06268442316178, -11.5933390979754, -6.53073571948212, -5.84305326362929, -3.1808767383421, -7.22571035337252, 5.45355049590036, NA, 0.17, 0.039, 0, 6.5e-11, 5.1e-09, 0.0015, 5e-13, 4.9e-08, NA), .Dim = c(9L, 5L), .Dimnames = list(c('toccfarm', 'toccoperatives', 'toccprofessional', 'toccsales', 'tocccraftsmen:education', 'toccfarm:education', 'toccoperatives:education', 'toccprofessional:education', 'toccsales:education'), c('coef', 'exp(coef)', 'se(coef)', 'z', 'p'))), c('toccfarm', 'toccoperatives', 'toccprofessional', 'toccsales', 'tocccraftsmen:education', 'toccfarm:education', 'toccoperatives:education', 'toccprofessional:education', 'toccsales:education'), c('coef', 'exp(coef)', 'se(coef)', 'z', 'p'), TRUE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinprmatrix_testprmatrix5_d5511f65bf3cef3bd9075a4969ad40f1");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix6_63a9003a721f9c1e855e025666d1abf2() {
        assertEval("argv <- list(structure(c('splines-package', 'as.polySpline', 'asVector', 'backSpline', 'bs', 'interpSpline', 'ns', 'periodicSpline', 'polySpline', 'predict.bs', 'predict.bSpline', 'predict.nbSpline', 'predict.npolySpline', 'predict.ns', 'predict.pbSpline', 'predict.ppolySpline', 'spline.des', 'splineDesign', 'splineKnots', 'splineOrder', 'splines', 'xyVector', 'splines-package', 'polySpline', 'asVector', 'backSpline', 'bs', 'interpSpline', 'ns', 'periodicSpline', 'polySpline', 'predict.bs', 'predict.bSpline', 'predict.bSpline', 'predict.bSpline', 'predict.bs', 'predict.bSpline', 'predict.bSpline', 'splineDesign', 'splineDesign', 'splineKnots', 'splineOrder', 'splines-package', 'xyVector'), .Dim = c(22L, 2L)), NULL, c('Column 1', 'Column 2', 'Column 3'), FALSE, TRUE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinprmatrix_testprmatrix6_63a9003a721f9c1e855e025666d1abf2");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix7_91f847560597d197de0592dbb3433eb7() {
        assertEval("argv <- list(structure(c(' 0.228763', '-0.000666', '', '0.08909', '0.00426', '', '0.08899', '0.00426', '', '6.59', '0.02', '6.02', '1.00', '1.00', '3.06', '0.01', '0.88', '0.12'), .Dim = c(3L, 6L), .Dimnames = list(c('male', 'tt(agechf), linear', 'tt(agechf), nonlin'), c('coef', 'se(coef)', 'se2', 'Chisq', 'DF', 'p'))), c('male', 'tt(agechf), linear', 'tt(agechf), nonlin'), c('coef', 'se(coef)', 'se2', 'Chisq', 'DF', 'p'), FALSE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinprmatrix_testprmatrix7_91f847560597d197de0592dbb3433eb7");
    }

    @Test
    public void TestrGenBuiltinprmatrix_testprmatrix8_93153d21355a549222312d399fa77443() {
        assertEval("argv <- list(structure(c(' 0.00561', '-1.65487', '', '0.012', '0.483', '', '0.00872', '0.38527', '', ' 0.22', '11.74', '20.33', ' 1.0', ' 1.0', '13.9', '0.64000', '0.00061', '0.12000'), .Dim = c(3L, 6L), .Dimnames = list(c('age', 'sex', 'frailty(id, dist = \\'t\\', c'), c('coef', 'se(coef)', 'se2', 'Chisq', 'DF', 'p'))), c('age', 'sex', 'frailty(id, dist = \\'t\\', c'), c('coef', 'se(coef)', 'se2', 'Chisq', 'DF', 'p'), FALSE, FALSE, NULL); .Internal(prmatrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinprmatrix_testprmatrix8_93153d21355a549222312d399fa77443");
    }

    @Test
    public void TestrGenBuiltinprod_testprod10_e1494e05b9107ae9c2d91b8ea3945c61() {
        assertEval("prod( );");
        check("TestrGenBuiltinprod_testprod10_e1494e05b9107ae9c2d91b8ea3945c61");
    }

    @Test
    public void TestrGenBuiltinprod_testprod11_444155a2fd66d2da798ec4400cbed401() {
        assertEval("argv <- list(numeric(0));prod(argv[[1]]);");
        check("TestrGenBuiltinprod_testprod11_444155a2fd66d2da798ec4400cbed401");
    }

    @Test
    public void TestrGenBuiltinprod_testprod2_d5fed814f10821c421305e0e621257d9() {
        assertEval("argv <- list(c(1000L, 1000L));prod(argv[[1]]);");
        check("TestrGenBuiltinprod_testprod2_d5fed814f10821c421305e0e621257d9");
    }

    @Test
    public void TestrGenBuiltinprod_testprod5_ddf539c72d5be0c972f23ef5743443b4() {
        assertEval("argv <- list(integer(0));prod(argv[[1]]);");
        check("TestrGenBuiltinprod_testprod5_ddf539c72d5be0c972f23ef5743443b4");
    }

    @Test
    public void TestrGenBuiltinprod_testprod8_f63c0acc4c4aa52ea474e1811bc7a816() {
        assertEval("argv <- list(c(0.138260298853371, 0.000636169906925458));prod(argv[[1]]);");
        check("TestrGenBuiltinprod_testprod8_f63c0acc4c4aa52ea474e1811bc7a816");
    }

    @Test
    public void TestrGenBuiltinprod_testprod9_1b54654e4fc4c2ca1eb33a3d5d9120f7() {
        assertEval("argv <- list(NA_integer_);prod(argv[[1]]);");
        check("TestrGenBuiltinprod_testprod9_1b54654e4fc4c2ca1eb33a3d5d9120f7");
    }

    @Test
    public void TestrGenBuiltinproptable_testproptable1_987a37a48367daa4900b5d7e1ddf4522() {
        assertEval("argv <- structure(list(x = structure(c(15L, 37L, 30L, 18L, 12L,     30L, 64L, 44L), .Dim = c(4L, 2L), .Dimnames = structure(list(Evaluation = c('very good',     'good', 'bad', 'very bad'), Location = c('city centre', 'suburbs')),     .Names = c('Evaluation', 'Location'))), margin = 2), .Names = c('x',     'margin'));do.call('prop.table', argv)");
        check("TestrGenBuiltinproptable_testproptable1_987a37a48367daa4900b5d7e1ddf4522");
    }

    @Test
    public void TestrGenBuiltinpsigamma_testpsigamma1_b3ce0b3a4e9f00cae261ee1e1fdf25fe() {
        assertEval("argv <- list(c(-100, -3, -2, -1, 0, 1, 2, -99.9, -7.7, -3, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.0999999999999996, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 5.1, 77), 1); .Internal(psigamma(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsigamma_testpsigamma1_b3ce0b3a4e9f00cae261ee1e1fdf25fe");
    }

    @Test
    public void TestrGenBuiltinpsigamma_testpsigamma2_b5501ab01e61fc203ea02dd23a8bf50f() {
        assertEval("argv <- list(c(1e+30, 1e+45, 1e+60, 1e+75, 1e+90), 2); .Internal(psigamma(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsigamma_testpsigamma2_b5501ab01e61fc203ea02dd23a8bf50f");
    }

    @Test
    public void TestrGenBuiltinpsigamma_testpsigamma3_82d1df5018204925e2ea7e2e7f75b101() {
        assertEval("argv <- list(c(1e+20, 1e+30, 1e+40, 1e+50, 1e+60), 5); .Internal(psigamma(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsigamma_testpsigamma3_82d1df5018204925e2ea7e2e7f75b101");
    }

    @Test
    public void TestrGenBuiltinpsigamma_testpsigamma4_b95dcdcb5d051b464b6c40439dc6c93a() {
        assertEval("argv <- list(c(-100, -3, -2, -1, 0, 1, 2, -99.9, -7.7, -3, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.0999999999999996, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 5.1, 77), 0); .Internal(psigamma(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsigamma_testpsigamma4_b95dcdcb5d051b464b6c40439dc6c93a");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort1_172f2c78025ed325182f497c9584531a() {
        assertEval("argv <- list(7:8, 1:2); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort1_172f2c78025ed325182f497c9584531a");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort10_e5ec8754c5ebb7064bf2ffe927cb7e00() {
        assertEval("argv <- list(c(-1.05715266611575, -0.873306430909872, -0.548705796690786, -0.288240908441576, -0.0649703574297026, 0.224762433374997, 0.3255545927283, 0.4813346401898, 0.530823516045489, 1.2699009772491), c(1L, 3L, 4L, 5L, 6L, 7L, 8L, 10L)); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort10_e5ec8754c5ebb7064bf2ffe927cb7e00");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort11_48b2eaf2776e92ef0affd17e60356d35() {
        assertEval("argv <- list(c(-1.05715266611575, -0.873306430909873, -0.548705796690787, -0.288240908441577, -0.0649703574297025, 0.224762433374994, 0.3255545927283, 0.481334640189799, 0.530823516045488, 1.2699009772491), c(1L, 3L, 4L, 5L, 6L, 7L, 8L, 10L)); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort11_48b2eaf2776e92ef0affd17e60356d35");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort12_57d6bd2c7042ca399ffcdefe60086ee0() {
        assertEval("argv <- list(c(-Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -4.17369555651928e+302, -2.72671165723473e+289, -2.21240023126594e+276, -2.24780296109123e+263, -2.88514442494869e+250, -4.72336572671053e+237, -9.96611412047338e+224, -2.74100158340596e+212, -9.94902790498679e+199, -4.83110332887119e+187, -3.18582547396557e+175, -2.90089508183654e+163, -3.71562599613334e+151, -6.83535188151783e+139, -1.84898368353639e+128, -7.55412056676629e+116, -4.80716085942859e+105, -4.9383857330861e+94, -8.54170618068872e+83, -2.61556777274611e+73, -1.5069799345972e+63, -1.76183826972506e+53, -4.60125024792566e+43, -3.04622557026196e+34, -6.08456909882282e+25, -473300382255715392, -21650982809.6744, -12820.0784261145, -1.12778377684043), c(1L, 13L, 14L, 26L, 38L, 39L, 51L)); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort12_57d6bd2c7042ca399ffcdefe60086ee0");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort13_604221e547b97e1d9794ea4ad42fa86f() {
        assertEval("argv <- list(c(0.5, 0.6, 1.2, 1.3, 1.6, 5.8, 6.2, 3.7, 5.1, 5, 4, 4, 5.3, 1.4, 6.6, 3.8, 2.6, 3.2, 2.9, 6.8, 10.6, 7.6, 9.3, 8, 10, 10, 8, 10.5, 10.5, 9.7, 9.7, 9.4, 8.9, 8.8, 8, 10.1, 8.5, 9.1, 7.5, 7.4, 7.5, 7.6, 8.4, 8.5, 10.8, 11.1, 12, 12, 18, 17.7, 16, 15, 14, 12.9, 12.7, 12.6, 17.9, 12.1, 17.7, 16.1, 13, 17.3, 17, 16.7, 13, 15.7, 19, 16, 17, 12, 12.2, 12.8, 14.6, 14.9, 17.6, 21, 20.5, 19.6, 20.2, 20.8, 21.1, 21.9, 20.5, 19.2, 22.5, 22, 23.2, 23, 22, 22, 23.4, 23.4, 23.5, 29, 26, 25, 28.5, 25.4, 29, 24.2, 23.9, 24.6, 25.7, 25.3, 28.6, 26.5, 29, 37.8, 30.9, 42, 31, 38.5, 41.4, 43.6, 46.7, 37.4, 45, 35.9, 36.1, 32, 44.4, 40.3, 30, 31, 32, 32.7, 36, 43.5, 33.1, 32.9, 36.3, 38.9, 30, 46.1, 45, 47.1, 47.7, 187, 147, 130, 49.2, 62, 141, 122, 105, 62, 64, 123, 112, 105, 63.6, 60, 49, 66, 87, 56.9, 60.7, 61.4, 156, 62, 64, 82, 88, 48.3, 109, 107, 85, 91, 148, 145, 53.1, 50, 92.2, 224, 293, 300, 211, 200, 197, 203, 359, 370), c(1L, 46L, 47L, 91L, 92L, 136L, 137L, 182L)); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort13_604221e547b97e1d9794ea4ad42fa86f");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort14_1f46479d96526c8280961374a4437883() {
        assertEval("argv <- list(c(-1.36919169254062, -0.667819876370237, -0.253162069270378, -0.0834190388782434, -0.00786394222146348, 0.0246733498130512, 0.0730305465518564, 0.0881443844426084, 0.170711734013213, 0.552921941721332), c(1L, 3L, 4L, 5L, 6L, 7L, 8L, 10L)); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort14_1f46479d96526c8280961374a4437883");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort2_ffa274c0158bcb248ad74c3c91dbf08f() {
        assertEval("argv <- list(c(0.0499999999999972, 0.300000000000004, 1.1, 0.0500000000000007, 0, 0.25, 1, 2.15, 1.95, 2.09999999999999, 1.95, 2.04999999999999, 2.59999999999999, 2.59999999999999, 2.6, 4.25, 3.45, 2.65000000000001, 3.49999999999999, 3.75000000000001, 2.75, 3.05, 2.8, 4.45, 3.35, 7.7, 14.2), 14L); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort2_ffa274c0158bcb248ad74c3c91dbf08f");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort3_0f3c20da4c3fec6bc4e005ac32d2bcea() {
        assertEval("argv <- list(c(4.23272528138341e-16, 5.68989300120393e-16, 0.0499999999999982, 3.05311331771918e-16, 0.049999999999999, 0.0499999999999994, 3.05311331771918e-16, 0.0499999999999994, 0.100000000000001, 0.0999999999999994, 0.0999999999999994, 0.0500000000000006, 0.15, 0.15, 0.100000000000001, 0.0499999999999997, 0.150000000000001, 0.0999999999999995, 0.0999999999999993, 0.100000000000001, 0.0999999999999994, 0.100000000000001, 0.250000000000001, 0.250000000000001, 0.299999999999999, 0.199999999999999, 0.200000000000001, 0.3, 0.25, 0.199999999999999, 0.199999999999999, 0.150000000000001, 0.200000000000001, 0.199999999999998, 0.249999999999999, 0.199999999999999, 0.3, 0.350000000000001, 0.35, 0.300000000000001, 0.3, 0.350000000000002, 0.35, 0.35, 0.300000000000001, 0.350000000000001, 0.399999999999999, 0.4, 0.349999999999999, 0.350000000000001, 0.400000000000001, 0.300000000000001, 0.400000000000001, 0.449999999999999, 0.45, 0.450000000000001, 0.45, 0.450000000000001, 1.05, 0.7, 0.6, 1, 0.500000000000001, 0.5, 0.699999999999999, 1.05, 0.850000000000001, 0.650000000000001, 0.750000000000001, 0.75, 1, 0.699999999999999, 0.749999999999999, 1.05, 0.549999999999999, 0.500000000000001, 0.7, 0.8, 0.500000000000001, 0.650000000000001, 0.700000000000001, 0.599999999999999, 0.9, 0.75, 0.949999999999999, 0.899999999999999, 0.550000000000001, 1, 1.05, 1.05, 0.600000000000001, 0.6, 1.05, 0.749999999999999, 0.949999999999999, 1.1, 2.15, 1.45, 1.3, 2.1, 4.85, 3.7, 2.05, 1.2, 1.4, 1.3, 1.2, 1.85), 54:55); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort3_0f3c20da4c3fec6bc4e005ac32d2bcea");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort4_1eeecdb14cfb1f3797c171260ca41765() {
        assertEval("argv <- list(c(0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.0499999999999998, 0.05, 0.05, 0.05, 0.0499999999999999, 0.05, 0.0499999999999999, 0.05, 0.0499999999999999, 0.0499999999999999, 0.05, 0.0499999999999999, 0.0499999999999999, 0.05, 0.05, 0.0499999999999998, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.0499999999999999, 0.05, 0.05, 0.05, 0.0499999999999999, 0.0499999999999999, 0.0499999999999999, 0.05, 0.05, 0.0499999999999999, 0.05, 0.0499999999999999, 0.05, 0.05, 0.05, 0.0499999999999998, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.0555556, 0.05555554, 0.05555556, 0.05555556, 0.05555554, 0.0555556, 0.0555555, 0.0555556, 0.0555555, 0.0555556, 0.0555555, 0.0555556, 0.0555556, 0.0555555, 0.0555555999999999, 0.0555555000000001, 0.0555555999999999, 0.0555555000000001, 0.0555555999999999, 0.0555555, 0.0555556, 0.0555559999999999, 0.055555, 0.0555559999999999, 0.0526315, 0.05263162, 0.05263158, 0.05263158, 0.05263162, 0.0526315, 0.0526316, 0.0526316, 0.0526316, 0.0526316, 0.0526315, 0.0526316, 0.0526316, 0.0526316, 0.0526316, 0.0526315000000001, 0.0526316, 0.0526315999999999, 0.0526316, 0.0526315000000001, 0.0526316, 0.0526316, 0.052632, 0.0526310000000001, 0.0526319999999998, 0.08333333, 0.08333333, 0.08333334, 0.08333333, 0.08333333, 0.08333337, 0.0833333, 0.0833333, 0.0833333, 0.0833333, 0.0833333, 0.0833333, 0.0833333000000001, 0.0833333000000001, 0.0833333999999999, 0.0833333000000001, 0.0833333000000001, 0.0833333999999999, 0.0833333000000001, 0.0833333000000001, 0.0833333999999999, 0.0833333000000001, 0.0833333000000001, 0.0833330000000001, 0.0833330000000001), 76:77); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort4_1eeecdb14cfb1f3797c171260ca41765");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort5_a40a0e38ca26f6979dc545dcdafed14f() {
        assertEval("argv <- list(c(-3.35281542033775, -3.57533122743112, -3.23282496934355, -3.3903449466851, -3.39757437954971, -3.36251831175626, -3.22932468384763, -3.22295685034786, -3.21402130636699, -3.11638102275539, -3.09226646401048, -3.21757818016328, -3.0862187014408, -3.08484132891786), 7:8); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort5_a40a0e38ca26f6979dc545dcdafed14f");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort6_8dcabc555fafc94927b76ab4d466d2db() {
        assertEval("argv <- list(cc(66L, 195L)); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort6_8dcabc555fafc94927b76ab4d466d2db");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort7_5990e812938cfd9eb62f0df0b062b0d9() {
        assertEval("argv <- list(c(1, 2, 2, 3, 3, 4, 4, 5), 1:8); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort7_5990e812938cfd9eb62f0df0b062b0d9");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort8_946b48319923464cb51dd074faa98f7c() {
        assertEval("argv <- list(27:28, 1:2); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort8_946b48319923464cb51dd074faa98f7c");
    }

    @Test
    public void TestrGenBuiltinpsort_testpsort9_b0e933f6019db4b3a3adda026c3a99e8() {
        assertEval("argv <- list(c(-Inf, -Inf, Inf, Inf), 1:4); .Internal(psort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinpsort_testpsort9_b0e933f6019db4b3a3adda026c3a99e8");
    }

    @Test
    public void TestrGenBuiltinpushBackLength_testpushBackLength1_dcfa067b5a946b8102d8e24955cd3eb9() {
        assertEval("argv <- list(FALSE); .Internal(pushBackLength(argv[[1]]))");
        check("TestrGenBuiltinpushBackLength_testpushBackLength1_dcfa067b5a946b8102d8e24955cd3eb9");
    }

    @Test
    public void TestrGenBuiltinputconst_testputconst1_905e389d73f4641d410a3185a03514a6() {
        assertEval("argv <- list(list(NULL), 0, NULL); .Internal(putconst(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinputconst_testputconst1_905e389d73f4641d410a3185a03514a6");
    }

    @Test
    public void TestrGenBuiltinputconst_testputconst2_73c58d71316b1a0596190d1ecdc2c100() {
        assertEval("argv <- list(list(list(), NULL), 1, list()); .Internal(putconst(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinputconst_testputconst2_73c58d71316b1a0596190d1ecdc2c100");
    }

    @Test
    public void TestrGenBuiltinqr_testqr1_5e55b02e718782ee5db58f9f80b58a00() {
        assertEval("argv <- list(structure(list(qr = structure(c(-2.99896066496855+0i, 0.0864255261791181+0i, -0.13772470327145+0i, -0.49098351645158+0i, 0.249389337649224+0i, 1.17331892183982+0i, -1.54960102684918+0i, -0.573648421141553+0i, 0.376760682628698+0i, 0.412090084647403+0i, 0.603959683330493+0i, -0.0216928335770876+0i, -1.2469936242596+0i, 0.224366164923213+0i, 0.341798188737913+0i, 1.04294423444024+0i, 0.270564951504877+0i, -0.315381666175534+0i, 0.787566751532822+0i, 0.229154517629245+0i, -2.25109940279642+0i, 0.530750192641659+0i, -0.0977755443891602+0i, 0.6614171819615+0i, -0.0856949989622426+0i), .Dim = c(5L, 5L), .Dimnames = list(c('1', '2', '3', '4', '5'), c('c', 'a', 'd', 'b', 'e'))), rank = 5L, qraux = c(1.50410169966891+0i, 1.21888836143069+0i, 1.71355205288103+0i, 1.90021623833265+0i, 0+0i), pivot = c(3L, 1L, 4L, 2L, 5L)), .Names = c('qr', 'rank', 'qraux', 'pivot'), class = 'qr'), structure(1:5, .Dim = c(5L, 1L))); .Internal(qr_coef_cmplx(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinqr_testqr1_5e55b02e718782ee5db58f9f80b58a00");
    }

    @Test
    public void TestrGenBuiltinqr_testqr2_6dcba0e0aead37a7ec4cb919f7a2a5c7() {
        assertEval("argv <- list(structure(list(qr = structure(c(-2.79657712283236, 0.0791500442336917, 0.123755637403102, 0.089607462331441, 0.175462651449591, 0.0695565565709435, 0.129006956605315, 0.206583197284758, 0.0227114114395308, 0.235970456809858, 0.0914077988155571, 0.226297607634113, 0.0934594628258066, 0.0899795540097744, 0.12841549388179, 0.240520185730483, 0.233009950431413, 0.105133974880502, 0.2095512974465, 0.258964862210899, -2.07025325833148, -1.85301582498188, 0.139094572499947, 0.342556683478902, -0.102024562608463, 0.360699451256097, 0.315324737973941, 0.0873752715112826, 0.2823485467872, -0.239863332146733, -0.00369181667619238, -0.172536775168022, 0.229736826805589, 0.0852501914884386, 0.230310089401495, -0.0314168397035678, 0.0849707357385819, 0.365804687920591, -0.0536336269418447, 0.0845797169641211, -2.03746531175251, -0.489461063366758, -1.40644653583967, -0.00873041883181913, 0.0708276075409328, 0.153420226417602, -0.370069917481653, -0.112816417432651, 0.240125650075004, 0.138426195987046, 0.128552669396225, 0.217325815608225, -0.0223361051263949, -0.0526633296159945, -0.296094517820351, -0.327346352864029, -0.249917267465335, -0.0672115093838751, 0.0654426021596298, -0.240131194574062, -2.06587739268838, -0.339470951293598, -0.49608488205654, 1.14277258876071, 0.201196269542128, 0.0348254315928563, 0.145314253550005, 0.131380830586619, -0.387015716398766, 0.283849139598354, -0.0827284627849877, 0.132994279479374, -0.113393410148955, 0.0518736136418599, -0.422882666833989, -0.141635274746576, -0.181291088091223, 0.196913259592121, -0.0460107390352923, 0.15597817986415), .Dim = c(20L, 4L)), rank = 4L, qraux = c(1.32642615746455, 1.10105053486773, 1.21513331337829, 1.21397558590595), pivot = c(4L, 1L, 3L, 2L)), .Names = c('qr', 'rank', 'qraux', 'pivot'), useLAPACK = TRUE, class = 'qr'), structure(c(0.434659484773874, 0.712514678714797, 0.399994368897751, 0.325352151878178, 0.757087148027495, 0.202692255144939, 0.711121222469956, 0.121691921027377, 0.245488513959572, 0.14330437942408, 0.239629415096715, 0.0589343772735447, 0.642288258532062, 0.876269212691113, 0.778914677444845, 0.79730882588774, 0.455274453619495, 0.410084082046524, 0.810870242770761, 0.604933290276676, 0.654723928077146, 0.353197271935642, 0.270260145887733, 0.99268406117335, 0.633493264438584, 0.213208135217428, 0.129372348077595, 0.478118034312502, 0.924074469832703, 0.59876096714288, 0.976170694921166, 0.731792511884123, 0.356726912083104, 0.431473690550774, 0.148211560677737, 0.0130775754805654, 0.715566066093743, 0.103184235747904, 0.446284348610789, 0.640101045137271, 1.00298403897323, 0.272296643047594, 0.67556063386146, 0.151371688628569, 0.340151631063782, 0.431371175684035, 0.0309030100004748, 0.457057784032077, 0.880189609760418, 0.426803491590545, 0.543544612638652, 0.655281779309735, 0.526419038954191, 0.231530745956115, 0.877417415869422, 0.686553374305367, 0.847202921006829, 0.115471200458705, 0.751486539305188, 0.432544381567277, 0.682788078673184, 0.601541217649356, 0.238868677755818, 0.258165926672518, 0.729309623362496, 0.452570831403136, 0.175126768415794, 0.746698269620538, 0.104987640399486, 0.864544949028641, 0.614644971676171, 0.557159538846463, 0.328777319053188, 0.453131445450708, 0.500440972624347, 0.180866361130029, 0.529630602803081, 0.0752757457084954, 0.277755932649598, 0.212699519237503, 0.0904899418726564, 0.0829104807786643, 0.140637623313814, 0.186663761837408, 0.0510252129565924, 0.195122500695288, 0.189470667047426, 0.14745507678017, 0.160610442608595, 0.0259712139610201, 0.0604781195987016, 0.0592939835228026, 0.157146221613511, 0.0842694476991892, 0.187063216743991, 0.126278517944738, 0.175293296081945, 0.202698964001611, 0.104955473728478, 0.1719400214497, 0.293730155099183, 0.19126010988839, 0.886450943304226, 0.503339485730976, 0.877057543024421, 0.189193622441962, 0.758103052387014, 0.724498892668635, 0.943724818294868, 0.547646587016061, 0.711743867723271, 0.388905099825934, 0.100873126182705, 0.927302088588476, 0.283232500310987, 0.59057315881364, 0.110360604943708, 0.840507032116875, 0.317963684443384, 0.782851336989552, 0.267508207354695, 0.218645284883678, 0.516796836396679, 0.268950592027977, 0.181168327340856, 0.518576137488708, 0.562782935798168, 0.129156854469329, 0.256367604015395, 0.717935275984928, 0.961409936426207, 0.100140846567228, 0.763222689507529, 0.947966354666278, 0.818634688388556, 0.308292330708355, 0.649579460499808, 0.953355451114476, 0.953732650028542, 0.339979203417897), .Dim = c(20L, 7L)), TRUE); .Internal(qr_qy_real(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinqr_testqr2_6dcba0e0aead37a7ec4cb919f7a2a5c7");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort12_d466c56eb29c28b1ba088d9084e2eb02() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(qsort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinqsort_testqsort12_d466c56eb29c28b1ba088d9084e2eb02");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort4_445d53daa7494cf807aeee0fa73fef8e() {
        assertEval("argv <- list(c(1.64819754690779, 0.502718643389684, 0.845467412356198, 0.467247395729231, -0.402055063696625, 0.923526703253396, -0.0080556407117813, 1.03378423761425, -0.799126981726699, 1.00423302095334, -0.311973356192691, -0.88614958536232, -1.9222548962705, 1.61970074406333, 0.519269904664384, -0.055849931834021, 0.696417610118512), TRUE); .Internal(qsort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinqsort_testqsort4_445d53daa7494cf807aeee0fa73fef8e");
    }

    @Test
    public void TestrGenBuiltinqsort_testqsort5_733d7ca9e3a4e2fc1cd05745154d86a1() {
        assertEval("argv <- list(c(1L, 7L, 11L, 12L, 13L, 19L, 25L, 3L, 8L), TRUE); .Internal(qsort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinqsort_testqsort5_733d7ca9e3a4e2fc1cd05745154d86a1");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort1_fe1a2a01b922c06c8309859de7af216e() {
        assertEval("argv <- list(structure(1L, .Label = c('Ctl', 'Trt'), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinradixsort_testradixsort1_fe1a2a01b922c06c8309859de7af216e");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort2_358c949e727b1b7dd2ca071741ce125f() {
        assertEval("argv <- list(structure(c(2L, 1L, 3L), .Label = c('1', '2', NA), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinradixsort_testradixsort2_358c949e727b1b7dd2ca071741ce125f");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort3_f73b54c6836e13bb4f2e62466ea5dd50() {
        assertEval("argv <- list(structure(c(3L, 7L, 1L, 5L, 10L, 8L, 2L, 6L, 4L, 9L), .Label = c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinradixsort_testradixsort3_f73b54c6836e13bb4f2e62466ea5dd50");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort5_5b4f8d55cb71b3d200570fbcb536500d() {
        assertEval("argv <- list(structure(c(64L, 67L, 92L, 71L, 74L, 69L, 78L, 94L, 95L, 80L, 119L, 114L, 97L, 72L, 75L, 96L, 99L, 54L, 101L, 93L, 58L, 138L, NA, 139L, 126L, 84L, 79L, 62L, 52L, 68L, 81L, 87L, 109L, 35L, 51L, 61L, 59L, 131L, 137L, 73L, 77L, 70L, 90L, 107L, 29L, 89L, 57L, 66L, 76L, 37L, 155L, 16L, 102L, 56L, 123L, 36L, 60L, 40L, 43L, 85L, 65L, 11L, 47L, 103L, 86L, 13L, 63L, 132L, 91L, 98L, 105L, 134L, 14L, 124L, 117L, 55L, 41L, 24L, 50L, 110L, 129L, 88L, 141L, 145L, 133L, 25L, 46L, 120L, 83L, 121L, 104L, 53L, 44L, 113L, 100L, 19L, 108L, 31L, 82L, 127L, 111L, 116L, 38L, 150L, 48L, 22L, 112L, 140L, 27L, 149L, 115L, 130L, 8L, 28L, 106L, 23L, 125L, 33L, 39L, 32L, 15L, 49L, 144L, 7L, 17L, 122L, 118L, 5L, 128L, 12L, 45L, 21L, 42L, 147L, 26L, 1L, 4L, 153L, 151L, 3L, 136L), .Label = c('(360,365]', '(365,370]', '(370,375]', '(375,380]', '(380,385]', '(385,390]', '(390,395]', '(395,400]', '(400,405]', '(405,410]', '(410,415]', '(415,420]', '(420,425]', '(425,430]', '(430,435]', '(435,440]', '(440,445]', '(445,450]', '(450,455]', '(455,460]', '(460,465]', '(465,470]', '(470,475]', '(475,480]', '(480,485]', '(485,490]', '(490,495]', '(495,500]', '(500,505]', '(505,510]', '(510,515]', '(515,520]', '(520,525]', '(525,530]', '(530,535]', '(535,540]', '(540,545]', '(545,550]', '(550,555]', '(555,560]', '(560,565]', '(565,570]', '(570,575]', '(575,580]', '(580,585]', '(585,590]', '(590,595]', '(595,600]', '(600,605]', '(605,610]', '(610,615]', '(615,620]', '(620,625]', '(625,630]', '(630,635]', '(635,640]', '(640,645]', '(645,650]', '(650,655]', '(655,660]', '(660,665]', '(665,670]', '(670,675]', '(675,680]', '(680,685]', '(685,690]', '(690,695]', '(695,700]', '(700,705]', '(705,710]', '(710,715]', '(715,720]', '(720,725]', '(725,730]', '(730,735]', '(735,740]', '(740,745]', '(745,750]', '(750,755]', '(755,760]', '(760,765]', '(765,770]', '(770,775]', '(775,780]', '(780,785]', '(785,790]', '(790,795]', '(795,800]', '(800,805]', '(805,810]', '(810,815]', '(815,820]', '(820,825]', '(825,830]', '(830,835]', '(835,840]', '(840,845]', '(845,850]', '(850,855]', '(855,860]', '(860,865]', '(865,870]', '(870,875]', '(875,880]', '(880,885]', '(885,890]', '(890,895]', '(895,900]', '(900,905]', '(905,910]', '(910,915]', '(915,920]', '(920,925]', '(925,930]', '(930,935]', '(935,940]', '(940,945]', '(945,950]', '(950,955]', '(955,960]', '(960,965]', '(965,970]', '(970,975]', '(975,980]', '(980,985]', '(985,990]', '(990,995]', '(995,1000]', '(1000,1005]', '(1005,1010]', '(1010,1015]', '(1015,1020]', '(1020,1025]', '(1025,1030]', '(1030,1035]', '(1035,1040]', '(1040,1045]', '(1045,1050]', '(1050,1055]', '(1055,1060]', '(1060,1065]', '(1065,1070]', '(1070,1075]', '(1075,1080]', '(1080,1085]', '(1085,1090]', '(1090,1095]', '(1095,1100]', '(1100,1105]', '(1105,1110]', '(1110,1115]', '(1115,1120]', '(1120,1125]', '(1125,1130]', '(1130,1135]'), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinradixsort_testradixsort5_5b4f8d55cb71b3d200570fbcb536500d");
    }

    @Test
    public void TestrGenBuiltinradixsort_testradixsort6_6527ae8e8bfa9b6ef80afe1471d4a9c0() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'), TRUE, FALSE); .Internal(radixsort(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinradixsort_testradixsort6_6527ae8e8bfa9b6ef80afe1471d4a9c0");
    }

    @Test
    public void TestrGenBuiltinrange_testrange1_95f6ba5e1e205865d332388bdf381467() {
        assertEval("argv <- list(c(0.0303542455381287, 0.030376780241572, 0.030376780241572, 0.0317964665585001, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0332612222823148, 0.0334189652064179, 0.0352217414818821, 0.0354245538128718, 0.0354245538128718, 0.0376780241572021, 0.0376780241572021, 0.0376780241572021, 0.0376780241572021, 0.0406300703082748, 0.0406300703082748, 0.0406300703082748, 0.0440778799351001, 0.048021453037678, 0.0524607896160087, 0.0524607896160087, 0.0524607896160087, 0.0628267531999279, 0.0693167477915991, 0.0981611681990265, 0.134937804218497, 0.179646655850009, 0.437804218496485), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange1_95f6ba5e1e205865d332388bdf381467");
    }

    @Test
    public void TestrGenBuiltinrange_testrange10_50d77fbfd0a7e8211b21107dda47c157() {
        assertEval("argv <- list(structure(c(-3.5527136788005e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.21724893790088e-15, -1.77635683940025e-15, -8.88178419700125e-16, -1.33226762955019e-15, -1.22124532708767e-15, -8.88178419700125e-16, -1.33226762955019e-15, -1.22124532708767e-15, -1.33226762955019e-15, -1.11022302462516e-15, -8.88178419700125e-16, -1.33226762955019e-15, -8.88178419700125e-16, -8.88178419700125e-16, -4.44089209850063e-16, -4.44089209850063e-16, -1.22124532708767e-15, -1.22124532708767e-15, -8.88178419700125e-16, -1.33226762955019e-15, -8.88178419700125e-16, -4.44089209850063e-16, -6.66133814775094e-16, -7.7715611723761e-16, -4.44089209850063e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -1.33226762955019e-15, -1.33226762955019e-15, -1.33226762955019e-15, -8.88178419700125e-16, -1.11022302462516e-15, -4.44089209850063e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -1.33226762955019e-15, -1.33226762955019e-15, -8.88178419700125e-16, -4.44089209850063e-16, -1.22124532708767e-15, -8.88178419700125e-16, -8.88178419700125e-16, -8.88178419700125e-16, -1.33226762955019e-15, -1.22124532708767e-15, 5.91171556152403e-12, -1.59161572810262e-12, 4.54747350886464e-13, 1.02318153949454e-12, 1.13686837721616e-12, 4.54747350886464e-13, 9.09494701772928e-13, 9.09494701772928e-13, 1.02318153949454e-12, 9.09494701772928e-13, 0, 9.09494701772928e-13, 4.54747350886464e-13, 0, 0, 3.41060513164848e-13, 9.66338120633736e-13, 1.19371179607697e-12, 2.27373675443232e-13, 9.66338120633736e-13, 2.27373675443232e-13, 0, 4.54747350886464e-13, 9.66338120633736e-13, 0, 6.82121026329696e-13, 4.54747350886464e-13, 2.27373675443232e-13, 4.54747350886464e-13, 1.08002495835535e-12, 1.02318153949454e-12, 8.5265128291212e-13, 7.38964445190504e-13, 9.09494701772928e-13, 4.54747350886464e-13, 5.6843418860808e-13, 7.105427357601e-13, 3.41060513164848e-13, 0, 0, 9.66338120633736e-13, 1.02318153949454e-12, 0, 4.54747350886464e-13, 1.13686837721616e-12, 1.05160324892495e-12, 9.09494701772928e-13, 3.41060513164848e-13, 8.38440428196918e-13, 1.4210854715202e-12, 1.15463194561016e-14, -8.88178419700125e-16, -1.33226762955019e-15, -2.02615701994091e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 8.88178419700125e-16, 2.22044604925031e-15, 1.77635683940025e-15, 0, 1.33226762955019e-15, 8.88178419700125e-16, 2.22044604925031e-15, 2.22044604925031e-15, 1.77635683940025e-15, 1.77635683940025e-15, 8.88178419700125e-16, 4.44089209850063e-16, 0, 1.77635683940025e-15, 8.88178419700125e-16, 1.77635683940025e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.11022302462516e-15, 1.77635683940025e-15, 1.77635683940025e-15, 1.55431223447522e-15, 1.66533453693773e-15, 2.66453525910038e-15, 8.88178419700125e-16, 8.88178419700125e-16, 8.88178419700125e-16, 8.88178419700125e-16, 8.88178419700125e-16, 8.88178419700125e-16, 1.77635683940025e-15, 2.22044604925031e-15, 8.88178419700125e-16, 2.22044604925031e-15, 3.77475828372553e-15, 1.77635683940025e-15, 0, 1.33226762955019e-15, 0, 2.66453525910038e-15), .Dim = c(50L, 4L), .Dimnames = list(c('Australia', 'Austria', 'Belgium', 'Bolivia', 'Brazil', 'Canada', 'Chile', 'China', 'Colombia', 'Costa Rica', 'Denmark', 'Ecuador', 'Finland', 'France', 'Germany', 'Greece', 'Guatamala', 'Honduras', 'Iceland', 'India', 'Ireland', 'Italy', 'Japan', 'Korea', 'Luxembourg', 'Malta', 'Norway', 'Netherlands', 'New Zealand', 'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Philippines', 'Portugal', 'South Africa', 'South Rhodesia', 'Spain', 'Sweden', 'Switzerland', 'Turkey', 'Tunisia', 'United Kingdom', 'United States', 'Venezuela', 'Zambia', 'Jamaica', 'Uruguay', 'Libya', 'Malaysia'), c('pop15', 'pop75', 'dpi', 'ddpi'))), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange10_50d77fbfd0a7e8211b21107dda47c157");
    }

    @Test
    public void TestrGenBuiltinrange_testrange11_69ed5df91e9420b3a2564f75bbdaa3ef() {
        assertEval("argv <- list(structure(c(4L, 5L, 1L, 5L, 3L, 4L, 5L, 3L, 2L, 4L), .Label = c('a', 'c', 'i', 's', 't'), class = c('ordered', 'factor')), structure(c(4L, 2L, 3L, 5L, 4L, 3L, 5L, 1L, 5L, 4L), .Label = c('a', 'c', 'i', 's', 't'), class = c('ordered', 'factor')), na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinrange_testrange11_69ed5df91e9420b3a2564f75bbdaa3ef");
    }

    @Test
    public void TestrGenBuiltinrange_testrange12_83e6d67fe82289bfffd0da8c2bb638fd() {
        assertEval("argv <- list(structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101), .Tsp = c(1, 101, 1), class = 'ts'), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange12_83e6d67fe82289bfffd0da8c2bb638fd");
    }

    @Test
    public void TestrGenBuiltinrange_testrange13_a6bcd01bfb554f1fa83fc60b021cd511() {
        assertEval("argv <- list(c(NA, 1, 2, 3, -Inf, NaN, Inf), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange13_a6bcd01bfb554f1fa83fc60b021cd511");
    }

    @Test
    public void TestrGenBuiltinrange_testrange14_3cb130d9fab66d6ae5325c61692d575e() {
        assertEval("argv <- list(c(14.43333, 65.7667), finite = TRUE, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinrange_testrange14_3cb130d9fab66d6ae5325c61692d575e");
    }

    @Test
    public void TestrGenBuiltinrange_testrange15_ca33af557f9f65ece5455d08667d5268() {
        assertEval("argv <- list(structure(c(1, 13, 31), .Dim = 3L, .Dimnames = list(c('1st', '2nd', '3rd'))), finite = TRUE, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinrange_testrange15_ca33af557f9f65ece5455d08667d5268");
    }

    @Test
    public void TestrGenBuiltinrange_testrange16_c6aec537e2da44ae13fb9e0e8ba97611() {
        assertEval("argv <- list(list(), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange16_c6aec537e2da44ae13fb9e0e8ba97611");
    }

    @Test
    public void TestrGenBuiltinrange_testrange17_50bd91c099c0512c4786b2764443f68d() {
        assertEval("argv <- list(structure(c(1012633320L, 1012633620L), class = c('POSIXct', 'POSIXt'), tzone = ''), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange17_50bd91c099c0512c4786b2764443f68d");
    }

    @Test
    public void TestrGenBuiltinrange_testrange18_579ff4b80053125d3d9eb42d91a28b20() {
        assertEval("argv <- list(structure(numeric(0), .Dim = c(0L, 0L)), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange18_579ff4b80053125d3d9eb42d91a28b20");
    }

    @Test
    public void TestrGenBuiltinrange_testrange19_17532a327c2ebd9a94c3aafe60e07348() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L), .Dimnames = list(NULL, NULL)), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange19_17532a327c2ebd9a94c3aafe60e07348");
    }

    @Test
    public void TestrGenBuiltinrange_testrange2_1362736cb70ab0f34f0f333e9432899a() {
        assertEval("argv <- list(structure(c(52L, 52L), .Names = c('y', 'x')), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange2_1362736cb70ab0f34f0f333e9432899a");
    }

    @Test
    public void TestrGenBuiltinrange_testrange20_772434a75f08cf2ecb4b077af62de65e() {
        assertEval("argv <- list(c(2.00256647265648e-308, 2.22284878464869e-308, 2.22507363599982e-308, 2.2250738585072e-308, 2.22507408101459e-308, 2.22729893236571e-308, 2.44758124435792e-308), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange20_772434a75f08cf2ecb4b077af62de65e");
    }

    @Test
    public void TestrGenBuiltinrange_testrange21_4ba0cfb76b1b3e24a83c17c361f306c7() {
        assertEval("argv <- list(structure(c(12053, 12054, 12055, 12056, 12057, 12058, 12059, 12060, 12061, 12062), class = 'Date'), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange21_4ba0cfb76b1b3e24a83c17c361f306c7");
    }

    @Test
    public void TestrGenBuiltinrange_testrange22_5b633751a5bba349521423ba544a71f8() {
        assertEval("argv <- list(structure(c(1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 2L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L, NA, 1L, 1L, 2L, 1L, 1L, NA, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, NA, 2L, 2L, 1L, NA, 2L, 2L, NA, 1L, 2L, 1L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 1L, 2L, 1L), .Dim = c(20L, 6L), .Dimnames = list(c('ant', 'bee', 'cat', 'cpl', 'chi', 'cow', 'duc', 'eag', 'ele', 'fly', 'fro', 'her', 'lio', 'liz', 'lob', 'man', 'rab', 'sal', 'spi', 'wha'), c('war', 'fly', 'ver', 'end', 'gro', 'hai'))), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange22_5b633751a5bba349521423ba544a71f8");
    }

    @Test
    public void TestrGenBuiltinrange_testrange23_43b1c1ab220765390328bc4be46dc1fb() {
        assertEval("argv <- list(structure(c(13823, NA), class = 'Date'), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange23_43b1c1ab220765390328bc4be46dc1fb");
    }

    @Test
    public void TestrGenBuiltinrange_testrange24_eee651b51c64b5a1a3fba55059aa8c11() {
        assertEval("range( );");
        check("TestrGenBuiltinrange_testrange24_eee651b51c64b5a1a3fba55059aa8c11");
    }

    @Test
    public void TestrGenBuiltinrange_testrange25_ee5e5b6cad1371347dac9cb7c17bc335() {
        assertEval("argv <- list(structure(c(1949, 1949.08333333333, 1949.16666666667, 1949.25, 1949.33333333333, 1949.41666666667, 1949.5, 1949.58333333333, 1949.66666666667, 1949.75, 1949.83333333333, 1949.91666666667, 1950, 1950.08333333333, 1950.16666666667, 1950.25, 1950.33333333333, 1950.41666666667, 1950.5, 1950.58333333333, 1950.66666666667, 1950.75, 1950.83333333333, 1950.91666666667, 1951, 1951.08333333333, 1951.16666666667, 1951.25, 1951.33333333333, 1951.41666666667, 1951.5, 1951.58333333333, 1951.66666666667, 1951.75, 1951.83333333333, 1951.91666666667, 1952, 1952.08333333333, 1952.16666666667, 1952.25, 1952.33333333333, 1952.41666666667, 1952.5, 1952.58333333333, 1952.66666666667, 1952.75, 1952.83333333333, 1952.91666666667, 1953, 1953.08333333333, 1953.16666666667, 1953.25, 1953.33333333333, 1953.41666666667, 1953.5, 1953.58333333333, 1953.66666666667, 1953.75, 1953.83333333333, 1953.91666666667, 1954, 1954.08333333333, 1954.16666666667, 1954.25, 1954.33333333333, 1954.41666666667, 1954.5, 1954.58333333333, 1954.66666666667, 1954.75, 1954.83333333333, 1954.91666666667, 1955, 1955.08333333333, 1955.16666666667, 1955.25, 1955.33333333333, 1955.41666666667, 1955.5, 1955.58333333333, 1955.66666666667, 1955.75, 1955.83333333333, 1955.91666666667, 1956, 1956.08333333333, 1956.16666666667, 1956.25, 1956.33333333333, 1956.41666666667, 1956.5, 1956.58333333333, 1956.66666666667, 1956.75, 1956.83333333333, 1956.91666666667, 1957, 1957.08333333333, 1957.16666666667, 1957.25, 1957.33333333333, 1957.41666666667, 1957.5, 1957.58333333333, 1957.66666666667, 1957.75, 1957.83333333333, 1957.91666666667, 1958, 1958.08333333333, 1958.16666666667, 1958.25, 1958.33333333333, 1958.41666666667, 1958.5, 1958.58333333333, 1958.66666666667, 1958.75, 1958.83333333333, 1958.91666666667, 1959, 1959.08333333333, 1959.16666666667, 1959.25, 1959.33333333333, 1959.41666666667, 1959.5, 1959.58333333333, 1959.66666666667, 1959.75, 1959.83333333333, 1959.91666666667, 1960, 1960.08333333333, 1960.16666666667, 1960.25, 1960.33333333333, 1960.41666666667, 1960.5, 1960.58333333333, 1960.66666666667, 1960.75, 1960.83333333333, 1960.91666666667, 1961, 1961.08333333333, 1961.16666666667, 1961.25, 1961.33333333333, 1961.41666666667, 1961.5, 1961.58333333333, 1961.66666666667, 1961.75, 1961.83333333333, 1961.91666666667, 1962, 1962.08333333333, 1962.16666666667, 1962.25, 1962.33333333333, 1962.41666666667, 1962.5, 1962.58333333333, 1962.66666666667, 1962.75, 1962.83333333333, 1962.91666666667), .Tsp = c(1949, 1962.91666666667, 12), class = 'ts'), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange25_ee5e5b6cad1371347dac9cb7c17bc335");
    }

    @Test
    public void TestrGenBuiltinrange_testrange26_c7d2bd70b884cb82f056c09219b3e0f4() {
        assertEval("argv <- list(c(1.47191076131574, 0.586694550701453, 0.258706725324317, 0.948371836939988, 0.396080061109718, 0.350912037541581), finite = TRUE, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinrange_testrange26_c7d2bd70b884cb82f056c09219b3e0f4");
    }

    @Test
    public void TestrGenBuiltinrange_testrange27_126a6575d96a29afa3a975e38e8aa25a() {
        assertEval("argv <- list(structure(c(-11.3814849918875, -11.9361690778798, 0.562602893455921, 11.5126028934559, 76.2209544348296, -8.66448499188751, -6.94502893455923, -5.28148499188751, -35.7665182531098, 6.35497106544077, -9.20908119253651, -0.898484991887508, -5.59380090589508, -6.12730922120065, -13.3061334505138, 58.6278831800973, -15.1098009058951, -8.29625696322337, -4.07211681990265, 3.7096551514332, 2.60151500811249, 6.24733923742563, -1.33911681990266, -2.14157287723094, -10.5984849918875, -8.12802893455923, 1.30028697944835, -15.7450289345592, 7.20569077879935, -12.6484849918875, 25.1810423201731, -4.42680090589508, -1.90886979448351), .Names = c('Craig Dunain', 'Ben Rha', 'Ben Lomond', 'Goatfell', 'Bens of Jura', 'Cairnpapple', 'Scolty', 'Traprain', 'Lairig Ghru', 'Dollar', 'Lomonds', 'Cairn Table', 'Eildon Two', 'Cairngorm', 'Seven Hills', 'Knock Hill', 'Black Hill', 'Creag Beag', 'Kildcon Hill', 'Meall Ant-Suidhe', 'Half Ben Nevis', 'Cow Hill', 'N Berwick Law', 'Creag Dubh', 'Burnswark', 'Largo Law', 'Criffel', 'Acmony', 'Ben Nevis', 'Knockfarrel', 'Two Breweries', 'Cockleroi', 'Moffat Chase')), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange27_126a6575d96a29afa3a975e38e8aa25a");
    }

    @Test
    public void TestrGenBuiltinrange_testrange28_e01b3941375b3911bf122bef2bfe26b1() {
        assertEval("argv <- list(c(9.5367431640625e-07, 1.9073486328125e-06, 3.814697265625e-06, 7.62939453125e-06, 1.52587890625e-05, 3.0517578125e-05, 6.103515625e-05, 0.0001220703125, 0.000244140625, 0.00048828125, 0.0009765625, 0.001953125, 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange28_e01b3941375b3911bf122bef2bfe26b1");
    }

    @Test
    public void TestrGenBuiltinrange_testrange29_7369459f26f470e858c22f6787a64cf7() {
        assertEval("argv <- list(structure(c(1208822400, 1209168000, 1208822400, 1209168000), class = c('POSIXct', 'POSIXt'), tzone = 'GMT'), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange29_7369459f26f470e858c22f6787a64cf7");
    }

    @Test
    public void TestrGenBuiltinrange_testrange3_4289c23d042dd8efaa4b5d9e7fd3c226() {
        assertEval("argv <- list(c(-2.92498527625946, 2.46253591019012), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange3_4289c23d042dd8efaa4b5d9e7fd3c226");
    }

    @Test
    public void TestrGenBuiltinrange_testrange30_15ae0b8e159ef110c0dce995ee0bc74c() {
        assertEval("argv <- list(c(1.86606598307361, 339033474310168, 6.15968019059533e+28, 1.11911250438065e+43, 2.03324321833028e+57, 3.69406826275609e+71, 6.71151400229846e+85, 1.21937162496937e+100, 2.2153975381282e+114, 4.02501267984465e+128, 7.31278553581751e+142, 1.32861276588395e+157, 2.41387071044804e+171, 4.38560576593759e+185, 7.96792382084694e+199, 1.44764060891943e+214, 2.63012470966353e+228, 4.77850368783602e+242, 8.6817546752692e+256, 1.57733192575377e+271), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange30_15ae0b8e159ef110c0dce995ee0bc74c");
    }

    @Test
    public void TestrGenBuiltinrange_testrange31_3ac1afb082bd87784fd8014ccb720338() {
        assertEval("argv <- list(structure(c(1, 0.666666666666667, 0.333333333333333, 0, -0.333333333333333, -0.666666666666667, -1, -1.33333333333333, -1.66666666666667, 1.5, 1, 0.5, 0, -0.5, -1, -1.5, -2, -2.5, 3, 2, 1, 0, -1, -2, -3, -4, -5, -Inf, -Inf, -Inf, NaN, Inf, Inf, Inf, Inf, Inf, -3, -2, -1, 0, 1, 2, 3, 4, 5, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, -1, -0.666666666666667, -0.333333333333333, 0, 0.333333333333333, 0.666666666666667, 1, 1.33333333333333, 1.66666666666667, -0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75, 1, 1.25, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1), .Dim = c(9L, 9L)), na.rm = TRUE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange31_3ac1afb082bd87784fd8014ccb720338");
    }

    @Test
    public void TestrGenBuiltinrange_testrange4_e37a3d2afb86c64c2d3f34b91e8b52d7() {
        assertEval("argv <- list(c(1.4615016373309e+48, 5.70899077082384e+45, 2.23007451985306e+43, 8.71122859317602e+40, 3.40282366920938e+38, 1.32922799578492e+36, 5.19229685853483e+33, 2.02824096036517e+31, 7.92281625142643e+28, 3.09485009821345e+26, 1.20892581961463e+24, 4.72236648286965e+21, 18446744073709551616, 72057594037927936, 281474976710656, 1099511627776, 4294967296, 16777216, 65536, 256, 1, 0.00390625, 1.52587890625e-05, 5.96046447753906e-08, 2.3283064365387e-10, 9.09494701772928e-13, 3.5527136788005e-15, 1.38777878078145e-17, 5.42101086242752e-20, 2.11758236813575e-22, 8.27180612553028e-25), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange4_e37a3d2afb86c64c2d3f34b91e8b52d7");
    }

    @Test
    public void TestrGenBuiltinrange_testrange5_483d5a9433b8af77923bfc55085857b7() {
        assertEval("argv <- list(1:3, finite = TRUE, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinrange_testrange5_483d5a9433b8af77923bfc55085857b7");
    }

    @Test
    public void TestrGenBuiltinrange_testrange6_543a7d7f0eb4e10169280ee4e6d9f297() {
        assertEval("argv <- list(c(1L, 3L, 7L, 14L, 21L, 20L, 19L, 9L, 4L, 2L), 0, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinrange_testrange6_543a7d7f0eb4e10169280ee4e6d9f297");
    }

    @Test
    public void TestrGenBuiltinrange_testrange7_d23b14406a15403ccb13aec607da16dd() {
        assertEval("argv <- list(c(8.2, 9.7, 12.25, 16.5, 21.5, 14.5, 20, 23.45, 25.8, 27.3, 22.4, 24.5, 25.95, 27.3, 30.9), numeric(0), NULL, na.rm = FALSE);range(argv[[1]],argv[[2]],argv[[3]],argv[[4]]);");
        check("TestrGenBuiltinrange_testrange7_d23b14406a15403ccb13aec607da16dd");
    }

    @Test
    public void TestrGenBuiltinrange_testrange8_ed3c132e8605a668d3e363e592c434a9() {
        assertEval("argv <- list(structure(c(3L, 2L, 1L), .Label = c('A', 'B', 'C'), class = c('ordered', 'factor')), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange8_ed3c132e8605a668d3e363e592c434a9");
    }

    @Test
    public void TestrGenBuiltinrange_testrange9_50e22ebb3787e7b87ac286566ba149d6() {
        assertEval("argv <- list(structure(list(sec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), min = c(40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L, 50L, 0L, 10L, 20L, 30L, 40L), hour = c(8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L, 16L, 16L, 16L, 16L, 16L, 16L, 17L, 17L, 17L, 17L, 17L, 17L, 18L, 18L, 18L, 18L, 18L, 18L, 19L, 19L, 19L, 19L, 19L, 19L, 20L, 20L, 20L, 20L, 20L, 20L, 21L, 21L, 21L, 21L, 21L, 21L, 22L, 22L, 22L, 22L, 22L, 23L, 23L, 23L, 23L, 23L, 23L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L), mday = cmon = c(11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L), year = c(90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L, 90L), wday = c(3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L), yday = c(345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 345L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L, 346L), isdst = c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L)), .Names = c('sec', 'min', 'hour', 'mday', 'mon', 'year', 'wday', 'yday', 'isdst'), class = c('POSIXlt', 'POSIXt')), na.rm = FALSE);range(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinrange_testrange9_50e22ebb3787e7b87ac286566ba149d6");
    }

    @Test
    public void TestrGenBuiltinrank_testrank1_48a4b5446a8501dc2186dfdfff23c3e5() {
        assertEval("argv <- list(c(1, 2, 3), 3L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank1_48a4b5446a8501dc2186dfdfff23c3e5");
    }

    @Test
    public void TestrGenBuiltinrank_testrank10_df0c906064ab3f8e2500083304c7406d() {
        assertEval("argv <- list(c(0.0244473121385049, 0.0208069652959635, 0.00198363254553387, -0.0529221973952693, 0.0164890605562422, -0.00149317802331189, -0.00414458668937225, -0.0391260369607497, -0.0127200995448093, 0.0111183888673723, 0.03614459302116, -0.00273443474452932, 0.0103131254237995, -0.00143136127438401, -0.0366335514444555, -0.0110399906877088, -0.0104891914308669, -0.00157789861665007, 0.0292636842429564, 0.0203025627349537, -0.0043767777488601, -0.00674011381520054, 0.0185411324740319, 0.0148087639526725, -0.0183227857094651, -0.018821306675337, 0.00969887758262181, 0.0204450782737623, -0.00298871658962484, 0.0234398759771181, 0.0105907055191967, -0.0162815763859567, 0.00907471699575067, -0.0300441479633801, 0.0381223507996197, 0.0526840550960561, -0.00976909588473167, -0.0277768375074461, 0.0151561006764977, -0.00359282193318711, 0.0638896025542924, -0.0010438914218908, 0.0183489539666666, 0.00074493402929487, -0.0197731007347187, 0.00502239164768132, -0.048016837368221, 0.0389877686476984, 0.00407695805281634, 0.057797414062711, 0.0126498543239424, -0.0188865172686347, 0.0162469917717659, -0.0248495524200794, -0.0333500780212535, 0.00775326717655591, -0.0117927765447241, 2.9405377320478e-05, 0.00197768259858777, -0.0156828699257579, -0.0151281440045609, -0.00359612097150966, 0.0313403370108415, -0.0405310449252812, 0.0158005934542395, 0.00885739072926609, 0.0282813640022565, -0.00809212452705879, 0.00984351260718323, 0.00710555853883393, -0.0144325170007544, 0.0321325880127445, 0.0308698841001781, 0.0186275986571656, 0.0422141110037264, 0.0148572667758066, -0.033960845128472, -0.0152504283054679, -0.0325780457387957, -0.0125937520151832, -0.0165034507562293, 0.00112039744236678, -0.0242330078671155, 0.00420399766652167, -0.0174137422806726, 0.047014676147193, 0.0190663795644171, 0.0242131244754732, 0.0102203815371289, 0.0447504856843389, -0.0169123288643312, -0.0122810127527625, 0.0381026258511537, -0.0173103031132602, -0.00551689511296685, -0.0104497655309428, -0.00851268571043338, -0.00742517743166594, 0.0131467615666842, -0.00471747595278646, -1.01191492422851, 2.68607765034082, -0.429158817093737, -0.359113060086774, -0.200381482427124, 1.42533261410281, -0.147128808252653, -0.0752683429340958, -1.36332095751131, -0.648540544492638, 0.12032088086903, -1.17778897251933, 1.06299238526514, -3.03678816357357, 0.613115721579531, -3.07289964707517, -0.601952253673221, -1.05655980889001, -1.304189561362, -0.113793555694785, -3.82871885136002, 2.35316662403712, -3.32994487242401, -0.927060802944771, -2.23184021008569, -1.5016380023869, 4.17433309125669, 0.0347912393865033, -2.57260106086865, -3.28121106883716, 0.900374202545311, -0.037119665429276, -0.636136749087689, -1.8587242949074, -2.97492062028297, -2.15038459323136, 2.00005760742783, -1.24253338959365, -2.76885369476898, 3.73858124484716, 0.850200754744896, -0.477294201826066, 2.11696609741804, 1.77284530274987, -1.23848609646229, 4.41220492908093, -0.51005406028203, -2.84898930042562, -0.288799203908439, 0.41507667846469, 4.61595679811872, 0.211604735787423, 0.913997610846827, -0.154305870713062, -0.668001684733089, -0.0694520566225524, 1.57527921126032, 4.15049001730457, 2.05478487752754, 2.41581679677341, -2.46264684311609, 1.96779114010676, 0.439849607321303, -2.93450005818449, 1.04204548529628, -0.317509209432032, 2.92917462393959, -1.53216399920933, -0.860423507857093, -1.85221899475487, -0.354207922873081, 0.804023558972676, -1.46349634623921, 1.66074633596335, -2.41616557260893, -2.09596882561548, 2.88231541368856, -2.0316949306093, 0.82394942463503, -0.762152102217839, 0.818803679301868, 3.37774657240809, 3.17317686688394, -0.661815601365533, -4.57047107058493, 4.99532317966833, 1.33413233353099, 1.0826546719274, -0.0267990462918174, 1.02021684590585, -0.328751663539334, 0.841389286509026, -0.800493487955288, -2.74041575509492, 1.97567653490976, 3.03949005099909, -0.617481138451227, -2.50657951121538, 1.28448261135565, -0.0894182737879582), 200L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank10_df0c906064ab3f8e2500083304c7406d");
    }

    @Test
    public void TestrGenBuiltinrank_testrank11_307c7ca3820dfbd7de9ffcdec7964b6b() {
        assertEval("argv <- list(structure(c(4, 7, 6, 0, 0, 2, 4, 9, 3, 6, 0, 1, 5.5, 0.5, 4.5, 5.5, 0.5, 2.5, 0.5, 0.5, 2.5, 4.5, 9.5, 3.5, 1.5, 0.5, 5.5, 0.5, 1.5, 0.5, 0.5, 0.5, 1.5, 1.5, 0.5, 2.5, 2, 0, 7, 1, 1, 2, 0, 0, 0, 0, 3, 1, 0, 2, 0, 2, 0, 3, 2, 2, 0, 1, 3, 1, 4, 6, 0, 7, 0, 1, 2, 5, 11, 11, 9, 2), .Dim = 72L, .Dimnames = list(c('A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'))), 72L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank11_307c7ca3820dfbd7de9ffcdec7964b6b");
    }

    @Test
    public void TestrGenBuiltinrank_testrank2_e96f4bc1436e47e4ba7c28e7ef589724() {
        assertEval("argv <- list(list(), 0L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank2_e96f4bc1436e47e4ba7c28e7ef589724");
    }

    @Test
    public void TestrGenBuiltinrank_testrank3_efb65e5226bdb9cf3130ca584be1d750() {
        assertEval("argv <- list(c(FALSE, FALSE), 2L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank3_efb65e5226bdb9cf3130ca584be1d750");
    }

    @Test
    public void TestrGenBuiltinrank_testrank4_8a5c34bac583832006afb3d9ea771c82() {
        assertEval("argv <- list(c(2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60), 60L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank4_8a5c34bac583832006afb3d9ea771c82");
    }

    @Test
    public void TestrGenBuiltinrank_testrank5_a3e4671ab4282ff6205f3cea7793ebc9() {
        assertEval("argv <- list(structure(c(9.96, 84.84, 93.4, 33.77, 5.16, 90.57, 92.85, 97.16, 97.67, 91.38, 98.61, 8.52, 2.27, 4.43, 2.82, 24.2, 3.3, 12.11, 2.15, 2.84, 5.23, 4.52, 15.14, 4.2, 5.23, 2.56, 7.72, 18.46, 6.1, 99.71, 99.68, 100, 98.96, 98.22, 99.06, 99.46, 96.83, 5.62, 13.79, 11.22, 16.92, 4.97, 8.65, 42.34, 50.43, 58.33), .Names = c('Courtelary', 'Delemont', 'Franches-Mnt', 'Moutier', 'Neuveville', 'Porrentruy', 'Broye', 'Glane', 'Gruyere', 'Sarine', 'Veveyse', 'Aigle', 'Aubonne', 'Avenches', 'Cossonay', 'Echallens', 'Grandson', 'Lausanne', 'La Vallee', 'Lavaux', 'Morges', 'Moudon', 'Nyone', 'Orbe', 'Payerne', 'Paysd'enhaut', 'Rolle', 'Vevey', 'Yverdon', 'Conthey', 'Entremont', 'Herens', 'Martigwy', 'Monthey', 'St Maurice', 'Sierre', 'Sion', 'Boudry', 'La Chauxdfnd', 'Le Locle', 'Neuchatel', 'Val de Ruz', 'ValdeTravers', 'V. De Geneve', 'Rive Droite', 'Rive Gauche')), 46L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank5_a3e4671ab4282ff6205f3cea7793ebc9");
    }

    @Test
    public void TestrGenBuiltinrank_testrank6_37a92e56c64fdd44c2cc0d2d8a870a7e() {
        assertEval("argv <- list(structure(c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5), .Names = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')), 11L, 'max'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank6_37a92e56c64fdd44c2cc0d2d8a870a7e");
    }

    @Test
    public void TestrGenBuiltinrank_testrank7_3c88f1c0257cc66b5b6794363847a1b1() {
        assertEval("argv <- list(c('9', '9', '8', '7', '6', '5', '4', '3', '2', '1'), 10L, 'min'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank7_3c88f1c0257cc66b5b6794363847a1b1");
    }

    @Test
    public void TestrGenBuiltinrank_testrank8_0547e2f92789138f7dd8d8a903bf4109() {
        assertEval("argv <- list(c(2, 1, 3, 4, 5), 5L, 'average'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank8_0547e2f92789138f7dd8d8a903bf4109");
    }

    @Test
    public void TestrGenBuiltinrank_testrank9_061a8da99833b1bef5bcf0b2c3a0f511() {
        assertEval("argv <- list(structure(c('Tukey', 'Venables', 'Tierney', 'Ripley', 'Ripley', 'McNeil', 'R Core'), class = 'AsIs'), 7L, 'min'); .Internal(rank(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinrank_testrank9_061a8da99833b1bef5bcf0b2c3a0f511");
    }

    @Test
    public void TestrGenBuiltinrawShift_testrawShift1_65fee20e09d47fbcdaf79ea8ac9ea101() {
        assertEval("argv <- structure(list(x = as.raw(c(109, 121, 32, 116, 101, 120,     116)), n = 0L), .Names = c('x', 'n'));do.call('rawShift', argv)");
        check("TestrGenBuiltinrawShift_testrawShift1_65fee20e09d47fbcdaf79ea8ac9ea101");
    }

    @Test
    public void TestrGenBuiltinrawShift_testrawShift2_3b5a2b8299b545cdb15e035822c431f9() {
        assertEval("argv <- structure(list(x = as.raw(c(109, 121, 32, 116, 101, 120,     116)), n = 3L), .Names = c('x', 'n'));do.call('rawShift', argv)");
        check("TestrGenBuiltinrawShift_testrawShift2_3b5a2b8299b545cdb15e035822c431f9");
    }

    @Test
    public void TestrGenBuiltinrawToChar_testrawToChar1_f511c88a462763711e0d0997753aff12() {
        assertEval("argv <- structure(list(x = as.raw(c(115, 116, 114, 105, 110,     103))), .Names = 'x');do.call('rawToChar', argv)");
        check("TestrGenBuiltinrawToChar_testrawToChar1_f511c88a462763711e0d0997753aff12");
    }

    @Test
    public void TestrGenBuiltinrbind_testrbind1_9c2b3fbb1e37535159b42729f4b6e744() {
        assertEval("argv <- list(structure(c(3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,     8, 8, 8, 8, 8, 9, 9, 11, 11, 13, 13, 13, 13, 13, 13, 13,     14, 14, 14, 14, 16, 16, 31, 31, 31, 33, 33, 43, 43, 43, 61,     61, 61, 62, 62, 106, 106, 110, 110, 110, 110, 163, 163, 165,     165, 165, 168, 168, 172, 172, 172, 204, 204, 206, 206, 206,     206, 206, 211, 211, 241, 241, 241, 241, 244, 244, 249, 249,     250, 250, 250, 250, 252, 252, 252, 252, 252, 252, 252, 252,     252, 252, 252, 252, 256, 256, 265, 265, 265, 265, 265, 265,     265, 265, 265, 267, 267, 267, 269, 269, 269, 291, 291, 291,     291, 291, 291, 291, 312, 312, 312, 312, 312, 314, 314, 314,     314, 314, 2.484906649788, 6.27476202124194, 3.97029191355212,     3.98898404656427, 4.52178857704904, 0, 2.30258509299405,     4.59511985013459, 1.6094379124341, 2.94443897916644, 1.94591014905531,     2.99573227355399, 4.36944785246702, 1.38629436111989, 2.39789527279837,     3.98898404656427, 2.07944154167984, 5.64897423816121, 5.75574221358691,     2.89037175789616, 3.09104245335832, 4.70953020131233, 4.98360662170834,     1.6094379124341, 1.6094379124341, 4.70048036579242, 1.6094379124341,     4.54329478227, 1.6094379124341, 4.49980967033027, 5.62762111369064,     5.11799381241676, 2.39789527279837, 6.28785856016178, 5.4380793089232,     3.63758615972639, 5.76205138278018, 2.83321334405622, 5.7037824746562,     5.90263333340137, 3.40119738166216, 3.63758615972639, 4.31748811353631,     5.58724865840025, 5.32787616878958, 4.06044301054642, 6.22059017009974,     6.20455776256869, 5.2040066870768, 6.20253551718792, 3.78418963391826,     2.94443897916644, 2.63905732961526, 6.24804287450843, 2.63905732961526,     5.74620319054015, 1.79175946922805, 5.44241771052179, 4.99721227376411,     5.93753620508243, 4.02535169073515, 4.74493212836325, 5.90536184805457,     6.00388706710654, 4.91998092582813, 5.73979291217923, 3.13549421592915,     3.17805383034795, 3.58351893845611, 4.89783979995091, 4.49980967033027,     6.0913098820777, 5.75257263882563, 2.30258509299405, 2.77258872223978,     5.28826703069454, 6.10924758276437, 4.74493212836325, 6.16331480403464,     4.57471097850338, 3.55534806148941, 1.38629436111989, 4.46590811865458,     5.93224518744801, 0.693147180559945, 3.95124371858143, 4.0943445622221,     3.17805383034795, 2.484906649788, 5.15905529921453, 3.80666248977032,     2.484906649788, 3.3322045101752, 1.94591014905531, 2.77258872223978,     4.71849887129509, 6.23244801655052, 2.99573227355399, 3.71357206670431,     3.36729582998647, 5.64897423816121, 3.55534806148941, 0.693147180559945,     3.04452243772342, 4.30406509320417, 2.56494935746154, 3.61091791264422,     4.69134788222914, 5.93753620508243, 4.95582705760126, -0.693147180559945,     3.87120101090789, 6.31896811374643, 6.06145691892802, 1.79175946922805,     2.19722457733622, 2.07944154167984, 2.07944154167984, 1.94591014905531,     4.51085950651685, 5.85507192220243, 4.57471097850338, 0.693147180559945,     1.6094379124341, 4.36944785246702, 5.36129216570943, 4.40671924726425,     4.85981240436167, 3.61091791264422, 3.73766961828337, 1,     0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,     0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0,     1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0,     1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,     0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,     1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,     1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,     0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,     1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1,     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1,     1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1,     0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0,     1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1,     1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,     1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,     1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,     0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,     0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,     0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0,     1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1,     0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1,     1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,     0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0,     0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,     1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,     1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,     0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,     0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,     1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,     1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0,     0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1,     0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1,     1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1), .Dim = c(130L, 10L)),     structure(c(316, 316, 316, 5.3890717298165, 2.39789527279837,         5.67332326717149, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0,         0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0), .Dim = c(3L, 10L)));do.call('rbind', argv)");
        check("TestrGenBuiltinrbind_testrbind1_9c2b3fbb1e37535159b42729f4b6e744");
    }

    @Test
    public void TestrGenBuiltinrbind_testrbind2_01724b0566ea6f3632d7564162e3f8e4() {
        assertEval("argv <- list(c(0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,     1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,     1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 6L, 1L, 0L, 1L, 20L, 1L,     0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 4L, 0L, 0L, 3L,     6L, 2L, 0L, 14L, 1L, 0L, 16L, 0L, 1L, 0L, 5L, 1L, 0L, 2L,     4L, 0L, 0L, 5L, 0L, 2L, 0L, 1L, 7L, 2L, 0L, 0L, 2L, 0L, 0L,     0L, 0L, 0L, 0L, 1L, 2L, 0L, 0L, 0L, 4L, 0L, 0L, 4L, 0L, 0L,     0L, 0L, 5L, 0L, 18L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     5L, 0L, 10L, 0L, 2L, 2L, 6L, 0L, 5L, 7L, 0L, 3L, 0L, 1L,     0L, 3L, 2L, 0L, 5L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L,     3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L,     0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 3L, 0L, 1L, 3L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 4L, 5L, 0L, 0L,     0L, 4L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 2L, 0L,     0L, 2L), c(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 1L, 5L, 1L, 0L, 1L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 7L, 0L, 0L, 0L, 0L, 7L, 0L, 0L, 1L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 8L, 3L, 3L, 0L, 0L, 1L, 0L,     0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 0L, 1L, 0L, 0L,     0L, 0L, 2L, 0L, 0L, 7L, 0L, 1L, 0L, 13L, 1L, 2L, 0L, 0L,     0L, 0L, 0L, 5L, 0L, 2L, 0L, 8L, 0L, 3L, 0L, 0L, 5L, 0L, 0L,     0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,     10L, 0L, 0L, 27L, 3L, 1L, 0L, 0L, 0L, 0L, 2L, 3L, 0L, 1L,     1L, 0L, 4L, 7L, 6L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 14L, 8L,     0L, 0L, 19L, 0L, 0L, 0L, 1L, 0L, 2L, 0L, 6L, 2L, 2L, 0L,     0L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 1L, 1L, 8L, 0L, 0L, 2L,     0L, 4L, 0L, 2L, 0L, 0L, 0L, 3L, 0L, 8L, 0L, 0L, 1L, 0L, 1L,     1L, 0L));do.call('rbind', argv)");
        check("TestrGenBuiltinrbind_testrbind2_01724b0566ea6f3632d7564162e3f8e4");
    }

    @Test
    public void TestrGenBuiltinrbind_testrbind3_b8a72ff37f628ed5d1404370926cdb30() {
        assertEval("argv <- list(c(32L, 34L, 37L, 33L, 20L, 40L, 39L, 22L, 33L, 37L,     37L, 38L, 39L, 37L, 36L, 39L, 39L, 40L, 37L, 38L, 35L, 40L,     17L, 39L, 40L, 34L, 40L, 37L, 26L, 40L, 33L, 36L, 38L, 27L,     36L, 36L, 37L, 39L, 40L, 37L, 39L, 40L, 38L, 32L, 37L, 36L,     17L, 36L, 39L, 34L, 40L, 40L, 40L, 37L, 40L, 38L, 39L, 36L,     38L, 40L, 39L, 38L, 39L, 38L, 38L, 40L, 33L, 39L, 40L, 33L,     36L, 34L, 40L, 37L, 26L, 37L, 40L, 40L, 40L, 36L, 39L, 33L,     38L, 40L, 13L, 37L, 22L, 40L, 37L, 40L, 27L, 39L, 35L, 36L,     31L, 24L, 39L, 32L, 38L, 38L), c(8, 6, 3, 7, 20, 0, 1, 18,     7, 3, 3, 2, 1, 3, 4, 1, 1, 0, 3, 2, 5, 0, 23, 1, 0, 6, 0,     3, 14, 0, 7, 4, 2, 13, 4, 4, 3, 1, 0, 3, 1, 0, 2, 8, 3, 4,     23, 4, 1, 6, 0, 0, 0, 3, 0, 2, 1, 4, 2, 0, 1, 2, 1, 2, 2,     0, 7, 1, 0, 7, 4, 6, 0, 3, 14, 3, 0, 0, 0, 4, 1, 7, 2, 0,     27, 3, 18, 0, 3, 0, 13, 1, 5, 4, 9, 16, 1, 8, 2, 2));do.call('rbind', argv)");
        check("TestrGenBuiltinrbind_testrbind3_b8a72ff37f628ed5d1404370926cdb30");
    }

    @Test
    public void TestrGenBuiltinrcond_testrcond1_eef9e4dfda6e6cf09a217649ed5d38cb() {
        assertEval("argv <- structure(list(x = structure(c(FALSE, TRUE, FALSE, TRUE,     TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE,     TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE,     TRUE, TRUE, TRUE), .Dim = c(5L, 5L))), .Names = 'x');do.call('rcond', argv)");
        check("TestrGenBuiltinrcond_testrcond1_eef9e4dfda6e6cf09a217649ed5d38cb");
    }

    @Test
    public void TestrGenBuiltinrcond_testrcond2_70b535c0a25a5c3e4452ff2b0c7941c7() {
        assertEval("argv <- structure(list(x = structure(c(0.483017750550061 + (0+0i),     0.399143285583705 + (0+0i), 0.0162145779468119 + (0+0i),     0.125083255348727 + (0+0i), 0.0706489166477695 + (0+0i),     0.504917626501992 + (0+0i), 0.327679358422756 + (0+0i), 0.411779605317861 +         (0+0i), 0.202413034392521 + (0+0i), 0.307096319855191 +         (0+0i), 0.642031987197697 + (0+0i), 0.276873307069764 +         (0+0i), 0.103556007146835 + (0+0i), 0.256002754438668 +         (0+0i), 0.179779380792752 + (0+0i), 0.247455857461318 +         (0+0i), 0.215011228807271 + (0+0i), 0.493673762306571 +         (0+0i), 0.653446026844904 + (0+0i), 0.573559894575737 +         (0+0i), 0.863887825980783 + (0+0i), 0.637789903208613 +         (0+0i), 0.0137805955018848 + (0+0i), 0.529164811130613 +         (0+0i), 0.271472703316249 + (0+0i)), .Dim = c(5L, 5L))),     .Names = 'x');do.call('rcond', argv)");
        check("TestrGenBuiltinrcond_testrcond2_70b535c0a25a5c3e4452ff2b0c7941c7");
    }

    @Test
    public void TestrGenBuiltinreadChar_testreadChar1_f156fb5fd4a59405143b9121d2fccf9f() {
        assertEval("argv <- structure(list(con = as.raw(c(65, 66, 67, 68, 69, 70,     71, 72, 73, 74)), nchars = c(3, 3, 0, 3, 3, 3)), .Names = c('con',     'nchars'));do.call('readChar', argv)");
        check("TestrGenBuiltinreadChar_testreadChar1_f156fb5fd4a59405143b9121d2fccf9f");
    }

    @Test
    public void TestrGenBuiltinregexec_testregexec1_3e88cb17b9f87db5c0838bf7c74781c7() {
        assertEval("argv <- list('^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)', 'http://stat.umn.edu:80/xyz', FALSE, FALSE, FALSE); .Internal(regexec(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinregexec_testregexec1_3e88cb17b9f87db5c0838bf7c74781c7");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr1_b6f240f11cc3b7b8fc6e7bc2efc9eb7f() {
        assertEval("argv <- list('package:', 'exNSS4', FALSE, FALSE, TRUE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr1_b6f240f11cc3b7b8fc6e7bc2efc9eb7f");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr10_d1b7d2bb0a0f4cbd12d1f8326aad6f20() {
        assertEval("argv <- list('package:', 'environmental', FALSE, FALSE, TRUE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr10_d1b7d2bb0a0f4cbd12d1f8326aad6f20");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr12_81665c3fee70408c8fd6fa9609f05689() {
        assertEval("argv <- structure(list(pattern = '\\d', text = c('1', 'B', '3')),     .Names = c('pattern', 'text'));do.call('regexpr', argv)");
        check("TestrGenBuiltinregexpr_testregexpr12_81665c3fee70408c8fd6fa9609f05689");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr13_9b4cf8a06a1646bb6c79081f3f2db52b() {
        assertEval("argv <- structure(list(pattern = '[a-z]', text = NA), .Names = c('pattern',     'text'));do.call('regexpr', argv)");
        check("TestrGenBuiltinregexpr_testregexpr13_9b4cf8a06a1646bb6c79081f3f2db52b");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr2_37eb3a0d2845e2d64e3ffc123bd3ce86() {
        assertEval("argv <- list('éè', '«Latin-1 accented chars»: éè øØ å<Å æ<Æ é éè', FALSE, FALSE, TRUE, TRUE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr2_37eb3a0d2845e2d64e3ffc123bd3ce86");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr3_609f90bdd5d9471e4763c2fccc70a56d() {
        assertEval("argv <- list('package:', 'graphics', FALSE, FALSE, TRUE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr3_609f90bdd5d9471e4763c2fccc70a56d");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr4_3a566ba77511d0c212fa6647f00b00a8() {
        assertEval("argv <- list('^.*\\\\{n', 'my(ugly[file{name', FALSE, FALSE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr4_3a566ba77511d0c212fa6647f00b00a8");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr5_0cce0e9702e8f5ac2c108458c357d258() {
        assertEval("argv <- list('(\\\\\\\\S4method\\\\{([._[:alnum:]]*|\\\\$|\\\\[\\\\[?|\\\\+|\\\\-|\\\\*|\\\\/|\\\\^|<=?|>=?|!=?|==|\\\\&|\\\\||\\\\%[[:alnum:][:punct:]]*\\\\%)\\\\}\\\\{((([._[:alnum:]]+|`[^`]+`),)*([._[:alnum:]]+|`[^`]+`))\\\\})', '\\nread.00Index(file)\\n', FALSE, FALSE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr5_0cce0e9702e8f5ac2c108458c357d258");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr6_6074b336e6e92e1b0a7c9f39675b6793() {
        assertEval("argv <- list('\\\\.([[:alnum:]]+)$', character(0), FALSE, FALSE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr6_6074b336e6e92e1b0a7c9f39675b6793");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr7_86ce7be97fa8499d3879c357e8fbbf13() {
        assertEval("argv <- list('(?<first>[[:upper:]][[:lower:]]+) (?<last>[[:upper:]][[:lower:]]+)', c('  Ben Franklin and Jefferson Davis', '\\tMillard Fillmore'), FALSE, TRUE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr7_86ce7be97fa8499d3879c357e8fbbf13");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr8_8b3efe350b2d09c965024ae2a6bd5c52() {
        assertEval("argv <- list('^[[:space:]]*@(?i)attribute', '% 4. Relevant Information Paragraph:', FALSE, TRUE, FALSE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr8_8b3efe350b2d09c965024ae2a6bd5c52");
    }

    @Test
    public void TestrGenBuiltinregexpr_testregexpr9_5eee8b3990bbc5e93332018a33b16837() {
        assertEval("argv <- list('package:', 'dummy', FALSE, FALSE, TRUE, FALSE); .Internal(regexpr(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]]))");
        check("TestrGenBuiltinregexpr_testregexpr9_5eee8b3990bbc5e93332018a33b16837");
    }

    @Test
    public void TestrGenBuiltinregmatchesassign__testregmatchesassign_1_e27bbabfb7758690fefca1451e5974fa() {
        assertEval("argv <- structure(list(x = c('A', 'B', 'C'), m = structure(c(1L,     -1L, 1L), match.length = c(1L, -1L, 1L), useBytes = TRUE),     value = c('A', 'C')), .Names = c('x', 'm', 'value'));do.call('regmatches<-', argv)");
        check("TestrGenBuiltinregmatchesassign__testregmatchesassign_1_e27bbabfb7758690fefca1451e5974fa");
    }

    @Test
    public void TestrGenBuiltinrep_testrep4_4218006633b3483f90e20df8b96786d8() {
        assertEval("argv <- list(list(), 0L); .Internal(rep_len(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrep_testrep4_4218006633b3483f90e20df8b96786d8");
    }

    @Test
    public void TestrGenBuiltinrep_testrep8_539f77294b46ae29056f304f387342a6() {
        assertEval("argv <- list(list(c('                  ', '                ')), 1L); .Internal(rep_len(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrep_testrep8_539f77294b46ae29056f304f387342a6");
    }

    @Test
    public void TestrGenBuiltinrep_testrep9_3cc63793e525424d43ae3ba907a85d7a() {
        assertEval("argv <- list(structure(1:4, .Label = c('A', 'B', 'C', 'D'), class = 'factor', .Names = c('a', 'b', 'c', 'd')), 10); .Internal(rep_len(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrep_testrep9_3cc63793e525424d43ae3ba907a85d7a");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint10_dde17f705e40806f5b55beae204599b7() {
        assertEval("argv <- list(c(1L, 1L, 2L, 2L), 6); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint10_dde17f705e40806f5b55beae204599b7");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint13_d31b70d4e01d550889ad6d9cb34b03cf() {
        assertEval("argv <- list(structure(1:4, .Label = c('A', 'B', 'C', 'D'), class = 'factor', .Names = c('a', 'b', 'c', 'd')), 2); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint13_d31b70d4e01d550889ad6d9cb34b03cf");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint14_eb20631d35776b024d237f0e37558b93() {
        assertEval("argv <- list(2e-08, 9); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint14_eb20631d35776b024d237f0e37558b93");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint17_7a1213eafa82541b8a351bd5838a5af6() {
        assertEval("argv <- list(FALSE, FALSE); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint17_7a1213eafa82541b8a351bd5838a5af6");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint18_89d713aa24d3bbc416b09d5b3a7c0fcb() {
        assertEval("argv <- list(c(-1.74520963996789, -1.58308930128988, NA), 100L); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint18_89d713aa24d3bbc416b09d5b3a7c0fcb");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint20_491b0390b66db6a67cedcc2a42873e5a() {
        assertEval("argv <- list(NA, 10L); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint20_491b0390b66db6a67cedcc2a42873e5a");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint24_8280666f60f8465e6eefa702e913cf63() {
        assertEval("argv <- list(3.1e-06, 49); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint24_8280666f60f8465e6eefa702e913cf63");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint25_c8eaf452f45b00ae42d98c734a5cfffd() {
        assertEval("argv <- list(NA, 5L); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint25_c8eaf452f45b00ae42d98c734a5cfffd");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint26_ab3b24b0c9725d38798a7ad9e4076d5e() {
        assertEval("argv <- list(TRUE, 6L); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint26_ab3b24b0c9725d38798a7ad9e4076d5e");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint4_20bb6f9af6b07b4403c6affda51252a6() {
        assertEval("argv <- list(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), 1); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint4_20bb6f9af6b07b4403c6affda51252a6");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint5_cb990b8179a6fb9eaae1bb541f1d9486() {
        assertEval("argv <- list(FALSE, 0L); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint5_cb990b8179a6fb9eaae1bb541f1d9486");
    }

    @Test
    public void TestrGenBuiltinrepint_testrepint7_6887e9ead03307d35952a52816eb9b4c() {
        assertEval("argv <- list(TRUE, 1L); .Internal(rep.int(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinrepint_testrepint7_6887e9ead03307d35952a52816eb9b4c");
    }

    @Test
    public void TestrGenBuiltinretracemem_testretracemem1_2962f142b007b2052ba94b324866fab4() {
        assertEval("argv <- list(FALSE, FALSE);retracemem(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinretracemem_testretracemem1_2962f142b007b2052ba94b324866fab4");
    }

    @Test
    public void TestrGenBuiltinretracemem_testretracemem2_b724e20006280d50a74dedd24698da53() {
        assertEval("argv <- list(structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')), structure(3.14159265358979, class = structure('3.14159265358979', class = 'testit')));retracemem(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinretracemem_testretracemem2_b724e20006280d50a74dedd24698da53");
    }

    @Test
    public void TestrGenBuiltinround_testround3_0bdbaf3aa20b3bf164e589d338af1828() {
        assertEval("argv <- list(structure(list(lowerNorm = c(1, 0.7074793118252,     0.703783359109958, 0.633667085530785, 0.629171386131588,     0.55900804989023, 0.553693829615336, 0.547917347996141, 0.470383100744677,     0.397621760007547, 0.390548442517381, 0.382779091361949,     0.374191514453686, 0.276654053495554, 0.186268067402784,     0.176381170003996, 0.152703583557352, 0.138281755556403,     0.121518607618675), upperNorm = c(1, 1, 1, 0.979778292620476,     0.984273992019672, 0.946874303050947, 0.952188523325841,     0.957965004945035, 0.910009056118068, 0.857280200776766,     0.864353518266933, 0.872122869422365, 0.880710446330628,     0.798976198605286, 0.710090476014583, 0.719977373413371,     0.743654959860015, 0.758076787860964, 0.774839935798692),     lowerNormS = c(0.910985448809634, 0.683392923012911, 0.679522139376878,         0.614273605024573, 0.609653530675358, 0.543887035370979,         0.538488520130148, 0.532620411085642, 0.459604218176941,         0.390811451215735, 0.383715321807271, 0.375920913978781,         0.367305641565109, 0.274783502246108, 0.188735721130942,         0.178848823732154, 0.15517123728551, 0.140749409284561,         0.123986261346832), upperNorms = c(1, 0.996879185830627,         1, 0.969960088452818, 0.974580162802033, 0.937905681715855,         0.943304196956687, 0.949172306001193, 0.902674026454245,         0.851952320959801, 0.859048450368266, 0.866842858196755,         0.875458130610427, 0.797245309278501, 0.712558129742741,         0.722445027141529, 0.746122613588173, 0.760544441589122,         0.77730758952685)), .Names = c('lowerNorm', 'upperNorm',     'lowerNormS', 'upperNorms'), row.names = c(NA, -19L), class = 'data.frame'),     3);do.call('round', argv)");
        check("TestrGenBuiltinround_testround3_0bdbaf3aa20b3bf164e589d338af1828");
    }

    @Test
    public void TestrGenBuiltinrow_testrow1_5c4018cec2b22b156d9045a745051036() {
        assertEval("argv <- list(c(14L, 14L)); .Internal(row(argv[[1]]))");
        check("TestrGenBuiltinrow_testrow1_5c4018cec2b22b156d9045a745051036");
    }

    @Test
    public void TestrGenBuiltinrow_testrow2_af1faf60e4447806565d7ab283e7dcb5() {
        assertEval("argv <- list(c(4L, 3L)); .Internal(row(argv[[1]]))");
        check("TestrGenBuiltinrow_testrow2_af1faf60e4447806565d7ab283e7dcb5");
    }

    @Test
    public void TestrGenBuiltinrow_testrow3_767666747903f41a8cf76b34905b7e08() {
        assertEval("argv <- list(0:1); .Internal(row(argv[[1]]))");
        check("TestrGenBuiltinrow_testrow3_767666747903f41a8cf76b34905b7e08");
    }

    @Test
    public void TestrGenBuiltinrowMeans_testrowMeans2_afea9f4775c378f648a4877db86eff1d() {
        assertEval("argv <- list(structure(c(50.7138381326659, 6.51590327164277, 24.9887625571708, 6.50401666172534, 16.6227411608333, 24.2873904534041, 56.036205319809, 9.42637482307856, 6.7207351702689e-16, 6.51590327164276, 106.05353593478, 13.0563348605106, 29.556736958112, 26.535297847233, 83.1597312749807, 86.1180411620546, 4.28836475146602, 3.05748120025494e-16, 24.9887625571708, 13.0563348605107, 382.901882167719, 28.709795659465, 7.19910301202793, 51.849911207061, 76.6652389324741, 13.4232601222667, 9.57039987233639e-16, 6.50401666172536, 29.556736958112, 28.709795659465, 286.290790661071, 29.5533327979648, 105.611010510127, 106.256264404531, 22.4644024278478, 1.60164752950704e-15, 16.6227411608333, 26.535297847233, 7.19910301202793, 29.5533327979648, 611.022025519874, 52.7749434153259, 19.5698513619914, 23.9507376116895, 1.70761896956049e-15, 24.2873904534041, 83.1597312749807, 51.849911207061, 105.611010510127, 52.7749434153259, 736.165134132116, 133.440685552903, 91.9053353168322, 6.55258708668096e-15, 56.036205319809, 86.1180411620546, 76.6652389324741, 106.256264404531, 19.5698513619915, 133.440685552903, 1401.55449200362, 107.582093653927, 7.67029504004995e-15, 9.42637482307856, 4.28836475146602, 13.4232601222667, 22.4644024278478, 23.9507376116895, 91.9053353168321, 107.582093653927, 57.6052682140803, 4.10709057665822e-15, 6.7207351702689e-16, 3.05748120025493e-16, 9.57039987233639e-16, 1.60164752950703e-15, 1.70761896956049e-15, 6.55258708668095e-15, 7.67029504004995e-15, 4.10709057665822e-15, 2.92823790737107e-31), .Dim = c(9L, 9L)), 9, 9, FALSE); .Internal(rowMeans(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinrowMeans_testrowMeans2_afea9f4775c378f648a4877db86eff1d");
    }

    @Test
    public void TestrGenBuiltinrownames_testrownames3_99ef302f8f7a7c27c3990de6e675309d() {
        assertEval("argv <- structure(list(x = structure(list(x = 3:4), .Names = 'x',     row.names = c(NA, -2L), class = 'data.frame')), .Names = 'x');do.call('rownames', argv)");
        check("TestrGenBuiltinrownames_testrownames3_99ef302f8f7a7c27c3990de6e675309d");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum1_0037d75acd771be7e1c7bacbaf186765() {
        assertEval("argv <- list(structure(1:12, .Dim = 3:4), c('Y', 'X', 'Y'), c('X', 'Y'), FALSE, c('X', 'Y')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinrowsum_testrowsum1_0037d75acd771be7e1c7bacbaf186765");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum2_e77888066b8558d6090381bac88a7e3b() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.83678930089809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.807183221448213, 0, 0, 0, 0, 0, 0, 0, 2.28512598329689, 0, 2.63247834995855, 0, 2.20238351041917, 0, 0.769295244943351, 0, 0, 0, 0, 0, 2.39247868547682, 2.35872046276927, 0, 1.96863683476113, 1.77908247814048, 0, 0, 0, 1.30635392456315, 0, 1.90387659717817, 0, 0.869405556702986, 1.81335102661978, 2.03683243726846, 0, 0.594853387563489, 0, 0, 0.546043346519582, 2.43847447982989, 0, 0, 2.01202685781755, 0, 2.67064226802904, 2.9177625705488, 0.566296850563958, 0, 1.07001449051313, 1.02747153153177, 0, 1.14719850081019, 2.56380862975493, 0.760732567403466, 0.778199262684211, 0, 0.871444851625711, 2.75724254851229, 1.6366914055543, 0.606628090143204, 1.09201998403296, 0.729518678388558, 2.26406822516583, 2.41699231159873, 1.90058654651511), .Names = c('7', '8', '12', '13', '19', '22', '26', '31', '34', '36', '38', '40', '42', '43', '44', '46', '50', '51', '57', '59', '60', '61', '64', '67', '68', '72', '75', '76', '77', '78', '84', '87', '89', '94', '95', '100', '101', '102', '107', '110', '114', '115', '122', '123', '129', '130', '131', '134', '136', '137', '141', '144', '146', '150', '153', '154', '157', '160', '161', '162', '166', '167', '172', '174', '176', '178', '179', '180', '183', '184', '185', '186', '187', '197', '199', '201', '203', '204', '205', '207', '208', '210', '211', '214', '217', '219', '220', '222', '226', '228')), structure(c(310, 361, 654, 728, 61, 81, 520, 473, 107, 122, 965, 731, 153, 433, 145, 95, 765, 735, 5, 687, 345, 444, 60, 208, 821, 305, 226, 426, 705, 363, 167, 641, 740, 245, 588, 166, 559, 450, 529, 351, 201, 524, 199, 550, 551, 543, 293, 511, 511, 371, 201, 62, 356, 340, 315, 182, 364, 376, 384, 268, 266, 194, 348, 382, 296, 186, 145, 269, 350, 272, 292, 332, 285, 243, 276, 79, 240, 202, 235, 224, 239, 173, 252, 92, 192, 211, 175, 203, 105, 177), .Names = c('7', '8', '12', '13', '19', '22', '26', '31', '34', '36', '38', '40', '42', '43', '44', '46', '50', '51', '57', '59', '60', '61', '64', '67', '68', '72', '75', '76', '77', '78', '84', '87', '89', '94', '95', '100', '101', '102', '107', '110', '114', '115', '122', '123', '129', '130', '131', '134', '136', '137', '141', '144', '146', '150', '153', '154', '157', '160', '161', '162', '166', '167', '172', '174', '176', '178', '179', '180', '183', '184', '185', '186', '187', '197', '199', '201', '203', '204', '205', '207', '208', '210', '211', '214', '217', '219', '220', '222', '226', '228')), c(5, 60, 61, 62, 79, 81, 92, 95, 105, 107, 122, 145, 153, 166, 167, 173, 175, 177, 182, 186, 192, 194, 199, 201, 202, 203, 208, 211, 224, 226, 235, 239, 240, 243, 245, 252, 266, 268, 269, 272, 276, 285, 292, 293, 296, 305, 310, 315, 332, 340, 345, 348, 350, 351, 356, 361, 363, 364, 371, 376, 382, 384, 426, 433, 444, 450, 473, 511, 520, 524, 529, 543, 550, 551, 559, 588, 641, 654, 687, 705, 728, 731, 735, 740, 765, 821, 965), FALSE, c('5', '60', '61', '62', '79', '81', '92', '95', '105', '107', '122', '145', '153', '166', '167', '173', '175', '177', '182', '186', '192', '194', '199', '201', '202', '203', '208', '211', '224', '226', '235', '239', '240', '243', '245', '252', '266', '268', '269', '272', '276', '285', '292', '293', '296', '305', '310', '315', '332', '340', '345', '348', '350', '351', '356', '361', '363', '364', '371', '376', '382', '384', '426', '433', '444', '450', '473', '511', '520', '524', '529', '543', '550', '551', '559', '588', '641', '654', '687', '705', '728', '731', '735', '740', '765', '821', '965')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinrowsum_testrowsum2_e77888066b8558d6090381bac88a7e3b");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum3_b49348678422be87022f6b41f7e0055c() {
        assertEval("argv <- list(numeric(0), numeric(0), numeric(0), FALSE, character(0)); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinrowsum_testrowsum3_b49348678422be87022f6b41f7e0055c");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum4_4b94f446be24947b32223c727b09d1b6() {
        assertEval("argv <- list(structure(c(0.432389384893196, 2.31273022636069, 0, 2.31273022636069, 0.432389384893196, 0), .Names = c('1', '3', '4', '5', '6', '7')), structure(c(9, 1, 1, 6, 6, 8), .Names = c('1', '3', '4', '5', '6', '7')), c(1, 6, 8, 9), FALSE, c('1', '6', '8', '9')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinrowsum_testrowsum4_4b94f446be24947b32223c727b09d1b6");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum5_f3643fe89b210518899cf09f8f24ee0c() {
        assertEval("argv <- list(structure(c(0.102430555555556, 0.102430555555556, 0.102430555555556, 0.546875, -0.078125, 0.477430555555556, -0.0642361111111111, 0.102430555555556), .Names = c('1', '2', '3', '4', '5', '6', '7', '8')), structure(1:8, .Label = c('1', '2', '3', '4', '5', '6', '7', '8'), class = 'factor'), structure(1:8, .Label = c('1', '2', '3', '4', '5', '6', '7', '8'), class = 'factor'), FALSE, c('1', '2', '3', '4', '5', '6', '7', '8')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinrowsum_testrowsum5_f3643fe89b210518899cf09f8f24ee0c");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum6_b46f61e9e4e3fe58cf0ee0cba39dfb19() {
        assertEval("argv <- list(structure(c(0, 0.719170679378362, -0.280829320621638, 0, -0.43834135875385, 0, -0.0525040127116955, 0.783590877798991, -0.365543432545085, -0.0525040127116955, -0.31303941983339, 0, 0, NA), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14')), c(3, 3, 4, 5, 5, 6, 6, 6, 7, 1, 1, 1, 1, 2), c(1, 2, 3, 4, 5, 6, 7), FALSE, c('1', '2', '3', '4', '5', '6', '7')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinrowsum_testrowsum6_b46f61e9e4e3fe58cf0ee0cba39dfb19");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum7_d66396fb53df90189a0ddccdd4ffc3ed() {
        assertEval("argv <- list(structure(c(0.10270237599789, 2.6083215370191, 11.0196744330572, 2.6083215370191, 0.10270237599789, 0.10270237599789, 0.10270237599789, -0.441795512568419, 2.6083215370191, 0.10270237599789, -0.441795512568419), .Dim = c(11L, 1L), .Dimnames = list(c('11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21'), 'x')), structure(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), .Names = c('11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21')), c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), FALSE, c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinrowsum_testrowsum7_d66396fb53df90189a0ddccdd4ffc3ed");
    }

    @Test
    public void TestrGenBuiltinrowsum_testrowsum8_6573139ef6d44c9969a20e8b3b202a15() {
        assertEval("argv <- list(structure(c(1.33333333333333, -1.33333333333333, 1, 1.33333333333333, -2, 0.666666666666667, -0.666666666666667, 0.666666666666667, -0.666666666666667), .Dim = c(9L, 1L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7', '8', '9'), 'x')), structure(c(1, 1, 2, 2, 2, 2, 3, 4, 5), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9')), c(1, 2, 3, 4, 5), FALSE, c('1', '2', '3', '4', '5')); .Internal(rowsum_matrix(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinrowsum_testrowsum8_6573139ef6d44c9969a20e8b3b202a15");
    }

    @Test
    public void TestrGenBuiltinscale_testscale1_f8525cee9c7fcb41335a5aa9e0f9e009() {
        assertEval("argv <- structure(list(x = structure(c(0.0280387932434678, 0.789736648323014,     0.825624888762832, 0.102816025260836, 0.290661531267688,     0.0517604837659746, 0.610383243998513, 0.78207225818187,     0.136790128657594, 0.8915234063752, 0.0216042066458613, 0.408875584136695,     0.69190051057376, 0.595735886832699, 0.936268283519894, 0.592950375983492,     0.852736486820504, 0.610123937483877, 0.600582004291937,     0.38303488586098, 0.412859325064346, 0.388432375853881, 0.457582515198737,     0.701614629011601, 0.449137942166999, 0.533179924823344,     0.317685069283471, 0.800954289967194, 0.0273033923003823,     0.496913943905383, 0.903582146391273, 0.725298138801008,     0.616459952667356, 0.341360273305327, 0.0613401387818158,     0.7339238144923, 0.720672776456922, 0.214702291414142, 0.283225567312911,     0.515186718199402, 0.558621872216463, 0.770191126968712,     0.959201833466068, 0.80451478343457, 0.307586128590629, 0.902739278972149,     0.992322677979246, 0.167487781029195, 0.796250741928816,     0.549091263208538, 0.0876540709286928, 0.424049312015995,     0.573274190537632, 0.763274750672281, 0.405174027662724,     0.828049632022157, 0.128607030957937, 0.479592794785276,     0.631105397362262, 0.406053610146046, 0.661386628635228,     0.958720558788627, 0.576542558381334, 0.0483133427333087,     0.615997062064707, 0.341076754732057, 0.901286069769412,     0.521056747529656, 0.92834516079165, 0.228773980634287, 0.458389508537948,     0.987496873131022, 0.0315267851110548, 0.872887850506231,     0.59517983533442, 0.935472247190773, 0.145392092177644, 0.255368477664888,     0.322336541488767, 0.507066876627505, 0.0745627176947892,     0.0313172969035804, 0.499229126842692, 0.868204665370286,     0.232835006900132, 0.422810809221119, 0.803322346881032,     0.00151223805733025, 0.175151102710515, 0.469289294909686),     .Dim = c(10L, 9L))), .Names = 'x');do.call('scale', argv)");
        check("TestrGenBuiltinscale_testscale1_f8525cee9c7fcb41335a5aa9e0f9e009");
    }

    @Test
    public void TestrGenBuiltinsep_testsep10_9596f004e63a224f53f1c0735d3e7751() {
        assertEval("argv <- list(c(0, 9.88131291682493e-324, 1.03753785626662e-322, 1.02271588689138e-321, 1.02320995253722e-320, 1.02330876566639e-319, 1.02329394369701e-318, 1.02329295556572e-317, 1.02329300497229e-316, 1.02329299015032e-315, 1.02329299212658e-314, 1.0232929922748e-313, 1.02329299227974e-312, 1.02329299228073e-311, 1.02329299228073e-310, 1.02329299228073e-309, 1.02329299228073e-308, 1.02329299228073e-307), 1.02329299228075);`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep10_9596f004e63a224f53f1c0735d3e7751");
    }

    @Test
    public void TestrGenBuiltinsep_testsep13_3feeb0a231d4f13d3f69b87b6efe3590() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'), structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = 'data.frame'));`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep13_3feeb0a231d4f13d3f69b87b6efe3590");
    }

    @Test
    public void TestrGenBuiltinsep_testsep14_65c05ddeeafeda38f6377c0a4512aa3a() {
        assertEval("argv <- list(structure(list(A = c(52L, 52L, 47L, 45L, 40L, 37L, 27L, 27L, 23L, 22L, 21L, 25L, 24L, 22L, 22L, 20L, 16L, 17L, 14L, 13L, 13L, 14L, 24L), F = c(42L, 44L, 48L, 49L, 50L, 54L, 58L, 54L, 59L, 59L, 60L, 53L, 54L, 55L, 56L, 58L, 62L, 57L, 54L, 55L, 52L, 47L, 56L), M = c(6L, 4L, 5L, 6L, 10L, 9L, 15L, 19L, 18L, 19L, 19L, 22L, 22L, 23L, 22L, 22L, 22L, 26L, 32L, 32L, 35L, 39L, 20L)), .Names = c('A', 'F', 'M'), class = 'data.frame', row.names = c(NA, 23L)), 100);`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep14_65c05ddeeafeda38f6377c0a4512aa3a");
    }

    @Test
    public void TestrGenBuiltinsep_testsep16_04768845c16f7d46591acb6c2369960d() {
        assertEval("argv <- list(structure(c(126.49966838981, 123.340306958365, 124.994330270046, 129.001056705356, 131.639025779016, 124.408594738421, 125.475982014377, 125.929559340094, 126.630542479839, 127.249057014908, 127.661400038288, 128.403617480371, 129.888052364537, 131.702361667407, 133.516670970277, 135.001105854443, 135.990729110554, 137.310226785368, 144.127817178676, 144.648818160919, 147.114894939813, 142.21953431078, 139.936534657354, 152.343274976711), .Tsp = c(1949, 1950.91666666667, 12), class = 'ts'), structure(c(NA, NA, NA, NA, NA, NA, 126.791666666667, 127.25, 127.958333333333, 128.583333333333, 129, 129.75, 131.25, 133.083333333333, 134.916666666667, 136.416666666667, 137.416666666667, 138.75, NA, NA, NA, NA, NA, NA), .Tsp = c(1949, 1950.91666666667, 12), class = 'ts'));`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep16_04768845c16f7d46591acb6c2369960d");
    }

    @Test
    public void TestrGenBuiltinsep_testsep2_ba6d2e3600f93ad5a373fb7c3bdc3a2f() {
        assertEval("argv <- list(c(-3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L, -3L, -2L, -1L, 0L, 1L, 2L, 3L, 4L, 5L), c(-3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -3L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -2L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L));`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep2_ba6d2e3600f93ad5a373fb7c3bdc3a2f");
    }

    @Test
    public void TestrGenBuiltinsep_testsep20_d838620b11cf1a654915994614e6685e() {
        assertEval("argv <- list(structure(c(FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42')), 6);`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep20_d838620b11cf1a654915994614e6685e");
    }

    @Test
    public void TestrGenBuiltinsep_testsep22_c64350c8030902789a6a9f19d9ece167() {
        assertEval("argv <- list(c(0+6.28318530717959i, 0+12.5663706143592i, 0+18.8495559215388i, 0+25.1327412287183i, 0+31.4159265358979i, 0+37.6991118430775i, 0+43.9822971502571i, 0+50.2654824574367i, 0+56.5486677646163i, 0+62.8318530717959i, 0+69.1150383789754i, 0+75.398223686155i, 0+81.6814089933346i, 0+87.9645943005142i, 0+94.2477796076938i, 0+100.530964914873i), 16);`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep22_c64350c8030902789a6a9f19d9ece167");
    }

    @Test
    public void TestrGenBuiltinsep_testsep23_3e54e1ac87607693efd38dd6a8068ba7() {
        assertEval("argv <- list(structure(c(1, 0, -1, 0.5, -0.5, NA, NA, NA, 0), .Dim = c(3L, 3L)), structure(c(1, 1, 1, 0.707106781186548, 0.707106781186548, 0.707106781186548, 0, 0, 0), .Dim = c(3L, 3L)));`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep23_3e54e1ac87607693efd38dd6a8068ba7");
    }

    @Test
    public void TestrGenBuiltinsep_testsep25_924baba3d81e602e48b58e0472742dbe() {
        assertEval("argv <- list(structure(c(1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')), structure(c(0.570290675249213, 0.61905127646042, 0.531618474288601, 0.790554080720526, 0.767014480135805, 0.550113874748024, 0.17684306547603, 0.582060475541574, 0.82418208155584, 0.508078873703881, 0.235692066937831, 0.434097271866188, 0.494627673369755, 0.72161667900813, 0.573653475332745, 0.56356507508215, 0.69807707842341, 0.78887268067876, 0.566927875165682, 0.661086277504564, 0.469406672743269, 0.365159870153793, 0.474450872868566, 0.63082107675278, 0.131445264348354, 0.640909477003375, 0.503034673578584, 0.565246475123916, 0.403832071114405, 0.577016275416276, 0.543388274580962, 0.239054867021362, 0.573653475332745, 0.514804473870944, 0.674537477838689, 0.0709148628447877, 0.536662674413898, 0.772058680261102, 0.274364267898443, 0.116312663972463, 0.439141471991485, 0.60728147616806, 0.400469271030873, 0.497990473453286, 0.514804473870944, 0.55179527478979, 0.455955472409143, 0.506397473662115, 0.321443469067883, 0.565246475123916, 0.772058680261102, 0.869579882683515, 0.494627673369755, 0.457636872450909, 0.398787870989108, 0.753563279801679, 0.518167273954475, 0.326487669193181, 0.351708669819667, 0.479495072993863, 0.397106470947342, 0.439141471991485, 0.37020407027909, 0.627458276669249, 0.402150671072639, 0.63082107675278, 0.543388274580962, 0.587104675666871, 0.587104675666871, 0.311355068817289, 0.730023679216959, 0.534981274372133, 0.450911272283846, 0.427371671699125, 0.432415871824422, 0.2911782683161, 0.339938869527307, 0.708165478674004, 0.76533308009404, 0.455955472409143, 0.509760273745647, 0.412239071323234, 0.464362472617972, 0.481176473035629, 0.331531869318478, 0.622414076543951, 0.392062270822045, 0.827544881639372, 0.487902073202692, 0.479495072993863, 0.652679277295735, 0.585423275625105, 0.735067879342256, 0.477813672952097, 0.435778671907954, 0.756926079885211, 0.679581677963987, 0.339938869527307, 0.625776876627483, 0.652679277295735), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep25_924baba3d81e602e48b58e0472742dbe");
    }

    @Test
    public void TestrGenBuiltinsep_testsep26_c4f824803870e041f321c15bafbb0b9d() {
        assertEval("argv <- list(structure(c(0L, 1L, 1L, 7L, 7L, 2L, 0L, 3L, 9L, 0L, 0L, 0L, 0L, 6L, 0L, 1L, 5L, 8L, 2L, 2L, 0L, 0L, 0L, 9L, 0L, 3L, 0L, 1L, 0L, 2L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 2L, 2L, 0L, 0L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 1L, 0L, 1L, 0L, 0L, 8L, 0L, 0L, 0L, 0L, 0L, 0L, 3L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 0L, 4L, 0L, 0L, 4L, 0L, 5L, 0L, 0L, 3L, 3L, 0L, 5L, 2L), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')), structure(c(1.25194092864295, 1.37418430529572, 1.15498928509075, 1.80414376800547, 1.74512972410413, 1.20135746244181, 0.265563337720594, 1.28144795059362, 1.88844954500738, 1.09597524118942, 0.413098447473938, 0.910502531785213, 1.06225293038865, 1.63131692515155, 1.26037150634314, 1.23507977324257, 1.57230288125021, 1.79992847915537, 1.24351035094276, 1.47956652654811, 0.999023597637219, 0.737675688931295, 1.01166946418751, 1.40369132724639, 0.151750538768014, 1.42898306034697, 1.08332937463913, 1.23929506209267, 0.834627332483493, 1.26880208404333, 1.18449630704142, 0.421529025174129, 1.26037150634314, 1.1128363965898, 1.51328883734888, 1.40164574169432e-07, 1.16763515164104, 1.75777559065442, 0.510050091026136, 0.113812939117154, 0.9231483983355, 1.34467728334505, 0.826196754783302, 1.07068350808884, 1.1128363965898, 1.2055727512919, 0.965301286836455, 1.09175995233932, 0.628078178828811, 1.23929506209267, 1.75777559065442, 2.00226234395996, 1.06225293038865, 0.969516575686551, 0.821981465933206, 1.71140741330337, 1.12126697428999, 0.640724045379098, 0.703953378130531, 1.02431533073779, 0.817766177083111, 0.9231483983355, 0.750321555481582, 1.3952607495462, 0.830412043633397, 1.40369132724639, 1.18449630704142, 1.29409381714391, 1.29409381714391, 0.602786445728238, 1.65239336940203, 1.16341986279095, 0.952655420286168, 0.893641376384831, 0.906287242935117, 0.552202979527091, 0.674446356179862, 1.59759461435079, 1.74091443525404, 0.965301286836455, 1.10019053003951, 0.855703776733971, 0.986377731086933, 1.02853061958789, 0.653369911929384, 1.38261488299591, 0.805120310532824, 1.89688012270757, 1.04539177498827, 1.02431533073779, 1.45849008229763, 1.28987852829381, 1.66503923595232, 1.0201000418877, 0.914717820635308, 1.71983799100356, 1.52593470389916, 0.674446356179862, 1.39104546069611, 1.45849008229763), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep26_c4f824803870e041f321c15bafbb0b9d");
    }

    @Test
    public void TestrGenBuiltinsep_testsep28_1b5cab2ac334a60a22d2a688d2438709() {
        assertEval("argv <- list(structure(c(0L, 1L, 1L, 7L, 7L, 2L, 0L, 3L, 9L, 0L, 0L, 0L, 0L, 6L, 0L, 1L, 5L, 8L, 2L, 2L, 0L, 0L, 0L, 9L, 0L, 3L, 0L, 1L, 0L, 2L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 2L, 2L, 0L, 0L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 0L, 1L, 0L, 1L, 0L, 0L, 8L, 0L, 0L, 0L, 0L, 0L, 0L, 3L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 0L, 4L, 0L, 0L, 4L, 0L, 5L, 0L, 0L, 3L, 3L, 0L, 5L, 2L), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')), structure(c(1.501181611548, 1.64776358195565, 1.38492694536262, 2.16332775373429, 2.09256404388232, 1.44052700310346, 0.318416746879368, 1.53656346647399, 2.26441876780853, 1.31416323551065, 0.495326021509292, 1.09176300454732, 1.27372682988096, 1.95609117488209, 1.51129071295543, 1.48096340873315, 1.88532746503012, 2.15827320303057, 1.49107251014058, 1.77412734954845, 1.19790856932527, 0.884526425695124, 1.21307222143641, 1.68314543688164, 0.181943877879142, 1.71347274110391, 1.29899958339952, 1.48601795943686, 1.0007810918805, 1.52139981436285, 1.42030880028861, 0.505435122916716, 1.51129071295543, 1.3343814383255, 1.81456375517815, -1.99474544941847e-05, 1.40009059747376, 2.10772769599345, 0.611580687694671, 0.136452921545733, 1.10692665665846, 1.61238172702967, 0.990671990473078, 1.28383593128838, 1.3343814383255, 1.44558155380717, 1.15747216369558, 1.30910868480694, 0.753108107398609, 1.48601795943686, 2.10772769599345, 2.40089163680876, 1.27372682988096, 1.16252671439929, 0.985617439769366, 2.05212763825262, 1.34449053973293, 0.768271759509746, 0.844090020065427, 1.22823587354755, 0.980562889065654, 1.10692665665846, 0.899690077806261, 1.67303633547421, 0.99572654117679, 1.68314543688164, 1.42030880028861, 1.55172711858512, 1.55172711858512, 0.722780803176337, 1.98136392840065, 1.39503604677005, 1.14230851158444, 1.07154480173247, 1.08670845384361, 0.662126194731792, 0.808708165139443, 1.91565476925239, 2.08750949317861, 1.15747216369558, 1.31921778621437, 1.02605384539906, 1.18274491721414, 1.23329042425126, 0.783435411620882, 1.65787268336308, 0.965399236954518, 2.27452786921595, 1.25350862706611, 1.22823587354755, 1.74885459602989, 1.54667256788141, 1.99652758051179, 1.22318132284384, 1.09681755525103, 2.06223673966004, 1.82972740728929, 0.808708165139443, 1.6679817847705, 1.74885459602989), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100')));`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep28_1b5cab2ac334a60a22d2a688d2438709");
    }

    @Test
    public void TestrGenBuiltinsep_testsep3_c7decb1e0e451a0cab405ce8480a7f2e() {
        assertEval("argv <- list(structure(c(NA, 17.4716236802524, 0.424429400003, -2.45474630431729, -8.6855922903657, -11.7956139807344, -8.08147081196715, -13.3123167980156, -1.24650334752019, 21.281002075072, -5.32311940332657, 0.621869751489083, -19.2022951076469, -0.543162784063959, NA, NA, 15.344649382745, -9.74060313555005, 0.149375174081257, -5.85062482591874, -6.90563567110309, -9.96064651628744, 5.6326723568001, -8.78481137542338, -6.01565736147178, -15.543162784064, 2.34681552556734, -13.2465033475202, -3.82901961529671, 1.5226506664314, NA, -5.9777558474085, 22.7534966524798, 15.5010454558094, 4.13857256877024, -11.6855922903657, 11.6768805966734, -7.38893285382193, 10.8527157375375, -11.3889328538219, 14.1493751740813, -0.388932853821931, 13.0835617235859, -1.98225172690947, 5.96273742790618, -1.50975714950164, -1.38893285382193, 9.90772658272184, 7.3144077096343, -12.9822517269095, 2.02855087840155, -4.7956139807344, 3.14937517408126, -10.3231194033266, -2.25730595283121, 2.56685890630474, 4.27019946976097, 5.14937517408126, 0.0285508784015471, 5.85271573753749, 6.73189144185778, -6.38893285382193, 0.0285508784015471, -3.14728426246251, 15.1493751740813, 13.7869022870421, -7.27891116345324, 9.61106714617807, 4.84191313222647, -3.98225172690947, -6.38893285382193, 13.0285508784015, 5.13857256877024, -8.50975714950164, -0.619778839870337, -3.97144912159845, 23.1493751740813, -2.80641658604541, -1.03726257209382, 2.25939686444995, 4.25939686444995, -4.38893285382193, 6.38022116012966, -4.74060313555005, 2.02855087840155, -15.7956139807344, 8.21518862457662, -12.0264599667828, -2.1364816571515, 5.8635183428485, -14.729800530239, 4.80850749766416, -11.7848113754234, 9.45683721593604, -15.2573059528312, 5.28100207507198, 12.8635183428485, 6.50104545580937, 1.55605630099372, -7.44394369900628, 9.9735400332172, -11.2681085581422, 7.44603461062503, -8.14728426246251, -1.72980053023903, -3.90563567110309, 4.56685890630474, -5.37813024851092, -1.25730595283121, 10.7426940471688, NA, NA, 6.24343998511081, -21.9164382764141, -6.1364816571515, -15.8398222206077, -4.12567905184048, -7.94984391097642, -6.4773493335686, -5.65318447443266), .Tsp = c(1945, 1974.75, 4), class = 'ts'), 9.24492052298191);`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep3_c7decb1e0e451a0cab405ce8480a7f2e");
    }

    @Test
    public void TestrGenBuiltinsep_testsep5_b85231486e0ba6e2260c710ddfb6d98c() {
        assertEval("argv <- list(structure(integer(0), .Label = character(0), class = 'factor'));`/`(argv[[1]]);");
        check("TestrGenBuiltinsep_testsep5_b85231486e0ba6e2260c710ddfb6d98c");
    }

    @Test
    public void TestrGenBuiltinsep_testsep8_5dca4f10baf3ba907592cdac82d4cfea() {
        assertEval("argv <- list(structure(c(1L, 1L, 1L, 1L, 6L, 2L, 4L, 3L, 7L, 2L, 8L, 4L, 2L, 2L, 1L, 3L, 3L, 4L, 3L, 2L, 1L, 2L, 3L, 1L, 1L, 2L, 1L, 3L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 2L, 4L, 1L, 1L, 1L, 1L, 2L, 1L, 5L, 2L, 1L, 3L, 2L, 1L, 1L, 6L, 2L, 1L, 2L, 5L, 2L, 2L, 2L, 4L, 4L, 1L, 1L, 3L, 4L, 2L, 2L, 2L, 1L, 5L, 4L, 1L, 3L, 1L, 1L, 4L, 2L, 3L, 2L, 1L, 8L, 1L, 5L, 1L, 3L, 4L, 4L, 1L, 3L, 1L, 2L, 6L, 1L, 1L, 1L, 1L, 1L, 6L, 2L, 2L, 1L, 1L, 2L, 3L, 1L, 1L, 1L, 1L), .Dim = 126L, .Dimnames = structure(list(fe = c('1.6', '1.667', '1.7', '1.733', '1.75', '1.783', '1.8', '1.817', '1.833', '1.85', '1.867', '1.883', '1.917', '1.933', '1.95', '1.967', '1.983', '2', '2.017', '2.033', '2.067', '2.083', '2.1', '2.133', '2.15', '2.167', '2.183', '2.2', '2.217', '2.233', '2.25', '2.267', '2.283', '2.3', '2.317', '2.333', '2.35', '2.367', '2.383', '2.4', '2.417', '2.483', '2.617', '2.633', '2.8', '2.883', '2.9', '3.067', '3.317', '3.333', '3.367', '3.417', '3.45', '3.5', '3.567', '3.6', '3.683', '3.717', '3.733', '3.75', '3.767', '3.817', '3.833', '3.85', '3.883', '3.917', '3.95', '3.966', '3.967', '4', '4.033', '4.05', '4.067', '4.083', '4.1', '4.117', '4.133', '4.15', '4.167', '4.183', '4.2', '4.233', '4.25', '4.267', '4.283', '4.3', '4.317', '4.333', '4.35', '4.366', '4.367', '4.383', '4.4', '4.417', '4.433', '4.45', '4.467', '4.483', '4.5', '4.517', '4.533', '4.55', '4.567', '4.583', '4.6', '4.617', '4.633', '4.65', '4.667', '4.7', '4.716', '4.733', '4.75', '4.767', '4.783', '4.8', '4.817', '4.833', '4.85', '4.883', '4.9', '4.933', '5', '5.033', '5.067', '5.1')), .Names = 'fe'), class = 'table'), 272L);`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep8_5dca4f10baf3ba907592cdac82d4cfea");
    }

    @Test
    public void TestrGenBuiltinsep_testsep9_7105f4d2294ebb9e608ff8e8f1a9dd88() {
        assertEval("argv <- list(c(-20.7752893729399+0i, -22.2629231778254+0i, 30.2366932497517-0i, -17.7609104766206+0i, -12.009450871146+0i, -20.6744466063748+0i, -16.2509653806178-0i, 14.8872572302678-0i, -2.41214022512376e+00+5e-15i, 30.1945691318138-0i, -14.86107358966-0i, -75.7334659810725-0i, -31.7348183989382+0i, 33.742775143777-0i, 26.1570616797447-0i, 37.7317903854624+0i, -7.20820970337446-0i, 38.6698755921621-0i, -26.4295844393936-0i, 26.3000016960339+0i, -16.3754767271763+0i, -7.29593605495242-0i, 9.19886724090888+0i, -35.3925832738897+0i, 21.0943018303757+0i, 4.90714440628349-0i), 26L);`/`(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsep_testsep9_7105f4d2294ebb9e608ff8e8f1a9dd88");
    }

    @Test
    public void TestrGenBuiltinseq_testseq16_c72638ffe848df023ca0ed216dc0247c() {
        assertEval("argv <- list(list(list(c('', '', '\\036', '', 'New', 'print()', '(S3)', 'method', 'for', 'class', '\\'function\\',', '', '', '', '', '', '', '', 'also', 'used', 'for', 'auto-printing.', '', 'Further,', '.Primitive', '', '', '', '', '', '', '', 'functions', 'now', 'print', 'and', 'auto-print', 'identically.', '', 'The', 'new', 'method', '', '', '', '', '', '', '', 'is', 'based', 'on', 'code', 'suggestions', 'by', 'Romain', 'François.'))));seq_along(argv[[1]]);");
        check("TestrGenBuiltinseq_testseq16_c72638ffe848df023ca0ed216dc0247c");
    }

    @Test
    public void TestrGenBuiltinseq_testseq27_33d7074d69dd54986cf2ac21b1a194f2() {
        assertEval("argv <- list(c(2L, 2L));do.call('seq_len', argv)");
        check("TestrGenBuiltinseq_testseq27_33d7074d69dd54986cf2ac21b1a194f2");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint1_435241438c86e9c56ceec5fdf6a97d01() {
        assertEval("argv <- list(16146, by = 1, length.out = 4);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinseqint_testseqint1_435241438c86e9c56ceec5fdf6a97d01");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint14_4139d8550bf8db877b16669adb5eb01f() {
        assertEval("argv <- list(from = 0.95, by = -0.120360949612403, length.out = 6);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinseqint_testseqint14_4139d8550bf8db877b16669adb5eb01f");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint15_875d4e8ce679548405c84bcca74b321a() {
        assertEval("argv <- list(list());seq.int(argv[[1]]);");
        check("TestrGenBuiltinseqint_testseqint15_875d4e8ce679548405c84bcca74b321a");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint17_2e3dd7f1248c8236567f810b8426346d() {
        assertEval("argv <- list(from = 0.070740277703696, to = 0.793110173512391, length.out = NULL);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinseqint_testseqint17_2e3dd7f1248c8236567f810b8426346d");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint26_488070fe16f69270f82af8b2c99437a5() {
        assertEval("argv <- list(NaN, NaN);do.call('seq.int', argv)");
        check("TestrGenBuiltinseqint_testseqint26_488070fe16f69270f82af8b2c99437a5");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint27_516d48d00b6bfae3b7abc467e48b7a59() {
        assertEval("argv <- structure(list(1.2, 1, by = 1), .Names = c('', '', 'by'));do.call('seq.int', argv)");
        check("TestrGenBuiltinseqint_testseqint27_516d48d00b6bfae3b7abc467e48b7a59");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint28_31dc8e95d9308b517d480a278bf6efe3() {
        assertEval("argv <- structure(list(to = NaN), .Names = 'to');do.call('seq.int', argv)");
        check("TestrGenBuiltinseqint_testseqint28_31dc8e95d9308b517d480a278bf6efe3");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint29_0d91be29fca815069028cd633566e7e5() {
        assertEval("argv <- list(NaN);do.call('seq.int', argv)");
        check("TestrGenBuiltinseqint_testseqint29_0d91be29fca815069028cd633566e7e5");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint4_a9b7d237bccf65b5720f185242dd8c18() {
        assertEval("argv <- list(1.2e+100, 1.3e+100, length.out = 2);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinseqint_testseqint4_a9b7d237bccf65b5720f185242dd8c18");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint6_1535acb6c16135e174e9d159863c4fa3() {
        assertEval("argv <- list(953553600, by = 86400, length.out = 10);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinseqint_testseqint6_1535acb6c16135e174e9d159863c4fa3");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint7_e4636cba32da6fbde37b9dbe1eb04b30() {
        assertEval("argv <- list(25L);seq.int(argv[[1]]);");
        check("TestrGenBuiltinseqint_testseqint7_e4636cba32da6fbde37b9dbe1eb04b30");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint8_be3e83933ddb4b697617f8977cd220c6() {
        assertEval("argv <- list(from = 2.0943951023932, to = 2.61799387799149, by = 0.0174532925199433);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinseqint_testseqint8_be3e83933ddb4b697617f8977cd220c6");
    }

    @Test
    public void TestrGenBuiltinseqint_testseqint9_ced1e26637467cbe69e1d20121049d4d() {
        assertEval("argv <- list(from = 0, to = 0.793110173512391, length.out = FALSE);seq.int(argv[[1]],argv[[2]],argv[[3]]);");
        check("TestrGenBuiltinseqint_testseqint9_ced1e26637467cbe69e1d20121049d4d");
    }

    @Test
    public void TestrGenBuiltinsetEncoding_testsetEncoding1_575410e6ad8803786ba9b9e5cb659549() {
        assertEval("argv <- list('abc', 'UTF-8'); .Internal(setEncoding(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsetEncoding_testsetEncoding1_575410e6ad8803786ba9b9e5cb659549");
    }

    @Test
    public void TestrGenBuiltinsetEncoding_testsetEncoding2_20b05ee818fc836fe749c9486234902b() {
        assertEval("argv <- list(''', 'unknown'); .Internal(setEncoding(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsetEncoding_testsetEncoding2_20b05ee818fc836fe749c9486234902b");
    }

    @Test
    public void TestrGenBuiltinsetEncoding_testsetEncoding3_368f1a8fdffd199bc14ab4e1112075f5() {
        assertEval("argv <- list('3.0.1', 'unknown'); .Internal(setEncoding(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsetEncoding_testsetEncoding3_368f1a8fdffd199bc14ab4e1112075f5");
    }

    @Test
    public void TestrGenBuiltinsetEncoding_testsetEncoding4_45acb501e0d08be171b77f3f5a401738() {
        assertEval("argv <- list(structure(c('Matrix', '1.0-12', '2013-03-26', 'recommended', 'Sparse and Dense Matrix Classes and Methods', 'Douglas Bates <bates@stat.wisc.edu> and Martin Maechler\\n        <maechler@stat.math.ethz.ch>', 'Martin Maechler <mmaechler+Matrix@gmail.com>', 'Doug and Martin <Matrix-authors@R-project.org>', 'Classes and methods for dense and sparse matrices and\\n        operations on them using Lapack and SuiteSparse.', 'R (>= 2.15.0), stats, methods, utils, lattice', 'graphics, grid', 'expm, MASS', 'MatrixModels, graph, SparseM, sfsmisc', 'UTF-8', 'no', 'no longer available, since we use data/*.R *and* our\\nclasses', 'yes', 'no', 'GPL (>= 2)', 'The Matrix package includes libraries AMD, CHOLMOD,\\nCOLAMD, CSparse and SPQR from the SuiteSparse collection of Tim\\nDavis.  All sections of that code are covered by the GPL or\\nLGPL licenses.  See the directory doc/UFsparse for details.', 'http://Matrix.R-forge.R-project.org/', '2013-03-26 15:38:54 UTC; maechler', 'yes', 'CRAN', '2013-03-26 19:25:05', 'R 3.0.1; x86_64-unknown-linux-gnu; 2013-12-07 03:52:11 UTC; unix'), .Names = c('Package', 'Version', 'Date', 'Priority', 'Title', 'Author', 'Maintainer', 'Contact', 'Description', 'Depends', 'Imports', 'Suggests', 'Enhances', 'Encoding', 'LazyData', 'LazyDataNote', 'ByteCompile', 'BuildResaveData', 'License', 'LicenseDetails', 'URL', 'Packaged', 'NeedsCompilation', 'Repository', 'Date/Publication', 'Built')), structure('UTF-8', .Names = 'Encoding')); .Internal(setEncoding(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsetEncoding_testsetEncoding4_45acb501e0d08be171b77f3f5a401738");
    }

    @Test
    public void TestrGenBuiltinsetHook_testsetHook1_862b435b6fd61e2a7f2576a35eff11dc() {
        assertEval("argv <- structure(list(hookName = 'UserHook::stats4::onUnload',     value = function(pkgname, ...) cat('onUnload', sQuote(pkgname),         'B', '\\n')), .Names = c('hookName', 'value'));do.call('setHook', argv)");
        check("TestrGenBuiltinsetHook_testsetHook1_862b435b6fd61e2a7f2576a35eff11dc");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object1_0ab55bb1bc045815c8938f2fed92bf45() {
        assertEval("argv <- list(structure('ObjectsWithPackage', class = structure('signature', package = 'methods'), .Names = '.Object', package = 'methods'), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object1_0ab55bb1bc045815c8938f2fed92bf45");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object10_f1618bd52a1d19d12b81f01159dea332() {
        assertEval("argv <- list(structure(function (object) cat('I am a \\'foo\\'\\n'), target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('MethodDefinition', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object10_f1618bd52a1d19d12b81f01159dea332");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object11_c9d4d5d9e8b0439e485064de85950760() {
        assertEval("argv <- list(structure(function (x = 1, nrow, ncol) standardGeneric('diag'), generic = character(0), package = character(0), group = list(), valueClass = character(0), signature = character(0), default = quote(`\\001NULL\\001`), skeleton = quote(`<undef>`()), class = structure('standardGeneric', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object11_c9d4d5d9e8b0439e485064de85950760");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object12_ebdc141e1b9aa511ef1e612848e54ec6() {
        assertEval("argv <- list(structure(list(`NA` = structure(function (object) cat('I am a \\'foo\\'\\n'), target = structure('foo', .Names = 'object', package = 'myTst', class = structure('signature', package = 'methods')), defined = structure('foo', .Names = 'object', package = 'myTst', class = structure('signature', package = 'methods')), generic = structure('show', package = 'methods'), class = structure('MethodDefinition', package = 'methods'))), .Names = NA_character_, arguments = structure('object', simpleOnly = TRUE), signatures = list(), generic = structure(function (object) standardGeneric('show'), generic = structure('show', package = 'methods'), package = 'methods', group = list(), valueClass = character(0), signature = structure('object', simpleOnly = TRUE), default = structure(function (object) showDefault(object, FALSE), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'object', package = 'methods'), generic = structure('show', package = 'methods'), class = structure('derivedDefaultMethod', package = 'methods')), skeleton = quote((function (object) showDefault(object, FALSE))(object)), class = structure('standardGeneric', package = 'methods')), class = structure('listOfMethods', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object12_ebdc141e1b9aa511ef1e612848e54ec6");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object13_14d9f7bd93f7f9ee8cd2510ca60e57c5() {
        assertEval("argv <- list(structure(function (x, type = c('O', 'I', 'F', 'M', '2')) {    if (identical('2', type)) {        svd(x, nu = 0L, nv = 0L)$d[1L]    } else .Internal(La_dlange(x, type))}, target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('derivedDefaultMethod', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object13_14d9f7bd93f7f9ee8cd2510ca60e57c5");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object14_9aff3252b217942d4806b486dea68e81() {
        assertEval("argv <- list(structure(function (x, y, ...) UseMethod('plot'), target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('derivedDefaultMethod', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object14_9aff3252b217942d4806b486dea68e81");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object2_ed883a7fd8b0bee8e11ee812189f7b75() {
        assertEval("argv <- list(structure(function (x, ...) standardGeneric('toeplitz'), generic = character(0), package = character(0), group = list(), valueClass = character(0), signature = character(0), default = quote(`\\001NULL\\001`), skeleton = quote(`<undef>`()), class = structure('standardGeneric', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object2_ed883a7fd8b0bee8e11ee812189f7b75");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object3_072c080448e33f0a49b36e5cd681a05d() {
        assertEval("argv <- list(structure(character(0), package = character(0), class = structure('ObjectsWithPackage', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object3_072c080448e33f0a49b36e5cd681a05d");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object4_f0c5493b3da7d5cd4727d96805aadbb2() {
        assertEval("argv <- list(structure(function (qr, complete = FALSE, Dvec) standardGeneric('qr.Q'), generic = character(0), package = character(0), group = list(), valueClass = character(0), signature = character(0), default = quote(`\\001NULL\\001`), skeleton = quote(`<undef>`()), class = structure('standardGeneric', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object4_f0c5493b3da7d5cd4727d96805aadbb2");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object5_29afb062e3460024baf7c5ad554f2872() {
        assertEval("argv <- list(structure(c('nonStructure', 'ANY', 'ANY', 'ANY'), .Names = c(NA_character_, NA_character_, NA_character_, NA_character_), package = character(0), class = structure('signature', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object5_29afb062e3460024baf7c5ad554f2872");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object6_8dab2be22e76070a5a190d6e9692efef() {
        assertEval("argv <- list(structure(function (x) .Internal(drop(x)), target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('derivedDefaultMethod', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object6_8dab2be22e76070a5a190d6e9692efef");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object7_25798037d870e60328f01dd63b909881() {
        assertEval("argv <- list(structure(function (x, y = NULL) .Internal(crossprod(x, y)), target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('derivedDefaultMethod', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object7_25798037d870e60328f01dd63b909881");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object8_84be8f312b049b83a14d879ba3ed6500() {
        assertEval("argv <- list(structure(function (x, i, j, ...) x@aa[[i]], target = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), defined = structure(character(0), .Names = character(0), package = character(0), class = structure('signature', package = 'methods')), generic = character(0), class = structure('MethodDefinition', package = 'methods')), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object8_84be8f312b049b83a14d879ba3ed6500");
    }

    @Test
    public void TestrGenBuiltinsetS4Object_testsetS4Object9_f87ba8a0629ae6811587d0c11e0bcf2d() {
        assertEval("argv <- list(numeric(0), TRUE, 0L); .Internal(setS4Object(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetS4Object_testsetS4Object9_f87ba8a0629ae6811587d0c11e0bcf2d");
    }

    @Test
    public void TestrGenBuiltinsetSessionTimeLimit_testsetSessionTimeLimit1_0d606561ef60b6a688844ab91b23932c() {
        assertEval("argv <- list(NULL, NULL); .Internal(setSessionTimeLimit(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsetSessionTimeLimit_testsetSessionTimeLimit1_0d606561ef60b6a688844ab91b23932c");
    }

    @Test
    public void TestrGenBuiltinsetSessionTimeLimit_testsetSessionTimeLimit2_3a41dc6c95029a1a3385b669b6ef7b3c() {
        assertEval("argv <- list(FALSE, Inf); .Internal(setSessionTimeLimit(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsetSessionTimeLimit_testsetSessionTimeLimit2_3a41dc6c95029a1a3385b669b6ef7b3c");
    }

    @Test
    public void TestrGenBuiltinsetTimeLimit_testsetTimeLimit1_696c717ab745eadf821ecf540881f6c2() {
        assertEval("argv <- list(FALSE, Inf, FALSE); .Internal(setTimeLimit(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetTimeLimit_testsetTimeLimit1_696c717ab745eadf821ecf540881f6c2");
    }

    @Test
    public void TestrGenBuiltinseterrmessage_testseterrmessage1_2970788180849cbc3a9e7baa853da53a() {
        assertEval("argv <- list('Error in cor(rnorm(10), NULL) : \\n  supply both 'x' and 'y' or a matrix-like 'x'\\n'); .Internal(seterrmessage(argv[[1]]))");
        check("TestrGenBuiltinseterrmessage_testseterrmessage1_2970788180849cbc3a9e7baa853da53a");
    }

    @Test
    public void TestrGenBuiltinseterrmessage_testseterrmessage2_bdd2bd1edc78df6b3afdcaf9a7a33a3a() {
        assertEval("argv <- list('Error in as.POSIXlt.character(x, tz, ...) : \\n  character string is not in a standard unambiguous format\\n'); .Internal(seterrmessage(argv[[1]]))");
        check("TestrGenBuiltinseterrmessage_testseterrmessage2_bdd2bd1edc78df6b3afdcaf9a7a33a3a");
    }

    @Test
    public void TestrGenBuiltinseterrmessage_testseterrmessage3_6b1137e46070ef431e77a376fc23fddb() {
        assertEval("argv <- list('Error in validObject(.Object) : \\n  invalid class “trackCurve” object: Unequal x,y lengths: 20, 10\\n'); .Internal(seterrmessage(argv[[1]]))");
        check("TestrGenBuiltinseterrmessage_testseterrmessage3_6b1137e46070ef431e77a376fc23fddb");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed1_2ef0ed43632aae054f81d4509ed1a12d() {
        assertEval("argv <- list(1000, 0L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetseed_testsetseed1_2ef0ed43632aae054f81d4509ed1a12d");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed2_11d56d354a8058985c6d0474e7df1b9a() {
        assertEval("argv <- list(77, 2L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetseed_testsetseed2_11d56d354a8058985c6d0474e7df1b9a");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed3_22ab62314b1f3b2905e5a30da785c03b() {
        assertEval("argv <- list(123, 6L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetseed_testsetseed3_22ab62314b1f3b2905e5a30da785c03b");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed4_33a423903f4010ec520c9ae76ad3788b() {
        assertEval("argv <- list(77, 4L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetseed_testsetseed4_33a423903f4010ec520c9ae76ad3788b");
    }

    @Test
    public void TestrGenBuiltinsetseed_testsetseed7_03b9f46d49e83b773bcc79c5a8506f7e() {
        assertEval("argv <- list(123, 7L, NULL); .Internal(set.seed(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsetseed_testsetseed7_03b9f46d49e83b773bcc79c5a8506f7e");
    }

    @Test
    public void TestrGenBuiltinshQuote_testshQuote1_6dc838413742c948f85b0027f213aa96() {
        assertEval("argv <- structure(list(string = c('ABC', '\\'123\\'', 'a'b'), type = 'cmd'),     .Names = c('string', 'type'));do.call('shQuote', argv)");
        check("TestrGenBuiltinshQuote_testshQuote1_6dc838413742c948f85b0027f213aa96");
    }

    @Test
    public void TestrGenBuiltinshortRowNames_testshortRowNames5_6ad800fa0dc62a99bbb9658d334d1d11() {
        assertEval("argv <- list(structure(list(c('4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.1-0', '4.0-3', '4.0-3', '4.0-3', '4.0-3', '4.0-3', '4.0-2', '4.0-2', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '4.0-1', '3.1-55', '3.1-55', '3.1-55', '3.1-54', '3.1-53', '3.1-53', '3.1-52', '3.1-51'), c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), c('The C and R code has been reformatted for legibility.', 'The old compatibility function rpconvert() has been removed.', 'The cross-validation functions allow for user interrupt at the end\\nof evaluating each split.', 'Variable Reliability in data set car90 is corrected to be an\\nordered factor, as documented.', 'Surrogate splits are now considered only if they send two or more\\ncases _with non-zero weight_ each way.  For numeric/ordinal\\nvariables the restriction to non-zero weights is new: for\\ncategorical variables this is a new restriction.', 'Surrogate splits which improve only by rounding error over the\\ndefault split are no longer returned.  Where weights and missing\\nvalues are present, the splits component for some of these was not\\nreturned correctly.', 'A fit of class \\'rpart\\' now contains a component for variable\\n‘importance’, which is reported by the summary() method.', 'The text() method gains a minlength argument, like the labels()\\nmethod.  This adds finer control: the default remains pretty =\\nNULL, minlength = 1L.', 'The handling of fits with zero and fractional weights has been\\ncorrected: the results may be slightly different (or even\\nsubstantially different when the proportion of zero weights is\\nlarge).', 'Some memory leaks have been plugged.', 'There is a second vignette, longintro.Rnw, a version of the\\noriginal Mayo Tecnical Report on rpart.', 'Added dataset car90, a corrected version of the S-PLUS dataset\\ncar.all (used with permission).', 'This version does not use paste0{} and so works with R 2.14.x.', 'Merged in a set of Splus code changes that had accumulated at Mayo\\nover the course of a decade. The primary one is a change in how\\nindexing is done in the underlying C code, which leads to a major\\nspeed increase for large data sets.  Essentially, for the lower\\nleaves all our time used to be eaten up by bookkeeping, and this\\nwas replaced by a different approach.  The primary routine also\\nuses .Call{} so as to be more memory efficient.', 'The other major change was an error for asymmetric loss matrices,\\nprompted by a user query.  With L=loss asymmetric, the altered\\npriors were computed incorrectly - they were using L' instead of L.\\nUpshot - the tree would not not necessarily choose optimal splits\\nfor the given loss matrix.  Once chosen, splits were evaluated\\ncorrectly.  The printed “improvement” values are of course the\\nwrong ones as well.  It is interesting that for my little test\\ncase, with L quite asymmetric, the early splits in the tree are\\nunchanged - a good split still looks good.', 'Add the return.all argument to xpred.rpart().', 'Added a set of formal tests, i.e., cases with known answers to\\nwhich we can compare.', 'Add a usercode vignette, explaining how to add user defined\\nsplitting functions.', 'The class method now also returns the node probability.', 'Add the stagec data set, used in some tests.', 'The plot.rpart routine needs to store a value that will be visible\\nto the rpartco routine at a later time.  This is now done in an\\nenvironment in the namespace.', 'Force use of registered symbols in R >= 2.16.0', 'Update Polish translations.', 'Work on message formats.', 'Add Polish translations', 'rpart, rpart.matrix: allow backticks in formulae.', 'tests/backtick.R: regession test', 'src/xval.c: ensure unused code is not compiled in.', 'Change description of margin in ?plot.rpart as suggested by Bill\\nVenables.')), row.names = c(NA, -29L), class = 'data.frame'), 1L); .Internal(shortRowNames(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinshortRowNames_testshortRowNames5_6ad800fa0dc62a99bbb9658d334d1d11");
    }

    @Test
    public void TestrGenBuiltinsign_testsign1_2dcb378f86f461c4f465d16c975454b4() {
        assertEval("argv <- list(29);sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign1_2dcb378f86f461c4f465d16c975454b4");
    }

    @Test
    public void TestrGenBuiltinsign_testsign2_c3c9b9149d413778f2ebed3de9939f5b() {
        assertEval("argv <- list(-29);sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign2_c3c9b9149d413778f2ebed3de9939f5b");
    }

    @Test
    public void TestrGenBuiltinsign_testsign3_c82d822891a0e79eb25523f330206157() {
        assertEval("argv <- list(structure(-29.5, .Names = 'W'));sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign3_c82d822891a0e79eb25523f330206157");
    }

    @Test
    public void TestrGenBuiltinsign_testsign4_21c141e8c61b25cdc4c37206ad8cfbdf() {
        assertEval("argv <- list(c(2, 1.5));sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign4_21c141e8c61b25cdc4c37206ad8cfbdf");
    }

    @Test
    public void TestrGenBuiltinsign_testsign5_2bf716b41bb3841689bfda97fcaebf97() {
        assertEval("argv <- list(structure(c(0.880860525591375, 0.639733585162877, 0.698114489497201, -0.163771828170666, 0.644716815673843, 0.434938037582636, -1.02532598809559, -0.414997803714266, 0.314897800466685, 0.824285322485286, 0.771220667991526, -1.0213685325144, 0.928795080183842, 0.819280413726459, -1.81676447087493, 0.750354069620072, 0.445075757764079, -0.708114061379466, 0.824862990562917, -0.538393491087728, 0.974198118249183, -1.44391305877857, -0.0570136982996023, -0.0628620473044737, 0.00599485749367468, 0.397443892596693, -0.670529694022941, -0.443694007369259, -1.60185734774623, -0.125754544304519, 0.726126214864875, -0.0167895964097286, -0.306643229540329, -0.216330373334122, -0.903891452322388, 0.326172148813803, -0.13510345952301, -0.897613228123322, 0.845413917001047, -0.831631251080141, 0.487109758044019, -2.39537135767952, -1.00899546383701, -0.15086268042785, 0.817762526779461, -0.0500097005975852, 0.489115737630558, -0.570402758036241, 0.837693310865448, 0.128079053272328, -0.543417844555625, -0.372441278809232, 0.0566412271335022, -0.292618377937407, 0.331718074329116, 0.424938499372394, 0.976537923557996, 0.463868773879129, -0.204612235294409, 0.635623103866607, 0.563790796039522, 0.102279312881195, -0.0139544456391161, 0.319200502078835, -0.348934065906413, 0.553375167400346, -0.448280809644608, -0.00983940055010783, -0.259698968965015, 0.919652420667434, -0.47355400612706, -0.135894354949879, -0.0129965646298911, 0.162878599329267, 0.243328472793848, -0.0718304876664265), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76')));sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign5_2bf716b41bb3841689bfda97fcaebf97");
    }

    @Test
    public void TestrGenBuiltinsign_testsign6_08e620ed3159f0d3b387b641f1c3435e() {
        assertEval("argv <- list(structure(c(-Inf, Inf, -Inf), .Dim = 3L, .Dimnames = list(c('73', '312', '674'))));sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign6_08e620ed3159f0d3b387b641f1c3435e");
    }

    @Test
    public void TestrGenBuiltinsign_testsign7_df19c8c79a3139ea3a35d57f6e82e25a() {
        assertEval("argv <- list(c(NA, 2L, 2L));sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign7_df19c8c79a3139ea3a35d57f6e82e25a");
    }

    @Test
    public void TestrGenBuiltinsign_testsign8_d46bea5eb80678041724eb85442691db() {
        assertEval("argv <- list(c(-2.3, -0.9, -0.0666666666666667, 0.275, 0.12, 0.216666666666667, -0.228571428571429, -0.35, -0.188888888888889, -1.77635683940025e-16, 0.0272727272727272, -0.108333333333333, -0.246153846153846));sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign8_d46bea5eb80678041724eb85442691db");
    }

    @Test
    public void TestrGenBuiltinsign_testsign9_07c6bd369d051fbd6e7f91e1513aa1a3() {
        assertEval("argv <- list(numeric(0));sign(argv[[1]]);");
        check("TestrGenBuiltinsign_testsign9_07c6bd369d051fbd6e7f91e1513aa1a3");
    }

    @Test
    public void TestrGenBuiltinsignif_testsignif1_6489c4a389dc9834bdbf297ed8455a7c() {
        assertEval("argv <- list(structure(c(0, NaN, 0, 4.94065645841247e-324), class = 'integer64'));do.call('signif', argv)");
        check("TestrGenBuiltinsignif_testsignif1_6489c4a389dc9834bdbf297ed8455a7c");
    }

    @Test
    public void TestrGenBuiltinsin_testsin1_bc036997586f217ec4ec8287a26889d4() {
        assertEval("argv <- list(c(-6.28318530717959, -6.1261056745001, -5.96902604182061, -5.81194640914112, -5.65486677646163, -5.49778714378214, -5.34070751110265, -5.18362787842316, -5.02654824574367, -4.86946861306418, -4.71238898038469, -4.5553093477052, -4.39822971502571, -4.24115008234622, -4.08407044966673, -3.92699081698724, -3.76991118430775, -3.61283155162826, -3.45575191894877, -3.29867228626928, -3.14159265358979, -2.9845130209103, -2.82743338823081, -2.67035375555132, -2.51327412287183, -2.35619449019234, -2.19911485751286, -2.04203522483337, -1.88495559215388, -1.72787595947439, -1.5707963267949, -1.41371669411541, -1.25663706143592, -1.09955742875643, -0.942477796076938, -0.785398163397448, -0.628318530717959, -0.471238898038469, -0.314159265358979, -0.15707963267949, 0, 0.15707963267949, 0.314159265358979, 0.471238898038469, 0.628318530717959, 0.785398163397448, 0.942477796076938, 1.09955742875643, 1.25663706143592, 1.41371669411541, 1.5707963267949, 1.72787595947439, 1.88495559215388, 2.04203522483337, 2.19911485751286, 2.35619449019234, 2.51327412287183, 2.67035375555133, 2.82743338823081, 2.9845130209103, 3.14159265358979, 3.29867228626928, 3.45575191894877, 3.61283155162826, 3.76991118430775, 3.92699081698724, 4.08407044966673, 4.24115008234622, 4.39822971502571, 4.5553093477052, 4.71238898038469, 4.86946861306418, 5.02654824574367, 5.18362787842316, 5.34070751110265, 5.49778714378214, 5.65486677646163, 5.81194640914112, 5.96902604182061, 6.1261056745001, 6.28318530717959, 6.44026493985908, 6.59734457253857, 6.75442420521805, 6.91150383789754, 7.06858347057704, 7.22566310325652, 7.38274273593601, 7.5398223686155, 7.69690200129499, 7.85398163397448, 8.01106126665397, 8.16814089933346, 8.32522053201295, 8.48230016469244, 8.63937979737193, 8.79645943005142, 8.95353906273091, 9.1106186954104, 9.26769832808989, 9.42477796076938));sin(argv[[1]]);");
        check("TestrGenBuiltinsin_testsin1_bc036997586f217ec4ec8287a26889d4");
    }

    @Test
    public void TestrGenBuiltinsin_testsin4_4efd1ab76c9bc61aebe73d501519c71f() {
        assertEval("argv <- list(c(-1.88495559215388, 0.628318530717959, -2.51327412287183, 5.02654824574367, 0.942477796076938, -2.51327412287183, 1.5707963267949, 2.19911485751286, 1.88495559215388, -0.942477796076938, 4.71238898038469, 1.25663706143592, -1.88495559215388, -6.91150383789755, 3.45575191894877, 0, 0, 2.82743338823081, 2.51327412287183, 1.88495559215388, 2.82743338823081, 2.51327412287183, 0.314159265358979, -6.28318530717959, 1.88495559215388, -0.314159265358979, -0.628318530717959, -4.71238898038469, -1.5707963267949, 1.25663706143592));sin(argv[[1]]);");
        check("TestrGenBuiltinsin_testsin4_4efd1ab76c9bc61aebe73d501519c71f");
    }

    @Test
    public void TestrGenBuiltinsin_testsin6_73cfc09ed0ecddd9cb2025432ac90614() {
        assertEval("argv <- list(c(-0.560475646552213-0.710406563699301i, -0.23017748948328+0.25688370915653i, 1.55870831414912-0.24669187846237i, 0.070508391424576-0.347542599397733i, 0.129287735160946-0.951618567265016i, 1.71506498688328-0.04502772480892i, 0.460916205989202-0.784904469457076i, -1.26506123460653-1.66794193658814i, -0.686852851893526-0.380226520287762i, -0.445661970099958+0.918996609060766i, 1.22408179743946-0.57534696260839i, 0.359813827057364+0.607964322225033i, 0.40077145059405-1.61788270828916i, 0.11068271594512-0.055561965524539i, -0.555841134754075+0.519407203943462i, 1.78691313680308+0.30115336216671i, 0.497850478229239+0.105676194148943i, -1.96661715662964-0.64070600830538i, 0.701355901563686-0.849704346033582i, -0.47279140772793-1.02412879060491i, -1.06782370598685+0.11764659710013i, -0.217974914658295-0.947474614184802i, -1.02600444830724-0.49055744370067i, -0.72889122929114-0.256092192198247i, -0.62503926784926+1.84386200523221i, -1.68669331074241-0.65194990169546i, 0.837787044494525+0.235386572284857i, 0.153373117836515+0.077960849563711i, -1.13813693701195-0.96185663413013i, 1.25381492106993-0.0713080861236i, 0.42646422147681+1.44455085842335i, -0.295071482992271+0.451504053079215i, 0.895125661045022+0.04123292199294i, 0.878133487533042-0.422496832339625i, 0.82158108163749-2.05324722154052i, 0.68864025410009+1.13133721341418i, 0.55391765353759-1.46064007092482i, -0.061911710576722+0.739947510877334i, -0.30596266373992+1.90910356921748i, -0.38047100101238-1.4438931609718i, -0.694706978920513+0.701784335374711i, -0.207917278019599-0.262197489402468i, -1.26539635156826-1.57214415914549i, 2.16895596533851-1.51466765378175i, 1.20796199830499-1.60153617357459i, -1.12310858320335-0.5309065221703i, -0.40288483529908-1.4617555849959i, -0.466655353623219+0.687916772975828i, 0.77996511833632+2.10010894052567i, -0.08336906647183-1.28703047603518i, 0.253318513994755+0.787738847475178i, -0.028546755348703+0.76904224100091i, -0.042870457291316+0.332202578950118i, 1.36860228401446-1.00837660827701i, -0.225770985659268-0.119452606630659i, 1.51647060442954-0.28039533517025i, -1.54875280423022+0.56298953322048i, 0.584613749636069-0.372438756103829i, 0.123854243844614+0.976973386685621i, 0.215941568743973-0.374580857767014i, 0.37963948275988+1.05271146557933i, -0.5023234531093-1.04917700666607i, -0.33320738366942-1.26015524475811i, -1.01857538310709+3.2410399349424i, -1.07179122647558-0.41685758816043i, 0.303528641404258+0.298227591540715i, 0.448209778629426+0.636569674033849i, 0.053004226730504-0.483780625708744i, 0.922267467879738+0.516862044313609i, 2.05008468562714+0.36896452738509i, -0.491031166056535-0.215380507641693i, -2.30916887564081+0.06529303352532i, 1.00573852446226-0.03406725373846i, -0.70920076258239+2.12845189901618i, -0.688008616467358-0.741336096272828i, 1.0255713696967-1.09599626707466i, -0.284773007051009+0.037788399171079i, -1.22071771225454+0.31048074944314i, 0.18130347974915+0.436523478910183i, -0.138891362439045-0.458365332711106i, 0.00576418589989-1.06332613397119i, 0.38528040112633+1.26318517608949i, -0.370660031792409-0.349650387953555i, 0.644376548518833-0.865512862653374i, -0.220486561818751-0.236279568941097i, 0.331781963915697-0.197175894348552i, 1.09683901314935+1.10992028971364i, 0.435181490833803+0.084737292197196i, -0.325931585531227+0.754053785184521i, 1.14880761845109-0.49929201717226i, 0.993503855962119+0.214445309581601i, 0.54839695950807-0.324685911490835i, 0.238731735111441+0.094583528173571i, -0.627906076039371-0.895363357977542i, 1.36065244853001-1.31080153332797i, -0.60025958714713+1.99721338474797i, 2.18733299301658+0.60070882367242i, 1.53261062618519-1.25127136162494i, -0.235700359100477-0.611165916680421i, -1.02642090030678-1.18548008459731i));sin(argv[[1]]);");
        check("TestrGenBuiltinsin_testsin6_73cfc09ed0ecddd9cb2025432ac90614");
    }

    @Test
    public void TestrGenBuiltinsin_testsin7_d46f4bfb8692b20bbe5df43fe244084f() {
        assertEval("argv <- list(Inf);sin(argv[[1]]);");
        check("TestrGenBuiltinsin_testsin7_d46f4bfb8692b20bbe5df43fe244084f");
    }

    @Test
    public void TestrGenBuiltinsinh_testsinh1_469b091771c279b99367edbba7b94d2f() {
        assertEval("argv <- list(FALSE);sinh(argv[[1]]);");
        check("TestrGenBuiltinsinh_testsinh1_469b091771c279b99367edbba7b94d2f");
    }

    @Test
    public void TestrGenBuiltinsinh_testsinh2_0805f93651aa105e4f0b268d3355b3c5() {
        assertEval("argv <- list(c(-3, -2.96984924623116, -2.93969849246231, -2.90954773869347, -2.87939698492462, -2.84924623115578, -2.81909547738693, -2.78894472361809, -2.75879396984925, -2.7286432160804, -2.69849246231156, -2.66834170854271, -2.63819095477387, -2.60804020100502, -2.57788944723618, -2.54773869346734, -2.51758793969849, -2.48743718592965, -2.4572864321608, -2.42713567839196, -2.39698492462312, -2.36683417085427, -2.33668341708543, -2.30653266331658, -2.27638190954774, -2.24623115577889, -2.21608040201005, -2.18592964824121, -2.15577889447236, -2.12562814070352, -2.09547738693467, -2.06532663316583, -2.03517587939699, -2.00502512562814, -1.9748743718593, -1.94472361809045, -1.91457286432161, -1.88442211055276, -1.85427135678392, -1.82412060301508, -1.79396984924623, -1.76381909547739, -1.73366834170854, -1.7035175879397, -1.67336683417085, -1.64321608040201, -1.61306532663317, -1.58291457286432, -1.55276381909548, -1.52261306532663, -1.49246231155779, -1.46231155778894, -1.4321608040201, -1.40201005025126, -1.37185929648241, -1.34170854271357, -1.31155778894472, -1.28140703517588, -1.25125628140704, -1.22110552763819, -1.19095477386935, -1.1608040201005, -1.13065326633166, -1.10050251256281, -1.07035175879397, -1.04020100502513, -1.01005025125628, -0.979899497487437, -0.949748743718593, -0.919597989949749, -0.889447236180905, -0.859296482412061, -0.829145728643216, -0.798994974874372, -0.768844221105528, -0.738693467336684, -0.708542713567839, -0.678391959798995, -0.648241206030151, -0.618090452261307, -0.587939698492463, -0.557788944723618, -0.527638190954774, -0.49748743718593, -0.467336683417086, -0.437185929648241, -0.407035175879397, -0.376884422110553, -0.346733668341709, -0.316582914572864, -0.28643216080402, -0.256281407035176, -0.226130653266332, -0.195979899497488, -0.165829145728643, -0.135678391959799, -0.105527638190955, -0.0753768844221105, -0.0452261306532664, -0.0150753768844223, 0.0150753768844218, 0.0452261306532664, 0.0753768844221105, 0.105527638190955, 0.135678391959799, 0.165829145728643, 0.195979899497488, 0.226130653266332, 0.256281407035176, 0.28643216080402, 0.316582914572864, 0.346733668341709, 0.376884422110553, 0.407035175879397, 0.437185929648241, 0.467336683417085, 0.49748743718593, 0.527638190954774, 0.557788944723618, 0.587939698492462, 0.618090452261306, 0.648241206030151, 0.678391959798995, 0.708542713567839, 0.738693467336683, 0.768844221105527, 0.798994974874372, 0.829145728643216, 0.85929648241206, 0.889447236180904, 0.919597989949748, 0.949748743718593, 0.979899497487437, 1.01005025125628, 1.04020100502513, 1.07035175879397, 1.10050251256281, 1.13065326633166, 1.1608040201005, 1.19095477386935, 1.22110552763819, 1.25125628140704, 1.28140703517588, 1.31155778894472, 1.34170854271357, 1.37185929648241, 1.40201005025126, 1.4321608040201, 1.46231155778894, 1.49246231155779, 1.52261306532663, 1.55276381909548, 1.58291457286432, 1.61306532663317, 1.64321608040201, 1.67336683417085, 1.7035175879397, 1.73366834170854, 1.76381909547739, 1.79396984924623, 1.82412060301507, 1.85427135678392, 1.88442211055276, 1.91457286432161, 1.94472361809045, 1.9748743718593, 2.00502512562814, 2.03517587939698, 2.06532663316583, 2.09547738693467, 2.12562814070352, 2.15577889447236, 2.18592964824121, 2.21608040201005, 2.24623115577889, 2.27638190954774, 2.30653266331658, 2.33668341708543, 2.36683417085427, 2.39698492462312, 2.42713567839196, 2.4572864321608, 2.48743718592965, 2.51758793969849, 2.54773869346734, 2.57788944723618, 2.60804020100502, 2.63819095477387, 2.66834170854271, 2.69849246231156, 2.7286432160804, 2.75879396984925, 2.78894472361809, 2.81909547738693, 2.84924623115578, 2.87939698492462, 2.90954773869347, 2.93969849246231, 2.96984924623116, 3));sinh(argv[[1]]);");
        check("TestrGenBuiltinsinh_testsinh2_0805f93651aa105e4f0b268d3355b3c5");
    }

    @Test
    public void TestrGenBuiltinsink_testsink1_1f2f54c86246d0e139afd22163c76df3() {
        assertEval("argv <- list(structure(2L, class = c('terminal', 'connection')), FALSE, TRUE, FALSE); .Internal(sink(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinsink_testsink1_1f2f54c86246d0e139afd22163c76df3");
    }

    @Test
    public void TestrGenBuiltinsink_testsink3_0d11da5ed60ecce0a15b0a8857faf2eb() {
        assertEval("argv <- list(-1L, FALSE, FALSE, FALSE); .Internal(sink(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinsink_testsink3_0d11da5ed60ecce0a15b0a8857faf2eb");
    }

    @Test
    public void TestrGenBuiltinsinknumber_testsinknumber1_8599c5fbb4d4e97c1b0e82b6b0732efc() {
        assertEval("argv <- list(FALSE); .Internal(sink.number(argv[[1]]))");
        check("TestrGenBuiltinsinknumber_testsinknumber1_8599c5fbb4d4e97c1b0e82b6b0732efc");
    }

    @Test
    public void TestrGenBuiltinsolve_testsolve1_bb5b765a844f4949ff6bf0c46e4b4651() {
        assertEval("argv <- structure(list(a = structure(c(1, 0.5, 0, 0, 0, 0.5,     1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0,     0, 0.5, 1), .Dim = c(5L, 5L))), .Names = 'a');do.call('solve', argv)");
        check("TestrGenBuiltinsolve_testsolve1_bb5b765a844f4949ff6bf0c46e4b4651");
    }

    @Test
    public void TestrGenBuiltinsort_testsort14_f165b750593324d78377df58a2d0333e() {
        assertEval("argv <- list(c(2.17292368994844e-311, 4.34584737989688e-311, 8.69169475979376e-311, 1.73833895195875e-310, 3.4766779039175e-310, 6.953355807835e-310, 1.390671161567e-309, 2.781342323134e-309, 5.562684646268e-309, 1.1125369292536e-308, 2.2250738585072e-308, 4.4501477170144e-308, 8.90029543402881e-308, 1.78005908680576e-307, 2.2250738585072e-303, 2.2250738585072e-298, 1.79769313486232e+298, 1.79769313486232e+303, 2.24711641857789e+307, 4.49423283715579e+307, 8.98846567431158e+307, 1.79769313486232e+308, Inf, -Inf, Inf), FALSE); .Internal(sort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsort_testsort14_f165b750593324d78377df58a2d0333e");
    }

    @Test
    public void TestrGenBuiltinsort_testsort18_23c6e76999a9c14d3e2ff24c51f2143f() {
        assertEval("argv <- structure(list(x = structure(c(8092, 8092, 8048, 8093,     8066), origin = structure(c(1, 1, 1970), .Names = c('month',     'day', 'year')), class = c('dates', 'times'))), .Names = 'x');do.call('sort', argv)");
        check("TestrGenBuiltinsort_testsort18_23c6e76999a9c14d3e2ff24c51f2143f");
    }

    @Test
    public void TestrGenBuiltinsort_testsort6_dc22613c6235ffad38daeae76c3318d4() {
        assertEval("argv <- list(c(8.41842881182087, 0.633658419345243, 0.55014003120899, 0.264811823419969, 2.45100807149625e-16, 1.4406901715276e-16), TRUE); .Internal(sort(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsort_testsort6_dc22613c6235ffad38daeae76c3318d4");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit14_d5f5ee939bde53323df5d127bf51a728() {
        assertEval("argv <- list(structure(c(123.48457192908, 239.059434652297, 290.055338401838, 18.397281603467, 6.57585722655537, 0.670931786731845, 0.178466148156965, 0.245410750178149, 0.363167328274208, 0.194808268742596, 2172.67583033103, 8.91763605923317e+38), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = '1', class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit14_d5f5ee939bde53323df5d127bf51a728");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit15_894df85ef61c740797eff5749f2f7e96() {
        assertEval("argv <- list(character(0), structure(integer(0), .Label = character(0), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit15_894df85ef61c740797eff5749f2f7e96");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit16_9303f5e309a42a081e329ed5895ee7a1() {
        assertEval("argv <- list(structure(c(47.432, 12.482), .Names = c('(Intercept)', 'group2')), structure(1:2, .Label = c('0', '1'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit16_9303f5e309a42a081e329ed5895ee7a1");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit19_48018aa2c6bcbf964501ba64840f800e() {
        assertEval("argv <- list(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 26.3011774151224, 2.485452029809, 7.15323925419351, 16.761819986295, 10.2645644917686, 0.758337657329402, 29.4935619829433, 12.665970880074, 2.27782676164194e-08, 0.115876279686418), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L), .Label = c('1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23', '25', '27', '29', '31', '33', '35', '37', '39', '41'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit19_48018aa2c6bcbf964501ba64840f800e");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit2_77b862a4544358c0eeebb5e4cfdacb12() {
        assertEval("argv <- list(structure(c(-1.13864415195445, 0.574433648632919, 0.61125743366192, 0.291104607198021, 1.44367450704693, 0.408616385050392, -0.252815027721455, 0.73544465026571, -0.711029326417947, -0.611820918993561, -0.963259276248408, -0.28935033673839, -0.482346616963731, 0.575284398820533, 0.0664802498883062, 0.0889008730409177, -0.527009741835806, -0.572160487726669, 0.458433701366337, 0.0259549922279207, 0.79246010222197, 0.200856719794408, 0.681708382019133, 1.24959713166139, 2.28504683598586, 0.885201117877485, 0.275047494865858, 0.0611635446204713, -0.226340664609402, -0.701634984067551, -1.36331112409512, -0.470720710127998, 0.0116712292760789, 0.680960771805182, 1.25010637890252, -0.168484448953506, -0.703880448859559, -0.342493773069341, -0.359950801091045, 0.187018301421814, 0.332611568778467, 0.418088885897922, 1.52526747601546, 1.23881025318897, 1.97893910443604, 1.67980257496383, -0.0423836378777035, -0.085940264442189, 0.0751591419566941, 1.33615888669544, 1.29143414265875, 0.211686019646981, 0.107754613497605, -0.842122877395922, -0.363550334633855, -1.04260396788242, -1.00216202750311, -0.725219786582336, -0.702075395338802, -0.0588517433215815, 0.676181221812652, 0.606054389584641, -0.0722001122493283, -0.565579974058951, -1.50420998542363, -1.38835023347894, -1.6387526999868, -1.22317617387598, -2.6439685322602, -1.50311594814139, 0.58539278534518, 0.476423420506994, -0.229810354321508, -0.669629539423225, -0.500767918117353, -1.30780681405878, -0.0658147956438969, 0.619743292251259, 0.947409254626009, 0.137968713284014, -0.0705143536229389, -0.316245167388448, 0.423768217540825, -1.77132723836955, 0.437524374017483, 1.05217040293853, 1.29145821945076, 0.189519814277623, 0.405463210651828, -1.10579240546022, 0.470126971026959, 1.3013241742778, 1.57690948154138, 0.836753145709701, -0.0990436481848584, 0.305059193206195, 0.722542224965483, 0.497020187014643, -0.798519685959293, -0.162044448918511, -0.268976403560686, 0.471344909208507, 1.07960447064393, 0.816448434674936, 1.01857006703316, -0.19352270657549, 0.193745914189151, -0.0118346974247015, 0.515110447770272, 1.29117007883295, 0.484844437955959, 0.357506193819553, -1.95817055695569, -1.62102859205691, -2.13900473718215, -2.19173201733318, -1.86372596557808, -1.18864210270607, -1.19890597040604, 0.432503235072499, 0.594410727524479, 1.21432538936706, 2.15795981275539, 1.31528364302187, 0.38422055227912, 0.786869292659675, -0.703717985086569, -0.535651668024763, 0.34627858116184, 0.537117318247469, 0.901014803953916, 1.2151594352426, 0.827351473348557, -0.682186392255085, -1.33342351753519, -1.26893821314864, -1.4632463728941, -1.64736130434257, -1.21073183651285, -0.643396605364174), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140')), structure(c(9L, 9L, 9L, 9L, 9L, 9L, 9L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 10L, 10L, 10L, 10L, 10L, 10L, 10L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 13L, 13L, 13L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L, 14L, 14L, 16L, 16L, 16L, 16L, 16L, 16L, 16L, 17L, 17L, 17L, 17L, 17L, 17L, 17L, 19L, 19L, 19L, 19L, 19L, 19L, 19L, 15L, 15L, 15L, 15L, 15L, 15L, 15L, 11L, 11L, 11L, 11L, 11L, 11L, 11L, 18L, 18L, 18L, 18L, 18L, 18L, 18L, 20L, 20L, 20L, 20L, 20L, 20L, 20L, 12L, 12L, 12L, 12L, 12L, 12L, 12L), .Label = c('10', '8', '2', '6', '3', '5', '9', '7', '1', '4', '17', '20', '11', '12', '16', '13', '14', '18', '15', '19'), class = c('ordered', 'factor'))); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit2_77b862a4544358c0eeebb5e4cfdacb12");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit3_2110887bdc67a33cdb74f2d637eba0d9() {
        assertEval("argv <- list(structure(c(1034.46153846154, 480.076923076923, 504.692307692308, 480.076923076923, 0, 0, 0, 0, 480.076923076923, 517.230769230769, 444.307692307692, 819.846153846154, 945.230769230769, 542.769230769231, 0, 0, 0, 1824.30769230769, 444.307692307692, 912.153846153846, 0, 0, 1514.07692307692, 0, 936, 0), .Dim = 26L, .Dimnames = list(c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2'))), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('1', '2'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit3_2110887bdc67a33cdb74f2d637eba0d9");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit4_9ebbe941bcd9318354ba4b8b72328408() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 1.48219693752374e-323, 0, 0, 0, 0, 0), .Dim = c(1L, 12L), .Dimnames = list(NULL, c('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))), structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = '1', class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit4_9ebbe941bcd9318354ba4b8b72328408");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit5_9a320b61d6ec695f1a620a875b64d959() {
        assertEval("argv <- list(c(1, 3, 5, 7, 8, 3, 5, NA, 4, 5, 7, 9), structure(c(8L, 6L, 3L, 2L, NA, 5L, 1L, 4L, 7L, 3L, NA, NA), .Label = c('0', '2', '6', '8', '15', '22', '29', '35'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit5_9a320b61d6ec695f1a620a875b64d959");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit7_c8635a0f41744cd3be693fd1f670d24b() {
        assertEval("argv <- list(structure(c('Sex/(Age + Eth * Lrn)', 'Sex + Sex:Age + Sex:Eth + Sex:Lrn + Sex:Eth:Lrn + Sex:Age:Lrn', 'Sex + Sex:Age + Sex:Eth + Sex:Lrn + Sex:Eth:Lrn + Sex:Age:Lrn + Sex:Age:Eth + Sex:Age:Eth:Lrn', '1.597991', '1.686899', '1.928360', '132', '128', '118', '-1063.025', '-1055.398', '-1039.324', '', '1 vs 2', '2 vs 3', '', ' 4', '10', '', ' 7.627279', '16.073723', '', '0.10622602', '0.09754136'), .Dim = c(3L, 8L)), structure(c(1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 7L, 7L, 7L, 8L, 8L, 8L), .Label = c('1', '2', '3', '4', '5', '6', '7', '8'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit7_c8635a0f41744cd3be693fd1f670d24b");
    }

    @Test
    public void TestrGenBuiltinsplit_testsplit9_1b57cbe8f915a71b63e9b370cb6ce3da() {
        assertEval("argv <- list(structure(c(NA, NA), .Dim = 1:2), structure(1:2, .Label = c('1', '2'), class = 'factor')); .Internal(split(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsplit_testsplit9_1b57cbe8f915a71b63e9b370cb6ce3da");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf1_616a46b4d84336c3102cffdafbe6120b() {
        assertEval("argv <- list('%s is not TRUE', 'identical(fxy, c(1, 2, 3))'); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf1_616a46b4d84336c3102cffdafbe6120b");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf10_6172749ae549a836aadb4dd013b21de5() {
        assertEval("argv <- list('%.0f%% said yes (out of a sample of size %.0f)', 66.666, 3); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsprintf_testsprintf10_6172749ae549a836aadb4dd013b21de5");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf11_d23addb4a3134230d0dc4278eb1922e5() {
        assertEval("argv <- list('%1$d %1$x %1$X', 0:15); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf11_d23addb4a3134230d0dc4278eb1922e5");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf12_f4d7713d7b5a3f4a6b1a93394506cd3c() {
        assertEval("argv <- list('%03o', 1:255); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf12_f4d7713d7b5a3f4a6b1a93394506cd3c");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf13_478f180082d0ac4a879d1a33ff328f6b() {
        assertEval("argv <- list('%d y value <= 0 omitted from logarithmic plot', 1L); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf13_478f180082d0ac4a879d1a33ff328f6b");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf14_79114a50f7b2d99eaf7f123f770951a5() {
        assertEval("argv <- list('%o', 1:255); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf14_79114a50f7b2d99eaf7f123f770951a5");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf15_abe68cd9419b74554ccc9eefb2a5e000() {
        assertEval("argv <- list('%s-class.Rd', structure('foo', .Names = 'foo')); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf15_abe68cd9419b74554ccc9eefb2a5e000");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf16_f2c00ebf15d0dde06e0056b870d0fbe6() {
        assertEval("argv <- list('checkRd: (%d) %s', -3, 'evalSource.Rd:157: Unnecessary braces at ‘{\\'sourceEnvironment\\'}’'); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsprintf_testsprintf16_f2c00ebf15d0dde06e0056b870d0fbe6");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf17_100d8c9855a2bd879eea0aa999086568() {
        assertEval("argv <- list('tools:::check_compiled_code(\\'%s\\')', '/home/lzhao/hg/r-instrumented/library/foreign'); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf17_100d8c9855a2bd879eea0aa999086568");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf18_7c78033017935e48884a106c97df1044() {
        assertEval("argv <- list('%5g', structure(c(18, 18, 0, 14, 4, 12, 12, 0, 4, 8, 26, 23, 3, 18, 5, 8, 5, 3, 0, 5, 21, 0, 21, 0, 0), .Dim = c(5L, 5L), .Dimnames = list(NULL, c('', '', '', '', '')))); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf18_7c78033017935e48884a106c97df1044");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf19_8449b4ebb95f08588a64017df0462c09() {
        assertEval("argv <- list('%G', 3.14159265358979e-06); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf19_8449b4ebb95f08588a64017df0462c09");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf2_6f783f16dea8a9ca3ce36d08b5e20bd2() {
        assertEval("argv <- list('%1.0f', 3.14159265358979); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf2_6f783f16dea8a9ca3ce36d08b5e20bd2");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf3_4500fd7dacd66c3f6fa9f34111311bc6() {
        assertEval("argv <- list('min 10-char string '%10s'', c('a', 'ABC', 'and an even longer one')); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf3_4500fd7dacd66c3f6fa9f34111311bc6");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf4_4ba398000579f50256b550139ded0f38() {
        assertEval("argv <- list('%o', integer(0)); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf4_4ba398000579f50256b550139ded0f38");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf5_64e1e861b692ffee9902ef9fbea83743() {
        assertEval("argv <- list('%*s', 1, ''); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsprintf_testsprintf5_64e1e861b692ffee9902ef9fbea83743");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf6_42afa56096704b74cdced3cc2cefb49d() {
        assertEval("argv <- list('p,L,S = (%2d,%2d,%2d): ', TRUE, TRUE, FALSE); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinsprintf_testsprintf6_42afa56096704b74cdced3cc2cefb49d");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf7_a11bbe5e012da496a5b842776046cc72() {
        assertEval("argv <- list('p,L,S = (%2d,%2d,%2d): ', TRUE, FALSE, NA); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinsprintf_testsprintf7_a11bbe5e012da496a5b842776046cc72");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf8_06b6d94104e933b38193dbd93001fbf6() {
        assertEval("argv <- list('plot_%02g', 1L); .Internal(sprintf(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinsprintf_testsprintf8_06b6d94104e933b38193dbd93001fbf6");
    }

    @Test
    public void TestrGenBuiltinsprintf_testsprintf9_5e5b031de333d0ce9390a4a857c270e9() {
        assertEval("argv <- list('tools:::.createExdotR(\\'%s\\', \\'%s\\', silent = TRUE, use_gct = %s, addTiming = %s)', structure('KernSmooth', .Names = 'Package'), '/home/lzhao/hg/r-instrumented/library/KernSmooth', FALSE, FALSE); .Internal(sprintf(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinsprintf_testsprintf9_5e5b031de333d0ce9390a4a857c270e9");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt10_c5fe6f580d109ac9f509c00e53c05393() {
        assertEval("argv <- list(c(6L, 5L, 4L, 3L, 2L, 1L, 0L, -1L, -2L, -3L, -4L));sqrt(argv[[1]]);");
        check("TestrGenBuiltinsqrt_testsqrt10_c5fe6f580d109ac9f509c00e53c05393");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt11_9908a933b068d0de08d8bc00c66b9f2d() {
        assertEval("argv <- list(0+1i);sqrt(argv[[1]]);");
        check("TestrGenBuiltinsqrt_testsqrt11_9908a933b068d0de08d8bc00c66b9f2d");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt3_fb6096a75af46e592011add4412ad05a() {
        assertEval("argv <- list(-17+0i);sqrt(argv[[1]]);");
        check("TestrGenBuiltinsqrt_testsqrt3_fb6096a75af46e592011add4412ad05a");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt7_300e338c3cadecc8daa738b60f0e5d37() {
        assertEval("argv <- list(structure(1:10, id = 'test 1', class = structure('withId', package = '.GlobalEnv')));sqrt(argv[[1]]);");
        check("TestrGenBuiltinsqrt_testsqrt7_300e338c3cadecc8daa738b60f0e5d37");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt8_dcf2d8f698d67251623afa20dbd58a94() {
        assertEval("argv <- list(structure(c(660, 543, 711, 500, 410, 309, 546, 351, 269, 203, 370, 193, 181, 117, 243, 136, 117, 87, 154, 84), .Dim = 4:5, .Dimnames = list(c('Rural Male', 'Rural Female', 'Urban Male', 'Urban Female'), c('70-74', '65-69', '60-64', '55-59', '50-54'))));sqrt(argv[[1]]);");
        check("TestrGenBuiltinsqrt_testsqrt8_dcf2d8f698d67251623afa20dbd58a94");
    }

    @Test
    public void TestrGenBuiltinsqrt_testsqrt9_9eb7089691129bd4fb7824790db35d24() {
        assertEval("argv <- list(c(6L, 5L, 4L, 3L, 2L, 1L, 0L, NA, NA, NA, NA));sqrt(argv[[1]]);");
        check("TestrGenBuiltinsqrt_testsqrt9_9eb7089691129bd4fb7824790db35d24");
    }

    @Test
    public void TestrGenBuiltinstoragemodeassign__teststoragemodeassign_1_a8f6d4d1d3211bbf0ae6c4655d297c96() {
        assertEval("argv <- structure(list(structure(c(0, 1, 2), .Dim = c(3L, 1L)),     value = 'integer'), .Names = c('', 'value'));do.call('storage.mode<-', argv)");
        check("TestrGenBuiltinstoragemodeassign__teststoragemodeassign_1_a8f6d4d1d3211bbf0ae6c4655d297c96");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime1_4c7df73e00bf777919be527eb390825b() {
        assertEval("argv <- list('2008-04-22 09:45', '%Y-%m-%d', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime1_4c7df73e00bf777919be527eb390825b");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime10_6dc9bd093153d9606f4e578147b11345() {
        assertEval("argv <- list(c('1937/01/01', '1916/01/01', '1913/01/01', '1927/01/01', '1947/01/01', '1913/01/01', '1917/01/01', '1923/01/01', '1921/01/01', '1926/01/01', '1920/01/01', '1915/01/01', '1914/01/01', '1914/01/01', '1914/01/01', '1919/01/01', '1948/01/01', '1911/01/01', '1909/01/01', '1913/01/01', '1925/01/01', '1926/01/01', '1910/01/01', '1917/01/01', '1936/01/01', '1938/01/01', '1960/01/01', '1915/01/01', '1919/01/01', '1924/01/01', '1914/01/01', '1905/01/01', '1921/01/01', '1929/01/01', '1926/01/01', '1921/01/01', '1908/01/01', '1928/01/01', '1919/01/01', '1921/01/01', '1925/01/01', '1934/01/01', '1927/01/01', '1928/01/01', '1934/01/01', '1922/01/01', '1923/01/01', '1915/01/01', '1934/01/01', '1925/01/01', '1922/01/01', '1930/01/01', '1924/01/01', '1923/01/01', '1919/01/01', '1932/01/01', '1930/01/01', '1923/01/01', '1930/01/01', '1922/01/01', '1919/01/01', '1932/01/01', '1939/01/01', '1923/01/01', '1920/01/01', '1919/01/01', '1952/01/01', '1927/01/01', '1924/01/01', '1919/01/01', '1925/01/01', '1945/01/01', '1916/01/01', '1943/01/01', '1920/01/01', '1920/01/01', '1931/01/01', '1924/01/01', '1919/01/01', '1926/01/01', '1920/01/01', '1942/01/01', '1919/01/01', '1930/01/01', '1925/01/01', '1924/01/01', '1926/01/01', '1918/01/01', '1922/01/01', '1921/01/01', '1925/01/01', '1928/01/01', '1925/01/01', '1929/01/01', '1933/01/01', '1947/01/01', '1950/01/01', '1945/01/01', '1924/01/01', '1939/01/01', '1924/01/01', '1933/01/01', '1928/01/01'), '%Y/%m/%d', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime10_6dc9bd093153d9606f4e578147b11345");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime2_9b83a552c56f01b311df72a542a966a5() {
        assertEval("argv <- list(character(0), '%X', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime2_9b83a552c56f01b311df72a542a966a5");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime3_c2b5ec483173d04d6fcc728697c0c4dc() {
        assertEval("argv <- list('1970-01-01', '%Y-%m-%d %H:%M', 'GMT'); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime3_c2b5ec483173d04d6fcc728697c0c4dc");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime4_eba0c25175f23eebff50129ca141e271() {
        assertEval("argv <- list('2007-11-06', '%Y-%m-%d', 'GMT'); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime4_eba0c25175f23eebff50129ca141e271");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime5_1490fa43b30ec006bc9b16cd90ea411c() {
        assertEval("argv <- list('1970-01-01', '%Y-%m-%d', 'GMT'); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime5_1490fa43b30ec006bc9b16cd90ea411c");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime6_8c4c142eca3d59458c4be09920bda7a8() {
        assertEval("argv <- list(c('2007-11-06', NA), '%Y-%m-%d', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime6_8c4c142eca3d59458c4be09920bda7a8");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime7_0fa492444ae1aeaf2cdc57996aef2f9e() {
        assertEval("argv <- list(c('20010101', NA, NA, '20041026'), '%Y%m%d', 'GMT'); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime7_0fa492444ae1aeaf2cdc57996aef2f9e");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime8_12cdb7fc9655b4169babb42de4ea6e4a() {
        assertEval("argv <- list('2002-02-02 02:02', '%Y-%m-%d %H:%M', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime8_12cdb7fc9655b4169babb42de4ea6e4a");
    }

    @Test
    public void TestrGenBuiltinstrptime_teststrptime9_14974f52a3b2e223c70762d0ba1f17fa() {
        assertEval("argv <- list(c('1890/01/01', '1891/01/01', '1892/01/01', '1893/01/01', '1894/01/01', '1895/01/01'), '%Y/%m/%d', ''); .Internal(strptime(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinstrptime_teststrptime9_14974f52a3b2e223c70762d0ba1f17fa");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit10_575c83bfde53fe0914403b6d440f0f0f() {
        assertEval("argv <- list('A shell of class documentation has been written to the file './myTst2/man/DocLink-class.Rd'.\\n', '[ \\t\\n]', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit10_575c83bfde53fe0914403b6d440f0f0f");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit11_c85911589c86839478dfc0ab22a937a6() {
        assertEval("argv <- list(structure('pkgB', .Names = 'name'), '_', TRUE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit11_c85911589c86839478dfc0ab22a937a6");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit12_5de2449138882559ccc5a074c2e9851f() {
        assertEval("argv <- list('Keywords:  utilities ', '\\n[ \\t\\n]*\\n', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit12_5de2449138882559ccc5a074c2e9851f");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit14_415059cf37554e7268040a36e0a17582() {
        assertEval("argv <- list(c('* Edit the help file skeletons in 'man', possibly combining help files for multiple functions.', '* Edit the exports in 'NAMESPACE', and add necessary imports.', '* Put any C/C++/Fortran code in 'src'.', '* If you have compiled code, add a useDynLib() directive to 'NAMESPACE'.', '* Run R CMD build to build the package tarball.', '* Run R CMD check to check the package tarball.', '', 'Read \\'Writing R Extensions\\' for more information.'), '\\n[ \\t\\n]*\\n', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit14_415059cf37554e7268040a36e0a17582");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit15_677977956e5e5291bc42c15a6228a24a() {
        assertEval("argv <- list('  \\036  Complex arithmetic sometimes warned incorrectly about       producing NAs when there were NaNs in the input.', '[ \\t\\n]', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit15_677977956e5e5291bc42c15a6228a24a");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit16_2ea3c44cb1145cff944fd528beddda05() {
        assertEval("argv <- list(structure(c('1', '2', '3', '4', '5', '1', '2', '3', '4', '5'), .Dim = 10L), '.', TRUE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit16_2ea3c44cb1145cff944fd528beddda05");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit3_0d816b41818b324d788a52f13a14ca03() {
        assertEval("argv <- list('  \\036  isSeekable() now returns FALSE on connections       which have non-default encoding.  Although documented to       record if ‘in principle’ the connection supports seeking,       it seems safer to report FALSE when it may not work.', '[ \\t\\n]', FALSE, TRUE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit3_0d816b41818b324d788a52f13a14ca03");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit4_654c2292a6f7bb31c116d50e55ac8864() {
        assertEval("argv <- list('Keywords:  device ', '[ \\t\\n]', FALSE, TRUE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit4_654c2292a6f7bb31c116d50e55ac8864");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit5_ced7f7dd6433c12941275eda3aa577a8() {
        assertEval("argv <- list('R CMD check now gives an error if the R code in a vignette fails to\\nrun, unless this is caused by a missing package.\\n\\n\\036R CMD check now unpacks tarballs in the same way as R CMD INSTALL,\\nincluding making use of the environment variable R_INSTALL_TAR to\\noverride the default behaviour.\\n\\n\\036R CMD check performs additional code analysis of package startup\\nfunctions, and notifies about incorrect argument lists and\\n(incorrect) calls to functions which modify the search path or\\ninappropriately generate messages.\\n\\n\\036R CMD check now also checks compiled code for symbols corresponding\\nto functions which might terminate R or write to stdout/stderr\\ninstead of the console.\\n\\n\\036R CMD check now uses a pdf() device when checking examples (rather\\nthan postscript()).\\n\\n\\036R CMD check now checks line-endings of makefiles and C/C++/Fortran\\nsources in subdirectories of src as well as in src itself.\\n\\n\\036R CMD check now reports as a NOTE what look like methods documented\\nwith their full names even if there is a namespace and they are\\nexported.  In almost all cases they are intended to be used only as\\nmethods and should use the \\\\method markup.  In the other rare cases\\nthe recommended form is to use a function such as coefHclust which\\nwould not get confused with a method, document that and register it\\nin the NAMESPACE file by s3method(coef, hclust, coefHclust).\\n\\n\\036The default for the environment variable _R_CHECK_COMPACT_DATA2_ is\\nnow true: thus if using the newer forms of compression introduced\\nin R 2.10.0 would be beneficial is now checked (by default).\\n\\n\\036Reference output for a vignette can be supplied when checking a\\npackage by R CMD check: see ‘Writing R Extensions’.\\n\\n\\036R CMD Rd2dvi allows the use of LaTeX package inputenx rather than\\ninputenc: the value of the environment variable RD2DVI_INPUTENC is\\nused.  (LaTeX package inputenx is an optional install which\\nprovides greater coverage of the UTF-8 encoding.)\\n\\n\\036Rscript on a Unix-alike now accepts file names containing spaces\\n(provided these are escaped or quoted in the shell).\\n\\n\\036R CMD build on a Unix-alike (only) now tries to preserve dates on\\nfiles it copies from its input directory.  (This was the\\nundocumented behaviour prior to R 2.13.0.)', '\\n\\036', TRUE, FALSE, FALSE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit5_ced7f7dd6433c12941275eda3aa577a8");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit6_a320151be4f63c10bc8a16907fea43d9() {
        assertEval("argv <- list(structure('Formal Methods and Classes', .Names = 'Title'), '\\n\\n', TRUE, FALSE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit6_a320151be4f63c10bc8a16907fea43d9");
    }

    @Test
    public void TestrGenBuiltinstrsplit_teststrsplit8_027f322702ffd271952f87c9dd4247bf() {
        assertEval("argv <- list('The \\\\usage entries for S3 methods should use the \\\\method markup and not their full name.\\n', '\\n', FALSE, FALSE, TRUE); .Internal(strsplit(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]]))");
        check("TestrGenBuiltinstrsplit_teststrsplit8_027f322702ffd271952f87c9dd4247bf");
    }

    @Test
    public void TestrGenBuiltinstrtoi_teststrtoi3_bcac6ad0b7bf34c4b9590e8a13249944() {
        assertEval("argv <- list(c('0xff', '077', '123'), 0L); .Internal(strtoi(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtoi_teststrtoi3_bcac6ad0b7bf34c4b9590e8a13249944");
    }

    @Test
    public void TestrGenBuiltinstrtoi_teststrtoi4_dcd5e78ea79fa15d211f9734f3c225e8() {
        assertEval("argv <- list('1.3', 16L); .Internal(strtoi(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtoi_teststrtoi4_dcd5e78ea79fa15d211f9734f3c225e8");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim1_98dcf016763f0a8af2564185c4f61440() {
        assertEval("argv <- list(c('\\'time\\'', '\\'status\\''), 128); .Internal(strtrim(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtrim_teststrtrim1_98dcf016763f0a8af2564185c4f61440");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim2_c68d207f987c1402c8eb1953a9b3b36c() {
        assertEval("argv <- list('2014-03-17 14:47:20', 8); .Internal(strtrim(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtrim_teststrtrim2_c68d207f987c1402c8eb1953a9b3b36c");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim3_c73b90d22523ecaef2b271fcc06b5533() {
        assertEval("argv <- list(c('\\'1\\'', '\\'2\\'', NA), 128); .Internal(strtrim(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtrim_teststrtrim3_c73b90d22523ecaef2b271fcc06b5533");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim4_93ecb5198282d51ba5933e860ae3ef15() {
        assertEval("argv <- list(c('\\'gray17\\'', '\\'grey17\\''), 128); .Internal(strtrim(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtrim_teststrtrim4_93ecb5198282d51ba5933e860ae3ef15");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim5_eacf1c8782bf006d75594e9b44d8461a() {
        assertEval("argv <- list(structure('\\'@CRAN@\\'', .Names = 'CRAN'), 128); .Internal(strtrim(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtrim_teststrtrim5_eacf1c8782bf006d75594e9b44d8461a");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim6_136a6c56cb2710373560578e3ee15b23() {
        assertEval("argv <- list('FALSE', FALSE); .Internal(strtrim(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtrim_teststrtrim6_136a6c56cb2710373560578e3ee15b23");
    }

    @Test
    public void TestrGenBuiltinstrtrim_teststrtrim8_8fdaa44e7c9944acc05b068ca7ede50a() {
        assertEval("argv <- list(character(0), 40L); .Internal(strtrim(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinstrtrim_teststrtrim8_8fdaa44e7c9944acc05b068ca7ede50a");
    }

    @Test
    public void TestrGenBuiltinstructure_teststructure1_9df14c1c2e0a59dd73ee3393acc49b1b() {
        assertEval("argv <- structure(list(.Data = structure(c(1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L,     1L, 2L, 3L, 4L, 5L, 1L, 2L, 3L, 4L, 5L), .Label = c('13',     '14', '15', '16', '17'), class = 'factor'), .Label = c('13',     '14', '15', '16', '17'), class = 'factor'), .Names = c('.Data',     '.Label', 'class'));do.call('structure', argv)");
        check("TestrGenBuiltinstructure_teststructure1_9df14c1c2e0a59dd73ee3393acc49b1b");
    }

    @Test
    public void TestrGenBuiltinsub_testsub10_8d6b7828b958f5447e6d29a1c78b3799() {
        assertEval("argv <- list('^[[:space:]]*([[:alnum:].]+).*$', '\\\\1', structure('MASS', .Names = 'Suggests'), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub10_8d6b7828b958f5447e6d29a1c78b3799");
    }

    @Test
    public void TestrGenBuiltinsub_testsub12_18c19215e492e38ebc1c19bacd9268cb() {
        assertEval("argv <- list('.* : ', '', structure('Error in rnorm(2, c(1, NA)) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(2, c(1, NA)))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub12_18c19215e492e38ebc1c19bacd9268cb");
    }

    @Test
    public void TestrGenBuiltinsub_testsub13_2d0b9be4f1cde89df2f4aa084df2c101() {
        assertEval("argv <- list('.* : ', '', structure('Error in rexp(2, numeric()) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rexp(2, numeric()))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub13_2d0b9be4f1cde89df2f4aa084df2c101");
    }

    @Test
    public void TestrGenBuiltinsub_testsub14_2d46a7cae6093ef511acd63305fecfbb() {
        assertEval("argv <- list('.* : ', '', structure('Error in rnorm(2, numeric()) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(2, numeric()))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub14_2d46a7cae6093ef511acd63305fecfbb");
    }

    @Test
    public void TestrGenBuiltinsub_testsub15_efadebb02fe28ae700fc046ae4ceef86() {
        assertEval("argv <- list('.* : ', '', structure('Error in rnorm(1, sd = Inf) : (converted from warning) NAs produced\\n', class = 'try-error', condition = structure(list(message = '(converted from warning) NAs produced', call = quote(rnorm(1, sd = Inf))), .Names = c('message', 'call'), class = c('simpleError', 'error', 'condition'))), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub15_efadebb02fe28ae700fc046ae4ceef86");
    }

    @Test
    public void TestrGenBuiltinsub_testsub17_80f9e2840d0a867ca64b619296c7d243() {
        assertEval("argv <- list('^msgstr[[:blank:]]+[\\'](.*)[\\'][[:blank:]]*$', '\\\\1', 'msgstr \\'<U+043E><U+0442><U+0440><U+0438><U+0446><U+0430><U+0442><U+0435><U+043B><U+044C><U+043D><U+044B><U+0435> <U+0432><U+0435><U+0441><U+0430> <U+043D><U+0435> <U+0440><U+0430><U+0437><U+0440><U+0435><U+0448><U+0435><U+043D><U+044B>\\'', FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub17_80f9e2840d0a867ca64b619296c7d243");
    }

    @Test
    public void TestrGenBuiltinsub_testsub18_65cd5531a1824a8a9854980cb648276a() {
        assertEval("argv <- list('.*Content-Type:[^\\\\]*charset=([^\\\\[:space:]]*)[[:space:]]*\\\\\\\\n.*', '\\\\1', 'Project-Id-Version: lattice 0.20-10\\\\nReport-Msgid-Bugs-To: bugs@r-project.org\\\\nPOT-Creation-Date: 2012-03-10 14:42\\\\nPO-Revision-Date: 2012-08-31 16:36+0100\\\\nLast-Translator: \\305\\201ukasz Daniel <lukasz.daniel@gmail.com>\\\\nLanguage-Team: \\305\\201ukasz Daniel <lukasz.daniel@gmail.com>\\\\nLanguage: pl_PL\\\\nMIME-Version: 1.0\\\\nContent-Type: text/plain; charset=UTF-8\\\\nContent-Transfer-Encoding: 8bit\\\\nPlural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\\\\nX-Poedit-SourceCharset: iso-8859-1\\\\n', FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub18_65cd5531a1824a8a9854980cb648276a");
    }

    @Test
    public void TestrGenBuiltinsub_testsub2_9dfdd6946d4cae513af36f5b752dcfa8() {
        assertEval("argv <- list('[b-e]', '.', c('The', 'licenses', 'for', 'most', 'software', 'are', 'designed', 'to', 'take', 'away', 'your', 'freedom', 'to', 'share', 'and', 'change', 'it.', '', 'By', 'contrast,', 'the', 'GNU', 'General', 'Public', 'License', 'is', 'intended', 'to', 'guarantee', 'your', 'freedom', 'to', 'share', 'and', 'change', 'free', 'software', '--', 'to', 'make', 'sure', 'the', 'software', 'is', 'free', 'for', 'all', 'its', 'users'), FALSE, TRUE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub2_9dfdd6946d4cae513af36f5b752dcfa8");
    }

    @Test
    public void TestrGenBuiltinsub_testsub3_5184c6e4c24fe9cf68e3e65fe28f1dbd() {
        assertEval("argv <- list('%bm', 'http://www.bioconductor.org', c('@CRAN@', 'http://www.stats.ox.ac.uk/pub/RWin', '%bm/packages/%v/bioc', '%bm/packages/%v/data/annotation', '%bm/packages/%v/data/experiment', '%bm/packages/%v/extra', 'http://www.omegahat.org/R', 'http://R-Forge.R-project.org', 'http://www.rforge.net'), FALSE, FALSE, TRUE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub3_5184c6e4c24fe9cf68e3e65fe28f1dbd");
    }

    @Test
    public void TestrGenBuiltinsub_testsub4_051701130f7d75c599bc06e0668a0b59() {
        assertEval("argv <- list('^  \\036 ', '\\036', c('', '  \\036 Merged in a set of Splus code changes that had accumulated at Mayo', '    over the course of a decade. The primary one is a change in how', '    indexing is done in the underlying C code, which leads to a major', '    speed increase for large data sets.  Essentially, for the lower', '    leaves all our time used to be eaten up by bookkeeping, and this', '    was replaced by a different approach.  The primary routine also', '    uses .Call{} so as to be more memory efficient.', '', '  \\036 The other major change was an error for asymmetric loss matrices,', '    prompted by a user query.  With L=loss asymmetric, the altered', '    priors were computed incorrectly - they were using L' instead of L.', '    Upshot - the tree would not not necessarily choose optimal splits', '    for the given loss matrix.  Once chosen, splits were evaluated', '    correctly.  The printed “improvement” values are of course the', '    wrong ones as well.  It is interesting that for my little test', '    case, with L quite asymmetric, the early splits in the tree are', '    unchanged - a good split still looks good.', '', '  \\036 Add the return.all argument to xpred.rpart().', '', '  \\036 Added a set of formal tests, i.e., cases with known answers to', '    which we can compare.', '', '  \\036 Add a usercode vignette, explaining how to add user defined', '    splitting functions.', '', '  \\036 The class method now also returns the node probability.', '', '  \\036 Add the stagec data set, used in some tests.', '', '  \\036 The plot.rpart routine needs to store a value that will be visible', '    to the rpartco routine at a later time.  This is now done in an', '    environment in the namespace.', ''), FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub4_051701130f7d75c599bc06e0668a0b59");
    }

    @Test
    public void TestrGenBuiltinsub_testsub6_3bb9daceb957e4b41ea3686268c1c93b() {
        assertEval("argv <- list('\\'', '\\\\\\'', '\\\\method{as.dist}{default}', FALSE, FALSE, TRUE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub6_3bb9daceb957e4b41ea3686268c1c93b");
    }

    @Test
    public void TestrGenBuiltinsub_testsub7_ed68bd000c7a9a48ad26c645f528cc2f() {
        assertEval("argv <- list('(\\\\w)(\\\\w*)(\\\\w)', '\\\\U\\\\1\\\\E\\\\2\\\\U\\\\3', 'useRs may fly into JFK or laGuardia', FALSE, TRUE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub7_ed68bd000c7a9a48ad26c645f528cc2f");
    }

    @Test
    public void TestrGenBuiltinsub_testsub8_040dbe0982c43a6d8971fb226842136a() {
        assertEval("argv <- list('^(msgstr)\\\\[([[:digit:]]+)\\\\].*$', '\\\\1\\\\\\\\[\\\\2\\\\\\\\]', 'msgstr[0] \\'%d ligne de poids nul non comptabilis<U+00E9>e\\'', FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub8_040dbe0982c43a6d8971fb226842136a");
    }

    @Test
    public void TestrGenBuiltinsub_testsub9_96541202337bd6721b51541d4ce00edc() {
        assertEval("argv <- list('[[:space:]]*$', '', 'identical() has a new argument, ignore.environment, used when\\ncomparing functions (with default FALSE as before).\\n\\n\\036There is a new option, options(CBoundsCheck=), which controls how\\n.C() and .Fortran() pass arguments to compiled code.  If true\\n(which can be enabled by setting the environment variable\\nR_C_BOUNDS_CHECK to yes), raw, integer, double and complex\\narguments are always copied, and checked for writing off either end\\nof the array on return from the compiled code (when a second copy\\nis made).  This also checks individual elements of character\\nvectors passed to .C().\\n\\nThis is not intended for routine use, but can be very helpful in\\nfinding segfaults in package code.\\n\\n\\036In layout(), the limits on the grid size have been raised (again).\\n\\n\\036New simple provideDimnames() utility function.\\n\\n\\036Where methods for length() return a double value which is\\nrepresentable as an integer (as often happens for package Matrix),\\nthis is converted to an integer.\\n\\n\\036Matrix indexing of dataframes by two-column numeric indices is now\\nsupported for replacement as well as extraction.\\n\\n\\036setNames() now has a default for its object argument, useful for a\\ncharacter result.\\n\\n\\036StructTS() has a revised additive constant in the loglik component\\nof the result: the previous definition is returned as the loglik0\\ncomponent.  However, the help page has always warned of a lack of\\ncomparability of log-likelihoods for non-stationary models.\\n(Suggested by Jouni Helske.)\\n\\n\\036The logic in aggregate.formula() has been revised.  It is now\\npossible to use a formula stored in a variable; previously, it had\\nto be given explicitly in the function call.\\n\\n\\036install.packages() has a new argument quiet to reduce the amount of\\noutput shown.\\n\\n\\036Setting an element of the graphics argument lwd to a negative or\\ninfinite value is now an error.  Lines corresponding to elements\\nwith values NA or NaN are silently omitted.\\n\\nPreviously the behaviour was device-dependent.\\n\\n\\036Setting graphical parameters cex, col, lty, lwd and pch in par()\\nnow requires a length-one argument.  Previously some silently took\\nthe first element of a longer vector, but not always when\\ndocumented to do so.\\n\\n\\036Sys.which() when used with inputs which would be unsafe in a shell\\n(e.g. absolute paths containing spaces) now uses appropriate\\nquoting.\\n\\n\\036as.tclObj() has been extended to handle raw vectors.  Previously,\\nit only worked in the other direction.  (Contributed by Charlie\\nFriedemann, PR#14939.)\\n\\n\\036New functions cite() and citeNatbib() have been added, to allow\\ngeneration of in-text citations from \\'bibentry\\' objects.  A cite()\\nfunction may be added to bibstyle() environments.\\n\\n\\036A sort() method has been added for \\'bibentry\\' objects.\\n\\n\\036The bibstyle() function now defaults to setting the default\\nbibliography style. The getBibstyle() function has been added to\\nreport the name of the current default style.\\n\\n\\036scatter.smooth() now has an argument lpars to pass arguments to\\nlines().\\n\\n\\036pairs() has a new log argument, to allow some or all variables to\\nbe plotted on logarithmic scale.  (In part, wish of PR#14919.)\\n\\n\\036split() gains a sep argument.\\n\\n\\036termplot() does a better job when given a model with interactions\\n(and no longer attempts to plot interaction terms).\\n\\n\\036The parser now incorporates code from Romain Francois' parser\\npackage, to support more detailed computation on the code, such as\\nsyntax highlighting, comment-based documentation, etc.  Functions\\ngetParseData() and getParseText() access the data.\\n\\n\\036There is a new function rep_len() analogous to rep.int() for when\\nspeed is required (and names are not).\\n\\n\\036The undocumented use rep(NULL, length.out = n) for n > 0 (which\\nreturns NULL) now gives a warning.\\n\\n\\036demo() gains an encoding argument for those packages with non-ASCII\\ndemos: it defaults to the package encoding where there is one.\\n\\n\\036strwrap() converts inputs with a marked encoding to the current\\nlocale: previously it made some attempt to pass through as bytes\\ninputs invalid in the current locale.\\n\\n\\036Specifying both rate and scale to [dpqr]gamma is a warning (if they\\nare essentially the same value) or an error.\\n\\n\\036merge() works in more cases where the data frames include matrices.\\n(Wish of PR#14974.)\\n\\n\\036optimize() and uniroot() no longer use a shared parameter object\\nacross calls.  (nlm(), nlminb() and optim() with numerical\\nderivatives still do, as documented.)\\n\\n\\036The all.equal() method for date-times is now documented: times are\\nregarded as equal (by default) if they differ by up to 1 msec.\\n\\n\\036duplicated() and unique() gain a nmax argument which can be used to\\nmake them much more efficient when it is known that there are only\\na small number of unique entries.  This is done automatically for\\nfactors.\\n\\n\\036Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),\\nrsignrank() and rwilcox() now return integer (not double) vectors.\\nThis halves the storage requirements for large simulations.\\n\\n\\036sort(), sort.int() and sort.list() now use radix sorting for\\nfactors of less than 100,000 levels when method is not supplied.\\nSo does order() if called with a single factor, unless na.last =\\nNA.\\n\\n\\036diag() as used to generate a diagonal matrix has been re-written in\\nC for speed and less memory usage.  It now forces the result to be\\nnumeric in the case diag(x) since it is said to have ‘zero\\noff-diagonal entries’.\\n\\n\\036backsolve() (and forwardsolve()) are now internal functions, for\\nspeed and support for large matrices.\\n\\n\\036More matrix algebra functions (e.g. chol() and solve()) accept\\nlogical matrices (and coerce to numeric).\\n\\n\\036sample.int() has some support for n >= 2^31: see its help for the\\nlimitations.\\n\\nA different algorithm is used for (n, size, replace = FALSE, prob =\\nNULL) for n > 1e7 and size <= n/2.  This is much faster and uses\\nless memory, but does give different results.\\n\\n\\036approxfun() and splinefun() now return a wrapper to an internal\\nfunction in the stats namespace rather than a .C() or .Call() call.\\nThis is more likely to work if the function is saved and used in a\\ndifferent session.\\n\\n\\036The functions .C(), .Call(), .External() and .Fortran() now give an\\nerror (rather than a warning) if called with a named first\\nargument.\\n\\n\\036Sweave() by default now reports the locations in the source file(s)\\nof each chunk.\\n\\n\\036clearPushBack() is now a documented interface to a long-existing\\ninternal call.\\n\\n\\036aspell() gains filters for R code, Debian Control Format and\\nmessage catalog files, and support for R level dictionaries.  In\\naddition, package utils now provides functions\\naspell_package_R_files() and aspell_package_C_files() for spell\\nchecking R and C level message strings in packages.\\n\\n\\036bibentry() gains some support for “incomplete” entries with a\\ncrossref field.\\n\\n\\036gray() and gray.colors() finally allow alpha to be specified.\\n\\n\\036monthplot() gains parameters to control the look of the reference\\nlines.  (Suggestion of Ian McLeod.)\\n\\n\\036Added support for new %~% relation (“is distributed as”) in\\nplotmath.\\n\\n\\036domain = NA is accepted by gettext() and ngettext(), analogously to\\nstop() etc.\\n\\n\\036termplot() gains a new argument plot = FALSE which returns\\ninformation to allow the plots to be modified for use as part of\\nother plots, but does not plot them.  (Contributed by Terry\\nTherneau, PR#15076.)\\n\\n\\036quartz.save(), formerly an undocumented part of R.app, is now\\navailable to copy a device to a quartz() device.  dev.copy2pdf()\\noptionally does this for PDF output: quartz.save() defaults to PNG.\\n\\n\\036The default method of pairs() now allows text.panel = NULL and the\\nuse of <foo>.panel = NULL is now documented.\\n\\n\\036setRefClass() and getRefClass() now return class generator\\nfunctions, similar to setClass(), but still with the reference\\nfields and methods as before (suggestion of Romain Francois).\\n\\n\\036New functions bitwNot(), bitwAnd(), bitwOr() and bitwXor(), using\\nthe internal interfaces previously used for classes \\'octmode\\' and\\n\\'hexmode\\'.\\n\\nAlso bitwShiftL() and bitwShiftR() for shifting bits in elements of\\ninteger vectors.\\n\\n\\036New option \\'deparse.cutoff\\' to control the deparsing of language\\nobjects such as calls and formulae when printing.  (Suggested by a\\ncomment of Sarah Goslee.)\\n\\n\\036colors() gains an argument distinct.\\n\\n\\036New demo(colors) and demo(hclColors), with utility functions.\\n\\n\\036list.files() (aka dir()) gains a new optional argument no.. which\\nallows to exclude \\'.\\' and \\'..\\' from listings.\\n\\n\\036Multiple time series are also of class \\'matrix\\'; consequently,\\nhead(), e.g., is more useful.\\n\\n\\036encodeString() preserves UTF-8 marked encodings.  Thus if factor\\nlevels are marked as UTF-8 an attempt is made to print them in\\nUTF-8 in RGui on Windows.\\n\\n\\036readLines() and scan() (and hence read.table()) in a UTF-8 locale\\nnow discard a UTF-8 byte-order-mark (BOM).  Such BOMs are allowed\\nbut not recommended by the Unicode Standard: however Microsoft\\napplications can produce them and so they are sometimes found on\\nwebsites.\\n\\nThe encoding name \\'UTF-8-BOM\\' for a connection will ensure that a\\nUTF-8 BOM is discarded.\\n\\n\\036mapply(FUN, a1, ..) now also works when a1 (or a further such\\nargument) needs a length() method (which the documented arguments\\nnever do).  (Requested by Hervé Pagès; with a patch.)\\n\\n\\036.onDetach() is supported as an alternative to .Last.lib.  Unlike\\n.Last.lib, this does not need to be exported from the package's\\nnamespace.\\n\\n\\036The srcfile argument to parse() may now be a character string, to\\nbe used in error messages.\\n\\n\\036The format() method for ftable objects gains a method argument,\\npropagated to write.ftable() and print(), allowing more compact\\noutput, notably for LaTeX formatting, thanks to Marius Hofert.\\n\\n\\036The utils::process.events() function has been added to trigger\\nimmediate event handling.\\n\\n\\036Sys.which() now returns NA (not \\'\\') for NA inputs (related to\\nPR#15147).\\n\\n\\036The print() method for class \\'htest\\' gives fewer trailing spaces\\n(wish of PR#15124).\\n\\nAlso print output from HoltWinters(), nls() and others.\\n\\n\\036loadNamespace() allows a version specification to be given, and\\nthis is used to check version specifications given in the Imports\\nfield when a namespace is loaded.\\n\\n\\036setClass() has a new argument, slots, clearer and less ambiguous\\nthan representation.  It is recommended for future code, but should\\nbe back-compatible.  At the same time, the allowed slot\\nspecification is slightly more general.  See the documentation for\\ndetails.\\n\\n\\036mget() now has a default for envir (the frame from which it is\\ncalled), for consistency with get() and assign().\\n\\n\\036close() now returns an integer status where available, invisibly.\\n(Wish of PR#15088.)\\n\\n\\036The internal method of tar() can now store paths too long for the\\nustar format, using the (widely supported) GNU extension.  It can\\nalso store long link names, but these are much less widely\\nsupported.  There is support for larger files, up to the ustar\\nlimit of 8GB.\\n\\n\\036Local reference classes have been added to package methods.  These\\nare a technique for avoiding unneeded copying of large components\\nof objects while retaining standard R functional behavior.  See\\n?LocalReferenceClasses.\\n\\n\\036untar() has a new argument restore_times which if false (not the\\ndefault) discards the times in the tarball.  This is useful if they\\nare incorrect (some tarballs submitted to CRAN have times in a\\nlocal timezone or many years in the past even though the standard\\nrequired them to be in UTC).\\n\\n\\036replayplot() cannot (and will not attempt to) replay plots recorded\\nunder R < 3.0.0.  It may crash the R session if an attempt is made\\nto replay plots created in a different build of R >= 3.0.0.\\n\\n\\036Palette changes get recorded on the display list, so replaying\\nplots (including when resizing screen devices and using dev.copy())\\nwill work better when the palette is changed during a plot.\\n\\n\\036chol(pivot = TRUE) now defaults to LAPACK, not LINPACK.\\n\\n\\036The parse() function has a new parameter keep.source, which\\ndefaults to options(\\'keep.source\\').\\n\\n\\036Profiling via Rprof() now optionally records information at the\\nstatement level, not just the function level.\\n\\n\\036The Rprof() function now quotes function names in in its output\\nfile on Windows, to be consistent with the quoting in Unix.\\n\\n\\036Profiling via Rprof() now optionally records information about time\\nspent in GC.\\n\\n\\036The HTML help page for a package now displays non-vignette\\ndocumentation files in a more accessible format.\\n\\n\\036To support options(stringsAsFactors = FALSE), model.frame(),\\nmodel.matrix() and replications() now automatically convert\\ncharacter vectors to factors without a warning.\\n\\n\\036The print method for objects of class \\'table\\' now detects tables\\nwith 0-extents and prints the results as, e.g., < table of extent 0\\nx 1 x 2 >. (Wish of PR#15198.)\\n\\n\\036Deparsing involving calls to anonymous functions and has been made\\ncloser to reversible by the addition of extra parentheses.\\n\\n\\036The function utils::packageName() has been added as a lightweight\\nversion of methods::getPackageName().\\n\\n\\036find.package(lib.loc = NULL) now treats loaded namespaces\\npreferentially in the same way as attached packages have been for a\\nlong time.\\n\\n\\036In Windows, the Change Directory dialog now defaults to the current\\nworking directory, rather than to the last directory chosen in that\\ndialog.\\n\\n\\036available.packages() gains a \\'license/restricts_use\\' filter which\\nretains only packages for which installation can proceed solely\\nbased on packages which are guaranteed not to restrict use.\\n\\n\\036New check_packages_in_dir() function in package tools for\\nconveniently checking source packages along with their reverse\\ndependencies.\\n\\n\\036R's completion mechanism has been improved to handle help requests\\n(starting with a question mark).  In particular, help prefixes are\\nnow supported, as well as quoted help topics.  To support this,\\ncompletion inside quotes are now handled by R by default on all\\nplatforms.\\n\\n\\036The memory manager now allows the strategy used to balance garbage\\ncollection and memory growth to be controlled by setting the\\nenvironment variable R_GC_MEM_GROW. See ?Memory for more details.\\n\\n\\036(‘For experts only’, as the introductory manual says.)  The use of\\nenvironment variables R_NSIZE and R_VSIZE to control the initial (=\\nminimum) garbage collection trigger for number of cons cels and\\nsize of heap has been restored: they can be overridden by the\\ncommand-line options --min-nsize and --min-vsize; see ?Memory.\\n\\n\\036On Windows, the device name for bitmap devices as reported by\\n.Device and .Devices no longer includes the file name.  This is for\\nconsistency with other platforms and was requested by the lattice\\nmaintainer.\\n\\nwin.metafile() still uses the file name: the exact form is used by\\npackage tkrplot.\\n\\n\\036set.seed(NULL) re-initializes .Random.seed as done at the beginning\\nof the session if not already set.  (Suggestion of Bill Dunlap.)\\n\\n\\036The breaks argument in hist.default() can now be a function that\\nreturns the breakpoints to be used (previously it could only return\\nthe suggested number of breakpoints).\\n\\n\\036File share/licenses/licenses.db has some clarifications, especially\\nas to which variants of ‘BSD’ and ‘MIT’ is intended and how to\\napply them to packages.  The problematic licence ‘Artistic-1.0’ has\\nbeen removed.\\n', FALSE, FALSE, FALSE, FALSE); .Internal(sub(argv[[1]], argv[[2]], argv[[3]], argv[[4]], argv[[5]], argv[[6]], argv[[7]]))");
        check("TestrGenBuiltinsub_testsub9_96541202337bd6721b51541d4ce00edc");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset1_2965b748a3e24b276173eb4aa9f23391() {
        assertEval("argv <- list(structure(list(`Resid. Df` = c(4, 0), `Resid. Dev` = c(5.12914107700115, 7.54951656745095e-15), Df = c(NA, 4), Deviance = c(NA, 5.12914107700114), Rao = c(NA, 5.17320176026795)), .Names = c('Resid. Df', 'Resid. Dev', 'Df', 'Deviance', 'Rao'), row.names = c('1', '2'), class = 'data.frame'), 5L);.subset(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset_testsubset1_2965b748a3e24b276173eb4aa9f23391");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset10_0f1e10c13d753a93338a20f89ac50bd8() {
        assertEval("argv <- list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 1L, class = 'data.frame'), 1L);.subset(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset_testsubset10_0f1e10c13d753a93338a20f89ac50bd8");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset14_3e137112463eb901bb1219dd118598af() {
        assertEval("argv <- list(structure(list(size = 1056, isdir = FALSE, mode = structure(420L, class = 'octmode'), mtime = structure(1393948130.23894, class = c('POSIXct', 'POSIXt')), ctime = structure(1393948130.23894, class = c('POSIXct', 'POSIXt')), atime = structure(1395074550.46596, class = c('POSIXct', 'POSIXt')), uid = 1001L, gid = 1001L, uname = 'roman', grname = 'roman'), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = '/home/roman/r-instrumented/library/grid/R/grid'), 'mtime');.subset(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset_testsubset14_3e137112463eb901bb1219dd118598af");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset19_f7de8f46eb70ec4fe3564d345d0d8173() {
        assertEval("argv <- list(structure(list(x = 1:3, y = structure(4:6, .Dim = c(3L, 1L), class = 'AsIs'), z = structure(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'), .Dim = c(3L, 3L), class = 'AsIs')), .Names = c('x', 'y', 'z'), row.names = c(NA, -3L), class = 'data.frame'), 'z');.subset(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset_testsubset19_f7de8f46eb70ec4fe3564d345d0d8173");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset21_3ea4ae9f745074681927670ddfa477f7() {
        assertEval("argv <- list(structure(list(z = c(-2.97525101631257, -2.48489962337717, -1.99157511113426, -1.4958325959814, -0.998253002608536, -0.499437269286478, 0, 0.499437269286499, 0.998253002608553, 1.49583259598141, 1.99157511113428, 2.48489962337718, 2.97525101631258), par.vals = structure(c(3.29998649934118, 3.26341935258893, 3.22450701705249, 3.18319718928165, 3.13944811066026, 3.09322935890527, 3.04452243772342, 2.99332114068265, 2.93963167421501, 2.88347253461377, 2.824874144162, 2.76387826147581, 2.70053719000543, -0.454255272277595, -0.454255272277596, -0.454255272277596, -0.454255272277598, -0.454255272277597, -0.454255272277596, -0.454255272277594, -0.454255272277597, -0.454255272277596, -0.454255272277596, -0.454255272277597, -0.454255272277596, -0.454255272277597, -0.292987124681473, -0.292987124681473, -0.292987124681474, -0.292987124681475, -0.292987124681474, -0.292987124681474, -0.292987124681473, -0.292987124681475, -0.292987124681474, -0.292987124681474, -0.292987124681474, -0.292987124681474, -0.292987124681474, -0.255464061617756, -0.218896914865511, -0.179984579329071, -0.138674751558221, -0.0949256729368359, -0.0487069211818519, 1.33790930192987e-15, 0.0512012970407721, 0.104890763508413, 0.161049903109653, 0.219648293561426, 0.280644176247611, 0.34398524771799, -0.599449309335745, -0.49954109111312, -0.399632872890496, -0.299724654667872, -0.199816436445247, -0.099908218222623, 1.42108546079721e-15, 0.0999082182226258, 0.19981643644525, 0.299724654667875, 0.399632872890499, 0.499541091113123, 0.599449309335748), .Dim = c(13L, 5L), .Dimnames = list(NULL, c('(Intercept)', 'outcome2', 'outcome3', 'treatment2', 'treatment3')))), .Names = c('z', 'par.vals'), row.names = c(NA, 13L), class = 'data.frame'), 'par.vals');.subset(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset_testsubset21_3ea4ae9f745074681927670ddfa477f7");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset23_7dd505f506360b4d0915877332a75dec() {
        assertEval("argv <- list(structure(list(Fertility = c(80.2, 83.1, 92.5, 85.8, 76.9), Agriculture = c(17, 45.1, 39.7, 36.5, 43.5), Examination = c(15L, 6L, 5L, 12L, 17L), Education = c(12L, 9L, 5L, 7L, 15L)), .Names = c('Fertility', 'Agriculture', 'Examination', 'Education'), row.names = c('Courtelary', 'Delemont', 'Franches-Mnt', 'Moutier', 'Neuveville'), class = 'data.frame'), 'Ferti');.subset(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset_testsubset23_7dd505f506360b4d0915877332a75dec");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset24_92aceae97074dc2ec6a77699c130b52c() {
        assertEval("argv <- list(structure(list(size = 131, isdir = FALSE, mode = structure(436L, class = 'octmode'), mtime = structure(1386583148.91412, class = c('POSIXct', 'POSIXt')), ctime = structure(1386583148.91712, class = c('POSIXct', 'POSIXt')), atime = structure(1386583149.16512, class = c('POSIXct', 'POSIXt')), uid = 501L, gid = 501L, uname = 'lzhao', grname = 'lzhao'), .Names = c('size', 'isdir', 'mode', 'mtime', 'ctime', 'atime', 'uid', 'gid', 'uname', 'grname'), class = 'data.frame', row.names = 'startup.Rs'), 'mtime');.subset(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset_testsubset24_92aceae97074dc2ec6a77699c130b52c");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset26_afea6c42a340536107e6bf57e8eb6669() {
        assertEval("argv <- structure(list(x = structure(list(Ozone = c(41L, 36L,     12L, 18L, NA, 28L, 23L, 19L, 8L, NA, 7L, 16L, 11L, 14L, 18L,     14L, 34L, 6L, 30L, 11L, 1L, 11L, 4L, 32L, NA, NA, NA, 23L,     45L, 115L, 37L, NA, NA, NA, NA, NA, NA, 29L, NA, 71L, 39L,     NA, NA, 23L, NA, NA, 21L, 37L, 20L, 12L, 13L, NA, NA, NA,     NA, NA, NA, NA, NA, NA, NA, 135L, 49L, 32L, NA, 64L, 40L,     77L, 97L, 97L, 85L, NA, 10L, 27L, NA, 7L, 48L, 35L, 61L,     79L, 63L, 16L, NA, NA, 80L, 108L, 20L, 52L, 82L, 50L, 64L,     59L, 39L, 9L, 16L, 78L, 35L, 66L, 122L, 89L, 110L, NA, NA,     44L, 28L, 65L, NA, 22L, 59L, 23L, 31L, 44L, 21L, 9L, NA,     45L, 168L, 73L, NA, 76L, 118L, 84L, 85L, 96L, 78L, 73L, 91L,     47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L,     18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L,     18L, 20L), Solar.R = c(190L, 118L, 149L, 313L, NA, NA, 299L,     99L, 19L, 194L, NA, 256L, 290L, 274L, 65L, 334L, 307L, 78L,     322L, 44L, 8L, 320L, 25L, 92L, 66L, 266L, NA, 13L, 252L,     223L, 279L, 286L, 287L, 242L, 186L, 220L, 264L, 127L, 273L,     291L, 323L, 259L, 250L, 148L, 332L, 322L, 191L, 284L, 37L,     120L, 137L, 150L, 59L, 91L, 250L, 135L, 127L, 47L, 98L, 31L,     138L, 269L, 248L, 236L, 101L, 175L, 314L, 276L, 267L, 272L,     175L, 139L, 264L, 175L, 291L, 48L, 260L, 274L, 285L, 187L,     220L, 7L, 258L, 295L, 294L, 223L, 81L, 82L, 213L, 275L, 253L,     254L, 83L, 24L, 77L, NA, NA, NA, 255L, 229L, 207L, 222L,     137L, 192L, 273L, 157L, 64L, 71L, 51L, 115L, 244L, 190L,     259L, 36L, 255L, 212L, 238L, 215L, 153L, 203L, 225L, 237L,     188L, 167L, 197L, 183L, 189L, 95L, 92L, 252L, 220L, 230L,     259L, 236L, 259L, 238L, 24L, 112L, 237L, 224L, 27L, 238L,     201L, 238L, 14L, 139L, 49L, 20L, 193L, 145L, 191L, 131L,     223L), Wind = c(7.4, 8, 12.6, 11.5, 14.3, 14.9, 8.6, 13.8,     20.1, 8.6, 6.9, 9.7, 9.2, 10.9, 13.2, 11.5, 12, 18.4, 11.5,     9.7, 9.7, 16.6, 9.7, 12, 16.6, 14.9, 8, 12, 14.9, 5.7, 7.4,     8.6, 9.7, 16.1, 9.2, 8.6, 14.3, 9.7, 6.9, 13.8, 11.5, 10.9,     9.2, 8, 13.8, 11.5, 14.9, 20.7, 9.2, 11.5, 10.3, 6.3, 1.7,     4.6, 6.3, 8, 8, 10.3, 11.5, 14.9, 8, 4.1, 9.2, 9.2, 10.9,     4.6, 10.9, 5.1, 6.3, 5.7, 7.4, 8.6, 14.3, 14.9, 14.9, 14.3,     6.9, 10.3, 6.3, 5.1, 11.5, 6.9, 9.7, 11.5, 8.6, 8, 8.6, 12,     7.4, 7.4, 7.4, 9.2, 6.9, 13.8, 7.4, 6.9, 7.4, 4.6, 4, 10.3,     8, 8.6, 11.5, 11.5, 11.5, 9.7, 11.5, 10.3, 6.3, 7.4, 10.9,     10.3, 15.5, 14.3, 12.6, 9.7, 3.4, 8, 5.7, 9.7, 2.3, 6.3,     6.3, 6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7,     14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6,     9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), Temp = c(67L,     72L, 74L, 62L, 56L, 66L, 65L, 59L, 61L, 69L, 74L, 69L, 66L,     68L, 58L, 64L, 66L, 57L, 68L, 62L, 59L, 73L, 61L, 61L, 57L,     58L, 57L, 67L, 81L, 79L, 76L, 78L, 74L, 67L, 84L, 85L, 79L,     82L, 87L, 90L, 87L, 93L, 92L, 82L, 80L, 79L, 77L, 72L, 65L,     73L, 76L, 77L, 76L, 76L, 76L, 75L, 78L, 73L, 80L, 77L, 83L,     84L, 85L, 81L, 84L, 83L, 83L, 88L, 92L, 92L, 89L, 82L, 73L,     81L, 91L, 80L, 81L, 82L, 84L, 87L, 85L, 74L, 81L, 82L, 86L,     85L, 82L, 86L, 88L, 86L, 83L, 81L, 81L, 81L, 82L, 86L, 85L,     87L, 89L, 90L, 90L, 92L, 86L, 86L, 82L, 80L, 79L, 77L, 79L,     76L, 78L, 78L, 77L, 72L, 75L, 79L, 81L, 86L, 88L, 97L, 94L,     96L, 94L, 91L, 92L, 93L, 93L, 87L, 84L, 80L, 78L, 75L, 73L,     81L, 76L, 77L, 71L, 71L, 78L, 67L, 76L, 68L, 82L, 64L, 71L,     81L, 69L, 63L, 70L, 77L, 75L, 76L, 68L), Month = c(5L, 5L,     5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,     5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 6L,     6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,     6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L,     7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,     7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,     8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L,     8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L,     8L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,     9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L,     9L), Day = c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L,     12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L,     24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L,     6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L,     19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L,     1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L,     15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L,     27L, 28L, 29L, 30L, 31L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L,     9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L,     21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 1L,     2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L,     15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L,     27L, 28L, 29L, 30L)), .Names = c('Ozone', 'Solar.R', 'Wind',     'Temp', 'Month', 'Day'), class = 'data.frame', row.names = c(NA,     -153L)), cames = c('x', ''));do.call('subset', argv)");
        check("TestrGenBuiltinsubset_testsubset26_afea6c42a340536107e6bf57e8eb6669");
    }

    @Test
    public void TestrGenBuiltinsubset_testsubset6_63769bbae2a01b9b38264fe69aa8585b() {
        assertEval("argv <- list(structure(list(surname = structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), nationality = structure(c(1L, 2L, 2L, 3L, 3L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(1L, 1L, 1L, 1L, 2L, 1L), .Label = c('no', 'yes'), class = 'factor'), title = structure(c(3L, 6L, 7L, 4L, 2L, 5L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, NA, NA, NA, NA, 1L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c(NA, -6L), class = 'data.frame'), -1);.subset(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset_testsubset6_63769bbae2a01b9b38264fe69aa8585b");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset212_5bbcd4f192754d4aa470bd81083731a2() {
        assertEval("argv <- list(structure(list(Res.Df = c(20, 21), RSS = c(652424.52183908, 658770.746755654), Df = c(NA, -1), `Sum of Sq` = c(NA, -6346.22491657443), F = c(NA, 0.194542807762205), `Pr(>F)` = c(NA, 0.663893424608742)), .Names = c('Res.Df', 'RSS', 'Df', 'Sum of Sq', 'F', 'Pr(>F)'), row.names = c('1', '2'), class = c('anova', 'data.frame'), heading = c('Analysis of Variance Table\\n', 'Model 1: birthw ~ sex + sex:age - 1\\nModel 2: birthw ~ sex + age - 1')), 6L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset212_5bbcd4f192754d4aa470bd81083731a2");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset213_ce5ca1294d484fdcb12cbe52cb2a72cb() {
        assertEval("argv <- list(structure(list(a = structure('abc', class = 'AsIs'), b = structure('def\\'gh', class = 'AsIs')), .Names = c('a', 'b'), row.names = '1', class = 'data.frame'), 1L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset213_ce5ca1294d484fdcb12cbe52cb2a72cb");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset214_e20099eb554089d6b2832b23f40c0564() {
        assertEval("argv <- list(structure(list(mtime = structure(1395082258.61787, class = c('POSIXct', 'POSIXt'))), .Names = 'mtime'), 1L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset214_e20099eb554089d6b2832b23f40c0564");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset219_704c9702777a657ec537a6656e171eae() {
        assertEval("argv <- list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor'), title = structure(1L, .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(2L, .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = 1L, class = 'data.frame'), 4L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset219_704c9702777a657ec537a6656e171eae");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset228_75e4822d42ca3310c7d260cb37de73a8() {
        assertEval("argv <- list(structure(list(Df = c(NA, 1, 1, 1, 1), `Sum of Sq` = c(NA, 25.9509113775335, 2.97247824113524, 0.109090049888117, 0.246974722154086), RSS = c(47.863639350499, 73.8145507280325, 50.8361175916342, 47.9727294003871, 48.1106140726531), AIC = c(26.9442879283302, 30.5758847476115, 25.7275503692601, 24.9738836085411, 25.0111950072736)), .Names = c('Df', 'Sum of Sq', 'RSS', 'AIC'), row.names = c('<none>', '- x1', '- x2', '- x3', '- x4'), class = c('anova', 'data.frame')), 2L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset228_75e4822d42ca3310c7d260cb37de73a8");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset229_6a41e465c811d91aa16d8578736e378e() {
        assertEval("argv <- list(structure(list(mtime = structure(1342423171, class = c('POSIXct', 'POSIXt'))), .Names = 'mtime'), 1L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset229_6a41e465c811d91aa16d8578736e378e");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset234_fb726398b379e933ea2e414efbed9fe9() {
        assertEval("argv <- list(structure(list(variog = c(0.00723952158228125, 0.014584633605134, 0.0142079356273193, 0.0184422668389517, 0.0111285046171491, 0.0199100817701382, 0.0270723108677323, 0.0341403794476899, 0.0283206569034573, 0.03752550654923), dist = c(1, 6, 7, 8, 13, 14, 15, 20, 21, 22), n.pairs = structure(c(16L, 16L, 144L, 16L, 16L, 128L, 16L, 16L, 112L, 16L), .Dim = 10L, .Dimnames = structure(list(c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22')), .Names = ''))), .Names = c('variog', 'dist', 'n.pairs'), collapse = TRUE, row.names = c(NA, 10L), class = c('Variogram', 'data.frame')), 3L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset234_fb726398b379e933ea2e414efbed9fe9");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset24_38da53b024019d3b9fa62944656c9913() {
        assertEval("argv <- list(NULL, NULL);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset24_38da53b024019d3b9fa62944656c9913");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset27_1fffada81dfe35bfa3cb076387dbf136() {
        assertEval("argv <- list(structure(list(surname = structure(c('Tukey', 'Venables', 'Tierney', 'Ripley', 'McNeil'), class = 'AsIs')), .Names = 'surname'), 1L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset27_1fffada81dfe35bfa3cb076387dbf136");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset28_2b9afe25abe40ad4bc0c6cf1a583c3c0() {
        assertEval("argv <- list(structure(list(surname = structure('R Core', class = 'AsIs'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 7L, class = 'data.frame'), 1L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset28_2b9afe25abe40ad4bc0c6cf1a583c3c0");
    }

    @Test
    public void TestrGenBuiltinsubset2_testsubset29_7aa7ec151c558554050cc5a345272e8c() {
        assertEval("argv <- list(structure(list(z = structure(c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'), .Dim = c(3L, 3L), class = 'AsIs')), .Names = 'z'), 1L);.subset2(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsubset2_testsubset29_7aa7ec151c558554050cc5a345272e8c");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr3_be06744b575a43acbb92581c4d9d702f() {
        assertEval("argv <- list(structure(c('as.formula', 'coef', 'makepredictcall', 'na.fail', 'predict'), .Names = c('as.formula', 'coef', 'makepredictcall', 'na.fail', 'predict')), 1L, 6L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsubstr_testsubstr3_be06744b575a43acbb92581c4d9d702f");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr5_5c9a56a8fd6583281441f3a8429abbea() {
        assertEval("argv <- list(structure('to be supported).', Rd_tag = 'TEXT'), 17L, 17L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsubstr_testsubstr5_5c9a56a8fd6583281441f3a8429abbea");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr8_afd3ca7daa5e737bb50a9a8317607cb7() {
        assertEval("argv <- list(structure(c('model.frame', 'predict', 'residuals'), .Names = c('model.frame', 'predict', 'residuals')), 1L, 6L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsubstr_testsubstr8_afd3ca7daa5e737bb50a9a8317607cb7");
    }

    @Test
    public void TestrGenBuiltinsubstr_testsubstr9_0580e95b49f5dfc11b23699aac0148d3() {
        assertEval("argv <- list('> ### R code from vignette source 'parallel.Rnw'\\n> \\n> ###################################################\\n> ### code chunk number 1: parallel.Rnw:474-475 (eval = FALSE)\\n> ###################################################\\n> ## library(parallel)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 2: parallel.Rnw:500-507 (eval = FALSE)\\n> ###################################################\\n> ## library(boot)\\n> ## cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)\\n> ## cd4.mle <- list(m = colMeans(cd4), v = var(cd4))\\n> ## cd4.boot <- boot(cd4, corr, R = 999, sim = \\'parametric\\',\\n> ##                  ran.gen = cd4.rg, mle = cd4.mle)\\n> ## boot.ci(cd4.boot,  type = c(\\'norm\\', \\'basic\\', \\'perc\\'),\\n> ##         conf = 0.9, h = atanh, hinv = tanh)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 3: parallel.Rnw:512-522 (eval = FALSE)\\n> ###################################################\\n> ## cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)\\n> ## cd4.mle <- list(m = colMeans(cd4), v = var(cd4))\\n> ## run1 <- function(...) boot(cd4, corr, R = 500, sim = \\'parametric\\',\\n> ##                            ran.gen = cd4.rg, mle = cd4.mle)\\n> ## mc <- 2 # set as appropriate for your hardware\\n> ## ## To make this reproducible:\\n> ## set.seed(123, \\'L'Ecuyer\\')\\n> ## cd4.boot <- do.call(c, mclapply(seq_len(mc), run1) )\\n> ## boot.ci(cd4.boot,  type = c(\\'norm\\', \\'basic\\', \\'perc\\'),\\n> ##         conf = 0.9, h = atanh, hinv = tanh)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 4: parallel.Rnw:527-528 (eval = FALSE)\\n> ###################################################\\n> ## do.call(c, lapply(seq_len(mc), run1))\\n> \\n> \\n> ###################################################\\n> ### code chunk number 5: parallel.Rnw:532-547 (eval = FALSE)\\n> ###################################################\\n> ## run1 <- function(...) {\\n> ##    library(boot)\\n> ##    cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)\\n> ##    cd4.mle <- list(m = colMeans(cd4), v = var(cd4))\\n> ##    boot(cd4, corr, R = 500, sim = \\'parametric\\',\\n> ##         ran.gen = cd4.rg, mle = cd4.mle)\\n> ## }\\n> ## cl <- makeCluster(mc)\\n> ## ## make this reproducible\\n> ## clusterSetRNGStream(cl, 123)\\n> ## library(boot) # needed for c() method on master\\n> ## cd4.boot <- do.call(c, parLapply(cl, seq_len(mc), run1) )\\n> ## boot.ci(cd4.boot,  type = c(\\'norm\\', \\'basic\\', \\'perc\\'),\\n> ##         conf = 0.9, h = atanh, hinv = tanh)\\n> ## stopCluster(cl)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 6: parallel.Rnw:557-570 (eval = FALSE)\\n> ###################################################\\n> ## cl <- makeCluster(mc)\\n> ## cd4.rg <- function(data, mle) MASS::mvrnorm(nrow(data), mle$m, mle$v)\\n> ## cd4.mle <- list(m = colMeans(cd4), v = var(cd4))\\n> ## clusterExport(cl, c(\\'cd4.rg\\', \\'cd4.mle\\'))\\n> ## junk <- clusterEvalQ(cl, library(boot)) # discard result\\n> ## clusterSetRNGStream(cl, 123)\\n> ## res <- clusterEvalQ(cl, boot(cd4, corr, R = 500,\\n> ##                     sim = \\'parametric\\', ran.gen = cd4.rg, mle = cd4.mle))\\n> ## library(boot) # needed for c() method on master\\n> ## cd4.boot <- do.call(c, res)\\n> ## boot.ci(cd4.boot,  type = c(\\'norm\\', \\'basic\\', \\'perc\\'),\\n> ##         conf = 0.9, h = atanh, hinv = tanh)\\n> ## stopCluster(cl)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 7: parallel.Rnw:575-589 (eval = FALSE)\\n> ###################################################\\n> ## R <- 999; M <- 999 ## we would like at least 999 each\\n> ## cd4.nest <- boot(cd4, nested.corr, R=R, stype=\\'w\\', t0=corr(cd4), M=M)\\n> ## ## nested.corr is a function in package boot\\n> ## op <- par(pty = \\'s\\', xaxs = \\'i\\', yaxs = \\'i\\')\\n> ## qqplot((1:R)/(R+1), cd4.nest$t[, 2], pch = \\'.\\', asp = 1,\\n> ##         xlab = \\'nominal\\', ylab = \\'estimated\\')\\n> ## abline(a = 0, b = 1, col = \\'grey\\')\\n> ## abline(h = 0.05, col = \\'grey\\')\\n> ## abline(h = 0.95, col = \\'grey\\')\\n> ## par(op)\\n> ## \\n> ## nominal <- (1:R)/(R+1)\\n> ## actual <- cd4.nest$t[, 2]\\n> ## 100*nominal[c(sum(actual <= 0.05), sum(actual < 0.95))]\\n> \\n> \\n> ###################################################\\n> ### code chunk number 8: parallel.Rnw:594-602 (eval = FALSE)\\n> ###################################################\\n> ## mc <- 9\\n> ## R <- 999; M <- 999; RR <- floor(R/mc)\\n> ## run2 <- function(...)\\n> ##     cd4.nest <- boot(cd4, nested.corr, R=RR, stype=\\'w\\', t0=corr(cd4), M=M)\\n> ## cd4.nest <- do.call(c, mclapply(seq_len(mc), run2, mc.cores = mc) )\\n> ## nominal <- (1:R)/(R+1)\\n> ## actual <- cd4.nest$t[, 2]\\n> ## 100*nominal[c(sum(actual <= 0.05), sum(actual < 0.95))]\\n> \\n> \\n> ###################################################\\n> ### code chunk number 9: parallel.Rnw:616-627 (eval = FALSE)\\n> ###################################################\\n> ## library(spatial)\\n> ## towns <- ppinit(\\'towns.dat\\')\\n> ## tget <- function(x, r=3.5) sum(dist(cbind(x$x, x$y)) < r)\\n> ## t0 <- tget(towns)\\n> ## R <- 1000\\n> ## c <- seq(0, 1, 0.1)\\n> ## ## res[1] = 0\\n> ## res <- c(0, sapply(c[-1], function(c)\\n> ##     mean(replicate(R, tget(Strauss(69, c=c, r=3.5))))))\\n> ## plot(c, res, type=\\'l\\', ylab=\\'E t\\')\\n> ## abline(h=t0, col=\\'grey\\')\\n> \\n> \\n> ###################################################\\n> ### code chunk number 10: parallel.Rnw:631-640 (eval = FALSE)\\n> ###################################################\\n> ## run3 <- function(c) {\\n> ##     library(spatial)\\n> ##     towns <- ppinit(\\'towns.dat\\') # has side effects\\n> ##     mean(replicate(R, tget(Strauss(69, c=c, r=3.5))))\\n> ## }\\n> ## cl <- makeCluster(10, methods = FALSE)\\n> ## clusterExport(cl, c(\\'R\\', \\'towns\\', \\'tget\\'))\\n> ## res <- c(0, parSapply(cl, c[-1], run3)) # 10 tasks\\n> ## stopCluster(cl)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 11: parallel.Rnw:644-648 (eval = FALSE)\\n> ###################################################\\n> ## cl <- makeForkCluster(10)  # fork after the variables have been set up\\n> ## run4 <- function(c)  mean(replicate(R, tget(Strauss(69, c=c, r=3.5))))\\n> ## res <- c(0, parSapply(cl, c[-1], run4))\\n> ## stopCluster(cl)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 12: parallel.Rnw:651-653 (eval = FALSE)\\n> ###################################################\\n> ## run4 <- function(c)  mean(replicate(R, tget(Strauss(69, c=c, r=3.5))))\\n> ## res <- c(0, unlist(mclapply(c[-1], run4, mc.cores = 10)))\\n> \\n> \\n> ###################################################\\n> ### code chunk number 13: parallel.Rnw:684-718 (eval = FALSE)\\n> ###################################################\\n> ## pkgs <- \\'<names of packages to be installed>\\'\\n> ## M <- 20 # number of parallel installs\\n> ## M <- min(M, length(pkgs))\\n> ## library(parallel)\\n> ## unlink(\\'install_log\\')\\n> ## cl <- makeCluster(M, outfile = \\'install_log\\')\\n> ## clusterExport(cl, c(\\'tars\\', \\'fakes\\', \\'gcc\\')) # variables needed by do_one\\n> ## \\n> ## ## set up available via a call to available.packages() for\\n> ## ## repositories containing all the packages involved and all their\\n> ## ## dependencies.\\n> ## DL <- utils:::.make_dependency_list(pkgs, available, recursive = TRUE)\\n> ## DL <- lapply(DL, function(x) x[x %in% pkgs])\\n> ## lens <- sapply(DL, length)\\n> ## ready <- names(DL[lens == 0L])\\n> ## done <- character() # packages already installed\\n> ## n <- length(ready)\\n> ## submit <- function(node, pkg)\\n> ##     parallel:::sendCall(cl[[node]], do_one, list(pkg), tag = pkg)\\n> ## for (i in 1:min(n, M)) submit(i, ready[i])\\n> ## DL <- DL[!names(DL) %in% ready[1:min(n, M)]]\\n> ## av <- if(n < M) (n+1L):M else integer() # available workers\\n> ## while(length(done) < length(pkgs)) {\\n> ##     d <- parallel:::recvOneResult(cl)\\n> ##     av <- c(av, d$node)\\n> ##     done <- c(done, d$tag)\\n> ##     OK <- unlist(lapply(DL, function(x) all(x %in% done) ))\\n> ##     if (!any(OK)) next\\n> ##     p <- names(DL)[OK]\\n> ##     m <- min(length(p), length(av)) # >= 1\\n> ##     for (i in 1:m) submit(av[i], p[i])\\n> ##     av <- av[-(1:m)]\\n> ##     DL <- DL[!names(DL) %in% p[1:m]]\\n> ## }\\n> \\n> \\n> ###################################################\\n> ### code chunk number 14: parallel.Rnw:731-748 (eval = FALSE)\\n> ###################################################\\n> ##     fn <- function(r) statistic(data, i[r, ], ...)\\n> ##     RR <- sum(R)\\n> ##     res <- if (ncpus > 1L && (have_mc || have_snow)) {\\n> ##         if (have_mc) {\\n> ##             parallel::mclapply(seq_len(RR), fn, mc.cores = ncpus)\\n> ##         } else if (have_snow) {\\n> ##             list(...) # evaluate any promises\\n> ##             if (is.null(cl)) {\\n> ##                 cl <- parallel::makePSOCKcluster(rep(\\'localhost\\', ncpus))\\n> ##                 if(RNGkind()[1L] == \\'L'Ecuyer-CMRG\\')\\n> ##                     parallel::clusterSetRNGStream(cl)\\n> ##                 res <- parallel::parLapply(cl, seq_len(RR), fn)\\n> ##                 parallel::stopCluster(cl)\\n> ##                 res\\n> ##             } else parallel::parLapply(cl, seq_len(RR), fn)\\n> ##         }\\n> ##     } else lapply(seq_len(RR), fn)\\n> \\n> \\n> ###################################################\\n> ### code chunk number 15: parallel.Rnw:751-752 (eval = FALSE)\\n> ###################################################\\n> ##             list(...) # evaluate any promises\\n> \\n> ', 1L, 150L); .Internal(substr(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinsubstr_testsubstr9_0580e95b49f5dfc11b23699aac0148d3");
    }

    @Test
    public void TestrGenBuiltinsum_testsum16_1fa4b5607c456d651c7fab1b023f809f() {
        assertEval("argv <- list(1073741824L, 1073741824L);sum(argv[[1]],argv[[2]]);");
        check("TestrGenBuiltinsum_testsum16_1fa4b5607c456d651c7fab1b023f809f");
    }

    @Test
    public void TestrGenBuiltinsum_testsum18_f05c9601399b62fff5eb10945d0d96c4() {
        assertEval("argv <- list(c(1073741824L, 1073741824L));sum(argv[[1]]);");
        check("TestrGenBuiltinsum_testsum18_f05c9601399b62fff5eb10945d0d96c4");
    }

    @Test
    public void TestrGenBuiltinsummary_testsummary1_15768e15274b3dba8a71991b8acaa138() {
        assertEval("argv <- structure(list(object = structure(c(4L, 4L, 4L, 4L, 4L,     3L, 4L, 4L, 4L, 4L, 3L, 4L, 3L, 4L, 4L, 4L, 4L, 2L, 4L, 3L,     4L, 4L, 4L, 2L), .Dim = c(6L, 4L), .Dimnames = structure(list(c('25-34',     '35-44', '45-54', '55-64', '65-74', '75+'), c('0-39g/day',     '40-79', '80-119', '120+')), .Names = c('', '')), class = 'table')),     .Names = 'object');do.call('summary', argv)");
        check("TestrGenBuiltinsummary_testsummary1_15768e15274b3dba8a71991b8acaa138");
    }

    @Test
    public void TestrGenBuiltinsummary_testsummary2_1f99eef26272ffa8cf1f440084f3da24() {
        assertEval("argv <- structure(list(object = c(5.1, 5, 5.4, 5.4, 5.8, 5.7,     5.4, 5.1, 5.7, 5.1, 5.1, 4.6, 5.2, 5.2, 5.5, 5.5, 4.9, 5,     5, 5.1, 5.1, 5.3)), .Names = 'object');do.call('summary', argv)");
        check("TestrGenBuiltinsummary_testsummary2_1f99eef26272ffa8cf1f440084f3da24");
    }

    @Test
    public void TestrGenBuiltinsummary_testsummary3_c4d1e7f58ac25dabb56fcb914550b9e3() {
        assertEval("argv <- structure(list(object = structure(list(Sepal.Length = c(5.1,     4.9, 4.7, 4.6, 5, 5.4, 4.6, 5, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3,     5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5,     5, 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5, 5.5, 4.9, 4.4,     5.1, 5, 4.5, 4.4, 5, 5.1, 4.8, 5.1, 4.6, 5.3, 5, 7, 6.4,     6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5, 5.9, 6, 6.1, 5.6,     6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8,     6.7, 6, 5.7, 5.5, 5.5, 5.8, 6, 5.4, 6, 6.7, 6.3, 5.6, 5.5,     5.5, 6.1, 5.8, 5, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.3, 5.8,     7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7,     5.8, 6.4, 6.5, 7.7, 7.7, 6, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2,     6.2, 6.1, 6.4, 7.2, 7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4,     6, 6.9, 6.7, 6.9, 5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9),     Sepal.Width = c(3.5, 3, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9,         3.1, 3.7, 3.4, 3, 3, 4, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4,         3.7, 3.6, 3.3, 3.4, 3, 3.4, 3.5, 3.4, 3.2, 3.1, 3.4,         4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3, 3.4, 3.5, 2.3, 3.2,         3.5, 3.8, 3, 3.8, 3.2, 3.7, 3.3, 3.2, 3.2, 3.1, 2.3,         2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2, 3, 2.2, 2.9, 2.9, 3.1,         3, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3, 2.8, 3,         2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3, 3.4, 3.1, 2.3, 3, 2.5,         2.6, 3, 2.6, 2.3, 2.7, 3, 2.9, 2.9, 2.5, 2.8, 3.3, 2.7,         3, 2.9, 3, 3, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3, 2.5, 2.8,         3.2, 3, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2,         2.8, 3, 2.8, 3, 2.8, 3.8, 2.8, 2.8, 2.6, 3, 3.4, 3.1,         3, 3.1, 3.1, 3.1, 2.7, 3.2, 3.3, 3, 2.5, 3, 3.4, 3),     Petal.Length = c(1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5,         1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7,         1.5, 1.7, 1.5, 1, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6,         1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3,         1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4, 4.7, 4.5,         4.9, 4, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4, 4.7,         3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4, 4.9, 4.7, 4.3,         4.4, 4.8, 5, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5,         4.7, 4.4, 4.1, 4, 4.4, 4.6, 4, 3.3, 4.2, 4.2, 4.2, 4.3,         3, 4.1, 6, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1,         5.1, 5.3, 5.5, 5, 5.1, 5.3, 5.5, 6.7, 6.9, 5, 5.7, 4.9,         6.7, 4.9, 5.7, 6, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6,         5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9,         5.7, 5.2, 5, 5.2, 5.4, 5.1), Petal.Width = c(0.2, 0.2,         0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1,         0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5,         0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2,         0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3,         0.2, 0.2, 0.2, 0.2, 1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6,         1, 1.3, 1.4, 1, 1.5, 1, 1.4, 1.3, 1.4, 1.5, 1, 1.5, 1.1,         1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1, 1.1,         1, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4,         1.2, 1, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3, 2.5, 1.9, 2.1,         1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2, 1.9, 2.1, 2, 2.4,         2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2, 2, 1.8, 2.1, 1.8, 1.8,         1.8, 2.1, 1.6, 1.9, 2, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8,         1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2, 2.3,         1.8), Species = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,         1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,         2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,         3L, 3L, 3L), .Label = c('setosa', 'versicolor', 'virginica'),         class = 'factor')), .Names = c('Sepal.Length', 'Sepal.Width',     'Petal.Length', 'Petal.Width', 'Species'), row.names = c(NA,     -150L), class = 'data.frame')), .Names = 'object');do.call('summary', argv)");
        check("TestrGenBuiltinsummary_testsummary3_c4d1e7f58ac25dabb56fcb914550b9e3");
    }

    @Test
    public void TestrGenBuiltinsummaryconnection_testsummaryconnection1_8c97205334627ba90d66cdf7be082e86() {
        assertEval("argv <- list(structure(2L, class = c('terminal', 'connection'))); .Internal(summary.connection(argv[[1]]))");
        check("TestrGenBuiltinsummaryconnection_testsummaryconnection1_8c97205334627ba90d66cdf7be082e86");
    }

    @Test
    public void TestrGenBuiltinsweep_testsweep1_804f5f0cbb45988235378c90538b36ac() {
        assertEval("argv <- structure(list(x = structure(integer(0), .Dim = c(5L,     0L)), MARGIN = 2, STATS = integer(0)), .Names = c('x', 'MARGIN',     'STATS'));do.call('sweep', argv)");
        check("TestrGenBuiltinsweep_testsweep1_804f5f0cbb45988235378c90538b36ac");
    }

    @Test
    public void TestrGenBuiltinsysonexit_testsysonexit1_0d4c9db5997c385cb40a542f86ba4e62() {
        assertEval(" .Internal(sys.on.exit())");
        check("TestrGenBuiltinsysonexit_testsysonexit1_0d4c9db5997c385cb40a542f86ba4e62");
    }

    @Test
    public void TestrGenBuiltintan_testtan1_569f4f339801a0db973e92721d4cf8d2() {
        assertEval("argv <- list(c(2.19881034888372+1i, 1.31241297643351+1i, -0.26514505669635+1i, 0.54319405923209+1i, -0.41433994791886+1i, -0.47624689461558+1i, -0.78860283785024+1i, -0.59461726745951+1i, 1.65090746733669+1i, -0.05402812508544+1i, 0.11924523642758+1i, 0.24368742959909+1i, 1.23247587848534+1i, -0.51606383094478+1i, -0.99250715039204+1i, 1.67569693240319+1i, -0.44116321690529+1i, -0.72306596993987+1i, -1.23627311888329+1i, -1.2847157223178+1i, -0.57397347929799+1i, 0.61798581716653+1i, 1.10984813892972+1i, 0.70758835383559+1i, -0.36365729709525+1i, 0.0597499373846+1i, -0.70459646368007+1i, -0.71721816157401+1i, 0.88465049897692+1i, -1.01559257860354+1i, 1.95529396549246+1i, -0.09031959396585+1i, 0.21453882662922+1i, -0.73852770473957+1i, -0.57438868976327+1i, -1.31701613230524+1i, -0.18292538837273+1i, 0.41898240492446+1i, 0.32430434416138+1i, -0.78153648705475+1i, -0.788621970854+1i, -0.50219871834286+1i, 1.49606066984635+1i, -1.13730362066574+1i, -0.1790515943802+1i, 1.90236182167893+1i, -0.10097488532881+1i, -1.35984070382139+1i, -0.66476943527406+1i, 0.48545997890488+1i, -0.37560287166977+1i, -0.56187636354978+1i, -0.34391723412846+1i, 0.09049664713922+1i, 1.59850877114583+1i, -0.08856511213888+1i, 1.08079949615152+1i, 0.63075411565057+1i, -0.11363989550614+1i, -1.5329020028906+1i, -0.52111731755252+1i, -0.48987045313847+1i, 0.04715443276153+1i, 1.30019867766682+1i, 2.29307897383109+1i, 1.54758105898377+1i, -0.13315096432894+1i, -1.75652739555764+1i, -0.38877986407174+1i, 0.08920722307329+1i, 0.84501300406744+1i, 0.96252796848427+1i, 0.68430942941646+1i, -1.39527434979947+1i, 0.84964304563336+1i, -0.44655721642722+1i, 0.17480270016126+1i, 0.07455117717373+1i, 0.42816676497051+1i, 0.02467498282614+1i, -1.66747509758566+1i, 0.73649596477344+1i, 0.38602656834968+1i, -0.26565162527822+1i, 0.11814451104668+1i, 0.13403864536846+1i, 0.221019468561+1i, 1.64084616597749+1i, -0.21905037893348+1i, 0.16806538388466+1i, 1.16838387306909+1i, 1.05418102337692+1i, 1.14526311038036+1i, -0.57746800105956+1i, 2.00248273029283+1i, 0.06670087093018+1i, 1.86685184470686+1i, -1.35090268603071+1i, 0.02098358635424+1i, 1.24991457096922+1i));tan(argv[[1]]);");
        check("TestrGenBuiltintan_testtan1_569f4f339801a0db973e92721d4cf8d2");
    }

    @Test
    public void TestrGenBuiltintan_testtan3_49f9c21e16cfe9b59f79f726609f6c94() {
        assertEval("argv <- list(Inf);tan(argv[[1]]);");
        check("TestrGenBuiltintan_testtan3_49f9c21e16cfe9b59f79f726609f6c94");
    }

    @Test
    public void TestrGenBuiltintan_testtan4_61456f57ec58f78d4ce30165260aa1c3() {
        assertEval("argv <- list(c(-6.28318530717959, -6.15752160103599, -6.0318578948924, -5.90619418874881, -5.78053048260522, -5.65486677646163, -5.52920307031804, -5.40353936417444, -5.27787565803085, -5.15221195188726, -5.02654824574367, -4.90088453960008, -4.77522083345649, -4.64955712731289, -4.5238934211693, -4.39822971502571, -4.27256600888212, -4.14690230273853, -4.02123859659494, -3.89557489045134, -3.76991118430775, -3.64424747816416, -3.51858377202057, -3.39292006587698, -3.26725635973338, -3.14159265358979, -3.0159289474462, -2.89026524130261, -2.76460153515902, -2.63893782901543, -2.51327412287183, -2.38761041672824, -2.26194671058465, -2.13628300444106, -2.01061929829747, -1.88495559215388, -1.75929188601028, -1.63362817986669, -1.5079644737231, -1.38230076757951, -1.25663706143592, -1.13097335529233, -1.00530964914873, -0.879645943005142, -0.75398223686155, -0.628318530717958, -0.502654824574367, -0.376991118430775, -0.251327412287183, -0.125663706143591, 8.88178419700125e-16, 0.125663706143592, 0.251327412287184, 0.376991118430776, 0.502654824574368, 0.62831853071796, 0.753982236861551, 0.879645943005142, 1.00530964914873, 1.13097335529233, 1.25663706143592, 1.38230076757951, 1.5079644737231, 1.63362817986669, 1.75929188601028, 1.88495559215388, 2.01061929829747, 2.13628300444106, 2.26194671058465, 2.38761041672824, 2.51327412287183, 2.63893782901543, 2.76460153515902, 2.89026524130261, 3.0159289474462, 3.14159265358979, 3.26725635973339, 3.39292006587698, 3.51858377202057, 3.64424747816416, 3.76991118430775, 3.89557489045134, 4.02123859659494, 4.14690230273853, 4.27256600888212, 4.39822971502571, 4.5238934211693, 4.64955712731289, 4.77522083345649, 4.90088453960008, 5.02654824574367, 5.15221195188726, 5.27787565803085, 5.40353936417445, 5.52920307031804, 5.65486677646163, 5.78053048260522, 5.90619418874881, 6.0318578948924, 6.157521601036, 6.28318530717959));tan(argv[[1]]);");
        check("TestrGenBuiltintan_testtan4_61456f57ec58f78d4ce30165260aa1c3");
    }

    @Test
    public void TestrGenBuiltintan_testtan5_fb04c25fd1ada8f2fe176e135a4deeb7() {
        assertEval("argv <- list(1+1000i);tan(argv[[1]]);");
        check("TestrGenBuiltintan_testtan5_fb04c25fd1ada8f2fe176e135a4deeb7");
    }

    @Test
    public void TestrGenBuiltintanh_testtanh1_edd961811b796fcbe12fc269bb7d3f87() {
        assertEval("argv <- list(c(0.57459950307683, 1.3311607364495));tanh(argv[[1]]);");
        check("TestrGenBuiltintanh_testtanh1_edd961811b796fcbe12fc269bb7d3f87");
    }

    @Test
    public void TestrGenBuiltintanh_testtanh2_375a802d82e03537aa707b1631e96ac9() {
        assertEval("argv <- list(FALSE);tanh(argv[[1]]);");
        check("TestrGenBuiltintanh_testtanh2_375a802d82e03537aa707b1631e96ac9");
    }

    @Test
    public void TestrGenBuiltintanh_testtanh3_478078d9e56d432957202f074fd8cd0e() {
        assertEval("argv <- list(c(0.018063120710024, 0.202531388051386, 0.417573408622862, 1.63052300091743, 2.60085453772445, 2.75283670267494, 2.30083138197613, 1.47188976409943, 0.829803307993584, 0.295089115172324, 0.237719196109985, 0.617898787321681, 0.850777050382226, 0.516973890969527, 0.522699166681335, 0.850446724158497, 0.645479182912265, 0.193978409371909, 0.414456893353747, 0.492772947140595, 0.420563171733189, 0.369166401583374, 0.592867562934369, 1.21638206559229, 0.54564621330955, 0.672292186547141, 0.557193544541334, 0.112218530051911, -0.0391766542932368, 0.246991917518619, -0.0310729286667355, 0.100305401934259, 0.385595467685569, 0.347899688300561, 0.0900835492886662, -0.128526864819991));tanh(argv[[1]]);");
        check("TestrGenBuiltintanh_testtanh3_478078d9e56d432957202f074fd8cd0e");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod1_4314518b98c5af37eb020f0cc3022da1() {
        assertEval("argv <- list(structure(c(5, 2, 0, 2, 5, 2, 0, 2, 5), .Dim = c(3L, 3L)), structure(c(0, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 0, 1, 0, 0), .Dim = c(5L, 3L), .Dimnames = list(c('a', 'b', 'c', 'd', 'e'), NULL))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltintcrossprod_testtcrossprod1_4314518b98c5af37eb020f0cc3022da1");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod2_e791b4ba5ff95c8d4b7152502910c736() {
        assertEval("argv <- list(structure(c(5, 2, 0, 2, 5, 2, 0, 2, 5), .Dim = c(3L, 3L), .Dimnames = list(c('A', 'B', 'C'), c('A', 'B', 'C'))), structure(c(0, 1, 0, 0, 2, 0, 0, 2, 0, 1, 2, 0, 1, 0, 0), .Dim = c(5L, 3L), .Dimnames = list(NULL, c('A', 'B', 'C')))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltintcrossprod_testtcrossprod2_e791b4ba5ff95c8d4b7152502910c736");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod3_0a46978a95837c37264e7fb2582dff9d() {
        assertEval("argv <- list(structure(c(-1.67712982705863, -1.48498667828929, -1.66855080519244, -1.58355627712096, -1.82359988031979, -1.9949008033236, -0.0318360538544526, -0.560218641212122, 0.066207937805176, 0.499775901814107, -0.00128363357081381, -0.00713986667014182, 0.296776079992064, -0.138150806520963, 0.253601178172029, -0.170225064799926, -0.240191246767341, -0.00408674943172847, -0.242382276284081, 0.0729153527553058, 0.269807081327349, 0.0299339639014576, -0.077267349576335, -0.0293027062153706, -0.0099926992270607, 0.0334924583850379, -0.0453336990810482, 0.0438958486872448, -0.112099180250145, 0.089015596249019), .Dim = c(6L, 5L)), structure(c(-0.399602067979347, -0.353820997034499, -0.397557983601584, -0.377306725388702, -0.434500818950138, -0.47531590790431, -0.0422023061126668, -0.742633452454394, 0.087766143100416, 0.662509734796894, -0.00170160212505116, -0.00946470439441127, 0.584095849615428, -0.271899651454647, 0.499121747385523, -0.335026171424641, -0.472729171281292, -0.00804328091925277, -0.637436340955898, 0.191758639997983, 0.70956029179181, 0.0787227379500612, -0.2032038701195, -0.0770626058818733, -0.062340518587102, 0.208946269374942, -0.282819110829524, 0.273848927982668, -0.699342677207614, 0.555333279468297), .Dim = c(6L, 5L))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltintcrossprod_testtcrossprod3_0a46978a95837c37264e7fb2582dff9d");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod4_8734f772dd52f75c834c2a0a502aab59() {
        assertEval("argv <- list(c(2, 3), structure(c(0, 0, 1, 0), .Dim = c(2L, 2L), .Dimnames = list(NULL, NULL))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltintcrossprod_testtcrossprod4_8734f772dd52f75c834c2a0a502aab59");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod5_81cff9308b297ddba3d09efc2ea1c289() {
        assertEval("argv <- list(structure(c(-0.106539372596213, -2.87400113021639, 0.341152775291742, 1.88577541025803, 0.842201032082677, -1.43117364207636, -0.69348461621825, -2.41970841038843, -3.02719090531729, -0.226641199170227, -0.332680183991575, -1.62371869115524, -1.66979618600051, -1.10431770731054, 1.88731633228519, 2.05877121721062, -0.223853590000374, 2.00359231906507, 2.73128102907396, 0.539089155601206, -0.199828039026098, -1.05787977326062, 0.306997029957149, 1.45711168105796, 1.49857746263809, -0.757919845814536, 0.268252398125501, -0.535834002202256, -0.271560453176356, -2.05847896960824, 0.980553291004929, 0.685818887220841, -0.522933983909647, -0.337189871316714, 0.191459457586776, 1.89272736696455, -0.453746315234956, 0.612338437255857, 1.37687299952389, -1.15071450872488, -0.20817483353688, -0.081142998844394, -0.253631714967276, -0.410462721238244, -0.68459626706876, -0.624834027577721, 0.00753430632431097, -0.0556623066116985, -0.563702942039652, 0.0408500401240061, -0.420302429975138, 0.033747665813787, 0.339840694442255, -0.250248532584852, -0.31434827109732, 0.378366203759376, -0.193977362697154, -0.518701418701189, 1.24086430187875, 0.0626244079886504, -0.168813902431602, -0.233723461170579, -0.0800002226605061, -0.0555238917407563, -0.947495254278566, -0.0485572234634504, -0.0296030565974314, -0.095544458696536, 0.0295824037592777, 0.194854132525369, 0.267233992325682, -0.087254491408015, 0.126110082843019, 0.159157280802928, -0.155595903815538, 0.170585777111235, -0.160659663851048, -0.059679874503493, 0.0114766797349517, -0.288711739670586, 0.192267902822735, -0.558695699349865, -0.0862396209998433, 0.00725278175306798, -0.128294571915242, -0.130284537275488, -0.0857140300930927, -0.0514859262258765, -0.0490801347386973, 0.0204665694600954, -0.14875269796722, 0.196176132315475, -0.0529883263026191, -0.132778199491125, -0.228017010951841, 0.0529472898389869), .Dim = c(12L, 8L)), structure(c(-0.0185462290552347, -0.500302207222603, 0.059387411050087, 0.328273218183171, 0.146609210012521, -0.249136760776327, -0.120720858638907, -0.421219548532773, -0.526969274886959, -0.0394533916498165, -0.057912513881884, -0.282654740999492, -0.321354169237256, -0.212527194864884, 0.363216168017541, 0.396212855019715, -0.0430808772043306, 0.385593613508892, 0.525638130815129, 0.103748319223306, -0.0384571326787796, -0.203590161804909, 0.0590819264933657, 0.28042279511599, 0.416779971858557, -0.210790446196582, 0.0746055707690415, -0.149024582263218, -0.0755255973444945, -0.572498138010465, 0.272708607475933, 0.190737938906932, -0.145436866983219, -0.0937782587701373, 0.0532481432121619, 0.52639978807016, -0.204031585044791, 0.275344124552216, 0.61912476435818, -0.517430328944052, -0.0936079034183924, -0.0364867638890611, -0.114048046419078, -0.184568682552654, -0.307835583002935, -0.280962892162748, 0.0033878764630103, -0.0250291148686315, -0.338839482109357, 0.0245547883601272, -0.252642033739931, 0.0202855808510911, 0.204276820851501, -0.150423346865756, -0.188953431740463, 0.227434343460447, -0.116598981866977, -0.311789254542753, 0.745878344887204, 0.0376432698639114, -0.159472254176866, -0.220789915226282, -0.0755732534972413, -0.0524513683353668, -0.895063746796005, -0.0458702143055051, -0.0279649134231136, -0.0902573187573718, 0.0279454034502495, 0.184071497085901, 0.252446075441722, -0.0824260930614398, 0.167922807083695, 0.211927046257706, -0.207184868571959, 0.227144744458931, -0.21392755544038, -0.0794671752416819, 0.0152818571968794, -0.384436237535829, 0.256015738204522, -0.743935362069355, -0.114833000769291, 0.00965749481472171, -0.300640883681616, -0.30530409690622, -0.200859174058623, -0.120650267011609, -0.115012621802916, 0.0479606224687302, -0.348581720171566, 0.459712089888966, -0.124170937293853, -0.311147655218321, -0.534326859224339, 0.124074773921503), .Dim = c(12L, 8L))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltintcrossprod_testtcrossprod5_81cff9308b297ddba3d09efc2ea1c289");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod6_ddac5708483471742ea352332f0a82fd() {
        assertEval("argv <- list(structure(c(-1.22589324018138, -0.740548974281808, -0.54768368397833, -0.441021701509591, -0.370068251595057, -0.319690799411412, -0.282987166340516, -0.254112864677485, -0.230083320312515, 0.203647970189376, -0.0305516337408725, -0.0825170335109532, -0.0984577177107505, -0.100129992839015, -0.0988979642888749, -0.0945771185256416, -0.0902309571831907, -0.0871241228998968, -0.00955870050771132, 0.0197754782700907, 0.0125304440435148, 0.00419858922572787, -0.00191073996840182, -0.0061756059258365, -0.00956682744689523, -0.0127366531032827, -0.0131079781713544, 0.000214464770644159, -0.000956552371122151, 5.72249143534175e-05, 0.00029865136977495, 0.00077852017665313, 0.00142425180877207, 0.000491677810053133, -0.000120006753650731, -0.00247588122373662, 4.2574997724815e-05, -0.000297064220851874, 0.000399761711902461, 5.67830351414009e-05, -0.00026523273781528, 0.000320119491527155, -0.00026454073650643, -0.000195756422133707, 0.000192249930248858, -4.94461924222768e-07, 2.80125995838013e-05, -0.000119138513940463, 0.000151917649712048, -7.31975645151543e-05, 4.92140187851149e-05, -1.13604576670922e-05, -3.74519303853871e-05, 9.55915555684852e-06), .Dim = c(9L, 6L)), structure(c(-0.709851441473678, -0.428813651666777, -0.317135326144804, -0.255372882626744, -0.214287405483635, -0.185116425598763, -0.163863247924954, -0.147143631578904, -0.133229363887123, 0.633337192677659, -0.0950143815681878, -0.256624734846691, -0.306199636924392, -0.311400346924765, -0.307568786499592, -0.294131125799441, -0.280614734641737, -0.270952601985731, -0.28505721606605, 0.58973945020027, 0.373679821042009, 0.125209295460755, -0.0569816174886273, -0.184167401344961, -0.285299575647986, -0.379829336915808, -0.390902901787376, 0.0675695685124445, -0.301372718615498, 0.0180293609967187, 0.0940935153626058, 0.245281648154537, 0.448726753036158, 0.154908693733931, -0.0378094944843564, -0.780054577138554, 0.056333641054865, -0.393064241503382, 0.528949712019966, 0.0751331835725979, -0.350946016360591, 0.423570111428232, -0.350030386168567, -0.259017559788085, 0.254377901167792, -0.00226968135332679, 0.128583560874789, -0.546870143699694, 0.697333080468545, -0.335991790571385, 0.225902410856869, -0.0521468239901137, -0.171912019667483, 0.0438784789244046), .Dim = c(9L, 6L))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltintcrossprod_testtcrossprod6_ddac5708483471742ea352332f0a82fd");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod7_d69f763e8621cd3655996220e07a7911() {
        assertEval("argv <- list(0, 0); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltintcrossprod_testtcrossprod7_d69f763e8621cd3655996220e07a7911");
    }

    @Test
    public void TestrGenBuiltintcrossprod_testtcrossprod8_fd4028b410685c9ccfcdf907e176e27e() {
        assertEval("argv <- list(structure(c(1.1173625565162, 1.46907016195074, 1.1173625565162, -0.59596185089264, -1.32605913508878e-308, 0.595961850892641), .Dim = c(3L, 2L)), structure(c(0.517876924314756, 0.680886908762812, 0.517876924314755, -0.707106781186547, -1.57336481399136e-308, 0.707106781186548), .Dim = c(3L, 2L))); .Internal(tcrossprod(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltintcrossprod_testtcrossprod8_fd4028b410685c9ccfcdf907e176e27e");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault1_484be8b1d7ad518ca03bbd8f72b666a7() {
        assertEval("argv <- list(structure(c('D:', 'E:', 'F:', 'G:'), .Dim = c(4L, 1L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault1_484be8b1d7ad518ca03bbd8f72b666a7");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault10_f3f7c654a28cab3226b1d4a90f4b412f() {
        assertEval("argv <- list(structure(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 74, 68, 56, 57, 60, 74, 53, 61, 57, 57, 67, 70, 63, 57, 67, 50, 58, 72, 60, 70, 53, 74, 73, 48, 61, 65, 74, 70, 68, 74, 63, 74, 63, 68, 58, 59, 62, 57, 48, 73, 69, 68, 68, 67, 63, 74, 40, 81, 73, 59, 55, 42, 44, 71, 61, 72, 63, 70, 66, 72, 69, 71, 64, 56, 63, 59, 66, 67, 55, 69, 44, 80, 76, 49, 68, 66, 80, 75, 72, 70, 66, 50, 64, 53, 47, 67, 56, 54, 56, 74, 76, 57, 71, 54, 82, 70, 60, 55, 69, 62, 63, 69, 63, 64, 46, 61, 65, 61, 56, 53, 56, 60, 39, 58, 64, 53, 72, 52, 50, 64, 71, 70, 64, 60, 73, 62, 69, 67, 69, 65, 65, 76, 67, 76, 77, 39, 66, 1, 0, 0, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 0, 3, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 2, 1, 1, 1, 2, 0, 1, 0, 2, 1, 0, 0, 0, 1, 1, 1, 1, 0, 2, 0, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 1, 1, 2, 2, 2, 2, 1, 0, 2, 0, 1, 1, 1, 1, 0, 0, 2, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 2, 2, 2, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 1), .Dim = c(137L, 3L), .Dimnames = list(c('1', '2', '3', '4', '5', '6', '9', '10', '11', '15', '16', '17', '18', '20', '21', '23', '24', '25', '27', '28', '29', '30', '32', '33', '35', '37', '39', '41', '45', '47', '48', '49', '52', '53', '54', '55', '56', '58', '62', '63', '65', '66', '69', '70', '71', '73', '74', '79', '80', '81', '82', '83', '85', '86', '88', '90', '91', '92', '93', '96', '97', '98', '99', '103', '104', '105', '106', '108', '109', '111', '112', '113', '116', '117', '118', '119', '120', '121', '124', '125', '126', '127', '128', '132', '133', '135', '138', '139', '140', '142', '143', '145', '147', '148', '149', '151', '152', '155', '156', '158', '159', '163', '164', '165', '168', '169', '170', '171', '173', '175', '177', '181', '182', '188', '189', '190', '191', '192', '193', '194', '195', '196', '198', '200', '202', '206', '209', '212', '213', '215', '216', '218', '221', '223', '224', '225', '227'), c('(Intercept)', 'age', 'ph.ecog')), assign = 0:2)); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault10_f3f7c654a28cab3226b1d4a90f4b412f");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault11_dfb326b2db541aaf0d14ea02b14ffa73() {
        assertEval("argv <- list(structure(c(NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_), .Dim = c(20L, 20L), .Dimnames = list(c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_, NA_character_)))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault11_dfb326b2db541aaf0d14ea02b14ffa73");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault12_77ba6d03dcb038abeaf0e35b76474deb() {
        assertEval("argv <- list(structure('foo', .Dim = c(1L, 1L), .Dimnames = list(structure('object', simpleOnly = TRUE), NULL))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault12_77ba6d03dcb038abeaf0e35b76474deb");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault13_92f115b08cef10b8b8b0c68910c97135() {
        assertEval("argv <- list(structure(c(0, 0, 0, 0, 0, 0, 3.95252516672997e-323, 0, 0, 0, 0, 0), .Dim = c(12L, 1L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault13_92f115b08cef10b8b8b0c68910c97135");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault14_244a400ef04182d49484e38e08920475() {
        assertEval("argv <- list(structure(c(794, 86, 150, 570), .Dim = c(2L, 2L), .Dimnames = structure(list(`1st Survey` = c('Approve', 'Disapprove'), `2nd Survey` = c('Approve', 'Disapprove')), .Names = c('1st Survey', '2nd Survey')))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault14_244a400ef04182d49484e38e08920475");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault15_3bf8ed6c1fc32cfd3d4c88d9d135726c() {
        assertEval("argv <- list(structure(list(3, 3, 3, 3, 3, 'fred'), .Dim = 2:3)); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault15_3bf8ed6c1fc32cfd3d4c88d9d135726c");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault16_15977dd9104f966c735b9e5ed654c521() {
        assertEval("argv <- list(1.28578345790245); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault16_15977dd9104f966c735b9e5ed654c521");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault17_519288a8b2a786d4223f90fe3f544995() {
        assertEval("argv <- list(structure(c(-0.560475646552213+0i, 0.7424437487+0.205661411508856i, 1.39139505579429-0.26763356813179i, 0.928710764113827-0.221714979045717i, -0.46926798541295+1.18846175213664i, 0.7424437487-0.205661411508856i, 0.460916205989202+0i, -0.452623703774585+0.170604003753717i, -0.094501186832143+0.54302538277632i, -0.331818442379127+0.612232958468282i, 1.39139505579429+0.26763356813179i, -0.452623703774585-0.170604003753717i, 0.400771450594052+0i, -0.927967220342259+0.479716843914174i, -0.790922791530657+0.043092176305418i, 0.928710764113827+0.221714979045717i, -0.094501186832143-0.54302538277632i, -0.927967220342259-0.479716843914174i, 0.701355901563686+0i, -0.600841318509537+0.213998439984336i, -0.46926798541295-1.18846175213664i, -0.331818442379127-0.612232958468282i, -0.790922791530657-0.043092176305418i, -0.600841318509537-0.213998439984336i, -0.625039267849257+0i), .Dim = c(5L, 5L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault17_519288a8b2a786d4223f90fe3f544995");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault18_198061f5782d515338f7e7c29c33145f() {
        assertEval("argv <- list(structure(c(0, 1954.88214285714, 557.144827586207, 0, 0, 1392.34285714286, 0, 0, 0), .Dim = c(3L, 3L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault18_198061f5782d515338f7e7c29c33145f");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault19_b1e99a973c4728a1592b245757328a5f() {
        assertEval("argv <- list(c(3, 4)); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault19_b1e99a973c4728a1592b245757328a5f");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault2_9db7b02224702e06049e875c1ce9a13a() {
        assertEval("argv <- list(structure(c(0.63, -0.37, 0.4, -0.6, 0.85, -0.05, 1.02, -1.76, -1.62, -0.46, -0.57, 1.41, 0, -0.65, 0.57, -0.29, 1.22, 0.8, -0.5, 0.44, 1.63, -0.13, 0.17, 1.02, 0.11), .Dim = c(5L, 5L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault2_9db7b02224702e06049e875c1ce9a13a");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault20_05b5618afd90d4ac995441ab39bfa4ee() {
        assertEval("argv <- list(structure(c(0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L), .Dim = c(4L, 4L), .Dimnames = list(c('Y', 'B', 'V', 'N'), c('B', 'V', 'N', 'V:N')))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault20_05b5618afd90d4ac995441ab39bfa4ee");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault21_cc91eeb77fc367283629c51a17902694() {
        assertEval("argv <- list(-3:5); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault21_cc91eeb77fc367283629c51a17902694");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault22_d2c2a099a76c7266501ec77260efbcbb() {
        assertEval("argv <- list(structure(c(8.3, 8.6, 8.8, 10.5, 10.7, 10.8, 11, 11, 11.1, 11.2, 11.3, 11.4, 11.4, 11.7, 12, 12.9, 12.9, 13.3, 13.7, 13.8, 14, 14.2, 14.5, 16, 16.3, 17.3, 17.5, 17.9, 18, 18, 20.6, 70, 65, 63, 72, 81, 83, 66, 75, 80, 75, 79, 76, 76, 69, 75, 74, 85, 86, 71, 64, 78, 80, 74, 72, 77, 81, 82, 80, 80, 80, 87, 10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 15.6, 18.2, 22.6, 19.9, 24.2, 21, 21.4, 21.3, 19.1, 22.2, 33.8, 27.4, 25.7, 24.9, 34.5, 31.7, 36.3, 38.3, 42.6, 55.4, 55.7, 58.3, 51.5, 51, 77), .Dim = c(31L, 3L), .Dimnames = list(NULL, c('Girth', 'Height', 'Volume')))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault22_d2c2a099a76c7266501ec77260efbcbb");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault23_12effa2ea22153b415abd808278c27fe() {
        assertEval("argv <- list(structure(list(), .Dim = 0L)); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault23_12effa2ea22153b415abd808278c27fe");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault24_6a7c37fd02f02f5d480ad24085c00d2c() {
        assertEval("argv <- list(structure('Seed', .Dim = c(1L, 1L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault24_6a7c37fd02f02f5d480ad24085c00d2c");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault3_0187ca98dbbc490b77ca0ce667a77015() {
        assertEval("argv <- list(structure(NA, .Dim = c(1L, 1L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault3_0187ca98dbbc490b77ca0ce667a77015");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault4_7e6340588eef18e8e6011974c6ad6bf6() {
        assertEval("argv <- list(structure(c(0, 0, -0.51, 0, 0, 0, 0.18, -0.15, 0, 2.62, -2.77555756156289e-16, 0, 8.26162055433954e-17, 0.560000000000001, 0, 0, 0, 0, 0, 0, 1.79, 0, 0.05, 0, 0, 0, 0, 0, 0, -0.18, -1.47, 0, -5.55111512312578e-17, 0, 0, 0.23, 0, 2.206351421008e-17, -2.12, 0), .Dim = c(5L, 8L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault4_7e6340588eef18e8e6011974c6ad6bf6");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault5_908778ccc0308160c8cc25f71d38e074() {
        assertEval("argv <- list(structure(c(NA, 0, NA, 0, NA, 0, NA, 0, NA, 0, NA, 0, NA, 0, NA, 0), .Dim = c(4L, 4L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault5_908778ccc0308160c8cc25f71d38e074");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault6_010e6c3625447ad4f63a06ac29c54eeb() {
        assertEval("argv <- list(structure(c(0, 10975969, 8779369, 10080625, 11148921, 7628644, 10732176, 6812100, 20115225, 8862529, 9180900, 20539024, 7579009, 15594601, 8208225, 5207524, 4748041, 9e+06, 667489, 15421329, 3964081, 0, 0, 1737124, 1758276, 1674436, 2244004, 4919524, 644809, 1373584, 4072324, 2220100, 1703025, 416025, 404496, 271441, 1028196, 1863225, 1067089, 2131600, 8225424, 3247204, 0, 0, 0, 41616, 339889, 42436, 933156, 458329, 5089536, 356409, 29584, 4343056, 476100, 2427364, 1022121, 855625, 558009, 81225, 2283121, 2611456, 1380625, 0, 0, 0, 0, 211600, 167281, 1290496, 558009, 4946176, 509796, 108900, 4210704, 546121, 2402500, 1121481, 1159929, 954529, 78400, 2762244, 3189796, 1907161, 0, 0, 0, 0, 0, 616225, 2387025, 727609, 4190209, 1243225, 534361, 3337929, 622521, 1814409, 1212201, 1461681, 1345600, 115600, 3218436, 4822416, 2521744, 0, 0, 0, 0, 0, 0, 577600, 2762244, 5934096, 211600, 72361, 5244100, 509796, 3111696, 1071225, 829921, 339889, 216225, 2241009, 1968409, 877969, 0, 0, 0, 0, 0, 0, 0, 2010724, 10214416, 211600, 72361, 8826841, 2125764, 6240004, 3161284, 2362369, 1218816, 1382976, 4202500, 422500, 2117025, 0, 0, 0, 0, 0, 0, 0, 0, 3900625, 1249924, 801025, 3748096, 24964, 2070721, 180625, 107584, 349281, 263169, 990025, 4276624, 1038361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8392609, 5895184, 456976, 3301489, 487204, 2866249, 4774225, 6579225, 3884841, 6922161, 15100996, 8844676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302500, 7134241, 1343281, 4831204, 2187441, 1532644, 648025, 769129, 3066001, 900601, 1334025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5198400, 744769, 2992900, 1399489, 1205604, 724201, 208849, 2832489, 2250000, 1452025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1387684, 446224, 3104644, 5062500, 6285049, 3236401, 7290000, 10439361, 8625969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1640961, 102400, 107584, 524176, 221841, 1098304, 4443664, 1338649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1338649, 2972176, 4040100, 1620529, 4397409, 10163344, 5803281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 381924, 1229881, 627264, 1022121, 5895184, 1857769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109561, 732736, 343396, 4782969, 806404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674041, 894916, 3076516, 183184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2178576, 3337929, 1560001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7327849, 1461681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4431025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), .Dim = c(21L, 21L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault6_010e6c3625447ad4f63a06ac29c54eeb");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault7_f423b93ccd388e47b737808bf79f2822() {
        assertEval("argv <- list(structure(logical(0), .Dim = c(0L, 0L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault7_f423b93ccd388e47b737808bf79f2822");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault8_2542cdad988c78dc9e4038667355b627() {
        assertEval("argv <- list(structure(c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE), .Dim = c(4L, 4L), .Dimnames = list(NULL, NULL))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault8_2542cdad988c78dc9e4038667355b627");
    }

    @Test
    public void TestrGenBuiltintdefault_testtdefault9_0115bd9923ef7aa27763093f7a0009b2() {
        assertEval("argv <- list(structure(c(0.589872882227945+0i, 0.193623477236295+0i, 0.66266867945261+0i, 0.140441698505598+0i, -0.394596353845825+0i, 0.168331537203598+0i, 0.293129347035038+0i, -0.481237717889449+0i, 0.7985227152757+0i, -0.128496737541326+0i, -0.0231518691888815+0i, -0.892171028872675+0i, 0.158252886617681+0i, 0.418477841524233+0i, -0.0576815934568704+0i, 0.471807942431513+0i, -0.00978429568549377+0i, 0.0825499722933953+0i, 0.0943143868799564+0i, 0.872692289136496+0i, -0.632910525118973+0i, 0.283760916561723+0i, 0.545364104158516+0i, 0.398269626120626+0i, 0.25072556357658+0i), .Dim = c(5L, 5L))); .Internal(t.default(argv[[1]]))");
        check("TestrGenBuiltintdefault_testtdefault9_0115bd9923ef7aa27763093f7a0009b2");
    }

    @Test
    public void TestrGenBuiltintimes_difftime_testtimes_difftime1_445e64e340873e1d890583b87354e69b() {
        assertEval("argv <- structure(list(e1 = 2, e2 = structure(c(3.33333333333333,     683.25), units = 'mins', class = 'difftime')), .Names = c('e1',     'e2'));do.call('*.difftime', argv)");
        check("TestrGenBuiltintimes_difftime_testtimes_difftime1_445e64e340873e1d890583b87354e69b");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower5_ce56c63a8f09ce11fc7cf1f034cabb9d() {
        assertEval("argv <- list(structure('base', .Names = 'Priority')); .Internal(tolower(argv[[1]]))");
        check("TestrGenBuiltintolower_testtolower5_ce56c63a8f09ce11fc7cf1f034cabb9d");
    }

    @Test
    public void TestrGenBuiltintolower_testtolower8_0b52a993e37cc2b92318b9264573537f() {
        assertEval("argv <- structure(list(x = c('NA', NA, 'BANANA')), .Names = 'x');do.call('tolower', argv)");
        check("TestrGenBuiltintolower_testtolower8_0b52a993e37cc2b92318b9264573537f");
    }

    @Test
    public void TestrGenBuiltintoupper_testtoupper4_5162da4ebde0482d08855ebe19750136() {
        assertEval("argv <- list(structure(c('BasicClasses', 'Classes', 'Documentation', 'environment-class', 'GenericFunctions', 'language-class', 'LinearMethodsList-class', 'MethodDefinition-class', 'MethodWithNext-class', 'Methods', 'MethodsList-class', 'callNextMethod', 'ObjectsWithPackage-class', 'S3Part', 'S4groupGeneric', 'SClassExtension-class', 'StructureClasses', 'TraceClasses', 'as', 'callGeneric', 'canCoerce', 'cbind2', 'className', 'classRepresentation-class', 'classesToAM', 'dotsMethods', 'evalSource', 'findClass', 'findMethods', 'fixPre1.8', 'genericFunction-class', 'getClass', 'getMethod', 'getPackageName', 'hasArg', 'implicitGeneric', 'inheritedSlotNames', 'initialize-methods', 'is', 'isSealedMethod', 'LocalReferenceClasses', 'method.skeleton', 'new', 'nonStructure-class', 'promptClass', 'promptMethods', 'ReferenceClasses', 'representation', 'selectSuperClasses', 'setClass', 'setClassUnion', 'setGeneric', 'setLoadActions', 'setMethod', 'setOldClass', 'makeClassRepresentation', 'show', 'showMethods', 'signature-class', 'slot', 'envRefClass-class', 'testInheritedMethods', 'validObject', '.BasicFunsList'), .Names = c('/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/BasicClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/Classes.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/Documentation.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/EnvironmentClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/GenericFunctions.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/LanguageClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/LinearMethodsList-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/MethodDefinition-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/MethodWithNext-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/Methods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/MethodsList-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/NextMethod.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/ObjectsWithPackage-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/S3Part.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/S4groupGeneric.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/SClassExtension-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/StructureClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/TraceClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/as.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/callGeneric.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/canCoerce.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/cbind2.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/className.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/classRepresentation-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/classesToAM.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/dotsMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/evalSource.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/findClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/findMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/fixPrevious.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/genericFunction-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/getClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/getMethod.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/getPackageName.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/hasArg.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/implicitGeneric.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/inheritedSlotNames.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/initialize-methods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/is.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/isSealedMethod.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/localRefClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/method.skeleton.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/new.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/nonStructure-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/promptClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/promptMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/refClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/representation.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/selectSuperClasses.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setClassUnion.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setGeneric.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setLoadActions.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setMethod.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setOldClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/setSClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/show.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/showMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/signature-class.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/slot.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/stdRefClass.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/testInheritedMethods.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/validObject.tex', '/home/lzhao/tmp/RtmpZy1R7l/ltx5573594f0cc9/zBasicFunsList.tex'))); .Internal(toupper(argv[[1]]))");
        check("TestrGenBuiltintoupper_testtoupper4_5162da4ebde0482d08855ebe19750136");
    }

    @Test
    public void TestrGenBuiltintrigamma_testtrigamma1_cba772bcfaa3a8133b1733a459d1e311() {
        assertEval("argv <- list(structure(c(9.16602362697115, 1.16602362697115, 3.16602362697115, 6.16602362697115, 6.16602362697115, 2.16602362697115, 8.16602362697115, 1.16602362697115, 7.16602362697115, 19.1660236269712, 2.16602362697115), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11')));trigamma(argv[[1]]);");
        check("TestrGenBuiltintrigamma_testtrigamma1_cba772bcfaa3a8133b1733a459d1e311");
    }

    @Test
    public void TestrGenBuiltintrigamma_testtrigamma2_d98a8040337197f30eba1e9255ab8962() {
        assertEval("argv <- list(structure(c(3.23454845691922, 12.2345484569192, 15.2345484569192, 6.23454845691922, 6.23454845691922, 14.2345484569192, 21.2345484569192, 23.2345484569192, 7.23454845691922, 7.23454845691922, 16.2345484569192, 8.23454845691922, 15.2345484569192, 7.23454845691922, 33.2345484569192, 54.2345484569192, 58.2345484569192, 15.2345484569192, 17.2345484569192, 17.2345484569192, 18.2345484569192, 41.2345484569192, 44.2345484569192, 47.2345484569192, 9.23454845691922, 24.2345484569192, 24.2345484569192, 29.2345484569192, 35.2345484569192, 37.2345484569192, 39.2345484569192, 4.23454845691922, 6.23454845691922, 12.2345484569192, 25.2345484569192, 46.2345484569192, 6.23454845691922, 7.23454845691922, 7.23454845691922, 10.2345484569192, 14.2345484569192, 24.2345484569192, 26.2345484569192, 33.2345484569192, 54.2345484569192, 55.2345484569192, 6.23454845691922, 6.23454845691922, 12.2345484569192, 18.2345484569192, 20.2345484569192, 9.23454845691922, 14.2345484569192, 15.2345484569192, 21.2345484569192, 48.2345484569192, 49.2345484569192, 61.2345484569192, 82.2345484569192, 3.23454845691922, 1.23454845691922, 3.23454845691922, 4.23454845691922, 6.23454845691922, 11.2345484569192, 15.2345484569192, 22.2345484569192, 37.2345484569192, 41.2345484569192, 7.23454845691922, 18.2345484569192, 68.2345484569192, 1.23454845691922, 1.23454845691922, 3.23454845691922, 8.23454845691922, 12.2345484569192, 13.2345484569192, 1.23454845691922, 1.23454845691922, 6.23454845691922, 6.23454845691922, 6.23454845691922, 12.2345484569192, 18.2345484569192, 4.23454845691922, 5.23454845691922, 23.2345484569192, 31.2345484569192, 37.2345484569192, 9.23454845691922, 1.23454845691922, 2.23454845691922, 6.23454845691922, 8.23454845691922, 17.2345484569192, 28.2345484569192, 1.23454845691922, 31.2345484569192, 11.2345484569192, 15.2345484569192, 28.2345484569192, 42.2345484569192, 70.2345484569192, 26.2345484569192, 11.2345484569192, 12.2345484569192, 21.2345484569192, 34.2345484569192, 6.23454845691922, 8.23454845691922, 1.23454845691922, 2.23454845691922, 6.23454845691922, 6.23454845691922, 6.23454845691922, 6.23454845691922, 8.23454845691922, 12.2345484569192, 16.2345484569192, 6.23454845691922, 15.2345484569192, 7.23454845691922, 7.23454845691922, 8.23454845691922, 29.2345484569192, 1.23454845691922, 6.23454845691922, 15.2345484569192, 3.23454845691922, 3.23454845691922, 4.23454845691922, 9.23454845691922, 11.2345484569192, 13.2345484569192, 2.23454845691922, 2.23454845691922, 10.2345484569192, 23.2345484569192, 4.23454845691922, 4.23454845691922, 6.23454845691922, 16.2345484569192, 19.2345484569192, 23.2345484569192, 38.2345484569192), .Names = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146')));trigamma(argv[[1]]);");
        check("TestrGenBuiltintrigamma_testtrigamma2_d98a8040337197f30eba1e9255ab8962");
    }

    @Test
    public void TestrGenBuiltintrigamma_testtrigamma3_e35b54aa032bd1ba44b4f9e6f1455d2f() {
        assertEval("argv <- list(c(1e+30, 1e+60, 1e+90, 1e+120, 1e+150, 1e+180, 1e+210, 1e+240, 1e+270, 1e+300));trigamma(argv[[1]]);");
        check("TestrGenBuiltintrigamma_testtrigamma3_e35b54aa032bd1ba44b4f9e6f1455d2f");
    }

    @Test
    public void TestrGenBuiltintrigamma_testtrigamma4_c7cef55147eeed5d89aa9c4ccb582272() {
        assertEval("argv <- list(c(-100, -3, -2, -1, 0, 1, 2, -99.9, -7.7, -3, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.0999999999999996, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 5.1, 77));trigamma(argv[[1]]);");
        check("TestrGenBuiltintrigamma_testtrigamma4_c7cef55147eeed5d89aa9c4ccb582272");
    }

    @Test
    public void TestrGenBuiltintrunc_testtrunc1_3b502de0e9582f05fa2227cebe759365() {
        assertEval("argv <- list(8.5);trunc(argv[[1]]);");
        check("TestrGenBuiltintrunc_testtrunc1_3b502de0e9582f05fa2227cebe759365");
    }

    @Test
    public void TestrGenBuiltintrunc_testtrunc2_0662beb6fa9d5d74ea8cd9013fee2482() {
        assertEval("argv <- list(2819.50000004);trunc(argv[[1]]);");
        check("TestrGenBuiltintrunc_testtrunc2_0662beb6fa9d5d74ea8cd9013fee2482");
    }

    @Test
    public void TestrGenBuiltintrunc_testtrunc3_9014641495c8715f6ffcaaf05748be52() {
        assertEval("argv <- list(c(4.71622523386031, 1.10082330182195, 1.6348679328803, 1.0848926147446, 1.90544273355044, 0.359849020605907, 3.11383110354654, 0.867268502479419, 0.162947811186314, 0.450064289616421, 4.9159701296594, 4.6105394908227, 3.44404035480693, 1.26481729443185, 1.04007117450237, 2.98928162781522, 0.598357603885233, 3.89095719670877, 2.72964489413425, 2.9838975192979, 0.972001742338762, 3.45619874307886, 3.40639955131337, 1.64102643262595, 2.35728174913675, 0.473953454056755, 4.98228391283192, 4.91887083626352, 0.210240299347788, 2.26199432276189, 3.70630375458859, 3.81391524686478, 0.606464599259198, 4.40811770269647, 4.44661358138546, 2.80862170271575, 3.86814354802482, 3.88661664212123, 2.99017415847629, 2.74575827643275, 0.309161052573472, 3.80168808856979, 0.44893383863382, 4.61025935830548, 0.267928446410224, 2.24770340253599, 2.89542144862935, 0.558472302509472, 1.01390165626071, 4.68876871396787, 3.99585635983385, 0.118613908998668, 0.0555002887267619, 3.01412270753644, 1.23142387834378, 1.36282247491181, 4.64942723163404, 0.578164426842704, 2.22724793478847, 1.08748292084783, 1.14620470674708, 4.12017436814494, 0.320054858457297, 2.23438119865023, 4.76558442227542, 3.10512124677189, 1.74187473836355, 0.650008224183694, 3.97324822610244, 1.69624235597439, 4.7321886930149, 2.33042042935267, 0.96714960061945, 0.195004806155339, 0.781808936735615, 0.248751927865669, 1.19189711171202, 1.64329304476269, 4.17560710804537, 3.12169580138288, 4.66810682089999, 1.36349227512255, 0.602594048250467, 2.95277393539436, 3.86122465948574, 2.54265206633136, 4.36057312530465, 0.599795600865036, 0.397377072367817, 3.41722437064163, 0.29663014691323, 2.19461180153303, 4.06796077964827, 0.185917691560462, 2.69324880791828, 1.27729995292611, 2.07541133742779, 2.81013442203403, 0.629334823461249, 2.81195943942294));trunc(argv[[1]]);");
        check("TestrGenBuiltintrunc_testtrunc3_9014641495c8715f6ffcaaf05748be52");
    }

    @Test
    public void TestrGenBuiltintrunc_testtrunc4_e12db55cc85e3df7618a7599b17fba35() {
        assertEval("argv <- list(c(-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4));trunc(argv[[1]]);");
        check("TestrGenBuiltintrunc_testtrunc4_e12db55cc85e3df7618a7599b17fba35");
    }

    @Test
    public void TestrGenBuiltintruncDate_testtruncDate1_5da598ced0e9c421afe1d67b082e9332() {
        assertEval("argv <- structure(list(x = structure(-3620.8, class = 'Date')),     .Names = 'x');do.call('trunc.Date', argv)");
        check("TestrGenBuiltintruncDate_testtruncDate1_5da598ced0e9c421afe1d67b082e9332");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof12_870bbb98dd49f99f2f2ca2640cc327a6() {
        assertEval("argv <- list(structure(c('Min.   : 1.000  ', '1st Qu.: 9.000  ', 'Median :18.000  ', 'Mean   :14.742  ', '3rd Qu.:20.000  ', 'Max.   :23.000  ', NA, 'Min.   :5.0000  ', '1st Qu.:5.3000  ', 'Median :6.1000  ', 'Mean   :6.0841  ', '3rd Qu.:6.6000  ', 'Max.   :7.7000  ', NA, 'Min.   :  1.000  ', '1st Qu.: 24.250  ', 'Median : 56.500  ', 'Mean   : 56.928  ', '3rd Qu.: 86.750  ', 'Max.   :117.000  ', 'NA's   :16  ', 'Min.   :  0.500  ', '1st Qu.: 11.325  ', 'Median : 23.400  ', 'Mean   : 45.603  ', '3rd Qu.: 47.550  ', 'Max.   :370.000  ', NA, 'Min.   :0.00300  ', '1st Qu.:0.04425  ', 'Median :0.11300  ', 'Mean   :0.15422  ', '3rd Qu.:0.21925  ', 'Max.   :0.81000  ', NA), .Dim = c(7L, 5L), .Dimnames = list(c('', '', '', '', '', '', ''), c('    event', '     mag', '   station', '     dist', '    accel')))); .Internal(typeof(argv[[1]]))");
        check("TestrGenBuiltintypeof_testtypeof12_870bbb98dd49f99f2f2ca2640cc327a6");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof35_b50e3d65dd4f48d724fb60e494c9b309() {
        assertEval("argv <- structure(list(x = function(file = ifelse(onefile, 'Rplots.pdf',     'Rplot%03d.pdf'), width, height, onefile, family, title,     fonts, version, paper, encoding, bg, fg, pointsize, pagecentre,     colormodel, useDingbats, useKerning, fillOddEven, compress) {    initPSandPDFfonts()    new <- list()    if (!missing(width)) new$width <- width    if (!missing(height)) new$height <- height    if (!missing(onefile)) new$onefile <- onefile    if (!missing(title)) new$title <- title    if (!missing(fonts)) new$fonts <- fonts    if (!missing(version)) new$version <- version    if (!missing(paper)) new$paper <- paper    if (!missing(encoding)) new$encoding <- encoding    if (!missing(bg)) new$bg <- bg    if (!missing(fg)) new$fg <- fg    if (!missing(pointsize)) new$pointsize <- pointsize    if (!missing(pagecentre)) new$pagecentre <- pagecentre    if (!missing(colormodel)) new$colormodel <- colormodel    if (!missing(useDingbats)) new$useDingbats <- useDingbats    if (!missing(useKerning)) new$useKerning <- useKerning    if (!missing(fillOddEven)) new$fillOddEven <- fillOddEven    if (!missing(compress)) new$compress <- compress    old <- check.options(new, name.opt = '.PDF.Options', envir = .PSenv)    if (!missing(family) && (inherits(family, 'Type1Font') ||         inherits(family, 'CIDFont'))) {        enc <- family$encoding        if (inherits(family, 'Type1Font') && !is.null(enc) &&             enc != 'default' && (is.null(old$encoding) || old$encoding ==             'default')) old$encoding <- enc        family <- family$metrics    }    if (is.null(old$encoding) || old$encoding == 'default') old$encoding <- guessEncoding()    if (!missing(family)) {        if (length(family) == 4L) {            family <- c(family, 'Symbol.afm')        } else if (length(family) == 5L) {        } else if (length(family) == 1L) {            pf <- pdfFonts(family)[[1L]]            if (is.null(pf)) stop(gettextf('unknown family '%s'',                 family), domain = NA)            matchFont(pf, old$encoding)        } else stop('invalid 'family' argument')        old$family <- family    }    version <- old$version    versions <- c('1.1', '1.2', '1.3', '1.4', '1.5', '1.6', '1.7',         '2.0')    if (version %in% versions) version <- as.integer(strsplit(version,         '[.]')[[1L]]) else stop('invalid PDF version')    onefile <- old$onefile    if (!checkIntFormat(file)) stop(gettextf('invalid 'file' argument '%s'',         file), domain = NA)    .External(C_PDF, file, old$paper, old$family, old$encoding,         old$bg, old$fg, old$width, old$height, old$pointsize,         onefile, old$pagecentre, old$title, old$fonts, version[1L],         version[2L], old$colormodel, old$useDingbats, old$useKerning,         old$fillOddEven, old$compress)    invisible()}), .Names = 'x');do.call('typeof', argv)");
        check("TestrGenBuiltintypeof_testtypeof35_b50e3d65dd4f48d724fb60e494c9b309");
    }

    @Test
    public void TestrGenBuiltintypeof_testtypeof4_ae34edc347bf43e32930fd67214bce28() {
        assertEval("argv <- list(structure(function (x, y = NULL) standardGeneric('tcrossprod'), target = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), defined = structure('ANY', class = structure('signature', package = 'methods'), .Names = 'x', package = 'methods'), generic = character(0), class = structure('MethodDefinition', package = 'methods'))); .Internal(typeof(argv[[1]]))");
        check("TestrGenBuiltintypeof_testtypeof4_ae34edc347bf43e32930fd67214bce28");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass12_764a8bc86f3cdcdee4acf3f202b3562a() {
        assertEval("argv <- list(structure(list(`log(x)` = c(0, 0.693147180559945, 1.09861228866811, 1.38629436111989, 1.6094379124341, 1.79175946922805, 1.94591014905531, 2.07944154167984, 2.19722457733622, 2.30258509299405, 2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809), `log(z)` = c(2.39789527279837, 2.484906649788, 2.56494935746154, 2.63905732961526, 2.70805020110221, 2.77258872223978, 2.83321334405622, 2.89037175789616, 2.94443897916644, 2.99573227355399, 3.04452243772342, 3.09104245335832, 3.13549421592915, 3.17805383034795, 3.2188758248682, 3.25809653802148, 3.29583686600433, 3.3322045101752, 3.36729582998647, 3.40119738166216, 3.43398720448515, 3.46573590279973, 3.49650756146648, 3.52636052461616, 3.55534806148941, 3.58351893845611, 3.61091791264422, 3.63758615972639, 3.66356164612965, 3.68887945411394, 3.71357206670431, 3.73766961828337, 3.76120011569356, 3.78418963391826, 3.80666248977032, 3.8286413964891, 3.85014760171006, 3.87120101090789, 3.89182029811063, 3.91202300542815, 3.93182563272433, 3.95124371858143, 3.97029191355212, 3.98898404656427, 4.00733318523247, 4.02535169073515, 4.04305126783455, 4.06044301054642, 4.07753744390572, 4.0943445622221, 4.11087386417331, 4.12713438504509, 4.14313472639153, 4.15888308335967, 4.17438726989564, 4.18965474202643, 4.20469261939097, 4.21950770517611, 4.23410650459726, 4.24849524204936, 4.26267987704132, 4.27666611901606, 4.29045944114839, 4.30406509320417, 4.31748811353631, 4.33073334028633, 4.34380542185368, 4.35670882668959, 4.36944785246702, 4.38202663467388, 4.39444915467244, 4.40671924726425, 4.4188406077966, 4.43081679884331, 4.44265125649032, 4.45434729625351, 4.46590811865458, 4.47733681447821, 4.48863636973214, 4.49980967033027, 4.51085950651685, 4.52178857704904, 4.53259949315326, 4.54329478227, 4.55387689160054, 4.56434819146784, 4.57471097850338, 4.58496747867057, 4.59511985013459, 4.60517018598809, 4.61512051684126, 4.62497281328427, 4.63472898822964, 4.64439089914137, 4.65396035015752, 4.66343909411207, 4.67282883446191, 4.68213122712422, 4.69134788222914, 4.70048036579242)), .Names = c('log(x)', 'log(z)'), row.names = c(NA, 100L), terms = quote(~log(x) + log(z))));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass12_764a8bc86f3cdcdee4acf3f202b3562a");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass13_c9a078a8a83eb28341f971b032bb7914() {
        assertEval("argv <- list(structure(list(Df = c(NA, 0L), Deviance = c(NA, 0), `Resid. Df` = c(10L, 10L), `Resid. Dev` = c(2.74035772634541, 2.74035772634541)), .Names = c('Df', 'Deviance', 'Resid. Df', 'Resid. Dev'), row.names = c('NULL', 'x'), heading = 'Analysis of Deviance Table\\n\\nModel: gaussian, link: identity\\n\\nResponse: y\\n\\nTerms added sequentially (first to last)\\n\\n'));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass13_c9a078a8a83eb28341f971b032bb7914");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass14_690f6fad5e4b28126086c38091f955a6() {
        assertEval("argv <- list(list(structure(list(title = 'foreign: Read Data Stored by Minitab, S, SAS, SPSS, Stata, Systat, dBase,\\n...', author = structure(list(structure(list(given = 'R Core Team', family = NULL, role = c('aut', 'cph', 'cre'), email = 'R-core@R-project.org', comment = NULL), .Names = c('given', 'family', 'role', 'email', 'comment'))), class = 'person'), year = '2013', note = 'R package version 0.8-53', url = 'http://CRAN.R-project.org/package=foreign'), .Names = c('title', 'author', 'year', 'note', 'url'), bibtype = 'Manual', textVersion = 'R Core Team (2013). foreign: Read Data Stored by Minitab, S, SAS, SPSS, Stata, Systat, dBase,\\n.... R package version 0.8-53. http://CRAN.R-project.org/package=foreign', header = 'To cite package ‘foreign’ in publications use:')));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass14_690f6fad5e4b28126086c38091f955a6");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass19_73436a7059ef60fbf05daf2f89349a67() {
        assertEval("argv <- list(structure(list(b = structure(c(3L, 1L, 2L), .Label = c('A', 'B', 'C'), class = 'factor'), a = structure(c(1386423981.90268, 1386403981.90268, 1386413981.90268), class = c('POSIXct', 'POSIXt'))), .Names = c('b', 'a'), row.names = c(3L, 1L, 2L)));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass19_73436a7059ef60fbf05daf2f89349a67");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass2_7c7ca0ca3d8df49ebef4cedfb1f43f49() {
        assertEval("argv <- list(structure(list(Employed = c(60.323, 61.122, 60.171, 61.187, 63.221, 63.639, 64.989, 63.761, 66.019, 67.857, 68.169, 66.513, 68.655, 69.564, 69.331, 70.551), GNP.deflator = c(83, 88.5, 88.2, 89.5, 96.2, 98.1, 99, 100, 101.2, 104.6, 108.4, 110.8, 112.6, 114.2, 115.7, 116.9), GNP = c(234.289, 259.426, 258.054, 284.599, 328.975, 346.999, 365.385, 363.112, 397.469, 419.18, 442.769, 444.546, 482.704, 502.601, 518.173, 554.894), Unemployed = c(235.6, 232.5, 368.2, 335.1, 209.9, 193.2, 187, 357.8, 290.4, 282.2, 293.6, 468.1, 381.3, 393.1, 480.6, 400.7), Armed.Forces = c(159, 145.6, 161.6, 165, 309.9, 359.4, 354.7, 335, 304.8, 285.7, 279.8, 263.7, 255.2, 251.4, 257.2, 282.7), Population = c(107.608, 108.632, 109.773, 110.929, 112.075, 113.27, 115.094, 116.219, 117.388, 118.734, 120.445, 121.95, 123.366, 125.368, 127.852, 130.081), Year = 1947:1962), .Names = c('Employed', 'GNP.deflator', 'GNP', 'Unemployed', 'Armed.Forces', 'Population', 'Year'), terms = quote(Employed ~ GNP.deflator + GNP + Unemployed +     Armed.Forces + Population + Year), row.names = 1947:1962));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass2_7c7ca0ca3d8df49ebef4cedfb1f43f49");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass20_e774e5fad26496ce8cd0f66cd97700b1() {
        assertEval("argv <- list(c(-2.20207097779183e-13, -2.19098062290287e-13, -2.17989026801391e-13, -2.16879991312495e-13, -2.15770955823599e-13, -2.14661920334703e-13, -2.13552884845807e-13, -2.12443849356911e-13, -2.11334813868015e-13, -2.10225778379119e-13, -2.09116742890223e-13, -2.08007707401327e-13, -2.06898671912432e-13, -2.05789636423536e-13, -2.0468060093464e-13, -2.03571565445744e-13, -2.02462529956848e-13, -2.01353494467952e-13, -2.00244458979056e-13, -1.9913542349016e-13, -1.98026388001264e-13, -1.96917352512368e-13, -1.95808317023472e-13, -1.94699281534576e-13, -1.93590246045681e-13, -1.92481210556785e-13, -1.91372175067889e-13, -1.90263139578993e-13, -1.89154104090097e-13, -1.88045068601201e-13, -1.86936033112305e-13, -1.85826997623409e-13, -1.84717962134513e-13, -1.83608926645617e-13, -1.82499891156721e-13, -1.81390855667826e-13, -1.8028182017893e-13, -1.79172784690034e-13, -1.78063749201138e-13, -1.76954713712242e-13, -1.75845678223346e-13, -1.7473664273445e-13, -1.73627607245554e-13, -1.72518571756658e-13, -1.71409536267762e-13, -1.70300500778866e-13, -1.6919146528997e-13, -1.68082429801075e-13, -1.66973394312179e-13, -1.65864358823283e-13, -1.64755323334387e-13, -1.63646287845491e-13, -1.62537252356595e-13, -1.61428216867699e-13, -1.60319181378803e-13, -1.59210145889907e-13, -1.58101110401011e-13, -1.56992074912115e-13, -1.5588303942322e-13, -1.54774003934324e-13, -1.53664968445428e-13, -1.52555932956532e-13, -1.51446897467636e-13, -1.5033786197874e-13, -1.49228826489844e-13, -1.48119791000948e-13, -1.47010755512052e-13, -1.45901720023156e-13, -1.4479268453426e-13, -1.43683649045365e-13, -1.42574613556469e-13, -1.41465578067573e-13, -1.40356542578677e-13, -1.39247507089781e-13, -1.38138471600885e-13, -1.37029436111989e-13, -1.35920400623093e-13, -1.34811365134197e-13, -1.33702329645301e-13, -1.32593294156405e-13, -1.3148425866751e-13, -1.30375223178614e-13, -1.29266187689718e-13, -1.28157152200822e-13, -1.27048116711926e-13, -1.2593908122303e-13, -1.24830045734134e-13, -1.23721010245238e-13, -1.22611974756342e-13, -1.21502939267446e-13, -1.2039390377855e-13, -1.19284868289654e-13, -1.18175832800759e-13, -1.17066797311863e-13, -1.15957761822967e-13, -1.14848726334071e-13, -1.13739690845175e-13, -1.12630655356279e-13, -1.11521619867383e-13, -1.10412584378487e-13, -1.09303548889591e-13, -1.08194513400695e-13, -1.07085477911799e-13, -1.05976442422904e-13, -1.04867406934008e-13, -1.03758371445112e-13, -1.02649335956216e-13, -1.0154030046732e-13, -1.00431264978424e-13, -9.9322229489528e-14, -9.82131940006321e-14, -9.71041585117362e-14, -9.59951230228403e-14, -9.48860875339444e-14, -9.37770520450484e-14, -9.26680165561525e-14, -9.15589810672566e-14, -9.04499455783607e-14, -8.93409100894648e-14, -8.82318746005689e-14, -8.7122839111673e-14, -8.60138036227771e-14, -8.49047681338812e-14, -8.37957326449853e-14, -8.26866971560894e-14, -8.15776616671935e-14, -8.04686261782975e-14, -7.93595906894016e-14, -7.82505552005057e-14, -7.71415197116098e-14, -7.60324842227139e-14, -7.49234487338179e-14, -7.3814413244922e-14, -7.27053777560261e-14, -7.15963422671302e-14, -7.04873067782343e-14, -6.93782712893384e-14, -6.82692358004425e-14, -6.71602003115466e-14, -6.60511648226507e-14, -6.49421293337547e-14, -6.38330938448588e-14, -6.27240583559629e-14, -6.1615022867067e-14, -6.05059873781711e-14, -5.93969518892752e-14, -5.82879164003793e-14, -5.71788809114834e-14, -5.60698454225874e-14, -5.49608099336915e-14, -5.38517744447956e-14, -5.27427389558997e-14, -5.16337034670038e-14, -5.05246679781079e-14, -4.9415632489212e-14, -4.83065970003161e-14, -4.71975615114202e-14, -4.60885260225244e-14, -4.49794905336287e-14, -4.38704550447331e-14, -4.27614195558379e-14, -4.16523840669435e-14, -4.05433485780505e-14, -3.94343130891604e-14, -3.83252776002761e-14, -3.72162421114035e-14, -3.61072066225542e-14, -3.49981711337514e-14, -3.38891356450417e-14, -3.27801001565183e-14, -3.16710646683675e-14, -3.05620291809617e-14, -2.9452993695046e-14, -2.83439582121106e-14, -2.72349227351356e-14, -2.61258872700815e-14, -2.50168518288693e-14, -2.39078164353409e-14, -2.27987811371798e-14, -2.16897460297536e-14, -2.05807113037972e-14, -1.94716773407802e-14, -1.83626449036421e-14, -1.72536155182618e-14, -1.61445922363971e-14, -1.50355811615637e-14, -1.39265945007928e-14, -1.28176566681469e-14, -1.1708816491751e-14, -1.0600171627855e-14, -9.49191738895913e-15));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass20_e774e5fad26496ce8cd0f66cd97700b1");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass21_dd080544114669b1ebe77c2668e54848() {
        assertEval("argv <- list(structure(c(325, 285, 706, 885), .Dim = c(1L, 4L), row.vars = structure(list(), .Names = character(0)), col.vars = structure(list(Class = c('1st', '2nd', '3rd', 'Crew')), .Names = 'Class')));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass21_dd080544114669b1ebe77c2668e54848");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass23_e355f17cff3f1df163857548d5ca9995() {
        assertEval("argv <- list(quote(y ~ a + b:c + d + e + e:d));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass23_e355f17cff3f1df163857548d5ca9995");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass25_2daae08beb325301e01b1e9ec5acfc78() {
        assertEval("argv <- list(structure(list(srcfile = '/home/lzhao/tmp/RtmpYl9n1I/R.INSTALL2aa24b6697e5/MASS/R/negbin.R', frow = 135L, lrow = 137L), .Names = c('srcfile', 'frow', 'lrow'), row.names = c(NA, -1L)));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass25_2daae08beb325301e01b1e9ec5acfc78");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass26_fb09ecfada4d63ab789ff35a5dffdfbc() {
        assertEval("argv <- list(structure(list(a = 1), .Dim = 1L, .Dimnames = list('a')));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass26_fb09ecfada4d63ab789ff35a5dffdfbc");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass27_2f415e16e81b782e86d57c91bc4c7a99() {
        assertEval("argv <- list(list(structure(list(label = 'FALSE', x = structure(0, unit = 'npc', valid.unit = 0L, class = 'unit'), y = structure(0.5, unit = 'npc', valid.unit = 0L, class = 'unit'), just = c('left', 'centre'), hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, name = 'GRID.text.106', gp = structure(list(), class = 'gpar'), vp = NULL), .Names = c('label', 'x', 'y', 'just', 'hjust', 'vjust', 'rot', 'check.overlap', 'name', 'gp', 'vp'), class = c('text', 'grob', 'gDesc'))));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass27_2f415e16e81b782e86d57c91bc4c7a99");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass29_1260690d2a61b4028298f4e77a61db8a() {
        assertEval("argv <- list(structure(list(surname = structure('R Core', class = 'AsIs'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 7L));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass29_1260690d2a61b4028298f4e77a61db8a");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass3_82a3969871acb0e54b87f1408f59809d() {
        assertEval("argv <- list(structure(list(x = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)), .Names = 'x', row.names = c(NA, 10L)));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass3_82a3969871acb0e54b87f1408f59809d");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass31_77b7f7e76b159e14d46c842fa5becd87() {
        assertEval("argv <- list(structure(list(), .Names = character(0), row.names = c(NA, -10L), terms = quote(~0)));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass31_77b7f7e76b159e14d46c842fa5becd87");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass32_6add8fd2ad31c7357525c0421e3abc15() {
        assertEval("argv <- list(quote(breaks ~ (wool + tension)^2));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass32_6add8fd2ad31c7357525c0421e3abc15");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass33_04d15faf34540d3b15ff9330615e731f() {
        assertEval("argv <- list(structure(c(1L, 2L, 1L), .Dim = 3L, .Dimnames = structure(list(c('1', '2', NA)), .Names = '')));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass33_04d15faf34540d3b15ff9330615e731f");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass34_a14c27890263e329a9068f79ad678a89() {
        assertEval("argv <- list(structure(list(`cbind(A, B, C, D)` = structure(c(0.696706709347165, 0.362357754476673, -0.0291995223012888, 0.696706709347165, 0.696706709347165, -0.0291995223012888, 0.696706709347165, -0.0291995223012888, 0.362357754476673, 0.696706709347165, -0.0291995223012888, 0.362357754476673, -0.416146836547142, 0.362357754476673, 0.696706709347165, 0.696706709347165, 0.362357754476673, -0.416146836547142, -0.0291995223012888, -0.416146836547142, 0.696706709347165, -0.416146836547142, 0.362357754476673, -0.0291995223012888, 0.717356090899523, 0.932039085967226, 0.999573603041505, 0.717356090899523, 0.717356090899523, 0.999573603041505, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.717356090899523, 0.999573603041505, 0.932039085967226, 0.909297426825682, 0.932039085967226, 0.717356090899523, 0.717356090899523, 0.932039085967226, 0.909297426825682, 0.999573603041505, 0.909297426825682, 0.717356090899523, 0.909297426825682, 0.932039085967226, 0.999573603041505, -0.0291995223012888, -0.737393715541246, -0.998294775794753, -0.0291995223012888, -0.0291995223012888, -0.998294775794753, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.0291995223012888, -0.998294775794753, -0.737393715541246, -0.653643620863612, -0.737393715541246, -0.0291995223012888, -0.0291995223012888, -0.737393715541246, -0.653643620863612, -0.998294775794753, -0.653643620863612, -0.0291995223012888, -0.653643620863612, -0.737393715541246, -0.998294775794753, 0.999573603041505, 0.67546318055115, -0.0583741434275801, 0.999573603041505, 0.999573603041505, -0.0583741434275801, 0.999573603041505, -0.0583741434275801, 0.67546318055115, 0.999573603041505, -0.0583741434275801, 0.67546318055115, -0.756802495307928, 0.67546318055115, 0.999573603041505, 0.999573603041505, 0.67546318055115, -0.756802495307928, -0.0583741434275801, -0.756802495307928, 0.999573603041505, -0.756802495307928, 0.67546318055115, -0.0583741434275801), .Dim = c(24L, 4L), .Dimnames = list(NULL, c('A', 'B', 'C', 'D'))), groups = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c('1', '2', '3'), class = 'factor')), .Names = c('cbind(A, B, C, D)', 'groups'), terms = quote(cbind(A, B, C, D) ~ groups), row.names = c(NA, 24L)));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass34_a14c27890263e329a9068f79ad678a89");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass35_9e6cf7a568e6e9123ea5470c7bf22044() {
        assertEval("argv <- list(structure(list(group = structure(c(1L, 1L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = 'group', row.names = 1:2, terms = quote(~group)));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass35_9e6cf7a568e6e9123ea5470c7bf22044");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass36_4b5aea621c2da6c20db6339a2a8b2a33() {
        assertEval("argv <- list(structure(c(2671, 6.026e+77, 3.161e+152, 3.501e+299, 2.409e+227, 1.529e+302), .Names = c('Min.', '1st Qu.', 'Median', 'Mean', '3rd Qu.', 'Max.')));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass36_4b5aea621c2da6c20db6339a2a8b2a33");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass4_19ad21dba530b902071f33b093710517() {
        assertEval("argv <- list(structure(list(X1.10 = 1:10, z = structure(list(x = 1:10, yyy = 11:20), .Names = c('x', 'yyy'), row.names = c(NA, -10L), class = 'data.frame')), .Names = c('X1.10', 'z'), row.names = c(NA, -10L)));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass4_19ad21dba530b902071f33b093710517");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass5_23f1e5fa8f77173dbf02485b5fc6ec43() {
        assertEval("argv <- list(structure(list(Df = c(1, 1, 1, NA, 1), `Sum of Sq` = c(0.109090049888117, 0.246974722154086, 2.97247824113524, NA, 25.9509113775335), RSS = c(47.9727294003871, 48.1106140726531, 50.8361175916342, 47.863639350499, 73.8145507280325), AIC = c(24.9738836085411, 25.0111950072736, 25.7275503692601, 26.9442879283302, 30.5758847476115)), .Names = c('Df', 'Sum of Sq', 'RSS', 'AIC'), row.names = c('- x3', '- x4', '- x2', '<none>', '- x1')));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass5_23f1e5fa8f77173dbf02485b5fc6ec43");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass6_9344162405436c5cd2aff424385a12d8() {
        assertEval("argv <- list(structure(list(surname = structure(2L, .Label = c('McNeil', 'R Core', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'), nationality = structure(NA_integer_, .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(NA_integer_, .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = 7L));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass6_9344162405436c5cd2aff424385a12d8");
    }

    @Test
    public void TestrGenBuiltinunclass_testunclass8_e3a29c8e4b4f13242dfda5f928d7cef8() {
        assertEval("argv <- list(structure(list(`cbind(w = weight, w2 = weight^2)` = structure(c(4.17, 5.58, 5.18, 6.11, 4.5, 4.61, 5.17, 4.53, 5.33, 5.14, 4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69, 17.3889, 31.1364, 26.8324, 37.3321, 20.25, 21.2521, 26.7289, 20.5209, 28.4089, 26.4196, 23.1361, 17.3889, 19.4481, 12.8881, 34.4569, 14.6689, 36.3609, 23.9121, 18.6624, 21.9961), .Dim = c(20L, 2L), .Dimnames = list(NULL, c('w', 'w2'))), group = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c('Ctl', 'Trt'), class = 'factor')), .Names = c('cbind(w = weight, w2 = weight^2)', 'group'), terms = quote(cbind(w = weight, w2 = weight^2) ~ group), row.names = c(NA, 20L)));unclass(argv[[1]]);");
        check("TestrGenBuiltinunclass_testunclass8_e3a29c8e4b4f13242dfda5f928d7cef8");
    }

    @Test
    public void TestrGenBuiltinunique_testunique11_0f0afad996049368a67f37536ded7d8b() {
        assertEval("argv <- list(structure(c(20.65, NA, NA, 40.25, 61.9, 55.27, 58.13, 54.04, 21.15, 18.32, NA, 65.84, 58.77, 53.99, 63.37, 64.81, 47.11, 9.65, 67.1, 48.83, 57.92, 69.5, 73.95, 5.46, 49.92, 54.21, 61.38, 56.66, 60.14, 56.68, NA, 53.13, 39.7, 74.83, 59.73, NA, 67.06, 67.99, 60.6, 4.63, 71.09, 43.4, 21.9, 61.45, 77.98, 36.67, 69.95, 55.26, 63.24, NA), .Names = c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming')), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique11_0f0afad996049368a67f37536ded7d8b");
    }

    @Test
    public void TestrGenBuiltinunique_testunique13_466ce4857e42db108185182d4b376855() {
        assertEval("argv <- list(list(NULL, NULL, NULL, NULL, NULL), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique13_466ce4857e42db108185182d4b376855");
    }

    @Test
    public void TestrGenBuiltinunique_testunique14_d281c16643388c586de96818115fa5df() {
        assertEval("argv <- list(c(9.18429112061858e-05, 0.0238094009226188, 0.0498038685764186), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique14_d281c16643388c586de96818115fa5df");
    }

    @Test
    public void TestrGenBuiltinunique_testunique18_eb2d891bdbdeeb0b2c961e4d3154ecc9() {
        assertEval("argv <- list(c(3, 4, 5, 11, 10, 9, 8, 8, 9, 10, 11, 12, 13), FALSE, TRUE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique18_eb2d891bdbdeeb0b2c961e4d3154ecc9");
    }

    @Test
    public void TestrGenBuiltinunique_testunique2_ac2895891ed0fff68bd07e7be2d6c109() {
        assertEval("argv <- list(c('a', 'b', 'c', 'c', 'b', 'a', 'NA', 'd', 'd', NA), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique2_ac2895891ed0fff68bd07e7be2d6c109");
    }

    @Test
    public void TestrGenBuiltinunique_testunique21_683edeadccde1e6d4f1c955b6902f18a() {
        assertEval("argv <- list(structure(list(A = c(3L, 5L), B = c(3L, 5L), C = c(3L, 5L), D = c(3L, 5L)), .Names = c('A', 'B', 'C', 'D')), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique21_683edeadccde1e6d4f1c955b6902f18a");
    }

    @Test
    public void TestrGenBuiltinunique_testunique24_eebb204d276475a1fc3e17ee62af5475() {
        assertEval("argv <- list(list('numeric_version', 'numeric_version'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique24_eebb204d276475a1fc3e17ee62af5475");
    }

    @Test
    public void TestrGenBuiltinunique_testunique25_5b14aff6b14152235430c9bd3799c5c8() {
        assertEval("argv <- list(structure(list(c0 = structure(integer(0), .Label = character(0), class = 'factor')), .Names = 'c0', row.names = character(0), class = structure('integer(0)', .Names = 'c0')), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique25_5b14aff6b14152235430c9bd3799c5c8");
    }

    @Test
    public void TestrGenBuiltinunique_testunique26_1a7b4529c09610720ed8391bef23c2e9() {
        assertEval("argv <- list(list('Math2', 'round', 'signif'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique26_1a7b4529c09610720ed8391bef23c2e9");
    }

    @Test
    public void TestrGenBuiltinunique_testunique27_6831b4b1e51babf88414d36f56dc11cc() {
        assertEval("argv <- list(list(structure('Math2', package = 'methods'), 'round', 'signif'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique27_6831b4b1e51babf88414d36f56dc11cc");
    }

    @Test
    public void TestrGenBuiltinunique_testunique33_dc7982f7d8ad764b1b73a06b45fbd49a() {
        assertEval("argv <- structure(list(x = structure(c(15, 37, 30, 18, 8, 20,     42.7, 29.3), .Dim = c(4L, 2L), .Dimnames = structure(list(Evaluation = c('very good',     'good', 'bad', 'very bad'), Location = c('city centre', 'suburbs')),     .Names = c('Evaluation', 'Location')))), .Names = 'x');do.call('unique', argv)");
        check("TestrGenBuiltinunique_testunique33_dc7982f7d8ad764b1b73a06b45fbd49a");
    }

    @Test
    public void TestrGenBuiltinunique_testunique4_10eb84e0d2dcb2035b9f0336a68e2238() {
        assertEval("argv <- list(list(c(9L, 9L), c(9L, 9L), c(9L, 9L), c(9L, 9L), c(9L, 9L), c(9L, 9L)), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique4_10eb84e0d2dcb2035b9f0336a68e2238");
    }

    @Test
    public void TestrGenBuiltinunique_testunique7_082eba594b16036fba4b798f0c39c014() {
        assertEval("argv <- list(structure(list(a = 1), .Names = 'a'), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique7_082eba594b16036fba4b798f0c39c014");
    }

    @Test
    public void TestrGenBuiltinunique_testunique9_687732fcbebb2f8bd30a841a31f4d5a4() {
        assertEval("argv <- list(list(FALSE), FALSE, FALSE, NA); .Internal(unique(argv[[1]], argv[[2]], argv[[3]], argv[[4]]))");
        check("TestrGenBuiltinunique_testunique9_687732fcbebb2f8bd30a841a31f4d5a4");
    }

    @Test
    public void TestrGenBuiltinunitsassign__testunitsassign_1_2c87fe903851db3f18f0b22fb1584518() {
        assertEval("argv <- structure(list(x = structure(500, units = 'secs', class = 'difftime',     .Names = 'a'), value = 'mins'), .Names = c('x', 'value'));do.call('units<-', argv)");
        check("TestrGenBuiltinunitsassign__testunitsassign_1_2c87fe903851db3f18f0b22fb1584518");
    }

    @Test
    public void TestrGenBuiltinunitsassign_difftime_testunitsassign_difftime1_89ecf98c73b6274d721260d35b2439ea() {
        assertEval("argv <- structure(list(x = structure(500, units = 'secs', class = 'difftime',     .Names = 'a'), value = 'mins'), .Names = c('x', 'value'));do.call('units<-.difftime', argv)");
        check("TestrGenBuiltinunitsassign_difftime_testunitsassign_difftime1_89ecf98c73b6274d721260d35b2439ea");
    }

    @Test
    public void TestrGenBuiltinunlink_testunlink1_5ead42fd735cfdc73231e3241d3171cb() {
        assertEval("argv <- list('/tmp/RtmptPgrXI/Pkgs', TRUE, FALSE); .Internal(unlink(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlink_testunlink1_5ead42fd735cfdc73231e3241d3171cb");
    }

    @Test
    public void TestrGenBuiltinunlink_testunlink2_d0c60d3877e7fcf81d9cd4025cd65eb7() {
        assertEval("argv <- list(character(0), FALSE, FALSE); .Internal(unlink(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlink_testunlink2_d0c60d3877e7fcf81d9cd4025cd65eb7");
    }

    @Test
    public void TestrGenBuiltinunlink_testunlink3_9749c93d8450efa94a884a7afc15da08() {
        assertEval("argv <- list('/home/lzhao/tmp/Rtmphu0Cms/file74e1676db2e7', FALSE, FALSE); .Internal(unlink(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlink_testunlink3_9749c93d8450efa94a884a7afc15da08");
    }

    @Test
    public void TestrGenBuiltinunlink_testunlink5_230f648ba6f937741a2d84efc174c2a5() {
        assertEval("argv <- structure(list(x = '/tmp/RtmpHjOdmd/file7ac7792619bc'),     .Names = 'x');do.call('unlink', argv)");
        check("TestrGenBuiltinunlink_testunlink5_230f648ba6f937741a2d84efc174c2a5");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist1_462a8b5b48a836fbabdf797000939a79() {
        assertEval("argv <- list(list('yaxp'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist1_462a8b5b48a836fbabdf797000939a79");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist10_d408ae7f928eb107b40a12dfa3a841f6() {
        assertEval("argv <- list(structure('     \\'Jetz no chli züritüütsch: (noch ein bißchen Zürcher deutsch)\\')\\n', Rd_tag = 'RCODE'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist10_d408ae7f928eb107b40a12dfa3a841f6");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist11_8d14d2b710fe2eb57218a1ee28e220fa() {
        assertEval("argv <- list(structure(list(`1 sec` = 345600, `2 secs` = 172800, `5 secs` = 69120, `10 secs` = 34560, `15 secs` = 23040, `30 secs` = 11520, `1 min` = 5760, `2 mins` = 2880, `5 mins` = 1152, `10 mins` = 576, `15 mins` = 384, `30 mins` = 192, `1 hour` = 96, `3 hours` = 32, `6 hours` = 16, `12 hours` = 8, `1 DSTday` = 4, `2 DSTdays` = 2, `1 week` = 0.571428571428571, halfmonth = 0.262833675564682, `1 month` = 0.131416837782341, `3 months` = 0.0438056125941136, `6 months` = 0.0219028062970568, `1 year` = 0.0109514031485284,     `2 years` = 0.0054757015742642, `5 years` = 0.00219028062970568, `10 years` = 0.00109514031485284, `20 years` = 0.00054757015742642, `50 years` = 0.000219028062970568, `100 years` = 0.000109514031485284, `200 years` = 5.4757015742642e-05, `500 years` = 2.19028062970568e-05, `1000 years` = 1.09514031485284e-05), .Names = c('1 sec', '2 secs', '5 secs', '10 secs', '15 secs', '30 secs', '1 min', '2 mins', '5 mins', '10 mins', '15 mins', '30 mins', '1 hour', '3 hours', '6 hours', '12 hours', '1 DSTday', '2 DSTdays', '1 week', 'halfmonth', '1 month', '3 months', '6 months', '1 year', '2 years', '5 years', '10 years', '20 years', '50 years', '100 years', '200 years', '500 years', '1000 years')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist11_8d14d2b710fe2eb57218a1ee28e220fa");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist12_85d06985c85e64784174987e13a99f4a() {
        assertEval("argv <- list(structure(list(vector = TRUE, atomicVector = TRUE, index = TRUE, numIndex = TRUE, numLike = TRUE, number = TRUE, replValue = TRUE), .Names = c('vector', 'atomicVector', 'index', 'numIndex', 'numLike', 'number', 'replValue')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist12_85d06985c85e64784174987e13a99f4a");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist13_9d6d7ff50cb7c1aa8ff96b10b64cd554() {
        assertEval("argv <- list(structure(list(a = 6:10), .Names = 'a', row.names = 6:10), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist13_9d6d7ff50cb7c1aa8ff96b10b64cd554");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist14_e8fc45595bcdcf7f18877ce66be8cb5d() {
        assertEval("argv <- list(structure(list(`2005` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2006` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2007` = structure(c(31L, 28L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2008` = structure(c(31L, 29L, 31L, 30L, 31L, 30L, 31L, 31L, 30L, 31L, 30L, 31L), .Dim = 12L, .Dimnames = structure(list(c('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')), .Names = ''), class = 'table'), `2009` = structure(1L, .Dim = 1L, .Dimnames = structure(list('01'), .Names = ''), class = 'table')), .Names = c('2005', '2006', '2007', '2008', '2009')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist14_e8fc45595bcdcf7f18877ce66be8cb5d");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist15_e68e9d14482d9697d63ad9e689108814() {
        assertEval("argv <- list(list(structure(list(structure(c(1395082040.29392, 1395082040.29392, 1395082040.29392, 1395082040.29392, 1395082040.29392), class = c('AsIs', 'POSIXct', 'POSIXt'))), row.names = c(NA, -5L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist15_e68e9d14482d9697d63ad9e689108814");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist16_3518b37ddf6d7bb6cbec438ac99b48b0() {
        assertEval("argv <- list(structure('print(.leap.seconds, tz = \\'PST8PDT\\')  # and in Seattle's\\n', Rd_tag = 'RCODE'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist16_3518b37ddf6d7bb6cbec438ac99b48b0");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist17_68d3a5935e03f2754906437f2c98ff76() {
        assertEval("argv <- list(list(TRUE, TRUE, TRUE, TRUE), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist17_68d3a5935e03f2754906437f2c98ff76");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist18_cf16fc3321cb43d813f1225989a268e9() {
        assertEval("argv <- list(list(c(NA_real_, NA_real_), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'),     c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi'), c('Svansota', 'No. 462', 'Manchuria', 'No. 475', 'Velvet', 'Peatland', 'Glabron', 'No. 457', 'Wisconsin No. 38', 'Trebi')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist18_cf16fc3321cb43d813f1225989a268e9");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist19_e90230a57eda2ea70728cf949b1c690f() {
        assertEval("argv <- list(list(structure(list('/home/lzhao/tmp/RtmpTzriDZ/R.INSTALL30d4108a07be/mgcv/R/gamm.r'), row.names = c(NA, -1L), class = 'data.frame'), structure(list(1522L), row.names = c(NA, -1L), class = 'data.frame'), structure(list(1522L), row.names = c(NA, -1L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist19_e90230a57eda2ea70728cf949b1c690f");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist2_0cdeaeab670601c854e7eb393afe4cad() {
        assertEval("argv <- list(list(c(13823, NA)), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist2_0cdeaeab670601c854e7eb393afe4cad");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist20_ec280af06edcb2c8983e759d5e539d6c() {
        assertEval("argv <- list(structure(list(`1` = 2.47032822920623e-323), .Names = '1'), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist20_ec280af06edcb2c8983e759d5e539d6c");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist21_ee8b04513172989cbdbc2e49afe9d0e3() {
        assertEval("argv <- list(structure(list(`1` = 5900.92307692308, `2` = 6784.76923076923), .Names = c('1', '2')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist21_ee8b04513172989cbdbc2e49afe9d0e3");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist22_0e410f0f509e89fa627f4eeae4615b5a() {
        assertEval("argv <- list(list(structure(list(surname = structure(c('Tukey', 'Venables', 'Tierney', 'Ripley', 'Ripley', 'McNeil'), class = 'AsIs'), nationality = structure(c(3L, 1L, 3L, 2L, 2L, 1L), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(2L, 1L, 1L, 1L, 1L, 1L), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = c('1', '2', '3', '4', '4.1', '5'), class = 'data.frame'), structure(list(title = structure(c(2L, 5L, 4L, 6L, 7L, 3L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = c(NA, 6L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist22_0e410f0f509e89fa627f4eeae4615b5a");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist23_7f64e1694a3712c52909400d5fc9b3b1() {
        assertEval("argv <- list(list(structure(c(-Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0, 0, 0), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, -Inf, 0, 0, 1, 1, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, Inf, -Inf, -Inf, -Inf, -Inf, 0, 1, 1, 1, Inf, -Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.5, 1, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.6, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.4, 0.8, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.533333333333334, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.525, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, 0, 0, 1, 2, Inf, Inf, Inf, -Inf, -Inf, 0, 0.5, 1, 2, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0, 1, 2, 2, Inf, Inf, -Inf, -Inf, -Inf, 0, 0.8, 1.6, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.3, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.4, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.2, 1.9, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.499999999999999, 1.33333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.325, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 0.5, 1.6, 2.7, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.1, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.2, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 3, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.13333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.125, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, 0, 1, 3, 4, Inf, Inf, Inf, -Inf, -Inf, 0, 1.5, 3, 4, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 2, 4, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1, 2.4, 3.8, Inf, Inf, Inf, -Inf, -Inf, 0.100000000000001, 1.5, 2.9, Inf, Inf, Inf, Inf, -Inf, -Inf, 0, 1.5, 3, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 1.5, 2.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.0666666666666664, 1.5, 2.93333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.0750000000000002, 1.5, 2.925, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL)), structure(c(-Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 2, 4, 5, Inf, Inf, Inf, -Inf, -Inf, 0, 1, 3, 5, Inf, Inf, Inf, -Inf, -Inf, -Inf, 1.5, 3.2, 4.9, Inf, Inf, Inf, -Inf, -Inf, 0.300000000000001, 2, 3.7, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.2, 2, 3.8, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.4, 2, 3.6, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.266666666666667, 2, 3.73333333333333, Inf, Inf, Inf, Inf, -Inf, -Inf, 0.275, 2, 3.725, Inf, Inf, Inf, Inf), .Dim = c(9L, 9L), .Dimnames = list(c('20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'), NULL))), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist23_7f64e1694a3712c52909400d5fc9b3b1");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist24_a0828428f1fcba3b6e4eb7e6864fd104() {
        assertEval("argv <- list(structure('# everything ', Rd_tag = 'VERB'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist24_a0828428f1fcba3b6e4eb7e6864fd104");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist25_c75b1ed028849b364b236e8a9b07d057() {
        assertEval("argv <- list(structure(list(sec = NA_real_, min = NA_integer_, hour = NA_integer_), .Names = c('sec', 'min', 'hour')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist25_c75b1ed028849b364b236e8a9b07d057");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist26_da27e26962e02bb734113c1cf3b91fe7() {
        assertEval("argv <- list(structure(list(a = list(1:5, c('A', 'B', 'C', 'D', 'E')), b = 'Z', c = NA), .Names = c('a', 'b', 'c')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist26_da27e26962e02bb734113c1cf3b91fe7");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist27_9271d18bb2626124efbee2123a7ba802() {
        assertEval("argv <- list(list(structure(list(structure(c(0.398105880367068, -0.612026393250771, 0.341119691424425, -1.12936309608079, 1.43302370170104, 1.98039989850586, -0.367221476466509, -1.04413462631653, 0.569719627442413, -0.135054603880824, 2.40161776050478, -0.0392400027331692, 0.689739362450777, 0.0280021587806661, -0.743273208882405, 0.188792299514343, -1.80495862889104, 1.46555486156289, 0.153253338211898, 2.17261167036215, 0.475509528899663, -0.709946430921815, 0.610726353489055, -0.934097631644252, -1.2536334002391, 0.291446235517463, -0.443291873218433, 0.00110535163162413, 0.0743413241516641, -0.589520946188072, -0.568668732818502, -0.135178615123832, 1.1780869965732, -1.52356680042976, 0.593946187628422, 0.332950371213518, 1.06309983727636, -0.304183923634301, 0.370018809916288, 0.267098790772231, -0.54252003099165, 1.20786780598317, 1.16040261569495, 0.700213649514998, 1.58683345454085, 0.558486425565304, -1.27659220845804, -0.573265414236886, -1.22461261489836, -0.473400636439312, -0.620366677224124, 0.0421158731442352, -0.910921648552446, 0.158028772404075, -0.654584643918818, 1.76728726937265, 0.716707476017206, 0.910174229495227, 0.384185357826345, 1.68217608051942, -0.635736453948977, -0.461644730360566, 1.43228223854166, -0.650696353310367, -0.207380743601965, -0.392807929441984, -0.319992868548507, -0.279113302976559, 0.494188331267827, -0.177330482269606, -0.505957462114257, 1.34303882517041, -0.214579408546869, -0.179556530043387, -0.100190741213562, 0.712666307051405, -0.0735644041263263, -0.0376341714670479, -0.681660478755657, -0.324270272246319, 0.0601604404345152, -0.588894486259664, 0.531496192632572, -1.51839408178679, 0.306557860789766, -1.53644982353759, -0.300976126836611, -0.528279904445006, -0.652094780680999, -0.0568967778473925, -1.91435942568001, 1.17658331201856, -1.664972436212, -0.463530401472386, -1.11592010504285, -0.750819001193448, 2.08716654562835, 0.0173956196932517, -1.28630053043433, -1.64060553441858), .Label = structure(list(c(-1.91442143130152, -0.573203408615382), c(-0.934159637265755, -0.300914121215107), c(-0.568730738440006, 0.0174576253147555), c(-0.279175308598063, 0.384247363447848), c(0.0279401531591622, 1.16046462131646), c(0.398043874745564, 2.40167976612628)), class = 'shingleLevel'), class = 'shingle')), row.names = c(NA, -100L), class = 'data.frame'), structure(list(c(0.450187101272656, -0.018559832714638, -0.318068374543844, -0.929362147453702, -1.48746031014148, -1.07519229661568, 1.00002880371391, -0.621266694796823, -1.38442684738449, 1.86929062242358, 0.425100377372448, -0.238647100913033, 1.05848304870902, 0.886422651374936, -0.619243048231147, 2.20610246454047, -0.255027030141015, -1.42449465021281, -0.144399601954219, 0.207538339232345, 2.30797839905936, 0.105802367893711, 0.456998805423414, -0.077152935356531, -0.334000842366544, -0.0347260283112762, 0.787639605630162, 2.07524500865228, 1.02739243876377, 1.2079083983867, -1.23132342155804, 0.983895570053379, 0.219924803660651, -1.46725002909224, 0.521022742648139, -0.158754604716016, 1.4645873119698, -0.766081999604665, -0.430211753928547, -0.926109497377437, -0.17710396143654, 0.402011779486338, -0.731748173119606, 0.830373167981674, -1.20808278630446, -1.04798441280774, 1.44115770684428, -1.01584746530465, 0.411974712317515, -0.38107605110892, 0.409401839650934, 1.68887328620405, 1.58658843344197, -0.330907800682766, -2.28523553529247, 2.49766158983416, 0.667066166765493, 0.5413273359637, -0.0133995231459087, 0.510108422952926, -0.164375831769667, 0.420694643254513, -0.400246743977644, -1.37020787754746, 0.987838267454879, 1.51974502549955, -0.308740569225614, -1.25328975560769, 0.642241305677824, -0.0447091368939791, -1.73321840682484, 0.00213185968026965, -0.630300333928146, -0.340968579860405, -1.15657236263585, 1.80314190791747, -0.331132036391221, -1.60551341225308, 0.197193438739481, 0.263175646405474, -0.985826700409291, -2.88892067167955, -0.640481702565115, 0.570507635920485, -0.05972327604261, -0.0981787440052344, 0.560820728620116, -1.18645863857947, 1.09677704427424, -0.00534402827816569, 0.707310667398079, 1.03410773473746, 0.223480414915304, -0.878707612866019, 1.16296455596733, -2.00016494478548, -0.544790740001725, -0.255670709156989, -0.166121036765006, 1.02046390878411)), row.names = c(NA, -100L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist27_9271d18bb2626124efbee2123a7ba802");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist28_5368038ae812d2ff830abc92574fa036() {
        assertEval("argv <- list(list(NULL), TRUE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist28_5368038ae812d2ff830abc92574fa036");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist29_2a60ac9955ad900823d69f11809e1696() {
        assertEval("argv <- list(structure(list(a = 'a', b = 2, c = 3.14159265358979+2i), .Names = c('a', 'b', 'c')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist29_2a60ac9955ad900823d69f11809e1696");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist3_ab1a74c746c3cf44665790b5325ba276() {
        assertEval("argv <- list(structure('A', .Names = 'x', package = '.GlobalEnv'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist3_ab1a74c746c3cf44665790b5325ba276");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist30_80061cf3b5c20975e86672864aab592d() {
        assertEval("argv <- list(structure(list(`1` = c(2, 1), `2` = c(3, 1.5, 1.5, 4), `3` = c(4, 2.5, 2.5, 5, 1), `4` = c(5, 3.5, 3.5, 7, 1.5, 6, 1.5), `5` = c(5, 3.5, 3.5, 8, 1.5, 6.5, 1.5, 6.5), `6` = c(6, 4.5, 4.5, 10, 2.5, 8.5, 2.5, 8.5, 1, 7), `7` = c(7, 5.5, 5.5, 11, 3.5, 9.5, 3.5, 9.5, 2, 8, 1)), .Dim = 7L, .Dimnames = list(c('1', '2', '3', '4', '5', '6', '7'))), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist30_80061cf3b5c20975e86672864aab592d");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist31_4f88039b76f3acc8f328f70dd669db4e() {
        assertEval("argv <- list(list(c(TRUE, TRUE), c(TRUE, TRUE), c(TRUE, TRUE), c(TRUE, TRUE), c(1, 2, 3)), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist31_4f88039b76f3acc8f328f70dd669db4e");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist32_c77f9788585d653156db95c336680a5a() {
        assertEval("argv <- list(structure(list(mean = c(0, 1), vcov = structure(c(1, 1, 1, 0), .Dim = c(2L, 2L))), .Names = c('mean', 'vcov'), class = c('relistable', 'list')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist32_c77f9788585d653156db95c336680a5a");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist33_e85233b20e2aaeb5b0287bc6ee251b1e() {
        assertEval("argv <- list(list(c('  \\036 The ‘internal’ graphics device invoked by .Call(\\'R_GD_nullDevice\\',', '    package = \\'grDevices\\') has been removed: use pdf(file = NULL)', '    instead.')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist33_e85233b20e2aaeb5b0287bc6ee251b1e");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist34_e092b41837a80a264a8be9d3f48eeb19() {
        assertEval("argv <- list(structure(list(surname = structure(c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs'), nationality = structure(c('Australia', 'UK', 'US', 'US', 'Australia'), class = 'AsIs'), deceased = structure(c('no', 'no', 'no', 'yes', 'no'), class = 'AsIs'), title = structure(c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), class = 'AsIs'), other.author = structure(c(NA_character_, NA_character_, NA_character_, NA_character_, NA_character_), class = 'AsIs')), .Names = c('surname', 'nationality', 'deceased', 'title', 'other.author'), row.names = c('1', '2', '3', '4', '5')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist34_e092b41837a80a264a8be9d3f48eeb19");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist35_9f134e9d48d623bc91ee18721a1e6622() {
        assertEval("argv <- list(list(structure(list(Ozone = c(96L, 78L, 73L, 91L, 47L, 32L, 20L, 23L, 21L, 24L, 44L, 21L, 28L, 9L, 13L, 46L, 18L, 13L, 24L, 16L, 13L, 23L, 36L, 7L, 14L, 30L, NA, 14L, 18L, 20L), Solar.R = c(167L, 197L, 183L, 189L, 95L, 92L, 252L, 220L, 230L, 259L, 236L, 259L, 238L, 24L, 112L, 237L, 224L, 27L, 238L, 201L, 238L, 14L, 139L, 49L, 20L, 193L, 145L, 191L, 131L, 223L), Wind = c(6.9, 5.1, 2.8, 4.6, 7.4, 15.5, 10.9, 10.3, 10.9, 9.7, 14.9, 15.5, 6.3, 10.9, 11.5, 6.9, 13.8, 10.3, 10.3, 8, 12.6, 9.2, 10.3, 10.3, 16.6, 6.9, 13.2, 14.3, 8, 11.5), Temp = c(91L, 92L, 93L, 93L, 87L, 84L, 80L, 78L, 75L, 73L, 81L, 76L, 77L, 71L, 71L, 78L, 67L, 76L, 68L, 82L, 64L, 71L, 81L, 69L, 63L, 70L, 77L, 75L, 76L, 68L), Month = c(9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L, 9L), Day = 1:30), .Names = c('Ozone', 'Solar.R', 'Wind', 'Temp', 'Month', 'Day'), row.names = 124:153, class = 'data.frame'), structure(list(c(2.67385465817826, 1.92826057080163, 1.7211511020859, 2.46674518946253, 0.6441818647641, 0.0228534586169083, -0.474209266300845, -0.349943585071407, -0.432787372557699, -0.308521691328261, 0.519916183534662, -0.432787372557699, -0.142834116355676, -0.929850097475453, -0.764162522502868, 0.602759971020954, -0.557053053787138, -0.764162522502868, -0.308521691328261, -0.63989684127343, -0.764162522502868, -0.349943585071407, 0.188541033589493, -1.01269388496175, -0.722740628759722, -0.059990328869384, NA, -0.722740628759722, -0.557053053787138, -0.474209266300845)), row.names = c(NA, -30L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist35_9f134e9d48d623bc91ee18721a1e6622");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist36_e506625ad174caedb6881d35716d0c73() {
        assertEval("argv <- list(list(c(5.87030131383818+0i, 1.5889879152884+1.34124369386909i, 2.11222603449395-1.81528547759475i, 2.90982451403972-3.07851581383191i, -0.93444299242086+4.19201264862077i, -2.47319172794455-3.70050127054969i, 3.40387225833387-2.03794044354999i, 0.964146923537224+0.43683199768595i, 0.964146923537223-0.43683199768595i, 3.40387225833387+2.03794044354999i, -2.47319172794455+3.70050127054969i, -0.93444299242086-4.19201264862077i, 2.90982451403972+3.07851581383191i, 2.11222603449395+1.81528547759475i, 1.5889879152884-1.34124369386909i), c(-0.198575181429756+0i, 3.06901469564285-0.28753262878135i, 2.52792606446531+0.34832983414202i, -0.22897831647696+4.34107190550675i, -1.1328140942159+1.10933827962707i, -2.13015831304915-3.19551716353477i, 1.66248610578085-2.34843556657312i, 2.53273081248013+0.345339148259i, 2.53273081248013-0.345339148259i, 1.66248610578085+2.34843556657312i, -2.13015831304915+3.19551716353477i, -1.1328140942159-1.10933827962708i, -0.22897831647696-4.34107190550675i, 2.52792606446531-0.34832983414202i, 3.06901469564285+0.28753262878135i), c(-0.177389766587854+0i, -0.750507869921238-0.968112891774716i, 2.01908494011385-1.61353499070386i, -1.32842557557029+1.87677956172028i, 0.278793972604843+0.060190561256586i, 0.06482045217871+2.780245561063i, -3.05075608405522+4.21179315999883i, -0.12202595251607-1.65218285338028i, -0.12202595251607+1.65218285338028i, -3.05075608405522-4.21179315999883i, 0.06482045217871-2.780245561063i, 0.278793972604844-0.060190561256586i, -1.32842557557029-1.87677956172028i, 2.01908494011385+1.61353499070386i, -0.750507869921237+0.968112891774715i), c(-1.93496831243286+0i, -4.87879352188084-3.06857420991118i, 0.91348359987171+2.30355482564816i, 2.7631069926811+6.2396752311874i, -0.9934286053847-5.99510259160787i, 0.39705745560005+3.84166415349047i, -1.5293697261841+2.76025815484515i, 3.48992984345714-5.88708433976428i, 3.48992984345714+5.88708433976428i, -1.5293697261841-2.76025815484515i, 0.39705745560005-3.84166415349047i, -0.99342860538471+5.99510259160787i, 2.7631069926811-6.2396752311874i, 0.91348359987171-2.30355482564816i, -4.87879352188084+3.06857420991118i), c(1.6954625122129+0i, 0.96480086806796-2.54002409930623i, -3.5054253146275-7.05689416264505i, -2.10114573645889-1.07773818646711i, 1.81179418950692+1.03308206229221i, 0.84721205589596-4.740786425434i, -1.90295630545443-1.68686014535334i, -2.43557705822344-1.63964363160433i, -2.43557705822344+1.63964363160433i, -1.90295630545443+1.68686014535334i, 0.84721205589596+4.740786425434i, 1.81179418950692-1.03308206229221i, -2.10114573645889+1.07773818646711i, -3.50542531462751+7.05689416264504i, 0.96480086806796+2.54002409930623i)), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist36_e506625ad174caedb6881d35716d0c73");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist37_0f95051ca08351dae18481fe46543be5() {
        assertEval("argv <- list(structure(list(inner = integer(0), outer = integer(0)), .Names = c('inner', 'outer')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist37_0f95051ca08351dae18481fe46543be5");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist38_5f64c3dae7767b102c864136e51809f5() {
        assertEval("argv <- list(structure(c('mode', 'length', 'x', 'mode', 'x', 'mode'), .Dim = 2:3), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist38_5f64c3dae7767b102c864136e51809f5");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist39_1d5e99dafdc029ed6aa358eae7c83fb0() {
        assertEval("argv <- list(list(structure(list(b = structure(2L, .Label = c('C', 'D'), class = 'factor')), .Names = 'b', row.names = 2L, class = 'data.frame'), structure(list(a = structure(NA_real_, class = c('POSIXct', 'POSIXt'))), .Names = 'a', row.names = 'NA', class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist39_1d5e99dafdc029ed6aa358eae7c83fb0");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist4_a00944e89f084d30168495fc507d084a() {
        assertEval("argv <- list(list(list(structure(function (e1, e2) standardGeneric('Ops'), generic = structure('Ops', package = 'base'), package = 'base', group = list(), valueClass = character(0), signature = c('e1', 'e2'), default = quote(`\\001NULL\\001`), skeleton = quote((function (e1, e2) stop('invalid call in method dispatch to 'Ops' (no default method)', domain = NA))(e1, e2)), groupMembers = list('Arith', 'Compare', 'Logic'), class = structure('groupGenericFunction', package = 'methods')))), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist4_a00944e89f084d30168495fc507d084a");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist40_7b8c66b7861a23cabf2f2b2cb8e59113() {
        assertEval("argv <- list(list(structure(list(structure(c('0.007239522', '0.014584634', '0.014207936', '0.018442267', '0.011128505', '0.019910082', '0.027072311', '0.034140379', '0.028320657', '0.037525507'), class = 'AsIs')), row.names = c(NA, -10L), class = 'data.frame'), structure(list(structure(c(' 1', ' 6', ' 7', ' 8', '13', '14', '15', '20', '21', '22'), class = 'AsIs')), row.names = c(NA, -10L), class = 'data.frame'), structure(list(structure(c(' 16', ' 16', '144', ' 16', ' 16', '128', ' 16', ' 16', '112', ' 16'), .Dim = 10L, .Dimnames = structure(list(c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22')), .Names = ''))), row.names = c('1', '6', '7', '8', '13', '14', '15', '20', '21', '22'), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist40_7b8c66b7861a23cabf2f2b2cb8e59113");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist41_74b3504ae4d46736cfd2aa1f197ef8b3() {
        assertEval("argv <- list(structure(list(N = 84L, ZXrows = 18, ZXcols = 5, Q = 1L, StrRows = 18, qvec = structure(c(1, 0, 0), .Names = c('Seed', '', '')), ngrps = structure(c(14L, 1L, 1L), .Names = c('Seed', 'X', 'y')), DmOff = structure(c(0, 1, 10), .Names = c('', 'Seed', '')), ncol = structure(c(1, 3, 1), .Names = c('Seed', '', '')), nrot = structure(c(4, 1, 0), .Names = c('', '', '')), ZXoff = structure(list(Seed = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), X = structure(18, .Names = 'Seed'), y = structure(72, .Names = '')), .Names = c('Seed', 'X', 'y')), ZXlen = structure(list(Seed = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5), X = 18, y = 18), .Names = c('Seed', 'X', 'y')), SToff = structure(list(Seed = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), X = structure(32, .Names = 'Seed'), y = structure(89, .Names = '')), .Names = c('Seed', 'X', 'y')), DecOff = structure(list(Seed = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), X = structure(18, .Names = 'Seed'), y = structure(72, .Names = '')), .Names = c('Seed', 'X', 'y')), DecLen = structure(list(    Seed = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5), X = 18, y = 18), .Names = c('Seed', 'X', 'y'))), .Names = c('N', 'ZXrows', 'ZXcols', 'Q', 'StrRows', 'qvec', 'ngrps', 'DmOff', 'ncol', 'nrot', 'ZXoff', 'ZXlen', 'SToff', 'DecOff', 'DecLen')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist41_74b3504ae4d46736cfd2aa1f197ef8b3");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist42_d9b9aabe88fe01a4da857f87a1ad2c19() {
        assertEval("argv <- list(structure(list(structure('\\n', Rd_tag = 'RCODE'), structure('Sys.timezone()\\n', Rd_tag = 'RCODE'), structure('\\n', Rd_tag = 'RCODE'), structure('#ifdef windows not active', Rd_tag = 'COMMENT'), structure(list(structure('\\n', Rd_tag = 'VERB'), structure('## need to supply a suitable file path (if any) for your system\\n', Rd_tag = 'VERB'), structure('tzfile <- \\'/usr/share/zoneinfo/zone.tab\\'\\n', Rd_tag = 'VERB'), structure('tzones <- read.delim(tzfile, row.names = NULL, header = FALSE,\\n', Rd_tag = 'VERB'),     structure('    col.names = c(\\'country\\', \\'coords\\', \\'name\\', \\'comments\\'),\\n', Rd_tag = 'VERB'), structure('    as.is = TRUE, fill = TRUE, comment.char = \\'#\\')\\n', Rd_tag = 'VERB'), structure('str(tzones$name)\\n', Rd_tag = 'VERB')), Rd_tag = '\\\\dontrun'), structure('\\n', Rd_tag = 'RCODE')), Rd_tag = '\\\\examples'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist42_d9b9aabe88fe01a4da857f87a1ad2c19");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist43_4fa4fd309c4941c6aee15839d6fc6521() {
        assertEval("argv <- list(structure(list(`1` = 8.91763605923317e+38), .Names = '1'), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist43_4fa4fd309c4941c6aee15839d6fc6521");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist44_25fa144c92150c9594d00efc724c5fc2() {
        assertEval("argv <- list(list(c(0, 0), c(0, 0, 0, 1), NULL, c(1, 1)), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist44_25fa144c92150c9594d00efc724c5fc2");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist45_fd7ca258b6f76f89dd5edfc815ab9a10() {
        assertEval("argv <- list(list(structure(list(structure(c('McNeil', 'Ripley', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame'), structure(list(structure(c('Australia', 'UK', 'UK', 'US', 'US', 'Australia'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame'), structure(list(structure(c('no', 'no', 'no', 'no', 'yes', 'no'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame'), structure(list(structure(c('Interactive Data Analysis', 'Spatial Statistics', 'Stochastic Simulation', 'LISP-STAT', 'Exploratory Data Analysis', 'Modern Applied Statistics ...'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame'), structure(list(structure(c(NA, NA, NA, NA, NA, 'Ripley'), class = 'AsIs')), row.names = c(NA, -6L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist45_fd7ca258b6f76f89dd5edfc815ab9a10");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist46_95e6c0b469183d3a065137caa2dee4d7() {
        assertEval("argv <- list(list(structure(list(surname = structure(c(4L, 5L, 3L, 2L, 2L, 1L, 6L), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables', 'R Core'), class = 'factor'), nationality = structure(c(3L, 1L, 3L, 2L, 2L, 1L, NA), .Label = c('Australia', 'UK', 'US'), class = 'factor'), deceased = structure(c(2L, 1L, 1L, 1L, 1L, 1L, NA), .Label = c('no', 'yes'), class = 'factor')), .Names = c('surname', 'nationality', 'deceased'), row.names = c('1', '2', '3', '4', '4.1', '5', '7'), class = 'data.frame'),     structure(list(title = structure(c(2L, 5L, 4L, 6L, 7L, 3L, 1L), .Label = c('An Introduction to R', 'Exploratory Data Analysis', 'Interactive Data Analysis', 'LISP-STAT', 'Modern Applied Statistics ...', 'Spatial Statistics', 'Stochastic Simulation'), class = 'factor'), other.author = structure(c(NA, 1L, NA, NA, NA, NA, 2L), .Label = c('Ripley', 'Venables & Smith'), class = 'factor')), .Names = c('title', 'other.author'), row.names = c(NA, 7L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist46_95e6c0b469183d3a065137caa2dee4d7");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist47_5ea4c56cdf00ba28ef8fc04e18094dd1() {
        assertEval("argv <- list(list(structure(list(structure('DateTimeClasses', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('print.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('print.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('summary.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('summary.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('+.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('-.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('Ops.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('Math.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('Summary.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('Math.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('Summary.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[<-.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[[.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('[<-.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('as.data.frame.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('as.data.frame.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('as.list.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('.leap.seconds', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('is.na.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('c.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('c.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(        structure('as.matrix.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('length.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('mean.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('mean.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('str.POSIXt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('check_tzones', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('duplicated.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'),     structure(list(structure('unique.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('split.POSIXct', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('names.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('names<-.POSIXlt', Rd_tag = 'VERB')), Rd_tag = '\\\\alias'), structure(list(structure('date-time', Rd_tag = 'VERB')), Rd_tag = '\\\\alias')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist47_5ea4c56cdf00ba28ef8fc04e18094dd1");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist48_96ac9fd88185f3c4e65a2f4446a73181() {
        assertEval("argv <- list(structure(list(c(3L, 0L, 0L)), class = 'numeric_version'), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist48_96ac9fd88185f3c4e65a2f4446a73181");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist49_a372f4aa0e6e20cdc2ae9550b9f7684c() {
        assertEval("argv <- list(list(structure(list(x = 1L, y = structure(1L, .Label = c('A', 'D', 'E'), class = 'factor'), z = 6), .Names = c('x', 'y', 'z'), row.names = 1L, class = 'data.frame'), structure(list(), .Names = character(0), row.names = 1L, class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist49_a372f4aa0e6e20cdc2ae9550b9f7684c");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist5_f2e05326492d9e0a912fd77a4313b62f() {
        assertEval("argv <- list(structure(list(sec = c(8.40000009536743, 8.80000019073486), min = c(14L, 14L), hour = c(22L, 22L)), .Names = c('sec', 'min', 'hour')), TRUE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist5_f2e05326492d9e0a912fd77a4313b62f");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist6_0a3e7470006afaffe8594e580f443c45() {
        assertEval("argv <- list(list(structure(list(c(NA, 0L)), row.names = c(NA, -2L), class = 'data.frame'), structure(list(c(NA, 0)), row.names = c(NA, -2L), class = 'data.frame'), structure(list(c(10L, 10L)), row.names = c(NA, -2L), class = 'data.frame'), structure(list(c(2.74035772634541, 2.74035772634541)), row.names = c(NA, -2L), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist6_0a3e7470006afaffe8594e580f443c45");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist7_41d12eb4e1fdbf2c2b9125c8238d06a5() {
        assertEval("argv <- list(structure(list(diagonalMatrix = 1, lMatrix = 1, sparseMatrix = 2, Matrix = 2, mMatrix = 4), .Names = c('diagonalMatrix', 'lMatrix', 'sparseMatrix', 'Matrix', 'mMatrix')), FALSE, TRUE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist7_41d12eb4e1fdbf2c2b9125c8238d06a5");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist8_fe37fc7b365236baa39cbebfdbece429() {
        assertEval("argv <- list(list(structure(list(), .Names = character(0), row.names = integer(0), class = 'data.frame'), structure(list(height = numeric(0), weight = numeric(0)), .Names = c('height', 'weight'), row.names = integer(0), class = 'data.frame')), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist8_fe37fc7b365236baa39cbebfdbece429");
    }

    @Test
    public void TestrGenBuiltinunlist_testunlist9_6fedda4eeb203d008f152567af7e6c5d() {
        assertEval("argv <- list(list(c(TRUE, FALSE, FALSE, FALSE, FALSE), c(TRUE, TRUE, TRUE, TRUE, NA)), FALSE, FALSE); .Internal(unlist(argv[[1]], argv[[2]], argv[[3]]))");
        check("TestrGenBuiltinunlist_testunlist9_6fedda4eeb203d008f152567af7e6c5d");
    }

    @Test
    public void TestrGenBuiltinutf8ToInt_testutf8ToInt1_63a27d481481a00dad84e929f539c36c() {
        assertEval("argv <- list('lasy'); .Internal(utf8ToInt(argv[[1]]))");
        check("TestrGenBuiltinutf8ToInt_testutf8ToInt1_63a27d481481a00dad84e929f539c36c");
    }

    @Test
    public void TestrGenBuiltinutf8ToInt_testutf8ToInt3_5be39d31b7134e0cc6ffda9f7cef0a53() {
        assertEval("argv <- structure(list(x = NA_character_), .Names = 'x');do.call('utf8ToInt', argv)");
        check("TestrGenBuiltinutf8ToInt_testutf8ToInt3_5be39d31b7134e0cc6ffda9f7cef0a53");
    }

    @Test
    public void TestrGenBuiltinvector_testvector10_2e993bba51c7b9a7f3f6f152edc9aaa6() {
        assertEval("argv <- list('list', structure(1L, .Names = '\\\\c')); .Internal(vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinvector_testvector10_2e993bba51c7b9a7f3f6f152edc9aaa6");
    }

    @Test
    public void TestrGenBuiltinvector_testvector11_7ee9a8983c7e8f214e428a5c8176649d() {
        assertEval("argv <- structure(list(mode = 'complex', length = 7), .Names = c('mode',     'length'));do.call('vector', argv)");
        check("TestrGenBuiltinvector_testvector11_7ee9a8983c7e8f214e428a5c8176649d");
    }

    @Test
    public void TestrGenBuiltinvector_testvector9_3ec6b6e35abf3a65efefe2397e0034e4() {
        assertEval("argv <- list('raw', 0L); .Internal(vector(argv[[1]], argv[[2]]))");
        check("TestrGenBuiltinvector_testvector9_3ec6b6e35abf3a65efefe2397e0034e4");
    }

    @Test
    public void TestrGenBuiltinwarning_testwarning1_34fbe2e558b975829460c2ad85dee3a1() {
        assertEval("argv <- list('OGXAGDISZSNLYDBXLBQMQHECNODETNWRASXQCXRDTYKHGFOTROVTAJBUYOWPRNTXVBABWOIYPNJIVBJWSRJODUXFUPYENWWAZMKKCEKIKHOEYBJZQBKLNLQDXOODTMUBVHHQYAJKLSXQXTDDELCFOKOVQKSCHPEWWMUHBLMIENAUOQMHLUPKVIPLGOGOLDQODOLLVSLNGBKAWZSVXOOHRGHSSEHJCSODZOUWWUQQHAKJKEIKTHDAUMUCCDTTZQHFUSFTWNPYYRBVMKHGKYGOFFSIDBYODOOVSOSTJHNGVKBYFKQQIDXPTXNJBWNFJFLGDBRHDZKKQXFOSKCQAFRWUDKUSPDOLTAFWCZKWXMSMZBEUOKZGNCVJUFYINCXYBMFWNAHIPGBCSYICIQLUHOBESVNOADWCGZPGPADSBQYCZASLOWOTQIKFWPTOHTOINVNFWJHUTVOAMOVSOBDRCFJWGSCUGOAUIXJZJMMAQNIPQLESTVNHLJGRYHQNPAADACMFVGMQEVLGHEPDEIEKPRVJYAPMJWBWEFWBGZRLJLURMBGGFBMGTOYCYSXPEESPIUIWPKYMCMZYLWHUUKJQWRNDPBMTTBLNHPTSDOUGSVDYTVEAWXDMMSBTKLSMZVVTCVVZBTKPVAAZTIVZFQLYZLFSOPLLPLYVFKKAJKESATLTABKQFVSXKKGJGYMBUIORHBLPZZCMKKIRHKZUIVFNEDXCWHAUJATALGMQCECVQQKLJUXQPIBPETHQDGVUBWDPMOSMZZKPILFAABTMWPEPXUNKRXXEGCUCVUYMYUWKCHSJJANDXBUWAHQUKYKLHPOBTFRNQQHFOZIIANPTYMCGWWVYQMESCLYVSDPZQHBBWJYONYCVJOICUFRLFZLAYWPHVYWDZOADAVUYJZVUQZMXKLYRAEMLZXISXRQDPHLFGQMEHSPDBZJRVGAPVJIQYPNEVFRQBYPWNGPURMMQLPAZKDWOWAWSUWNYFAIRIYUIMKUMAQGTHXWMBPPZIRYORCWNFKXMRHVGJGYKDXJWDJGBUFKIPOZGTZOKVCNLHEWOOPSQPBOPQQCCRVDUMZMOJNBOYNLAABEMUHTNHARBVDRVGDTFGNMJUOEZGDFJJHBYOFWMOUQDIYETLDFRDKLQGMEWECXHTKLEDDNMQLBAFWGPPZETGIAZLZFCGRPKSOPPFCTPYYTLELTXXVFBMPCYEXDRUTRDWQVEAIHVYDXPKRTNKZBDSSCMQKZRIDHCAITYKNBQJLZRSEFWVSHFMNFTASVYRHFWAWNLYEJDDROMVZNSEJBDCHKQSIZSEJHLVGKZDQSPZBZTLDLELVBIVBUZRAMSAVTGTRERYWURPKDVSUAEPCSOHKRECNCCQOHGQVBZAEIWEUWMQIMYGAZGRBZXWLUHHZZMTIGQIBZRWMDRAEXDGGIFAXYYLLBJXJNNEOCPOFXFKWGHWQWMXEQSEORXIOAJQPVDRFPSNJSMGLCGOAFQSUBCYYXQEXXEBOJLMUVHSMBAGFKOSGXMGIRSOWKFMJGYMAYJAZJZDOUFSOAGMYZFOQXTPFXUIFRTMWREAWCILQIPVIJPMCVLTUKATBNDRBURGEBAVGBJPUIDUWZRGQLFPZFLIACKBAEJPIMTEVIGIUGXDFQGSTGOXSVXHQDWRTIRMQUXNEHDGSQLQNIUQUEKZJCNYWORNYCMUWXVDSTRXKYLFPENKVOLFMGIWLLMVAICVMNKLCAACJTTCZDMOYVNJOUQCEVMUVHFQJXDEQERNTICKOTEPMYXDHSTNFEIBRTGMBCXPQLHYAEZUZGPBUWXAGPJSBRFHTEKRKOLDAEUDBAKWILKJYYHSFYBZFIDPRZFVQZLSBQFXVWVKZMMIBXFHROZCOXWXUEDDLUXLVMRTRWIECAXUCCENTDCOHLDXTLRHRJRKSHTOAJLKOWTBDIITDZWPXAUXCMRMWKOQHXDOGBTPIXPYXKSVXDBZKSNKSWDJUFQJPOSVLJVNTWLKWSPSTGHFYHMAUKLYKTUFBIRTQYAJQCADTWIGGYMSXPGXSBQWDYBEAKSRMCZOSHUQXKITSLUHXQUSRSFPTGRCTYRRKDMCTJOJFNKWCBEYLRAMBQWFHWAULCXETLREWBFGTKHCNLZDVAUFDEFYZIDRPIVHVDWBLRFYJQERTMWVZRQBEAWLVDKSBIUVWYJYSKKFTLLCJXOAKCHSJQMUPEYBCVKSTZYDRAMUJYRLVULIOWPQTSWCPGMHXKOCYTMESPBBLEMZFSDNVDVGCERRDZDYSOGIVXNXSLHZDRVFPEKGNRXIGIFDGYBNUVOGPDMCHRFKUFBURNFEPBFVHAZCTVAWOIIQDIPTORJXZTANUFKOTIILHQBPKBZQVKYJVAWBVPRSHRHOBJMNVNWPNQHOZXUVXPJTMARKYDJXUNAGHRCZWHLIJHXHWVEFRMCDIPYKYCWGHEACDFVAKXAILOXNTQFNBUFWNGVBAPWLNFSNBVGNICWQWDRPYPHYVLMTGVVKXBVMHQIQXOQKUWJMXMFRTQFYAXCVOPVGBDCEYFIRSHHLJXNPNNLFIGAFZLZGDOLWXQVHXDDPZNDEUQOTIKJQEGYZNBPSPNJCDJPGAICGDJDOOEYQBERXVLEEMKUUKQKJQYMQHKLHZWVSEBCWJUXQPBGKVJLODARVYBRKODGISEDOBLMMMTZVCWORUKWEMDFXMOZZRUASXLSVMVMALMPLHRPZEZPTWQSZWTDCNFTMDVYHDSOCOPOKKXRYDOCQGMMVXOYHQQQGKENPCSPRHJQYJFGMKIJRWMPMRRCCYKOYFFQVVDCUYQLRWNNUJYAIDIMTUKAYXPXQDDRXDXLBVZUHFFJFECQUBCADYEZSIIUMMGYRSHPYANWHJXCNKELEWRDDHYYEXBWBYEPSHASIWMZCAOPATBMYBYUWFZSHVYXDBVWBFSCAXBWDKFUOFLLXMYKUTIYNILMVYMJFASSAENEGXJZSDPWTMNOFXEPMFZIBTOAHWGBSNKLXXFOBOCTCFTKOWSTPCVTWCVHIXEASAVXEFUXGLKRHUIGAJPIEZGODRLJKKVXTJRNAQQIAZZBNZCJMXOAWVWVACVFAOTWBFKKPYZDHVZRCDIGGUEPRXRHABEWBHXOUYRKZYNDQVDPZFKCHNIPZPDSRILHVPUHDXAOZGZAGGYZTHKFTTMRTUPKRWLDQMYGUTROPWMZBOEHVFPKHMTZEDPDFIGSSUHEMOQMDWZWWJQNATVBXJSSRHHMBMPGZEOKDJZUJYSMVRJMPSJPNPXWVEIYYQUOBHMLYQAAHHVSRJEFSGFPDBAVUAPHPFYCDDHPFLLJZAWCELSEDFEWTOWDJIAKSGQEUMBUWPPKBQNUOLVRBDVKNIQPFQJLKFGELPKXHFOJYQLHAOIMVFCUEUAWVXJHXIYPPTKJLISGWYMAYLVNMDBQJABVTBSAPFQONGJHEQADNMNRZYYRTYFRCMTAECUJQTGJISODHKNPIJYOPGKQJMEMYAJGPBQBHILLZPIWIRXVCHNJVWRNUBGFVVVHAQTNJIJJOQKPSXYKQECOVTOZZIEJOVSXSGITFHXEDTOOSQTHZZATJJATECSLAXULDVSKEAIEOPHYSHSPKEAEPFBXWVPSUWSIMUKPHDHFFNXPGJOERAARFJESPBKCKLQCIAIUTVBDQKEDDQNMWETFEDXRLSSQXFLAESTLJMAWQEOWFIUGBKFQQKDELKBAWHZRWLYTHRXTRTCBJNYYQINRWOCSVKFGANPPXLGNBRTFEWHZSYTIJAXNIVUUNCXDVOOTKVWUKESCBAQSEUUQYDBYWJKZCSOWTQEMLEVHQMOPCMELROGHAHSBZUXNIMCFJKRDMDOAUVFOPDSWYTAUIKAIILVRJUJYUHGEXOXZOIRWZKTILGSKRYBQTRWUWZOUPBMDOBTACXZIQQPWUHBLLQTPMFLTGSUKICMTNYAXPVLIKHDHHIATLPCAEAYMUOCALFUNOYBAOCGDDOBQTJSBPGEHPKQYNGTNDGDCQTLDVZANUNGMHZSTAKLDGDKFNXNLHFBUYXHGIIPQCMBRYYXMJKYRKMTTMKKRRBLNEHFDWIBQTNNTXVNUFJKCAKEWPLNBTRDPQIROHXBXVIKNOBIGCZIYVKUGUCFZBORHMWMDITBYRKDYGTAGZSQGCHOUHIYMZVZCIYQZZSKRGIVRUIQPFGWUATXXDZXGXVLBWIGVZFCQWENJVMGHVAKPNRNOVIAVUWBAPWLAKJMDMGMXNSBRUAAPUTGULEPVUCBYCFLUWQKDWWINMUXPVUHNHWSJZSGQIUIGBOAHHVDGLYIUDMNXJMLSBSRRMHJCGBMIFTGKSCDZZTAZTXFHPITBXUWYIEDCMVWBTZISPBLQUOWALMUHPEUPHUPYEAJUOECWDQLYPBNRMQMWGKUWOIPIENADEIJWJYMWIIEQEOFCIPRFKDFTMGULEEZNNRUSWDGXJYIQNOMNJPGQROITWJLWKMNBKLORRXRNIADNNCGEHDLFCWFFIITOEVXGTFVHTDVVWAAHIBSAVNTYOYIHZGUHSTHAKPLINFHANKZBQMAEQNXRNHKDJHYGTBJFWLIKEQUXPQRYZGHXJSVDVRACLVIHXKOGDFNYKVCTGNBUXTCYEURKTKPIQJWKLXQARGZLRCFYOKPDMEGVRZDLMOLESXHTYANGMKVDWKQDWQNQZUYRLYRJJALNBTDIJXQWKSFNXHHLXRLVGJDGRZVSNEZVZNTUNNSMHNPRYHGGLLKOJJHQEDCBRZURRIQKDUWKQOXKKICSXODXKDXLLKIDUVFLGCTHNDMWAZUGTMAPKZLAAHDCLKHKOGBZEPYZPUCCDFIPFHCQWTPRTLFGLCAQNVRMWUJZFZLIWSOGNTMMNPMFNXBMWIPMTNZYODGZKFJOAAIGATUSBRTIKAMDUKYTLUJJRLSLRNXYYGLKENYCREGPCRQWFIKYBFSBZANWHQOLYJIYCXHECCGWKSYHTRHAJGNRHMJCEVMWVESLPTYUYHAETQNABEZUNBHCSKXJLBLSVDOLSKLTGMFLXYPQYTYRGSMXYMLPSZMHVXPHLYNGKFNWAVGSRPQPRZVBNELCCVYKJLLZTHMZOCBXVQFJDLUXVYJBHZLZSHXMVGYMDUDORONYFAHIXODFCWBINIWWXUXLKJNBSGVZCMRVTLYSIMZXFHJBZVRKGYJONYNQGJXTUICYLOEAFIPBGAFNITYFZCTHHBFTISFBSGIWALDNZRWTNXMUNCOJNQGLCACFDVKOPBUPULQTSZHBLHLLQAGMXHHZMABYMVVTPONGQWTEJTCRSWFHVHWQGQBXXRYOUUGHFWSDWQOBHPYBLKNBWGLFYSKHSFHXMYUWOBNXACQMZTUKZLZOTRVRABYLQPYSFJRGPCYGHLMGFSKQQBMQISXKKMBIEJLEBRKCMHCENENJVINGIKQBSOITGCJCFZDPRNKKNRZNMHEIHJMJLFBWONQFNSAQTLURPETKCEUDMJMOYEKLWAAIIWODBDVKZSGXQZCUZTUZIJEKKPKCRAEZNHAIWEJOMSVKFNHVGMCHVMLFGOSEEXDAHRNIEZTKCRPQTPCSAZYVGPIZWSUTIXBOITQKWOWNQGHZZHPJZXNMKWXHWMQKCEAJSGKUUKTMFFBPZBSAZZSULTRANTASWMGULWQLNZRVKXAJRLFERRKPKNWGRKOZPEWIWCBCWKWJJGMFVKTWWJOCDDEAGBBFEEPDSZSYXZGUSLRDADRIJXMTQVNLMBPQEKHJUZNVZKXARKHVOQJPXWZLWJBKMTGKKUNCMCXOYUQIUHGAKQVEZRVYPIUTWLVQJDORBXEZCDLSJHSSTLFKHTOUNPRRDQGPSNTVLTYUYWGSULVDNIOEZJVHNKSDJGVQTPZIJVJBARWYMIDQFHMMIUGECHFSNREUFXCUCDFORINMIVXPHORLQRWDWIVYFTOEHCBEQSQRCHYJEVVJRMDQVLLGCIFDORIXGPRULGOLOLYBINRRATGXMBJTMTHKTSFCNPCAEQSYMYKAASYJJMYACQFHWQJLMDOQKSYNLSGIDXZJNHEWKWQTAPBYLEOWBYWNVSZSNWEFBVSBXZVHLJBPICAKINJJAZOANLNWBFBLDZDAMFLCHTHFCRGGDLRUYORAXHITCZVDDKCMUGKCEZRYPCVAVKDRQLUWZKJDZYYKUKAKYNRANTLTOTSISOWBJQAFQXMETAQODBBEGUEZMKNVBCYYKMKFTRNFTNEOJWWHHJMOMVEZQYNVZAEVQUTGGHBCOMHNNBLBKODDHJFVIIRODTKDVXYVLXIISBNSSTYZJYPICEDTHZJDDFXYEZGPDBLHKWSZAMJGHQWOEEESYXLNUTLPYRKKCWZPXHRTKVPMEAYYNFWJMYOAXDHFECOWAXWRRIDIOHLHLRAVCIRQVAXNIEQWRWCAFVIHDLWVOTUFHQFIEXUBQUMXLAUTLJHOHKITBVXSDLHIELTKQPRFVSFEOBJPERMWHTYPZTZEUDGCTNUTWVUYNQELWGVPEMUJGGIEJEYYLPLIRBCOCIBMPKSUNMTLSZPWXOPGOWLEFMIUBIKJRREOKKPKBPHRJXWIYXABSGECTQJRSCCNYEORABQUZMYDYMEKVJZBRHHLUBWQGXUUGFXGRIRSPMBEVBZSKDNRMNKTGWXCSWRTUJJMBRYTEBNYXCKAZVABMKVCSAOIVTRQOGAMVLSMLIAQPDJQQJJJXTDIGEZCBTDAWIMOCCWNMTEAPEFYEGPEQFNIOOHGXPMTBQQUKFQLOTDNDPFNWORMYDKOQIVYXHOOVAOGRFEXMLPOQQDHTQQYPTETUFKOMPHGUOEZMEFSCDKQADGSLCJNNXEKKLAXTZXZJJUDNTFRLXHOAOOYROETHRDMCHDJMALXFBIHMJRXKNIVEJRYFRCSYVEBOMVPRFINYGHPBATPTGUVEAINZKKVVBLHITASDQBPDBSUTPMAGLRVETLGKVYIVQFVTQFGKUSYAEQLHVGFABOIEWYCPKEVRNNSWYXVDSQREDOUVSXRDNHCAOTXTHTAPZQHIWFTJYZMPJJYQZIQXOUUAGHRBENJMUUFDUCRKYBZUHIQCYJPTGXEXXQZRDSOZBDNRJJMXZYCARBZHHMFFNJXGJZDFNKALBXWHRCAWTXABIKQLBMXIXEGWWJPMTFTVCHAPZVPIQADNWCZYYTALDLOTTXHOFUPOEXZZADSCAAIPYGWWCABPNREBRAEPBBIDCHWSJCMEXBZJMFQYXOLZDJVUBLKHIYHXAHHCXOIYGWGAEAOOSWYLBHQYLZPODKNPDJTEEBNIATQZWMUTWTCRLNMNTRLKKDYGWWBIJKEYZSIGWXNPOQRULMUMSQBJHIHVHTWNYVEBSBDLHKQVLIGBCPJENVSBEASLDGHZREGLFQMUNIVYKEBUGRGDEMQYZGUGLWSIYLJUTOSILYNITUMTJIHZPKMBJLOQFVFTXHEZQYEHKBQFESSGPUJEPCNTFOCJOLEJMABCETPTWZOBEJIMWSSDUPVFQNWBEEQFJRPWXESEGMJJENMHIIUHILTNTTIPYRNEGMNOECTFEIXNAADXJQGSXRMPQATNOMVARUTBBJDBAHKWYMEJQXRXPJKFGRGRNWXDFMLROFUCKATMBMTINMDBAUJOTHQIJUNJOZFVNFODGTPMQTSETNRMQVMPRJCJTOHGZPHCAIXVHMSXPNWVEQDHWUEVBEUPMYZOQTJXGPYBCLTUSEHJYIFAMUQEZCTGYHGPBBVDBHCNSWMHUQYWVAQKSUOLYUNLUUEONJANOIBXLXKRVJGHGEAGTKWQKZYUIGEWPCTEBDBMNARXATBWQMVWJQXVHGLGXRMDNZEPNTGQAYEIKLOOWLNNLIWVZLMMWNREMRAJEPHNDQDRIQVUEGOIKRUENWLKHMVEWWNQZQMIZGLGBYCMEZYNYSRFQWHJGSGCETHRGASFUDYVASRFJKKUBBMNFPQRDDZGFRKOCUJVZOJZSOEQYRRDGOPJJPSMFIRDYEXAQPQLRTVPQGSHTCPFTZNTVCIAOHNRDPXGDGXPDSEZUKMKARYGAVGCBOHANSJKHYLDPCFXAOEBATTFZRDWEMESUYNHREUTPORPDRMPGSCCDRVZCMIIVSQXTMQSLIAGHICXJYZDOOGRVCRPMIKALTMHTBOZGUUWGOXAEGUBXIXPLSTNABRSLFSAOCXULPTFLATSCSSLJFQCEHSJZEYDVWGHQQLPARKIJSMOHXTOZGWYTKNONYWQXTHAVCDEDPYTNCNUVZKWFEODBGIYLLBJOWGYWFKQDHPEMWNJPSJEJPTAYDAVLGVMDDWBJKTSYEVOXYAKCMSMEPHTXGOTNFKOBTADKPQQCKAIXGSXRCVSSLDCXFCEIRQKPXSMVHFHCEDMSFIMRRWAGIVQGMTCNRFMVWTQFFNTZJFSLXXJDTZBGAHAMOWAZARZTQCPOMAXKKYUKOMHNELAOMBBIIJDSOPXFVUFXACKODFHHQRMUZQNHWWEWKEUQTDCYGPMWLQHLCUYDUBWGNPWIRILVGICVQFVKKFEIUDDRKWMPVYBBSFESJTNQMYLYEBQIQBIDSPYQQFUQRGUPROKKQETIFRPIWJGDMILMXGFJODKUGZZIQRWYSJVJZTNEVLXHXEZRPLNZPAWTVFQKRDVSBXXREEPYYLPOGMIKMNEDMWMTKNQVMCIWIPHSHIHFGHEWPWNYXMEFTYGBQLASFDXBVRNYMGHGMEGYHGYFUFZHVHLSQQPRXGJTZAGWLPLIKRZCGGSOBBDMUMDKNCEWJBDBMHOYJOAPIKAPFTRTHXDFULBREUQJATSHPJUVVACPLVAJWTYGXOMNLMKCVLGFFJRWFHLMTOZLEUEMHOZESJRGFRCWSIZAHFHEWWZOAYNRNBTRSFJNYLBLLJKZAYZEWPWWNWSEFXCGXOTOOAOLKAUAOQKQSVIQPGTFPUBYMUMPIMQYTAWVJLJDEUVEPQFOUOFAROYILGVDHDVFPXFTKPWYFYKVFDQYRKNKJ');do.call('warning', argv)");
        check("TestrGenBuiltinwarning_testwarning1_34fbe2e558b975829460c2ad85dee3a1");
    }

    @Test
    public void TestrGenBuiltinweekdaysDate_testweekdaysDate1_974ad4aa789463fd5fccdd0c9d96b64d() {
        assertEval("argv <- structure(list(x = structure(16352, class = 'Date')),     .Names = 'x');do.call('weekdays.Date', argv)");
        check("TestrGenBuiltinweekdaysDate_testweekdaysDate1_974ad4aa789463fd5fccdd0c9d96b64d");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax2_bc0064f5ce6fe0559a90a7d2c6ae0003() {
        assertEval("argv <- list(structure(c(TRUE, FALSE), .Names = c('d', 'I(as.numeric(d)^2)'))); .Internal(which.max(argv[[1]]))");
        check("TestrGenBuiltinwhichmax_testwhichmax2_bc0064f5ce6fe0559a90a7d2c6ae0003");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax4_ab75935a3fe576e9409934730c64f62a() {
        assertEval("argv <- list(structure(c(NA, 87, 82, 75, 63, 50, 43, 32, 35, 60, 54, 55, 36, 39, NA, NA, 69, 57, 57, 51, 45, 37, 46, 39, 36, 24, 32, 23, 25, 32, NA, 32, 59, 74, 75, 60, 71, 61, 71, 57, 71, 68, 79, 73, 76, 71, 67, 75, 79, 62, 63, 57, 60, 49, 48, 52, 57, 62, 61, 66, 71, 62, 61, 57, 72, 83, 71, 78, 79, 71, 62, 74, 76, 64, 62, 57, 80, 73, 69, 69, 71, 64, 69, 62, 63, 46, 56, 44, 44, 52, 38, 46, 36, 49, 35, 44, 59, 65, 65, 56, 66, 53, 61, 52, 51, 48, 54, 49, 49, 61, NA, NA, 68, 44, 40, 27, 28, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts')); .Internal(which.max(argv[[1]]))");
        check("TestrGenBuiltinwhichmax_testwhichmax4_ab75935a3fe576e9409934730c64f62a");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax5_79fb02f2a6b85572fd6cc6c025b88103() {
        assertEval("argv <- list(NULL); .Internal(which.max(argv[[1]]))");
        check("TestrGenBuiltinwhichmax_testwhichmax5_79fb02f2a6b85572fd6cc6c025b88103");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax6_7fc83a1e01e81a96f76d8220a4a5d2e2() {
        assertEval("argv <- list(list()); .Internal(which.max(argv[[1]]))");
        check("TestrGenBuiltinwhichmax_testwhichmax6_7fc83a1e01e81a96f76d8220a4a5d2e2");
    }

    @Test
    public void TestrGenBuiltinwhichmax_testwhichmax8_24ddc8e936890e4195144d97992d2338() {
        assertEval("argv <- structure(list(x = c(NA, NA)), .Names = 'x');do.call('which.max', argv)");
        check("TestrGenBuiltinwhichmax_testwhichmax8_24ddc8e936890e4195144d97992d2338");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin1_d6176c9b59aa6bb735350689a65f6902() {
        assertEval("argv <- list(structure(c(345595, 172795, 69115, 34555, 23035, 11515, 5755, 2875, 1147, 571, 379, 187, 91, 27, 11, 3, 1, 3, 4.42857142857143, 4.73716632443532, 4.86858316221766, 4.95619438740589, 4.97809719370294, 4.98904859685147, 4.99452429842574, 4.99780971937029, 4.99890485968515, 4.99945242984257, 4.99978097193703, 4.99989048596851, 4.99994524298426, 4.9999780971937, 4.99998904859685), .Names = c('1 sec', '2 secs', '5 secs', '10 secs', '15 secs', '30 secs', '1 min', '2 mins', '5 mins', '10 mins', '15 mins', '30 mins', '1 hour', '3 hours', '6 hours', '12 hours', '1 DSTday', '2 DSTdays', '1 week', 'halfmonth', '1 month', '3 months', '6 months', '1 year', '2 years', '5 years', '10 years', '20 years', '50 years', '100 years', '200 years', '500 years', '1000 years'))); .Internal(which.min(argv[[1]]))");
        check("TestrGenBuiltinwhichmin_testwhichmin1_d6176c9b59aa6bb735350689a65f6902");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin2_d37d291f96c4c6f2e09346cb620e9770() {
        assertEval("argv <- list(structure(c(295, 145, 55, 25, 15, 5, 0, 2.5, 4, 4.5, 4.66666666666667, 4.83333333333333, 4.91666666666667, 4.97222222222222, 4.98611111111111, 4.99305555555556, 4.99652777777778, 4.99826388888889, 4.99950396825397, 4.99977184576774, 4.99988592288387, 4.99996197429462, 4.99998098714731, 4.99999049357366, 4.99999524678683, 4.99999809871473, 4.99999904935737, 4.99999952467868, 4.99999980987147, 4.99999990493574, 4.99999995246787, 4.99999998098715, 4.99999999049357), .Names = c('1 sec', '2 secs', '5 secs', '10 secs', '15 secs', '30 secs', '1 min', '2 mins', '5 mins', '10 mins', '15 mins', '30 mins', '1 hour', '3 hours', '6 hours', '12 hours', '1 DSTday', '2 DSTdays', '1 week', 'halfmonth', '1 month', '3 months', '6 months', '1 year', '2 years', '5 years', '10 years', '20 years', '50 years', '100 years', '200 years', '500 years', '1000 years'))); .Internal(which.min(argv[[1]]))");
        check("TestrGenBuiltinwhichmin_testwhichmin2_d37d291f96c4c6f2e09346cb620e9770");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin3_486bf281a1e82b07ad35b247d7369c9d() {
        assertEval("argv <- list(NULL); .Internal(which.min(argv[[1]]))");
        check("TestrGenBuiltinwhichmin_testwhichmin3_486bf281a1e82b07ad35b247d7369c9d");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin4_1bc7b4a571c1e2d2012691bb7c08f068() {
        assertEval("argv <- list(list()); .Internal(which.min(argv[[1]]))");
        check("TestrGenBuiltinwhichmin_testwhichmin4_1bc7b4a571c1e2d2012691bb7c08f068");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin5_41a9a1ccc68a580857ce6de332825860() {
        assertEval("argv <- list(c(NA, 0.951840581382975, 0.805577027554469, 0.663985017923499, 0.53717416750558, 0.496765449963868, 0.472038350505409, 0.463306413812878, 0.485896454097402, 0.520777596351646, 0.524391122960607, 0.492063804965834, 0.513821989320989, 0.521702559081969, 0.533525525673351)); .Internal(which.min(argv[[1]]))");
        check("TestrGenBuiltinwhichmin_testwhichmin5_41a9a1ccc68a580857ce6de332825860");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin6_1c622637b29a8cffa713c704cf8db17b() {
        assertEval("argv <- list(structure(c(NA, 87, 82, 75, 63, 50, 43, 32, 35, 60, 54, 55, 36, 39, NA, NA, 69, 57, 57, 51, 45, 37, 46, 39, 36, 24, 32, 23, 25, 32, NA, 32, 59, 74, 75, 60, 71, 61, 71, 57, 71, 68, 79, 73, 76, 71, 67, 75, 79, 62, 63, 57, 60, 49, 48, 52, 57, 62, 61, 66, 71, 62, 61, 57, 72, 83, 71, 78, 79, 71, 62, 74, 76, 64, 62, 57, 80, 73, 69, 69, 71, 64, 69, 62, 63, 46, 56, 44, 44, 52, 38, 46, 36, 49, 35, 44, 59, 65, 65, 56, 66, 53, 61, 52, 51, 48, 54, 49, 49, 61, NA, NA, 68, 44, 40, 27, 28, 25, 24, 24), .Tsp = c(1945, 1974.75, 4), class = 'ts')); .Internal(which.min(argv[[1]]))");
        check("TestrGenBuiltinwhichmin_testwhichmin6_1c622637b29a8cffa713c704cf8db17b");
    }

    @Test
    public void TestrGenBuiltinwhichmin_testwhichmin8_22fd81cf01f30d2d212de0ba7a3e637f() {
        assertEval("argv <- structure(list(x = c(NA, NA, Inf)), .Names = 'x');do.call('which.min', argv)");
        check("TestrGenBuiltinwhichmin_testwhichmin8_22fd81cf01f30d2d212de0ba7a3e637f");
    }

    @Test
    public void TestrGenBuiltinwithdefault_testwithdefault1_e007ba6ec7062ded3bb6ebf6205fa7cc() {
        assertEval("argv <- structure(list(data = structure(list(X = 22.1693750707316,     Y = -0.652127930273561, Z = 1.03034043827436, a = -2.66666666666667,     b = -10, c = 28), .Names = c('X', 'Y', 'Z', 'a', 'b', 'c')),     expr = expression({        dX <- a * X + Y * Z        dY <- b * (Y - Z)        dZ <- -X * Y + c * Y - Z        list(c(dX, dY, dZ))    })), .Names = c('data', 'expr'));do.call('with.default', argv)");
        check("TestrGenBuiltinwithdefault_testwithdefault1_e007ba6ec7062ded3bb6ebf6205fa7cc");
    }

    @Test
    public void TestrGenBuiltinwithin_testwithin1_848180660a72bcab410265b73db45ed4() {
        assertEval("argv <- structure(list(data = structure(list(a = 1:5, b = 2:6,     c = 3:7), .Names = c('a', 'b', 'c'), row.names = c(NA, -5L),     class = 'data.frame')), .Names = 'data');do.call('within', argv)");
        check("TestrGenBuiltinwithin_testwithin1_848180660a72bcab410265b73db45ed4");
    }

    @Test
    public void TestrGenBuiltinwriteLines_testwriteLines1_d6f43d236f0f017f994619383dfd8fbc() {
        assertEval("argv <- structure(list(text = ' \\'  A  \\'; \\'B\\' ;\\'C\\';\\' D \\';\\'E \\';  F  ;G  ',     con = 'foo'), .Names = c('text', 'con'));do.call('writeLines', argv)");
        check("TestrGenBuiltinwriteLines_testwriteLines1_d6f43d236f0f017f994619383dfd8fbc");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm1_3b92963ab424a885d5c6f528462f1f42() {
        assertEval("argv <- list(structure(c(4L, 5L, 3L, 2L, 1L), .Label = c('McNeil', 'Ripley', 'Tierney', 'Tukey', 'Venables'), class = 'factor'));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm1_3b92963ab424a885d5c6f528462f1f42");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm10_f8f0943e85c01d94ad9001ab6a6b8ffa() {
        assertEval("argv <- list(structure(c(-0.00456054471709705, -0.0386783362736307, -0.0164476694679408, -0.191054486056936, -0.648560736432306, -0.0674820314025517, -0.0740415039370447, -0.0243389397466521, -0.00751319716764208, -2.290078352999e-05, -0.0207911295071267, -0.0697881087827301, -0.00348607275095251, -0.00951045408299201, -0.00166106374745221, -0.0259659490166321, -0.0293880116898911, -0.0140288480262381, -0.0027358575950958, -0.000491817024731849, -0.00823790481253382, -0.00148071888751321, -0.00122448210109329, -0.0168483392795904, -0.0206872529040578, -0.000471241810355829, -0.00239800266383851, -0.00875711097940079, -0.0461679706262251, -0.0100810672498937, -0.0758745277496017, -0.0537304828043233, -0.0171367489531612, -0.01057973675541, -0.0676085282986778, -0.069201293818924, -0.00065957876422003, -1.97617272327839e-05, -0.00439039022584134), .Names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75')));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm10_f8f0943e85c01d94ad9001ab6a6b8ffa");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm11_726960ee2f1187190691a56ecc43c4b6() {
        assertEval("argv <- list(structure(list(c(2L, 10L, 0L), c(2L, 10L, 1L), c(2L, 10L, 1L, 1L), c(2L, 11L, 0L), c(2L, 11L, 1L), c(2L, 11L, 1L, 1L), c(2L, 12L, 0L), c(2L, 12L, 1L), c(2L, 12L, 2L), c(2L, 12L, 2L, 1L), c(2L, 13L, 0L), c(2L, 13L, 1L), c(2L, 13L, 2L), c(2L, 14L, 0L), c(2L, 14L, 1L), c(2L, 14L, 2L), c(2L, 15L, 0L), c(2L, 15L, 1L), c(2L, 15L, 2L), c(2L, 15L, 3L), c(3L, 0L, 0L), c(3L, 0L, 1L)), class = 'numeric_version'));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm11_726960ee2f1187190691a56ecc43c4b6");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm12_81ff59eb39910cc2fe0d247d89009bc8() {
        assertEval("argv <- list(structure(list(c(2L, 11L, 0L)), class = 'numeric_version'));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm12_81ff59eb39910cc2fe0d247d89009bc8");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm13_ff0a798c69ed5b019fef5b0c5ebdf27f() {
        assertEval("argv <- list(structure(c(607L, 30L, 3L, 11L, 44L, 67L, 17L, 16L, 67L, 6L, 1L, 13L, 672L, 46L, 8L, 18L, 10L, 22L, 16L, 5L, 55L, 2L), .Dim = 22L, .Dimnames = structure(list(c('BUG FIXES', 'C-LEVEL FACILITIES', 'CODE MIGRATION', 'COMPRESSION', 'DEPRECATED & DEFUNCT', 'DEPRECATED AND DEFUNCT', 'GRAPHICS DEVICES', 'HELP & Rd FILE CHANGES', 'INSTALLATION', 'INTERNATIONALIZATION', 'LICENCE', 'LONG VECTORS', 'NEW FEATURES', 'PACKAGE INSTALLATION', 'PACKAGE parallel', 'PERFORMANCE IMPROVEMENTS', 'REGULAR EXPRESSIONS', 'SIGNIFICANT USER-VISIBLE CHANGES', 'SWEAVE & VIGNETTES', 'SWEAVE CHANGES', 'UTILITIES', 'WINDOWS-SPECIFIC CHANGES')), .Names = ''), class = 'table'));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm13_ff0a798c69ed5b019fef5b0c5ebdf27f");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm15_8541016496aacf9a5f574ea002ea5f39() {
        assertEval("argv <- list(structure(1:3, id = 'An Example', class = structure('numWithId',     package = '.GlobalEnv')));do.call('xtfrm', argv)");
        check("TestrGenBuiltinxtfrm_testxtfrm15_8541016496aacf9a5f574ea002ea5f39");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm2_b94a50966ea5e19698742d3e4c472f73() {
        assertEval("argv <- list(structure(c('Tukey', 'Venables', 'Tierney', 'Ripley', 'Ripley', 'McNeil', 'R Core'), class = 'AsIs'));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm2_b94a50966ea5e19698742d3e4c472f73");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm3_97dbd1c548746bab47ac2deb0726f3c6() {
        assertEval("argv <- list(c('9', '9', '8', '7', '6', '5', '4', '3', '2', '1'));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm3_97dbd1c548746bab47ac2deb0726f3c6");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm4_96c35e16b58d24b3e6506531adb92c89() {
        assertEval("argv <- list(list());xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm4_96c35e16b58d24b3e6506531adb92c89");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm5_1717ab01bb2368f6d10a950d12bf9feb() {
        assertEval("argv <- list(NULL);xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm5_1717ab01bb2368f6d10a950d12bf9feb");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm6_469f3bdc584c134e8095e29b6e93181f() {
        assertEval("argv <- list(structure(c(11354, 11382, 11413), class = 'Date'));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm6_469f3bdc584c134e8095e29b6e93181f");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm7_dff11923cc8e38d39e14a1d82396b6ed() {
        assertEval("argv <- list(structure(1:3, id = 'An Example', class = structure('numWithId', package = '.GlobalEnv')));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm7_dff11923cc8e38d39e14a1d82396b6ed");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm8_1f852c9d39f4b7de7a4f70b94b8477c1() {
        assertEval("argv <- list(structure(1:48, .Label = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48'), class = 'factor'));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm8_1f852c9d39f4b7de7a4f70b94b8477c1");
    }

    @Test
    public void TestrGenBuiltinxtfrm_testxtfrm9_5cc89686f3f0feb71aa223976d6bfa28() {
        assertEval("argv <- list(structure(c(0.00318983494910604, -0.0111499005186203, -0.00684577108225438, -0.0259425874127965, 0.0236273472621072, 0.0160653568112268, 0.0169512728197135, -0.0108668370208327, 0.0075620519889718, 0.000382355180538597, 0.0147085004994818, -0.0237528559595188, -0.00450253418485462, -0.00933970368616398, -0.00295998622541489, -0.0142621134100646, 0.0149334478604598, 0.0102146485133766, 0.00423575454949581, -0.00284331639280456, 0.0113535382887161, -0.00395897382574548, -0.00413390950862867, -0.0165713012838917, -0.018012405938438, 0.00225076128639717, 0.00786949110453678, 0.00890171601854386, 0.0241231688586559, 0.0104325796748375, 0.0267124035293778, -0.0242586202225146, 0.011564413201586, -0.00791916545648325, -0.020000071186273, -0.0160024870044187, 0.00243365269147765, 0.000371702019451462, 0.00543854321166064), .Names = c('1962.25', '1962.5', '1962.75', '1963', '1963.25', '1963.5', '1963.75', '1964', '1964.25', '1964.5', '1964.75', '1965', '1965.25', '1965.5', '1965.75', '1966', '1966.25', '1966.5', '1966.75', '1967', '1967.25', '1967.5', '1967.75', '1968', '1968.25', '1968.5', '1968.75', '1969', '1969.25', '1969.5', '1969.75', '1970', '1970.25', '1970.5', '1970.75', '1971', '1971.25', '1971.5', '1971.75')));xtfrm(argv[[1]]);");
        check("TestrGenBuiltinxtfrm_testxtfrm9_5cc89686f3f0feb71aa223976d6bfa28");
    }

}

