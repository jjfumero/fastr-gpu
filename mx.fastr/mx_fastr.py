#
# Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#
import subprocess, tempfile, shutil, filecmp
from os.path import join, sep
from argparse import ArgumentParser
import mx
import mx_graal
import os

def _runR(args, className, nonZeroIsFatal=True):
    os.environ['R_HOME'] = mx.suite('fastr').dir
    return mx_graal.vm(['-ea', '-esa', '-cp', mx.classpath("com.oracle.truffle.r.shell"), className] + args, nonZeroIsFatal=nonZeroIsFatal)

def runRCommand(args, nonZeroIsFatal=True):
    '''run R shell'''
    return _runR(args, "com.oracle.truffle.r.shell.RCommand", nonZeroIsFatal=nonZeroIsFatal)

def runRscriptCommand(args, nonZeroIsFatal=True):
    '''run Rscript file'''
    return _runR(args, "com.oracle.truffle.r.shell.RscriptCommand", nonZeroIsFatal=nonZeroIsFatal)

def _truffle_r_gate_body(args, tasks):
    _check_autogen_tests(False)
    t = mx_graal.Task('BuildHotSpotGraalServer: product')
    mx_graal.buildvms(['--vms', 'server', '--builds', 'product'])
    tasks.append(t.stop())

    with mx_graal.VM('server', 'product'):
        # check that the expected test output file is up to date
        t = mx_graal.Task('UnitTests: ExpectedTestOutput file check')
        junit(['--tests', _default_unit_tests(), '--check-expected-output'])
        tasks.append(t.stop())
        t = mx_graal.Task('UnitTests: simple')
        rc = junit(['--tests', _default_unit_tests()])
        if rc != 0:
            mx.abort('unit tests failed')
        tasks.append(t.stop())

    if args.jacocout is not None:
        mx_graal.jacocoreport([args.jacocout])

    mx_graal._jacoco = 'off'

def gate(args):
    '''Run the R gate'''
    # ideally would be a standard gate task - we do it early
    t = mx_graal.Task('Copyright check')
    rc = mx.checkcopyrights(['--primary'])
    t.stop()
    if rc != 0:
        mx.abort('copyright errors')
    _check_autogen_tests(True)
    mx_graal.gate(args, _truffle_r_gate_body)

_tempdir = None

def _check_autogen_tests(copy):
    # make copies of AllTests and FailingTests, as these will be regenerated by the gate
    # and may be out of sync
    test_srcdir = _test_srcdir()
    all_tests = join(test_srcdir, 'all', 'AllTests.java')
    failing_tests = join(test_srcdir, 'failing', 'FailingTests.java')
    global _tempdir
    if copy:
        _tempdir = tempfile.mkdtemp()
        shutil.copy(all_tests, _tempdir)
        shutil.copy(failing_tests, _tempdir)
    else:
        files_equal = filecmp.cmp(all_tests, join(_tempdir, 'AllTests.java')) and filecmp.cmp(failing_tests, join(_tempdir, 'FailingTests.java'))
        shutil.rmtree(_tempdir)
        if not files_equal:
            mx.abort('AllTests.java and/or FailingTests.java are out of sync, regenerate with mx rtestgen')

def _test_srcdir():
    tp = 'com.oracle.truffle.r.test'
    return join(mx.project(tp).dir, 'src', tp.replace('.', sep))

def _junit_r_harness(args, vmArgs, junitArgs):
    # always pass the directory where the expected output file should reside
    runlistener_arg = 'expected=' + _test_srcdir()
    # there should not be any unparsed arguments at this stage
    if args.remainder:
        mx.abort('unexpected arguments: ' + str(args.remainder).strip('[]') + '; did you forget --tests')

    def add_arg_separator():
        # can't update in Python 2.7
        arg = runlistener_arg
        if len(arg) > 0:
            arg += ','
        return arg

    if args.gen_fastr_output:
        runlistener_arg = add_arg_separator()
        runlistener_arg += 'gen-fastr=' + args.gen_fastr_output

    if args.check_expected_output:
        args.gen_expected_output = True
        runlistener_arg = add_arg_separator()
        runlistener_arg += 'check-expected'

    if args.gen_expected_output:
        runlistener_arg = add_arg_separator()
        runlistener_arg += 'gen-expected'
        if args.keep_trailing_whitespace:
            runlistener_arg = add_arg_separator()
            runlistener_arg += 'keep-trailing-whitespace'

    if args.gen_diff_output:
        runlistener_arg = add_arg_separator()
        runlistener_arg += 'gen-diff=' + args.gen_diff_output

#    if args.test_methods:
#        runlistener_arg = add_arg_separator()
#        runlistener_arg = 'test-methods=' + args.test_methods

    # use a custom junit.RunListener
    runlistener = 'com.oracle.truffle.r.test.TestBase$RunListener'
    if len(runlistener_arg) > 0:
        runlistener += ':' + runlistener_arg

    junitArgs += ['--runlistener', runlistener]
    return mx.run_java(vmArgs + junitArgs, nonZeroIsFatal=False)

def junit(args):
    '''run R Junit tests'''
    parser = ArgumentParser(prog='r junit')
    parser.add_argument('--gen-expected-output', action='store_true', help='generate/update expected test output file')
    parser.add_argument('--keep-trailing-whitespace', action='store_true', help='keep trailing whitespace in expected test output file')
    parser.add_argument('--check-expected-output', action='store_true', help='check but do not update expected test output file')
    parser.add_argument('--gen-fastr-output', action='store', metavar='<path>', help='generate FastR test output file')
    parser.add_argument('--gen-diff-output', action='store', metavar='<path>', help='generate difference test output file ')
    # parser.add_argument('--test-methods', action='store', help='pattern to match test methods in test classes')

    return mx.junit(args, _junit_r_harness, parser=parser)

def junit_simple(args):
    junit(['--tests', 'com.oracle.truffle.r.test.simple'] + args)

def _default_unit_tests():
    return 'com.oracle.truffle.r.test.simple'

def testgen(args):
    '''generate the expected output for unit tests, and All/Failing test classes'''
    # clean the test project to invoke the test analyzer AP
    testOnly = ['--projects', 'com.oracle.truffle.r.test']
    mx.clean(testOnly)
    mx.build(testOnly)
    # now just invoke junit with the appropriate options
    junit(args + ['--tests', _default_unit_tests(), '--gen-expected-output'])

_fastr_suite = None

def rbench(args):
    '''run a one or more R benchmarks'''
    parser = ArgumentParser(prog='mx rbench')
    parser.add_argument('bm', action='store', metavar='benchmarkgroup.name', help='comma separated list of benchmarks to run')
    parser.add_argument('--path', action='store_true', help='print path to benchmark')
    parser.add_argument('--gnur', action='store_true', help='run under GnuR')
    parser.add_argument('--fail-fast', action='store_true', help='abort on first failure')
    parser.add_argument('--gnur-jit', action='store_true', help='enable GnuR JIT')
    args = parser.parse_args(args)

    # dynamically load the benchmarks suite
    hg_base = mx.get_env('HG_BASE')
    alternate = None if hg_base is None else join(hg_base, 'r_benchmarks')
    bm_suite = _fastr_suite.import_suite('r_benchmarks', version=None, alternate=alternate)
    mx.build_suite(bm_suite)

    bms = args.bm.split(',')
    failure = 0
    for bm in bms:
        # Get the R script location via helper app
        # N.B. we do not use mx.run_java() as that might check options we don't want for the helper, e.g. debugging agent
        rc = 0
        javacmd = [mx.java().java, '-cp', mx.classpath('r.benchmarks'), 'r.benchmarks.RBenchmarks', bm]
        try:
            bmpath = subprocess.check_output(javacmd).rstrip()
            if args.path:
                print bmpath
            else:
                headline = ('GnuR' if args.gnur else 'FastR') + ' running ' + bm
                print headline
                command = ['-f', bmpath]
                if args.gnur:
                    env = os.environ
                    if args.gnur_jit:
                        env['R_ENABLE_JIT'] = '3'
                    rc = subprocess.call(['R', '--slave'] + command, env=env)
                else:
                    rc = runRCommand(command, nonZeroIsFatal=False)
                if rc != 0:
                    print 'benchmark ' + bm + ' failed'
                    emsg = rc
        except subprocess.CalledProcessError:
            emsg = 'benchmark ' + bm + ' not found'
            rc = 1
        # check error and fail-fast option
        if rc != 0:
            failure = failure > rc if failure else rc
            if args.fail_fast:
                mx.abort(emsg)
    # if any failed
    return failure

def _bench_harness_body(args, vmArgs):
    marks = ('shootout.binarytrees,shootout.fannkuchredux,shootout.fasta,shootout.fastaredux,'
             'shootout.knucleotide,shootout.mandelbrot-ascii,shootout.nbody,shootout.pidigits,'
             'shootout.regexdna,shootout.reversecomplement,shootout.spectralnorm')
    return rbench(marks)

def bench(args):
    '''Run a standard set of R benchmarks'''
    # In the automatic benchmark context, the vm will neither be built nor set.
    # In interactive (development) use, if it is set (interactive use) we use it, otherwise we choose the server variant.
    # The build component of mx.bench causes the vm to be built.

    vm = mx_graal.VM('server' if mx_graal._vm is None else mx_graal._vm)
    with vm:
        mx.bench(args, harness=_bench_harness_body)

def mx_init(suite):
    global _fastr_suite
    _fastr_suite = suite
    commands = {
        # new commands
        'r' : [runRCommand, '[options]'],
        'R' : [runRCommand, '[options]'],
        'rscript' : [runRscriptCommand, '[options]'],
        'Rscript' : [runRscriptCommand, '[options]'],
        'rtestgen' : [testgen, ''],
        'rbench' : [rbench, 'options'],
        # core overrides
        'gate' : [gate, ''],
        'bench' : [bench, 'options'],
        'junit' : [junit, ['options']],
        'junitsimple' : [junit_simple, ['options']],
    }
    mx.update_commands(suite, commands)

